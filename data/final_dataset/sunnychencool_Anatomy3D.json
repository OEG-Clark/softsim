{"home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.None.run.fetch": [[130, 184], ["keypoints[].keys", "len", "len", "range", "range", "len", "int", "common.utils.deterministic_random", "range", "len", "out_poses_2d.append", "dataset.cameras", "range", "str", "len", "action.startswith", "dataset.cameras", "len", "len", "len", "len", "len", "out_poses_3d.append", "round", "len", "out_camera_params.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.utils.deterministic_random", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.mocap_dataset.MocapDataset.cameras", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.mocap_dataset.MocapDataset.cameras"], ["def", "fetch", "(", "subjects", ",", "action_filter", "=", "None", ",", "subset", "=", "1", ",", "parse_3d_poses", "=", "True", ")", ":", "\n", "    ", "out_poses_3d", "=", "[", "]", "\n", "out_poses_2d", "=", "[", "]", "\n", "out_camera_params", "=", "[", "]", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "for", "a", "in", "action_filter", ":", "\n", "                    ", "if", "action", ".", "startswith", "(", "a", ")", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "poses_2d", "=", "keypoints", "[", "subject", "]", "[", "action", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_2d", ")", ")", ":", "# Iterate across cameras", "\n", "                ", "out_poses_2d", ".", "append", "(", "poses_2d", "[", "i", "]", ")", "\n", "\n", "", "if", "subject", "in", "dataset", ".", "cameras", "(", ")", ":", "\n", "                ", "cams", "=", "dataset", ".", "cameras", "(", ")", "[", "subject", "]", "\n", "assert", "len", "(", "cams", ")", "==", "len", "(", "poses_2d", ")", ",", "'Camera count mismatch'", "\n", "for", "cam", "in", "cams", ":", "\n", "                    ", "if", "'intrinsic'", "in", "cam", ":", "\n", "                        ", "out_camera_params", ".", "append", "(", "cam", "[", "'intrinsic'", "]", ")", "\n", "\n", "", "", "", "if", "parse_3d_poses", "and", "'positions_3d'", "in", "dataset", "[", "subject", "]", "[", "action", "]", ":", "\n", "                ", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "assert", "len", "(", "poses_3d", ")", "==", "len", "(", "poses_2d", ")", ",", "'Camera count mismatch'", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "# Iterate across cameras", "\n", "                    ", "out_poses_3d", ".", "append", "(", "poses_3d", "[", "i", "]", ")", "\n", "\n", "", "", "", "", "if", "len", "(", "out_camera_params", ")", "==", "0", ":", "\n", "        ", "out_camera_params", "=", "None", "\n", "", "if", "len", "(", "out_poses_3d", ")", "==", "0", ":", "\n", "        ", "out_poses_3d", "=", "None", "\n", "\n", "", "stride", "=", "args", ".", "downsample", "\n", "if", "subset", "<", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "out_poses_2d", ")", ")", ":", "\n", "            ", "n_frames", "=", "int", "(", "round", "(", "len", "(", "out_poses_2d", "[", "i", "]", ")", "//", "stride", "*", "subset", ")", "*", "stride", ")", "\n", "start", "=", "deterministic_random", "(", "0", ",", "len", "(", "out_poses_2d", "[", "i", "]", ")", "-", "n_frames", "+", "1", ",", "str", "(", "len", "(", "out_poses_2d", "[", "i", "]", ")", ")", ")", "\n", "out_poses_2d", "[", "i", "]", "=", "out_poses_2d", "[", "i", "]", "[", "start", ":", "start", "+", "n_frames", ":", "stride", "]", "\n", "if", "out_poses_3d", "is", "not", "None", ":", "\n", "                ", "out_poses_3d", "[", "i", "]", "=", "out_poses_3d", "[", "i", "]", "[", "start", ":", "start", "+", "n_frames", ":", "stride", "]", "\n", "", "", "", "elif", "stride", ">", "1", ":", "\n", "# Downsample as requested", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "out_poses_2d", ")", ")", ":", "\n", "            ", "out_poses_2d", "[", "i", "]", "=", "out_poses_2d", "[", "i", "]", "[", ":", ":", "stride", "]", "\n", "if", "out_poses_3d", "is", "not", "None", ":", "\n", "                ", "out_poses_3d", "[", "i", "]", "=", "out_poses_3d", "[", "i", "]", "[", ":", ":", "stride", "]", "\n", "\n", "\n", "", "", "", "return", "out_camera_params", ",", "out_poses_3d", ",", "out_poses_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.None.run.evaluate": [[423, 489], ["print", "print", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_pos.eval", "test_generator.next_epoch", "print", "print", "test_generator.augment_enabled", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "inputs_2d.cuda.view", "model_pos", "test_generator.augment_enabled", "test_generator.augment_enabled", "int", "common.loss.mpjpe", "inputs_3d.cuda.cpu().numpy().reshape", "torch.mean.cpu().numpy().reshape", "batch_2d.astype", "inputs_2d.cuda.cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "inputs_2d.cuda.size", "inputs_2d.cuda.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean.squeeze().cpu().numpy", "common.loss.n_mpjpe().item", "common.loss.mpjpe.item", "common.loss.p_mpjpe", "common.loss.mean_velocity_error", "batch.astype", "inputs_3d.cuda.cuda", "inputs_3d.cuda.cpu().numpy", "torch.mean.cpu().numpy", "torch.mean.squeeze().cpu", "inputs_3d.cuda.size", "torch.mean.size", "common.loss.n_mpjpe", "inputs_3d.cuda.size", "inputs_3d.cuda.cpu", "torch.mean.cpu", "torch.mean.squeeze"], "function", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.UnchunkedGenerator.next_epoch", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.UnchunkedGenerator.augment_enabled", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.UnchunkedGenerator.augment_enabled", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.UnchunkedGenerator.augment_enabled", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.mpjpe", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.p_mpjpe", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.mean_velocity_error", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.n_mpjpe"], ["", "", "", "def", "evaluate", "(", "test_generator", ",", "action", "=", "None", ",", "return_predictions", "=", "False", ")", ":", "\n", "    ", "epoch_loss_3d_pos", "=", "0", "\n", "epoch_loss_3d_pos_procrustes", "=", "0", "\n", "epoch_loss_3d_pos_scale", "=", "0", "\n", "epoch_loss_3d_vel", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model_pos", ".", "eval", "(", ")", "\n", "N", "=", "0", "\n", "for", "_", ",", "batch", ",", "batch_2d", "in", "test_generator", ".", "next_epoch", "(", ")", ":", "\n", "            ", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "\n", "# Positional model", "\n", "", "if", "batch", "is", "not", "None", ":", "\n", "              ", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "", "inputs_3d", "[", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "\n", "", "inputs_2d", "=", "inputs_2d", ".", "view", "(", "inputs_2d", ".", "size", "(", "0", ")", ",", "inputs_2d", ".", "size", "(", "1", ")", ",", "-", "1", ",", "3", ")", "\n", "predicted_3d_pos", "=", "model_pos", "(", "inputs_2d", ")", "\n", "\n", "if", "test_generator", ".", "augment_enabled", "(", ")", ":", "\n", "              ", "if", "batch", "is", "not", "None", ":", "\n", "                ", "inputs_3d", "=", "inputs_3d", "[", ":", "1", "]", "\n", "", "", "if", "test_generator", ".", "augment_enabled", "(", ")", ":", "\n", "# Undo flipping and take average with non-flipped version", "\n", "                ", "predicted_3d_pos", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "predicted_3d_pos", "[", "1", ",", ":", ",", "joints_left", "+", "joints_right", "]", "=", "predicted_3d_pos", "[", "1", ",", ":", ",", "joints_right", "+", "joints_left", "]", "\n", "predicted_3d_pos", "=", "torch", ".", "mean", "(", "predicted_3d_pos", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "if", "return_predictions", ":", "\n", "                ", "return", "predicted_3d_pos", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "pad", "=", "int", "(", "(", "inputs_3d", ".", "size", "(", "1", ")", "-", "predicted_3d_pos", ".", "size", "(", "1", ")", ")", "/", "2", ")", "\n", "inputs_3d", "=", "inputs_3d", "[", ":", ",", "pad", ":", "inputs_3d", ".", "size", "(", "1", ")", "-", "pad", "]", "\n", "error", "=", "mpjpe", "(", "predicted_3d_pos", ",", "inputs_3d", ")", "\n", "epoch_loss_3d_pos_scale", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "n_mpjpe", "(", "predicted_3d_pos", ",", "inputs_3d", ")", ".", "item", "(", ")", "\n", "\n", "epoch_loss_3d_pos", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "error", ".", "item", "(", ")", "\n", "N", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "\n", "\n", "inputs", "=", "inputs_3d", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "inputs_3d", ".", "shape", "[", "-", "2", "]", ",", "inputs_3d", ".", "shape", "[", "-", "1", "]", ")", "\n", "predicted_3d_pos", "=", "predicted_3d_pos", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "inputs_3d", ".", "shape", "[", "-", "2", "]", ",", "inputs_3d", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "epoch_loss_3d_pos_procrustes", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "p_mpjpe", "(", "predicted_3d_pos", ",", "inputs", ")", "\n", "\n", "# Compute velocity error", "\n", "epoch_loss_3d_vel", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "mean_velocity_error", "(", "predicted_3d_pos", ",", "inputs", ")", "\n", "\n", "", "", "if", "action", "is", "None", ":", "\n", "        ", "print", "(", "'----------'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'----'", "+", "action", "+", "'----'", ")", "\n", "", "e1", "=", "(", "epoch_loss_3d_pos", "/", "N", ")", "*", "1000", "\n", "e2", "=", "(", "epoch_loss_3d_pos_procrustes", "/", "N", ")", "*", "1000", "\n", "e3", "=", "(", "epoch_loss_3d_pos_scale", "/", "N", ")", "*", "1000", "\n", "ev", "=", "(", "epoch_loss_3d_vel", "/", "N", ")", "*", "1000", "\n", "print", "(", "'Test time augmentation:'", ",", "test_generator", ".", "augment_enabled", "(", ")", ")", "\n", "print", "(", "'Protocol #1 Error (MPJPE):'", ",", "e1", ",", "'mm'", ")", "\n", "print", "(", "'Protocol #2 Error (P-MPJPE):'", ",", "e2", ",", "'mm'", ")", "\n", "print", "(", "'Protocol #3 Error (N-MPJPE):'", ",", "e3", ",", "'mm'", ")", "\n", "print", "(", "'Velocity Error (MPJVE):'", ",", "ev", ",", "'mm'", ")", "\n", "print", "(", "'----------'", ")", "\n", "\n", "return", "e1", ",", "e2", ",", "e3", ",", "ev", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.h36m_dataset.Human36mDataset.__init__": [[210, 252], ["common.mocap_dataset.MocapDataset.__init__", "copy.deepcopy", "h36m_dataset.Human36mDataset._cameras.values", "[].item", "[].item.items", "enumerate", "actions.items", "h36m_dataset.Human36mDataset.remove_joints", "cam.update", "cam.items", "common.camera.normalize_screen_coordinates().astype", "numpy.concatenate", "numpy.load", "numpy.array", "common.camera.normalize_screen_coordinates"], "methods", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.__init__", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.remove_joints", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.camera.normalize_screen_coordinates"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "remove_static_joints", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fps", "=", "50", ",", "skeleton", "=", "h36m_skeleton", ")", "\n", "\n", "self", ".", "_cameras", "=", "copy", ".", "deepcopy", "(", "h36m_cameras_extrinsic_params", ")", "\n", "for", "cameras", "in", "self", ".", "_cameras", ".", "values", "(", ")", ":", "\n", "            ", "for", "i", ",", "cam", "in", "enumerate", "(", "cameras", ")", ":", "\n", "                ", "cam", ".", "update", "(", "h36m_cameras_intrinsic_params", "[", "i", "]", ")", "\n", "for", "k", ",", "v", "in", "cam", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", "not", "in", "[", "'id'", ",", "'res_w'", ",", "'res_h'", "]", ":", "\n", "                        ", "cam", "[", "k", "]", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Normalize camera frame", "\n", "", "", "cam", "[", "'center'", "]", "=", "normalize_screen_coordinates", "(", "cam", "[", "'center'", "]", ",", "w", "=", "cam", "[", "'res_w'", "]", ",", "h", "=", "cam", "[", "'res_h'", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "cam", "[", "'focal_length'", "]", "=", "cam", "[", "'focal_length'", "]", "/", "cam", "[", "'res_w'", "]", "*", "2", "\n", "if", "'translation'", "in", "cam", ":", "\n", "                    ", "cam", "[", "'translation'", "]", "=", "cam", "[", "'translation'", "]", "/", "1000", "# mm to meters", "\n", "\n", "# Add intrinsic parameters vector", "\n", "", "cam", "[", "'intrinsic'", "]", "=", "np", ".", "concatenate", "(", "(", "cam", "[", "'focal_length'", "]", ",", "\n", "cam", "[", "'center'", "]", ",", "\n", "cam", "[", "'radial_distortion'", "]", ",", "\n", "cam", "[", "'tangential_distortion'", "]", ")", ")", "\n", "\n", "# Load serialized dataset", "\n", "", "", "data", "=", "np", ".", "load", "(", "path", ")", "[", "'positions_3d'", "]", ".", "item", "(", ")", "\n", "\n", "self", ".", "_data", "=", "{", "}", "\n", "for", "subject", ",", "actions", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_data", "[", "subject", "]", "=", "{", "}", "\n", "for", "action_name", ",", "positions", "in", "actions", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_data", "[", "subject", "]", "[", "action_name", "]", "=", "{", "\n", "'positions'", ":", "positions", ",", "\n", "'cameras'", ":", "self", ".", "_cameras", "[", "subject", "]", ",", "\n", "}", "\n", "\n", "", "", "if", "remove_static_joints", ":", "\n", "# Bring the skeleton to 17 joints instead of the original 32", "\n", "            ", "self", ".", "remove_joints", "(", "[", "4", ",", "5", ",", "9", ",", "10", ",", "11", ",", "16", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "28", ",", "29", ",", "30", ",", "31", "]", ")", "\n", "\n", "# Rewire shoulders to the correct parents", "\n", "self", ".", "_skeleton", ".", "_parents", "[", "11", "]", "=", "8", "\n", "self", ".", "_skeleton", ".", "_parents", "[", "14", "]", "=", "8", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.h36m_dataset.Human36mDataset.supports_semi_supervised": [[253, 255], ["None"], "methods", ["None"], ["", "", "def", "supports_semi_supervised", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.camera.normalize_screen_coordinates": [[14, 19], ["None"], "function", ["None"], ["def", "normalize_screen_coordinates", "(", "X", ",", "w", ",", "h", ")", ":", "\n", "    ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "# Normalize so that [0, w] is mapped to [-1, 1], while preserving the aspect ratio", "\n", "return", "X", "/", "w", "*", "2", "-", "[", "1", ",", "h", "/", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.camera.image_coordinates": [[21, 26], ["None"], "function", ["None"], ["", "def", "image_coordinates", "(", "X", ",", "w", ",", "h", ")", ":", "\n", "    ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "# Reverse camera frame normalization", "\n", "return", "(", "X", "+", "[", "1", ",", "h", "/", "w", "]", ")", "*", "w", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.camera.world_to_camera": [[28, 31], ["common.utils.wrap", "common.utils.wrap", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.utils.wrap", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.utils.wrap"], ["", "def", "world_to_camera", "(", "X", ",", "R", ",", "t", ")", ":", "\n", "    ", "Rt", "=", "wrap", "(", "qinverse", ",", "R", ")", "# Invert rotation", "\n", "return", "wrap", "(", "qrot", ",", "np", ".", "tile", "(", "Rt", ",", "(", "*", "X", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ")", ",", "X", "-", "t", ")", "# Rotate and translate", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.camera.camera_to_world": [[33, 35], ["common.utils.wrap", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.utils.wrap"], ["", "def", "camera_to_world", "(", "X", ",", "R", ",", "t", ")", ":", "\n", "    ", "return", "wrap", "(", "qrot", ",", "np", ".", "tile", "(", "R", ",", "(", "*", "X", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ")", ",", "X", ")", "+", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.camera.project_to_2d": [[37, 68], ["torch.clamp", "torch.sum", "torch.sum", "len", "len", "len", "camera_params.unsqueeze.unsqueeze", "torch.sum", "len", "torch.cat", "len", "len", "len"], "function", ["None"], ["", "def", "project_to_2d", "(", "X", ",", "camera_params", ")", ":", "\n", "    ", "\"\"\"\n    Project 3D points to 2D using the Human3.6M camera projection function.\n    This is a differentiable and batched reimplementation of the original MATLAB script.\n    \n    Arguments:\n    X -- 3D points in *camera space* to transform (N, *, 3)\n    camera_params -- intrinsic parameteres (N, 2+2+3+2=9)\n    \"\"\"", "\n", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "len", "(", "camera_params", ".", "shape", ")", "==", "2", "\n", "assert", "camera_params", ".", "shape", "[", "-", "1", "]", "==", "9", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "camera_params", ".", "shape", "[", "0", "]", "\n", "\n", "while", "len", "(", "camera_params", ".", "shape", ")", "<", "len", "(", "X", ".", "shape", ")", ":", "\n", "        ", "camera_params", "=", "camera_params", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "f", "=", "camera_params", "[", "...", ",", ":", "2", "]", "\n", "c", "=", "camera_params", "[", "...", ",", "2", ":", "4", "]", "\n", "k", "=", "camera_params", "[", "...", ",", "4", ":", "7", "]", "\n", "p", "=", "camera_params", "[", "...", ",", "7", ":", "]", "\n", "\n", "XX", "=", "torch", ".", "clamp", "(", "X", "[", "...", ",", ":", "2", "]", "/", "X", "[", "...", ",", "2", ":", "]", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "r2", "=", "torch", ".", "sum", "(", "XX", "[", "...", ",", ":", "2", "]", "**", "2", ",", "dim", "=", "len", "(", "XX", ".", "shape", ")", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "radial", "=", "1", "+", "torch", ".", "sum", "(", "k", "*", "torch", ".", "cat", "(", "(", "r2", ",", "r2", "**", "2", ",", "r2", "**", "3", ")", ",", "dim", "=", "len", "(", "r2", ".", "shape", ")", "-", "1", ")", ",", "dim", "=", "len", "(", "r2", ".", "shape", ")", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "tan", "=", "torch", ".", "sum", "(", "p", "*", "XX", ",", "dim", "=", "len", "(", "XX", ".", "shape", ")", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "XXX", "=", "XX", "*", "(", "radial", "+", "tan", ")", "+", "p", "*", "r2", "\n", "\n", "return", "f", "*", "XXX", "+", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.camera.project_to_2d_linear": [[69, 91], ["torch.clamp", "len", "len", "len", "camera_params.unsqueeze.unsqueeze"], "function", ["None"], ["", "def", "project_to_2d_linear", "(", "X", ",", "camera_params", ")", ":", "\n", "    ", "\"\"\"\n    Project 3D points to 2D using only linear parameters (focal length and principal point).\n    \n    Arguments:\n    X -- 3D points in *camera space* to transform (N, *, 3)\n    camera_params -- intrinsic parameteres (N, 2+2+3+2=9)\n    \"\"\"", "\n", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "len", "(", "camera_params", ".", "shape", ")", "==", "2", "\n", "assert", "camera_params", ".", "shape", "[", "-", "1", "]", "==", "9", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "camera_params", ".", "shape", "[", "0", "]", "\n", "\n", "while", "len", "(", "camera_params", ".", "shape", ")", "<", "len", "(", "X", ".", "shape", ")", ":", "\n", "        ", "camera_params", "=", "camera_params", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "f", "=", "camera_params", "[", "...", ",", ":", "2", "]", "\n", "c", "=", "camera_params", "[", "...", ",", "2", ":", "4", "]", "\n", "\n", "XX", "=", "torch", ".", "clamp", "(", "X", "[", "...", ",", ":", "2", "]", "/", "X", "[", "...", ",", "2", ":", "]", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "\n", "return", "f", "*", "XX", "+", "c", "", "", ""]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.bone.getbonejs": [[11, 24], ["seq.view.size", "seq.view.size", "seq.view.view", "range", "torch.stack", "bone.view.view", "seq.view.size", "seq.view.size", "range", "bone.view.size", "bone.view.append"], "function", ["None"], ["def", "getbonejs", "(", "seq", ",", "boneindex", ")", ":", "\n", "    ", "bs", "=", "seq", ".", "size", "(", "0", ")", "\n", "ss", "=", "seq", ".", "size", "(", "1", ")", "\n", "seq", "=", "seq", ".", "view", "(", "-", "1", ",", "seq", ".", "size", "(", "2", ")", ",", "seq", ".", "size", "(", "3", ")", ")", "\n", "bone", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "17", ")", ":", "\n", "#for j in range(i+1,17) is also OK", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "17", ")", ":", "\n", "            ", "if", "not", "(", "[", "i", ",", "j", "]", "in", "boneindex", "or", "[", "j", ",", "i", "]", "in", "boneindex", ")", ":", "\n", "                ", "bone", ".", "append", "(", "seq", "[", ":", ",", "j", "]", "-", "seq", "[", ":", ",", "i", "]", ")", "\n", "", "", "", "bone", "=", "torch", ".", "stack", "(", "bone", ",", "1", ")", "\n", "bone", "=", "bone", ".", "view", "(", "bs", ",", "ss", ",", "bone", ".", "size", "(", "1", ")", ",", "3", ")", "\n", "return", "bone", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.bone.getbonelength": [[26, 37], ["seq.view.size", "seq.view.size", "seq.view.view", "torch.stack", "torch.pow", "bone.view.view", "seq.view.size", "seq.view.size", "bone.view.append", "torch.pow().sum", "bone.view.size", "torch.pow"], "function", ["None"], ["", "def", "getbonelength", "(", "seq", ",", "boneindex", ")", ":", "\n", "    ", "bs", "=", "seq", ".", "size", "(", "0", ")", "\n", "ss", "=", "seq", ".", "size", "(", "1", ")", "\n", "seq", "=", "seq", ".", "view", "(", "-", "1", ",", "seq", ".", "size", "(", "2", ")", ",", "seq", ".", "size", "(", "3", ")", ")", "\n", "bone", "=", "[", "]", "\n", "for", "index", "in", "boneindex", ":", "\n", "        ", "bone", ".", "append", "(", "seq", "[", ":", ",", "index", "[", "0", "]", "]", "-", "seq", "[", ":", ",", "index", "[", "1", "]", "]", ")", "\n", "", "bone", "=", "torch", ".", "stack", "(", "bone", ",", "1", ")", "\n", "bone", "=", "torch", ".", "pow", "(", "torch", ".", "pow", "(", "bone", ",", "2", ")", ".", "sum", "(", "2", ")", ",", "0.5", ")", "\n", "bone", "=", "bone", ".", "view", "(", "bs", ",", "ss", ",", "bone", ".", "size", "(", "1", ")", ")", "\n", "return", "bone", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.bone.getbonedirect": [[39, 51], ["seq.view.size", "seq.view.size", "seq.view.view", "torch.stack", "torch.pow().unsqueeze", "bonedirect.view.view", "seq.view.size", "seq.view.size", "bone.append", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "getbonedirect", "(", "seq", ",", "boneindex", ")", ":", "\n", "    ", "bs", "=", "seq", ".", "size", "(", "0", ")", "\n", "ss", "=", "seq", ".", "size", "(", "1", ")", "\n", "seq", "=", "seq", ".", "view", "(", "-", "1", ",", "seq", ".", "size", "(", "2", ")", ",", "seq", ".", "size", "(", "3", ")", ")", "\n", "bone", "=", "[", "]", "\n", "for", "index", "in", "boneindex", ":", "\n", "        ", "bone", ".", "append", "(", "seq", "[", ":", ",", "index", "[", "0", "]", "]", "-", "seq", "[", ":", ",", "index", "[", "1", "]", "]", ")", "\n", "", "bonedirect", "=", "torch", ".", "stack", "(", "bone", ",", "1", ")", "\n", "bonesum", "=", "torch", ".", "pow", "(", "torch", ".", "pow", "(", "bonedirect", ",", "2", ")", ".", "sum", "(", "2", ")", ",", "0.5", ")", ".", "unsqueeze", "(", "2", ")", "\n", "bonedirect", "=", "bonedirect", "/", "bonesum", "\n", "bonedirect", "=", "bonedirect", ".", "view", "(", "bs", ",", "-", "1", ",", "3", ")", "\n", "return", "bonedirect", "\n", "", ""]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.mocap_dataset.MocapDataset.__init__": [[12, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fps", ",", "skeleton", ")", ":", "\n", "        ", "self", ".", "_skeleton", "=", "skeleton", "\n", "self", ".", "_fps", "=", "fps", "\n", "self", ".", "_data", "=", "None", "# Must be filled by subclass", "\n", "self", ".", "_cameras", "=", "None", "# Must be filled by subclass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.mocap_dataset.MocapDataset.remove_joints": [[18, 24], ["mocap_dataset.MocapDataset._skeleton.remove_joints", "mocap_dataset.MocapDataset._data.keys", "mocap_dataset.MocapDataset._data[].keys"], "methods", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.remove_joints"], ["", "def", "remove_joints", "(", "self", ",", "joints_to_remove", ")", ":", "\n", "        ", "kept_joints", "=", "self", ".", "_skeleton", ".", "remove_joints", "(", "joints_to_remove", ")", "\n", "for", "subject", "in", "self", ".", "_data", ".", "keys", "(", ")", ":", "\n", "            ", "for", "action", "in", "self", ".", "_data", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "                ", "s", "=", "self", ".", "_data", "[", "subject", "]", "[", "action", "]", "\n", "s", "[", "'positions'", "]", "=", "s", "[", "'positions'", "]", "[", ":", ",", "kept_joints", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.mocap_dataset.MocapDataset.__getitem__": [[26, 28], ["None"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.mocap_dataset.MocapDataset.subjects": [[29, 31], ["mocap_dataset.MocapDataset._data.keys"], "methods", ["None"], ["", "def", "subjects", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.mocap_dataset.MocapDataset.fps": [[32, 34], ["None"], "methods", ["None"], ["", "def", "fps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_fps", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.mocap_dataset.MocapDataset.skeleton": [[35, 37], ["None"], "methods", ["None"], ["", "def", "skeleton", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_skeleton", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.mocap_dataset.MocapDataset.cameras": [[38, 40], ["None"], "methods", ["None"], ["", "def", "cameras", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.mocap_dataset.MocapDataset.supports_semi_supervised": [[41, 44], ["None"], "methods", ["None"], ["", "def", "supports_semi_supervised", "(", "self", ")", ":", "\n", "# This method can be overridden", "\n", "        ", "return", "False", "", "", "", ""]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.arguments.parse_args": [[10, 98], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args", "print", "exit", "print", "exit"], "function", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.arguments.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Training script'", ")", "\n", "\n", "# General arguments", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--dataset'", ",", "default", "=", "'h36m'", ",", "type", "=", "str", ",", "metavar", "=", "'NAME'", ",", "help", "=", "'target dataset'", ")", "# h36m or humaneva", "\n", "parser", ".", "add_argument", "(", "'-k'", ",", "'--keypoints'", ",", "default", "=", "'cpn_ft_h36m_dbb'", ",", "type", "=", "str", ",", "metavar", "=", "'NAME'", ",", "help", "=", "'2D detections to use'", ")", "\n", "parser", ".", "add_argument", "(", "'-str'", ",", "'--subjects-train'", ",", "default", "=", "'S1,S5,S6,S7,S8'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'training subjects separated by comma'", ")", "\n", "parser", ".", "add_argument", "(", "'-ste'", ",", "'--subjects-test'", ",", "default", "=", "'S9,S11'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "help", "=", "'test subjects separated by comma'", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--actions'", ",", "default", "=", "'*'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'actions to train/test on, separated by comma, or * for all'", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--checkpoint'", ",", "default", "=", "'checkpoint'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'checkpoint directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint-frequency'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'create a checkpoint every N epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--eva-frequency'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'do end-of-epoch evaluation every N epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'FILENAME'", ",", "\n", "help", "=", "'checkpoint to resume (file name)'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'FILENAME'", ",", "help", "=", "'checkpoint to evaluate (file name)'", ")", "\n", "parser", ".", "add_argument", "(", "'--render'", ",", "action", "=", "'store_true'", ",", "help", "=", "'visualize a particular video'", ")", "\n", "parser", ".", "add_argument", "(", "'--by-subject'", ",", "action", "=", "'store_true'", ",", "help", "=", "'break down error by subject (on evaluation)'", ")", "\n", "parser", ".", "add_argument", "(", "'--export-training-curves'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save training curves as .png images'", ")", "\n", "parser", ".", "add_argument", "(", "'-bi'", ",", "'--boneindex'", ",", "default", "=", "'16,15,15,14,13,12,12,11,10,9,9,8,8,7,8,11,8,14,7,0,3,2,2,1,6,5,5,4,1,0,4,0'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "help", "=", "'bone index (each two indexs correspond to the two joints a bone)'", ")", "\n", "\n", "# Model arguments", "\n", "#-s should be fixed to 1", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--stride'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'chunk size to use during training'", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--epochs'", ",", "default", "=", "80", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch-size'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'batch size in terms of predicted frames'", ")", "\n", "parser", ".", "add_argument", "(", "'-drop'", ",", "'--dropout'", ",", "default", "=", "0.25", ",", "type", "=", "float", ",", "metavar", "=", "'P'", ",", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "'--learning-rate'", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'-lrd'", ",", "'--lr-decay'", ",", "default", "=", "0.95", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "help", "=", "'learning rate decay per epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'-no-da'", ",", "'--no-data-augmentation'", ",", "dest", "=", "'data_augmentation'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'disable train-time flipping'", ")", "\n", "parser", ".", "add_argument", "(", "'-no-tta'", ",", "'--no-test-time-augmentation'", ",", "dest", "=", "'test_time_augmentation'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'disable test-time flipping'", ")", "\n", "parser", ".", "add_argument", "(", "'-arc'", ",", "'--architecture'", ",", "default", "=", "'3,3,3'", ",", "type", "=", "str", ",", "metavar", "=", "'LAYERS'", ",", "help", "=", "'filter widths separated by comma'", ")", "\n", "parser", ".", "add_argument", "(", "'--causal'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use causal convolutions for real-time processing'", ")", "\n", "parser", ".", "add_argument", "(", "'-ch'", ",", "'--channels'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of channels in convolution layers'", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--randnum'", ",", "default", "=", "'50'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of randomly sampled frames for bone length prediction'", ")", "\n", "parser", ".", "add_argument", "(", "'-de'", ",", "'--augdegree'", ",", "default", "=", "'0.6'", ",", "type", "=", "float", ",", "metavar", "=", "'H'", ",", "help", "=", "'bone length augmentation degree'", ")", "\n", "parser", ".", "add_argument", "(", "'-tem'", ",", "'--temperature'", ",", "default", "=", "'10'", ",", "type", "=", "float", ",", "metavar", "=", "'H'", ",", "help", "=", "'temperature (attention degree) of the bone length attention module'", ")", "\n", "parser", ".", "add_argument", "(", "'-lt'", ",", "'--randnumtest'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of randomly sampled frames for bone length prediction for inference (causal mode)'", ")", "\n", "parser", ".", "add_argument", "(", "'-jsw'", ",", "'--wjs'", ",", "default", "=", "2", ",", "type", "=", "float", ",", "metavar", "=", "'HP'", ",", "help", "=", "'weight of relative joint shift loss'", ")", "\n", "parser", ".", "add_argument", "(", "'-dw'", ",", "'--wd'", ",", "default", "=", "0.3", ",", "type", "=", "float", ",", "metavar", "=", "'HP'", ",", "help", "=", "'weight of direction loss'", ")", "\n", "parser", ".", "add_argument", "(", "'-lw'", ",", "'--wl'", ",", "default", "=", "100", ",", "type", "=", "float", ",", "metavar", "=", "'HP'", ",", "help", "=", "'weight of length loss'", ")", "\n", "parser", ".", "add_argument", "(", "'-snd'", ",", "'--snd'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "metavar", "=", "'HP'", ",", "help", "=", "'loss decay between sub-networks'", ")", "\n", "\n", "# Experimental", "\n", "parser", ".", "add_argument", "(", "'--subset'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "metavar", "=", "'FRACTION'", ",", "help", "=", "'reduce dataset size by fraction'", ")", "\n", "parser", ".", "add_argument", "(", "'--downsample'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'FACTOR'", ",", "help", "=", "'downsample frame rate by factor (semi-supervised)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'disable epoch evaluation while training (small speed-up)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dense'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dense convolutions instead of dilated convolutions'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-optimizations'", ",", "action", "=", "'store_true'", ",", "help", "=", "'disable optimized model for single-frame predictions'", ")", "\n", "parser", ".", "add_argument", "(", "'--linear-projection'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use only linear coefficients for semi-supervised projection'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-bone-length'", ",", "action", "=", "'store_false'", ",", "dest", "=", "'bone_length_term'", ",", "\n", "help", "=", "'disable bone length term in semi-supervised settings'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-proj'", ",", "action", "=", "'store_true'", ",", "help", "=", "'disable projection for semi-supervised setting'", ")", "\n", "\n", "# Visualization", "\n", "parser", ".", "add_argument", "(", "'--viz-subject'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "help", "=", "'subject to render'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-action'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "help", "=", "'action to render'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-camera'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "metavar", "=", "'N'", ",", "help", "=", "'camera to render'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-video'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "help", "=", "'path to input video'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-skip'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "metavar", "=", "'N'", ",", "help", "=", "'skip first N frames of input video'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-output'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "help", "=", "'output file name (.gif or .mp4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-bitrate'", ",", "type", "=", "int", ",", "default", "=", "3000", ",", "metavar", "=", "'N'", ",", "help", "=", "'bitrate for mp4 videos'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-no-ground-truth'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not show ground-truth poses'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-limit'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "metavar", "=", "'N'", ",", "help", "=", "'only render first N frames'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-downsample'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "help", "=", "'downsample FPS by a factor N'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-size'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "help", "=", "'image size'", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "bone_length_term", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "data_augmentation", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "test_time_augmentation", "=", "True", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# Check invalid configuration", "\n", "if", "args", ".", "resume", "and", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "'Invalid flags: --resume and --evaluate cannot be set at the same time'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "if", "args", ".", "export_training_curves", "and", "args", ".", "no_eval", ":", "\n", "        ", "print", "(", "'Invalid flags: --export-training-curves and --no-eval cannot be set at the same time'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.get_resolution": [[17, 24], ["subprocess.Popen", "line.decode().strip().split", "int", "int", "line.decode().strip", "line.decode"], "function", ["None"], ["def", "get_resolution", "(", "filename", ")", ":", "\n", "    ", "command", "=", "[", "'ffprobe'", ",", "'-v'", ",", "'error'", ",", "'-select_streams'", ",", "'v:0'", ",", "\n", "'-show_entries'", ",", "'stream=width,height'", ",", "'-of'", ",", "'csv=p=0'", ",", "filename", "]", "\n", "with", "sp", ".", "Popen", "(", "command", ",", "stdout", "=", "sp", ".", "PIPE", ",", "bufsize", "=", "-", "1", ")", "as", "pipe", ":", "\n", "        ", "for", "line", "in", "pipe", ".", "stdout", ":", "\n", "            ", "w", ",", "h", "=", "line", ".", "decode", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "return", "int", "(", "w", ")", ",", "int", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.get_fps": [[25, 32], ["subprocess.Popen", "line.decode().strip().split", "int", "int", "line.decode().strip", "line.decode"], "function", ["None"], ["", "", "", "def", "get_fps", "(", "filename", ")", ":", "\n", "    ", "command", "=", "[", "'ffprobe'", ",", "'-v'", ",", "'error'", ",", "'-select_streams'", ",", "'v:0'", ",", "\n", "'-show_entries'", ",", "'stream=r_frame_rate'", ",", "'-of'", ",", "'csv=p=0'", ",", "filename", "]", "\n", "with", "sp", ".", "Popen", "(", "command", ",", "stdout", "=", "sp", ".", "PIPE", ",", "bufsize", "=", "-", "1", ")", "as", "pipe", ":", "\n", "        ", "for", "line", "in", "pipe", ".", "stdout", ":", "\n", "            ", "a", ",", "b", "=", "line", ".", "decode", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "\n", "return", "int", "(", "a", ")", "/", "int", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.read_video": [[33, 54], ["visualization.get_resolution", "subprocess.Popen", "pipe.stdout.read", "numpy.frombuffer().reshape", "numpy.frombuffer"], "function", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.get_resolution"], ["", "", "", "def", "read_video", "(", "filename", ",", "skip", "=", "0", ",", "limit", "=", "-", "1", ")", ":", "\n", "    ", "w", ",", "h", "=", "get_resolution", "(", "filename", ")", "\n", "\n", "command", "=", "[", "'ffmpeg'", ",", "\n", "'-i'", ",", "filename", ",", "\n", "'-f'", ",", "'image2pipe'", ",", "\n", "'-pix_fmt'", ",", "'rgb24'", ",", "\n", "'-vsync'", ",", "'0'", ",", "\n", "'-vcodec'", ",", "'rawvideo'", ",", "'-'", "]", "\n", "\n", "i", "=", "0", "\n", "with", "sp", ".", "Popen", "(", "command", ",", "stdout", "=", "sp", ".", "PIPE", ",", "bufsize", "=", "-", "1", ")", "as", "pipe", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "data", "=", "pipe", ".", "stdout", ".", "read", "(", "w", "*", "h", "*", "3", ")", "\n", "if", "not", "data", ":", "\n", "                ", "break", "\n", "", "i", "+=", "1", "\n", "if", "i", ">", "limit", "and", "limit", "!=", "-", "1", ":", "\n", "                ", "continue", "\n", "", "if", "i", ">", "skip", ":", "\n", "                ", "yield", "np", ".", "frombuffer", "(", "data", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.downsample_tensor": [[58, 61], ["numpy.mean", "X[].reshape"], "function", ["None"], ["", "", "", "", "def", "downsample_tensor", "(", "X", ",", "factor", ")", ":", "\n", "    ", "length", "=", "X", ".", "shape", "[", "0", "]", "//", "factor", "*", "factor", "\n", "return", "np", ".", "mean", "(", "X", "[", ":", "length", "]", ".", "reshape", "(", "-", "1", ",", "factor", ",", "*", "X", ".", "shape", "[", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.render_animation": [[62, 207], ["matplotlib.ioff", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.get_xaxis().set_visible", "fig.add_subplot.get_yaxis().set_visible", "fig.add_subplot.set_axis_off", "fig.add_subplot.set_title", "enumerate", "list", "skeleton.parents", "plt.figure.tight_layout", "matplotlib.animation.FuncAnimation", "output.endswith", "matplotlib.close", "list.items", "plt.figure.add_subplot", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_aspect", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticklabels", "fig.add_subplot.set_zticklabels", "fig.add_subplot.set_title", "ax_3d.append", "lines_3d.append", "trajectories.append", "list.values", "numpy.zeros", "visualization.read_video", "min", "range", "visualization.downsample_tensor", "downsample_tensor().astype", "range", "len", "min", "enumerate", "numpy.full", "print", "Writer", "matplotlib.animation.FuncAnimation.save", "output.endswith", "len", "fig.add_subplot.get_xaxis", "fig.add_subplot.get_yaxis", "downsample_tensor().astype.append", "len", "len", "visualization.get_fps", "len", "visualization.downsample_tensor", "visualization.downsample_tensor", "len", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.imshow", "enumerate", "fig.add_subplot.scatter", "ax_in.imshow.set_data", "enumerate", "ax_in.scatter.set_offsets", "numpy.arange", "matplotlib.animation.FuncAnimation.save", "ValueError", "len", "visualization.downsample_tensor", "enumerate", "enumerate", "numpy.array", "lines.append", "lines_3d[].append", "[].set_data", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "len", "len", "fig.add_subplot.plot", "skeleton.joints_right", "fig.add_subplot.plot", "len"], "function", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.parents", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.read_video", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.get_fps", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.joints_right"], ["", "def", "render_animation", "(", "keypoints", ",", "keypoints_metadata", ",", "poses", ",", "skeleton", ",", "fps", ",", "bitrate", ",", "azim", ",", "output", ",", "viewport", ",", "\n", "limit", "=", "-", "1", ",", "downsample", "=", "1", ",", "size", "=", "6", ",", "input_video_path", "=", "None", ",", "input_video_skip", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    Render an animation. The supported output modes are:\n     -- 'interactive': display an interactive figure\n                       (also works on notebooks if associated with %matplotlib inline)\n     -- 'html': render the animation as HTML5 video. Can be displayed in a notebook using HTML(...).\n     -- 'filename.mp4': render and export the animation as an h264 video (requires ffmpeg).\n     -- 'filename.gif': render and export the animation a gif file (requires imagemagick).\n    \"\"\"", "\n", "plt", ".", "ioff", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "size", "*", "(", "1", "+", "len", "(", "poses", ")", ")", ",", "size", ")", ")", "\n", "ax_in", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "1", ")", "\n", "ax_in", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "set_axis_off", "(", ")", "\n", "ax_in", ".", "set_title", "(", "'Input'", ")", "\n", "\n", "ax_3d", "=", "[", "]", "\n", "lines_3d", "=", "[", "]", "\n", "trajectories", "=", "[", "]", "\n", "radius", "=", "1.7", "\n", "for", "index", ",", "(", "title", ",", "data", ")", "in", "enumerate", "(", "poses", ".", "items", "(", ")", ")", ":", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "index", "+", "2", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "15.", ",", "azim", "=", "azim", ")", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "0", ",", "radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_zticklabels", "(", "[", "]", ")", "\n", "ax", ".", "dist", "=", "7.5", "\n", "ax", ".", "set_title", "(", "title", ")", "#, pad=35", "\n", "ax_3d", ".", "append", "(", "ax", ")", "\n", "lines_3d", ".", "append", "(", "[", "]", ")", "\n", "trajectories", ".", "append", "(", "data", "[", ":", ",", "0", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "", "poses", "=", "list", "(", "poses", ".", "values", "(", ")", ")", "\n", "\n", "# Decode video", "\n", "if", "input_video_path", "is", "None", ":", "\n", "# Black background", "\n", "        ", "all_frames", "=", "np", ".", "zeros", "(", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "viewport", "[", "1", "]", ",", "viewport", "[", "0", "]", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "", "else", ":", "\n", "# Load video using ffmpeg", "\n", "        ", "all_frames", "=", "[", "]", "\n", "for", "f", "in", "read_video", "(", "input_video_path", ",", "skip", "=", "input_video_skip", ",", "limit", "=", "limit", ")", ":", "\n", "            ", "all_frames", ".", "append", "(", "f", ")", "\n", "", "effective_length", "=", "min", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "len", "(", "all_frames", ")", ")", "\n", "all_frames", "=", "all_frames", "[", ":", "effective_length", "]", "\n", "\n", "keypoints", "=", "keypoints", "[", "input_video_skip", ":", "]", "# todo remove", "\n", "for", "idx", "in", "range", "(", "len", "(", "poses", ")", ")", ":", "\n", "            ", "poses", "[", "idx", "]", "=", "poses", "[", "idx", "]", "[", "input_video_skip", ":", "]", "\n", "\n", "", "if", "fps", "is", "None", ":", "\n", "            ", "fps", "=", "get_fps", "(", "input_video_path", ")", "\n", "\n", "", "", "if", "downsample", ">", "1", ":", "\n", "        ", "keypoints", "=", "downsample_tensor", "(", "keypoints", ",", "downsample", ")", "\n", "all_frames", "=", "downsample_tensor", "(", "np", ".", "array", "(", "all_frames", ")", ",", "downsample", ")", ".", "astype", "(", "'uint8'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "poses", ")", ")", ":", "\n", "            ", "poses", "[", "idx", "]", "=", "downsample_tensor", "(", "poses", "[", "idx", "]", ",", "downsample", ")", "\n", "trajectories", "[", "idx", "]", "=", "downsample_tensor", "(", "trajectories", "[", "idx", "]", ",", "downsample", ")", "\n", "", "fps", "/=", "downsample", "\n", "\n", "", "initialized", "=", "False", "\n", "image", "=", "None", "\n", "lines", "=", "[", "]", "\n", "points", "=", "None", "\n", "\n", "if", "limit", "<", "1", ":", "\n", "        ", "limit", "=", "len", "(", "all_frames", ")", "\n", "", "else", ":", "\n", "        ", "limit", "=", "min", "(", "limit", ",", "len", "(", "all_frames", ")", ")", "\n", "\n", "", "parents", "=", "skeleton", ".", "parents", "(", ")", "\n", "def", "update_video", "(", "i", ")", ":", "\n", "        ", "nonlocal", "initialized", ",", "image", ",", "lines", ",", "points", "\n", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "            ", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", "]", ")", "\n", "\n", "# Update 2D poses", "\n", "", "joints_right_2d", "=", "keypoints_metadata", "[", "'keypoints_symmetry'", "]", "[", "1", "]", "\n", "colors_2d", "=", "np", ".", "full", "(", "keypoints", ".", "shape", "[", "1", "]", ",", "'black'", ")", "\n", "colors_2d", "[", "joints_right_2d", "]", "=", "'red'", "\n", "if", "not", "initialized", ":", "\n", "            ", "image", "=", "ax_in", ".", "imshow", "(", "all_frames", "[", "i", "]", ",", "aspect", "=", "'equal'", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", "and", "keypoints_metadata", "[", "'layout_name'", "]", "!=", "'coco'", ":", "\n", "# Draw skeleton only if keypoints match (otherwise we don't have the parents definition)", "\n", "                    ", "lines", ".", "append", "(", "ax_in", ".", "plot", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ",", "color", "=", "'pink'", ")", ")", "\n", "\n", "", "col", "=", "'red'", "if", "j", "in", "skeleton", ".", "joints_right", "(", ")", "else", "'black'", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", ".", "append", "(", "ax", ".", "plot", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ",", "c", "=", "col", ")", ")", "\n", "\n", "", "", "points", "=", "ax_in", ".", "scatter", "(", "*", "keypoints", "[", "i", "]", ".", "T", ",", "10", ",", "color", "=", "colors_2d", ",", "edgecolors", "=", "'white'", ",", "zorder", "=", "10", ")", "\n", "\n", "initialized", "=", "True", "\n", "", "else", ":", "\n", "            ", "image", ".", "set_data", "(", "all_frames", "[", "i", "]", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", "and", "keypoints_metadata", "[", "'layout_name'", "]", "!=", "'coco'", ":", "\n", "                    ", "lines", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_data", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ")", "\n", "\n", "", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_xdata", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_ydata", "(", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_3d_properties", "(", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ")", "\n", "\n", "", "", "points", ".", "set_offsets", "(", "keypoints", "[", "i", "]", ")", "\n", "\n", "", "print", "(", "'{}/{}      '", ".", "format", "(", "i", ",", "limit", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "anim", "=", "FuncAnimation", "(", "fig", ",", "update_video", ",", "frames", "=", "np", ".", "arange", "(", "0", ",", "limit", ")", ",", "interval", "=", "1000", "/", "fps", ",", "repeat", "=", "False", ")", "\n", "if", "output", ".", "endswith", "(", "'.mp4'", ")", ":", "\n", "        ", "Writer", "=", "writers", "[", "'ffmpeg'", "]", "\n", "writer", "=", "Writer", "(", "fps", "=", "fps", ",", "metadata", "=", "{", "}", ",", "bitrate", "=", "bitrate", ")", "\n", "anim", ".", "save", "(", "output", ",", "writer", "=", "writer", ")", "\n", "", "elif", "output", ".", "endswith", "(", "'.gif'", ")", ":", "\n", "        ", "anim", ".", "save", "(", "output", ",", "dpi", "=", "80", ",", "writer", "=", "'imagemagick'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported output format (only .mp4 and .gif are supported)'", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.ChunkedGenerator.__init__": [[113, 167], ["range", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.random.RandomState", "len", "len", "len", "numpy.full", "zip", "numpy.empty", "numpy.empty", "len", "len", "len", "len", "len", "numpy.repeat", "zip", "numpy.arange", "len", "numpy.repeat", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "cameras", ",", "poses_3d", ",", "poses_2d", ",", "randnum", ",", "boneindex", ",", "augdegree", ",", "\n", "chunk_length", ",", "pad", "=", "0", ",", "causal_shift", "=", "0", ",", "\n", "shuffle", "=", "True", ",", "random_seed", "=", "1234", ",", "\n", "augment", "=", "False", ",", "kps_left", "=", "None", ",", "kps_right", "=", "None", ",", "joints_left", "=", "None", ",", "joints_right", "=", "None", ",", "\n", "endless", "=", "False", ")", ":", "\n", "        ", "assert", "poses_3d", "is", "None", "or", "len", "(", "poses_3d", ")", "==", "len", "(", "poses_2d", ")", ",", "(", "len", "(", "poses_3d", ")", ",", "len", "(", "poses_2d", ")", ")", "\n", "assert", "cameras", "is", "None", "or", "len", "(", "cameras", ")", "==", "len", "(", "poses_2d", ")", "\n", "\n", "# Build lineage info", "\n", "pairs", "=", "[", "]", "# (seq_idx, start_frame, end_frame, flip) tuples", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_2d", ")", ")", ":", "\n", "            ", "assert", "poses_3d", "is", "None", "or", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "n_chunks", "=", "(", "poses_2d", "[", "i", "]", ".", "shape", "[", "0", "]", "+", "chunk_length", "-", "1", ")", "//", "chunk_length", "\n", "offset", "=", "(", "n_chunks", "*", "chunk_length", "-", "poses_2d", "[", "i", "]", ".", "shape", "[", "0", "]", ")", "//", "2", "\n", "bounds", "=", "np", ".", "arange", "(", "n_chunks", "+", "1", ")", "*", "chunk_length", "-", "offset", "\n", "augment_vector", "=", "np", ".", "full", "(", "len", "(", "bounds", "-", "1", ")", ",", "False", ",", "dtype", "=", "bool", ")", "\n", "pairs", "+=", "zip", "(", "np", ".", "repeat", "(", "i", ",", "len", "(", "bounds", "-", "1", ")", ")", ",", "bounds", "[", ":", "-", "1", "]", ",", "bounds", "[", "1", ":", "]", ",", "augment_vector", ")", "\n", "if", "augment", ":", "\n", "                ", "pairs", "+=", "zip", "(", "np", ".", "repeat", "(", "i", ",", "len", "(", "bounds", "-", "1", ")", ")", ",", "bounds", "[", ":", "-", "1", "]", ",", "bounds", "[", "1", ":", "]", ",", "~", "augment_vector", ")", "\n", "\n", "# Initialize buffers", "\n", "", "", "if", "cameras", "is", "not", "None", ":", "\n", "            ", "self", ".", "batch_cam", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "cameras", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "", "if", "poses_3d", "is", "not", "None", ":", "\n", "            ", "self", ".", "batch_3d", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "chunk_length", "+", "2", "*", "pad", ",", "poses_3d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "poses_3d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "", "self", ".", "batch_2d", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "chunk_length", "+", "2", "*", "pad", ",", "poses_2d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "poses_2d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "#randomly sampled 2D input for bone length prediction network (typically b * 50 * 17 * 2) ", "\n", "self", ".", "batch_2d_rand", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "randnum", ",", "poses_2d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "poses_2d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "#randomly sampled 3D ground truth for bone length prediction network (typically b * 50 * 17 * 3)", "\n", "self", ".", "batch_3d_rand", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "randnum", ",", "poses_3d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "poses_3d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "self", ".", "num_batches", "=", "(", "len", "(", "pairs", ")", "+", "batch_size", "-", "1", ")", "//", "batch_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "self", ".", "pairs", "=", "pairs", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "causal_shift", "=", "causal_shift", "\n", "self", ".", "endless", "=", "endless", "\n", "self", ".", "state", "=", "None", "\n", "\n", "self", ".", "cameras", "=", "cameras", "\n", "self", ".", "poses_3d", "=", "poses_3d", "\n", "self", ".", "poses_2d", "=", "poses_2d", "\n", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "kps_left", "=", "kps_left", "\n", "self", ".", "kps_right", "=", "kps_right", "\n", "self", ".", "joints_left", "=", "joints_left", "\n", "self", ".", "joints_right", "=", "joints_right", "\n", "\n", "self", ".", "randnum", "=", "randnum", "\n", "self", ".", "boneindex", "=", "boneindex", "\n", "self", ".", "augdegree", "=", "augdegree", "\n", "", "def", "num_frames", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.ChunkedGenerator.num_frames": [[167, 169], ["None"], "methods", ["None"], ["", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batches", "*", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.ChunkedGenerator.random_state": [[170, 172], ["None"], "methods", ["None"], ["", "def", "random_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "random", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.ChunkedGenerator.set_random_state": [[173, 175], ["None"], "methods", ["None"], ["", "def", "set_random_state", "(", "self", ",", "random", ")", ":", "\n", "        ", "self", ".", "random", "=", "random", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.ChunkedGenerator.augment_enabled": [[176, 178], ["None"], "methods", ["None"], ["", "def", "augment_enabled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "augment", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.ChunkedGenerator.next_pairs": [[179, 188], ["generators.ChunkedGenerator.random.permutation"], "methods", ["None"], ["", "def", "next_pairs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "state", "is", "None", ":", "\n", "            ", "if", "self", ".", "shuffle", ":", "\n", "                ", "pairs", "=", "self", ".", "random", ".", "permutation", "(", "self", ".", "pairs", ")", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "self", ".", "pairs", "\n", "", "return", "0", ",", "pairs", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.ChunkedGenerator.next_epoch": [[189, 290], ["generators.ChunkedGenerator.next_pairs", "range", "enumerate", "max", "min", "list", "random.sample", "numpy.pad", "max", "min", "range", "generators.randomaug", "numpy.random.normal", "numpy.pad", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.ChunkedGenerator.next_pairs", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.randomaug"], ["", "", "def", "next_epoch", "(", "self", ")", ":", "\n", "        ", "enabled", "=", "True", "\n", "while", "enabled", ":", "\n", "            ", "start_idx", ",", "pairs", "=", "self", ".", "next_pairs", "(", ")", "\n", "for", "b_i", "in", "range", "(", "start_idx", ",", "self", ".", "num_batches", ")", ":", "\n", "                ", "chunks", "=", "pairs", "[", "b_i", "*", "self", ".", "batch_size", ":", "(", "b_i", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "for", "i", ",", "(", "seq_i", ",", "start_3d", ",", "end_3d", ",", "flip", ")", "in", "enumerate", "(", "chunks", ")", ":", "\n", "                    ", "start_2d", "=", "start_3d", "-", "self", ".", "pad", "-", "self", ".", "causal_shift", "\n", "end_2d", "=", "end_3d", "+", "self", ".", "pad", "-", "self", ".", "causal_shift", "\n", "'''\n                    First we need to obtain the consecutive frames' 2D input/3D gt for the bone direction prediction network\n                    '''", "\n", "# 2D poses", "\n", "seq_2d", "=", "self", ".", "poses_2d", "[", "seq_i", "]", "\n", "low_2d", "=", "max", "(", "start_2d", ",", "0", ")", "\n", "high_2d", "=", "min", "(", "end_2d", ",", "seq_2d", ".", "shape", "[", "0", "]", ")", "\n", "pad_left_2d", "=", "low_2d", "-", "start_2d", "\n", "pad_right_2d", "=", "end_2d", "-", "high_2d", "\n", "if", "pad_left_2d", "!=", "0", "or", "pad_right_2d", "!=", "0", ":", "\n", "                        ", "self", ".", "batch_2d", "[", "i", "]", "=", "np", ".", "pad", "(", "seq_2d", "[", "low_2d", ":", "high_2d", "]", ",", "(", "(", "pad_left_2d", ",", "pad_right_2d", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "self", ".", "batch_2d", "[", "i", "]", "=", "seq_2d", "[", "low_2d", ":", "high_2d", "]", "\n", "\n", "", "if", "flip", ":", "\n", "# Flip 2D keypoints", "\n", "                        ", "self", ".", "batch_2d", "[", "i", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "self", ".", "batch_2d", "[", "i", ",", ":", ",", "self", ".", "kps_left", "+", "self", ".", "kps_right", "]", "=", "self", ".", "batch_2d", "[", "i", ",", ":", ",", "self", ".", "kps_right", "+", "self", ".", "kps_left", "]", "\n", "\n", "# 3D poses", "\n", "", "if", "self", ".", "poses_3d", "is", "not", "None", ":", "\n", "                        ", "seq_3d", "=", "self", ".", "poses_3d", "[", "seq_i", "]", "\n", "low_2d", "=", "max", "(", "start_2d", ",", "0", ")", "\n", "high_2d", "=", "min", "(", "end_2d", ",", "seq_2d", ".", "shape", "[", "0", "]", ")", "\n", "pad_left_2d", "=", "low_2d", "-", "start_2d", "\n", "pad_right_2d", "=", "end_2d", "-", "high_2d", "\n", "if", "pad_left_2d", "!=", "0", "or", "pad_right_2d", "!=", "0", ":", "\n", "                            ", "self", ".", "batch_3d", "[", "i", "]", "=", "np", ".", "pad", "(", "seq_3d", "[", "low_2d", ":", "high_2d", "]", ",", "(", "(", "pad_left_2d", ",", "pad_right_2d", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "batch_3d", "[", "i", "]", "=", "seq_3d", "[", "low_2d", ":", "high_2d", "]", "\n", "\n", "", "if", "flip", ":", "\n", "# Flip 3D joints", "\n", "                            ", "self", ".", "batch_3d", "[", "i", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "self", ".", "batch_3d", "[", "i", ",", ":", ",", "self", ".", "joints_left", "+", "self", ".", "joints_right", "]", "=", "self", ".", "batch_3d", "[", "i", ",", ":", ",", "self", ".", "joints_right", "+", "self", ".", "joints_left", "]", "\n", "\n", "# Cameras", "\n", "", "", "if", "self", ".", "cameras", "is", "not", "None", ":", "\n", "                        ", "self", ".", "batch_cam", "[", "i", "]", "=", "self", ".", "cameras", "[", "seq_i", "]", "\n", "if", "flip", ":", "\n", "# Flip horizontal distortion coefficients", "\n", "                            ", "self", ".", "batch_cam", "[", "i", ",", "2", "]", "*=", "-", "1", "\n", "self", ".", "batch_cam", "[", "i", ",", "7", "]", "*=", "-", "1", "\n", "", "", "'''\n                    Now we need to obtain the randomly sampled frames' 2D input/3D gt for the bone length prediction network\n                    '''", "\n", "#randomly sample 'randnum' frames' 2D/3D of the video", "\n", "rand_no", "=", "list", "(", "range", "(", "len", "(", "seq_2d", ")", ")", ")", "\n", "rand_no", "=", "random", ".", "sample", "(", "rand_no", ",", "self", ".", "randnum", ")", "\n", "seq_2d_rand", "=", "seq_2d", "[", "rand_no", "]", "\n", "seq_3d_rand", "=", "seq_3d", "[", "rand_no", "]", "\n", "self", ".", "batch_2d_rand", "[", "i", "]", "=", "seq_2d_rand", "\n", "self", ".", "batch_3d_rand", "[", "i", "]", "=", "seq_3d_rand", "\n", "if", "flip", ":", "\n", "# Flip 2D keypoints", "\n", "                        ", "self", ".", "batch_2d_rand", "[", "i", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "self", ".", "batch_2d_rand", "[", "i", ",", ":", ",", "self", ".", "kps_left", "+", "self", ".", "kps_right", "]", "=", "self", ".", "batch_2d_rand", "[", "i", ",", ":", ",", "self", ".", "kps_right", "+", "self", ".", "kps_left", "]", "\n", "self", ".", "batch_3d_rand", "[", "i", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "self", ".", "batch_3d_rand", "[", "i", ",", ":", ",", "self", ".", "joints_left", "+", "self", ".", "joints_right", "]", "=", "self", ".", "batch_3d_rand", "[", "i", ",", ":", ",", "self", ".", "joints_right", "+", "self", ".", "joints_left", "]", "\n", "\n", "", "", "if", "self", ".", "endless", ":", "\n", "                    ", "self", ".", "state", "=", "(", "b_i", "+", "1", ",", "pairs", ")", "\n", "", "if", "self", ".", "poses_3d", "is", "None", "and", "self", ".", "cameras", "is", "None", ":", "\n", "                    ", "yield", "None", ",", "None", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", "\n", "\n", "", "elif", "self", ".", "poses_3d", "is", "None", ":", "\n", "                    ", "yield", "self", ".", "batch_cam", "[", ":", "len", "(", "chunks", ")", "]", ",", "None", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", "\n", "", "else", ":", "\n", "                    ", "'''\n                    create augmented 2D/3D with different bone lengths for training\n                    '''", "\n", "self", ".", "batch_3d_rand", "[", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "#first adjust the 3D gt of each frame based on the new sampled bone lengths", "\n", "self", ".", "batch_3d_randaug", ",", "self", ".", "bonelennew", "=", "randomaug", "(", "self", ".", "batch_3d_rand", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "boneindex", ",", "self", ".", "augdegree", ")", "\n", "#also re-sampled the trajectory", "\n", "randomtraj", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "0.5", ",", "size", "=", "(", "len", "(", "chunks", ")", ",", "self", ".", "randnum", ",", "1", ",", "3", ")", ")", "\n", "randomtraj", "[", ":", ",", ":", ",", ":", ",", "2", "]", "=", "randomtraj", "[", ":", ",", ":", ",", ":", ",", "2", "]", "+", "5", "\n", "randomtraj", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "randomtraj", "[", ":", ",", ":", ",", ":", ",", "1", "]", "-", "0.3", "\n", "# the new 3D + trajectory will enable the reconstruction of augmented 2D input (do it in the main function)", "\n", "self", ".", "batch_3d_randaugtraj", "=", "self", ".", "batch_3d_randaug", "+", "randomtraj", "\n", "if", "self", ".", "cameras", "is", "None", ":", "\n", "                        ", "yield", "None", ",", "self", ".", "batch_3d", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_3d_rand", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_2d_rand", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_3d_randaugtraj", ",", "self", ".", "bonelennew", ",", "self", ".", "batch_3d_randaug", "\n", "", "else", ":", "\n", "                        ", "yield", "self", ".", "batch_cam", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_3d", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_3d_rand", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_2d_rand", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_3d_randaugtraj", ",", "self", ".", "bonelennew", ",", "self", ".", "batch_3d_randaug", "\n", "\n", "", "", "", "if", "self", ".", "endless", ":", "\n", "                ", "self", ".", "state", "=", "None", "\n", "", "else", ":", "\n", "                ", "enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.UnchunkedGenerator.__init__": [[311, 327], ["len", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cameras", ",", "poses_3d", ",", "poses_2d", ",", "pad", "=", "0", ",", "causal_shift", "=", "0", ",", "\n", "augment", "=", "False", ",", "kps_left", "=", "None", ",", "kps_right", "=", "None", ",", "joints_left", "=", "None", ",", "joints_right", "=", "None", ")", ":", "\n", "        ", "assert", "poses_3d", "is", "None", "or", "len", "(", "poses_3d", ")", "==", "len", "(", "poses_2d", ")", "\n", "assert", "cameras", "is", "None", "or", "len", "(", "cameras", ")", "==", "len", "(", "poses_2d", ")", "\n", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "kps_left", "=", "kps_left", "\n", "self", ".", "kps_right", "=", "kps_right", "\n", "self", ".", "joints_left", "=", "joints_left", "\n", "self", ".", "joints_right", "=", "joints_right", "\n", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "causal_shift", "=", "causal_shift", "\n", "self", ".", "cameras", "=", "[", "]", "if", "cameras", "is", "None", "else", "cameras", "\n", "self", ".", "poses_3d", "=", "[", "]", "if", "poses_3d", "is", "None", "else", "poses_3d", "\n", "self", ".", "poses_2d", "=", "poses_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.UnchunkedGenerator.num_frames": [[328, 333], ["None"], "methods", ["None"], ["", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "count", "=", "0", "\n", "for", "p", "in", "self", ".", "poses_2d", ":", "\n", "            ", "count", "+=", "p", ".", "shape", "[", "0", "]", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.UnchunkedGenerator.augment_enabled": [[334, 336], ["None"], "methods", ["None"], ["", "def", "augment_enabled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "augment", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.UnchunkedGenerator.set_augment": [[337, 339], ["None"], "methods", ["None"], ["", "def", "set_augment", "(", "self", ",", "augment", ")", ":", "\n", "        ", "self", ".", "augment", "=", "augment", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.UnchunkedGenerator.next_epoch": [[340, 366], ["itertools.zip_longest", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.pad", "numpy.concatenate", "numpy.pad", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "next_epoch", "(", "self", ")", ":", "\n", "        ", "for", "seq_cam", ",", "seq_3d", ",", "seq_2d", "in", "zip_longest", "(", "self", ".", "cameras", ",", "self", ".", "poses_3d", ",", "self", ".", "poses_2d", ")", ":", "\n", "            ", "batch_cam", "=", "None", "if", "seq_cam", "is", "None", "else", "np", ".", "expand_dims", "(", "seq_cam", ",", "axis", "=", "0", ")", "\n", "batch_3d", "=", "None", "if", "seq_3d", "is", "None", "else", "np", ".", "expand_dims", "(", "np", ".", "pad", "(", "seq_3d", ",", "\n", "(", "(", "self", ".", "pad", "+", "self", ".", "causal_shift", ",", "self", ".", "pad", "-", "self", ".", "causal_shift", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "'edge'", ")", ",", "axis", "=", "0", ")", "\n", "batch_2d", "=", "np", ".", "expand_dims", "(", "np", ".", "pad", "(", "seq_2d", ",", "\n", "(", "(", "self", ".", "pad", "+", "self", ".", "causal_shift", ",", "self", ".", "pad", "-", "self", ".", "causal_shift", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "'edge'", ")", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "augment", ":", "\n", "# Append flipped version", "\n", "                ", "if", "batch_cam", "is", "not", "None", ":", "\n", "                    ", "batch_cam", "=", "np", ".", "concatenate", "(", "(", "batch_cam", ",", "batch_cam", ")", ",", "axis", "=", "0", ")", "\n", "batch_cam", "[", "1", ",", "2", "]", "*=", "-", "1", "\n", "batch_cam", "[", "1", ",", "7", "]", "*=", "-", "1", "\n", "\n", "", "if", "batch_3d", "is", "not", "None", ":", "\n", "                    ", "batch_3d", "=", "np", ".", "concatenate", "(", "(", "batch_3d", ",", "batch_3d", ")", ",", "axis", "=", "0", ")", "\n", "batch_3d", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "batch_3d", "[", "1", ",", ":", ",", "self", ".", "joints_left", "+", "self", ".", "joints_right", "]", "=", "batch_3d", "[", "1", ",", ":", ",", "self", ".", "joints_right", "+", "self", ".", "joints_left", "]", "\n", "\n", "", "batch_2d", "=", "np", ".", "concatenate", "(", "(", "batch_2d", ",", "batch_2d", ")", ",", "axis", "=", "0", ")", "\n", "batch_2d", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "batch_2d", "[", "1", ",", ":", ",", "self", ".", "kps_left", "+", "self", ".", "kps_right", "]", "=", "batch_2d", "[", "1", ",", ":", ",", "self", ".", "kps_right", "+", "self", ".", "kps_left", "]", "\n", "\n", "", "yield", "batch_cam", ",", "batch_3d", ",", "batch_2d", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.getbonedirect": [[13, 25], ["numpy.reshape", "numpy.stack", "numpy.expand_dims", "numpy.reshape", "numpy.shape", "numpy.shape", "bone.append", "numpy.power", "numpy.power().sum", "numpy.shape", "numpy.shape", "numpy.power"], "function", ["None"], ["def", "getbonedirect", "(", "seq", ",", "boneindex", ")", ":", "\n", "    ", "bs", "=", "np", ".", "shape", "(", "seq", ")", "[", "0", "]", "\n", "ss", "=", "np", ".", "shape", "(", "seq", ")", "[", "1", "]", "\n", "seq", "=", "np", ".", "reshape", "(", "seq", ",", "(", "bs", "*", "ss", ",", "-", "1", ",", "3", ")", ")", "\n", "bone", "=", "[", "]", "\n", "for", "index", "in", "boneindex", ":", "\n", "        ", "bone", ".", "append", "(", "seq", "[", ":", ",", "index", "[", "0", "]", "]", "-", "seq", "[", ":", ",", "index", "[", "1", "]", "]", ")", "\n", "", "bonedirect", "=", "np", ".", "stack", "(", "bone", ",", "1", ")", "\n", "bonesum", "=", "np", ".", "expand_dims", "(", "np", ".", "power", "(", "np", ".", "power", "(", "bonedirect", ",", "2", ")", ".", "sum", "(", "2", ")", ",", "0.5", ")", ",", "2", ")", "\n", "bonedirect", "=", "bonedirect", "/", "bonesum", "\n", "bonedirect", "=", "np", ".", "reshape", "(", "bonedirect", ",", "(", "bs", ",", "ss", ",", "np", ".", "shape", "(", "bonedirect", ")", "[", "1", "]", ",", "np", ".", "shape", "(", "bonedirect", ")", "[", "2", "]", ")", ")", "\n", "return", "bonedirect", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.getbone": [[28, 39], ["numpy.reshape", "numpy.stack", "numpy.power", "numpy.reshape", "numpy.shape", "numpy.shape", "np.reshape.append", "numpy.power().sum", "numpy.power", "numpy.shape"], "function", ["None"], ["", "def", "getbone", "(", "seq", ",", "boneindex", ")", ":", "\n", "    ", "bs", "=", "np", ".", "shape", "(", "seq", ")", "[", "0", "]", "\n", "ss", "=", "np", ".", "shape", "(", "seq", ")", "[", "1", "]", "\n", "seq", "=", "np", ".", "reshape", "(", "seq", ",", "(", "bs", "*", "ss", ",", "-", "1", ",", "3", ")", ")", "\n", "bone", "=", "[", "]", "\n", "for", "index", "in", "boneindex", ":", "\n", "        ", "bone", ".", "append", "(", "seq", "[", ":", ",", "index", "[", "0", "]", "]", "-", "seq", "[", ":", ",", "index", "[", "1", "]", "]", ")", "\n", "", "bone", "=", "np", ".", "stack", "(", "bone", ",", "1", ")", "\n", "bone", "=", "np", ".", "power", "(", "np", ".", "power", "(", "bone", ",", "2", ")", ".", "sum", "(", "2", ")", ",", "0.5", ")", "\n", "bone", "=", "np", ".", "reshape", "(", "bone", ",", "(", "bs", ",", "ss", ",", "np", ".", "shape", "(", "bone", ")", "[", "1", "]", ")", ")", "\n", "return", "bone", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.randomaug": [[43, 89], ["getbone().mean", "getbone().mean.mean", "generators.getbonedirect", "numpy.shape", "numpy.shape", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "generators.getbone", "numpy.random.rand", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.getbonedirect", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.generators.getbone"], ["def", "randomaug", "(", "batch_3D_rand_ori", ",", "boneindex", ",", "augdegree", ")", ":", "\n", "    ", "bs", "=", "np", ".", "shape", "(", "batch_3D_rand_ori", ")", "[", "0", "]", "\n", "ss", "=", "np", ".", "shape", "(", "batch_3D_rand_ori", ")", "[", "1", "]", "\n", "bonelen", "=", "getbone", "(", "batch_3D_rand_ori", ",", "boneindex", ")", ".", "mean", "(", "1", ")", "\n", "bonelenmean", "=", "bonelen", ".", "mean", "(", "0", ")", "\n", "#sample new bone lengths", "\n", "randadd", "=", "(", "np", ".", "random", ".", "rand", "(", "bs", ",", "16", ")", "-", "0.5", ")", "*", "(", "bonelenmean", "*", "augdegree", ")", "\n", "bonelennew", "=", "bonelen", "+", "randadd", "\n", "bonedirect", "=", "getbonedirect", "(", "batch_3D_rand_ori", ",", "boneindex", ")", "\n", "'''\n    if you experiment with another dataset, temporally in this version you need to manually modify the below indexs to re-compute the gt \"3D joint location\" based on the re-sampled bone lengths,\n    because the change of a specific bone length can lead to the changes of multiple joints' location  \n    '''", "\n", "b", "=", "randadd", "[", ":", ",", "0", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "16", ":", "17", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "16", ":", "17", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "0", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "1", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "15", ":", "17", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "15", ":", "17", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "1", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "2", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "13", ":", "14", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "13", ":", "14", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "2", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "3", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "12", ":", "14", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "12", ":", "14", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "3", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "4", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "10", ":", "11", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "10", ":", "11", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "4", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "5", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "9", ":", "11", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "9", ":", "11", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "5", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "6", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "8", ":", "17", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "8", ":", "17", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "6", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "7", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "11", ":", "14", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "11", ":", "14", "]", "-", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "7", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "8", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "14", ":", "17", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "14", ":", "17", "]", "-", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "8", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "9", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "7", ":", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "7", ":", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "9", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "10", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "3", ":", "4", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "3", ":", "4", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "10", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "11", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "2", ":", "4", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "2", ":", "4", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "11", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "12", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "6", ":", "7", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "6", ":", "7", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "12", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "13", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "5", ":", "7", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "5", ":", "7", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "13", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "14", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "1", ":", "4", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "1", ":", "4", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "14", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "b", "=", "randadd", "[", ":", ",", "15", "]", "\n", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "4", ":", "7", "]", "=", "batch_3D_rand_ori", "[", ":", ",", ":", ",", "4", ":", "7", "]", "+", "np", ".", "expand_dims", "(", "bonedirect", "[", ":", ",", ":", ",", "15", "]", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "2", ")", ",", "(", "1", ",", "ss", ",", "3", ")", ")", ",", "2", ")", "\n", "return", "batch_3D_rand_ori", ",", "bonelennew", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.quaternion.qrot": [[10, 25], ["torch.cross", "torch.cross", "len", "len"], "function", ["None"], ["def", "qrot", "(", "q", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    Rotate vector(s) v about the rotation described by quaternion(s) q.\n    Expects a tensor of shape (*, 4) for q and a tensor of shape (*, 3) for v,\n    where * denotes any number of dimensions.\n    Returns a tensor of shape (*, 3).\n    \"\"\"", "\n", "assert", "q", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "assert", "v", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "q", ".", "shape", "[", ":", "-", "1", "]", "==", "v", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "qvec", "=", "q", "[", "...", ",", "1", ":", "]", "\n", "uv", "=", "torch", ".", "cross", "(", "qvec", ",", "v", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n", "uuv", "=", "torch", ".", "cross", "(", "qvec", ",", "uv", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n", "return", "(", "v", "+", "2", "*", "(", "q", "[", "...", ",", ":", "1", "]", "*", "uv", "+", "uuv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.quaternion.qinverse": [[27, 36], ["torch.cat", "len"], "function", ["None"], ["", "def", "qinverse", "(", "q", ",", "inplace", "=", "False", ")", ":", "\n", "# We assume the quaternion to be normalized", "\n", "    ", "if", "inplace", ":", "\n", "        ", "q", "[", "...", ",", "1", ":", "]", "*=", "-", "1", "\n", "return", "q", "\n", "", "else", ":", "\n", "        ", "w", "=", "q", "[", "...", ",", ":", "1", "]", "\n", "xyz", "=", "q", "[", "...", ",", "1", ":", "]", "\n", "return", "torch", ".", "cat", "(", "(", "w", ",", "-", "xyz", ")", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.mpjpe": [[11, 18], ["torch.mean", "torch.norm", "len"], "function", ["None"], ["def", "mpjpe", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Mean per-joint position error (i.e. mean Euclidean distance),\n    often referred to as \"Protocol #1\" in many papers.\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.pck": [[19, 30], ["torch.norm", "torch.Tensor().cuda", "out.sum", "torch.Tensor", "len"], "function", ["None"], ["", "def", "pck", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Mean per-joint position error (i.e. mean Euclidean distance),\n    often referred to as \"Protocol #1\" in many papers.\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "dis", "=", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", "\n", "#print(dis.size())", "\n", "t", "=", "torch", ".", "Tensor", "(", "[", "0.15", "]", ")", ".", "cuda", "(", ")", "# threshold", "\n", "out", "=", "(", "dis", "<", "t", ")", ".", "float", "(", ")", "*", "1", "\n", "return", "out", ".", "sum", "(", ")", "/", "14.0", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.auc": [[31, 46], ["torch.norm", "range", "torch.Tensor().cuda", "out.sum", "len", "torch.Tensor", "float"], "function", ["None"], ["", "def", "auc", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Mean per-joint position error (i.e. mean Euclidean distance),\n    often referred to as \"Protocol #1\" in many papers.\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "dis", "=", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", "\n", "outall", "=", "0", "\n", "#print(dis.size())", "\n", "for", "i", "in", "range", "(", "150", ")", ":", "\n", "        ", "t", "=", "torch", ".", "Tensor", "(", "[", "float", "(", "i", ")", "/", "1000", "]", ")", ".", "cuda", "(", ")", "# threshold", "\n", "out", "=", "(", "dis", "<", "t", ")", ".", "float", "(", ")", "*", "1", "\n", "outall", "+=", "out", ".", "sum", "(", ")", "/", "14.0", "\n", "", "outall", "=", "outall", "/", "150", "\n", "return", "outall", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.weighted_mpjpe": [[48, 55], ["torch.mean", "torch.norm", "len"], "function", ["None"], ["", "def", "weighted_mpjpe", "(", "predicted", ",", "target", ",", "w", ")", ":", "\n", "    ", "\"\"\"\n    Weighted mean per-joint position error (i.e. mean Euclidean distance)\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "assert", "w", ".", "shape", "[", "0", "]", "==", "predicted", ".", "shape", "[", "0", "]", "\n", "return", "torch", ".", "mean", "(", "w", "*", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.p_mpjpe": [[56, 96], ["numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.sqrt", "numpy.matmul", "numpy.linalg.svd", "Vt.transpose", "numpy.matmul", "numpy.sign", "np.sign.flatten", "numpy.matmul", "numpy.expand_dims", "numpy.mean", "numpy.sum", "numpy.sum", "X0.transpose", "U.transpose", "numpy.expand_dims", "U.transpose", "numpy.sum", "numpy.linalg.norm", "numpy.linalg.det", "numpy.matmul", "numpy.matmul", "len"], "function", ["None"], ["", "def", "p_mpjpe", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Pose error: MPJPE after rigid alignment (scale, rotation, and translation),\n    often referred to as \"Protocol #2\" in many papers.\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "\n", "muX", "=", "np", ".", "mean", "(", "target", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "muY", "=", "np", ".", "mean", "(", "predicted", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "X0", "=", "target", "-", "muX", "\n", "Y0", "=", "predicted", "-", "muY", "\n", "\n", "normX", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "X0", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "\n", "normY", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "Y0", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "\n", "\n", "X0", "/=", "normX", "\n", "Y0", "/=", "normY", "\n", "\n", "H", "=", "np", ".", "matmul", "(", "X0", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ",", "Y0", ")", "\n", "U", ",", "s", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "H", ")", "\n", "V", "=", "Vt", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", "\n", "R", "=", "np", ".", "matmul", "(", "V", ",", "U", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "# Avoid improper rotations (reflections), i.e. rotations with det(R) = -1", "\n", "sign_detR", "=", "np", ".", "sign", "(", "np", ".", "expand_dims", "(", "np", ".", "linalg", ".", "det", "(", "R", ")", ",", "axis", "=", "1", ")", ")", "\n", "V", "[", ":", ",", ":", ",", "-", "1", "]", "*=", "sign_detR", "\n", "s", "[", ":", ",", "-", "1", "]", "*=", "sign_detR", ".", "flatten", "(", ")", "\n", "R", "=", "np", ".", "matmul", "(", "V", ",", "U", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ")", "# Rotation", "\n", "\n", "tr", "=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "s", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ",", "axis", "=", "2", ")", "\n", "\n", "a", "=", "tr", "*", "normX", "/", "normY", "# Scale", "\n", "t", "=", "muX", "-", "a", "*", "np", ".", "matmul", "(", "muY", ",", "R", ")", "# Translation", "\n", "\n", "# Perform rigid transformation on the input", "\n", "predicted_aligned", "=", "a", "*", "np", ".", "matmul", "(", "predicted", ",", "R", ")", "+", "t", "\n", "\n", "# Return MPJPE", "\n", "return", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "predicted_aligned", "-", "target", ",", "axis", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.n_mpjpe": [[97, 108], ["torch.mean", "torch.mean", "loss.mpjpe", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.mpjpe"], ["", "def", "n_mpjpe", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Normalized MPJPE (scale only), adapted from:\n    https://github.com/hrhodin/UnsupervisedGeometryAwareRepresentationLearning/blob/master/losses/poses.py\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "\n", "norm_predicted", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "predicted", "**", "2", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "norm_target", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "target", "*", "predicted", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "scale", "=", "norm_target", "/", "norm_predicted", "\n", "return", "mpjpe", "(", "scale", "*", "predicted", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.loss.mean_velocity_error": [[109, 119], ["numpy.diff", "numpy.diff", "numpy.mean", "numpy.linalg.norm", "len"], "function", ["None"], ["", "def", "mean_velocity_error", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Mean per-joint velocity error (i.e. mean Euclidean distance of the 1st derivative)\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "\n", "velocity_predicted", "=", "np", ".", "diff", "(", "predicted", ",", "axis", "=", "0", ")", "\n", "velocity_target", "=", "np", ".", "diff", "(", "target", ",", "axis", "=", "0", ")", "\n", "\n", "return", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "velocity_predicted", "-", "velocity_target", ",", "axis", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.model.TemporalModelBase.__init__": [[19, 38], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.__init__"], ["def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Validate input", "\n", "#for fw in filter_widths:", "\n", "#    assert fw % 2 != 0, 'Only odd filter widths are supported'", "\n", "\n", "self", ".", "num_joints_in", "=", "num_joints_in", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "num_joints_out", "=", "num_joints_out", "\n", "self", ".", "filter_widths", "=", "filter_widths", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "pad", "=", "[", "filter_widths", "[", "0", "]", "//", "2", "]", "\n", "self", ".", "expand_bn", "=", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "shrink", "=", "nn", ".", "Conv1d", "(", "channels", ",", "num_joints_out", "*", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.model.TemporalModelBase.set_bn_momentum": [[40, 44], ["None"], "methods", ["None"], ["", "def", "set_bn_momentum", "(", "self", ",", "momentum", ")", ":", "\n", "        ", "self", ".", "expand_bn", ".", "momentum", "=", "momentum", "\n", "for", "bn", "in", "self", ".", "layers_bn", ":", "\n", "            ", "bn", ".", "momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.model.TemporalModelBase.receptive_field": [[45, 53], ["None"], "methods", ["None"], ["", "", "def", "receptive_field", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the total receptive field of this model as # of frames.\n        \"\"\"", "\n", "frames", "=", "0", "\n", "for", "f", "in", "self", ".", "pad", ":", "\n", "            ", "frames", "+=", "f", "\n", "", "return", "1", "+", "2", "*", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.model.TemporalModelBase.total_causal_shift": [[54, 66], ["range", "len"], "methods", ["None"], ["", "def", "total_causal_shift", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the asymmetric offset for sequence padding.\n        The returned value is typically 0 if causal convolutions are disabled,\n        otherwise it is half the receptive field.\n        \"\"\"", "\n", "frames", "=", "self", ".", "causal_shift", "[", "0", "]", "\n", "next_dilation", "=", "self", ".", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "filter_widths", ")", ")", ":", "\n", "            ", "frames", "+=", "self", ".", "causal_shift", "[", "i", "]", "*", "next_dilation", "\n", "next_dilation", "*=", "self", ".", "filter_widths", "[", "i", "]", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.model.TemporalModelBase.forward": [[67, 81], ["x.view.view.view", "x.view.view.permute", "model.TemporalModelBase._forward_blocks", "x.view.view.permute", "x.view.view.view", "len"], "methods", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.model.TemporalModel._forward_blocks"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "4", "\n", "assert", "x", ".", "shape", "[", "-", "2", "]", "==", "self", ".", "num_joints_in", "\n", "\n", "sz", "=", "x", ".", "shape", "[", ":", "3", "]", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "_forward_blocks", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "sz", "[", "0", "]", ",", "-", "1", ",", "self", ".", "num_joints_out", ",", "3", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.model.TemporalModel.__init__": [[96, 202], ["model.TemporalModelBase.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "range", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "int", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "int", "len", "model.TemporalModel.pad.append", "model.TemporalModel.causal_shift.append", "model.TemporalModel.causal_shift2.append", "layers_bn.append", "layers_conv.append", "layers_bn.append", "len", "layers_conv1.append", "layers_bn1.append", "layers_conv1.append", "layers_bn1.append", "layers_conv.append", "layers_conv.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "len", "layers_convbone.append", "layers_bnbone.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "layers_convbone.append", "layers_convbone.append", "layers_bnbone.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "len"], "methods", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.__init__"], ["def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "boneindex", ",", "temperature", ",", "randnumtest", ",", "filter_widths", ",", "causal", "=", "False", ",", "dropout", "=", "0.25", ",", "channels", "=", "1024", ",", "dense", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this model.\n\n        Arguments:\n        num_joints_in -- number of input joints (e.g. 17 for Human3.6M)\n        in_features -- number of input features for each joint (typically 2 for 2D input)\n        num_joints_out -- number of output joints (can be different than input)\n        num_joints_out-1 -- number of input bones (e.g. 16 for Human3.6M)\n        filter_widths -- list of convolution widths, which also determines the # of blocks and receptive field\n        causal -- use causal convolutions instead of symmetric convolutions (for real-time applications)\n        dropout -- dropout probability\n        channels -- number of convolution channels\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", "\n", "# Bottom layers", "\n", "self", ".", "expand_conv", "=", "nn", ".", "Conv1d", "(", "num_joints_in", "*", "in_features", ",", "channels", ",", "filter_widths", "[", "0", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "expand_convscore", "=", "nn", ".", "Conv1d", "(", "num_joints_in", ",", "channels", ",", "filter_widths", "[", "0", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "expand_bnscore", "=", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "causal_shift", "=", "[", "(", "filter_widths", "[", "0", "]", ")", "//", "2", "if", "causal", "else", "0", "]", "\n", "self", ".", "causal_shift2", "=", "[", "(", "filter_widths", "[", "0", "]", ")", "//", "2", "if", "causal", "else", "0", "]", "\n", "self", ".", "causal", "=", "causal", "\n", "\n", "# The first sub-network of bone direction prediction network", "\n", "layers_conv", "=", "[", "]", "\n", "layers_bn", "=", "[", "]", "\n", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "self", ".", "pad", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "-", "1", ")", "*", "next_dilation", "//", "2", ")", "\n", "self", ".", "causal_shift", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", "*", "next_dilation", ")", "if", "causal", "else", "0", ")", "\n", "self", ".", "causal_shift2", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", ")", "if", "causal", "else", "0", ")", "\n", "if", "i", "==", "1", ":", "\n", "                ", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", "*", "2", ",", "channels", ",", "\n", "filter_widths", "[", "i", "]", "if", "not", "dense", "else", "(", "2", "*", "self", ".", "pad", "[", "-", "1", "]", "+", "1", ")", ",", "\n", "dilation", "=", "next_dilation", "if", "not", "dense", "else", "1", ",", "\n", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "\n", "filter_widths", "[", "i", "]", "if", "not", "dense", "else", "(", "2", "*", "self", ".", "pad", "[", "-", "1", "]", "+", "1", ")", ",", "\n", "dilation", "=", "next_dilation", "if", "not", "dense", "else", "1", ",", "\n", "bias", "=", "False", ")", ")", "\n", "", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "\n", "# The second sub-network of bone direction prediction network", "\n", "", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "layers_conv1", "=", "[", "]", "\n", "layers_bn1", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "layers_conv1", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", "*", "2", ",", "channels", ",", "filter_widths", "[", "i", "]", ",", "stride", "=", "filter_widths", "[", "i", "]", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn1", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "layers_conv1", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn1", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "\n", "", "self", ".", "layers_conv", "=", "nn", ".", "ModuleList", "(", "layers_conv", ")", "\n", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n", "self", ".", "layers_conv1", "=", "nn", ".", "ModuleList", "(", "layers_conv1", ")", "\n", "self", ".", "layers_bn1", "=", "nn", ".", "ModuleList", "(", "layers_bn1", ")", "\n", "\n", "# The bone length prediction network        ", "\n", "layers_convbone", "=", "[", "]", "\n", "layers_bnbone", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "filter_widths", ")", "*", "2", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "layers_convbone", ".", "append", "(", "nn", ".", "Linear", "(", "num_joints_in", "*", "in_features", ",", "channels", ")", ")", "\n", "layers_bnbone", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "", "elif", "i", "==", "len", "(", "filter_widths", ")", "*", "2", "-", "1", ":", "\n", "                ", "layers_convbone", ".", "append", "(", "nn", ".", "Linear", "(", "channels", ",", "num_joints_out", "*", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers_convbone", ".", "append", "(", "nn", ".", "Linear", "(", "channels", ",", "channels", ")", ")", "\n", "layers_bnbone", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "\n", "", "", "self", ".", "layers_convbone", "=", "nn", ".", "ModuleList", "(", "layers_convbone", ")", "\n", "self", ".", "layers_bnbone", "=", "nn", ".", "ModuleList", "(", "layers_bnbone", ")", "\n", "\n", "\n", "# The bone length attention module", "\n", "self", ".", "boneatt", "=", "nn", ".", "Linear", "(", "num_joints_out", "*", "6", ",", "num_joints_out", "-", "1", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "# Uppper layers", "\n", "self", ".", "shrink_direct_1", "=", "nn", ".", "Conv1d", "(", "channels", ",", "(", "num_joints_out", "-", "1", ")", "*", "3", ",", "1", ")", "\n", "self", ".", "shrink_direct_2", "=", "nn", ".", "Conv1d", "(", "channels", ",", "(", "num_joints_out", "-", "1", ")", "*", "3", ",", "1", ")", "\n", "self", ".", "lengthlinear", "=", "nn", ".", "Linear", "(", "num_joints_out", "-", "1", ",", "channels", ")", "\n", "self", ".", "directlinear", "=", "nn", ".", "Conv1d", "(", "(", "num_joints_out", "-", "1", ")", "*", "3", ",", "channels", ",", "1", ")", "\n", "self", ".", "lengthlinear_1", "=", "nn", ".", "Linear", "(", "num_joints_out", "-", "1", ",", "channels", ")", "\n", "self", ".", "lengthlinear_2", "=", "nn", ".", "Linear", "(", "num_joints_out", "-", "1", ",", "channels", ")", "\n", "self", ".", "directlinear_1", "=", "nn", ".", "Conv1d", "(", "(", "num_joints_out", "-", "1", ")", "*", "3", ",", "channels", ",", "1", ")", "\n", "self", ".", "directlinear_2", "=", "nn", ".", "Conv1d", "(", "(", "num_joints_out", "-", "1", ")", "*", "3", ",", "channels", ",", "1", ")", "\n", "self", ".", "jointshiftnum", "=", "int", "(", "num_joints_out", "*", "(", "num_joints_out", "+", "1", ")", "/", "2", "-", "(", "num_joints_out", "-", "1", ")", ")", "\n", "self", ".", "shrink_js_1", "=", "nn", ".", "Conv1d", "(", "channels", ",", "self", ".", "jointshiftnum", "*", "3", ",", "1", ")", "\n", "self", ".", "shrink_js_2", "=", "nn", ".", "Conv1d", "(", "channels", ",", "self", ".", "jointshiftnum", "*", "3", ",", "1", ")", "\n", "\n", "\n", "# Other parameters", "\n", "self", ".", "boneindex", "=", "boneindex", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "num_joints_out", "=", "num_joints_out", "\n", "self", ".", "num_joints_in", "=", "num_joints_in", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "filter_widths", "=", "filter_widths", "\n", "self", ".", "sinrecfield", "=", "int", "(", "(", "next_dilation", "-", "1", ")", "/", "2", ")", "\n", "self", ".", "randnumtest", "=", "randnumtest", "\n", "", "def", "_forward_blocks", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.model.TemporalModel._forward_blocks": [[202, 289], ["model.TemporalModel.view", "xtemp[].contiguous().view", "model.TemporalModel.permute().contiguous", "model.TemporalModel.size", "model.TemporalModel.size", "model.TemporalModel.view", "model.TemporalModel.drop", "range", "model.TemporalModel.view", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.TemporalModel.boneatt().view", "getbonelength", "model.TemporalModel.drop", "model.TemporalModel.drop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.TemporalModel.view", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "bonedirect.view.view.view", "torch.cat.permute().contiguous().view", "torch.cat.permute().contiguous().view", "model.TemporalModel.lengthlinear().view", "bonel.view.view.permute().contiguous", "model.TemporalModel.directlinear", "bonel.view.view.view", "model.TemporalModel.shrink", "model.TemporalModel.size", "model.TemporalModel.size", "model.TemporalModel.size", "model.TemporalModel.size", "model.TemporalModel.relu", "len", "model.TemporalModel.drop", "model.TemporalModel.drop", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "model.TemporalModel.view", "model.TemporalModel.softmax", "torch.cat.unsqueeze().repeat", "torch.cat.unsqueeze().repeat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.TemporalModel.relu", "model.TemporalModel.relu", "model.TemporalModel.drop", "xbottom.append", "xtest[].repeat", "range", "model.TemporalModel.shrink_direct_2", "xall.append", "model.TemporalModel.size", "model.TemporalModel.size", "bonedirect.view.view.size", "bonedirect.view.view.size", "model.TemporalModel.size", "model.TemporalModel.size", "xtemp[].contiguous", "model.TemporalModel.permute", "model.TemporalModel.size", "model.TemporalModel.size", "model.TemporalModel.relu", "model.TemporalModel.relu", "model.TemporalModel.boneatt", "model.TemporalModel.size", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "model.TemporalModel.softmax", "torch.cat.append", "torch.cat.append", "model.TemporalModel.expand_bn", "model.TemporalModel.expand_bnscore", "len", "model.TemporalModel.relu", "model.TemporalModel.drop", "xtest.size", "int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.TemporalModel.drop", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "model.TemporalModel.lengthlinear", "bonel.view.view.permute", "torch.cat.view", "torch.cat.view", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "model.TemporalModel.size", "bonecausal.size", "bonelengthcausal.unsqueeze", "model.TemporalModel.expand_conv", "model.TemporalModel.expand_convscore", "model.TemporalModel.relu", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "model.TemporalModel.relu", "model.TemporalModel.drop", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "list", "model.TemporalModel.relu", "torch.cat.permute", "torch.cat.permute", "range", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "xbottom[].size", "len"], "methods", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.bone.getbonelength"], ["", "def", "_forward_blocks", "(", "self", ",", "x", ")", ":", "\n", "        ", "xtemp", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "num_joints_in", ",", "3", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "#visibility score feature", "\n", "xscore", "=", "xtemp", "[", ":", ",", ":", ",", "2", ",", ":", "]", "\n", "x", "=", "xtemp", "[", ":", ",", ":", ",", ":", "2", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "num_joints_in", "*", "2", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "\n", "#first deal with the bone length prediction network", "\n", "x_rand", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "bs", "=", "x_rand", ".", "size", "(", "0", ")", "\n", "ss", "=", "x_rand", ".", "size", "(", "1", ")", "\n", "x_rand", "=", "x_rand", ".", "view", "(", "x_rand", ".", "size", "(", "0", ")", "*", "x_rand", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "x_rand", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bnbone", "[", "0", "]", "(", "self", ".", "layers_convbone", "[", "0", "]", "(", "x_rand", ")", ")", ")", ")", "\n", "#independently predict the 3D joint locations of each frame of a video", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "pad", ")", ")", ":", "\n", "            ", "res_rand", "=", "x_rand", "\n", "x_rand", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bnbone", "[", "2", "*", "i", "-", "1", "]", "(", "self", ".", "layers_convbone", "[", "2", "*", "i", "-", "1", "]", "(", "x_rand", ")", ")", ")", ")", "\n", "x_rand", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bnbone", "[", "2", "*", "i", "]", "(", "self", ".", "layers_convbone", "[", "2", "*", "i", "]", "(", "x_rand", ")", ")", ")", ")", "\n", "x_rand", "=", "x_rand", "+", "res_rand", "\n", "", "x_rand", "=", "self", ".", "layers_convbone", "[", "-", "1", "]", "(", "x_rand", ")", "\n", "x_rand", "=", "x_rand", ".", "view", "(", "bs", ",", "ss", ",", "-", "1", ")", "\n", "# let's compute the bone length weights", "\n", "x_rand_abs", "=", "torch", ".", "abs", "(", "x_rand", ")", "\n", "x_rand_con", "=", "torch", ".", "cat", "(", "(", "x_rand", ",", "x_rand_abs", ")", ",", "2", ")", "\n", "x_rand_boneatt", "=", "self", ".", "boneatt", "(", "x_rand_con", ".", "view", "(", "bs", "*", "ss", ",", "-", "1", ")", ")", ".", "view", "(", "x_rand_con", ".", "size", "(", "0", ")", ",", "x_rand_con", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "x_rand_boneatt", "=", "x_rand_boneatt", "*", "self", ".", "temperature", "\n", "bone", "=", "getbonelength", "(", "x_rand", ".", "view", "(", "bs", ",", "ss", ",", "-", "1", ",", "3", ")", ",", "self", ".", "boneindex", ")", "\n", "# if not causal mode, predicted the bone length of the current frame as the weighted average of all the video frames", "\n", "if", "not", "self", ".", "causal", ":", "\n", "            ", "x_rand_boneatt", "=", "x_rand_boneatt", "[", ":", ",", "self", ".", "sinrecfield", ":", "-", "self", ".", "sinrecfield", "]", "\n", "x_rand_boneatt", "=", "self", ".", "softmax", "(", "x_rand_boneatt", ")", "\n", "# get the final predicted bone length of the current frame", "\n", "bonelength", "=", "(", "bone", "[", ":", ",", "self", ".", "sinrecfield", ":", "-", "self", ".", "sinrecfield", "]", "*", "x_rand_boneatt", ")", ".", "sum", "(", "1", ")", "\n", "bonelength", "=", "bonelength", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "x", ".", "size", "(", "2", ")", "-", "2", "*", "self", ".", "sinrecfield", ")", "\n", "# in causal mode, you can only observe the frames before the current one, ranomly sample 'randnumtest' frames to predict the bone lengths", "\n", "", "else", ":", "\n", "            ", "bonelength", "=", "[", "]", "\n", "#predict the bone length frame by frame from the (self.sinrecfield*2+1)-th frame", "\n", "for", "ii", "in", "range", "(", "self", ".", "sinrecfield", "*", "2", ",", "x", ".", "size", "(", "2", ")", ")", ":", "\n", "#get the frames you can observe", "\n", "                ", "bonecausal", "=", "bone", "[", ":", ",", "self", ".", "sinrecfield", "*", "2", ":", "ii", "+", "1", ",", ":", "]", "\n", "perm", "=", "torch", ".", "randperm", "(", "bonecausal", ".", "size", "(", "1", ")", ")", "\n", "idx", "=", "perm", "[", ":", "self", ".", "randnumtest", "]", "\n", "bonecausal", "=", "bonecausal", "[", ":", ",", "idx", ",", ":", "]", "\n", "x_rand_boneattcausal", "=", "self", ".", "softmax", "(", "x_rand_boneatt", "[", ":", ",", "self", ".", "sinrecfield", "*", "2", ":", "ii", "+", "1", ",", ":", "]", "[", ":", ",", "idx", ",", ":", "]", ")", "\n", "bonelengthcausal", "=", "(", "bonecausal", "*", "x_rand_boneattcausal", ")", ".", "sum", "(", "1", ")", "\n", "bonelength", ".", "append", "(", "bonelengthcausal", ".", "unsqueeze", "(", "2", ")", ")", "\n", "", "bonelength", "=", "torch", ".", "cat", "(", "bonelength", ",", "2", ")", "\n", "# Now deal with the bone direction prediction network", "\n", "#first sub-network, the prediction can be made in a parallel way", "\n", "", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bn", "(", "self", ".", "expand_conv", "(", "x", ")", ")", ")", ")", "\n", "xbottom", "=", "[", "x", "]", "\n", "xscore", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bnscore", "(", "self", ".", "expand_convscore", "(", "xscore", ")", ")", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "xscore", "*", "x", ")", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "pad", "=", "self", ".", "pad", "[", "i", "+", "1", "]", "\n", "shift", "=", "self", ".", "causal_shift", "[", "i", "+", "1", "]", "\n", "res", "=", "x", "[", ":", ",", ":", "self", ".", "channels", ",", "pad", "+", "shift", ":", "x", ".", "shape", "[", "2", "]", "-", "pad", "+", "shift", "]", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "]", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "res", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "xbottom", ".", "append", "(", "x", ")", "\n", "#second sub-network, predict frame by frame", "\n", "", "xall", "=", "[", "]", "\n", "xtest", "=", "x", "\n", "for", "ii", "in", "range", "(", "self", ".", "sinrecfield", ",", "xtest", ".", "size", "(", "2", ")", "+", "self", ".", "sinrecfield", ")", ":", "\n", "            ", "x", "=", "xtest", "[", ":", ",", ":", ",", "ii", "-", "self", ".", "sinrecfield", ":", "ii", "-", "self", ".", "sinrecfield", "+", "1", "]", ".", "repeat", "(", "1", ",", "1", ",", "int", "(", "(", "self", ".", "sinrecfield", "*", "2", "+", "1", ")", "/", "self", ".", "filter_widths", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "                ", "ind", "=", "torch", ".", "LongTensor", "(", "list", "(", "range", "(", "ii", "-", "self", ".", "sinrecfield", ",", "xbottom", "[", "i", "]", ".", "size", "(", "2", ")", ",", "self", ".", "pad", "[", "i", "+", "1", "]", ")", ")", ")", "[", ":", "self", ".", "pad", "[", "len", "(", "self", ".", "pad", ")", "-", "i", "-", "1", "]", "]", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "xbottom", "[", "i", "]", "[", ":", ",", ":", ",", "ind", "]", ")", ",", "1", ")", "\n", "res", "=", "x", "[", ":", ",", ":", ",", "self", ".", "causal_shift2", "[", "i", "+", "1", "]", "+", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "//", "2", ":", ":", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "]", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn1", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv1", "[", "2", "*", "i", "]", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "res", "[", ":", ",", ":", "self", ".", "channels", "]", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn1", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv1", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "", "x", "=", "self", ".", "shrink_direct_2", "(", "x", ")", "\n", "xall", ".", "append", "(", "x", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "xall", ",", "2", ")", "\n", "bonedirect", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "num_joints_out", "-", "1", ",", "3", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "bonesum", "=", "torch", ".", "pow", "(", "torch", ".", "pow", "(", "bonedirect", ",", "2", ")", ".", "sum", "(", "2", ")", ",", "0.5", ")", ".", "unsqueeze", "(", "2", ")", "\n", "bonedirect", "=", "bonedirect", "/", "bonesum", "\n", "bonedirect", "=", "bonedirect", ".", "view", "(", "bonedirect", ".", "size", "(", "0", ")", ",", "(", "self", ".", "num_joints_out", "-", "1", ")", "*", "3", ",", "bonedirect", ".", "size", "(", "3", ")", ")", "\n", "#compute the final 3D joint locations", "\n", "bonelength", "=", "bonelength", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_joints_out", "-", "1", ")", "\n", "bonel", "=", "self", ".", "lengthlinear", "(", "bonelength", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "channels", ")", "\n", "bonel", "=", "bonel", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "boned", "=", "self", ".", "directlinear", "(", "bonedirect", ")", "\n", "bonel", "=", "bonel", ".", "view", "(", "boned", ".", "size", "(", ")", ")", "\n", "x", "=", "boned", "*", "bonel", "\n", "x", "=", "self", ".", "shrink", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.model.TemporalModelOptimized1f.__init__": [[300, 398], ["model.TemporalModelBase.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "range", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "int", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "int", "len", "model.TemporalModelOptimized1f.pad.append", "model.TemporalModelOptimized1f.causal_shift.append", "layers_bn.append", "layers_conv.append", "layers_bn.append", "len", "layers_conv1.append", "layers_bn1.append", "layers_conv1.append", "layers_bn1.append", "layers_conv.append", "layers_conv.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "len", "layers_convbone.append", "layers_bnbone.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "layers_convbone.append", "layers_convbone.append", "layers_bnbone.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "len"], "methods", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.__init__"], ["def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "boneindex", ",", "temperature", ",", "\n", "filter_widths", ",", "causal", "=", "False", ",", "dropout", "=", "0.25", ",", "channels", "=", "1024", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this model.\n\n        Arguments:\n        num_joints_in -- number of input joints (e.g. 17 for Human3.6M)\n        in_features -- number of input features for each joint (typically 2 for 2D input)\n        num_joints_out -- number of output joints (can be different than input)\n        num_joints_out-1 -- number of input bones (e.g. 16 for Human3.6M)\n        filter_widths -- list of convolution widths, which also determines the # of blocks and receptive field\n        causal -- use causal convolutions instead of symmetric convolutions (for real-time applications)\n        dropout -- dropout probability\n        channels -- number of convolution channels\n        dense -- use regular dense convolutions instead of dilated convolutions (ablation experiment)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", "\n", "# Bottom layers", "\n", "self", ".", "expand_conv", "=", "nn", ".", "Conv1d", "(", "num_joints_in", "*", "in_features", ",", "channels", ",", "filter_widths", "[", "0", "]", ",", "stride", "=", "filter_widths", "[", "0", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "expand_convscore", "=", "nn", ".", "Conv1d", "(", "num_joints_in", ",", "channels", ",", "filter_widths", "[", "0", "]", ",", "stride", "=", "filter_widths", "[", "0", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "expand_bnscore", "=", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "causal_shift", "=", "[", "(", "filter_widths", "[", "0", "]", "//", "2", ")", "if", "causal", "else", "0", "]", "\n", "self", ".", "causal", "=", "causal", "\n", "\n", "# The first sub-network of bone direction prediction network", "\n", "layers_conv", "=", "[", "]", "\n", "layers_bn", "=", "[", "]", "\n", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "self", ".", "pad", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "-", "1", ")", "*", "next_dilation", "//", "2", ")", "\n", "self", ".", "causal_shift", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", ")", "if", "causal", "else", "0", ")", "\n", "if", "i", "==", "1", ":", "\n", "                ", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", "*", "2", ",", "channels", ",", "filter_widths", "[", "i", "]", ",", "stride", "=", "filter_widths", "[", "i", "]", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "filter_widths", "[", "i", "]", ",", "stride", "=", "filter_widths", "[", "i", "]", ",", "bias", "=", "False", ")", ")", "\n", "", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "\n", "# The second sub-network of bone direction prediction network", "\n", "", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "layers_conv1", "=", "[", "]", "\n", "layers_bn1", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "layers_conv1", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", "*", "2", ",", "channels", ",", "filter_widths", "[", "i", "]", ",", "stride", "=", "filter_widths", "[", "i", "]", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn1", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "layers_conv1", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn1", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "\n", "", "self", ".", "layers_conv", "=", "nn", ".", "ModuleList", "(", "layers_conv", ")", "\n", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n", "self", ".", "layers_conv1", "=", "nn", ".", "ModuleList", "(", "layers_conv1", ")", "\n", "self", ".", "layers_bn1", "=", "nn", ".", "ModuleList", "(", "layers_bn1", ")", "\n", "\n", "\n", "# The bone length prediction network", "\n", "layers_convbone", "=", "[", "]", "\n", "layers_bnbone", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "filter_widths", ")", "*", "2", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "layers_convbone", ".", "append", "(", "nn", ".", "Linear", "(", "num_joints_in", "*", "in_features", ",", "channels", ")", ")", "\n", "layers_bnbone", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "", "elif", "i", "==", "len", "(", "filter_widths", ")", "*", "2", "-", "1", ":", "\n", "                ", "layers_convbone", ".", "append", "(", "nn", ".", "Linear", "(", "channels", ",", "num_joints_out", "*", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers_convbone", ".", "append", "(", "nn", ".", "Linear", "(", "channels", ",", "channels", ")", ")", "\n", "layers_bnbone", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "\n", "", "", "self", ".", "layers_convbone", "=", "nn", ".", "ModuleList", "(", "layers_convbone", ")", "\n", "self", ".", "layers_bnbone", "=", "nn", ".", "ModuleList", "(", "layers_bnbone", ")", "\n", "\n", "# The bone length attention module", "\n", "self", ".", "boneatt", "=", "nn", ".", "Linear", "(", "num_joints_out", "*", "6", ",", "num_joints_out", "-", "1", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "# Uppper layers", "\n", "self", ".", "shrink_direct_1", "=", "nn", ".", "Conv1d", "(", "channels", ",", "(", "num_joints_out", "-", "1", ")", "*", "3", ",", "1", ")", "\n", "self", ".", "shrink_direct_2", "=", "nn", ".", "Conv1d", "(", "channels", ",", "(", "num_joints_out", "-", "1", ")", "*", "3", ",", "1", ")", "\n", "self", ".", "lengthlinear", "=", "nn", ".", "Linear", "(", "num_joints_out", "-", "1", ",", "channels", ")", "\n", "self", ".", "directlinear", "=", "nn", ".", "Conv1d", "(", "(", "num_joints_out", "-", "1", ")", "*", "3", ",", "channels", ",", "1", ")", "\n", "self", ".", "lengthlinear_1", "=", "nn", ".", "Linear", "(", "num_joints_out", "-", "1", ",", "channels", ")", "\n", "self", ".", "lengthlinear_2", "=", "nn", ".", "Linear", "(", "num_joints_out", "-", "1", ",", "channels", ")", "\n", "self", ".", "directlinear_1", "=", "nn", ".", "Conv1d", "(", "(", "num_joints_out", "-", "1", ")", "*", "3", ",", "channels", ",", "1", ")", "\n", "self", ".", "directlinear_2", "=", "nn", ".", "Conv1d", "(", "(", "num_joints_out", "-", "1", ")", "*", "3", ",", "channels", ",", "1", ")", "\n", "self", ".", "jointshiftnum", "=", "int", "(", "num_joints_out", "*", "(", "num_joints_out", "+", "1", ")", "/", "2", "-", "(", "num_joints_out", "-", "1", ")", ")", "\n", "self", ".", "shrink_js_1", "=", "nn", ".", "Conv1d", "(", "channels", ",", "self", ".", "jointshiftnum", "*", "3", ",", "1", ")", "\n", "self", ".", "shrink_js_2", "=", "nn", ".", "Conv1d", "(", "channels", ",", "self", ".", "jointshiftnum", "*", "3", ",", "1", ")", "\n", "\n", "# Other parameters", "\n", "self", ".", "boneindex", "=", "boneindex", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "num_joints_out", "=", "num_joints_out", "\n", "self", ".", "num_joints_in", "=", "num_joints_in", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "filter_widths", "=", "filter_widths", "\n", "self", ".", "sinrecfield", "=", "int", "(", "(", "next_dilation", "-", "1", ")", "/", "2", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "x_rand", ",", "x_randaug", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.model.TemporalModelOptimized1f.forward": [[398, 507], ["model.TemporalModelOptimized1f.view", "model.TemporalModelOptimized1f.permute", "model.TemporalModelOptimized1f.view", "xtemp[].contiguous().view", "model.TemporalModelOptimized1f.size", "model.TemporalModelOptimized1f.size", "model.TemporalModelOptimized1f.view", "model.TemporalModelOptimized1f.drop", "range", "model.TemporalModelOptimized1f.view", "model.TemporalModelOptimized1f.view", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.TemporalModelOptimized1f.boneatt().view", "model.TemporalModelOptimized1f.softmax", "getbonelength", "model.TemporalModelOptimized1f.view", "model.TemporalModelOptimized1f.drop", "range", "model.TemporalModelOptimized1f.view", "model.TemporalModelOptimized1f.view", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.TemporalModelOptimized1f.boneatt().view", "model.TemporalModelOptimized1f.softmax", "getbonelength", "model.TemporalModelOptimized1f.drop", "model.TemporalModelOptimized1f.drop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "model.TemporalModelOptimized1f.shrink_direct_1", "bonedirect_1.view.view.view", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "bonedirect_1.view.view.view", "model.TemporalModelOptimized1f.detach().repeat().detach", "range", "model.TemporalModelOptimized1f.shrink_direct_2", "bonedirect_2.view.view.view", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "bonedirect_2.view.view.view", "model.TemporalModelOptimized1f.directlinear", "model.TemporalModelOptimized1f.lengthlinear", "bonel.view.view.view", "model.TemporalModelOptimized1f.shrink", "model.TemporalModelOptimized1f.view", "model.TemporalModelOptimized1f.lengthlinear_1", "model.TemporalModelOptimized1f.lengthlinear_2", "model.TemporalModelOptimized1f.directlinear_1", "bonejs_1.view.view.view", "model.TemporalModelOptimized1f.shrink_js_1", "js_1.view.view.view", "model.TemporalModelOptimized1f.directlinear_2", "bonejs_2.view.view.view", "model.TemporalModelOptimized1f.shrink_js_2", "js_2.view.view.view", "model.TemporalModelOptimized1f.size", "model.TemporalModelOptimized1f.size", "model.TemporalModelOptimized1f.size", "model.TemporalModelOptimized1f.size", "model.TemporalModelOptimized1f.relu", "len", "model.TemporalModelOptimized1f.drop", "model.TemporalModelOptimized1f.drop", "model.TemporalModelOptimized1f.view.detach", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "model.TemporalModelOptimized1f.view.detach().view", "model.TemporalModelOptimized1f.relu", "len", "model.TemporalModelOptimized1f.drop", "model.TemporalModelOptimized1f.drop", "model.TemporalModelOptimized1f.view.detach", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "model.TemporalModelOptimized1f.view.detach().view", "model.TemporalModelOptimized1f.relu", "model.TemporalModelOptimized1f.relu", "model.TemporalModelOptimized1f.detach", "model.TemporalModelOptimized1f.drop", "xbottom.append", "bonedirect_1.view.view.size", "bonedirect_1.view.view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.TemporalModelOptimized1f.drop", "bonedirect_2.view.view.size", "bonedirect_2.view.view.size", "bonedirect_2.view.view.detach", "bonelength.detach", "model.TemporalModelOptimized1f.size", "model.TemporalModelOptimized1f.size", "bonelength.detach", "bonelength.detach", "js_1.view.view.size", "js_1.view.view.size", "js_2.view.view.size", "js_2.view.view.size", "xtemp[].contiguous", "model.TemporalModelOptimized1f.size", "model.TemporalModelOptimized1f.size", "model.TemporalModelOptimized1f.relu", "model.TemporalModelOptimized1f.relu", "model.TemporalModelOptimized1f.view.detach", "model.TemporalModelOptimized1f.boneatt", "model.TemporalModelOptimized1f.size", "model.TemporalModelOptimized1f.size", "model.TemporalModelOptimized1f.relu", "model.TemporalModelOptimized1f.relu", "model.TemporalModelOptimized1f.view.detach", "model.TemporalModelOptimized1f.boneatt", "model.TemporalModelOptimized1f.expand_bn", "model.TemporalModelOptimized1f.expand_bnscore", "len", "model.TemporalModelOptimized1f.relu", "model.TemporalModelOptimized1f.drop", "model.TemporalModelOptimized1f.detach", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "model.TemporalModelOptimized1f.detach().repeat", "len", "model.TemporalModelOptimized1f.relu", "model.TemporalModelOptimized1f.drop", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.cat.view", "torch.cat.view", "model.TemporalModelOptimized1f.view.detach", "torch.cat.view", "torch.cat.view", "model.TemporalModelOptimized1f.view.detach", "model.TemporalModelOptimized1f.expand_conv", "model.TemporalModelOptimized1f.expand_convscore", "model.TemporalModelOptimized1f.relu", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "int", "model.TemporalModelOptimized1f.relu", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "model.TemporalModelOptimized1f.detach", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.bone.getbonelength", "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.bone.getbonelength"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_rand", ",", "x_randaug", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "xtemp", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "num_joints_in", ",", "3", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "#visibility score feature", "\n", "xscore", "=", "xtemp", "[", ":", ",", ":", ",", "2", ",", ":", "]", "\n", "x", "=", "xtemp", "[", ":", ",", ":", ",", ":", "2", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "num_joints_in", "*", "2", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "\n", "bs", "=", "x_rand", ".", "size", "(", "0", ")", "\n", "ss", "=", "x_rand", ".", "size", "(", "1", ")", "\n", "\n", "#first deal with the bone length prediction network", "\n", "x_rand", "=", "x_rand", ".", "view", "(", "x_rand", ".", "size", "(", "0", ")", "*", "x_rand", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "x_rand", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bnbone", "[", "0", "]", "(", "self", ".", "layers_convbone", "[", "0", "]", "(", "x_rand", ")", ")", ")", ")", "\n", "#independently predict the 3D joint locations of each randomly sampled frame", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "pad", ")", ")", ":", "\n", "            ", "res_rand", "=", "x_rand", "\n", "x_rand", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bnbone", "[", "2", "*", "i", "-", "1", "]", "(", "self", ".", "layers_convbone", "[", "2", "*", "i", "-", "1", "]", "(", "x_rand", ")", ")", ")", ")", "\n", "x_rand", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bnbone", "[", "2", "*", "i", "]", "(", "self", ".", "layers_convbone", "[", "2", "*", "i", "]", "(", "x_rand", ")", ")", ")", ")", "\n", "x_rand", "=", "x_rand", "+", "res_rand", "\n", "", "x_rand", "=", "self", ".", "layers_convbone", "[", "-", "1", "]", "(", "x_rand", ")", "\n", "x_rand", "=", "x_rand", ".", "view", "(", "bs", ",", "ss", ",", "self", ".", "num_joints_out", ",", "3", ")", "\n", "# let's compute the bone length weights", "\n", "x_rand2", "=", "x_rand", ".", "view", "(", "bs", ",", "ss", ",", "-", "1", ")", "\n", "x_rand_abs", "=", "torch", ".", "abs", "(", "x_rand2", ".", "detach", "(", ")", ")", "\n", "x_rand_con", "=", "torch", ".", "cat", "(", "(", "x_rand2", ".", "detach", "(", ")", ",", "x_rand_abs", ")", ",", "2", ")", "\n", "x_rand_boneatt", "=", "self", ".", "boneatt", "(", "x_rand_con", ".", "view", "(", "bs", "*", "ss", ",", "-", "1", ")", ")", ".", "view", "(", "x_rand_con", ".", "size", "(", "0", ")", ",", "x_rand_con", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "x_rand_boneatt", "=", "x_rand_boneatt", "*", "self", ".", "temperature", "\n", "x_rand_boneatt", "=", "self", ".", "softmax", "(", "x_rand_boneatt", ")", "\n", "# manually derive bone length based on the 3D joint location predictions ", "\n", "bone", "=", "getbonelength", "(", "x_rand2", ".", "detach", "(", ")", ".", "view", "(", "bs", ",", "ss", ",", "-", "1", ",", "3", ")", ",", "self", ".", "boneindex", ")", "\n", "# get the final predicted bone length of the current frame", "\n", "bonelength", "=", "(", "bone", "*", "x_rand_boneatt", ")", ".", "sum", "(", "1", ")", "\n", "\n", "# deal with the augmented data", "\n", "x_randaug", "=", "x_randaug", ".", "view", "(", "x_randaug", ".", "size", "(", "0", ")", "*", "x_randaug", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "x_randaug", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bnbone", "[", "0", "]", "(", "self", ".", "layers_convbone", "[", "0", "]", "(", "x_randaug", ")", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "pad", ")", ")", ":", "\n", "            ", "res_randaug", "=", "x_randaug", "\n", "x_randaug", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bnbone", "[", "2", "*", "i", "-", "1", "]", "(", "self", ".", "layers_convbone", "[", "2", "*", "i", "-", "1", "]", "(", "x_randaug", ")", ")", ")", ")", "\n", "x_randaug", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bnbone", "[", "2", "*", "i", "]", "(", "self", ".", "layers_convbone", "[", "2", "*", "i", "]", "(", "x_randaug", ")", ")", ")", ")", "\n", "x_randaug", "=", "x_randaug", "+", "res_randaug", "\n", "", "x_randaug", "=", "self", ".", "layers_convbone", "[", "-", "1", "]", "(", "x_randaug", ")", "\n", "x_randaug", "=", "x_randaug", ".", "view", "(", "bs", ",", "ss", ",", "self", ".", "num_joints_out", ",", "3", ")", "\n", "x_randaug2", "=", "x_randaug", ".", "view", "(", "bs", ",", "ss", ",", "-", "1", ")", "\n", "x_rand_absaug", "=", "torch", ".", "abs", "(", "x_randaug2", ".", "detach", "(", ")", ")", "\n", "x_rand_conaug", "=", "torch", ".", "cat", "(", "(", "x_randaug2", ".", "detach", "(", ")", ",", "x_rand_absaug", ")", ",", "2", ")", "\n", "x_rand_boneattaug", "=", "self", ".", "boneatt", "(", "x_rand_conaug", ".", "view", "(", "bs", "*", "ss", ",", "-", "1", ")", ")", ".", "view", "(", "x_rand_conaug", ".", "size", "(", "0", ")", ",", "x_rand_conaug", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "x_rand_boneattaug", "=", "x_rand_boneattaug", "*", "self", ".", "temperature", "\n", "x_rand_boneattaug", "=", "self", ".", "softmax", "(", "x_rand_boneattaug", ")", "\n", "boneaug", "=", "getbonelength", "(", "x_randaug2", ".", "detach", "(", ")", ".", "view", "(", "bs", ",", "ss", ",", "-", "1", ",", "3", ")", ",", "self", ".", "boneindex", ")", "\n", "bonelengthaug", "=", "(", "boneaug", "*", "x_rand_boneattaug", ")", ".", "sum", "(", "1", ")", "\n", "\n", "# Now deal with the bone direction prediction network", "\n", "\n", "#first sub-network", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bn", "(", "self", ".", "expand_conv", "(", "x", ")", ")", ")", ")", "\n", "xscore", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bnscore", "(", "self", ".", "expand_convscore", "(", "xscore", ")", ")", ")", ")", "\n", "xbottom", "=", "[", "x", ".", "detach", "(", ")", "]", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "xscore", "*", "x", ")", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "res", "=", "x", "[", ":", ",", ":", "self", ".", "channels", ",", "self", ".", "causal_shift", "[", "i", "+", "1", "]", "+", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "//", "2", ":", ":", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "]", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "]", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "res", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "xbottom", ".", "append", "(", "x", ".", "detach", "(", ")", ")", "\n", "", "x_1", "=", "x", "\n", "bonedirect_1", "=", "self", ".", "shrink_direct_1", "(", "x_1", ")", "\n", "bonedirect_1", "=", "bonedirect_1", ".", "view", "(", "bonedirect_1", ".", "size", "(", "0", ")", ",", "self", ".", "num_joints_out", "-", "1", ",", "3", ")", "\n", "bonesum_1", "=", "torch", ".", "pow", "(", "torch", ".", "pow", "(", "bonedirect_1", ",", "2", ")", ".", "sum", "(", "2", ")", ",", "0.5", ")", ".", "unsqueeze", "(", "2", ")", "\n", "bonedirect_1", "=", "bonedirect_1", "/", "bonesum_1", "\n", "bonedirect_1", "=", "bonedirect_1", ".", "view", "(", "bonedirect_1", ".", "size", "(", "0", ")", ",", "(", "self", ".", "num_joints_out", "-", "1", ")", "*", "3", ",", "1", ")", "\n", "\n", "#second sub-network", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "repeat", "(", "1", ",", "1", ",", "int", "(", "(", "self", ".", "sinrecfield", "*", "2", "+", "1", ")", "/", "self", ".", "filter_widths", "[", "0", "]", ")", ")", ".", "detach", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "xbottom", "[", "i", "]", ")", ",", "1", ")", "\n", "res", "=", "x", "[", ":", ",", ":", ",", "self", ".", "causal_shift", "[", "i", "+", "1", "]", "+", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "//", "2", ":", ":", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "]", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn1", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv1", "[", "2", "*", "i", "]", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "res", "[", ":", ",", ":", "self", ".", "channels", "]", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn1", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv1", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "", "bonedirect_2", "=", "self", ".", "shrink_direct_2", "(", "x", ")", "\n", "bonedirect_2", "=", "bonedirect_2", ".", "view", "(", "bonedirect_2", ".", "size", "(", "0", ")", ",", "self", ".", "num_joints_out", "-", "1", ",", "3", ")", "\n", "bonesum_2", "=", "torch", ".", "pow", "(", "torch", ".", "pow", "(", "bonedirect_2", ",", "2", ")", ".", "sum", "(", "2", ")", ",", "0.5", ")", ".", "unsqueeze", "(", "2", ")", "\n", "bonedirect_2", "=", "bonedirect_2", "/", "bonesum_2", "\n", "bonedirect_2", "=", "bonedirect_2", ".", "view", "(", "bonedirect_2", ".", "size", "(", "0", ")", ",", "(", "self", ".", "num_joints_out", "-", "1", ")", "*", "3", ",", "1", ")", "\n", "\n", "#compute the final 3D joint locations", "\n", "boned", "=", "self", ".", "directlinear", "(", "bonedirect_2", ".", "detach", "(", ")", ")", "\n", "bonel", "=", "self", ".", "lengthlinear", "(", "bonelength", ".", "detach", "(", ")", ")", "\n", "bonel", "=", "bonel", ".", "view", "(", "boned", ".", "size", "(", ")", ")", "\n", "x", "=", "bonel", "*", "boned", "\n", "x", "=", "self", ".", "shrink", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "num_joints_out", ",", "3", ")", "\n", "\n", "#compute the relative joint shifts independently based on the predictions of bl-network and each sub-network of bd-network", "\n", "bonejs_1", "=", "self", ".", "lengthlinear_1", "(", "bonelength", ".", "detach", "(", ")", ")", "\n", "bonejs_2", "=", "self", ".", "lengthlinear_2", "(", "bonelength", ".", "detach", "(", ")", ")", "\n", "\n", "js_1", "=", "self", ".", "directlinear_1", "(", "bonedirect_1", ")", "\n", "bonejs_1", "=", "bonejs_1", ".", "view", "(", "js_1", ".", "size", "(", ")", ")", "\n", "js_1", "=", "js_1", "*", "bonejs_1", "\n", "js_1", "=", "self", ".", "shrink_js_1", "(", "js_1", ")", "\n", "js_1", "=", "js_1", ".", "view", "(", "js_1", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "jointshiftnum", ",", "3", ")", "\n", "\n", "js_2", "=", "self", ".", "directlinear_2", "(", "bonedirect_2", ")", "\n", "bonejs_2", "=", "bonejs_2", ".", "view", "(", "js_2", ".", "size", "(", ")", ")", "\n", "js_2", "=", "js_2", "*", "bonejs_2", "\n", "js_2", "=", "self", ".", "shrink_js_2", "(", "js_2", ")", "\n", "js_2", "=", "js_2", ".", "view", "(", "js_2", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "jointshiftnum", ",", "3", ")", "\n", "return", "x", ",", "bonelength", ",", "x_rand", ",", "bonelengthaug", ",", "x_randaug", ",", "bonedirect_2", ",", "bonedirect_1", ",", "js_2", ",", "js_1", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.utils.wrap": [[12, 43], ["list", "enumerate", "func", "isinstance", "list", "enumerate", "tuple", "type", "torch.from_numpy", "type", "result.squeeze.numpy", "args[].unsqueeze", "type", "res.squeeze.numpy", "result.squeeze.squeeze", "res.squeeze.squeeze"], "function", ["None"], ["def", "wrap", "(", "func", ",", "*", "args", ",", "unsqueeze", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Wrap a torch function so it can be called with NumPy arrays.\n    Input and return types are seamlessly converted.\n    \"\"\"", "\n", "\n", "# Convert input types where applicable", "\n", "args", "=", "list", "(", "args", ")", "\n", "for", "i", ",", "arg", "in", "enumerate", "(", "args", ")", ":", "\n", "        ", "if", "type", "(", "arg", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "args", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "arg", ")", "\n", "if", "unsqueeze", ":", "\n", "                ", "args", "[", "i", "]", "=", "args", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "", "", "result", "=", "func", "(", "*", "args", ")", "\n", "\n", "# Convert output types where applicable", "\n", "if", "isinstance", "(", "result", ",", "tuple", ")", ":", "\n", "        ", "result", "=", "list", "(", "result", ")", "\n", "for", "i", ",", "res", "in", "enumerate", "(", "result", ")", ":", "\n", "            ", "if", "type", "(", "res", ")", "==", "torch", ".", "Tensor", ":", "\n", "                ", "if", "unsqueeze", ":", "\n", "                    ", "res", "=", "res", ".", "squeeze", "(", "0", ")", "\n", "", "result", "[", "i", "]", "=", "res", ".", "numpy", "(", ")", "\n", "", "", "return", "tuple", "(", "result", ")", "\n", "", "elif", "type", "(", "result", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "if", "unsqueeze", ":", "\n", "            ", "result", "=", "result", ".", "squeeze", "(", "0", ")", "\n", "", "return", "result", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.utils.deterministic_random": [[44, 48], ["hashlib.sha256().digest", "int.from_bytes", "int", "hashlib.sha256", "data.encode"], "function", ["None"], ["", "", "def", "deterministic_random", "(", "min_value", ",", "max_value", ",", "data", ")", ":", "\n", "    ", "digest", "=", "hashlib", ".", "sha256", "(", "data", ".", "encode", "(", ")", ")", ".", "digest", "(", ")", "\n", "raw_value", "=", "int", ".", "from_bytes", "(", "digest", "[", ":", "4", "]", ",", "byteorder", "=", "'little'", ",", "signed", "=", "False", ")", "\n", "return", "int", "(", "raw_value", "/", "(", "2", "**", "32", "-", "1", ")", "*", "(", "max_value", "-", "min_value", ")", ")", "+", "min_value", "", "", ""]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.__init__": [[11, 18], ["numpy.array", "skeleton.Skeleton._compute_metadata", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton._compute_metadata"], ["    ", "def", "__init__", "(", "self", ",", "parents", ",", "joints_left", ",", "joints_right", ")", ":", "\n", "        ", "assert", "len", "(", "joints_left", ")", "==", "len", "(", "joints_right", ")", "\n", "\n", "self", ".", "_parents", "=", "np", ".", "array", "(", "parents", ")", "\n", "self", ".", "_joints_left", "=", "joints_left", "\n", "self", ".", "_joints_right", "=", "joints_right", "\n", "self", ".", "_compute_metadata", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.num_joints": [[19, 21], ["len"], "methods", ["None"], ["", "def", "num_joints", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_parents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.parents": [[22, 24], ["None"], "methods", ["None"], ["", "def", "parents", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_parents", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.has_children": [[25, 27], ["None"], "methods", ["None"], ["", "def", "has_children", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_children", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.children": [[28, 30], ["None"], "methods", ["None"], ["", "def", "children", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_children", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.remove_joints": [[31, 70], ["range", "range", "numpy.zeros", "enumerate", "numpy.array", "skeleton.Skeleton._compute_metadata", "len", "len", "len", "valid_joints.append", "new_parents.append", "new_joints_left.append", "new_joints_right.append"], "methods", ["home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton._compute_metadata"], ["", "def", "remove_joints", "(", "self", ",", "joints_to_remove", ")", ":", "\n", "        ", "\"\"\"\n        Remove the joints specified in 'joints_to_remove'.\n        \"\"\"", "\n", "valid_joints", "=", "[", "]", "\n", "for", "joint", "in", "range", "(", "len", "(", "self", ".", "_parents", ")", ")", ":", "\n", "            ", "if", "joint", "not", "in", "joints_to_remove", ":", "\n", "                ", "valid_joints", ".", "append", "(", "joint", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_parents", ")", ")", ":", "\n", "            ", "while", "self", ".", "_parents", "[", "i", "]", "in", "joints_to_remove", ":", "\n", "                ", "self", ".", "_parents", "[", "i", "]", "=", "self", ".", "_parents", "[", "self", ".", "_parents", "[", "i", "]", "]", "\n", "\n", "", "", "index_offsets", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "_parents", ")", ",", "dtype", "=", "int", ")", "\n", "new_parents", "=", "[", "]", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "i", "not", "in", "joints_to_remove", ":", "\n", "                ", "new_parents", ".", "append", "(", "parent", "-", "index_offsets", "[", "parent", "]", ")", "\n", "", "else", ":", "\n", "                ", "index_offsets", "[", "i", ":", "]", "+=", "1", "\n", "", "", "self", ".", "_parents", "=", "np", ".", "array", "(", "new_parents", ")", "\n", "\n", "\n", "if", "self", ".", "_joints_left", "is", "not", "None", ":", "\n", "            ", "new_joints_left", "=", "[", "]", "\n", "for", "joint", "in", "self", ".", "_joints_left", ":", "\n", "                ", "if", "joint", "in", "valid_joints", ":", "\n", "                    ", "new_joints_left", ".", "append", "(", "joint", "-", "index_offsets", "[", "joint", "]", ")", "\n", "", "", "self", ".", "_joints_left", "=", "new_joints_left", "\n", "", "if", "self", ".", "_joints_right", "is", "not", "None", ":", "\n", "            ", "new_joints_right", "=", "[", "]", "\n", "for", "joint", "in", "self", ".", "_joints_right", ":", "\n", "                ", "if", "joint", "in", "valid_joints", ":", "\n", "                    ", "new_joints_right", ".", "append", "(", "joint", "-", "index_offsets", "[", "joint", "]", ")", "\n", "", "", "self", ".", "_joints_right", "=", "new_joints_right", "\n", "\n", "", "self", ".", "_compute_metadata", "(", ")", "\n", "\n", "return", "valid_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.joints_left": [[71, 73], ["None"], "methods", ["None"], ["", "def", "joints_left", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_joints_left", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton.joints_right": [[74, 76], ["None"], "methods", ["None"], ["", "def", "joints_right", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_joints_right", "\n", "\n"]], "home.repos.pwc.inspect_result.sunnychencool_Anatomy3D.common.skeleton.Skeleton._compute_metadata": [[77, 89], ["numpy.zeros().astype", "enumerate", "enumerate", "enumerate", "skeleton.Skeleton._children.append", "numpy.zeros", "skeleton.Skeleton._children[].append", "len"], "methods", ["None"], ["", "def", "_compute_metadata", "(", "self", ")", ":", "\n", "        ", "self", ".", "_has_children", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "_parents", ")", ")", ".", "astype", "(", "bool", ")", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "parent", "!=", "-", "1", ":", "\n", "                ", "self", ".", "_has_children", "[", "parent", "]", "=", "True", "\n", "\n", "", "", "self", ".", "_children", "=", "[", "]", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "self", ".", "_children", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "parent", "!=", "-", "1", ":", "\n", "                ", "self", ".", "_children", "[", "parent", "]", ".", "append", "(", "i", ")", "", "", "", "", "", ""]]}