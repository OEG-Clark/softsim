{"home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.__init__": [[29, 42], ["csne.CSNE._compute_adj_list", "csne.CSNE._sample_ids"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE._compute_adj_list", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE._sample_ids"], ["    ", "def", "__init__", "(", "self", ",", "A", ",", "params", ",", "prior", ",", "samplemask", "=", "None", ")", ":", "\n", "        ", "self", ".", "__A", "=", "A", "\n", "self", ".", "__n", "=", "A", ".", "shape", "[", "0", "]", "\n", "self", ".", "__d", "=", "params", "[", "\"d\"", "]", "\n", "self", ".", "__k", "=", "params", "[", "\"k\"", "]", "\n", "self", ".", "__s1", "=", "params", "[", "\"s1\"", "]", "\n", "self", ".", "__s2", "=", "params", "[", "\"s2\"", "]", "\n", "self", ".", "__params", "=", "params", "\n", "self", ".", "__diff_inv_sp2", "=", "1", "/", "self", ".", "__s1", "**", "2", "-", "1", "/", "self", ".", "__s2", "**", "2", "\n", "self", ".", "__s1_div_s2", "=", "self", ".", "__s1", "/", "self", ".", "__s2", "\n", "self", ".", "__prior", "=", "prior", "\n", "self", ".", "_compute_adj_list", "(", "A", ")", "\n", "self", ".", "_sample_ids", "(", "samplemask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE._compute_adj_list": [[43, 49], ["A.tocsr", "range", "csne.CSNE.__adj_list.append"], "methods", ["None"], ["", "def", "_compute_adj_list", "(", "self", ",", "A", ")", ":", "\n", "        ", "__csr_A", "=", "A", ".", "tocsr", "(", ")", "\n", "self", ".", "__adj_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "__csr_A", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "__adj_list", ".", "append", "(", "\n", "__csr_A", ".", "indices", "[", "__csr_A", ".", "indptr", "[", "i", "]", ":", "__csr_A", ".", "indptr", "[", "i", "+", "1", "]", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.get_sample_ids": [[51, 53], ["None"], "methods", ["None"], ["", "", "def", "get_sample_ids", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "__sample_ids_list", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.get_edge_masks": [[54, 56], ["None"], "methods", ["None"], ["", "def", "get_edge_masks", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "__edge_masks", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE._sample_ids": [[57, 104], ["tqdm.tqdm.trange", "min", "csne.CSNE.__num_pos_sample_list.append", "samples.extend", "numpy.zeros_like().astype", "csne.CSNE.__sample_ids_list.append", "csne.CSNE.__edge_masks.append", "csne.CSNE.__prior.get_row_probability", "csne.CSNE.__prior_ratio.append", "numpy.squeeze", "numpy.squeeze", "csne.CSNE.__sample_ids_list.append", "csne.CSNE.__edge_masks.append", "csne.CSNE.__prior.get_row_probability", "csne.CSNE.__prior_ratio.append", "len", "samples.extend", "list", "numpy.array", "numpy.array", "numpy.where", "numpy.zeros_like", "csne.CSNE.__A[].todense", "samplemask[].todense", "set", "numpy.random.choice", "set", "set", "len", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.get_row_probability", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.get_row_probability"], ["", "def", "_sample_ids", "(", "self", ",", "samplemask", "=", "None", ")", ":", "\n", "        ", "self", ".", "__sample_ids_list", "=", "[", "]", "\n", "self", ".", "__edge_masks", "=", "[", "]", "\n", "self", ".", "__num_pos_sample_list", "=", "[", "]", "\n", "self", ".", "__prior_ratio", "=", "[", "]", "\n", "\n", "for", "i", "in", "trange", "(", "self", ".", "__n", ",", "desc", "=", "\"Neighborhood sampling\"", ")", ":", "\n", "            ", "if", "samplemask", "is", "None", ":", "\n", "                ", "samples", "=", "[", "]", "\n", "pos_ids", "=", "self", ".", "__adj_list", "[", "i", "]", "\n", "num_pos_samples", "=", "min", "(", "len", "(", "pos_ids", ")", ",", "self", ".", "__k", ")", "\n", "if", "num_pos_samples", "!=", "0", ":", "\n", "                    ", "samples", ".", "extend", "(", "\n", "pos_ids", "[", "np", ".", "random", ".", "choice", "(", "len", "(", "pos_ids", ")", ",", "num_pos_samples", ")", "]", "\n", ")", "\n", "", "self", ".", "__num_pos_sample_list", ".", "append", "(", "num_pos_samples", ")", "\n", "\n", "samples", ".", "extend", "(", "\n", "list", "(", "\n", "set", "(", "\n", "np", ".", "random", ".", "randint", "(", "\n", "self", ".", "__n", ",", "size", "=", "(", "1", ",", "2", "*", "self", ".", "__k", "-", "num_pos_samples", ")", "\n", ")", "[", "0", "]", "\n", ")", "\n", "-", "set", "(", "pos_ids", ")", "\n", "-", "set", "(", "{", "i", "}", ")", "\n", ")", "\n", ")", "\n", "\n", "edge_mask", "=", "np", ".", "zeros_like", "(", "samples", ")", ".", "astype", "(", "bool", ")", "\n", "edge_mask", "[", ":", "num_pos_samples", "]", "=", "True", "\n", "\n", "self", ".", "__sample_ids_list", ".", "append", "(", "samples", ")", "\n", "self", ".", "__edge_masks", ".", "append", "(", "edge_mask", ")", "\n", "P", "=", "self", ".", "__prior", ".", "get_row_probability", "(", "i", ",", "samples", ")", "\n", "self", ".", "__prior_ratio", ".", "append", "(", "(", "1", "-", "P", ")", "/", "P", ")", "\n", "", "else", ":", "\n", "                ", "row", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "self", ".", "__A", "[", "i", ",", ":", "]", ".", "todense", "(", ")", ")", ")", "\n", "mask", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "samplemask", "[", "i", ",", ":", "]", ".", "todense", "(", ")", ")", ")", "\n", "mask", "[", "i", "]", "=", "False", "\n", "sample_ids", "=", "np", ".", "where", "(", "mask", ")", "[", "0", "]", "\n", "\n", "self", ".", "__sample_ids_list", ".", "append", "(", "sample_ids", ")", "\n", "aux", "=", "row", "[", "sample_ids", "]", "\n", "self", ".", "__edge_masks", ".", "append", "(", "aux", ">", "0.5", ")", "\n", "P", "=", "self", ".", "__prior", ".", "get_row_probability", "(", "i", ",", "sample_ids", ")", "\n", "self", ".", "__prior_ratio", ".", "append", "(", "(", "1", "-", "P", ")", "/", "P", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE._compute_squared_dist": [[105, 107], ["numpy.sum"], "methods", ["None"], ["", "", "", "def", "_compute_squared_dist", "(", "self", ",", "X", ",", "target_id", ",", "sample_ids", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "(", "X", "[", "target_id", ",", ":", "]", "-", "X", "[", "sample_ids", ",", ":", "]", ")", "**", "2", ",", "axis", "=", "1", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE._eval_obj": [[108, 128], ["range", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.log", "numpy.log", "numpy.exp"], "methods", ["None"], ["", "def", "_eval_obj", "(", "self", ",", "X", ")", ":", "\n", "        ", "obj", "=", "0.0", "\n", "for", "i", "in", "range", "(", "self", ".", "__n", ")", ":", "\n", "            ", "sample_ids", "=", "self", ".", "__sample_ids_list", "[", "i", "]", "\n", "edge_mask", "=", "self", ".", "__edge_masks", "[", "i", "]", "\n", "\n", "diff", "=", "(", "X", "[", "i", ",", ":", "]", "-", "X", "[", "sample_ids", ",", ":", "]", ")", ".", "T", "\n", "D", "=", "np", ".", "sum", "(", "diff", "**", "2", ",", "axis", "=", "0", ")", "\n", "P_aij_X", "=", "1.0", "/", "(", "\n", "1", "\n", "+", "self", ".", "__s1_div_s2", "\n", "*", "self", ".", "__prior_ratio", "[", "i", "]", "\n", "*", "np", ".", "exp", "(", "self", ".", "__diff_inv_sp2", "*", "D", "/", "2", ")", "\n", ")", "\n", "\n", "obj", "+=", "np", ".", "sum", "(", "np", ".", "log", "(", "P_aij_X", "[", "edge_mask", "]", "+", "1e-20", ")", ")", "+", "np", ".", "sum", "(", "\n", "np", ".", "log", "(", "1", "-", "P_aij_X", "[", "~", "edge_mask", "]", "+", "1e-20", ")", "\n", ")", "\n", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE._eval_grad": [[129, 148], ["numpy.zeros_like", "range", "numpy.sum", "numpy.sum", "numpy.exp"], "methods", ["None"], ["", "def", "_eval_grad", "(", "self", ",", "X", ",", "epsilon", "=", "0.01", ")", ":", "\n", "        ", "grad", "=", "np", ".", "zeros_like", "(", "X", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "__n", ")", ":", "\n", "            ", "sample_ids", "=", "self", ".", "__sample_ids_list", "[", "i", "]", "\n", "edge_mask", "=", "self", ".", "__edge_masks", "[", "i", "]", "\n", "\n", "diff", "=", "(", "X", "[", "i", ",", ":", "]", "-", "X", "[", "sample_ids", ",", ":", "]", ")", ".", "T", "\n", "D", "=", "np", ".", "sum", "(", "diff", "**", "2", ",", "axis", "=", "0", ")", "\n", "P_aij_X", "=", "1.0", "/", "(", "\n", "1", "\n", "+", "self", ".", "__s1_div_s2", "\n", "*", "self", ".", "__prior_ratio", "[", "i", "]", "\n", "*", "np", ".", "exp", "(", "self", ".", "__diff_inv_sp2", "*", "D", "/", "2", ")", "\n", ")", "\n", "\n", "grad_i", "=", "2", "*", "self", ".", "__diff_inv_sp2", "*", "(", "(", "P_aij_X", "-", "edge_mask", ")", "*", "diff", ")", ".", "T", "\n", "grad", "[", "i", ",", ":", "]", "+=", "np", ".", "sum", "(", "grad_i", ",", "axis", "=", "0", ")", "\n", "grad", "[", "sample_ids", ",", ":", "]", "-=", "grad_i", "\n", "", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.compute_row_posterior": [[149, 156], ["csne.CSNE.__prior.get_row_probability", "csne.CSNE._compute_squared_dist", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.get_row_probability", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE._compute_squared_dist"], ["", "def", "compute_row_posterior", "(", "self", ",", "row_id", ",", "col_ids", ",", "X", "=", "None", ")", ":", "\n", "        ", "if", "X", "is", "None", ":", "\n", "            ", "X", "=", "self", ".", "__emb", "\n", "", "P", "=", "self", ".", "__prior", ".", "get_row_probability", "(", "row_id", ",", "col_ids", ")", "\n", "D", "=", "self", ".", "_compute_squared_dist", "(", "X", ",", "row_id", ",", "col_ids", ")", "\n", "return", "1.0", "/", "(", "\n", "1", "+", "self", ".", "__s1_div_s2", "*", "(", "1", "-", "P", ")", "/", "P", "*", "np", ".", "exp", "(", "self", ".", "__diff_inv_sp2", "*", "D", "/", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.optimizer_adam": [[158, 200], ["numpy.zeros_like", "numpy.zeros_like", "tqdm.tqdm.trange", "m.copy", "v.copy", "csne.CSNE._eval_grad", "tqdm.tqdm.tqdm.write", "csne.CSNE._eval_obj", "tqdm.tqdm.tqdm.write", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE._eval_grad", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE._eval_obj"], ["", "def", "optimizer_adam", "(", "\n", "self", ",", "\n", "X", ",", "\n", "num_epochs", "=", "100", ",", "\n", "alpha", "=", "0.001", ",", "\n", "beta_1", "=", "0.9", ",", "\n", "beta_2", "=", "0.9999", ",", "\n", "eps", "=", "1e-8", ",", "\n", "verbose", "=", "True", ",", "\n", "epsilon", "=", "0.01", ",", "\n", ")", ":", "\n", "        ", "m_prev", "=", "np", ".", "zeros_like", "(", "X", ")", "\n", "v_prev", "=", "np", ".", "zeros_like", "(", "X", ")", "\n", "for", "epoch", "in", "trange", "(", "num_epochs", ",", "desc", "=", "\"Training CSNE\"", ")", ":", "\n", "            ", "grad", "=", "-", "self", ".", "_eval_grad", "(", "X", ",", "epsilon", "=", "epsilon", ")", "\n", "\n", "# Adam optimizer", "\n", "m", "=", "beta_1", "*", "m_prev", "+", "(", "1", "-", "beta_1", ")", "*", "grad", "\n", "v", "=", "beta_2", "*", "v_prev", "+", "(", "1", "-", "beta_2", ")", "*", "grad", "**", "2", "\n", "\n", "m_prev", "=", "m", ".", "copy", "(", ")", "\n", "v_prev", "=", "v", ".", "copy", "(", ")", "\n", "\n", "m", "=", "m", "/", "(", "1", "-", "beta_1", "**", "(", "epoch", "+", "1", ")", ")", "\n", "v", "=", "v", "/", "(", "1", "-", "beta_2", "**", "(", "epoch", "+", "1", ")", ")", "\n", "X", "-=", "alpha", "*", "m", "/", "(", "v", "**", "0.5", "+", "eps", ")", "\n", "\n", "if", "verbose", ":", "\n", "                ", "if", "epoch", "%", "1", "==", "0", ":", "\n", "                    ", "grad_norm", "=", "np", ".", "sum", "(", "grad", "**", "2", ")", "**", "0.5", "\n", "tqdm", ".", "write", "(", "\n", "\"Epoch: {:d}, gradient norm: {:.4f}\"", ".", "format", "(", "epoch", ",", "grad_norm", ")", "\n", ")", "\n", "", "if", "epoch", "==", "num_epochs", "-", "1", ":", "\n", "                    ", "grad_norm", "=", "np", ".", "sum", "(", "grad", "**", "2", ")", "**", "0.5", "\n", "obj", "=", "self", ".", "_eval_obj", "(", "X", ")", "\n", "tqdm", ".", "write", "(", "\n", "\"Epoch: {:d}, obj: {:.4f}, gradient norm: {:.4f}\"", ".", "format", "(", "\n", "epoch", ",", "-", "obj", ",", "grad_norm", "\n", ")", "\n", ")", "\n", "", "", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.fit": [[201, 218], ["numpy.random.randn", "csne.CSNE.optimizer_adam", "ValueError", "csne.CSNE.__params.get"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.optimizer_adam"], ["", "def", "fit", "(", "self", ",", "verbose", "=", "True", ",", "X0", "=", "None", ")", ":", "\n", "        ", "if", "X0", "is", "None", ":", "\n", "            ", "X", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "__n", ",", "self", ".", "__d", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "X0", "\n", "", "optimizer", "=", "self", ".", "__params", "[", "\"optimizer\"", "]", "\n", "if", "optimizer", "[", "\"name\"", "]", "==", "\"adam\"", ":", "\n", "            ", "self", ".", "__emb", "=", "self", ".", "optimizer_adam", "(", "\n", "X", ",", "\n", "num_epochs", "=", "optimizer", "[", "\"max_iter\"", "]", ",", "\n", "alpha", "=", "optimizer", "[", "\"lr\"", "]", ",", "\n", "verbose", "=", "verbose", ",", "\n", "epsilon", "=", "self", ".", "__params", ".", "get", "(", "\"epsilon\"", ",", "0", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"optimizer {:s} is not implemented.\"", ".", "format", "(", "optimizer", "[", "\"name\"", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.predict": [[220, 234], ["collections.defaultdict", "collections.defaultdict", "enumerate", "collections.defaultdict.keys", "edge_dict[].append", "ids_dict[].append", "pred.extend", "ids.extend", "csne.CSNE.compute_row_posterior", "sorted", "zip"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.compute_row_posterior"], ["", "", "def", "predict", "(", "self", ",", "E", ")", ":", "\n", "        ", "edge_dict", "=", "defaultdict", "(", "list", ")", "\n", "ids_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "edge", "in", "enumerate", "(", "E", ")", ":", "\n", "            ", "edge_dict", "[", "edge", "[", "0", "]", "]", ".", "append", "(", "edge", "[", "1", "]", ")", "\n", "ids_dict", "[", "edge", "[", "0", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "pred", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "u", "in", "edge_dict", ".", "keys", "(", ")", ":", "\n", "            ", "pred", ".", "extend", "(", "self", ".", "compute_row_posterior", "(", "u", ",", "edge_dict", "[", "u", "]", ")", ")", "\n", "ids", ".", "extend", "(", "ids_dict", "[", "u", "]", ")", "\n", "\n", "", "return", "[", "p", "for", "_", ",", "p", "in", "sorted", "(", "zip", "(", "ids", ",", "pred", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.get_embedding": [[235, 237], ["None"], "methods", ["None"], ["", "def", "get_embedding", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__emb", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.get_adj_row": [[238, 240], ["None"], "methods", ["None"], ["", "def", "get_adj_row", "(", "self", ",", "row_id", ")", ":", "\n", "        ", "return", "self", ".", "__A", "[", "row_id", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.get_posterior_row": [[241, 243], ["csne.CSNE.compute_row_posterior", "range"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.compute_row_posterior"], ["", "def", "get_posterior_row", "(", "self", ",", "row_id", ")", ":", "\n", "        ", "return", "self", ".", "compute_row_posterior", "(", "row_id", ",", "range", "(", "self", ".", "__n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.get_parameters": [[244, 249], ["csne.CSNE.__params.copy"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "params", "=", "self", ".", "__params", ".", "copy", "(", ")", "\n", "params", "[", "\"sample_ids_list\"", "]", "=", "self", ".", "__sample_ids_list", "\n", "params", "[", "\"edge_masks\"", "]", "=", "self", ".", "__edge_masks", "\n", "return", "params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.main.parse_args": [[18, 156], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.main.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\" Parses CSNE arguments. \"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Run CSNE.\"", ")", "\n", "\n", "# Input/output parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--inputgraph\"", ",", "\n", "nargs", "=", "\"?\"", ",", "\n", "default", "=", "\"../../data/hp-relations.csv\"", ",", "\n", "help", "=", "\"Input graph path\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output\"", ",", "\n", "nargs", "=", "\"?\"", ",", "\n", "default", "=", "\"network.emb\"", ",", "\n", "help", "=", "\"Path where the embeddings will be stored.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--tr_e\"", ",", "\n", "nargs", "=", "\"?\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Path of the input train edges. Default None (in this case returns embeddings)\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--tr_pred\"", ",", "\n", "nargs", "=", "\"?\"", ",", "\n", "default", "=", "\"tr_pred.csv\"", ",", "\n", "help", "=", "\"Path where the train predictions will be stored. Default tr_pred.csv\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--te_e\"", ",", "\n", "nargs", "=", "\"?\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Path of the input test edges. Default None.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--te_pred\"", ",", "\n", "nargs", "=", "\"?\"", ",", "\n", "default", "=", "\"te_pred.csv\"", ",", "\n", "help", "=", "\"Path where the test predictions will be stored. Default te_pred.csv\"", ",", "\n", ")", "\n", "\n", "# Prior related parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prior_tricount\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"Toogles triangle count use in prior. (1) use triangles and node polarity, \"", "\n", "\"(0) only node polarity. Default is 1.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prior_learning_rate\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"Learning rate for prior. Default is 1.0.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prior_epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"Training epochs for prior. Default is 100.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prior_tol\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0001", ",", "\n", "help", "=", "\"Early stop prior fit if grad norm is below this value. Default is 0.0001.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prior_regval\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.9", ",", "\n", "help", "=", "\"Regularization value, reduces the certainty about 1s and -1s. Default is 0.9\"", ",", "\n", ")", "\n", "\n", "# Embedding related parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--use_csne\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"Toogle CSNE use. (1) use CSNE, (0) use MaxEnt prior only. Default is 1.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--learning_rate\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.1", ",", "\n", "help", "=", "\"Learning rate for CSNE. Default is 0.1.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "500", ",", "\n", "help", "=", "\"Training epochs for CSNE. Default is 500.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--s1\"", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "\"Sigma 1. Default is 1.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--s2\"", ",", "type", "=", "float", ",", "default", "=", "2", ",", "help", "=", "\"Sigma 2. Default is 2.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dimension\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", ",", "\n", "help", "=", "\"Dimensionality of the CSNE embeddings. Default is 2.\"", ",", "\n", ")", "\n", "\n", "# Other parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--delimiter\"", ",", "default", "=", "\",\"", ",", "help", "=", "\"Delimiter used in the input files.\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--directed\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"If specified, network treated as directed. Default is undirected.\"", ",", "\n", ")", "\n", "parser", ".", "set_defaults", "(", "directed", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--verbose\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Determines the verbosity level of the output.\"", ",", "\n", ")", "\n", "parser", ".", "set_defaults", "(", "verbose", "=", "False", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.main.main_helper": [[158, 241], ["numpy.loadtxt", "networkx.DiGraph", "nx.DiGraph.add_weighted_edges_from", "csr_matrix", "time.time", "csne.maxent_comb.MaxentCombined.fit", "print", "time.time", "print", "networkx.adjacency_matrix().astype", "networkx.adjacency_matrix().astype", "nx.adjacency_matrix().astype.astype", "csne.maxent_comb.MaxentCombined", "csne.maxent_comb.MaxentCombined", "nx.adjacency_matrix().astype.eliminate_zeros", "csne.csne.CSNE", "csne.csne.CSNE.fit", "numpy.loadtxt", "predict_obj.predict", "numpy.savetxt", "nx.adjacency_matrix().astype.tocsr", "nx.adjacency_matrix().astype.tocsr", "numpy.loadtxt", "predict_obj.predict", "numpy.savetxt", "print", "numpy.savetxt", "print", "numpy.savetxt", "networkx.adjacency_matrix", "networkx.adjacency_matrix", "time.time", "predict_obj.get_embedding", "predict_obj.get_posterior", "time.time", "nx.DiGraph.to_undirected"], "function", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.fit", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.fit", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.predict", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.predict", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.csne.CSNE.get_embedding", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.get_posterior"], ["", "def", "main_helper", "(", "args", ")", ":", "\n", "    ", "\"\"\" Main of CSNE. \"\"\"", "\n", "\n", "# Load edgelist", "\n", "E", "=", "np", ".", "loadtxt", "(", "args", ".", "inputgraph", ",", "delimiter", "=", "args", ".", "delimiter", ",", "dtype", "=", "int", ")", "\n", "\n", "# Create a graph", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "\n", "# We make sure the graph edges have corresponding weights +1 or -1", "\n", "G", ".", "add_weighted_edges_from", "(", "E", "[", ":", ",", ":", "3", "]", ")", "\n", "\n", "# Get adj matrix of the graph", "\n", "if", "args", ".", "directed", ":", "\n", "        ", "tr_A", "=", "nx", ".", "adjacency_matrix", "(", "G", ")", ".", "astype", "(", "float", ")", "\n", "", "else", ":", "\n", "        ", "tr_A", "=", "nx", ".", "adjacency_matrix", "(", "G", ".", "to_undirected", "(", ")", ")", ".", "astype", "(", "float", ")", "\n", "\n", "# Compute mask with 1 for all nonzeros in tr_A", "\n", "", "mask", "=", "csr_matrix", "(", "tr_A", ".", "astype", "(", "bool", ")", ")", "\n", "\n", "# Fit MaxEnt prior", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "prior_tricount", ":", "\n", "        ", "mc", "=", "MaxentCombined", "(", "\n", "tr_A", ".", "tocsr", "(", ")", ",", "mask", ",", "[", "\"cpp\"", ",", "\"cpm\"", ",", "\"cmm\"", "]", ",", "\"quadratic\"", ",", "args", ".", "prior_regval", "\n", ")", "\n", "", "else", ":", "\n", "        ", "mc", "=", "MaxentCombined", "(", "tr_A", ".", "tocsr", "(", ")", ",", "mask", ",", "[", "]", ",", "\"quadratic\"", ",", "args", ".", "prior_regval", ")", "\n", "", "mc", ".", "fit", "(", "\n", "optimizer", "=", "\"newton\"", ",", "\n", "lr", "=", "args", ".", "prior_learning_rate", ",", "\n", "max_iter", "=", "args", ".", "prior_epochs", ",", "\n", "tol", "=", "args", ".", "prior_tol", ",", "\n", "verbose", "=", "args", ".", "verbose", ",", "\n", ")", "\n", "predict_obj", "=", "mc", "\n", "\n", "# Fit CSNE", "\n", "if", "args", ".", "use_csne", ":", "\n", "        ", "tr_A", "[", "tr_A", "==", "-", "1", "]", "=", "0", "\n", "tr_A", ".", "eliminate_zeros", "(", ")", "\n", "opt_params", "=", "{", "\"name\"", ":", "\"adam\"", ",", "\"lr\"", ":", "args", ".", "learning_rate", ",", "\"max_iter\"", ":", "args", ".", "epochs", "}", "\n", "params", "=", "{", "\n", "\"d\"", ":", "args", ".", "dimension", ",", "\n", "\"k\"", ":", "100", ",", "\n", "\"s1\"", ":", "args", ".", "s1", ",", "\n", "\"s2\"", ":", "args", ".", "s2", ",", "\n", "\"optimizer\"", ":", "opt_params", ",", "\n", "\"epsilon\"", ":", "0.0", ",", "\n", "}", "\n", "csne", "=", "CSNE", "(", "tr_A", ",", "params", ",", "mc", ",", "mask", ")", "\n", "csne", ".", "fit", "(", ")", "\n", "predict_obj", "=", "csne", "\n", "", "print", "(", "\"Computation time: {}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# Read the train edges and compute predictions", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "tr_e", "is", "not", "None", ":", "\n", "        ", "train_edges", "=", "np", ".", "loadtxt", "(", "args", ".", "tr_e", ",", "delimiter", "=", "args", ".", "delimiter", ",", "dtype", "=", "int", ")", "\n", "pred_tr", "=", "predict_obj", ".", "predict", "(", "train_edges", ")", "\n", "np", ".", "savetxt", "(", "args", ".", "tr_pred", ",", "pred_tr", ",", "delimiter", "=", "args", ".", "delimiter", ")", "\n", "\n", "# Read the test edges and run predictions", "\n", "if", "args", ".", "te_e", "is", "not", "None", ":", "\n", "            ", "test_edges", "=", "np", ".", "loadtxt", "(", "args", ".", "te_e", ",", "delimiter", "=", "args", ".", "delimiter", ",", "dtype", "=", "int", ")", "\n", "pred_te", "=", "predict_obj", ".", "predict", "(", "test_edges", ")", "\n", "np", ".", "savetxt", "(", "args", ".", "te_pred", ",", "pred_te", ",", "delimiter", "=", "args", ".", "delimiter", ")", "\n", "\n", "# If tr_e!=None or te_e!=None, output predictions for those edges.", "\n", "# Else, store the embeddings (if use_csne=1) or store posterior (if use_csne=0)", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "use_csne", ":", "\n", "            ", "print", "(", "\"Saving CSNE node embeddings...\"", ")", "\n", "np", ".", "savetxt", "(", "\n", "args", ".", "output", ",", "predict_obj", ".", "get_embedding", "(", ")", ",", "delimiter", "=", "args", ".", "delimiter", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Saving MaxEnt posterior...\"", ")", "\n", "np", ".", "savetxt", "(", "\n", "args", ".", "output", ",", "predict_obj", ".", "get_posterior", "(", ")", ",", "delimiter", "=", "args", ".", "delimiter", "\n", ")", "\n", "", "", "print", "(", "\"Prediction time: {}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.main.main": [[243, 246], ["main.parse_args", "main.main_helper"], "function", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.main.parse_args", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.main.main_helper"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "main_helper", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.WeightLinConstr.sc_mult": [[19, 22], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "sc_mult", "(", "self", ",", "val", ")", ":", "\n", "        ", "\"\"\" Multiply F with scalar val element-wise and return the result. \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.WeightLinConstr.mat_sum_mult": [[23, 26], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "mat_sum_mult", "(", "self", ",", "mat", ")", ":", "\n", "        ", "\"\"\" Returns the sum of an element-wise multiplication between F and mat. \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.WeightLinConstr.sqmat_sum_mult": [[27, 30], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "sqmat_sum_mult", "(", "self", ",", "mat", ")", ":", "\n", "        ", "\"\"\" Returns the sum of an element-wise multiplication between F^2 and mat. \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.WeightLinConstr.get_row": [[31, 34], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_row", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"Returns the f values of row i\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.WeightLinConstr.get_elem": [[35, 38], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_elem", "(", "self", ",", "src", ",", "dst", ")", ":", "\n", "        ", "\"\"\"Returns the f value of an element i,j\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.WeightLinConstr.get_mat": [[39, 42], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_mat", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns F as sparse matrix\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.Uniform.__init__": [[45, 54], ["weighted_lin_constr.Uniform._compute_f", "csr_matrix", "numpy.power", "issparse", "csr_matrix", "csr_matrix.astype", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.cpm._compute_f"], ["    ", "def", "__init__", "(", "self", ",", "A", ")", ":", "\n", "# If adj matrix is not sparse, make it sparse", "\n", "        ", "if", "not", "issparse", "(", "A", ")", ":", "\n", "            ", "A", "=", "csr_matrix", "(", "A", ")", "\n", "", "self", ".", "__n", "=", "A", ".", "shape", "[", "0", "]", "\n", "self", ".", "__F", "=", "self", ".", "_compute_f", "(", "A", ")", "\n", "mask", "=", "csr_matrix", "(", "A", ".", "astype", "(", "bool", ")", ")", "\n", "self", ".", "maskdF", "=", "np", ".", "ones", "(", "mask", ".", "nnz", ")", "*", "self", ".", "__F", "\n", "self", ".", "maskdF2", "=", "np", ".", "power", "(", "self", ".", "maskdF", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.Uniform._compute_f": [[55, 64], ["A.copy", "A.copy.eliminate_zeros", "A.copy", "numpy.abs", "A.copy.sum", "A.copy.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_compute_f", "(", "A", ")", ":", "\n", "# Compute matrix B as the 'mask'", "\n", "        ", "B", "=", "A", ".", "copy", "(", ")", "\n", "B", ".", "data", "=", "(", "B", ".", "data", "+", "1", ")", "/", "2.0", "\n", "B", ".", "eliminate_zeros", "(", ")", "\n", "C", "=", "A", ".", "copy", "(", ")", "\n", "C", ".", "data", "=", "np", ".", "abs", "(", "C", ".", "data", ")", "\n", "return", "B", ".", "sum", "(", ")", "/", "C", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.Uniform.sc_mult": [[65, 68], ["numpy.ones"], "methods", ["None"], ["", "def", "sc_mult", "(", "self", ",", "val", ")", ":", "\n", "        ", "F", "=", "np", ".", "ones", "(", "(", "self", ".", "__n", ",", "self", ".", "__n", ")", ")", "*", "(", "self", ".", "__F", "*", "val", ")", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.Uniform.mat_sum_mult": [[69, 71], ["mat.sum"], "methods", ["None"], ["", "def", "mat_sum_mult", "(", "self", ",", "mat", ")", ":", "\n", "        ", "return", "mat", ".", "sum", "(", ")", "*", "self", ".", "__F", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.Uniform.sqmat_sum_mult": [[72, 74], ["mat.sum"], "methods", ["None"], ["", "def", "sqmat_sum_mult", "(", "self", ",", "mat", ")", ":", "\n", "        ", "return", "mat", ".", "sum", "(", ")", "*", "self", ".", "__F", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.Uniform.get_row": [[75, 77], ["numpy.ones"], "methods", ["None"], ["", "def", "get_row", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "np", ".", "ones", "(", "self", ".", "__n", ")", "*", "self", ".", "__F", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.Uniform.get_elem": [[78, 80], ["None"], "methods", ["None"], ["", "def", "get_elem", "(", "self", ",", "src", ",", "dst", ")", ":", "\n", "        ", "return", "self", ".", "__F", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.Uniform.get_mat": [[81, 83], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_mat", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh.__init__": [[86, 95], ["weighted_lin_constr.CommonNeigh._compute_f", "csr_matrix", "csr_matrix.nonzero", "[].A.ravel", "numpy.power", "issparse", "csr_matrix", "csr_matrix.astype", "csr_matrix.multiply"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.cpm._compute_f"], ["    ", "def", "__init__", "(", "self", ",", "A", ")", ":", "\n", "# If adj matrix is not sparse, make it sparse", "\n", "        ", "if", "not", "issparse", "(", "A", ")", ":", "\n", "            ", "A", "=", "csr_matrix", "(", "A", ")", "\n", "", "self", ".", "__F", "=", "self", ".", "_compute_f", "(", "A", ")", "\n", "mask", "=", "csr_matrix", "(", "A", ".", "astype", "(", "bool", ")", ")", "\n", "r", ",", "c", "=", "mask", ".", "nonzero", "(", ")", "\n", "self", ".", "maskdF", "=", "mask", ".", "multiply", "(", "self", ".", "__F", ")", "[", "r", ",", "c", "]", ".", "A", ".", "ravel", "(", ")", "\n", "self", ".", "maskdF2", "=", "np", ".", "power", "(", "self", ".", "maskdF", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh._compute_f": [[96, 105], ["A.dot", "A.dot.setdiag", "A.dot.eliminate_zeros", "A.dot.sort_indices", "A.dot.multiply", "A.dot.max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_compute_f", "(", "A", ")", ":", "\n", "        ", "F", "=", "A", ".", "dot", "(", "\n", "A", ".", "T", "\n", ")", "# for dir networks A.dot(A) give in degree and A.dot(A.T) gives out degree", "\n", "F", ".", "setdiag", "(", "0", ")", "\n", "F", ".", "eliminate_zeros", "(", ")", "\n", "F", ".", "sort_indices", "(", ")", "\n", "return", "F", ".", "multiply", "(", "1", "/", "F", ".", "max", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh.sc_mult": [[106, 109], ["weighted_lin_constr.CommonNeigh.__F.multiply"], "methods", ["None"], ["", "def", "sc_mult", "(", "self", ",", "val", ")", ":", "\n", "        ", "\"\"\" Multiply F with scalar val element-wise and return the result. \"\"\"", "\n", "return", "self", ".", "__F", ".", "multiply", "(", "val", ")", ".", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh.mat_sum_mult": [[110, 113], ["weighted_lin_constr.CommonNeigh.__F.multiply().sum", "weighted_lin_constr.CommonNeigh.__F.multiply"], "methods", ["None"], ["", "def", "mat_sum_mult", "(", "self", ",", "mat", ")", ":", "\n", "        ", "\"\"\" Returns the sum of an element-wise multiplication between F and mat. \"\"\"", "\n", "return", "(", "self", ".", "__F", ".", "multiply", "(", "mat", ")", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh.sqmat_sum_mult": [[114, 118], ["weighted_lin_constr.CommonNeigh.__F.multiply", "weighted_lin_constr.CommonNeigh.multiply().sum", "weighted_lin_constr.CommonNeigh.multiply"], "methods", ["None"], ["", "def", "sqmat_sum_mult", "(", "self", ",", "mat", ")", ":", "\n", "        ", "\"\"\" Returns the sum of an element-wise multiplication between F^2 and mat. \"\"\"", "\n", "aux", "=", "self", ".", "__F", ".", "multiply", "(", "self", ".", "__F", ")", "\n", "return", "(", "aux", ".", "multiply", "(", "mat", ")", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh.get_row": [[119, 121], ["weighted_lin_constr.CommonNeigh.__F[].A.ravel"], "methods", ["None"], ["", "def", "get_row", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "__F", "[", "i", ",", ":", "]", ".", "A", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh.get_elem": [[122, 124], ["None"], "methods", ["None"], ["", "def", "get_elem", "(", "self", ",", "src", ",", "dst", ")", ":", "\n", "        ", "return", "self", ".", "__F", "[", "src", ",", "dst", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh.get_mat": [[125, 127], ["None"], "methods", ["None"], ["", "def", "get_mat", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__F", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.cpp._compute_f": [[130, 142], ["A.copy", "A.copy.eliminate_zeros", "A.copy.dot", "A.copy.dot.setdiag", "A.copy.dot.eliminate_zeros"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "_compute_f", "(", "A", ")", ":", "\n", "        ", "\"\"\" Counts the number of ++ wedges in A. \"\"\"", "\n", "# Compute matrix B as the 'mask'", "\n", "B", "=", "A", ".", "copy", "(", ")", "\n", "B", ".", "data", "=", "(", "B", ".", "data", "+", "1", ")", "/", "2.0", "\n", "B", ".", "eliminate_zeros", "(", ")", "\n", "# Compute pp wedges", "\n", "F", "=", "B", ".", "dot", "(", "B", ".", "T", ")", "\n", "F", ".", "setdiag", "(", "0", ")", "\n", "F", ".", "eliminate_zeros", "(", ")", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.cmm._compute_f": [[145, 157], ["A.copy", "numpy.abs", "A.copy.eliminate_zeros", "A.copy.dot", "A.copy.dot.setdiag", "A.copy.dot.eliminate_zeros"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "_compute_f", "(", "A", ")", ":", "\n", "        ", "\"\"\" Counts the number of -- wedges in A. \"\"\"", "\n", "# Compute matrix B as the 'mask'", "\n", "B", "=", "A", ".", "copy", "(", ")", "\n", "B", ".", "data", "=", "np", ".", "abs", "(", "(", "B", ".", "data", "-", "1", ")", "/", "2.0", ")", "\n", "B", ".", "eliminate_zeros", "(", ")", "\n", "# Compute mm wedges", "\n", "F", "=", "B", ".", "dot", "(", "B", ".", "T", ")", "\n", "F", ".", "setdiag", "(", "0", ")", "\n", "F", ".", "eliminate_zeros", "(", ")", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.cpm._compute_f": [[160, 172], ["A.copy", "numpy.abs", "A.copy.dot", "F.setdiag", "F.eliminate_zeros", "A.dot"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "_compute_f", "(", "A", ")", ":", "\n", "        ", "\"\"\" Counts the number of +- wedges in A. \"\"\"", "\n", "# Compute matrix B as the 'mask'", "\n", "B", "=", "A", ".", "copy", "(", ")", "\n", "B", ".", "data", "=", "np", ".", "abs", "(", "B", ".", "data", ")", "\n", "# Compute cn and subtract those which have the same sign, pp or mm. this leaves you with wedges pm.", "\n", "cn", "=", "B", ".", "dot", "(", "B", ".", "T", ")", "\n", "F", "=", "(", "cn", "-", "A", ".", "dot", "(", "A", ".", "T", ")", ")", "/", "2.0", "\n", "F", ".", "setdiag", "(", "0", ")", "\n", "F", ".", "eliminate_zeros", "(", ")", "\n", "return", "F", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.__init__": [[18, 45], ["len", "maxent_comb.MaxentCombined._select_f", "maxent_comb.MaxentCombined._get_constraints"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._select_f", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._get_constraints"], ["    ", "def", "__init__", "(", "self", ",", "A", ",", "mask", ",", "func", ",", "memory", "=", "\"quadratic\"", ",", "reg_val", "=", "0.9", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the maxent combined model\n\n        Parameters\n        ----------\n        A : Scipy sparse matrix\n            A sparse adjacency matrix representing a certain network.\n        func : list\n            A list containing one or a combination of {'cpp', 'cmm', 'cpm'}.\n        memory : string, optional\n            A string indicating if the method should use 'linear' or 'quadratic' memory. Quadratic actually only uses\n            O(E) memory, same as Adj matrix. Default is 'quadratic'.\n        reg_val : float, optional\n            A float indicating how much to reduce the confidence about pos edges being +1 and neg edges being -1.\n            Default is 0.9.\n        \"\"\"", "\n", "A", ".", "data", "[", "A", ".", "data", "==", "1", "]", "=", "reg_val", "\n", "A", ".", "data", "[", "A", ".", "data", "==", "-", "1", "]", "=", "-", "reg_val", "\n", "self", ".", "__n", "=", "A", ".", "shape", "[", "0", "]", "\n", "self", ".", "__2n", "=", "2", "*", "self", ".", "__n", "\n", "self", ".", "__nfuncs", "=", "len", "(", "func", ")", "\n", "self", ".", "__memory", "=", "memory", "\n", "self", ".", "__mask", "=", "mask", "\n", "self", ".", "__F", "=", "self", ".", "_select_f", "(", "A", ",", "func", ")", "# array with as many priors as __nfuncs", "\n", "self", ".", "__x", "=", "None", "\n", "self", ".", "__cs", "=", "self", ".", "_get_constraints", "(", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._select_f": [[46, 52], ["print", "list", "range", "list.append", "maxent_comb.MaxentCombined._select"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._select"], ["", "def", "_select_f", "(", "self", ",", "A", ",", "func", ")", ":", "\n", "        ", "print", "(", "\"Initializing MaxentCombined with the following priors: {}\"", ".", "format", "(", "func", ")", ")", "\n", "fs", "=", "list", "(", ")", "\n", "for", "fi", "in", "range", "(", "self", ".", "__nfuncs", ")", ":", "\n", "            ", "fs", ".", "append", "(", "self", ".", "_select", "(", "A", ",", "func", "[", "fi", "]", ")", ")", "\n", "", "return", "fs", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._select": [[53, 66], ["cpp", "cpm", "cmm", "ValueError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_select", "(", "A", ",", "func", ")", ":", "\n", "        ", "if", "func", "==", "\"cpp\"", ":", "\n", "            ", "return", "cpp", "(", "A", ")", "\n", "\n", "", "elif", "func", "==", "\"cpm\"", ":", "\n", "            ", "return", "cpm", "(", "A", ")", "\n", "\n", "", "elif", "func", "==", "\"cmm\"", ":", "\n", "            ", "return", "cmm", "(", "A", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Prior not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.predict": [[67, 99], ["collections.defaultdict", "collections.defaultdict", "enumerate", "collections.defaultdict.keys", "edge_dict[].append", "ids_dict[].append", "pred.extend", "ids.extend", "maxent_comb.MaxentCombined.get_row_probability", "sorted", "zip"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.get_row_probability"], ["", "", "def", "predict", "(", "self", ",", "E", ")", ":", "\n", "        ", "\"\"\"\n        Returns the predictions for the given set of (src, dst) pairs.\n\n        Parameters\n        ----------\n        E : iterable\n            An iterable of (src, dst) pairs.\n\n        Returns\n        -------\n        scores : list\n            The probabilities in [0,1] of having -1 or +1 links between the (src, dst) pairs, in the same order as E.\n\n        Raises\n        ------\n        AttributeError\n            If the method has not been fitted.\n        \"\"\"", "\n", "edge_dict", "=", "defaultdict", "(", "list", ")", "\n", "ids_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "edge", "in", "enumerate", "(", "E", ")", ":", "\n", "            ", "edge_dict", "[", "edge", "[", "0", "]", "]", ".", "append", "(", "edge", "[", "1", "]", ")", "\n", "ids_dict", "[", "edge", "[", "0", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "pred", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "u", "in", "edge_dict", ".", "keys", "(", ")", ":", "\n", "            ", "pred", ".", "extend", "(", "self", ".", "get_row_probability", "(", "u", ",", "edge_dict", "[", "u", "]", ")", ")", "\n", "ids", ".", "extend", "(", "ids_dict", "[", "u", "]", ")", "\n", "\n", "", "return", "[", "p", "for", "_", ",", "p", "in", "sorted", "(", "zip", "(", "ids", ",", "pred", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.get_posterior": [[100, 119], ["maxent_comb.MaxentCombined._get_posterior", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._get_posterior"], ["", "def", "get_posterior", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the posterior probability matrix.\n\n        Returns\n        -------\n        P : ndarray\n            The posterior probability matrix.\n\n        Raises\n        ------\n        AttributeError\n            If the method has not been fitted.\n        \"\"\"", "\n", "if", "self", ".", "__x", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_get_posterior", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Maxent Combined has not been fitted. Use <class>.fit()\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.fit": [[121, 158], ["numpy.zeros", "ValueError", "maxent_comb.MaxentCombined._optimizer_newton_quadratic_sp", "ValueError"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._optimizer_newton_quadratic_sp"], ["", "", "def", "fit", "(", "self", ",", "optimizer", "=", "\"newton\"", ",", "lr", "=", "1.0", ",", "max_iter", "=", "100", ",", "tol", "=", "0.0001", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Fits the Maxent Combined model.\n\n        Parameters\n        ----------\n        optimizer : basestring, optional\n            A string indicating the optimizer to use. For now only `newton` is available. Default is `newton`.\n        lr : float, optional\n            The learning rate. Default is 1.0.\n        max_iter : int, optional\n            The maximum number of iteration the optimization will be run for. Default is 100.\n        tol : float, optional\n            Triggers early stop if gradient norm is below this value. Default is 0.001.\n        verbose : bool\n            If True information is printed in each iteration of the optimization process.\n\n        Raises\n        ------\n        ValueError\n            If the the memory constraint or optimizer values are not correct.\n        \"\"\"", "\n", "# Initial condition", "\n", "x", "=", "np", ".", "zeros", "(", "self", ".", "__2n", "+", "self", ".", "__nfuncs", ")", "\n", "\n", "# Compute", "\n", "if", "optimizer", "==", "\"newton\"", ":", "\n", "            ", "if", "self", ".", "__memory", "==", "\"quadratic\"", ":", "\n", "                ", "self", ".", "__x", "=", "self", ".", "_optimizer_newton_quadratic_sp", "(", "\n", "x", ",", "lr", ",", "max_iter", ",", "tol", ",", "verbose", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Incorrect memory constraint. Options are `quadratic` and `linear`\"", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Optimizer {:s} is not implemented.\"", ".", "format", "(", "optimizer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._optimizer_newton_quadratic_sp": [[159, 221], ["maxent_comb.MaxentCombined.__mask.copy", "maxent_comb.MaxentCombined.__mask.nonzero", "tqdm.tqdm.trange", "tqdm.tqdm.tqdm.write", "tqdm.tqdm.tqdm.write", "numpy.dot", "maxent_comb.MaxentCombined._get_sums_sp", "maxent_comb.MaxentCombined._get_sums_sp", "numpy.dot", "range", "tqdm.tqdm.tqdm.write", "tqdm.tqdm.tqdm.write", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.sum", "numpy.dot", "numpy.exp", "numpy.logaddexp", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._get_sums_sp", "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._get_sums_sp"], ["", "", "def", "_optimizer_newton_quadratic_sp", "(", "\n", "self", ",", "x", ",", "alpha_init", "=", "1.0", ",", "max_iter", "=", "100", ",", "tol", "=", "0.001", ",", "verbose", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Computes teh MaxEnt prior. Uses hessian information o speed up convergence.\n        \"\"\"", "\n", "alpha", "=", "alpha_init", "\n", "\n", "# Initialize P", "\n", "P", "=", "self", ".", "__mask", ".", "copy", "(", ")", "\n", "aux", "=", "P", ".", "data", "\n", "\n", "# Initialize the objective", "\n", "obj", "=", "(", "self", ".", "__n", "**", "2", "*", "0.6931", "-", "self", ".", "__n", "*", "0.6931", ")", "-", "np", ".", "dot", "(", "x", ",", "self", ".", "__cs", ")", "\n", "\n", "# Get row and col indices of mask", "\n", "r_idx", ",", "c_idx", "=", "self", ".", "__mask", ".", "nonzero", "(", ")", "\n", "c_idx", "=", "self", ".", "__n", "+", "c_idx", "\n", "\n", "# Iterate", "\n", "for", "i", "in", "trange", "(", "max_iter", ",", "desc", "=", "\"Fitting prior\"", ")", ":", "\n", "\n", "# Reset alpha every few iterations", "\n", "            ", "if", "i", "%", "10", "==", "0", ":", "\n", "                ", "alpha", "=", "alpha_init", "\n", "\n", "# Compute gradient", "\n", "", "P", ".", "data", "=", "aux", "/", "(", "aux", "+", "1", ")", "\n", "grad", "=", "self", ".", "_get_sums_sp", "(", "P", ")", "-", "self", ".", "__cs", "\n", "P", ".", "data", "=", "P", ".", "data", "/", "(", "aux", "+", "1", ")", "\n", "hess", "=", "self", ".", "_get_sums_sp", "(", "P", ",", "f_pow", "=", "True", ")", "\n", "delta", "=", "grad", "/", "(", "hess", "+", "0.00000001", ")", "\n", "imp", "=", "np", ".", "dot", "(", "delta", ",", "grad", ")", "*", "0.0001", "\n", "\n", "# Greedy search for best alpha", "\n", "while", "True", ":", "\n", "                ", "x_test", "=", "x", "-", "alpha", "*", "delta", "\n", "v", "=", "x_test", "[", "r_idx", "]", "+", "x_test", "[", "c_idx", "]", "\n", "for", "fi", "in", "range", "(", "self", ".", "__nfuncs", ")", ":", "\n", "                    ", "v", "+=", "self", ".", "__F", "[", "fi", "]", ".", "maskdF", "*", "x_test", "[", "self", ".", "__2n", "+", "fi", "]", "\n", "", "obj_test", "=", "np", ".", "sum", "(", "np", ".", "logaddexp", "(", "0", ",", "v", ")", ")", "-", "np", ".", "dot", "(", "x_test", ",", "self", ".", "__cs", ")", "\n", "if", "obj_test", "<=", "obj", "-", "(", "alpha", "*", "imp", ")", ":", "\n", "                    ", "x", "=", "x_test", "\n", "aux", "=", "np", ".", "exp", "(", "v", ")", "\n", "obj", "=", "obj_test", "\n", "break", "\n", "", "alpha", "=", "alpha", "/", "2.0", "\n", "\n", "# Show the norms of the gradient and objective", "\n", "", "if", "verbose", ":", "\n", "# print(np.linalg.norm(grad))", "\n", "                ", "tqdm", ".", "write", "(", "\n", "\"[iter {}] Gradient norm: {:.2f}\"", ".", "format", "(", "i", ",", "np", ".", "linalg", ".", "norm", "(", "grad", ")", ")", "\n", ")", "\n", "tqdm", ".", "write", "(", "\"[iter {}] Objective: {:.2f}\"", ".", "format", "(", "i", ",", "obj", ")", ")", "\n", "\n", "", "if", "np", ".", "linalg", ".", "norm", "(", "grad", ",", "np", ".", "inf", ")", "<", "tol", ":", "\n", "                ", "break", "\n", "\n", "", "", "tqdm", ".", "write", "(", "\"Final gradient norm: {:.2f}\"", ".", "format", "(", "np", ".", "linalg", ".", "norm", "(", "grad", ")", ")", ")", "\n", "tqdm", ".", "write", "(", "\"Final objective: {:.2f}\"", ".", "format", "(", "obj", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._get_sums_sp": [[222, 234], ["numpy.zeros", "P.sum().T.A.ravel", "P.sum().A.ravel", "range", "range", "numpy.dot", "numpy.dot", "P.sum", "P.sum"], "methods", ["None"], ["", "def", "_get_sums_sp", "(", "self", ",", "P", ",", "f_pow", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns the sums over cols and rows of P as well as sum over all elems of P * F in a single array. \"\"\"", "\n", "aux", "=", "np", ".", "zeros", "(", "self", ".", "__2n", "+", "self", ".", "__nfuncs", ")", "\n", "aux", "[", ":", "self", ".", "__n", "]", "=", "P", ".", "sum", "(", "axis", "=", "1", ")", ".", "T", ".", "A", ".", "ravel", "(", ")", "\n", "aux", "[", "self", ".", "__n", ":", "self", ".", "__2n", "]", "=", "P", ".", "sum", "(", "axis", "=", "0", ")", ".", "A", ".", "ravel", "(", ")", "\n", "if", "f_pow", ":", "\n", "            ", "for", "fi", "in", "range", "(", "self", ".", "__nfuncs", ")", ":", "\n", "                ", "aux", "[", "self", ".", "__2n", "+", "fi", "]", "=", "np", ".", "dot", "(", "self", ".", "__F", "[", "fi", "]", ".", "maskdF2", ",", "P", ".", "data", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "fi", "in", "range", "(", "self", ".", "__nfuncs", ")", ":", "\n", "                ", "aux", "[", "self", ".", "__2n", "+", "fi", "]", "=", "np", ".", "dot", "(", "self", ".", "__F", "[", "fi", "]", ".", "maskdF", ",", "P", ".", "data", ")", "\n", "", "", "return", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._get_posterior": [[235, 244], ["range", "numpy.exp", "numpy.divide", "numpy.fill_diagonal", "maxent_comb.MaxentCombined.__F[].sc_mult", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh.sc_mult"], ["", "def", "_get_posterior", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the full posterior probability matrix computed from the lambdas. \"\"\"", "\n", "P", "=", "np", ".", "array", "(", "[", "self", ".", "__x", "[", ":", "self", ".", "__n", "]", "]", ")", ".", "T", "+", "self", ".", "__x", "[", "self", ".", "__n", ":", "self", ".", "__2n", "]", "\n", "for", "fi", "in", "range", "(", "self", ".", "__nfuncs", ")", ":", "\n", "            ", "P", "+=", "self", ".", "__F", "[", "fi", "]", ".", "sc_mult", "(", "self", ".", "__x", "[", "self", ".", "__2n", "+", "fi", "]", ")", "\n", "", "P", "=", "np", ".", "exp", "(", "P", ")", "\n", "P", "=", "np", ".", "divide", "(", "P", ",", "(", "1", "+", "P", ")", ")", "\n", "np", ".", "fill_diagonal", "(", "P", ",", "0", ")", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined.get_row_probability": [[245, 259], ["range", "numpy.exp", "AttributeError", "numpy.array", "numpy.invert", "maxent_comb.MaxentCombined.__F[].get_row", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh.get_row"], ["", "def", "get_row_probability", "(", "self", ",", "row_id", ",", "col_ids", ")", ":", "\n", "        ", "\"\"\" Returns the posterior probability for a given row and set of columns. \"\"\"", "\n", "if", "self", ".", "__x", "is", "not", "None", ":", "\n", "            ", "p_row", "=", "self", ".", "__x", "[", "row_id", "]", "+", "np", ".", "array", "(", "self", ".", "__x", "[", "self", ".", "__n", "+", "np", ".", "array", "(", "col_ids", ")", "]", ")", "\n", "for", "fi", "in", "range", "(", "self", ".", "__nfuncs", ")", ":", "\n", "                ", "p_row", "+=", "(", "\n", "self", ".", "__F", "[", "fi", "]", ".", "get_row", "(", "row_id", ")", "[", "col_ids", "]", "*", "self", ".", "__x", "[", "self", ".", "__2n", "+", "fi", "]", "\n", ")", "\n", "", "p", "=", "np", ".", "exp", "(", "p_row", ")", "\n", "p", "=", "p", "/", "(", "1", "+", "p", ")", "\n", "return", "p", "*", "np", ".", "invert", "(", "col_ids", "==", "row_id", ")", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Maxent Combined has not been fitted. Use <class>.fit()\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._get_elem_posterior": [[261, 271], ["range", "numpy.exp", "maxent_comb.MaxentCombined.__F[].get_elem"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh.get_elem"], ["", "", "def", "_get_elem_posterior", "(", "self", ",", "src", ",", "dst", ")", ":", "\n", "        ", "\"\"\" Returns the probability of linking a (src, dst) pair. \"\"\"", "\n", "if", "src", "==", "dst", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "p", "=", "self", ".", "__x", "[", "src", "]", "+", "self", ".", "__x", "[", "self", ".", "__n", "+", "dst", "]", "\n", "for", "fi", "in", "range", "(", "self", ".", "__nfuncs", ")", ":", "\n", "                ", "p", "+=", "self", ".", "__F", "[", "fi", "]", ".", "get_elem", "(", "src", ",", "dst", ")", "*", "self", ".", "__x", "[", "self", ".", "__2n", "+", "fi", "]", "\n", "", "p", "=", "np", ".", "exp", "(", "p", ")", "\n", "return", "p", "/", "(", "1", "+", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.maxent_comb.MaxentCombined._get_constraints": [[272, 283], ["A.copy", "A.copy.eliminate_zeros", "numpy.zeros", "A.copy.sum().T.A.ravel", "A.copy.sum().A.ravel", "range", "maxent_comb.MaxentCombined.__F[].mat_sum_mult", "A.copy.sum", "A.copy.sum"], "methods", ["home.repos.pwc.inspect_result.aida-ugent_CSNE.csne.weighted_lin_constr.CommonNeigh.mat_sum_mult"], ["", "", "def", "_get_constraints", "(", "self", ",", "A", ")", ":", "\n", "        ", "\"\"\" Returns the initial constraints for rows, cols and F matrices as computed from the Adj matrix.\"\"\"", "\n", "B", "=", "A", ".", "copy", "(", ")", "\n", "B", ".", "data", "=", "(", "B", ".", "data", "+", "1", ")", "/", "2.0", "\n", "B", ".", "eliminate_zeros", "(", ")", "\n", "aux", "=", "np", ".", "zeros", "(", "self", ".", "__2n", "+", "self", ".", "__nfuncs", ")", "\n", "aux", "[", ":", "self", ".", "__n", "]", "=", "B", ".", "sum", "(", "axis", "=", "1", ")", ".", "T", ".", "A", ".", "ravel", "(", ")", "# Row sums", "\n", "aux", "[", "self", ".", "__n", ":", "self", ".", "__2n", "]", "=", "B", ".", "sum", "(", "axis", "=", "0", ")", ".", "A", ".", "ravel", "(", ")", "# Col sums", "\n", "for", "fi", "in", "range", "(", "self", ".", "__nfuncs", ")", ":", "\n", "            ", "aux", "[", "self", ".", "__2n", "+", "fi", "]", "=", "self", ".", "__F", "[", "fi", "]", ".", "mat_sum_mult", "(", "B", ")", "# Full sum", "\n", "", "return", "aux", "\n", "", "", ""]]}