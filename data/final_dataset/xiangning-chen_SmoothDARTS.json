{"home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.attacker.linf_sgd.Linf_SGD.__init__": [[40, 47], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", "0", ",", "dampening", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ")", "\n", "if", "nesterov", "and", "(", "momentum", "<=", "0", "or", "dampening", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Nesterov momentum requires a momentum and zero dampening\"", ")", "\n", "", "super", "(", "Linf_SGD", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.attacker.linf_sgd.Linf_SGD.__setstate__": [[48, 52], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.attacker.linf_sgd.Linf_SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "Linf_SGD", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.attacker.linf_sgd.Linf_SGD.step": [[53, 92], ["closure", "torch.sign", "p.data.add_", "d_p.add.add.add_", "torch.zeros_like", "torch.zeros_like.mul_().add_", "torch.zeros_like.mul_().add_", "d_p.add.add.add", "torch.zeros_like.mul_", "torch.zeros_like.mul_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "d_p", "=", "torch", ".", "sign", "(", "p", ".", "grad", ".", "data", ")", "\n", "#d_p = p.grad.data", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "weight_decay", ",", "p", ".", "data", ")", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "d_p", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "1", "-", "dampening", ",", "d_p", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "momentum", ",", "buf", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "d_p", ")", "\n", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.attacker.perturb.Linf_PGD_alpha": [[11, 45], ["attacker.linf_sgd.Linf_SGD", "range", "attacker.linf_sgd.Linf_SGD.zero_grad", "model.zero_grad", "model.eval", "p.clone", "model.arch_parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model._loss", "model.arch_parameters", "model.clip", "attacker.linf_sgd.Linf_SGD.zero_grad", "model.zero_grad", "loss.backward", "attacker.linf_sgd.Linf_SGD.step", "enumerate", "model.clip", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model._loss", "enumerate", "model.train", "model.arch_parameters", "p.data.add_", "model._loss", "model.arch_parameters", "p.data.copy_", "model.arch_parameters", "p.data.copy_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "range", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model.arch_parameters"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["def", "Linf_PGD_alpha", "(", "model", ",", "X", ",", "y", ",", "epsilon", ",", "steps", "=", "7", ",", "random_start", "=", "True", ")", ":", "\n", "    ", "training", "=", "model", ".", "training", "\n", "if", "training", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "", "saved_params", "=", "[", "p", ".", "clone", "(", ")", "for", "p", "in", "model", ".", "arch_parameters", "(", ")", "]", "\n", "optimizer", "=", "Linf_SGD", "(", "model", ".", "arch_parameters", "(", ")", ",", "lr", "=", "2", "*", "epsilon", "/", "steps", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_before", "=", "model", ".", "_loss", "(", "X", ",", "y", ",", "updateType", "=", "'weight'", ")", "\n", "", "if", "random_start", ":", "\n", "        ", "for", "p", "in", "model", ".", "arch_parameters", "(", ")", ":", "\n", "            ", "p", ".", "data", ".", "add_", "(", "torch", ".", "zeros_like", "(", "p", ")", ".", "uniform_", "(", "-", "epsilon", ",", "epsilon", ")", ")", "\n", "", "model", ".", "clip", "(", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "steps", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "loss", "=", "-", "model", ".", "_loss", "(", "X", ",", "y", ",", "updateType", "=", "'weight'", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "diff", "=", "[", "(", "model", ".", "arch_parameters", "(", ")", "[", "i", "]", "-", "saved_params", "[", "i", "]", ")", ".", "clamp_", "(", "-", "epsilon", ",", "epsilon", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "saved_params", ")", ")", "]", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "arch_parameters", "(", ")", ")", ":", "\n", "            ", "p", ".", "data", ".", "copy_", "(", "diff", "[", "i", "]", "+", "saved_params", "[", "i", "]", ")", "\n", "", "model", ".", "clip", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_after", "=", "model", ".", "_loss", "(", "X", ",", "y", ",", "updateType", "=", "'weight'", ")", "\n", "", "if", "loss_before", ">", "loss_after", ":", "\n", "        ", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "arch_parameters", "(", ")", ")", ":", "\n", "            ", "p", ".", "data", ".", "copy_", "(", "saved_params", "[", "i", "]", ")", "\n", "", "", "if", "training", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.attacker.perturb.Random_alpha": [[47, 51], ["model.arch_parameters", "model.clip", "p.data.add_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip"], ["", "", "def", "Random_alpha", "(", "model", ",", "X", ",", "y", ",", "epsilon", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "arch_parameters", "(", ")", ":", "\n", "        ", "p", ".", "data", ".", "add_", "(", "torch", ".", "zeros_like", "(", "p", ")", ".", "uniform_", "(", "-", "epsilon", ",", "epsilon", ")", ")", "\n", "", "model", ".", "clip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.attacker.perturb.Linf_PGD_alpha_RNN": [[53, 88], ["attacker.linf_sgd.Linf_SGD", "range", "attacker.linf_sgd.Linf_SGD.zero_grad", "model.zero_grad", "model.eval", "p.clone", "model.arch_parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model._loss", "model.arch_parameters", "model.clip", "attacker.linf_sgd.Linf_SGD.zero_grad", "model.zero_grad", "model._loss", "loss.backward", "attacker.linf_sgd.Linf_SGD.step", "enumerate", "model.clip", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model._loss", "enumerate", "model.train", "model.arch_parameters", "p.data.add_", "model.arch_parameters", "p.data.copy_", "model.arch_parameters", "p.data.copy_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "range", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model.arch_parameters"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["", "def", "Linf_PGD_alpha_RNN", "(", "model", ",", "X", ",", "y", ",", "hidden", ",", "epsilon", ",", "steps", "=", "7", ",", "random_start", "=", "True", ")", ":", "\n", "    ", "training", "=", "model", ".", "training", "\n", "if", "training", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "", "saved_params", "=", "[", "p", ".", "clone", "(", ")", "for", "p", "in", "model", ".", "arch_parameters", "(", ")", "]", "\n", "optimizer", "=", "Linf_SGD", "(", "model", ".", "arch_parameters", "(", ")", ",", "lr", "=", "2", "*", "epsilon", "/", "steps", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_before", ",", "_", "=", "model", ".", "_loss", "(", "hidden", ",", "X", ",", "y", ",", "updateType", "=", "'weight'", ")", "\n", "", "if", "random_start", ":", "\n", "        ", "for", "p", "in", "model", ".", "arch_parameters", "(", ")", ":", "\n", "            ", "p", ".", "data", ".", "add_", "(", "torch", ".", "zeros_like", "(", "p", ")", ".", "uniform_", "(", "-", "epsilon", ",", "epsilon", ")", ")", "\n", "", "model", ".", "clip", "(", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "steps", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "loss", ",", "_", "=", "model", ".", "_loss", "(", "hidden", ",", "X", ",", "y", ",", "updateType", "=", "'weight'", ")", "\n", "loss", "=", "-", "loss", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "diff", "=", "[", "(", "model", ".", "arch_parameters", "(", ")", "[", "i", "]", "-", "saved_params", "[", "i", "]", ")", ".", "clamp_", "(", "-", "epsilon", ",", "epsilon", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "saved_params", ")", ")", "]", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "arch_parameters", "(", ")", ")", ":", "\n", "            ", "p", ".", "data", ".", "copy_", "(", "diff", "[", "i", "]", "+", "saved_params", "[", "i", "]", ")", "\n", "", "model", ".", "clip", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_after", ",", "_", "=", "model", ".", "_loss", "(", "hidden", ",", "X", ",", "y", ",", "updateType", "=", "'weight'", ")", "\n", "", "if", "loss_before", ">", "loss_after", ":", "\n", "        ", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "arch_parameters", "(", ")", ")", ":", "\n", "            ", "p", ".", "data", ".", "copy_", "(", "saved_params", "[", "i", "]", ")", "\n", "", "", "if", "training", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.attacker.perturb.Random_alpha_RNN": [[90, 94], ["model.arch_parameters", "model.clip", "p.data.add_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip"], ["", "", "def", "Random_alpha_RNN", "(", "model", ",", "X", ",", "y", ",", "hidden", ",", "epsilon", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "arch_parameters", "(", ")", ":", "\n", "        ", "p", ".", "data", ".", "add_", "(", "torch", ".", "zeros_like", "(", "p", ")", ".", "uniform_", "(", "-", "epsilon", ",", "epsilon", ")", ")", "\n", "", "model", ".", "clip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax": [[22, 24], ["torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu", "torch.softmax", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax"], ["def", "softmax", "(", "weights", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "return", "F", ".", "softmax", "(", "torch", ".", "Tensor", "(", "weights", ")", ",", "axis", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.get_directory_list": [[26, 40], ["os.path.isfile", "os.listdir", "len", "directory_list.append", "os.path.join", "os.path.isdir", "eval_darts_one_shot_model_in_nasbench.get_directory_list", "os.listdir"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.get_directory_list"], ["", "def", "get_directory_list", "(", "path", ")", ":", "\n", "    ", "\"\"\"Find directory containing config.json files\"\"\"", "\n", "directory_list", "=", "[", "]", "\n", "# return nothing if path is a file", "\n", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "return", "[", "]", "\n", "# add dir to directorylist if it contains .json files", "\n", "", "if", "len", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "path", ")", "if", "f", "==", "'config.json'", "]", ")", ">", "0", ":", "\n", "        ", "directory_list", ".", "append", "(", "path", ")", "\n", "", "for", "d", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "        ", "new_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "d", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "new_path", ")", ":", "\n", "            ", "directory_list", "+=", "get_directory_list", "(", "new_path", ")", "\n", "", "", "return", "directory_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.eval_one_shot_model": [[42, 117], ["pickle.load", "softmax().argmax", "nasbench_analysis.search_spaces.search_space_3.SearchSpace3.create_nasbench_adjacency_matrix", "search_space.create_nasbench_adjacency_matrix.astype().tolist", "nasbench.api.ModelSpec", "nasbench.query", "open", "nasbench_analysis.search_spaces.search_space_1.SearchSpace1", "nasbench_analysis.utils.get_top_k", "test_error.append", "valid_error.append", "runtime.append", "params.append", "eval_darts_one_shot_model_in_nasbench.softmax", "list", "nasbench_analysis.utils.get_top_k", "eval_darts_one_shot_model_in_nasbench.softmax", "nasbench_analysis.search_spaces.search_space_2.SearchSpace2", "nasbench_analysis.utils.get_top_k", "search_space.create_nasbench_adjacency_matrix.astype", "nasbench_analysis.search_spaces.search_space_3.SearchSpace3.num_parents_per_node.values", "eval_darts_one_shot_model_in_nasbench.softmax", "zip", "list", "nasbench_analysis.utils.get_top_k", "eval_darts_one_shot_model_in_nasbench.softmax", "nasbench_analysis.search_spaces.search_space_3.SearchSpace3", "nasbench_analysis.utils.get_top_k", "ValueError", "nasbench_analysis.search_spaces.search_space_3.SearchSpace3.num_parents_per_node.values", "eval_darts_one_shot_model_in_nasbench.softmax", "zip", "list", "nasbench_analysis.utils.get_top_k", "eval_darts_one_shot_model_in_nasbench.softmax", "nasbench_analysis.search_spaces.search_space_3.SearchSpace3.num_parents_per_node.values", "eval_darts_one_shot_model_in_nasbench.softmax", "zip"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.create_nasbench_adjacency_matrix", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.get_top_k", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.get_top_k", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.get_top_k", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.get_top_k", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.get_top_k", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.get_top_k", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax"], ["", "def", "eval_one_shot_model", "(", "config", ",", "model", ")", ":", "\n", "    ", "model_list", "=", "pickle", ".", "load", "(", "open", "(", "model", ",", "'rb'", ")", ")", "\n", "\n", "alphas_mixed_op", "=", "model_list", "[", "0", "]", "\n", "chosen_node_ops", "=", "softmax", "(", "alphas_mixed_op", ",", "axis", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "\n", "\n", "node_list", "=", "[", "PRIMITIVES", "[", "i", "]", "for", "i", "in", "chosen_node_ops", "]", "\n", "alphas_output", "=", "model_list", "[", "1", "]", "\n", "alphas_inputs", "=", "model_list", "[", "2", ":", "]", "\n", "\n", "if", "config", "[", "'search_space'", "]", "==", "'1'", ":", "\n", "        ", "search_space", "=", "SearchSpace1", "(", ")", "\n", "num_inputs", "=", "list", "(", "search_space", ".", "num_parents_per_node", ".", "values", "(", ")", ")", "[", "3", ":", "-", "1", "]", "\n", "parents_node_3", ",", "parents_node_4", "=", "[", "get_top_k", "(", "softmax", "(", "alpha", ",", "axis", "=", "1", ")", ",", "num_input", ")", "for", "num_input", ",", "alpha", "in", "zip", "(", "num_inputs", ",", "alphas_inputs", ")", "]", "\n", "output_parents", "=", "get_top_k", "(", "softmax", "(", "alphas_output", ")", ",", "num_inputs", "[", "-", "1", "]", ")", "\n", "parents", "=", "{", "\n", "'0'", ":", "[", "]", ",", "\n", "'1'", ":", "[", "0", "]", ",", "\n", "'2'", ":", "[", "0", ",", "1", "]", ",", "\n", "'3'", ":", "parents_node_3", ",", "\n", "'4'", ":", "parents_node_4", ",", "\n", "'5'", ":", "output_parents", "\n", "}", "\n", "node_list", "=", "[", "INPUT", ",", "*", "node_list", ",", "CONV1X1", ",", "OUTPUT", "]", "\n", "\n", "", "elif", "config", "[", "'search_space'", "]", "==", "'2'", ":", "\n", "        ", "search_space", "=", "SearchSpace2", "(", ")", "\n", "num_inputs", "=", "list", "(", "search_space", ".", "num_parents_per_node", ".", "values", "(", ")", ")", "[", "2", ":", "]", "\n", "parents_node_2", ",", "parents_node_3", ",", "parents_node_4", "=", "[", "get_top_k", "(", "softmax", "(", "alpha", ",", "axis", "=", "1", ")", ",", "num_input", ")", "for", "num_input", ",", "alpha", "in", "zip", "(", "num_inputs", "[", ":", "-", "1", "]", ",", "alphas_inputs", ")", "]", "\n", "output_parents", "=", "get_top_k", "(", "softmax", "(", "alphas_output", ")", ",", "num_inputs", "[", "-", "1", "]", ")", "\n", "parents", "=", "{", "\n", "'0'", ":", "[", "]", ",", "\n", "'1'", ":", "[", "0", "]", ",", "\n", "'2'", ":", "parents_node_2", ",", "\n", "'3'", ":", "parents_node_3", ",", "\n", "'4'", ":", "parents_node_4", ",", "\n", "'5'", ":", "output_parents", "\n", "}", "\n", "node_list", "=", "[", "INPUT", ",", "*", "node_list", ",", "CONV1X1", ",", "OUTPUT", "]", "\n", "\n", "", "elif", "config", "[", "'search_space'", "]", "==", "'3'", ":", "\n", "        ", "search_space", "=", "SearchSpace3", "(", ")", "\n", "num_inputs", "=", "list", "(", "search_space", ".", "num_parents_per_node", ".", "values", "(", ")", ")", "[", "2", ":", "]", "\n", "parents_node_2", ",", "parents_node_3", ",", "parents_node_4", ",", "parents_node_5", "=", "[", "get_top_k", "(", "softmax", "(", "alpha", ",", "axis", "=", "1", ")", ",", "num_input", ")", "for", "num_input", ",", "alpha", "in", "zip", "(", "num_inputs", "[", ":", "-", "1", "]", ",", "alphas_inputs", ")", "]", "\n", "output_parents", "=", "get_top_k", "(", "softmax", "(", "alphas_output", ")", ",", "num_inputs", "[", "-", "1", "]", ")", "\n", "parents", "=", "{", "\n", "'0'", ":", "[", "]", ",", "\n", "'1'", ":", "[", "0", "]", ",", "\n", "'2'", ":", "parents_node_2", ",", "\n", "'3'", ":", "parents_node_3", ",", "\n", "'4'", ":", "parents_node_4", ",", "\n", "'5'", ":", "parents_node_5", ",", "\n", "'6'", ":", "output_parents", "\n", "}", "\n", "node_list", "=", "[", "INPUT", ",", "*", "node_list", ",", "OUTPUT", "]", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown search space'", ")", "\n", "\n", "", "adjacency_matrix", "=", "search_space", ".", "create_nasbench_adjacency_matrix", "(", "parents", ")", "\n", "# Convert the adjacency matrix in format for nasbench", "\n", "adjacency_list", "=", "adjacency_matrix", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "adjacency_list", ",", "ops", "=", "node_list", ")", "\n", "# Query nasbench", "\n", "data", "=", "nasbench", ".", "query", "(", "model_spec", ")", "\n", "valid_error", ",", "test_error", ",", "runtime", ",", "params", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "item", "in", "data", ":", "\n", "        ", "test_error", ".", "append", "(", "1", "-", "item", "[", "'test_accuracy'", "]", ")", "\n", "valid_error", ".", "append", "(", "1", "-", "item", "[", "'validation_accuracy'", "]", ")", "\n", "runtime", ".", "append", "(", "item", "[", "'training_time'", "]", ")", "\n", "params", ".", "append", "(", "item", "[", "'trainable_parameters'", "]", ")", "\n", "", "return", "test_error", ",", "valid_error", ",", "runtime", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.eval_directory": [[119, 141], ["glob.glob", "glob.glob.sort", "open", "json.load", "os.path.join", "eval_darts_one_shot_model_in_nasbench.eval_one_shot_model", "test_errors.append", "valid_errors.append", "open", "pickle.dump", "open", "pickle.dump", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.eval_one_shot_model"], ["", "def", "eval_directory", "(", "path", ")", ":", "\n", "    ", "\"\"\"Evaluates all one-shot architecture methods in the directory.\"\"\"", "\n", "# Read in config", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'config.json'", ")", ")", "as", "fp", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "fp", ")", "\n", "# Accumulate all one-shot models", "\n", "", "one_shot_architectures", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'one_shot_architecture_*.obj'", ")", ")", "\n", "# Sort them by date", "\n", "one_shot_architectures", ".", "sort", "(", "key", "=", "natural_keys", ")", "\n", "# Eval all of them", "\n", "test_errors", "=", "[", "]", "\n", "valid_errors", "=", "[", "]", "\n", "for", "model", "in", "one_shot_architectures", ":", "\n", "        ", "test", ",", "valid", ",", "_", ",", "_", "=", "eval_one_shot_model", "(", "config", "=", "config", ",", "model", "=", "model", ")", "\n", "test_errors", ".", "append", "(", "test", ")", "\n", "valid_errors", ".", "append", "(", "valid", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'one_shot_validation_errors.obj'", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "valid_errors", ",", "fp", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'one_shot_test_errors.obj'", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "test_errors", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.NasbenchWrapper.query": [[24, 86], ["utils.NasbenchWrapper.get_metrics_from_spec", "range", "nasbench.api.OutOfDomainError", "trainings.append"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.get_metrics_from_spec"], ["def", "query", "(", "self", ",", "model_spec", ",", "epochs", "=", "108", ",", "stop_halfway", "=", "False", ")", ":", "\n", "        ", "\"\"\"Fetch one of the evaluations for this model spec.\n\n        Each call will sample one of the config['num_repeats'] evaluations of the\n        model. This means that repeated queries of the same model (or isomorphic\n        models) may return identical metrics.\n\n        This function will increment the budget counters for benchmarking purposes.\n        See self.training_time_spent, and self.total_epochs_spent.\n\n        This function also allows querying the evaluation metrics at the halfway\n        point of training using stop_halfway. Using this option will increment the\n        budget counters only up to the halfway point.\n\n        Args:\n          model_spec: ModelSpec object.\n          epochs: number of epochs trained. Must be one of the evaluated number of\n            epochs, [4, 12, 36, 108] for the full dataset.\n          stop_halfway: if True, returned dict will only contain the training time\n            and accuracies at the halfway point of training (num_epochs/2).\n            Otherwise, returns the time and accuracies at the end of training\n            (num_epochs).\n\n        Returns:\n          dict containing the evaluated darts for this object.\n\n        Raises:\n          OutOfDomainError: if model_spec or num_epochs is outside the search space.\n        \"\"\"", "\n", "if", "epochs", "not", "in", "self", ".", "valid_epochs", ":", "\n", "            ", "raise", "api", ".", "OutOfDomainError", "(", "'invalid number of epochs, must be one of %s'", "\n", "%", "self", ".", "valid_epochs", ")", "\n", "\n", "", "fixed_stat", ",", "computed_stat", "=", "self", ".", "get_metrics_from_spec", "(", "model_spec", ")", "\n", "trainings", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "config", "[", "'num_repeats'", "]", ")", ":", "\n", "            ", "computed_stat_at_epoch", "=", "computed_stat", "[", "epochs", "]", "[", "index", "]", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "'module_adjacency'", "]", "=", "fixed_stat", "[", "'module_adjacency'", "]", "\n", "data", "[", "'module_operations'", "]", "=", "fixed_stat", "[", "'module_operations'", "]", "\n", "data", "[", "'trainable_parameters'", "]", "=", "fixed_stat", "[", "'trainable_parameters'", "]", "\n", "\n", "if", "stop_halfway", ":", "\n", "                ", "data", "[", "'training_time'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_test_accuracy'", "]", "\n", "", "else", ":", "\n", "                ", "data", "[", "'training_time'", "]", "=", "computed_stat_at_epoch", "[", "'final_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'final_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'final_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'final_test_accuracy'", "]", "\n", "\n", "", "self", ".", "training_time_spent", "+=", "data", "[", "'training_time'", "]", "\n", "if", "stop_halfway", ":", "\n", "                ", "self", ".", "total_epochs_spent", "+=", "epochs", "//", "2", "\n", "", "else", ":", "\n", "                ", "self", ".", "total_epochs_spent", "+=", "epochs", "\n", "", "trainings", ".", "append", "(", "data", ")", "\n", "\n", "", "return", "trainings", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.get_top_k": [[88, 90], ["list", "numpy.argpartition"], "function", ["None"], ["", "", "def", "get_top_k", "(", "array", ",", "k", ")", ":", "\n", "    ", "return", "list", "(", "np", ".", "argpartition", "(", "array", "[", "0", "]", ",", "-", "k", ")", "[", "-", "k", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.parent_combinations": [[92, 102], ["itertools.combinations", "numpy.argwhere().flatten", "numpy.argwhere"], "function", ["None"], ["", "def", "parent_combinations", "(", "adjacency_matrix", ",", "node", ",", "n_parents", "=", "2", ")", ":", "\n", "    ", "\"\"\"Get all possible parent combinations for the current node.\"\"\"", "\n", "if", "node", "!=", "1", ":", "\n", "# Parents can only be nodes which have an index that is lower than the current index,", "\n", "# because of the upper triangular adjacency matrix and because the index is also a", "\n", "# topological ordering in our case.", "\n", "        ", "return", "itertools", ".", "combinations", "(", "np", ".", "argwhere", "(", "adjacency_matrix", "[", ":", "node", ",", "node", "]", "==", "0", ")", ".", "flatten", "(", ")", ",", "\n", "n_parents", ")", "# (e.g. (0, 1), (0, 2), (1, 2), ...", "\n", "", "else", ":", "\n", "        ", "return", "[", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.draw_graph_to_adjacency_matrix": [[104, 112], ["networkx.DiGraph", "networkx.draw_circular"], "function", ["None"], ["", "", "def", "draw_graph_to_adjacency_matrix", "(", "graph", ")", ":", "\n", "    ", "\"\"\"\n    Draws the graph in circular format for easier debugging\n    :param graph:\n    :return:\n    \"\"\"", "\n", "dag", "=", "nx", ".", "DiGraph", "(", "graph", ")", "\n", "nx", ".", "draw_circular", "(", "dag", ",", "with_labels", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.upscale_to_nasbench_format": [[114, 125], ["numpy.insert", "numpy.insert"], "function", ["None"], ["", "def", "upscale_to_nasbench_format", "(", "adjacency_matrix", ")", ":", "\n", "    ", "\"\"\"\n    The search space uses only 4 intermediate nodes, rather than 5 as used in nasbench\n    This method adds a dummy node to the graph which is never used to be compatible with nasbench.\n    :param adjacency_matrix:\n    :return:\n    \"\"\"", "\n", "return", "np", ".", "insert", "(", "\n", "np", ".", "insert", "(", "adjacency_matrix", ",", "\n", "5", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "axis", "=", "1", ")", ",", "\n", "5", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.parse_log": [[127, 144], ["open", "os.path.join", "train_accuracies.append", "valid_accuracies.append", "float", "float", "re.search().group", "re.search().group", "re.search", "re.search"], "function", ["None"], ["", "def", "parse_log", "(", "path", ")", ":", "\n", "    ", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'log.txt'", ")", ",", "'r'", ")", "\n", "# Read in the relevant information", "\n", "train_accuracies", "=", "[", "]", "\n", "valid_accuracies", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "        ", "if", "'train_acc'", "in", "line", ":", "\n", "            ", "train_accuracies", ".", "append", "(", "line", ")", "\n", "", "elif", "'valid_acc'", "in", "line", ":", "\n", "            ", "valid_accuracies", ".", "append", "(", "line", ")", "\n", "\n", "", "", "valid_error", "=", "[", "[", "1", "-", "1", "/", "100", "*", "float", "(", "re", ".", "search", "(", "'valid_acc ([-+]?[0-9]*\\.?[0-9]+)'", ",", "line", ")", ".", "group", "(", "1", ")", ")", "]", "for", "line", "in", "\n", "valid_accuracies", "]", "\n", "train_error", "=", "[", "[", "1", "-", "1", "/", "100", "*", "float", "(", "re", ".", "search", "(", "'train_acc ([-+]?[0-9]*\\.?[0-9]+)'", ",", "line", ")", ".", "group", "(", "1", ")", ")", "]", "for", "line", "in", "\n", "train_accuracies", "]", "\n", "\n", "return", "valid_error", ",", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.atoi": [[146, 148], ["text.isdigit", "int"], "function", ["None"], ["", "def", "atoi", "(", "text", ")", ":", "\n", "    ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.natural_keys": [[150, 157], ["utils.atoi", "re.split"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.atoi"], ["", "def", "natural_keys", "(", "text", ")", ":", "\n", "    ", "'''\n    alist.sort(key=natural_keys) sorts in human order\n    http://nedbatchelder.com/blog/200712/human_sorting.html\n    (See Toothy's implementation in the comments)\n    '''", "\n", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "r'(\\d+)'", ",", "text", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_1.SearchSpace1.__init__": [[12, 30], ["nasbench_analysis.search_spaces.search_space.SearchSpace.__init__", "sum", "ValueError", "search_space_1.SearchSpace1.num_parents_per_node.values"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SearchSpace1", ",", "self", ")", ".", "__init__", "(", "search_space_number", "=", "1", ",", "num_intermediate_nodes", "=", "4", ")", "\n", "\"\"\"\n        SEARCH SPACE 1\n        \"\"\"", "\n", "self", ".", "num_parents_per_node", "=", "{", "\n", "'0'", ":", "0", ",", "\n", "'1'", ":", "1", ",", "\n", "'2'", ":", "2", ",", "\n", "'3'", ":", "2", ",", "\n", "'4'", ":", "2", ",", "\n", "'5'", ":", "2", "\n", "}", "\n", "if", "sum", "(", "self", ".", "num_parents_per_node", ".", "values", "(", ")", ")", ">", "9", ":", "\n", "            ", "raise", "ValueError", "(", "'Each nasbench cell has at most 9 edges.'", ")", "\n", "\n", "", "self", ".", "test_min_error", "=", "0.05448716878890991", "\n", "self", ".", "valid_min_error", "=", "0.049278855323791504", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_1.SearchSpace1.create_nasbench_adjacency_matrix": [[31, 36], ["search_space_1.SearchSpace1._create_adjacency_matrix", "nasbench_analysis.utils.upscale_to_nasbench_format", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._create_adjacency_matrix", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.upscale_to_nasbench_format"], ["", "def", "create_nasbench_adjacency_matrix", "(", "self", ",", "parents", ",", "**", "kwargs", ")", ":", "\n", "        ", "adjacency_matrix", "=", "self", ".", "_create_adjacency_matrix", "(", "parents", ",", "adjacency_matrix", "=", "np", ".", "zeros", "(", "[", "6", ",", "6", "]", ")", ",", "\n", "node", "=", "OUTPUT_NODE", "-", "1", ")", "\n", "# Create nasbench compatible adjacency matrix", "\n", "return", "upscale_to_nasbench_format", "(", "adjacency_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_1.SearchSpace1.create_nasbench_adjacency_matrix_with_loose_ends": [[37, 39], ["nasbench_analysis.utils.upscale_to_nasbench_format", "search_space_1.SearchSpace1._create_adjacency_matrix_with_loose_ends"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.upscale_to_nasbench_format", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._create_adjacency_matrix_with_loose_ends"], ["", "def", "create_nasbench_adjacency_matrix_with_loose_ends", "(", "self", ",", "parents", ")", ":", "\n", "        ", "return", "upscale_to_nasbench_format", "(", "self", ".", "_create_adjacency_matrix_with_loose_ends", "(", "parents", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_1.SearchSpace1.generate_adjacency_matrix_without_loose_ends": [[40, 44], ["search_space_1.SearchSpace1._generate_adjacency_matrix", "numpy.zeros", "nasbench_analysis.utils.upscale_to_nasbench_format"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._generate_adjacency_matrix", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.upscale_to_nasbench_format"], ["", "def", "generate_adjacency_matrix_without_loose_ends", "(", "self", ")", ":", "\n", "        ", "for", "adjacency_matrix", "in", "self", ".", "_generate_adjacency_matrix", "(", "adjacency_matrix", "=", "np", ".", "zeros", "(", "[", "6", ",", "6", "]", ")", ",", "\n", "node", "=", "OUTPUT_NODE", "-", "1", ")", ":", "\n", "            ", "yield", "upscale_to_nasbench_format", "(", "adjacency_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_1.SearchSpace1.objective_function": [[45, 53], ["super().convert_config_to_nasbench_format", "adjacency_matrix.astype().tolist", "nasbench.api.ModelSpec", "nasbench.query", "adjacency_matrix.astype"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.convert_config_to_nasbench_format", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query"], ["", "", "def", "objective_function", "(", "self", ",", "nasbench", ",", "config", ",", "budget", "=", "108", ")", ":", "\n", "        ", "adjacency_matrix", ",", "node_list", "=", "super", "(", "SearchSpace1", ",", "self", ")", ".", "convert_config_to_nasbench_format", "(", "config", ")", "\n", "# adjacency_matrix = upscale_to_nasbench_format(adjacency_matrix)", "\n", "node_list", "=", "[", "INPUT", ",", "*", "node_list", ",", "CONV1X1", ",", "OUTPUT", "]", "\n", "adjacency_list", "=", "adjacency_matrix", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "adjacency_list", ",", "ops", "=", "node_list", ")", "\n", "nasbench_data", "=", "nasbench", ".", "query", "(", "model_spec", ",", "epochs", "=", "budget", ")", "\n", "return", "nasbench_data", "[", "'validation_accuracy'", "]", ",", "nasbench_data", "[", "'training_time'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_1.SearchSpace1.generate_with_loose_ends": [[54, 68], ["itertools.product", "search_space_1.SearchSpace1.create_nasbench_adjacency_matrix_with_loose_ends", "itertools.combinations", "list", "search_space_1.SearchSpace1.num_parents_per_node.items", "range", "int"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.create_nasbench_adjacency_matrix_with_loose_ends"], ["", "def", "generate_with_loose_ends", "(", "self", ")", ":", "\n", "        ", "for", "_", ",", "parent_node_3", ",", "parent_node_4", ",", "output_parents", "in", "itertools", ".", "product", "(", "\n", "*", "[", "itertools", ".", "combinations", "(", "list", "(", "range", "(", "int", "(", "node", ")", ")", ")", ",", "num_parents", ")", "for", "node", ",", "num_parents", "in", "\n", "self", ".", "num_parents_per_node", ".", "items", "(", ")", "]", "[", "2", ":", "]", ")", ":", "\n", "            ", "parents", "=", "{", "\n", "'0'", ":", "[", "]", ",", "\n", "'1'", ":", "[", "0", "]", ",", "\n", "'2'", ":", "[", "0", ",", "1", "]", ",", "\n", "'3'", ":", "parent_node_3", ",", "\n", "'4'", ":", "parent_node_4", ",", "\n", "'5'", ":", "output_parents", "\n", "}", "\n", "adjacency_matrix", "=", "self", ".", "create_nasbench_adjacency_matrix_with_loose_ends", "(", "parents", ")", "\n", "yield", "adjacency_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_1.analysis": [[70, 128], ["search_space_1.SearchSpace1", "SearchSpace1.sample", "nasbench_analysis.utils.NasbenchWrapper", "search_space_1.SearchSpace1", "SearchSpace1.sample_with_loose_ends", "range", "SearchSpace1.generate_search_space_without_loose_ends", "print", "matplotlib.figure", "matplotlib.title", "matplotlib.hist", "matplotlib.gca", "plt.gca.set_xscale", "plt.gca.set_yscale", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.tight_layout", "matplotlib.xlim", "matplotlib.savefig", "matplotlib.show", "matplotlib.figure", "matplotlib.title", "matplotlib.hist", "matplotlib.gca", "plt.gca.set_xscale", "plt.gca.set_yscale", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.tight_layout", "matplotlib.xlim", "matplotlib.savefig", "matplotlib.show", "print", "SearchSpace1.sample", "adjacency_matrix.astype().tolist", "nasbench.api.ModelSpec", "nasbench_analysis.utils.NasbenchWrapper.query", "nasbench_analysis.utils.NasbenchWrapper.query", "min", "min", "test_error.append", "valid_error.append", "len", "len", "int", "int", "adjacency_matrix.astype", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.sample", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.generate_search_space_without_loose_ends", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.sample", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query"], ["", "", "", "def", "analysis", "(", ")", ":", "\n", "    ", "search_space_1", "=", "SearchSpace1", "(", ")", "\n", "search_space_1", ".", "sample", "(", "with_loose_ends", "=", "False", ")", "\n", "# Load NASBench", "\n", "nasbench", "=", "NasbenchWrapper", "(", "'nasbench_analysis/nasbench_data/108_e/nasbench_full.tfrecord'", ")", "\n", "\n", "test_error", "=", "[", "]", "\n", "valid_error", "=", "[", "]", "\n", "\n", "search_space_1", "=", "SearchSpace1", "(", ")", "\n", "search_space_1", ".", "sample_with_loose_ends", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "10000", ")", ":", "\n", "        ", "adjacency_matrix", ",", "node_list", "=", "search_space_1", ".", "sample", "(", ")", "\n", "adjacency_list", "=", "adjacency_matrix", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", "\n", "node_list", "=", "[", "INPUT", ",", "*", "node_list", ",", "OUTPUT", "]", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "adjacency_list", ",", "ops", "=", "node_list", ")", "\n", "nasbench", ".", "query", "(", "model_spec", ")", "\n", "\n", "", "for", "adjacency_matrix", ",", "ops", ",", "model_spec", "in", "search_space_1", ".", "generate_search_space_without_loose_ends", "(", ")", ":", "\n", "# Query NASBench", "\n", "        ", "data", "=", "nasbench", ".", "query", "(", "model_spec", ")", "\n", "for", "item", "in", "data", ":", "\n", "            ", "test_error", ".", "append", "(", "1", "-", "item", "[", "'test_accuracy'", "]", ")", "\n", "valid_error", ".", "append", "(", "1", "-", "item", "[", "'validation_accuracy'", "]", ")", "\n", "\n", "", "", "print", "(", "'Number of architectures'", ",", "len", "(", "test_error", ")", "/", "len", "(", "data", ")", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "\n", "'Distribution of test error in search space (no. architectures {})'", ".", "format", "(", "\n", "int", "(", "len", "(", "test_error", ")", "/", "len", "(", "data", ")", ")", ")", ")", "\n", "plt", ".", "hist", "(", "test_error", ",", "bins", "=", "800", ",", "density", "=", "True", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xscale", "(", "'log'", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "plt", ".", "xlabel", "(", "'Test error'", ")", "\n", "plt", ".", "grid", "(", "True", ",", "which", "=", "\"both\"", ",", "ls", "=", "\"-\"", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "0.3", ")", "\n", "plt", ".", "savefig", "(", "'nasbench_analysis/search_spaces/export/search_space_1/test_error_distribution.pdf'", ",", "dpi", "=", "600", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Distribution of validation error in search space (no. architectures {})'", ".", "format", "(", "\n", "int", "(", "len", "(", "valid_error", ")", "/", "len", "(", "data", ")", ")", ")", ")", "\n", "plt", ".", "hist", "(", "valid_error", ",", "bins", "=", "800", ",", "density", "=", "True", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xscale", "(", "'log'", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "plt", ".", "xlabel", "(", "'Validation error'", ")", "\n", "plt", ".", "grid", "(", "True", ",", "which", "=", "\"both\"", ",", "ls", "=", "\"-\"", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "0.3", ")", "\n", "plt", ".", "savefig", "(", "'nasbench_analysis/search_spaces/export/search_space_1/valid_error_distribution.pdf'", ",", "dpi", "=", "600", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "print", "(", "'test_error'", ",", "min", "(", "test_error", ")", ",", "'valid_error'", ",", "min", "(", "valid_error", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_2.SearchSpace2.__init__": [[15, 36], ["nasbench_analysis.search_spaces.search_space.SearchSpace.__init__", "sum", "ValueError", "search_space_2.SearchSpace2.num_parents_per_node.values"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "search_space_number", "=", "2", "\n", "self", ".", "num_intermediate_nodes", "=", "4", "\n", "super", "(", "SearchSpace2", ",", "self", ")", ".", "__init__", "(", "search_space_number", "=", "self", ".", "search_space_number", ",", "\n", "num_intermediate_nodes", "=", "self", ".", "num_intermediate_nodes", ")", "\n", "\"\"\"\n        SEARCH SPACE 2\n        \"\"\"", "\n", "self", ".", "num_parents_per_node", "=", "{", "\n", "'0'", ":", "0", ",", "\n", "'1'", ":", "1", ",", "\n", "'2'", ":", "1", ",", "\n", "'3'", ":", "2", ",", "\n", "'4'", ":", "2", ",", "\n", "'5'", ":", "3", "\n", "}", "\n", "if", "sum", "(", "self", ".", "num_parents_per_node", ".", "values", "(", ")", ")", ">", "9", ":", "\n", "            ", "raise", "ValueError", "(", "'Each nasbench cell has at most 9 edges.'", ")", "\n", "\n", "", "self", ".", "test_min_error", "=", "0.057592153549194336", "\n", "self", ".", "valid_min_error", "=", "0.051582515239715576", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_2.SearchSpace2.create_nasbench_adjacency_matrix": [[37, 42], ["search_space_2.SearchSpace2._create_adjacency_matrix", "nasbench_analysis.utils.upscale_to_nasbench_format", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._create_adjacency_matrix", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.upscale_to_nasbench_format"], ["", "def", "create_nasbench_adjacency_matrix", "(", "self", ",", "parents", ",", "**", "kwargs", ")", ":", "\n", "        ", "adjacency_matrix", "=", "self", ".", "_create_adjacency_matrix", "(", "parents", ",", "adjacency_matrix", "=", "np", ".", "zeros", "(", "[", "6", ",", "6", "]", ")", ",", "\n", "node", "=", "OUTPUT_NODE", "-", "1", ")", "\n", "# Create nasbench compatible adjacency matrix", "\n", "return", "upscale_to_nasbench_format", "(", "adjacency_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_2.SearchSpace2.create_nasbench_adjacency_matrix_with_loose_ends": [[43, 45], ["nasbench_analysis.utils.upscale_to_nasbench_format", "search_space_2.SearchSpace2._create_adjacency_matrix_with_loose_ends"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.upscale_to_nasbench_format", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._create_adjacency_matrix_with_loose_ends"], ["", "def", "create_nasbench_adjacency_matrix_with_loose_ends", "(", "self", ",", "parents", ")", ":", "\n", "        ", "return", "upscale_to_nasbench_format", "(", "self", ".", "_create_adjacency_matrix_with_loose_ends", "(", "parents", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_2.SearchSpace2.generate_adjacency_matrix_without_loose_ends": [[46, 50], ["search_space_2.SearchSpace2._generate_adjacency_matrix", "numpy.zeros", "nasbench_analysis.utils.upscale_to_nasbench_format"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._generate_adjacency_matrix", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.upscale_to_nasbench_format"], ["", "def", "generate_adjacency_matrix_without_loose_ends", "(", "self", ")", ":", "\n", "        ", "for", "adjacency_matrix", "in", "self", ".", "_generate_adjacency_matrix", "(", "adjacency_matrix", "=", "np", ".", "zeros", "(", "[", "6", ",", "6", "]", ")", ",", "\n", "node", "=", "OUTPUT_NODE", "-", "1", ")", ":", "\n", "            ", "yield", "upscale_to_nasbench_format", "(", "adjacency_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_2.SearchSpace2.objective_function": [[51, 67], ["super().convert_config_to_nasbench_format", "adjacency_matrix.astype().tolist", "nasbench.api.ModelSpec", "nasbench.query", "optimizers.utils.Model", "optimizers.utils.Architecture", "optimizers.utils.Model.update_data", "search_space_2.SearchSpace2.run_history.append", "adjacency_matrix.astype"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.convert_config_to_nasbench_format", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.utils.Model.update_data"], ["", "", "def", "objective_function", "(", "self", ",", "nasbench", ",", "config", ",", "budget", "=", "108", ")", ":", "\n", "        ", "adjacency_matrix", ",", "node_list", "=", "super", "(", "SearchSpace2", ",", "self", ")", ".", "convert_config_to_nasbench_format", "(", "config", ")", "\n", "# adjacency_matrix = upscale_to_nasbench_format(adjacency_matrix)", "\n", "node_list", "=", "[", "INPUT", ",", "*", "node_list", ",", "CONV1X1", ",", "OUTPUT", "]", "\n", "adjacency_list", "=", "adjacency_matrix", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "adjacency_list", ",", "ops", "=", "node_list", ")", "\n", "nasbench_data", "=", "nasbench", ".", "query", "(", "model_spec", ",", "epochs", "=", "budget", ")", "\n", "\n", "# record the data to history", "\n", "architecture", "=", "Model", "(", ")", "\n", "arch", "=", "Architecture", "(", "adjacency_matrix", "=", "adjacency_matrix", ",", "\n", "node_list", "=", "node_list", ")", "\n", "architecture", ".", "update_data", "(", "arch", ",", "nasbench_data", ",", "budget", ")", "\n", "self", ".", "run_history", ".", "append", "(", "architecture", ")", "\n", "\n", "return", "nasbench_data", "[", "'validation_accuracy'", "]", ",", "nasbench_data", "[", "'training_time'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_2.SearchSpace2.generate_with_loose_ends": [[68, 82], ["itertools.product", "search_space_2.SearchSpace2.create_nasbench_adjacency_matrix_with_loose_ends", "itertools.combinations", "list", "search_space_2.SearchSpace2.num_parents_per_node.items", "range", "int"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.create_nasbench_adjacency_matrix_with_loose_ends"], ["", "def", "generate_with_loose_ends", "(", "self", ")", ":", "\n", "        ", "for", "parent_node_2", ",", "parent_node_3", ",", "parent_node_4", ",", "output_parents", "in", "itertools", ".", "product", "(", "\n", "*", "[", "itertools", ".", "combinations", "(", "list", "(", "range", "(", "int", "(", "node", ")", ")", ")", ",", "num_parents", ")", "for", "node", ",", "num_parents", "in", "\n", "self", ".", "num_parents_per_node", ".", "items", "(", ")", "]", "[", "2", ":", "]", ")", ":", "\n", "            ", "parents", "=", "{", "\n", "'0'", ":", "[", "]", ",", "\n", "'1'", ":", "[", "0", "]", ",", "\n", "'2'", ":", "parent_node_2", ",", "\n", "'3'", ":", "parent_node_3", ",", "\n", "'4'", ":", "parent_node_4", ",", "\n", "'5'", ":", "output_parents", "\n", "}", "\n", "adjacency_matrix", "=", "self", ".", "create_nasbench_adjacency_matrix_with_loose_ends", "(", "parents", ")", "\n", "yield", "adjacency_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_2.analysis": [[84, 138], ["search_space_2.SearchSpace2", "SearchSpace2.sample", "nasbench_analysis.utils.NasbenchWrapper", "range", "SearchSpace2.generate_search_space_without_loose_ends", "print", "matplotlib.figure", "matplotlib.title", "matplotlib.hist", "matplotlib.gca", "plt.gca.set_xscale", "plt.gca.set_yscale", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.tight_layout", "matplotlib.xlim", "matplotlib.savefig", "matplotlib.show", "matplotlib.figure", "matplotlib.title", "matplotlib.hist", "matplotlib.gca", "plt.gca.set_xscale", "plt.gca.set_yscale", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.tight_layout", "matplotlib.xlim", "matplotlib.savefig", "matplotlib.show", "print", "SearchSpace2.sample_with_loose_ends", "adjacency_matrix.astype().tolist", "nasbench.api.ModelSpec", "nasbench_analysis.utils.NasbenchWrapper.query", "nasbench_analysis.utils.NasbenchWrapper.query", "min", "min", "test_error.append", "valid_error.append", "len", "len", "int", "int", "adjacency_matrix.astype", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.sample", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.generate_search_space_without_loose_ends", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query"], ["", "", "", "def", "analysis", "(", ")", ":", "\n", "    ", "search_space_2", "=", "SearchSpace2", "(", ")", "\n", "search_space_2", ".", "sample", "(", "with_loose_ends", "=", "False", ")", "\n", "\n", "# Load NASBench", "\n", "nasbench", "=", "NasbenchWrapper", "(", "'nasbench_analysis/nasbench_data/108_e/nasbench_full.tfrecord'", ")", "\n", "\n", "test_error", "=", "[", "]", "\n", "valid_error", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "10000", ")", ":", "\n", "        ", "adjacency_matrix", ",", "node_list", "=", "search_space_2", ".", "sample_with_loose_ends", "(", ")", "\n", "adjacency_list", "=", "adjacency_matrix", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", "\n", "node_list", "=", "[", "INPUT", ",", "*", "node_list", ",", "OUTPUT", "]", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "adjacency_list", ",", "ops", "=", "node_list", ")", "\n", "nasbench", ".", "query", "(", "model_spec", ")", "\n", "\n", "", "for", "adjacency_matrix", ",", "ops", ",", "model_spec", "in", "search_space_2", ".", "generate_search_space_without_loose_ends", "(", ")", ":", "\n", "# Query NASBench", "\n", "        ", "data", "=", "nasbench", ".", "query", "(", "model_spec", ")", "\n", "for", "item", "in", "data", ":", "\n", "            ", "test_error", ".", "append", "(", "1", "-", "item", "[", "'test_accuracy'", "]", ")", "\n", "valid_error", ".", "append", "(", "1", "-", "item", "[", "'validation_accuracy'", "]", ")", "\n", "\n", "", "", "print", "(", "'Number of architectures'", ",", "len", "(", "test_error", ")", "/", "len", "(", "data", ")", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "\n", "'Distribution of test error in search space (no. architectures {})'", ".", "format", "(", "int", "(", "len", "(", "test_error", ")", "/", "len", "(", "data", ")", ")", ")", ")", "\n", "plt", ".", "hist", "(", "test_error", ",", "bins", "=", "800", ",", "density", "=", "True", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xscale", "(", "'log'", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "plt", ".", "xlabel", "(", "'Test error'", ")", "\n", "plt", ".", "grid", "(", "True", ",", "which", "=", "\"both\"", ",", "ls", "=", "\"-\"", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "0.3", ")", "\n", "plt", ".", "savefig", "(", "'nasbench_analysis/search_spaces/export/search_space_2/test_error_distribution.pdf'", ",", "dpi", "=", "600", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Distribution of validation error in search space (no. architectures {})'", ".", "format", "(", "\n", "int", "(", "len", "(", "valid_error", ")", "/", "len", "(", "data", ")", ")", ")", ")", "\n", "plt", ".", "hist", "(", "valid_error", ",", "bins", "=", "800", ",", "density", "=", "True", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xscale", "(", "'log'", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "plt", ".", "xlabel", "(", "'Validation error'", ")", "\n", "plt", ".", "grid", "(", "True", ",", "which", "=", "\"both\"", ",", "ls", "=", "\"-\"", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "0.3", ")", "\n", "plt", ".", "savefig", "(", "'nasbench_analysis/search_spaces/export/search_space_2/valid_error_distribution.pdf'", ",", "dpi", "=", "600", ")", "\n", "plt", ".", "show", "(", ")", "\n", "print", "(", "'test_error'", ",", "min", "(", "test_error", ")", ",", "'valid_error'", ",", "min", "(", "valid_error", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.__init__": [[23, 29], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "search_space_number", ",", "num_intermediate_nodes", ")", ":", "\n", "        ", "self", ".", "search_space_number", "=", "search_space_number", "\n", "self", ".", "num_intermediate_nodes", "=", "num_intermediate_nodes", "\n", "self", ".", "num_parents_per_node", "=", "{", "}", "\n", "\n", "self", ".", "run_history", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.create_nasbench_adjacency_matrix": [[30, 34], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "create_nasbench_adjacency_matrix", "(", "self", ",", "parents", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Based on given connectivity pattern create the corresponding adjacency matrix.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.sample": [[35, 47], ["search_space.SearchSpace._sample_adjacency_matrix_with_loose_ends", "search_space.SearchSpace._sample_adjacency_matrix_without_loose_ends", "search_space.SearchSpace._check_validity_of_adjacency_matrix", "nasbench_analysis.utils.upscale_to_nasbench_format", "random.choices", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._sample_adjacency_matrix_with_loose_ends", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._sample_adjacency_matrix_without_loose_ends", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._check_validity_of_adjacency_matrix", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.utils.upscale_to_nasbench_format"], ["", "def", "sample", "(", "self", ",", "with_loose_ends", ",", "upscale", "=", "True", ")", ":", "\n", "        ", "if", "with_loose_ends", ":", "\n", "            ", "adjacency_matrix_sample", "=", "self", ".", "_sample_adjacency_matrix_with_loose_ends", "(", ")", "\n", "", "else", ":", "\n", "            ", "adjacency_matrix_sample", "=", "self", ".", "_sample_adjacency_matrix_without_loose_ends", "(", "\n", "adjacency_matrix", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_intermediate_nodes", "+", "2", ",", "self", ".", "num_intermediate_nodes", "+", "2", "]", ")", ",", "\n", "node", "=", "self", ".", "num_intermediate_nodes", "+", "1", ")", "\n", "assert", "self", ".", "_check_validity_of_adjacency_matrix", "(", "adjacency_matrix_sample", ")", ",", "'Incorrect graph'", "\n", "\n", "", "if", "upscale", "and", "self", ".", "search_space_number", "in", "[", "1", ",", "2", "]", ":", "\n", "            ", "adjacency_matrix_sample", "=", "upscale_to_nasbench_format", "(", "adjacency_matrix_sample", ")", "\n", "", "return", "adjacency_matrix_sample", ",", "random", ".", "choices", "(", "PRIMITIVES", ",", "k", "=", "self", ".", "num_intermediate_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._sample_adjacency_matrix_with_loose_ends": [[48, 59], ["enumerate", "search_space.SearchSpace._create_adjacency_matrix_with_loose_ends", "random.sample", "list", "search_space.SearchSpace.num_parents_per_node.items", "str", "itertools.combinations", "list", "range", "int"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._create_adjacency_matrix_with_loose_ends", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.sample"], ["", "def", "_sample_adjacency_matrix_with_loose_ends", "(", "self", ")", ":", "\n", "        ", "parents_per_node", "=", "[", "random", ".", "sample", "(", "list", "(", "itertools", ".", "combinations", "(", "list", "(", "range", "(", "int", "(", "node", ")", ")", ")", ",", "num_parents", ")", ")", ",", "1", ")", "for", "\n", "node", ",", "num_parents", "in", "self", ".", "num_parents_per_node", ".", "items", "(", ")", "]", "[", "2", ":", "]", "\n", "parents", "=", "{", "\n", "'0'", ":", "[", "]", ",", "\n", "'1'", ":", "[", "0", "]", "\n", "}", "\n", "for", "node", ",", "node_parent", "in", "enumerate", "(", "parents_per_node", ",", "2", ")", ":", "\n", "            ", "parents", "[", "str", "(", "node", ")", "]", "=", "node_parent", "\n", "", "adjacency_matrix", "=", "self", ".", "_create_adjacency_matrix_with_loose_ends", "(", "parents", ")", "\n", "return", "adjacency_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._sample_adjacency_matrix_without_loose_ends": [[60, 70], ["numpy.sum", "random.sample", "search_space.SearchSpace._sample_adjacency_matrix_without_loose_ends", "str", "list", "nasbench_analysis.utils.parent_combinations"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.sample", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._sample_adjacency_matrix_without_loose_ends", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.parent_combinations"], ["", "def", "_sample_adjacency_matrix_without_loose_ends", "(", "self", ",", "adjacency_matrix", ",", "node", ")", ":", "\n", "        ", "req_num_parents", "=", "self", ".", "num_parents_per_node", "[", "str", "(", "node", ")", "]", "\n", "current_num_parents", "=", "np", ".", "sum", "(", "adjacency_matrix", "[", ":", ",", "node", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "num_parents_left", "=", "req_num_parents", "-", "current_num_parents", "\n", "sampled_parents", "=", "random", ".", "sample", "(", "list", "(", "parent_combinations_old", "(", "adjacency_matrix", ",", "node", ",", "n_parents", "=", "num_parents_left", ")", ")", ",", "1", ")", "[", "0", "]", "\n", "for", "parent", "in", "sampled_parents", ":", "\n", "            ", "adjacency_matrix", "[", "parent", ",", "node", "]", "=", "1", "\n", "adjacency_matrix", "=", "self", ".", "_sample_adjacency_matrix_without_loose_ends", "(", "adjacency_matrix", ",", "parent", ")", "\n", "", "return", "adjacency_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.generate_adjacency_matrix_without_loose_ends": [[71, 75], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "generate_adjacency_matrix_without_loose_ends", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Returns every adjacency matrix in the search space without loose ends.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.convert_config_to_nasbench_format": [[76, 83], ["search_space.SearchSpace.create_nasbench_adjacency_matrix_with_loose_ends", "list", "list", "search_space.SearchSpace.num_parents_per_node.keys", "search_space.SearchSpace.num_parents_per_node.keys"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.create_nasbench_adjacency_matrix_with_loose_ends"], ["", "def", "convert_config_to_nasbench_format", "(", "self", ",", "config", ")", ":", "\n", "        ", "parents", "=", "{", "node", ":", "config", "[", "\"choice_block_{}_parents\"", ".", "format", "(", "node", ")", "]", "for", "node", "in", "\n", "list", "(", "self", ".", "num_parents_per_node", ".", "keys", "(", ")", ")", "[", "1", ":", "]", "}", "\n", "parents", "[", "'0'", "]", "=", "[", "]", "\n", "adjacency_matrix", "=", "self", ".", "create_nasbench_adjacency_matrix_with_loose_ends", "(", "parents", ")", "\n", "ops", "=", "[", "config", "[", "\"choice_block_{}_op\"", ".", "format", "(", "node", ")", "]", "for", "node", "in", "list", "(", "self", ".", "num_parents_per_node", ".", "keys", "(", ")", ")", "[", "1", ":", "-", "1", "]", "]", "\n", "return", "adjacency_matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.get_configuration_space": [[84, 97], ["ConfigSpace.ConfigurationSpace", "list", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "list", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "search_space.SearchSpace.num_parents_per_node.keys", "ConfigSpace.CategoricalHyperparameter", "search_space.SearchSpace.num_parents_per_node.items", "ConfigSpace.CategoricalHyperparameter", "nasbench_analysis.utils.parent_combinations"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.parent_combinations"], ["", "def", "get_configuration_space", "(", "self", ")", ":", "\n", "        ", "cs", "=", "ConfigSpace", ".", "ConfigurationSpace", "(", ")", "\n", "\n", "for", "node", "in", "list", "(", "self", ".", "num_parents_per_node", ".", "keys", "(", ")", ")", "[", "1", ":", "-", "1", "]", ":", "\n", "            ", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"choice_block_{}_op\"", ".", "format", "(", "node", ")", ",", "\n", "[", "CONV1X1", ",", "CONV3X3", ",", "MAXPOOL3X3", "]", ")", ")", "\n", "\n", "", "for", "choice_block_index", ",", "num_parents", "in", "list", "(", "self", ".", "num_parents_per_node", ".", "items", "(", ")", ")", "[", "1", ":", "]", ":", "\n", "            ", "cs", ".", "add_hyperparameter", "(", "\n", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\n", "\"choice_block_{}_parents\"", ".", "format", "(", "choice_block_index", ")", ",", "\n", "parent_combinations", "(", "node", "=", "choice_block_index", ",", "num_parents", "=", "num_parents", ")", ")", ")", "\n", "", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.generate_search_space_without_loose_ends": [[98, 129], ["enumerate", "search_space.SearchSpace.generate_adjacency_matrix_without_loose_ends", "print", "int", "itertools.product", "numpy.sum", "list", "range", "ops.append", "adjacency_matrix.astype().tolist", "nasbench.api.ModelSpec", "len", "ops.append", "ops.append", "adjacency_matrix.astype", "numpy.sum", "numpy.sum", "list.pop"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.generate_adjacency_matrix_without_loose_ends", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist"], ["", "def", "generate_search_space_without_loose_ends", "(", "self", ")", ":", "\n", "# Create all possible connectivity patterns", "\n", "        ", "for", "iter", ",", "adjacency_matrix", "in", "enumerate", "(", "self", ".", "generate_adjacency_matrix_without_loose_ends", "(", ")", ")", ":", "\n", "            ", "print", "(", "iter", ")", "\n", "# Print graph", "\n", "# Evaluate every possible combination of node ops.", "\n", "n_repeats", "=", "int", "(", "np", ".", "sum", "(", "np", ".", "sum", "(", "adjacency_matrix", ",", "axis", "=", "1", ")", "[", "1", ":", "-", "1", "]", ">", "0", ")", ")", "\n", "for", "combination", "in", "itertools", ".", "product", "(", "[", "CONV1X1", ",", "CONV3X3", ",", "MAXPOOL3X3", "]", ",", "repeat", "=", "n_repeats", ")", ":", "\n", "# Create node labels", "\n", "# Add some op as node 6 which isn't used, here conv1x1", "\n", "                ", "ops", "=", "[", "INPUT", "]", "\n", "combination", "=", "list", "(", "combination", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                    ", "if", "np", ".", "sum", "(", "adjacency_matrix", ",", "axis", "=", "1", ")", "[", "i", "+", "1", "]", ">", "0", ":", "\n", "                        ", "ops", ".", "append", "(", "combination", ".", "pop", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "ops", ".", "append", "(", "CONV1X1", ")", "\n", "", "", "assert", "len", "(", "combination", ")", "==", "0", ",", "'Something is wrong'", "\n", "ops", ".", "append", "(", "OUTPUT", ")", "\n", "\n", "# Create nested list from numpy matrix", "\n", "nasbench_adjacency_matrix", "=", "adjacency_matrix", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", "\n", "\n", "# Assemble the model spec", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "\n", "# Adjacency matrix of the module", "\n", "matrix", "=", "nasbench_adjacency_matrix", ",", "\n", "# Operations at the vertices of the module, matches order of matrix", "\n", "ops", "=", "ops", ")", "\n", "\n", "yield", "adjacency_matrix", ",", "ops", ",", "model_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._generate_adjacency_matrix": [[130, 147], ["search_space.SearchSpace._check_validity_of_adjacency_matrix", "numpy.sum", "nasbench_analysis.utils.parent_combinations", "copy.copy", "str", "search_space.SearchSpace._generate_adjacency_matrix"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._check_validity_of_adjacency_matrix", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.parent_combinations", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._generate_adjacency_matrix"], ["", "", "", "def", "_generate_adjacency_matrix", "(", "self", ",", "adjacency_matrix", ",", "node", ")", ":", "\n", "        ", "if", "self", ".", "_check_validity_of_adjacency_matrix", "(", "adjacency_matrix", ")", ":", "\n", "# If graph from search space then yield.", "\n", "            ", "yield", "adjacency_matrix", "\n", "", "else", ":", "\n", "            ", "req_num_parents", "=", "self", ".", "num_parents_per_node", "[", "str", "(", "node", ")", "]", "\n", "current_num_parents", "=", "np", ".", "sum", "(", "adjacency_matrix", "[", ":", ",", "node", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "num_parents_left", "=", "req_num_parents", "-", "current_num_parents", "\n", "\n", "for", "parents", "in", "parent_combinations_old", "(", "adjacency_matrix", ",", "node", ",", "n_parents", "=", "num_parents_left", ")", ":", "\n", "# Make copy of adjacency matrix so that when it returns to this stack", "\n", "# it can continue with the unmodified adjacency matrix", "\n", "                ", "adjacency_matrix_copy", "=", "copy", ".", "copy", "(", "adjacency_matrix", ")", "\n", "for", "parent", "in", "parents", ":", "\n", "                    ", "adjacency_matrix_copy", "[", "parent", ",", "node", "]", "=", "1", "\n", "for", "graph", "in", "self", ".", "_generate_adjacency_matrix", "(", "adjacency_matrix", "=", "adjacency_matrix_copy", ",", "node", "=", "parent", ")", ":", "\n", "                        ", "yield", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._create_adjacency_matrix": [[148, 159], ["search_space.SearchSpace._check_validity_of_adjacency_matrix", "str", "search_space.SearchSpace._create_adjacency_matrix"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._check_validity_of_adjacency_matrix", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._create_adjacency_matrix"], ["", "", "", "", "", "def", "_create_adjacency_matrix", "(", "self", ",", "parents", ",", "adjacency_matrix", ",", "node", ")", ":", "\n", "        ", "if", "self", ".", "_check_validity_of_adjacency_matrix", "(", "adjacency_matrix", ")", ":", "\n", "# If graph from search space then yield.", "\n", "            ", "return", "adjacency_matrix", "\n", "", "else", ":", "\n", "            ", "for", "parent", "in", "parents", "[", "str", "(", "node", ")", "]", ":", "\n", "                ", "adjacency_matrix", "[", "parent", ",", "node", "]", "=", "1", "\n", "if", "parent", "!=", "0", ":", "\n", "                    ", "adjacency_matrix", "=", "self", ".", "_create_adjacency_matrix", "(", "parents", "=", "parents", ",", "adjacency_matrix", "=", "adjacency_matrix", ",", "\n", "node", "=", "parent", ")", "\n", "", "", "return", "adjacency_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._create_adjacency_matrix_with_loose_ends": [[160, 167], ["numpy.zeros", "parents.items", "len", "len", "int"], "methods", ["None"], ["", "", "def", "_create_adjacency_matrix_with_loose_ends", "(", "self", ",", "parents", ")", ":", "\n", "# Create the adjacency_matrix on a per node basis", "\n", "        ", "adjacency_matrix", "=", "np", ".", "zeros", "(", "[", "len", "(", "parents", ")", ",", "len", "(", "parents", ")", "]", ")", "\n", "for", "node", ",", "node_parents", "in", "parents", ".", "items", "(", ")", ":", "\n", "            ", "for", "parent", "in", "node_parents", ":", "\n", "                ", "adjacency_matrix", "[", "parent", ",", "int", "(", "node", ")", "]", "=", "1", "\n", "", "", "return", "adjacency_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._check_validity_of_adjacency_matrix": [[168, 208], ["sum", "numpy.sum", "enumerate", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "adjacency_matrix.flatten", "numpy.array", "numpy.sum", "numpy.sum", "numpy.sum", "str"], "methods", ["None"], ["", "def", "_check_validity_of_adjacency_matrix", "(", "self", ",", "adjacency_matrix", ")", ":", "\n", "        ", "\"\"\"\n        Checks whether a graph is a valid graph in the search space.\n        1. Checks that the graph is non empty\n        2. Checks that every node has the correct number of inputs\n        3. Checks that if a node has outgoing edges then it should also have incoming edges\n        4. Checks that input node is connected\n        5. Checks that the graph has no more than 9 edges\n        :param adjacency_matrix:\n        :return:\n        \"\"\"", "\n", "# Check that the graph contains nodes", "\n", "num_intermediate_nodes", "=", "sum", "(", "np", ".", "array", "(", "np", ".", "sum", "(", "adjacency_matrix", ",", "axis", "=", "1", ")", ">", "0", ",", "dtype", "=", "int", ")", "[", "1", ":", "-", "1", "]", ")", "\n", "if", "num_intermediate_nodes", "==", "0", ":", "\n", "            ", "return", "False", "\n", "\n", "# Check that every node has exactly the right number of inputs", "\n", "", "col_sums", "=", "np", ".", "sum", "(", "adjacency_matrix", "[", ":", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "for", "col_idx", ",", "col_sum", "in", "enumerate", "(", "col_sums", ")", ":", "\n", "            ", "if", "col_sum", ">", "0", ":", "\n", "                ", "if", "col_sum", "!=", "self", ".", "num_parents_per_node", "[", "str", "(", "col_idx", ")", "]", ":", "\n", "                    ", "return", "False", "\n", "\n", "# Check that if a node has outputs then it should also have incoming edges (apart from zero)", "\n", "", "", "", "col_sums", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "adjacency_matrix", ",", "axis", "=", "0", ")", ">", "0", ")", "\n", "row_sums", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "adjacency_matrix", ",", "axis", "=", "1", ")", ">", "0", ")", "\n", "if", "col_sums", "!=", "row_sums", ":", "\n", "            ", "return", "False", "\n", "\n", "# Check that the input node is always connected. Otherwise the graph is disconnected.", "\n", "", "row_sum", "=", "np", ".", "sum", "(", "adjacency_matrix", ",", "axis", "=", "1", ")", "\n", "if", "row_sum", "[", "0", "]", "==", "0", ":", "\n", "            ", "return", "False", "\n", "\n", "# Check that the graph returned has no more than 9 edges.", "\n", "", "num_edges", "=", "np", ".", "sum", "(", "adjacency_matrix", ".", "flatten", "(", ")", ")", "\n", "if", "num_edges", ">", "9", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.parent_combinations": [[15, 20], ["list", "itertools.combinations", "list", "range", "int"], "function", ["None"], ["def", "parent_combinations", "(", "node", ",", "num_parents", ")", ":", "\n", "    ", "if", "node", "==", "1", "and", "num_parents", "==", "1", ":", "\n", "        ", "return", "[", "(", "0", ",", ")", "]", "\n", "", "else", ":", "\n", "        ", "return", "list", "(", "itertools", ".", "combinations", "(", "list", "(", "range", "(", "int", "(", "node", ")", ")", ")", ",", "num_parents", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.__init__": [[12, 34], ["nasbench_analysis.search_spaces.search_space.SearchSpace.__init__", "sum", "ValueError", "search_space_3.SearchSpace3.num_parents_per_node.values"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "search_space_number", "=", "3", "\n", "self", ".", "num_intermediate_nodes", "=", "5", "\n", "super", "(", "SearchSpace3", ",", "self", ")", ".", "__init__", "(", "search_space_number", "=", "self", ".", "search_space_number", ",", "\n", "num_intermediate_nodes", "=", "self", ".", "num_intermediate_nodes", ")", "\n", "\"\"\"\n        SEARCH SPACE 3\n        \"\"\"", "\n", "self", ".", "num_parents_per_node", "=", "{", "\n", "'0'", ":", "0", ",", "\n", "'1'", ":", "1", ",", "\n", "'2'", ":", "1", ",", "\n", "'3'", ":", "1", ",", "\n", "'4'", ":", "2", ",", "\n", "'5'", ":", "2", ",", "\n", "'6'", ":", "2", "\n", "}", "\n", "if", "sum", "(", "self", ".", "num_parents_per_node", ".", "values", "(", ")", ")", ">", "9", ":", "\n", "            ", "raise", "ValueError", "(", "'Each nasbench cell has at most 9 edges.'", ")", "\n", "\n", "", "self", ".", "test_min_error", "=", "0.05338543653488159", "\n", "self", ".", "valid_min_error", "=", "0.04847759008407593", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.create_nasbench_adjacency_matrix": [[35, 39], ["search_space_3.SearchSpace3._create_adjacency_matrix", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._create_adjacency_matrix"], ["", "def", "create_nasbench_adjacency_matrix", "(", "self", ",", "parents", ",", "**", "kwargs", ")", ":", "\n", "# Create nasbench compatible adjacency matrix", "\n", "        ", "adjacency_matrix", "=", "self", ".", "_create_adjacency_matrix", "(", "parents", ",", "adjacency_matrix", "=", "np", ".", "zeros", "(", "[", "7", ",", "7", "]", ")", ",", "node", "=", "OUTPUT_NODE", ")", "\n", "return", "adjacency_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.create_nasbench_adjacency_matrix_with_loose_ends": [[40, 42], ["search_space_3.SearchSpace3._create_adjacency_matrix_with_loose_ends"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._create_adjacency_matrix_with_loose_ends"], ["", "def", "create_nasbench_adjacency_matrix_with_loose_ends", "(", "self", ",", "parents", ")", ":", "\n", "        ", "return", "self", ".", "_create_adjacency_matrix_with_loose_ends", "(", "parents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.generate_adjacency_matrix_without_loose_ends": [[43, 46], ["search_space_3.SearchSpace3._generate_adjacency_matrix", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace._generate_adjacency_matrix"], ["", "def", "generate_adjacency_matrix_without_loose_ends", "(", "self", ")", ":", "\n", "        ", "for", "adjacency_matrix", "in", "self", ".", "_generate_adjacency_matrix", "(", "adjacency_matrix", "=", "np", ".", "zeros", "(", "[", "7", ",", "7", "]", ")", ",", "node", "=", "OUTPUT_NODE", ")", ":", "\n", "            ", "yield", "adjacency_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.generate_with_loose_ends": [[47, 62], ["itertools.product", "search_space_3.SearchSpace3.create_nasbench_adjacency_matrix_with_loose_ends", "itertools.combinations", "list", "search_space_3.SearchSpace3.num_parents_per_node.items", "range", "int"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.create_nasbench_adjacency_matrix_with_loose_ends"], ["", "", "def", "generate_with_loose_ends", "(", "self", ")", ":", "\n", "        ", "for", "parent_node_2", ",", "parent_node_3", ",", "parent_node_4", ",", "parent_node_5", ",", "output_parents", "in", "itertools", ".", "product", "(", "\n", "*", "[", "itertools", ".", "combinations", "(", "list", "(", "range", "(", "int", "(", "node", ")", ")", ")", ",", "num_parents", ")", "for", "node", ",", "num_parents", "in", "\n", "self", ".", "num_parents_per_node", ".", "items", "(", ")", "]", "[", "2", ":", "]", ")", ":", "\n", "            ", "parents", "=", "{", "\n", "'0'", ":", "[", "]", ",", "\n", "'1'", ":", "[", "0", "]", ",", "\n", "'2'", ":", "parent_node_2", ",", "\n", "'3'", ":", "parent_node_3", ",", "\n", "'4'", ":", "parent_node_4", ",", "\n", "'5'", ":", "parent_node_5", ",", "\n", "'6'", ":", "output_parents", "\n", "}", "\n", "adjacency_matrix", "=", "self", ".", "create_nasbench_adjacency_matrix_with_loose_ends", "(", "parents", ")", "\n", "yield", "adjacency_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.objective_function": [[63, 70], ["super().convert_config_to_nasbench_format", "adjacency_matrix.astype().tolist", "nasbench.api.ModelSpec", "nasbench.query", "adjacency_matrix.astype"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.convert_config_to_nasbench_format", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query"], ["", "", "def", "objective_function", "(", "self", ",", "nasbench", ",", "config", ",", "budget", "=", "108", ")", ":", "\n", "        ", "adjacency_matrix", ",", "node_list", "=", "super", "(", "SearchSpace3", ",", "self", ")", ".", "convert_config_to_nasbench_format", "(", "config", ")", "\n", "node_list", "=", "[", "INPUT", ",", "*", "node_list", ",", "OUTPUT", "]", "\n", "adjacency_list", "=", "adjacency_matrix", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "adjacency_list", ",", "ops", "=", "node_list", ")", "\n", "nasbench_data", "=", "nasbench", ".", "query", "(", "model_spec", ",", "epochs", "=", "budget", ")", "\n", "return", "nasbench_data", "[", "'validation_accuracy'", "]", ",", "nasbench_data", "[", "'training_time'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.analysis": [[72, 131], ["search_space_3.SearchSpace3", "SearchSpace3.sample", "SearchSpace3.get_configuration_space", "nasbench_analysis.utils.NasbenchWrapper", "search_space_3.SearchSpace3.objective_function", "SearchSpace3.generate_search_space_without_loose_ends", "print", "matplotlib.figure", "matplotlib.title", "matplotlib.hist", "matplotlib.gca", "plt.gca.set_xscale", "plt.gca.set_yscale", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.tight_layout", "matplotlib.xlim", "matplotlib.savefig", "matplotlib.show", "matplotlib.figure", "matplotlib.title", "matplotlib.hist", "matplotlib.gca", "plt.gca.set_xscale", "plt.gca.set_yscale", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.tight_layout", "matplotlib.xlim", "matplotlib.savefig", "matplotlib.show", "print", "search_space_3.get_configuration_space.sample_configuration", "nasbench_analysis.utils.NasbenchWrapper.query", "min", "min", "test_error.append", "valid_error.append", "len", "len", "int", "int", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.sample", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.get_configuration_space", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space_3.SearchSpace3.objective_function", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.generate_search_space_without_loose_ends", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query"], ["", "", "def", "analysis", "(", ")", ":", "\n", "    ", "search_space_3", "=", "SearchSpace3", "(", ")", "\n", "search_space_3", ".", "sample", "(", "with_loose_ends", "=", "True", ")", "\n", "\n", "cs", "=", "search_space_3", ".", "get_configuration_space", "(", ")", "\n", "\n", "# Load NASBench", "\n", "nasbench", "=", "NasbenchWrapper", "(", "'../nasbench_data/108_e/nasbench_full.tfrecord'", ")", "\n", "search_space_3", ".", "objective_function", "(", "nasbench", ",", "cs", ".", "sample_configuration", "(", ")", ")", "\n", "\n", "test_error", "=", "[", "]", "\n", "valid_error", "=", "[", "]", "\n", "\n", "'''\n    for i in range(10000):\n        adjacency_matrix, node_list = search_space_3.sample_with_loose_ends()\n        adjacency_list = adjacency_matrix.astype(np.int).tolist()\n        node_list = [INPUT, *node_list, OUTPUT]\n        model_spec = api.ModelSpec(matrix=adjacency_list, ops=node_list)\n        nasbench.query(model_spec)\n    '''", "\n", "for", "adjacency_matrix", ",", "ops", ",", "model_spec", "in", "search_space_3", ".", "generate_search_space_without_loose_ends", "(", ")", ":", "\n", "# Query NASBench", "\n", "        ", "data", "=", "nasbench", ".", "query", "(", "model_spec", ")", "\n", "for", "item", "in", "data", ":", "\n", "            ", "test_error", ".", "append", "(", "1", "-", "item", "[", "'test_accuracy'", "]", ")", "\n", "valid_error", ".", "append", "(", "1", "-", "item", "[", "'validation_accuracy'", "]", ")", "\n", "\n", "", "", "print", "(", "'Number of architectures'", ",", "len", "(", "test_error", ")", "/", "len", "(", "data", ")", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "\n", "'Distribution of test error in search space (no. architectures {})'", ".", "format", "(", "int", "(", "len", "(", "test_error", ")", "/", "len", "(", "data", ")", ")", ")", ")", "\n", "plt", ".", "hist", "(", "test_error", ",", "bins", "=", "800", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xscale", "(", "'log'", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "plt", ".", "xlabel", "(", "'Test error'", ")", "\n", "plt", ".", "grid", "(", "True", ",", "which", "=", "\"both\"", ",", "ls", "=", "\"-\"", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "0.3", ")", "\n", "plt", ".", "savefig", "(", "'nasbench_analysis/search_spaces/export/search_space_3/test_error_distribution.pdf'", ",", "dpi", "=", "600", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Distribution of validation error in search space (no. architectures {})'", ".", "format", "(", "\n", "int", "(", "len", "(", "valid_error", ")", "/", "len", "(", "data", ")", ")", ")", ")", "\n", "plt", ".", "hist", "(", "valid_error", ",", "bins", "=", "800", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xscale", "(", "'log'", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "plt", ".", "xlabel", "(", "'Validation error'", ")", "\n", "plt", ".", "grid", "(", "True", ",", "which", "=", "\"both\"", ",", "ls", "=", "\"-\"", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "0.3", ")", "\n", "plt", ".", "savefig", "(", "'nasbench_analysis/search_spaces/export/search_space_3/valid_error_distribution.pdf'", ",", "dpi", "=", "600", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "print", "(", "'min test_error'", ",", "min", "(", "test_error", ")", ",", "'min valid_error'", ",", "min", "(", "valid_error", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.__init__": [[15, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "        ", "self", ".", "network_momentum", "=", "args", ".", "momentum", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "weight_decay", "=", "args", ".", "arch_weight_decay", "\n", "self", ".", "hessian", "=", "None", "\n", "self", ".", "grads", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer._compute_unrolled_model": [[23, 38], ["analyze.Analyzer.model._loss", "analyze.Analyzer._construct_model_from_theta", "analyze._concat", "_concat().mul_", "theta.sub", "analyze.Analyzer.model.parameters", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "analyze._concat", "analyze._concat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "analyze.Analyzer.model.parameters", "analyze.Analyzer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._construct_model_from_theta", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat"], ["", "def", "_compute_unrolled_model", "(", "self", ",", "input", ",", "target", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "        ", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "theta", "=", "_concat", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "data", "\n", "try", ":", "\n", "            ", "moment", "=", "_concat", "(", "network_optimizer", ".", "state", "[", "v", "]", "[", "'momentum_buffer'", "]", "for", "\n", "v", "in", "\n", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "mul_", "(", "self", ".", "network_momentum", ")", "\n", "", "except", ":", "\n", "            ", "moment", "=", "torch", ".", "zeros_like", "(", "theta", ")", "\n", "", "dtheta", "=", "_concat", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "\n", "self", ".", "model", ".", "parameters", "(", ")", ")", ")", ".", "data", "+", "self", ".", "network_weight_decay", "*", "theta", "\n", "\n", "unrolled_model", "=", "self", ".", "_construct_model_from_theta", "(", "\n", "theta", ".", "sub", "(", "eta", ",", "moment", "+", "dtheta", ")", ")", "\n", "return", "unrolled_model", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer._backward_step": [[39, 42], ["analyze.Analyzer.model._loss", "analyze.Analyzer.backward"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss"], ["", "def", "_backward_step", "(", "self", ",", "input_valid", ",", "target_valid", ",", "create_graph", ")", ":", "\n", "        ", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "loss", ".", "backward", "(", "create_graph", "=", "create_graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer._backward_step_unrolled": [[43, 65], ["analyze.Analyzer._compute_unrolled_model", "analyze.Analyzer._loss", "analyze.Analyzer._loss.backward", "analyze.Analyzer._hessian_vector_product", "zip", "zip", "g.data.sub_", "analyze.Analyzer.model.arch_parameters", "analyze.Analyzer.arch_parameters", "analyze.Analyzer.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "v.grad.data.copy_"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._compute_unrolled_model", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._hessian_vector_product", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["", "def", "_backward_step_unrolled", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "\n", "target_valid", ",", "eta", ",", "network_optimizer", ",", "\n", "create_graph", ")", ":", "\n", "        ", "unrolled_model", "=", "self", ".", "_compute_unrolled_model", "(", "input_train", ",", "\n", "target_train", ",", "eta", ",", "\n", "network_optimizer", ")", "\n", "unrolled_loss", "=", "unrolled_model", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "\n", "unrolled_loss", ".", "backward", "(", "create_graph", "=", "create_graph", ")", "\n", "dalpha", "=", "[", "v", ".", "grad", "for", "v", "in", "unrolled_model", ".", "arch_parameters", "(", ")", "]", "\n", "vector", "=", "[", "v", ".", "grad", ".", "data", "for", "v", "in", "unrolled_model", ".", "parameters", "(", ")", "]", "\n", "implicit_grads", "=", "self", ".", "_hessian_vector_product", "(", "\n", "vector", ",", "input_train", ",", "target_train", ")", "\n", "\n", "for", "g", ",", "ig", "in", "zip", "(", "dalpha", ",", "implicit_grads", ")", ":", "\n", "            ", "g", ".", "data", ".", "sub_", "(", "eta", ",", "ig", ".", "data", ")", "\n", "\n", "", "for", "v", ",", "g", "in", "zip", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "dalpha", ")", ":", "\n", "            ", "if", "v", ".", "grad", "is", "None", ":", "\n", "                ", "v", ".", "grad", "=", "Variable", "(", "g", ".", "data", ")", "\n", "", "else", ":", "\n", "                ", "v", ".", "grad", ".", "data", ".", "copy_", "(", "g", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer._construct_model_from_theta": [[66, 80], ["analyze.Analyzer.model.new", "analyze.Analyzer.model.state_dict", "analyze.Analyzer.model.named_parameters", "analyze.Analyzer.update", "analyze.Analyzer.load_state_dict", "analyze.Analyzer.cuda", "numpy.prod", "theta[].view", "len", "v.size", "v.size"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.PCDARTSNetwork.new", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["", "", "", "def", "_construct_model_from_theta", "(", "self", ",", "theta", ")", ":", "\n", "        ", "model_new", "=", "self", ".", "model", ".", "new", "(", ")", "\n", "model_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "\n", "params", ",", "offset", "=", "{", "}", ",", "0", "\n", "for", "k", ",", "v", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "v_length", "=", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "\n", "params", "[", "k", "]", "=", "theta", "[", "offset", ":", "offset", "+", "v_length", "]", ".", "view", "(", "v", ".", "size", "(", ")", ")", "\n", "offset", "+=", "v_length", "\n", "\n", "", "assert", "offset", "==", "len", "(", "theta", ")", "\n", "model_dict", ".", "update", "(", "params", ")", "\n", "model_new", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "model_new", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer._hessian_vector_product": [[81, 97], ["zip", "analyze.Analyzer.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "analyze.Analyzer.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "_concat().norm", "analyze.Analyzer.model.parameters", "p.data.add_", "analyze.Analyzer.model.arch_parameters", "analyze.Analyzer.model.parameters", "p.data.sub_", "analyze.Analyzer.model.arch_parameters", "analyze.Analyzer.model.parameters", "p.data.add_", "zip", "analyze._concat"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat"], ["", "def", "_hessian_vector_product", "(", "self", ",", "vector", ",", "input", ",", "target", ",", "r", "=", "1e-2", ")", ":", "\n", "        ", "R", "=", "r", "/", "_concat", "(", "vector", ")", ".", "norm", "(", ")", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "            ", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "grads_p", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "            ", "p", ".", "data", ".", "sub_", "(", "2", "*", "R", ",", "v", ")", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "grads_n", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "            ", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "\n", "", "return", "[", "(", "x", "-", "y", ")", ".", "div_", "(", "2", "*", "R", ")", "for", "x", ",", "y", "in", "zip", "(", "grads_p", ",", "grads_n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.compute_dw": [[98, 112], ["analyze.Analyzer.zero_grads", "analyze.Analyzer.zero_grads", "analyze.Analyzer.model.parameters", "analyze.Analyzer.model.arch_parameters", "analyze.Analyzer._backward_step_unrolled", "analyze.Analyzer._backward_step", "analyze.Analyzer.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.zero_grads", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.zero_grads", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._backward_step_unrolled", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._backward_step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["", "def", "compute_dw", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "\n", "eta", ",", "network_optimizer", ",", "unrolled", ")", ":", "\n", "        ", "self", ".", "zero_grads", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "zero_grads", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "if", "unrolled", ":", "\n", "            ", "self", ".", "_backward_step_unrolled", "(", "input_train", ",", "target_train", ",", "\n", "input_valid", ",", "target_valid", ",", "eta", ",", "\n", "network_optimizer", ",", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_backward_step", "(", "input_valid", ",", "target_valid", ",", "False", ")", "\n", "\n", "", "self", ".", "grads", "=", "[", "v", ".", "grad", "+", "self", ".", "weight_decay", "*", "\n", "v", "for", "v", "in", "self", ".", "model", ".", "arch_parameters", "(", ")", "]", "\n", "return", "self", ".", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.compute_Hw": [[113, 128], ["analyze.Analyzer.zero_grads", "analyze.Analyzer.zero_grads", "analyze.Analyzer.model._loss", "analyze.Analyzer._hessian", "analyze.Analyzer.model.parameters", "analyze.Analyzer.model.arch_parameters", "analyze.Analyzer.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.zero_grads", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.zero_grads", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer._hessian", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["", "def", "compute_Hw", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "\n", "eta", ",", "network_optimizer", ",", "unrolled", ")", ":", "\n", "        ", "self", ".", "zero_grads", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "zero_grads", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "#if unrolled:", "\n", "#    self._backward_step_unrolled(input_train, target_train,", "\n", "#                                 input_valid, target_valid, eta,", "\n", "#                                 network_optimizer, True)", "\n", "#else:", "\n", "#    self._backward_step(input_valid, target_valid, True)", "\n", "\n", "#self.grads = [v.grad + self.weight_decay*v for v in self.model.arch_parameters()]", "\n", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "self", ".", "hessian", "=", "self", ".", "_hessian", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "return", "self", ".", "hessian", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.compute_eigenvalues": [[129, 134], ["numpy.linalg.eigvals", "analyze.Analyzer.hessian.cpu().data.numpy", "analyze.Analyzer.hessian.cpu"], "methods", ["None"], ["", "def", "compute_eigenvalues", "(", "self", ")", ":", "\n", "#hessian = self.compute_Hw(input, target)", "\n", "        ", "if", "self", ".", "hessian", "is", "None", ":", "\n", "            ", "raise", "ValueError", "\n", "", "return", "eigvals", "(", "self", ".", "hessian", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.zero_grads": [[135, 140], ["p.grad.detach_", "p.grad.zero_"], "methods", ["None"], ["", "def", "zero_grads", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "for", "p", "in", "parameters", ":", "\n", "            ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                ", "p", ".", "grad", ".", "detach_", "(", ")", "\n", "p", ".", "grad", ".", "zero_", "(", ")", "\n", "#if p.grad.volatile:", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.gradient": [[146, 159], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "zip", "x.contiguous().view", "x.contiguous"], "methods", ["None"], ["", "", "", "def", "gradient", "(", "self", ",", "_outputs", ",", "_inputs", ",", "grad_outputs", "=", "None", ",", "retain_graph", "=", "None", ",", "\n", "create_graph", "=", "False", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "_inputs", ")", ":", "\n", "            ", "_inputs", "=", "[", "_inputs", "]", "\n", "", "else", ":", "\n", "            ", "_inputs", "=", "list", "(", "_inputs", ")", "\n", "", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "_outputs", ",", "_inputs", ",", "grad_outputs", ",", "\n", "allow_unused", "=", "True", ",", "\n", "retain_graph", "=", "retain_graph", ",", "\n", "create_graph", "=", "create_graph", ")", "\n", "grads", "=", "[", "x", "if", "x", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "grads", ",", "\n", "_inputs", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "x", "in", "grads", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer._hessian": [[160, 200], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "sum", "enumerate", "list", "torch.autograd.Variable().type_as", "torch.autograd.Variable().type_as", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "range", "p.numel", "grad.contiguous().view", "inp.numel", "torch.autograd.Variable().type_as.data[].add_", "torch.autograd.Variable", "torch.autograd.Variable", "inp.view", "torch.autograd.Variable().type_as", "torch.autograd.Variable().type_as", "torch.autograd.Variable().type_as.data[].add_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "grad.contiguous", "analyze.Analyzer.gradient", "sum", "torch.autograd.Variable().type_as.clone().type_as", "torch.autograd.Variable", "torch.autograd.Variable", "x.numel", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable().type_as.clone", "torch.autograd.Variable().type_as.clone().type_as", "torch.autograd.Variable().type_as.clone"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.gradient"], ["", "def", "_hessian", "(", "self", ",", "outputs", ",", "inputs", ",", "out", "=", "None", ",", "allow_unused", "=", "False", ",", "\n", "create_graph", "=", "False", ")", ":", "\n", "#assert outputs.data.ndimension() == 1", "\n", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "            ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "list", "(", "inputs", ")", "\n", "\n", "", "n", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "inputs", ")", "\n", "if", "out", "is", "None", ":", "\n", "            ", "out", "=", "Variable", "(", "torch", ".", "zeros", "(", "n", ",", "n", ")", ")", ".", "type_as", "(", "outputs", ")", "\n", "\n", "", "ai", "=", "0", "\n", "for", "i", ",", "inp", "in", "enumerate", "(", "inputs", ")", ":", "\n", "            ", "[", "grad", "]", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", ",", "inp", ",", "create_graph", "=", "True", ",", "\n", "allow_unused", "=", "allow_unused", ")", "\n", "grad", "=", "grad", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "+", "self", ".", "weight_decay", "*", "inp", ".", "view", "(", "-", "1", ")", "\n", "#grad = outputs[i].contiguous().view(-1)", "\n", "\n", "for", "j", "in", "range", "(", "inp", ".", "numel", "(", ")", ")", ":", "\n", "# print('(i, j): ', i, j)", "\n", "                ", "if", "grad", "[", "j", "]", ".", "requires_grad", ":", "\n", "                    ", "row", "=", "self", ".", "gradient", "(", "\n", "grad", "[", "j", "]", ",", "inputs", "[", "i", ":", "]", ",", "retain_graph", "=", "True", ")", "[", "j", ":", "]", "\n", "", "else", ":", "\n", "                    ", "n", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "inputs", "[", "i", ":", "]", ")", "-", "j", "\n", "row", "=", "Variable", "(", "torch", ".", "zeros", "(", "n", ")", ")", ".", "type_as", "(", "grad", "[", "j", "]", ")", "\n", "#row = grad[j].new_zeros(sum(x.numel() for x in inputs[i:]) - j)", "\n", "\n", "", "out", ".", "data", "[", "ai", ",", "ai", ":", "]", ".", "add_", "(", "\n", "row", ".", "clone", "(", ")", ".", "type_as", "(", "out", ")", ".", "data", ")", "# ai's row", "\n", "if", "ai", "+", "1", "<", "n", ":", "\n", "# ai's column", "\n", "                    ", "out", ".", "data", "[", "ai", "+", "1", ":", ",", "\n", "ai", "]", ".", "add_", "(", "row", ".", "clone", "(", ")", ".", "type_as", "(", "out", ")", ".", "data", "[", "1", ":", "]", ")", "\n", "", "del", "row", "\n", "ai", "+=", "1", "\n", "", "del", "grad", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze._concat": [[9, 11], ["torch.cat", "torch.cat", "x.view"], "function", ["None"], ["def", "_concat", "(", "xs", ")", ":", "\n", "  ", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.utils.Model.__init__": [[40, 46], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.utils.Model.update_data": [[47, 53], ["None"], "methods", ["None"], ["\n", "if", "epochs", "not", "in", "self", ".", "valid_epochs", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.utils.Model.query_nasbench": [[54, 72], ["ConfigSpace.Configuration", "search_space.convert_config_to_nasbench_format", "adjacency_matrix.astype().tolist", "api.ModelSpec", "nasbench.query", "Architecture", "search_space.get_configuration_space", "type", "adjacency_matrix.astype"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.convert_config_to_nasbench_format", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.get_configuration_space"], ["            ", "raise", "api", ".", "OutOfDomainError", "(", "'invalid number of epochs, must be one of %s'", "\n", "%", "self", ".", "valid_epochs", ")", "\n", "\n", "", "fixed_stat", ",", "computed_stat", "=", "self", ".", "get_metrics_from_spec", "(", "model_spec", ")", "\n", "trainings", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "config", "[", "'num_repeats'", "]", ")", ":", "\n", "            ", "computed_stat_at_epoch", "=", "computed_stat", "[", "epochs", "]", "[", "index", "]", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "'module_adjacency'", "]", "=", "fixed_stat", "[", "'module_adjacency'", "]", "\n", "data", "[", "'module_operations'", "]", "=", "fixed_stat", "[", "'module_operations'", "]", "\n", "data", "[", "'trainable_parameters'", "]", "=", "fixed_stat", "[", "'trainable_parameters'", "]", "\n", "\n", "if", "stop_halfway", ":", "\n", "                ", "data", "[", "'training_time'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_test_accuracy'", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.__init__": [[13, 20], ["optimizers.darts.model_search.Network.__init__", "w.data.clone", "model_search.NASPNetwork.saved_params.append"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "output_weights", ",", "search_space", ",", "steps", "=", "4", ")", ":", "\n", "        ", "super", "(", "NASPNetwork", ",", "self", ")", ".", "__init__", "(", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "output_weights", ",", "\n", "search_space", ",", "steps", "=", "steps", ")", "\n", "self", ".", "saved_params", "=", "[", "]", "\n", "for", "w", "in", "self", ".", "_arch_parameters", ":", "\n", "            ", "temp", "=", "w", ".", "data", ".", "clone", "(", ")", "\n", "self", ".", "saved_params", ".", "append", "(", "temp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork._initialize_alphas": [[21, 44], ["len", "torch.autograd.Variable", "torch.autograd.Variable", "type", "torch.autograd.Variable", "range", "torch.ones().cuda", "torch.randn().cuda", "torch.ones().cuda", "torch.randn().cuda", "torch.ones().cuda", "torch.randn().cuda", "torch.ones", "torch.randn", "torch.ones", "torch.randn", "torch.ones", "torch.randn"], "methods", ["None"], ["", "", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "# Initializes the weights for the mixed ops.", "\n", "        ", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "self", ".", "alphas_mixed_op", "=", "Variable", "(", "torch", ".", "ones", "(", "self", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", "/", "2", "+", "\n", "1e-3", "*", "torch", ".", "randn", "(", "self", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# For the alphas on the output node initialize a weighting vector for all choice blocks and the input edge.", "\n", "self", ".", "alphas_output", "=", "Variable", "(", "torch", ".", "ones", "(", "1", ",", "self", ".", "_steps", "+", "1", ")", ".", "cuda", "(", ")", "/", "2", "+", "\n", "1e-3", "*", "torch", ".", "randn", "(", "1", ",", "self", ".", "_steps", "+", "1", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "if", "type", "(", "self", ".", "search_space", ")", "==", "SearchSpace1", ":", "\n", "            ", "begin", "=", "3", "\n", "", "else", ":", "\n", "            ", "begin", "=", "2", "\n", "# Initialize the weights for the inputs to each choice block.", "\n", "", "self", ".", "alphas_inputs", "=", "[", "Variable", "(", "torch", ".", "ones", "(", "1", ",", "n_inputs", ")", ".", "cuda", "(", ")", "/", "2", "+", "1e-3", "*", "torch", ".", "randn", "(", "1", ",", "n_inputs", ")", ".", "cuda", "(", ")", ",", "\n", "requires_grad", "=", "True", ")", "for", "n_inputs", "in", "range", "(", "begin", ",", "self", ".", "_steps", "+", "1", ")", "]", "\n", "\n", "# Total architecture parameters", "\n", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "alphas_mixed_op", ",", "\n", "self", ".", "alphas_output", ",", "\n", "*", "self", ".", "alphas_inputs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.save_params": [[46, 49], ["enumerate", "model_search.NASPNetwork.saved_params[].copy_"], "methods", ["None"], ["", "def", "save_params", "(", "self", ")", ":", "\n", "        ", "for", "index", ",", "value", "in", "enumerate", "(", "self", ".", "_arch_parameters", ")", ":", "\n", "            ", "self", ".", "saved_params", "[", "index", "]", ".", "copy_", "(", "value", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.clip": [[50, 57], ["nn.Hardtanh", "range", "range", "len", "clip_scale.append", "len", "nn.Hardtanh.", "torch.autograd.Variable"], "methods", ["None"], ["", "", "def", "clip", "(", "self", ")", ":", "\n", "        ", "clip_scale", "=", "[", "]", "\n", "m", "=", "nn", ".", "Hardtanh", "(", "0", ",", "1", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "_arch_parameters", ")", ")", ":", "\n", "            ", "clip_scale", ".", "append", "(", "m", "(", "Variable", "(", "self", ".", "_arch_parameters", "[", "index", "]", ".", "data", ")", ")", ")", "\n", "", "for", "index", "in", "range", "(", "len", "(", "self", ".", "_arch_parameters", ")", ")", ":", "\n", "            ", "self", ".", "_arch_parameters", "[", "index", "]", ".", "data", "=", "clip_scale", "[", "index", "]", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.binarization": [[58, 68], ["model_search.NASPNetwork.save_params", "model_search.NASPNetwork._arch_parameters[].size", "model_search.NASPNetwork.proximal_step", "numpy.random.rand", "numpy.random.choice", "model_search.NASPNetwork._arch_parameters[].data.cpu().numpy().argmax", "range", "model_search.NASPNetwork._arch_parameters[].data.cpu().numpy", "model_search.NASPNetwork._arch_parameters[].data.cpu"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.save_params", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.proximal_step"], ["", "", "def", "binarization", "(", "self", ",", "e_greedy", "=", "0", ")", ":", "\n", "        ", "self", ".", "save_params", "(", ")", "\n", "# Use binarize only for the mixop, because the rest very quickly gave exploding gradients", "\n", "m", ",", "n", "=", "self", ".", "_arch_parameters", "[", "0", "]", ".", "size", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "e_greedy", ":", "\n", "            ", "maxIndexs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n", ")", ",", "m", ")", "\n", "", "else", ":", "\n", "            ", "maxIndexs", "=", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "proximal_step", "(", "\n", "self", ".", "_arch_parameters", "[", "0", "]", ",", "maxIndexs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.restore": [[69, 71], ["None"], "methods", ["None"], ["", "def", "restore", "(", "self", ")", ":", "\n", "        ", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "saved_params", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.proximal_step": [[72, 84], ["var.data.cpu().numpy", "range", "torch.Tensor().cuda", "range", "var.data.cpu", "torch.Tensor", "alphas.append", "[].copy"], "methods", ["None"], ["", "def", "proximal_step", "(", "self", ",", "var", ",", "maxIndexs", "=", "None", ")", ":", "\n", "        ", "values", "=", "var", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "m", ",", "n", "=", "values", ".", "shape", "\n", "alphas", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "j", "==", "maxIndexs", "[", "i", "]", ":", "\n", "                    ", "alphas", ".", "append", "(", "values", "[", "i", "]", "[", "j", "]", ".", "copy", "(", ")", ")", "\n", "values", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "values", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "", "", "return", "torch", ".", "Tensor", "(", "values", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.train_search.main": [[94, 217], ["torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "optimizers.nasp.model_search.NASPNetwork", "model.cuda.cuda", "logging.info", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "optimizers.darts.utils._data_transforms_cifar10", "torchvision.CIFAR10", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "optimizers.analyze.Analyzer", "optimizers.nasp.architect.ArchitectNASP", "range", "writer.close", "nasbench_analysis.search_spaces.search_space_1.SearchSpace1", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "optimizers.darts.utils.count_parameters_in_MB", "model.cuda.parameters", "range", "numpy.floor", "float", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "logging.info", "os.path.join", "train_search.train", "logging.info", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "train_search.infer", "logging.info", "writer.add_scalar", "writer.add_scalar", "optimizers.darts.utils.save", "nasbench_analysis.search_spaces.search_space_2.SearchSpace2", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "open", "model.cuda.arch_parameters", "pickle.dump", "print", "os.path.join", "logging.info", "naseval.eval_one_shot_model", "numpy.random.choice", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "nasbench_analysis.search_spaces.search_space_3.SearchSpace3", "ValueError", "numpy_tensor_list.append", "list", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "tensor.detach().cpu().numpy", "range", "tensor.detach().cpu", "tensor.detach"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.infer", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.eval_one_shot_model"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "not", "'debug'", "in", "args", ".", "save", ":", "\n", "        ", "from", "nasbench_analysis", "import", "eval_darts_one_shot_model_in_nasbench", "as", "naseval", "\n", "# Select the search space to search in", "\n", "", "if", "args", ".", "search_space", "==", "'1'", ":", "\n", "        ", "search_space", "=", "SearchSpace1", "(", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'2'", ":", "\n", "        ", "search_space", "=", "SearchSpace2", "(", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'3'", ":", "\n", "        ", "search_space", "=", "SearchSpace3", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown search space'", ")", "\n", "\n", "", "torch", ".", "set_num_threads", "(", "3", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "criterion", ",", "\n", "output_weights", "=", "args", ".", "output_weights", ",", "steps", "=", "search_space", ".", "num_intermediate_nodes", ",", "\n", "search_space", "=", "search_space", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "\n", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "        ", "split", "=", "args", ".", "batch_size", "\n", "num_train", "=", "2", "*", "args", ".", "batch_size", "\n", "\n", "", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ")", "\n", "\n", "analyzer", "=", "Analyzer", "(", "model", ",", "args", ")", "\n", "architect", "=", "Architect", "(", "model", ",", "args", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# increase the cutout probability linearly throughout search", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", "=", "args", ".", "cutout_prob", "*", "epoch", "/", "(", "args", ".", "epochs", "-", "1", ")", "\n", "logging", ".", "info", "(", "'epoch %d lr %e cutout_prob %e'", ",", "epoch", ",", "lr", ",", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", ")", "\n", "\n", "# Save the one shot model architecture weights for later analysis", "\n", "arch_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'one_shot_architecture_{}.obj'", ".", "format", "(", "epoch", ")", ")", "\n", "with", "open", "(", "arch_filename", ",", "'wb'", ")", "as", "filehandler", ":", "\n", "            ", "numpy_tensor_list", "=", "[", "]", "\n", "for", "tensor", "in", "model", ".", "arch_parameters", "(", ")", ":", "\n", "                ", "numpy_tensor_list", ".", "append", "(", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "pickle", ".", "dump", "(", "numpy_tensor_list", ",", "filehandler", ")", "\n", "\n", "# # Save the entire one-shot-model", "\n", "# filepath = os.path.join(args.save, 'one_shot_model_{}.obj'.format(epoch))", "\n", "# torch.save(model.state_dict(), filepath)", "\n", "\n", "", "for", "i", "in", "numpy_tensor_list", ":", "\n", "            ", "print", "(", "i", ")", "\n", "\n", "# training", "\n", "", "train_acc", ",", "train_obj", ",", "ev", "=", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "\n", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", "\n", "logging", ".", "info", "(", "'train_acc %f'", ",", "train_acc", ")", "\n", "logging", ".", "info", "(", "'eigenvalue %f'", ",", "ev", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/train'", ",", "train_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/train'", ",", "train_obj", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/eigenvalue'", ",", "ev", ",", "epoch", ")", "\n", "\n", "# validation", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'valid_acc %f'", ",", "valid_acc", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/valid'", ",", "valid_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/valid'", ",", "valid_obj", ",", "epoch", ")", "\n", "\n", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "\n", "if", "not", "'debug'", "in", "args", ".", "save", ":", "\n", "# benchmark", "\n", "            ", "logging", ".", "info", "(", "'STARTING EVALUATION'", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "naseval", ".", "eval_one_shot_model", "(", "\n", "config", "=", "args", ".", "__dict__", ",", "model", "=", "arch_filename", ")", "\n", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "3", ")", ")", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "np", ".", "mean", "(", "test", ")", ",", "np", ".", "mean", "(", "valid", ")", ",", "np", ".", "mean", "(", "runtime", ")", ",", "np", ".", "mean", "(", "params", ")", "\n", "logging", ".", "info", "(", "'TEST ERROR: %.3f | VALID ERROR: %.3f | RUNTIME: %f | PARAMS: %d'", "\n", "%", "(", "test", ",", "valid", ",", "runtime", ",", "params", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/test'", ",", "test", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/valid'", ",", "valid", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/runtime'", ",", "runtime", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/params'", ",", "params", ",", "epoch", ")", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.train_search.train": [[219, 287], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "enumerate", "copy.deepcopy", "next", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model.binarization", "analyzer.compute_Hw", "model.restore", "max", "numpy.linalg.norm", "model.train", "input.cuda.size", "input.cuda.cuda", "target.cuda.cuda", "input_search.cuda.cuda", "target_search.cuda.cuda", "optimizer.zero_grad", "model.binarization", "model", "criterion", "criterion.backward", "model.restore", "torch.utils.clip_grad_norm_", "optimizer.step", "model.clip", "optimizers.darts.utils.accuracy", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "iter", "numpy.linalg.eigvals", "next", "architect.step", "model.parameters", "criterion.data.item", "prec1.data.item", "prec5.data.item", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable", "analyzer.compute_Hw.cpu().data.numpy", "iter", "next", "analyzer.compute_Hw.cpu"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.binarization", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.compute_Hw", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.restore", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.binarization", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.restore", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step"], ["", "def", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# get a minibatch from the search queue with replacement", "\n", "try", ":", "\n", "            ", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "", "except", ":", "\n", "            ", "valid_queue_iter", "=", "iter", "(", "valid_queue", ")", "\n", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "\n", "", "input_search", "=", "input_search", ".", "cuda", "(", ")", "\n", "target_search", "=", "target_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Allow for warm starting of the one-shot model for more reliable architecture updates.", "\n", "if", "epoch", ">=", "args", ".", "warm_start_epochs", ":", "\n", "            ", "architect", ".", "step", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "lr", ",", "optimizer", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "binarization", "(", ")", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "model", ".", "restore", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "clip", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "                ", "break", "\n", "\n", "# analyze", "\n", "", "", "", "_data_loader", "=", "deepcopy", "(", "train_queue", ")", "\n", "input", ",", "target", "=", "next", "(", "iter", "(", "_data_loader", ")", ")", "\n", "\n", "input", "=", "Variable", "(", "input", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "model", ".", "binarization", "(", ")", "\n", "H", "=", "analyzer", ".", "compute_Hw", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "\n", "lr", ",", "optimizer", ",", "False", ")", "\n", "model", ".", "restore", "(", ")", "\n", "# g = analyzer.compute_dw(input, target, input_search, target_search,", "\n", "#                         lr, optimizer, False)", "\n", "# g = torch.cat([x.view(-1) for x in g])", "\n", "\n", "del", "_data_loader", "\n", "\n", "ev", "=", "max", "(", "LA", ".", "eigvals", "(", "H", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", ")", "\n", "ev", "=", "np", ".", "linalg", ".", "norm", "(", "ev", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "objs", ".", "avg", ",", "ev", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.train_search.infer": [[289, 316], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "model.eval", "model.binarization", "model.restore", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "model", "criterion", "optimizers.darts.utils.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "criterion.data.item", "prec1.data.item", "prec5.data.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.binarization", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.restore", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "binarization", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "                    ", "break", "\n", "", "", "", "", "model", ".", "restore", "(", ")", "\n", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.architect.ArchitectNASP.__init__": [[13, 20], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "architect.ArchitectNASP.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "        ", "self", ".", "network_momentum", "=", "args", ".", "momentum", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "arch_learning_rate", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "args", ".", "arch_weight_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.architect.ArchitectNASP.step": [[21, 25], ["architect.ArchitectNASP.optimizer.zero_grad", "architect.ArchitectNASP._backward_step", "architect.ArchitectNASP.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._backward_step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step"], ["", "def", "step", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "_backward_step", "(", "input_valid", ",", "target_valid", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.architect.ArchitectNASP._backward_step": [[26, 31], ["architect.ArchitectNASP.model.binarization", "architect.ArchitectNASP.model._loss", "architect.ArchitectNASP.backward", "architect.ArchitectNASP.model.restore"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.binarization", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.restore"], ["", "def", "_backward_step", "(", "self", ",", "input_valid", ",", "target_valid", ")", ":", "\n", "        ", "self", ".", "model", ".", "binarization", "(", ")", "\n", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "model", ".", "restore", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.architect._concat": [[7, 9], ["torch.cat", "torch.cat", "x.view"], "function", ["None"], ["def", "_concat", "(", "xs", ")", ":", "\n", "  ", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.pc_darts.model_search.MixedOpPCDARTS.__init__": [[32, 43], ["optimizers.darts.model_search.MixedOp.__init__", "nn.ModuleList", "model_search.MixedOpPCDARTS._ops.append"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["            ", "begin", "=", "3", "\n", "", "else", ":", "\n", "            ", "begin", "=", "2", "\n", "# Initialize the weights for the inputs to each choice block.", "\n", "", "self", ".", "alphas_inputs", "=", "[", "Variable", "(", "torch", ".", "ones", "(", "1", ",", "n_inputs", ")", ".", "cuda", "(", ")", "/", "2", "+", "1e-3", "*", "torch", ".", "randn", "(", "1", ",", "n_inputs", ")", ".", "cuda", "(", ")", ",", "\n", "requires_grad", "=", "True", ")", "for", "n_inputs", "in", "range", "(", "begin", ",", "self", ".", "_steps", "+", "1", ")", "]", "\n", "\n", "# Total architecture parameters", "\n", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "alphas_mixed_op", ",", "\n", "self", ".", "alphas_output", ",", "\n", "*", "self", ".", "alphas_inputs", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.pc_darts.model_search.MixedOpPCDARTS.forward": [[44, 53], ["sum", "torch.cat", "model_search.channel_shuffle", "op", "zip"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.channel_shuffle"], ["]", "\n", "\n", "", "def", "save_params", "(", "self", ")", ":", "\n", "        ", "for", "index", ",", "value", "in", "enumerate", "(", "self", ".", "_arch_parameters", ")", ":", "\n", "            ", "self", ".", "saved_params", "[", "index", "]", ".", "copy_", "(", "value", ".", "data", ")", "\n", "\n", "", "", "def", "clip", "(", "self", ")", ":", "\n", "        ", "clip_scale", "=", "[", "]", "\n", "m", "=", "nn", ".", "Hardtanh", "(", "0", ",", "1", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "_arch_parameters", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.pc_darts.model_search.ChoiceBlockPCDARTS.__init__": [[56, 60], ["optimizers.darts.model_search.ChoiceBlock.__init__", "model_search.MixedOpPCDARTS"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["            ", "self", ".", "_arch_parameters", "[", "index", "]", ".", "data", "=", "clip_scale", "[", "index", "]", ".", "data", "\n", "\n", "", "", "def", "binarization", "(", "self", ",", "e_greedy", "=", "0", ")", ":", "\n", "        ", "self", ".", "save_params", "(", ")", "\n", "# Use binarize only for the mixop, because the rest very quickly gave exploding gradients", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.pc_darts.model_search.CellPCDARTS.__init__": [[63, 71], ["optimizers.darts.model_search.Cell.__init__", "nn.ModuleList", "range", "model_search.ChoiceBlockPCDARTS", "model_search.CellPCDARTS._choice_blocks.append"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["            ", "maxIndexs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n", ")", ",", "m", ")", "\n", "", "else", ":", "\n", "            ", "maxIndexs", "=", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "proximal_step", "(", "\n", "self", ".", "_arch_parameters", "[", "0", "]", ",", "maxIndexs", ")", "\n", "\n", "", "def", "restore", "(", "self", ")", ":", "\n", "        ", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "saved_params", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.pc_darts.model_search.PCDARTSNetwork.__init__": [[74, 91], ["optimizers.darts.model_search.Network.__init__", "nn.ModuleList", "range", "model_search.CellPCDARTS"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["m", ",", "n", "=", "values", ".", "shape", "\n", "alphas", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "j", "==", "maxIndexs", "[", "i", "]", ":", "\n", "                    ", "alphas", ".", "append", "(", "values", "[", "i", "]", "[", "j", "]", ".", "copy", "(", ")", ")", "\n", "values", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "values", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "", "", "return", "torch", ".", "Tensor", "(", "values", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.pc_darts.model_search.PCDARTSNetwork.new": [[92, 99], ["PCDARTSNetwork().cuda", "zip", "PCDARTSNetwork().cuda.arch_parameters", "model_search.PCDARTSNetwork.arch_parameters", "x.data.copy_", "model_search.PCDARTSNetwork"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.pc_darts.model_search.channel_shuffle": [[6, 24], ["x.view.data.size", "x.view.view", "torch.transpose().contiguous", "x.view.view", "torch.transpose"], "function", ["None"], ["from", "optimizers", ".", "darts", ".", "model_search", "import", "Network", ",", "MixedOp", ",", "ChoiceBlock", ",", "Cell", "\n", "from", "optimizers", ".", "darts", ".", "operations", "import", "*", "\n", "from", "optimizers", ".", "darts", ".", "genotypes", "import", "PRIMITIVES", "\n", "\n", "\n", "class", "NASPNetwork", "(", "Network", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "output_weights", ",", "search_space", ",", "steps", "=", "4", ")", ":", "\n", "        ", "super", "(", "NASPNetwork", ",", "self", ")", ".", "__init__", "(", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "output_weights", ",", "\n", "search_space", ",", "steps", "=", "steps", ")", "\n", "self", ".", "saved_params", "=", "[", "]", "\n", "for", "w", "in", "self", ".", "_arch_parameters", ":", "\n", "            ", "temp", "=", "w", ".", "data", ".", "clone", "(", ")", "\n", "self", ".", "saved_params", ".", "append", "(", "temp", ")", "\n", "\n", "", "", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "# Initializes the weights for the mixed ops.", "\n", "        ", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "self", ".", "alphas_mixed_op", "=", "Variable", "(", "torch", ".", "ones", "(", "self", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", "/", "2", "+", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.pc_darts.train_search.main": [[100, 218], ["torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "optimizers.pc_darts.model_search.PCDARTSNetwork", "model.cuda.cuda", "logging.info", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "optimizers.darts.utils._data_transforms_cifar10", "torchvision.CIFAR10", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "optimizers.analyze.Analyzer", "optimizers.darts.architect.Architect", "range", "writer.close", "nasbench_analysis.search_spaces.search_space_1.SearchSpace1", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "optimizers.darts.utils.count_parameters_in_MB", "model.cuda.parameters", "range", "numpy.floor", "float", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "logging.info", "os.path.join", "train_search.train", "logging.info", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "train_search.infer", "logging.info", "writer.add_scalar", "writer.add_scalar", "optimizers.darts.utils.save", "nasbench_analysis.search_spaces.search_space_2.SearchSpace2", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "open", "model.cuda.arch_parameters", "pickle.dump", "print", "os.path.join", "logging.info", "naseval.eval_one_shot_model", "numpy.random.choice", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "nasbench_analysis.search_spaces.search_space_3.SearchSpace3", "ValueError", "numpy_tensor_list.append", "list", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "tensor.detach().cpu().numpy", "range", "tensor.detach().cpu", "tensor.detach"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.infer", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.eval_one_shot_model"], ["", "elif", "args", ".", "search_space", "==", "'2'", ":", "\n", "        ", "search_space", "=", "SearchSpace2", "(", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'3'", ":", "\n", "        ", "search_space", "=", "SearchSpace3", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown search space'", ")", "\n", "\n", "", "torch", ".", "set_num_threads", "(", "3", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "criterion", ",", "\n", "output_weights", "=", "args", ".", "output_weights", ",", "steps", "=", "search_space", ".", "num_intermediate_nodes", ",", "\n", "search_space", "=", "search_space", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "\n", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "        ", "split", "=", "args", ".", "batch_size", "\n", "num_train", "=", "2", "*", "args", ".", "batch_size", "\n", "\n", "", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ")", "\n", "\n", "analyzer", "=", "Analyzer", "(", "model", ",", "args", ")", "\n", "architect", "=", "Architect", "(", "model", ",", "args", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# increase the cutout probability linearly throughout search", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", "=", "args", ".", "cutout_prob", "*", "epoch", "/", "(", "args", ".", "epochs", "-", "1", ")", "\n", "logging", ".", "info", "(", "'epoch %d lr %e cutout_prob %e'", ",", "epoch", ",", "lr", ",", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", ")", "\n", "\n", "# Save the one shot model architecture weights for later analysis", "\n", "arch_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'one_shot_architecture_{}.obj'", ".", "format", "(", "epoch", ")", ")", "\n", "with", "open", "(", "arch_filename", ",", "'wb'", ")", "as", "filehandler", ":", "\n", "            ", "numpy_tensor_list", "=", "[", "]", "\n", "for", "tensor", "in", "model", ".", "arch_parameters", "(", ")", ":", "\n", "                ", "numpy_tensor_list", ".", "append", "(", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "pickle", ".", "dump", "(", "numpy_tensor_list", ",", "filehandler", ")", "\n", "\n", "# # Save the entire one-shot-model", "\n", "# filepath = os.path.join(args.save, 'one_shot_model_{}.obj'.format(epoch))", "\n", "# torch.save(model.state_dict(), filepath)", "\n", "\n", "", "for", "i", "in", "numpy_tensor_list", ":", "\n", "            ", "print", "(", "i", ")", "\n", "\n", "# training", "\n", "", "train_acc", ",", "train_obj", ",", "ev", "=", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "\n", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", "\n", "logging", ".", "info", "(", "'train_acc %f'", ",", "train_acc", ")", "\n", "logging", ".", "info", "(", "'eigenvalue %f'", ",", "ev", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/train'", ",", "train_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/train'", ",", "train_obj", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/eigenvalue'", ",", "ev", ",", "epoch", ")", "\n", "\n", "# validation", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'valid_acc %f'", ",", "valid_acc", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/valid'", ",", "valid_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/valid'", ",", "valid_obj", ",", "epoch", ")", "\n", "\n", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "\n", "if", "not", "'debug'", "in", "args", ".", "save", ":", "\n", "# benchmark", "\n", "            ", "logging", ".", "info", "(", "'STARTING EVALUATION'", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "naseval", ".", "eval_one_shot_model", "(", "\n", "config", "=", "args", ".", "__dict__", ",", "model", "=", "arch_filename", ")", "\n", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "3", ")", ")", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "np", ".", "mean", "(", "test", ")", ",", "np", ".", "mean", "(", "valid", ")", ",", "np", ".", "mean", "(", "runtime", ")", ",", "np", ".", "mean", "(", "params", ")", "\n", "logging", ".", "info", "(", "'TEST ERROR: %.3f | VALID ERROR: %.3f | RUNTIME: %f | PARAMS: %d'", "\n", "%", "(", "test", ",", "valid", ",", "runtime", ",", "params", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/test'", ",", "test", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/valid'", ",", "valid", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/runtime'", ",", "runtime", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/params'", ",", "params", ",", "epoch", ")", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.pc_darts.train_search.train": [[220, 283], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "enumerate", "copy.deepcopy", "next", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "analyzer.compute_Hw", "max", "numpy.linalg.norm", "model.train", "input.cuda.size", "input.cuda.cuda", "target.cuda.cuda", "input_search.cuda.cuda", "target_search.cuda.cuda", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "optimizers.darts.utils.accuracy", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "iter", "numpy.linalg.eigvals", "next", "architect.step", "model.parameters", "criterion.data.item", "prec1.data.item", "prec5.data.item", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable", "analyzer.compute_Hw.cpu().data.numpy", "iter", "next", "analyzer.compute_Hw.cpu"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.compute_Hw", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step"], ["    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# get a minibatch from the search queue with replacement", "\n", "try", ":", "\n", "            ", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "", "except", ":", "\n", "            ", "valid_queue_iter", "=", "iter", "(", "valid_queue", ")", "\n", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "\n", "", "input_search", "=", "input_search", ".", "cuda", "(", ")", "\n", "target_search", "=", "target_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Allow for warm starting of the one-shot model for more reliable architecture updates.", "\n", "if", "epoch", ">=", "args", ".", "warm_start_epochs", ":", "\n", "            ", "architect", ".", "step", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "lr", ",", "optimizer", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "binarization", "(", ")", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "model", ".", "restore", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "clip", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "                ", "break", "\n", "\n", "# analyze", "\n", "", "", "", "_data_loader", "=", "deepcopy", "(", "train_queue", ")", "\n", "input", ",", "target", "=", "next", "(", "iter", "(", "_data_loader", ")", ")", "\n", "\n", "input", "=", "Variable", "(", "input", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "model", ".", "binarization", "(", ")", "\n", "H", "=", "analyzer", ".", "compute_Hw", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "\n", "lr", ",", "optimizer", ",", "False", ")", "\n", "model", ".", "restore", "(", ")", "\n", "# g = analyzer.compute_dw(input, target, input_search, target_search,", "\n", "#                         lr, optimizer, False)", "\n", "# g = torch.cat([x.view(-1) for x in g])", "\n", "\n", "del", "_data_loader", "\n", "\n", "ev", "=", "max", "(", "LA", ".", "eigvals", "(", "H", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.pc_darts.train_search.infer": [[285, 310], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "model.eval", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "model", "criterion", "optimizers.darts.utils.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "criterion.data.item", "prec1.data.item", "prec5.data.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["\n", "return", "top1", ".", "avg", ",", "objs", ".", "avg", ",", "ev", "\n", "\n", "\n", "", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "binarization", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.ConvBnRelu.__init__": [[39, 47], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBnRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "# Padding = 1 is for a 3x3 kernel equivalent to tensorflow padding = same", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "# affine is equivalent to scale in original tensorflow code", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "True", ",", "momentum", "=", "BN_MOMENTUM", ",", "eps", "=", "BN_EPSILON", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.ConvBnRelu.forward": [[49, 51], ["operations.ConvBnRelu.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.Conv3x3BnRelu.__init__": [[58, 61], ["torch.Module.__init__", "operations.ConvBnRelu"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Conv3x3BnRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "ConvBnRelu", "(", "C_in", "=", "channels", ",", "C_out", "=", "channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.Conv3x3BnRelu.forward": [[62, 64], ["operations.Conv3x3BnRelu.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.Conv1x1BnRelu.__init__": [[71, 74], ["torch.Module.__init__", "operations.ConvBnRelu"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Conv1x1BnRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "ConvBnRelu", "(", "C_in", "=", "channels", ",", "C_out", "=", "channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.Conv1x1BnRelu.forward": [[75, 77], ["operations.Conv1x1BnRelu.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.ReLUConvBN.__init__": [[84, 90], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.ReLUConvBN.forward": [[92, 94], ["operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.DilConv.__init__": [[98, 106], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.DilConv.forward": [[108, 110], ["operations.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.SepConv.__init__": [[114, 125], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.SepConv.forward": [[127, 129], ["operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.Identity.__init__": [[133, 135], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.Identity.forward": [[136, 138], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.Zero.__init__": [[142, 145], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.Zero.forward": [[146, 150], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.FactorizedReduce.__init__": [[154, 161], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.operations.FactorizedReduce.forward": [[162, 167], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.MixedOp.__init__": [[11, 22], ["nn.Module.__init__", "nn.ModuleList", "model_search.MixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["class", "NASPNetwork", "(", "Network", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "output_weights", ",", "search_space", ",", "steps", "=", "4", ")", ":", "\n", "        ", "super", "(", "NASPNetwork", ",", "self", ")", ".", "__init__", "(", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "output_weights", ",", "\n", "search_space", ",", "steps", "=", "steps", ")", "\n", "self", ".", "saved_params", "=", "[", "]", "\n", "for", "w", "in", "self", ".", "_arch_parameters", ":", "\n", "            ", "temp", "=", "w", ".", "data", ".", "clone", "(", ")", "\n", "self", ".", "saved_params", ".", "append", "(", "temp", ")", "\n", "\n", "", "", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "# Initializes the weights for the mixed ops.", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.MixedOp.forward": [[23, 25], ["sum", "op", "zip"], "methods", ["None"], ["        ", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "self", ".", "alphas_mixed_op", "=", "Variable", "(", "torch", ".", "ones", "(", "self", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", "/", "2", "+", "\n", "1e-3", "*", "torch", ".", "randn", "(", "self", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.ChoiceBlock.__init__": [[34, 38], ["nn.Module.__init__", "model_search.MixedOp"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["            ", "begin", "=", "2", "\n", "# Initialize the weights for the inputs to each choice block.", "\n", "", "self", ".", "alphas_inputs", "=", "[", "Variable", "(", "torch", ".", "ones", "(", "1", ",", "n_inputs", ")", ".", "cuda", "(", ")", "/", "2", "+", "1e-3", "*", "torch", ".", "randn", "(", "1", ",", "n_inputs", ")", ".", "cuda", "(", ")", ",", "\n", "requires_grad", "=", "True", ")", "for", "n_inputs", "in", "range", "(", "begin", ",", "self", ".", "_steps", "+", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.ChoiceBlock.forward": [[39, 51], ["sum", "model_search.ChoiceBlock.mixed_op", "zip", "input_weights.squeeze"], "methods", ["None"], ["# Total architecture parameters", "\n", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "alphas_mixed_op", ",", "\n", "self", ".", "alphas_output", ",", "\n", "*", "self", ".", "alphas_inputs", "\n", "]", "\n", "\n", "", "def", "save_params", "(", "self", ")", ":", "\n", "        ", "for", "index", ",", "value", "in", "enumerate", "(", "self", ".", "_arch_parameters", ")", ":", "\n", "            ", "self", ".", "saved_params", "[", "index", "]", ".", "copy_", "(", "value", ".", "data", ")", "\n", "\n", "", "", "def", "clip", "(", "self", ")", ":", "\n", "        ", "clip_scale", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Cell.__init__": [[55, 78], ["nn.Module.__init__", "nn.ModuleList", "nn.ModuleList", "nn.ModuleList", "range", "model_search.Cell._input_projections.append", "model_search.ChoiceBlock", "model_search.Cell._choice_blocks.append", "model_search.Cell._input_projections.append", "ConvBnRelu", "ConvBnRelu"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["", "for", "index", "in", "range", "(", "len", "(", "self", ".", "_arch_parameters", ")", ")", ":", "\n", "            ", "self", ".", "_arch_parameters", "[", "index", "]", ".", "data", "=", "clip_scale", "[", "index", "]", ".", "data", "\n", "\n", "", "", "def", "binarization", "(", "self", ",", "e_greedy", "=", "0", ")", ":", "\n", "        ", "self", ".", "save_params", "(", ")", "\n", "# Use binarize only for the mixop, because the rest very quickly gave exploding gradients", "\n", "m", ",", "n", "=", "self", ".", "_arch_parameters", "[", "0", "]", ".", "size", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "e_greedy", ":", "\n", "            ", "maxIndexs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n", ")", ",", "m", ")", "\n", "", "else", ":", "\n", "            ", "maxIndexs", "=", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "proximal_step", "(", "\n", "self", ".", "_arch_parameters", "[", "0", "]", ",", "maxIndexs", ")", "\n", "\n", "", "def", "restore", "(", "self", ")", ":", "\n", "        ", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "saved_params", "[", "0", "]", "\n", "\n", "", "def", "proximal_step", "(", "self", ",", "var", ",", "maxIndexs", "=", "None", ")", ":", "\n", "        ", "values", "=", "var", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "m", ",", "n", "=", "values", ".", "shape", "\n", "alphas", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "j", "==", "maxIndexs", "[", "i", "]", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Cell.forward": [[79, 115], ["range", "states.append", "torch.cat", "len", "input_weights.pop", "zip", "type"], "methods", ["None"], ["                    ", "alphas", ".", "append", "(", "values", "[", "i", "]", "[", "j", "]", ".", "copy", "(", ")", ")", "\n", "values", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "values", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "", "", "return", "torch", ".", "Tensor", "(", "values", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network.__init__": [[119, 147], ["nn.Module.__init__", "ConvBnRelu", "nn.ModuleList", "range", "ReLUConvBN", "nn.Linear", "model_search.Network._initialize_alphas", "model_search.Cell"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network._initialize_alphas"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network.new": [[148, 155], ["Network().cuda", "zip", "Network().cuda.arch_parameters", "model_search.Network.arch_parameters", "x.data.copy_", "model_search.Network"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network._preprocess_op": [[156, 172], ["ValueError", "torch.sum", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network.forward": [[173, 207], ["model_search.Network.stem", "enumerate", "model_search.Network.postprocess", "cell.view().mean", "model_search.Network.classifier", "cell", "cell.view().mean.view", "model_search.Network._preprocess_op", "cell.view", "cell.view().mean.size", "nn.MaxPool2d", "model_search.Network._preprocess_op", "model_search.Network._preprocess_op"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell.cell", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network._preprocess_op", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network._preprocess_op", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network._preprocess_op"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network._loss": [[208, 211], ["model_search.Network.", "model_search.Network._criterion"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network._initialize_alphas": [[212, 233], ["len", "torch.autograd.Variable", "torch.autograd.Variable", "type", "torch.autograd.Variable", "torch.randn().cuda", "torch.randn().cuda", "range", "torch.randn().cuda", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network._save_arch_parameters": [[235, 237], ["p.clone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network._save_parameters": [[238, 240], ["p.clone", "model_search.Network.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network.arch_parameters": [[241, 243], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network.softmax_arch_parameters": [[244, 249], ["model_search.Network._save_arch_parameters", "p.data.copy_", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._save_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network.restore_arch_parameters": [[250, 254], ["enumerate", "p.data.copy_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network.restore_parameters": [[255, 259], ["enumerate", "model_search.Network.parameters", "p.data.copy_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.model_search.Network.clip": [[260, 268], ["model_search.Network.arch_parameters", "line.argmax", "line.data.clamp_", "line.data.div_", "line.sum", "line.sum"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.train_search.main": [[107, 244], ["torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "optimizers.darts.model_search.Network", "model.cuda.cuda", "logging.info", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "optimizers.darts.utils._data_transforms_cifar10", "torchvision.CIFAR10", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "optimizers.analyze.Analyzer", "optimizers.darts.architect.Architect", "range", "writer.close", "nasbench_analysis.search_spaces.search_space_1.SearchSpace1", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "optimizers.darts.utils.count_parameters_in_MB", "model.cuda.parameters", "range", "numpy.floor", "float", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "os.path.join", "train_search.train", "logging.info", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "train_search.infer", "logging.info", "writer.add_scalar", "writer.add_scalar", "optimizers.darts.utils.save", "nasbench_analysis.search_spaces.search_space_2.SearchSpace2", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "logging.info", "logging.info", "logging.info", "open", "model.cuda.arch_parameters", "pickle.dump", "os.path.join", "logging.info", "naseval.eval_one_shot_model", "numpy.random.choice", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "nasbench_analysis.search_spaces.search_space_3.SearchSpace3", "ValueError", "numpy_tensor_list.append", "logging.info", "list", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "tensor.detach().cpu().numpy", "str", "range", "tensor.detach().cpu", "tensor.detach"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.infer", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.eval_one_shot_model"], ["", "torch", ".", "set_num_threads", "(", "3", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "criterion", ",", "\n", "output_weights", "=", "args", ".", "output_weights", ",", "steps", "=", "search_space", ".", "num_intermediate_nodes", ",", "\n", "search_space", "=", "search_space", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "\n", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "        ", "split", "=", "args", ".", "batch_size", "\n", "num_train", "=", "2", "*", "args", ".", "batch_size", "\n", "\n", "", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ")", "\n", "\n", "analyzer", "=", "Analyzer", "(", "model", ",", "args", ")", "\n", "architect", "=", "Architect", "(", "model", ",", "args", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# increase the cutout probability linearly throughout search", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", "=", "args", ".", "cutout_prob", "*", "epoch", "/", "(", "args", ".", "epochs", "-", "1", ")", "\n", "logging", ".", "info", "(", "'epoch %d lr %e cutout_prob %e'", ",", "epoch", ",", "lr", ",", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", ")", "\n", "\n", "# Save the one shot model architecture weights for later analysis", "\n", "arch_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'one_shot_architecture_{}.obj'", ".", "format", "(", "epoch", ")", ")", "\n", "with", "open", "(", "arch_filename", ",", "'wb'", ")", "as", "filehandler", ":", "\n", "            ", "numpy_tensor_list", "=", "[", "]", "\n", "for", "tensor", "in", "model", ".", "arch_parameters", "(", ")", ":", "\n", "                ", "numpy_tensor_list", ".", "append", "(", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "pickle", ".", "dump", "(", "numpy_tensor_list", ",", "filehandler", ")", "\n", "\n", "# # Save the entire one-shot-model", "\n", "# filepath = os.path.join(args.save, 'one_shot_model_{}.obj'.format(epoch))", "\n", "# torch.save(model.state_dict(), filepath)", "\n", "\n", "", "for", "i", "in", "numpy_tensor_list", ":", "\n", "            ", "print", "(", "i", ")", "\n", "\n", "# training", "\n", "", "train_acc", ",", "train_obj", ",", "ev", "=", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "\n", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", "\n", "logging", ".", "info", "(", "'train_acc %f'", ",", "train_acc", ")", "\n", "logging", ".", "info", "(", "'eigenvalue %f'", ",", "ev", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/train'", ",", "train_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/train'", ",", "train_obj", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/eigenvalue'", ",", "ev", ",", "epoch", ")", "\n", "\n", "# validation", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'valid_acc %f'", ",", "valid_acc", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/valid'", ",", "valid_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/valid'", ",", "valid_obj", ",", "epoch", ")", "\n", "\n", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "\n", "if", "not", "'debug'", "in", "args", ".", "save", ":", "\n", "# benchmark", "\n", "            ", "logging", ".", "info", "(", "'STARTING EVALUATION'", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "naseval", ".", "eval_one_shot_model", "(", "\n", "config", "=", "args", ".", "__dict__", ",", "model", "=", "arch_filename", ")", "\n", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "3", ")", ")", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "np", ".", "mean", "(", "test", ")", ",", "np", ".", "mean", "(", "valid", ")", ",", "np", ".", "mean", "(", "runtime", ")", ",", "np", ".", "mean", "(", "params", ")", "\n", "logging", ".", "info", "(", "'TEST ERROR: %.3f | VALID ERROR: %.3f | RUNTIME: %f | PARAMS: %d'", "\n", "%", "(", "test", ",", "valid", ",", "runtime", ",", "params", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/test'", ",", "test", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/valid'", ",", "valid", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/runtime'", ",", "runtime", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/params'", ",", "params", ",", "epoch", ")", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# get a minibatch from the search queue with replacement", "\n", "try", ":", "\n", "            ", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "", "except", ":", "\n", "            ", "valid_queue_iter", "=", "iter", "(", "valid_queue", ")", "\n", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "\n", "", "input_search", "=", "input_search", ".", "cuda", "(", ")", "\n", "target_search", "=", "target_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Allow for warm starting of the one-shot model for more reliable architecture updates.", "\n", "if", "epoch", ">=", "args", ".", "warm_start_epochs", ":", "\n", "            ", "architect", ".", "step", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "lr", ",", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.train_search.train": [[246, 325], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "enumerate", "copy.deepcopy", "next", "input.cuda.cuda", "target.cuda.cuda", "analyzer.compute_Hw", "max", "numpy.linalg.norm", "model.train", "input.cuda.size", "input.cuda.cuda", "target.cuda.cuda", "input_search.cuda.cuda", "target_search.cuda.cuda", "model.softmax_arch_parameters", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "model.restore_arch_parameters", "optimizers.darts.utils.accuracy", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "iter", "numpy.linalg.eigvals", "next", "architect.step", "optimizer.zero_grad", "architect.optimizer.zero_grad", "perturb_alpha", "optimizer.zero_grad", "architect.optimizer.zero_grad", "model.parameters", "criterion.data.item", "prec1.data.item", "prec5.data.item", "logging.info", "analyzer.compute_Hw.cpu().data.numpy", "iter", "next", "analyzer.compute_Hw.cpu"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.compute_Hw", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.softmax_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.restore_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step"], ["model", ".", "binarization", "(", ")", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "model", ".", "restore", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "clip", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "                ", "break", "\n", "\n", "# analyze", "\n", "", "", "", "_data_loader", "=", "deepcopy", "(", "train_queue", ")", "\n", "input", ",", "target", "=", "next", "(", "iter", "(", "_data_loader", ")", ")", "\n", "\n", "input", "=", "Variable", "(", "input", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "model", ".", "binarization", "(", ")", "\n", "H", "=", "analyzer", ".", "compute_Hw", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "\n", "lr", ",", "optimizer", ",", "False", ")", "\n", "model", ".", "restore", "(", ")", "\n", "# g = analyzer.compute_dw(input, target, input_search, target_search,", "\n", "#                         lr, optimizer, False)", "\n", "# g = torch.cat([x.view(-1) for x in g])", "\n", "\n", "del", "_data_loader", "\n", "\n", "ev", "=", "max", "(", "LA", ".", "eigvals", "(", "H", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", ")", "\n", "ev", "=", "np", ".", "linalg", ".", "norm", "(", "ev", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "objs", ".", "avg", ",", "ev", "\n", "\n", "\n", "", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "binarization", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "                    ", "break", "\n", "", "", "", "", "model", ".", "restore", "(", ")", "\n", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.train_search.infer": [[327, 353], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "model", "criterion", "optimizers.darts.utils.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "criterion.data.item", "prec1.data.item", "prec5.data.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect.__init__": [[13, 20], ["torch.optim.Adam", "architect.Architect.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "        ", "self", ".", "network_momentum", "=", "args", ".", "momentum", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "arch_learning_rate", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "args", ".", "arch_weight_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._train_loss": [[21, 23], ["model._loss"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss"], ["", "def", "step", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "_backward_step", "(", "input_valid", ",", "target_valid", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._val_loss": [[24, 26], ["model._loss"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss"], ["self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "def", "_backward_step", "(", "self", ",", "input_valid", ",", "target_valid", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._compute_unrolled_model": [[27, 38], ["architect.Architect._train_loss", "architect.Architect._construct_model_from_theta", "architect._concat", "_concat().mul_", "theta.sub", "architect.Architect.model.parameters", "torch.zeros_like", "architect._concat", "architect._concat", "torch.autograd.grad", "architect.Architect.model.parameters", "architect.Architect.model.parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._train_loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._construct_model_from_theta", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat"], ["        ", "self", ".", "model", ".", "binarization", "(", ")", "\n", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "model", ".", "restore", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect.step": [[39, 46], ["architect.Architect.optimizer.zero_grad", "architect.Architect.optimizer.step", "architect.Architect._backward_step_unrolled", "architect.Architect._backward_step"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._backward_step_unrolled", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._backward_step"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._backward_step": [[47, 50], ["architect.Architect._val_loss", "architect.Architect.backward"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._val_loss"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._backward_step_unrolled": [[51, 72], ["architect.Architect._compute_unrolled_model", "architect.Architect._val_loss", "architect.Architect.backward", "architect.Architect._hessian_vector_product", "zip", "zip", "g.data.sub_", "architect.Architect.model.arch_parameters", "architect.Architect.arch_parameters", "architect.Architect.parameters", "torch.autograd.Variable", "v.grad.data.copy_"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._compute_unrolled_model", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._val_loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._hessian_vector_product", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._construct_model_from_theta": [[73, 87], ["architect.Architect.model.new", "architect.Architect.model.state_dict", "architect.Architect.model.named_parameters", "architect.Architect.update", "architect.Architect.load_state_dict", "architect.Architect.cuda", "numpy.prod", "theta[].view", "len", "v.size", "v.size"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.PCDARTSNetwork.new", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._hessian_vector_product": [[88, 104], ["zip", "architect.Architect._train_loss", "torch.autograd.grad", "zip", "architect.Architect._train_loss", "torch.autograd.grad", "zip", "_concat().norm", "architect.Architect.model.parameters", "p.data.add_", "architect.Architect.model.arch_parameters", "architect.Architect.model.parameters", "p.data.sub_", "architect.Architect.model.arch_parameters", "architect.Architect.model.parameters", "p.data.add_", "zip", "architect._concat"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._train_loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect.Architect._train_loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.architect._concat": [[7, 9], ["torch.cat", "x.view"], "function", ["None"], ["def", "_concat", "(", "xs", ")", ":", "\n", "  ", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.__init__": [[24, 26], ["torchvision.datasets.utils.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.reset"], ["def", "query", "(", "self", ",", "model_spec", ",", "epochs", "=", "108", ",", "stop_halfway", "=", "False", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.reset": [[27, 31], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update": [[32, 36], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.Cutout.__init__": [[54, 57], ["None"], "methods", ["None"], ["            ", "raise", "api", ".", "OutOfDomainError", "(", "'invalid number of epochs, must be one of %s'", "\n", "%", "self", ".", "valid_epochs", ")", "\n", "\n", "", "fixed_stat", ",", "computed_stat", "=", "self", ".", "get_metrics_from_spec", "(", "model_spec", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.Cutout.__call__": [[58, 75], ["numpy.random.binomial", "numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip"], ["trainings", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "config", "[", "'num_repeats'", "]", ")", ":", "\n", "            ", "computed_stat_at_epoch", "=", "computed_stat", "[", "epochs", "]", "[", "index", "]", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "'module_adjacency'", "]", "=", "fixed_stat", "[", "'module_adjacency'", "]", "\n", "data", "[", "'module_operations'", "]", "=", "fixed_stat", "[", "'module_operations'", "]", "\n", "data", "[", "'trainable_parameters'", "]", "=", "fixed_stat", "[", "'trainable_parameters'", "]", "\n", "\n", "if", "stop_halfway", ":", "\n", "                ", "data", "[", "'training_time'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_test_accuracy'", "]", "\n", "", "else", ":", "\n", "                ", "data", "[", "'training_time'", "]", "=", "computed_stat_at_epoch", "[", "'final_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'final_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'final_validation_accuracy'", "]", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.CIFAR10.__init__": [[236, 277], ["torchvision.datasets.VisionDataset.__init__", "numpy.vstack().reshape", "torchvision.datasets.utils.CIFAR10.data.transpose", "torchvision.datasets.utils.CIFAR10._load_meta", "torchvision.datasets.utils.CIFAR10.download", "torchvision.datasets.utils.CIFAR10._check_integrity", "RuntimeError", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "torchvision.datasets.utils.CIFAR10.data.append", "numpy.vstack", "pickle.load", "pickle.load", "torchvision.datasets.utils.CIFAR10.targets.extend", "torchvision.datasets.utils.CIFAR10.targets.extend"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.CIFAR10._load_meta", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.CIFAR10.download", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.CIFAR10._load_meta": [[278, 290], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity", "RuntimeError", "open", "pickle.load", "pickle.load", "enumerate"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.CIFAR10.__getitem__": [[291, 312], ["PIL.Image.fromarray", "torchvision.datasets.utils.CIFAR10.transform", "torchvision.datasets.utils.CIFAR10.target_transform"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.CIFAR10.__len__": [[313, 315], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.CIFAR10._check_integrity": [[316, 324], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.CIFAR10.download": [[325, 332], ["torchvision.datasets.utils.CIFAR10._check_integrity", "torchvision.datasets.utils.download_and_extract_archive", "print"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.CIFAR10._check_integrity"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.CIFAR10.extra_repr": [[333, 335], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy": [[38, 51], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_svhn": [[76, 95], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["data", "[", "'test_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'final_test_accuracy'", "]", "\n", "\n", "", "self", ".", "training_time_spent", "+=", "data", "[", "'training_time'", "]", "\n", "if", "stop_halfway", ":", "\n", "                ", "self", ".", "total_epochs_spent", "+=", "epochs", "//", "2", "\n", "", "else", ":", "\n", "                ", "self", ".", "total_epochs_spent", "+=", "epochs", "\n", "", "trainings", ".", "append", "(", "data", ")", "\n", "\n", "", "return", "trainings", "\n", "\n", "\n", "", "", "def", "get_top_k", "(", "array", ",", "k", ")", ":", "\n", "    ", "return", "list", "(", "np", ".", "argpartition", "(", "array", "[", "0", "]", ",", "-", "k", ")", "[", "-", "k", ":", "]", ")", "\n", "\n", "\n", "", "def", "parent_combinations", "(", "adjacency_matrix", ",", "node", ",", "n_parents", "=", "2", ")", ":", "\n", "    ", "\"\"\"Get all possible parent combinations for the current node.\"\"\"", "\n", "if", "node", "!=", "1", ":", "\n", "# Parents can only be nodes which have an index that is lower than the current index,", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar100": [[97, 116], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["# topological ordering in our case.", "\n", "        ", "return", "itertools", ".", "combinations", "(", "np", ".", "argwhere", "(", "adjacency_matrix", "[", ":", "node", ",", "node", "]", "==", "0", ")", ".", "flatten", "(", ")", ",", "\n", "n_parents", ")", "# (e.g. (0, 1), (0, 2), (1, 2), ...", "\n", "", "else", ":", "\n", "        ", "return", "[", "[", "0", "]", "]", "\n", "\n", "\n", "", "", "def", "draw_graph_to_adjacency_matrix", "(", "graph", ")", ":", "\n", "    ", "\"\"\"\n    Draws the graph in circular format for easier debugging\n    :param graph:\n    :return:\n    \"\"\"", "\n", "dag", "=", "nx", ".", "DiGraph", "(", "graph", ")", "\n", "nx", ".", "draw_circular", "(", "dag", ",", "with_labels", "=", "True", ")", "\n", "\n", "\n", "", "def", "upscale_to_nasbench_format", "(", "adjacency_matrix", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10": [[118, 137], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["\n", "return", "np", ".", "insert", "(", "\n", "np", ".", "insert", "(", "adjacency_matrix", ",", "\n", "5", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "axis", "=", "1", ")", ",", "\n", "5", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "", "def", "parse_log", "(", "path", ")", ":", "\n", "    ", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'log.txt'", ")", ",", "'r'", ")", "\n", "# Read in the relevant information", "\n", "train_accuracies", "=", "[", "]", "\n", "valid_accuracies", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "        ", "if", "'train_acc'", "in", "line", ":", "\n", "            ", "train_accuracies", ".", "append", "(", "line", ")", "\n", "", "elif", "'valid_acc'", "in", "line", ":", "\n", "            ", "valid_accuracies", ".", "append", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.count_parameters_in_MB": [[139, 141], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], ["valid_accuracies", "]", "\n", "train_error", "=", "[", "[", "1", "-", "1", "/", "100", "*", "float", "(", "re", ".", "search", "(", "'train_acc ([-+]?[0-9]*\\.?[0-9]+)'", ",", "line", ")", ".", "group", "(", "1", ")", ")", "]", "for", "line", "in", "\n", "train_accuracies", "]", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.save_checkpoint": [[143, 149], ["os.path.join", "os.path.join", "torch.save", "os.path.join", "os.path.join", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save"], ["return", "valid_error", ",", "train_error", "\n", "\n", "# https://stackoverflow.com/questions/5967500/how-to-correctly-sort-a-string-with-a-number-inside", "\n", "", "def", "atoi", "(", "text", ")", ":", "\n", "    ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.load_checkpoint": [[151, 167], ["os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "print", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "print", "print"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load"], ["    ", "'''\n    alist.sort(key=natural_keys) sorts in human order\n    http://nedbatchelder.com/blog/200712/human_sorting.html\n    (See Toothy's implementation in the comments)\n    '''", "\n", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "r'(\\d+)'", ",", "text", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.save": [[169, 171], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.load": [[173, 175], ["model.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.drop_path": [[177, 184], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.create_exp_dir": [[186, 196], ["print", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.mkdir", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename", "os.path.basename"], "function", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.model_search.MixedOpGDAS.__init__": [[13, 15], ["optimizers.darts.model_search.MixedOp.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "output_weights", ",", "search_space", ",", "steps", "=", "4", ")", ":", "\n", "        ", "super", "(", "NASPNetwork", ",", "self", ")", ".", "__init__", "(", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "output_weights", ",", "\n", "search_space", ",", "steps", "=", "steps", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.model_search.MixedOpGDAS.forward": [[16, 28], ["weights.tolist", "sum", "sum", "enumerate", "sum", "len", "abs", "abs", "clist.append", "op", "zip"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist"], ["self", ".", "saved_params", "=", "[", "]", "\n", "for", "w", "in", "self", ".", "_arch_parameters", ":", "\n", "            ", "temp", "=", "w", ".", "data", ".", "clone", "(", ")", "\n", "self", ".", "saved_params", ".", "append", "(", "temp", ")", "\n", "\n", "", "", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "# Initializes the weights for the mixed ops.", "\n", "        ", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "self", ".", "alphas_mixed_op", "=", "Variable", "(", "torch", ".", "ones", "(", "self", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", "/", "2", "+", "\n", "1e-3", "*", "torch", ".", "randn", "(", "self", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# For the alphas on the output node initialize a weighting vector for all choice blocks and the input edge.", "\n", "self", ".", "alphas_output", "=", "Variable", "(", "torch", ".", "ones", "(", "1", ",", "self", ".", "_steps", "+", "1", ")", ".", "cuda", "(", ")", "/", "2", "+", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.model_search.ChoiceBlockGDAS.__init__": [[37, 41], ["optimizers.darts.model_search.ChoiceBlock.__init__", "model_search.MixedOpGDAS"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["requires_grad", "=", "True", ")", "for", "n_inputs", "in", "range", "(", "begin", ",", "self", ".", "_steps", "+", "1", ")", "]", "\n", "\n", "# Total architecture parameters", "\n", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "alphas_mixed_op", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.model_search.CellGDAS.__init__": [[45, 53], ["optimizers.darts.model_search.Cell.__init__", "nn.ModuleList", "range", "model_search.ChoiceBlockGDAS", "model_search.CellGDAS._choice_blocks.append"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["\n", "", "def", "save_params", "(", "self", ")", ":", "\n", "        ", "for", "index", ",", "value", "in", "enumerate", "(", "self", ".", "_arch_parameters", ")", ":", "\n", "            ", "self", ".", "saved_params", "[", "index", "]", ".", "copy_", "(", "value", ".", "data", ")", "\n", "\n", "", "", "def", "clip", "(", "self", ")", ":", "\n", "        ", "clip_scale", "=", "[", "]", "\n", "m", "=", "nn", ".", "Hardtanh", "(", "0", ",", "1", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "_arch_parameters", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.model_search.GDASNetwork.__init__": [[57, 75], ["optimizers.darts.model_search.Network.__init__", "nn.ModuleList", "range", "model_search.CellGDAS"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["\n", "", "", "def", "binarization", "(", "self", ",", "e_greedy", "=", "0", ")", ":", "\n", "        ", "self", ".", "save_params", "(", ")", "\n", "# Use binarize only for the mixop, because the rest very quickly gave exploding gradients", "\n", "m", ",", "n", "=", "self", ".", "_arch_parameters", "[", "0", "]", ".", "size", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "e_greedy", ":", "\n", "            ", "maxIndexs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n", ")", ",", "m", ")", "\n", "", "else", ":", "\n", "            ", "maxIndexs", "=", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "proximal_step", "(", "\n", "self", ".", "_arch_parameters", "[", "0", "]", ",", "maxIndexs", ")", "\n", "\n", "", "def", "restore", "(", "self", ")", ":", "\n", "        ", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "saved_params", "[", "0", "]", "\n", "\n", "", "def", "proximal_step", "(", "self", ",", "var", ",", "maxIndexs", "=", "None", ")", ":", "\n", "        ", "values", "=", "var", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "m", ",", "n", "=", "values", ".", "shape", "\n", "alphas", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.model_search.GDASNetwork.set_tau": [[76, 78], ["None"], "methods", ["None"], ["for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "j", "==", "maxIndexs", "[", "i", "]", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.model_search.GDASNetwork.new": [[79, 86], ["GDASNetwork().cuda", "zip", "GDASNetwork().cuda.arch_parameters", "model_search.GDASNetwork.arch_parameters", "x.data.copy_", "model_search.GDASNetwork"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["                    ", "alphas", ".", "append", "(", "values", "[", "i", "]", "[", "j", "]", ".", "copy", "(", ")", ")", "\n", "values", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "values", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "", "", "return", "torch", ".", "Tensor", "(", "values", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.model_search.GDASNetwork.forward": [[87, 118], ["model_search.GDASNetwork.stem", "enumerate", "model_search.GDASNetwork.postprocess", "cell.view().mean", "model_search.GDASNetwork.classifier", "preprocess_op_mixed_op", "cell", "cell.view().mean.view", "preprocess_op", "preprocess_op", "cell.view", "cell.view().mean.size", "nn.MaxPool2d", "torch.gumbel_softmax", "torch.gumbel_softmax"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell.cell"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.train_search.main": [[99, 229], ["numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "optimizers.gdas.model_search.GDASNetwork", "model.cuda.cuda", "logging.info", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "optimizers.darts.utils._data_transforms_cifar10", "torchvision.CIFAR10", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "optimizers.analyze.Analyzer", "optimizers.gdas.architect.ArchitectGDAS", "range", "writer.close", "nasbench_analysis.search_spaces.search_space_1.SearchSpace1", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "optimizers.darts.utils.count_parameters_in_MB", "model.cuda.parameters", "range", "numpy.floor", "float", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "logging.info", "os.path.join", "train_search.train", "logging.info", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "logging.info", "model.cuda.set_tau", "train_search.infer", "logging.info", "writer.add_scalar", "writer.add_scalar", "optimizers.darts.utils.save", "nasbench_analysis.search_spaces.search_space_2.SearchSpace2", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "open", "model.cuda.arch_parameters", "pickle.dump", "print", "os.path.join", "logging.info", "naseval.eval_one_shot_model", "numpy.random.choice", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "nasbench_analysis.search_spaces.search_space_3.SearchSpace3", "ValueError", "numpy_tensor_list.append", "list", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "tensor.detach().cpu().numpy", "range", "tensor.detach().cpu", "tensor.detach"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.model_search.GDASNetwork.set_tau", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.infer", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.eval_one_shot_model"], ["        ", "search_space", "=", "SearchSpace1", "(", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'2'", ":", "\n", "        ", "search_space", "=", "SearchSpace2", "(", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'3'", ":", "\n", "        ", "search_space", "=", "SearchSpace3", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown search space'", ")", "\n", "\n", "", "torch", ".", "set_num_threads", "(", "3", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "criterion", ",", "\n", "output_weights", "=", "args", ".", "output_weights", ",", "steps", "=", "search_space", ".", "num_intermediate_nodes", ",", "\n", "search_space", "=", "search_space", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "\n", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "        ", "split", "=", "args", ".", "batch_size", "\n", "num_train", "=", "2", "*", "args", ".", "batch_size", "\n", "\n", "", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ")", "\n", "\n", "analyzer", "=", "Analyzer", "(", "model", ",", "args", ")", "\n", "architect", "=", "Architect", "(", "model", ",", "args", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# increase the cutout probability linearly throughout search", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", "=", "args", ".", "cutout_prob", "*", "epoch", "/", "(", "args", ".", "epochs", "-", "1", ")", "\n", "logging", ".", "info", "(", "'epoch %d lr %e cutout_prob %e'", ",", "epoch", ",", "lr", ",", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", ")", "\n", "\n", "# Save the one shot model architecture weights for later analysis", "\n", "arch_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'one_shot_architecture_{}.obj'", ".", "format", "(", "epoch", ")", ")", "\n", "with", "open", "(", "arch_filename", ",", "'wb'", ")", "as", "filehandler", ":", "\n", "            ", "numpy_tensor_list", "=", "[", "]", "\n", "for", "tensor", "in", "model", ".", "arch_parameters", "(", ")", ":", "\n", "                ", "numpy_tensor_list", ".", "append", "(", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "pickle", ".", "dump", "(", "numpy_tensor_list", ",", "filehandler", ")", "\n", "\n", "# # Save the entire one-shot-model", "\n", "# filepath = os.path.join(args.save, 'one_shot_model_{}.obj'.format(epoch))", "\n", "# torch.save(model.state_dict(), filepath)", "\n", "\n", "", "for", "i", "in", "numpy_tensor_list", ":", "\n", "            ", "print", "(", "i", ")", "\n", "\n", "# training", "\n", "", "train_acc", ",", "train_obj", ",", "ev", "=", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "\n", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", "\n", "logging", ".", "info", "(", "'train_acc %f'", ",", "train_acc", ")", "\n", "logging", ".", "info", "(", "'eigenvalue %f'", ",", "ev", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/train'", ",", "train_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/train'", ",", "train_obj", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/eigenvalue'", ",", "ev", ",", "epoch", ")", "\n", "\n", "# validation", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'valid_acc %f'", ",", "valid_acc", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/valid'", ",", "valid_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/valid'", ",", "valid_obj", ",", "epoch", ")", "\n", "\n", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "\n", "if", "not", "'debug'", "in", "args", ".", "save", ":", "\n", "# benchmark", "\n", "            ", "logging", ".", "info", "(", "'STARTING EVALUATION'", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "naseval", ".", "eval_one_shot_model", "(", "\n", "config", "=", "args", ".", "__dict__", ",", "model", "=", "arch_filename", ")", "\n", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "3", ")", ")", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "np", ".", "mean", "(", "test", ")", ",", "np", ".", "mean", "(", "valid", ")", ",", "np", ".", "mean", "(", "runtime", ")", ",", "np", ".", "mean", "(", "params", ")", "\n", "logging", ".", "info", "(", "'TEST ERROR: %.3f | VALID ERROR: %.3f | RUNTIME: %f | PARAMS: %d'", "\n", "%", "(", "test", ",", "valid", ",", "runtime", ",", "params", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/test'", ",", "test", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/valid'", ",", "valid", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/runtime'", ",", "runtime", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/params'", ",", "params", ",", "epoch", ")", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.train_search.train": [[231, 294], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "enumerate", "copy.deepcopy", "next", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "analyzer.compute_Hw", "max", "numpy.linalg.norm", "model.train", "input.cuda.size", "input.cuda.cuda", "target.cuda.cuda", "input_search.cuda.cuda", "target_search.cuda.cuda", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "optimizers.darts.utils.accuracy", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "iter", "numpy.linalg.eigvals", "next", "architect.step", "model.parameters", "criterion.data.item", "prec1.data.item", "prec5.data.item", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable", "analyzer.compute_Hw.cpu().data.numpy", "iter", "next", "analyzer.compute_Hw.cpu"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.optimizers.analyze.Analyzer.compute_Hw", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step"], ["# get a minibatch from the search queue with replacement", "\n", "try", ":", "\n", "            ", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "", "except", ":", "\n", "            ", "valid_queue_iter", "=", "iter", "(", "valid_queue", ")", "\n", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "\n", "", "input_search", "=", "input_search", ".", "cuda", "(", ")", "\n", "target_search", "=", "target_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Allow for warm starting of the one-shot model for more reliable architecture updates.", "\n", "if", "epoch", ">=", "args", ".", "warm_start_epochs", ":", "\n", "            ", "architect", ".", "step", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "lr", ",", "optimizer", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "binarization", "(", ")", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "model", ".", "restore", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "clip", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "                ", "break", "\n", "\n", "# analyze", "\n", "", "", "", "_data_loader", "=", "deepcopy", "(", "train_queue", ")", "\n", "input", ",", "target", "=", "next", "(", "iter", "(", "_data_loader", ")", ")", "\n", "\n", "input", "=", "Variable", "(", "input", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "model", ".", "binarization", "(", ")", "\n", "H", "=", "analyzer", ".", "compute_Hw", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "\n", "lr", ",", "optimizer", ",", "False", ")", "\n", "model", ".", "restore", "(", ")", "\n", "# g = analyzer.compute_dw(input, target, input_search, target_search,", "\n", "#                         lr, optimizer, False)", "\n", "# g = torch.cat([x.view(-1) for x in g])", "\n", "\n", "del", "_data_loader", "\n", "\n", "ev", "=", "max", "(", "LA", ".", "eigvals", "(", "H", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", ")", "\n", "ev", "=", "np", ".", "linalg", ".", "norm", "(", "ev", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "objs", ".", "avg", ",", "ev", "\n", "\n", "\n", "", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "binarization", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.train_search.infer": [[296, 321], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "model.eval", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "model", "criterion", "optimizers.darts.utils.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "criterion.data.item", "prec1.data.item", "prec5.data.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "                    ", "break", "\n", "", "", "", "", "model", ".", "restore", "(", ")", "\n", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.architect.ArchitectGDAS.__init__": [[15, 18], ["optimizers.darts.architect.Architect.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["self", ".", "network_weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "arch_learning_rate", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.architect.ArchitectGDAS.step": [[19, 29], ["architect.ArchitectGDAS.optimizer.zero_grad", "torch.nn.utils.clip_grad_norm_", "architect.ArchitectGDAS.optimizer.step", "architect.ArchitectGDAS._backward_step_unrolled", "architect.ArchitectGDAS._backward_step", "architect.ArchitectGDAS.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._backward_step_unrolled", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._backward_step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["weight_decay", "=", "args", ".", "arch_weight_decay", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "_backward_step", "(", "input_valid", ",", "target_valid", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "def", "_backward_step", "(", "self", ",", "input_valid", ",", "target_valid", ")", ":", "\n", "        ", "self", ".", "model", ".", "binarization", "(", ")", "\n", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "loss", ".", "backward", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.architect.ArchitectGDAS._compute_unrolled_model": [[30, 46], ["architect.ArchitectGDAS.model._loss", "architect._concat", "architect.ArchitectGDAS._construct_model_from_theta", "architect._concat", "_concat().musl_", "theta.sub", "architect.ArchitectGDAS.model.parameters", "torch.zeros_like", "zip", "architect._concat", "torch.autograd.grad", "architect.ArchitectGDAS.model.parameters", "architect.ArchitectGDAS.model.parameters", "architect.ArchitectGDAS.model.parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._construct_model_from_theta", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat"], ["self", ".", "model", ".", "restore", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.architect.ArchitectGDAS._backward_step_unrolled": [[47, 65], ["architect.ArchitectGDAS._compute_unrolled_model", "architect.ArchitectGDAS._loss", "architect.ArchitectGDAS._loss.backward", "architect.ArchitectGDAS._hessian_vector_product", "zip", "zip", "g.data.sub_", "architect.ArchitectGDAS.model.arch_parameters", "architect.ArchitectGDAS.arch_parameters", "torch.zeros_like", "architect.ArchitectGDAS.parameters", "torch.autograd.Variable", "v.grad.data.copy_"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._compute_unrolled_model", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._hessian_vector_product", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.gdas.architect._concat": [[9, 11], ["torch.cat", "x.view"], "function", ["None"], ["\n", "\n", "", "class", "ArchitectNASP", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.micro_controller.Controller.__init__": [[15, 44], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.array", "numpy.reshape", "torch.Tensor().requires_grad_().cuda", "torch.Tensor().requires_grad_().cuda", "torch.Tensor().requires_grad_().cuda", "torch.Tensor().requires_grad_().cuda", "torch.Tensor().requires_grad_().cuda", "torch.Tensor().requires_grad_().cuda", "torch.Tensor().requires_grad_().cuda", "torch.Tensor().requires_grad_().cuda", "torch.Tensor().requires_grad_().cuda", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "micro_controller.Controller.reset_param", "torch.Tensor().requires_grad_", "torch.Tensor().requires_grad_", "torch.Tensor().requires_grad_", "torch.Tensor().requires_grad_", "torch.Tensor().requires_grad_", "torch.Tensor().requires_grad_", "torch.Tensor().requires_grad_", "torch.Tensor().requires_grad_", "torch.Tensor().requires_grad_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.micro_controller.Controller.reset_param"], ["    ", "def", "__init__", "(", "self", ",", "search_space", ",", "args", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "search_space", "=", "search_space", "\n", "self", ".", "args", "=", "args", "\n", "# TODO", "\n", "self", ".", "child_num_ops", "=", "args", ".", "child_num_ops", "\n", "self", ".", "num_cells", "=", "args", ".", "child_num_cells", "\n", "self", ".", "lstm_size", "=", "args", ".", "lstm_size", "\n", "self", ".", "lstm_num_layers", "=", "args", ".", "lstm_num_layers", "\n", "self", ".", "lstm_keep_prob", "=", "args", ".", "lstm_keep_prob", "\n", "self", ".", "temperature", "=", "args", ".", "temperature", "\n", "self", ".", "tanh_constant", "=", "args", ".", "controller_tanh_constant", "\n", "self", ".", "op_tanh_reduce", "=", "args", ".", "controller_op_tanh_reduce", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Embedding", "(", "self", ".", "child_num_ops", "+", "1", ",", "self", ".", "lstm_size", ")", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "self", ".", "lstm_size", ",", "self", ".", "lstm_size", ")", "\n", "self", ".", "w_soft", "=", "nn", ".", "Linear", "(", "self", ".", "lstm_size", ",", "self", ".", "child_num_ops", ",", "bias", "=", "False", ")", "\n", "b_soft", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "child_num_ops", ")", "\n", "b_soft", "[", ":", ",", "0", ":", "2", "]", "=", "10", "\n", "self", ".", "b_soft", "=", "nn", ".", "Parameter", "(", "b_soft", ")", "\n", "b_soft_no_learn", "=", "np", ".", "array", "(", "[", "0.25", ",", "0.25", "]", "+", "[", "-", "0.25", "]", "*", "(", "self", ".", "child_num_ops", "-", "2", ")", ")", "\n", "b_soft_no_learn", "=", "np", ".", "reshape", "(", "b_soft_no_learn", ",", "[", "1", ",", "self", ".", "child_num_ops", "]", ")", "\n", "self", ".", "b_soft_no_learn", "=", "torch", ".", "Tensor", "(", "b_soft_no_learn", ")", ".", "requires_grad_", "(", "False", ")", ".", "cuda", "(", ")", "\n", "# attention", "\n", "self", ".", "w_attn_1", "=", "nn", ".", "Linear", "(", "self", ".", "lstm_size", ",", "self", ".", "lstm_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_attn_2", "=", "nn", ".", "Linear", "(", "self", ".", "lstm_size", ",", "self", ".", "lstm_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "v_attn", "=", "nn", ".", "Linear", "(", "self", ".", "lstm_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "reset_param", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.micro_controller.Controller.reset_param": [[45, 49], ["micro_controller.Controller.named_parameters", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "reset_param", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'b_soft'", "not", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "param", ",", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.micro_controller.Controller.forward": [[50, 56], ["micro_controller.Controller.run_sampler"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.micro_controller.Controller.run_sampler"], ["", "", "", "def", "forward", "(", "self", ")", ":", "\n", "        ", "arc_seq_1", ",", "entropy_1", ",", "log_prob_1", ",", "c", ",", "h", "=", "self", ".", "run_sampler", "(", "use_bias", "=", "True", ")", "\n", "sample_arc", "=", "arc_seq_1", "\n", "sample_entropy", "=", "entropy_1", "\n", "sample_log_prob", "=", "log_prob_1", "\n", "return", "sample_arc", ",", "sample_log_prob", ",", "sample_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.micro_controller.Controller.run_sampler": [[57, 157], ["micro_controller.Controller.encoder", "range", "len", "numpy.zeros", "sum", "sum", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "micro_controller.Controller.lstm", "anchors.append", "anchors_w_1.append", "len", "micro_controller.Controller.lstm", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "micro_controller.Controller.view", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "micro_controller.Controller.v_attn", "micro_controller.Controller.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.multinomial", "range", "sum.append", "sum.append", "range", "prev_layers[].view().requires_grad_", "micro_controller.Controller.lstm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.multinomial().long().view", "node_list.append", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "sum.append", "sum.append", "micro_controller.Controller.encoder", "micro_controller.Controller.lstm", "anchors.append", "anchors_w_1.append", "micro_controller.Controller.encoder", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "micro_controller.Controller.w_attn_1", "F.softmax.multinomial.cpu().numpy", "torch.cross_entropy.append", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "prev_layers.append", "micro_controller.Controller.w_soft", "micro_controller.Controller.b_soft.requires_grad_", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "micro_controller.Controller.w_attn_1", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "micro_controller.Controller.w_attn_2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "F.softmax.multinomial.size", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "sum", "len", "F.softmax.multinomial.size", "prev_layers[].view", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softmax.multinomial().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "F.softmax.multinomial.cpu", "indices[].view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "str", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "indices[].view", "torch.softmax.multinomial", "F.softmax.multinomial().long().view.cpu().numpy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "F.softmax.multinomial().long().view.cpu", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax"], ["", "def", "run_sampler", "(", "self", ",", "prev_c", "=", "None", ",", "prev_h", "=", "None", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "if", "prev_c", "is", "None", ":", "\n", "# TODO: multi-layer LSTM", "\n", "            ", "prev_c", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "lstm_size", ")", ".", "cuda", "(", ")", "\n", "prev_h", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "lstm_size", ")", ".", "cuda", "(", ")", "\n", "\n", "", "inputs", "=", "self", ".", "encoder", "(", "torch", ".", "zeros", "(", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "anchors", "=", "[", "]", "\n", "anchors_w_1", "=", "[", "]", "\n", "\n", "for", "layer_id", "in", "range", "(", "2", ")", ":", "\n", "            ", "embed", "=", "inputs", "\n", "next_h", ",", "next_c", "=", "self", ".", "lstm", "(", "embed", ",", "(", "prev_h", ",", "prev_c", ")", ")", "\n", "prev_c", ",", "prev_h", "=", "next_c", ",", "next_h", "\n", "anchors", ".", "append", "(", "torch", ".", "zeros", "(", "next_h", ".", "shape", ")", ".", "cuda", "(", ")", ")", "\n", "anchors_w_1", ".", "append", "(", "self", ".", "w_attn_1", "(", "next_h", ")", ")", "\n", "\n", "", "layer_id", "=", "2", "\n", "entropy", "=", "[", "]", "\n", "log_prob", "=", "[", "]", "\n", "\n", "num_nodes", "=", "len", "(", "self", ".", "search_space", ".", "num_parents_per_node", ")", "\n", "adjacency_matrix", "=", "np", ".", "zeros", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "adjacency_matrix", "[", "0", ",", "1", "]", "=", "1", "\n", "node_list", "=", "[", "]", "\n", "\n", "while", "layer_id", "<", "len", "(", "self", ".", "search_space", ".", "num_parents_per_node", ")", ":", "\n", "            ", "prev_layers", "=", "[", "]", "\n", "\n", "# # 1. Sample the parents for each choice block", "\n", "embed", "=", "inputs", "\n", "next_h", ",", "next_c", "=", "self", ".", "lstm", "(", "embed", ",", "(", "prev_h", ",", "prev_c", ")", ")", "\n", "prev_c", ",", "prev_h", "=", "next_c", ",", "next_h", "\n", "query", "=", "torch", ".", "stack", "(", "anchors_w_1", "[", ":", "layer_id", "]", ",", "dim", "=", "1", ")", "\n", "query", "=", "query", ".", "view", "(", "layer_id", ",", "self", ".", "lstm_size", ")", "\n", "query", "=", "torch", ".", "tanh", "(", "query", "+", "self", ".", "w_attn_2", "(", "next_h", ")", ")", "\n", "query", "=", "self", ".", "v_attn", "(", "query", ")", "\n", "logits", "=", "query", ".", "view", "(", "1", ",", "layer_id", ")", "\n", "if", "self", ".", "temperature", "is", "not", "None", ":", "\n", "                ", "logits", "/=", "self", ".", "temperature", "\n", "", "if", "self", ".", "tanh_constant", "is", "not", "None", ":", "\n", "                ", "logits", "=", "self", ".", "tanh_constant", "*", "torch", ".", "tanh", "(", "logits", ")", "\n", "", "prob", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Sample the required number of parents from the multinomial distribution", "\n", "indices", "=", "prob", ".", "multinomial", "(", "num_samples", "=", "self", ".", "search_space", ".", "num_parents_per_node", "[", "str", "(", "layer_id", ")", "]", ",", "\n", "replacement", "=", "False", ")", "\n", "for", "parent", "in", "indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ":", "\n", "                ", "adjacency_matrix", "[", "parent", ",", "layer_id", "]", "=", "1", "\n", "\n", "", "curr_log_prob", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", ")", "[", "1", "]", ")", ":", "\n", "                ", "curr_log_prob", ".", "append", "(", "F", ".", "cross_entropy", "(", "logits", ",", "indices", "[", "0", ",", "i", "]", ".", "view", "(", "1", ")", ")", ")", "\n", "\n", "", "log_prob", ".", "append", "(", "sum", "(", "curr_log_prob", ")", "/", "len", "(", "curr_log_prob", ")", ")", "\n", "\n", "curr_ent", "=", "-", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ",", "prob", ")", ",", "dim", "=", "1", ")", ")", ".", "detach", "(", ")", "\n", "\n", "entropy", ".", "append", "(", "curr_ent", ")", "\n", "\n", "for", "i", "in", "range", "(", "indices", ".", "size", "(", ")", "[", "1", "]", ")", ":", "\n", "                ", "prev_layers", ".", "append", "(", "anchors", "[", "indices", "[", "0", ",", "i", "]", ".", "view", "(", "1", ")", "]", ")", "\n", "", "inputs", "=", "prev_layers", "[", "-", "1", "]", ".", "view", "(", "1", ",", "-", "1", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "# # 2. Sample the operation to be applied to the parents of the choice block", "\n", "embed", "=", "inputs", "\n", "next_h", ",", "next_c", "=", "self", ".", "lstm", "(", "embed", ",", "(", "prev_h", ",", "prev_c", ")", ")", "\n", "prev_c", ",", "prev_h", "=", "next_c", ",", "next_h", "\n", "logits", "=", "self", ".", "w_soft", "(", "next_h", ")", "+", "self", ".", "b_soft", ".", "requires_grad_", "(", ")", "\n", "if", "self", ".", "temperature", "is", "not", "None", ":", "\n", "                ", "logits", "/=", "self", ".", "temperature", "\n", "", "if", "self", ".", "tanh_constant", "is", "not", "None", ":", "\n", "                ", "op_tanh", "=", "self", ".", "tanh_constant", "/", "self", ".", "op_tanh_reduce", "\n", "logits", "=", "op_tanh", "*", "torch", ".", "tanh", "(", "logits", ")", "\n", "", "if", "use_bias", ":", "\n", "                ", "logits", "+=", "self", ".", "b_soft_no_learn", "\n", "", "prob", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "op_id", "=", "prob", ".", "multinomial", "(", "num_samples", "=", "1", ")", ".", "long", "(", ")", ".", "view", "(", "1", ")", "\n", "node_list", ".", "append", "(", "PRIMITIVES", "[", "int", "(", "op_id", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "]", ")", "\n", "\n", "curr_log_prob", "=", "F", ".", "cross_entropy", "(", "logits", ",", "op_id", ")", "\n", "log_prob", ".", "append", "(", "curr_log_prob", ")", "\n", "curr_ent", "=", "-", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ",", "prob", ")", ",", "dim", "=", "1", ")", ")", ".", "detach", "(", ")", "\n", "entropy", ".", "append", "(", "curr_ent", ")", "\n", "inputs", "=", "self", ".", "encoder", "(", "op_id", "+", "1", ")", "\n", "\n", "next_h", ",", "next_c", "=", "self", ".", "lstm", "(", "inputs", ",", "(", "prev_h", ",", "prev_c", ")", ")", "\n", "prev_c", ",", "prev_h", "=", "next_c", ",", "next_h", "\n", "anchors", ".", "append", "(", "next_h", ")", "\n", "anchors_w_1", ".", "append", "(", "self", ".", "w_attn_1", "(", "next_h", ")", ")", "\n", "inputs", "=", "self", ".", "encoder", "(", "torch", ".", "zeros", "(", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "layer_id", "+=", "1", "\n", "\n", "", "entropy", "=", "sum", "(", "entropy", ")", "\n", "log_prob", "=", "sum", "(", "log_prob", ")", "\n", "last_c", "=", "next_c", "\n", "last_h", "=", "next_h", "\n", "\n", "return", "(", "adjacency_matrix", ",", "node_list", ")", ",", "entropy", ",", "log_prob", ",", "last_c", ",", "last_h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.enas.ENAS.__init__": [[80, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", ",", "controller", ",", "seed", ",", "save_dir", ",", "search_space", ")", ":", "\n", "        ", "self", ".", "save_dir", "=", "save_dir", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "controller", "=", "controller", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "self", ".", "iters", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.enas.ENAS.save": [[89, 95], ["enas.ENAS.model.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "# Save one-shot model", "\n", "        ", "self", ".", "model", ".", "save", "(", "epoch", "=", "epoch", ")", "\n", "\n", "# Save controller", "\n", "torch", ".", "save", "(", "self", ".", "controller", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'controller_epoch_{}.pt'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.enas.ENAS.run": [[96, 110], ["range", "writer.close", "enas.ENAS.model.train_model", "enas.ENAS.model.train_controller", "enas.ENAS.get_eval_arch"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.enas_child.ENASChild.train_model", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.enas_child.ENASChild.train_controller", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Random_NAS.get_eval_arch"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "# 1. Train the one-shot model", "\n", "            ", "self", ".", "model", ".", "train_model", "(", "epoch", "=", "epoch", ")", "\n", "\n", "# 2. Train the controller", "\n", "self", ".", "model", ".", "train_controller", "(", ")", "\n", "\n", "# Evaluate the model", "\n", "self", ".", "get_eval_arch", "(", "epoch", "=", "epoch", ")", "\n", "\n", "# # Save the one-shot model", "\n", "# self.save(epoch)", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.enas.ENAS.get_eval_arch": [[111, 167], ["range", "sorted", "enas.ENAS.model.controller", "sorted.append", "open", "pickle.dump", "range", "sorted", "logging.info", "logging.info", "nasbench_analysis.eval_darts_one_shot_model_in_nasbench.eval_model", "numpy.random.choice", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "best_rounds.append", "best_rounds.append", "open", "pickle.dump", "enas.ENAS.model.evaluate", "os.path.join", "inspect.getfullargspec", "sorted.append", "list", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "os.path.join", "enas.ENAS.model.evaluate", "range", "print", "str"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.test.evaluate", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.test.evaluate"], ["", "def", "get_eval_arch", "(", "self", ",", "epoch", ",", "rounds", "=", "None", ")", ":", "\n", "        ", "best_rounds", "=", "[", "]", "\n", "sample_vals", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "# Sample an architecture from the controller", "\n", "            ", "arch", ",", "_", ",", "_", "=", "self", ".", "model", ".", "controller", "(", ")", "\n", "try", ":", "\n", "                ", "ppl", "=", "self", ".", "model", ".", "evaluate", "(", "arch", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "ppl", "=", "1000000", "\n", "# logging.info(arch)", "\n", "# logging.info('objective_val: %.3f' % ppl)", "\n", "", "sample_vals", ".", "append", "(", "(", "arch", ",", "ppl", ")", ")", "\n", "\n", "", "sample_vals", "=", "sorted", "(", "sample_vals", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "\n", "# Save sample validations", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'sample_val_architecture_epoch_{}.obj'", ".", "format", "(", "epoch", ")", ")", ",", "\n", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "sample_vals", ",", "f", ")", "\n", "\n", "", "full_vals", "=", "[", "]", "\n", "if", "'split'", "in", "inspect", ".", "getfullargspec", "(", "self", ".", "model", ".", "evaluate", ")", ".", "args", ":", "\n", "            ", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "arch", "=", "sample_vals", "[", "i", "]", "[", "0", "]", "\n", "try", ":", "\n", "                    ", "ppl", "=", "self", ".", "model", ".", "evaluate", "(", "arch", ",", "split", "=", "'valid'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "ppl", "=", "1000000", "\n", "", "full_vals", ".", "append", "(", "(", "arch", ",", "ppl", ")", ")", "\n", "", "full_vals", "=", "sorted", "(", "full_vals", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "logging", ".", "info", "(", "'best arch: %s, best arch valid performance: %.3f'", "%", "(", "\n", "' '", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "full_vals", "[", "0", "]", "[", "0", "]", "]", ")", ",", "full_vals", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "\n", "# benchmark", "\n", "logging", ".", "info", "(", "'STARTING EVALUATION'", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "naseval", ".", "eval_model", "(", "\n", "config", "=", "args", ".", "__dict__", ",", "model", "=", "full_vals", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "3", ")", ")", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "np", ".", "mean", "(", "test", ")", ",", "np", ".", "mean", "(", "valid", ")", ",", "np", ".", "mean", "(", "runtime", ")", ",", "np", ".", "mean", "(", "params", ")", "\n", "logging", ".", "info", "(", "'TEST ERROR: %.3f | VALID ERROR: %.3f | RUNTIME: %f | PARAMS: %d'", "\n", "%", "(", "test", ",", "valid", ",", "runtime", ",", "params", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/test'", ",", "test", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/valid'", ",", "valid", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/runtime'", ",", "runtime", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/params'", ",", "params", ",", "epoch", ")", "\n", "best_rounds", ".", "append", "(", "full_vals", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "best_rounds", ".", "append", "(", "sample_vals", "[", "0", "]", ")", "\n", "\n", "# Save the fully evaluated architectures", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'full_val_architecture_epoch_{}.obj'", ".", "format", "(", "epoch", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "full_vals", ",", "f", ")", "\n", "", "return", "best_rounds", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.data.RepeatedDataLoader.__init__": [[74, 77], ["data.RepeatedDataLoader.data_loader.__iter__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.BatchSentLoader.__iter__"], ["    ", "def", "__init__", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "data_iter", "=", "self", ".", "data_loader", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.data.RepeatedDataLoader.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.data.RepeatedDataLoader.next_batch": [[81, 88], ["data.RepeatedDataLoader.data_iter.__next__", "data.RepeatedDataLoader.data_loader.__iter__", "data.RepeatedDataLoader.data_iter.__next__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.BatchSentLoader.__next__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.BatchSentLoader.__iter__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.BatchSentLoader.__next__"], ["", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "batch", "=", "self", ".", "data_iter", ".", "__next__", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "data_iter", "=", "self", ".", "data_loader", ".", "__iter__", "(", ")", "\n", "batch", "=", "self", ".", "data_iter", ".", "__next__", "(", ")", "\n", "", "return", "batch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.data.get_loaders": [[9, 71], ["torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "list", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "data.RepeatedDataLoader", "data.RepeatedDataLoader", "range", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "len", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.SubsetRandomSampler", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "get_loaders", "(", "args", ")", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "MEAN", ",", "\n", "std", "=", "STD", ",", "\n", ")", ",", "\n", "]", ")", "\n", "train_dataset", "=", "CIFAR10", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "\n", ")", "\n", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "train_dataset", ")", ")", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "SubsetRandomSampler", "(", "indices", "[", ":", "-", "5000", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", "\n", "\n", "reward_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "SubsetRandomSampler", "(", "indices", "[", "-", "5000", ":", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", "\n", "\n", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "MEAN", ",", "\n", "std", "=", "STD", ",", "\n", ")", ",", "\n", "]", ")", "\n", "valid_dataset", "=", "CIFAR10", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "False", ",", "\n", "transform", "=", "valid_transform", ",", "\n", ")", "\n", "\n", "valid_loader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", "\n", "\n", "# repeat_train_loader = RepeatedDataLoader(train_loader)", "\n", "repeat_reward_loader", "=", "RepeatedDataLoader", "(", "reward_loader", ")", "\n", "repeat_valid_loader", "=", "RepeatedDataLoader", "(", "valid_loader", ")", "\n", "\n", "return", "train_loader", ",", "repeat_reward_loader", ",", "repeat_valid_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.enas_child.ENASChild.__init__": [[12, 39], ["optimizers.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.__init__", "optimizers.enas.data.get_loaders", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.Adam", "enas_child.ENASChild.model.parameters", "float", "controller.parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.data.get_loaders"], ["    ", "def", "__init__", "(", "self", ",", "controller", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ENASChild", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "args", "[", "'entropy_weight'", "]", "=", "0.0001", "\n", "self", ".", "args", "[", "'adam_learning_rate'", "]", "=", "0.00035", "\n", "self", ".", "args", "[", "'bl_dec'", "]", "=", "0.99", "\n", "self", ".", "args", "[", "'weight_decay'", "]", "=", "1e-4", "\n", "\n", "self", ".", "controller", "=", "controller", "\n", "\n", "self", ".", "train_queue", ",", "self", ".", "reward_queue", ",", "self", ".", "valid_queue", "=", "get_loaders", "(", "self", ".", "args", ")", "\n", "\n", "self", ".", "baseline", "=", "0", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "self", ".", "optimizer", ",", "float", "(", "self", ".", "args", ".", "epochs", ")", ",", "eta_min", "=", "self", ".", "args", ".", "learning_rate_min", ")", "\n", "\n", "self", ".", "controller_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "controller", ".", "parameters", "(", ")", ",", "\n", "self", ".", "args", ".", "adam_learning_rate", ",", "\n", "betas", "=", "(", "0.1", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-3", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.enas_child.ENASChild.train_model": [[41, 79], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "enumerate", "enas_child.ENASChild.evaluate", "logging.info", "enas_child.ENASChild.model.train", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "enas_child.ENASChild.optimizer.zero_grad", "enas_child.ENASChild.controller.eval", "enas_child.ENASChild.controller", "enas_child.ENASChild.get_weights_from_arch", "enas_child.ENASChild.set_arch_model_weights", "enas_child.ENASChild.model", "enas_child.ENASChild.criterion", "enas_child.ENASChild.backward", "torch.nn.utils.clip_grad_norm_", "enas_child.ENASChild.optimizer.step", "input.cuda.cuda.size", "optimizers.darts.utils.accuracy", "enas_child.ENASChild.objs.update", "enas_child.ENASChild.top1.update", "enas_child.ENASChild.top5.update", "enas_child.ENASChild.scheduler.step", "enas_child.ENASChild.model.parameters", "enas_child.ENASChild.data.item", "prec1.data.item", "prec5.data.item", "logging.info"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.test.evaluate", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.get_weights_from_arch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.set_arch_model_weights", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step"], ["", "def", "train_model", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "self", ".", "train_queue", ")", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "controller", ".", "eval", "(", ")", "\n", "\n", "# Sample an architecture from the controller", "\n", "arch", ",", "_", ",", "_", "=", "self", ".", "controller", "(", ")", "\n", "arch_parameters", "=", "self", ".", "get_weights_from_arch", "(", "arch", ")", "\n", "self", ".", "set_arch_model_weights", "(", "arch_parameters", ")", "\n", "\n", "# Evaluate the architecture", "\n", "logits", "=", "self", ".", "model", "(", "input", ",", "discrete", "=", "True", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "grad_clip", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "self", ".", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "self", ".", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "self", ".", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "self", ".", "args", ".", "report_freq", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "self", ".", "objs", ".", "avg", ",", "self", ".", "top1", ".", "avg", ",", "self", ".", "top5", ".", "avg", ")", "\n", "", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "valid_err", "=", "self", ".", "evaluate", "(", "arch", ")", "\n", "logging", ".", "info", "(", "'epoch %d  |  train_acc %f  |  valid_acc %f'", "%", "(", "epoch", ",", "self", ".", "top1", ".", "avg", ",", "1", "-", "valid_err", ")", ")", "\n", "return", "self", ".", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.enas_child.ENASChild.train_controller": [[80, 128], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "range", "enas_child.ENASChild.reward_queue.next_batch", "enas_child.ENASChild.model.eval", "input.cuda.cuda.size", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "enas_child.ENASChild.controller_optimizer.zero_grad", "enas_child.ENASChild.controller.train", "enas_child.ENASChild.controller", "enas_child.ENASChild.get_weights_from_arch", "enas_child.ENASChild.set_arch_model_weights", "torch.sum", "loss.mean.mean.mean", "loss.mean.mean.backward", "enas_child.ENASChild.controller_optimizer.step", "optimizers.darts.utils.AvgrageMeter.update", "optimizers.darts.utils.AvgrageMeter.update", "optimizers.darts.utils.AvgrageMeter.update", "torch.no_grad", "enas_child.ENASChild.model().detach", "loss.mean.mean.item", "reward.item", "entropy.item", "logging.info", "optimizers.darts.utils.accuracy", "enas_child.ENASChild.baseline.item", "enas_child.ENASChild.model"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.data.RepeatedDataLoader.next_batch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.get_weights_from_arch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.set_arch_model_weights", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy"], ["", "def", "train_controller", "(", "self", ")", ":", "\n", "        ", "total_loss", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "total_reward", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "total_entropy", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "for", "step", "in", "range", "(", "300", ")", ":", "\n", "            ", "input", ",", "target", "=", "self", ".", "reward_queue", ".", "next_batch", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "controller_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "self", ".", "controller", ".", "train", "(", ")", "\n", "# Sample an architecture from the controller and plug it into the one-shot model.", "\n", "arch", ",", "log_prob", ",", "entropy", "=", "self", ".", "controller", "(", ")", "\n", "arch_parameters", "=", "self", ".", "get_weights_from_arch", "(", "arch", ")", "\n", "self", ".", "set_arch_model_weights", "(", "arch_parameters", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Make sure that no gradients are propagated through the one-shot model", "\n", "# for the controller updates", "\n", "                ", "logits", "=", "self", ".", "model", "(", "input", ",", "discrete", "=", "True", ")", ".", "detach", "(", ")", "\n", "reward", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ")", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "args", ".", "entropy_weight", "is", "not", "None", ":", "\n", "                ", "reward", "+=", "self", ".", "args", ".", "entropy_weight", "*", "entropy", "\n", "\n", "", "log_prob", "=", "torch", ".", "sum", "(", "log_prob", ")", "\n", "if", "self", ".", "baseline", "is", "None", ":", "\n", "                ", "self", ".", "baseline", "=", "reward", "\n", "", "self", ".", "baseline", "=", "self", ".", "args", ".", "bl_dec", "*", "self", ".", "baseline", "+", "(", "1", "-", "self", ".", "args", ".", "bl_dec", ")", "*", "reward", "\n", "\n", "loss", "=", "log_prob", "*", "(", "reward", "-", "self", ".", "baseline", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "controller_optimizer", ".", "step", "(", ")", "\n", "\n", "total_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "total_reward", ".", "update", "(", "reward", ".", "item", "(", ")", ",", "n", ")", "\n", "total_entropy", ".", "update", "(", "entropy", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "self", ".", "args", ".", "report_freq", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'controller %03d %e %f %f'", ",", "step", ",", "total_loss", ".", "avg", ",", "total_reward", ".", "avg", ",", "self", ".", "baseline", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.enas_child.ENASChild.evaluate_sampled_architecture": [[129, 132], ["enas_child.ENASChild.controller", "enas_child.ENASChild.evaluate"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.test.evaluate"], ["", "", "", "def", "evaluate_sampled_architecture", "(", "self", ")", ":", "\n", "        ", "arch", ",", "log_prob", ",", "entropy", "=", "self", ".", "controller", "(", ")", "\n", "return", "self", ".", "evaluate", "(", "arch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.enas_child.ENASChild.evaluate": [[133, 169], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "enas_child.ENASChild.get_weights_from_arch", "enas_child.ENASChild.set_arch_model_weights", "enas_child.ENASChild.model.eval", "enas_child.ENASChild.controller.eval", "range", "len", "enas_child.ENASChild.valid_queue.next_batch", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "enas_child.ENASChild.model", "enas_child.ENASChild.criterion", "optimizers.darts.utils.accuracy", "input.cuda.cuda.size", "optimizers.darts.utils.AvgrageMeter.update", "optimizers.darts.utils.AvgrageMeter.update", "optimizers.darts.utils.AvgrageMeter.update", "enas_child.ENASChild.data.item", "prec1.data.item", "prec5.data.item"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.get_weights_from_arch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.set_arch_model_weights", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.data.RepeatedDataLoader.next_batch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["", "def", "evaluate", "(", "self", ",", "arch", ",", "split", "=", "None", ")", ":", "\n", "# Return error since we want to minimize obj val", "\n", "# logging.info(arch)", "\n", "        ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "weights", "=", "self", ".", "get_weights_from_arch", "(", "arch", ")", "\n", "self", ".", "set_arch_model_weights", "(", "weights", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "controller", ".", "eval", "(", ")", "\n", "\n", "if", "split", "is", "None", ":", "\n", "            ", "n_batches", "=", "1", "\n", "", "else", ":", "\n", "            ", "n_batches", "=", "len", "(", "self", ".", "valid_queue", ")", "\n", "\n", "", "for", "step", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "input", ",", "target", "=", "self", ".", "valid_queue", ".", "next_batch", "(", ")", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "input", ",", "discrete", "=", "True", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "# if step % self.args.report_freq == 0:", "\n", "# logging.info('valid %03d %e %f %f', step, objs.avg, top1.avg, top5.avg)", "\n", "\n", "", "return", "1", "-", "0.01", "*", "top1", ".", "avg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.utils.keydefaultdict.__missing__": [[11, 17], ["KeyError", "utils.keydefaultdict.default_factory"], "methods", ["None"], ["\n", "INPUT", "=", "'input'", "\n", "OUTPUT", "=", "'output'", "\n", "CONV1X1", "=", "'conv1x1-bn-relu'", "\n", "CONV3X3", "=", "'conv3x3-bn-relu'", "\n", "MAXPOOL3X3", "=", "'maxpool3x3'", "\n", "OUTPUT_NODE", "=", "6", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.utils.get_variable": [[19, 27], ["type", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor.cuda"], "function", ["None"], ["\n", "class", "NasbenchWrapper", "(", "api", ".", "NASBench", ")", ":", "\n", "    ", "\"\"\"Small modification to the NASBench class, to return all three architecture evaluations at\n    the same time, instead of samples.\"\"\"", "\n", "\n", "def", "query", "(", "self", ",", "model_spec", ",", "epochs", "=", "108", ",", "stop_halfway", "=", "False", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Rung.__init__": [[61, 70], ["set", "set", "random_weight_share.Rung.parents.add", "random_weight_share.Rung.children.add"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rung", ",", "nodes", ")", ":", "\n", "        ", "self", ".", "parents", "=", "set", "(", ")", "\n", "self", ".", "children", "=", "set", "(", ")", "\n", "self", ".", "rung", "=", "rung", "\n", "for", "node", "in", "nodes", ":", "\n", "            ", "n", "=", "nodes", "[", "node", "]", "\n", "if", "n", ".", "rung", "==", "self", ".", "rung", ":", "\n", "                ", "self", ".", "parents", ".", "add", "(", "n", ".", "parent", ")", "\n", "self", ".", "children", ".", "add", "(", "n", ".", "node_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Node.__init__": [[73, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parent", ",", "arch", ",", "node_id", ",", "rung", ")", ":", "\n", "        ", "self", ".", "parent", "=", "parent", "\n", "self", ".", "arch", "=", "arch", "\n", "self", ".", "node_id", "=", "node_id", "\n", "self", ".", "rung", "=", "rung", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Node.to_dict": [[79, 84], ["hasattr"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "out", "=", "{", "'parent'", ":", "self", ".", "parent", ",", "'arch'", ":", "self", ".", "arch", ",", "'node_id'", ":", "self", ".", "node_id", ",", "'rung'", ":", "self", ".", "rung", "}", "\n", "if", "hasattr", "(", "self", ",", "'objective_val'", ")", ":", "\n", "            ", "out", "[", "'objective_val'", "]", "=", "self", ".", "objective_val", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Random_NAS.__init__": [[87, 98], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "B", ",", "model", ",", "seed", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_dir", "=", "save_dir", "\n", "\n", "self", ".", "B", "=", "B", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "self", ".", "iters", "=", "0", "\n", "\n", "self", ".", "arms", "=", "{", "}", "\n", "self", ".", "node_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Random_NAS.print_summary": [[99, 107], ["logging.info", "sorted", "random_weight_share.Random_NAS.model.evaluate", "logging.info", "logging.info", "hasattr"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.test.evaluate"], ["", "def", "print_summary", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "self", ".", "parents", ")", "\n", "objective_vals", "=", "[", "(", "n", ",", "self", ".", "arms", "[", "n", "]", ".", "objective_val", ")", "for", "n", "in", "self", ".", "arms", "if", "hasattr", "(", "self", ".", "arms", "[", "n", "]", ",", "'objective_val'", ")", "]", "\n", "objective_vals", "=", "sorted", "(", "objective_vals", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "best_arm", "=", "self", ".", "arms", "[", "objective_vals", "[", "0", "]", "[", "0", "]", "]", "\n", "val_ppl", "=", "self", ".", "model", ".", "evaluate", "(", "best_arm", ".", "arch", ",", "split", "=", "'valid'", ")", "\n", "logging", ".", "info", "(", "objective_vals", ")", "\n", "logging", ".", "info", "(", "'best valid ppl: %.2f'", "%", "val_ppl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Random_NAS.get_arch": [[108, 113], ["random_weight_share.Random_NAS.model.sample_arch", "random_weight_share.Node"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.sample_arch"], ["", "def", "get_arch", "(", "self", ")", ":", "\n", "        ", "arch", "=", "self", ".", "model", ".", "sample_arch", "(", ")", "\n", "self", ".", "arms", "[", "self", ".", "node_id", "]", "=", "Node", "(", "self", ".", "node_id", ",", "arch", ",", "self", ".", "node_id", ",", "0", ")", "\n", "self", ".", "node_id", "+=", "1", "\n", "return", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Random_NAS.save": [[114, 122], ["shutil.copyfile", "random_weight_share.Random_NAS.model.save", "random_weight_share.Random_NAS.arms[].to_dict", "open", "pickle.dump", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Node.to_dict"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "to_save", "=", "{", "a", ":", "self", ".", "arms", "[", "a", "]", ".", "to_dict", "(", ")", "for", "a", "in", "self", ".", "arms", "}", "\n", "# Only replace file if save successful so don't lose results of last pickle save", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'results_tmp.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "to_save", ",", "f", ")", "\n", "", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'results_tmp.pkl'", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'results.pkl'", ")", ")", "\n", "\n", "self", ".", "model", ".", "save", "(", "epoch", "=", "self", ".", "model", ".", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Random_NAS.run": [[123, 134], ["random_weight_share.Random_NAS.get_arch", "random_weight_share.Random_NAS.model.train_batch", "random_weight_share.Random_NAS.get_eval_arch"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Random_NAS.get_arch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.train_batch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Random_NAS.get_eval_arch"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "epochs", "=", "0", "\n", "# self.get_eval_arch(1)", "\n", "while", "self", ".", "iters", "<", "self", ".", "B", ":", "\n", "            ", "arch", "=", "self", ".", "get_arch", "(", ")", "\n", "self", ".", "model", ".", "train_batch", "(", "arch", ")", "\n", "self", ".", "iters", "+=", "1", "\n", "# If epoch has changed then evaluate the network.", "\n", "if", "epochs", "<", "self", ".", "model", ".", "epochs", ":", "\n", "                ", "epochs", "=", "self", ".", "model", ".", "epochs", "\n", "self", ".", "get_eval_arch", "(", "1", ")", "\n", "# if self.iters % 500 == 0:", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.random_weight_share.Random_NAS.get_eval_arch": [[138, 195], ["range", "max", "range", "sorted", "int", "random_weight_share.Random_NAS.model.sample_arch", "sorted.append", "open", "pickle.dump", "range", "sorted", "logging.info", "best_rounds.append", "logging.info", "nasbench_analysis.eval_darts_one_shot_model_in_nasbench.eval_model", "numpy.random.choice", "logging.info", "best_rounds.append", "open", "pickle.dump", "random_weight_share.Random_NAS.model.evaluate", "os.path.join", "inspect.getfullargspec", "sorted.append", "list", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "os.path.join", "random_weight_share.Random_NAS.model.evaluate", "range", "str"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.sample_arch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.test.evaluate", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.test.evaluate"], ["", "", "", "def", "get_eval_arch", "(", "self", ",", "epoch", ",", "rounds", "=", "None", ")", ":", "\n", "# n_rounds = int(self.B / 7 / 1000)", "\n", "        ", "if", "rounds", "is", "None", ":", "\n", "            ", "n_rounds", "=", "max", "(", "1", ",", "int", "(", "self", ".", "B", "/", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "n_rounds", "=", "rounds", "\n", "", "best_rounds", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "n_rounds", ")", ":", "\n", "            ", "sample_vals", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "                ", "arch", "=", "self", ".", "model", ".", "sample_arch", "(", ")", "\n", "try", ":", "\n", "                    ", "ppl", "=", "self", ".", "model", ".", "evaluate", "(", "arch", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "ppl", "=", "1000000", "\n", "# logging.info(arch)", "\n", "# logging.info('objective_val: %.3f' % ppl)", "\n", "", "sample_vals", ".", "append", "(", "(", "arch", ",", "ppl", ")", ")", "\n", "\n", "# Save sample validations", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\n", "'sample_val_architecture_epoch_{}.obj'", ".", "format", "(", "self", ".", "model", ".", "epochs", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "sample_vals", ",", "f", ")", "\n", "\n", "", "sample_vals", "=", "sorted", "(", "sample_vals", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "\n", "full_vals", "=", "[", "]", "\n", "if", "'split'", "in", "inspect", ".", "getfullargspec", "(", "self", ".", "model", ".", "evaluate", ")", ".", "args", ":", "\n", "                ", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                    ", "arch", "=", "sample_vals", "[", "i", "]", "[", "0", "]", "\n", "try", ":", "\n", "                        ", "ppl", "=", "self", ".", "model", ".", "evaluate", "(", "arch", ",", "split", "=", "'valid'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "ppl", "=", "1000000", "\n", "", "full_vals", ".", "append", "(", "(", "arch", ",", "ppl", ")", ")", "\n", "", "full_vals", "=", "sorted", "(", "full_vals", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "logging", ".", "info", "(", "'best arch: %s, best arch valid performance: %.3f'", "%", "(", "\n", "' '", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "full_vals", "[", "0", "]", "[", "0", "]", "]", ")", ",", "full_vals", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "best_rounds", ".", "append", "(", "full_vals", "[", "0", "]", ")", "\n", "\n", "# benchmark", "\n", "logging", ".", "info", "(", "'STARTING EVALUATION'", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "naseval", ".", "eval_model", "(", "\n", "config", "=", "args", ".", "__dict__", ",", "model", "=", "full_vals", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "3", ")", ")", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "np", ".", "mean", "(", "test", ")", ",", "np", ".", "mean", "(", "valid", ")", ",", "np", ".", "mean", "(", "runtime", ")", ",", "np", ".", "mean", "(", "params", ")", "\n", "logging", ".", "info", "(", "'TEST ERROR: %.3f | VALID ERROR: %.3f | RUNTIME: %f | PARAMS: %d'", "\n", "%", "(", "test", ",", "valid", ",", "runtime", ",", "params", ")", ")", "\n", "", "else", ":", "\n", "                ", "best_rounds", ".", "append", "(", "sample_vals", "[", "0", "]", ")", "\n", "\n", "# Save the fully evaluated architectures", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\n", "'full_val_architecture_epoch_{}.obj'", ".", "format", "(", "self", ".", "model", ".", "epochs", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "full_vals", ",", "f", ")", "\n", "", "", "return", "best_rounds", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.AttrDict.__init__": [[22, 25], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.__init__": [[28, 144], ["darts_wrapper_discrete.AttrDict", "os.path.join", "numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "optimizers.darts.utils._data_transforms_cifar10", "torchvision.CIFAR10", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "optimizers.darts.utils._data_transforms_cifar10", "torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "iter", "time.time", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "criterion.cuda.cuda.cuda", "optimizers.darts.model_search.Network", "model.cuda.cuda.cuda", "logging.info", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "model.cuda.cuda.parameters", "logging.info", "sum", "logging.info", "logging.info", "os.path.exists", "range", "numpy.floor", "optimizers.darts.utils.count_parameters_in_MB", "darts_wrapper_discrete.DartsWrapper.model.parameters", "float", "int", "logging.info", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "range", "p.nelement", "open", "json.dump", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "numpy.random.seed", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "numpy.random.seed", "darts_wrapper_discrete.DartsWrapper.scheduler.step", "x.data.nelement", "len", "model.cuda.cuda.parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step"], ["    ", "def", "__init__", "(", "self", ",", "save_path", ",", "seed", ",", "batch_size", ",", "grad_clip", ",", "epochs", ",", "gpu", ",", "num_intermediate_nodes", ",", "\n", "search_space", ",", "cutout", ",", "resume_iter", "=", "None", ",", "init_channels", "=", "16", ")", ":", "\n", "        ", "args", "=", "{", "}", "\n", "args", "[", "'data'", "]", "=", "'../../data'", "\n", "args", "[", "'epochs'", "]", "=", "epochs", "\n", "args", "[", "'learning_rate'", "]", "=", "0.025", "\n", "args", "[", "'batch_size'", "]", "=", "batch_size", "\n", "args", "[", "'learning_rate_min'", "]", "=", "0.001", "\n", "args", "[", "'momentum'", "]", "=", "0.9", "\n", "args", "[", "'weight_decay'", "]", "=", "3e-4", "\n", "args", "[", "'init_channels'", "]", "=", "init_channels", "\n", "# Adapted to nasbench", "\n", "args", "[", "'layers'", "]", "=", "9", "\n", "args", "[", "'drop_path_prob'", "]", "=", "0.3", "\n", "args", "[", "'grad_clip'", "]", "=", "grad_clip", "\n", "args", "[", "'train_portion'", "]", "=", "0.5", "\n", "args", "[", "'seed'", "]", "=", "seed", "\n", "args", "[", "'log_interval'", "]", "=", "50", "\n", "args", "[", "'save'", "]", "=", "save_path", "\n", "args", "[", "'gpu'", "]", "=", "gpu", "\n", "args", "[", "'cuda'", "]", "=", "True", "\n", "args", "[", "'cutout'", "]", "=", "cutout", "\n", "args", "[", "'cutout_length'", "]", "=", "16", "\n", "args", "[", "'report_freq'", "]", "=", "50", "\n", "args", "[", "'output_weights'", "]", "=", "True", "\n", "args", "[", "'steps'", "]", "=", "num_intermediate_nodes", "\n", "args", "[", "'search_space'", "]", "=", "search_space", ".", "search_space_number", "\n", "self", ".", "search_space", "=", "search_space", "\n", "args", "=", "AttrDict", "(", "args", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# Dump the config of the run, but if only if it doesn't yet exist", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'config.json'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "            ", "with", "open", "(", "config_path", ",", "'w'", ")", "as", "fp", ":", "\n", "                ", "json", ".", "dump", "(", "args", ".", "__dict__", ",", "fp", ")", "\n", "", "", "self", ".", "seed", "=", "seed", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "\n", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "self", ".", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "num_workers", "=", "0", ",", "worker_init_fn", "=", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", ")", "\n", "\n", "self", ".", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "num_workers", "=", "0", ",", "worker_init_fn", "=", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", ")", "\n", "\n", "_", ",", "test_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "test_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "self", ".", "test_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "self", ".", "train_iter", "=", "iter", "(", "self", ".", "train_queue", ")", "\n", "self", ".", "valid_iter", "=", "iter", "(", "self", ".", "valid_queue", ")", "\n", "\n", "self", ".", "steps", "=", "0", "\n", "self", ".", "epochs", "=", "0", "\n", "self", ".", "total_loss", "=", "0", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "10", ",", "args", ".", "layers", ",", "self", ".", "criterion", ",", "output_weights", "=", "args", ".", "output_weights", ",", "\n", "search_space", "=", "search_space", ",", "steps", "=", "args", ".", "steps", ")", "\n", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ")", "\n", "\n", "if", "resume_iter", "is", "not", "None", ":", "\n", "            ", "self", ".", "steps", "=", "resume_iter", "\n", "self", ".", "epochs", "=", "int", "(", "resume_iter", "/", "len", "(", "self", ".", "train_queue", ")", ")", "\n", "logging", ".", "info", "(", "\"Resuming from epoch %d\"", "%", "self", ".", "epochs", ")", "\n", "self", ".", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "                ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "size", "=", "0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "size", "+=", "p", ".", "nelement", "(", ")", "\n", "", "logging", ".", "info", "(", "'param size: {}'", ".", "format", "(", "size", ")", ")", "\n", "\n", "total_params", "=", "sum", "(", "x", ".", "data", ".", "nelement", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", ")", "\n", "logging", ".", "info", "(", "'Args: {}'", ".", "format", "(", "args", ")", ")", "\n", "logging", ".", "info", "(", "'Model total parameters: {}'", ".", "format", "(", "total_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.train_batch": [[145, 191], ["darts_wrapper_discrete.DartsWrapper.get_weights_from_arch", "darts_wrapper_discrete.DartsWrapper.set_arch_model_weights", "next", "darts_wrapper_discrete.DartsWrapper.model.train", "input.cuda.cuda.size", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "darts_wrapper_discrete.DartsWrapper.optimizer.zero_grad", "darts_wrapper_discrete.DartsWrapper.model", "darts_wrapper_discrete.DartsWrapper.criterion", "darts_wrapper_discrete.DartsWrapper.backward", "torch.utils.clip_grad_norm", "torch.utils.clip_grad_norm", "torch.utils.clip_grad_norm", "darts_wrapper_discrete.DartsWrapper.optimizer.step", "optimizers.darts.utils.accuracy", "darts_wrapper_discrete.DartsWrapper.objs.update", "darts_wrapper_discrete.DartsWrapper.top1.update", "darts_wrapper_discrete.DartsWrapper.top5.update", "darts_wrapper_discrete.DartsWrapper.scheduler.step", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "darts_wrapper_discrete.DartsWrapper.scheduler.get_lr", "len", "darts_wrapper_discrete.DartsWrapper.model.parameters", "darts_wrapper_discrete.DartsWrapper.data.item", "prec1.data.item", "prec5.data.item", "logging.info", "iter", "darts_wrapper_discrete.DartsWrapper.evaluate", "logging.info", "darts_wrapper_discrete.DartsWrapper.save", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.get_weights_from_arch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.set_arch_model_weights", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.test.evaluate", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save"], ["", "def", "train_batch", "(", "self", ",", "arch", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "if", "self", ".", "steps", "%", "len", "(", "self", ".", "train_queue", ")", "==", "0", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "", "lr", "=", "self", ".", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n", "weights", "=", "self", ".", "get_weights_from_arch", "(", "arch", ")", "\n", "self", ".", "set_arch_model_weights", "(", "weights", ")", "\n", "\n", "step", "=", "self", ".", "steps", "%", "len", "(", "self", ".", "train_queue", ")", "\n", "input", ",", "target", "=", "next", "(", "self", ".", "train_iter", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# get a random_ws minibatch from the search queue with replacement", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", "=", "self", ".", "model", "(", "input", ",", "discrete", "=", "True", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "self", ".", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "self", ".", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "self", ".", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "self", ".", "objs", ".", "avg", ",", "self", ".", "top1", ".", "avg", ",", "self", ".", "top5", ".", "avg", ")", "\n", "\n", "", "self", ".", "steps", "+=", "1", "\n", "if", "self", ".", "steps", "%", "len", "(", "self", ".", "train_queue", ")", "==", "0", ":", "\n", "# Save the model weights", "\n", "            ", "self", ".", "epochs", "+=", "1", "\n", "self", ".", "train_iter", "=", "iter", "(", "self", ".", "train_queue", ")", "\n", "valid_err", "=", "self", ".", "evaluate", "(", "arch", ")", "\n", "logging", ".", "info", "(", "'epoch %d  |  train_acc %f  |  valid_acc %f'", "%", "(", "self", ".", "epochs", ",", "self", ".", "top1", ".", "avg", ",", "1", "-", "valid_err", ")", ")", "\n", "self", ".", "save", "(", "epoch", "=", "self", ".", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.evaluate": [[192, 232], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "darts_wrapper_discrete.DartsWrapper.get_weights_from_arch", "darts_wrapper_discrete.DartsWrapper.set_arch_model_weights", "darts_wrapper_discrete.DartsWrapper.model.eval", "range", "len", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "darts_wrapper_discrete.DartsWrapper.model", "darts_wrapper_discrete.DartsWrapper.criterion", "optimizers.darts.utils.accuracy", "input.cuda.cuda.size", "optimizers.darts.utils.AvgrageMeter.update", "optimizers.darts.utils.AvgrageMeter.update", "optimizers.darts.utils.AvgrageMeter.update", "next", "darts_wrapper_discrete.DartsWrapper.data.item", "prec1.data.item", "prec5.data.item", "logging.info", "iter", "next"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.get_weights_from_arch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.set_arch_model_weights", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["", "", "def", "evaluate", "(", "self", ",", "arch", ",", "split", "=", "None", ")", ":", "\n", "# Return error since we want to minimize obj val", "\n", "# logging.info(arch)", "\n", "        ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "weights", "=", "self", ".", "get_weights_from_arch", "(", "arch", ")", "\n", "self", ".", "set_arch_model_weights", "(", "weights", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "if", "split", "is", "None", ":", "\n", "            ", "n_batches", "=", "10", "\n", "", "else", ":", "\n", "            ", "n_batches", "=", "len", "(", "self", ".", "valid_queue", ")", "\n", "\n", "", "for", "step", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "input", ",", "target", "=", "next", "(", "self", ".", "valid_iter", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logging", ".", "info", "(", "'looping back over valid set'", ")", "\n", "self", ".", "valid_iter", "=", "iter", "(", "self", ".", "valid_queue", ")", "\n", "input", ",", "target", "=", "next", "(", "self", ".", "valid_iter", ")", "\n", "", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "input", ",", "discrete", "=", "True", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "# if step % self.args.report_freq == 0:", "\n", "#     logging.info('valid %03d %e %f %f', step, objs.avg, top1.avg, top5.avg)", "\n", "\n", "", "return", "1", "-", "0.01", "*", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.evaluate_test": [[233, 273], ["logging.info", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "darts_wrapper_discrete.DartsWrapper.get_weights_from_arch", "darts_wrapper_discrete.DartsWrapper.set_arch_model_weights", "darts_wrapper_discrete.DartsWrapper.model.eval", "range", "len", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "darts_wrapper_discrete.DartsWrapper.model", "darts_wrapper_discrete.DartsWrapper.criterion", "optimizers.darts.utils.accuracy", "input.cuda.cuda.size", "optimizers.darts.utils.AvgrageMeter.update", "optimizers.darts.utils.AvgrageMeter.update", "optimizers.darts.utils.AvgrageMeter.update", "next", "darts_wrapper_discrete.DartsWrapper.data.item", "prec1.data.item", "prec5.data.item", "logging.info", "logging.info", "iter", "next"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.get_weights_from_arch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.set_arch_model_weights", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["", "def", "evaluate_test", "(", "self", ",", "arch", ",", "split", "=", "None", ",", "discrete", "=", "False", ",", "normalize", "=", "True", ")", ":", "\n", "# Return error since we want to minimize obj val", "\n", "        ", "logging", ".", "info", "(", "arch", ")", "\n", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "weights", "=", "self", ".", "get_weights_from_arch", "(", "arch", ")", "\n", "self", ".", "set_arch_model_weights", "(", "weights", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "if", "split", "is", "None", ":", "\n", "            ", "n_batches", "=", "10", "\n", "", "else", ":", "\n", "            ", "n_batches", "=", "len", "(", "self", ".", "test_queue", ")", "\n", "\n", "", "for", "step", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "input", ",", "target", "=", "next", "(", "self", ".", "test_iter", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logging", ".", "info", "(", "'looping back over valid set'", ")", "\n", "self", ".", "test_iter", "=", "iter", "(", "self", ".", "test_queue", ")", "\n", "input", ",", "target", "=", "next", "(", "self", ".", "test_iter", ")", "\n", "", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "input", ",", "discrete", "=", "discrete", ",", "normalize", "=", "normalize", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "self", ".", "args", ".", "report_freq", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'test %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "1", "-", "0.01", "*", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save": [[274, 276], ["optimizers.darts.utils.save", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "utils", ".", "save", "(", "self", ".", "model", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "save", ",", "'one_shot_model_{}.pt'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load": [[277, 287], ["os.path.join", "os.path.exists", "optimizers.darts.utils.load", "optimizers.darts.utils.load", "os.path.join", "optimizers.darts.utils.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load"], ["", "def", "load", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "not", "None", ":", "\n", "            ", "model_obj_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "save", ",", "'one_shot_model_{}.obj'", ".", "format", "(", "epoch", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_obj_path", ")", ":", "\n", "                ", "utils", ".", "load", "(", "self", ".", "model", ",", "model_obj_path", ")", "\n", "", "else", ":", "\n", "                ", "model_pt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "save", ",", "'one_shot_model_{}.pt'", ".", "format", "(", "epoch", ")", ")", "\n", "utils", ".", "load", "(", "self", ".", "model", ",", "model_pt_path", ")", "\n", "", "", "else", ":", "\n", "            ", "utils", ".", "load", "(", "self", ".", "model", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "save", ",", "'weights.obj'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.get_weights_from_arch": [[288, 322], ["len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "enumerate", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "list", "type", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "list", "enumerate", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimizers.darts.genotypes.PRIMITIVES.index", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "def", "get_weights_from_arch", "(", "self", ",", "arch", ")", ":", "\n", "        ", "adjacency_matrix", ",", "node_list", "=", "arch", "\n", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "\n", "# Assign the sampled ops to the mixed op weights.", "\n", "# These are not optimized", "\n", "alphas_mixed_op", "=", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "model", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "for", "idx", ",", "op", "in", "enumerate", "(", "node_list", ")", ":", "\n", "            ", "alphas_mixed_op", "[", "idx", "]", "[", "PRIMITIVES", ".", "index", "(", "op", ")", "]", "=", "1", "\n", "\n", "# Set the output weights", "\n", "", "alphas_output", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "model", ".", "_steps", "+", "1", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "list", "(", "adjacency_matrix", "[", ":", ",", "-", "1", "]", "[", ":", "-", "1", "]", ")", ")", ":", "\n", "            ", "alphas_output", "[", "0", "]", "[", "idx", "]", "=", "label", "\n", "\n", "# Initialize the weights for the inputs to each choice block.", "\n", "", "if", "type", "(", "self", ".", "model", ".", "search_space", ")", "==", "SearchSpace1", ":", "\n", "            ", "begin", "=", "3", "\n", "", "else", ":", "\n", "            ", "begin", "=", "2", "\n", "", "alphas_inputs", "=", "[", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "n_inputs", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "for", "n_inputs", "in", "\n", "range", "(", "begin", ",", "self", ".", "model", ".", "_steps", "+", "1", ")", "]", "\n", "for", "alpha_input", "in", "alphas_inputs", ":", "\n", "            ", "connectivity_pattern", "=", "list", "(", "adjacency_matrix", "[", ":", "alpha_input", ".", "shape", "[", "1", "]", ",", "alpha_input", ".", "shape", "[", "1", "]", "]", ")", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "connectivity_pattern", ")", ":", "\n", "                ", "alpha_input", "[", "0", "]", "[", "idx", "]", "=", "label", "\n", "\n", "# Total architecture parameters", "\n", "", "", "arch_parameters", "=", "[", "\n", "alphas_mixed_op", ",", "\n", "alphas_output", ",", "\n", "*", "alphas_inputs", "\n", "]", "\n", "return", "arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.set_arch_model_weights": [[323, 325], ["None"], "methods", ["None"], ["", "def", "set_arch_model_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "self", ".", "model", ".", "_arch_parameters", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.sample_arch": [[326, 329], ["darts_wrapper_discrete.DartsWrapper.search_space.sample"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.search_spaces.search_space.SearchSpace.sample"], ["", "def", "sample_arch", "(", "self", ")", ":", "\n", "        ", "adjacency_matrix", ",", "op_list", "=", "self", ".", "search_space", ".", "sample", "(", "with_loose_ends", "=", "True", ",", "upscale", "=", "False", ")", "\n", "return", "adjacency_matrix", ",", "op_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.example.main": [[35, 84], ["nasbench.api.NASBench", "nasbench.api.ModelSpec", "print", "api.NASBench.query", "print", "print", "print", "api.NASBench.get_metrics_from_spec", "print", "print", "api.NASBench.hash_iterator", "api.NASBench.get_budget_counters", "range", "api.NASBench.get_metrics_from_hash", "print", "len", "print", "print"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.get_metrics_from_spec", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.hash_iterator", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.get_budget_counters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.get_metrics_from_hash"], ["def", "main", "(", "argv", ")", ":", "\n", "  ", "del", "argv", "# Unused", "\n", "\n", "# Load the data from file (this will take some time)", "\n", "nasbench", "=", "api", ".", "NASBench", "(", "NASBENCH_TFRECORD", ")", "\n", "\n", "# Create an Inception-like module (5x5 convolution replaced with two 3x3", "\n", "# convolutions).", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "\n", "# Adjacency matrix of the module", "\n", "matrix", "=", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "# input layer", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "# 1x1 conv", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "# 3x3 conv", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "# 5x5 conv (replaced by two 3x3's)", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "# 5x5 conv (replaced by two 3x3's)", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "# 3x3 max-pool", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "# output layer", "\n", "# Operations at the vertices of the module, matches order of matrix", "\n", "ops", "=", "[", "INPUT", ",", "CONV1X1", ",", "CONV3X3", ",", "CONV3X3", ",", "CONV3X3", ",", "MAXPOOL3X3", ",", "OUTPUT", "]", ")", "\n", "\n", "# Query this model from dataset, returns a dictionary containing the metrics", "\n", "# associated with this model.", "\n", "print", "(", "'Querying an Inception-like model.'", ")", "\n", "data", "=", "nasbench", ".", "query", "(", "model_spec", ")", "\n", "print", "(", "data", ")", "\n", "print", "(", "nasbench", ".", "get_budget_counters", "(", ")", ")", "# prints (total time, total epochs)", "\n", "\n", "# Get all metrics (all epoch lengths, all repeats) associated with this", "\n", "# model_spec. This should be used for dataset analysis and NOT for", "\n", "# benchmarking algorithms (does not increment budget counters).", "\n", "print", "(", "'\\nGetting all metrics for the same Inception-like model.'", ")", "\n", "fixed_metrics", ",", "computed_metrics", "=", "nasbench", ".", "get_metrics_from_spec", "(", "model_spec", ")", "\n", "print", "(", "fixed_metrics", ")", "\n", "for", "epochs", "in", "nasbench", ".", "valid_epochs", ":", "\n", "    ", "for", "repeat_index", "in", "range", "(", "len", "(", "computed_metrics", "[", "epochs", "]", ")", ")", ":", "\n", "      ", "data_point", "=", "computed_metrics", "[", "epochs", "]", "[", "repeat_index", "]", "\n", "print", "(", "'Epochs trained %d, repeat number: %d'", "%", "(", "epochs", ",", "repeat_index", "+", "1", ")", ")", "\n", "print", "(", "data_point", ")", "\n", "\n", "# Iterate through unique models in the dataset. Models are unqiuely identified", "\n", "# by a hash.", "\n", "", "", "print", "(", "'\\nIterating over unique models in the dataset.'", ")", "\n", "for", "unique_hash", "in", "nasbench", ".", "hash_iterator", "(", ")", ":", "\n", "    ", "fixed_metrics", ",", "computed_metrics", "=", "nasbench", ".", "get_metrics_from_hash", "(", "\n", "unique_hash", ")", "\n", "print", "(", "fixed_metrics", ")", "\n", "\n", "# For demo purposes, break here instead of iterating through whole set.", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.__init__": [[115, 203], ["nasbench.lib.config.build_config", "random.seed", "print", "time.time", "set", "tensorflow.compat.v1.python_io.tf_record_iterator", "print", "json.loads", "int", "numpy.array", "numpy.reshape", "raw_operations.split", "nasbench.lib.model_metrics_pb2.ModelMetrics.FromString", "api.NASBench.valid_epochs.add", "[].append", "time.time", "serialized_row.decode", "numpy.sqrt", "base64.b64decode", "len", "int", "list"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.config.build_config"], ["def", "__init__", "(", "self", ",", "dataset_file", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initialize dataset, this should only be done once per experiment.\n\n    Args:\n      dataset_file: path to .tfrecord file containing the dataset.\n      seed: random seed used for sampling queried models. Two NASBench objects\n        created with the same seed will return the same data points when queried\n        with the same models in the same order. By default, the seed is randomly\n        generated.\n    \"\"\"", "\n", "self", ".", "config", "=", "config", ".", "build_config", "(", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "print", "(", "'Loading dataset from file... This may take a few minutes...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Stores the fixed statistics that are independent of evaluation (i.e.,", "\n", "# adjacency matrix, operations, and number of parameters).", "\n", "# hash --> metric name --> scalar", "\n", "self", ".", "fixed_statistics", "=", "{", "}", "\n", "\n", "# Stores the statistics that are computed via training and evaluating the", "\n", "# model on CIFAR-10. Statistics are computed for multiple repeats of each", "\n", "# model at each max epoch length.", "\n", "# hash --> epochs --> repeat index --> metric name --> scalar", "\n", "self", ".", "computed_statistics", "=", "{", "}", "\n", "\n", "# Valid queriable epoch lengths. {4, 12, 36, 108} for the full dataset or", "\n", "# {108} for the smaller dataset with only the 108 epochs.", "\n", "self", ".", "valid_epochs", "=", "set", "(", ")", "\n", "\n", "for", "serialized_row", "in", "tf", ".", "compat", ".", "v1", ".", "python_io", ".", "tf_record_iterator", "(", "dataset_file", ")", ":", "\n", "# Parse the data from the data file.", "\n", "      ", "module_hash", ",", "epochs", ",", "raw_adjacency", ",", "raw_operations", ",", "raw_metrics", "=", "(", "\n", "json", ".", "loads", "(", "serialized_row", ".", "decode", "(", "'utf-8'", ")", ")", ")", "\n", "\n", "dim", "=", "int", "(", "np", ".", "sqrt", "(", "len", "(", "raw_adjacency", ")", ")", ")", "\n", "adjacency", "=", "np", ".", "array", "(", "[", "int", "(", "e", ")", "for", "e", "in", "list", "(", "raw_adjacency", ")", "]", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "adjacency", "=", "np", ".", "reshape", "(", "adjacency", ",", "(", "dim", ",", "dim", ")", ")", "\n", "operations", "=", "raw_operations", ".", "split", "(", "','", ")", "\n", "metrics", "=", "model_metrics_pb2", ".", "ModelMetrics", ".", "FromString", "(", "\n", "base64", ".", "b64decode", "(", "raw_metrics", ")", ")", "\n", "\n", "if", "module_hash", "not", "in", "self", ".", "fixed_statistics", ":", "\n", "# First time seeing this module, initialize fixed statistics.", "\n", "        ", "new_entry", "=", "{", "}", "\n", "new_entry", "[", "'module_adjacency'", "]", "=", "adjacency", "\n", "new_entry", "[", "'module_operations'", "]", "=", "operations", "\n", "new_entry", "[", "'trainable_parameters'", "]", "=", "metrics", ".", "trainable_parameters", "\n", "self", ".", "fixed_statistics", "[", "module_hash", "]", "=", "new_entry", "\n", "self", ".", "computed_statistics", "[", "module_hash", "]", "=", "{", "}", "\n", "\n", "", "self", ".", "valid_epochs", ".", "add", "(", "epochs", ")", "\n", "\n", "if", "epochs", "not", "in", "self", ".", "computed_statistics", "[", "module_hash", "]", ":", "\n", "        ", "self", ".", "computed_statistics", "[", "module_hash", "]", "[", "epochs", "]", "=", "[", "]", "\n", "\n", "# Each data_point consists of the metrics recorded from a single", "\n", "# train-and-evaluation of a model at a specific epoch length.", "\n", "", "data_point", "=", "{", "}", "\n", "\n", "# Note: metrics.evaluation_data[0] contains the computed metrics at the", "\n", "# start of training (step 0) but this is unused by this API.", "\n", "\n", "# Evaluation statistics at the half-way point of training", "\n", "half_evaluation", "=", "metrics", ".", "evaluation_data", "[", "1", "]", "\n", "data_point", "[", "'halfway_training_time'", "]", "=", "half_evaluation", ".", "training_time", "\n", "data_point", "[", "'halfway_train_accuracy'", "]", "=", "half_evaluation", ".", "train_accuracy", "\n", "data_point", "[", "'halfway_validation_accuracy'", "]", "=", "(", "\n", "half_evaluation", ".", "validation_accuracy", ")", "\n", "data_point", "[", "'halfway_test_accuracy'", "]", "=", "half_evaluation", ".", "test_accuracy", "\n", "\n", "# Evaluation statistics at the end of training", "\n", "final_evaluation", "=", "metrics", ".", "evaluation_data", "[", "2", "]", "\n", "data_point", "[", "'final_training_time'", "]", "=", "final_evaluation", ".", "training_time", "\n", "data_point", "[", "'final_train_accuracy'", "]", "=", "final_evaluation", ".", "train_accuracy", "\n", "data_point", "[", "'final_validation_accuracy'", "]", "=", "(", "\n", "final_evaluation", ".", "validation_accuracy", ")", "\n", "data_point", "[", "'final_test_accuracy'", "]", "=", "final_evaluation", ".", "test_accuracy", "\n", "\n", "self", ".", "computed_statistics", "[", "module_hash", "]", "[", "epochs", "]", ".", "append", "(", "data_point", ")", "\n", "\n", "", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'Loaded dataset in %d seconds'", "%", "elapsed", ")", "\n", "\n", "self", ".", "history", "=", "{", "}", "\n", "self", ".", "training_time_spent", "=", "0.0", "\n", "self", ".", "total_epochs_spent", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.query": [[204, 264], ["api.NASBench.get_metrics_from_spec", "random.randint", "api.OutOfDomainError"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.get_metrics_from_spec"], ["", "def", "query", "(", "self", ",", "model_spec", ",", "epochs", "=", "108", ",", "stop_halfway", "=", "False", ")", ":", "\n", "    ", "\"\"\"Fetch one of the evaluations for this model spec.\n\n    Each call will sample one of the config['num_repeats'] evaluations of the\n    model. This means that repeated queries of the same model (or isomorphic\n    models) may return identical metrics.\n\n    This function will increment the budget counters for benchmarking purposes.\n    See self.training_time_spent, and self.total_epochs_spent.\n\n    This function also allows querying the evaluation metrics at the halfway\n    point of training using stop_halfway. Using this option will increment the\n    budget counters only up to the halfway point.\n\n    Args:\n      model_spec: ModelSpec object.\n      epochs: number of epochs trained. Must be one of the evaluated number of\n        epochs, [4, 12, 36, 108] for the full dataset.\n      stop_halfway: if True, returned dict will only contain the training time\n        and accuracies at the halfway point of training (num_epochs/2).\n        Otherwise, returns the time and accuracies at the end of training\n        (num_epochs).\n\n    Returns:\n      dict containing the evaluated data for this object.\n\n    Raises:\n      OutOfDomainError: if model_spec or num_epochs is outside the search space.\n    \"\"\"", "\n", "if", "epochs", "not", "in", "self", ".", "valid_epochs", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'invalid number of epochs, must be one of %s'", "\n", "%", "self", ".", "valid_epochs", ")", "\n", "\n", "", "fixed_stat", ",", "computed_stat", "=", "self", ".", "get_metrics_from_spec", "(", "model_spec", ")", "\n", "sampled_index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "config", "[", "'num_repeats'", "]", "-", "1", ")", "\n", "computed_stat", "=", "computed_stat", "[", "epochs", "]", "[", "sampled_index", "]", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "'module_adjacency'", "]", "=", "fixed_stat", "[", "'module_adjacency'", "]", "\n", "data", "[", "'module_operations'", "]", "=", "fixed_stat", "[", "'module_operations'", "]", "\n", "data", "[", "'trainable_parameters'", "]", "=", "fixed_stat", "[", "'trainable_parameters'", "]", "\n", "\n", "if", "stop_halfway", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'halfway_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'halfway_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat", "[", "'halfway_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat", "[", "'halfway_test_accuracy'", "]", "\n", "", "else", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'final_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'final_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat", "[", "'final_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat", "[", "'final_test_accuracy'", "]", "\n", "\n", "", "self", ".", "training_time_spent", "+=", "data", "[", "'training_time'", "]", "\n", "if", "stop_halfway", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "//", "2", "\n", "", "else", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.is_valid": [[265, 283], ["api.NASBench._check_spec"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench._check_spec"], ["", "def", "is_valid", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Checks the validity of the model_spec.\n\n    For the purposes of benchmarking, this does not increment the budget\n    counters.\n\n    Args:\n      model_spec: ModelSpec object.\n\n    Returns:\n      True if model is within space.\n    \"\"\"", "\n", "try", ":", "\n", "      ", "self", ".", "_check_spec", "(", "model_spec", ")", "\n", "", "except", "OutOfDomainError", ":", "\n", "      ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.get_budget_counters": [[284, 287], ["None"], "methods", ["None"], ["", "def", "get_budget_counters", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the time and budget counters.\"\"\"", "\n", "return", "self", ".", "training_time_spent", ",", "self", ".", "total_epochs_spent", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.reset_budget_counters": [[288, 292], ["None"], "methods", ["None"], ["", "def", "reset_budget_counters", "(", "self", ")", ":", "\n", "    ", "\"\"\"Reset the time and epoch budget counters.\"\"\"", "\n", "self", ".", "training_time_spent", "=", "0.0", "\n", "self", ".", "total_epochs_spent", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.evaluate": [[293, 331], ["nasbench.lib.evaluate.train_and_evaluate", "os.path.join", "tensorflow.gfile.Open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate.train_and_evaluate"], ["", "def", "evaluate", "(", "self", ",", "model_spec", ",", "model_dir", ")", ":", "\n", "    ", "\"\"\"Trains and evaluates a model spec from scratch (does not query dataset).\n\n    This function runs the same procedure that was used to generate each\n    evaluation in the dataset.  Because we are not querying the generated\n    dataset of trained models, there are no limitations on number of vertices,\n    edges, operations, or epochs. Note that the results will not exactly match\n    the dataset due to randomness. By default, this uses TPUs for evaluation but\n    CPU/GPU can be used by setting --use_tpu=false (GPU will require installing\n    tensorflow-gpu).\n\n    Args:\n      model_spec: ModelSpec object.\n      model_dir: directory to store the checkpoints, summaries, and logs.\n\n    Returns:\n      dict contained the evaluated data for this object, same structure as\n      returned by query().\n    \"\"\"", "\n", "# Metadata contains additional metrics that aren't reported normally.", "\n", "# However, these are stored in the JSON file at the model_dir.", "\n", "metadata", "=", "evaluate", ".", "train_and_evaluate", "(", "model_spec", ",", "self", ".", "config", ",", "model_dir", ")", "\n", "metadata_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'metadata.json'", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "metadata_file", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "json", ".", "dump", "(", "metadata", ",", "f", ",", "cls", "=", "_NumpyEncoder", ")", "\n", "\n", "", "data_point", "=", "{", "}", "\n", "data_point", "[", "'module_adjacency'", "]", "=", "model_spec", ".", "matrix", "\n", "data_point", "[", "'module_operations'", "]", "=", "model_spec", ".", "ops", "\n", "data_point", "[", "'trainable_parameters'", "]", "=", "metadata", "[", "'trainable_params'", "]", "\n", "\n", "final_evaluation", "=", "metadata", "[", "'evaluation_results'", "]", "[", "-", "1", "]", "\n", "data_point", "[", "'training_time'", "]", "=", "final_evaluation", "[", "'training_time'", "]", "\n", "data_point", "[", "'train_accuracy'", "]", "=", "final_evaluation", "[", "'train_accuracy'", "]", "\n", "data_point", "[", "'validation_accuracy'", "]", "=", "final_evaluation", "[", "'validation_accuracy'", "]", "\n", "data_point", "[", "'test_accuracy'", "]", "=", "final_evaluation", "[", "'test_accuracy'", "]", "\n", "\n", "return", "data_point", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.hash_iterator": [[332, 335], ["api.NASBench.fixed_statistics.keys"], "methods", ["None"], ["", "def", "hash_iterator", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns iterator over all unique model hashes.\"\"\"", "\n", "return", "self", ".", "fixed_statistics", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.get_metrics_from_hash": [[336, 351], ["copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "def", "get_metrics_from_hash", "(", "self", ",", "module_hash", ")", ":", "\n", "    ", "\"\"\"Returns the metrics for all epochs and all repeats of a hash.\n\n    This method is for dataset analysis and should not be used for benchmarking.\n    As such, it does not increment any of the budget counters.\n\n    Args:\n      module_hash: MD5 hash, i.e., the values yielded by hash_iterator().\n\n    Returns:\n      fixed stats and computed stats of the model spec provided.\n    \"\"\"", "\n", "fixed_stat", "=", "copy", ".", "deepcopy", "(", "self", ".", "fixed_statistics", "[", "module_hash", "]", ")", "\n", "computed_stat", "=", "copy", ".", "deepcopy", "(", "self", ".", "computed_statistics", "[", "module_hash", "]", ")", "\n", "return", "fixed_stat", ",", "computed_stat", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.get_metrics_from_spec": [[352, 367], ["api.NASBench._check_spec", "api.NASBench._hash_spec", "api.NASBench.get_metrics_from_hash"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench._check_spec", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench._hash_spec", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench.get_metrics_from_hash"], ["", "def", "get_metrics_from_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Returns the metrics for all epochs and all repeats of a model.\n\n    This method is for dataset analysis and should not be used for benchmarking.\n    As such, it does not increment any of the budget counters.\n\n    Args:\n      model_spec: ModelSpec object.\n\n    Returns:\n      fixed stats and computed stats of the model spec provided.\n    \"\"\"", "\n", "self", ".", "_check_spec", "(", "model_spec", ")", "\n", "module_hash", "=", "self", ".", "_hash_spec", "(", "model_spec", ")", "\n", "return", "self", ".", "get_metrics_from_hash", "(", "module_hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench._check_spec": [[368, 392], ["len", "numpy.sum", "api.OutOfDomainError", "api.OutOfDomainError", "api.OutOfDomainError", "api.OutOfDomainError", "api.OutOfDomainError", "api.OutOfDomainError"], "methods", ["None"], ["", "def", "_check_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Checks that the model spec is within the dataset.\"\"\"", "\n", "if", "not", "model_spec", ".", "valid_spec", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'invalid spec, provided graph is disconnected.'", ")", "\n", "\n", "", "num_vertices", "=", "len", "(", "model_spec", ".", "ops", ")", "\n", "num_edges", "=", "np", ".", "sum", "(", "model_spec", ".", "matrix", ")", "\n", "\n", "if", "num_vertices", ">", "self", ".", "config", "[", "'module_vertices'", "]", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'too many vertices, got %d (max vertices = %d)'", "\n", "%", "(", "num_vertices", ",", "config", "[", "'module_vertices'", "]", ")", ")", "\n", "\n", "", "if", "num_edges", ">", "self", ".", "config", "[", "'max_edges'", "]", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'too many edges, got %d (max edges = %d)'", "\n", "%", "(", "num_edges", ",", "self", ".", "config", "[", "'max_edges'", "]", ")", ")", "\n", "\n", "", "if", "model_spec", ".", "ops", "[", "0", "]", "!=", "'input'", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'first operation should be \\'input\\''", ")", "\n", "", "if", "model_spec", ".", "ops", "[", "-", "1", "]", "!=", "'output'", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'last operation should be \\'output\\''", ")", "\n", "", "for", "op", "in", "model_spec", ".", "ops", "[", "1", ":", "-", "1", "]", ":", "\n", "      ", "if", "op", "not", "in", "self", ".", "config", "[", "'available_ops'", "]", ":", "\n", "        ", "raise", "OutOfDomainError", "(", "'unsupported op %s (available ops = %s)'", "\n", "%", "(", "op", ",", "self", ".", "config", "[", "'available_ops'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api.NASBench._hash_spec": [[393, 396], ["nasbench.lib.model_spec.hash_spec"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.ModelSpec.hash_spec"], ["", "", "", "def", "_hash_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Returns the MD5 hash for a provided model_spec.\"\"\"", "\n", "return", "model_spec", ".", "hash_spec", "(", "self", ".", "config", "[", "'available_ops'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench.api._NumpyEncoder.default": [[401, 409], ["isinstance", "json.JSONEncoder.default", "obj.tolist", "isinstance", "numpy.asscalar"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.NumpyEncoder.default", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist"], ["def", "default", "(", "self", ",", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "# Matrices converted to nested lists", "\n", "      ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "generic", ")", ":", "\n", "# Scalars converted to closest Python type", "\n", "      ", "return", "np", ".", "asscalar", "(", "obj", ")", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "obj", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.cifar.CIFARInput.__init__": [[37, 67], ["ValueError", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mode", ",", "config", ")", ":", "\n", "    ", "\"\"\"Initializes a CIFARInput object.\n\n    Args:\n      mode: one of [train, valid, test, augment, sample]\n      config: config dict built from config.py\n\n    Raises:\n      ValueError: invalid mode or data files\n    \"\"\"", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "config", "=", "config", "\n", "if", "mode", "==", "'train'", ":", "# Training set (no validation & test)", "\n", "      ", "self", ".", "data_files", "=", "config", "[", "'train_data_files'", "]", "\n", "", "elif", "mode", "==", "'train_eval'", ":", "# For computing train error", "\n", "      ", "self", ".", "data_files", "=", "[", "config", "[", "'train_data_files'", "]", "[", "0", "]", "]", "\n", "", "elif", "mode", "==", "'valid'", ":", "# For computing validation error", "\n", "      ", "self", ".", "data_files", "=", "[", "config", "[", "'valid_data_file'", "]", "]", "\n", "", "elif", "mode", "==", "'test'", ":", "# For computing the test error", "\n", "      ", "self", ".", "data_files", "=", "[", "config", "[", "'test_data_file'", "]", "]", "\n", "", "elif", "mode", "==", "'augment'", ":", "# Training set (includes validation, no test)", "\n", "      ", "self", ".", "data_files", "=", "(", "config", "[", "'train_data_files'", "]", "+", "\n", "[", "config", "[", "'valid_data_file'", "]", "]", ")", "\n", "", "elif", "mode", "==", "'sample'", ":", "# Fixed batch of 100 samples from validation", "\n", "      ", "self", ".", "data_files", "=", "[", "config", "[", "'sample_data_file'", "]", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid mode'", ")", "\n", "\n", "", "if", "not", "self", ".", "data_files", ":", "\n", "      ", "raise", "ValueError", "(", "'no data files provided'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.cifar.CIFARInput.num_images": [[68, 83], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_images", "(", "self", ")", ":", "\n", "    ", "\"\"\"Number of images in the dataset (depends on the mode).\"\"\"", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "      ", "return", "40000", "\n", "", "elif", "self", ".", "mode", "==", "'train_eval'", ":", "\n", "      ", "return", "10000", "\n", "", "elif", "self", ".", "mode", "==", "'valid'", ":", "\n", "      ", "return", "10000", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "      ", "return", "10000", "\n", "", "elif", "self", ".", "mode", "==", "'augment'", ":", "\n", "      ", "return", "50000", "\n", "", "elif", "self", ".", "mode", "==", "'sample'", ":", "\n", "      ", "return", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.cifar.CIFARInput.input_fn": [[84, 128], ["tensorflow.data.TFRecordDataset", "dataset.repeat.repeat.prefetch", "functools.partial", "dataset.repeat.repeat.apply", "dataset.repeat.repeat.map", "dataset.repeat.repeat.prefetch", "dataset.repeat.repeat.cache().apply", "dataset.repeat.repeat.repeat", "tensorflow.contrib.data.map_and_batch", "functools.partial", "tensorflow.contrib.data.shuffle_and_repeat", "dataset.repeat.repeat.cache"], "methods", ["None"], ["", "", "def", "input_fn", "(", "self", ",", "params", ")", ":", "\n", "    ", "\"\"\"Returns a CIFAR tf.data.Dataset object.\n\n    Args:\n      params: parameter dict pass by Estimator.\n\n    Returns:\n      tf.data.Dataset object\n    \"\"\"", "\n", "batch_size", "=", "params", "[", "'batch_size'", "]", "\n", "is_training", "=", "(", "self", ".", "mode", "==", "'train'", "or", "self", ".", "mode", "==", "'augment'", ")", "\n", "\n", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "self", ".", "data_files", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "buffer_size", "=", "batch_size", ")", "\n", "\n", "# Repeat dataset for training modes", "\n", "if", "is_training", ":", "\n", "# Shuffle buffer with whole dataset to ensure full randomness per epoch", "\n", "      ", "dataset", "=", "dataset", ".", "cache", "(", ")", ".", "apply", "(", "\n", "tf", ".", "contrib", ".", "data", ".", "shuffle_and_repeat", "(", "\n", "buffer_size", "=", "self", ".", "num_images", ")", ")", "\n", "\n", "# This is a hack to allow computing metrics on a fixed batch on TPU. Because", "\n", "# TPU shards the batch acrosss cores, we replicate the fixed batch so that", "\n", "# each core contains the whole batch.", "\n", "", "if", "self", ".", "mode", "==", "'sample'", ":", "\n", "      ", "dataset", "=", "dataset", ".", "repeat", "(", ")", "\n", "\n", "# Parse, preprocess, and batch images", "\n", "", "parser_fn", "=", "functools", ".", "partial", "(", "_parser", ",", "is_training", ")", "\n", "dataset", "=", "dataset", ".", "apply", "(", "\n", "tf", ".", "contrib", ".", "data", ".", "map_and_batch", "(", "\n", "parser_fn", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_parallel_batches", "=", "self", ".", "config", "[", "'tpu_num_shards'", "]", ",", "\n", "drop_remainder", "=", "True", ")", ")", "\n", "\n", "# Assign static batch size dimension", "\n", "dataset", "=", "dataset", ".", "map", "(", "functools", ".", "partial", "(", "_set_batch_dimension", ",", "batch_size", ")", ")", "\n", "\n", "# Prefetch to overlap in-feed with training", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "tf", ".", "contrib", ".", "data", ".", "AUTOTUNE", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.cifar._preprocess": [[130, 153], ["tensorflow.image.resize_image_with_crop_or_pad", "tensorflow.random_crop", "tensorflow.image.random_flip_left_right"], "function", ["None"], ["", "", "def", "_preprocess", "(", "image", ")", ":", "\n", "  ", "\"\"\"Perform standard CIFAR preprocessing.\n\n  Pads the image then performs a random crop.\n  Then, image is flipped horizontally randomly.\n\n  Args:\n    image: image Tensor with shape [height, width, 3]\n\n  Returns:\n    preprocessed image with the same dimensions.\n  \"\"\"", "\n", "# Pad 4 pixels on all sides with 0", "\n", "image", "=", "tf", ".", "image", ".", "resize_image_with_crop_or_pad", "(", "\n", "image", ",", "HEIGHT", "+", "8", ",", "WIDTH", "+", "8", ")", "\n", "\n", "# Random crop", "\n", "image", "=", "tf", ".", "random_crop", "(", "image", ",", "[", "HEIGHT", ",", "WIDTH", ",", "3", "]", ",", "seed", "=", "0", ")", "\n", "\n", "# Random flip", "\n", "image", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "image", ",", "seed", "=", "0", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.cifar._parser": [[155, 175], ["tensorflow.parse_single_example", "tensorflow.decode_raw", "_preprocess.set_shape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant", "tensorflow.cast", "cifar._preprocess", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.cifar._preprocess"], ["", "def", "_parser", "(", "use_preprocessing", ",", "serialized_example", ")", ":", "\n", "  ", "\"\"\"Parses a single tf.Example into image and label tensors.\"\"\"", "\n", "features", "=", "tf", ".", "parse_single_example", "(", "\n", "serialized_example", ",", "\n", "features", "=", "{", "\n", "'image'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "}", ")", "\n", "image", "=", "tf", ".", "decode_raw", "(", "features", "[", "'image'", "]", ",", "tf", ".", "uint8", ")", "\n", "image", ".", "set_shape", "(", "[", "3", "*", "HEIGHT", "*", "WIDTH", "]", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "3", ",", "HEIGHT", ",", "WIDTH", "]", ")", "\n", "# TODO(chrisying): handle NCHW format", "\n", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "if", "use_preprocessing", ":", "\n", "    ", "image", "=", "_preprocess", "(", "image", ")", "\n", "", "image", "-=", "tf", ".", "constant", "(", "RGB_MEAN", ",", "shape", "=", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "image", "/=", "tf", ".", "constant", "(", "RGB_STD", ",", "shape", "=", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "label", "=", "tf", ".", "cast", "(", "features", "[", "'label'", "]", ",", "tf", ".", "int32", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.cifar._set_batch_dimension": [[177, 184], ["images.set_shape", "labels.set_shape", "images.get_shape().merge_with", "labels.get_shape().merge_with", "tensorflow.TensorShape", "tensorflow.TensorShape", "images.get_shape", "labels.get_shape"], "function", ["None"], ["", "def", "_set_batch_dimension", "(", "batch_size", ",", "images", ",", "labels", ")", ":", "\n", "  ", "images", ".", "set_shape", "(", "images", ".", "get_shape", "(", ")", ".", "merge_with", "(", "\n", "tf", ".", "TensorShape", "(", "[", "batch_size", ",", "None", ",", "None", ",", "None", "]", ")", ")", ")", "\n", "labels", ".", "set_shape", "(", "labels", ".", "get_shape", "(", ")", ".", "merge_with", "(", "\n", "tf", ".", "TensorShape", "(", "[", "batch_size", "]", ")", ")", ")", "\n", "\n", "return", "images", ",", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.config.build_config": [[108, 116], ["FLAGS.flags_by_module_dict"], "function", ["None"], ["def", "build_config", "(", ")", ":", "\n", "  ", "\"\"\"Build config from flags defined in this module.\"\"\"", "\n", "config", "=", "{", "\n", "flag", ".", "name", ":", "flag", ".", "value", "\n", "for", "flag", "in", "FLAGS", ".", "flags_by_module_dict", "(", ")", "[", "__name__", "]", "\n", "}", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._TrainAndEvaluator.__init__": [[92, 106], ["nasbench.lib.cifar.CIFARInput", "nasbench.lib.cifar.CIFARInput", "nasbench.lib.cifar.CIFARInput", "nasbench.lib.cifar.CIFARInput", "nasbench.lib.cifar.CIFARInput", "evaluate._create_estimator"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._create_estimator"], ["def", "__init__", "(", "self", ",", "spec", ",", "config", ",", "model_dir", ")", ":", "\n", "    ", "\"\"\"Initialize evaluator. See train_and_evaluate docstring.\"\"\"", "\n", "self", ".", "input_train", "=", "cifar", ".", "CIFARInput", "(", "'train'", ",", "config", ")", "\n", "self", ".", "input_train_eval", "=", "cifar", ".", "CIFARInput", "(", "'train_eval'", ",", "config", ")", "\n", "self", ".", "input_valid", "=", "cifar", ".", "CIFARInput", "(", "'valid'", ",", "config", ")", "\n", "self", ".", "input_test", "=", "cifar", ".", "CIFARInput", "(", "'test'", ",", "config", ")", "\n", "self", ".", "input_sample", "=", "cifar", ".", "CIFARInput", "(", "'sample'", ",", "config", ")", "\n", "self", ".", "estimator", "=", "_create_estimator", "(", "spec", ",", "config", ",", "model_dir", ",", "\n", "self", ".", "input_train", ".", "num_images", ",", "\n", "self", ".", "input_sample", ".", "num_images", ")", "\n", "\n", "self", ".", "spec", "=", "spec", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._TrainAndEvaluator.run": [[107, 171], ["tensorflow.gfile.MakeDirs", "evaluate._get_param_count", "tensorflow.gfile.DeleteRecursively", "map", "time.time", "evaluate._TrainAndEvaluator.estimator.train", "evaluation_results.append", "nasbench.lib.training_time.limit", "nasbench.lib.training_time.limit", "map.append", "sorted", "evaluate._TrainAndEvaluator._evaluate_all", "int", "evaluate._TrainAndEvaluator.estimator.train", "evaluation_results.append", "time.time", "tensorflow.logging.warning", "evaluate._TrainAndEvaluator._evaluate_all", "str", "evaluate.AbortError", "str"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._get_param_count", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time.limit", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time.limit", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._TrainAndEvaluator._evaluate_all", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._TrainAndEvaluator._evaluate_all"], ["", "def", "run", "(", "self", ")", ":", "\n", "    ", "\"\"\"Runs training and evaluation.\"\"\"", "\n", "attempts", "=", "0", "\n", "while", "True", ":", "\n", "# Delete everything in the model dir at the start of each attempt", "\n", "      ", "try", ":", "\n", "        ", "tf", ".", "gfile", ".", "DeleteRecursively", "(", "self", ".", "model_dir", ")", "\n", "", "except", "tf", ".", "errors", ".", "NotFoundError", ":", "\n", "        ", "pass", "\n", "", "tf", ".", "gfile", ".", "MakeDirs", "(", "self", ".", "model_dir", ")", "\n", "\n", "try", ":", "\n", "# Train", "\n", "        ", "if", "self", ".", "config", "[", "'train_seconds'", "]", ">", "0.0", ":", "\n", "          ", "timing", "=", "training_time", ".", "limit", "(", "self", ".", "config", "[", "'train_seconds'", "]", ")", "\n", "", "else", ":", "\n", "          ", "timing", "=", "training_time", ".", "limit", "(", "None", ")", "\n", "\n", "", "evaluations", "=", "map", "(", "float", ",", "self", ".", "config", "[", "'intermediate_evaluations'", "]", ")", "\n", "if", "not", "evaluations", "or", "evaluations", "[", "-", "1", "]", "!=", "1.0", ":", "\n", "          ", "evaluations", ".", "append", "(", "1.0", ")", "\n", "", "assert", "evaluations", "==", "sorted", "(", "evaluations", ")", "\n", "\n", "evaluation_results", "=", "[", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Train for 1 step with 0 LR to initialize the weights, then evaluate", "\n", "# once at the start for completeness, accuracies expected to be around", "\n", "# random selection. Note that batch norm moving averages change during", "\n", "# the step but the trainable weights do not.", "\n", "self", ".", "estimator", ".", "train", "(", "\n", "input_fn", "=", "self", ".", "input_train", ".", "input_fn", ",", "\n", "max_steps", "=", "1", ",", "\n", "hooks", "=", "[", "timing", ".", "train_hook", "]", ",", "\n", "saving_listeners", "=", "[", "timing", ".", "saving_listener", "]", ")", "\n", "evaluation_results", ".", "append", "(", "self", ".", "_evaluate_all", "(", "0.0", ",", "0", ")", ")", "\n", "\n", "for", "next_evaluation", "in", "evaluations", ":", "\n", "          ", "epoch", "=", "next_evaluation", "*", "self", ".", "config", "[", "'train_epochs'", "]", "\n", "train_steps", "=", "int", "(", "epoch", "*", "self", ".", "input_train", ".", "num_images", "/", "\n", "self", ".", "config", "[", "'batch_size'", "]", ")", "\n", "self", ".", "estimator", ".", "train", "(", "\n", "input_fn", "=", "self", ".", "input_train", ".", "input_fn", ",", "\n", "max_steps", "=", "train_steps", ",", "\n", "hooks", "=", "[", "timing", ".", "train_hook", "]", ",", "\n", "saving_listeners", "=", "[", "timing", ".", "saving_listener", "]", ")", "\n", "\n", "evaluation_results", ".", "append", "(", "self", ".", "_evaluate_all", "(", "epoch", ",", "train_steps", ")", ")", "\n", "\n", "", "all_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "break", "# Break from retry loop on success", "\n", "", "except", "VALID_EXCEPTIONS", "as", "e", ":", "# pylint: disable=catching-non-exception", "\n", "        ", "attempts", "+=", "1", "\n", "tf", ".", "logging", ".", "warning", "(", "str", "(", "e", ")", ")", "\n", "if", "attempts", ">=", "self", ".", "config", "[", "'max_attempts'", "]", ":", "\n", "          ", "raise", "AbortError", "(", "str", "(", "e", ")", ")", "\n", "\n", "", "", "", "metadata", "=", "{", "\n", "'trainable_params'", ":", "_get_param_count", "(", "self", ".", "model_dir", ")", ",", "\n", "'total_time'", ":", "all_time", ",", "# includes eval and other metric time", "\n", "'evaluation_results'", ":", "evaluation_results", ",", "\n", "}", "\n", "\n", "return", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._TrainAndEvaluator._evaluate_all": [[172, 196], ["evaluate._evaluate", "evaluate._evaluate", "evaluate._evaluate", "evaluate._TrainAndEvaluator.estimator.get_variable_value", "time.time", "evaluate._TrainAndEvaluator._compute_sample_metrics", "time.time"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._evaluate", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._evaluate", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._evaluate", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._TrainAndEvaluator._compute_sample_metrics"], ["", "def", "_evaluate_all", "(", "self", ",", "epochs", ",", "steps", ")", ":", "\n", "    ", "\"\"\"Runs all the evaluations.\"\"\"", "\n", "train_accuracy", "=", "_evaluate", "(", "self", ".", "estimator", ",", "self", ".", "input_train_eval", ",", "\n", "self", ".", "config", ",", "name", "=", "'train'", ")", "\n", "valid_accuracy", "=", "_evaluate", "(", "self", ".", "estimator", ",", "self", ".", "input_valid", ",", "\n", "self", ".", "config", ",", "name", "=", "'valid'", ")", "\n", "test_accuracy", "=", "_evaluate", "(", "self", ".", "estimator", ",", "self", ".", "input_test", ",", "\n", "self", ".", "config", ",", "name", "=", "'test'", ")", "\n", "train_time", "=", "self", ".", "estimator", ".", "get_variable_value", "(", "\n", "training_time", ".", "TOTAL_TIME_NAME", ")", "\n", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "sample_metrics", "=", "self", ".", "_compute_sample_metrics", "(", ")", "\n", "predict_time", "=", "time", ".", "time", "(", ")", "-", "now", "\n", "\n", "return", "{", "\n", "'epochs'", ":", "epochs", ",", "\n", "'training_time'", ":", "train_time", ",", "\n", "'training_steps'", ":", "steps", ",", "\n", "'train_accuracy'", ":", "train_accuracy", ",", "\n", "'validation_accuracy'", ":", "valid_accuracy", ",", "\n", "'test_accuracy'", ":", "test_accuracy", ",", "\n", "'sample_metrics'", ":", "sample_metrics", ",", "\n", "'predict_time'", ":", "predict_time", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._TrainAndEvaluator._compute_sample_metrics": [[198, 214], ["evaluate._TrainAndEvaluator.estimator.predict().next", "evaluate._TrainAndEvaluator.estimator.predict"], "methods", ["None"], ["", "def", "_compute_sample_metrics", "(", "self", ")", ":", "\n", "    ", "\"\"\"Computes the metrics on a fixed batch.\"\"\"", "\n", "sample_metrics", "=", "self", ".", "estimator", ".", "predict", "(", "\n", "input_fn", "=", "self", ".", "input_sample", ".", "input_fn", ",", "yield_single_examples", "=", "False", ")", ".", "next", "(", ")", "\n", "\n", "# Fix the extra batch dimension added by PREDICT", "\n", "for", "metric", "in", "sample_metrics", ":", "\n", "      ", "if", "metric", "in", "[", "'logits'", ",", "'input_grad_norm'", "]", ":", "\n", "# Batch-shaped tensors take first batch", "\n", "        ", "sample_metrics", "[", "metric", "]", "=", "(", "\n", "sample_metrics", "[", "metric", "]", "[", ":", "self", ".", "input_sample", ".", "num_images", ",", "Ellipsis", "]", ")", "\n", "", "else", ":", "\n", "# Other tensors remove batch dimension", "\n", "        ", "sample_metrics", "[", "metric", "]", "=", "sample_metrics", "[", "metric", "]", "[", "0", ",", "Ellipsis", "]", "\n", "\n", "", "", "return", "sample_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate.train_and_evaluate": [[42, 57], ["evaluate._train_and_evaluate_impl"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._train_and_evaluate_impl"], ["", "def", "train_and_evaluate", "(", "spec", ",", "config", ",", "model_dir", ")", ":", "\n", "  ", "\"\"\"Train and evaluate the proposed model.\n\n  This method trains and evaluates the model for the creation of the benchmark\n  dataset. The default values from the config.py are exactly the values used.\n\n  Args:\n    spec: ModelSpec object.\n    config: config dict generated from config.py.\n    model_dir: directory to store the checkpoint files.\n\n  Returns:\n    dict containing the evaluation metadata.\n  \"\"\"", "\n", "return", "_train_and_evaluate_impl", "(", "spec", ",", "config", ",", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate.augment_and_evaluate": [[59, 81], ["evaluate._augment_and_evaluate_impl"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._augment_and_evaluate_impl"], ["", "def", "augment_and_evaluate", "(", "spec", ",", "config", ",", "model_dir", ",", "epochs_per_eval", "=", "5", ")", ":", "\n", "  ", "\"\"\"Trains the model on the full training set and evaluates on test set.\n\n  \"Augment\" specifically refers to training the same spec in a larger network on\n  the full training set.  Typically this involves increasing the epoch count,\n  number of modules/stacks, and changing the LR schedule. These changes should\n  be made to the config dict before calling this method.\n\n  Note: this method was not used for generating the NAS Benchmark dataset. See\n  train_and_evaluate instead.\n\n  Args:\n    spec: ModelSpec object.\n    config: config dict generated from config.py.\n    model_dir: directory to store the checkpoint files.\n    epochs_per_eval: number of epochs per evaluation run. Evaluation is always\n      run at the very start and end.\n\n  Returns:\n    dict containing the evaluation metadata.\n  \"\"\"", "\n", "return", "_augment_and_evaluate_impl", "(", "spec", ",", "config", ",", "model_dir", ",", "epochs_per_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._train_and_evaluate_impl": [[83, 87], ["evaluate._TrainAndEvaluator", "evaluate._TrainAndEvaluator.run"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._TrainAndEvaluator.run"], ["", "def", "_train_and_evaluate_impl", "(", "spec", ",", "config", ",", "model_dir", ")", ":", "\n", "  ", "\"\"\"Train and evaluate implementation, see train_and_evaluate docstring.\"\"\"", "\n", "evaluator", "=", "_TrainAndEvaluator", "(", "spec", ",", "config", ",", "model_dir", ")", "\n", "return", "evaluator", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._augment_and_evaluate_impl": [[216, 255], ["evaluate._create_estimator", "tensorflow.train.latest_checkpoint", "int", "nasbench.lib.cifar.CIFARInput", "nasbench.lib.training_time.limit", "nasbench.lib.training_time.limit", "int", "min", "_create_estimator.train", "evaluate._evaluate", "evaluate._get_param_count", "int", "tf.train.latest_checkpoint.split"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._create_estimator", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time.limit", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time.limit", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._evaluate", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._get_param_count"], ["", "", "def", "_augment_and_evaluate_impl", "(", "spec", ",", "config", ",", "model_dir", ",", "epochs_per_eval", "=", "5", ")", ":", "\n", "  ", "\"\"\"Augment and evaluate implementation, see augment_and_evaluate docstring.\"\"\"", "\n", "input_augment", ",", "input_test", "=", "[", "\n", "cifar", ".", "CIFARInput", "(", "m", ",", "config", ")", "\n", "for", "m", "in", "[", "'augment'", ",", "'test'", "]", "]", "\n", "estimator", "=", "_create_estimator", "(", "spec", ",", "config", ",", "model_dir", ",", "\n", "input_augment", ".", "num_images", ")", "\n", "\n", "if", "config", "[", "'train_seconds'", "]", ">", "0.0", ":", "\n", "    ", "timing", "=", "training_time", ".", "limit", "(", "config", "[", "'train_seconds'", "]", ")", "\n", "", "else", ":", "\n", "    ", "timing", "=", "training_time", ".", "limit", "(", "None", ")", "\n", "\n", "", "steps_per_epoch", "=", "input_augment", ".", "num_images", "/", "config", "[", "'batch_size'", "]", "# float", "\n", "ckpt", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "model_dir", ")", "\n", "if", "not", "ckpt", ":", "\n", "    ", "current_step", "=", "0", "\n", "", "else", ":", "\n", "    ", "current_step", "=", "int", "(", "ckpt", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ")", "\n", "", "max_steps", "=", "int", "(", "config", "[", "'train_epochs'", "]", "*", "steps_per_epoch", ")", "\n", "\n", "while", "current_step", "<", "max_steps", ":", "\n", "    ", "next_step", "=", "current_step", "+", "int", "(", "epochs_per_eval", "*", "steps_per_epoch", ")", "\n", "next_step", "=", "min", "(", "next_step", ",", "max_steps", ")", "\n", "estimator", ".", "train", "(", "\n", "input_fn", "=", "input_augment", ".", "input_fn", ",", "\n", "max_steps", "=", "next_step", ",", "\n", "hooks", "=", "[", "timing", ".", "train_hook", "]", ",", "\n", "saving_listeners", "=", "[", "timing", ".", "saving_listener", "]", ")", "\n", "current_step", "=", "next_step", "\n", "\n", "test_accuracy", "=", "_evaluate", "(", "estimator", ",", "input_test", ",", "config", ")", "\n", "\n", "", "metadata", "=", "{", "\n", "'trainable_params'", ":", "_get_param_count", "(", "model_dir", ")", ",", "\n", "'test_accuracy'", ":", "test_accuracy", ",", "\n", "}", "\n", "\n", "return", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._create_estimator": [[257, 287], ["tensorflow.contrib.tpu.RunConfig", "tensorflow.contrib.tpu.TPUEstimator", "tensorflow.contrib.tpu.TPUConfig", "nasbench.lib.model_builder.build_model_fn"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.build_model_fn"], ["", "def", "_create_estimator", "(", "spec", ",", "config", ",", "model_dir", ",", "\n", "num_train_images", ",", "num_sample_images", "=", "None", ")", ":", "\n", "  ", "\"\"\"Creates the TPUEstimator object.\"\"\"", "\n", "# Estimator will save a checkpoint at the end of every train() call. Disable", "\n", "# automatic checkpoints by setting the time interval between checkpoints to", "\n", "# a very large value.", "\n", "run_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "RunConfig", "(", "\n", "model_dir", "=", "model_dir", ",", "\n", "keep_checkpoint_max", "=", "3", ",", "# Keeps ckpt at start, halfway, and end", "\n", "save_checkpoints_secs", "=", "2", "**", "30", ",", "\n", "tpu_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUConfig", "(", "\n", "iterations_per_loop", "=", "config", "[", "'tpu_iterations_per_loop'", "]", ",", "\n", "num_shards", "=", "config", "[", "'tpu_num_shards'", "]", ")", ")", "\n", "\n", "# This is a hack to allow PREDICT on a fixed batch on TPU. By replicating the", "\n", "# batch by the number of shards, this ensures each TPU core operates on the", "\n", "# entire fixed batch.", "\n", "if", "num_sample_images", "and", "config", "[", "'use_tpu'", "]", ":", "\n", "    ", "num_sample_images", "*=", "config", "[", "'tpu_num_shards'", "]", "\n", "\n", "", "estimator", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimator", "(", "\n", "use_tpu", "=", "config", "[", "'use_tpu'", "]", ",", "\n", "model_fn", "=", "model_builder", ".", "build_model_fn", "(", "\n", "spec", ",", "config", ",", "num_train_images", ")", ",", "\n", "config", "=", "run_config", ",", "\n", "train_batch_size", "=", "config", "[", "'batch_size'", "]", ",", "\n", "eval_batch_size", "=", "config", "[", "'batch_size'", "]", ",", "\n", "predict_batch_size", "=", "num_sample_images", ")", "\n", "\n", "return", "estimator", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._evaluate": [[289, 297], ["estimator.evaluate"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.test.evaluate"], ["", "def", "_evaluate", "(", "estimator", ",", "input_data", ",", "config", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Evaluate the estimator on the input data.\"\"\"", "\n", "steps", "=", "input_data", ".", "num_images", "//", "config", "[", "'batch_size'", "]", "\n", "results", "=", "estimator", ".", "evaluate", "(", "\n", "input_fn", "=", "input_data", ".", "input_fn", ",", "\n", "steps", "=", "steps", ",", "\n", "name", "=", "name", ")", "\n", "return", "results", "[", "'accuracy'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._get_param_count": [[299, 311], ["tensorflow.reset_default_graph", "tensorflow.train.get_checkpoint_state", "tensorflow.Session", "tensorflow.train.import_meta_graph", "tf.train.import_meta_graph.restore", "numpy.sum", "numpy.prod", "v.get_shape().as_list", "tensorflow.trainable_variables", "v.get_shape"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasp.model_search.NASPNetwork.restore"], ["", "def", "_get_param_count", "(", "model_dir", ")", ":", "\n", "  ", "\"\"\"Get trainable param count from the model directory.\"\"\"", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "checkpoint", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "model_dir", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "\n", "checkpoint", ".", "model_checkpoint_path", "+", "'.meta'", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint", ".", "model_checkpoint_path", ")", "\n", "params", "=", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", "\n", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._TimingRunHook.__init__": [[133, 141], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_train_secs", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializes the instance.\n\n    Args:\n      max_train_secs: the maximum number of seconds to train for. If None,\n        training will not be limited by time.\n    \"\"\"", "\n", "self", ".", "_max_train_secs", "=", "max_train_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._TimingRunHook.begin": [[142, 164], ["tensorflow.name_scope", "training_time._get_or_create_timing_vars", "training_time._seconds_to_internal_time", "tensorflow.cond", "_get_or_create_timing_vars.total_time.assign", "tensorflow.timestamp", "tensorflow.control_dependencies", "_get_or_create_timing_vars.steps.assign_add", "tensorflow.equal", "training_time._internal_time_to_seconds", "_get_or_create_timing_vars.start_timestamp.assign"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._get_or_create_timing_vars", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._seconds_to_internal_time", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._internal_time_to_seconds"], ["", "def", "begin", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "_SCOPE_NAME", ")", ":", "\n", "# See _get_or_create_timing_vars for the definitions of these variables.", "\n", "      ", "timing_vars", "=", "_get_or_create_timing_vars", "(", ")", "\n", "\n", "# An op to produce a tensor with the latest timestamp.", "\n", "self", ".", "_end_op", "=", "_seconds_to_internal_time", "(", "tf", ".", "timestamp", "(", "name", "=", "'end'", ")", ")", "\n", "\n", "# An op to update the timing_vars.start_timestamp variable.", "\n", "self", ".", "_start_op", "=", "tf", ".", "cond", "(", "\n", "pred", "=", "tf", ".", "equal", "(", "timing_vars", ".", "steps", ",", "0", ")", ",", "\n", "true_fn", "=", "lambda", ":", "timing_vars", ".", "start_timestamp", ".", "assign", "(", "self", ".", "_end_op", ")", ",", "\n", "false_fn", "=", "lambda", ":", "timing_vars", ".", "start_timestamp", ")", "\n", "\n", "# An op to update the step.", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "self", ".", "_start_op", "]", ")", ":", "\n", "        ", "self", ".", "_step_op", "=", "timing_vars", ".", "steps", ".", "assign_add", "(", "1", ")", "\n", "\n", "# An op to compute the timing_vars.total_time variable.", "\n", "", "self", ".", "_total_op", "=", "timing_vars", ".", "total_time", ".", "assign", "(", "\n", "timing_vars", ".", "previous_time", "+", "\n", "_internal_time_to_seconds", "(", "self", ".", "_end_op", "-", "self", ".", "_start_op", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._TimingRunHook.before_run": [[165, 167], ["tensorflow.train.SessionRunArgs"], "methods", ["None"], ["", "", "def", "before_run", "(", "self", ",", "run_context", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "SessionRunArgs", "(", "[", "self", ".", "_total_op", ",", "self", ".", "_step_op", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._TimingRunHook.after_run": [[168, 172], ["run_context.request_stop"], "methods", ["None"], ["", "def", "after_run", "(", "self", ",", "run_context", ",", "run_values", ")", ":", "\n", "    ", "total_time", ",", "_", "=", "run_values", ".", "results", "\n", "if", "self", ".", "_max_train_secs", "and", "total_time", ">", "self", ".", "_max_train_secs", ":", "\n", "      ", "run_context", ".", "request_stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._TimingSaverListener.begin": [[177, 186], ["tensorflow.name_scope", "training_time._get_or_create_timing_vars", "_get_or_create_timing_vars.previous_time.assign", "_get_or_create_timing_vars.steps.assign"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._get_or_create_timing_vars"], ["def", "begin", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "_SCOPE_NAME", ")", ":", "\n", "      ", "timing_vars", "=", "_get_or_create_timing_vars", "(", ")", "\n", "\n", "# An op to update the timing_vars.previous_time variable.", "\n", "self", ".", "_prev_op", "=", "timing_vars", ".", "previous_time", ".", "assign", "(", "timing_vars", ".", "total_time", ")", "\n", "\n", "# Marks that timing_vars.start_timestamp should be reset in the next step.", "\n", "self", ".", "_reset_steps_op", "=", "timing_vars", ".", "steps", ".", "assign", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._TimingSaverListener.before_save": [[187, 189], ["session.run"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._TrainAndEvaluator.run"], ["", "", "def", "before_save", "(", "self", ",", "session", ",", "global_step_value", ")", ":", "\n", "    ", "session", ".", "run", "(", "self", ".", "_prev_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._TimingSaverListener.after_save": [[190, 192], ["session.run"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._TrainAndEvaluator.run"], ["", "def", "after_save", "(", "self", ",", "session", ",", "global_step_value", ")", ":", "\n", "    ", "session", ".", "run", "(", "self", ".", "_reset_steps_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._seconds_to_internal_time": [[46, 49], ["tensorflow.to_int64", "tensorflow.round"], "function", ["None"], ["def", "_seconds_to_internal_time", "(", "seconds", ")", ":", "\n", "  ", "\"\"\"Converts seconds to fixed-precision time.\"\"\"", "\n", "return", "tf", ".", "to_int64", "(", "tf", ".", "round", "(", "seconds", "*", "_INTERNAL_TIME_PRECISION", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._internal_time_to_seconds": [[51, 54], ["tensorflow.to_float"], "function", ["None"], ["", "def", "_internal_time_to_seconds", "(", "internal_time", ")", ":", "\n", "  ", "\"\"\"Converts fixed-precision time to seconds.\"\"\"", "\n", "return", "tf", ".", "to_float", "(", "internal_time", "/", "_INTERNAL_TIME_PRECISION", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time.limit": [[70, 87], ["training_time._TimingRunHook", "training_time._TimingSaverListener", "Timing"], "function", ["None"], ["def", "limit", "(", "max_train_secs", "=", "None", ")", ":", "\n", "  ", "\"\"\"Provides hooks and ops to measure/limit the training time of a model.\n\n  This is done by direct measurement of the time spent on training steps. It\n  excludes time spent saving checkpoints or due to pre-emptions.\n\n  Args:\n    max_train_secs: the desired training time limit. It is possible that this\n      may be exceeded by the time it takes to run 1 step. If None, training will\n      not be limited by time but timing variables will still be created.\n\n  Returns:\n    A Timing named tuple.\n  \"\"\"", "\n", "train_hook", "=", "_TimingRunHook", "(", "max_train_secs", ")", "\n", "saving_listener", "=", "_TimingSaverListener", "(", ")", "\n", "return", "Timing", "(", "train_hook", "=", "train_hook", ",", "saving_listener", "=", "saving_listener", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time.get_total_time": [[89, 103], ["training_time._get_or_create_timing_vars"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._get_or_create_timing_vars"], ["", "def", "get_total_time", "(", ")", ":", "\n", "  ", "\"\"\"Returns the timing/total_time variable, regardless of current scope.\n\n  You may need to call force_create_timing_vars() first, or else there is a risk\n  that you may try to retrieve a variable that doesn't yet exist.\n\n  Returns:\n    A TF Variable.\n\n  Raises:\n    RuntimeError: if the variable has not been created yet.\n  \"\"\"", "\n", "timing_vars", "=", "_get_or_create_timing_vars", "(", ")", "\n", "return", "timing_vars", ".", "total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time._get_or_create_timing_vars": [[194, 234], ["tensorflow.get_variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "_TimingVars", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.utils.get_variable", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.utils.get_variable", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.utils.get_variable", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.enas.utils.get_variable"], ["", "", "def", "_get_or_create_timing_vars", "(", ")", ":", "\n", "  ", "\"\"\"Creates variables used to measure training time.\n\n  Returns:\n    A _TimingVars named tuple.\n  \"\"\"", "\n", "# We always create the timing variables at root_scope / _SCOPE_NAME,", "\n", "# regardless of the scope from where this is called.", "\n", "root_scope", "=", "tf", ".", "get_variable_scope", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "root_scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "_SCOPE_NAME", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "      ", "start_timestamp", "=", "tf", ".", "get_variable", "(", "\n", "_START_VAR", ",", "\n", "shape", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "-", "1", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "steps", "=", "tf", ".", "get_variable", "(", "\n", "_STEPS_VAR", ",", "\n", "shape", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "previous_time", "=", "tf", ".", "get_variable", "(", "\n", "_PREV_VAR", ",", "\n", "shape", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "total_time", "=", "tf", ".", "get_variable", "(", "\n", "_TOTAL_VAR", ",", "\n", "shape", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "return", "_TimingVars", "(", "\n", "start_timestamp", "=", "start_timestamp", ",", "\n", "steps", "=", "steps", ",", "\n", "previous_time", "=", "previous_time", ",", "\n", "total_time", "=", "total_time", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.ModelSpec.__init__": [[40, 76], ["numpy.shape", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "model_spec.ModelSpec._prune", "isinstance", "numpy.array", "ValueError", "len", "ValueError", "model_spec.is_upper_triangular", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.ModelSpec._prune", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.is_upper_triangular"], ["def", "__init__", "(", "self", ",", "matrix", ",", "ops", ",", "data_format", "=", "'channels_last'", ")", ":", "\n", "    ", "\"\"\"Initialize the module spec.\n\n    Args:\n      matrix: ndarray or nested list with shape [V, V] for the adjacency matrix.\n      ops: V-length list of labels for the base ops used. The first and last\n        elements are ignored because they are the input and output vertices\n        which have no operations. The elements are retained to keep consistent\n        indexing.\n      data_format: channels_last or channels_first.\n\n    Raises:\n      ValueError: invalid matrix or ops\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "matrix", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "if", "len", "(", "shape", ")", "!=", "2", "or", "shape", "[", "0", "]", "!=", "shape", "[", "1", "]", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be square'", ")", "\n", "", "if", "shape", "[", "0", "]", "!=", "len", "(", "ops", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'length of ops must match matrix dimensions'", ")", "\n", "", "if", "not", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be upper triangular'", ")", "\n", "\n", "# Both the original and pruned matrices are deep copies of the matrix and", "\n", "# ops so any changes to those after initialization are not recognized by the", "\n", "# spec.", "\n", "", "self", ".", "original_matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "original_ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "\n", "self", ".", "matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "self", ".", "valid_spec", "=", "True", "\n", "self", ".", "_prune", "(", ")", "\n", "\n", "self", ".", "data_format", "=", "data_format", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.ModelSpec._prune": [[77, 127], ["set", "set", "set().difference", "numpy.delete", "numpy.delete", "sorted", "numpy.shape", "frontier.pop", "range", "frontier.pop", "range", "set.intersection", "len", "list", "list", "set", "set.add", "frontier.append", "set.add", "frontier.append", "range"], "methods", ["None"], ["", "def", "_prune", "(", "self", ")", ":", "\n", "    ", "\"\"\"Prune the extraneous parts of the graph.\n\n    General procedure:\n      1) Remove parts of graph not connected to input.\n      2) Remove parts of graph not connected to output.\n      3) Reorder the vertices so that they are consecutive after steps 1 and 2.\n\n    These 3 steps can be combined by deleting the rows and columns of the\n    vertices that are not reachable from both the input and output (in reverse).\n    \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "original_matrix", ")", "[", "0", "]", "\n", "\n", "# DFS forward from input", "\n", "visited_from_input", "=", "set", "(", "[", "0", "]", ")", "\n", "frontier", "=", "[", "0", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "top", "+", "1", ",", "num_vertices", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "top", ",", "v", "]", "and", "v", "not", "in", "visited_from_input", ":", "\n", "          ", "visited_from_input", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# DFS backward from output", "\n", "", "", "", "visited_from_output", "=", "set", "(", "[", "num_vertices", "-", "1", "]", ")", "\n", "frontier", "=", "[", "num_vertices", "-", "1", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "0", ",", "top", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "v", ",", "top", "]", "and", "v", "not", "in", "visited_from_output", ":", "\n", "          ", "visited_from_output", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# Any vertex that isn't connected to both input and output is extraneous to", "\n", "# the computation graph.", "\n", "", "", "", "extraneous", "=", "set", "(", "range", "(", "num_vertices", ")", ")", ".", "difference", "(", "\n", "visited_from_input", ".", "intersection", "(", "visited_from_output", ")", ")", "\n", "\n", "# If the non-extraneous graph is less than 2 vertices, the input is not", "\n", "# connected to the output and the spec is invalid.", "\n", "if", "len", "(", "extraneous", ")", ">", "num_vertices", "-", "2", ":", "\n", "      ", "self", ".", "matrix", "=", "None", "\n", "self", ".", "ops", "=", "None", "\n", "self", ".", "valid_spec", "=", "False", "\n", "return", "\n", "\n", "", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "1", ")", "\n", "for", "index", "in", "sorted", "(", "extraneous", ",", "reverse", "=", "True", ")", ":", "\n", "      ", "del", "self", ".", "ops", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.ModelSpec.hash_spec": [[128, 141], ["nasbench.lib.graph_util.hash_module", "canonical_ops.index"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module"], ["", "", "def", "hash_spec", "(", "self", ",", "canonical_ops", ")", ":", "\n", "    ", "\"\"\"Computes the isomorphism-invariant graph hash of this spec.\n\n    Args:\n      canonical_ops: list of operations in the canonical ordering which they\n        were assigned (i.e. the order provided in the config['available_ops']).\n\n    Returns:\n      MD5 hash of this spec which can be used to query the dataset.\n    \"\"\"", "\n", "# Invert the operations back to integer label indices used in graph gen.", "\n", "labeling", "=", "[", "-", "1", "]", "+", "[", "canonical_ops", ".", "index", "(", "op", ")", "for", "op", "in", "self", ".", "ops", "[", "1", ":", "-", "1", "]", "]", "+", "[", "-", "2", "]", "\n", "return", "graph_util", ".", "hash_module", "(", "self", ".", "matrix", ",", "labeling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.ModelSpec.visualize": [[142, 157], ["graphviz.Digraph", "graphviz.Digraph.node", "range", "graphviz.Digraph.node", "range", "numpy.shape", "str", "graphviz.Digraph.node", "str", "range", "str", "graphviz.Digraph.edge", "str", "str"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node"], ["", "def", "visualize", "(", "self", ")", ":", "\n", "    ", "\"\"\"Creates a dot graph. Can be visualized in colab directly.\"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "matrix", ")", "[", "0", "]", "\n", "g", "=", "graphviz", ".", "Digraph", "(", ")", "\n", "g", ".", "node", "(", "str", "(", "0", ")", ",", "'input'", ")", "\n", "for", "v", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "      ", "g", ".", "node", "(", "str", "(", "v", ")", ",", "self", ".", "ops", "[", "v", "]", ")", "\n", "", "g", ".", "node", "(", "str", "(", "num_vertices", "-", "1", ")", ",", "'output'", ")", "\n", "\n", "for", "src", "in", "range", "(", "num_vertices", "-", "1", ")", ":", "\n", "      ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "num_vertices", ")", ":", "\n", "        ", "if", "self", ".", "matrix", "[", "src", ",", "dst", "]", ":", "\n", "          ", "g", ".", "edge", "(", "str", "(", "src", ")", ",", "str", "(", "dst", ")", ")", "\n", "\n", "", "", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.is_upper_triangular": [[159, 167], ["range", "range", "numpy.shape"], "function", ["None"], ["", "", "def", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"True if matrix is 0 on diagonal and below.\"\"\"", "\n", "for", "src", "in", "range", "(", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", ")", ":", "\n", "    ", "for", "dst", "in", "range", "(", "0", ",", "src", "+", "1", ")", ":", "\n", "      ", "if", "matrix", "[", "src", ",", "dst", "]", "!=", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.build_model_fn": [[36, 241], ["range", "tensorflow.layers.dense", "ValueError", "tensorflow.variable_scope", "nasbench.lib.base_ops.conv_bn_relu", "aux_activations.append", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.losses.softmax_cross_entropy", "tensorflow.trainable_variables", "all_params_names.append", "all_params_tensors.append", "tensorflow.gradients", "tf.argmax.update", "tf.argmax.update", "tf.argmax.update", "tensorflow.contrib.tpu.TPUEstimatorSpec", "tensorflow.train.get_or_create_global_step", "tensorflow.where", "tensorflow.train.RMSPropOptimizer", "tensorflow.get_collection", "tensorflow.contrib.tpu.TPUEstimatorSpec", "tensorflow.layers.max_pooling2d", "tensorflow.variable_scope", "range", "aux_activations.append", "tensorflow.reduce_mean", "ValueError", "tensorflow.add_n", "tensorflow.expand_dims", "all_params_names.append", "all_params_tensors.append", "zip", "tensorflow.sqrt", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "int", "tensorflow.equal", "tensorflow.contrib.tpu.CrossShardOptimizer", "tensorflow.control_dependencies", "tf.contrib.tpu.CrossShardOptimizer.minimize", "tensorflow.contrib.tpu.TPUEstimatorSpec", "build_module.get_shape", "tensorflow.one_hot", "tensorflow.norm", "tensorflow.trainable_variables", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.constant", "model_builder._covariance_matrix", "enumerate", "tensorflow.cast", "tensorflow.cast", "tensorflow.argmax", "tensorflow.metrics.accuracy", "tensorflow.variable_scope", "model_builder.build_module", "tensorflow.nn.l2_loss", "tensorflow.norm", "tensorflow.constant", "tensorflow.square", "tensorflow.cos", "nasbench.lib.training_time.get_total_time", "tensorflow.train.piecewise_constant", "ValueError", "tensorflow.trainable_variables", "tensorflow.cos", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder._covariance_matrix", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.build_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.training_time.get_total_time"], ["def", "build_model_fn", "(", "spec", ",", "config", ",", "num_train_images", ")", ":", "\n", "  ", "\"\"\"Returns a model function for Estimator.\"\"\"", "\n", "if", "config", "[", "'data_format'", "]", "==", "'channels_last'", ":", "\n", "    ", "channel_axis", "=", "3", "\n", "", "elif", "config", "[", "'data_format'", "]", "==", "'channels_first'", ":", "\n", "# Currently this is not well supported", "\n", "    ", "channel_axis", "=", "1", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid data_format'", ")", "\n", "\n", "", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "\n", "    ", "\"\"\"Builds the model from the input features.\"\"\"", "\n", "del", "params", "# Unused", "\n", "is_training", "=", "(", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "# Store auxiliary activations increasing in depth of network. First", "\n", "# activation occurs immediately after the stem and the others immediately", "\n", "# follow each stack.", "\n", "aux_activations", "=", "[", "]", "\n", "\n", "# Initial stem convolution", "\n", "with", "tf", ".", "variable_scope", "(", "'stem'", ")", ":", "\n", "      ", "net", "=", "base_ops", ".", "conv_bn_relu", "(", "\n", "features", ",", "3", ",", "config", "[", "'stem_filter_size'", "]", ",", "\n", "is_training", ",", "config", "[", "'data_format'", "]", ")", "\n", "aux_activations", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "stack_num", "in", "range", "(", "config", "[", "'num_stacks'", "]", ")", ":", "\n", "      ", "channels", "=", "net", ".", "get_shape", "(", ")", "[", "channel_axis", "]", ".", "value", "\n", "\n", "# Downsample at start (except first)", "\n", "if", "stack_num", ">", "0", ":", "\n", "        ", "net", "=", "tf", ".", "layers", ".", "max_pooling2d", "(", "\n", "inputs", "=", "net", ",", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "config", "[", "'data_format'", "]", ")", "\n", "\n", "# Double output channels each time we downsample", "\n", "channels", "*=", "2", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'stack{}'", ".", "format", "(", "stack_num", ")", ")", ":", "\n", "        ", "for", "module_num", "in", "range", "(", "config", "[", "'num_modules_per_stack'", "]", ")", ":", "\n", "          ", "with", "tf", ".", "variable_scope", "(", "'module{}'", ".", "format", "(", "module_num", ")", ")", ":", "\n", "            ", "net", "=", "build_module", "(", "\n", "spec", ",", "\n", "inputs", "=", "net", ",", "\n", "channels", "=", "channels", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "", "aux_activations", ".", "append", "(", "net", ")", "\n", "\n", "# Global average pool", "\n", "", "", "if", "config", "[", "'data_format'", "]", "==", "'channels_last'", ":", "\n", "      ", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", "]", ")", "\n", "", "elif", "config", "[", "'data_format'", "]", "==", "'channels_first'", ":", "\n", "      ", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "2", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid data_format'", ")", "\n", "\n", "# Fully-connected layer to labels", "\n", "", "logits", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "inputs", "=", "net", ",", "\n", "units", "=", "config", "[", "'num_labels'", "]", ")", "\n", "\n", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "PREDICT", "and", "not", "config", "[", "'use_tpu'", "]", ":", "\n", "# It is a known limitation of Estimator that the labels", "\n", "# are not passed during PREDICT mode when running on CPU/GPU", "\n", "# (https://github.com/tensorflow/tensorflow/issues/17824), thus we cannot", "\n", "# compute the loss or anything dependent on it (i.e., the gradients).", "\n", "      ", "loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "", "else", ":", "\n", "      ", "loss", "=", "tf", ".", "losses", ".", "softmax_cross_entropy", "(", "\n", "onehot_labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "config", "[", "'num_labels'", "]", ")", ",", "\n", "logits", "=", "logits", ")", "\n", "\n", "loss", "+=", "config", "[", "'weight_decay'", "]", "*", "tf", ".", "add_n", "(", "\n", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", "\n", "\n", "# Use inference mode to compute some useful metrics on a fixed sample", "\n", "# Due to the batch being sharded on TPU, these metrics should be run on CPU", "\n", "# only to ensure that the metrics are computed on the whole batch. We add a", "\n", "# leading dimension because PREDICT expects batch-shaped tensors.", "\n", "", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "PREDICT", ":", "\n", "      ", "parameter_norms", "=", "{", "\n", "'param:'", "+", "tensor", ".", "name", ":", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "norm", "(", "tensor", ",", "ord", "=", "2", ")", ",", "0", ")", "\n", "for", "tensor", "in", "tf", ".", "trainable_variables", "(", ")", "\n", "}", "\n", "\n", "# Compute gradients of all parameters and the input simultaneously", "\n", "all_params_names", "=", "[", "]", "\n", "all_params_tensors", "=", "[", "]", "\n", "for", "tensor", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "        ", "all_params_names", ".", "append", "(", "'param_grad_norm:'", "+", "tensor", ".", "name", ")", "\n", "all_params_tensors", ".", "append", "(", "tensor", ")", "\n", "", "all_params_names", ".", "append", "(", "'input_grad_norm'", ")", "\n", "all_params_tensors", ".", "append", "(", "features", ")", "\n", "\n", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "all_params_tensors", ")", "\n", "\n", "param_gradient_norms", "=", "{", "}", "\n", "for", "name", ",", "grad", "in", "zip", "(", "all_params_names", ",", "grads", ")", "[", ":", "-", "1", "]", ":", "\n", "        ", "if", "grad", "is", "not", "None", ":", "\n", "          ", "param_gradient_norms", "[", "name", "]", "=", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "norm", "(", "grad", ",", "ord", "=", "2", ")", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "          ", "param_gradient_norms", "[", "name", "]", "=", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "constant", "(", "0.0", ")", ",", "0", ")", ")", "\n", "\n", "", "", "if", "grads", "[", "-", "1", "]", "is", "not", "None", ":", "\n", "        ", "input_grad_norm", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "square", "(", "grads", "[", "-", "1", "]", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "input_grad_norm", "=", "tf", ".", "expand_dims", "(", "tf", ".", "constant", "(", "0.0", ")", ",", "0", ")", "\n", "\n", "", "covariance_matrices", "=", "{", "\n", "'cov_matrix_%d'", "%", "i", ":", "\n", "tf", ".", "expand_dims", "(", "_covariance_matrix", "(", "aux", ")", ",", "0", ")", "\n", "for", "i", ",", "aux", "in", "enumerate", "(", "aux_activations", ")", "\n", "}", "\n", "\n", "predictions", "=", "{", "\n", "'logits'", ":", "logits", ",", "\n", "'loss'", ":", "tf", ".", "expand_dims", "(", "loss", ",", "0", ")", ",", "\n", "'input_grad_norm'", ":", "input_grad_norm", ",", "\n", "}", "\n", "predictions", ".", "update", "(", "parameter_norms", ")", "\n", "predictions", ".", "update", "(", "param_gradient_norms", ")", "\n", "predictions", ".", "update", "(", "covariance_matrices", ")", "\n", "\n", "return", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "mode", "=", "mode", ",", "predictions", "=", "predictions", ")", "\n", "\n", "", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "base_lr", "=", "config", "[", "'learning_rate'", "]", "\n", "if", "config", "[", "'use_tpu'", "]", ":", "\n", "        ", "base_lr", "*=", "config", "[", "'tpu_num_shards'", "]", "\n", "\n", "", "if", "config", "[", "'lr_decay_method'", "]", "==", "'COSINE_BY_STEP'", ":", "\n", "        ", "total_steps", "=", "int", "(", "config", "[", "'train_epochs'", "]", "*", "num_train_images", "/", "\n", "config", "[", "'batch_size'", "]", ")", "\n", "progress_fraction", "=", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "float32", ")", "/", "total_steps", "\n", "learning_rate", "=", "(", "0.5", "*", "base_lr", "*", "\n", "(", "1", "+", "tf", ".", "cos", "(", "np", ".", "pi", "*", "progress_fraction", ")", ")", ")", "\n", "\n", "", "elif", "config", "[", "'lr_decay_method'", "]", "==", "'COSINE_BY_TIME'", ":", "\n", "# Requires training_time.limit hooks to be added to Estimator", "\n", "        ", "elapsed_time", "=", "tf", ".", "cast", "(", "training_time", ".", "get_total_time", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "progress_fraction", "=", "elapsed_time", "/", "config", "[", "'train_seconds'", "]", "\n", "learning_rate", "=", "(", "0.5", "*", "base_lr", "*", "\n", "(", "1", "+", "tf", ".", "cos", "(", "np", ".", "pi", "*", "progress_fraction", ")", ")", ")", "\n", "\n", "", "elif", "config", "[", "'lr_decay_method'", "]", "==", "'STEPWISE'", ":", "\n", "# divide LR by 10 at 1/2, 2/3, and 5/6 of total epochs", "\n", "        ", "total_steps", "=", "(", "config", "[", "'train_epochs'", "]", "*", "num_train_images", "/", "\n", "config", "[", "'batch_size'", "]", ")", "\n", "boundaries", "=", "[", "int", "(", "0.5", "*", "total_steps", ")", ",", "\n", "int", "(", "0.667", "*", "total_steps", ")", ",", "\n", "int", "(", "0.833", "*", "total_steps", ")", "]", "\n", "values", "=", "[", "1.0", "*", "base_lr", ",", "\n", "0.1", "*", "base_lr", ",", "\n", "0.01", "*", "base_lr", ",", "\n", "0.0001", "*", "base_lr", "]", "\n", "learning_rate", "=", "tf", ".", "train", ".", "piecewise_constant", "(", "\n", "global_step", ",", "boundaries", ",", "values", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid lr_decay_method'", ")", "\n", "\n", "# Set LR to 0 for step 0 to initialize the weights without training", "\n", "", "learning_rate", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "global_step", ",", "0", ")", ",", "0.0", ",", "learning_rate", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "epsilon", "=", "1.0", ")", "\n", "if", "config", "[", "'use_tpu'", "]", ":", "\n", "        ", "optimizer", "=", "tf", ".", "contrib", ".", "tpu", ".", "CrossShardOptimizer", "(", "optimizer", ")", "\n", "\n", "# Update ops required for batch norm moving variables", "\n", "", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "        ", "train_op", "=", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", ")", "\n", "\n", "", "return", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "loss", "=", "loss", ",", "\n", "train_op", "=", "train_op", ")", "\n", "\n", "", "elif", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "EVAL", ":", "\n", "      ", "def", "metric_fn", "(", "labels", ",", "logits", ")", ":", "\n", "        ", "predictions", "=", "tf", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "accuracy", "=", "tf", ".", "metrics", ".", "accuracy", "(", "labels", ",", "predictions", ")", "\n", "\n", "return", "{", "'accuracy'", ":", "accuracy", "}", "\n", "\n", "", "eval_metrics", "=", "(", "metric_fn", ",", "[", "labels", ",", "logits", "]", ")", "\n", "\n", "return", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "loss", "=", "loss", ",", "\n", "eval_metrics", "=", "eval_metrics", ")", "\n", "\n", "", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.build_module": [[243, 336], ["model_builder.compute_vertex_channels", "range", "tensorflow.identity", "numpy.shape", "tensorflow.identity", "tensors.append", "ValueError", "inputs.get_shape", "tensorflow.variable_scope", "op.build", "final_concat_in.append", "tensorflow.variable_scope", "model_builder.projection", "len", "tensorflow.concat", "model_builder.projection", "model_builder.truncate", "add_in.append", "len", "tensorflow.add_n", "range", "model_builder.projection"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.MaxPool3x3Conv1x1.build", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.projection", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.projection", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.truncate", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.projection"], ["", "def", "build_module", "(", "spec", ",", "inputs", ",", "channels", ",", "is_training", ")", ":", "\n", "  ", "\"\"\"Build a custom module using a proposed model spec.\n\n  Builds the model using the adjacency matrix and op labels specified. Channels\n  controls the module output channel count but the interior channels are\n  determined via equally splitting the channel count whenever there is a\n  concatenation of Tensors.\n\n  Args:\n    spec: ModelSpec object.\n    inputs: input Tensors to this module.\n    channels: output channel count.\n    is_training: bool for whether this model is training.\n\n  Returns:\n    output Tensor from built module.\n\n  Raises:\n    ValueError: invalid spec\n  \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "spec", ".", "matrix", ")", "[", "0", "]", "\n", "\n", "if", "spec", ".", "data_format", "==", "'channels_last'", ":", "\n", "    ", "channel_axis", "=", "3", "\n", "", "elif", "spec", ".", "data_format", "==", "'channels_first'", ":", "\n", "    ", "channel_axis", "=", "1", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid data_format'", ")", "\n", "\n", "", "input_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "channel_axis", "]", ".", "value", "\n", "# vertex_channels[i] = number of output channels of vertex i", "\n", "vertex_channels", "=", "compute_vertex_channels", "(", "\n", "input_channels", ",", "channels", ",", "spec", ".", "matrix", ")", "\n", "\n", "# Construct tensors from input forward", "\n", "tensors", "=", "[", "tf", ".", "identity", "(", "inputs", ",", "name", "=", "'input'", ")", "]", "\n", "\n", "final_concat_in", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'vertex_{}'", ".", "format", "(", "t", ")", ")", ":", "\n", "# Create interior connections, truncating if necessary", "\n", "      ", "add_in", "=", "[", "truncate", "(", "tensors", "[", "src", "]", ",", "vertex_channels", "[", "t", "]", ",", "spec", ".", "data_format", ")", "\n", "for", "src", "in", "range", "(", "1", ",", "t", ")", "if", "spec", ".", "matrix", "[", "src", ",", "t", "]", "]", "\n", "\n", "# Create add connection from projected input", "\n", "if", "spec", ".", "matrix", "[", "0", ",", "t", "]", ":", "\n", "        ", "add_in", ".", "append", "(", "projection", "(", "\n", "tensors", "[", "0", "]", ",", "\n", "vertex_channels", "[", "t", "]", ",", "\n", "is_training", ",", "\n", "spec", ".", "data_format", ")", ")", "\n", "\n", "", "if", "len", "(", "add_in", ")", "==", "1", ":", "\n", "        ", "vertex_input", "=", "add_in", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "vertex_input", "=", "tf", ".", "add_n", "(", "add_in", ")", "\n", "\n", "# Perform op at vertex t", "\n", "", "op", "=", "base_ops", ".", "OP_MAP", "[", "spec", ".", "ops", "[", "t", "]", "]", "(", "\n", "is_training", "=", "is_training", ",", "\n", "data_format", "=", "spec", ".", "data_format", ")", "\n", "vertex_value", "=", "op", ".", "build", "(", "vertex_input", ",", "vertex_channels", "[", "t", "]", ")", "\n", "\n", "", "tensors", ".", "append", "(", "vertex_value", ")", "\n", "if", "spec", ".", "matrix", "[", "t", ",", "num_vertices", "-", "1", "]", ":", "\n", "      ", "final_concat_in", ".", "append", "(", "tensors", "[", "t", "]", ")", "\n", "\n", "# Construct final output tensor by concating all fan-in and adding input.", "\n", "", "", "if", "not", "final_concat_in", ":", "\n", "# No interior vertices, input directly connected to output", "\n", "    ", "assert", "spec", ".", "matrix", "[", "0", ",", "num_vertices", "-", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'output'", ")", ":", "\n", "      ", "outputs", "=", "projection", "(", "\n", "tensors", "[", "0", "]", ",", "\n", "channels", ",", "\n", "is_training", ",", "\n", "spec", ".", "data_format", ")", "\n", "\n", "", "", "else", ":", "\n", "    ", "if", "len", "(", "final_concat_in", ")", "==", "1", ":", "\n", "      ", "outputs", "=", "final_concat_in", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "outputs", "=", "tf", ".", "concat", "(", "final_concat_in", ",", "channel_axis", ")", "\n", "\n", "", "if", "spec", ".", "matrix", "[", "0", ",", "num_vertices", "-", "1", "]", ":", "\n", "      ", "outputs", "+=", "projection", "(", "\n", "tensors", "[", "0", "]", ",", "\n", "channels", ",", "\n", "is_training", ",", "\n", "spec", ".", "data_format", ")", "\n", "\n", "", "", "outputs", "=", "tf", ".", "identity", "(", "outputs", ",", "name", "=", "'output'", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.projection": [[338, 344], ["tensorflow.variable_scope", "nasbench.lib.base_ops.conv_bn_relu"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu"], ["", "def", "projection", "(", "inputs", ",", "channels", ",", "is_training", ",", "data_format", ")", ":", "\n", "  ", "\"\"\"1x1 projection (as in ResNet) followed by batch normalization and ReLU.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'projection'", ")", ":", "\n", "    ", "net", "=", "base_ops", ".", "conv_bn_relu", "(", "inputs", ",", "1", ",", "channels", ",", "is_training", ",", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.truncate": [[346, 367], ["ValueError", "inputs.get_shape", "inputs.get_shape", "tensorflow.slice", "tensorflow.slice"], "function", ["None"], ["", "def", "truncate", "(", "inputs", ",", "channels", ",", "data_format", ")", ":", "\n", "  ", "\"\"\"Slice the inputs to channels if necessary.\"\"\"", "\n", "if", "data_format", "==", "'channels_last'", ":", "\n", "    ", "input_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "3", "]", ".", "value", "\n", "", "else", ":", "\n", "    ", "assert", "data_format", "==", "'channels_first'", "\n", "input_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "\n", "", "if", "input_channels", "<", "channels", ":", "\n", "    ", "raise", "ValueError", "(", "'input channel < output channels for truncate'", ")", "\n", "", "elif", "input_channels", "==", "channels", ":", "\n", "    ", "return", "inputs", "# No truncation necessary", "\n", "", "else", ":", "\n", "# Truncation should only be necessary when channel division leads to", "\n", "# vertices with +1 channels. The input vertex should always be projected to", "\n", "# the minimum channel count.", "\n", "    ", "assert", "input_channels", "-", "channels", "==", "1", "\n", "if", "data_format", "==", "'channels_last'", ":", "\n", "      ", "return", "tf", ".", "slice", "(", "inputs", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "channels", "]", ")", "\n", "", "else", ":", "\n", "      ", "return", "tf", ".", "slice", "(", "inputs", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "channels", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels": [[369, 435], ["numpy.sum", "range", "range", "tensorflow.logging.info", "range", "numpy.shape", "str", "range", "range", "max"], "function", ["None"], ["", "", "", "def", "compute_vertex_channels", "(", "input_channels", ",", "output_channels", ",", "matrix", ")", ":", "\n", "  ", "\"\"\"Computes the number of channels at every vertex.\n\n  Given the input channels and output channels, this calculates the number of\n  channels at each interior vertex. Interior vertices have the same number of\n  channels as the max of the channels of the vertices it feeds into. The output\n  channels are divided amongst the vertices that are directly connected to it.\n  When the division is not even, some vertices may receive an extra channel to\n  compensate.\n\n  Args:\n    input_channels: input channel count.\n    output_channels: output channel count.\n    matrix: adjacency matrix for the module (pruned by model_spec).\n\n  Returns:\n    list of channel counts, in order of the vertices.\n  \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "\n", "vertex_channels", "=", "[", "0", "]", "*", "num_vertices", "\n", "vertex_channels", "[", "0", "]", "=", "input_channels", "\n", "vertex_channels", "[", "num_vertices", "-", "1", "]", "=", "output_channels", "\n", "\n", "if", "num_vertices", "==", "2", ":", "\n", "# Edge case where module only has input and output vertices", "\n", "    ", "return", "vertex_channels", "\n", "\n", "# Compute the in-degree ignoring input, axis 0 is the src vertex and axis 1 is", "\n", "# the dst vertex. Summing over 0 gives the in-degree count of each vertex.", "\n", "", "in_degree", "=", "np", ".", "sum", "(", "matrix", "[", "1", ":", "]", ",", "axis", "=", "0", ")", "\n", "interior_channels", "=", "output_channels", "//", "in_degree", "[", "num_vertices", "-", "1", "]", "\n", "correction", "=", "output_channels", "%", "in_degree", "[", "num_vertices", "-", "1", "]", "# Remainder to add", "\n", "\n", "# Set channels of vertices that flow directly to output", "\n", "for", "v", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "    ", "if", "matrix", "[", "v", ",", "num_vertices", "-", "1", "]", ":", "\n", "      ", "vertex_channels", "[", "v", "]", "=", "interior_channels", "\n", "if", "correction", ":", "\n", "        ", "vertex_channels", "[", "v", "]", "+=", "1", "\n", "correction", "-=", "1", "\n", "\n", "# Set channels for all other vertices to the max of the out edges, going", "\n", "# backwards. (num_vertices - 2) index skipped because it only connects to", "\n", "# output.", "\n", "", "", "", "for", "v", "in", "range", "(", "num_vertices", "-", "3", ",", "0", ",", "-", "1", ")", ":", "\n", "    ", "if", "not", "matrix", "[", "v", ",", "num_vertices", "-", "1", "]", ":", "\n", "      ", "for", "dst", "in", "range", "(", "v", "+", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "        ", "if", "matrix", "[", "v", ",", "dst", "]", ":", "\n", "          ", "vertex_channels", "[", "v", "]", "=", "max", "(", "vertex_channels", "[", "v", "]", ",", "vertex_channels", "[", "dst", "]", ")", "\n", "", "", "", "assert", "vertex_channels", "[", "v", "]", ">", "0", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "'vertex_channels: %s'", ",", "str", "(", "vertex_channels", ")", ")", "\n", "\n", "# Sanity check, verify that channels never increase and final channels add up.", "\n", "final_fan_in", "=", "0", "\n", "for", "v", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "    ", "if", "matrix", "[", "v", ",", "num_vertices", "-", "1", "]", ":", "\n", "      ", "final_fan_in", "+=", "vertex_channels", "[", "v", "]", "\n", "", "for", "dst", "in", "range", "(", "v", "+", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "      ", "if", "matrix", "[", "v", ",", "dst", "]", ":", "\n", "        ", "assert", "vertex_channels", "[", "v", "]", ">=", "vertex_channels", "[", "dst", "]", "\n", "", "", "", "assert", "final_fan_in", "==", "output_channels", "or", "num_vertices", "==", "2", "\n", "# num_vertices == 2 means only input/output nodes, so 0 fan-in", "\n", "\n", "return", "vertex_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder._covariance_matrix": [[437, 461], ["tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.transpose", "activations.get_shape", "tensorflow.cast", "tensorflow.shape"], "function", ["None"], ["", "def", "_covariance_matrix", "(", "activations", ")", ":", "\n", "  ", "\"\"\"Computes the unbiased covariance matrix of the samples within the batch.\n\n  Computes the sample covariance between the samples in the batch. Specifically,\n\n    C(i,j) = (x_i - mean(x_i)) dot (x_j - mean(x_j)) / (N - 1)\n\n  Matches the default behavior of np.cov().\n\n  Args:\n    activations: tensor activations with batch dimension first.\n\n  Returns:\n    [batch, batch] shape tensor for the covariance matrix.\n  \"\"\"", "\n", "batch_size", "=", "activations", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "flattened", "=", "tf", ".", "reshape", "(", "activations", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "means", "=", "tf", ".", "reduce_mean", "(", "flattened", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "centered", "=", "flattened", "-", "means", "\n", "squared", "=", "tf", ".", "matmul", "(", "centered", ",", "tf", ".", "transpose", "(", "centered", ")", ")", "\n", "cov", "=", "squared", "/", "(", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "flattened", ")", "[", "1", "]", ",", "tf", ".", "float32", ")", "-", "1", ")", "\n", "\n", "return", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.BaseOp.__init__": [[67, 72], ["data_format.lower", "data_format.lower", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "is_training", ",", "data_format", "=", "'channels_last'", ")", ":", "\n", "    ", "self", ".", "is_training", "=", "is_training", "\n", "if", "data_format", ".", "lower", "(", ")", "not", "in", "VALID_DATA_FORMATS", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid data_format'", ")", "\n", "", "self", ".", "data_format", "=", "data_format", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.BaseOp.build": [[73, 86], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "\"\"\"Builds the operation with input tensors and returns an output tensor.\n\n    Args:\n      inputs: a 4-D Tensor.\n      channels: int number of output channels of operation. The operation may\n        choose to ignore this parameter.\n\n    Returns:\n      a 4-D Tensor with the same data format.\n    \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.Identity.build": [[91, 94], ["tensorflow.identity"], "methods", ["None"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "del", "channels", "# Unused", "\n", "return", "tf", ".", "identity", "(", "inputs", ",", "name", "=", "'identity'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.Conv3x3BnRelu.build": [[99, 105], ["tensorflow.variable_scope", "base_ops.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'Conv3x3-BN-ReLU'", ")", ":", "\n", "      ", "net", "=", "conv_bn_relu", "(", "\n", "inputs", ",", "3", ",", "channels", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.Conv1x1BnRelu.build": [[110, 116], ["tensorflow.variable_scope", "base_ops.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'Conv1x1-BN-ReLU'", ")", ":", "\n", "      ", "net", "=", "conv_bn_relu", "(", "\n", "inputs", ",", "1", ",", "channels", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.MaxPool3x3.build": [[121, 132], ["tensorflow.variable_scope", "tensorflow.layers.max_pooling2d"], "methods", ["None"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "del", "channels", "# Unused", "\n", "with", "tf", ".", "variable_scope", "(", "'MaxPool3x3'", ")", ":", "\n", "      ", "net", "=", "tf", ".", "layers", ".", "max_pooling2d", "(", "\n", "inputs", "=", "inputs", ",", "\n", "pool_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.BottleneckConv3x3.build": [[138, 148], ["tensorflow.variable_scope", "base_ops.conv_bn_relu", "base_ops.conv_bn_relu", "base_ops.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'BottleneckConv3x3'", ")", ":", "\n", "      ", "net", "=", "conv_bn_relu", "(", "\n", "inputs", ",", "1", ",", "channels", "//", "4", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "net", "=", "conv_bn_relu", "(", "\n", "net", ",", "3", ",", "channels", "//", "4", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "net", "=", "conv_bn_relu", "(", "\n", "net", ",", "1", ",", "channels", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.BottleneckConv5x5.build": [[153, 163], ["tensorflow.variable_scope", "base_ops.conv_bn_relu", "base_ops.conv_bn_relu", "base_ops.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'BottleneckConv5x5'", ")", ":", "\n", "      ", "net", "=", "conv_bn_relu", "(", "\n", "inputs", ",", "1", ",", "channels", "//", "4", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "net", "=", "conv_bn_relu", "(", "\n", "net", ",", "5", ",", "channels", "//", "4", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "net", "=", "conv_bn_relu", "(", "\n", "net", ",", "1", ",", "channels", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.MaxPool3x3Conv1x1.build": [[168, 180], ["tensorflow.variable_scope", "tensorflow.layers.max_pooling2d", "base_ops.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'MaxPool3x3-Conv1x1'", ")", ":", "\n", "      ", "net", "=", "tf", ".", "layers", ".", "max_pooling2d", "(", "\n", "inputs", "=", "inputs", ",", "\n", "pool_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n", "net", "=", "conv_bn_relu", "(", "net", ",", "1", ",", "channels", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.base_ops.conv_bn_relu": [[32, 61], ["tensorflow.layers.conv2d", "tensorflow.layers.batch_normalization", "tensorflow.nn.relu", "ValueError", "tensorflow.variance_scaling_initializer"], "function", ["None"], ["def", "conv_bn_relu", "(", "inputs", ",", "conv_size", ",", "conv_filters", ",", "is_training", ",", "data_format", ")", ":", "\n", "  ", "\"\"\"Convolution followed by batch norm and ReLU.\"\"\"", "\n", "if", "data_format", "==", "'channels_last'", ":", "\n", "    ", "axis", "=", "3", "\n", "", "elif", "data_format", "==", "'channels_first'", ":", "\n", "    ", "axis", "=", "1", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid data_format'", ")", "\n", "\n", "", "net", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "inputs", "=", "inputs", ",", "\n", "filters", "=", "conv_filters", ",", "\n", "kernel_size", "=", "conv_size", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "net", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "\n", "inputs", "=", "net", ",", "\n", "axis", "=", "axis", ",", "\n", "momentum", "=", "BN_MOMENTUM", ",", "\n", "epsilon", "=", "BN_EPSILON", ",", "\n", "training", "=", "is_training", ")", "\n", "\n", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.gen_is_edge_fn": [[26, 60], ["numpy.vectorize"], "function", ["None"], ["def", "gen_is_edge_fn", "(", "bits", ")", ":", "\n", "  ", "\"\"\"Generate a boolean function for the edge connectivity.\n\n  Given a bitstring FEDCBA and a 4x4 matrix, the generated matrix is\n    [[0, A, B, D],\n     [0, 0, C, E],\n     [0, 0, 0, F],\n     [0, 0, 0, 0]]\n\n  Note that this function is agnostic to the actual matrix dimension due to\n  order in which elements are filled out (column-major, starting from least\n  significant bit). For example, the same FEDCBA bitstring (0-padded) on a 5x5\n  matrix is\n    [[0, A, B, D, 0],\n     [0, 0, C, E, 0],\n     [0, 0, 0, F, 0],\n     [0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0]]\n\n  Args:\n    bits: integer which will be interpreted as a bit mask.\n\n  Returns:\n    vectorized function that returns True when an edge is present.\n  \"\"\"", "\n", "def", "is_edge", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"Is there an edge from x to y (0-indexed)?\"\"\"", "\n", "if", "x", ">=", "y", ":", "\n", "      ", "return", "0", "\n", "# Map x, y to index into bit string", "\n", "", "index", "=", "x", "+", "(", "y", "*", "(", "y", "-", "1", ")", "//", "2", ")", "\n", "return", "(", "bits", ">>", "index", ")", "%", "2", "==", "1", "\n", "\n", "", "return", "np", ".", "vectorize", "(", "is_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_full_dag": [[62, 88], ["numpy.shape", "numpy.all", "numpy.any", "numpy.all", "numpy.any"], "function", ["None"], ["", "def", "is_full_dag", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"Full DAG == all vertices on a path from vert 0 to (V-1).\n\n  i.e. no disconnected or \"hanging\" vertices.\n\n  It is sufficient to check for:\n    1) no rows of 0 except for row V-1 (only output vertex has no out-edges)\n    2) no cols of 0 except for col 0 (only input vertex has no in-edges)\n\n  Args:\n    matrix: V x V upper-triangular adjacency matrix\n\n  Returns:\n    True if the there are no dangling vertices.\n  \"\"\"", "\n", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "\n", "rows", "=", "matrix", "[", ":", "shape", "[", "0", "]", "-", "1", ",", ":", "]", "==", "0", "\n", "rows", "=", "np", ".", "all", "(", "rows", ",", "axis", "=", "1", ")", "# Any row with all 0 will be True", "\n", "rows_bad", "=", "np", ".", "any", "(", "rows", ")", "\n", "\n", "cols", "=", "matrix", "[", ":", ",", "1", ":", "]", "==", "0", "\n", "cols", "=", "np", ".", "all", "(", "cols", ",", "axis", "=", "0", ")", "# Any col with all 0 will be True", "\n", "cols_bad", "=", "np", ".", "any", "(", "cols", ")", "\n", "\n", "return", "(", "not", "rows_bad", ")", "and", "(", "not", "cols_bad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.num_edges": [[90, 93], ["numpy.sum"], "function", ["None"], ["", "def", "num_edges", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"Computes number of edges in adjacency matrix.\"\"\"", "\n", "return", "np", ".", "sum", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module": [[95, 128], ["numpy.sum().tolist", "numpy.sum().tolist", "list", "range", "hashlib.md5().hexdigest", "numpy.shape", "len", "len", "len", "zip", "hashlib.md5().hexdigest", "range", "numpy.sum", "numpy.sum", "new_hashes.append", "hashlib.md5", "hashlib.md5", "hashlib.md5().hexdigest", "str().encode", "str().encode", "range", "range", "hashlib.md5", "str", "str", "sorted", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist"], ["", "def", "hash_module", "(", "matrix", ",", "labeling", ")", ":", "\n", "  ", "\"\"\"Computes a graph-invariance MD5 hash of the matrix and label pair.\n\n  Args:\n    matrix: np.ndarray square upper-triangular adjacency matrix.\n    labeling: list of int labels of length equal to both dimensions of\n      matrix.\n\n  Returns:\n    MD5 hash of the matrix and labeling.\n  \"\"\"", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "in_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "out_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "assert", "len", "(", "in_edges", ")", "==", "len", "(", "out_edges", ")", "==", "len", "(", "labeling", ")", "\n", "hashes", "=", "list", "(", "zip", "(", "out_edges", ",", "in_edges", ",", "labeling", ")", ")", "\n", "hashes", "=", "[", "hashlib", ".", "md5", "(", "str", "(", "h", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "h", "in", "hashes", "]", "\n", "# Computing this up to the diameter is probably sufficient but since the", "\n", "# operation is fast, it is okay to repeat more times.", "\n", "for", "_", "in", "range", "(", "vertices", ")", ":", "\n", "    ", "new_hashes", "=", "[", "]", "\n", "for", "v", "in", "range", "(", "vertices", ")", ":", "\n", "      ", "in_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "w", ",", "v", "]", "]", "\n", "out_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "v", ",", "w", "]", "]", "\n", "new_hashes", ".", "append", "(", "hashlib", ".", "md5", "(", "\n", "(", "''", ".", "join", "(", "sorted", "(", "in_neighbors", ")", ")", "+", "'|'", "+", "\n", "''", ".", "join", "(", "sorted", "(", "out_neighbors", ")", ")", "+", "'|'", "+", "\n", "hashes", "[", "v", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", ")", "\n", "", "hashes", "=", "new_hashes", "\n", "", "fingerprint", "=", "hashlib", ".", "md5", "(", "str", "(", "sorted", "(", "hashes", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n", "return", "fingerprint", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.permute_graph": [[130, 150], ["zip", "numpy.fromfunction", "list", "numpy.vectorize", "range", "sorted", "len", "len", "range", "len", "len"], "function", ["None"], ["", "def", "permute_graph", "(", "graph", ",", "label", ",", "permutation", ")", ":", "\n", "  ", "\"\"\"Permutes the graph and labels based on permutation.\n\n  Args:\n    graph: np.ndarray adjacency matrix.\n    label: list of labels of same length as graph dimensions.\n    permutation: a permutation list of ints of same length as graph dimensions.\n\n  Returns:\n    np.ndarray where vertex permutation[v] is vertex v from the original graph\n  \"\"\"", "\n", "# vertex permutation[v] in new graph is vertex v in the old graph", "\n", "forward_perm", "=", "zip", "(", "permutation", ",", "list", "(", "range", "(", "len", "(", "permutation", ")", ")", ")", ")", "\n", "inverse_perm", "=", "[", "x", "[", "1", "]", "for", "x", "in", "sorted", "(", "forward_perm", ")", "]", "\n", "edge_fn", "=", "lambda", "x", ",", "y", ":", "graph", "[", "inverse_perm", "[", "x", "]", ",", "inverse_perm", "[", "y", "]", "]", "==", "1", "\n", "new_matrix", "=", "np", ".", "fromfunction", "(", "np", ".", "vectorize", "(", "edge_fn", ")", ",", "\n", "(", "len", "(", "label", ")", ",", "len", "(", "label", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int8", ")", "\n", "new_label", "=", "[", "label", "[", "inverse_perm", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "label", ")", ")", "]", "\n", "return", "new_matrix", ",", "new_label", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_isomorphic": [[152, 168], ["itertools.permutations", "numpy.array", "numpy.array", "numpy.shape", "numpy.shape", "len", "len", "numpy.shape", "range", "graph_util.permute_graph", "numpy.array_equal"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.permute_graph"], ["", "def", "is_isomorphic", "(", "graph1", ",", "graph2", ")", ":", "\n", "  ", "\"\"\"Exhaustively checks if 2 graphs are isomorphic.\"\"\"", "\n", "matrix1", ",", "label1", "=", "np", ".", "array", "(", "graph1", "[", "0", "]", ")", ",", "graph1", "[", "1", "]", "\n", "matrix2", ",", "label2", "=", "np", ".", "array", "(", "graph2", "[", "0", "]", ")", ",", "graph2", "[", "1", "]", "\n", "assert", "np", ".", "shape", "(", "matrix1", ")", "==", "np", ".", "shape", "(", "matrix2", ")", "\n", "assert", "len", "(", "label1", ")", "==", "len", "(", "label2", ")", "\n", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix1", ")", "[", "0", "]", "\n", "# Note: input and output in our constrained graphs always map to themselves", "\n", "# but this script does not enforce that.", "\n", "for", "perm", "in", "itertools", ".", "permutations", "(", "range", "(", "0", ",", "vertices", ")", ")", ":", "\n", "    ", "pmatrix1", ",", "plabel1", "=", "permute_graph", "(", "matrix1", ",", "label1", ",", "perm", ")", "\n", "if", "np", ".", "array_equal", "(", "pmatrix1", ",", "matrix2", ")", "and", "plabel1", "==", "label2", ":", "\n", "      ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords.download_and_extract": [[45, 51], ["tensorflow.contrib.learn.datasets.base.maybe_download", "tarfile.open().extractall", "tarfile.open", "os.path.join"], "function", ["None"], ["def", "download_and_extract", "(", "data_dir", ")", ":", "\n", "# download CIFAR-10 if not already downloaded.", "\n", "  ", "tf", ".", "contrib", ".", "learn", ".", "datasets", ".", "base", ".", "maybe_download", "(", "CIFAR_FILENAME", ",", "data_dir", ",", "\n", "CIFAR_DOWNLOAD_URL", ")", "\n", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "CIFAR_FILENAME", ")", ",", "\n", "'r:gz'", ")", ".", "extractall", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords._int64_feature": [[53, 55], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "_int64_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords._bytes_feature": [[57, 59], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["", "def", "_bytes_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords._get_file_names": [[61, 69], ["range"], "function", ["None"], ["", "def", "_get_file_names", "(", ")", ":", "\n", "  ", "\"\"\"Returns the file names expected to exist in the input_dir.\"\"\"", "\n", "file_names", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "    ", "file_names", "[", "'train_%d'", "%", "i", "]", "=", "'data_batch_%d'", "%", "i", "\n", "", "file_names", "[", "'validation'", "]", "=", "'data_batch_5'", "\n", "file_names", "[", "'test'", "]", "=", "'test_batch'", "\n", "return", "file_names", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords.read_pickle_from_file": [[71, 78], ["tensorflow.gfile.Open", "six.moves.cPickle.load", "six.moves.cPickle.load"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load"], ["", "def", "read_pickle_from_file", "(", "filename", ")", ":", "\n", "  ", "with", "tf", ".", "gfile", ".", "Open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "      ", "data_dict", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "\n", "", "else", ":", "\n", "      ", "data_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords.convert_to_tfrecord": [[80, 96], ["print", "tensorflow.python_io.TFRecordWriter", "generate_cifar10_tfrecords.read_pickle_from_file", "len", "print", "range", "tensorflow.train.Example", "record_writer.write", "tf.train.Example.SerializeToString", "tensorflow.train.Features", "generate_cifar10_tfrecords._bytes_feature", "generate_cifar10_tfrecords._int64_feature", "data[].tobytes"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords.read_pickle_from_file", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords._bytes_feature", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords._int64_feature"], ["", "def", "convert_to_tfrecord", "(", "input_file", ",", "output_file", ")", ":", "\n", "  ", "\"\"\"Converts a file to TFRecords.\"\"\"", "\n", "print", "(", "'Generating %s'", "%", "output_file", ")", "\n", "with", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "output_file", ")", "as", "record_writer", ":", "\n", "    ", "data_dict", "=", "read_pickle_from_file", "(", "input_file", ")", "\n", "data", "=", "data_dict", "[", "b'data'", "]", "\n", "labels", "=", "data_dict", "[", "b'labels'", "]", "\n", "num_entries_in_batch", "=", "len", "(", "labels", ")", "\n", "print", "(", "'Converting %d images'", "%", "num_entries_in_batch", ")", "\n", "for", "i", "in", "range", "(", "num_entries_in_batch", ")", ":", "\n", "      ", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "\n", "feature", "=", "{", "\n", "'image'", ":", "_bytes_feature", "(", "data", "[", "i", "]", ".", "tobytes", "(", ")", ")", ",", "\n", "'label'", ":", "_int64_feature", "(", "labels", "[", "i", "]", ")", "\n", "}", ")", ")", "\n", "record_writer", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords.main": [[98, 142], ["print", "generate_cifar10_tfrecords.download_and_extract", "generate_cifar10_tfrecords._get_file_names", "os.path.join", "_get_file_names.items", "os.path.join", "generate_cifar10_tfrecords.read_pickle_from_file", "range", "os.path.join", "print", "print", "os.path.join", "os.path.join", "generate_cifar10_tfrecords.convert_to_tfrecord", "len", "tensorflow.python_io.TFRecordWriter", "os.remove", "range", "len", "images[].append", "tensorflow.train.Example", "record_writer.write", "example.SerializeToString", "tensorflow.train.Features", "generate_cifar10_tfrecords._bytes_feature", "generate_cifar10_tfrecords._int64_feature", "data[].tobytes"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords.download_and_extract", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords._get_file_names", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords.read_pickle_from_file", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords.convert_to_tfrecord", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords._bytes_feature", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_cifar10_tfrecords._int64_feature"], ["", "", "", "def", "main", "(", "data_dir", ")", ":", "\n", "  ", "print", "(", "'Download from {} and extract.'", ".", "format", "(", "CIFAR_DOWNLOAD_URL", ")", ")", "\n", "download_and_extract", "(", "data_dir", ")", "\n", "file_names", "=", "_get_file_names", "(", ")", "\n", "input_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "CIFAR_LOCAL_FOLDER", ")", "\n", "for", "mode", ",", "f", "in", "file_names", ".", "items", "(", ")", ":", "\n", "    ", "input_file", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "f", ")", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "mode", "+", "'.tfrecords'", ")", "\n", "try", ":", "\n", "      ", "os", ".", "remove", "(", "output_file", ")", "\n", "", "except", "OSError", ":", "\n", "      ", "pass", "\n", "# Convert to tf.train.Example and write the to TFRecords.", "\n", "", "convert_to_tfrecord", "(", "input_file", ",", "output_file", ")", "\n", "\n", "# Save fixed batch of 100 examples (first 10 of each class sampled at the", "\n", "# front of the validation set). Ordered by label, i.e. 10 \"airplane\" images", "\n", "# followed by 10 \"automobile\" images...", "\n", "", "images", "=", "[", "[", "]", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "num_images", "=", "0", "\n", "input_file", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file_names", "[", "'validation'", "]", ")", "\n", "data_dict", "=", "read_pickle_from_file", "(", "input_file", ")", "\n", "data", "=", "data_dict", "[", "b'data'", "]", "\n", "labels", "=", "data_dict", "[", "b'labels'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "    ", "label", "=", "labels", "[", "i", "]", "\n", "if", "len", "(", "images", "[", "label", "]", ")", "<", "10", ":", "\n", "      ", "images", "[", "label", "]", ".", "append", "(", "\n", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "\n", "feature", "=", "{", "\n", "'image'", ":", "_bytes_feature", "(", "data", "[", "i", "]", ".", "tobytes", "(", ")", ")", ",", "\n", "'label'", ":", "_int64_feature", "(", "label", ")", "\n", "}", ")", ")", ")", "\n", "num_images", "+=", "1", "\n", "if", "num_images", "==", "100", ":", "\n", "        ", "break", "\n", "\n", "", "", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'sample.tfrecords'", ")", "\n", "print", "(", "'Generating %s'", "%", "output_file", ")", "\n", "with", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "output_file", ")", "as", "record_writer", ":", "\n", "    ", "for", "label_images", "in", "images", ":", "\n", "      ", "for", "example", "in", "label_images", ":", "\n", "        ", "record_writer", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.augment_model.create_resnet20_spec": [[31, 54], ["nasbench.lib.model_spec.ModelSpec", "numpy.array"], "function", ["None"], ["def", "create_resnet20_spec", "(", "config", ")", ":", "\n", "  ", "\"\"\"Construct a ResNet-20-like spec.\n\n  The main difference is that there is an extra projection layer before the\n  conv3x3 whereas the original ResNet doesn't have this. This increases the\n  parameter count of this version slightly.\n\n  Args:\n    config: config dict created by config.py.\n\n  Returns:\n    ModelSpec object.\n  \"\"\"", "\n", "spec", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "'input'", ",", "'conv3x3-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "'output'", "]", ")", "\n", "config", "[", "'num_stacks'", "]", "=", "3", "\n", "config", "[", "'num_modules_per_stack'", "]", "=", "3", "\n", "config", "[", "'stem_filter_size'", "]", "=", "16", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.augment_model.create_resnet50_spec": [[56, 78], ["nasbench.lib.model_spec.ModelSpec", "numpy.array"], "function", ["None"], ["", "def", "create_resnet50_spec", "(", "config", ")", ":", "\n", "  ", "\"\"\"Construct a ResNet-50-like spec.\n\n  The main difference is that there is an extra projection layer before the\n  conv1x1 whereas the original ResNet doesn't have this. This increases the\n  parameter count of this version slightly.\n\n  Args:\n    config: config dict created by config.py.\n\n  Returns:\n    ModelSpec object.\n  \"\"\"", "\n", "spec", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "'input'", ",", "'bottleneck3x3'", ",", "'output'", "]", ")", "\n", "config", "[", "'num_stacks'", "]", "=", "3", "\n", "config", "[", "'num_modules_per_stack'", "]", "=", "6", "\n", "config", "[", "'stem_filter_size'", "]", "=", "128", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.augment_model.create_inception_resnet_spec": [[80, 108], ["nasbench.lib.model_spec.ModelSpec", "numpy.array"], "function", ["None"], ["", "def", "create_inception_resnet_spec", "(", "config", ")", ":", "\n", "  ", "\"\"\"Construct an Inception-ResNet like spec.\n\n  This spec is very similar to the InceptionV2 module with an added\n  residual connection except that there is an extra projection in front of the\n  max pool. The overall network filter counts and module counts do not match\n  the actual source model.\n\n  Args:\n    config: config dict created by config.py.\n\n  Returns:\n    ModelSpec object.\n  \"\"\"", "\n", "spec", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "'input'", ",", "'conv1x1-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "\n", "'conv3x3-bn-relu'", ",", "'maxpool3x3'", ",", "'output'", "]", ")", "\n", "config", "[", "'num_stacks'", "]", "=", "3", "\n", "config", "[", "'num_modules_per_stack'", "]", "=", "3", "\n", "config", "[", "'stem_filter_size'", "]", "=", "128", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.augment_model.create_best_nasbench_spec": [[110, 133], ["nasbench.lib.model_spec.ModelSpec", "numpy.array", "nasbench.lib.config"], "function", ["None"], ["", "def", "create_best_nasbench_spec", "(", "config", ")", ":", "\n", "  ", "\"\"\"Construct the best spec in the NASBench dataset w.r.t. mean test accuracy.\n\n  Args:\n    config: config dict created by config.py.\n\n  Returns:\n    ModelSpec object.\n  \"\"\"", "\n", "spec", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "'input'", ",", "'conv1x1-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "'maxpool3x3'", ",", "\n", "'conv3x3-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "'output'", "]", ")", "\n", "config", "[", "'num_stacks'", "]", "=", "3", "\n", "config", "[", "'num_modules_per_stack'", "]", "=", "3", "\n", "config", "[", "'stem_filter_size'", "]", "=", "128", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.augment_model.main": [[135, 148], ["nasbench.lib.config.build_config", "augment_model.create_best_nasbench_spec", "nasbench.lib.evaluate.augment_and_evaluate", "tensorflow.logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.config.build_config", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.augment_model.create_best_nasbench_spec", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate.augment_and_evaluate"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "config", "=", "_config", ".", "build_config", "(", ")", "\n", "\n", "# The default settings in config are exactly what was used to generate the", "\n", "# dataset of models. However, given more epochs and a different learning rate", "\n", "# schedule, it is possible to get higher accuracy.", "\n", "config", "[", "'train_epochs'", "]", "=", "200", "\n", "config", "[", "'lr_decay_method'", "]", "=", "'STEPWISE'", "\n", "config", "[", "'train_seconds'", "]", "=", "-", "1", "# Disable training time limit", "\n", "spec", "=", "create_best_nasbench_spec", "(", "config", ")", "\n", "\n", "data", "=", "evaluate", ".", "augment_and_evaluate", "(", "spec", ",", "config", ",", "FLAGS", ".", "model_dir", ")", "\n", "tf", ".", "logging", ".", "info", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.NumpyEncoder.default": [[89, 97], ["isinstance", "json.JSONEncoder.default", "obj.tolist", "isinstance", "numpy.asscalar"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.NumpyEncoder.default", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist"], ["def", "default", "(", "self", ",", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "# Matrices converted to nested lists", "\n", "      ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "generic", ")", ":", "\n", "# Scalars converted to closest Python type", "\n", "      ", "return", "np", ".", "asscalar", "(", "obj", ")", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator.__init__": [[102, 147], ["nasbench.lib.config.build_config", "os.path.join", "tensorflow.gfile.MakeDirs", "os.path.join", "tensorflow.gfile.Exists", "tensorflow.gfile.Open", "json.load", "sorted", "len", "re.compile", "sorted", "len", "str", "tensorflow.gfile.Open", "json.load", "tensorflow.gfile.Open", "int", "tensorflow.gfile.Open", "f.write", "run_evaluation.Evaluator.models.keys", "re.compile.match", "f.read", "str"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.config.build_config", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load"], ["def", "__init__", "(", "self", ",", "\n", "models_file", ",", "\n", "output_dir", ",", "\n", "worker_id", "=", "0", ",", "\n", "total_workers", "=", "1", ",", "\n", "model_id_regex", "=", "'^'", ")", ":", "\n", "    ", "self", ".", "config", "=", "_config", ".", "build_config", "(", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "models_file", ")", "as", "f", ":", "\n", "      ", "self", ".", "models", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "remainders", "=", "None", "\n", "self", ".", "ordered_keys", "=", "None", "\n", "\n", "if", "FLAGS", ".", "remainders_file", ":", "\n", "# Run only the modules and repeat numbers specified", "\n", "      ", "with", "tf", ".", "gfile", ".", "Open", "(", "FLAGS", ".", "remainders_file", ")", "as", "f", ":", "\n", "        ", "self", ".", "remainders", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "remainders", "=", "sorted", "(", "self", ".", "remainders", ")", "\n", "self", ".", "num_models", "=", "len", "(", "self", ".", "remainders", ")", "\n", "self", ".", "total_work_units", "=", "self", ".", "num_models", "\n", "", "else", ":", "\n", "# Filter keys to only those that fit the regex and order them so all", "\n", "# workers see a canonical ordering.", "\n", "      ", "regex", "=", "re", ".", "compile", "(", "model_id_regex", ")", "\n", "evaluated_keys", "=", "[", "key", "for", "key", "in", "self", ".", "models", ".", "keys", "(", ")", "if", "regex", ".", "match", "(", "key", ")", "]", "\n", "self", ".", "ordered_keys", "=", "sorted", "(", "evaluated_keys", ")", "\n", "self", ".", "num_models", "=", "len", "(", "self", ".", "ordered_keys", ")", "\n", "self", ".", "total_work_units", "=", "self", ".", "num_models", "*", "self", ".", "config", "[", "'num_repeats'", "]", "\n", "\n", "", "self", ".", "total_workers", "=", "total_workers", "\n", "\n", "# If the worker is recovering from a restart, figure out where to restart", "\n", "worker_recovery_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'_recovery'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "worker_recovery_dir", ")", "# Silently succeeds if exists", "\n", "self", ".", "recovery_file", "=", "os", ".", "path", ".", "join", "(", "worker_recovery_dir", ",", "str", "(", "worker_id", ")", ")", "\n", "if", "tf", ".", "gfile", ".", "Exists", "(", "self", ".", "recovery_file", ")", ":", "\n", "      ", "with", "tf", ".", "gfile", ".", "Open", "(", "self", ".", "recovery_file", ")", "as", "f", ":", "\n", "        ", "self", ".", "current_index", "=", "int", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "current_index", "=", "worker_id", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "self", ".", "recovery_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "self", ".", "current_index", ")", ")", "\n", "\n", "", "", "assert", "self", ".", "current_index", "%", "self", ".", "total_workers", "==", "worker_id", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator.run_evaluation": [[148, 157], ["run_evaluation.Evaluator._evaluate_work_unit", "tensorflow.gfile.Open", "f.write", "str"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator._evaluate_work_unit"], ["", "def", "run_evaluation", "(", "self", ")", ":", "\n", "    ", "\"\"\"Runs the worker evaluation loop.\"\"\"", "\n", "while", "self", ".", "current_index", "<", "self", ".", "total_work_units", ":", "\n", "# Perform the expensive evaluation of the model at the current index", "\n", "      ", "self", ".", "_evaluate_work_unit", "(", "self", ".", "current_index", ")", "\n", "\n", "self", ".", "current_index", "+=", "self", ".", "total_workers", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "self", ".", "recovery_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "self", ".", "current_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator._evaluate_work_unit": [[158, 206], ["numpy.array", "nasbench.lib.model_spec.ModelSpec", "os.path.join", "os.path.join", "run_evaluation.Evaluator._clean_model_dir", "numpy.sum", "nasbench.lib.evaluate.train_and_evaluate", "tensorflow.gfile.Open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator._clean_model_dir", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate.train_and_evaluate"], ["", "", "", "def", "_evaluate_work_unit", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"Runs the evaluation of the model at the specified index.\n\n    The index records the current index of the work unit being evaluated. Each\n    worker will only compute the work units with index modulo total_workers\n    equal to the worker_id.\n\n    Args:\n      index: int index into total work units.\n    \"\"\"", "\n", "if", "self", ".", "remainders", ":", "\n", "      ", "assert", "self", ".", "ordered_keys", "is", "None", "\n", "model_id", "=", "self", ".", "remainders", "[", "index", "]", "[", "0", "]", "\n", "model_repeat", "=", "self", ".", "remainders", "[", "index", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "      ", "model_id", "=", "self", ".", "ordered_keys", "[", "index", "%", "self", ".", "num_models", "]", "\n", "model_repeat", "=", "index", "//", "self", ".", "num_models", "+", "1", "\n", "\n", "", "matrix", ",", "labels", "=", "self", ".", "models", "[", "model_id", "]", "\n", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "\n", "# Re-label to config['available_ops']", "\n", "labels", "=", "(", "[", "'input'", "]", "+", "\n", "[", "self", ".", "config", "[", "'available_ops'", "]", "[", "lab", "]", "for", "lab", "in", "labels", "[", "1", ":", "-", "1", "]", "]", "+", "\n", "[", "'output'", "]", ")", "\n", "spec", "=", "model_spec", ".", "ModelSpec", "(", "matrix", ",", "labels", ")", "\n", "assert", "spec", ".", "valid_spec", "\n", "assert", "np", ".", "sum", "(", "spec", ".", "matrix", ")", "<=", "self", ".", "config", "[", "'max_edges'", "]", "\n", "\n", "# Split the directory into 16^2 roughly equal subdirectories", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\n", "model_id", "[", ":", "2", "]", ",", "\n", "model_id", ",", "\n", "'repeat_%d'", "%", "model_repeat", ")", "\n", "try", ":", "\n", "      ", "meta", "=", "evaluate", ".", "train_and_evaluate", "(", "spec", ",", "self", ".", "config", ",", "model_dir", ")", "\n", "", "except", "evaluate", ".", "AbortError", ":", "\n", "# After hitting the retry limit, the job will continue to the next work", "\n", "# unit. These failed jobs may need to be re-run at a later point.", "\n", "      ", "return", "\n", "\n", "# Write data to model_dir", "\n", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "RESULTS_FILE", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "output_file", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "json", ".", "dump", "(", "meta", ",", "f", ",", "cls", "=", "NumpyEncoder", ")", "\n", "\n", "# Delete some files to reclaim space", "\n", "", "self", ".", "_clean_model_dir", "(", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator._clean_model_dir": [[207, 225], ["tensorflow.gfile.ListDirectory", "set", "os.path.join", "tensorflow.gfile.IsDirectory", "filename.startswith", "set.add", "tensorflow.gfile.DeleteRecursively", "tensorflow.gfile.Remove", "filename.startswith"], "methods", ["None"], ["", "def", "_clean_model_dir", "(", "self", ",", "model_dir", ")", ":", "\n", "    ", "\"\"\"Cleans the output model directory to reclaim disk space.\"\"\"", "\n", "saved_prefixes", "=", "[", "CHECKPOINT_PREFIX", ",", "RESULTS_FILE", "]", "\n", "all_files", "=", "tf", ".", "gfile", ".", "ListDirectory", "(", "model_dir", ")", "\n", "files_to_keep", "=", "set", "(", ")", "\n", "for", "filename", "in", "all_files", ":", "\n", "      ", "for", "prefix", "in", "saved_prefixes", ":", "\n", "        ", "if", "(", "filename", ".", "startswith", "(", "prefix", ")", "and", "\n", "not", "filename", ".", "startswith", "(", "CHECKPOINT_1_PREFIX", ")", ")", ":", "\n", "          ", "files_to_keep", ".", "add", "(", "filename", ")", "\n", "\n", "", "", "", "for", "filename", "in", "all_files", ":", "\n", "      ", "if", "filename", "not", "in", "files_to_keep", ":", "\n", "        ", "full_filename", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", "\n", "if", "tf", ".", "gfile", ".", "IsDirectory", "(", "full_filename", ")", ":", "\n", "          ", "tf", ".", "gfile", ".", "DeleteRecursively", "(", "full_filename", ")", "\n", "", "else", ":", "\n", "          ", "tf", ".", "gfile", ".", "Remove", "(", "full_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.main": [[227, 237], ["run_evaluation.Evaluator", "Evaluator.run_evaluation"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "  ", "del", "args", "# Unused", "\n", "worker_id", "=", "FLAGS", ".", "worker_id", "+", "FLAGS", ".", "worker_id_offset", "\n", "evaluator", "=", "Evaluator", "(", "\n", "models_file", "=", "FLAGS", ".", "models_file", ",", "\n", "output_dir", "=", "FLAGS", ".", "output_dir", ",", "\n", "worker_id", "=", "worker_id", ",", "\n", "total_workers", "=", "FLAGS", ".", "total_workers", ",", "\n", "model_id_regex", "=", "FLAGS", ".", "model_id_regex", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.generate_graphs.main": [[90, 137], ["absl.logging.info", "range", "range", "absl.logging.info", "tensorflow.gfile.Open", "json.dump", "numpy.fromfunction", "itertools.product", "len", "nasbench.lib.graph_util.gen_is_edge_fn", "nasbench.lib.graph_util.hash_module", "nasbench.lib.graph_util.is_full_dag", "nasbench.lib.graph_util.num_edges", "range", "list", "np.fromfunction.tolist", "range", "nasbench.lib.graph_util.is_isomorphic", "absl.logging.fatal", "sys.exit", "str", "str", "str", "str", "np.fromfunction.tolist"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.num_edges", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist"], ["def", "main", "(", "_", ")", ":", "\n", "  ", "total_graphs", "=", "0", "# Total number of graphs (including isomorphisms)", "\n", "# hash --> (matrix, label) for the canonical graph associated with each hash", "\n", "buckets", "=", "{", "}", "\n", "\n", "logging", ".", "info", "(", "'Using %d vertices, %d op labels, max %d edges'", ",", "\n", "FLAGS", ".", "max_vertices", ",", "FLAGS", ".", "num_ops", ",", "FLAGS", ".", "max_edges", ")", "\n", "for", "vertices", "in", "range", "(", "2", ",", "FLAGS", ".", "max_vertices", "+", "1", ")", ":", "\n", "    ", "for", "bits", "in", "range", "(", "2", "**", "(", "vertices", "*", "(", "vertices", "-", "1", ")", "//", "2", ")", ")", ":", "\n", "# Construct adj matrix from bit string", "\n", "      ", "matrix", "=", "np", ".", "fromfunction", "(", "graph_util", ".", "gen_is_edge_fn", "(", "bits", ")", ",", "\n", "(", "vertices", ",", "vertices", ")", ",", "\n", "dtype", "=", "np", ".", "int8", ")", "\n", "\n", "# Discard any graphs which can be pruned or exceed constraints", "\n", "if", "(", "not", "graph_util", ".", "is_full_dag", "(", "matrix", ")", "or", "\n", "graph_util", ".", "num_edges", "(", "matrix", ")", ">", "FLAGS", ".", "max_edges", ")", ":", "\n", "        ", "continue", "\n", "\n", "# Iterate through all possible labelings", "\n", "", "for", "labeling", "in", "itertools", ".", "product", "(", "*", "[", "range", "(", "FLAGS", ".", "num_ops", ")", "\n", "for", "_", "in", "range", "(", "vertices", "-", "2", ")", "]", ")", ":", "\n", "        ", "total_graphs", "+=", "1", "\n", "labeling", "=", "[", "-", "1", "]", "+", "list", "(", "labeling", ")", "+", "[", "-", "2", "]", "\n", "fingerprint", "=", "graph_util", ".", "hash_module", "(", "matrix", ",", "labeling", ")", "\n", "\n", "if", "fingerprint", "not", "in", "buckets", ":", "\n", "          ", "buckets", "[", "fingerprint", "]", "=", "(", "matrix", ".", "tolist", "(", ")", ",", "labeling", ")", "\n", "\n", "# This catches the \"false positive\" case of two models which are not", "\n", "# isomorphic hashing to the same bucket.", "\n", "", "elif", "FLAGS", ".", "verify_isomorphism", ":", "\n", "          ", "canonical_graph", "=", "buckets", "[", "fingerprint", "]", "\n", "if", "not", "graph_util", ".", "is_isomorphic", "(", "\n", "(", "matrix", ".", "tolist", "(", ")", ",", "labeling", ")", ",", "canonical_graph", ")", ":", "\n", "            ", "logging", ".", "fatal", "(", "'Matrix:\\n%s\\nLabel: %s\\nis not isomorphic to'", "\n", "' canonical matrix:\\n%s\\nLabel: %s'", ",", "\n", "str", "(", "matrix", ")", ",", "str", "(", "labeling", ")", ",", "\n", "str", "(", "canonical_graph", "[", "0", "]", ")", ",", "\n", "str", "(", "canonical_graph", "[", "1", "]", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "", "", "", "logging", ".", "info", "(", "'Up to %d vertices: %d graphs (%d without hashing)'", ",", "\n", "vertices", ",", "len", "(", "buckets", ")", ",", "total_graphs", ")", "\n", "\n", "", "with", "tf", ".", "gfile", ".", "Open", "(", "FLAGS", ".", "output_file", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "json", ".", "dump", "(", "buckets", ",", "f", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.graph_util_test.GraphUtilTest.test_gen_is_edge": [[29, 82], ["nasbench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "nasbench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "nasbench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "nasbench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "nasbench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "nasbench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "nasbench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.gen_is_edge_fn"], ["  ", "def", "test_gen_is_edge", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests gen_is_edge generates correct graphs.\"\"\"", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "0", ")", "# '000'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "3", ")", "# '011'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "5", ")", "# '101'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "7", ")", "# '111'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "7", ")", "# '111'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "18", ")", "# '010010'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "35", ")", "# '100011'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.graph_util_test.GraphUtilTest.test_is_full_dag": [[83, 134], ["graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertFalse", "graph_util_test.GraphUtilTest.assertFalse", "graph_util_test.GraphUtilTest.assertFalse", "graph_util_test.GraphUtilTest.assertFalse", "graph_util_test.GraphUtilTest.assertFalse", "nasbench.lib.graph_util.is_full_dag", "nasbench.lib.graph_util.is_full_dag", "nasbench.lib.graph_util.is_full_dag", "nasbench.lib.graph_util.is_full_dag", "nasbench.lib.graph_util.is_full_dag", "nasbench.lib.graph_util.is_full_dag", "nasbench.lib.graph_util.is_full_dag", "nasbench.lib.graph_util.is_full_dag", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_full_dag"], ["", "def", "test_is_full_dag", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests is_full_dag classifies DAGs.\"\"\"", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "# vertex 1 not connected to input", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "# vertex 1 not connected to output", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "# 1, 3 are connected to each other but disconnected from main path", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "# no path from input to output", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "# completely disconnected vertex", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.graph_util_test.GraphUtilTest.test_hash_module": [[135, 263], ["numpy.array", "nasbench.lib.graph_util.hash_module", "nasbench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertEqual", "numpy.array", "numpy.array", "numpy.array", "nasbench.lib.graph_util.hash_module", "nasbench.lib.graph_util.hash_module", "nasbench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertEqual", "graph_util_test.GraphUtilTest.assertEqual", "nasbench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "nasbench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "numpy.array", "numpy.array", "nasbench.lib.graph_util.hash_module", "nasbench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "nasbench.lib.graph_util.hash_module", "nasbench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "nasbench.lib.graph_util.hash_module", "nasbench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "nasbench.lib.graph_util.hash_module", "nasbench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module"], ["", "def", "test_hash_module", "(", "self", ")", ":", "\n", "# Diamond graph with label permutation", "\n", "    ", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "2", ",", "-", "2", "]", "\n", "label2", "=", "[", "-", "1", ",", "2", ",", "1", ",", "-", "2", "]", "\n", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label1", ")", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label2", ")", "\n", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n", "# Simple graph with edge permutation", "\n", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "2", ",", "3", ",", "-", "2", "]", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label2", "=", "[", "-", "1", ",", "2", ",", "3", ",", "1", ",", "-", "2", "]", "\n", "\n", "matrix3", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label3", "=", "[", "-", "1", ",", "2", ",", "1", ",", "3", ",", "-", "2", "]", "\n", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label1", ")", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "matrix2", ",", "label2", ")", "\n", "hash3", "=", "graph_util", ".", "hash_module", "(", "matrix3", ",", "label3", ")", "\n", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")", "\n", "self", ".", "assertEqual", "(", "hash2", ",", "hash3", ")", "\n", "\n", "hash4", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label2", ")", "\n", "self", ".", "assertNotEqual", "(", "hash4", ",", "hash1", ")", "\n", "\n", "hash5", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label3", ")", "\n", "self", ".", "assertNotEqual", "(", "hash5", ",", "hash1", ")", "\n", "\n", "# Connected non-isomorphic regular graphs on 6 interior vertices (8 total)", "\n", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "-", "2", "]", "\n", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label1", ")", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "matrix2", ",", "label1", ")", "\n", "self", ".", "assertNotEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n", "# Non-isomorphic tricky case (breaks if you don't include self)", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "1", ",", "0", ",", "0", ",", "-", "2", "]", ")", "\n", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "0", ",", "0", ",", "1", ",", "-", "2", "]", ")", "\n", "self", ".", "assertNotEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n", "# Non-isomorphic tricky case (breaks if you don't use directed edges)", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "1", ",", "0", ",", "-", "2", "]", ")", "\n", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "0", ",", "1", ",", "-", "2", "]", ")", "\n", "self", ".", "assertNotEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n", "# Non-isomorphic tricky case (breaks if you only use out-neighbors and self)", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "2", "]", ")", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "-", "2", "]", ")", "\n", "self", ".", "assertNotEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.graph_util_test.GraphUtilTest.test_permute_graph": [[264, 284], ["numpy.array", "nasbench.lib.graph_util.permute_graph", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertEqual", "nasbench.lib.graph_util.permute_graph", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertEqual", "numpy.array_equal", "numpy.array_equal", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.permute_graph", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.permute_graph"], ["", "def", "test_permute_graph", "(", "self", ")", ":", "\n", "# Does not have to be DAG", "\n", "    ", "matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "1", "]", "]", ")", "\n", "labels", "=", "[", "'a'", ",", "'b'", ",", "'c'", "]", "\n", "\n", "p1", ",", "l1", "=", "graph_util", ".", "permute_graph", "(", "matrix", ",", "labels", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "p1", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "assertEqual", "(", "l1", ",", "[", "'b'", ",", "'c'", ",", "'a'", "]", ")", "\n", "\n", "p1", ",", "l1", "=", "graph_util", ".", "permute_graph", "(", "matrix", ",", "labels", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "p1", ",", "\n", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", "]", ")", ")", ")", "\n", "self", ".", "assertEqual", "(", "l1", ",", "[", "'a'", ",", "'c'", ",", "'b'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.graph_util_test.GraphUtilTest.test_is_isomorphic": [[285, 389], ["numpy.array", "graph_util_test.GraphUtilTest.assertTrue", "numpy.array", "numpy.array", "numpy.array", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertFalse", "numpy.array", "numpy.array", "graph_util_test.GraphUtilTest.assertFalse", "numpy.array", "numpy.array", "nasbench.lib.graph_util.permute_graph", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertEqual", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertTrue", "nasbench.lib.graph_util.is_isomorphic", "nasbench.lib.graph_util.is_isomorphic", "nasbench.lib.graph_util.is_isomorphic", "nasbench.lib.graph_util.is_isomorphic", "nasbench.lib.graph_util.is_isomorphic", "numpy.array_equal", "nasbench.lib.graph_util.is_isomorphic", "nasbench.lib.graph_util.is_isomorphic"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.permute_graph", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.is_isomorphic"], ["", "def", "test_is_isomorphic", "(", "self", ")", ":", "\n", "# Reuse some tests from hash_module", "\n", "    ", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "2", ",", "-", "2", "]", "\n", "label2", "=", "[", "-", "1", ",", "2", ",", "1", ",", "-", "2", "]", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix1", ",", "label2", ")", ")", ")", "\n", "\n", "# Simple graph with edge permutation", "\n", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "2", ",", "3", ",", "-", "2", "]", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label2", "=", "[", "-", "1", ",", "2", ",", "3", ",", "1", ",", "-", "2", "]", "\n", "\n", "matrix3", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label3", "=", "[", "-", "1", ",", "2", ",", "1", ",", "3", ",", "-", "2", "]", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix2", ",", "label2", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix3", ",", "label3", ")", ")", ")", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix2", ",", "label1", ")", ")", ")", "\n", "\n", "# Connected non-isomorphic regular graphs on 6 interior vertices (8 total)", "\n", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "-", "2", "]", "\n", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix2", ",", "label1", ")", ")", ")", "\n", "\n", "# Connected isomorphic regular graphs on 8 total vertices (bipartite)", "\n", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "\n", "# Sanity check: manual permutation", "\n", "perm", "=", "[", "0", ",", "5", ",", "7", ",", "2", ",", "4", ",", "1", ",", "3", ",", "6", "]", "\n", "pm1", ",", "pl1", "=", "graph_util", ".", "permute_graph", "(", "matrix1", ",", "label1", ",", "perm", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "matrix2", ",", "pm1", ")", ")", "\n", "self", ".", "assertEqual", "(", "pl1", ",", "label1", ")", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix2", ",", "label1", ")", ")", ")", "\n", "\n", "label2", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "label3", "=", "[", "1", ",", "2", ",", "1", ",", "2", ",", "2", ",", "1", ",", "2", ",", "1", "]", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label2", ")", ",", "\n", "(", "matrix2", ",", "label3", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.graph_util_test.GraphUtilTest.test_random_isomorphism_hashing": [[390, 409], ["range", "random.randint", "numpy.random.randint", "numpy.random.permutation().tolist", "nasbench.lib.graph_util.permute_graph", "nasbench.lib.graph_util.hash_module", "nasbench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertEqual", "random.randint", "range", "numpy.random.permutation"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.permute_graph", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module"], ["", "def", "test_random_isomorphism_hashing", "(", "self", ")", ":", "\n", "# Tests that hash_module always provides the same hash for randomly", "\n", "# generated isomorphic graphs.", "\n", "    ", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "# Generate random graph. Note: the algorithm works (i.e. same hash ==", "\n", "# isomorphic graphs) for all directed graphs with coloring and does not", "\n", "# require the graph to be a DAG.", "\n", "      ", "size", "=", "random", ".", "randint", "(", "3", ",", "20", ")", "\n", "matrix", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "[", "size", ",", "size", "]", ")", "\n", "labels", "=", "[", "random", ".", "randint", "(", "0", ",", "10", ")", "for", "_", "in", "range", "(", "size", ")", "]", "\n", "\n", "# Generate permutation of matrix and labels.", "\n", "perm", "=", "np", ".", "random", ".", "permutation", "(", "size", ")", ".", "tolist", "(", ")", "\n", "pmatrix", ",", "plabels", "=", "graph_util", ".", "permute_graph", "(", "matrix", ",", "labels", ",", "perm", ")", "\n", "\n", "# Hashes should be identical.", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "matrix", ",", "labels", ")", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "pmatrix", ",", "plabels", ")", "\n", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.graph_util_test.GraphUtilTest.test_counterexample_bipartite": [[410, 447], ["numpy.array", "numpy.array", "graph_util_test.GraphUtilTest.assertEqual", "nasbench.lib.graph_util.hash_module", "nasbench.lib.graph_util.hash_module"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.graph_util.hash_module"], ["", "", "def", "test_counterexample_bipartite", "(", "self", ")", ":", "\n", "# This is a counter example that shows that the hashing algorithm is not", "\n", "# perfectly identifiable (i.e. there are non-isomorphic graphs with the same", "\n", "# hash). If this tests fails, it means the algorithm must have been changed", "\n", "# in some way that allows it to identify these graphs as non-isomoprhic.", "\n", "    ", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "\n", "labels", "=", "[", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "-", "2", "]", "\n", "\n", "# This takes far too long to run so commenting it out. The graphs are", "\n", "# non-isomorphic fairly obviously from visual inspection.", "\n", "# self.assertFalse(graph_util.is_isomorphic((matrix1, labels),", "\n", "#                                           (matrix2, labels)))", "\n", "self", ".", "assertEqual", "(", "graph_util", ".", "hash_module", "(", "matrix1", ",", "labels", ")", ",", "\n", "graph_util", ".", "hash_module", "(", "matrix2", ",", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.model_builder_test.ModelBuilderTest.test_compute_vertex_channels_linear": [[28, 53], ["numpy.array", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels", "numpy.array", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels"], ["  ", "def", "test_compute_vertex_channels_linear", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests modules with no branching.\"\"\"", "\n", "matrix1", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "vc1", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc1", "==", "[", "8", ",", "8", ",", "8", ",", "8", "]", "\n", "\n", "vc2", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "16", ",", "matrix1", ")", "\n", "assert", "vc2", "==", "[", "8", ",", "16", ",", "16", ",", "16", "]", "\n", "\n", "vc3", "=", "model_builder", ".", "compute_vertex_channels", "(", "16", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc3", "==", "[", "16", ",", "8", ",", "8", ",", "8", "]", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", "]", "]", ")", "\n", "vc4", "=", "model_builder", ".", "compute_vertex_channels", "(", "1", ",", "1", ",", "matrix2", ")", "\n", "assert", "vc4", "==", "[", "1", ",", "1", "]", "\n", "\n", "vc5", "=", "model_builder", ".", "compute_vertex_channels", "(", "1", ",", "5", ",", "matrix2", ")", "\n", "assert", "vc5", "==", "[", "1", ",", "5", "]", "\n", "\n", "vc5", "=", "model_builder", ".", "compute_vertex_channels", "(", "5", ",", "1", ",", "matrix2", ")", "\n", "assert", "vc5", "==", "[", "5", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.model_builder_test.ModelBuilderTest.test_compute_vertex_channels_no_output_branch": [[54, 69], ["numpy.array", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels"], ["", "def", "test_compute_vertex_channels_no_output_branch", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests modules that branch but not at the output vertex.\"\"\"", "\n", "matrix1", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "vc1", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc1", "==", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", "\n", "\n", "vc2", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "16", ",", "matrix1", ")", "\n", "assert", "vc2", "==", "[", "8", ",", "16", ",", "16", ",", "16", ",", "16", "]", "\n", "\n", "vc3", "=", "model_builder", ".", "compute_vertex_channels", "(", "16", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc3", "==", "[", "16", ",", "8", ",", "8", ",", "8", ",", "8", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.model_builder_test.ModelBuilderTest.test_compute_vertex_channels_output_branching": [[70, 98], ["numpy.array", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels", "numpy.array", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels"], ["", "def", "test_compute_vertex_channels_output_branching", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests modules that branch at output.\"\"\"", "\n", "matrix1", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "vc1", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc1", "==", "[", "8", ",", "4", ",", "4", ",", "8", "]", "\n", "\n", "vc2", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "16", ",", "matrix1", ")", "\n", "assert", "vc2", "==", "[", "8", ",", "8", ",", "8", ",", "16", "]", "\n", "\n", "vc3", "=", "model_builder", ".", "compute_vertex_channels", "(", "16", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc3", "==", "[", "16", ",", "4", ",", "4", ",", "8", "]", "\n", "\n", "vc4", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "15", ",", "matrix1", ")", "\n", "assert", "vc4", "==", "[", "8", ",", "8", ",", "7", ",", "15", "]", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "vc5", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix2", ")", "\n", "assert", "vc5", "==", "[", "8", ",", "3", ",", "3", ",", "2", ",", "8", "]", "\n", "\n", "vc6", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "15", ",", "matrix2", ")", "\n", "assert", "vc6", "==", "[", "8", ",", "5", ",", "5", ",", "5", ",", "15", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.model_builder_test.ModelBuilderTest.test_compute_vertex_channels_max": [[99, 123], ["numpy.array", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels", "numpy.array", "nasbench.lib.model_builder.compute_vertex_channels", "nasbench.lib.model_builder.compute_vertex_channels"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder.compute_vertex_channels"], ["", "def", "test_compute_vertex_channels_max", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests modules where some vertices take the max channels of neighbors.\"\"\"", "\n", "matrix1", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "vc1", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc1", "==", "[", "8", ",", "4", ",", "4", ",", "4", ",", "8", "]", "\n", "\n", "vc2", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "9", ",", "matrix1", ")", "\n", "assert", "vc2", "==", "[", "8", ",", "5", ",", "5", ",", "4", ",", "9", "]", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "\n", "vc3", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix2", ")", "\n", "assert", "vc3", "==", "[", "8", ",", "4", ",", "4", ",", "4", ",", "8", "]", "\n", "\n", "vc4", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "15", ",", "matrix2", ")", "\n", "assert", "vc4", "==", "[", "8", ",", "8", ",", "7", ",", "7", ",", "15", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.model_builder_test.ModelBuilderTest.test_covariance_matrix_against_numpy": [[124, 141], ["range", "numpy.random.randint", "numpy.random.randint", "numpy.random.random", "tensorflow.constant", "nasbench.lib.model_builder._covariance_matrix", "numpy.cov", "numpy.testing.assert_array_almost_equal", "tensorflow.Session", "sess.run"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_builder._covariance_matrix", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.evaluate._TrainAndEvaluator.run"], ["", "def", "test_covariance_matrix_against_numpy", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests that the TF implementation of covariance matrix matchs np.cov.\"\"\"", "\n", "\n", "# Randomized test 100 times", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "      ", "batch", "=", "np", ".", "random", ".", "randint", "(", "50", ",", "150", ")", "\n", "features", "=", "np", ".", "random", ".", "randint", "(", "500", ",", "1500", ")", "\n", "matrix", "=", "np", ".", "random", ".", "random", "(", "(", "batch", ",", "features", ")", ")", "\n", "\n", "tf_matrix", "=", "tf", ".", "constant", "(", "matrix", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "tf_cov_tensor", "=", "model_builder", ".", "_covariance_matrix", "(", "tf_matrix", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "tf_cov", "=", "sess", ".", "run", "(", "tf_cov_tensor", ")", "\n", "\n", "", "np_cov", "=", "np", ".", "cov", "(", "matrix", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "tf_cov", ",", "np_cov", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.run_evaluation_test.RunEvaluationTest.setUp": [[33, 57], ["tempfile.mkdtemp", "os.path.join", "tensorflow.gfile.Open", "json.dump", "os.path.join", "tensorflow.gfile.MakeDirs"], "methods", ["None"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "\"\"\"Set up files and directories that are expected by run_evaluation.\"\"\"", "\n", "# Create temp directory for output files", "\n", "self", ".", "output_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "models_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'models_file.json'", ")", "\n", "\n", "self", ".", "toy_data", "=", "{", "\n", "'abc'", ":", "(", "[", "[", "0", ",", "1", ",", "1", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ",", "[", "-", "1", ",", "0", ",", "-", "2", "]", ")", ",", "\n", "'abd'", ":", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ",", "[", "-", "1", ",", "0", ",", "-", "2", "]", ")", ",", "\n", "'abe'", ":", "(", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ",", "[", "-", "1", ",", "0", ",", "-", "2", "]", ")", ",", "\n", "}", "\n", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "self", ".", "models_file", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "json", ".", "dump", "(", "self", ".", "toy_data", ",", "f", ")", "\n", "\n", "# Create files & directories which are normally created by", "\n", "# evaluate.train_and_evaluate but have been mocked out.", "\n", "", "for", "model_id", "in", "self", ".", "toy_data", ":", "\n", "      ", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ",", "model_id", ",", "'repeat_1'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "eval_dir", ")", "\n", "", "run_evaluation", ".", "FLAGS", ".", "train_data_files", "=", "'unused'", "\n", "run_evaluation", ".", "FLAGS", ".", "valid_data_file", "=", "'unused'", "\n", "run_evaluation", ".", "FLAGS", ".", "test_data_file", "=", "'unused'", "\n", "run_evaluation", ".", "FLAGS", ".", "num_repeats", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.run_evaluation_test.RunEvaluationTest.test_evaluate_single_worker": [[58, 78], ["tensorflow.test.mock.patch.object", "nasbench.scripts.run_evaluation.Evaluator", "nasbench.scripts.run_evaluation.Evaluator.run_evaluation", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "run_evaluation_test.RunEvaluationTest.assertTrue", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.gfile.Exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_evaluate_single_worker", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests single worker code path.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abc'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_1'", ")", ")", "]", ")", "\n", "\n", "for", "model_id", "in", "self", ".", "toy_data", ":", "\n", "      ", "self", ".", "assertTrue", "(", "tf", ".", "gfile", ".", "Exists", "(", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "model_id", ",", "'repeat_1'", ",", "'results.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.run_evaluation_test.RunEvaluationTest.test_evaluate_multi_worker_0": [[79, 97], ["tensorflow.test.mock.patch.object", "nasbench.scripts.run_evaluation.Evaluator", "nasbench.scripts.run_evaluation.Evaluator.run_evaluation", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "run_evaluation_test.RunEvaluationTest.assertTrue", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.gfile.Exists", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_evaluate_multi_worker_0", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests multi worker code path for worker 0.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ",", "worker_id", "=", "0", ",", "total_workers", "=", "2", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abc'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_1'", ")", ")", "]", ")", "\n", "\n", "for", "model_id", "in", "[", "'abc'", ",", "'abe'", "]", ":", "\n", "      ", "self", ".", "assertTrue", "(", "tf", ".", "gfile", ".", "Exists", "(", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "model_id", ",", "'repeat_1'", ",", "'results.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.run_evaluation_test.RunEvaluationTest.test_evaluate_multi_worker_1": [[98, 113], ["tensorflow.test.mock.patch.object", "nasbench.scripts.run_evaluation.Evaluator", "nasbench.scripts.run_evaluation.Evaluator.run_evaluation", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "run_evaluation_test.RunEvaluationTest.assertTrue", "tensorflow.gfile.Exists", "tensorflow.test.mock.call", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_evaluate_multi_worker_1", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests multi worker code path for worker 1.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ",", "worker_id", "=", "1", ",", "total_workers", "=", "2", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_1'", ")", ")", "]", ")", "\n", "\n", "self", ".", "assertTrue", "(", "tf", ".", "gfile", ".", "Exists", "(", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_1'", ",", "'results.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.run_evaluation_test.RunEvaluationTest.test_evaluate_regex": [[114, 132], ["tensorflow.test.mock.patch.object", "nasbench.scripts.run_evaluation.Evaluator", "nasbench.scripts.run_evaluation.Evaluator.run_evaluation", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "run_evaluation_test.RunEvaluationTest.assertTrue", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.gfile.Exists", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_evaluate_regex", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests regex filters models.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ",", "model_id_regex", "=", "'^ab(d|e)'", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_1'", ")", ")", "]", ")", "\n", "\n", "for", "model_id", "in", "[", "'abd'", ",", "'abe'", "]", ":", "\n", "      ", "self", ".", "assertTrue", "(", "tf", ".", "gfile", ".", "Exists", "(", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "model_id", ",", "'repeat_1'", ",", "'results.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.run_evaluation_test.RunEvaluationTest.test_evaluate_repeat": [[133, 168], ["tensorflow.test.mock.patch.object", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "os.path.join", "tensorflow.gfile.MakeDirs", "absl.testing.flagsaver.flagsaver", "nasbench.scripts.run_evaluation.Evaluator", "nasbench.scripts.run_evaluation.Evaluator.run_evaluation", "range", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "run_evaluation_test.RunEvaluationTest.assertTrue", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tensorflow.gfile.Exists", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_evaluate_repeat", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests evaluate with repeats.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "\n", "# Create extra directories not created in setUp for repeat_2", "\n", "for", "model_id", "in", "self", ".", "toy_data", ":", "\n", "      ", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ",", "model_id", ",", "'repeat_2'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "eval_dir", ")", "\n", "\n", "", "with", "flagsaver", ".", "flagsaver", "(", "num_repeats", "=", "2", ")", ":", "\n", "      ", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abc'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abc'", ",", "'repeat_2'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_2'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_2'", ")", ")", "]", ")", "\n", "\n", "for", "model_id", "in", "self", ".", "toy_data", ":", "\n", "      ", "for", "repeat", "in", "range", "(", "2", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "tf", ".", "gfile", ".", "Exists", "(", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "model_id", ",", "\n", "'repeat_%d'", "%", "(", "repeat", "+", "1", ")", ",", "'results.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.run_evaluation_test.RunEvaluationTest.test_clean_model_dir": [[169, 200], ["os.path.join", "tensorflow.gfile.MakeDirs", "os.path.join", "tensorflow.gfile.MakeDirs", "nasbench.scripts.run_evaluation.Evaluator", "nasbench.scripts.run_evaluation.Evaluator._clean_model_dir", "tensorflow.gfile.ListDirectory", "run_evaluation_test.RunEvaluationTest.assertItemsEqual", "tensorflow.gfile.Open", "f.write", "tensorflow.gfile.Open", "f.write", "tensorflow.gfile.Open", "f.write", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator._clean_model_dir"], ["", "", "", "def", "test_clean_model_dir", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests clean-up of model directory keeps only intended files.\"\"\"", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ",", "'abcde'", ",", "'repeat_1'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "model_dir", ")", "\n", "\n", "# Write files which will be preserved", "\n", "preserved_files", "=", "[", "'model.ckpt-0.index'", ",", "\n", "'model.ckpt-100.index'", ",", "\n", "'results.json'", "]", "\n", "for", "filename", "in", "preserved_files", ":", "\n", "      ", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'unused'", ")", "\n", "\n", "# Write files which will be deleted", "\n", "", "", "for", "filename", "in", "[", "'checkpoint'", ",", "\n", "'events.out.tfevents'", "]", ":", "\n", "      ", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'unused'", ")", "\n", "\n", "# Create subdirectory which will be deleted", "\n", "", "", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'eval_dir'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "eval_dir", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "eval_dir", ",", "'events.out.tfevents'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "f", ".", "write", "(", "'unused'", ")", "\n", "\n", "", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "self", ".", "models_file", ",", "self", ".", "output_dir", ")", "\n", "evaluator", ".", "_clean_model_dir", "(", "model_dir", ")", "\n", "\n", "# Check only intended files are preserved", "\n", "remaining_files", "=", "tf", ".", "gfile", ".", "ListDirectory", "(", "model_dir", ")", "\n", "self", ".", "assertItemsEqual", "(", "remaining_files", ",", "preserved_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.run_evaluation_test.RunEvaluationTest.test_recovery_file": [[201, 230], ["tensorflow.test.mock.patch.object", "os.path.join", "tensorflow.gfile.MakeDirs", "nasbench.scripts.run_evaluation.Evaluator", "nasbench.scripts.run_evaluation.Evaluator.run_evaluation", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "run_evaluation_test.RunEvaluationTest.assertEqual", "run_evaluation_test.RunEvaluationTest.assertEqual", "tensorflow.gfile.Open", "f.write", "len", "tensorflow.gfile.Open", "int", "os.path.join", "tensorflow.test.mock.call", "f.read", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_recovery_file", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests that evaluation recovers from restart.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "\n", "# Write recovery file", "\n", "recovery_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'_recovery'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "recovery_dir", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "recovery_dir", ",", "'0'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "f", ".", "write", "(", "'2'", ")", "# Resume at 3rd entry", "\n", "\n", "", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_1'", ")", ")", "]", ")", "\n", "\n", "# Check that only 'abe' was evaluated, 'abc' and 'abe' are skipped due to", "\n", "# recovery.", "\n", "call_args", "=", "mock_eval", ".", "train_and_evaluate", ".", "call_args_list", "\n", "self", ".", "assertEqual", "(", "len", "(", "call_args", ")", ",", "1", ")", "\n", "\n", "# Check that recovery file is updated after run", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "evaluator", ".", "recovery_file", ")", "as", "f", ":", "\n", "      ", "new_idx", "=", "int", "(", "f", ".", "read", "(", ")", ")", "\n", "", "self", ".", "assertEqual", "(", "new_idx", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.model_spec_test.ModelSpecTest.test_prune_noop": [[28, 57], ["nasbench.lib.model_spec.ModelSpec", "numpy.array_equal", "nasbench.lib.model_spec.ModelSpec", "numpy.array_equal", "nasbench.lib.model_spec.ModelSpec", "numpy.array_equal", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["  ", "def", "test_prune_noop", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests graphs which require no pruning.\"\"\"", "\n", "model1", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "model1", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model1", ".", "original_matrix", ",", "model1", ".", "matrix", ")", "\n", "assert", "model1", ".", "original_ops", "==", "model1", ".", "original_ops", "\n", "\n", "model2", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "model2", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model2", ".", "original_matrix", ",", "model2", ".", "matrix", ")", "\n", "assert", "model2", ".", "original_ops", "==", "model2", ".", "ops", "\n", "\n", "model3", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "model3", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model3", ".", "original_matrix", ",", "model3", ".", "matrix", ")", "\n", "assert", "model3", ".", "original_ops", "==", "model3", ".", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.model_spec_test.ModelSpecTest.test_prune_islands": [[58, 86], ["nasbench.lib.model_spec.ModelSpec", "numpy.array_equal", "nasbench.lib.model_spec.ModelSpec", "numpy.array_equal", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "test_prune_islands", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests isolated components are pruned.\"\"\"", "\n", "model1", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "assert", "model1", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model1", ".", "matrix", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", "\n", "assert", "model1", ".", "ops", "==", "[", "1", ",", "2", ",", "4", "]", "\n", "\n", "model2", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "assert", "model2", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model2", ".", "matrix", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", "\n", "assert", "model2", ".", "ops", "==", "[", "1", ",", "2", ",", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.model_spec_test.ModelSpecTest.test_prune_dangling": [[87, 114], ["nasbench.lib.model_spec.ModelSpec", "numpy.array_equal", "nasbench.lib.model_spec.ModelSpec", "numpy.array_equal", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "test_prune_dangling", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests dangling vertices are pruned.\"\"\"", "\n", "model1", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "assert", "model1", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model1", ".", "matrix", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", "\n", "assert", "model1", ".", "ops", "==", "[", "1", ",", "3", ",", "4", "]", "\n", "\n", "model2", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "assert", "model2", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model2", ".", "matrix", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", "\n", "assert", "model2", ".", "ops", "==", "[", "1", ",", "3", ",", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.model_spec_test.ModelSpecTest.test_prune_disconnected": [[115, 138], ["nasbench.lib.model_spec.ModelSpec", "nasbench.lib.model_spec.ModelSpec", "nasbench.lib.model_spec.ModelSpec", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "test_prune_disconnected", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests graphs where with no input to output path are marked invalid.\"\"\"", "\n", "model1", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "0", ",", "0", "]", ")", "\n", "assert", "not", "model1", ".", "valid_spec", "\n", "\n", "model2", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "assert", "not", "model2", ".", "valid_spec", "\n", "\n", "model3", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "assert", "not", "model3", ".", "valid_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.tests.model_spec_test.ModelSpecTest.test_is_upper_triangular": [[139, 176], ["numpy.array", "nasbench.lib.model_spec.is_upper_triangular", "numpy.array", "nasbench.lib.model_spec.is_upper_triangular", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "nasbench.lib.model_spec.is_upper_triangular", "numpy.array", "nasbench.lib.model_spec.is_upper_triangular", "nasbench.lib.model_spec.is_upper_triangular", "nasbench.lib.model_spec.is_upper_triangular", "nasbench.lib.model_spec.is_upper_triangular"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.lib.model_spec.is_upper_triangular"], ["", "def", "test_is_upper_triangular", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests is_uppper_triangular correct for square graphs.\"\"\"", "\n", "m0", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "assert", "model_spec", ".", "is_upper_triangular", "(", "m0", ")", "\n", "\n", "m1", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "assert", "model_spec", ".", "is_upper_triangular", "(", "m1", ")", "\n", "\n", "m2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "assert", "not", "model_spec", ".", "is_upper_triangular", "(", "m2", ")", "\n", "\n", "m3", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "assert", "not", "model_spec", ".", "is_upper_triangular", "(", "m3", ")", "\n", "\n", "m4", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", "]", ")", "\n", "assert", "not", "model_spec", ".", "is_upper_triangular", "(", "m4", ")", "\n", "\n", "m5", "=", "np", ".", "array", "(", "[", "[", "0", "]", "]", ")", "\n", "assert", "model_spec", ".", "is_upper_triangular", "(", "m5", ")", "\n", "\n", "m6", "=", "np", ".", "array", "(", "[", "[", "1", "]", "]", ")", "\n", "assert", "not", "model_spec", ".", "is_upper_triangular", "(", "m6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.DARTSCellSearch.__init__": [[14, 17], ["sota.rnn.model.DARTSCell.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["        ", "super", "(", "NASPNetwork", ",", "self", ")", ".", "__init__", "(", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "output_weights", ",", "\n", "search_space", ",", "steps", "=", "steps", ")", "\n", "self", ".", "saved_params", "=", "[", "]", "\n", "for", "w", "in", "self", ".", "_arch_parameters", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.DARTSCellSearch.cell": [[18, 49], ["model_search.DARTSCellSearch._compute_init_state", "model_search.DARTSCellSearch.bn", "model_search.DARTSCellSearch.unsqueeze", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.softmax", "torch.softmax", "torch.softmax", "masked_states.view().mm().view", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "c.sigmoid.sigmoid.sigmoid", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "enumerate", "model_search.DARTSCellSearch.bn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_search.DARTSCellSearch._get_activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "h_mask.unsqueeze", "masked_states.view().mm", "model_search.DARTSCellSearch.unsqueeze", "probs[].unsqueeze().unsqueeze", "masked_states.view", "model_search.DARTSCellSearch.", "probs[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell._compute_init_state", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell._get_activation"], ["            ", "temp", "=", "w", ".", "data", ".", "clone", "(", ")", "\n", "self", ".", "saved_params", ".", "append", "(", "temp", ")", "\n", "\n", "", "", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "# Initializes the weights for the mixed ops.", "\n", "        ", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "self", ".", "alphas_mixed_op", "=", "Variable", "(", "torch", ".", "ones", "(", "self", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", "/", "2", "+", "\n", "1e-3", "*", "torch", ".", "randn", "(", "self", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# For the alphas on the output node initialize a weighting vector for all choice blocks and the input edge.", "\n", "self", ".", "alphas_output", "=", "Variable", "(", "torch", ".", "ones", "(", "1", ",", "self", ".", "_steps", "+", "1", ")", ".", "cuda", "(", ")", "/", "2", "+", "\n", "1e-3", "*", "torch", ".", "randn", "(", "1", ",", "self", ".", "_steps", "+", "1", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "if", "type", "(", "self", ".", "search_space", ")", "==", "SearchSpace1", ":", "\n", "            ", "begin", "=", "3", "\n", "", "else", ":", "\n", "            ", "begin", "=", "2", "\n", "# Initialize the weights for the inputs to each choice block.", "\n", "", "self", ".", "alphas_inputs", "=", "[", "Variable", "(", "torch", ".", "ones", "(", "1", ",", "n_inputs", ")", ".", "cuda", "(", ")", "/", "2", "+", "1e-3", "*", "torch", ".", "randn", "(", "1", ",", "n_inputs", ")", ".", "cuda", "(", ")", ",", "\n", "requires_grad", "=", "True", ")", "for", "n_inputs", "in", "range", "(", "begin", ",", "self", ".", "_steps", "+", "1", ")", "]", "\n", "\n", "# Total architecture parameters", "\n", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "alphas_mixed_op", ",", "\n", "self", ".", "alphas_output", ",", "\n", "*", "self", ".", "alphas_inputs", "\n", "]", "\n", "\n", "", "def", "save_params", "(", "self", ")", ":", "\n", "        ", "for", "index", ",", "value", "in", "enumerate", "(", "self", ".", "_arch_parameters", ")", ":", "\n", "            ", "self", ".", "saved_params", "[", "index", "]", ".", "copy_", "(", "value", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.RNNModelSearch.__init__": [[53, 57], ["sota.rnn.model.RNNModel.__init__", "model_search.RNNModelSearch._initialize_arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.RNNModelSearch._initialize_arch_parameters"], ["for", "index", "in", "range", "(", "len", "(", "self", ".", "_arch_parameters", ")", ")", ":", "\n", "            ", "clip_scale", ".", "append", "(", "m", "(", "Variable", "(", "self", ".", "_arch_parameters", "[", "index", "]", ".", "data", ")", ")", ")", "\n", "", "for", "index", "in", "range", "(", "len", "(", "self", ".", "_arch_parameters", ")", ")", ":", "\n", "            ", "self", ".", "_arch_parameters", "[", "index", "]", ".", "data", "=", "clip_scale", "[", "index", "]", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.RNNModelSearch.new": [[58, 63], ["model_search.RNNModelSearch", "zip", "model_search.RNNModelSearch.arch_parameters", "model_search.RNNModelSearch.arch_parameters", "x.data.copy_"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["", "", "def", "binarization", "(", "self", ",", "e_greedy", "=", "0", ")", ":", "\n", "        ", "self", ".", "save_params", "(", ")", "\n", "# Use binarize only for the mixop, because the rest very quickly gave exploding gradients", "\n", "m", ",", "n", "=", "self", ".", "_arch_parameters", "[", "0", "]", ".", "size", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "e_greedy", ":", "\n", "            ", "maxIndexs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n", ")", ",", "m", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.RNNModelSearch._initialize_arch_parameters": [[64, 71], ["sum", "torch.randn().mul_", "torch.randn().mul_", "torch.randn().mul_", "torch.randn().mul_", "torch.randn().mul_", "torch.randn().mul_", "torch.randn().mul_", "torch.randn().mul_", "torch.randn().mul_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.randn().mul_.cuda", "torch.randn().mul_.cuda", "torch.randn().mul_.cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "range", "len"], "methods", ["None"], ["", "else", ":", "\n", "            ", "maxIndexs", "=", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "proximal_step", "(", "\n", "self", ".", "_arch_parameters", "[", "0", "]", ",", "maxIndexs", ")", "\n", "\n", "", "def", "restore", "(", "self", ")", ":", "\n", "        ", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "saved_params", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.RNNModelSearch.arch_parameters": [[72, 74], ["None"], "methods", ["None"], ["", "def", "proximal_step", "(", "self", ",", "var", ",", "maxIndexs", "=", "None", ")", ":", "\n", "        ", "values", "=", "var", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "m", ",", "n", "=", "values", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.RNNModelSearch._save_arch_parameters": [[75, 77], ["p.clone"], "methods", ["None"], ["alphas", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.RNNModelSearch.softmax_arch_parameters": [[78, 82], ["model_search.RNNModelSearch._save_arch_parameters", "p.data.copy_", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._save_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax"], ["                ", "if", "j", "==", "maxIndexs", "[", "i", "]", ":", "\n", "                    ", "alphas", ".", "append", "(", "values", "[", "i", "]", "[", "j", "]", ".", "copy", "(", ")", ")", "\n", "values", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "values", "[", "i", "]", "[", "j", "]", "=", "0", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.RNNModelSearch.restore_arch_parameters": [[83, 87], ["enumerate", "p.data.copy_"], "methods", ["None"], ["", "", "", "return", "torch", ".", "Tensor", "(", "values", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.RNNModelSearch.clip": [[88, 96], ["model_search.RNNModelSearch.arch_parameters", "line.argmax", "line.data.clamp_", "line.data.div_", "line.sum", "line.sum"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.RNNModelSearch._loss": [[97, 101], ["model_search.RNNModelSearch.", "torch.functional.nll_loss", "torch.functional.nll_loss", "torch.functional.nll_loss", "log_prob.view", "log_prob.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model_search.RNNModelSearch.genotype": [[102, 123], ["model_search.RNNModelSearch.genotype._parse"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.train.evaluate": [[142, 160], ["model.eval", "len", "model.init_hidden", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "total_loss.item", "len", "utils.get_batch", "targets.view.view", "parallel_model", "utils.repackage_hidden", "data_source.size", "torch.functional.nll_loss", "len", "log_prob.view", "log_prob.size"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.get_batch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.repackage_hidden"], ["def", "evaluate", "(", "data_source", ",", "batch_size", "=", "10", ")", ":", "\n", "# Turn on evaluation mode which disables dropout.", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "ntokens", "=", "len", "(", "corpus", ".", "dictionary", ")", "\n", "hidden", "=", "model", ".", "init_hidden", "(", "batch_size", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "data_source", ".", "size", "(", "0", ")", "-", "1", ",", "args", ".", "bptt", ")", ":", "\n", "            ", "data", ",", "targets", "=", "get_batch", "(", "data_source", ",", "i", ",", "args", ",", "evaluation", "=", "True", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "log_prob", ",", "hidden", "=", "parallel_model", "(", "data", ",", "hidden", ")", "\n", "loss", "=", "nn", ".", "functional", ".", "nll_loss", "(", "log_prob", ".", "view", "(", "-", "1", ",", "log_prob", ".", "size", "(", "2", ")", ")", ",", "targets", ")", ".", "data", "\n", "\n", "total_loss", "+=", "loss", "*", "len", "(", "data", ")", "\n", "\n", "hidden", "=", "repackage_hidden", "(", "hidden", ")", "\n", "", "", "return", "total_loss", ".", "item", "(", ")", "/", "len", "(", "data_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.train.train": [[162, 233], ["time.time", "len", "model.init_hidden", "max", "min", "model.train", "utils.get_batch", "optimizer.zero_grad", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "numpy.isnan", "range", "int", "utils.repackage_hidden", "parallel_model", "torch.functional.nll_loss", "loss.backward", "gc.collect", "model.parameters", "total_loss.item", "logging.info", "time.time", "train_data.size", "numpy.random.random", "numpy.random.normal", "targets[].contiguous().view", "log_prob.view", "sum", "total_loss.item", "time.time", "log_prob.size", "sum", "math.exp", "targets[].contiguous", "len", "dropped_rnn_h.pow().mean", "dropped_rnn_h.pow"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.get_batch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.repackage_hidden"], ["", "def", "train", "(", ")", ":", "\n", "    ", "assert", "args", ".", "batch_size", "%", "args", ".", "small_batch_size", "==", "0", ",", "'batch_size must be divisible by small_batch_size'", "\n", "\n", "# Turn on training mode which enables dropout.", "\n", "total_loss", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "ntokens", "=", "len", "(", "corpus", ".", "dictionary", ")", "\n", "hidden", "=", "[", "model", ".", "init_hidden", "(", "args", ".", "small_batch_size", ")", "for", "_", "in", "range", "(", "args", ".", "batch_size", "//", "args", ".", "small_batch_size", ")", "]", "\n", "batch", ",", "i", "=", "0", ",", "0", "\n", "while", "i", "<", "train_data", ".", "size", "(", "0", ")", "-", "1", "-", "1", ":", "\n", "        ", "bptt", "=", "args", ".", "bptt", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.95", "else", "args", ".", "bptt", "/", "2.", "\n", "# Prevent excessively small or negative sequence lengths", "\n", "seq_len", "=", "max", "(", "5", ",", "int", "(", "np", ".", "random", ".", "normal", "(", "bptt", ",", "5", ")", ")", ")", "\n", "# There's a very small chance that it could select a very long sequence length resulting in OOM", "\n", "seq_len", "=", "min", "(", "seq_len", ",", "args", ".", "bptt", "+", "args", ".", "max_seq_len_delta", ")", "\n", "\n", "lr2", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr2", "*", "seq_len", "/", "args", ".", "bptt", "\n", "model", ".", "train", "(", ")", "\n", "data", ",", "targets", "=", "get_batch", "(", "train_data", ",", "i", ",", "args", ",", "seq_len", "=", "seq_len", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "start", ",", "end", ",", "s_id", "=", "0", ",", "args", ".", "small_batch_size", ",", "0", "\n", "while", "start", "<", "args", ".", "batch_size", ":", "\n", "            ", "cur_data", ",", "cur_targets", "=", "data", "[", ":", ",", "start", ":", "end", "]", ",", "targets", "[", ":", ",", "start", ":", "end", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# Starting each batch, we detach the hidden state from how it was previously produced.", "\n", "# If we didn't, the model would try backpropagating all the way to start of the dataset.", "\n", "hidden", "[", "s_id", "]", "=", "repackage_hidden", "(", "hidden", "[", "s_id", "]", ")", "\n", "\n", "log_prob", ",", "hidden", "[", "s_id", "]", ",", "rnn_hs", ",", "dropped_rnn_hs", "=", "parallel_model", "(", "cur_data", ",", "hidden", "[", "s_id", "]", ",", "return_h", "=", "True", ")", "\n", "raw_loss", "=", "nn", ".", "functional", ".", "nll_loss", "(", "log_prob", ".", "view", "(", "-", "1", ",", "log_prob", ".", "size", "(", "2", ")", ")", ",", "cur_targets", ")", "\n", "\n", "loss", "=", "raw_loss", "\n", "# Activiation Regularization", "\n", "if", "args", ".", "alpha", ">", "0", ":", "\n", "              ", "loss", "=", "loss", "+", "sum", "(", "args", ".", "alpha", "*", "dropped_rnn_h", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "for", "dropped_rnn_h", "in", "dropped_rnn_hs", "[", "-", "1", ":", "]", ")", "\n", "# Temporal Activation Regularization (slowness)", "\n", "", "loss", "=", "loss", "+", "sum", "(", "args", ".", "beta", "*", "(", "rnn_h", "[", "1", ":", "]", "-", "rnn_h", "[", ":", "-", "1", "]", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "for", "rnn_h", "in", "rnn_hs", "[", "-", "1", ":", "]", ")", "\n", "loss", "*=", "args", ".", "small_batch_size", "/", "args", ".", "batch_size", "\n", "total_loss", "+=", "raw_loss", ".", "data", "*", "args", ".", "small_batch_size", "/", "args", ".", "batch_size", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "s_id", "+=", "1", "\n", "start", "=", "end", "\n", "end", "=", "start", "+", "args", ".", "small_batch_size", "\n", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "# `clip_grad_norm` helps prevent the exploding gradient problem in RNNs.", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# total_loss += raw_loss.data", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr2", "\n", "\n", "if", "np", ".", "isnan", "(", "total_loss", ".", "item", "(", ")", ")", ":", "\n", "          ", "raise", "\n", "\n", "", "if", "batch", "%", "args", ".", "log_interval", "==", "0", "and", "batch", ">", "0", ":", "\n", "            ", "cur_loss", "=", "total_loss", ".", "item", "(", ")", "/", "args", ".", "log_interval", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logging", ".", "info", "(", "'| epoch {:3d} | {:5d}/{:5d} batches | lr {:02.2f} | ms/batch {:5.2f} | '", "\n", "'loss {:5.2f} | ppl {:8.2f}'", ".", "format", "(", "\n", "epoch", ",", "batch", ",", "len", "(", "train_data", ")", "//", "args", ".", "bptt", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "elapsed", "*", "1000", "/", "args", ".", "log_interval", ",", "cur_loss", ",", "math", ".", "exp", "(", "cur_loss", ")", ")", ")", "\n", "total_loss", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "batch", "+=", "1", "\n", "i", "+=", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.train_search.evaluate": [[164, 182], ["sota.eval", "len", "sota.init_hidden", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "total_loss.item", "len", "sota.rnn.utils.get_batch", "targets.view.view", "parallel_model", "sota.rnn.utils.repackage_hidden", "data_source.size", "torch.functional.nll_loss", "len", "log_prob.view", "log_prob.size"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.get_batch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.repackage_hidden"], ["lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# increase the cutout probability linearly throughout search", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", "=", "args", ".", "cutout_prob", "*", "epoch", "/", "(", "args", ".", "epochs", "-", "1", ")", "\n", "logging", ".", "info", "(", "'epoch %d lr %e cutout_prob %e'", ",", "epoch", ",", "lr", ",", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", ")", "\n", "\n", "# Save the one shot model architecture weights for later analysis", "\n", "arch_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'one_shot_architecture_{}.obj'", ".", "format", "(", "epoch", ")", ")", "\n", "with", "open", "(", "arch_filename", ",", "'wb'", ")", "as", "filehandler", ":", "\n", "            ", "numpy_tensor_list", "=", "[", "]", "\n", "for", "tensor", "in", "model", ".", "arch_parameters", "(", ")", ":", "\n", "                ", "numpy_tensor_list", ".", "append", "(", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "pickle", ".", "dump", "(", "numpy_tensor_list", ",", "filehandler", ")", "\n", "\n", "# # Save the entire one-shot-model", "\n", "# filepath = os.path.join(args.save, 'one_shot_model_{}.obj'.format(epoch))", "\n", "# torch.save(model.state_dict(), filepath)", "\n", "\n", "", "for", "i", "in", "numpy_tensor_list", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.train_search.train": [[184, 285], ["time.time", "len", "sota.init_hidden", "sota.init_hidden", "int", "sota.train", "sota.rnn.utils.get_batch", "sota.rnn.utils.get_batch", "optimizer.zero_grad", "architect.optimizer.zero_grad", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "sota.restore_arch_parameters", "range", "range", "sota.rnn.utils.repackage_hidden", "sota.rnn.utils.repackage_hidden", "architect.step", "optimizer.zero_grad", "architect.optimizer.zero_grad", "sota.rnn.utils.repackage_hidden", "sota.softmax_arch_parameters", "parallel_model", "torch.functional.nll_loss", "loss.backward", "gc.collect", "sota.parameters", "logging.info", "print", "logging.info", "time.time", "train_data.size", "numpy.random.random", "targets[].contiguous().view", "targets_valid[].contiguous().view", "perturb_alpha", "optimizer.zero_grad", "architect.optimizer.zero_grad", "log_prob.view", "sum", "parallel_model.genotype", "torch.softmax", "total_loss.item", "time.time", "search_data.size", "log_prob.size", "sum", "math.exp", "targets[].contiguous", "targets_valid[].contiguous", "len", "dropped_rnn_h.pow().mean", "dropped_rnn_h.pow"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.get_batch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.get_batch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.restore_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.repackage_hidden", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.repackage_hidden", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.repackage_hidden", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.softmax_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.genotype", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax"], ["\n", "# training", "\n", "", "train_acc", ",", "train_obj", ",", "ev", "=", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "\n", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", "\n", "logging", ".", "info", "(", "'train_acc %f'", ",", "train_acc", ")", "\n", "logging", ".", "info", "(", "'eigenvalue %f'", ",", "ev", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/train'", ",", "train_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/train'", ",", "train_obj", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/eigenvalue'", ",", "ev", ",", "epoch", ")", "\n", "\n", "# validation", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'valid_acc %f'", ",", "valid_acc", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/valid'", ",", "valid_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/valid'", ",", "valid_obj", ",", "epoch", ")", "\n", "\n", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "\n", "if", "not", "'debug'", "in", "args", ".", "save", ":", "\n", "# benchmark", "\n", "            ", "logging", ".", "info", "(", "'STARTING EVALUATION'", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "naseval", ".", "eval_one_shot_model", "(", "\n", "config", "=", "args", ".", "__dict__", ",", "model", "=", "arch_filename", ")", "\n", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "3", ")", ")", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "np", ".", "mean", "(", "test", ")", ",", "np", ".", "mean", "(", "valid", ")", ",", "np", ".", "mean", "(", "runtime", ")", ",", "np", ".", "mean", "(", "params", ")", "\n", "logging", ".", "info", "(", "'TEST ERROR: %.3f | VALID ERROR: %.3f | RUNTIME: %f | PARAMS: %d'", "\n", "%", "(", "test", ",", "valid", ",", "runtime", ",", "params", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/test'", ",", "test", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/valid'", ",", "valid", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/runtime'", ",", "runtime", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/params'", ",", "params", ",", "epoch", ")", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# get a minibatch from the search queue with replacement", "\n", "try", ":", "\n", "            ", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "", "except", ":", "\n", "            ", "valid_queue_iter", "=", "iter", "(", "valid_queue", ")", "\n", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "\n", "", "input_search", "=", "input_search", ".", "cuda", "(", ")", "\n", "target_search", "=", "target_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Allow for warm starting of the one-shot model for more reliable architecture updates.", "\n", "if", "epoch", ">=", "args", ".", "warm_start_epochs", ":", "\n", "            ", "architect", ".", "step", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "lr", ",", "optimizer", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "binarization", "(", ")", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "model", ".", "restore", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "clip", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "                ", "break", "\n", "\n", "# analyze", "\n", "", "", "", "_data_loader", "=", "deepcopy", "(", "train_queue", ")", "\n", "input", ",", "target", "=", "next", "(", "iter", "(", "_data_loader", ")", ")", "\n", "\n", "input", "=", "Variable", "(", "input", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "model", ".", "binarization", "(", ")", "\n", "H", "=", "analyzer", ".", "compute_Hw", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "\n", "lr", ",", "optimizer", ",", "False", ")", "\n", "model", ".", "restore", "(", ")", "\n", "# g = analyzer.compute_dw(input, target, input_search, target_search,", "\n", "#                         lr, optimizer, False)", "\n", "# g = torch.cat([x.view(-1) for x in g])", "\n", "\n", "del", "_data_loader", "\n", "\n", "ev", "=", "max", "(", "LA", ".", "eigvals", "(", "H", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", ")", "\n", "ev", "=", "np", ".", "linalg", ".", "norm", "(", "ev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.__init__": [[26, 31], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "architect.Architect.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["", "def", "_backward_step", "(", "self", ",", "input_valid", ",", "target_valid", ")", ":", "\n", "        ", "self", ".", "model", ".", "binarization", "(", ")", "\n", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "model", ".", "restore", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._compute_unrolled_model": [[32, 40], ["architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "architect._clip", "architect.Architect._construct_model_from_theta", "architect._concat", "architect.Architect.model.parameters", "theta.sub", "architect.Architect.model.parameters", "architect._concat"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._clip", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._construct_model_from_theta", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step": [[41, 53], ["architect.Architect.optimizer.zero_grad", "architect.Architect.optimizer.step", "architect.Architect._backward_step_unrolled", "architect.Architect._backward_step"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._backward_step_unrolled", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._backward_step"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._backward_step": [[54, 58], ["architect.Architect.model._loss", "loss.backward"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._backward_step_unrolled": [[59, 81], ["architect.Architect._compute_unrolled_model", "unrolled_model._loss", "unrolled_loss.backward", "architect._clip", "architect.Architect._hessian_vector_product", "zip", "zip", "g.data.sub_", "architect.Architect.model.arch_parameters", "unrolled_model.arch_parameters", "unrolled_model.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "v.grad.data.copy_"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._compute_unrolled_model", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._clip", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._hessian_vector_product", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._construct_model_from_theta": [[82, 96], ["architect.Architect.model.new", "architect.Architect.model.state_dict", "architect.Architect.model.named_parameters", "architect.Architect.update", "architect.Architect.load_state_dict", "architect.Architect.cuda", "numpy.prod", "theta[].view", "len", "v.size", "v.size"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.PCDARTSNetwork.new", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect._hessian_vector_product": [[97, 113], ["zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "_concat().norm", "architect.Architect.model.parameters", "p.data.add_", "architect.Architect.model.arch_parameters", "architect.Architect.model.parameters", "p.data.sub_", "architect.Architect.model.arch_parameters", "architect.Architect.model.parameters", "p.data.add_", "zip", "architect._concat"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._concat": [[7, 9], ["torch.cat", "torch.cat", "x.view"], "function", ["None"], ["def", "_concat", "(", "xs", ")", ":", "\n", "  ", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect._clip": [[11, 22], ["g.data.norm", "g.data.mul_"], "function", ["None"], ["", "class", "ArchitectNASP", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "        ", "self", ".", "network_momentum", "=", "args", ".", "momentum", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "arch_learning_rate", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "args", ".", "arch_weight_decay", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.Dictionary.__init__": [[8, 13], ["collections.Counter"], "methods", ["None"], ["\n", "def", "get_loaders", "(", "args", ")", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.Dictionary.add_word": [[14, 22], ["data.Dictionary.idx2word.append", "len"], "methods", ["None"], ["transforms", ".", "Normalize", "(", "\n", "mean", "=", "MEAN", ",", "\n", "std", "=", "STD", ",", "\n", ")", ",", "\n", "]", ")", "\n", "train_dataset", "=", "CIFAR10", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.Dictionary.__len__": [[23, 25], ["len"], "methods", ["None"], ["transform", "=", "train_transform", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.Corpus.__init__": [[28, 33], ["data.Dictionary", "data.Corpus.tokenize", "data.Corpus.tokenize", "data.Corpus.tokenize", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.SentCorpus.tokenize", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.SentCorpus.tokenize", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.SentCorpus.tokenize"], ["train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "SubsetRandomSampler", "(", "indices", "[", ":", "-", "5000", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "2", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.Corpus.tokenize": [[34, 57], ["os.path.exists", "open", "open", "torch.LongTensor", "len", "line.split", "data.Corpus.dictionary.add_word", "line.split"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.Dictionary.add_word"], [")", "\n", "\n", "reward_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "SubsetRandomSampler", "(", "indices", "[", "-", "5000", ":", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", "\n", "\n", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "MEAN", ",", "\n", "std", "=", "STD", ",", "\n", ")", ",", "\n", "]", ")", "\n", "valid_dataset", "=", "CIFAR10", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "False", ",", "\n", "transform", "=", "valid_transform", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.SentCorpus.__init__": [[59, 64], ["data.Dictionary", "data.SentCorpus.tokenize", "data.SentCorpus.tokenize", "data.SentCorpus.tokenize", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.SentCorpus.tokenize", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.SentCorpus.tokenize", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.SentCorpus.tokenize"], ["valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.SentCorpus.tokenize": [[65, 90], ["os.path.exists", "open", "open", "len", "torch.LongTensor", "enumerate", "sents.append", "line.split", "data.SentCorpus.dictionary.add_word", "line.split", "len"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.Dictionary.add_word"], ["\n", "# repeat_train_loader = RepeatedDataLoader(train_loader)", "\n", "repeat_reward_loader", "=", "RepeatedDataLoader", "(", "reward_loader", ")", "\n", "repeat_valid_loader", "=", "RepeatedDataLoader", "(", "valid_loader", ")", "\n", "\n", "return", "train_loader", ",", "repeat_reward_loader", ",", "repeat_valid_loader", "\n", "\n", "\n", "", "class", "RepeatedDataLoader", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "data_iter", "=", "self", ".", "data_loader", ".", "__iter__", "(", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_loader", ")", "\n", "\n", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "batch", "=", "self", ".", "data_iter", ".", "__next__", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "data_iter", "=", "self", ".", "data_loader", ".", "__iter__", "(", ")", "\n", "batch", "=", "self", ".", "data_iter", ".", "__next__", "(", ")", "\n", "", "return", "batch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.BatchSentLoader.__init__": [[92, 99], ["sorted", "x.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.BatchSentLoader.__next__": [[100, 117], ["min", "max", "torch.LongTensor().fill_", "range", "len", "len", "tensor[].copy_", "tensor.cuda.cuda.cuda", "len", "s.size", "torch.LongTensor", "s.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.data.BatchSentLoader.__iter__": [[120, 123], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.test.logging": [[67, 69], ["print"], "function", ["None"], ["def", "logging", "(", "s", ",", "print_", "=", "True", ",", "log_", "=", "True", ")", ":", "\n", "    ", "print", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.test.evaluate": [[88, 107], ["model.eval", "len", "model.init_hidden", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "total_loss.item", "len", "print", "utils.get_batch", "targets.view.view", "parallel_model", "utils.repackage_hidden", "data_source.size", "torch.functional.nll_loss", "len", "data_source.size", "log_prob.view", "log_prob.size"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.get_batch", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.repackage_hidden"], ["def", "evaluate", "(", "data_source", ",", "batch_size", "=", "10", ")", ":", "\n", "# Turn on evaluation mode which disables dropout.", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "ntokens", "=", "len", "(", "corpus", ".", "dictionary", ")", "\n", "hidden", "=", "model", ".", "init_hidden", "(", "batch_size", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "data_source", ".", "size", "(", "0", ")", "-", "1", ",", "args", ".", "bptt", ")", ":", "\n", "            ", "print", "(", "i", ",", "data_source", ".", "size", "(", "0", ")", "-", "1", ")", "\n", "data", ",", "targets", "=", "get_batch", "(", "data_source", ",", "i", ",", "args", ",", "evaluation", "=", "True", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "log_prob", ",", "hidden", "=", "parallel_model", "(", "data", ",", "hidden", ")", "\n", "loss", "=", "nn", ".", "functional", ".", "nll_loss", "(", "log_prob", ".", "view", "(", "-", "1", ",", "log_prob", ".", "size", "(", "2", ")", ")", ",", "targets", ")", ".", "data", "\n", "\n", "total_loss", "+=", "loss", "*", "len", "(", "data", ")", "\n", "\n", "hidden", "=", "repackage_hidden", "(", "hidden", ")", "\n", "", "", "return", "total_loss", ".", "item", "(", ")", "/", "len", "(", "data_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell.__init__": [[16, 28], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "len", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["  ", "def", "__init__", "(", "self", ",", "ninp", ",", "nhid", ",", "dropouth", ",", "dropoutx", ",", "genotype", ")", ":", "\n", "    ", "super", "(", "DARTSCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nhid", "=", "nhid", "\n", "self", ".", "dropouth", "=", "dropouth", "\n", "self", ".", "dropoutx", "=", "dropoutx", "\n", "self", ".", "genotype", "=", "genotype", "\n", "\n", "# genotype is None when doing arch search", "\n", "steps", "=", "len", "(", "self", ".", "genotype", ".", "recurrent", ")", "if", "self", ".", "genotype", "is", "not", "None", "else", "STEPS", "\n", "self", ".", "_W0", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "ninp", "+", "nhid", ",", "2", "*", "nhid", ")", ".", "uniform_", "(", "-", "INITRANGE", ",", "INITRANGE", ")", ")", "\n", "self", ".", "_Ws", "=", "nn", ".", "ParameterList", "(", "[", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "nhid", ",", "2", "*", "nhid", ")", ".", "uniform_", "(", "-", "INITRANGE", ",", "INITRANGE", ")", ")", "for", "i", "in", "range", "(", "steps", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell.forward": [[30, 46], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "inputs.size", "inputs.size", "sota.rnn.utils.mask2d", "sota.rnn.utils.mask2d", "model.DARTSCell.cell", "torch.stack.append", "torch.stack.append", "torch.stack.append", "hiddens[].unsqueeze", "inputs.size", "model.DARTSCell.size"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.mask2d", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.mask2d", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell.cell"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden", ",", "updateType", "=", "'alpha'", ")", ":", "\n", "    ", "T", ",", "B", "=", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "      ", "x_mask", "=", "mask2d", "(", "B", ",", "inputs", ".", "size", "(", "2", ")", ",", "keep_prob", "=", "1.", "-", "self", ".", "dropoutx", ")", "\n", "h_mask", "=", "mask2d", "(", "B", ",", "hidden", ".", "size", "(", "2", ")", ",", "keep_prob", "=", "1.", "-", "self", ".", "dropouth", ")", "\n", "", "else", ":", "\n", "      ", "x_mask", "=", "h_mask", "=", "None", "\n", "\n", "", "hidden", "=", "hidden", "[", "0", "]", "\n", "hiddens", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "      ", "hidden", "=", "self", ".", "cell", "(", "inputs", "[", "t", "]", ",", "hidden", ",", "x_mask", ",", "h_mask", ",", "updateType", "=", "updateType", ")", "\n", "hiddens", ".", "append", "(", "hidden", ")", "\n", "", "hiddens", "=", "torch", ".", "stack", "(", "hiddens", ")", "\n", "return", "hiddens", ",", "hiddens", "[", "-", "1", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell._compute_init_state": [[47, 57], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "c0.sigmoid.sigmoid.sigmoid", "h0.tanh.tanh.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mm", "torch.cat.mm", "torch.cat.mm"], "methods", ["None"], ["", "def", "_compute_init_state", "(", "self", ",", "x", ",", "h_prev", ",", "x_mask", ",", "h_mask", ")", ":", "\n", "    ", "if", "self", ".", "training", ":", "\n", "      ", "xh_prev", "=", "torch", ".", "cat", "(", "[", "x", "*", "x_mask", ",", "h_prev", "*", "h_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "      ", "xh_prev", "=", "torch", ".", "cat", "(", "[", "x", ",", "h_prev", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "c0", ",", "h0", "=", "torch", ".", "split", "(", "xh_prev", ".", "mm", "(", "self", ".", "_W0", ")", ",", "self", ".", "nhid", ",", "dim", "=", "-", "1", ")", "\n", "c0", "=", "c0", ".", "sigmoid", "(", ")", "\n", "h0", "=", "h0", ".", "tanh", "(", ")", "\n", "s0", "=", "h_prev", "+", "c0", "*", "(", "h0", "-", "h_prev", ")", "\n", "return", "s0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell._get_activation": [[58, 70], ["None"], "methods", ["None"], ["", "def", "_get_activation", "(", "self", ",", "name", ")", ":", "\n", "    ", "if", "name", "==", "'tanh'", ":", "\n", "      ", "f", "=", "F", ".", "tanh", "\n", "", "elif", "name", "==", "'relu'", ":", "\n", "      ", "f", "=", "F", ".", "relu", "\n", "", "elif", "name", "==", "'sigmoid'", ":", "\n", "      ", "f", "=", "F", ".", "sigmoid", "\n", "", "elif", "name", "==", "'identity'", ":", "\n", "      ", "f", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell.cell": [[71, 89], ["model.DARTSCell._compute_init_state", "enumerate", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "c.sigmoid.sigmoid.sigmoid", "model.DARTSCell._get_activation", "model.DARTSCell.", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "s_prev.mm"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell._compute_init_state", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell._get_activation"], ["", "def", "cell", "(", "self", ",", "x", ",", "h_prev", ",", "x_mask", ",", "h_mask", ",", "updateType", ")", ":", "\n", "    ", "s0", "=", "self", ".", "_compute_init_state", "(", "x", ",", "h_prev", ",", "x_mask", ",", "h_mask", ")", "\n", "\n", "states", "=", "[", "s0", "]", "\n", "for", "i", ",", "(", "name", ",", "pred", ")", "in", "enumerate", "(", "self", ".", "genotype", ".", "recurrent", ")", ":", "\n", "      ", "s_prev", "=", "states", "[", "pred", "]", "\n", "if", "self", ".", "training", ":", "\n", "        ", "ch", "=", "(", "s_prev", "*", "h_mask", ")", ".", "mm", "(", "self", ".", "_Ws", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "        ", "ch", "=", "s_prev", ".", "mm", "(", "self", ".", "_Ws", "[", "i", "]", ")", "\n", "", "c", ",", "h", "=", "torch", ".", "split", "(", "ch", ",", "self", ".", "nhid", ",", "dim", "=", "-", "1", ")", "\n", "c", "=", "c", ".", "sigmoid", "(", ")", "\n", "fn", "=", "self", ".", "_get_activation", "(", "name", ")", "\n", "h", "=", "fn", "(", "h", ")", "\n", "s", "=", "s_prev", "+", "c", "*", "(", "h", "-", "s_prev", ")", "\n", "states", "+=", "[", "s", "]", "\n", "", "output", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "genotype", ".", "concat", "]", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.RNNModel.__init__": [[94, 122], ["torch.Module.__init__", "sota.rnn.utils.LockedDropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "model.RNNModel.init_weights", "cell_cls", "cell_cls"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.RNNModel.init_weights"], ["def", "__init__", "(", "self", ",", "ntoken", ",", "ninp", ",", "nhid", ",", "nhidlast", ",", "\n", "dropout", "=", "0.5", ",", "dropouth", "=", "0.5", ",", "dropoutx", "=", "0.5", ",", "dropouti", "=", "0.5", ",", "dropoute", "=", "0.1", ",", "\n", "cell_cls", "=", "DARTSCell", ",", "genotype", "=", "None", ")", ":", "\n", "        ", "super", "(", "RNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lockdrop", "=", "LockedDropout", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Embedding", "(", "ntoken", ",", "ninp", ")", "\n", "\n", "assert", "ninp", "==", "nhid", "==", "nhidlast", "\n", "if", "cell_cls", "==", "DARTSCell", ":", "\n", "            ", "assert", "genotype", "is", "not", "None", "\n", "self", ".", "rnns", "=", "[", "cell_cls", "(", "ninp", ",", "nhid", ",", "dropouth", ",", "dropoutx", ",", "genotype", ")", "]", "\n", "", "else", ":", "\n", "            ", "assert", "genotype", "is", "None", "\n", "self", ".", "rnns", "=", "[", "cell_cls", "(", "ninp", ",", "nhid", ",", "dropouth", ",", "dropoutx", ")", "]", "\n", "\n", "", "self", ".", "rnns", "=", "torch", ".", "nn", ".", "ModuleList", "(", "self", ".", "rnns", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "ninp", ",", "ntoken", ")", "\n", "self", ".", "decoder", ".", "weight", "=", "self", ".", "encoder", ".", "weight", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "ninp", "=", "ninp", "\n", "self", ".", "nhid", "=", "nhid", "\n", "self", ".", "nhidlast", "=", "nhidlast", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropouti", "=", "dropouti", "\n", "self", ".", "dropoute", "=", "dropoute", "\n", "self", ".", "ntoken", "=", "ntoken", "\n", "self", ".", "cell_cls", "=", "cell_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.RNNModel.init_weights": [[123, 127], ["model.RNNModel.encoder.weight.data.uniform_", "model.RNNModel.decoder.bias.data.fill_", "model.RNNModel.decoder.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "encoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "INITRANGE", ",", "INITRANGE", ")", "\n", "self", ".", "decoder", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "decoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "INITRANGE", ",", "INITRANGE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.RNNModel.forward": [[128, 156], ["input.size", "sota.rnn.utils.embedded_dropout", "model.RNNModel.lockdrop", "enumerate", "model.RNNModel.lockdrop", "outputs.append", "model.RNNModel.decoder", "torch.functional.log_softmax", "torch.functional.log_softmax", "torch.functional.log_softmax", "model_output.view.view.view", "rnn", "new_hidden.append", "raw_outputs.append", "model.RNNModel.view"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.embedded_dropout"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden", ",", "return_h", "=", "False", ",", "updateType", "=", "'alpha'", ")", ":", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "1", ")", "\n", "\n", "emb", "=", "embedded_dropout", "(", "self", ".", "encoder", ",", "input", ",", "dropout", "=", "self", ".", "dropoute", "if", "self", ".", "training", "else", "0", ")", "\n", "emb", "=", "self", ".", "lockdrop", "(", "emb", ",", "self", ".", "dropouti", ")", "\n", "\n", "raw_output", "=", "emb", "\n", "new_hidden", "=", "[", "]", "\n", "raw_outputs", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "for", "l", ",", "rnn", "in", "enumerate", "(", "self", ".", "rnns", ")", ":", "\n", "            ", "current_input", "=", "raw_output", "\n", "raw_output", ",", "new_h", "=", "rnn", "(", "raw_output", ",", "hidden", "[", "l", "]", ",", "updateType", "=", "updateType", ")", "\n", "new_hidden", ".", "append", "(", "new_h", ")", "\n", "raw_outputs", ".", "append", "(", "raw_output", ")", "\n", "", "hidden", "=", "new_hidden", "\n", "\n", "output", "=", "self", ".", "lockdrop", "(", "raw_output", ",", "self", ".", "dropout", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "\n", "logit", "=", "self", ".", "decoder", "(", "output", ".", "view", "(", "-", "1", ",", "self", ".", "ninp", ")", ")", "\n", "log_prob", "=", "nn", ".", "functional", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", "\n", "model_output", "=", "log_prob", "\n", "model_output", "=", "model_output", ".", "view", "(", "-", "1", ",", "batch_size", ",", "self", ".", "ntoken", ")", "\n", "\n", "if", "return_h", ":", "\n", "            ", "return", "model_output", ",", "hidden", ",", "raw_outputs", ",", "outputs", "\n", "", "return", "model_output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.RNNModel.init_hidden": [[157, 160], ["next", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model.RNNModel.parameters", "weight.new().zero_", "weight.new"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.PCDARTSNetwork.new"], ["", "def", "init_hidden", "(", "self", ",", "bsz", ")", ":", "\n", "      ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "data", "\n", "return", "[", "Variable", "(", "weight", ".", "new", "(", "1", ",", "bsz", ",", "self", ".", "nhid", ")", ".", "zero_", "(", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.visualize.plot": [[6, 32], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "graphviz.Digraph.node", "graphviz.Digraph.edge", "graphviz.Digraph.edge", "len", "range", "enumerate", "graphviz.Digraph.node", "range", "graphviz.Digraph.render", "graphviz.Digraph.node", "graphviz.Digraph.edge", "graphviz.Digraph.edge", "dict", "dict", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node"], ["def", "plot", "(", "genotype", ",", "filename", ")", ":", "\n", "  ", "g", "=", "Digraph", "(", "\n", "format", "=", "'pdf'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'20'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'center'", ",", "fontsize", "=", "'20'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "g", ".", "node", "(", "\"x_{t}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"h_{t-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"0\"", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "g", ".", "edge", "(", "\"x_{t}\"", ",", "\"0\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "g", ".", "edge", "(", "\"h_{t-1}\"", ",", "\"0\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "steps", "=", "len", "(", "genotype", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "steps", "+", "1", ")", ":", "\n", "    ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "i", ",", "(", "op", ",", "j", ")", "in", "enumerate", "(", "genotype", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "j", ")", ",", "str", "(", "i", "+", "1", ")", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "g", ".", "node", "(", "\"h_{t}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "steps", "+", "1", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"h_{t}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "g", ".", "render", "(", "filename", ",", "view", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.LockedDropout.__init__": [[88, 90], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["", "", "def", "get_top_k", "(", "array", ",", "k", ")", ":", "\n", "    ", "return", "list", "(", "np", ".", "argpartition", "(", "array", "[", "0", "]", ",", "-", "k", ")", "[", "-", "k", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.LockedDropout.forward": [[91, 98], ["x.data.new().bernoulli_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "mask.expand_as.expand_as.expand_as", "x.data.new().bernoulli_.div_", "x.data.new", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.PCDARTSNetwork.new"], ["\n", "", "def", "parent_combinations", "(", "adjacency_matrix", ",", "node", ",", "n_parents", "=", "2", ")", ":", "\n", "    ", "\"\"\"Get all possible parent combinations for the current node.\"\"\"", "\n", "if", "node", "!=", "1", ":", "\n", "# Parents can only be nodes which have an index that is lower than the current index,", "\n", "# because of the upper triangular adjacency matrix and because the index is also a", "\n", "# topological ordering in our case.", "\n", "        ", "return", "itertools", ".", "combinations", "(", "np", ".", "argwhere", "(", "adjacency_matrix", "[", ":", "node", ",", "node", "]", "==", "0", ")", ".", "flatten", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.repackage_hidden": [[9, 20], ["isinstance", "h.detach", "tuple", "utils.repackage_hidden"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.repackage_hidden"], ["\n", "sns", ".", "set_style", "(", "'whitegrid'", ")", "\n", "\n", "INPUT", "=", "'input'", "\n", "OUTPUT", "=", "'output'", "\n", "CONV1X1", "=", "'conv1x1-bn-relu'", "\n", "CONV3X3", "=", "'conv3x3-bn-relu'", "\n", "MAXPOOL3X3", "=", "'maxpool3x3'", "\n", "OUTPUT_NODE", "=", "6", "\n", "\n", "\n", "class", "NasbenchWrapper", "(", "api", ".", "NASBench", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.batchify": [[22, 30], ["data.cuda.narrow", "data.cuda.view().t().contiguous", "print", "data.cuda.size", "data.cuda.size", "data.cuda.cuda", "data.cuda.view().t", "data.cuda.view"], "function", ["None"], ["\n", "\n", "def", "query", "(", "self", ",", "model_spec", ",", "epochs", "=", "108", ",", "stop_halfway", "=", "False", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.get_batch": [[32, 37], ["min", "torch.autograd.Variable", "torch.autograd.Variable", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.create_exp_dir": [[39, 49], ["print", "os.path.exists", "os.makedirs", "os.mkdir", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.save_checkpoint": [[51, 59], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join", "optimizer.state_dict", "os.path.join", "os.path.join", "optimizer.state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save"], ["\n", "if", "epochs", "not", "in", "self", ".", "valid_epochs", ":", "\n", "            ", "raise", "api", ".", "OutOfDomainError", "(", "'invalid number of epochs, must be one of %s'", "\n", "%", "self", ".", "valid_epochs", ")", "\n", "\n", "", "fixed_stat", ",", "computed_stat", "=", "self", ".", "get_metrics_from_spec", "(", "model_spec", ")", "\n", "trainings", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "config", "[", "'num_repeats'", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.embedded_dropout": [[61, 85], ["torch.embedding", "torch.autograd.Variable", "embed.weight.data.new().resize_().bernoulli_().expand_as", "scale.expand_as", "embed.weight.data.new().resize_().bernoulli_", "embed.weight.data.new().resize_", "embed.weight.data.new", "embed.weight.size"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.PCDARTSNetwork.new"], ["\n", "data", "=", "{", "}", "\n", "data", "[", "'module_adjacency'", "]", "=", "fixed_stat", "[", "'module_adjacency'", "]", "\n", "data", "[", "'module_operations'", "]", "=", "fixed_stat", "[", "'module_operations'", "]", "\n", "data", "[", "'trainable_parameters'", "]", "=", "fixed_stat", "[", "'trainable_parameters'", "]", "\n", "\n", "if", "stop_halfway", ":", "\n", "                ", "data", "[", "'training_time'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'halfway_test_accuracy'", "]", "\n", "", "else", ":", "\n", "                ", "data", "[", "'training_time'", "]", "=", "computed_stat_at_epoch", "[", "'final_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'final_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'final_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat_at_epoch", "[", "'final_test_accuracy'", "]", "\n", "\n", "", "self", ".", "training_time_spent", "+=", "data", "[", "'training_time'", "]", "\n", "if", "stop_halfway", ":", "\n", "                ", "self", ".", "total_epochs_spent", "+=", "epochs", "//", "2", "\n", "", "else", ":", "\n", "                ", "self", ".", "total_epochs_spent", "+=", "epochs", "\n", "", "trainings", ".", "append", "(", "data", ")", "\n", "\n", "", "return", "trainings", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.mask2d": [[100, 106], ["torch.autograd.Variable", "torch.floor", "torch.floor", "torch.floor", "m.cuda.cuda", "torch.rand", "torch.rand", "torch.rand"], "function", ["None"], ["", "else", ":", "\n", "        ", "return", "[", "[", "0", "]", "]", "\n", "\n", "\n", "", "", "def", "draw_graph_to_adjacency_matrix", "(", "graph", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.NoiseOp.__init__": [[26, 31], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["\n", "# Batch Normalization from nasbench", "\n", "BN_MOMENTUM", "=", "0.997", "\n", "BN_EPSILON", "=", "1e-5", "\n", "\n", "\"\"\"NASBench OPS\"\"\"", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.NoiseOp.forward": [[32, 39], ["torch.autograd.Variable", "torch.autograd.Variable", "x_new.data.new().normal_", "x_new.data.new", "x_new.size"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.PCDARTSNetwork.new"], ["\n", "\n", "class", "ConvBnRelu", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Equivalent to conv_bn_relu https://github.com/google-research/nasbench/blob/master/nasbench/lib/base_ops.py#L32\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.ReLUConvBN.__init__": [[43, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "# affine is equivalent to scale in original tensorflow code", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "True", ",", "momentum", "=", "BN_MOMENTUM", ",", "eps", "=", "BN_EPSILON", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.ReLUConvBN.forward": [[51, 53], ["operations.ReLUConvBN.op"], "methods", ["None"], ["\n", "\n", "", "", "class", "Conv3x3BnRelu", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.DilConv.__init__": [[57, 65], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["\n", "def", "__init__", "(", "self", ",", "channels", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Conv3x3BnRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "ConvBnRelu", "(", "C_in", "=", "channels", ",", "C_out", "=", "channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.DilConv.forward": [[67, 69], ["operations.DilConv.op"], "methods", ["None"], ["    ", "\"\"\"\n    Equivalent to Conv1x1BnRelu https://github.com/google-research/nasbench/blob/master/nasbench/lib/base_ops.py#L107\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.SepConv.__init__": [[73, 84], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["self", ".", "op", "=", "ConvBnRelu", "(", "C_in", "=", "channels", ",", "C_out", "=", "channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n", "\n", "", "", "\"\"\"DARTS OPS\"\"\"", "\n", "\n", "\n", "class", "ReLUConvBN", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.SepConv.forward": [[86, 88], ["operations.SepConv.op"], "methods", ["None"], ["self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.Identity.__init__": [[92, 94], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.Identity.forward": [[95, 97], ["None"], "methods", ["None"], ["\n", "", "", "class", "DilConv", "(", "nn", ".", "Module", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.Zero.__init__": [[101, 104], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.Zero.forward": [[105, 109], ["x[].mul", "x.mul"], "methods", ["None"], ["nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.FactorizedReduce.__init__": [[113, 120], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.operations.FactorizedReduce.forward": [[121, 126], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_imagenet.CrossEntropyLabelSmooth.__init__": [[69, 74], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_imagenet.CrossEntropyLabelSmooth.forward": [[75, 81], ["train_imagenet.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros_like", "(", "log_probs", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_imagenet.main": [[83, 196], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "eval", "print", "logging.info", "print", "sota.cnn.model_imagenet.NetworkImageNet", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "train_imagenet.CrossEntropyLabelSmooth", "criterion_smooth.cuda.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "torch.DataParallel", "model.cuda.cuda", "model.cuda.cuda", "optimizers.darts.utils.count_parameters_in_MB", "model.cuda.parameters", "torchvision.Compose", "torchvision.Compose", "float", "logging.info", "time.time", "train_imagenet.train", "logging.info", "train_imagenet.infer", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "optimizers.darts.utils.save_checkpoint", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "logging.info", "time.time", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ColorJitter", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "train_imagenet.adjust_lr", "print", "sys.exit", "model.cuda.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.infer", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.save_checkpoint", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_imagenet.adjust_lr"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'No GPU device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "logging", ".", "info", "(", "\"unparsed_args = %s\"", ",", "unparsed", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "genotype", "=", "eval", "(", "\"genotypes.%s\"", "%", "args", ".", "arch", ")", "\n", "print", "(", "'---------Genotype---------'", ")", "\n", "logging", ".", "info", "(", "genotype", ")", "\n", "print", "(", "'--------------------------'", ")", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CLASSES", ",", "args", ".", "layers", ",", "args", ".", "auxiliary", ",", "genotype", ")", "\n", "if", "num_gpus", ">", "1", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "criterion_smooth", "=", "CrossEntropyLabelSmooth", "(", "CLASSES", ",", "args", ".", "label_smooth", ")", "\n", "criterion_smooth", "=", "criterion_smooth", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", ")", "\n", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "validdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "train_data", "=", "dset", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "\n", "contrast", "=", "0.4", ",", "\n", "saturation", "=", "0.4", ",", "\n", "hue", "=", "0.2", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "valid_data", "=", "dset", ".", "ImageFolder", "(", "\n", "validdir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "#    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, args.decay_period, gamma=args.gamma)", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ")", "\n", "best_acc_top1", "=", "0", "\n", "best_acc_top5", "=", "0", "\n", "lr", "=", "args", ".", "learning_rate", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "lr_scheduler", "==", "'cosine'", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "current_lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "", "elif", "args", ".", "lr_scheduler", "==", "'linear'", ":", "\n", "            ", "current_lr", "=", "adjust_lr", "(", "optimizer", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Wrong lr type, exit'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "logging", ".", "info", "(", "'Epoch: %d lr %e'", ",", "epoch", ",", "current_lr", ")", "\n", "if", "epoch", "<", "5", "and", "args", ".", "batch_size", ">", "256", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "*", "(", "epoch", "+", "1", ")", "/", "5.0", "\n", "", "logging", ".", "info", "(", "'Warming-up Epoch: %d, LR: %e'", ",", "epoch", ",", "lr", "*", "(", "epoch", "+", "1", ")", "/", "5.0", ")", "\n", "", "if", "num_gpus", ">", "1", ":", "\n", "            ", "model", ".", "module", ".", "drop_path_prob", "=", "args", ".", "drop_path_prob", "*", "epoch", "/", "args", ".", "epochs", "\n", "", "else", ":", "\n", "            ", "model", ".", "drop_path_prob", "=", "args", ".", "drop_path_prob", "*", "epoch", "/", "args", ".", "epochs", "\n", "", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "train_acc", ",", "train_obj", "=", "train", "(", "train_queue", ",", "model", ",", "criterion_smooth", ",", "optimizer", ")", "\n", "logging", ".", "info", "(", "'Train_acc: %f'", ",", "train_acc", ")", "\n", "\n", "valid_acc_top1", ",", "valid_acc_top5", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'Valid_acc_top1: %f'", ",", "valid_acc_top1", ")", "\n", "logging", ".", "info", "(", "'Valid_acc_top5: %f'", ",", "valid_acc_top5", ")", "\n", "epoch_duration", "=", "time", ".", "time", "(", ")", "-", "epoch_start", "\n", "logging", ".", "info", "(", "'Epoch time: %ds.'", ",", "epoch_duration", ")", "\n", "is_best", "=", "False", "\n", "if", "valid_acc_top5", ">", "best_acc_top5", ":", "\n", "            ", "best_acc_top5", "=", "valid_acc_top5", "\n", "", "if", "valid_acc_top1", ">", "best_acc_top1", ":", "\n", "            ", "best_acc_top1", "=", "valid_acc_top1", "\n", "is_best", "=", "True", "\n", "", "logging", ".", "info", "(", "'Best_acc_top1: %f'", ",", "best_acc_top1", ")", "\n", "logging", ".", "info", "(", "'Best_acc_top5: %f'", ",", "best_acc_top5", ")", "\n", "utils", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc_top1'", ":", "best_acc_top1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "args", ".", "save", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_imagenet.adjust_lr": [[198, 207], ["None"], "function", ["None"], ["", "", "def", "adjust_lr", "(", "optimizer", ",", "epoch", ")", ":", "\n", "# Smaller slope for the last 5 epochs because lr * 1/250 is relatively large", "\n", "    ", "if", "args", ".", "epochs", "-", "epoch", ">", "5", ":", "\n", "        ", "lr", "=", "args", ".", "learning_rate", "*", "(", "args", ".", "epochs", "-", "5", "-", "epoch", ")", "/", "(", "args", ".", "epochs", "-", "5", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "args", ".", "learning_rate", "*", "(", "args", ".", "epochs", "-", "epoch", ")", "/", "(", "(", "args", ".", "epochs", "-", "5", ")", "*", "5", ")", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_imagenet.train": [[209, 250], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "model.train", "enumerate", "target.cuda.cuda", "input.cuda.cuda", "time.time", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "utils.AvgrageMeter.update", "optimizers.darts.utils.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "criterion", "model.parameters", "time.time", "logging.info", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["", "def", "train", "(", "train_queue", ",", "model", ",", "criterion", ",", "optimizer", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "batch_time", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "        ", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "b_start", "=", "time", ".", "time", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "logits_aux", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "if", "args", ".", "auxiliary", ":", "\n", "            ", "loss_aux", "=", "criterion", "(", "logits_aux", ",", "target", ")", "\n", "loss", "+=", "args", ".", "auxiliary_weight", "*", "loss_aux", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "b_start", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "            ", "end_time", "=", "time", ".", "time", "(", ")", "\n", "if", "step", "==", "0", ":", "\n", "                ", "duration", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "                ", "duration", "=", "end_time", "-", "start_time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "logging", ".", "info", "(", "'TRAIN Step: %03d Objs: %e R1: %f R5: %f Duration: %ds BTime: %.3fs'", ",", "\n", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "duration", ",", "batch_time", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_imagenet.infer": [[252, 284], ["optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "optimizers.darts.utils.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "model", "criterion", "optimizers.darts.utils.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "time.time", "logging.info", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "                ", "end_time", "=", "time", ".", "time", "(", ")", "\n", "if", "step", "==", "0", ":", "\n", "                    ", "duration", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "                    ", "duration", "=", "end_time", "-", "start_time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "logging", ".", "info", "(", "'VALID Step: %03d Objs: %e R1: %f R5: %f Duration: %ds'", ",", "\n", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "duration", ")", "\n", "\n", "", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_imagenet.Cell.__init__": [[9, 26], ["nn.Module.__init__", "print", "ReLUConvBN", "model_imagenet.Cell._compile", "FactorizedReduce", "ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model.Cell._compile"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "        ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "C_prev_prev", ",", "C_prev", ",", "C", ")", "\n", "\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "if", "reduction", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_imagenet.Cell._compile": [[27, 39], ["len", "nn.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_imagenet.Cell.forward": [[40, 60], ["model_imagenet.Cell.preprocess0", "model_imagenet.Cell.preprocess1", "range", "torch.cat", "op1", "op2", "isinstance", "optimizers.darts.utils.drop_path", "isinstance", "optimizers.darts.utils.drop_path"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.drop_path", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "                ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "                    ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "                    ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_imagenet.AuxiliaryHeadImageNet.__init__": [[64, 80], ["nn.Module.__init__", "nn.Sequential", "nn.Linear", "nn.ReLU", "nn.AvgPool2d", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU", "nn.Conv2d", "nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_imagenet.AuxiliaryHeadImageNet.forward": [[81, 85], ["model_imagenet.AuxiliaryHeadImageNet.features", "model_imagenet.AuxiliaryHeadImageNet.classifier", "model_imagenet.AuxiliaryHeadImageNet.view", "model_imagenet.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_imagenet.NetworkImageNet.__init__": [[89, 130], ["nn.Module.__init__", "nn.Sequential", "nn.Sequential", "nn.ModuleList", "range", "nn.AvgPool2d", "nn.Linear", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU", "nn.Conv2d", "nn.BatchNorm2d", "model_imagenet.Cell", "model_imagenet.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "        ", "super", "(", "NetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "self", ".", "drop_path_prob", "=", "0.0", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_imagenet.NetworkImageNet.forward": [[131, 143], ["model_imagenet.NetworkImageNet.stem0", "model_imagenet.NetworkImageNet.stem1", "enumerate", "model_imagenet.NetworkImageNet.global_pooling", "model_imagenet.NetworkImageNet.classifier", "model_imagenet.NetworkImageNet.view", "cell", "model_imagenet.NetworkImageNet.size", "model_imagenet.NetworkImageNet.auxiliary_head"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell.cell"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.MixedOp.__init__": [[16, 24], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.MixedOp._ops.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["self", ".", "saved_params", "=", "[", "]", "\n", "for", "w", "in", "self", ".", "_arch_parameters", ":", "\n", "            ", "temp", "=", "w", ".", "data", ".", "clone", "(", ")", "\n", "self", ".", "saved_params", ".", "append", "(", "temp", ")", "\n", "\n", "", "", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "# Initializes the weights for the mixed ops.", "\n", "        ", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "self", ".", "alphas_mixed_op", "=", "Variable", "(", "torch", ".", "ones", "(", "self", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", "/", "2", "+", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.MixedOp.forward": [[25, 27], ["sum", "op", "zip"], "methods", ["None"], ["1e-3", "*", "torch", ".", "randn", "(", "self", ".", "_steps", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# For the alphas on the output node initialize a weighting vector for all choice blocks and the input edge.", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Cell.__init__": [[31, 55], ["torch.Module.__init__", "ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "FactorizedReduce", "ReLUConvBN", "range", "model_search.MixedOp", "model_search.Cell._ops.append"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["if", "type", "(", "self", ".", "search_space", ")", "==", "SearchSpace1", ":", "\n", "            ", "begin", "=", "3", "\n", "", "else", ":", "\n", "            ", "begin", "=", "2", "\n", "# Initialize the weights for the inputs to each choice block.", "\n", "", "self", ".", "alphas_inputs", "=", "[", "Variable", "(", "torch", ".", "ones", "(", "1", ",", "n_inputs", ")", ".", "cuda", "(", ")", "/", "2", "+", "1e-3", "*", "torch", ".", "randn", "(", "1", ",", "n_inputs", ")", ".", "cuda", "(", ")", ",", "\n", "requires_grad", "=", "True", ")", "for", "n_inputs", "in", "range", "(", "begin", ",", "self", ".", "_steps", "+", "1", ")", "]", "\n", "\n", "# Total architecture parameters", "\n", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "alphas_mixed_op", ",", "\n", "self", ".", "alphas_output", ",", "\n", "*", "self", ".", "alphas_inputs", "\n", "]", "\n", "\n", "", "def", "save_params", "(", "self", ")", ":", "\n", "        ", "for", "index", ",", "value", "in", "enumerate", "(", "self", ".", "_arch_parameters", ")", ":", "\n", "            ", "self", ".", "saved_params", "[", "index", "]", ".", "copy_", "(", "value", ".", "data", ")", "\n", "\n", "", "", "def", "clip", "(", "self", ")", ":", "\n", "        ", "clip_scale", "=", "[", "]", "\n", "m", "=", "nn", ".", "Hardtanh", "(", "0", ",", "1", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "_arch_parameters", ")", ")", ":", "\n", "            ", "clip_scale", ".", "append", "(", "m", "(", "Variable", "(", "self", ".", "_arch_parameters", "[", "index", "]", ".", "data", ")", ")", ")", "\n", "", "for", "index", "in", "range", "(", "len", "(", "self", ".", "_arch_parameters", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Cell.forward": [[56, 71], ["model_search.Cell.preprocess0", "model_search.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "states.append", "sum", "sum", "optimizers.darts.utils.drop_path", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.drop_path"], ["            ", "self", ".", "_arch_parameters", "[", "index", "]", ".", "data", "=", "clip_scale", "[", "index", "]", ".", "data", "\n", "\n", "", "", "def", "binarization", "(", "self", ",", "e_greedy", "=", "0", ")", ":", "\n", "        ", "self", ".", "save_params", "(", ")", "\n", "# Use binarize only for the mixop, because the rest very quickly gave exploding gradients", "\n", "m", ",", "n", "=", "self", ".", "_arch_parameters", "[", "0", "]", ".", "size", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "e_greedy", ":", "\n", "            ", "maxIndexs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n", ")", ",", "m", ")", "\n", "", "else", ":", "\n", "            ", "maxIndexs", "=", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "proximal_step", "(", "\n", "self", ".", "_arch_parameters", "[", "0", "]", ",", "maxIndexs", ")", "\n", "\n", "", "def", "restore", "(", "self", ")", ":", "\n", "        ", "self", ".", "_arch_parameters", "[", "0", "]", ".", "data", "=", "self", ".", "saved_params", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network.__init__": [[75, 112], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "model_search.Network._initialize_alphas", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model_search.Cell"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network._initialize_alphas"], ["alphas", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "j", "==", "maxIndexs", "[", "i", "]", ":", "\n", "                    ", "alphas", ".", "append", "(", "values", "[", "i", "]", "[", "j", "]", ".", "copy", "(", ")", ")", "\n", "values", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "values", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "", "", "return", "torch", ".", "Tensor", "(", "values", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network.new": [[113, 120], ["Network().cuda", "zip", "Network().cuda.arch_parameters", "model_search.Network.arch_parameters", "x.data.copy_", "model_search.Network"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network.forward": [[121, 138], ["model_search.Network.stem", "enumerate", "model_search.Network.global_pooling", "model_search.Network.classifier", "model_search.Network.view", "cell", "model_search.Network.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell.cell", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network._loss": [[139, 142], ["model_search.Network.", "model_search.Network._criterion"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network._initialize_alphas": [[143, 152], ["sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "range", "range", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network.arch_parameters": [[154, 156], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network._save_arch_parameters": [[157, 159], ["p.clone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network.softmax_arch_parameters": [[160, 164], ["model_search.Network._save_arch_parameters", "p.data.copy_", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._save_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network.restore_arch_parameters": [[165, 169], ["enumerate", "p.data.copy_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network.clip": [[170, 178], ["model_search.Network.arch_parameters", "line.argmax", "line.data.clamp_", "line.data.div_", "line.sum", "line.sum"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network.genotype": [[179, 220], ["model_search.Network.genotype._parse"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train.main": [[72, 141], ["torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "eval", "sota.cnn.model.Network", "model.cuda.cuda", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "writer.close", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "optimizers.count_parameters_in_MB", "model.cuda.parameters", "optimizers._data_transforms_cifar10", "torchvision.CIFAR10", "torchvision.CIFAR10", "float", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "logging.info", "train.train", "logging.info", "writer.add_scalar", "writer.add_scalar", "train.infer", "logging.info", "writer.add_scalar", "writer.add_scalar", "optimizers.save", "optimizers._data_transforms_cifar100", "torchvision.CIFAR100", "torchvision.CIFAR100", "os.path.join", "optimizers._data_transforms_svhn", "torchvision.SVHN", "torchvision.SVHN", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.infer", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar100", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_svhn"], ["parser", ".", "add_argument", "(", "'--max_seq_len_delta'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'max sequence length'", ")", "\n", "parser", ".", "add_argument", "(", "'--single_gpu'", ",", "default", "=", "True", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'use single GPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'GPU device to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "type", "=", "str", ",", "default", "=", "'DARTS'", ",", "help", "=", "'which architecture to use'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "nhidlast", "<", "0", ":", "\n", "    ", "args", ".", "nhidlast", "=", "args", ".", "emsize", "\n", "", "if", "args", ".", "small_batch_size", "<", "0", ":", "\n", "    ", "args", ".", "small_batch_size", "=", "args", ".", "batch_size", "\n", "\n", "", "if", "not", "args", ".", "continue_train", ":", "\n", "    ", "args", ".", "save", "=", "'../../experiments/sota/penn/eval-{}-{}'", ".", "format", "(", "\n", "args", ".", "save", ",", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", ")", "\n", "args", ".", "save", "+=", "'-'", "+", "args", ".", "arch", "\n", "create_exp_dir", "(", "args", ".", "save", ",", "scripts_to_save", "=", "glob", ".", "glob", "(", "'*.py'", ")", ")", "\n", "\n", "", "log_format", "=", "'%(asctime)s %(message)s'", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "log_format", ",", "datefmt", "=", "'%m/%d %I:%M:%S %p'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'log.txt'", ")", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "log_format", ")", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "fh", ")", "\n", "\n", "# Set the random seed manually for reproducibility.", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "if", "not", "args", ".", "cuda", ":", "\n", "        ", "print", "(", "\"WARNING: You have a CUDA device, so you should probably run with --cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n", "", "", "corpus", "=", "data", ".", "Corpus", "(", "args", ".", "data", ")", "\n", "\n", "eval_batch_size", "=", "10", "\n", "test_batch_size", "=", "1", "\n", "train_data", "=", "batchify", "(", "corpus", ".", "train", ",", "args", ".", "batch_size", ",", "args", ")", "\n", "val_data", "=", "batchify", "(", "corpus", ".", "valid", ",", "eval_batch_size", ",", "args", ")", "\n", "test_data", "=", "batchify", "(", "corpus", ".", "test", ",", "test_batch_size", ",", "args", ")", "\n", "\n", "\n", "ntokens", "=", "len", "(", "corpus", ".", "dictionary", ")", "\n", "if", "args", ".", "continue_train", ":", "\n", "    ", "model", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'model.pt'", ")", ")", "\n", "", "else", ":", "\n", "    ", "genotype", "=", "eval", "(", "\"genotypes.%s\"", "%", "args", ".", "arch", ")", "\n", "model", "=", "model", ".", "RNNModel", "(", "ntokens", ",", "args", ".", "emsize", ",", "args", ".", "nhid", ",", "args", ".", "nhidlast", ",", "\n", "args", ".", "dropout", ",", "args", ".", "dropouth", ",", "args", ".", "dropoutx", ",", "args", ".", "dropouti", ",", "args", ".", "dropoute", ",", "\n", "cell_cls", "=", "model", ".", "DARTSCell", ",", "genotype", "=", "genotype", ")", "\n", "\n", "", "if", "args", ".", "cuda", ":", "\n", "    ", "if", "args", ".", "single_gpu", ":", "\n", "        ", "parallel_model", "=", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "parallel_model", "=", "nn", ".", "DataParallel", "(", "model", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "    ", "parallel_model", "=", "model", "\n", "\n", "", "total_params", "=", "sum", "(", "x", ".", "data", ".", "nelement", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", ")", "\n", "logging", ".", "info", "(", "'Args: {}'", ".", "format", "(", "args", ")", ")", "\n", "logging", ".", "info", "(", "'Model total parameters: {}'", ".", "format", "(", "total_params", ")", ")", "\n", "logging", ".", "info", "(", "'Genotype: {}'", ".", "format", "(", "genotype", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train.train": [[143, 175], ["optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "model.train", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "optimizers.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "criterion", "model.parameters", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["# Turn on evaluation mode which disables dropout.", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "ntokens", "=", "len", "(", "corpus", ".", "dictionary", ")", "\n", "hidden", "=", "model", ".", "init_hidden", "(", "batch_size", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "data_source", ".", "size", "(", "0", ")", "-", "1", ",", "args", ".", "bptt", ")", ":", "\n", "            ", "data", ",", "targets", "=", "get_batch", "(", "data_source", ",", "i", ",", "args", ",", "evaluation", "=", "True", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "log_prob", ",", "hidden", "=", "parallel_model", "(", "data", ",", "hidden", ")", "\n", "loss", "=", "nn", ".", "functional", ".", "nll_loss", "(", "log_prob", ".", "view", "(", "-", "1", ",", "log_prob", ".", "size", "(", "2", ")", ")", ",", "targets", ")", ".", "data", "\n", "\n", "total_loss", "+=", "loss", "*", "len", "(", "data", ")", "\n", "\n", "hidden", "=", "repackage_hidden", "(", "hidden", ")", "\n", "", "", "return", "total_loss", ".", "item", "(", ")", "/", "len", "(", "data_source", ")", "\n", "\n", "\n", "", "def", "train", "(", ")", ":", "\n", "    ", "assert", "args", ".", "batch_size", "%", "args", ".", "small_batch_size", "==", "0", ",", "'batch_size must be divisible by small_batch_size'", "\n", "\n", "# Turn on training mode which enables dropout.", "\n", "total_loss", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "ntokens", "=", "len", "(", "corpus", ".", "dictionary", ")", "\n", "hidden", "=", "[", "model", ".", "init_hidden", "(", "args", ".", "small_batch_size", ")", "for", "_", "in", "range", "(", "args", ".", "batch_size", "//", "args", ".", "small_batch_size", ")", "]", "\n", "batch", ",", "i", "=", "0", ",", "0", "\n", "while", "i", "<", "train_data", ".", "size", "(", "0", ")", "-", "1", "-", "1", ":", "\n", "        ", "bptt", "=", "args", ".", "bptt", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.95", "else", "args", ".", "bptt", "/", "2.", "\n", "# Prevent excessively small or negative sequence lengths", "\n", "seq_len", "=", "max", "(", "5", ",", "int", "(", "np", ".", "random", ".", "normal", "(", "bptt", ",", "5", ")", ")", ")", "\n", "# There's a very small chance that it could select a very long sequence length resulting in OOM", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train.infer": [[177, 203], ["optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "model", "criterion", "optimizers.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["\n", "lr2", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr2", "*", "seq_len", "/", "args", ".", "bptt", "\n", "model", ".", "train", "(", ")", "\n", "data", ",", "targets", "=", "get_batch", "(", "train_data", ",", "i", ",", "args", ",", "seq_len", "=", "seq_len", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "start", ",", "end", ",", "s_id", "=", "0", ",", "args", ".", "small_batch_size", ",", "0", "\n", "while", "start", "<", "args", ".", "batch_size", ":", "\n", "            ", "cur_data", ",", "cur_targets", "=", "data", "[", ":", ",", "start", ":", "end", "]", ",", "targets", "[", ":", ",", "start", ":", "end", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# Starting each batch, we detach the hidden state from how it was previously produced.", "\n", "# If we didn't, the model would try backpropagating all the way to start of the dataset.", "\n", "hidden", "[", "s_id", "]", "=", "repackage_hidden", "(", "hidden", "[", "s_id", "]", ")", "\n", "\n", "log_prob", ",", "hidden", "[", "s_id", "]", ",", "rnn_hs", ",", "dropped_rnn_hs", "=", "parallel_model", "(", "cur_data", ",", "hidden", "[", "s_id", "]", ",", "return_h", "=", "True", ")", "\n", "raw_loss", "=", "nn", ".", "functional", ".", "nll_loss", "(", "log_prob", ".", "view", "(", "-", "1", ",", "log_prob", ".", "size", "(", "2", ")", ")", ",", "cur_targets", ")", "\n", "\n", "loss", "=", "raw_loss", "\n", "# Activiation Regularization", "\n", "if", "args", ".", "alpha", ">", "0", ":", "\n", "              ", "loss", "=", "loss", "+", "sum", "(", "args", ".", "alpha", "*", "dropped_rnn_h", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "for", "dropped_rnn_h", "in", "dropped_rnn_hs", "[", "-", "1", ":", "]", ")", "\n", "# Temporal Activation Regularization (slowness)", "\n", "", "loss", "=", "loss", "+", "sum", "(", "args", ".", "beta", "*", "(", "rnn_h", "[", "1", ":", "]", "-", "rnn_h", "[", ":", "-", "1", "]", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "for", "rnn_h", "in", "rnn_hs", "[", "-", "1", ":", "]", ")", "\n", "loss", "*=", "args", ".", "small_batch_size", "/", "args", ".", "batch_size", "\n", "total_loss", "+=", "raw_loss", ".", "data", "*", "args", ".", "small_batch_size", "/", "args", ".", "batch_size", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_search.main": [[92, 194], ["torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "sota.cnn.model_search.Network", "model.cuda.cuda", "logging.info", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "optimizers.darts.architect.Architect", "range", "writer.close", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "optimizers.count_parameters_in_MB", "model.cuda.parameters", "optimizers._data_transforms_cifar10", "torchvision.CIFAR10", "range", "numpy.floor", "float", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "model.cuda.genotype", "logging.info", "print", "print", "train_search.train", "logging.info", "writer.add_scalar", "writer.add_scalar", "train_search.infer", "logging.info", "writer.add_scalar", "writer.add_scalar", "optimizers.save", "optimizers._data_transforms_cifar100", "torchvision.CIFAR100", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "logging.info", "logging.info", "logging.info", "torch.softmax", "torch.softmax", "os.path.join", "optimizers._data_transforms_svhn", "torchvision.SVHN"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.genotype", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.infer", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar100", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_svhn"], ["\n", "\n", "def", "main", "(", ")", ":", "\n", "    ", "if", "not", "'debug'", "in", "args", ".", "save", ":", "\n", "        ", "from", "nasbench_analysis", "import", "eval_darts_one_shot_model_in_nasbench", "as", "naseval", "\n", "# Select the search space to search in", "\n", "", "if", "args", ".", "search_space", "==", "'1'", ":", "\n", "        ", "search_space", "=", "SearchSpace1", "(", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'2'", ":", "\n", "        ", "search_space", "=", "SearchSpace2", "(", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'3'", ":", "\n", "        ", "search_space", "=", "SearchSpace3", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown search space'", ")", "\n", "\n", "", "torch", ".", "set_num_threads", "(", "3", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "criterion", ",", "\n", "output_weights", "=", "args", ".", "output_weights", ",", "steps", "=", "search_space", ".", "num_intermediate_nodes", ",", "\n", "search_space", "=", "search_space", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "\n", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "        ", "split", "=", "args", ".", "batch_size", "\n", "num_train", "=", "2", "*", "args", ".", "batch_size", "\n", "\n", "", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ")", "\n", "\n", "analyzer", "=", "Analyzer", "(", "model", ",", "args", ")", "\n", "architect", "=", "Architect", "(", "model", ",", "args", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# increase the cutout probability linearly throughout search", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", "=", "args", ".", "cutout_prob", "*", "epoch", "/", "(", "args", ".", "epochs", "-", "1", ")", "\n", "logging", ".", "info", "(", "'epoch %d lr %e cutout_prob %e'", ",", "epoch", ",", "lr", ",", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", ")", "\n", "\n", "# Save the one shot model architecture weights for later analysis", "\n", "arch_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'one_shot_architecture_{}.obj'", ".", "format", "(", "epoch", ")", ")", "\n", "with", "open", "(", "arch_filename", ",", "'wb'", ")", "as", "filehandler", ":", "\n", "            ", "numpy_tensor_list", "=", "[", "]", "\n", "for", "tensor", "in", "model", ".", "arch_parameters", "(", ")", ":", "\n", "                ", "numpy_tensor_list", ".", "append", "(", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "pickle", ".", "dump", "(", "numpy_tensor_list", ",", "filehandler", ")", "\n", "\n", "# # Save the entire one-shot-model", "\n", "# filepath = os.path.join(args.save, 'one_shot_model_{}.obj'.format(epoch))", "\n", "# torch.save(model.state_dict(), filepath)", "\n", "\n", "", "for", "i", "in", "numpy_tensor_list", ":", "\n", "            ", "print", "(", "i", ")", "\n", "\n", "# training", "\n", "", "train_acc", ",", "train_obj", ",", "ev", "=", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "\n", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", "\n", "logging", ".", "info", "(", "'train_acc %f'", ",", "train_acc", ")", "\n", "logging", ".", "info", "(", "'eigenvalue %f'", ",", "ev", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/train'", ",", "train_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/train'", ",", "train_obj", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/eigenvalue'", ",", "ev", ",", "epoch", ")", "\n", "\n", "# validation", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_search.train": [[196, 248], ["optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "enumerate", "model.train", "input.cuda.size", "input.cuda.cuda", "target.cuda.cuda", "next", "input_search.cuda.cuda", "target_search.cuda.cuda", "architect.step", "optimizer.zero_grad", "architect.optimizer.zero_grad", "model.softmax_arch_parameters", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "model.restore_arch_parameters", "optimizers.accuracy", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "iter", "perturb_alpha", "optimizer.zero_grad", "architect.optimizer.zero_grad", "model.parameters", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.softmax_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.restore_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["logging", ".", "info", "(", "'valid_acc %f'", ",", "valid_acc", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/valid'", ",", "valid_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/valid'", ",", "valid_obj", ",", "epoch", ")", "\n", "\n", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "\n", "if", "not", "'debug'", "in", "args", ".", "save", ":", "\n", "# benchmark", "\n", "            ", "logging", ".", "info", "(", "'STARTING EVALUATION'", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "naseval", ".", "eval_one_shot_model", "(", "\n", "config", "=", "args", ".", "__dict__", ",", "model", "=", "arch_filename", ")", "\n", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "3", ")", ")", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "np", ".", "mean", "(", "test", ")", ",", "np", ".", "mean", "(", "valid", ")", ",", "np", ".", "mean", "(", "runtime", ")", ",", "np", ".", "mean", "(", "params", ")", "\n", "logging", ".", "info", "(", "'TEST ERROR: %.3f | VALID ERROR: %.3f | RUNTIME: %f | PARAMS: %d'", "\n", "%", "(", "test", ",", "valid", ",", "runtime", ",", "params", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/test'", ",", "test", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/valid'", ",", "valid", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/runtime'", ",", "runtime", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/params'", ",", "params", ",", "epoch", ")", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# get a minibatch from the search queue with replacement", "\n", "try", ":", "\n", "            ", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "", "except", ":", "\n", "            ", "valid_queue_iter", "=", "iter", "(", "valid_queue", ")", "\n", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "\n", "", "input_search", "=", "input_search", ".", "cuda", "(", ")", "\n", "target_search", "=", "target_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Allow for warm starting of the one-shot model for more reliable architecture updates.", "\n", "if", "epoch", ">=", "args", ".", "warm_start_epochs", ":", "\n", "            ", "architect", ".", "step", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "lr", ",", "optimizer", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "binarization", "(", ")", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_search.infer": [[250, 276], ["optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "model", "criterion", "optimizers.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["loss", ".", "backward", "(", ")", "\n", "model", ".", "restore", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "clip", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "                ", "break", "\n", "\n", "# analyze", "\n", "", "", "", "_data_loader", "=", "deepcopy", "(", "train_queue", ")", "\n", "input", ",", "target", "=", "next", "(", "iter", "(", "_data_loader", ")", ")", "\n", "\n", "input", "=", "Variable", "(", "input", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "model", ".", "binarization", "(", ")", "\n", "H", "=", "analyzer", ".", "compute_Hw", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "\n", "lr", ",", "optimizer", ",", "False", ")", "\n", "model", ".", "restore", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model.Cell.__init__": [[12, 29], ["torch.Module.__init__", "print", "ReLUConvBN", "model.Cell._compile", "FactorizedReduce", "ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model.Cell._compile"], ["\n", "\n", "class", "DARTSCell", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ",", "ninp", ",", "nhid", ",", "dropouth", ",", "dropoutx", ",", "genotype", ")", ":", "\n", "    ", "super", "(", "DARTSCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nhid", "=", "nhid", "\n", "self", ".", "dropouth", "=", "dropouth", "\n", "self", ".", "dropoutx", "=", "dropoutx", "\n", "self", ".", "genotype", "=", "genotype", "\n", "\n", "# genotype is None when doing arch search", "\n", "steps", "=", "len", "(", "self", ".", "genotype", ".", "recurrent", ")", "if", "self", ".", "genotype", "is", "not", "None", "else", "STEPS", "\n", "self", ".", "_W0", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "ninp", "+", "nhid", ",", "2", "*", "nhid", ")", ".", "uniform_", "(", "-", "INITRANGE", ",", "INITRANGE", ")", ")", "\n", "self", ".", "_Ws", "=", "nn", ".", "ParameterList", "(", "[", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "nhid", ",", "2", "*", "nhid", ")", ".", "uniform_", "(", "-", "INITRANGE", ",", "INITRANGE", ")", ")", "for", "i", "in", "range", "(", "steps", ")", "\n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model.Cell._compile": [[30, 42], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden", ",", "updateType", "=", "'alpha'", ")", ":", "\n", "    ", "T", ",", "B", "=", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "      ", "x_mask", "=", "mask2d", "(", "B", ",", "inputs", ".", "size", "(", "2", ")", ",", "keep_prob", "=", "1.", "-", "self", ".", "dropoutx", ")", "\n", "h_mask", "=", "mask2d", "(", "B", ",", "hidden", ".", "size", "(", "2", ")", ",", "keep_prob", "=", "1.", "-", "self", ".", "dropouth", ")", "\n", "", "else", ":", "\n", "      ", "x_mask", "=", "h_mask", "=", "None", "\n", "\n", "", "hidden", "=", "hidden", "[", "0", "]", "\n", "hiddens", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "      ", "hidden", "=", "self", ".", "cell", "(", "inputs", "[", "t", "]", ",", "hidden", ",", "x_mask", ",", "h_mask", ",", "updateType", "=", "updateType", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model.Cell.forward": [[43, 63], ["model.Cell.preprocess0", "model.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op1", "op2", "isinstance", "optimizers.darts.utils.drop_path", "isinstance", "optimizers.darts.utils.drop_path"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.drop_path", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.drop_path"], ["hiddens", ".", "append", "(", "hidden", ")", "\n", "", "hiddens", "=", "torch", ".", "stack", "(", "hiddens", ")", "\n", "return", "hiddens", ",", "hiddens", "[", "-", "1", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "def", "_compute_init_state", "(", "self", ",", "x", ",", "h_prev", ",", "x_mask", ",", "h_mask", ")", ":", "\n", "    ", "if", "self", ".", "training", ":", "\n", "      ", "xh_prev", "=", "torch", ".", "cat", "(", "[", "x", "*", "x_mask", ",", "h_prev", "*", "h_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "      ", "xh_prev", "=", "torch", ".", "cat", "(", "[", "x", ",", "h_prev", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "c0", ",", "h0", "=", "torch", ".", "split", "(", "xh_prev", ".", "mm", "(", "self", ".", "_W0", ")", ",", "self", ".", "nhid", ",", "dim", "=", "-", "1", ")", "\n", "c0", "=", "c0", ".", "sigmoid", "(", ")", "\n", "h0", "=", "h0", ".", "tanh", "(", ")", "\n", "s0", "=", "h_prev", "+", "c0", "*", "(", "h0", "-", "h_prev", ")", "\n", "return", "s0", "\n", "\n", "", "def", "_get_activation", "(", "self", ",", "name", ")", ":", "\n", "    ", "if", "name", "==", "'tanh'", ":", "\n", "      ", "f", "=", "F", ".", "tanh", "\n", "", "elif", "name", "==", "'relu'", ":", "\n", "      ", "f", "=", "F", ".", "relu", "\n", "", "elif", "name", "==", "'sigmoid'", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model.AuxiliaryHead.__init__": [[67, 82], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["", "else", ":", "\n", "      ", "raise", "NotImplementedError", "\n", "", "return", "f", "\n", "\n", "", "def", "cell", "(", "self", ",", "x", ",", "h_prev", ",", "x_mask", ",", "h_mask", ",", "updateType", ")", ":", "\n", "    ", "s0", "=", "self", ".", "_compute_init_state", "(", "x", ",", "h_prev", ",", "x_mask", ",", "h_mask", ")", "\n", "\n", "states", "=", "[", "s0", "]", "\n", "for", "i", ",", "(", "name", ",", "pred", ")", "in", "enumerate", "(", "self", ".", "genotype", ".", "recurrent", ")", ":", "\n", "      ", "s_prev", "=", "states", "[", "pred", "]", "\n", "if", "self", ".", "training", ":", "\n", "        ", "ch", "=", "(", "s_prev", "*", "h_mask", ")", ".", "mm", "(", "self", ".", "_Ws", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "        ", "ch", "=", "s_prev", ".", "mm", "(", "self", ".", "_Ws", "[", "i", "]", ")", "\n", "", "c", ",", "h", "=", "torch", ".", "split", "(", "ch", ",", "self", ".", "nhid", ",", "dim", "=", "-", "1", ")", "\n", "c", "=", "c", ".", "sigmoid", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model.AuxiliaryHead.forward": [[83, 87], ["model.AuxiliaryHead.features", "model.AuxiliaryHead.classifier", "model.AuxiliaryHead.view", "model.AuxiliaryHead.size"], "methods", ["None"], ["fn", "=", "self", ".", "_get_activation", "(", "name", ")", "\n", "h", "=", "fn", "(", "h", ")", "\n", "s", "=", "s_prev", "+", "c", "*", "(", "h", "-", "s_prev", ")", "\n", "states", "+=", "[", "s", "]", "\n", "", "output", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "genotype", ".", "concat", "]", ",", "-", "1", ")", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model.Network.__init__": [[91, 123], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHead"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["", "", "class", "RNNModel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Container module with an encoder, a recurrent module, and a decoder.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "ntoken", ",", "ninp", ",", "nhid", ",", "nhidlast", ",", "\n", "dropout", "=", "0.5", ",", "dropouth", "=", "0.5", ",", "dropoutx", "=", "0.5", ",", "dropouti", "=", "0.5", ",", "dropoute", "=", "0.1", ",", "\n", "cell_cls", "=", "DARTSCell", ",", "genotype", "=", "None", ")", ":", "\n", "        ", "super", "(", "RNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lockdrop", "=", "LockedDropout", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Embedding", "(", "ntoken", ",", "ninp", ")", "\n", "\n", "assert", "ninp", "==", "nhid", "==", "nhidlast", "\n", "if", "cell_cls", "==", "DARTSCell", ":", "\n", "            ", "assert", "genotype", "is", "not", "None", "\n", "self", ".", "rnns", "=", "[", "cell_cls", "(", "ninp", ",", "nhid", ",", "dropouth", ",", "dropoutx", ",", "genotype", ")", "]", "\n", "", "else", ":", "\n", "            ", "assert", "genotype", "is", "None", "\n", "self", ".", "rnns", "=", "[", "cell_cls", "(", "ninp", ",", "nhid", ",", "dropouth", ",", "dropoutx", ")", "]", "\n", "\n", "", "self", ".", "rnns", "=", "torch", ".", "nn", ".", "ModuleList", "(", "self", ".", "rnns", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "ninp", ",", "ntoken", ")", "\n", "self", ".", "decoder", ".", "weight", "=", "self", ".", "encoder", ".", "weight", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "ninp", "=", "ninp", "\n", "self", ".", "nhid", "=", "nhid", "\n", "self", ".", "nhidlast", "=", "nhidlast", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropouti", "=", "dropouti", "\n", "self", ".", "dropoute", "=", "dropoute", "\n", "self", ".", "ntoken", "=", "ntoken", "\n", "self", ".", "cell_cls", "=", "cell_cls", "\n", "\n", "", "def", "init_weights", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model.Network.forward": [[124, 135], ["model.Network.stem", "enumerate", "model.Network.global_pooling", "model.Network.classifier", "model.Network.view", "cell", "model.Network.size", "model.Network.auxiliary_head"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell.cell"], ["        ", "self", ".", "encoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "INITRANGE", ",", "INITRANGE", ")", "\n", "self", ".", "decoder", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "decoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "INITRANGE", ",", "INITRANGE", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "hidden", ",", "return_h", "=", "False", ",", "updateType", "=", "'alpha'", ")", ":", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "1", ")", "\n", "\n", "emb", "=", "embedded_dropout", "(", "self", ".", "encoder", ",", "input", ",", "dropout", "=", "self", ".", "dropoute", "if", "self", ".", "training", "else", "0", ")", "\n", "emb", "=", "self", ".", "lockdrop", "(", "emb", ",", "self", ".", "dropouti", ")", "\n", "\n", "raw_output", "=", "emb", "\n", "new_hidden", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.visualize.plot": [[6, 40], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "range", "range", "graphviz.Digraph.node", "range", "graphviz.Digraph.render", "len", "graphviz.Digraph.node", "graphviz.Digraph.edge", "dict", "dict", "len", "str", "str", "graphviz.Digraph.edge", "str", "str"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node"], ["def", "plot", "(", "genotype", ",", "filename", ")", ":", "\n", "  ", "g", "=", "Digraph", "(", "\n", "format", "=", "'pdf'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'20'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'center'", ",", "fontsize", "=", "'20'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "g", ".", "node", "(", "\"x_{t}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"h_{t-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"0\"", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "g", ".", "edge", "(", "\"x_{t}\"", ",", "\"0\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "g", ".", "edge", "(", "\"h_{t-1}\"", ",", "\"0\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "steps", "=", "len", "(", "genotype", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "steps", "+", "1", ")", ":", "\n", "    ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "i", ",", "(", "op", ",", "j", ")", "in", "enumerate", "(", "genotype", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "j", ")", ",", "str", "(", "i", "+", "1", ")", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "g", ".", "node", "(", "\"h_{t}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "steps", "+", "1", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"h_{t}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "g", ".", "render", "(", "filename", ",", "view", "=", "False", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "  ", "if", "len", "(", "sys", ".", "argv", ")", "!=", "2", ":", "\n", "    ", "print", "(", "\"usage:\\n python {} ARCH_NAME\"", ".", "format", "(", "sys", ".", "argv", "[", "0", "]", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "genotype_name", "=", "sys", ".", "argv", "[", "1", "]", "\n", "try", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.MixedOpPCDARTS.__init__": [[28, 37], ["sota.cnn.model_search.MixedOp.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "model_search_pcdarts.MixedOpPCDARTS._ops.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "stride", ",", "PRIMITIVES", ")", ":", "\n", "        ", "super", "(", "MixedOpPCDARTS", ",", "self", ")", ".", "__init__", "(", "C", ",", "stride", ",", "PRIMITIVES", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mp", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "for", "primitive", "in", "PRIMITIVES", ":", "\n", "            ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", "//", "4", ",", "stride", ",", "False", ")", "\n", "if", "'pool'", "in", "primitive", ":", "\n", "                ", "op", "=", "nn", ".", "Sequential", "(", "op", ",", "nn", ".", "BatchNorm2d", "(", "C", "//", "4", ",", "affine", "=", "False", ")", ")", "\n", "", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.MixedOpPCDARTS.forward": [[38, 53], ["sum", "model_search_pcdarts.channel_shuffle", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op", "zip", "model_search_pcdarts.MixedOpPCDARTS.mp"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.channel_shuffle"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "#channel proportion k=4", "\n", "        ", "dim_2", "=", "x", ".", "shape", "[", "1", "]", "\n", "xtemp", "=", "x", "[", ":", ",", ":", "dim_2", "//", "4", ",", ":", ",", ":", "]", "\n", "xtemp2", "=", "x", "[", ":", ",", "dim_2", "//", "4", ":", ",", ":", ",", ":", "]", "\n", "temp1", "=", "sum", "(", "w", "*", "op", "(", "xtemp", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "#reduction cell needs pooling before concat", "\n", "if", "temp1", ".", "shape", "[", "2", "]", "==", "x", ".", "shape", "[", "2", "]", ":", "\n", "            ", "ans", "=", "torch", ".", "cat", "(", "[", "temp1", ",", "xtemp2", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "ans", "=", "torch", ".", "cat", "(", "[", "temp1", ",", "self", ".", "mp", "(", "xtemp2", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "ans", "=", "channel_shuffle", "(", "ans", ",", "4", ")", "\n", "#ans = torch.cat([ans[ : ,  dim_2//4:, :, :],ans[ : , :  dim_2//4, :, :]],dim=1)", "\n", "#except channe shuffle, channel shift also works", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.CellPCDARTS.__init__": [[56, 70], ["sota.cnn.model_search.Cell.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "model_search_pcdarts.MixedOpPCDARTS", "model_search_pcdarts.CellPCDARTS._ops.append"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "        ", "super", "(", "CellPCDARTS", ",", "self", ")", ".", "__init__", "(", "steps", ",", "multiplier", ",", "\n", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "_bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "edge_index", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "                ", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOpPCDARTS", "(", "C", ",", "stride", ",", "self", ".", "primitives", "[", "edge_index", "]", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "edge_index", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.PCDARTSNetwork.__init__": [[74, 102], ["sota.cnn.model_search.Network.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "model_search_pcdarts.PCDARTSNetwork._initialize_alphas", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model_search_pcdarts.CellPCDARTS"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search.Network._initialize_alphas"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "primitives", ",", "steps", "=", "4", ",", "\n", "multiplier", "=", "4", ",", "stem_multiplier", "=", "3", ",", "drop_path_prob", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "PCDARTSNetwork", ",", "self", ")", ".", "__init__", "(", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "primitives", ",", "\n", "steps", ",", "multiplier", ",", "stem_multiplier", ",", "drop_path_prob", ")", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "CellPCDARTS", "(", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", "\n", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n", "self", ".", "_initialize_alphas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.PCDARTSNetwork.new": [[103, 110], ["PCDARTSNetwork().cuda", "zip", "PCDARTSNetwork().cuda.arch_parameters", "model_search_pcdarts.PCDARTSNetwork.arch_parameters", "x.data.copy_", "model_search_pcdarts.PCDARTSNetwork"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["", "def", "new", "(", "self", ")", ":", "\n", "        ", "model_new", "=", "PCDARTSNetwork", "(", "self", ".", "_C", ",", "self", ".", "_num_classes", ",", "self", ".", "_layers", ",", "\n", "self", ".", "_criterion", ",", "self", ".", "PRIMITIVES", ",", "\n", "drop_path_prob", "=", "self", ".", "drop_path_prob", ")", ".", "cuda", "(", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "model_new", ".", "arch_parameters", "(", ")", ",", "self", ".", "arch_parameters", "(", ")", ")", ":", "\n", "            ", "x", ".", "data", ".", "copy_", "(", "y", ".", "data", ")", "\n", "", "return", "model_new", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.model_search_pcdarts.channel_shuffle": [[10, 24], ["x.view.data.size", "x.view.view", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "x.view.view", "torch.transpose", "torch.transpose", "torch.transpose"], "function", ["None"], ["def", "channel_shuffle", "(", "x", ",", "groups", ")", ":", "\n", "    ", "batchsize", ",", "num_channels", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "\n", "channels_per_group", "=", "num_channels", "//", "groups", "\n", "\n", "# reshape", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "groups", ",", "\n", "channels_per_group", ",", "height", ",", "width", ")", "\n", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_search_pcdarts.main": [[88, 178], ["torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "sota.cnn.model_search_pcdarts.PCDARTSNetwork", "model.cuda.cuda", "logging.info", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "optimizers.darts.architect.Architect", "range", "writer.close", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "optimizers.count_parameters_in_MB", "model.cuda.parameters", "optimizers._data_transforms_cifar10", "torchvision.CIFAR10", "range", "numpy.floor", "float", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "model.cuda.genotype", "logging.info", "print", "print", "train_search_pcdarts.train", "logging.info", "writer.add_scalar", "writer.add_scalar", "train_search_pcdarts.infer", "logging.info", "writer.add_scalar", "writer.add_scalar", "optimizers.save", "optimizers._data_transforms_cifar100", "torchvision.CIFAR100", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "logging.info", "logging.info", "torch.softmax", "torch.softmax", "os.path.join", "optimizers._data_transforms_svhn", "torchvision.SVHN"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.genotype", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.infer", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.save", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar100", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_svhn"], ["", "def", "main", "(", ")", ":", "\n", "    ", "torch", ".", "set_num_threads", "(", "3", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "n_classes", ",", "args", ".", "layers", ",", "criterion", ",", "spaces_dict", "[", "args", ".", "search_space", "]", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar100", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR100", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_svhn", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "SVHN", "(", "root", "=", "args", ".", "data", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "\n", "", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", ")", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "        ", "split", "=", "args", ".", "batch_size", "\n", "num_train", "=", "2", "*", "args", ".", "batch_size", "\n", "\n", "", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ")", "\n", "\n", "architect", "=", "Architect", "(", "model", ",", "args", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "if", "args", ".", "cutout", ":", "\n", "# increase the cutout probability linearly throughout search", "\n", "            ", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", "=", "args", ".", "cutout_prob", "*", "epoch", "/", "(", "args", ".", "epochs", "-", "1", ")", "\n", "logging", ".", "info", "(", "'epoch %d lr %e cutout_prob %e'", ",", "epoch", ",", "lr", ",", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'epoch %d lr %e'", ",", "epoch", ",", "lr", ")", "\n", "\n", "", "genotype", "=", "model", ".", "genotype", "(", ")", "\n", "logging", ".", "info", "(", "'genotype = %s'", ",", "genotype", ")", "\n", "\n", "print", "(", "F", ".", "softmax", "(", "model", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", ")", "\n", "print", "(", "F", ".", "softmax", "(", "model", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "# training", "\n", "train_acc", ",", "train_obj", "=", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "optimizer", ",", "lr", ")", "\n", "logging", ".", "info", "(", "'train_acc %f'", ",", "train_acc", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/train'", ",", "train_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/train'", ",", "train_obj", ",", "epoch", ")", "\n", "\n", "# validation", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'valid_acc %f'", ",", "valid_acc", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/valid'", ",", "valid_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/valid'", ",", "valid_obj", ",", "epoch", ")", "\n", "\n", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_search_pcdarts.train": [[180, 224], ["optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "enumerate", "model.train", "input.cuda.size", "input.cuda.cuda", "target.cuda.cuda", "next", "input_search.cuda.cuda", "target_search.cuda.cuda", "architect.step", "optimizer.zero_grad", "architect.optimizer.zero_grad", "model.softmax_arch_parameters", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "model.restore_arch_parameters", "optimizers.accuracy", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "iter", "model.parameters", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.softmax_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.restore_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["", "def", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "optimizer", ",", "lr", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# get a random minibatch from the search queue with replacement", "\n", "input_search", ",", "target_search", "=", "next", "(", "iter", "(", "valid_queue", ")", ")", "\n", "input_search", "=", "input_search", ".", "cuda", "(", ")", "\n", "target_search", "=", "target_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "architect", ".", "step", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "lr", ",", "optimizer", ",", "unrolled", "=", "args", ".", "unrolled", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "architect", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# print('before softmax', model.arch_parameters())", "\n", "model", ".", "softmax_arch_parameters", "(", ")", "\n", "\n", "logits", "=", "model", "(", "input", ",", "updateType", "=", "'weight'", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "restore_arch_parameters", "(", ")", "\n", "# print('after restore', model.arch_parameters())", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.cnn.train_search_pcdarts.infer": [[226, 252], ["optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "model", "criterion", "optimizers.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.__init__": [[22, 35], ["enumerate", "isinstance", "isinstance", "type", "len", "genotypes.Structure.node_N.append", "genotypes.Structure.nodes.append", "isinstance", "isinstance", "type", "len", "len", "len", "tuple", "isinstance", "isinstance", "type", "copy.deepcopy", "len"], "methods", ["None"], ["(", "'skip_connect'", ",", "1", ")", ",", "\n", "]", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "reduce", "=", "[", "\n", "(", "'sep_conv_5x5'", ",", "1", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "0", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "0", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'sep_conv_5x5'", ",", "0", ")", ",", "\n", "(", "'skip_connect'", ",", "3", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "2", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "2", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tolist": [[36, 48], ["list", "sorted", "tuple", "genotypes.append", "filter", "len"], "methods", ["None"], ["]", ",", "\n", "reduce_concat", "=", "[", "4", ",", "5", ",", "6", "]", ",", "\n", ")", "\n", "\n", "AmoebaNet", "=", "Genotype", "(", "\n", "normal", "=", "[", "\n", "(", "'avg_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_5x5'", ",", "2", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "3", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.node": [[49, 52], ["len", "len"], "methods", ["None"], ["(", "'skip_connect'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "0", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "1", ")", ",", "\n", "]", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tostr": [[53, 60], ["strings.append"], "methods", ["None"], ["normal_concat", "=", "[", "4", ",", "5", ",", "6", "]", ",", "\n", "reduce", "=", "[", "\n", "(", "'avg_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "2", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "0", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.check_valid": [[61, 71], ["enumerate", "sums.append", "sum", "len"], "methods", ["None"], ["(", "'max_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'conv_7x1_1x7'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "5", ")", ",", "\n", "]", ",", "\n", "reduce_concat", "=", "[", "3", ",", "4", ",", "6", "]", "\n", ")", "\n", "\n", "DARTS_V1", "=", "Genotype", "(", "\n", "normal", "=", "[", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "2", ")", "]", ",", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.to_unique_str": [[72, 91], ["enumerate", "cur_node.append", "sorted", "len"], "methods", ["None"], ["reduce", "=", "[", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'max_pool_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'avg_pool_3x3'", ",", "0", ")", "]", ",", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "DARTS_V2", "=", "Genotype", "(", "\n", "normal", "=", "[", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'dil_conv_3x3'", ",", "2", ")", "]", ",", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n", "reduce", "=", "[", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'max_pool_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'max_pool_3x3'", ",", "1", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'max_pool_3x3'", ",", "1", ")", "]", ",", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n", "DARTS", "=", "DARTS_V2", "\n", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.check_valid_op": [[92, 98], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.__repr__": [[99, 101], ["genotypes.Structure.tostr"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.tostr"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.__len__": [[102, 104], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.__getitem__": [[105, 107], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.str2structure": [[108, 120], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.str2fullstructure": [[121, 137], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "list", "list", "range", "sorted", "genotypes.append", "filter", "xi.split", "tuple", "node_str.split", "len", "list.append", "xinput.split", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.Structure.gen_all": [[138, 157], ["genotypes.get_combination", "enumerate", "range", "isinstance", "isinstance", "type", "genotypes.get_combination", "tuple", "genotypes.Structure", "new_all_archs.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.get_combination", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.get_combination"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.genotypes.get_combination": [[4, 18], ["range", "combs.append", "new_combs.append"], "function", ["None"], ["\n", "PRIMITIVES", "=", "[", "\n", "'maxpool3x3'", ",", "\n", "'conv3x3-bn-relu'", ",", "\n", "'conv1x1-bn-relu'", "\n", "]", "\n", "\n", "NASNet", "=", "Genotype", "(", "\n", "normal", "=", "[", "\n", "(", "'sep_conv_5x5'", ",", "1", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_5x5'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.ReLUConvBN.__init__": [[31, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["\"\"\"NASBench OPS\"\"\"", "\n", "\n", "\n", "class", "ConvBnRelu", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Equivalent to conv_bn_relu https://github.com/google-research/nasbench/blob/master/nasbench/lib/base_ops.py#L32\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.ReLUConvBN.forward": [[39, 41], ["operations.ReLUConvBN.op"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBnRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.SepConv.__init__": [[45, 52], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "True", ",", "momentum", "=", "BN_MOMENTUM", ",", "eps", "=", "BN_EPSILON", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.SepConv.forward": [[54, 56], ["operations.SepConv.op"], "methods", ["None"], ["    ", "\"\"\"\n    Equivalent to Conv3x3BnRelu https://github.com/google-research/nasbench/blob/master/nasbench/lib/base_ops.py#L96\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.DualSepConv.__init__": [[60, 64], ["torch.Module.__init__", "operations.SepConv", "operations.SepConv"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["self", ".", "op", "=", "ConvBnRelu", "(", "C_in", "=", "channels", ",", "C_out", "=", "channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.DualSepConv.forward": [[65, 69], ["operations.DualSepConv.op_a", "operations.DualSepConv.op_b"], "methods", ["None"], ["\n", "", "", "class", "Conv1x1BnRelu", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Equivalent to Conv1x1BnRelu https://github.com/google-research/nasbench/blob/master/nasbench/lib/base_ops.py#L107\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.ResNetBasicblock.__init__": [[73, 90], ["torch.Module.__init__", "operations.ReLUConvBN", "operations.ReLUConvBN", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "operations.ReLUConvBN"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["self", ".", "op", "=", "ConvBnRelu", "(", "C_in", "=", "channels", ",", "C_out", "=", "channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n", "\n", "", "", "\"\"\"DARTS OPS\"\"\"", "\n", "\n", "\n", "class", "ReLUConvBN", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.ResNetBasicblock.extra_repr": [[91, 94], ["None"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.ResNetBasicblock.forward": [[95, 105], ["operations.ResNetBasicblock.conv_a", "operations.ResNetBasicblock.conv_b", "operations.ResNetBasicblock.downsample"], "methods", ["None"], ["\n", "", "", "class", "DilConv", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.POOLING.__init__": [[109, 118], ["torch.Module.__init__", "operations.ReLUConvBN", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n", "\n", "", "", "class", "SepConv", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.POOLING.forward": [[119, 123], ["operations.POOLING.op", "operations.POOLING.preprocess"], "methods", ["None"], ["nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.Identity.__init__": [[127, 129], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.Identity.forward": [[130, 132], ["None"], "methods", ["None"], ["\n", "", "", "class", "Identity", "(", "nn", ".", "Module", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.Zero.__init__": [[136, 142], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n", "\n", "", "", "class", "Zero", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.Zero.forward": [[143, 152], ["list", "x.new_zeros", "x.mul", "x[].mul"], "methods", ["None"], ["        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "\n", "\n", "", "", "class", "FactorizedReduce", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.Zero.extra_repr": [[153, 155], ["None"], "methods", ["None"], ["\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.FactorizedReduce.__init__": [[159, 175], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.ConstantPad2d", "torch.ConstantPad2d", "ValueError", "operations.FactorizedReduce.convs.append", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.FactorizedReduce.forward": [[176, 182], ["operations.FactorizedReduce.relu", "operations.FactorizedReduce.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.operations.FactorizedReduce.extra_repr": [[183, 185], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.examine_ranking.infer": [[28, 48], ["optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "model", "criterion", "optimizers.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", "=", "model", "(", "input", ",", "updateType", "=", "'weight'", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ",", "n", ")", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.examine_ranking.load_checkpoint": [[50, 62], ["os.path.join", "os.path.isfile", "print", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "print", "print"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.random_search_with_weight_sharing.darts_wrapper_discrete.DartsWrapper.load"], ["", "def", "load_checkpoint", "(", "model", ",", "save", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "filename", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.examine_ranking.get_accuracies": [[64, 79], ["range", "model.binarization", "examine_ranking.infer", "acc_oneshots.append", "api.query_by_arch", "nasbench201.model.distill", "acc_trues.append", "torch.randn_like", "torch.randn_like", "torch.randn_like", "acc_oneshot.item", "model.genotype"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.binarization", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.infer", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.distill", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.genotype"], ["", "def", "get_accuracies", "(", "model", ",", "api", ",", "valid_queue", ",", "criterion", ",", "num_archs", "=", "100", ")", ":", "\n", "    ", "acc_oneshots", ",", "acc_trues", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_archs", ")", ":", "\n", "        ", "if", "not", "i", "==", "0", ":", "\n", "            ", "arch", "=", "torch", ".", "randn_like", "(", "model", ".", "_arch_parameters", ")", "\n", "model", ".", "_arch_parameters", ".", "data", "=", "arch", "\n", "", "model", ".", "binarization", "(", ")", "\n", "acc_oneshot", ",", "_", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "acc_oneshots", ".", "append", "(", "acc_oneshot", ".", "item", "(", ")", ")", "\n", "\n", "result", "=", "api", ".", "query_by_arch", "(", "model", ".", "genotype", "(", ")", ")", "\n", "cifar10_train", ",", "cifar10_test", ",", "cifar100_train", ",", "cifar100_valid", ",", "cifar100_test", ",", "imagenet16_train", ",", "imagenet16_valid", ",", "imagenet16_test", "=", "distill", "(", "result", ")", "\n", "acc_trues", ".", "append", "(", "cifar10_test", ")", "\n", "", "return", "acc_oneshots", ",", "acc_trues", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.examine_ranking.get_kendalltau": [[81, 87], ["scipy.rankdata", "scipy.rankdata", "scipy.kendalltau"], "function", ["None"], ["", "def", "get_kendalltau", "(", "acc_oneshots", ",", "acc_trues", ")", ":", "\n", "    ", "rank_onehots", "=", "ss", ".", "rankdata", "(", "acc_oneshots", ",", "method", "=", "'min'", ")", "\n", "rank_trues", "=", "ss", ".", "rankdata", "(", "acc_trues", ",", "method", "=", "'min'", ")", "\n", "\n", "tau", ",", "p_value", "=", "ss", ".", "kendalltau", "(", "rank_onehots", ",", "rank_trues", ")", "\n", "return", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.examine_ranking.main": [[89, 146], ["torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "nas_201_api.NASBench201API", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "nasbench201.model.Network().cuda", "examine_ranking.load_checkpoint", "examine_ranking.get_accuracies", "examine_ranking.get_kendalltau", "print", "print", "print", "optimizers._data_transforms_cifar10", "torchvision.CIFAR10", "torchvision.CIFAR10", "optimizers._data_transforms_cifar100", "torchvision.CIFAR100", "torchvision.CIFAR100", "nasbench201.model.Network", "optimizers._data_transforms_svhn", "torchvision.SVHN", "torchvision.SVHN"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.examine_ranking.load_checkpoint", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.examine_ranking.get_accuracies", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.examine_ranking.get_kendalltau", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar100", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_svhn"], ["", "def", "main", "(", ")", ":", "\n", "    ", "torch", ".", "set_num_threads", "(", "3", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "valid_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar100", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR100", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "valid_data", "=", "dset", ".", "CIFAR100", "(", "root", "=", "args", ".", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_svhn", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "SVHN", "(", "root", "=", "args", ".", "data", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "valid_data", "=", "dset", ".", "SVHN", "(", "root", "=", "args", ".", "data", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", ")", "\n", "\n", "", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "save", "==", "'darts_0'", ":", "\n", "        ", "save", "=", "'search-baseline-20200223-215626-0-6930'", "\n", "", "elif", "args", ".", "save", "==", "'darts_1'", ":", "\n", "        ", "save", "=", "'search-baseline-20200223-215626-1-859'", "\n", "", "elif", "args", ".", "save", "==", "'random_0'", ":", "\n", "        ", "save", "=", "'search-baseline-20200223-215626-0-alpha-random-0.3-2195'", "\n", "", "elif", "args", ".", "save", "==", "'random_1'", ":", "\n", "        ", "save", "=", "'search-baseline-20200223-215626-1-alpha-random-0.3-529'", "\n", "", "elif", "args", ".", "save", "==", "'pgd_0'", ":", "\n", "        ", "save", "=", "'search-baseline-20200223-215626-0-alpha-pgd_linf-0.3-6660'", "\n", "", "elif", "args", ".", "save", "==", "'pgd_1'", ":", "\n", "        ", "save", "=", "'search-baseline-20200223-215626-1-alpha-pgd_linf-0.3-5746'", "\n", "\n", "", "save", "=", "os", ".", "path", ".", "join", "(", "\n", "'/home/xiangning/SmoothDARTS/experiments/nasbench201/cifar10'", ",", "save", ")", "\n", "\n", "api", "=", "API", "(", "'/nfs/data/xiangning/data/NAS-Bench-201-v1_0-e61699.pth'", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "model", "=", "Network", "(", "C", "=", "16", ",", "N", "=", "5", ",", "max_nodes", "=", "4", ",", "num_classes", "=", "10", ",", "criterion", "=", "criterion", ")", ".", "cuda", "(", ")", "\n", "model", "=", "load_checkpoint", "(", "model", ",", "save", ")", "\n", "\n", "acc_oneshots", ",", "acc_trues", "=", "get_accuracies", "(", "model", ",", "api", ",", "valid_queue", ",", "criterion", ",", "100", ")", "\n", "tau", "=", "get_kendalltau", "(", "acc_oneshots", ",", "acc_trues", ")", "\n", "\n", "\n", "print", "(", "acc_oneshots", "[", ":", "100", "]", ")", "\n", "print", "(", "acc_trues", "[", ":", "100", "]", ")", "\n", "print", "(", "tau", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.main": [[91, 208], ["torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "nas_201_api.NASBench201API", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "nasbench201.model.Network", "model.cuda.cuda", "logging.info", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "optimizers.darts.architect.Architect", "range", "writer.close", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "optimizers.count_parameters_in_MB", "model.cuda.get_weights", "optimizers._data_transforms_cifar10", "torchvision.CIFAR10", "range", "numpy.floor", "float", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "model.cuda.genotype", "logging.info", "model.cuda.show_alphas", "train_search.train", "logging.info", "writer.add_scalar", "writer.add_scalar", "train_search.infer", "logging.info", "writer.add_scalar", "writer.add_scalar", "nas_201_api.NASBench201API.query_by_arch", "logging.info", "nasbench201.model.distill", "writer.add_scalars", "writer.add_scalars", "writer.add_scalars", "optimizers.save_checkpoint", "optimizers._data_transforms_cifar100", "torchvision.CIFAR100", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "logging.info", "logging.info", "logging.info", "model.cuda.genotype", "optimizers._data_transforms_svhn", "torchvision.SVHN", "model.cuda.state_dict", "torch.optim.SGD.state_dict", "model.cuda.arch_parameters"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.get_weights", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.genotype", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.show_alphas", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.infer", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.distill", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.utils.save_checkpoint", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_cifar100", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.genotype", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils._data_transforms_svhn", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters"], ["CIFAR_CLASSES", "=", "10", "\n", "\n", "\n", "def", "main", "(", ")", ":", "\n", "    ", "if", "not", "'debug'", "in", "args", ".", "save", ":", "\n", "        ", "from", "nasbench_analysis", "import", "eval_darts_one_shot_model_in_nasbench", "as", "naseval", "\n", "# Select the search space to search in", "\n", "", "if", "args", ".", "search_space", "==", "'1'", ":", "\n", "        ", "search_space", "=", "SearchSpace1", "(", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'2'", ":", "\n", "        ", "search_space", "=", "SearchSpace2", "(", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'3'", ":", "\n", "        ", "search_space", "=", "SearchSpace3", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown search space'", ")", "\n", "\n", "", "torch", ".", "set_num_threads", "(", "3", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "criterion", ",", "\n", "output_weights", "=", "args", ".", "output_weights", ",", "steps", "=", "search_space", ".", "num_intermediate_nodes", ",", "\n", "search_space", "=", "search_space", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "\n", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "if", "'debug'", "in", "args", ".", "save", ":", "\n", "        ", "split", "=", "args", ".", "batch_size", "\n", "num_train", "=", "2", "*", "args", ".", "batch_size", "\n", "\n", "", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ")", "\n", "\n", "analyzer", "=", "Analyzer", "(", "model", ",", "args", ")", "\n", "architect", "=", "Architect", "(", "model", ",", "args", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# increase the cutout probability linearly throughout search", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", "=", "args", ".", "cutout_prob", "*", "epoch", "/", "(", "args", ".", "epochs", "-", "1", ")", "\n", "logging", ".", "info", "(", "'epoch %d lr %e cutout_prob %e'", ",", "epoch", ",", "lr", ",", "\n", "train_transform", ".", "transforms", "[", "-", "1", "]", ".", "cutout_prob", ")", "\n", "\n", "# Save the one shot model architecture weights for later analysis", "\n", "arch_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'one_shot_architecture_{}.obj'", ".", "format", "(", "epoch", ")", ")", "\n", "with", "open", "(", "arch_filename", ",", "'wb'", ")", "as", "filehandler", ":", "\n", "            ", "numpy_tensor_list", "=", "[", "]", "\n", "for", "tensor", "in", "model", ".", "arch_parameters", "(", ")", ":", "\n", "                ", "numpy_tensor_list", ".", "append", "(", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "pickle", ".", "dump", "(", "numpy_tensor_list", ",", "filehandler", ")", "\n", "\n", "# # Save the entire one-shot-model", "\n", "# filepath = os.path.join(args.save, 'one_shot_model_{}.obj'.format(epoch))", "\n", "# torch.save(model.state_dict(), filepath)", "\n", "\n", "", "for", "i", "in", "numpy_tensor_list", ":", "\n", "            ", "print", "(", "i", ")", "\n", "\n", "# training", "\n", "", "train_acc", ",", "train_obj", ",", "ev", "=", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "\n", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", "\n", "logging", ".", "info", "(", "'train_acc %f'", ",", "train_acc", ")", "\n", "logging", ".", "info", "(", "'eigenvalue %f'", ",", "ev", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/train'", ",", "train_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/train'", ",", "train_obj", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/eigenvalue'", ",", "ev", ",", "epoch", ")", "\n", "\n", "# validation", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'valid_acc %f'", ",", "valid_acc", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/valid'", ",", "valid_acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Obj/valid'", ",", "valid_obj", ",", "epoch", ")", "\n", "\n", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "\n", "if", "not", "'debug'", "in", "args", ".", "save", ":", "\n", "# benchmark", "\n", "            ", "logging", ".", "info", "(", "'STARTING EVALUATION'", ")", "\n", "test", ",", "valid", ",", "runtime", ",", "params", "=", "naseval", ".", "eval_one_shot_model", "(", "\n", "config", "=", "args", ".", "__dict__", ",", "model", "=", "arch_filename", ")", "\n", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "3", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train": [[210, 262], ["optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "enumerate", "model.train", "input.cuda.size", "input.cuda.cuda", "target.cuda.cuda", "next", "input_search.cuda.cuda", "target_search.cuda.cuda", "architect.step", "optimizer.zero_grad", "architect.optimizer.zero_grad", "model.softmax_arch_parameters", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "model.restore_arch_parameters", "optimizers.accuracy", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "iter", "perturb_alpha", "optimizer.zero_grad", "architect.optimizer.zero_grad", "model.parameters", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.train", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.softmax_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.architect.Architect.step", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.restore_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["logging", ".", "info", "(", "'TEST ERROR: %.3f | VALID ERROR: %.3f | RUNTIME: %f | PARAMS: %d'", "\n", "%", "(", "test", ",", "valid", ",", "runtime", ",", "params", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/test'", ",", "test", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/valid'", ",", "valid", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/runtime'", ",", "runtime", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Analysis/params'", ",", "params", ",", "epoch", ")", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "optimizer", ",", "lr", ",", "epoch", ",", "analyzer", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# get a minibatch from the search queue with replacement", "\n", "try", ":", "\n", "            ", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "", "except", ":", "\n", "            ", "valid_queue_iter", "=", "iter", "(", "valid_queue", ")", "\n", "input_search", ",", "target_search", "=", "next", "(", "valid_queue_iter", ")", "\n", "\n", "", "input_search", "=", "input_search", ".", "cuda", "(", ")", "\n", "target_search", "=", "target_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Allow for warm starting of the one-shot model for more reliable architecture updates.", "\n", "if", "epoch", ">=", "args", ".", "warm_start_epochs", ":", "\n", "            ", "architect", ".", "step", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "lr", ",", "optimizer", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "binarization", "(", ")", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "model", ".", "restore", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "clip", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.train_search.infer": [[264, 290], ["optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "optimizers.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "model", "criterion", "optimizers.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "logging.info"], "function", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.accuracy", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.darts.utils.AvgrageMeter.update"], ["                ", "break", "\n", "\n", "# analyze", "\n", "", "", "", "_data_loader", "=", "deepcopy", "(", "train_queue", ")", "\n", "input", ",", "target", "=", "next", "(", "iter", "(", "_data_loader", ")", ")", "\n", "\n", "input", "=", "Variable", "(", "input", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "model", ".", "binarization", "(", ")", "\n", "H", "=", "analyzer", ".", "compute_Hw", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "\n", "lr", ",", "optimizer", ",", "False", ")", "\n", "model", ".", "restore", "(", ")", "\n", "# g = analyzer.compute_dw(input, target, input_search, target_search,", "\n", "#                         lr, optimizer, False)", "\n", "# g = torch.cat([x.view(-1) for x in g])", "\n", "\n", "del", "_data_loader", "\n", "\n", "ev", "=", "max", "(", "LA", ".", "eigvals", "(", "H", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", ")", "\n", "ev", "=", "np", ".", "linalg", ".", "norm", "(", "ev", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "objs", ".", "avg", ",", "ev", "\n", "\n", "\n", "", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.SearchCell.__init__": [[17, 36], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.SearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["    ", "super", "(", "DARTSCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nhid", "=", "nhid", "\n", "self", ".", "dropouth", "=", "dropouth", "\n", "self", ".", "dropoutx", "=", "dropoutx", "\n", "self", ".", "genotype", "=", "genotype", "\n", "\n", "# genotype is None when doing arch search", "\n", "steps", "=", "len", "(", "self", ".", "genotype", ".", "recurrent", ")", "if", "self", ".", "genotype", "is", "not", "None", "else", "STEPS", "\n", "self", ".", "_W0", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "ninp", "+", "nhid", ",", "2", "*", "nhid", ")", ".", "uniform_", "(", "-", "INITRANGE", ",", "INITRANGE", ")", ")", "\n", "self", ".", "_Ws", "=", "nn", ".", "ParameterList", "(", "[", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "nhid", ",", "2", "*", "nhid", ")", ".", "uniform_", "(", "-", "INITRANGE", ",", "INITRANGE", ")", ")", "for", "i", "in", "range", "(", "steps", ")", "\n", "]", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "hidden", ",", "updateType", "=", "'alpha'", ")", ":", "\n", "    ", "T", ",", "B", "=", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "      ", "x_mask", "=", "mask2d", "(", "B", ",", "inputs", ".", "size", "(", "2", ")", ",", "keep_prob", "=", "1.", "-", "self", ".", "dropoutx", ")", "\n", "h_mask", "=", "mask2d", "(", "B", ",", "hidden", ".", "size", "(", "2", ")", ",", "keep_prob", "=", "1.", "-", "self", ".", "dropouth", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.SearchCell.extra_repr": [[37, 40], ["None"], "methods", ["None"], ["      ", "x_mask", "=", "h_mask", "=", "None", "\n", "\n", "", "hidden", "=", "hidden", "[", "0", "]", "\n", "hiddens", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.SearchCell.forward": [[41, 51], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "sum", "layer", "zip"], "methods", ["None"], ["for", "t", "in", "range", "(", "T", ")", ":", "\n", "      ", "hidden", "=", "self", ".", "cell", "(", "inputs", "[", "t", "]", ",", "hidden", ",", "x_mask", ",", "h_mask", ",", "updateType", "=", "updateType", ")", "\n", "hiddens", ".", "append", "(", "hidden", ")", "\n", "", "hiddens", "=", "torch", ".", "stack", "(", "hiddens", ")", "\n", "return", "hiddens", ",", "hiddens", "[", "-", "1", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "def", "_compute_init_state", "(", "self", ",", "x", ",", "h_prev", ",", "x_mask", ",", "h_mask", ")", ":", "\n", "    ", "if", "self", ".", "training", ":", "\n", "      ", "xh_prev", "=", "torch", ".", "cat", "(", "[", "x", "*", "x_mask", ",", "h_prev", "*", "h_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "      ", "xh_prev", "=", "torch", ".", "cat", "(", "[", "x", ",", "h_prev", "]", ",", "dim", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.SearchCell.forward_gdas": [[53, 65], ["range", "range", "nodes.append", "index[].item", "sum", "inter_nodes.append", "sum", "enumerate", "edge"], "methods", ["None"], ["c0", "=", "c0", ".", "sigmoid", "(", ")", "\n", "h0", "=", "h0", ".", "tanh", "(", ")", "\n", "s0", "=", "h_prev", "+", "c0", "*", "(", "h0", "-", "h_prev", ")", "\n", "return", "s0", "\n", "\n", "", "def", "_get_activation", "(", "self", ",", "name", ")", ":", "\n", "    ", "if", "name", "==", "'tanh'", ":", "\n", "      ", "f", "=", "F", ".", "tanh", "\n", "", "elif", "name", "==", "'relu'", ":", "\n", "      ", "f", "=", "F", ".", "relu", "\n", "", "elif", "name", "==", "'sigmoid'", ":", "\n", "      ", "f", "=", "F", ".", "sigmoid", "\n", "", "elif", "name", "==", "'identity'", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.SearchCell.forward_joint": [[67, 79], ["range", "range", "nodes.append", "sum", "inter_nodes.append", "sum", "layer", "zip"], "methods", ["None"], ["", "else", ":", "\n", "      ", "raise", "NotImplementedError", "\n", "", "return", "f", "\n", "\n", "", "def", "cell", "(", "self", ",", "x", ",", "h_prev", ",", "x_mask", ",", "h_mask", ",", "updateType", ")", ":", "\n", "    ", "s0", "=", "self", ".", "_compute_init_state", "(", "x", ",", "h_prev", ",", "x_mask", ",", "h_mask", ")", "\n", "\n", "states", "=", "[", "s0", "]", "\n", "for", "i", ",", "(", "name", ",", "pred", ")", "in", "enumerate", "(", "self", ".", "genotype", ".", "recurrent", ")", ":", "\n", "      ", "s_prev", "=", "states", "[", "pred", "]", "\n", "if", "self", ".", "training", ":", "\n", "        ", "ch", "=", "(", "s_prev", "*", "h_mask", ")", ".", "mm", "(", "self", ".", "_Ws", "[", "i", "]", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.SearchCell.forward_urs": [[81, 98], ["range", "enumerate", "nodes.append", "range", "inter_nodes.append", "sum", "random.choice", "sops.append", "random.choice.", "hasattr"], "methods", ["None"], ["", "c", ",", "h", "=", "torch", ".", "split", "(", "ch", ",", "self", ".", "nhid", ",", "dim", "=", "-", "1", ")", "\n", "c", "=", "c", ".", "sigmoid", "(", ")", "\n", "fn", "=", "self", ".", "_get_activation", "(", "name", ")", "\n", "h", "=", "fn", "(", "h", ")", "\n", "s", "=", "s_prev", "+", "c", "*", "(", "h", "-", "s_prev", ")", "\n", "states", "+=", "[", "s", "]", "\n", "", "output", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "genotype", ".", "concat", "]", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "return", "output", "\n", "\n", "\n", "", "", "class", "RNNModel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Container module with an encoder, a recurrent module, and a decoder.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "ntoken", ",", "ninp", ",", "nhid", ",", "nhidlast", ",", "\n", "dropout", "=", "0.5", ",", "dropouth", "=", "0.5", ",", "dropoutx", "=", "0.5", ",", "dropouti", "=", "0.5", ",", "dropoute", "=", "0.1", ",", "\n", "cell_cls", "=", "DARTSCell", ",", "genotype", "=", "None", ")", ":", "\n", "        ", "super", "(", "RNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lockdrop", "=", "LockedDropout", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.SearchCell.forward_select": [[100, 111], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "weights.argmax().item", "weights.argmax"], "methods", ["None"], ["\n", "assert", "ninp", "==", "nhid", "==", "nhidlast", "\n", "if", "cell_cls", "==", "DARTSCell", ":", "\n", "            ", "assert", "genotype", "is", "not", "None", "\n", "self", ".", "rnns", "=", "[", "cell_cls", "(", "ninp", ",", "nhid", ",", "dropouth", ",", "dropoutx", ",", "genotype", ")", "]", "\n", "", "else", ":", "\n", "            ", "assert", "genotype", "is", "None", "\n", "self", ".", "rnns", "=", "[", "cell_cls", "(", "ninp", ",", "nhid", ",", "dropouth", ",", "dropoutx", ")", "]", "\n", "\n", "", "self", ".", "rnns", "=", "torch", ".", "nn", ".", "ModuleList", "(", "self", ".", "rnns", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "ninp", ",", "ntoken", ")", "\n", "self", ".", "decoder", ".", "weight", "=", "self", ".", "encoder", ".", "weight", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.SearchCell.forward_dynamic": [[113, 124], ["range", "nodes.append", "model.SearchCell.op_names.index", "inter_nodes.append", "sum"], "methods", ["None"], ["\n", "self", ".", "ninp", "=", "ninp", "\n", "self", ".", "nhid", "=", "nhid", "\n", "self", ".", "nhidlast", "=", "nhidlast", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropouti", "=", "dropouti", "\n", "self", ".", "dropoute", "=", "dropoute", "\n", "self", ".", "ntoken", "=", "ntoken", "\n", "self", ".", "cell_cls", "=", "cell_cls", "\n", "\n", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "encoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "INITRANGE", ",", "INITRANGE", ")", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__": [[128, 159], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "model.Network.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "nasbench201.operations.ResNetBasicblock", "model.SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.__init__"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden", ",", "return_h", "=", "False", ",", "updateType", "=", "'alpha'", ")", ":", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "1", ")", "\n", "\n", "emb", "=", "embedded_dropout", "(", "self", ".", "encoder", ",", "input", ",", "dropout", "=", "self", ".", "dropoute", "if", "self", ".", "training", "else", "0", ")", "\n", "emb", "=", "self", ".", "lockdrop", "(", "emb", ",", "self", ".", "dropouti", ")", "\n", "\n", "raw_output", "=", "emb", "\n", "new_hidden", "=", "[", "]", "\n", "raw_outputs", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "for", "l", ",", "rnn", "in", "enumerate", "(", "self", ".", "rnns", ")", ":", "\n", "            ", "current_input", "=", "raw_output", "\n", "raw_output", ",", "new_h", "=", "rnn", "(", "raw_output", ",", "hidden", "[", "l", "]", ",", "updateType", "=", "updateType", ")", "\n", "new_hidden", ".", "append", "(", "new_h", ")", "\n", "raw_outputs", ".", "append", "(", "raw_output", ")", "\n", "", "hidden", "=", "new_hidden", "\n", "\n", "output", "=", "self", ".", "lockdrop", "(", "raw_output", ",", "self", ".", "dropout", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "\n", "logit", "=", "self", ".", "decoder", "(", "output", ".", "view", "(", "-", "1", ",", "self", ".", "ninp", ")", ")", "\n", "log_prob", "=", "nn", ".", "functional", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", "\n", "model_output", "=", "log_prob", "\n", "model_output", "=", "model_output", ".", "view", "(", "-", "1", ",", "batch_size", ",", "self", ".", "ntoken", ")", "\n", "\n", "if", "return_h", ":", "\n", "            ", "return", "model_output", ",", "hidden", ",", "raw_outputs", ",", "outputs", "\n", "", "return", "model_output", ",", "hidden", "\n", "\n", "", "def", "init_hidden", "(", "self", ",", "bsz", ")", ":", "\n", "      ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "data", "\n", "return", "[", "Variable", "(", "weight", ".", "new", "(", "1", ",", "bsz", ",", "self", ".", "nhid", ")", ".", "zero_", "(", ")", ")", "]", "\n"]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.get_weights": [[160, 165], ["list", "list", "list", "list", "list", "model.Network.classifier.parameters", "model.Network.stem.parameters", "model.Network.cells.parameters", "model.Network.lastact.parameters", "model.Network.global_pooling.parameters"], "methods", ["None"], ["\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.arch_parameters": [[166, 168], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.show_alphas": [[169, 172], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.get_message": [[173, 178], ["model.Network.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.extra_repr", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.extra_repr"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.extra_repr": [[179, 181], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.genotype": [[182, 194], ["range", "nasbench201.genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._loss": [[195, 198], ["model.Network.", "model.Network._criterion"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.binarization": [[199, 204], ["model.Network._save_arch_parameters", "model.Network._arch_parameters.size", "model.Network._arch_parameters.data.cpu().numpy().argmax", "model.Network.proximal_step", "model.Network._arch_parameters.data.cpu().numpy", "model.Network._arch_parameters.data.cpu"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._save_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.proximal_step"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.proximal_step": [[205, 217], ["var.data.cpu().numpy", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "range", "var.data.cpu", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "alphas.append", "[].copy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._save_arch_parameters": [[218, 220], ["model.Network._arch_parameters.clone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.softmax_arch_parameters": [[221, 224], ["model.Network._save_arch_parameters", "model.Network._arch_parameters.data.copy_", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network._save_arch_parameters", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.restore_arch_parameters": [[225, 228], ["model.Network._arch_parameters.data.copy_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.clip": [[229, 236], ["line.argmax", "line.data.clamp_", "line.data.div_", "line.sum", "line.sum"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.Network.forward": [[237, 256], ["model.Network.stem", "enumerate", "model.Network.lastact", "model.Network.global_pooling", "out.view.view.view", "model.Network.classifier", "torch.softmax", "torch.softmax", "torch.softmax", "isinstance", "out.view.view.size", "cell", "cell"], "methods", ["home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench_analysis.eval_darts_one_shot_model_in_nasbench.softmax", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell.cell", "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.rnn.model.DARTSCell.cell"], []], "home.repos.pwc.inspect_result.xiangning-chen_SmoothDARTS.nasbench201.model.distill": [[258, 275], ["result.split.split", "result[].replace().split", "result[].replace().split", "result[].replace().split", "float", "float", "float", "float", "float", "float", "float", "float", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "result[].replace", "result[].replace", "result[].replace", "cifar10[].strip", "cifar100[].strip", "cifar100[].strip", "imagenet16[].strip", "imagenet16[].strip"], "function", ["None"], []]}