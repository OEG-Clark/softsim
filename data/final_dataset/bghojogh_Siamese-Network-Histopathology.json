{"home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.Utils.normalize_triplets": [[7, 13], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast"], "function", ["None"], ["def", "normalize_triplets", "(", "image_anchor", ",", "image_neighbor", ",", "image_distant", ",", "type_anchor", ",", "type_neighbor", ",", "type_distant", ",", "subtype_anchor", ",", "subtype_neighbor", ",", "subtype_distant", ")", ":", "\n", "\n", "    ", "image_anchor", "=", "tf", ".", "cast", "(", "image_anchor", ",", "tf", ".", "float32", ")", "*", "(", "1.", "/", "255", ")", "-", "0.5", "\n", "image_neighbor", "=", "tf", ".", "cast", "(", "image_neighbor", ",", "tf", ".", "float32", ")", "*", "(", "1.", "/", "255", ")", "-", "0.5", "\n", "image_distant", "=", "tf", ".", "cast", "(", "image_distant", ",", "tf", ".", "float32", ")", "*", "(", "1.", "/", "255", ")", "-", "0.5", "\n", "return", "image_anchor", ",", "image_neighbor", ",", "image_distant", ",", "type_anchor", ",", "type_neighbor", ",", "type_distant", ",", "subtype_anchor", ",", "subtype_neighbor", ",", "subtype_distant", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.Utils.parse_function": [[14, 54], ["tensorflow.io.parse_single_example", "tensorflow.compat.v1.decode_raw", "tensorflow.compat.v1.decode_raw", "tensorflow.compat.v1.decode_raw", "tf.compat.v1.decode_raw.set_shape", "tf.compat.v1.decode_raw.set_shape", "tf.compat.v1.decode_raw.set_shape", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature"], "function", ["None"], ["", "def", "parse_function", "(", "serialized", ")", ":", "\n", "    ", "IMAGE_SIZE", "=", "128", "\n", "IMAGE_PIXELS", "=", "IMAGE_SIZE", "*", "IMAGE_SIZE", "\n", "\n", "features", "=", "{", "\n", "'image_anchor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'image_neighbor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'image_distant'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'type_anchor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'type_neighbor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'type_distant'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'subtype_anchor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'subtype_neighbor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'subtype_distant'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", "\n", "}", "\n", "\n", "parsed_example", "=", "tf", ".", "io", ".", "parse_single_example", "(", "serialized", "=", "serialized", ",", "\n", "features", "=", "features", ")", "\n", "\n", "# image_anchor = tf.decode_raw(parsed_example['image_anchor'], tf.uint8)", "\n", "# image_neighbor = tf.decode_raw(parsed_example['image_neighbor'], tf.uint8)", "\n", "# image_distant = tf.decode_raw(parsed_example['image_distant'], tf.uint8)", "\n", "\n", "# https://www.tensorflow.org/api_docs/python", "\n", "image_anchor", "=", "tf", ".", "compat", ".", "v1", ".", "decode_raw", "(", "parsed_example", "[", "'image_anchor'", "]", ",", "tf", ".", "uint8", ")", "\n", "image_neighbor", "=", "tf", ".", "compat", ".", "v1", ".", "decode_raw", "(", "parsed_example", "[", "'image_neighbor'", "]", ",", "tf", ".", "uint8", ")", "\n", "image_distant", "=", "tf", ".", "compat", ".", "v1", ".", "decode_raw", "(", "parsed_example", "[", "'image_distant'", "]", ",", "tf", ".", "uint8", ")", "\n", "type_anchor", "=", "parsed_example", "[", "'type_anchor'", "]", "\n", "type_neighbor", "=", "parsed_example", "[", "'type_neighbor'", "]", "\n", "type_distant", "=", "parsed_example", "[", "'type_distant'", "]", "\n", "subtype_anchor", "=", "parsed_example", "[", "'subtype_anchor'", "]", "\n", "subtype_neighbor", "=", "parsed_example", "[", "'subtype_neighbor'", "]", "\n", "subtype_distant", "=", "parsed_example", "[", "'subtype_distant'", "]", "\n", "\n", "image_anchor", ".", "set_shape", "(", "(", "IMAGE_PIXELS", ")", ")", "\n", "image_neighbor", ".", "set_shape", "(", "(", "IMAGE_PIXELS", ")", ")", "\n", "image_distant", ".", "set_shape", "(", "(", "IMAGE_PIXELS", ")", ")", "\n", "\n", "return", "image_anchor", ",", "image_neighbor", ",", "image_distant", ",", "type_anchor", ",", "type_neighbor", ",", "type_distant", ",", "subtype_anchor", ",", "subtype_neighbor", ",", "subtype_distant", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.Utils.Global_Average_Pooling": [[55, 60], ["tensorflow.layers.average_pooling2d", "np.shape", "np.shape"], "function", ["None"], ["", "def", "Global_Average_Pooling", "(", "x", ",", "stride", "=", "1", ")", ":", "\n", "        ", "width", "=", "np", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "height", "=", "np", ".", "shape", "(", "x", ")", "[", "2", "]", "\n", "pool_size", "=", "[", "width", ",", "height", "]", "\n", "return", "tf", ".", "layers", ".", "average_pooling2d", "(", "inputs", "=", "x", ",", "pool_size", "=", "pool_size", ",", "strides", "=", "stride", ")", "\n", "# The stride value does not matter", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.__init__": [[8, 40], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "ResNet_Siamese.ResNet_Siamese.loss_triplet", "tensorflow.variable_scope", "ResNet_Siamese.ResNet_Siamese.network", "ResNet_Siamese.ResNet_Siamese.network", "ResNet_Siamese.ResNet_Siamese.network", "tensorflow.variable_scope", "ResNet_Siamese.ResNet_Siamese.network"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.loss_triplet", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.network", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.network", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.network", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.network"], ["    ", "def", "__init__", "(", "self", ",", "loss_type", ",", "feature_space_dimension", ",", "n_res_blocks", "=", "18", ",", "margin_in_loss", "=", "0.25", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "128", "\n", "self", ".", "c_dim", "=", "3", "\n", "self", ".", "res_n", "=", "n_res_blocks", "\n", "self", ".", "feature_space_dimension", "=", "feature_space_dimension", "\n", "self", ".", "margin_in_loss", "=", "margin_in_loss", "\n", "\n", "self", ".", "x1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x1Image", "=", "self", ".", "x1", "\n", "self", ".", "x2", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x2Image", "=", "self", ".", "x2", "\n", "self", ".", "x3", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x3Image", "=", "self", ".", "x3", "\n", "# self.is_train = tf.placeholder(tf.int32, [1])", "\n", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "# Create loss", "\n", "if", "is_train", ":", "\n", "            ", "if", "self", ".", "loss_type", "==", "\"triplet\"", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"siamese\"", ")", "as", "scope", ":", "\n", "                    ", "self", ".", "o1", "=", "self", ".", "network", "(", "self", ".", "x1Image", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ")", "\n", "self", ".", "o2", "=", "self", ".", "network", "(", "self", ".", "x2Image", ",", "is_training", "=", "True", ",", "reuse", "=", "True", ")", "\n", "self", ".", "o3", "=", "self", ".", "network", "(", "self", ".", "x3Image", ",", "is_training", "=", "True", ",", "reuse", "=", "True", ")", "\n", "", "self", ".", "loss", "=", "self", ".", "loss_triplet", "(", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"FDA\"", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "loss_type", "==", "\"triplet\"", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"siamese\"", ")", "as", "scope", ":", "\n", "                    ", "self", ".", "o1", "=", "self", ".", "network", "(", "self", ".", "x1Image", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ")", "\n", "", "", "elif", "self", ".", "loss_type", "==", "\"FDA\"", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.save_network": [[57, 62], ["tensorflow.train.Saver", "tensorflow.train.Saver.save", "tensorflow.get_collection"], "methods", ["None"], ["", "", "", "def", "save_network", "(", "self", ",", "session_", ",", "checkpoint_dir", ")", ":", "\n", "# https://stackoverflow.com/questions/46549056/can-tensorflow-save-the-variables-in-a-certain-variable-scope", "\n", "# saver = tf.train.Saver(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, \"network\"))", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\"siamese\"", ")", ")", "\n", "saver", ".", "save", "(", "session_", ",", "checkpoint_dir", "+", "\"\\\\model.ckpt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.network": [[63, 109], ["tensorflow.variable_scope", "ops_resnet.get_residual_layer", "ops_resnet.conv", "range", "residual_block", "range", "residual_block", "range", "residual_block", "range", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.global_avg_pooling", "ops_resnet.fully_conneted", "residual_block", "residual_block", "residual_block", "residual_block", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.get_residual_layer", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.global_avg_pooling", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.fully_conneted"], ["", "def", "network", "(", "self", ",", "x", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"network\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "if", "self", ".", "res_n", "<", "50", ":", "\n", "                ", "residual_block", "=", "ops_resnet", ".", "resblock", "\n", "", "else", ":", "\n", "                ", "residual_block", "=", "ops_resnet", ".", "bottle_resblock", "\n", "\n", "", "residual_list", "=", "ops_resnet", ".", "get_residual_layer", "(", "self", ".", "res_n", ")", "\n", "\n", "ch", "=", "32", "# paper is 64", "\n", "x", "=", "ops_resnet", ".", "conv", "(", "x", ",", "channels", "=", "ch", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "scope", "=", "'conv'", ")", "\n", "\n", "for", "i", "in", "range", "(", "residual_list", "[", "0", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock0_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "2", ",", "is_training", "=", "is_training", ",", "downsample", "=", "True", ",", "scope", "=", "'resblock1_0'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "residual_list", "[", "1", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "2", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock1_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "4", ",", "is_training", "=", "is_training", ",", "downsample", "=", "True", ",", "scope", "=", "'resblock2_0'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "residual_list", "[", "2", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "4", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock2_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "8", ",", "is_training", "=", "is_training", ",", "downsample", "=", "True", ",", "scope", "=", "'resblock_3_0'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "residual_list", "[", "3", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "8", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock_3_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "\n", "", "x", "=", "ops_resnet", ".", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm'", ")", "\n", "x", "=", "ops_resnet", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "ops_resnet", ".", "global_avg_pooling", "(", "x", ")", "\n", "x", "=", "ops_resnet", ".", "fully_conneted", "(", "x", ",", "units", "=", "self", ".", "feature_space_dimension", ",", "scope", "=", "'logit'", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.loss_triplet": [[110, 118], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square"], "methods", ["None"], ["", "", "def", "loss_triplet", "(", "self", ")", ":", "\n", "        ", "d_pos", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "o1", "-", "self", ".", "o2", ")", ",", "1", ")", "\n", "d_neg", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "o1", "-", "self", ".", "o3", ")", ",", "1", ")", "\n", "\n", "loss", "=", "tf", ".", "maximum", "(", "0.", ",", "self", ".", "margin_in_loss", "+", "d_pos", "-", "d_neg", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.loss_FDA": [[119, 121], ["None"], "methods", ["None"], ["", "def", "loss_FDA", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.main.main": [[16, 36], ["main.model_dir", "main.train_source_domain", "main.train_target_domain"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.model_dir", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.train_source_domain", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.train_target_domain"], ["def", "main", "(", ")", ":", "\n", "#================================ settings:", "\n", "    ", "train_the_source_domain", "=", "False", "\n", "train_the_target_domain", "=", "True", "\n", "assert", "train_the_source_domain", "!=", "train_the_target_domain", "\n", "deep_model", "=", "\"ResNet\"", "#--> \"CNN\", \"ResNet\"", "\n", "loss_type", "=", "\"triplet\"", "#--> \"triplet\", \"FDA\"", "\n", "n_res_blocks", "=", "18", "#--> 18, 34, 50, 101, 152", "\n", "batch_size", "=", "32", "\n", "learning_rate", "=", "0.00001", "\n", "margin_in_loss", "=", "0.25", "\n", "feature_space_dimension", "=", "128", "\n", "path_save_network_model", "=", "\".\\\\network_model\\\\\"", "+", "deep_model", "+", "\"\\\\\"", "\n", "model_dir_", "=", "model_dir", "(", "model_name", "=", "deep_model", ",", "n_res_blocks", "=", "n_res_blocks", ",", "batch_size", "=", "batch_size", ",", "learning_rate", "=", "learning_rate", ")", "\n", "#================================ ", "\n", "if", "train_the_source_domain", ":", "\n", "        ", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "", "if", "train_the_target_domain", ":", "\n", "        ", "batch_size", "=", "500", "\n", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.main.train_target_domain": [[38, 57], ["Target_domain.Target_domain", "Target_domain.Target_domain.read_data_into_batches", "Target_domain.Target_domain.embed_data_in_the_source_domain", "Target_domain.Target_domain.classification_in_target_domain_different_data_portions", "CNN_Siamese.CNN_Siamese", "ResNet_Siamese.ResNet_Siamese"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.read_data_into_batches", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.embed_data_in_the_source_domain", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.classification_in_target_domain_different_data_portions"], ["", "", "def", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n", "#================================ settings:", "\n", "    ", "path_dataset_of_target_space", "=", "\"D:\\\\Datasets\\\\Kather_train_test\\\\test\"", "\n", "path_save_embeddings_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_test_set\\\\\"", "\n", "path_save_accuracy_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\accuracy_test_set\\\\\"", "\n", "proportions", "=", "[", "0.04", ",", "0.08", ",", "0.12", ",", "0.16", ",", "0.20", ",", "0.40", ",", "0.60", ",", "0.80", ",", "1", "]", "\n", "#================================ ", "\n", "# Siamese:", "\n", "loss_type", "=", "\"triplet\"", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n", "        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "False", ")", "\n", "", "target_domain", "=", "Target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ")", "\n", "batches", ",", "batches_subtypes", "=", "target_domain", ".", "read_data_into_batches", "(", "path_dataset", "=", "path_dataset_of_target_space", ")", "\n", "embedding", ",", "subtypes", "=", "target_domain", ".", "embed_data_in_the_source_domain", "(", "batches", ",", "batches_subtypes", ",", "siamese", ",", "path_save_embeddings_of_test_data", ")", "\n", "# target_domain.classification_in_target_domain(X=embedding, y=subtypes, path_save_accuracy_of_test_data=path_save_accuracy_of_test_data, cv=10)", "\n", "target_domain", ".", "classification_in_target_domain_different_data_portions", "(", "X", "=", "embedding", ",", "y", "=", "subtypes", ",", "path_save_accuracy_of_test_data", "=", "path_save_accuracy_of_test_data", ",", "\n", "proportions", "=", "proportions", ",", "cv", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.main.train_source_domain": [[59, 180], ["tensorflow.data.TFRecordDataset", "train_dataset.batch.map", "train_dataset.batch.map", "train_dataset.batch.repeat", "train_dataset.batch.shuffle", "train_dataset.batch.batch", "tensorflow.placeholder", "tensorflow.data.Iterator.from_string_handle", "tf.data.Iterator.from_string_handle.get_next", "tensorflow.data.make_initializable_iterator", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.Saver", "CNN_Siamese.CNN_Siamese", "tensorflow.Session", "sess.run", "sess.run", "sess.run", "sess.run", "range", "ResNet_Siamese.ResNet_Siamese", "tensorflow.train.AdamOptimizer", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tf.data.make_initializable_iterator.string_handle", "main.load_network_model", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "loss_average_of_epochs.append", "print", "numpy.save", "sess.run", "sess.run", "losses_in_epoch.extend", "numpy.average", "os.path.exists", "os.makedirs", "numpy.asarray", "main.save_network_model", "print", "str", "image_anchor.reshape", "image_neighbor.reshape", "image_distant.reshape", "numpy.asarray", "str", "numpy.save", "numpy.save", "numpy.save", "print", "matplotlib.figure", "main.TCGA_get_color_and_shape_of_points", "matplotlib.savefig", "matplotlib.clf", "matplotlib.close", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.load_network_model", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.save_network_model", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.TCGA_get_color_and_shape_of_points"], ["", "def", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n", "#================================ settings:", "\n", "    ", "save_plot_embedding_space", "=", "True", "\n", "save_points_in_embedding_space", "=", "True", "\n", "load_saved_network_model", "=", "False", "\n", "num_epoch", "=", "300", "\n", "save_network_model_every_how_many_epochs", "=", "10", "\n", "save_embedding_every_how_many_epochs", "=", "10", "\n", "STEPS_PER_EPOCH_TRAIN", "=", "704", "\n", "n_samples_plot", "=", "2000", "#--> if None, plot all", "\n", "# path_tfrecords_train = 'D:\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "# path_tfrecords_train = '.\\\\..\\\\..\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "path_tfrecords_train", "=", "'D:\\\\TCGA_triplets\\\\tfrecord\\\\triplets.tfrecords'", "\n", "path_save_embedding_space", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_train_set\\\\\"", "\n", "path_save_loss", "=", "\".\\\\loss_saved\\\\\"", "\n", "#================================ ", "\n", "\n", "train_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "[", "path_tfrecords_train", "]", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "parse_function", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "normalize_triplets", ")", "\n", "\n", "num_repeat", "=", "None", "\n", "train_dataset", "=", "train_dataset", ".", "repeat", "(", "num_repeat", ")", "\n", "train_dataset", "=", "train_dataset", ".", "shuffle", "(", "buffer_size", "=", "1024", ")", "\n", "train_dataset", "=", "train_dataset", ".", "batch", "(", "batch_size", ")", "\n", "handle", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "[", "]", ")", "\n", "iterator", "=", "tf", ".", "data", ".", "Iterator", ".", "from_string_handle", "(", "handle", ",", "train_dataset", ".", "output_types", ",", "\n", "train_dataset", ".", "output_shapes", ")", "\n", "\n", "next_element", "=", "iterator", ".", "get_next", "(", ")", "\n", "# training_iterator = train_dataset.make_initializable_iterator()", "\n", "training_iterator", "=", "tf", ".", "data", ".", "make_initializable_iterator", "(", "train_dataset", ")", "\n", "\n", "# Siamese:", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n", "        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "True", ")", "\n", "# train_step = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(siamese.loss)", "\n", "", "train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate", ")", ".", "minimize", "(", "siamese", ".", "loss", ")", "\n", "# tf.initialize_all_variables().run()", "\n", "\n", "saver_", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "training_handle", "=", "sess", ".", "run", "(", "training_iterator", ".", "string_handle", "(", ")", ")", "\n", "sess", ".", "run", "(", "training_iterator", ".", "initializer", ")", "\n", "\n", "if", "load_saved_network_model", ":", "\n", "            ", "_", ",", "latest_epoch", "=", "load_network_model", "(", "saver_", "=", "saver_", ",", "session_", "=", "sess", ",", "checkpoint_dir", "=", "path_save_network_model", ",", "\n", "model_dir_", "=", "model_dir_", ",", "model_name", "=", "deep_model", ")", "\n", "", "else", ":", "\n", "            ", "latest_epoch", "=", "-", "1", "\n", "\n", "", "loss_average_of_epochs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "latest_epoch", "+", "1", ",", "num_epoch", ")", ":", "\n", "            ", "losses_in_epoch", "=", "[", "]", "\n", "print", "(", "\"============= epoch: \"", "+", "str", "(", "epoch", ")", "+", "\"/\"", "+", "str", "(", "num_epoch", "-", "1", ")", ")", "\n", "embeddings_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", "feature_space_dimension", ")", ")", "\n", "types_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", ")", ")", "\n", "subtypes_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "STEPS_PER_EPOCH_TRAIN", ")", ":", "\n", "                ", "image_anchor", ",", "image_neighbor", ",", "image_distant", ",", "type_anchor", ",", "type_neighbor", ",", "type_distant", ",", "subtype_anchor", ",", "subtype_neighbor", ",", "subtype_distant", "=", "sess", ".", "run", "(", "next_element", ",", "\n", "feed_dict", "=", "{", "handle", ":", "training_handle", "}", ")", "\n", "\n", "image_anchor_batch_3_channels", "=", "image_anchor", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "image_neighbor_batch_3_channels", "=", "image_neighbor", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "image_distant_batch_3_channels", "=", "image_distant", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "_", ",", "loss_v", ",", "embedding1", ",", "embedding2", ",", "embedding3", "=", "sess", ".", "run", "(", "[", "train_step", ",", "siamese", ".", "loss", ",", "siamese", ".", "o1", ",", "siamese", ".", "o2", ",", "siamese", ".", "o3", "]", ",", "feed_dict", "=", "{", "\n", "siamese", ".", "x1", ":", "image_anchor_batch_3_channels", ",", "\n", "siamese", ".", "x2", ":", "image_neighbor_batch_3_channels", ",", "\n", "siamese", ".", "x3", ":", "image_distant_batch_3_channels", "}", ")", "\n", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding1", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding2", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding3", "\n", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", "]", "=", "type_anchor", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", "]", "=", "type_neighbor", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", "]", "=", "type_distant", "\n", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", "]", "=", "subtype_anchor", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", "]", "=", "subtype_neighbor", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", "]", "=", "subtype_distant", "\n", "\n", "losses_in_epoch", ".", "extend", "(", "[", "loss_v", "]", ")", "\n", "\n", "# report average loss of epoch:", "\n", "", "loss_average_of_epochs", ".", "append", "(", "np", ".", "average", "(", "np", ".", "asarray", "(", "losses_in_epoch", ")", ")", ")", "\n", "print", "(", "\"Average loss of epoch \"", "+", "str", "(", "epoch", ")", "+", "\": \"", "+", "str", "(", "loss_average_of_epochs", "[", "-", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_loss", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_save_loss", ")", "\n", "", "np", ".", "save", "(", "path_save_loss", "+", "\"loss.npy\"", ",", "np", ".", "asarray", "(", "loss_average_of_epochs", ")", ")", "\n", "\n", "# plot the embedding space:", "\n", "if", "(", "epoch", "%", "save_embedding_every_how_many_epochs", "==", "0", ")", ":", "\n", "                ", "if", "save_points_in_embedding_space", ":", "\n", "                    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embedding_space", "+", "\"numpy\\\\\"", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "path_save_embedding_space", "+", "\"numpy\\\\\"", ")", "\n", "", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\embeddings_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "embeddings_in_epoch", ")", "\n", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\types_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "types_in_epoch", ")", "\n", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\subtypes_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "subtypes_in_epoch", ")", "\n", "", "if", "save_plot_embedding_space", ":", "\n", "                    ", "print", "(", "\"saving the plot of embedding space....\"", ")", "\n", "plt", ".", "figure", "(", "200", ")", "\n", "# fig.clf()", "\n", "TCGA_get_color_and_shape_of_points", "(", "embeddings_in_epoch", ",", "types_in_epoch", ",", "subtypes_in_epoch", ",", "n_samples_plot", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", ")", "\n", "", "plt", ".", "savefig", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", "+", "'epoch'", "+", "str", "(", "epoch", ")", "+", "'_step'", "+", "str", "(", "i", ")", "+", "'.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "# save the network model:", "\n", "", "", "if", "(", "epoch", "%", "save_network_model_every_how_many_epochs", "==", "0", ")", ":", "\n", "                ", "save_network_model", "(", "saver_", "=", "saver_", ",", "session_", "=", "sess", ",", "checkpoint_dir", "=", "path_save_network_model", ",", "step", "=", "epoch", ",", "model_name", "=", "deep_model", ",", "model_dir_", "=", "model_dir_", ")", "\n", "print", "(", "\"Model saved in path: %s\"", "%", "path_save_network_model", ")", "\n", "# siamese.save_network(session_=sess, checkpoint_dir=path_save_network_model)", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.main.TCGA_get_color_and_shape_of_points": [[182, 215], ["numpy.zeros", "matplotlib.subplots", "len", "matplotlib.scatter", "matplotlib.setp", "matplotlib.colorbar", "plt.colorbar.set_ticks", "plt.colorbar.set_ticklabels", "numpy.random.choice", "numpy.random.choice", "umap.UMAP().fit_transform", "numpy.arange", "range", "min", "range", "umap.UMAP", "numpy.arange"], "function", ["None"], ["", "", "", "", "def", "TCGA_get_color_and_shape_of_points", "(", "embedding", ",", "type_", ",", "subtype_", ",", "n_samples_plot", "=", "None", ")", ":", "\n", "    ", "n_samples", "=", "embedding", ".", "shape", "[", "0", "]", "\n", "if", "n_samples_plot", "!=", "None", ":", "\n", "        ", "indices_to_plot", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n_samples", ")", ",", "min", "(", "n_samples_plot", ",", "n_samples", ")", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "indices_to_plot", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n_samples", ")", ",", "n_samples", ",", "replace", "=", "False", ")", "\n", "", "embedding_sampled", "=", "embedding", "[", "indices_to_plot", ",", ":", "]", "\n", "if", "embedding", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "embedding_sampled", "=", "umap", ".", "UMAP", "(", "n_neighbors", "=", "500", ")", ".", "fit_transform", "(", "embedding_sampled", ")", "\n", "", "n_points", "=", "embedding", ".", "shape", "[", "0", "]", "\n", "# n_points_sampled = embedding_sampled.shape[0]", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "n_points", ",", ")", ")", "\n", "labels", "[", "(", "type_", "==", "0", ")", "&", "(", "subtype_", "==", "0", ")", "]", "=", "0", "\n", "labels", "[", "(", "type_", "==", "0", ")", "&", "(", "subtype_", "==", "1", ")", "]", "=", "1", "\n", "labels", "[", "(", "type_", "==", "0", ")", "&", "(", "subtype_", "==", "2", ")", "]", "=", "2", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "0", ")", "]", "=", "3", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "1", ")", "]", "=", "4", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "2", ")", "]", "=", "5", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "3", ")", "]", "=", "6", "\n", "labels", "[", "(", "type_", "==", "2", ")", "&", "(", "subtype_", "==", "0", ")", "]", "=", "7", "\n", "labels", "[", "(", "type_", "==", "2", ")", "&", "(", "subtype_", "==", "1", ")", "]", "=", "8", "\n", "labels_sampled", "=", "labels", "[", "indices_to_plot", "]", "\n", "_", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "figsize", "=", "(", "14", ",", "10", ")", ")", "\n", "classes", "=", "[", "\"LUSC\"", ",", "\"MESO\"", ",", "\"LUAD\"", ",", "\"READ\"", ",", "\"COAD\"", ",", "\"STAD\"", ",", "\"ESCA\"", ",", "\"TGCT\"", ",", "\"PRAD\"", "]", "\n", "n_classes", "=", "len", "(", "classes", ")", "\n", "plt", ".", "scatter", "(", "embedding_sampled", "[", ":", ",", "0", "]", ",", "embedding_sampled", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "c", "=", "labels_sampled", ",", "cmap", "=", "'Spectral'", ",", "alpha", "=", "1.0", ")", "\n", "plt", ".", "setp", "(", "ax", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "cbar", "=", "plt", ".", "colorbar", "(", "boundaries", "=", "np", ".", "arange", "(", "n_classes", "+", "1", ")", "-", "0.5", ")", "\n", "cbar", ".", "set_ticks", "(", "np", ".", "arange", "(", "n_classes", ")", ")", "\n", "cbar", ".", "set_ticklabels", "(", "classes", ")", "\n", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.main.save_network_model": [[218, 225], ["os.path.join", "saver_.save", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], ["", "def", "save_network_model", "(", "saver_", ",", "session_", ",", "checkpoint_dir", ",", "step", ",", "model_name", ",", "model_dir_", ")", ":", "\n", "# https://stackoverflow.com/questions/33759623/tensorflow-how-to-save-restore-a-model", "\n", "# https://github.com/taki0112/ResNet-Tensorflow/blob/master/ResNet.py", "\n", "    ", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir_", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "saver_", ".", "save", "(", "session_", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_name", "+", "'.model'", ")", ",", "global_step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.main.load_network_model": [[226, 240], ["print", "os.path.join", "tensorflow.train.get_checkpoint_state", "os.path.basename", "saver_.restore", "print", "int", "print", "os.path.join"], "function", ["None"], ["", "def", "load_network_model", "(", "saver_", ",", "session_", ",", "checkpoint_dir", ",", "model_dir_", ",", "model_name", ")", ":", "\n", "# https://stackoverflow.com/questions/33759623/tensorflow-how-to-save-restore-a-model", "\n", "    ", "print", "(", "\" [*] Reading checkpoints...\"", ")", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir_", ")", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "        ", "ckpt_name", "=", "os", ".", "path", ".", "basename", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "saver_", ".", "restore", "(", "session_", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "ckpt_name", ")", ")", "\n", "print", "(", "\" [*] Success to read {}\"", ".", "format", "(", "ckpt_name", ")", ")", "\n", "latest_epoch", "=", "int", "(", "ckpt_name", "[", "-", "1", "]", ")", "\n", "return", "True", ",", "latest_epoch", "\n", "", "else", ":", "\n", "        ", "print", "(", "\" [*] Failed to find a checkpoint\"", ")", "\n", "return", "False", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.main.model_dir": [[242, 244], ["None"], "function", ["None"], ["", "", "def", "model_dir", "(", "model_name", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ")", ":", "\n", "    ", "return", "\"{}_{}_{}_{}\"", ".", "format", "(", "model_name", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.Target_domain.Target_domain.__init__": [[21, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "checkpoint_dir", ",", "model_dir_", ",", "model_name", ",", "batch_size", ",", "feature_space_dimension", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_samples", "=", "None", "\n", "self", ".", "n_batches", "=", "None", "\n", "\n", "\n", "# X, embedding: rows are samples, columns are features", "\n", "# self.saver = tf.train.Saver()", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "\n", "self", ".", "model_dir_", "=", "model_dir_", "\n", "\n", "# self.model_name = model_name", "\n", "# self.batch_size = batch_size", "\n", "# self.X = X", "\n", "# self.n_samples = self.X.shape[0]", "\n", "self", ".", "feature_space_dimension", "=", "feature_space_dimension", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.Target_domain.Target_domain.embed_data_in_the_source_domain": [[39, 77], ["print", "int", "numpy.ceil", "tensorflow.Session", "tensorflow.global_variables_initializer().run", "numpy.zeros", "range", "numpy.save", "numpy.save", "Target_domain.Target_domain.Kather_get_color_and_shape_of_points", "Target_domain.Target_domain.savefig", "Target_domain.Target_domain.clf", "Target_domain.Target_domain.close", "print", "Target_domain.Target_domain.load_network_model", "sess.run", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tensorflow.global_variables_initializer", "print", "print", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.Kather_get_color_and_shape_of_points", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.load_network_model"], ["", "def", "embed_data_in_the_source_domain", "(", "self", ",", "batches", ",", "batches_subtypes", ",", "siamese", ",", "path_save_embeddings_of_test_data", ")", ":", "\n", "        ", "print", "(", "\"Embedding the test set into the source domain....\"", ")", "\n", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "n_samples", "/", "self", ".", "batch_size", ")", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "embedding", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_samples", ",", "self", ".", "feature_space_dimension", ")", ")", "\n", "subtypes", "=", "[", "None", "]", "*", "self", ".", "n_samples", "\n", "for", "batch_index", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "print", "(", "\"processing batch \"", "+", "str", "(", "batch_index", ")", "+", "\"/\"", "+", "str", "(", "n_batches", "-", "1", ")", ")", "\n", "X_batch", "=", "batches", "[", "batch_index", "]", "\n", "could_load", ",", "checkpoint_counter", "=", "self", ".", "load_network_model", "(", "sess", ")", "\n", "if", "could_load", ":", "\n", "                    ", "print", "(", "\" [*] Load SUCCESS\"", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\" [!] Load failed...\"", ")", "\n", "", "test_feed_dict", "=", "{", "\n", "siamese", ".", "x1", ":", "X_batch", "\n", "}", "\n", "embedding_batch", "=", "sess", ".", "run", "(", "siamese", ".", "o1", ",", "feed_dict", "=", "test_feed_dict", ")", "\n", "pass", "\n", "if", "batch_index", "!=", "(", "n_batches", "-", "1", ")", ":", "\n", "                    ", "embedding", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "(", "(", "batch_index", "+", "1", ")", "*", "self", ".", "batch_size", ")", ",", ":", "]", "=", "embedding_batch", "\n", "subtypes", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "(", "(", "batch_index", "+", "1", ")", "*", "self", ".", "batch_size", ")", "]", "=", "batches_subtypes", "[", "batch_index", "]", "\n", "", "else", ":", "\n", "                    ", "embedding", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", ",", ":", "]", "=", "embedding_batch", "\n", "subtypes", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "]", "=", "batches_subtypes", "[", "batch_index", "]", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\\"", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\\"", ")", "\n", "", "np", ".", "save", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\embedding.npy\"", ",", "embedding", ")", "\n", "np", ".", "save", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\subtypes.npy\"", ",", "subtypes", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embeddings_of_test_data", "+", "\"plots\\\\\"", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_save_embeddings_of_test_data", "+", "\"plots\\\\\"", ")", "\n", "# plt.figure(200)", "\n", "", "plt", "=", "self", ".", "Kather_get_color_and_shape_of_points", "(", "embedding", "=", "embedding", ",", "subtype_", "=", "subtypes", ")", "\n", "plt", ".", "savefig", "(", "path_save_embeddings_of_test_data", "+", "\"plots\\\\\"", "+", "'embedding.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "return", "embedding", ",", "subtypes", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.Target_domain.Target_domain.Kather_get_color_and_shape_of_points": [[78, 102], ["numpy.zeros", "matplotlib.subplots", "matplotlib.subplots", "len", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.setp", "matplotlib.setp", "matplotlib.colorbar", "matplotlib.colorbar", "matplotlib.colorbar.set_ticks", "matplotlib.colorbar.set_ticklabels", "umap.UMAP().fit_transform", "numpy.arange", "umap.UMAP", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.arange"], "methods", ["None"], ["", "def", "Kather_get_color_and_shape_of_points", "(", "self", ",", "embedding", ",", "subtype_", ")", ":", "\n", "        ", "if", "embedding", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "            ", "embedding_", "=", "embedding", "\n", "", "else", ":", "\n", "            ", "embedding_", "=", "umap", ".", "UMAP", "(", "n_neighbors", "=", "500", ")", ".", "fit_transform", "(", "embedding", ")", "\n", "", "n_points", "=", "embedding_", ".", "shape", "[", "0", "]", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "n_points", ",", ")", ")", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"01_TUMOR\"", "]", "=", "0", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"02_STROMA\"", "]", "=", "1", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"03_COMPLEX\"", "]", "=", "2", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"04_LYMPHO\"", "]", "=", "3", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"05_DEBRIS\"", "]", "=", "4", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"06_MUCOSA\"", "]", "=", "5", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"07_ADIPOSE\"", "]", "=", "6", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"08_EMPTY\"", "]", "=", "7", "\n", "_", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "figsize", "=", "(", "14", ",", "10", ")", ")", "\n", "classes", "=", "[", "\"TUMOR\"", ",", "\"STROMA\"", ",", "\"COMPLEX\"", ",", "\"LYMPHO\"", ",", "\"DEBRIS\"", ",", "\"MUCOSA\"", ",", "\"ADIPOSE\"", ",", "\"EMPTY\"", "]", "\n", "n_classes", "=", "len", "(", "classes", ")", "\n", "plt", ".", "scatter", "(", "embedding_", "[", ":", ",", "0", "]", ",", "embedding_", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "c", "=", "labels", ",", "cmap", "=", "'Spectral'", ",", "alpha", "=", "1.0", ")", "\n", "plt", ".", "setp", "(", "ax", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "cbar", "=", "plt", ".", "colorbar", "(", "boundaries", "=", "np", ".", "arange", "(", "n_classes", "+", "1", ")", "-", "0.5", ")", "\n", "cbar", ".", "set_ticks", "(", "np", ".", "arange", "(", "n_classes", ")", ")", "\n", "cbar", ".", "set_ticklabels", "(", "classes", ")", "\n", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.Target_domain.Target_domain.read_data_into_batches": [[103, 129], ["len", "int", "range", "range", "glob.glob", "numpy.ceil", "numpy.zeros", "print", "enumerate", "numpy.load", "str", "filename.split", "str"], "methods", ["None"], ["", "def", "read_data_into_batches", "(", "self", ",", "path_dataset", ")", ":", "\n", "        ", "img_ext", "=", "'.npy'", "\n", "paths_of_images", "=", "[", "glob", ".", "glob", "(", "path_dataset", "+", "\"\\\\**\\\\*\"", "+", "img_ext", ")", "]", "\n", "paths_of_images", "=", "paths_of_images", "[", "0", "]", "\n", "self", ".", "n_samples", "=", "len", "(", "paths_of_images", ")", "\n", "self", ".", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "n_samples", "/", "self", ".", "batch_size", ")", ")", "\n", "batches", "=", "[", "None", "]", "*", "self", ".", "n_batches", "\n", "batches_subtypes", "=", "[", "None", "]", "*", "self", ".", "n_batches", "\n", "for", "batch_index", "in", "range", "(", "self", ".", "n_batches", ")", ":", "\n", "            ", "if", "batch_index", "!=", "(", "self", ".", "n_batches", "-", "1", ")", ":", "\n", "                ", "n_samples_per_batch", "=", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "                ", "n_samples_per_batch", "=", "self", ".", "n_samples", "-", "(", "self", ".", "batch_size", "*", "(", "self", ".", "n_batches", "-", "1", ")", ")", "\n", "", "batches", "[", "batch_index", "]", "=", "np", ".", "zeros", "(", "(", "n_samples_per_batch", ",", "128", ",", "128", ",", "3", ")", ")", "\n", "batches_subtypes", "[", "batch_index", "]", "=", "[", "None", "]", "*", "n_samples_per_batch", "\n", "", "for", "batch_index", "in", "range", "(", "self", ".", "n_batches", ")", ":", "\n", "            ", "print", "(", "\"reading batch \"", "+", "str", "(", "batch_index", ")", "+", "\"/\"", "+", "str", "(", "self", ".", "n_batches", "-", "1", ")", ")", "\n", "if", "batch_index", "!=", "(", "self", ".", "n_batches", "-", "1", ")", ":", "\n", "                ", "paths_of_images_of_batch", "=", "paths_of_images", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "(", "(", "batch_index", "+", "1", ")", "*", "self", ".", "batch_size", ")", "]", "\n", "", "else", ":", "\n", "                ", "paths_of_images_of_batch", "=", "paths_of_images", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "]", "\n", "", "for", "file_index", ",", "filename", "in", "enumerate", "(", "paths_of_images_of_batch", ")", ":", "\n", "                ", "im", "=", "np", ".", "load", "(", "filename", ")", "\n", "batches", "[", "batch_index", "]", "[", "file_index", ",", ":", ",", ":", ",", ":", "]", "=", "im", "\n", "batches_subtypes", "[", "batch_index", "]", "[", "file_index", "]", "=", "filename", ".", "split", "(", "\"\\\\\"", ")", "[", "-", "2", "]", "\n", "", "", "return", "batches", ",", "batches_subtypes", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.Target_domain.Target_domain.load_network_model": [[130, 145], ["print", "tensorflow.train.Saver", "os.path.join", "tensorflow.train.get_checkpoint_state", "os.path.basename", "tensorflow.train.Saver.restore", "print", "int", "print", "os.path.join"], "methods", ["None"], ["", "def", "load_network_model", "(", "self", ",", "session_", ")", ":", "\n", "# https://stackoverflow.com/questions/33759623/tensorflow-how-to-save-restore-a-model", "\n", "        ", "print", "(", "\" [*] Reading checkpoints...\"", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir_", ")", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "ckpt_name", "=", "os", ".", "path", ".", "basename", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "saver", ".", "restore", "(", "session_", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "ckpt_name", ")", ")", "\n", "print", "(", "\" [*] Success to read {}\"", ".", "format", "(", "ckpt_name", ")", ")", "\n", "latest_epoch", "=", "int", "(", "ckpt_name", "[", "-", "1", "]", ")", "\n", "return", "True", ",", "latest_epoch", "\n", "", "else", ":", "\n", "            ", "print", "(", "\" [*] Failed to find a checkpoint\"", ")", "\n", "return", "False", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.Target_domain.Target_domain.classification_in_target_domain": [[158, 174], ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit", "sklearn.preprocessing.LabelEncoder.transform", "sklearn.svm.LinearSVC", "sklearn.model_selection.cross_val_score", "numpy.save", "numpy.savetxt", "print", "open", "open.write", "open.close", "numpy.unique", "os.path.exists", "os.makedirs", "str", "numpy.asarray", "sklearn.model_selection.cross_val_score.std", "str", "sklearn.model_selection.cross_val_score.mean"], "methods", ["None"], ["", "", "def", "classification_in_target_domain", "(", "self", ",", "X", ",", "y", ",", "path_save_accuracy_of_test_data", ",", "cv", "=", "10", ")", ":", "\n", "        ", "le", "=", "preprocessing", ".", "LabelEncoder", "(", ")", "\n", "le", ".", "fit", "(", "np", ".", "unique", "(", "np", ".", "asarray", "(", "y", ")", ")", ")", "\n", "y", "=", "le", ".", "transform", "(", "y", ")", "\n", "clf", "=", "LinearSVC", "(", "random_state", "=", "0", ",", "tol", "=", "1e-4", ",", "max_iter", "=", "10000", ")", "\n", "scores", "=", "cross_val_score", "(", "clf", ",", "X", ",", "y", ",", "cv", "=", "cv", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_accuracy_of_test_data", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_save_accuracy_of_test_data", ")", "\n", "", "np", ".", "save", "(", "path_save_accuracy_of_test_data", "+", "\"scores.npy\"", ",", "scores", ")", "\n", "np", ".", "savetxt", "(", "path_save_accuracy_of_test_data", "+", "\"scores.txt\"", ",", "scores", ",", "delimiter", "=", "','", ")", "\n", "str_", "=", "\"Mean accuracy: \"", "+", "str", "(", "scores", ".", "mean", "(", ")", ")", "+", "\" +- \"", "+", "str", "(", "scores", ".", "std", "(", ")", ")", "\n", "print", "(", "str_", ")", "\n", "text_file", "=", "open", "(", "path_save_accuracy_of_test_data", "+", "\"scores_average.txt\"", ",", "\"w\"", ")", "\n", "text_file", ".", "write", "(", "str_", ")", "\n", "text_file", ".", "close", "(", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.Target_domain.Target_domain.classification_in_target_domain_different_data_portions": [[175, 224], ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit", "sklearn.preprocessing.LabelEncoder.transform", "numpy.zeros", "enumerate", "numpy.save", "numpy.savetxt", "numpy.zeros.mean", "numpy.zeros.min", "numpy.zeros.max", "matplotlib.fill_between", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.grid", "matplotlib.grid", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.clf", "matplotlib.clf", "matplotlib.close", "matplotlib.close", "numpy.unique", "print", "sklearn.model_selection.StratifiedKFold", "sklearn.svm.LinearSVC", "sklearn.model_selection.StratifiedKFold.split", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "numpy.asarray", "len", "sklearn.model_selection.StratifiedShuffleSplit", "sklearn.model_selection.StratifiedShuffleSplit.split", "sklearn.svm.LinearSVC.fit", "scores.append", "sklearn.svm.LinearSVC.score", "str"], "methods", ["None"], ["", "def", "classification_in_target_domain_different_data_portions", "(", "self", ",", "X", ",", "y", ",", "path_save_accuracy_of_test_data", ",", "proportions", ",", "cv", "=", "10", ")", ":", "\n", "        ", "le", "=", "preprocessing", ".", "LabelEncoder", "(", ")", "\n", "le", ".", "fit", "(", "np", ".", "unique", "(", "np", ".", "asarray", "(", "y", ")", ")", ")", "\n", "y", "=", "le", ".", "transform", "(", "y", ")", "\n", "scores_array", "=", "np", ".", "zeros", "(", "(", "len", "(", "proportions", ")", ",", "cv", ")", ")", "\n", "for", "proportion_index", ",", "proportion", "in", "enumerate", "(", "proportions", ")", ":", "\n", "            ", "print", "(", "\"processing proportion: \"", "+", "str", "(", "proportion", ")", "+", "\"....\"", ")", "\n", "if", "proportion", "==", "1", ":", "\n", "                ", "X_", "=", "X", "\n", "y_", "=", "y", "\n", "", "else", ":", "\n", "                ", "sss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "proportion", ",", "random_state", "=", "0", ")", "\n", "for", "train_index", ",", "test_index", "in", "sss", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "                    ", "X_", "=", "X", "[", "test_index", ",", ":", "]", "\n", "y_", "=", "y", "[", "test_index", "]", "\n", "# scores = cross_val_score(clf, X_, y_, cv=cv)", "\n", "", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "cv", ")", "\n", "scores", "=", "[", "]", "\n", "clf", "=", "LinearSVC", "(", "random_state", "=", "0", ",", "tol", "=", "1e-4", ",", "max_iter", "=", "10000", ")", "\n", "# clf = RandomForestClassifier(random_state=0)", "\n", "for", "train_index", ",", "test_index", "in", "skf", ".", "split", "(", "X_", ",", "y_", ")", ":", "\n", "                ", "X_train", ",", "X_test", "=", "X_", "[", "train_index", "]", ",", "X_", "[", "test_index", "]", "\n", "y_train", ",", "y_test", "=", "y_", "[", "train_index", "]", ",", "y_", "[", "test_index", "]", "\n", "clf", ".", "fit", "(", "X", "=", "X_train", ",", "y", "=", "y_train", ")", "\n", "scores", ".", "append", "(", "clf", ".", "score", "(", "X", "=", "X_test", ",", "y", "=", "y_test", ")", ")", "\n", "", "del", "clf", "\n", "scores_array", "[", "proportion_index", ",", ":", "]", "=", "scores", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_accuracy_of_test_data", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_save_accuracy_of_test_data", ")", "\n", "", "np", ".", "save", "(", "path_save_accuracy_of_test_data", "+", "\"scores_array.npy\"", ",", "scores_array", ")", "\n", "np", ".", "savetxt", "(", "path_save_accuracy_of_test_data", "+", "\"scores_array.txt\"", ",", "scores_array", ",", "delimiter", "=", "','", ")", "\n", "# plot:", "\n", "scores_array", "=", "scores_array", "*", "100", "\n", "proportions", "=", "[", "proportion", "*", "100", "for", "proportion", "in", "proportions", "]", "\n", "mean_scores", "=", "scores_array", ".", "mean", "(", "axis", "=", "1", ")", "\n", "min_scores", "=", "scores_array", ".", "min", "(", "axis", "=", "1", ")", "\n", "max_scores", "=", "scores_array", ".", "max", "(", "axis", "=", "1", ")", "\n", "plt", ".", "fill_between", "(", "proportions", ",", "min_scores", ",", "max_scores", ",", "color", "=", "\"r\"", ",", "alpha", "=", "0.4", ")", "\n", "plt", ".", "plot", "(", "proportions", ",", "mean_scores", ",", "\"*-\"", ",", "color", "=", "\"r\"", ")", "\n", "plt", ".", "xlabel", "(", "\"proportion of data (%)\"", ")", "\n", "plt", ".", "ylabel", "(", "\"accuracy (%)\"", ")", "\n", "plt", ".", "ylim", "(", "40", ",", "100", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_accuracy_of_test_data", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_save_accuracy_of_test_data", ")", "\n", "", "plt", ".", "savefig", "(", "path_save_accuracy_of_test_data", "+", "'plot.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ops_resnet.conv": [[20, 28], ["tensorflow.variable_scope", "tensorflow.layers.conv2d"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d"], ["def", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "'SAME'", ",", "use_bias", "=", "True", ",", "scope", "=", "'conv_0'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "inputs", "=", "x", ",", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "kernel", ",", "kernel_initializer", "=", "weight_init", ",", "\n", "kernel_regularizer", "=", "weight_regularizer", ",", "\n", "strides", "=", "stride", ",", "use_bias", "=", "use_bias", ",", "padding", "=", "padding", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ops_resnet.fully_conneted": [[29, 35], ["tensorflow.variable_scope", "ops_resnet.flatten", "tensorflow.layers.dense"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.flatten"], ["", "", "def", "fully_conneted", "(", "x", ",", "units", ",", "use_bias", "=", "True", ",", "scope", "=", "'fully_0'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "x", "=", "flatten", "(", "x", ")", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "units", "=", "units", ",", "kernel_initializer", "=", "weight_init", ",", "kernel_regularizer", "=", "weight_regularizer", ",", "use_bias", "=", "use_bias", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ops_resnet.resblock": [[36, 57], ["tensorflow.variable_scope", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv"], ["", "", "def", "resblock", "(", "x_init", ",", "channels", ",", "is_training", "=", "True", ",", "use_bias", "=", "True", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "\n", "        ", "x", "=", "batch_norm", "(", "x_init", ",", "is_training", ",", "scope", "=", "'batch_norm_0'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "\n", "\n", "if", "downsample", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "x_init", "=", "conv", "(", "x_init", ",", "channels", ",", "kernel", "=", "1", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_init'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "\n", "", "x", "=", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm_1'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_1'", ")", "\n", "\n", "\n", "\n", "return", "x", "+", "x_init", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ops_resnet.bottle_resblock": [[58, 80], ["tensorflow.variable_scope", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.conv", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv"], ["", "", "def", "bottle_resblock", "(", "x_init", ",", "channels", ",", "is_training", "=", "True", ",", "use_bias", "=", "True", ",", "downsample", "=", "False", ",", "scope", "=", "'bottle_resblock'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "x", "=", "batch_norm", "(", "x_init", ",", "is_training", ",", "scope", "=", "'batch_norm_1x1_front'", ")", "\n", "shortcut", "=", "relu", "(", "x", ")", "\n", "\n", "x", "=", "conv", "(", "shortcut", ",", "channels", ",", "kernel", "=", "1", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_1x1_front'", ")", "\n", "x", "=", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm_3x3'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "\n", "if", "downsample", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "shortcut", "=", "conv", "(", "shortcut", ",", "channels", "*", "4", ",", "kernel", "=", "1", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_init'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "shortcut", "=", "conv", "(", "shortcut", ",", "channels", "*", "4", ",", "kernel", "=", "1", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_init'", ")", "\n", "\n", "", "x", "=", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm_1x1_back'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "x", "=", "conv", "(", "x", ",", "channels", "*", "4", ",", "kernel", "=", "1", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_1x1_back'", ")", "\n", "\n", "return", "x", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ops_resnet.get_residual_layer": [[83, 102], ["None"], "function", ["None"], ["", "", "def", "get_residual_layer", "(", "res_n", ")", ":", "\n", "    ", "x", "=", "[", "]", "\n", "\n", "if", "res_n", "==", "18", ":", "\n", "        ", "x", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "\n", "", "if", "res_n", "==", "34", ":", "\n", "        ", "x", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "\n", "", "if", "res_n", "==", "50", ":", "\n", "        ", "x", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "\n", "", "if", "res_n", "==", "101", ":", "\n", "        ", "x", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "\n", "", "if", "res_n", "==", "152", ":", "\n", "        ", "x", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ops_resnet.flatten": [[109, 111], ["tensorflow.layers.flatten"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.flatten"], ["", "def", "flatten", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "layers", ".", "flatten", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ops_resnet.global_avg_pooling": [[112, 115], ["tensorflow.reduce_mean"], "function", ["None"], ["", "def", "global_avg_pooling", "(", "x", ")", ":", "\n", "    ", "gap", "=", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "[", "1", ",", "2", "]", ",", "keepdims", "=", "True", ")", "\n", "return", "gap", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ops_resnet.avg_pooling": [[116, 118], ["tensorflow.layers.average_pooling2d"], "function", ["None"], ["", "def", "avg_pooling", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "layers", ".", "average_pooling2d", "(", "x", ",", "pool_size", "=", "2", ",", "strides", "=", "2", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ops_resnet.relu": [[124, 126], ["tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu"], ["", "def", "relu", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ops_resnet.batch_norm": [[132, 137], ["tensorflow.layers.batch_norm"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm"], ["", "def", "batch_norm", "(", "x", ",", "is_training", "=", "True", ",", "scope", "=", "'batch_norm'", ")", ":", "\n", "    ", "return", "tf_contrib", ".", "layers", ".", "batch_norm", "(", "x", ",", "\n", "decay", "=", "0.9", ",", "epsilon", "=", "1e-05", ",", "\n", "center", "=", "True", ",", "scale", "=", "True", ",", "updates_collections", "=", "None", ",", "\n", "is_training", "=", "is_training", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.ops_resnet.classification_loss": [[142, 148], ["tensorflow.reduce_mean", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast"], "function", ["None"], ["", "def", "classification_loss", "(", "logit", ",", "label", ")", ":", "\n", "    ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "label", ",", "logits", "=", "logit", ")", ")", "\n", "prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "logit", ",", "-", "1", ")", ",", "tf", ".", "argmax", "(", "label", ",", "-", "1", ")", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "prediction", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "return", "loss", ",", "accuracy", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.CNN_Siamese.CNN_Siamese.__init__": [[14, 69], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "CNN_Siamese.CNN_Siamese.loss_with_spring", "tensorflow.variable_scope", "CNN_Siamese.CNN_Siamese.conv_net", "CNN_Siamese.CNN_Siamese.conv_net", "CNN_Siamese.CNN_Siamese.conv_net", "CNN_Siamese.CNN_Siamese.loss_FDA", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.variable_scope", "CNN_Siamese.CNN_Siamese.conv_net_FDA", "CNN_Siamese.CNN_Siamese.conv_net_FDA", "CNN_Siamese.CNN_Siamese.conv_net_FDA"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.loss_with_spring", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.loss_FDA", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net_FDA", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net_FDA", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net_FDA"], ["    ", "def", "__init__", "(", "self", ",", "loss_type", ",", "feature_space_dimension", ",", "margin_in_loss", "=", "0.25", ")", ":", "\n", "# self.x1 = tf.placeholder(tf.float32, [None, 49152])", "\n", "# self.x1Image = tf.reshape(self.x1, [-1, 128, 128, 3])", "\n", "# self.x2 = tf.placeholder(tf.float32, [None, 49152])", "\n", "# self.x2Image = tf.reshape(self.x2, [-1, 128, 128, 3])", "\n", "# self.x3 = tf.placeholder(tf.float32, [None, 49152])", "\n", "# self.x3Image = tf.reshape(self.x3, [-1, 128, 128, 3])", "\n", "\n", "        ", "self", ".", "x1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x1Image", "=", "self", ".", "x1", "\n", "self", ".", "x2", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x2Image", "=", "self", ".", "x2", "\n", "self", ".", "x3", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x3Image", "=", "self", ".", "x3", "\n", "\n", "self", ".", "margin_in_loss", "=", "margin_in_loss", "\n", "\n", "# self.loss_type = tf.placeholder(tf.float32, [1, 1])", "\n", "\n", "# self.weights = {", "\n", "#     'wc1': tf.get_variable('W0', shape=(3,3,3,32), initializer=tf.contrib.layers.xavier_initializer()),", "\n", "#     'wc2': tf.get_variable('W1', shape=(3,3,32,64), initializer=tf.contrib.layers.xavier_initializer()),", "\n", "#     'wc3': tf.get_variable('W2', shape=(3,3,64,128), initializer=tf.contrib.layers.xavier_initializer()),", "\n", "#     'wd1': tf.get_variable('W3', shape=(4*4*128,1024), initializer=tf.contrib.layers.xavier_initializer()),", "\n", "#     }", "\n", "\n", "self", ".", "weights", "=", "{", "\n", "'wc1'", ":", "tf", ".", "get_variable", "(", "'W0'", ",", "shape", "=", "(", "3", ",", "3", ",", "3", ",", "32", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'wc2'", ":", "tf", ".", "get_variable", "(", "'W1'", ",", "shape", "=", "(", "3", ",", "3", ",", "32", ",", "64", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'wc3'", ":", "tf", ".", "get_variable", "(", "'W2'", ",", "shape", "=", "(", "3", ",", "3", ",", "64", ",", "128", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'wd1'", ":", "tf", ".", "get_variable", "(", "'W3'", ",", "shape", "=", "(", "16", "*", "16", "*", "128", ",", "500", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'out'", ":", "tf", ".", "get_variable", "(", "'W6'", ",", "shape", "=", "(", "500", ",", "feature_space_dimension", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "}", "\n", "self", ".", "biases", "=", "{", "\n", "'bc1'", ":", "tf", ".", "get_variable", "(", "'B0'", ",", "shape", "=", "(", "32", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'bc2'", ":", "tf", ".", "get_variable", "(", "'B1'", ",", "shape", "=", "(", "64", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'bc3'", ":", "tf", ".", "get_variable", "(", "'B2'", ",", "shape", "=", "(", "128", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'bd1'", ":", "tf", ".", "get_variable", "(", "'B3'", ",", "shape", "=", "(", "500", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'out'", ":", "tf", ".", "get_variable", "(", "'B4'", ",", "shape", "=", "(", "feature_space_dimension", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "}", "\n", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "# Create loss", "\n", "if", "self", ".", "loss_type", "==", "\"triplet\"", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"siamese\"", ")", "as", "scope", ":", "\n", "                ", "self", ".", "o1", "=", "self", ".", "conv_net", "(", "self", ".", "x1Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ")", "\n", "self", ".", "o2", "=", "self", ".", "conv_net", "(", "self", ".", "x2Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ")", "\n", "self", ".", "o3", "=", "self", ".", "conv_net", "(", "self", ".", "x3Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ")", "\n", "", "self", ".", "loss", "=", "self", ".", "loss_with_spring", "(", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"FDA\"", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"siamese\"", ")", "as", "scope", ":", "\n", "                ", "self", ".", "o1", "=", "self", ".", "conv_net_FDA", "(", "self", ".", "x1Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ",", "o_index", "=", "1", ")", "\n", "self", ".", "o2", "=", "self", ".", "conv_net_FDA", "(", "self", ".", "x2Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ",", "o_index", "=", "2", ")", "\n", "self", ".", "o3", "=", "self", ".", "conv_net_FDA", "(", "self", ".", "x3Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ",", "o_index", "=", "3", ")", "\n", "", "self", ".", "loss", "=", "self", ".", "loss_FDA", "(", ")", "\n", "# self.learning_rate = tf.placeholder(tf.float32, name='learning_rate')", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d": [[71, 75], ["tensorflow.nn.conv2d", "tensorflow.nn.bias_add", "tensorflow.nn.relu"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu"], ["", "", "def", "conv2d", "(", "self", ",", "x", ",", "W", ",", "b", ",", "strides", "=", "1", ")", ":", "\n", "        ", "x", "=", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "W", ",", "strides", "=", "[", "1", ",", "strides", ",", "strides", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "x", "=", "tf", ".", "nn", ".", "bias_add", "(", "x", ",", "b", ")", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d": [[76, 78], ["tensorflow.nn.max_pool"], "methods", ["None"], ["", "def", "maxpool2d", "(", "self", ",", "x", ",", "k", "=", "2", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "max_pool", "(", "x", ",", "ksize", "=", "[", "1", ",", "k", ",", "k", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "k", ",", "k", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net": [[79, 96], ["CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "tensorflow.reshape", "tensorflow.add", "tensorflow.add", "tensorflow.matmul", "tensorflow.matmul", "weights[].get_shape().as_list", "weights[].get_shape"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d"], ["", "def", "conv_net", "(", "self", ",", "x", ",", "weights", ",", "biases", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv2d", "(", "x", ",", "weights", "[", "'wc1'", "]", ",", "biases", "[", "'bc1'", "]", ")", "\n", "conv1", "=", "tf", ".", "nn", ".", "relu", "(", "conv1", ")", "\n", "conv1", "=", "self", ".", "maxpool2d", "(", "conv1", ",", "k", "=", "2", ")", "\n", "conv2", "=", "self", ".", "conv2d", "(", "conv1", ",", "weights", "[", "'wc2'", "]", ",", "biases", "[", "'bc2'", "]", ")", "\n", "conv2", "=", "tf", ".", "nn", ".", "relu", "(", "conv2", ")", "\n", "conv2", "=", "self", ".", "maxpool2d", "(", "conv2", ",", "k", "=", "2", ")", "\n", "conv3", "=", "self", ".", "conv2d", "(", "conv2", ",", "weights", "[", "'wc3'", "]", ",", "biases", "[", "'bc3'", "]", ")", "\n", "conv3", "=", "tf", ".", "nn", ".", "relu", "(", "conv3", ")", "\n", "conv3", "=", "self", ".", "maxpool2d", "(", "conv3", ",", "k", "=", "2", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "conv3", ",", "[", "-", "1", ",", "weights", "[", "'wd1'", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "]", ")", "\n", "fc1", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "fc1", ",", "weights", "[", "'wd1'", "]", ")", ",", "biases", "[", "'bd1'", "]", ")", "\n", "# fc1 = tf.nn.relu(fc1)", "\n", "# fc1 = tf.nn.sigmoid(fc1)", "\n", "# finally we multiply the fully connected layer with the weights and add a bias term.", "\n", "out", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "fc1", ",", "weights", "[", "'out'", "]", ")", ",", "biases", "[", "'out'", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net_FDA": [[97, 121], ["CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "tensorflow.reshape", "tensorflow.add", "tensorflow.add", "tensorflow.matmul", "tensorflow.matmul", "weights[].get_shape().as_list", "weights[].get_shape"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d"], ["", "def", "conv_net_FDA", "(", "self", ",", "x", ",", "weights", ",", "biases", ",", "o_index", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv2d", "(", "x", ",", "weights", "[", "'wc1'", "]", ",", "biases", "[", "'bc1'", "]", ")", "\n", "conv1", "=", "tf", ".", "nn", ".", "relu", "(", "conv1", ")", "\n", "conv1", "=", "self", ".", "maxpool2d", "(", "conv1", ",", "k", "=", "2", ")", "\n", "conv2", "=", "self", ".", "conv2d", "(", "conv1", ",", "weights", "[", "'wc2'", "]", ",", "biases", "[", "'bc2'", "]", ")", "\n", "conv2", "=", "tf", ".", "nn", ".", "relu", "(", "conv2", ")", "\n", "conv2", "=", "self", ".", "maxpool2d", "(", "conv2", ",", "k", "=", "2", ")", "\n", "conv3", "=", "self", ".", "conv2d", "(", "conv2", ",", "weights", "[", "'wc3'", "]", ",", "biases", "[", "'bc3'", "]", ")", "\n", "conv3", "=", "tf", ".", "nn", ".", "relu", "(", "conv3", ")", "\n", "conv3", "=", "self", ".", "maxpool2d", "(", "conv3", ",", "k", "=", "2", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "conv3", ",", "[", "-", "1", ",", "weights", "[", "'wd1'", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "]", ")", "\n", "fc1", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "fc1", ",", "weights", "[", "'wd1'", "]", ")", ",", "biases", "[", "'bd1'", "]", ")", "\n", "if", "o_index", "==", "1", ":", "\n", "            ", "self", ".", "o1_output_oneToLastLayer", "=", "fc1", "\n", "", "elif", "o_index", "==", "2", ":", "\n", "            ", "self", ".", "o2_output_oneToLastLayer", "=", "fc1", "\n", "", "elif", "o_index", "==", "3", ":", "\n", "            ", "self", ".", "o3_output_oneToLastLayer", "=", "fc1", "\n", "# fc1 = tf.nn.relu(fc1)", "\n", "# fc1 = tf.nn.sigmoid(fc1)", "\n", "# finally we multiply the fully connected layer with the weights and add a bias term.", "\n", "", "out", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "fc1", ",", "weights", "[", "'out'", "]", ")", ",", "biases", "[", "'out'", "]", ")", "\n", "self", ".", "weights_lastLayer", "=", "weights", "[", "'out'", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.CNN_Siamese.CNN_Siamese.loss_with_spring": [[138, 146], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square"], "methods", ["None"], ["", "def", "loss_with_spring", "(", "self", ")", ":", "\n", "        ", "d_pos", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "o1", "-", "self", ".", "o2", ")", ",", "1", ")", "\n", "d_neg", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "o1", "-", "self", ".", "o3", ")", ",", "1", ")", "\n", "\n", "loss", "=", "tf", ".", "maximum", "(", "0.", ",", "self", ".", "margin_in_loss", "+", "d_pos", "-", "d_neg", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_Siamese_TCGA_Source_CRC_Target.CNN_Siamese.CNN_Siamese.loss_FDA": [[147, 181], ["tensorflow.transpose", "tensorflow.linalg.matmul", "tensorflow.transpose", "tensorflow.linalg.matmul", "tensorflow.linalg.matmul", "tensorflow.linalg.matmul", "tensorflow.linalg.trace", "tensorflow.linalg.matmul", "tensorflow.linalg.matmul", "tensorflow.linalg.trace", "tensorflow.math.maximum", "tensorflow.reduce_mean", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "loss_FDA", "(", "self", ")", ":", "\n", "# margin = 0.2", "\n", "# margin = 0.25", "\n", "        ", "margin", "=", "10", "\n", "\n", "# calculation of within scatter:", "\n", "temp1", "=", "self", ".", "o1_output_oneToLastLayer", "-", "self", ".", "o2_output_oneToLastLayer", "\n", "temp1", "=", "tf", ".", "transpose", "(", "temp1", ")", "# --> becomes: rows are features and columns are samples of batch", "\n", "S_within", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "temp1", ",", "b", "=", "tf", ".", "transpose", "(", "temp1", ")", ")", "\n", "\n", "# calculation of between scatter:", "\n", "temp2", "=", "self", ".", "o1_output_oneToLastLayer", "-", "self", ".", "o3_output_oneToLastLayer", "\n", "temp2", "=", "tf", ".", "transpose", "(", "temp2", ")", "# --> becomes: rows are features and columns are samples of batch", "\n", "S_between", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "temp2", ",", "b", "=", "tf", ".", "transpose", "(", "temp2", ")", ")", "\n", "\n", "# calculation of variance of projection considering within scatter:", "\n", "temp3", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "tf", ".", "transpose", "(", "self", ".", "weights_lastLayer", ")", ",", "b", "=", "S_within", ")", "\n", "temp3", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "temp3", ",", "b", "=", "self", ".", "weights_lastLayer", ")", "\n", "within_scatter_term", "=", "tf", ".", "linalg", ".", "trace", "(", "temp3", ")", "\n", "\n", "# calculation of variance of projection considering between scatter:", "\n", "temp4", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "tf", ".", "transpose", "(", "self", ".", "weights_lastLayer", ")", ",", "b", "=", "S_between", ")", "\n", "temp4", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "temp4", ",", "b", "=", "self", ".", "weights_lastLayer", ")", "\n", "between_scatter_term", "=", "tf", ".", "linalg", ".", "trace", "(", "temp4", ")", "\n", "\n", "# calculation of loss:", "\n", "loss", "=", "tf", ".", "math", ".", "maximum", "(", "0.", ",", "margin", "+", "within_scatter_term", "-", "between_scatter_term", ")", "\n", "# loss = within_scatter_term - between_scatter_term + margin", "\n", "# loss = (within_scatter_term) / (between_scatter_term)", "\n", "# loss = (within_scatter_term + margin) / (between_scatter_term)", "\n", "# loss = (within_scatter_term) / (between_scatter_term - margin)", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.main": [[17, 33], ["main.crop_images", "main.divide_images_to_train_and_test_sets", "main.make_numpy_and_tfrecord"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.crop_images", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.divide_images_to_train_and_test_sets", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.make_numpy_and_tfrecord"], ["#================================ settings:", "\n", "    ", "train_the_source_domain", "=", "False", "\n", "train_the_target_domain", "=", "True", "\n", "assert", "train_the_source_domain", "!=", "train_the_target_domain", "\n", "deep_model", "=", "\"ResNet\"", "#--> \"CNN\", \"ResNet\"", "\n", "loss_type", "=", "\"triplet\"", "#--> \"triplet\", \"FDA\"", "\n", "n_res_blocks", "=", "18", "#--> 18, 34, 50, 101, 152", "\n", "batch_size", "=", "32", "\n", "learning_rate", "=", "0.00001", "\n", "margin_in_loss", "=", "0.25", "\n", "feature_space_dimension", "=", "128", "\n", "path_save_network_model", "=", "\".\\\\network_model\\\\\"", "+", "deep_model", "+", "\"\\\\\"", "\n", "model_dir_", "=", "model_dir", "(", "model_name", "=", "deep_model", ",", "n_res_blocks", "=", "n_res_blocks", ",", "batch_size", "=", "batch_size", ",", "learning_rate", "=", "learning_rate", ")", "\n", "#================================ ", "\n", "if", "train_the_source_domain", ":", "\n", "        ", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "", "if", "train_the_target_domain", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.crop_images": [[34, 44], ["print", "main.read_images", "enumerate", "numpy.array", "main.save_numpy", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.read_images", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy"], ["        ", "batch_size", "=", "500", "\n", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "\n", "\n", "", "", "def", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n", "#================================ settings:", "\n", "    ", "path_dataset_of_target_space", "=", "\"D:\\\\Datasets\\\\Kather_train_test\\\\test\"", "\n", "path_save_embeddings_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_test_set\\\\\"", "\n", "path_save_accuracy_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\accuracy_test_set\\\\\"", "\n", "proportions", "=", "[", "0.04", ",", "0.08", ",", "0.12", ",", "0.16", ",", "0.20", ",", "0.40", ",", "0.60", ",", "0.80", ",", "1", "]", "\n", "#================================ ", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.divide_images_to_train_and_test_sets": [[45, 58], ["print", "main.count_files_in_folder", "numpy.random.permutation", "int", "int", "numpy.load", "main.save_numpy", "numpy.load", "main.save_numpy", "len", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.count_files_in_folder", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy"], ["# Siamese:", "\n", "loss_type", "=", "\"triplet\"", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n", "        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "False", ")", "\n", "", "target_domain", "=", "Target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ")", "\n", "batches", ",", "batches_subtypes", "=", "target_domain", ".", "read_data_into_batches", "(", "path_dataset", "=", "path_dataset_of_target_space", ")", "\n", "embedding", ",", "subtypes", "=", "target_domain", ".", "embed_data_in_the_source_domain", "(", "batches", ",", "batches_subtypes", ",", "siamese", ",", "path_save_embeddings_of_test_data", ")", "\n", "# target_domain.classification_in_target_domain(X=embedding, y=subtypes, path_save_accuracy_of_test_data=path_save_accuracy_of_test_data, cv=10)", "\n", "target_domain", ".", "classification_in_target_domain_different_data_portions", "(", "X", "=", "embedding", ",", "y", "=", "subtypes", ",", "path_save_accuracy_of_test_data", "=", "path_save_accuracy_of_test_data", ",", "\n", "proportions", "=", "proportions", ",", "cv", "=", "10", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.make_numpy_and_tfrecord": [[59, 71], ["glob.glob", "len", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "tensorflow.io.TFRecordWriter", "range", "main.save_image_as_numpy", "main.save_image_as_tfrecord", "print", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.save_image_as_numpy", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.save_image_as_tfrecord"], ["", "def", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n", "#================================ settings:", "\n", "    ", "save_plot_embedding_space", "=", "True", "\n", "save_points_in_embedding_space", "=", "True", "\n", "load_saved_network_model", "=", "False", "\n", "num_epoch", "=", "300", "\n", "save_network_model_every_how_many_epochs", "=", "10", "\n", "save_embedding_every_how_many_epochs", "=", "10", "\n", "STEPS_PER_EPOCH_TRAIN", "=", "704", "\n", "n_samples_plot", "=", "2000", "#--> if None, plot all", "\n", "# path_tfrecords_train = 'D:\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "# path_tfrecords_train = '.\\\\..\\\\..\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "path_tfrecords_train", "=", "'D:\\\\TCGA_triplets\\\\tfrecord\\\\triplets.tfrecords'", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.save_image_as_numpy": [[72, 78], ["numpy.load", "main.save_numpy", "main.save_numpy", "image_path.split", "tissue_type_list.index", "str", "numpy.array", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy"], ["path_save_embedding_space", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_train_set\\\\\"", "\n", "path_save_loss", "=", "\".\\\\loss_saved\\\\\"", "\n", "#================================ ", "\n", "\n", "train_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "[", "path_tfrecords_train", "]", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "parse_function", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "normalize_triplets", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.save_image_as_tfrecord": [[79, 95], ["numpy.load", "np.load.tostring", "tensorflow.train.Features", "tensorflow.train.Example", "tf.train.Example.SerializeToString", "writer.write", "image_path.split", "tissue_type_list.index", "main.wrap_bytes", "main.wrap_int64"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_bytes", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_int64"], ["\n", "num_repeat", "=", "None", "\n", "train_dataset", "=", "train_dataset", ".", "repeat", "(", "num_repeat", ")", "\n", "train_dataset", "=", "train_dataset", ".", "shuffle", "(", "buffer_size", "=", "1024", ")", "\n", "train_dataset", "=", "train_dataset", ".", "batch", "(", "batch_size", ")", "\n", "handle", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "[", "]", ")", "\n", "iterator", "=", "tf", ".", "data", ".", "Iterator", ".", "from_string_handle", "(", "handle", ",", "train_dataset", ".", "output_types", ",", "\n", "train_dataset", ".", "output_shapes", ")", "\n", "\n", "next_element", "=", "iterator", ".", "get_next", "(", ")", "\n", "# training_iterator = train_dataset.make_initializable_iterator()", "\n", "training_iterator", "=", "tf", ".", "data", ".", "make_initializable_iterator", "(", "train_dataset", ")", "\n", "\n", "# Siamese:", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.count_files_in_folder": [[96, 99], ["len", "os.listdir", "os.listdir", "os.path.isfile", "os.path.isfile", "os.path.join", "os.path.join"], "function", ["None"], ["        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "True", ")", "\n", "# train_step = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(siamese.loss)", "\n", "", "train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate", ")", ".", "minimize", "(", "siamese", ".", "loss", ")", "\n", "# tf.initialize_all_variables().run()", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.save_numpy": [[100, 104], ["numpy.save", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["\n", "saver_", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.read_images": [[105, 112], ["glob.glob", "PIL.Image.open", "image_list.append"], "function", ["None"], ["sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "training_handle", "=", "sess", ".", "run", "(", "training_iterator", ".", "string_handle", "(", ")", ")", "\n", "sess", ".", "run", "(", "training_iterator", ".", "initializer", ")", "\n", "\n", "if", "load_saved_network_model", ":", "\n", "            ", "_", ",", "latest_epoch", "=", "load_network_model", "(", "saver_", "=", "saver_", ",", "session_", "=", "sess", ",", "checkpoint_dir", "=", "path_save_network_model", ",", "\n", "model_dir_", "=", "model_dir_", ",", "model_name", "=", "deep_model", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.wrap_int64": [[113, 115], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "else", ":", "\n", "            ", "latest_epoch", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.main.wrap_bytes": [[116, 118], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["", "loss_average_of_epochs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "latest_epoch", "+", "1", ",", "num_epoch", ")", ":", "\n", "            ", "losses_in_epoch", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.get_triplet_address_tiles.get_triplet_imgs": [[20, 91], ["pandas.DataFrame", "pd.DataFrame.insert", "pd.DataFrame.insert", "pd.DataFrame.insert", "pd.DataFrame.query", "numpy.array", "file.replace", "df[].sample().tolist", "glob.glob", "image_name.split", "image_name.split", "type_name.split", "image_name.split", "type_dict.keys", "df[].sample", "df[].sample().tolist.extend", "df[].sample().tolist.extend", "set", "list", "random.shuffle", "zip", "df_subtype[].sample().tolist", "df_subtype[].sample().tolist", "type_dict.values", "df[].sample().tolist.extend", "df[].sample().tolist.extend", "zip", "df[].sample().tolist", "df[].sample().tolist", "list", "random.shuffle", "zip", "df_type[].sample().tolist", "df_type[].sample().tolist", "zip", "df_subtype[].sample", "df_subtype[].sample", "df[].sample", "df[].sample", "df_type[].sample", "df_type[].sample"], "function", ["None"], ["def", "get_triplet_imgs", "(", "img_dir", ",", "img_ext", "=", "'.svs'", ",", "n_triplets", "=", "1000", ",", "sampling", "=", "\"SAME\"", ")", ":", "\n", "    ", "img_names", "=", "[", "file", ".", "replace", "(", "\"\\\\\"", ",", "\"/\"", ")", "for", "file", "in", "glob", ".", "glob", "(", "img_dir", "+", "\"**\\**\\**\\**\\**\"", "+", "img_ext", ")", "]", "\n", "type_dict", "=", "{", "\n", "\"LUAD\"", ":", "\"Lung\"", ",", "\n", "\"LUSC\"", ":", "\"Lung\"", ",", "\n", "\"MESO\"", ":", "\"Lung\"", ",", "\n", "\"ESCA\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"STAD\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"COAD\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"READ\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"PRAD\"", ":", "\"Prostate\"", ",", "\n", "\"TGCT\"", ":", "\"Prostate\"", "\n", "\n", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "{", "\"path\"", ":", "img_names", "}", ")", "\n", "type_list", "=", "[", "image_name", ".", "split", "(", "\"/\"", ")", "[", "-", "4", "]", "for", "image_name", "in", "img_names", "]", "\n", "subtype_list_interm", "=", "[", "image_name", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "for", "image_name", "in", "img_names", "]", "\n", "subtype_list", "=", "[", "type_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "for", "type_name", "in", "subtype_list_interm", "]", "\n", "test_or_train", "=", "[", "image_name", ".", "split", "(", "\"/\"", ")", "[", "-", "3", "]", "for", "image_name", "in", "img_names", "]", "\n", "\n", "df", ".", "insert", "(", "1", ",", "\"subtype\"", ",", "subtype_list", ",", "True", ")", "\n", "df", ".", "insert", "(", "2", ",", "\"type\"", ",", "type_list", ",", "True", ")", "\n", "df", ".", "insert", "(", "3", ",", "\"test_or_train\"", ",", "test_or_train", ",", "True", ")", "\n", "\n", "df", ".", "query", "(", "'test_or_train == \"Train\"'", ",", "inplace", "=", "True", ")", "\n", "\n", "del", "df", "[", "'test_or_train'", "]", "\n", "\n", "if", "sampling", "==", "\"SAME\"", ":", "\n", "        ", "sample_1", "=", "df", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ",", "random_state", "=", "42", ")", ".", "tolist", "(", ")", "\n", "img_triplets", "=", "[", "sample_1", ",", "sample_1", "]", "\n", "\n", "", "elif", "sampling", "==", "\"SUBTYPE\"", ":", "\n", "        ", "sample_1", "=", "[", "]", "\n", "sample_2", "=", "[", "]", "\n", "\n", "for", "subtype", "in", "type_dict", ".", "keys", "(", ")", ":", "\n", "            ", "df_subtype", "=", "df", "[", "df", "[", "\"subtype\"", "]", "==", "subtype", "]", "\n", "sample_1", ".", "extend", "(", "df_subtype", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "sample_2", ".", "extend", "(", "df_subtype", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "img_triplets", "=", "[", "sample_1", ",", "sample_2", "]", "\n", "\n", "", "elif", "sampling", "==", "\"TYPE\"", ":", "\n", "        ", "sample_1", "=", "[", "]", "\n", "sample_2", "=", "[", "]", "\n", "\n", "for", "type_", "in", "set", "(", "type_dict", ".", "values", "(", ")", ")", ":", "\n", "            ", "df_type", "=", "df", "[", "df", "[", "\"type\"", "]", "==", "type_", "]", "\n", "sample_1", ".", "extend", "(", "df_type", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "sample_2", ".", "extend", "(", "df_type", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "c", "=", "list", "(", "zip", "(", "sample_1", ",", "sample_2", ")", ")", "\n", "shuffle", "(", "c", ")", "\n", "sample_1", ",", "sample_2", "=", "zip", "(", "*", "c", ")", "\n", "img_triplets", "=", "[", "sample_1", "[", ":", "n_triplets", "]", ",", "sample_2", "[", ":", "n_triplets", "]", "]", "\n", "\n", "", "elif", "sampling", "==", "\"ALL\"", ":", "\n", "        ", "sample_1", "=", "df", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", "\n", "sample_2", "=", "df", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", "\n", "\n", "c", "=", "list", "(", "zip", "(", "sample_1", ",", "sample_2", ")", ")", "\n", "shuffle", "(", "c", ")", "\n", "sample_1", ",", "sample_2", "=", "zip", "(", "*", "c", ")", "\n", "img_triplets", "=", "[", "sample_1", "[", ":", "n_triplets", "]", ",", "sample_2", "[", ":", "n_triplets", "]", "]", "\n", "\n", "img_triplets", "=", "[", "sample_1", ",", "sample_2", "]", "\n", "\n", "", "img_triplets", "=", "np", ".", "array", "(", "img_triplets", ")", "\n", "\n", "return", "img_triplets", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.get_triplet_address_tiles.get_triplet_tiles": [[92, 134], ["numpy.unique", "pandas.DataFrame", "numpy.ones", "elem.replace().replace", "elem.replace().replace", "print", "numpy.load", "skimage.morphology.binary_erosion", "enumerate", "elem.replace", "elem.replace", "utils.sample_anchor", "utils.sample_neighbor", "print", "print", "print", "utils.sample_distant_same", "utils.sample_distant_diff", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_anchor", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_neighbor", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_distant_same", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_distant_diff"], ["", "def", "get_triplet_tiles", "(", "msk_triplets", ",", "tile_size", "=", "8", ",", "neighborhood", "=", "1024", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "n_triplets", "=", "msk_triplets", ".", "shape", "[", "0", "]", "\n", "unique_msks", "=", "np", ".", "unique", "(", "msk_triplets", ")", "\n", "\n", "img_1", "=", "[", "(", "elem", ".", "replace", "(", "\"Mask\"", ",", "\"Thumbnail\"", ")", ")", ".", "replace", "(", "\".npy\"", ",", "\".png\"", ")", "for", "elem", "in", "msk_triplets", "[", ":", ",", "0", "]", "]", "\n", "img_2", "=", "[", "(", "elem", ".", "replace", "(", "\"Mask\"", ",", "\"Thumbnail\"", ")", ")", ".", "replace", "(", "\".npy\"", ",", "\".png\"", ")", "for", "elem", "in", "msk_triplets", "[", ":", ",", "1", "]", "]", "\n", "tiles", "=", "pd", ".", "DataFrame", "(", "{", "\"img_1\"", ":", "img_1", ",", "\n", "\"img_2\"", ":", "img_2", ",", "\n", "\"anchor\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", ",", "\n", "\"neighbor\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", ",", "\n", "\"distant\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", "}", ")", "\n", "\n", "selem", "=", "np", ".", "ones", "(", "(", "tile_size", ",", "tile_size", ")", ")", "\n", "\n", "for", "msk_name", "in", "unique_msks", ":", "\n", "        ", "print", "(", "\"Sampling mask {}\"", ".", "format", "(", "msk_name", ")", ")", "\n", "msk", "=", "np", ".", "load", "(", "msk_name", ")", "\n", "msk_eroded", "=", "binary_erosion", "(", "msk", ",", "selem", ")", "\n", "msk_shape", "=", "msk_eroded", ".", "shape", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "msk_triplets", ")", ":", "\n", "            ", "if", "row", "[", "0", "]", "==", "msk_name", ":", "\n", "                ", "y_anchor", ",", "x_anchor", "=", "utils", ".", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", "\n", "y_neighbor", ",", "x_neighbor", "=", "utils", ".", "sample_neighbor", "(", "msk_shape", ",", "x_anchor", ",", "y_anchor", ",", "tile_size", ")", "\n", "if", "verbose", ":", "\n", "                    ", "print", "(", "\"    Saving anchor and neighbor tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Anchor tile center:{}\"", ".", "format", "(", "(", "y_anchor", ",", "x_anchor", ")", ")", ")", "\n", "print", "(", "\"    Neighbor tile center:{}\"", ".", "format", "(", "(", "y_neighbor", ",", "x_neighbor", ")", ")", ")", "\n", "", "tiles", "[", "\"anchor\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_anchor", ",", "x_anchor", ")", "\n", "tiles", "[", "\"neighbor\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_neighbor", ",", "x_neighbor", ")", "\n", "if", "row", "[", "1", "]", "==", "msk_name", ":", "\n", "                    ", "y_distant", ",", "x_distant", "=", "utils", ".", "sample_distant_same", "(", "msk_eroded", ",", "x_anchor", ",", "y_anchor", ",", "neighborhood", ")", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\"    Saving distant tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Distant tile center:{}\"", ".", "format", "(", "(", "y_distant", ",", "x_distant", ")", ")", ")", "\n", "", "tiles", "[", "\"distant\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_distant", ",", "x_distant", ")", "\n", "", "", "elif", "row", "[", "1", "]", "==", "msk_name", ":", "\n", "                ", "y_distant", ",", "x_distant", "=", "utils", ".", "sample_distant_diff", "(", "msk_eroded", ",", "tile_size", ")", "\n", "if", "verbose", ":", "\n", "                    ", "print", "(", "\"    Saving distant tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Distant tile center:{}\"", ".", "format", "(", "(", "y_distant", ",", "x_distant", ")", ")", ")", "\n", "", "tiles", "[", "\"distant\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_distant", ",", "x_distant", ")", "\n", "", "", "", "return", "tiles", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.get_triplet_address_tiles.main": [[135, 141], ["utils.Timer", "get_triplet_address_tiles.get_triplet_imgs", "get_triplet_address_tiles.get_triplet_tiles", "str", "get_triplet_tiles.to_csv", "time.strftime"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles - Copy.get_triplet_imgs", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles - Copy.get_triplet_tiles"], ["", "def", "main", "(", ")", ":", "\n", "    ", "with", "utils", ".", "Timer", "(", "'saving_stuff'", ")", ":", "\n", "        ", "masks", "=", "get_triplet_imgs", "(", "\"D://Datasets//TCGA\"", ",", "img_ext", "=", "'.npy'", ",", "sampling", "=", "\"ALL\"", ",", "n_triplets", "=", "75000", ")", "\n", "df", "=", "get_triplet_tiles", "(", "msk_triplets", "=", "masks", ",", "tile_size", "=", "64", ")", "\n", "file_name", "=", "str", "(", "'dataframe-'", "+", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "+", "'.csv'", ")", "\n", "df", ".", "to_csv", "(", "file_name", ")", "\n", "", "", "main", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.utils.Timer.__init__": [[63, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.utils.Timer.__enter__": [[66, 68], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.utils.Timer.__exit__": [[69, 73], ["print", "print", "time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "if", "self", ".", "name", ":", "\n", "            ", "print", "(", "'[%s]'", "%", "self", ".", "name", ",", ")", "\n", "", "print", "(", "'Elapsed: %s'", "%", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.utils.positive_or_negative": [[8, 10], ["random.random"], "function", ["None"], ["def", "positive_or_negative", "(", ")", ":", "\n", "    ", "return", "1", "if", "random", ".", "random", "(", ")", "<", "0.5", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.utils.sample_anchor": [[11, 25], ["random.choices", "numpy.asarray", "numpy.where"], "function", ["None"], ["", "def", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "counter", "=", "0", "\n", "width", ",", "height", "=", "msk_eroded", ".", "shape", "\n", "x_anchor", "=", "-", "1", "\n", "y_anchor", "=", "-", "1", "\n", "while", "x_anchor", "<", "tile_size", "or", "x_anchor", ">", "width", "-", "tile_size", "or", "y_anchor", "<", "tile_size", "or", "y_anchor", ">=", "height", "-", "tile_size", ":", "\n", "            ", "x_anchor", ",", "y_anchor", "=", "choices", "(", "np", ".", "asarray", "(", "np", ".", "where", "(", "msk_eroded", "==", "1", ")", ")", ".", "T", ")", "[", "0", "]", "\n", "counter", "+=", "1", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "y_anchor", ",", "x_anchor", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.utils.sample_neighbor": [[26, 48], ["numpy.random.randint", "utils.positive_or_negative", "numpy.random.randint", "utils.positive_or_negative"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.positive_or_negative", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.positive_or_negative"], ["", "", "def", "sample_neighbor", "(", "msk_shape", ",", "x_anchor", ",", "y_anchor", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "width", ",", "height", "=", "msk_shape", "\n", "x_neighbor", ",", "y_neighbor", "=", "-", "1", ",", "-", "1", "\n", "if", "x_anchor", "==", "None", "or", "y_anchor", "==", "None", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "counter", "=", "0", "\n", "while", "x_neighbor", "<", "tile_size", "or", "x_neighbor", ">=", "width", "-", "tile_size", ":", "\n", "            ", "counter", "=", "+", "1", "\n", "x_neighbor", "=", "np", ".", "random", ".", "randint", "(", "tile_size", "//", "2", ",", "2", "*", "tile_size", ")", "*", "positive_or_negative", "(", ")", "+", "x_anchor", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "counter", "=", "+", "0", "\n", "while", "y_neighbor", "<", "tile_size", "or", "y_neighbor", ">=", "height", "-", "tile_size", ":", "\n", "            ", "counter", "=", "+", "1", "\n", "y_neighbor", "=", "np", ".", "random", ".", "randint", "(", "tile_size", "//", "2", ",", "2", "*", "tile_size", ")", "*", "positive_or_negative", "(", ")", "+", "y_anchor", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "y_neighbor", ",", "x_neighbor", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.utils.sample_distant_same": [[49, 58], ["numpy.arange", "numpy.arange", "random.choices", "numpy.asarray", "numpy.where"], "function", ["None"], ["", "", "def", "sample_distant_same", "(", "msk_eroded", ",", "x_anchor", ",", "y_anchor", ",", "neighborhood", "=", "1024", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "0", ",", "msk_eroded", ".", "shape", "[", "1", "]", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "msk_eroded", ".", "shape", "[", "0", "]", ")", "\n", "proximity", "=", "(", "x", "[", "np", ".", "newaxis", ",", ":", "]", "-", "x_anchor", ")", "**", "2", "+", "(", "y", "[", ":", ",", "np", ".", "newaxis", "]", "-", "y_anchor", ")", "**", "2", "<", "neighborhood", "**", "2", "\n", "msk_eroded", "[", "proximity", "]", "=", "0", "\n", "return", "choices", "(", "np", ".", "asarray", "(", "np", ".", "where", "(", "msk_eroded", "==", "1", ")", ")", ".", "T", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_code_notTriplet_CRC.utils.sample_distant_diff": [[59, 61], ["utils.sample_anchor"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_anchor"], ["", "", "def", "sample_distant_diff", "(", "msk_eroded", ",", "tile_size", ")", ":", "\n", "    ", "return", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.main": [[17, 34], ["main.crop_images", "main.divide_images_to_train_and_test_sets", "main.make_triplets"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.crop_images", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.divide_images_to_train_and_test_sets", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.make_triplets"], ["#================================ settings:", "\n", "    ", "train_the_source_domain", "=", "False", "\n", "train_the_target_domain", "=", "True", "\n", "assert", "train_the_source_domain", "!=", "train_the_target_domain", "\n", "deep_model", "=", "\"ResNet\"", "#--> \"CNN\", \"ResNet\"", "\n", "loss_type", "=", "\"triplet\"", "#--> \"triplet\", \"FDA\"", "\n", "n_res_blocks", "=", "18", "#--> 18, 34, 50, 101, 152", "\n", "batch_size", "=", "32", "\n", "learning_rate", "=", "0.00001", "\n", "margin_in_loss", "=", "0.25", "\n", "feature_space_dimension", "=", "128", "\n", "path_save_network_model", "=", "\".\\\\network_model\\\\\"", "+", "deep_model", "+", "\"\\\\\"", "\n", "model_dir_", "=", "model_dir", "(", "model_name", "=", "deep_model", ",", "n_res_blocks", "=", "n_res_blocks", ",", "batch_size", "=", "batch_size", ",", "learning_rate", "=", "learning_rate", ")", "\n", "#================================ ", "\n", "if", "train_the_source_domain", ":", "\n", "        ", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "", "if", "train_the_target_domain", ":", "\n", "        ", "batch_size", "=", "500", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.crop_images": [[35, 45], ["print", "main.read_images", "enumerate", "numpy.array", "main.save_numpy", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.read_images", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy"], ["train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "\n", "\n", "", "", "def", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n", "#================================ settings:", "\n", "    ", "path_dataset_of_target_space", "=", "\"D:\\\\Datasets\\\\Kather_train_test\\\\test\"", "\n", "path_save_embeddings_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_test_set\\\\\"", "\n", "path_save_accuracy_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\accuracy_test_set\\\\\"", "\n", "proportions", "=", "[", "0.04", ",", "0.08", ",", "0.12", ",", "0.16", ",", "0.20", ",", "0.40", ",", "0.60", ",", "0.80", ",", "1", "]", "\n", "#================================ ", "\n", "# Siamese:", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.divide_images_to_train_and_test_sets": [[46, 59], ["print", "main.count_files_in_folder", "numpy.random.permutation", "int", "int", "numpy.load", "main.save_numpy", "numpy.load", "main.save_numpy", "len", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.count_files_in_folder", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy"], ["loss_type", "=", "\"triplet\"", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n", "        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "False", ")", "\n", "", "target_domain", "=", "Target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ")", "\n", "batches", ",", "batches_subtypes", "=", "target_domain", ".", "read_data_into_batches", "(", "path_dataset", "=", "path_dataset_of_target_space", ")", "\n", "embedding", ",", "subtypes", "=", "target_domain", ".", "embed_data_in_the_source_domain", "(", "batches", ",", "batches_subtypes", ",", "siamese", ",", "path_save_embeddings_of_test_data", ")", "\n", "# target_domain.classification_in_target_domain(X=embedding, y=subtypes, path_save_accuracy_of_test_data=path_save_accuracy_of_test_data, cv=10)", "\n", "target_domain", ".", "classification_in_target_domain_different_data_portions", "(", "X", "=", "embedding", ",", "y", "=", "subtypes", ",", "path_save_accuracy_of_test_data", "=", "path_save_accuracy_of_test_data", ",", "\n", "proportions", "=", "proportions", ",", "cv", "=", "10", ")", "\n", "\n", "\n", "", "def", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.make_triplets": [[60, 71], ["main.create_dataframe", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "tensorflow.io.TFRecordWriter", "range", "main.extract_one_triplet", "main.save_triplets_as_numpy", "main.save_triplets_as_tfrecord", "print", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.create_dataframe", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.extract_one_triplet", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_triplets_as_numpy", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_triplets_as_tfrecord"], ["#================================ settings:", "\n", "    ", "save_plot_embedding_space", "=", "True", "\n", "save_points_in_embedding_space", "=", "True", "\n", "load_saved_network_model", "=", "False", "\n", "num_epoch", "=", "300", "\n", "save_network_model_every_how_many_epochs", "=", "10", "\n", "save_embedding_every_how_many_epochs", "=", "10", "\n", "STEPS_PER_EPOCH_TRAIN", "=", "704", "\n", "n_samples_plot", "=", "2000", "#--> if None, plot all", "\n", "# path_tfrecords_train = 'D:\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "# path_tfrecords_train = '.\\\\..\\\\..\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "path_tfrecords_train", "=", "'D:\\\\TCGA_triplets\\\\tfrecord\\\\triplets.tfrecords'", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.create_dataframe": [[72, 79], ["glob.glob", "pandas.DataFrame", "pd.DataFrame.insert", "file_name.split"], "function", ["None"], ["path_save_embedding_space", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_train_set\\\\\"", "\n", "path_save_loss", "=", "\".\\\\loss_saved\\\\\"", "\n", "#================================ ", "\n", "\n", "train_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "[", "path_tfrecords_train", "]", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "parse_function", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "normalize_triplets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.extract_one_triplet": [[80, 93], ["len", "numpy.random.choice", "rows_of_anchors_and_neighbors.sample", "rows_of_distants.sample", "numpy.array", "rows_of_anchors_and_neighbors.sample.loc[].values.tolist", "rows_of_anchors_and_neighbors.sample.loc[].values.tolist", "rows_of_distants.sample.loc[].values.tolist", "range"], "function", ["None"], ["num_repeat", "=", "None", "\n", "train_dataset", "=", "train_dataset", ".", "repeat", "(", "num_repeat", ")", "\n", "train_dataset", "=", "train_dataset", ".", "shuffle", "(", "buffer_size", "=", "1024", ")", "\n", "train_dataset", "=", "train_dataset", ".", "batch", "(", "batch_size", ")", "\n", "handle", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "[", "]", ")", "\n", "iterator", "=", "tf", ".", "data", ".", "Iterator", ".", "from_string_handle", "(", "handle", ",", "train_dataset", ".", "output_types", ",", "\n", "train_dataset", ".", "output_shapes", ")", "\n", "\n", "next_element", "=", "iterator", ".", "get_next", "(", ")", "\n", "# training_iterator = train_dataset.make_initializable_iterator()", "\n", "training_iterator", "=", "tf", ".", "data", ".", "make_initializable_iterator", "(", "train_dataset", ")", "\n", "\n", "# Siamese:", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_triplets_as_numpy": [[94, 113], ["numpy.load", "main.save_numpy", "main.save_numpy", "numpy.load", "main.save_numpy", "main.save_numpy", "numpy.load", "main.save_numpy", "main.save_numpy", "anchor_path.split", "tissue_type_list.index", "neighbor_path.split", "tissue_type_list.index", "distant_path.split", "tissue_type_list.index", "numpy.array", "numpy.array", "numpy.array", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy"], ["        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n", "        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "True", ")", "\n", "# train_step = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(siamese.loss)", "\n", "", "train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate", ")", ".", "minimize", "(", "siamese", ".", "loss", ")", "\n", "# tf.initialize_all_variables().run()", "\n", "\n", "saver_", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "training_handle", "=", "sess", ".", "run", "(", "training_iterator", ".", "string_handle", "(", ")", ")", "\n", "sess", ".", "run", "(", "training_iterator", ".", "initializer", ")", "\n", "\n", "if", "load_saved_network_model", ":", "\n", "            ", "_", ",", "latest_epoch", "=", "load_network_model", "(", "saver_", "=", "saver_", ",", "session_", "=", "sess", ",", "checkpoint_dir", "=", "path_save_network_model", ",", "\n", "model_dir_", "=", "model_dir_", ",", "model_name", "=", "deep_model", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_triplets_as_tfrecord": [[114, 144], ["numpy.load", "np.load.tostring", "numpy.load", "np.load.tostring", "numpy.load", "np.load.tostring", "tensorflow.train.Features", "tensorflow.train.Example", "tf.train.Example.SerializeToString", "writer.write", "anchor_path.split", "tissue_type_list.index", "neighbor_path.split", "tissue_type_list.index", "distant_path.split", "tissue_type_list.index", "main.wrap_bytes", "main.wrap_bytes", "main.wrap_bytes", "main.wrap_int64", "main.wrap_int64", "main.wrap_int64"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_bytes", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_bytes", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_bytes", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_int64", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_int64", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_int64"], ["            ", "latest_epoch", "=", "-", "1", "\n", "\n", "", "loss_average_of_epochs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "latest_epoch", "+", "1", ",", "num_epoch", ")", ":", "\n", "            ", "losses_in_epoch", "=", "[", "]", "\n", "print", "(", "\"============= epoch: \"", "+", "str", "(", "epoch", ")", "+", "\"/\"", "+", "str", "(", "num_epoch", "-", "1", ")", ")", "\n", "embeddings_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", "feature_space_dimension", ")", ")", "\n", "types_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", ")", ")", "\n", "subtypes_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "STEPS_PER_EPOCH_TRAIN", ")", ":", "\n", "                ", "image_anchor", ",", "image_neighbor", ",", "image_distant", ",", "type_anchor", ",", "type_neighbor", ",", "type_distant", ",", "subtype_anchor", ",", "subtype_neighbor", ",", "subtype_distant", "=", "sess", ".", "run", "(", "next_element", ",", "\n", "feed_dict", "=", "{", "handle", ":", "training_handle", "}", ")", "\n", "\n", "image_anchor_batch_3_channels", "=", "image_anchor", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "image_neighbor_batch_3_channels", "=", "image_neighbor", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "image_distant_batch_3_channels", "=", "image_distant", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "_", ",", "loss_v", ",", "embedding1", ",", "embedding2", ",", "embedding3", "=", "sess", ".", "run", "(", "[", "train_step", ",", "siamese", ".", "loss", ",", "siamese", ".", "o1", ",", "siamese", ".", "o2", ",", "siamese", ".", "o3", "]", ",", "feed_dict", "=", "{", "\n", "siamese", ".", "x1", ":", "image_anchor_batch_3_channels", ",", "\n", "siamese", ".", "x2", ":", "image_neighbor_batch_3_channels", ",", "\n", "siamese", ".", "x3", ":", "image_distant_batch_3_channels", "}", ")", "\n", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding1", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding2", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding3", "\n", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", "]", "=", "type_anchor", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", "]", "=", "type_neighbor", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", "]", "=", "type_distant", "\n", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", "]", "=", "subtype_anchor", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.count_files_in_folder": [[145, 148], ["len", "os.listdir", "os.listdir", "os.path.isfile", "os.path.isfile", "os.path.join", "os.path.join"], "function", ["None"], ["subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", "]", "=", "subtype_neighbor", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", "]", "=", "subtype_distant", "\n", "\n", "losses_in_epoch", ".", "extend", "(", "[", "loss_v", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.save_numpy": [[149, 153], ["numpy.save", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["\n", "# report average loss of epoch:", "\n", "", "loss_average_of_epochs", ".", "append", "(", "np", ".", "average", "(", "np", ".", "asarray", "(", "losses_in_epoch", ")", ")", ")", "\n", "print", "(", "\"Average loss of epoch \"", "+", "str", "(", "epoch", ")", "+", "\": \"", "+", "str", "(", "loss_average_of_epochs", "[", "-", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_loss", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.read_images": [[154, 161], ["glob.glob", "PIL.Image.open", "image_list.append"], "function", ["None"], ["                ", "os", ".", "makedirs", "(", "path_save_loss", ")", "\n", "", "np", ".", "save", "(", "path_save_loss", "+", "\"loss.npy\"", ",", "np", ".", "asarray", "(", "loss_average_of_epochs", ")", ")", "\n", "\n", "# plot the embedding space:", "\n", "if", "(", "epoch", "%", "save_embedding_every_how_many_epochs", "==", "0", ")", ":", "\n", "                ", "if", "save_points_in_embedding_space", ":", "\n", "                    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embedding_space", "+", "\"numpy\\\\\"", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "path_save_embedding_space", "+", "\"numpy\\\\\"", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.wrap_int64": [[162, 164], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\embeddings_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "embeddings_in_epoch", ")", "\n", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\types_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "types_in_epoch", ")", "\n", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\subtypes_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "subtypes_in_epoch", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.main.wrap_bytes": [[165, 167], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["", "if", "save_plot_embedding_space", ":", "\n", "                    ", "print", "(", "\"saving the plot of embedding space....\"", ")", "\n", "plt", ".", "figure", "(", "200", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.get_triplet_address_tiles.get_triplet_imgs": [[20, 91], ["pandas.DataFrame", "pd.DataFrame.insert", "pd.DataFrame.insert", "pd.DataFrame.insert", "pd.DataFrame.query", "numpy.array", "file.replace", "df[].sample().tolist", "glob.glob", "image_name.split", "image_name.split", "type_name.split", "image_name.split", "type_dict.keys", "df[].sample", "df[].sample().tolist.extend", "df[].sample().tolist.extend", "set", "list", "random.shuffle", "zip", "df_subtype[].sample().tolist", "df_subtype[].sample().tolist", "type_dict.values", "df[].sample().tolist.extend", "df[].sample().tolist.extend", "zip", "df[].sample().tolist", "df[].sample().tolist", "list", "random.shuffle", "zip", "df_type[].sample().tolist", "df_type[].sample().tolist", "zip", "df_subtype[].sample", "df_subtype[].sample", "df[].sample", "df[].sample", "df_type[].sample", "df_type[].sample"], "function", ["None"], ["def", "get_triplet_imgs", "(", "img_dir", ",", "img_ext", "=", "'.svs'", ",", "n_triplets", "=", "1000", ",", "sampling", "=", "\"SAME\"", ")", ":", "\n", "    ", "img_names", "=", "[", "file", ".", "replace", "(", "\"\\\\\"", ",", "\"/\"", ")", "for", "file", "in", "glob", ".", "glob", "(", "img_dir", "+", "\"**\\**\\**\\**\\**\"", "+", "img_ext", ")", "]", "\n", "type_dict", "=", "{", "\n", "\"LUAD\"", ":", "\"Lung\"", ",", "\n", "\"LUSC\"", ":", "\"Lung\"", ",", "\n", "\"MESO\"", ":", "\"Lung\"", ",", "\n", "\"ESCA\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"STAD\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"COAD\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"READ\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"PRAD\"", ":", "\"Prostate\"", ",", "\n", "\"TGCT\"", ":", "\"Prostate\"", "\n", "\n", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "{", "\"path\"", ":", "img_names", "}", ")", "\n", "type_list", "=", "[", "image_name", ".", "split", "(", "\"/\"", ")", "[", "-", "4", "]", "for", "image_name", "in", "img_names", "]", "\n", "subtype_list_interm", "=", "[", "image_name", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "for", "image_name", "in", "img_names", "]", "\n", "subtype_list", "=", "[", "type_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "for", "type_name", "in", "subtype_list_interm", "]", "\n", "test_or_train", "=", "[", "image_name", ".", "split", "(", "\"/\"", ")", "[", "-", "3", "]", "for", "image_name", "in", "img_names", "]", "\n", "\n", "df", ".", "insert", "(", "1", ",", "\"subtype\"", ",", "subtype_list", ",", "True", ")", "\n", "df", ".", "insert", "(", "2", ",", "\"type\"", ",", "type_list", ",", "True", ")", "\n", "df", ".", "insert", "(", "3", ",", "\"test_or_train\"", ",", "test_or_train", ",", "True", ")", "\n", "\n", "df", ".", "query", "(", "'test_or_train == \"Train\"'", ",", "inplace", "=", "True", ")", "\n", "\n", "del", "df", "[", "'test_or_train'", "]", "\n", "\n", "if", "sampling", "==", "\"SAME\"", ":", "\n", "        ", "sample_1", "=", "df", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ",", "random_state", "=", "42", ")", ".", "tolist", "(", ")", "\n", "img_triplets", "=", "[", "sample_1", ",", "sample_1", "]", "\n", "\n", "", "elif", "sampling", "==", "\"SUBTYPE\"", ":", "\n", "        ", "sample_1", "=", "[", "]", "\n", "sample_2", "=", "[", "]", "\n", "\n", "for", "subtype", "in", "type_dict", ".", "keys", "(", ")", ":", "\n", "            ", "df_subtype", "=", "df", "[", "df", "[", "\"subtype\"", "]", "==", "subtype", "]", "\n", "sample_1", ".", "extend", "(", "df_subtype", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "sample_2", ".", "extend", "(", "df_subtype", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "img_triplets", "=", "[", "sample_1", ",", "sample_2", "]", "\n", "\n", "", "elif", "sampling", "==", "\"TYPE\"", ":", "\n", "        ", "sample_1", "=", "[", "]", "\n", "sample_2", "=", "[", "]", "\n", "\n", "for", "type_", "in", "set", "(", "type_dict", ".", "values", "(", ")", ")", ":", "\n", "            ", "df_type", "=", "df", "[", "df", "[", "\"type\"", "]", "==", "type_", "]", "\n", "sample_1", ".", "extend", "(", "df_type", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "sample_2", ".", "extend", "(", "df_type", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "c", "=", "list", "(", "zip", "(", "sample_1", ",", "sample_2", ")", ")", "\n", "shuffle", "(", "c", ")", "\n", "sample_1", ",", "sample_2", "=", "zip", "(", "*", "c", ")", "\n", "img_triplets", "=", "[", "sample_1", "[", ":", "n_triplets", "]", ",", "sample_2", "[", ":", "n_triplets", "]", "]", "\n", "\n", "", "elif", "sampling", "==", "\"ALL\"", ":", "\n", "        ", "sample_1", "=", "df", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", "\n", "sample_2", "=", "df", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", "\n", "\n", "c", "=", "list", "(", "zip", "(", "sample_1", ",", "sample_2", ")", ")", "\n", "shuffle", "(", "c", ")", "\n", "sample_1", ",", "sample_2", "=", "zip", "(", "*", "c", ")", "\n", "img_triplets", "=", "[", "sample_1", "[", ":", "n_triplets", "]", ",", "sample_2", "[", ":", "n_triplets", "]", "]", "\n", "\n", "img_triplets", "=", "[", "sample_1", ",", "sample_2", "]", "\n", "\n", "", "img_triplets", "=", "np", ".", "array", "(", "img_triplets", ")", "\n", "\n", "return", "img_triplets", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.get_triplet_address_tiles.get_triplet_tiles": [[92, 134], ["numpy.unique", "pandas.DataFrame", "numpy.ones", "elem.replace().replace", "elem.replace().replace", "print", "numpy.load", "skimage.morphology.binary_erosion", "enumerate", "elem.replace", "elem.replace", "utils.sample_anchor", "utils.sample_neighbor", "print", "print", "print", "utils.sample_distant_same", "utils.sample_distant_diff", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_anchor", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_neighbor", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_distant_same", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_distant_diff"], ["", "def", "get_triplet_tiles", "(", "msk_triplets", ",", "tile_size", "=", "8", ",", "neighborhood", "=", "1024", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "n_triplets", "=", "msk_triplets", ".", "shape", "[", "0", "]", "\n", "unique_msks", "=", "np", ".", "unique", "(", "msk_triplets", ")", "\n", "\n", "img_1", "=", "[", "(", "elem", ".", "replace", "(", "\"Mask\"", ",", "\"Thumbnail\"", ")", ")", ".", "replace", "(", "\".npy\"", ",", "\".png\"", ")", "for", "elem", "in", "msk_triplets", "[", ":", ",", "0", "]", "]", "\n", "img_2", "=", "[", "(", "elem", ".", "replace", "(", "\"Mask\"", ",", "\"Thumbnail\"", ")", ")", ".", "replace", "(", "\".npy\"", ",", "\".png\"", ")", "for", "elem", "in", "msk_triplets", "[", ":", ",", "1", "]", "]", "\n", "tiles", "=", "pd", ".", "DataFrame", "(", "{", "\"img_1\"", ":", "img_1", ",", "\n", "\"img_2\"", ":", "img_2", ",", "\n", "\"anchor\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", ",", "\n", "\"neighbor\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", ",", "\n", "\"distant\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", "}", ")", "\n", "\n", "selem", "=", "np", ".", "ones", "(", "(", "tile_size", ",", "tile_size", ")", ")", "\n", "\n", "for", "msk_name", "in", "unique_msks", ":", "\n", "        ", "print", "(", "\"Sampling mask {}\"", ".", "format", "(", "msk_name", ")", ")", "\n", "msk", "=", "np", ".", "load", "(", "msk_name", ")", "\n", "msk_eroded", "=", "binary_erosion", "(", "msk", ",", "selem", ")", "\n", "msk_shape", "=", "msk_eroded", ".", "shape", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "msk_triplets", ")", ":", "\n", "            ", "if", "row", "[", "0", "]", "==", "msk_name", ":", "\n", "                ", "y_anchor", ",", "x_anchor", "=", "utils", ".", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", "\n", "y_neighbor", ",", "x_neighbor", "=", "utils", ".", "sample_neighbor", "(", "msk_shape", ",", "x_anchor", ",", "y_anchor", ",", "tile_size", ")", "\n", "if", "verbose", ":", "\n", "                    ", "print", "(", "\"    Saving anchor and neighbor tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Anchor tile center:{}\"", ".", "format", "(", "(", "y_anchor", ",", "x_anchor", ")", ")", ")", "\n", "print", "(", "\"    Neighbor tile center:{}\"", ".", "format", "(", "(", "y_neighbor", ",", "x_neighbor", ")", ")", ")", "\n", "", "tiles", "[", "\"anchor\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_anchor", ",", "x_anchor", ")", "\n", "tiles", "[", "\"neighbor\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_neighbor", ",", "x_neighbor", ")", "\n", "if", "row", "[", "1", "]", "==", "msk_name", ":", "\n", "                    ", "y_distant", ",", "x_distant", "=", "utils", ".", "sample_distant_same", "(", "msk_eroded", ",", "x_anchor", ",", "y_anchor", ",", "neighborhood", ")", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\"    Saving distant tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Distant tile center:{}\"", ".", "format", "(", "(", "y_distant", ",", "x_distant", ")", ")", ")", "\n", "", "tiles", "[", "\"distant\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_distant", ",", "x_distant", ")", "\n", "", "", "elif", "row", "[", "1", "]", "==", "msk_name", ":", "\n", "                ", "y_distant", ",", "x_distant", "=", "utils", ".", "sample_distant_diff", "(", "msk_eroded", ",", "tile_size", ")", "\n", "if", "verbose", ":", "\n", "                    ", "print", "(", "\"    Saving distant tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Distant tile center:{}\"", ".", "format", "(", "(", "y_distant", ",", "x_distant", ")", ")", ")", "\n", "", "tiles", "[", "\"distant\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_distant", ",", "x_distant", ")", "\n", "", "", "", "return", "tiles", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.get_triplet_address_tiles.main": [[135, 141], ["utils.Timer", "get_triplet_address_tiles.get_triplet_imgs", "get_triplet_address_tiles.get_triplet_tiles", "str", "get_triplet_tiles.to_csv", "time.strftime"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles - Copy.get_triplet_imgs", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles - Copy.get_triplet_tiles"], ["", "def", "main", "(", ")", ":", "\n", "    ", "with", "utils", ".", "Timer", "(", "'saving_stuff'", ")", ":", "\n", "        ", "masks", "=", "get_triplet_imgs", "(", "\"D://Datasets//TCGA\"", ",", "img_ext", "=", "'.npy'", ",", "sampling", "=", "\"ALL\"", ",", "n_triplets", "=", "75000", ")", "\n", "df", "=", "get_triplet_tiles", "(", "msk_triplets", "=", "masks", ",", "tile_size", "=", "64", ")", "\n", "file_name", "=", "str", "(", "'dataframe-'", "+", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "+", "'.csv'", ")", "\n", "df", ".", "to_csv", "(", "file_name", ")", "\n", "", "", "main", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.utils.Timer.__init__": [[63, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.utils.Timer.__enter__": [[66, 68], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.utils.Timer.__exit__": [[69, 73], ["print", "print", "time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "if", "self", ".", "name", ":", "\n", "            ", "print", "(", "'[%s]'", "%", "self", ".", "name", ",", ")", "\n", "", "print", "(", "'Elapsed: %s'", "%", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.utils.positive_or_negative": [[8, 10], ["random.random"], "function", ["None"], ["def", "positive_or_negative", "(", ")", ":", "\n", "    ", "return", "1", "if", "random", ".", "random", "(", ")", "<", "0.5", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.utils.sample_anchor": [[11, 25], ["random.choices", "numpy.asarray", "numpy.where"], "function", ["None"], ["", "def", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "counter", "=", "0", "\n", "width", ",", "height", "=", "msk_eroded", ".", "shape", "\n", "x_anchor", "=", "-", "1", "\n", "y_anchor", "=", "-", "1", "\n", "while", "x_anchor", "<", "tile_size", "or", "x_anchor", ">", "width", "-", "tile_size", "or", "y_anchor", "<", "tile_size", "or", "y_anchor", ">=", "height", "-", "tile_size", ":", "\n", "            ", "x_anchor", ",", "y_anchor", "=", "choices", "(", "np", ".", "asarray", "(", "np", ".", "where", "(", "msk_eroded", "==", "1", ")", ")", ".", "T", ")", "[", "0", "]", "\n", "counter", "+=", "1", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "y_anchor", ",", "x_anchor", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.utils.sample_neighbor": [[26, 48], ["numpy.random.randint", "utils.positive_or_negative", "numpy.random.randint", "utils.positive_or_negative"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.positive_or_negative", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.positive_or_negative"], ["", "", "def", "sample_neighbor", "(", "msk_shape", ",", "x_anchor", ",", "y_anchor", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "width", ",", "height", "=", "msk_shape", "\n", "x_neighbor", ",", "y_neighbor", "=", "-", "1", ",", "-", "1", "\n", "if", "x_anchor", "==", "None", "or", "y_anchor", "==", "None", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "counter", "=", "0", "\n", "while", "x_neighbor", "<", "tile_size", "or", "x_neighbor", ">=", "width", "-", "tile_size", ":", "\n", "            ", "counter", "=", "+", "1", "\n", "x_neighbor", "=", "np", ".", "random", ".", "randint", "(", "tile_size", "//", "2", ",", "2", "*", "tile_size", ")", "*", "positive_or_negative", "(", ")", "+", "x_anchor", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "counter", "=", "+", "0", "\n", "while", "y_neighbor", "<", "tile_size", "or", "y_neighbor", ">=", "height", "-", "tile_size", ":", "\n", "            ", "counter", "=", "+", "1", "\n", "y_neighbor", "=", "np", ".", "random", ".", "randint", "(", "tile_size", "//", "2", ",", "2", "*", "tile_size", ")", "*", "positive_or_negative", "(", ")", "+", "y_anchor", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "y_neighbor", ",", "x_neighbor", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.utils.sample_distant_same": [[49, 58], ["numpy.arange", "numpy.arange", "random.choices", "numpy.asarray", "numpy.where"], "function", ["None"], ["", "", "def", "sample_distant_same", "(", "msk_eroded", ",", "x_anchor", ",", "y_anchor", ",", "neighborhood", "=", "1024", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "0", ",", "msk_eroded", ".", "shape", "[", "1", "]", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "msk_eroded", ".", "shape", "[", "0", "]", ")", "\n", "proximity", "=", "(", "x", "[", "np", ".", "newaxis", ",", ":", "]", "-", "x_anchor", ")", "**", "2", "+", "(", "y", "[", ":", ",", "np", ".", "newaxis", "]", "-", "y_anchor", ")", "**", "2", "<", "neighborhood", "**", "2", "\n", "msk_eroded", "[", "proximity", "]", "=", "0", "\n", "return", "choices", "(", "np", ".", "asarray", "(", "np", ".", "where", "(", "msk_eroded", "==", "1", ")", ")", ".", "T", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_code_triplet_CRC.utils.sample_distant_diff": [[59, 61], ["utils.sample_anchor"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_anchor"], ["", "", "def", "sample_distant_diff", "(", "msk_eroded", ",", "tile_size", ")", ":", "\n", "    ", "return", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles.get_triplet_imgs": [[20, 91], ["pandas.DataFrame", "pd.DataFrame.insert", "pd.DataFrame.insert", "pd.DataFrame.insert", "pd.DataFrame.query", "numpy.array", "file.replace", "df[].sample().tolist", "glob.glob", "image_name.split", "image_name.split", "type_name.split", "image_name.split", "type_dict.keys", "df[].sample", "df[].sample().tolist.extend", "df[].sample().tolist.extend", "set", "list", "random.shuffle", "zip", "df_subtype[].sample().tolist", "df_subtype[].sample().tolist", "type_dict.values", "df[].sample().tolist.extend", "df[].sample().tolist.extend", "zip", "df[].sample().tolist", "df[].sample().tolist", "list", "random.shuffle", "zip", "df_type[].sample().tolist", "df_type[].sample().tolist", "zip", "df_subtype[].sample", "df_subtype[].sample", "df[].sample", "df[].sample", "df_type[].sample", "df_type[].sample"], "function", ["None"], ["def", "get_triplet_imgs", "(", "img_dir", ",", "img_ext", "=", "'.svs'", ",", "n_triplets", "=", "1000", ",", "sampling", "=", "\"SAME\"", ")", ":", "\n", "    ", "img_names", "=", "[", "file", ".", "replace", "(", "\"\\\\\"", ",", "\"/\"", ")", "for", "file", "in", "glob", ".", "glob", "(", "img_dir", "+", "\"**\\**\\**\\**\\**\"", "+", "img_ext", ")", "]", "\n", "type_dict", "=", "{", "\n", "\"LUAD\"", ":", "\"Lung\"", ",", "\n", "\"LUSC\"", ":", "\"Lung\"", ",", "\n", "\"MESO\"", ":", "\"Lung\"", ",", "\n", "\"ESCA\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"STAD\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"COAD\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"READ\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"PRAD\"", ":", "\"Prostate\"", ",", "\n", "\"TGCT\"", ":", "\"Prostate\"", "\n", "\n", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "{", "\"path\"", ":", "img_names", "}", ")", "\n", "type_list", "=", "[", "image_name", ".", "split", "(", "\"/\"", ")", "[", "-", "4", "]", "for", "image_name", "in", "img_names", "]", "\n", "subtype_list_interm", "=", "[", "image_name", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "for", "image_name", "in", "img_names", "]", "\n", "subtype_list", "=", "[", "type_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "for", "type_name", "in", "subtype_list_interm", "]", "\n", "test_or_train", "=", "[", "image_name", ".", "split", "(", "\"/\"", ")", "[", "-", "3", "]", "for", "image_name", "in", "img_names", "]", "\n", "\n", "df", ".", "insert", "(", "1", ",", "\"subtype\"", ",", "subtype_list", ",", "True", ")", "\n", "df", ".", "insert", "(", "2", ",", "\"type\"", ",", "type_list", ",", "True", ")", "\n", "df", ".", "insert", "(", "3", ",", "\"test_or_train\"", ",", "test_or_train", ",", "True", ")", "\n", "\n", "df", ".", "query", "(", "'test_or_train == \"Train\"'", ",", "inplace", "=", "True", ")", "\n", "\n", "del", "df", "[", "'test_or_train'", "]", "\n", "\n", "if", "sampling", "==", "\"SAME\"", ":", "\n", "        ", "sample_1", "=", "df", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ",", "random_state", "=", "42", ")", ".", "tolist", "(", ")", "\n", "img_triplets", "=", "[", "sample_1", ",", "sample_1", "]", "\n", "\n", "", "elif", "sampling", "==", "\"SUBTYPE\"", ":", "\n", "        ", "sample_1", "=", "[", "]", "\n", "sample_2", "=", "[", "]", "\n", "\n", "for", "subtype", "in", "type_dict", ".", "keys", "(", ")", ":", "\n", "            ", "df_subtype", "=", "df", "[", "df", "[", "\"subtype\"", "]", "==", "subtype", "]", "\n", "sample_1", ".", "extend", "(", "df_subtype", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "sample_2", ".", "extend", "(", "df_subtype", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "img_triplets", "=", "[", "sample_1", ",", "sample_2", "]", "\n", "\n", "", "elif", "sampling", "==", "\"TYPE\"", ":", "\n", "        ", "sample_1", "=", "[", "]", "\n", "sample_2", "=", "[", "]", "\n", "\n", "for", "type_", "in", "set", "(", "type_dict", ".", "values", "(", ")", ")", ":", "\n", "            ", "df_type", "=", "df", "[", "df", "[", "\"type\"", "]", "==", "type_", "]", "\n", "sample_1", ".", "extend", "(", "df_type", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "sample_2", ".", "extend", "(", "df_type", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "c", "=", "list", "(", "zip", "(", "sample_1", ",", "sample_2", ")", ")", "\n", "shuffle", "(", "c", ")", "\n", "sample_1", ",", "sample_2", "=", "zip", "(", "*", "c", ")", "\n", "img_triplets", "=", "[", "sample_1", "[", ":", "n_triplets", "]", ",", "sample_2", "[", ":", "n_triplets", "]", "]", "\n", "\n", "", "elif", "sampling", "==", "\"ALL\"", ":", "\n", "        ", "sample_1", "=", "df", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", "\n", "sample_2", "=", "df", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", "\n", "\n", "c", "=", "list", "(", "zip", "(", "sample_1", ",", "sample_2", ")", ")", "\n", "shuffle", "(", "c", ")", "\n", "sample_1", ",", "sample_2", "=", "zip", "(", "*", "c", ")", "\n", "img_triplets", "=", "[", "sample_1", "[", ":", "n_triplets", "]", ",", "sample_2", "[", ":", "n_triplets", "]", "]", "\n", "\n", "img_triplets", "=", "[", "sample_1", ",", "sample_2", "]", "\n", "\n", "", "img_triplets", "=", "np", ".", "array", "(", "img_triplets", ")", "\n", "\n", "return", "img_triplets", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles.get_triplet_tiles": [[92, 134], ["numpy.unique", "pandas.DataFrame", "numpy.ones", "elem.replace().replace", "elem.replace().replace", "print", "numpy.load", "skimage.morphology.binary_erosion", "enumerate", "elem.replace", "elem.replace", "utils.sample_anchor", "utils.sample_neighbor", "print", "print", "print", "utils.sample_distant_same", "utils.sample_distant_diff", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_anchor", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_neighbor", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_distant_same", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_distant_diff"], ["", "def", "get_triplet_tiles", "(", "msk_triplets", ",", "tile_size", "=", "8", ",", "neighborhood", "=", "1024", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "n_triplets", "=", "msk_triplets", ".", "shape", "[", "0", "]", "\n", "unique_msks", "=", "np", ".", "unique", "(", "msk_triplets", ")", "\n", "\n", "img_1", "=", "[", "(", "elem", ".", "replace", "(", "\"Mask\"", ",", "\"Thumbnail\"", ")", ")", ".", "replace", "(", "\".npy\"", ",", "\".png\"", ")", "for", "elem", "in", "msk_triplets", "[", ":", ",", "0", "]", "]", "\n", "img_2", "=", "[", "(", "elem", ".", "replace", "(", "\"Mask\"", ",", "\"Thumbnail\"", ")", ")", ".", "replace", "(", "\".npy\"", ",", "\".png\"", ")", "for", "elem", "in", "msk_triplets", "[", ":", ",", "1", "]", "]", "\n", "tiles", "=", "pd", ".", "DataFrame", "(", "{", "\"img_1\"", ":", "img_1", ",", "\n", "\"img_2\"", ":", "img_2", ",", "\n", "\"anchor\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", ",", "\n", "\"neighbor\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", ",", "\n", "\"distant\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", "}", ")", "\n", "\n", "selem", "=", "np", ".", "ones", "(", "(", "tile_size", ",", "tile_size", ")", ")", "\n", "\n", "for", "msk_name", "in", "unique_msks", ":", "\n", "        ", "print", "(", "\"Sampling mask {}\"", ".", "format", "(", "msk_name", ")", ")", "\n", "msk", "=", "np", ".", "load", "(", "msk_name", ")", "\n", "msk_eroded", "=", "binary_erosion", "(", "msk", ",", "selem", ")", "\n", "msk_shape", "=", "msk_eroded", ".", "shape", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "msk_triplets", ")", ":", "\n", "            ", "if", "row", "[", "0", "]", "==", "msk_name", ":", "\n", "                ", "y_anchor", ",", "x_anchor", "=", "utils", ".", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", "\n", "y_neighbor", ",", "x_neighbor", "=", "utils", ".", "sample_neighbor", "(", "msk_shape", ",", "x_anchor", ",", "y_anchor", ",", "tile_size", ")", "\n", "if", "verbose", ":", "\n", "                    ", "print", "(", "\"    Saving anchor and neighbor tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Anchor tile center:{}\"", ".", "format", "(", "(", "y_anchor", ",", "x_anchor", ")", ")", ")", "\n", "print", "(", "\"    Neighbor tile center:{}\"", ".", "format", "(", "(", "y_neighbor", ",", "x_neighbor", ")", ")", ")", "\n", "", "tiles", "[", "\"anchor\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_anchor", ",", "x_anchor", ")", "\n", "tiles", "[", "\"neighbor\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_neighbor", ",", "x_neighbor", ")", "\n", "if", "row", "[", "1", "]", "==", "msk_name", ":", "\n", "                    ", "y_distant", ",", "x_distant", "=", "utils", ".", "sample_distant_same", "(", "msk_eroded", ",", "x_anchor", ",", "y_anchor", ",", "neighborhood", ")", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\"    Saving distant tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Distant tile center:{}\"", ".", "format", "(", "(", "y_distant", ",", "x_distant", ")", ")", ")", "\n", "", "tiles", "[", "\"distant\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_distant", ",", "x_distant", ")", "\n", "", "", "elif", "row", "[", "1", "]", "==", "msk_name", ":", "\n", "                ", "y_distant", ",", "x_distant", "=", "utils", ".", "sample_distant_diff", "(", "msk_eroded", ",", "tile_size", ")", "\n", "if", "verbose", ":", "\n", "                    ", "print", "(", "\"    Saving distant tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Distant tile center:{}\"", ".", "format", "(", "(", "y_distant", ",", "x_distant", ")", ")", ")", "\n", "", "tiles", "[", "\"distant\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_distant", ",", "x_distant", ")", "\n", "", "", "", "return", "tiles", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles.main": [[135, 141], ["utils.Timer", "get_triplet_address_tiles.get_triplet_imgs", "get_triplet_address_tiles.get_triplet_tiles", "str", "get_triplet_tiles.to_csv", "time.strftime"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles - Copy.get_triplet_imgs", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles - Copy.get_triplet_tiles"], ["", "def", "main", "(", ")", ":", "\n", "    ", "with", "utils", ".", "Timer", "(", "'saving_stuff'", ")", ":", "\n", "        ", "masks", "=", "get_triplet_imgs", "(", "\"D://Datasets//TCGA\"", ",", "img_ext", "=", "'.npy'", ",", "sampling", "=", "\"ALL\"", ",", "n_triplets", "=", "75000", ")", "\n", "df", "=", "get_triplet_tiles", "(", "msk_triplets", "=", "masks", ",", "tile_size", "=", "64", ")", "\n", "file_name", "=", "str", "(", "'dataframe-'", "+", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "+", "'.csv'", ")", "\n", "df", ".", "to_csv", "(", "file_name", ")", "\n", "", "", "main", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.utils.Timer.__init__": [[63, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.utils.Timer.__enter__": [[66, 68], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.utils.Timer.__exit__": [[69, 73], ["print", "print", "time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "if", "self", ".", "name", ":", "\n", "            ", "print", "(", "'[%s]'", "%", "self", ".", "name", ",", ")", "\n", "", "print", "(", "'Elapsed: %s'", "%", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.utils.positive_or_negative": [[8, 10], ["random.random"], "function", ["None"], ["def", "positive_or_negative", "(", ")", ":", "\n", "    ", "return", "1", "if", "random", ".", "random", "(", ")", "<", "0.5", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.utils.sample_anchor": [[11, 25], ["random.choices", "numpy.asarray", "numpy.where"], "function", ["None"], ["", "def", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "counter", "=", "0", "\n", "width", ",", "height", "=", "msk_eroded", ".", "shape", "\n", "x_anchor", "=", "-", "1", "\n", "y_anchor", "=", "-", "1", "\n", "while", "x_anchor", "<", "tile_size", "or", "x_anchor", ">", "width", "-", "tile_size", "or", "y_anchor", "<", "tile_size", "or", "y_anchor", ">=", "height", "-", "tile_size", ":", "\n", "            ", "x_anchor", ",", "y_anchor", "=", "choices", "(", "np", ".", "asarray", "(", "np", ".", "where", "(", "msk_eroded", "==", "1", ")", ")", ".", "T", ")", "[", "0", "]", "\n", "counter", "+=", "1", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "y_anchor", ",", "x_anchor", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.utils.sample_neighbor": [[26, 48], ["numpy.random.randint", "utils.positive_or_negative", "numpy.random.randint", "utils.positive_or_negative"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.positive_or_negative", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.positive_or_negative"], ["", "", "def", "sample_neighbor", "(", "msk_shape", ",", "x_anchor", ",", "y_anchor", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "width", ",", "height", "=", "msk_shape", "\n", "x_neighbor", ",", "y_neighbor", "=", "-", "1", ",", "-", "1", "\n", "if", "x_anchor", "==", "None", "or", "y_anchor", "==", "None", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "counter", "=", "0", "\n", "while", "x_neighbor", "<", "tile_size", "or", "x_neighbor", ">=", "width", "-", "tile_size", ":", "\n", "            ", "counter", "=", "+", "1", "\n", "x_neighbor", "=", "np", ".", "random", ".", "randint", "(", "tile_size", "//", "2", ",", "2", "*", "tile_size", ")", "*", "positive_or_negative", "(", ")", "+", "x_anchor", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "counter", "=", "+", "0", "\n", "while", "y_neighbor", "<", "tile_size", "or", "y_neighbor", ">=", "height", "-", "tile_size", ":", "\n", "            ", "counter", "=", "+", "1", "\n", "y_neighbor", "=", "np", ".", "random", ".", "randint", "(", "tile_size", "//", "2", ",", "2", "*", "tile_size", ")", "*", "positive_or_negative", "(", ")", "+", "y_anchor", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "y_neighbor", ",", "x_neighbor", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.utils.sample_distant_same": [[49, 58], ["numpy.arange", "numpy.arange", "random.choices", "numpy.asarray", "numpy.where"], "function", ["None"], ["", "", "def", "sample_distant_same", "(", "msk_eroded", ",", "x_anchor", ",", "y_anchor", ",", "neighborhood", "=", "1024", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "0", ",", "msk_eroded", ".", "shape", "[", "1", "]", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "msk_eroded", ".", "shape", "[", "0", "]", ")", "\n", "proximity", "=", "(", "x", "[", "np", ".", "newaxis", ",", ":", "]", "-", "x_anchor", ")", "**", "2", "+", "(", "y", "[", ":", ",", "np", ".", "newaxis", "]", "-", "y_anchor", ")", "**", "2", "<", "neighborhood", "**", "2", "\n", "msk_eroded", "[", "proximity", "]", "=", "0", "\n", "return", "choices", "(", "np", ".", "asarray", "(", "np", ".", "where", "(", "msk_eroded", "==", "1", ")", ")", ".", "T", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.utils.sample_distant_diff": [[59, 61], ["utils.sample_anchor"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_anchor"], ["", "", "def", "sample_distant_diff", "(", "msk_eroded", ",", "tile_size", ")", ":", "\n", "    ", "return", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles - Copy.get_triplet_imgs": [[20, 97], ["pandas.DataFrame", "pd.DataFrame.insert", "pd.DataFrame.insert", "pd.DataFrame.insert", "pd.DataFrame.query", "numpy.array", "file.replace", "pd.DataFrame.sample().tolist", "glob.glob", "image_name.split", "image_name.split", "type_name.split", "image_name.split", "type_dict.keys", "pd.DataFrame.sample", "df.sample.extend", "df.sample.extend", "set", "list", "random.shuffle", "zip", "df_subtype[].sample().tolist", "df_subtype[].sample().tolist", "type_dict.values", "df.sample.extend", "df.sample.extend", "zip", "pd.DataFrame.sample", "pd.DataFrame.sample", "sample_1[].tolist", "sample_2[].tolist", "sample_1[].tolist", "sample_2[].tolist", "list", "random.shuffle", "zip", "df_type[].sample().tolist", "df_type[].sample().tolist", "zip", "df_subtype[].sample", "df_subtype[].sample", "df_type[].sample", "df_type[].sample"], "function", ["None"], ["def", "get_triplet_imgs", "(", "img_dir", ",", "img_ext", "=", "'.svs'", ",", "n_triplets", "=", "1000", ",", "sampling", "=", "\"SAME\"", ")", ":", "\n", "    ", "img_names", "=", "[", "file", ".", "replace", "(", "\"\\\\\"", ",", "\"/\"", ")", "for", "file", "in", "glob", ".", "glob", "(", "img_dir", "+", "\"**\\**\\**\\**\\**\"", "+", "img_ext", ")", "]", "\n", "type_dict", "=", "{", "\n", "\"LUAD\"", ":", "\"Lung\"", ",", "\n", "\"LUSC\"", ":", "\"Lung\"", ",", "\n", "\"MESO\"", ":", "\"Lung\"", ",", "\n", "\"ESCA\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"STAD\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"COAD\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"READ\"", ":", "\"Gastrointestinal\"", ",", "\n", "\"PRAD\"", ":", "\"Prostate\"", ",", "\n", "\"TGCT\"", ":", "\"Prostate\"", "\n", "\n", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "{", "\"path\"", ":", "img_names", "}", ")", "\n", "type_list", "=", "[", "image_name", ".", "split", "(", "\"/\"", ")", "[", "-", "4", "]", "for", "image_name", "in", "img_names", "]", "\n", "subtype_list_interm", "=", "[", "image_name", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "for", "image_name", "in", "img_names", "]", "\n", "subtype_list", "=", "[", "type_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "for", "type_name", "in", "subtype_list_interm", "]", "\n", "test_or_train", "=", "[", "image_name", ".", "split", "(", "\"/\"", ")", "[", "-", "3", "]", "for", "image_name", "in", "img_names", "]", "\n", "\n", "df", ".", "insert", "(", "1", ",", "\"subtype\"", ",", "subtype_list", ",", "True", ")", "\n", "df", ".", "insert", "(", "2", ",", "\"type\"", ",", "type_list", ",", "True", ")", "\n", "df", ".", "insert", "(", "3", ",", "\"test_or_train\"", ",", "test_or_train", ",", "True", ")", "\n", "\n", "df", ".", "query", "(", "'test_or_train == \"Train\"'", ",", "inplace", "=", "True", ")", "\n", "\n", "del", "df", "[", "'test_or_train'", "]", "\n", "\n", "if", "sampling", "==", "\"SAME\"", ":", "\n", "        ", "sample_1", "=", "df", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ",", "random_state", "=", "42", ")", ".", "tolist", "(", ")", "\n", "path1", "=", "sample_1", "[", "\"path\"", "]", "\n", "img_triplets", "=", "[", "path1", ",", "path1", "]", "\n", "\n", "", "elif", "sampling", "==", "\"SUBTYPE\"", ":", "\n", "        ", "sample_1", "=", "[", "]", "\n", "sample_2", "=", "[", "]", "\n", "\n", "for", "subtype", "in", "type_dict", ".", "keys", "(", ")", ":", "\n", "            ", "df_subtype", "=", "df", "[", "df", "[", "\"subtype\"", "]", "==", "subtype", "]", "\n", "sample_1", ".", "extend", "(", "df_subtype", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "sample_2", ".", "extend", "(", "df_subtype", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "img_triplets", "=", "[", "sample_1", ",", "sample_2", "]", "\n", "\n", "", "elif", "sampling", "==", "\"TYPE\"", ":", "\n", "        ", "sample_1", "=", "[", "]", "\n", "sample_2", "=", "[", "]", "\n", "\n", "for", "type_", "in", "set", "(", "type_dict", ".", "values", "(", ")", ")", ":", "\n", "            ", "df_type", "=", "df", "[", "df", "[", "\"type\"", "]", "==", "type_", "]", "\n", "sample_1", ".", "extend", "(", "df_type", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "sample_2", ".", "extend", "(", "df_type", "[", "\"path\"", "]", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "c", "=", "list", "(", "zip", "(", "sample_1", ",", "sample_2", ")", ")", "\n", "shuffle", "(", "c", ")", "\n", "sample_1", ",", "sample_2", "=", "zip", "(", "*", "c", ")", "\n", "img_triplets", "=", "[", "sample_1", "[", ":", "n_triplets", "]", ",", "sample_2", "[", ":", "n_triplets", "]", "]", "\n", "\n", "", "elif", "sampling", "==", "\"ALL\"", ":", "\n", "        ", "sample_1", "=", "df", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", "\n", "sample_2", "=", "df", ".", "sample", "(", "n", "=", "n_triplets", ",", "replace", "=", "True", ")", "\n", "path1", "=", "sample_1", "[", "\"path\"", "]", ".", "tolist", "(", ")", "\n", "path2", "=", "sample_2", "[", "\"path\"", "]", ".", "tolist", "(", ")", "\n", "type1", "=", "sample_1", "[", "\"type\"", "]", ".", "tolist", "(", ")", "\n", "type2", "=", "sample_2", "[", "\"type\"", "]", ".", "tolist", "(", ")", "\n", "\n", "\n", "c", "=", "list", "(", "zip", "(", "path1", ",", "path2", ",", "type1", ",", "type2", ")", ")", "\n", "shuffle", "(", "c", ")", "\n", "path1", ",", "path2", ",", "=", "zip", "(", "*", "c", ")", "\n", "img_triplets", "=", "[", "path1", "[", ":", "n_triplets", "]", ",", "path2", "[", ":", "n_triplets", "]", "]", "\n", "\n", "img_triplets", "=", "[", "path1", ",", "path2", ",", "type1", ",", "type2", "]", "\n", "\n", "", "img_triplets", "=", "np", ".", "array", "(", "img_triplets", ")", "\n", "\n", "return", "img_triplets", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles - Copy.get_triplet_tiles": [[98, 140], ["numpy.unique", "pandas.DataFrame", "numpy.ones", "elem.replace().replace", "elem.replace().replace", "print", "numpy.load", "skimage.morphology.binary_erosion", "enumerate", "elem.replace", "elem.replace", "utils.sample_anchor", "utils.sample_neighbor", "print", "print", "print", "utils.sample_distant_same", "utils.sample_distant_diff", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_anchor", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_neighbor", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_distant_same", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_distant_diff"], ["", "def", "get_triplet_tiles", "(", "msk_triplets", ",", "tile_size", "=", "8", ",", "neighborhood", "=", "1024", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "n_triplets", "=", "msk_triplets", ".", "shape", "[", "0", "]", "\n", "unique_msks", "=", "np", ".", "unique", "(", "msk_triplets", ")", "\n", "\n", "img_1", "=", "[", "(", "elem", ".", "replace", "(", "\"Mask\"", ",", "\"Thumbnail\"", ")", ")", ".", "replace", "(", "\".npy\"", ",", "\".png\"", ")", "for", "elem", "in", "msk_triplets", "[", ":", ",", "0", "]", "]", "\n", "img_2", "=", "[", "(", "elem", ".", "replace", "(", "\"Mask\"", ",", "\"Thumbnail\"", ")", ")", ".", "replace", "(", "\".npy\"", ",", "\".png\"", ")", "for", "elem", "in", "msk_triplets", "[", ":", ",", "1", "]", "]", "\n", "tiles", "=", "pd", ".", "DataFrame", "(", "{", "\"img_1\"", ":", "img_1", ",", "\n", "\"img_2\"", ":", "img_2", ",", "\n", "\"anchor\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", ",", "\n", "\"neighbor\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", ",", "\n", "\"distant\"", ":", "[", "(", "0", ",", "0", ")", "]", "*", "n_triplets", "}", ")", "\n", "\n", "selem", "=", "np", ".", "ones", "(", "(", "tile_size", ",", "tile_size", ")", ")", "\n", "\n", "for", "msk_name", "in", "unique_msks", ":", "\n", "        ", "print", "(", "\"Sampling mask {}\"", ".", "format", "(", "msk_name", ")", ")", "\n", "msk", "=", "np", ".", "load", "(", "msk_name", ")", "\n", "msk_eroded", "=", "binary_erosion", "(", "msk", ",", "selem", ")", "\n", "msk_shape", "=", "msk_eroded", ".", "shape", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "msk_triplets", ")", ":", "\n", "            ", "if", "row", "[", "0", "]", "==", "msk_name", ":", "\n", "                ", "y_anchor", ",", "x_anchor", "=", "utils", ".", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", "\n", "y_neighbor", ",", "x_neighbor", "=", "utils", ".", "sample_neighbor", "(", "msk_shape", ",", "x_anchor", ",", "y_anchor", ",", "tile_size", ")", "\n", "if", "verbose", ":", "\n", "                    ", "print", "(", "\"    Saving anchor and neighbor tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Anchor tile center:{}\"", ".", "format", "(", "(", "y_anchor", ",", "x_anchor", ")", ")", ")", "\n", "print", "(", "\"    Neighbor tile center:{}\"", ".", "format", "(", "(", "y_neighbor", ",", "x_neighbor", ")", ")", ")", "\n", "", "tiles", "[", "\"anchor\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_anchor", ",", "x_anchor", ")", "\n", "tiles", "[", "\"neighbor\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_neighbor", ",", "x_neighbor", ")", "\n", "if", "row", "[", "1", "]", "==", "msk_name", ":", "\n", "                    ", "y_distant", ",", "x_distant", "=", "utils", ".", "sample_distant_same", "(", "msk_eroded", ",", "x_anchor", ",", "y_anchor", ",", "neighborhood", ")", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\"    Saving distant tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Distant tile center:{}\"", ".", "format", "(", "(", "y_distant", ",", "x_distant", ")", ")", ")", "\n", "", "tiles", "[", "\"distant\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_distant", ",", "x_distant", ")", "\n", "", "", "elif", "row", "[", "1", "]", "==", "msk_name", ":", "\n", "                ", "y_distant", ",", "x_distant", "=", "utils", ".", "sample_distant_diff", "(", "msk_eroded", ",", "tile_size", ")", "\n", "if", "verbose", ":", "\n", "                    ", "print", "(", "\"    Saving distant tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Distant tile center:{}\"", ".", "format", "(", "(", "y_distant", ",", "x_distant", ")", ")", ")", "\n", "", "tiles", "[", "\"distant\"", "]", ".", "iloc", "[", "idx", "]", "=", "(", "y_distant", ",", "x_distant", ")", "\n", "", "", "", "return", "tiles", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles - Copy.main": [[141, 147], ["utils.Timer", "get_triplet_address_tiles - Copy.get_triplet_imgs", "get_triplet_address_tiles - Copy.get_triplet_tiles", "str", "get_triplet_tiles.to_csv", "time.strftime"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles - Copy.get_triplet_imgs", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.1_TripletAddressTiles.get_triplet_address_tiles - Copy.get_triplet_tiles"], ["", "def", "main", "(", ")", ":", "\n", "    ", "with", "utils", ".", "Timer", "(", "'saving_stuff'", ")", ":", "\n", "        ", "masks", "=", "get_triplet_imgs", "(", "\"D://Datasets//TCGA\"", ",", "img_ext", "=", "'.npy'", ",", "sampling", "=", "\"ALL\"", ",", "n_triplets", "=", "75000", ")", "\n", "df", "=", "get_triplet_tiles", "(", "msk_triplets", "=", "masks", ",", "tile_size", "=", "64", ")", "\n", "file_name", "=", "str", "(", "'dataframe-'", "+", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "+", "'.csv'", ")", "\n", "df", ".", "to_csv", "(", "file_name", ")", "\n", "", "", "main", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_npy.CreateTriplets_npy.uint16": [[14, 16], ["numpy.uint16"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.uint16"], ["def", "uint16", "(", "val", ")", ":", "\n", "    ", "return", "np", ".", "uint16", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_npy.CreateTriplets_npy.create_directory_wrapper": [[18, 29], ["os.path.join", "os.mkdir", "print", "os.getcwd", "print"], "function", ["None"], ["", "def", "create_directory_wrapper", "(", "folder_name", ")", ":", "\n", "    ", "dir_name", "=", "folder_name", "\n", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir_name", ")", "\n", "print", "(", "\"Directory \"", ",", "dir_name", ",", "\" Created \"", ")", "\n", "\n", "", "except", "FileExistsError", ":", "\n", "        ", "print", "(", "\"Directory \"", ",", "dir_name", ",", "\" already exists\"", ")", "\n", "\n", "", "return", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "folder_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_npy.CreateTriplets_npy.write_triplets_npy": [[31, 61], ["CreateTriplets_npy.create_directory_wrapper", "dataFrame.iterrows", "os.getcwd", "row[].replace().replace().replace().split", "row[].replace().replace().replace().split", "row[].replace().replace().replace().split", "cv2.cvtColor", "numpy.save", "numpy.save", "cv2.cvtColor", "numpy.save", "int", "int", "int", "int", "int", "int", "cv2.imread", "cv2.imread", "row[].replace().replace().replace", "row[].replace().replace().replace", "row[].replace().replace().replace", "row[].replace().replace", "row[].replace().replace", "row[].replace().replace", "str", "str", "str", "row[].replace", "row[].replace", "row[].replace"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.create_directory_wrapper"], ["", "def", "write_triplets_npy", "(", "dataFrame", ",", "out_path", "=", "os", ".", "getcwd", "(", ")", "+", "'triplets.tfrecords'", ")", ":", "\n", "\n", "    ", "dir_triplets_name", "=", "create_directory_wrapper", "(", "'triplets'", ")", "\n", "\n", "for", "index", ",", "row", "in", "dataFrame", ".", "iterrows", "(", ")", ":", "\n", "\n", "\n", "        ", "anchorUL_idx", "=", "(", "(", "row", "[", "'anchor'", "]", ".", "replace", "(", "'('", ",", "''", ")", ")", ".", "replace", "(", "')'", ",", "''", ")", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "neighborUL_idx", "=", "(", "(", "row", "[", "'neighbor'", "]", ".", "replace", "(", "'('", ",", "''", ")", ")", ".", "replace", "(", "')'", ",", "''", ")", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "distantUL_idx", "=", "(", "(", "row", "[", "'distant'", "]", ".", "replace", "(", "'('", ",", "''", ")", ")", ".", "replace", "(", "')'", ",", "''", ")", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "\n", "anchorUL_idx", "=", "(", "int", "(", "anchorUL_idx", "[", "0", "]", ")", ",", "int", "(", "anchorUL_idx", "[", "1", "]", ")", ")", "\n", "neighborUL_idx", "=", "(", "int", "(", "neighborUL_idx", "[", "0", "]", ")", ",", "int", "(", "neighborUL_idx", "[", "1", "]", ")", ")", "\n", "distantUL_idx", "=", "(", "int", "(", "distantUL_idx", "[", "0", "]", ")", ",", "int", "(", "distantUL_idx", "[", "1", "]", ")", ")", "\n", "\n", "\n", "anchor_neighbor", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "row", "[", "'img_1'", "]", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "anchor_tile", "=", "anchor_neighbor", "[", "anchorUL_idx", "[", "0", "]", ":", "(", "anchorUL_idx", "[", "0", "]", "+", "128", ")", ",", "anchorUL_idx", "[", "1", "]", ":", "(", "anchorUL_idx", "[", "1", "]", "+", "128", ")", "]", "\n", "\n", "np", ".", "save", "(", "dir_triplets_name", "+", "'\\\\'", "+", "str", "(", "index", ")", "+", "'anchor'", "+", "'.npy'", ",", "anchor_tile", ")", "\n", "\n", "neighbor_tile", "=", "anchor_neighbor", "[", "neighborUL_idx", "[", "0", "]", ":", "(", "neighborUL_idx", "[", "0", "]", "+", "128", ")", ",", "neighborUL_idx", "[", "1", "]", ":", "(", "neighborUL_idx", "[", "1", "]", "+", "128", ")", "]", "\n", "\n", "np", ".", "save", "(", "dir_triplets_name", "+", "'\\\\'", "+", "str", "(", "index", ")", "+", "'neighbor'", "+", "'.npy'", ",", "neighbor_tile", ")", "\n", "\n", "\n", "distant", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "row", "[", "'img_2'", "]", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "distant_tile", "=", "distant", "[", "distantUL_idx", "[", "0", "]", ":", "(", "distantUL_idx", "[", "0", "]", "+", "128", ")", ",", "distantUL_idx", "[", "1", "]", ":", "(", "distantUL_idx", "[", "1", "]", "+", "128", ")", "]", "\n", "\n", "np", ".", "save", "(", "dir_triplets_name", "+", "'\\\\'", "+", "str", "(", "index", ")", "+", "'distant'", "+", "'.npy'", ",", "distant_tile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_TfRecordGeneration (old).TfRecord_generation.uint16": [[20, 22], ["numpy.uint16"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.uint16"], ["def", "uint16", "(", "val", ")", ":", "\n", "    ", "return", "np", ".", "uint16", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_TfRecordGeneration (old).TfRecord_generation.clean_dataframe": [[23, 53], ["dataframe.drop.iterrows", "row[].replace().replace().replace().split", "row[].replace().replace().replace().split", "row[].replace().replace().replace().split", "cv2.cvtColor", "cv2.cvtColor", "dataframe.drop.drop", "int", "int", "int", "int", "int", "int", "cv2.imread", "cv2.imread", "dataframe.drop.drop", "row[].replace().replace().replace", "row[].replace().replace().replace", "row[].replace().replace().replace", "row[].replace().replace", "row[].replace().replace", "row[].replace().replace", "row[].replace", "row[].replace", "row[].replace"], "function", ["None"], ["", "def", "clean_dataframe", "(", "dataframe", ")", ":", "\n", "    ", "for", "index", ",", "row", "in", "dataframe", ".", "iterrows", "(", ")", ":", "\n", "\n", "        ", "anchorUL_idx", "=", "(", "(", "row", "[", "'anchor'", "]", ".", "replace", "(", "'('", ",", "''", ")", ")", ".", "replace", "(", "')'", ",", "''", ")", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "neighborUL_idx", "=", "(", "(", "row", "[", "'neighbor'", "]", ".", "replace", "(", "'('", ",", "''", ")", ")", ".", "replace", "(", "')'", ",", "''", ")", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "distantUL_idx", "=", "(", "(", "row", "[", "'distant'", "]", ".", "replace", "(", "'('", ",", "''", ")", ")", ".", "replace", "(", "')'", ",", "''", ")", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "\n", "\n", "\n", "if", "distantUL_idx", "==", "[", "'None'", ",", "'None'", "]", "or", "neighborUL_idx", "==", "[", "'None'", ",", "'None'", "]", "or", "anchorUL_idx", "==", "[", "'None'", ",", "'None'", "]", ":", "\n", "            ", "dataframe", "=", "dataframe", ".", "drop", "(", "index", ")", "\n", "continue", "\n", "\n", "", "anchorUL_idx", "=", "(", "int", "(", "anchorUL_idx", "[", "0", "]", ")", ",", "int", "(", "anchorUL_idx", "[", "1", "]", ")", ")", "\n", "neighborUL_idx", "=", "(", "int", "(", "neighborUL_idx", "[", "0", "]", ")", ",", "int", "(", "neighborUL_idx", "[", "1", "]", ")", ")", "\n", "distantUL_idx", "=", "(", "int", "(", "distantUL_idx", "[", "0", "]", ")", ",", "int", "(", "distantUL_idx", "[", "1", "]", ")", ")", "\n", "\n", "anchor_neighbor", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "row", "[", "'img_1'", "]", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "anchor_tile", "=", "anchor_neighbor", "[", "anchorUL_idx", "[", "0", "]", ":", "(", "anchorUL_idx", "[", "0", "]", "+", "128", ")", ",", "anchorUL_idx", "[", "1", "]", ":", "(", "anchorUL_idx", "[", "1", "]", "+", "128", ")", "]", "\n", "\n", "neighbor_tile", "=", "anchor_neighbor", "[", "neighborUL_idx", "[", "0", "]", ":", "(", "neighborUL_idx", "[", "0", "]", "+", "128", ")", ",", "neighborUL_idx", "[", "1", "]", ":", "(", "neighborUL_idx", "[", "1", "]", "+", "128", ")", "]", "\n", "\n", "distant", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "row", "[", "'img_2'", "]", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "distant_tile", "=", "distant", "[", "distantUL_idx", "[", "0", "]", ":", "(", "distantUL_idx", "[", "0", "]", "+", "128", ")", ",", "distantUL_idx", "[", "1", "]", ":", "(", "distantUL_idx", "[", "1", "]", "+", "128", ")", "]", "\n", "\n", "if", "(", "anchor_tile", ".", "shape", "!=", "(", "128", ",", "128", ",", "3", ")", "or", "neighbor_tile", ".", "shape", "!=", "(", "128", ",", "128", ",", "3", ")", "or", "distant_tile", ".", "shape", "!=", "(", "128", ",", "128", ",", "3", ")", ")", ":", "\n", "            ", "dataframe", "=", "dataframe", ".", "drop", "(", "index", ")", "\n", "\n", "", "", "return", "dataframe", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_TfRecordGeneration (old).utils.normalize_triplets": [[1, 6], ["tf.cast", "tf.cast", "tf.cast"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "import", "random", "\n", "from", "random", "import", "choices", "\n", "import", "time", "\n", "\n", "MAX_TRIAL", "=", "500", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.2_TfRecordGeneration (old).utils.parse_function": [[7, 30], ["tf.io.parse_single_example", "tf.decode_raw", "tf.decode_raw", "tf.decode_raw", "tf.decode_raw.set_shape", "tf.decode_raw.set_shape", "tf.decode_raw.set_shape", "tf.io.FixedLenFeature", "tf.io.FixedLenFeature", "tf.io.FixedLenFeature"], "function", ["None"], ["\n", "def", "positive_or_negative", "(", ")", ":", "\n", "    ", "return", "1", "if", "random", ".", "random", "(", ")", "<", "0.5", "else", "-", "1", "\n", "\n", "", "def", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "counter", "=", "0", "\n", "width", ",", "height", "=", "msk_eroded", ".", "shape", "\n", "x_anchor", "=", "-", "1", "\n", "y_anchor", "=", "-", "1", "\n", "while", "x_anchor", "<", "tile_size", "or", "x_anchor", ">", "width", "-", "tile_size", "or", "y_anchor", "<", "tile_size", "or", "y_anchor", ">=", "height", "-", "tile_size", ":", "\n", "            ", "x_anchor", ",", "y_anchor", "=", "choices", "(", "np", ".", "asarray", "(", "np", ".", "where", "(", "msk_eroded", "==", "1", ")", ")", ".", "T", ")", "[", "0", "]", "\n", "counter", "+=", "1", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "y_anchor", ",", "x_anchor", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "", "", "def", "sample_neighbor", "(", "msk_shape", ",", "x_anchor", ",", "y_anchor", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "width", ",", "height", "=", "msk_shape", "\n", "x_neighbor", ",", "y_neighbor", "=", "-", "1", ",", "-", "1", "\n", "if", "x_anchor", "==", "None", "or", "y_anchor", "==", "None", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).utils1.Timer.__init__": [[63, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).utils1.Timer.__enter__": [[66, 68], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).utils1.Timer.__exit__": [[69, 73], ["print", "print", "time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "if", "self", ".", "name", ":", "\n", "            ", "print", "(", "'[%s]'", "%", "self", ".", "name", ",", ")", "\n", "", "print", "(", "'Elapsed: %s'", "%", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).utils1.positive_or_negative": [[8, 10], ["random.random"], "function", ["None"], ["def", "positive_or_negative", "(", ")", ":", "\n", "    ", "return", "1", "if", "random", ".", "random", "(", ")", "<", "0.5", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).utils1.sample_anchor": [[11, 25], ["random.choices", "numpy.asarray", "numpy.where"], "function", ["None"], ["", "def", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "counter", "=", "0", "\n", "width", ",", "height", "=", "msk_eroded", ".", "shape", "\n", "x_anchor", "=", "-", "1", "\n", "y_anchor", "=", "-", "1", "\n", "while", "x_anchor", "<", "tile_size", "or", "x_anchor", ">", "width", "-", "tile_size", "or", "y_anchor", "<", "tile_size", "or", "y_anchor", ">=", "height", "-", "tile_size", ":", "\n", "            ", "x_anchor", ",", "y_anchor", "=", "choices", "(", "np", ".", "asarray", "(", "np", ".", "where", "(", "msk_eroded", "==", "1", ")", ")", ".", "T", ")", "[", "0", "]", "\n", "counter", "+=", "1", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "y_anchor", ",", "x_anchor", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).utils1.sample_neighbor": [[26, 48], ["numpy.random.randint", "utils1.positive_or_negative", "numpy.random.randint", "utils1.positive_or_negative"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.positive_or_negative", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.positive_or_negative"], ["", "", "def", "sample_neighbor", "(", "msk_shape", ",", "x_anchor", ",", "y_anchor", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "width", ",", "height", "=", "msk_shape", "\n", "x_neighbor", ",", "y_neighbor", "=", "-", "1", ",", "-", "1", "\n", "if", "x_anchor", "==", "None", "or", "y_anchor", "==", "None", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "counter", "=", "0", "\n", "while", "x_neighbor", "<", "tile_size", "or", "x_neighbor", ">=", "width", "-", "tile_size", ":", "\n", "            ", "counter", "=", "+", "1", "\n", "x_neighbor", "=", "np", ".", "random", ".", "randint", "(", "tile_size", "//", "2", ",", "2", "*", "tile_size", ")", "*", "positive_or_negative", "(", ")", "+", "x_anchor", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "counter", "=", "+", "0", "\n", "while", "y_neighbor", "<", "tile_size", "or", "y_neighbor", ">=", "height", "-", "tile_size", ":", "\n", "            ", "counter", "=", "+", "1", "\n", "y_neighbor", "=", "np", ".", "random", ".", "randint", "(", "tile_size", "//", "2", ",", "2", "*", "tile_size", ")", "*", "positive_or_negative", "(", ")", "+", "y_anchor", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "y_neighbor", ",", "x_neighbor", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).utils1.sample_distant_same": [[49, 58], ["numpy.arange", "numpy.arange", "random.choices", "numpy.asarray", "numpy.where"], "function", ["None"], ["", "", "def", "sample_distant_same", "(", "msk_eroded", ",", "x_anchor", ",", "y_anchor", ",", "neighborhood", "=", "1024", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "0", ",", "msk_eroded", ".", "shape", "[", "1", "]", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "msk_eroded", ".", "shape", "[", "0", "]", ")", "\n", "proximity", "=", "(", "x", "[", "np", ".", "newaxis", ",", ":", "]", "-", "x_anchor", ")", "**", "2", "+", "(", "y", "[", ":", ",", "np", ".", "newaxis", "]", "-", "y_anchor", ")", "**", "2", "<", "neighborhood", "**", "2", "\n", "msk_eroded", "[", "proximity", "]", "=", "0", "\n", "return", "choices", "(", "np", ".", "asarray", "(", "np", ".", "where", "(", "msk_eroded", "==", "1", ")", ")", ".", "T", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).utils1.sample_distant_diff": [[59, 61], ["utils1.sample_anchor"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_anchor"], ["", "", "def", "sample_distant_diff", "(", "msk_eroded", ",", "tile_size", ")", ":", "\n", "    ", "return", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.main": [[11, 30], ["pandas.read_csv", "pandas.read_csv", "main.extract_types_and_subtypes", "main.add_types_and_subtypes_columns", "pd.read_csv.to_csv", "pandas.read_csv", "main.write_triplets"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.extract_types_and_subtypes", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.add_types_and_subtypes_columns", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.write_triplets"], ["import", "umap", "\n", "import", "os", "\n", "from", "Target_domain", "import", "Target_domain", "\n", "\n", "\n", "def", "main", "(", ")", ":", "\n", "#================================ settings:", "\n", "    ", "train_the_source_domain", "=", "False", "\n", "train_the_target_domain", "=", "True", "\n", "assert", "train_the_source_domain", "!=", "train_the_target_domain", "\n", "deep_model", "=", "\"ResNet\"", "#--> \"CNN\", \"ResNet\"", "\n", "loss_type", "=", "\"triplet\"", "#--> \"triplet\", \"FDA\"", "\n", "n_res_blocks", "=", "18", "#--> 18, 34, 50, 101, 152", "\n", "batch_size", "=", "32", "\n", "learning_rate", "=", "0.00001", "\n", "margin_in_loss", "=", "0.25", "\n", "feature_space_dimension", "=", "128", "\n", "path_save_network_model", "=", "\".\\\\network_model\\\\\"", "+", "deep_model", "+", "\"\\\\\"", "\n", "model_dir_", "=", "model_dir", "(", "model_name", "=", "deep_model", ",", "n_res_blocks", "=", "n_res_blocks", ",", "batch_size", "=", "batch_size", ",", "learning_rate", "=", "learning_rate", ")", "\n", "#================================ ", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.extract_types_and_subtypes": [[33, 49], ["file_name.replace", "file_name.replace", "file_name.replace", "file_name.replace", "file_name.split", "file_name.split", "file_name.split", "file_name.split", "file_name.split", "file_name.split"], "function", ["None"], ["", "if", "train_the_target_domain", ":", "\n", "        ", "batch_size", "=", "500", "\n", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "\n", "\n", "", "", "def", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n", "#================================ settings:", "\n", "    ", "path_dataset_of_target_space", "=", "\"D:\\\\Datasets\\\\Kather_train_test\\\\test\"", "\n", "path_save_embeddings_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_test_set\\\\\"", "\n", "path_save_accuracy_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\accuracy_test_set\\\\\"", "\n", "proportions", "=", "[", "0.04", ",", "0.08", ",", "0.12", ",", "0.16", ",", "0.20", ",", "0.40", ",", "0.60", ",", "0.80", ",", "1", "]", "\n", "#================================ ", "\n", "# Siamese:", "\n", "loss_type", "=", "\"triplet\"", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.add_types_and_subtypes_columns": [[50, 61], ["final_df_.insert", "final_df_.insert", "final_df_.insert", "final_df_.insert", "final_df_.insert", "final_df_.insert"], "function", ["None"], ["        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "False", ")", "\n", "", "target_domain", "=", "Target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ")", "\n", "batches", ",", "batches_subtypes", "=", "target_domain", ".", "read_data_into_batches", "(", "path_dataset", "=", "path_dataset_of_target_space", ")", "\n", "embedding", ",", "subtypes", "=", "target_domain", ".", "embed_data_in_the_source_domain", "(", "batches", ",", "batches_subtypes", ",", "siamese", ",", "path_save_embeddings_of_test_data", ")", "\n", "# target_domain.classification_in_target_domain(X=embedding, y=subtypes, path_save_accuracy_of_test_data=path_save_accuracy_of_test_data, cv=10)", "\n", "target_domain", ".", "classification_in_target_domain_different_data_portions", "(", "X", "=", "embedding", ",", "y", "=", "subtypes", ",", "path_save_accuracy_of_test_data", "=", "path_save_accuracy_of_test_data", ",", "\n", "proportions", "=", "proportions", ",", "cv", "=", "10", ")", "\n", "\n", "\n", "", "def", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n", "#================================ settings:", "\n", "    ", "save_plot_embedding_space", "=", "True", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.write_triplets": [[62, 141], ["main.encode_subtypes_beforehand", "os.path.exists", "os.makedirs", "tensorflow.io.TFRecordWriter", "dataFrame.iterrows", "row[].replace().replace().replace().split", "row[].replace().replace().replace().split", "row[].replace().replace().replace().split", "openslide.OpenSlide", "int", "anchor_neighbor.read_region.resize", "anchor_neighbor.read_region.resize", "numpy.save", "numpy.save", "main.encode_type_and_subtype", "numpy.save", "numpy.save", "main.encode_type_and_subtype", "numpy.save", "numpy.save", "openslide.OpenSlide", "int", "distant.read_region.resize", "numpy.save", "main.encode_type_and_subtype", "numpy.save", "numpy.save", "anchor_neighbor.read_region.tostring", "anchor_neighbor.read_region.tostring", "distant.read_region.tostring", "tensorflow.train.Features", "tensorflow.train.Example", "tf.train.Example.SerializeToString", "writer.write", "int", "int", "int", "int", "int", "int", "openslide.OpenSlide.read_region", "openslide.OpenSlide.read_region", "openslide.OpenSlide.read_region", "openslide.OpenSlide.read_region", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "openslide.OpenSlide.read_region", "openslide.OpenSlide.read_region", "numpy.array", "numpy.array", "main.wrap_bytes", "main.wrap_bytes", "main.wrap_bytes", "main.wrap_int64", "main.wrap_int64", "main.wrap_int64", "main.wrap_int64", "main.wrap_int64", "main.wrap_int64", "row[].replace().replace().replace", "row[].replace().replace().replace", "row[].replace().replace().replace", "row[].replace().replace", "row[].replace().replace", "row[].replace().replace", "str", "str", "str", "str", "str", "str", "str", "str", "str", "row[].replace", "row[].replace", "row[].replace"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.encode_subtypes_beforehand", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.encode_type_and_subtype", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.encode_type_and_subtype", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.encode_type_and_subtype", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_bytes", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_bytes", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_bytes", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_int64", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_int64", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_int64", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_int64", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_int64", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_int64"], ["save_points_in_embedding_space", "=", "True", "\n", "load_saved_network_model", "=", "False", "\n", "num_epoch", "=", "300", "\n", "save_network_model_every_how_many_epochs", "=", "10", "\n", "save_embedding_every_how_many_epochs", "=", "10", "\n", "STEPS_PER_EPOCH_TRAIN", "=", "704", "\n", "n_samples_plot", "=", "2000", "#--> if None, plot all", "\n", "# path_tfrecords_train = 'D:\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "# path_tfrecords_train = '.\\\\..\\\\..\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "path_tfrecords_train", "=", "'D:\\\\TCGA_triplets\\\\tfrecord\\\\triplets.tfrecords'", "\n", "path_save_embedding_space", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_train_set\\\\\"", "\n", "path_save_loss", "=", "\".\\\\loss_saved\\\\\"", "\n", "#================================ ", "\n", "\n", "train_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "[", "path_tfrecords_train", "]", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "parse_function", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "normalize_triplets", ")", "\n", "\n", "num_repeat", "=", "None", "\n", "train_dataset", "=", "train_dataset", ".", "repeat", "(", "num_repeat", ")", "\n", "train_dataset", "=", "train_dataset", ".", "shuffle", "(", "buffer_size", "=", "1024", ")", "\n", "train_dataset", "=", "train_dataset", ".", "batch", "(", "batch_size", ")", "\n", "handle", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "[", "]", ")", "\n", "iterator", "=", "tf", ".", "data", ".", "Iterator", ".", "from_string_handle", "(", "handle", ",", "train_dataset", ".", "output_types", ",", "\n", "train_dataset", ".", "output_shapes", ")", "\n", "\n", "next_element", "=", "iterator", ".", "get_next", "(", ")", "\n", "# training_iterator = train_dataset.make_initializable_iterator()", "\n", "training_iterator", "=", "tf", ".", "data", ".", "make_initializable_iterator", "(", "train_dataset", ")", "\n", "\n", "# Siamese:", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n", "        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "True", ")", "\n", "# train_step = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(siamese.loss)", "\n", "", "train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate", ")", ".", "minimize", "(", "siamese", ".", "loss", ")", "\n", "# tf.initialize_all_variables().run()", "\n", "\n", "saver_", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "training_handle", "=", "sess", ".", "run", "(", "training_iterator", ".", "string_handle", "(", ")", ")", "\n", "sess", ".", "run", "(", "training_iterator", ".", "initializer", ")", "\n", "\n", "if", "load_saved_network_model", ":", "\n", "            ", "_", ",", "latest_epoch", "=", "load_network_model", "(", "saver_", "=", "saver_", ",", "session_", "=", "sess", ",", "checkpoint_dir", "=", "path_save_network_model", ",", "\n", "model_dir_", "=", "model_dir_", ",", "model_name", "=", "deep_model", ")", "\n", "", "else", ":", "\n", "            ", "latest_epoch", "=", "-", "1", "\n", "\n", "", "loss_average_of_epochs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "latest_epoch", "+", "1", ",", "num_epoch", ")", ":", "\n", "            ", "losses_in_epoch", "=", "[", "]", "\n", "print", "(", "\"============= epoch: \"", "+", "str", "(", "epoch", ")", "+", "\"/\"", "+", "str", "(", "num_epoch", "-", "1", ")", ")", "\n", "embeddings_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", "feature_space_dimension", ")", ")", "\n", "types_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", ")", ")", "\n", "subtypes_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "STEPS_PER_EPOCH_TRAIN", ")", ":", "\n", "                ", "image_anchor", ",", "image_neighbor", ",", "image_distant", ",", "type_anchor", ",", "type_neighbor", ",", "type_distant", ",", "subtype_anchor", ",", "subtype_neighbor", ",", "subtype_distant", "=", "sess", ".", "run", "(", "next_element", ",", "\n", "feed_dict", "=", "{", "handle", ":", "training_handle", "}", ")", "\n", "\n", "image_anchor_batch_3_channels", "=", "image_anchor", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "image_neighbor_batch_3_channels", "=", "image_neighbor", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "image_distant_batch_3_channels", "=", "image_distant", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "_", ",", "loss_v", ",", "embedding1", ",", "embedding2", ",", "embedding3", "=", "sess", ".", "run", "(", "[", "train_step", ",", "siamese", ".", "loss", ",", "siamese", ".", "o1", ",", "siamese", ".", "o2", ",", "siamese", ".", "o3", "]", ",", "feed_dict", "=", "{", "\n", "siamese", ".", "x1", ":", "image_anchor_batch_3_channels", ",", "\n", "siamese", ".", "x2", ":", "image_neighbor_batch_3_channels", ",", "\n", "siamese", ".", "x3", ":", "image_distant_batch_3_channels", "}", ")", "\n", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding1", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding2", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding3", "\n", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", "]", "=", "type_anchor", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", "]", "=", "type_neighbor", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.encode_type_and_subtype": [[142, 147], ["types_list.index", "subtypes_of_type.index"], "function", ["None"], ["types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", "]", "=", "type_distant", "\n", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", "]", "=", "subtype_anchor", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", "]", "=", "subtype_neighbor", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", "]", "=", "subtype_distant", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.encode_subtypes_beforehand": [[148, 166], ["enumerate", "len", "print", "list", "list", "list", "list", "list", "df_anchor_type.anchor_subtype.unique", "df_neighbor_type.neighbor_subtype.unique", "df_distant_type.distant_subtype.unique", "set().union", "set().union", "open", "output.write", "open", "output.write", "str", "str", "set", "set"], "function", ["None"], ["losses_in_epoch", ".", "extend", "(", "[", "loss_v", "]", ")", "\n", "\n", "# report average loss of epoch:", "\n", "", "loss_average_of_epochs", ".", "append", "(", "np", ".", "average", "(", "np", ".", "asarray", "(", "losses_in_epoch", ")", ")", ")", "\n", "print", "(", "\"Average loss of epoch \"", "+", "str", "(", "epoch", ")", "+", "\": \"", "+", "str", "(", "loss_average_of_epochs", "[", "-", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_loss", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_save_loss", ")", "\n", "", "np", ".", "save", "(", "path_save_loss", "+", "\"loss.npy\"", ",", "np", ".", "asarray", "(", "loss_average_of_epochs", ")", ")", "\n", "\n", "# plot the embedding space:", "\n", "if", "(", "epoch", "%", "save_embedding_every_how_many_epochs", "==", "0", ")", ":", "\n", "                ", "if", "save_points_in_embedding_space", ":", "\n", "                    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embedding_space", "+", "\"numpy\\\\\"", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "path_save_embedding_space", "+", "\"numpy\\\\\"", ")", "\n", "", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\embeddings_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "embeddings_in_epoch", ")", "\n", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\types_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "types_in_epoch", ")", "\n", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\subtypes_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "subtypes_in_epoch", ")", "\n", "", "if", "save_plot_embedding_space", ":", "\n", "                    ", "print", "(", "\"saving the plot of embedding space....\"", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.wrap_int64": [[167, 169], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["plt", ".", "figure", "(", "200", ")", "\n", "# fig.clf()", "\n", "TCGA_get_color_and_shape_of_points", "(", "embeddings_in_epoch", ",", "types_in_epoch", ",", "subtypes_in_epoch", ",", "n_samples_plot", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.wrap_bytes": [[170, 172], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", ")", "\n", "", "plt", ".", "savefig", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", "+", "'epoch'", "+", "str", "(", "epoch", ")", "+", "'_step'", "+", "str", "(", "i", ")", "+", "'.png'", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_code_triplet_TCGA_from_already_csv (create trplet from 20x images).main.create_directory_wrapper": [[188, 196], ["os.path.join", "os.mkdir", "print", "os.getcwd", "print"], "function", ["None"], ["", "embedding_sampled", "=", "embedding", "[", "indices_to_plot", ",", ":", "]", "\n", "if", "embedding", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "embedding_sampled", "=", "umap", ".", "UMAP", "(", "n_neighbors", "=", "500", ")", ".", "fit_transform", "(", "embedding_sampled", ")", "\n", "", "n_points", "=", "embedding", ".", "shape", "[", "0", "]", "\n", "# n_points_sampled = embedding_sampled.shape[0]", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "n_points", ",", ")", ")", "\n", "labels", "[", "(", "type_", "==", "0", ")", "&", "(", "subtype_", "==", "0", ")", "]", "=", "0", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.Timer.__init__": [[63, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.Timer.__enter__": [[66, 68], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.Timer.__exit__": [[69, 73], ["print", "print", "time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "if", "self", ".", "name", ":", "\n", "            ", "print", "(", "'[%s]'", "%", "self", ".", "name", ",", ")", "\n", "", "print", "(", "'Elapsed: %s'", "%", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.positive_or_negative": [[8, 10], ["random.random"], "function", ["None"], ["def", "positive_or_negative", "(", ")", ":", "\n", "    ", "return", "1", "if", "random", ".", "random", "(", ")", "<", "0.5", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_anchor": [[11, 25], ["random.choices", "numpy.asarray", "numpy.where"], "function", ["None"], ["", "def", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "counter", "=", "0", "\n", "width", ",", "height", "=", "msk_eroded", ".", "shape", "\n", "x_anchor", "=", "-", "1", "\n", "y_anchor", "=", "-", "1", "\n", "while", "x_anchor", "<", "tile_size", "or", "x_anchor", ">", "width", "-", "tile_size", "or", "y_anchor", "<", "tile_size", "or", "y_anchor", ">=", "height", "-", "tile_size", ":", "\n", "            ", "x_anchor", ",", "y_anchor", "=", "choices", "(", "np", ".", "asarray", "(", "np", ".", "where", "(", "msk_eroded", "==", "1", ")", ")", ".", "T", ")", "[", "0", "]", "\n", "counter", "+=", "1", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "y_anchor", ",", "x_anchor", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_neighbor": [[26, 48], ["numpy.random.randint", "utils1.positive_or_negative", "numpy.random.randint", "utils1.positive_or_negative"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.positive_or_negative", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.positive_or_negative"], ["", "", "def", "sample_neighbor", "(", "msk_shape", ",", "x_anchor", ",", "y_anchor", ",", "tile_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "width", ",", "height", "=", "msk_shape", "\n", "x_neighbor", ",", "y_neighbor", "=", "-", "1", ",", "-", "1", "\n", "if", "x_anchor", "==", "None", "or", "y_anchor", "==", "None", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "counter", "=", "0", "\n", "while", "x_neighbor", "<", "tile_size", "or", "x_neighbor", ">=", "width", "-", "tile_size", ":", "\n", "            ", "counter", "=", "+", "1", "\n", "x_neighbor", "=", "np", ".", "random", ".", "randint", "(", "tile_size", "//", "2", ",", "2", "*", "tile_size", ")", "*", "positive_or_negative", "(", ")", "+", "x_anchor", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "counter", "=", "+", "0", "\n", "while", "y_neighbor", "<", "tile_size", "or", "y_neighbor", ">=", "height", "-", "tile_size", ":", "\n", "            ", "counter", "=", "+", "1", "\n", "y_neighbor", "=", "np", ".", "random", ".", "randint", "(", "tile_size", "//", "2", ",", "2", "*", "tile_size", ")", "*", "positive_or_negative", "(", ")", "+", "y_anchor", "\n", "if", "counter", ">", "MAX_TRIAL", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "y_neighbor", ",", "x_neighbor", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_distant_same": [[49, 58], ["numpy.arange", "numpy.arange", "random.choices", "numpy.asarray", "numpy.where"], "function", ["None"], ["", "", "def", "sample_distant_same", "(", "msk_eroded", ",", "x_anchor", ",", "y_anchor", ",", "neighborhood", "=", "1024", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "0", ",", "msk_eroded", ".", "shape", "[", "1", "]", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "msk_eroded", ".", "shape", "[", "0", "]", ")", "\n", "proximity", "=", "(", "x", "[", "np", ".", "newaxis", ",", ":", "]", "-", "x_anchor", ")", "**", "2", "+", "(", "y", "[", ":", ",", "np", ".", "newaxis", "]", "-", "y_anchor", ")", "**", "2", "<", "neighborhood", "**", "2", "\n", "msk_eroded", "[", "proximity", "]", "=", "0", "\n", "return", "choices", "(", "np", ".", "asarray", "(", "np", ".", "where", "(", "msk_eroded", "==", "1", ")", ")", ".", "T", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_distant_diff": [[59, 61], ["utils1.sample_anchor"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).utils1.sample_anchor"], ["", "", "def", "sample_distant_diff", "(", "msk_eroded", ",", "tile_size", ")", ":", "\n", "    ", "return", "sample_anchor", "(", "msk_eroded", ",", "tile_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).main.main": [[16, 18], ["None"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "#================================ settings:", "\n", "    ", "train_the_source_domain", "=", "False", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.5_code_triplet_TCGA_from_scratch (not complete).main.take_df_from_web": [[19, 75], ["requests.post"], "function", ["None"], ["train_the_target_domain", "=", "True", "\n", "assert", "train_the_source_domain", "!=", "train_the_target_domain", "\n", "deep_model", "=", "\"ResNet\"", "#--> \"CNN\", \"ResNet\"", "\n", "loss_type", "=", "\"triplet\"", "#--> \"triplet\", \"FDA\"", "\n", "n_res_blocks", "=", "18", "#--> 18, 34, 50, 101, 152", "\n", "batch_size", "=", "32", "\n", "learning_rate", "=", "0.00001", "\n", "margin_in_loss", "=", "0.25", "\n", "feature_space_dimension", "=", "128", "\n", "path_save_network_model", "=", "\".\\\\network_model\\\\\"", "+", "deep_model", "+", "\"\\\\\"", "\n", "model_dir_", "=", "model_dir", "(", "model_name", "=", "deep_model", ",", "n_res_blocks", "=", "n_res_blocks", ",", "batch_size", "=", "batch_size", ",", "learning_rate", "=", "learning_rate", ")", "\n", "#================================ ", "\n", "if", "train_the_source_domain", ":", "\n", "        ", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "", "if", "train_the_target_domain", ":", "\n", "        ", "batch_size", "=", "500", "\n", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "\n", "\n", "", "", "def", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n", "#================================ settings:", "\n", "    ", "path_dataset_of_target_space", "=", "\"D:\\\\Datasets\\\\Kather_train_test\\\\test\"", "\n", "path_save_embeddings_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_test_set\\\\\"", "\n", "path_save_accuracy_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\accuracy_test_set\\\\\"", "\n", "proportions", "=", "[", "0.04", ",", "0.08", ",", "0.12", ",", "0.16", ",", "0.20", ",", "0.40", ",", "0.60", ",", "0.80", ",", "1", "]", "\n", "#================================ ", "\n", "# Siamese:", "\n", "loss_type", "=", "\"triplet\"", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n", "        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "False", ")", "\n", "", "target_domain", "=", "Target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ")", "\n", "batches", ",", "batches_subtypes", "=", "target_domain", ".", "read_data_into_batches", "(", "path_dataset", "=", "path_dataset_of_target_space", ")", "\n", "embedding", ",", "subtypes", "=", "target_domain", ".", "embed_data_in_the_source_domain", "(", "batches", ",", "batches_subtypes", ",", "siamese", ",", "path_save_embeddings_of_test_data", ")", "\n", "# target_domain.classification_in_target_domain(X=embedding, y=subtypes, path_save_accuracy_of_test_data=path_save_accuracy_of_test_data, cv=10)", "\n", "target_domain", ".", "classification_in_target_domain_different_data_portions", "(", "X", "=", "embedding", ",", "y", "=", "subtypes", ",", "path_save_accuracy_of_test_data", "=", "path_save_accuracy_of_test_data", ",", "\n", "proportions", "=", "proportions", ",", "cv", "=", "10", ")", "\n", "\n", "\n", "", "def", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n", "#================================ settings:", "\n", "    ", "save_plot_embedding_space", "=", "True", "\n", "save_points_in_embedding_space", "=", "True", "\n", "load_saved_network_model", "=", "False", "\n", "num_epoch", "=", "300", "\n", "save_network_model_every_how_many_epochs", "=", "10", "\n", "save_embedding_every_how_many_epochs", "=", "10", "\n", "STEPS_PER_EPOCH_TRAIN", "=", "704", "\n", "n_samples_plot", "=", "2000", "#--> if None, plot all", "\n", "# path_tfrecords_train = 'D:\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "# path_tfrecords_train = '.\\\\..\\\\..\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "path_tfrecords_train", "=", "'D:\\\\TCGA_triplets\\\\tfrecord\\\\triplets.tfrecords'", "\n", "path_save_embedding_space", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_train_set\\\\\"", "\n", "path_save_loss", "=", "\".\\\\loss_saved\\\\\"", "\n", "#================================ ", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.uint16": [[17, 19], ["numpy.uint16"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.uint16"], ["def", "uint16", "(", "val", ")", ":", "\n", "    ", "return", "np", ".", "uint16", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_int64": [[20, 22], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "wrap_int64", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_bytes": [[23, 25], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["", "def", "wrap_bytes", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.create_directory_wrapper": [[26, 37], ["os.path.join", "os.mkdir", "print", "os.getcwd", "print"], "function", ["None"], ["", "def", "create_directory_wrapper", "(", "folder_name", ")", ":", "\n", "    ", "dir_name", "=", "folder_name", "\n", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir_name", ")", "\n", "print", "(", "\"Directory \"", ",", "dir_name", ",", "\" Created \"", ")", "\n", "\n", "", "except", "FileExistsError", ":", "\n", "        ", "print", "(", "\"Directory \"", ",", "dir_name", ",", "\" already exists\"", ")", "\n", "\n", "", "return", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "folder_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.convert_to_tfrecords": [[39, 82], ["CreatingTFrecords.create_directory_wrapper", "tensorflow.io.TFRecordWriter", "data_frame.iterrows", "row[].replace().replace().replace().split", "row[].replace().replace().replace().split", "row[].replace().replace().replace().split", "cv2.cvtColor", "anchor_tile.tostring", "neighbor_tile.tostring", "cv2.cvtColor", "distant_tile.tostring", "tensorflow.train.Features", "tensorflow.train.Example", "tf.train.Example.SerializeToString", "writer.write", "int", "int", "int", "int", "int", "int", "cv2.imread", "cv2.imread", "CreatingTFrecords.wrap_bytes", "CreatingTFrecords.wrap_bytes", "CreatingTFrecords.wrap_bytes", "row[].replace().replace().replace", "row[].replace().replace().replace", "row[].replace().replace().replace", "row[].replace().replace", "row[].replace().replace", "row[].replace().replace", "row[].replace", "row[].replace", "row[].replace"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.create_directory_wrapper", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_bytes", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_bytes", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_CreateTriplets_tfrecords.CreatingTFrecords.wrap_bytes"], ["", "def", "convert_to_tfrecords", "(", "data_frame", ",", "tfrecord_name", "=", "'triplets.tfrecords'", ")", ":", "\n", "\n", "    ", "dir_triplets_name", "=", "create_directory_wrapper", "(", "'tfrecords'", ")", "\n", "\n", "with", "tf", ".", "io", ".", "TFRecordWriter", "(", "dir_triplets_name", "+", "'//'", "+", "tfrecord_name", ")", "as", "writer", ":", "\n", "\n", "        ", "for", "index", ",", "row", "in", "data_frame", ".", "iterrows", "(", ")", ":", "\n", "\n", "            ", "anchorUL_idx", "=", "(", "(", "row", "[", "'anchor'", "]", ".", "replace", "(", "'('", ",", "''", ")", ")", ".", "replace", "(", "')'", ",", "''", ")", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "neighborUL_idx", "=", "(", "(", "row", "[", "'neighbor'", "]", ".", "replace", "(", "'('", ",", "''", ")", ")", ".", "replace", "(", "')'", ",", "''", ")", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "distantUL_idx", "=", "(", "(", "row", "[", "'distant'", "]", ".", "replace", "(", "'('", ",", "''", ")", ")", ".", "replace", "(", "')'", ",", "''", ")", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "\n", "anchorUL_idx", "=", "(", "int", "(", "anchorUL_idx", "[", "0", "]", ")", ",", "int", "(", "anchorUL_idx", "[", "1", "]", ")", ")", "\n", "neighborUL_idx", "=", "(", "int", "(", "neighborUL_idx", "[", "0", "]", ")", ",", "int", "(", "neighborUL_idx", "[", "1", "]", ")", ")", "\n", "distantUL_idx", "=", "(", "int", "(", "distantUL_idx", "[", "0", "]", ")", ",", "int", "(", "distantUL_idx", "[", "1", "]", ")", ")", "\n", "\n", "\n", "anchor_neighbor", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "row", "[", "'img_1'", "]", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "anchor_tile", "=", "anchor_neighbor", "[", "anchorUL_idx", "[", "0", "]", ":", "(", "anchorUL_idx", "[", "0", "]", "+", "128", ")", ",", "anchorUL_idx", "[", "1", "]", ":", "(", "anchorUL_idx", "[", "1", "]", "+", "128", ")", "]", "\n", "anchor_tile_bytes", "=", "anchor_tile", ".", "tostring", "(", ")", "\n", "\n", "\n", "\n", "neighbor_tile", "=", "anchor_neighbor", "[", "neighborUL_idx", "[", "0", "]", ":", "(", "neighborUL_idx", "[", "0", "]", "+", "128", ")", ",", "neighborUL_idx", "[", "1", "]", ":", "(", "neighborUL_idx", "[", "1", "]", "+", "128", ")", "]", "\n", "neighbor_tile_bytes", "=", "neighbor_tile", ".", "tostring", "(", ")", "\n", "\n", "\n", "\n", "distant", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "row", "[", "'img_2'", "]", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "distant_tile", "=", "distant", "[", "distantUL_idx", "[", "0", "]", ":", "(", "distantUL_idx", "[", "0", "]", "+", "128", ")", ",", "distantUL_idx", "[", "1", "]", ":", "(", "distantUL_idx", "[", "1", "]", "+", "128", ")", "]", "\n", "distant_tile_bytes", "=", "distant_tile", ".", "tostring", "(", ")", "\n", "\n", "data", "=", "{", "\n", "'image_anchor'", ":", "wrap_bytes", "(", "anchor_tile_bytes", ")", ",", "\n", "'image_neighbor'", ":", "wrap_bytes", "(", "neighbor_tile_bytes", ")", ",", "\n", "'image_distant'", ":", "wrap_bytes", "(", "distant_tile_bytes", ")", "\n", "}", "\n", "\n", "feature", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "data", ")", "\n", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "feature", ")", "\n", "serialized", "=", "example", ".", "SerializeToString", "(", ")", "\n", "writer", ".", "write", "(", "serialized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.Utils.normalize_triplets": [[14, 20], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast"], "function", ["None"], ["", "def", "parse_function", "(", "serialized", ")", ":", "\n", "    ", "IMAGE_SIZE", "=", "128", "\n", "IMAGE_PIXELS", "=", "IMAGE_SIZE", "*", "IMAGE_SIZE", "\n", "\n", "features", "=", "{", "\n", "'image_anchor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.Utils.parse_function": [[21, 75], ["tensorflow.io.parse_single_example", "tensorflow.compat.v1.decode_raw", "tensorflow.compat.v1.decode_raw", "tensorflow.compat.v1.decode_raw", "tf.compat.v1.decode_raw.set_shape", "tf.compat.v1.decode_raw.set_shape", "tf.compat.v1.decode_raw.set_shape", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature"], "function", ["None"], ["'image_neighbor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'image_distant'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'type_anchor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'type_neighbor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'type_distant'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'subtype_anchor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'subtype_neighbor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'subtype_distant'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", "\n", "}", "\n", "\n", "parsed_example", "=", "tf", ".", "io", ".", "parse_single_example", "(", "serialized", "=", "serialized", ",", "\n", "features", "=", "features", ")", "\n", "\n", "# image_anchor = tf.decode_raw(parsed_example['image_anchor'], tf.uint8)", "\n", "# image_neighbor = tf.decode_raw(parsed_example['image_neighbor'], tf.uint8)", "\n", "# image_distant = tf.decode_raw(parsed_example['image_distant'], tf.uint8)", "\n", "\n", "# https://www.tensorflow.org/api_docs/python", "\n", "image_anchor", "=", "tf", ".", "compat", ".", "v1", ".", "decode_raw", "(", "parsed_example", "[", "'image_anchor'", "]", ",", "tf", ".", "uint8", ")", "\n", "image_neighbor", "=", "tf", ".", "compat", ".", "v1", ".", "decode_raw", "(", "parsed_example", "[", "'image_neighbor'", "]", ",", "tf", ".", "uint8", ")", "\n", "image_distant", "=", "tf", ".", "compat", ".", "v1", ".", "decode_raw", "(", "parsed_example", "[", "'image_distant'", "]", ",", "tf", ".", "uint8", ")", "\n", "type_anchor", "=", "parsed_example", "[", "'type_anchor'", "]", "\n", "type_neighbor", "=", "parsed_example", "[", "'type_neighbor'", "]", "\n", "type_distant", "=", "parsed_example", "[", "'type_distant'", "]", "\n", "subtype_anchor", "=", "parsed_example", "[", "'subtype_anchor'", "]", "\n", "subtype_neighbor", "=", "parsed_example", "[", "'subtype_neighbor'", "]", "\n", "subtype_distant", "=", "parsed_example", "[", "'subtype_distant'", "]", "\n", "\n", "image_anchor", ".", "set_shape", "(", "(", "IMAGE_PIXELS", ")", ")", "\n", "image_neighbor", ".", "set_shape", "(", "(", "IMAGE_PIXELS", ")", ")", "\n", "image_distant", ".", "set_shape", "(", "(", "IMAGE_PIXELS", ")", ")", "\n", "\n", "return", "image_anchor", ",", "image_neighbor", ",", "image_distant", ",", "type_anchor", ",", "type_neighbor", ",", "type_distant", ",", "subtype_anchor", ",", "subtype_neighbor", ",", "subtype_distant", "\n", "\n", "", "def", "Global_Average_Pooling", "(", "x", ",", "stride", "=", "1", ")", ":", "\n", "        ", "width", "=", "np", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "height", "=", "np", ".", "shape", "(", "x", ")", "[", "2", "]", "\n", "pool_size", "=", "[", "width", ",", "height", "]", "\n", "return", "tf", ".", "layers", ".", "average_pooling2d", "(", "inputs", "=", "x", ",", "pool_size", "=", "pool_size", ",", "strides", "=", "stride", ")", "\n", "# The stride value does not matter", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.Utils.Global_Average_Pooling": [[76, 81], ["tensorflow.layers.average_pooling2d", "np.shape", "np.shape"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.__init__": [[8, 40], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "ResNet_Siamese.ResNet_Siamese.loss_triplet", "tensorflow.variable_scope", "ResNet_Siamese.ResNet_Siamese.network", "ResNet_Siamese.ResNet_Siamese.network", "ResNet_Siamese.ResNet_Siamese.network", "tensorflow.variable_scope", "ResNet_Siamese.ResNet_Siamese.network"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.loss_triplet", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.network", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.network", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.network", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.network"], ["    ", "def", "__init__", "(", "self", ",", "loss_type", ",", "feature_space_dimension", ",", "n_res_blocks", "=", "18", ",", "margin_in_loss", "=", "0.25", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "128", "\n", "self", ".", "c_dim", "=", "3", "\n", "self", ".", "res_n", "=", "n_res_blocks", "\n", "self", ".", "feature_space_dimension", "=", "feature_space_dimension", "\n", "self", ".", "margin_in_loss", "=", "margin_in_loss", "\n", "\n", "self", ".", "x1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x1Image", "=", "self", ".", "x1", "\n", "self", ".", "x2", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x2Image", "=", "self", ".", "x2", "\n", "self", ".", "x3", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x3Image", "=", "self", ".", "x3", "\n", "# self.is_train = tf.placeholder(tf.int32, [1])", "\n", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "# Create loss", "\n", "if", "is_train", ":", "\n", "            ", "if", "self", ".", "loss_type", "==", "\"triplet\"", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"siamese\"", ")", "as", "scope", ":", "\n", "                    ", "self", ".", "o1", "=", "self", ".", "network", "(", "self", ".", "x1Image", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ")", "\n", "self", ".", "o2", "=", "self", ".", "network", "(", "self", ".", "x2Image", ",", "is_training", "=", "True", ",", "reuse", "=", "True", ")", "\n", "self", ".", "o3", "=", "self", ".", "network", "(", "self", ".", "x3Image", ",", "is_training", "=", "True", ",", "reuse", "=", "True", ")", "\n", "", "self", ".", "loss", "=", "self", ".", "loss_triplet", "(", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"FDA\"", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "loss_type", "==", "\"triplet\"", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"siamese\"", ")", "as", "scope", ":", "\n", "                    ", "self", ".", "o1", "=", "self", ".", "network", "(", "self", ".", "x1Image", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ")", "\n", "", "", "elif", "self", ".", "loss_type", "==", "\"FDA\"", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.save_network": [[57, 62], ["tensorflow.train.Saver", "tensorflow.train.Saver.save", "tensorflow.get_collection"], "methods", ["None"], ["", "", "", "def", "save_network", "(", "self", ",", "session_", ",", "checkpoint_dir", ")", ":", "\n", "# https://stackoverflow.com/questions/46549056/can-tensorflow-save-the-variables-in-a-certain-variable-scope", "\n", "# saver = tf.train.Saver(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, \"network\"))", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\"siamese\"", ")", ")", "\n", "saver", ".", "save", "(", "session_", ",", "checkpoint_dir", "+", "\"\\\\model.ckpt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.network": [[63, 109], ["tensorflow.variable_scope", "ops_resnet.get_residual_layer", "ops_resnet.conv", "range", "residual_block", "range", "residual_block", "range", "residual_block", "range", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.global_avg_pooling", "ops_resnet.fully_conneted", "residual_block", "residual_block", "residual_block", "residual_block", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.get_residual_layer", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.global_avg_pooling", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.fully_conneted"], ["", "def", "network", "(", "self", ",", "x", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"network\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "if", "self", ".", "res_n", "<", "50", ":", "\n", "                ", "residual_block", "=", "ops_resnet", ".", "resblock", "\n", "", "else", ":", "\n", "                ", "residual_block", "=", "ops_resnet", ".", "bottle_resblock", "\n", "\n", "", "residual_list", "=", "ops_resnet", ".", "get_residual_layer", "(", "self", ".", "res_n", ")", "\n", "\n", "ch", "=", "32", "# paper is 64", "\n", "x", "=", "ops_resnet", ".", "conv", "(", "x", ",", "channels", "=", "ch", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "scope", "=", "'conv'", ")", "\n", "\n", "for", "i", "in", "range", "(", "residual_list", "[", "0", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock0_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "2", ",", "is_training", "=", "is_training", ",", "downsample", "=", "True", ",", "scope", "=", "'resblock1_0'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "residual_list", "[", "1", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "2", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock1_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "4", ",", "is_training", "=", "is_training", ",", "downsample", "=", "True", ",", "scope", "=", "'resblock2_0'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "residual_list", "[", "2", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "4", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock2_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "8", ",", "is_training", "=", "is_training", ",", "downsample", "=", "True", ",", "scope", "=", "'resblock_3_0'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "residual_list", "[", "3", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "8", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock_3_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "\n", "", "x", "=", "ops_resnet", ".", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm'", ")", "\n", "x", "=", "ops_resnet", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "ops_resnet", ".", "global_avg_pooling", "(", "x", ")", "\n", "x", "=", "ops_resnet", ".", "fully_conneted", "(", "x", ",", "units", "=", "self", ".", "feature_space_dimension", ",", "scope", "=", "'logit'", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.loss_triplet": [[110, 118], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square"], "methods", ["None"], ["", "", "def", "loss_triplet", "(", "self", ")", ":", "\n", "        ", "d_pos", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "o1", "-", "self", ".", "o2", ")", ",", "1", ")", "\n", "d_neg", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "o1", "-", "self", ".", "o3", ")", ",", "1", ")", "\n", "\n", "loss", "=", "tf", ".", "maximum", "(", "0.", ",", "self", ".", "margin_in_loss", "+", "d_pos", "-", "d_neg", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ResNet_Siamese.ResNet_Siamese.loss_FDA": [[119, 121], ["None"], "methods", ["None"], ["", "def", "loss_FDA", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.main.main": [[18, 38], ["main.model_dir", "main.train_source_domain", "main.train_target_domain"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.model_dir", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.train_source_domain", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.train_target_domain"], ["    ", "train_the_source_domain", "=", "False", "\n", "train_the_target_domain", "=", "True", "\n", "assert", "train_the_source_domain", "!=", "train_the_target_domain", "\n", "deep_model", "=", "\"ResNet\"", "#--> \"CNN\", \"ResNet\"", "\n", "loss_type", "=", "\"triplet\"", "#--> \"triplet\", \"FDA\"", "\n", "n_res_blocks", "=", "18", "#--> 18, 34, 50, 101, 152", "\n", "batch_size", "=", "32", "\n", "learning_rate", "=", "0.00001", "\n", "margin_in_loss", "=", "0.25", "\n", "feature_space_dimension", "=", "128", "\n", "path_save_network_model", "=", "\".\\\\network_model\\\\\"", "+", "deep_model", "+", "\"\\\\\"", "\n", "model_dir_", "=", "model_dir", "(", "model_name", "=", "deep_model", ",", "n_res_blocks", "=", "n_res_blocks", ",", "batch_size", "=", "batch_size", ",", "learning_rate", "=", "learning_rate", ")", "\n", "#================================ ", "\n", "if", "train_the_source_domain", ":", "\n", "        ", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "", "if", "train_the_target_domain", ":", "\n", "        ", "batch_size", "=", "500", "\n", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "\n", "\n", "", "", "def", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.main.train_target_domain": [[40, 59], ["Target_domain.Target_domain", "Target_domain.Target_domain.read_data_into_batches", "Target_domain.Target_domain.embed_data_in_the_source_domain", "Target_domain.Target_domain.classification_in_target_domain_different_data_portions", "CNN_Siamese.CNN_Siamese", "ResNet_Siamese.ResNet_Siamese"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.read_data_into_batches", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.embed_data_in_the_source_domain", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.classification_in_target_domain_different_data_portions"], ["    ", "path_dataset_of_target_space", "=", "\"D:\\\\Datasets\\\\Kather_train_test\\\\test\"", "\n", "path_save_embeddings_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_test_set\\\\\"", "\n", "path_save_accuracy_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\accuracy_test_set\\\\\"", "\n", "proportions", "=", "[", "0.04", ",", "0.08", ",", "0.12", ",", "0.16", ",", "0.20", ",", "0.40", ",", "0.60", ",", "0.80", ",", "1", "]", "\n", "#================================ ", "\n", "# Siamese:", "\n", "loss_type", "=", "\"triplet\"", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n", "        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "False", ")", "\n", "", "target_domain", "=", "Target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ")", "\n", "batches", ",", "batches_subtypes", "=", "target_domain", ".", "read_data_into_batches", "(", "path_dataset", "=", "path_dataset_of_target_space", ")", "\n", "embedding", ",", "subtypes", "=", "target_domain", ".", "embed_data_in_the_source_domain", "(", "batches", ",", "batches_subtypes", ",", "siamese", ",", "path_save_embeddings_of_test_data", ")", "\n", "# target_domain.classification_in_target_domain(X=embedding, y=subtypes, path_save_accuracy_of_test_data=path_save_accuracy_of_test_data, cv=10)", "\n", "target_domain", ".", "classification_in_target_domain_different_data_portions", "(", "X", "=", "embedding", ",", "y", "=", "subtypes", ",", "path_save_accuracy_of_test_data", "=", "path_save_accuracy_of_test_data", ",", "\n", "proportions", "=", "proportions", ",", "cv", "=", "10", ")", "\n", "\n", "\n", "", "def", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.main.train_source_domain": [[61, 190], ["tensorflow.data.TFRecordDataset", "train_dataset.batch.map", "train_dataset.batch.map", "train_dataset.batch.repeat", "train_dataset.batch.shuffle", "train_dataset.batch.batch", "tensorflow.placeholder", "tensorflow.data.Iterator.from_string_handle", "tf.data.Iterator.from_string_handle.get_next", "tensorflow.data.make_initializable_iterator", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.Saver", "CNN_Siamese.CNN_Siamese", "tensorflow.Session", "sess.run", "sess.run", "sess.run", "sess.run", "range", "ResNet_Siamese.ResNet_Siamese", "tensorflow.train.AdamOptimizer", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tf.data.make_initializable_iterator.string_handle", "main.load_network_model", "print", "numpy.zeros", "numpy.zeros", "range", "loss_average_of_epochs.append", "print", "numpy.save", "sess.run", "image_anchor.reshape", "image_neighbor.reshape", "image_distant.reshape", "sess.run", "losses_in_epoch.extend", "numpy.average", "os.path.exists", "os.makedirs", "numpy.asarray", "main.save_network_model", "print", "str", "numpy.asarray", "str", "numpy.save", "numpy.save", "print", "matplotlib.figure", "main.Kather_get_color_and_shape_of_points", "matplotlib.savefig", "matplotlib.clf", "matplotlib.close", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.load_network_model", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.save_network_model", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.Kather_get_color_and_shape_of_points"], ["    ", "save_plot_embedding_space", "=", "True", "\n", "save_points_in_embedding_space", "=", "True", "\n", "load_saved_network_model", "=", "False", "\n", "num_epoch", "=", "300", "\n", "save_network_model_every_how_many_epochs", "=", "10", "\n", "save_embedding_every_how_many_epochs", "=", "10", "\n", "STEPS_PER_EPOCH_TRAIN", "=", "704", "\n", "n_samples_plot", "=", "2000", "#--> if None, plot all", "\n", "# path_tfrecords_train = 'D:\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "# path_tfrecords_train = '.\\\\..\\\\..\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "path_tfrecords_train", "=", "'D:\\\\TCGA_triplets\\\\tfrecord\\\\triplets.tfrecords'", "\n", "path_save_embedding_space", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_train_set\\\\\"", "\n", "path_save_loss", "=", "\".\\\\loss_saved\\\\\"", "\n", "#================================ ", "\n", "\n", "train_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "[", "path_tfrecords_train", "]", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "parse_function", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "normalize_triplets", ")", "\n", "\n", "num_repeat", "=", "None", "\n", "train_dataset", "=", "train_dataset", ".", "repeat", "(", "num_repeat", ")", "\n", "train_dataset", "=", "train_dataset", ".", "shuffle", "(", "buffer_size", "=", "1024", ")", "\n", "train_dataset", "=", "train_dataset", ".", "batch", "(", "batch_size", ")", "\n", "handle", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "[", "]", ")", "\n", "iterator", "=", "tf", ".", "data", ".", "Iterator", ".", "from_string_handle", "(", "handle", ",", "train_dataset", ".", "output_types", ",", "\n", "train_dataset", ".", "output_shapes", ")", "\n", "\n", "next_element", "=", "iterator", ".", "get_next", "(", ")", "\n", "# training_iterator = train_dataset.make_initializable_iterator()", "\n", "training_iterator", "=", "tf", ".", "data", ".", "make_initializable_iterator", "(", "train_dataset", ")", "\n", "\n", "# Siamese:", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n", "        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "True", ")", "\n", "# train_step = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(siamese.loss)", "\n", "", "train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate", ")", ".", "minimize", "(", "siamese", ".", "loss", ")", "\n", "# tf.initialize_all_variables().run()", "\n", "\n", "saver_", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "training_handle", "=", "sess", ".", "run", "(", "training_iterator", ".", "string_handle", "(", ")", ")", "\n", "sess", ".", "run", "(", "training_iterator", ".", "initializer", ")", "\n", "\n", "if", "load_saved_network_model", ":", "\n", "            ", "_", ",", "latest_epoch", "=", "load_network_model", "(", "saver_", "=", "saver_", ",", "session_", "=", "sess", ",", "checkpoint_dir", "=", "path_save_network_model", ",", "\n", "model_dir_", "=", "model_dir_", ",", "model_name", "=", "deep_model", ")", "\n", "", "else", ":", "\n", "            ", "latest_epoch", "=", "-", "1", "\n", "\n", "", "loss_average_of_epochs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "latest_epoch", "+", "1", ",", "num_epoch", ")", ":", "\n", "            ", "losses_in_epoch", "=", "[", "]", "\n", "print", "(", "\"============= epoch: \"", "+", "str", "(", "epoch", ")", "+", "\"/\"", "+", "str", "(", "num_epoch", "-", "1", ")", ")", "\n", "embeddings_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", "feature_space_dimension", ")", ")", "\n", "types_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", ")", ")", "\n", "subtypes_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "STEPS_PER_EPOCH_TRAIN", ")", ":", "\n", "                ", "image_anchor", ",", "image_neighbor", ",", "image_distant", ",", "type_anchor", ",", "type_neighbor", ",", "type_distant", ",", "subtype_anchor", ",", "subtype_neighbor", ",", "subtype_distant", "=", "sess", ".", "run", "(", "next_element", ",", "\n", "feed_dict", "=", "{", "handle", ":", "training_handle", "}", ")", "\n", "\n", "image_anchor_batch_3_channels", "=", "image_anchor", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "image_neighbor_batch_3_channels", "=", "image_neighbor", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "image_distant_batch_3_channels", "=", "image_distant", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "_", ",", "loss_v", ",", "embedding1", ",", "embedding2", ",", "embedding3", "=", "sess", ".", "run", "(", "[", "train_step", ",", "siamese", ".", "loss", ",", "siamese", ".", "o1", ",", "siamese", ".", "o2", ",", "siamese", ".", "o3", "]", ",", "feed_dict", "=", "{", "\n", "siamese", ".", "x1", ":", "image_anchor_batch_3_channels", ",", "\n", "siamese", ".", "x2", ":", "image_neighbor_batch_3_channels", ",", "\n", "siamese", ".", "x3", ":", "image_distant_batch_3_channels", "}", ")", "\n", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding1", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding2", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding3", "\n", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", "]", "=", "type_anchor", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", "]", "=", "type_neighbor", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", "]", "=", "type_distant", "\n", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", "]", "=", "subtype_anchor", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", "]", "=", "subtype_neighbor", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", "]", "=", "subtype_distant", "\n", "\n", "losses_in_epoch", ".", "extend", "(", "[", "loss_v", "]", ")", "\n", "\n", "# report average loss of epoch:", "\n", "", "loss_average_of_epochs", ".", "append", "(", "np", ".", "average", "(", "np", ".", "asarray", "(", "losses_in_epoch", ")", ")", ")", "\n", "print", "(", "\"Average loss of epoch \"", "+", "str", "(", "epoch", ")", "+", "\": \"", "+", "str", "(", "loss_average_of_epochs", "[", "-", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_loss", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_save_loss", ")", "\n", "", "np", ".", "save", "(", "path_save_loss", "+", "\"loss.npy\"", ",", "np", ".", "asarray", "(", "loss_average_of_epochs", ")", ")", "\n", "\n", "# plot the embedding space:", "\n", "if", "(", "epoch", "%", "save_embedding_every_how_many_epochs", "==", "0", ")", ":", "\n", "                ", "if", "save_points_in_embedding_space", ":", "\n", "                    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embedding_space", "+", "\"numpy\\\\\"", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "path_save_embedding_space", "+", "\"numpy\\\\\"", ")", "\n", "", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\embeddings_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "embeddings_in_epoch", ")", "\n", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\types_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "types_in_epoch", ")", "\n", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\subtypes_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "subtypes_in_epoch", ")", "\n", "", "if", "save_plot_embedding_space", ":", "\n", "                    ", "print", "(", "\"saving the plot of embedding space....\"", ")", "\n", "plt", ".", "figure", "(", "200", ")", "\n", "# fig.clf()", "\n", "TCGA_get_color_and_shape_of_points", "(", "embeddings_in_epoch", ",", "types_in_epoch", ",", "subtypes_in_epoch", ",", "n_samples_plot", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", ")", "\n", "", "plt", ".", "savefig", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", "+", "'epoch'", "+", "str", "(", "epoch", ")", "+", "'_step'", "+", "str", "(", "i", ")", "+", "'.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "# save the network model:", "\n", "", "", "if", "(", "epoch", "%", "save_network_model_every_how_many_epochs", "==", "0", ")", ":", "\n", "                ", "save_network_model", "(", "saver_", "=", "saver_", ",", "session_", "=", "sess", ",", "checkpoint_dir", "=", "path_save_network_model", ",", "step", "=", "epoch", ",", "model_name", "=", "deep_model", ",", "model_dir_", "=", "model_dir_", ")", "\n", "print", "(", "\"Model saved in path: %s\"", "%", "path_save_network_model", ")", "\n", "# siamese.save_network(session_=sess, checkpoint_dir=path_save_network_model)", "\n", "\n", "", "", "", "", "def", "TCGA_get_color_and_shape_of_points", "(", "embedding", ",", "type_", ",", "subtype_", ",", "n_samples_plot", "=", "None", ")", ":", "\n", "    ", "n_samples", "=", "embedding", ".", "shape", "[", "0", "]", "\n", "if", "n_samples_plot", "!=", "None", ":", "\n", "        ", "indices_to_plot", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n_samples", ")", ",", "min", "(", "n_samples_plot", ",", "n_samples", ")", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "indices_to_plot", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n_samples", ")", ",", "n_samples", ",", "replace", "=", "False", ")", "\n", "", "embedding_sampled", "=", "embedding", "[", "indices_to_plot", ",", ":", "]", "\n", "if", "embedding", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.main.TCGA_get_color_and_shape_of_points": [[192, 225], ["numpy.zeros", "matplotlib.subplots", "len", "matplotlib.scatter", "matplotlib.setp", "matplotlib.colorbar", "plt.colorbar.set_ticks", "plt.colorbar.set_ticklabels", "numpy.random.choice", "numpy.random.choice", "umap.UMAP().fit_transform", "numpy.arange", "range", "min", "range", "umap.UMAP", "numpy.arange"], "function", ["None"], ["        ", "embedding_sampled", "=", "umap", ".", "UMAP", "(", "n_neighbors", "=", "500", ")", ".", "fit_transform", "(", "embedding_sampled", ")", "\n", "", "n_points", "=", "embedding", ".", "shape", "[", "0", "]", "\n", "# n_points_sampled = embedding_sampled.shape[0]", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "n_points", ",", ")", ")", "\n", "labels", "[", "(", "type_", "==", "0", ")", "&", "(", "subtype_", "==", "0", ")", "]", "=", "0", "\n", "labels", "[", "(", "type_", "==", "0", ")", "&", "(", "subtype_", "==", "1", ")", "]", "=", "1", "\n", "labels", "[", "(", "type_", "==", "0", ")", "&", "(", "subtype_", "==", "2", ")", "]", "=", "2", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "0", ")", "]", "=", "3", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "1", ")", "]", "=", "4", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "2", ")", "]", "=", "5", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "3", ")", "]", "=", "6", "\n", "labels", "[", "(", "type_", "==", "2", ")", "&", "(", "subtype_", "==", "0", ")", "]", "=", "7", "\n", "labels", "[", "(", "type_", "==", "2", ")", "&", "(", "subtype_", "==", "1", ")", "]", "=", "8", "\n", "labels_sampled", "=", "labels", "[", "indices_to_plot", "]", "\n", "_", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "figsize", "=", "(", "14", ",", "10", ")", ")", "\n", "classes", "=", "[", "\"LUSC\"", ",", "\"MESO\"", ",", "\"LUAD\"", ",", "\"READ\"", ",", "\"COAD\"", ",", "\"STAD\"", ",", "\"ESCA\"", ",", "\"TGCT\"", ",", "\"PRAD\"", "]", "\n", "n_classes", "=", "len", "(", "classes", ")", "\n", "plt", ".", "scatter", "(", "embedding_sampled", "[", ":", ",", "0", "]", ",", "embedding_sampled", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "c", "=", "labels_sampled", ",", "cmap", "=", "'Spectral'", ",", "alpha", "=", "1.0", ")", "\n", "plt", ".", "setp", "(", "ax", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "cbar", "=", "plt", ".", "colorbar", "(", "boundaries", "=", "np", ".", "arange", "(", "n_classes", "+", "1", ")", "-", "0.5", ")", "\n", "cbar", ".", "set_ticks", "(", "np", ".", "arange", "(", "n_classes", ")", ")", "\n", "cbar", ".", "set_ticklabels", "(", "classes", ")", "\n", "return", "plt", "\n", "\n", "\n", "\n", "", "def", "save_network_model", "(", "saver_", ",", "session_", ",", "checkpoint_dir", ",", "step", ",", "model_name", ",", "model_dir_", ")", ":", "\n", "# https://stackoverflow.com/questions/33759623/tensorflow-how-to-save-restore-a-model", "\n", "# https://github.com/taki0112/ResNet-Tensorflow/blob/master/ResNet.py", "\n", "    ", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir_", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "saver_", ".", "save", "(", "session_", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_name", "+", "'.model'", ")", ",", "global_step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.main.Kather_get_color_and_shape_of_points": [[226, 258], ["numpy.zeros", "matplotlib.subplots", "len", "matplotlib.scatter", "matplotlib.setp", "matplotlib.colorbar", "plt.colorbar.set_ticks", "plt.colorbar.set_ticklabels", "numpy.random.choice", "numpy.random.choice", "umap.UMAP().fit_transform", "numpy.arange", "range", "min", "range", "umap.UMAP", "numpy.arange"], "function", ["None"], ["", "def", "load_network_model", "(", "saver_", ",", "session_", ",", "checkpoint_dir", ",", "model_dir_", ",", "model_name", ")", ":", "\n", "# https://stackoverflow.com/questions/33759623/tensorflow-how-to-save-restore-a-model", "\n", "    ", "print", "(", "\" [*] Reading checkpoints...\"", ")", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir_", ")", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "        ", "ckpt_name", "=", "os", ".", "path", ".", "basename", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "saver_", ".", "restore", "(", "session_", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "ckpt_name", ")", ")", "\n", "print", "(", "\" [*] Success to read {}\"", ".", "format", "(", "ckpt_name", ")", ")", "\n", "latest_epoch", "=", "int", "(", "ckpt_name", "[", "-", "1", "]", ")", "\n", "return", "True", ",", "latest_epoch", "\n", "", "else", ":", "\n", "        ", "print", "(", "\" [*] Failed to find a checkpoint\"", ")", "\n", "return", "False", ",", "0", "\n", "\n", "\n", "", "", "def", "model_dir", "(", "model_name", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ")", ":", "\n", "    ", "return", "\"{}_{}_{}_{}\"", ".", "format", "(", "model_name", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "main", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.main.save_network_model": [[261, 268], ["os.path.join", "saver_.save", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.main.load_network_model": [[269, 283], ["print", "os.path.join", "tensorflow.train.get_checkpoint_state", "os.path.basename", "saver_.restore", "print", "int", "print", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.main.model_dir": [[285, 287], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.Target_domain.Target_domain.__init__": [[21, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "checkpoint_dir", ",", "model_dir_", ",", "model_name", ",", "batch_size", ",", "feature_space_dimension", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_samples", "=", "None", "\n", "self", ".", "n_batches", "=", "None", "\n", "\n", "\n", "# X, embedding: rows are samples, columns are features", "\n", "# self.saver = tf.train.Saver()", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "\n", "self", ".", "model_dir_", "=", "model_dir_", "\n", "\n", "# self.model_name = model_name", "\n", "# self.batch_size = batch_size", "\n", "# self.X = X", "\n", "# self.n_samples = self.X.shape[0]", "\n", "self", ".", "feature_space_dimension", "=", "feature_space_dimension", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.Target_domain.Target_domain.embed_data_in_the_source_domain": [[39, 78], ["print", "int", "numpy.ceil", "tensorflow.Session", "tensorflow.global_variables_initializer().run", "numpy.zeros", "range", "numpy.save", "numpy.save", "Target_domain.Target_domain.Kather_get_color_and_shape_of_points", "Target_domain.Target_domain.savefig", "Target_domain.Target_domain.clf", "Target_domain.Target_domain.close", "print", "Target_domain.Target_domain.load_network_model", "Target_domain.Target_domain.normalize_images", "sess.run", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tensorflow.global_variables_initializer", "print", "print", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.Kather_get_color_and_shape_of_points", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.load_network_model", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.normalize_images"], ["", "def", "embed_data_in_the_source_domain", "(", "self", ",", "batches", ",", "batches_subtypes", ",", "siamese", ",", "path_save_embeddings_of_test_data", ")", ":", "\n", "        ", "print", "(", "\"Embedding the test set into the source domain....\"", ")", "\n", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "n_samples", "/", "self", ".", "batch_size", ")", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "embedding", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_samples", ",", "self", ".", "feature_space_dimension", ")", ")", "\n", "subtypes", "=", "[", "None", "]", "*", "self", ".", "n_samples", "\n", "for", "batch_index", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "print", "(", "\"processing batch \"", "+", "str", "(", "batch_index", ")", "+", "\"/\"", "+", "str", "(", "n_batches", "-", "1", ")", ")", "\n", "X_batch", "=", "batches", "[", "batch_index", "]", "\n", "could_load", ",", "checkpoint_counter", "=", "self", ".", "load_network_model", "(", "sess", ")", "\n", "if", "could_load", ":", "\n", "                    ", "print", "(", "\" [*] Load SUCCESS\"", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\" [!] Load failed...\"", ")", "\n", "", "test_feed_dict", "=", "{", "\n", "siamese", ".", "x1", ":", "X_batch", "\n", "}", "\n", "embedding_batch", "=", "sess", ".", "run", "(", "siamese", ".", "o1", ",", "feed_dict", "=", "test_feed_dict", ")", "\n", "pass", "\n", "if", "batch_index", "!=", "(", "n_batches", "-", "1", ")", ":", "\n", "                    ", "embedding", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "(", "(", "batch_index", "+", "1", ")", "*", "self", ".", "batch_size", ")", ",", ":", "]", "=", "embedding_batch", "\n", "subtypes", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "(", "(", "batch_index", "+", "1", ")", "*", "self", ".", "batch_size", ")", "]", "=", "batches_subtypes", "[", "batch_index", "]", "\n", "", "else", ":", "\n", "                    ", "embedding", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", ",", ":", "]", "=", "embedding_batch", "\n", "subtypes", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "]", "=", "batches_subtypes", "[", "batch_index", "]", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\\"", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\\"", ")", "\n", "", "np", ".", "save", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\embedding.npy\"", ",", "embedding", ")", "\n", "np", ".", "save", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\subtypes.npy\"", ",", "subtypes", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embeddings_of_test_data", "+", "\"plots\\\\\"", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_save_embeddings_of_test_data", "+", "\"plots\\\\\"", ")", "\n", "# plt.figure(200)", "\n", "", "plt", "=", "self", ".", "Kather_get_color_and_shape_of_points", "(", "embedding", "=", "embedding", ",", "subtype_", "=", "subtypes", ")", "\n", "plt", ".", "savefig", "(", "path_save_embeddings_of_test_data", "+", "\"plots\\\\\"", "+", "'embedding.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "return", "embedding", ",", "subtypes", "\n", "\n", "", "def", "Kather_get_color_and_shape_of_points", "(", "self", ",", "embedding", ",", "subtype_", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.Target_domain.Target_domain.normalize_images": [[79, 83], ["None"], "methods", ["None"], ["        ", "if", "embedding", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "            ", "embedding_", "=", "embedding", "\n", "", "else", ":", "\n", "            ", "embedding_", "=", "umap", ".", "UMAP", "(", "n_neighbors", "=", "500", ")", ".", "fit_transform", "(", "embedding", ")", "\n", "", "n_points", "=", "embedding_", ".", "shape", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.Target_domain.Target_domain.Kather_get_color_and_shape_of_points": [[84, 108], ["numpy.zeros", "matplotlib.subplots", "matplotlib.subplots", "len", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.setp", "matplotlib.setp", "matplotlib.colorbar", "matplotlib.colorbar", "matplotlib.colorbar.set_ticks", "matplotlib.colorbar.set_ticklabels", "umap.UMAP().fit_transform", "numpy.arange", "umap.UMAP", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.arange"], "methods", ["None"], ["labels", "=", "np", ".", "zeros", "(", "(", "n_points", ",", ")", ")", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"01_TUMOR\"", "]", "=", "0", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"02_STROMA\"", "]", "=", "1", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"03_COMPLEX\"", "]", "=", "2", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"04_LYMPHO\"", "]", "=", "3", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"05_DEBRIS\"", "]", "=", "4", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"06_MUCOSA\"", "]", "=", "5", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"07_ADIPOSE\"", "]", "=", "6", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"08_EMPTY\"", "]", "=", "7", "\n", "_", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "figsize", "=", "(", "14", ",", "10", ")", ")", "\n", "classes", "=", "[", "\"TUMOR\"", ",", "\"STROMA\"", ",", "\"COMPLEX\"", ",", "\"LYMPHO\"", ",", "\"DEBRIS\"", ",", "\"MUCOSA\"", ",", "\"ADIPOSE\"", ",", "\"EMPTY\"", "]", "\n", "n_classes", "=", "len", "(", "classes", ")", "\n", "plt", ".", "scatter", "(", "embedding_", "[", ":", ",", "0", "]", ",", "embedding_", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "c", "=", "labels", ",", "cmap", "=", "'Spectral'", ",", "alpha", "=", "1.0", ")", "\n", "plt", ".", "setp", "(", "ax", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "cbar", "=", "plt", ".", "colorbar", "(", "boundaries", "=", "np", ".", "arange", "(", "n_classes", "+", "1", ")", "-", "0.5", ")", "\n", "cbar", ".", "set_ticks", "(", "np", ".", "arange", "(", "n_classes", ")", ")", "\n", "cbar", ".", "set_ticklabels", "(", "classes", ")", "\n", "return", "plt", "\n", "\n", "", "def", "read_data_into_batches", "(", "self", ",", "path_dataset", ")", ":", "\n", "        ", "img_ext", "=", "'.npy'", "\n", "paths_of_images", "=", "[", "glob", ".", "glob", "(", "path_dataset", "+", "\"\\\\**\\\\*\"", "+", "img_ext", ")", "]", "\n", "paths_of_images", "=", "paths_of_images", "[", "0", "]", "\n", "self", ".", "n_samples", "=", "len", "(", "paths_of_images", ")", "\n", "self", ".", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "n_samples", "/", "self", ".", "batch_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.Target_domain.Target_domain.read_data_into_batches": [[109, 135], ["len", "int", "range", "range", "glob.glob", "numpy.ceil", "numpy.zeros", "print", "enumerate", "numpy.load", "str", "filename.split", "str"], "methods", ["None"], ["batches", "=", "[", "None", "]", "*", "self", ".", "n_batches", "\n", "batches_subtypes", "=", "[", "None", "]", "*", "self", ".", "n_batches", "\n", "for", "batch_index", "in", "range", "(", "self", ".", "n_batches", ")", ":", "\n", "            ", "if", "batch_index", "!=", "(", "self", ".", "n_batches", "-", "1", ")", ":", "\n", "                ", "n_samples_per_batch", "=", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "                ", "n_samples_per_batch", "=", "self", ".", "n_samples", "-", "(", "self", ".", "batch_size", "*", "(", "self", ".", "n_batches", "-", "1", ")", ")", "\n", "", "batches", "[", "batch_index", "]", "=", "np", ".", "zeros", "(", "(", "n_samples_per_batch", ",", "128", ",", "128", ",", "3", ")", ")", "\n", "batches_subtypes", "[", "batch_index", "]", "=", "[", "None", "]", "*", "n_samples_per_batch", "\n", "", "for", "batch_index", "in", "range", "(", "self", ".", "n_batches", ")", ":", "\n", "            ", "print", "(", "\"reading batch \"", "+", "str", "(", "batch_index", ")", "+", "\"/\"", "+", "str", "(", "self", ".", "n_batches", "-", "1", ")", ")", "\n", "if", "batch_index", "!=", "(", "self", ".", "n_batches", "-", "1", ")", ":", "\n", "                ", "paths_of_images_of_batch", "=", "paths_of_images", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "(", "(", "batch_index", "+", "1", ")", "*", "self", ".", "batch_size", ")", "]", "\n", "", "else", ":", "\n", "                ", "paths_of_images_of_batch", "=", "paths_of_images", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "]", "\n", "", "for", "file_index", ",", "filename", "in", "enumerate", "(", "paths_of_images_of_batch", ")", ":", "\n", "                ", "im", "=", "np", ".", "load", "(", "filename", ")", "\n", "batches", "[", "batch_index", "]", "[", "file_index", ",", ":", ",", ":", ",", ":", "]", "=", "im", "\n", "batches_subtypes", "[", "batch_index", "]", "[", "file_index", "]", "=", "filename", ".", "split", "(", "\"\\\\\"", ")", "[", "-", "2", "]", "\n", "", "", "return", "batches", ",", "batches_subtypes", "\n", "\n", "", "def", "load_network_model", "(", "self", ",", "session_", ")", ":", "\n", "# https://stackoverflow.com/questions/33759623/tensorflow-how-to-save-restore-a-model", "\n", "        ", "print", "(", "\" [*] Reading checkpoints...\"", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir_", ")", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.Target_domain.Target_domain.load_network_model": [[136, 151], ["print", "tensorflow.train.Saver", "os.path.join", "tensorflow.train.get_checkpoint_state", "os.path.basename", "tensorflow.train.Saver.restore", "print", "int", "print", "os.path.join"], "methods", ["None"], ["if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "ckpt_name", "=", "os", ".", "path", ".", "basename", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "saver", ".", "restore", "(", "session_", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "ckpt_name", ")", ")", "\n", "print", "(", "\" [*] Success to read {}\"", ".", "format", "(", "ckpt_name", ")", ")", "\n", "latest_epoch", "=", "int", "(", "ckpt_name", "[", "-", "1", "]", ")", "\n", "return", "True", ",", "latest_epoch", "\n", "", "else", ":", "\n", "            ", "print", "(", "\" [*] Failed to find a checkpoint\"", ")", "\n", "return", "False", ",", "0", "\n", "\n", "# def classification_in_target_domain(self, X, y):", "\n", "#     le = preprocessing.LabelEncoder()", "\n", "#     le.fit(np.unique(np.asarray(y)))", "\n", "#     y = le.transform(y)", "\n", "#     clf = LinearSVC(random_state=0, tol=1e-5)", "\n", "#     kf = KFold(n_splits=10)", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.Target_domain.Target_domain.classification_in_target_domain": [[164, 180], ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit", "sklearn.preprocessing.LabelEncoder.transform", "sklearn.svm.LinearSVC", "sklearn.model_selection.cross_val_score", "numpy.save", "numpy.savetxt", "print", "open", "open.write", "open.close", "numpy.unique", "os.path.exists", "os.makedirs", "str", "numpy.asarray", "sklearn.model_selection.cross_val_score.std", "str", "sklearn.model_selection.cross_val_score.mean"], "methods", ["None"], ["if", "not", "os", ".", "path", ".", "exists", "(", "path_save_accuracy_of_test_data", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_save_accuracy_of_test_data", ")", "\n", "", "np", ".", "save", "(", "path_save_accuracy_of_test_data", "+", "\"scores.npy\"", ",", "scores", ")", "\n", "np", ".", "savetxt", "(", "path_save_accuracy_of_test_data", "+", "\"scores.txt\"", ",", "scores", ",", "delimiter", "=", "','", ")", "\n", "str_", "=", "\"Mean accuracy: \"", "+", "str", "(", "scores", ".", "mean", "(", ")", ")", "+", "\" +- \"", "+", "str", "(", "scores", ".", "std", "(", ")", ")", "\n", "print", "(", "str_", ")", "\n", "text_file", "=", "open", "(", "path_save_accuracy_of_test_data", "+", "\"scores_average.txt\"", ",", "\"w\"", ")", "\n", "text_file", ".", "write", "(", "str_", ")", "\n", "text_file", ".", "close", "(", ")", "\n", "return", "scores", "\n", "\n", "", "def", "classification_in_target_domain_different_data_portions", "(", "self", ",", "X", ",", "y", ",", "path_save_accuracy_of_test_data", ",", "proportions", ",", "cv", "=", "10", ")", ":", "\n", "        ", "le", "=", "preprocessing", ".", "LabelEncoder", "(", ")", "\n", "le", ".", "fit", "(", "np", ".", "unique", "(", "np", ".", "asarray", "(", "y", ")", ")", ")", "\n", "y", "=", "le", ".", "transform", "(", "y", ")", "\n", "scores_array", "=", "np", ".", "zeros", "(", "(", "len", "(", "proportions", ")", ",", "cv", ")", ")", "\n", "for", "proportion_index", ",", "proportion", "in", "enumerate", "(", "proportions", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.Target_domain.Target_domain.classification_in_target_domain_different_data_portions": [[181, 230], ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit", "sklearn.preprocessing.LabelEncoder.transform", "numpy.zeros", "enumerate", "numpy.save", "numpy.savetxt", "numpy.zeros.mean", "numpy.zeros.min", "numpy.zeros.max", "matplotlib.fill_between", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.grid", "matplotlib.grid", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.clf", "matplotlib.clf", "matplotlib.close", "matplotlib.close", "numpy.unique", "print", "sklearn.model_selection.StratifiedKFold", "sklearn.svm.LinearSVC", "sklearn.model_selection.StratifiedKFold.split", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "numpy.asarray", "len", "sklearn.model_selection.StratifiedShuffleSplit", "sklearn.model_selection.StratifiedShuffleSplit.split", "sklearn.svm.LinearSVC.fit", "scores.append", "sklearn.svm.LinearSVC.score", "str"], "methods", ["None"], ["            ", "print", "(", "\"processing proportion: \"", "+", "str", "(", "proportion", ")", "+", "\"....\"", ")", "\n", "if", "proportion", "==", "1", ":", "\n", "                ", "X_", "=", "X", "\n", "y_", "=", "y", "\n", "", "else", ":", "\n", "                ", "sss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "proportion", ",", "random_state", "=", "0", ")", "\n", "for", "train_index", ",", "test_index", "in", "sss", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "                    ", "X_", "=", "X", "[", "test_index", ",", ":", "]", "\n", "y_", "=", "y", "[", "test_index", "]", "\n", "# scores = cross_val_score(clf, X_, y_, cv=cv)", "\n", "", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "cv", ")", "\n", "scores", "=", "[", "]", "\n", "clf", "=", "LinearSVC", "(", "random_state", "=", "0", ",", "tol", "=", "1e-4", ",", "max_iter", "=", "10000", ")", "\n", "# clf = RandomForestClassifier(random_state=0)", "\n", "for", "train_index", ",", "test_index", "in", "skf", ".", "split", "(", "X_", ",", "y_", ")", ":", "\n", "                ", "X_train", ",", "X_test", "=", "X_", "[", "train_index", "]", ",", "X_", "[", "test_index", "]", "\n", "y_train", ",", "y_test", "=", "y_", "[", "train_index", "]", ",", "y_", "[", "test_index", "]", "\n", "clf", ".", "fit", "(", "X", "=", "X_train", ",", "y", "=", "y_train", ")", "\n", "scores", ".", "append", "(", "clf", ".", "score", "(", "X", "=", "X_test", ",", "y", "=", "y_test", ")", ")", "\n", "", "del", "clf", "\n", "scores_array", "[", "proportion_index", ",", ":", "]", "=", "scores", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_accuracy_of_test_data", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_save_accuracy_of_test_data", ")", "\n", "", "np", ".", "save", "(", "path_save_accuracy_of_test_data", "+", "\"scores_array.npy\"", ",", "scores_array", ")", "\n", "np", ".", "savetxt", "(", "path_save_accuracy_of_test_data", "+", "\"scores_array.txt\"", ",", "scores_array", ",", "delimiter", "=", "','", ")", "\n", "# plot:", "\n", "scores_array", "=", "scores_array", "*", "100", "\n", "proportions", "=", "[", "proportion", "*", "100", "for", "proportion", "in", "proportions", "]", "\n", "mean_scores", "=", "scores_array", ".", "mean", "(", "axis", "=", "1", ")", "\n", "min_scores", "=", "scores_array", ".", "min", "(", "axis", "=", "1", ")", "\n", "max_scores", "=", "scores_array", ".", "max", "(", "axis", "=", "1", ")", "\n", "plt", ".", "fill_between", "(", "proportions", ",", "min_scores", ",", "max_scores", ",", "color", "=", "\"r\"", ",", "alpha", "=", "0.4", ")", "\n", "plt", ".", "plot", "(", "proportions", ",", "mean_scores", ",", "\"*-\"", ",", "color", "=", "\"r\"", ")", "\n", "plt", ".", "xlabel", "(", "\"proportion of data (%)\"", ")", "\n", "plt", ".", "ylabel", "(", "\"accuracy (%)\"", ")", "\n", "plt", ".", "ylim", "(", "40", ",", "100", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_accuracy_of_test_data", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_save_accuracy_of_test_data", ")", "\n", "", "plt", ".", "savefig", "(", "path_save_accuracy_of_test_data", "+", "'plot.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "return", "scores", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ops_resnet.conv": [[20, 28], ["tensorflow.variable_scope", "tensorflow.layers.conv2d"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d"], ["def", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "'SAME'", ",", "use_bias", "=", "True", ",", "scope", "=", "'conv_0'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "inputs", "=", "x", ",", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "kernel", ",", "kernel_initializer", "=", "weight_init", ",", "\n", "kernel_regularizer", "=", "weight_regularizer", ",", "\n", "strides", "=", "stride", ",", "use_bias", "=", "use_bias", ",", "padding", "=", "padding", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ops_resnet.fully_conneted": [[29, 35], ["tensorflow.variable_scope", "ops_resnet.flatten", "tensorflow.layers.dense"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.flatten"], ["", "", "def", "fully_conneted", "(", "x", ",", "units", ",", "use_bias", "=", "True", ",", "scope", "=", "'fully_0'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "x", "=", "flatten", "(", "x", ")", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "units", "=", "units", ",", "kernel_initializer", "=", "weight_init", ",", "kernel_regularizer", "=", "weight_regularizer", ",", "use_bias", "=", "use_bias", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ops_resnet.resblock": [[36, 57], ["tensorflow.variable_scope", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv"], ["", "", "def", "resblock", "(", "x_init", ",", "channels", ",", "is_training", "=", "True", ",", "use_bias", "=", "True", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "\n", "        ", "x", "=", "batch_norm", "(", "x_init", ",", "is_training", ",", "scope", "=", "'batch_norm_0'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "\n", "\n", "if", "downsample", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "x_init", "=", "conv", "(", "x_init", ",", "channels", ",", "kernel", "=", "1", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_init'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "\n", "", "x", "=", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm_1'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_1'", ")", "\n", "\n", "\n", "\n", "return", "x", "+", "x_init", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ops_resnet.bottle_resblock": [[58, 80], ["tensorflow.variable_scope", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.conv", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv"], ["", "", "def", "bottle_resblock", "(", "x_init", ",", "channels", ",", "is_training", "=", "True", ",", "use_bias", "=", "True", ",", "downsample", "=", "False", ",", "scope", "=", "'bottle_resblock'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "x", "=", "batch_norm", "(", "x_init", ",", "is_training", ",", "scope", "=", "'batch_norm_1x1_front'", ")", "\n", "shortcut", "=", "relu", "(", "x", ")", "\n", "\n", "x", "=", "conv", "(", "shortcut", ",", "channels", ",", "kernel", "=", "1", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_1x1_front'", ")", "\n", "x", "=", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm_3x3'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "\n", "if", "downsample", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "shortcut", "=", "conv", "(", "shortcut", ",", "channels", "*", "4", ",", "kernel", "=", "1", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_init'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "shortcut", "=", "conv", "(", "shortcut", ",", "channels", "*", "4", ",", "kernel", "=", "1", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_init'", ")", "\n", "\n", "", "x", "=", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm_1x1_back'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "x", "=", "conv", "(", "x", ",", "channels", "*", "4", ",", "kernel", "=", "1", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_1x1_back'", ")", "\n", "\n", "return", "x", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ops_resnet.get_residual_layer": [[83, 102], ["None"], "function", ["None"], ["", "", "def", "get_residual_layer", "(", "res_n", ")", ":", "\n", "    ", "x", "=", "[", "]", "\n", "\n", "if", "res_n", "==", "18", ":", "\n", "        ", "x", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "\n", "", "if", "res_n", "==", "34", ":", "\n", "        ", "x", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "\n", "", "if", "res_n", "==", "50", ":", "\n", "        ", "x", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "\n", "", "if", "res_n", "==", "101", ":", "\n", "        ", "x", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "\n", "", "if", "res_n", "==", "152", ":", "\n", "        ", "x", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ops_resnet.flatten": [[109, 111], ["tensorflow.layers.flatten"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.flatten"], ["", "def", "flatten", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "layers", ".", "flatten", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ops_resnet.global_avg_pooling": [[112, 115], ["tensorflow.reduce_mean"], "function", ["None"], ["", "def", "global_avg_pooling", "(", "x", ")", ":", "\n", "    ", "gap", "=", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "[", "1", ",", "2", "]", ",", "keepdims", "=", "True", ")", "\n", "return", "gap", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ops_resnet.avg_pooling": [[116, 118], ["tensorflow.layers.average_pooling2d"], "function", ["None"], ["", "def", "avg_pooling", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "layers", ".", "average_pooling2d", "(", "x", ",", "pool_size", "=", "2", ",", "strides", "=", "2", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ops_resnet.relu": [[124, 126], ["tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu"], ["", "def", "relu", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ops_resnet.batch_norm": [[132, 137], ["tensorflow.layers.batch_norm"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm"], ["", "def", "batch_norm", "(", "x", ",", "is_training", "=", "True", ",", "scope", "=", "'batch_norm'", ")", ":", "\n", "    ", "return", "tf_contrib", ".", "layers", ".", "batch_norm", "(", "x", ",", "\n", "decay", "=", "0.9", ",", "epsilon", "=", "1e-05", ",", "\n", "center", "=", "True", ",", "scale", "=", "True", ",", "updates_collections", "=", "None", ",", "\n", "is_training", "=", "is_training", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.ops_resnet.classification_loss": [[142, 148], ["tensorflow.reduce_mean", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast"], "function", ["None"], ["", "def", "classification_loss", "(", "logit", ",", "label", ")", ":", "\n", "    ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "label", ",", "logits", "=", "logit", ")", ")", "\n", "prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "logit", ",", "-", "1", ")", ",", "tf", ".", "argmax", "(", "label", ",", "-", "1", ")", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "prediction", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "return", "loss", ",", "accuracy", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.__init__": [[14, 69], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "CNN_Siamese.CNN_Siamese.loss_with_spring", "tensorflow.variable_scope", "CNN_Siamese.CNN_Siamese.conv_net", "CNN_Siamese.CNN_Siamese.conv_net", "CNN_Siamese.CNN_Siamese.conv_net", "CNN_Siamese.CNN_Siamese.loss_FDA", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.variable_scope", "CNN_Siamese.CNN_Siamese.conv_net_FDA", "CNN_Siamese.CNN_Siamese.conv_net_FDA", "CNN_Siamese.CNN_Siamese.conv_net_FDA"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.loss_with_spring", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.loss_FDA", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net_FDA", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net_FDA", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net_FDA"], ["    ", "def", "__init__", "(", "self", ",", "loss_type", ",", "feature_space_dimension", ",", "margin_in_loss", "=", "0.25", ")", ":", "\n", "# self.x1 = tf.placeholder(tf.float32, [None, 49152])", "\n", "# self.x1Image = tf.reshape(self.x1, [-1, 128, 128, 3])", "\n", "# self.x2 = tf.placeholder(tf.float32, [None, 49152])", "\n", "# self.x2Image = tf.reshape(self.x2, [-1, 128, 128, 3])", "\n", "# self.x3 = tf.placeholder(tf.float32, [None, 49152])", "\n", "# self.x3Image = tf.reshape(self.x3, [-1, 128, 128, 3])", "\n", "\n", "        ", "self", ".", "x1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x1Image", "=", "self", ".", "x1", "\n", "self", ".", "x2", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x2Image", "=", "self", ".", "x2", "\n", "self", ".", "x3", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x3Image", "=", "self", ".", "x3", "\n", "\n", "self", ".", "margin_in_loss", "=", "margin_in_loss", "\n", "\n", "# self.loss_type = tf.placeholder(tf.float32, [1, 1])", "\n", "\n", "# self.weights = {", "\n", "#     'wc1': tf.get_variable('W0', shape=(3,3,3,32), initializer=tf.contrib.layers.xavier_initializer()),", "\n", "#     'wc2': tf.get_variable('W1', shape=(3,3,32,64), initializer=tf.contrib.layers.xavier_initializer()),", "\n", "#     'wc3': tf.get_variable('W2', shape=(3,3,64,128), initializer=tf.contrib.layers.xavier_initializer()),", "\n", "#     'wd1': tf.get_variable('W3', shape=(4*4*128,1024), initializer=tf.contrib.layers.xavier_initializer()),", "\n", "#     }", "\n", "\n", "self", ".", "weights", "=", "{", "\n", "'wc1'", ":", "tf", ".", "get_variable", "(", "'W0'", ",", "shape", "=", "(", "3", ",", "3", ",", "3", ",", "32", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'wc2'", ":", "tf", ".", "get_variable", "(", "'W1'", ",", "shape", "=", "(", "3", ",", "3", ",", "32", ",", "64", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'wc3'", ":", "tf", ".", "get_variable", "(", "'W2'", ",", "shape", "=", "(", "3", ",", "3", ",", "64", ",", "128", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'wd1'", ":", "tf", ".", "get_variable", "(", "'W3'", ",", "shape", "=", "(", "16", "*", "16", "*", "128", ",", "500", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'out'", ":", "tf", ".", "get_variable", "(", "'W6'", ",", "shape", "=", "(", "500", ",", "feature_space_dimension", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "}", "\n", "self", ".", "biases", "=", "{", "\n", "'bc1'", ":", "tf", ".", "get_variable", "(", "'B0'", ",", "shape", "=", "(", "32", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'bc2'", ":", "tf", ".", "get_variable", "(", "'B1'", ",", "shape", "=", "(", "64", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'bc3'", ":", "tf", ".", "get_variable", "(", "'B2'", ",", "shape", "=", "(", "128", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'bd1'", ":", "tf", ".", "get_variable", "(", "'B3'", ",", "shape", "=", "(", "500", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "'out'", ":", "tf", ".", "get_variable", "(", "'B4'", ",", "shape", "=", "(", "feature_space_dimension", ")", ",", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", ",", "\n", "}", "\n", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "# Create loss", "\n", "if", "self", ".", "loss_type", "==", "\"triplet\"", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"siamese\"", ")", "as", "scope", ":", "\n", "                ", "self", ".", "o1", "=", "self", ".", "conv_net", "(", "self", ".", "x1Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ")", "\n", "self", ".", "o2", "=", "self", ".", "conv_net", "(", "self", ".", "x2Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ")", "\n", "self", ".", "o3", "=", "self", ".", "conv_net", "(", "self", ".", "x3Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ")", "\n", "", "self", ".", "loss", "=", "self", ".", "loss_with_spring", "(", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"FDA\"", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"siamese\"", ")", "as", "scope", ":", "\n", "                ", "self", ".", "o1", "=", "self", ".", "conv_net_FDA", "(", "self", ".", "x1Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ",", "o_index", "=", "1", ")", "\n", "self", ".", "o2", "=", "self", ".", "conv_net_FDA", "(", "self", ".", "x2Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ",", "o_index", "=", "2", ")", "\n", "self", ".", "o3", "=", "self", ".", "conv_net_FDA", "(", "self", ".", "x3Image", ",", "self", ".", "weights", ",", "self", ".", "biases", ",", "o_index", "=", "3", ")", "\n", "", "self", ".", "loss", "=", "self", ".", "loss_FDA", "(", ")", "\n", "# self.learning_rate = tf.placeholder(tf.float32, name='learning_rate')", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d": [[71, 75], ["tensorflow.nn.conv2d", "tensorflow.nn.bias_add", "tensorflow.nn.relu"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu"], ["", "", "def", "conv2d", "(", "self", ",", "x", ",", "W", ",", "b", ",", "strides", "=", "1", ")", ":", "\n", "        ", "x", "=", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "W", ",", "strides", "=", "[", "1", ",", "strides", ",", "strides", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "x", "=", "tf", ".", "nn", ".", "bias_add", "(", "x", ",", "b", ")", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d": [[76, 78], ["tensorflow.nn.max_pool"], "methods", ["None"], ["", "def", "maxpool2d", "(", "self", ",", "x", ",", "k", "=", "2", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "max_pool", "(", "x", ",", "ksize", "=", "[", "1", ",", "k", ",", "k", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "k", ",", "k", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net": [[79, 96], ["CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "tensorflow.reshape", "tensorflow.add", "tensorflow.add", "tensorflow.matmul", "tensorflow.matmul", "weights[].get_shape().as_list", "weights[].get_shape"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d"], ["", "def", "conv_net", "(", "self", ",", "x", ",", "weights", ",", "biases", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv2d", "(", "x", ",", "weights", "[", "'wc1'", "]", ",", "biases", "[", "'bc1'", "]", ")", "\n", "conv1", "=", "tf", ".", "nn", ".", "relu", "(", "conv1", ")", "\n", "conv1", "=", "self", ".", "maxpool2d", "(", "conv1", ",", "k", "=", "2", ")", "\n", "conv2", "=", "self", ".", "conv2d", "(", "conv1", ",", "weights", "[", "'wc2'", "]", ",", "biases", "[", "'bc2'", "]", ")", "\n", "conv2", "=", "tf", ".", "nn", ".", "relu", "(", "conv2", ")", "\n", "conv2", "=", "self", ".", "maxpool2d", "(", "conv2", ",", "k", "=", "2", ")", "\n", "conv3", "=", "self", ".", "conv2d", "(", "conv2", ",", "weights", "[", "'wc3'", "]", ",", "biases", "[", "'bc3'", "]", ")", "\n", "conv3", "=", "tf", ".", "nn", ".", "relu", "(", "conv3", ")", "\n", "conv3", "=", "self", ".", "maxpool2d", "(", "conv3", ",", "k", "=", "2", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "conv3", ",", "[", "-", "1", ",", "weights", "[", "'wd1'", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "]", ")", "\n", "fc1", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "fc1", ",", "weights", "[", "'wd1'", "]", ")", ",", "biases", "[", "'bd1'", "]", ")", "\n", "# fc1 = tf.nn.relu(fc1)", "\n", "# fc1 = tf.nn.sigmoid(fc1)", "\n", "# finally we multiply the fully connected layer with the weights and add a bias term.", "\n", "out", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "fc1", ",", "weights", "[", "'out'", "]", ")", ",", "biases", "[", "'out'", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv_net_FDA": [[97, 121], ["CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "CNN_Siamese.CNN_Siamese.conv2d", "tensorflow.nn.relu", "CNN_Siamese.CNN_Siamese.maxpool2d", "tensorflow.reshape", "tensorflow.add", "tensorflow.add", "tensorflow.matmul", "tensorflow.matmul", "weights[].get_shape().as_list", "weights[].get_shape"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.maxpool2d"], ["", "def", "conv_net_FDA", "(", "self", ",", "x", ",", "weights", ",", "biases", ",", "o_index", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv2d", "(", "x", ",", "weights", "[", "'wc1'", "]", ",", "biases", "[", "'bc1'", "]", ")", "\n", "conv1", "=", "tf", ".", "nn", ".", "relu", "(", "conv1", ")", "\n", "conv1", "=", "self", ".", "maxpool2d", "(", "conv1", ",", "k", "=", "2", ")", "\n", "conv2", "=", "self", ".", "conv2d", "(", "conv1", ",", "weights", "[", "'wc2'", "]", ",", "biases", "[", "'bc2'", "]", ")", "\n", "conv2", "=", "tf", ".", "nn", ".", "relu", "(", "conv2", ")", "\n", "conv2", "=", "self", ".", "maxpool2d", "(", "conv2", ",", "k", "=", "2", ")", "\n", "conv3", "=", "self", ".", "conv2d", "(", "conv2", ",", "weights", "[", "'wc3'", "]", ",", "biases", "[", "'bc3'", "]", ")", "\n", "conv3", "=", "tf", ".", "nn", ".", "relu", "(", "conv3", ")", "\n", "conv3", "=", "self", ".", "maxpool2d", "(", "conv3", ",", "k", "=", "2", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "conv3", ",", "[", "-", "1", ",", "weights", "[", "'wd1'", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "]", ")", "\n", "fc1", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "fc1", ",", "weights", "[", "'wd1'", "]", ")", ",", "biases", "[", "'bd1'", "]", ")", "\n", "if", "o_index", "==", "1", ":", "\n", "            ", "self", ".", "o1_output_oneToLastLayer", "=", "fc1", "\n", "", "elif", "o_index", "==", "2", ":", "\n", "            ", "self", ".", "o2_output_oneToLastLayer", "=", "fc1", "\n", "", "elif", "o_index", "==", "3", ":", "\n", "            ", "self", ".", "o3_output_oneToLastLayer", "=", "fc1", "\n", "# fc1 = tf.nn.relu(fc1)", "\n", "# fc1 = tf.nn.sigmoid(fc1)", "\n", "# finally we multiply the fully connected layer with the weights and add a bias term.", "\n", "", "out", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "fc1", ",", "weights", "[", "'out'", "]", ")", ",", "biases", "[", "'out'", "]", ")", "\n", "self", ".", "weights_lastLayer", "=", "weights", "[", "'out'", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.loss_with_spring": [[138, 146], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square"], "methods", ["None"], ["", "def", "loss_with_spring", "(", "self", ")", ":", "\n", "        ", "d_pos", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "o1", "-", "self", ".", "o2", ")", ",", "1", ")", "\n", "d_neg", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "o1", "-", "self", ".", "o3", ")", ",", "1", ")", "\n", "\n", "loss", "=", "tf", ".", "maximum", "(", "0.", ",", "self", ".", "margin_in_loss", "+", "d_pos", "-", "d_neg", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.loss_FDA": [[147, 181], ["tensorflow.transpose", "tensorflow.linalg.matmul", "tensorflow.transpose", "tensorflow.linalg.matmul", "tensorflow.linalg.matmul", "tensorflow.linalg.matmul", "tensorflow.linalg.trace", "tensorflow.linalg.matmul", "tensorflow.linalg.matmul", "tensorflow.linalg.trace", "tensorflow.math.maximum", "tensorflow.reduce_mean", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "loss_FDA", "(", "self", ")", ":", "\n", "# margin = 0.2", "\n", "# margin = 0.25", "\n", "        ", "margin", "=", "10", "\n", "\n", "# calculation of within scatter:", "\n", "temp1", "=", "self", ".", "o1_output_oneToLastLayer", "-", "self", ".", "o2_output_oneToLastLayer", "\n", "temp1", "=", "tf", ".", "transpose", "(", "temp1", ")", "# --> becomes: rows are features and columns are samples of batch", "\n", "S_within", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "temp1", ",", "b", "=", "tf", ".", "transpose", "(", "temp1", ")", ")", "\n", "\n", "# calculation of between scatter:", "\n", "temp2", "=", "self", ".", "o1_output_oneToLastLayer", "-", "self", ".", "o3_output_oneToLastLayer", "\n", "temp2", "=", "tf", ".", "transpose", "(", "temp2", ")", "# --> becomes: rows are features and columns are samples of batch", "\n", "S_between", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "temp2", ",", "b", "=", "tf", ".", "transpose", "(", "temp2", ")", ")", "\n", "\n", "# calculation of variance of projection considering within scatter:", "\n", "temp3", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "tf", ".", "transpose", "(", "self", ".", "weights_lastLayer", ")", ",", "b", "=", "S_within", ")", "\n", "temp3", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "temp3", ",", "b", "=", "self", ".", "weights_lastLayer", ")", "\n", "within_scatter_term", "=", "tf", ".", "linalg", ".", "trace", "(", "temp3", ")", "\n", "\n", "# calculation of variance of projection considering between scatter:", "\n", "temp4", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "tf", ".", "transpose", "(", "self", ".", "weights_lastLayer", ")", ",", "b", "=", "S_between", ")", "\n", "temp4", "=", "tf", ".", "linalg", ".", "matmul", "(", "a", "=", "temp4", ",", "b", "=", "self", ".", "weights_lastLayer", ")", "\n", "between_scatter_term", "=", "tf", ".", "linalg", ".", "trace", "(", "temp4", ")", "\n", "\n", "# calculation of loss:", "\n", "loss", "=", "tf", ".", "math", ".", "maximum", "(", "0.", ",", "margin", "+", "within_scatter_term", "-", "between_scatter_term", ")", "\n", "# loss = within_scatter_term - between_scatter_term + margin", "\n", "# loss = (within_scatter_term) / (between_scatter_term)", "\n", "# loss = (within_scatter_term + margin) / (between_scatter_term)", "\n", "# loss = (within_scatter_term) / (between_scatter_term - margin)", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Utils.normalize_images": [[21, 24], ["tensorflow.cast"], "function", ["None"], ["'image_neighbor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'image_distant'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'type_anchor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'type_neighbor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Utils.parse_function": [[25, 85], ["tensorflow.io.parse_single_example", "tensorflow.compat.v1.decode_raw", "tf.compat.v1.decode_raw.set_shape", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature"], "function", ["None"], ["'type_distant'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'subtype_anchor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'subtype_neighbor'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'subtype_distant'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", "\n", "}", "\n", "\n", "parsed_example", "=", "tf", ".", "io", ".", "parse_single_example", "(", "serialized", "=", "serialized", ",", "\n", "features", "=", "features", ")", "\n", "\n", "# image_anchor = tf.decode_raw(parsed_example['image_anchor'], tf.uint8)", "\n", "# image_neighbor = tf.decode_raw(parsed_example['image_neighbor'], tf.uint8)", "\n", "# image_distant = tf.decode_raw(parsed_example['image_distant'], tf.uint8)", "\n", "\n", "# https://www.tensorflow.org/api_docs/python", "\n", "image_anchor", "=", "tf", ".", "compat", ".", "v1", ".", "decode_raw", "(", "parsed_example", "[", "'image_anchor'", "]", ",", "tf", ".", "uint8", ")", "\n", "image_neighbor", "=", "tf", ".", "compat", ".", "v1", ".", "decode_raw", "(", "parsed_example", "[", "'image_neighbor'", "]", ",", "tf", ".", "uint8", ")", "\n", "image_distant", "=", "tf", ".", "compat", ".", "v1", ".", "decode_raw", "(", "parsed_example", "[", "'image_distant'", "]", ",", "tf", ".", "uint8", ")", "\n", "type_anchor", "=", "parsed_example", "[", "'type_anchor'", "]", "\n", "type_neighbor", "=", "parsed_example", "[", "'type_neighbor'", "]", "\n", "type_distant", "=", "parsed_example", "[", "'type_distant'", "]", "\n", "subtype_anchor", "=", "parsed_example", "[", "'subtype_anchor'", "]", "\n", "subtype_neighbor", "=", "parsed_example", "[", "'subtype_neighbor'", "]", "\n", "subtype_distant", "=", "parsed_example", "[", "'subtype_distant'", "]", "\n", "\n", "image_anchor", ".", "set_shape", "(", "(", "IMAGE_PIXELS", ")", ")", "\n", "image_neighbor", ".", "set_shape", "(", "(", "IMAGE_PIXELS", ")", ")", "\n", "image_distant", ".", "set_shape", "(", "(", "IMAGE_PIXELS", ")", ")", "\n", "\n", "return", "image_anchor", ",", "image_neighbor", ",", "image_distant", ",", "type_anchor", ",", "type_neighbor", ",", "type_distant", ",", "subtype_anchor", ",", "subtype_neighbor", ",", "subtype_distant", "\n", "\n", "", "def", "Global_Average_Pooling", "(", "x", ",", "stride", "=", "1", ")", ":", "\n", "        ", "width", "=", "np", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "height", "=", "np", ".", "shape", "(", "x", ")", "[", "2", "]", "\n", "pool_size", "=", "[", "width", ",", "height", "]", "\n", "return", "tf", ".", "layers", ".", "average_pooling2d", "(", "inputs", "=", "x", ",", "pool_size", "=", "pool_size", ",", "strides", "=", "stride", ")", "\n", "# The stride value does not matter", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Utils.Global_Average_Pooling": [[86, 91], ["tensorflow.layers.average_pooling2d", "np.shape", "np.shape"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.__init__": [[8, 27], ["tensorflow.placeholder", "tensorflow.placeholder", "ResNet.ResNet.loss_of_network", "tensorflow.variable_scope", "ResNet.ResNet.network", "tensorflow.variable_scope", "ResNet.ResNet.network"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.loss_of_network", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.network", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.network"], ["    ", "def", "__init__", "(", "self", ",", "feature_space_dimension", ",", "n_classes", ",", "n_res_blocks", "=", "18", ",", "margin_in_loss", "=", "0.25", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "128", "\n", "self", ".", "c_dim", "=", "3", "\n", "self", ".", "res_n", "=", "n_res_blocks", "\n", "self", ".", "feature_space_dimension", "=", "feature_space_dimension", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "self", ".", "x1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "self", ".", "x1Image", "=", "self", ".", "x1", "\n", "self", ".", "label_", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "\n", "\n", "# Create loss", "\n", "if", "is_train", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"resnet\"", ")", "as", "scope", ":", "\n", "                ", "self", ".", "o1_lastLayer", "=", "self", ".", "network", "(", "self", ".", "x1Image", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ")", "\n", "", "self", ".", "loss", "=", "self", ".", "loss_of_network", "(", ")", "\n", "", "else", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"resnet\"", ")", "as", "scope", ":", "\n", "                ", "self", ".", "o1_lastLayer", "=", "self", ".", "network", "(", "self", ".", "x1Image", ",", "is_training", "=", "False", ",", "reuse", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.save_network": [[44, 49], ["tensorflow.train.Saver", "tensorflow.train.Saver.save", "tensorflow.get_collection"], "methods", ["None"], ["", "", "", "def", "save_network", "(", "self", ",", "session_", ",", "checkpoint_dir", ")", ":", "\n", "# https://stackoverflow.com/questions/46549056/can-tensorflow-save-the-variables-in-a-certain-variable-scope", "\n", "# saver = tf.train.Saver(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, \"network\"))", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\"resnet\"", ")", ")", "\n", "saver", ".", "save", "(", "session_", ",", "checkpoint_dir", "+", "\"\\\\model.ckpt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.network": [[50, 100], ["tensorflow.variable_scope", "ops_resnet.get_residual_layer", "ops_resnet.conv", "range", "residual_block", "range", "residual_block", "range", "residual_block", "range", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.global_avg_pooling", "ops_resnet.fully_conneted", "ops_resnet.fully_conneted", "residual_block", "residual_block", "residual_block", "residual_block", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.get_residual_layer", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.global_avg_pooling", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.fully_conneted", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.fully_conneted"], ["", "def", "network", "(", "self", ",", "x", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"network\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "if", "self", ".", "res_n", "<", "50", ":", "\n", "                ", "residual_block", "=", "ops_resnet", ".", "resblock", "\n", "", "else", ":", "\n", "                ", "residual_block", "=", "ops_resnet", ".", "bottle_resblock", "\n", "\n", "", "residual_list", "=", "ops_resnet", ".", "get_residual_layer", "(", "self", ".", "res_n", ")", "\n", "\n", "ch", "=", "32", "# paper is 64", "\n", "x", "=", "ops_resnet", ".", "conv", "(", "x", ",", "channels", "=", "ch", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "scope", "=", "'conv'", ")", "\n", "\n", "for", "i", "in", "range", "(", "residual_list", "[", "0", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock0_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "2", ",", "is_training", "=", "is_training", ",", "downsample", "=", "True", ",", "scope", "=", "'resblock1_0'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "residual_list", "[", "1", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "2", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock1_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "4", ",", "is_training", "=", "is_training", ",", "downsample", "=", "True", ",", "scope", "=", "'resblock2_0'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "residual_list", "[", "2", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "4", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock2_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "8", ",", "is_training", "=", "is_training", ",", "downsample", "=", "True", ",", "scope", "=", "'resblock_3_0'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "residual_list", "[", "3", "]", ")", ":", "\n", "                ", "x", "=", "residual_block", "(", "x", ",", "channels", "=", "ch", "*", "8", ",", "is_training", "=", "is_training", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock_3_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "########################################################################################################", "\n", "\n", "\n", "", "x", "=", "ops_resnet", ".", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm'", ")", "\n", "x", "=", "ops_resnet", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "ops_resnet", ".", "global_avg_pooling", "(", "x", ")", "\n", "x_oneToLast", "=", "ops_resnet", ".", "fully_conneted", "(", "x", ",", "units", "=", "self", ".", "feature_space_dimension", ",", "scope", "=", "'logit_1'", ")", "\n", "\n", "self", ".", "o1", "=", "x_oneToLast", "\n", "\n", "x_last", "=", "ops_resnet", ".", "fully_conneted", "(", "x_oneToLast", ",", "units", "=", "self", ".", "n_classes", ",", "scope", "=", "'logit_2'", ")", "\n", "\n", "return", "x_last", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ResNet.ResNet.loss_of_network": [[101, 105], ["tensorflow.reduce_mean", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits"], "methods", ["None"], ["", "", "def", "loss_of_network", "(", "self", ")", ":", "\n", "# loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=self.label_, logits=self.o1_lastLayer))  #--> needs one-hot-encoding of labels", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "label_", ",", "logits", "=", "self", ".", "o1_lastLayer", ")", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.main": [[18, 38], ["main.model_dir", "main.train_source_domain", "main.train_target_domain"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.model_dir", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.train_source_domain", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.train_target_domain"], ["    ", "train_the_source_domain", "=", "False", "\n", "train_the_target_domain", "=", "True", "\n", "assert", "train_the_source_domain", "!=", "train_the_target_domain", "\n", "deep_model", "=", "\"ResNet\"", "#--> \"CNN\", \"ResNet\"", "\n", "loss_type", "=", "\"triplet\"", "#--> \"triplet\", \"FDA\"", "\n", "n_res_blocks", "=", "18", "#--> 18, 34, 50, 101, 152", "\n", "batch_size", "=", "32", "\n", "learning_rate", "=", "0.00001", "\n", "margin_in_loss", "=", "0.25", "\n", "feature_space_dimension", "=", "128", "\n", "path_save_network_model", "=", "\".\\\\network_model\\\\\"", "+", "deep_model", "+", "\"\\\\\"", "\n", "model_dir_", "=", "model_dir", "(", "model_name", "=", "deep_model", ",", "n_res_blocks", "=", "n_res_blocks", ",", "batch_size", "=", "batch_size", ",", "learning_rate", "=", "learning_rate", ")", "\n", "#================================ ", "\n", "if", "train_the_source_domain", ":", "\n", "        ", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "", "if", "train_the_target_domain", ":", "\n", "        ", "batch_size", "=", "500", "\n", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", "\n", "\n", "\n", "", "", "def", "train_target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ",", "n_res_blocks", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.train_target_domain": [[40, 57], ["Target_domain.Target_domain", "Target_domain.Target_domain.read_data_into_batches", "Target_domain.Target_domain.embed_data_in_the_source_domain", "Target_domain.Target_domain.classification_in_target_domain_different_data_portions", "ResNet.ResNet"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.read_data_into_batches", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.embed_data_in_the_source_domain", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.classification_in_target_domain_different_data_portions"], ["    ", "path_dataset_of_target_space", "=", "\"D:\\\\Datasets\\\\Kather_train_test\\\\test\"", "\n", "path_save_embeddings_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_test_set\\\\\"", "\n", "path_save_accuracy_of_test_data", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\accuracy_test_set\\\\\"", "\n", "proportions", "=", "[", "0.04", ",", "0.08", ",", "0.12", ",", "0.16", ",", "0.20", ",", "0.40", ",", "0.60", ",", "0.80", ",", "1", "]", "\n", "#================================ ", "\n", "# Siamese:", "\n", "loss_type", "=", "\"triplet\"", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n", "        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "False", ")", "\n", "", "target_domain", "=", "Target_domain", "(", "path_save_network_model", ",", "model_dir_", ",", "deep_model", ",", "batch_size", ",", "feature_space_dimension", ")", "\n", "batches", ",", "batches_subtypes", "=", "target_domain", ".", "read_data_into_batches", "(", "path_dataset", "=", "path_dataset_of_target_space", ")", "\n", "embedding", ",", "subtypes", "=", "target_domain", ".", "embed_data_in_the_source_domain", "(", "batches", ",", "batches_subtypes", ",", "siamese", ",", "path_save_embeddings_of_test_data", ")", "\n", "# target_domain.classification_in_target_domain(X=embedding, y=subtypes, path_save_accuracy_of_test_data=path_save_accuracy_of_test_data, cv=10)", "\n", "target_domain", ".", "classification_in_target_domain_different_data_portions", "(", "X", "=", "embedding", ",", "y", "=", "subtypes", ",", "path_save_accuracy_of_test_data", "=", "path_save_accuracy_of_test_data", ",", "\n", "proportions", "=", "proportions", ",", "cv", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.train_source_domain": [[59, 182], ["tensorflow.data.TFRecordDataset", "train_dataset.batch.map", "train_dataset.batch.map", "train_dataset.batch.repeat", "train_dataset.batch.shuffle", "train_dataset.batch.batch", "tensorflow.placeholder", "tensorflow.data.Iterator.from_string_handle", "tf.data.Iterator.from_string_handle.get_next", "tensorflow.data.make_initializable_iterator", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.Saver", "tensorflow.Session", "sess.run", "sess.run", "sess.run", "sess.run", "range", "ResNet.ResNet", "tensorflow.train.AdamOptimizer", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tf.data.make_initializable_iterator.string_handle", "main.load_network_model", "print", "numpy.zeros", "numpy.zeros", "range", "loss_average_of_epochs.append", "print", "numpy.save", "sess.run", "image_.reshape", "sess.run", "losses_in_epoch.extend", "numpy.average", "os.path.exists", "os.makedirs", "numpy.asarray", "main.save_network_model", "print", "str", "numpy.asarray", "str", "numpy.save", "numpy.save", "print", "matplotlib.figure", "main.Kather_get_color_and_shape_of_points", "matplotlib.savefig", "matplotlib.clf", "matplotlib.close", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.load_network_model", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.save_network_model", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.Kather_get_color_and_shape_of_points"], ["", "def", "train_source_domain", "(", "deep_model", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ",", "path_save_network_model", ",", "model_dir_", ",", "feature_space_dimension", ",", "margin_in_loss", ",", "loss_type", ")", ":", "\n", "#================================ settings:", "\n", "    ", "save_plot_embedding_space", "=", "True", "\n", "save_points_in_embedding_space", "=", "True", "\n", "load_saved_network_model", "=", "False", "\n", "num_epoch", "=", "300", "\n", "save_network_model_every_how_many_epochs", "=", "10", "\n", "save_embedding_every_how_many_epochs", "=", "10", "\n", "STEPS_PER_EPOCH_TRAIN", "=", "704", "\n", "n_samples_plot", "=", "2000", "#--> if None, plot all", "\n", "# path_tfrecords_train = 'D:\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "# path_tfrecords_train = '.\\\\..\\\\..\\\\triplet_work_Main\\\\_Important_files\\\\triplets.tfrecords'", "\n", "path_tfrecords_train", "=", "'D:\\\\TCGA_triplets\\\\tfrecord\\\\triplets.tfrecords'", "\n", "path_save_embedding_space", "=", "\".\\\\results\\\\\"", "+", "deep_model", "+", "\"\\\\embedding_train_set\\\\\"", "\n", "path_save_loss", "=", "\".\\\\loss_saved\\\\\"", "\n", "#================================ ", "\n", "\n", "train_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "[", "path_tfrecords_train", "]", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "parse_function", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "Utils", ".", "normalize_triplets", ")", "\n", "\n", "num_repeat", "=", "None", "\n", "train_dataset", "=", "train_dataset", ".", "repeat", "(", "num_repeat", ")", "\n", "train_dataset", "=", "train_dataset", ".", "shuffle", "(", "buffer_size", "=", "1024", ")", "\n", "train_dataset", "=", "train_dataset", ".", "batch", "(", "batch_size", ")", "\n", "handle", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "[", "]", ")", "\n", "iterator", "=", "tf", ".", "data", ".", "Iterator", ".", "from_string_handle", "(", "handle", ",", "train_dataset", ".", "output_types", ",", "\n", "train_dataset", ".", "output_shapes", ")", "\n", "\n", "next_element", "=", "iterator", ".", "get_next", "(", ")", "\n", "# training_iterator = train_dataset.make_initializable_iterator()", "\n", "training_iterator", "=", "tf", ".", "data", ".", "make_initializable_iterator", "(", "train_dataset", ")", "\n", "\n", "# Siamese:", "\n", "if", "deep_model", "==", "\"CNN\"", ":", "\n", "        ", "siamese", "=", "CNN_Siamese", ".", "CNN_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "margin_in_loss", "=", "margin_in_loss", ")", "\n", "", "elif", "deep_model", "==", "\"ResNet\"", ":", "\n", "        ", "siamese", "=", "ResNet_Siamese", ".", "ResNet_Siamese", "(", "loss_type", "=", "loss_type", ",", "feature_space_dimension", "=", "feature_space_dimension", ",", "n_res_blocks", "=", "n_res_blocks", ",", "margin_in_loss", "=", "margin_in_loss", ",", "is_train", "=", "True", ")", "\n", "# train_step = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(siamese.loss)", "\n", "", "train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate", ")", ".", "minimize", "(", "siamese", ".", "loss", ")", "\n", "# tf.initialize_all_variables().run()", "\n", "\n", "saver_", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "training_handle", "=", "sess", ".", "run", "(", "training_iterator", ".", "string_handle", "(", ")", ")", "\n", "sess", ".", "run", "(", "training_iterator", ".", "initializer", ")", "\n", "\n", "if", "load_saved_network_model", ":", "\n", "            ", "_", ",", "latest_epoch", "=", "load_network_model", "(", "saver_", "=", "saver_", ",", "session_", "=", "sess", ",", "checkpoint_dir", "=", "path_save_network_model", ",", "\n", "model_dir_", "=", "model_dir_", ",", "model_name", "=", "deep_model", ")", "\n", "", "else", ":", "\n", "            ", "latest_epoch", "=", "-", "1", "\n", "\n", "", "loss_average_of_epochs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "latest_epoch", "+", "1", ",", "num_epoch", ")", ":", "\n", "            ", "losses_in_epoch", "=", "[", "]", "\n", "print", "(", "\"============= epoch: \"", "+", "str", "(", "epoch", ")", "+", "\"/\"", "+", "str", "(", "num_epoch", "-", "1", ")", ")", "\n", "embeddings_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", "feature_space_dimension", ")", ")", "\n", "types_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", ")", ")", "\n", "subtypes_in_epoch", "=", "np", ".", "zeros", "(", "(", "STEPS_PER_EPOCH_TRAIN", "*", "batch_size", "*", "3", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "STEPS_PER_EPOCH_TRAIN", ")", ":", "\n", "                ", "image_anchor", ",", "image_neighbor", ",", "image_distant", ",", "type_anchor", ",", "type_neighbor", ",", "type_distant", ",", "subtype_anchor", ",", "subtype_neighbor", ",", "subtype_distant", "=", "sess", ".", "run", "(", "next_element", ",", "\n", "feed_dict", "=", "{", "handle", ":", "training_handle", "}", ")", "\n", "\n", "image_anchor_batch_3_channels", "=", "image_anchor", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "image_neighbor_batch_3_channels", "=", "image_neighbor", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "image_distant_batch_3_channels", "=", "image_distant", ".", "reshape", "(", "(", "batch_size", ",", "128", ",", "128", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "_", ",", "loss_v", ",", "embedding1", ",", "embedding2", ",", "embedding3", "=", "sess", ".", "run", "(", "[", "train_step", ",", "siamese", ".", "loss", ",", "siamese", ".", "o1", ",", "siamese", ".", "o2", ",", "siamese", ".", "o3", "]", ",", "feed_dict", "=", "{", "\n", "siamese", ".", "x1", ":", "image_anchor_batch_3_channels", ",", "\n", "siamese", ".", "x2", ":", "image_neighbor_batch_3_channels", ",", "\n", "siamese", ".", "x3", ":", "image_distant_batch_3_channels", "}", ")", "\n", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding1", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding2", "\n", "embeddings_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", ",", ":", "]", "=", "embedding3", "\n", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", "]", "=", "type_anchor", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", "]", "=", "type_neighbor", "\n", "types_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", "]", "=", "type_distant", "\n", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "0", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", "]", "=", "subtype_anchor", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "1", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", "]", "=", "subtype_neighbor", "\n", "subtypes_in_epoch", "[", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "2", "*", "batch_size", ")", ")", ":", "(", "(", "i", "*", "3", "*", "batch_size", ")", "+", "(", "3", "*", "batch_size", ")", ")", "]", "=", "subtype_distant", "\n", "\n", "losses_in_epoch", ".", "extend", "(", "[", "loss_v", "]", ")", "\n", "\n", "# report average loss of epoch:", "\n", "", "loss_average_of_epochs", ".", "append", "(", "np", ".", "average", "(", "np", ".", "asarray", "(", "losses_in_epoch", ")", ")", ")", "\n", "print", "(", "\"Average loss of epoch \"", "+", "str", "(", "epoch", ")", "+", "\": \"", "+", "str", "(", "loss_average_of_epochs", "[", "-", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_loss", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_save_loss", ")", "\n", "", "np", ".", "save", "(", "path_save_loss", "+", "\"loss.npy\"", ",", "np", ".", "asarray", "(", "loss_average_of_epochs", ")", ")", "\n", "\n", "# plot the embedding space:", "\n", "if", "(", "epoch", "%", "save_embedding_every_how_many_epochs", "==", "0", ")", ":", "\n", "                ", "if", "save_points_in_embedding_space", ":", "\n", "                    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embedding_space", "+", "\"numpy\\\\\"", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "path_save_embedding_space", "+", "\"numpy\\\\\"", ")", "\n", "", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\embeddings_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "embeddings_in_epoch", ")", "\n", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\types_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "types_in_epoch", ")", "\n", "np", ".", "save", "(", "path_save_embedding_space", "+", "\"numpy\\\\subtypes_in_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".npy\"", ",", "subtypes_in_epoch", ")", "\n", "", "if", "save_plot_embedding_space", ":", "\n", "                    ", "print", "(", "\"saving the plot of embedding space....\"", ")", "\n", "plt", ".", "figure", "(", "200", ")", "\n", "# fig.clf()", "\n", "TCGA_get_color_and_shape_of_points", "(", "embeddings_in_epoch", ",", "types_in_epoch", ",", "subtypes_in_epoch", ",", "n_samples_plot", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", ")", "\n", "", "plt", ".", "savefig", "(", "path_save_embedding_space", "+", "\"plots\\\\\"", "+", "'epoch'", "+", "str", "(", "epoch", ")", "+", "'_step'", "+", "str", "(", "i", ")", "+", "'.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "# save the network model:", "\n", "", "", "if", "(", "epoch", "%", "save_network_model_every_how_many_epochs", "==", "0", ")", ":", "\n", "                ", "save_network_model", "(", "saver_", "=", "saver_", ",", "session_", "=", "sess", ",", "checkpoint_dir", "=", "path_save_network_model", ",", "step", "=", "epoch", ",", "model_name", "=", "deep_model", ",", "model_dir_", "=", "model_dir_", ")", "\n", "print", "(", "\"Model saved in path: %s\"", "%", "path_save_network_model", ")", "\n", "# siamese.save_network(session_=sess, checkpoint_dir=path_save_network_model)", "\n", "\n", "", "", "", "", "def", "TCGA_get_color_and_shape_of_points", "(", "embedding", ",", "type_", ",", "subtype_", ",", "n_samples_plot", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.TCGA_get_color_and_shape_of_points": [[184, 217], ["numpy.zeros", "matplotlib.subplots", "len", "matplotlib.scatter", "matplotlib.setp", "matplotlib.colorbar", "plt.colorbar.set_ticks", "plt.colorbar.set_ticklabels", "numpy.random.choice", "numpy.random.choice", "umap.UMAP().fit_transform", "numpy.arange", "range", "min", "range", "umap.UMAP", "numpy.arange"], "function", ["None"], ["if", "n_samples_plot", "!=", "None", ":", "\n", "        ", "indices_to_plot", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n_samples", ")", ",", "min", "(", "n_samples_plot", ",", "n_samples", ")", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "indices_to_plot", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n_samples", ")", ",", "n_samples", ",", "replace", "=", "False", ")", "\n", "", "embedding_sampled", "=", "embedding", "[", "indices_to_plot", ",", ":", "]", "\n", "if", "embedding", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "embedding_sampled", "=", "umap", ".", "UMAP", "(", "n_neighbors", "=", "500", ")", ".", "fit_transform", "(", "embedding_sampled", ")", "\n", "", "n_points", "=", "embedding", ".", "shape", "[", "0", "]", "\n", "# n_points_sampled = embedding_sampled.shape[0]", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "n_points", ",", ")", ")", "\n", "labels", "[", "(", "type_", "==", "0", ")", "&", "(", "subtype_", "==", "0", ")", "]", "=", "0", "\n", "labels", "[", "(", "type_", "==", "0", ")", "&", "(", "subtype_", "==", "1", ")", "]", "=", "1", "\n", "labels", "[", "(", "type_", "==", "0", ")", "&", "(", "subtype_", "==", "2", ")", "]", "=", "2", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "0", ")", "]", "=", "3", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "1", ")", "]", "=", "4", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "2", ")", "]", "=", "5", "\n", "labels", "[", "(", "type_", "==", "1", ")", "&", "(", "subtype_", "==", "3", ")", "]", "=", "6", "\n", "labels", "[", "(", "type_", "==", "2", ")", "&", "(", "subtype_", "==", "0", ")", "]", "=", "7", "\n", "labels", "[", "(", "type_", "==", "2", ")", "&", "(", "subtype_", "==", "1", ")", "]", "=", "8", "\n", "labels_sampled", "=", "labels", "[", "indices_to_plot", "]", "\n", "_", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "figsize", "=", "(", "14", ",", "10", ")", ")", "\n", "classes", "=", "[", "\"LUSC\"", ",", "\"MESO\"", ",", "\"LUAD\"", ",", "\"READ\"", ",", "\"COAD\"", ",", "\"STAD\"", ",", "\"ESCA\"", ",", "\"TGCT\"", ",", "\"PRAD\"", "]", "\n", "n_classes", "=", "len", "(", "classes", ")", "\n", "plt", ".", "scatter", "(", "embedding_sampled", "[", ":", ",", "0", "]", ",", "embedding_sampled", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "c", "=", "labels_sampled", ",", "cmap", "=", "'Spectral'", ",", "alpha", "=", "1.0", ")", "\n", "plt", ".", "setp", "(", "ax", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "cbar", "=", "plt", ".", "colorbar", "(", "boundaries", "=", "np", ".", "arange", "(", "n_classes", "+", "1", ")", "-", "0.5", ")", "\n", "cbar", ".", "set_ticks", "(", "np", ".", "arange", "(", "n_classes", ")", ")", "\n", "cbar", ".", "set_ticklabels", "(", "classes", ")", "\n", "return", "plt", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.Kather_get_color_and_shape_of_points": [[218, 250], ["numpy.zeros", "matplotlib.subplots", "len", "matplotlib.scatter", "matplotlib.setp", "matplotlib.colorbar", "plt.colorbar.set_ticks", "plt.colorbar.set_ticklabels", "numpy.random.choice", "numpy.random.choice", "umap.UMAP().fit_transform", "numpy.arange", "range", "min", "range", "umap.UMAP", "numpy.arange"], "function", ["None"], ["", "def", "save_network_model", "(", "saver_", ",", "session_", ",", "checkpoint_dir", ",", "step", ",", "model_name", ",", "model_dir_", ")", ":", "\n", "# https://stackoverflow.com/questions/33759623/tensorflow-how-to-save-restore-a-model", "\n", "# https://github.com/taki0112/ResNet-Tensorflow/blob/master/ResNet.py", "\n", "    ", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir_", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "saver_", ".", "save", "(", "session_", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_name", "+", "'.model'", ")", ",", "global_step", "=", "step", ")", "\n", "\n", "", "def", "load_network_model", "(", "saver_", ",", "session_", ",", "checkpoint_dir", ",", "model_dir_", ",", "model_name", ")", ":", "\n", "# https://stackoverflow.com/questions/33759623/tensorflow-how-to-save-restore-a-model", "\n", "    ", "print", "(", "\" [*] Reading checkpoints...\"", ")", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir_", ")", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "        ", "ckpt_name", "=", "os", ".", "path", ".", "basename", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "saver_", ".", "restore", "(", "session_", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "ckpt_name", ")", ")", "\n", "print", "(", "\" [*] Success to read {}\"", ".", "format", "(", "ckpt_name", ")", ")", "\n", "latest_epoch", "=", "int", "(", "ckpt_name", "[", "-", "1", "]", ")", "\n", "return", "True", ",", "latest_epoch", "\n", "", "else", ":", "\n", "        ", "print", "(", "\" [*] Failed to find a checkpoint\"", ")", "\n", "return", "False", ",", "0", "\n", "\n", "\n", "", "", "def", "model_dir", "(", "model_name", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ")", ":", "\n", "    ", "return", "\"{}_{}_{}_{}\"", ".", "format", "(", "model_name", ",", "n_res_blocks", ",", "batch_size", ",", "learning_rate", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "main", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.save_network_model": [[253, 260], ["os.path.join", "saver_.save", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.load_network_model": [[261, 275], ["print", "os.path.join", "tensorflow.train.get_checkpoint_state", "os.path.basename", "saver_.restore", "print", "int", "print", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.main.model_dir": [[277, 279], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.__init__": [[21, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "checkpoint_dir", ",", "model_dir_", ",", "model_name", ",", "batch_size", ",", "feature_space_dimension", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_samples", "=", "None", "\n", "self", ".", "n_batches", "=", "None", "\n", "\n", "\n", "# X, embedding: rows are samples, columns are features", "\n", "# self.saver = tf.train.Saver()", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "\n", "self", ".", "model_dir_", "=", "model_dir_", "\n", "\n", "# self.model_name = model_name", "\n", "# self.batch_size = batch_size", "\n", "# self.X = X", "\n", "# self.n_samples = self.X.shape[0]", "\n", "self", ".", "feature_space_dimension", "=", "feature_space_dimension", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.embed_data_in_the_source_domain": [[39, 78], ["print", "int", "numpy.ceil", "tensorflow.Session", "tensorflow.global_variables_initializer().run", "numpy.zeros", "range", "numpy.save", "numpy.save", "Target_domain.Target_domain.Kather_get_color_and_shape_of_points", "Target_domain.Target_domain.savefig", "Target_domain.Target_domain.clf", "Target_domain.Target_domain.close", "print", "Target_domain.Target_domain.load_network_model", "Target_domain.Target_domain.normalize_images", "sess.run", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tensorflow.global_variables_initializer", "print", "print", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.Kather_get_color_and_shape_of_points", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.load_network_model", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.normalize_images"], ["", "def", "embed_data_in_the_source_domain", "(", "self", ",", "batches", ",", "batches_subtypes", ",", "siamese", ",", "path_save_embeddings_of_test_data", ")", ":", "\n", "        ", "print", "(", "\"Embedding the test set into the source domain....\"", ")", "\n", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "n_samples", "/", "self", ".", "batch_size", ")", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "embedding", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_samples", ",", "self", ".", "feature_space_dimension", ")", ")", "\n", "subtypes", "=", "[", "None", "]", "*", "self", ".", "n_samples", "\n", "for", "batch_index", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "print", "(", "\"processing batch \"", "+", "str", "(", "batch_index", ")", "+", "\"/\"", "+", "str", "(", "n_batches", "-", "1", ")", ")", "\n", "X_batch", "=", "batches", "[", "batch_index", "]", "\n", "could_load", ",", "checkpoint_counter", "=", "self", ".", "load_network_model", "(", "sess", ")", "\n", "if", "could_load", ":", "\n", "                    ", "print", "(", "\" [*] Load SUCCESS\"", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\" [!] Load failed...\"", ")", "\n", "", "test_feed_dict", "=", "{", "\n", "siamese", ".", "x1", ":", "X_batch", "\n", "}", "\n", "embedding_batch", "=", "sess", ".", "run", "(", "siamese", ".", "o1", ",", "feed_dict", "=", "test_feed_dict", ")", "\n", "pass", "\n", "if", "batch_index", "!=", "(", "n_batches", "-", "1", ")", ":", "\n", "                    ", "embedding", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "(", "(", "batch_index", "+", "1", ")", "*", "self", ".", "batch_size", ")", ",", ":", "]", "=", "embedding_batch", "\n", "subtypes", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "(", "(", "batch_index", "+", "1", ")", "*", "self", ".", "batch_size", ")", "]", "=", "batches_subtypes", "[", "batch_index", "]", "\n", "", "else", ":", "\n", "                    ", "embedding", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", ",", ":", "]", "=", "embedding_batch", "\n", "subtypes", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "]", "=", "batches_subtypes", "[", "batch_index", "]", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\\"", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\\"", ")", "\n", "", "np", ".", "save", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\embedding.npy\"", ",", "embedding", ")", "\n", "np", ".", "save", "(", "path_save_embeddings_of_test_data", "+", "\"numpy\\\\subtypes.npy\"", ",", "subtypes", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_embeddings_of_test_data", "+", "\"plots\\\\\"", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_save_embeddings_of_test_data", "+", "\"plots\\\\\"", ")", "\n", "# plt.figure(200)", "\n", "", "plt", "=", "self", ".", "Kather_get_color_and_shape_of_points", "(", "embedding", "=", "embedding", ",", "subtype_", "=", "subtypes", ")", "\n", "plt", ".", "savefig", "(", "path_save_embeddings_of_test_data", "+", "\"plots\\\\\"", "+", "'embedding.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "return", "embedding", ",", "subtypes", "\n", "\n", "", "def", "Kather_get_color_and_shape_of_points", "(", "self", ",", "embedding", ",", "subtype_", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.normalize_images": [[79, 83], ["None"], "methods", ["None"], ["        ", "if", "embedding", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "            ", "embedding_", "=", "embedding", "\n", "", "else", ":", "\n", "            ", "embedding_", "=", "umap", ".", "UMAP", "(", "n_neighbors", "=", "500", ")", ".", "fit_transform", "(", "embedding", ")", "\n", "", "n_points", "=", "embedding_", ".", "shape", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.Kather_get_color_and_shape_of_points": [[84, 108], ["numpy.zeros", "matplotlib.subplots", "matplotlib.subplots", "len", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.setp", "matplotlib.setp", "matplotlib.colorbar", "matplotlib.colorbar", "matplotlib.colorbar.set_ticks", "matplotlib.colorbar.set_ticklabels", "umap.UMAP().fit_transform", "numpy.arange", "umap.UMAP", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.arange"], "methods", ["None"], ["labels", "=", "np", ".", "zeros", "(", "(", "n_points", ",", ")", ")", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"01_TUMOR\"", "]", "=", "0", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"02_STROMA\"", "]", "=", "1", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"03_COMPLEX\"", "]", "=", "2", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"04_LYMPHO\"", "]", "=", "3", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"05_DEBRIS\"", "]", "=", "4", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"06_MUCOSA\"", "]", "=", "5", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"07_ADIPOSE\"", "]", "=", "6", "\n", "labels", "[", "np", ".", "asarray", "(", "subtype_", ")", "==", "\"08_EMPTY\"", "]", "=", "7", "\n", "_", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "figsize", "=", "(", "14", ",", "10", ")", ")", "\n", "classes", "=", "[", "\"TUMOR\"", ",", "\"STROMA\"", ",", "\"COMPLEX\"", ",", "\"LYMPHO\"", ",", "\"DEBRIS\"", ",", "\"MUCOSA\"", ",", "\"ADIPOSE\"", ",", "\"EMPTY\"", "]", "\n", "n_classes", "=", "len", "(", "classes", ")", "\n", "plt", ".", "scatter", "(", "embedding_", "[", ":", ",", "0", "]", ",", "embedding_", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "c", "=", "labels", ",", "cmap", "=", "'Spectral'", ",", "alpha", "=", "1.0", ")", "\n", "plt", ".", "setp", "(", "ax", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "cbar", "=", "plt", ".", "colorbar", "(", "boundaries", "=", "np", ".", "arange", "(", "n_classes", "+", "1", ")", "-", "0.5", ")", "\n", "cbar", ".", "set_ticks", "(", "np", ".", "arange", "(", "n_classes", ")", ")", "\n", "cbar", ".", "set_ticklabels", "(", "classes", ")", "\n", "return", "plt", "\n", "\n", "", "def", "read_data_into_batches", "(", "self", ",", "path_dataset", ")", ":", "\n", "        ", "img_ext", "=", "'.npy'", "\n", "paths_of_images", "=", "[", "glob", ".", "glob", "(", "path_dataset", "+", "\"\\\\**\\\\*\"", "+", "img_ext", ")", "]", "\n", "paths_of_images", "=", "paths_of_images", "[", "0", "]", "\n", "self", ".", "n_samples", "=", "len", "(", "paths_of_images", ")", "\n", "self", ".", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "n_samples", "/", "self", ".", "batch_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.read_data_into_batches": [[109, 135], ["len", "int", "range", "range", "glob.glob", "numpy.ceil", "numpy.zeros", "print", "enumerate", "numpy.load", "str", "filename.split", "str"], "methods", ["None"], ["batches", "=", "[", "None", "]", "*", "self", ".", "n_batches", "\n", "batches_subtypes", "=", "[", "None", "]", "*", "self", ".", "n_batches", "\n", "for", "batch_index", "in", "range", "(", "self", ".", "n_batches", ")", ":", "\n", "            ", "if", "batch_index", "!=", "(", "self", ".", "n_batches", "-", "1", ")", ":", "\n", "                ", "n_samples_per_batch", "=", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "                ", "n_samples_per_batch", "=", "self", ".", "n_samples", "-", "(", "self", ".", "batch_size", "*", "(", "self", ".", "n_batches", "-", "1", ")", ")", "\n", "", "batches", "[", "batch_index", "]", "=", "np", ".", "zeros", "(", "(", "n_samples_per_batch", ",", "128", ",", "128", ",", "3", ")", ")", "\n", "batches_subtypes", "[", "batch_index", "]", "=", "[", "None", "]", "*", "n_samples_per_batch", "\n", "", "for", "batch_index", "in", "range", "(", "self", ".", "n_batches", ")", ":", "\n", "            ", "print", "(", "\"reading batch \"", "+", "str", "(", "batch_index", ")", "+", "\"/\"", "+", "str", "(", "self", ".", "n_batches", "-", "1", ")", ")", "\n", "if", "batch_index", "!=", "(", "self", ".", "n_batches", "-", "1", ")", ":", "\n", "                ", "paths_of_images_of_batch", "=", "paths_of_images", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "(", "(", "batch_index", "+", "1", ")", "*", "self", ".", "batch_size", ")", "]", "\n", "", "else", ":", "\n", "                ", "paths_of_images_of_batch", "=", "paths_of_images", "[", "(", "batch_index", "*", "self", ".", "batch_size", ")", ":", "]", "\n", "", "for", "file_index", ",", "filename", "in", "enumerate", "(", "paths_of_images_of_batch", ")", ":", "\n", "                ", "im", "=", "np", ".", "load", "(", "filename", ")", "\n", "batches", "[", "batch_index", "]", "[", "file_index", ",", ":", ",", ":", ",", ":", "]", "=", "im", "\n", "batches_subtypes", "[", "batch_index", "]", "[", "file_index", "]", "=", "filename", ".", "split", "(", "\"\\\\\"", ")", "[", "-", "2", "]", "\n", "", "", "return", "batches", ",", "batches_subtypes", "\n", "\n", "", "def", "load_network_model", "(", "self", ",", "session_", ")", ":", "\n", "# https://stackoverflow.com/questions/33759623/tensorflow-how-to-save-restore-a-model", "\n", "        ", "print", "(", "\" [*] Reading checkpoints...\"", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir_", ")", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.load_network_model": [[136, 151], ["print", "tensorflow.train.Saver", "os.path.join", "tensorflow.train.get_checkpoint_state", "os.path.basename", "tensorflow.train.Saver.restore", "print", "int", "print", "os.path.join"], "methods", ["None"], ["if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "ckpt_name", "=", "os", ".", "path", ".", "basename", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "saver", ".", "restore", "(", "session_", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "ckpt_name", ")", ")", "\n", "print", "(", "\" [*] Success to read {}\"", ".", "format", "(", "ckpt_name", ")", ")", "\n", "latest_epoch", "=", "int", "(", "ckpt_name", "[", "-", "1", "]", ")", "\n", "return", "True", ",", "latest_epoch", "\n", "", "else", ":", "\n", "            ", "print", "(", "\" [*] Failed to find a checkpoint\"", ")", "\n", "return", "False", ",", "0", "\n", "\n", "# def classification_in_target_domain(self, X, y):", "\n", "#     le = preprocessing.LabelEncoder()", "\n", "#     le.fit(np.unique(np.asarray(y)))", "\n", "#     y = le.transform(y)", "\n", "#     clf = LinearSVC(random_state=0, tol=1e-5)", "\n", "#     kf = KFold(n_splits=10)", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.classification_in_target_domain": [[164, 180], ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit", "sklearn.preprocessing.LabelEncoder.transform", "sklearn.svm.LinearSVC", "sklearn.model_selection.cross_val_score", "numpy.save", "numpy.savetxt", "print", "open", "open.write", "open.close", "numpy.unique", "os.path.exists", "os.makedirs", "str", "numpy.asarray", "sklearn.model_selection.cross_val_score.std", "str", "sklearn.model_selection.cross_val_score.mean"], "methods", ["None"], ["if", "not", "os", ".", "path", ".", "exists", "(", "path_save_accuracy_of_test_data", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_save_accuracy_of_test_data", ")", "\n", "", "np", ".", "save", "(", "path_save_accuracy_of_test_data", "+", "\"scores.npy\"", ",", "scores", ")", "\n", "np", ".", "savetxt", "(", "path_save_accuracy_of_test_data", "+", "\"scores.txt\"", ",", "scores", ",", "delimiter", "=", "','", ")", "\n", "str_", "=", "\"Mean accuracy: \"", "+", "str", "(", "scores", ".", "mean", "(", ")", ")", "+", "\" +- \"", "+", "str", "(", "scores", ".", "std", "(", ")", ")", "\n", "print", "(", "str_", ")", "\n", "text_file", "=", "open", "(", "path_save_accuracy_of_test_data", "+", "\"scores_average.txt\"", ",", "\"w\"", ")", "\n", "text_file", ".", "write", "(", "str_", ")", "\n", "text_file", ".", "close", "(", ")", "\n", "return", "scores", "\n", "\n", "", "def", "classification_in_target_domain_different_data_portions", "(", "self", ",", "X", ",", "y", ",", "path_save_accuracy_of_test_data", ",", "proportions", ",", "cv", "=", "10", ")", ":", "\n", "        ", "le", "=", "preprocessing", ".", "LabelEncoder", "(", ")", "\n", "le", ".", "fit", "(", "np", ".", "unique", "(", "np", ".", "asarray", "(", "y", ")", ")", ")", "\n", "y", "=", "le", ".", "transform", "(", "y", ")", "\n", "scores_array", "=", "np", ".", "zeros", "(", "(", "len", "(", "proportions", ")", ",", "cv", ")", ")", "\n", "for", "proportion_index", ",", "proportion", "in", "enumerate", "(", "proportions", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.Target_domain.Target_domain.classification_in_target_domain_different_data_portions": [[181, 230], ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit", "sklearn.preprocessing.LabelEncoder.transform", "numpy.zeros", "enumerate", "numpy.save", "numpy.savetxt", "numpy.zeros.mean", "numpy.zeros.min", "numpy.zeros.max", "matplotlib.fill_between", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.grid", "matplotlib.grid", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.clf", "matplotlib.clf", "matplotlib.close", "matplotlib.close", "numpy.unique", "print", "sklearn.model_selection.StratifiedKFold", "sklearn.svm.LinearSVC", "sklearn.model_selection.StratifiedKFold.split", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "numpy.asarray", "len", "sklearn.model_selection.StratifiedShuffleSplit", "sklearn.model_selection.StratifiedShuffleSplit.split", "sklearn.svm.LinearSVC.fit", "scores.append", "sklearn.svm.LinearSVC.score", "str"], "methods", ["None"], ["            ", "print", "(", "\"processing proportion: \"", "+", "str", "(", "proportion", ")", "+", "\"....\"", ")", "\n", "if", "proportion", "==", "1", ":", "\n", "                ", "X_", "=", "X", "\n", "y_", "=", "y", "\n", "", "else", ":", "\n", "                ", "sss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "proportion", ",", "random_state", "=", "0", ")", "\n", "for", "train_index", ",", "test_index", "in", "sss", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "                    ", "X_", "=", "X", "[", "test_index", ",", ":", "]", "\n", "y_", "=", "y", "[", "test_index", "]", "\n", "# scores = cross_val_score(clf, X_, y_, cv=cv)", "\n", "", "", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "cv", ")", "\n", "scores", "=", "[", "]", "\n", "clf", "=", "LinearSVC", "(", "random_state", "=", "0", ",", "tol", "=", "1e-4", ",", "max_iter", "=", "10000", ")", "\n", "# clf = RandomForestClassifier(random_state=0)", "\n", "for", "train_index", ",", "test_index", "in", "skf", ".", "split", "(", "X_", ",", "y_", ")", ":", "\n", "                ", "X_train", ",", "X_test", "=", "X_", "[", "train_index", "]", ",", "X_", "[", "test_index", "]", "\n", "y_train", ",", "y_test", "=", "y_", "[", "train_index", "]", ",", "y_", "[", "test_index", "]", "\n", "clf", ".", "fit", "(", "X", "=", "X_train", ",", "y", "=", "y_train", ")", "\n", "scores", ".", "append", "(", "clf", ".", "score", "(", "X", "=", "X_test", ",", "y", "=", "y_test", ")", ")", "\n", "", "del", "clf", "\n", "scores_array", "[", "proportion_index", ",", ":", "]", "=", "scores", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_accuracy_of_test_data", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_save_accuracy_of_test_data", ")", "\n", "", "np", ".", "save", "(", "path_save_accuracy_of_test_data", "+", "\"scores_array.npy\"", ",", "scores_array", ")", "\n", "np", ".", "savetxt", "(", "path_save_accuracy_of_test_data", "+", "\"scores_array.txt\"", ",", "scores_array", ",", "delimiter", "=", "','", ")", "\n", "# plot:", "\n", "scores_array", "=", "scores_array", "*", "100", "\n", "proportions", "=", "[", "proportion", "*", "100", "for", "proportion", "in", "proportions", "]", "\n", "mean_scores", "=", "scores_array", ".", "mean", "(", "axis", "=", "1", ")", "\n", "min_scores", "=", "scores_array", ".", "min", "(", "axis", "=", "1", ")", "\n", "max_scores", "=", "scores_array", ".", "max", "(", "axis", "=", "1", ")", "\n", "plt", ".", "fill_between", "(", "proportions", ",", "min_scores", ",", "max_scores", ",", "color", "=", "\"r\"", ",", "alpha", "=", "0.4", ")", "\n", "plt", ".", "plot", "(", "proportions", ",", "mean_scores", ",", "\"*-\"", ",", "color", "=", "\"r\"", ")", "\n", "plt", ".", "xlabel", "(", "\"proportion of data (%)\"", ")", "\n", "plt", ".", "ylabel", "(", "\"accuracy (%)\"", ")", "\n", "plt", ".", "ylim", "(", "40", ",", "100", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_save_accuracy_of_test_data", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_save_accuracy_of_test_data", ")", "\n", "", "plt", ".", "savefig", "(", "path_save_accuracy_of_test_data", "+", "'plot.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "return", "scores", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv": [[20, 28], ["tensorflow.variable_scope", "tensorflow.layers.conv2d"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.3_Siamese_CRC_Source_CRC_Target.CNN_Siamese.CNN_Siamese.conv2d"], ["def", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "'SAME'", ",", "use_bias", "=", "True", ",", "scope", "=", "'conv_0'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "inputs", "=", "x", ",", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "kernel", ",", "kernel_initializer", "=", "weight_init", ",", "\n", "kernel_regularizer", "=", "weight_regularizer", ",", "\n", "strides", "=", "stride", ",", "use_bias", "=", "use_bias", ",", "padding", "=", "padding", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.fully_conneted": [[29, 35], ["tensorflow.variable_scope", "ops_resnet.flatten", "tensorflow.layers.dense"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.flatten"], ["", "", "def", "fully_conneted", "(", "x", ",", "units", ",", "use_bias", "=", "True", ",", "scope", "=", "'fully_0'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "x", "=", "flatten", "(", "x", ")", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "units", "=", "units", ",", "kernel_initializer", "=", "weight_init", ",", "kernel_regularizer", "=", "weight_regularizer", ",", "use_bias", "=", "use_bias", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.resblock": [[36, 57], ["tensorflow.variable_scope", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv"], ["", "", "def", "resblock", "(", "x_init", ",", "channels", ",", "is_training", "=", "True", ",", "use_bias", "=", "True", ",", "downsample", "=", "False", ",", "scope", "=", "'resblock'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "\n", "        ", "x", "=", "batch_norm", "(", "x_init", ",", "is_training", ",", "scope", "=", "'batch_norm_0'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "\n", "\n", "if", "downsample", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "x_init", "=", "conv", "(", "x_init", ",", "channels", ",", "kernel", "=", "1", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_init'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "\n", "", "x", "=", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm_1'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_1'", ")", "\n", "\n", "\n", "\n", "return", "x", "+", "x_init", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.bottle_resblock": [[58, 80], ["tensorflow.variable_scope", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.conv", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.batch_norm", "ops_resnet.relu", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv", "ops_resnet.conv"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv", "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.conv"], ["", "", "def", "bottle_resblock", "(", "x_init", ",", "channels", ",", "is_training", "=", "True", ",", "use_bias", "=", "True", ",", "downsample", "=", "False", ",", "scope", "=", "'bottle_resblock'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "x", "=", "batch_norm", "(", "x_init", ",", "is_training", ",", "scope", "=", "'batch_norm_1x1_front'", ")", "\n", "shortcut", "=", "relu", "(", "x", ")", "\n", "\n", "x", "=", "conv", "(", "shortcut", ",", "channels", ",", "kernel", "=", "1", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_1x1_front'", ")", "\n", "x", "=", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm_3x3'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "\n", "if", "downsample", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "shortcut", "=", "conv", "(", "shortcut", ",", "channels", "*", "4", ",", "kernel", "=", "1", ",", "stride", "=", "2", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_init'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "channels", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_0'", ")", "\n", "shortcut", "=", "conv", "(", "shortcut", ",", "channels", "*", "4", ",", "kernel", "=", "1", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_init'", ")", "\n", "\n", "", "x", "=", "batch_norm", "(", "x", ",", "is_training", ",", "scope", "=", "'batch_norm_1x1_back'", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "x", "=", "conv", "(", "x", ",", "channels", "*", "4", ",", "kernel", "=", "1", ",", "stride", "=", "1", ",", "use_bias", "=", "use_bias", ",", "scope", "=", "'conv_1x1_back'", ")", "\n", "\n", "return", "x", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.get_residual_layer": [[83, 102], ["None"], "function", ["None"], ["", "", "def", "get_residual_layer", "(", "res_n", ")", ":", "\n", "    ", "x", "=", "[", "]", "\n", "\n", "if", "res_n", "==", "18", ":", "\n", "        ", "x", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "\n", "", "if", "res_n", "==", "34", ":", "\n", "        ", "x", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "\n", "", "if", "res_n", "==", "50", ":", "\n", "        ", "x", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "\n", "", "if", "res_n", "==", "101", ":", "\n", "        ", "x", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "\n", "", "if", "res_n", "==", "152", ":", "\n", "        ", "x", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.flatten": [[109, 111], ["tensorflow.layers.flatten"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.flatten"], ["", "def", "flatten", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "layers", ".", "flatten", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.global_avg_pooling": [[112, 115], ["tensorflow.reduce_mean"], "function", ["None"], ["", "def", "global_avg_pooling", "(", "x", ")", ":", "\n", "    ", "gap", "=", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "[", "1", ",", "2", "]", ",", "keepdims", "=", "True", ")", "\n", "return", "gap", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.avg_pooling": [[116, 118], ["tensorflow.layers.average_pooling2d"], "function", ["None"], ["", "def", "avg_pooling", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "layers", ".", "average_pooling2d", "(", "x", ",", "pool_size", "=", "2", ",", "strides", "=", "2", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu": [[124, 126], ["tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.relu"], ["", "def", "relu", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm": [[132, 137], ["tensorflow.layers.batch_norm"], "function", ["home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.batch_norm"], ["", "def", "batch_norm", "(", "x", ",", "is_training", "=", "True", ",", "scope", "=", "'batch_norm'", ")", ":", "\n", "    ", "return", "tf_contrib", ".", "layers", ".", "batch_norm", "(", "x", ",", "\n", "decay", "=", "0.9", ",", "epsilon", "=", "1e-05", ",", "\n", "center", "=", "True", ",", "scale", "=", "True", ",", "updates_collections", "=", "None", ",", "\n", "is_training", "=", "is_training", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Siamese-Network-Histopathology.4_Supervised_Crossentropy_ResNet_CRC.ops_resnet.classification_loss": [[142, 148], ["tensorflow.reduce_mean", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast"], "function", ["None"], ["", "def", "classification_loss", "(", "logit", ",", "label", ")", ":", "\n", "    ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "label", ",", "logits", "=", "logit", ")", ")", "\n", "prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "logit", ",", "-", "1", ")", ",", "tf", ".", "argmax", "(", "label", ",", "-", "1", ")", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "prediction", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "return", "loss", ",", "accuracy", "", "", ""]]}