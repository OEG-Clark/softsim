{"home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.main.main": [[7, 26], ["print", "solver.Solver", "solver.Solver.train", "print", "test.test_HDR", "test.test_HDR.test", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.train", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.test"], ["def", "main", "(", "config", ")", ":", "\n", "\n", "    ", "if", "config", "[", "'mode'", "]", "==", "'train'", ":", "\n", "        ", "print", "(", "'Start Training...'", ")", "\n", "# Create directories if not exist.", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "'model_dir'", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "config", "[", "'model_dir'", "]", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "'sample_dir'", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "config", "[", "'sample_dir'", "]", ")", "\n", "", "solver", "=", "Solver", "(", "config", ")", "\n", "solver", ".", "train", "(", ")", "\n", "\n", "", "if", "config", "[", "'mode'", "]", "==", "'test'", ":", "\n", "        ", "print", "(", "'Start Testing...'", ")", "\n", "# Create directories if not exist.", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "'test_result_dir'", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "config", "[", "'test_result_dir'", "]", ")", "\n", "", "tester", "=", "test_HDR", "(", "config", ")", "\n", "tester", ".", "test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.__init__": [[34, 102], ["object.__init__", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.L1Loss", "torch.nn.MSELoss", "cobi_loss.ContextualBilateralLoss", "cobi_loss.ContextualBilateralLoss", "solver.Solver.build_model", "dataloader.ImageDataset", "dataloader.ImageDataset", "int", "int"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.build_model"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Solver", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Training options", "\n", "self", ".", "batch_size", "=", "config", "[", "'batch_size'", "]", "# 32", "\n", "self", ".", "img_size", "=", "config", "[", "'img_size'", "]", "\n", "self", ".", "n_epochs", "=", "config", "[", "'n_epochs'", "]", "\n", "\n", "self", ".", "min_ev", "=", "config", "[", "'min_ev'", "]", "# -3", "\n", "self", ".", "max_ev", "=", "config", "[", "'max_ev'", "]", "#  3", "\n", "\n", "self", ".", "ref_ev", "=", "(", "self", ".", "max_ev", "-", "self", ".", "min_ev", ")", "//", "2", "\n", "self", ".", "length", "=", "self", ".", "max_ev", "-", "self", ".", "min_ev", "+", "1", "\n", "\n", "self", ".", "n_epochs", "=", "config", "[", "'n_epochs'", "]", "\n", "self", ".", "lr_edge", "=", "config", "[", "'lr_edge'", "]", "\n", "self", ".", "lr_glob", "=", "config", "[", "'lr_glob'", "]", "\n", "self", ".", "lr_rend", "=", "config", "[", "'lr_render'", "]", "\n", "self", ".", "beta1", "=", "config", "[", "'beta1'", "]", "\n", "self", ".", "beta2", "=", "config", "[", "'beta2'", "]", "\n", "self", ".", "optim", "=", "config", "[", "'optim'", "]", "\n", "self", ".", "decay", "=", "config", "[", "'decay'", "]", "\n", "self", ".", "data_dir", "=", "config", "[", "'data_dir'", "]", "\n", "self", ".", "validate_dir", "=", "config", "[", "'validate_dir'", "]", "\n", "\n", "self", ".", "sample_dir", "=", "config", "[", "'sample_dir'", "]", "\n", "self", ".", "model_path", "=", "config", "[", "'model_dir'", "]", "\n", "\n", "self", ".", "pretrained", "=", "config", "[", "'pretrained'", "]", "\n", "# Configurations", "\n", "self", ".", "device", "=", "config", "[", "'gpu_id'", "]", "\n", "self", ".", "dataloader", "=", "DataLoader", "(", "ImageDataset", "(", "\n", "self", ".", "data_dir", ",", "self", ".", "img_size", ",", "\n", "min_ev", "=", "int", "(", "self", ".", "min_ev", ")", ",", "\n", "max_ev", "=", "self", ".", "max_ev", ",", "\n", "fliplr", "=", "True", ",", "fliptb", "=", "False", ",", "\n", "rot", "=", "False", ",", "randcrop", "=", "True", ",", "\n", "transform", "=", "True", ",", "\n", "mode", "=", "'train'", ")", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "self", ".", "validloader", "=", "DataLoader", "(", "ImageDataset", "(", "\n", "self", ".", "data_dir", ",", "self", ".", "img_size", ",", "\n", "min_ev", "=", "int", "(", "self", ".", "min_ev", ")", ",", "\n", "max_ev", "=", "self", ".", "max_ev", ",", "\n", "fliplr", "=", "False", ",", "fliptb", "=", "False", ",", "\n", "rot", "=", "False", ",", "randcrop", "=", "False", ",", "\n", "transform", "=", "True", ",", "\n", "mode", "=", "'test'", ")", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# Steps to log, validate, sample", "\n", "self", ".", "log_step", "=", "config", "[", "'log_step'", "]", "\n", "self", ".", "validate_step", "=", "config", "[", "'validate_step'", "]", "\n", "self", ".", "model_save_step", "=", "config", "[", "'model_save_step'", "]", "\n", "self", ".", "load_step", "=", "config", "[", "'load_step'", "]", "\n", "self", ".", "display_step", "=", "config", "[", "'display_step'", "]", "\n", "self", ".", "refine_step", "=", "config", "[", "'refine_step'", "]", "\n", "\n", "self", ".", "recon_loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "hdr_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "cx_loss1", "=", "cx", "(", "use_vgg", "=", "True", ",", "vgg_layer", "=", "'relu3_4'", ",", "\n", "device", "=", "self", ".", "device", "[", "1", "]", ")", "\n", "self", ".", "cx_loss2", "=", "cx", "(", "use_vgg", "=", "True", ",", "vgg_layer", "=", "'relu4_4'", ",", "\n", "device", "=", "self", ".", "device", "[", "1", "]", ")", "\n", "\n", "self", ".", "build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.build_model": [[103, 194], ["model.GRU_model.Generator_up().cuda", "model.GRU_model.Generator_down().cuda", "model.structure.Structure_up().cuda", "model.structure.Structure_down().cuda", "model.combine.CombineNet_up().cuda", "model.combine.CombineNet_down().cuda", "hdrlayer.hdrlayer.hdrlayer", "hdrlayer.hdrlayer.hdrlayer", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "solver.Solver.gen_up.load_state_dict", "solver.Solver.gen_down.load_state_dict", "solver.Solver.struct_up.load_state_dict", "solver.Solver.struct_down.load_state_dict", "solver.Solver.combine_up.load_state_dict", "solver.Solver.combine_down.load_state_dict", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "model.GRU_model.Generator_up", "model.GRU_model.Generator_down", "model.structure.Structure_up", "model.structure.Structure_down", "model.combine.CombineNet_up", "model.combine.CombineNet_down", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "solver.Solver.gen_up.parameters", "solver.Solver.gen_down.parameters", "solver.Solver.struct_up.parameters", "solver.Solver.struct_down.parameters", "solver.Solver.combine_up.parameters", "solver.Solver.combine_down.parameters", "utils.Adam.Adam_GCC", "utils.Adam.Adam_GCC", "utils.Adam.Adam_GCC", "utils.Adam.Adam_GCC", "utils.Adam.Adam_GCC", "utils.Adam.Adam_GCC", "solver.Solver.gen_up.parameters", "solver.Solver.gen_down.parameters", "solver.Solver.struct_up.parameters", "solver.Solver.struct_down.parameters", "solver.Solver.combine_up.parameters", "solver.Solver.combine_down.parameters"], "methods", ["None"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "gen_up", "=", "Generator_up", "(", "3", ",", "32", ",", "5", ",", "1", ",", "self", ".", "length", "-", "1", ")", ".", "cuda", "(", "device", "=", "self", ".", "device", "[", "0", "]", ")", "\n", "self", ".", "gen_down", "=", "Generator_down", "(", "3", ",", "32", ",", "5", ",", "1", ",", "self", ".", "length", "-", "1", ")", ".", "cuda", "(", "device", "=", "self", ".", "device", "[", "0", "]", ")", "\n", "\n", "self", ".", "struct_up", "=", "Structure_up", "(", "2", ",", "16", ",", "4", ",", "1", ",", "self", ".", "length", "-", "1", ")", ".", "cuda", "(", "device", "=", "self", ".", "device", "[", "1", "]", ")", "\n", "self", ".", "struct_down", "=", "Structure_down", "(", "2", ",", "16", ",", "4", ",", "1", ",", "self", ".", "length", "-", "1", ")", ".", "cuda", "(", "device", "=", "self", ".", "device", "[", "1", "]", ")", "\n", "\n", "self", ".", "combine_up", "=", "CombineNet_up", "(", "7", ",", "16", ",", "5", ",", "1", ")", ".", "cuda", "(", "device", "=", "self", ".", "device", "[", "1", "]", ")", "\n", "self", ".", "combine_down", "=", "CombineNet_down", "(", "7", ",", "16", ",", "5", ",", "1", ")", ".", "cuda", "(", "device", "=", "self", ".", "device", "[", "1", "]", ")", "\n", "self", ".", "hdrlayer_pred", "=", "hdrlayer", "(", "lin_type", "=", "'LUT'", ",", "method", "=", "'Debevec'", ",", "device", "=", "self", ".", "device", "[", "1", "]", ")", "\n", "self", ".", "hdrlayer_gt", "=", "hdrlayer", "(", "lin_type", "=", "'LUT'", ",", "method", "=", "'Debevec'", ",", "device", "=", "self", ".", "device", "[", "1", "]", ")", "\n", "\n", "if", "self", ".", "pretrained", ":", "\n", "            ", "print", "(", "'Using pre-trained weights'", ")", "\n", "gen_up_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-gu.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "gen_down_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-gd.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "struct_up_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-su.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "struct_down_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-sd.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "combine_up_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-cbu.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "combine_down_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-cbd.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "\n", "self", ".", "gen_up", ".", "load_state_dict", "(", "torch", ".", "load", "(", "gen_up_path", ")", ")", "\n", "self", ".", "gen_down", ".", "load_state_dict", "(", "torch", ".", "load", "(", "gen_down_path", ")", ")", "\n", "self", ".", "struct_up", ".", "load_state_dict", "(", "torch", ".", "load", "(", "struct_up_path", ")", ")", "\n", "self", ".", "struct_down", ".", "load_state_dict", "(", "torch", ".", "load", "(", "struct_down_path", ")", ")", "\n", "self", ".", "combine_up", ".", "load_state_dict", "(", "torch", ".", "load", "(", "combine_up_path", ")", ")", "\n", "self", ".", "combine_down", ".", "load_state_dict", "(", "torch", ".", "load", "(", "combine_down_path", ")", ")", "\n", "\n", "", "if", "self", ".", "optim", "==", "'adam'", ":", "\n", "\n", "            ", "self", ".", "optim_gu", "=", "optim", ".", "Adam", "(", "self", ".", "gen_up", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_glob", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "self", ".", "optim_gd", "=", "optim", ".", "Adam", "(", "self", ".", "gen_down", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_glob", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "self", ".", "optim_su", "=", "optim", ".", "Adam", "(", "self", ".", "struct_up", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_edge", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "self", ".", "optim_sd", "=", "optim", ".", "Adam", "(", "self", ".", "struct_down", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_edge", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "self", ".", "optim_cbu", "=", "optim", ".", "Adam", "(", "self", ".", "combine_up", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_rend", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "self", ".", "optim_cbd", "=", "optim", ".", "Adam", "(", "self", ".", "combine_down", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_rend", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "\n", "", "elif", "self", ".", "optim", "==", "'adam_cent'", ":", "\n", "            ", "self", ".", "optim_gu", "=", "Adam_GCC", "(", "self", ".", "gen_up", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_glob", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "self", ".", "optim_gd", "=", "Adam_GCC", "(", "self", ".", "gen_down", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_glob", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "\n", "self", ".", "optim_su", "=", "Adam_GCC", "(", "self", ".", "struct_up", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_edge", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "self", ".", "optim_sd", "=", "Adam_GCC", "(", "self", ".", "struct_down", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_edge", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "self", ".", "optim_cbu", "=", "Adam_GCC", "(", "self", ".", "combine_up", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_rend", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "self", ".", "optim_cbd", "=", "Adam_GCC", "(", "self", ".", "combine_down", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr_rend", ",", "\n", "betas", "=", "(", "self", ".", "beta1", ",", "self", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "self", ".", "decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.print_network": [[195, 203], ["model.parameters", "print", "print", "print", "p.numel"], "methods", ["None"], ["", "", "def", "print_network", "(", "self", ",", "model", ",", "name", ")", ":", "\n", "        ", "\"\"\"Print out the network information.\"\"\"", "\n", "num_params", "=", "0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "p", ".", "numel", "(", ")", "\n", "", "print", "(", "model", ")", "\n", "print", "(", "name", ")", "\n", "print", "(", "\"The number of parameters: {}\"", ".", "format", "(", "num_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.update_lr": [[204, 218], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "edge_lr", ",", "int_lr", ",", "g_lr", ")", ":", "\n", "        ", "\"\"\"Decay learning rates of the generator and discriminator.\"\"\"", "\n", "for", "param_group", "in", "self", ".", "optim_gu", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "int_lr", "\n", "", "for", "param_group", "in", "self", ".", "optim_gd", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "int_lr", "\n", "", "for", "param_group", "in", "self", ".", "optim_su", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "edge_lr", "\n", "", "for", "param_group", "in", "self", ".", "optim_sd", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "edge_lr", "\n", "", "for", "param_group", "in", "self", ".", "optim_cbu", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "g_lr", "\n", "", "for", "param_group", "in", "self", ".", "optim_cbd", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "g_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad": [[219, 227], ["solver.Solver.optim_gu.zero_grad", "solver.Solver.optim_gd.zero_grad", "solver.Solver.optim_su.zero_grad", "solver.Solver.optim_sd.zero_grad", "solver.Solver.optim_cbu.zero_grad", "solver.Solver.optim_cbd.zero_grad"], "methods", ["None"], ["", "", "def", "reset_grad", "(", "self", ")", ":", "\n", "# Reset all gradients", "\n", "        ", "self", ".", "optim_gu", ".", "zero_grad", "(", ")", "\n", "self", ".", "optim_gd", ".", "zero_grad", "(", ")", "\n", "self", ".", "optim_su", ".", "zero_grad", "(", ")", "\n", "self", ".", "optim_sd", ".", "zero_grad", "(", ")", "\n", "self", ".", "optim_cbu", ".", "zero_grad", "(", ")", "\n", "self", ".", "optim_cbd", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.Up_ev_model": [[228, 247], ["solver.Solver.gen_up", "torch.mean().unsqueeze().to", "solver.Solver.struct_up", "torch.cat", "solver.Solver.combine_up", "img.to", "torch.cat().to", "torch.mean().unsqueeze", "img.to", "glob_up_img.to", "torch.cat", "torch.mean"], "methods", ["None"], ["", "def", "Up_ev_model", "(", "self", ",", "img", ",", "edge", ",", "style_id", "=", "0", ",", "h_img", "=", "None", ",", "h_edge", "=", "None", ")", ":", "\n", "        ", "glob_up_img", ",", "h_img", "=", "self", ".", "gen_up", "(", "img", ".", "to", "(", "self", ".", "device", "[", "0", "]", ")", ",", "\n", "style_id", ",", "\n", "h_img", ")", "\n", "\n", "img_gray", "=", "torch", ".", "mean", "(", "img", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", "\n", "up_edge", ",", "h_edge", "=", "self", ".", "struct_up", "(", "torch", ".", "cat", "(", "(", "img_gray", ",", "edge", ")", ",", "\n", "dim", "=", "1", ")", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "style_id", ",", "\n", "h_edge", ")", "\n", "\n", "concat_images", "=", "torch", ".", "cat", "(", "(", "img", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "glob_up_img", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "up_edge", ")", ",", "\n", "dim", "=", "1", ")", "\n", "up_img", "=", "self", ".", "combine_up", "(", "concat_images", ")", "\n", "\n", "return", "up_img", ",", "glob_up_img", ",", "up_edge", ",", "h_img", ",", "h_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.Down_ev_model": [[248, 269], ["solver.Solver.gen_down", "torch.mean().unsqueeze().to", "solver.Solver.struct_down", "torch.cat", "solver.Solver.combine_down", "img.to", "torch.cat().to", "torch.mean().unsqueeze", "img.to", "glob_down_img.to", "torch.cat", "torch.mean"], "methods", ["None"], ["", "def", "Down_ev_model", "(", "self", ",", "img", ",", "edge", ",", "style_id", "=", "0", ",", "h_img", "=", "None", ",", "h_edge", "=", "None", ")", ":", "\n", "        ", "glob_down_img", ",", "h_img", "=", "self", ".", "gen_down", "(", "img", ".", "to", "(", "self", ".", "device", "[", "0", "]", ")", ",", "\n", "style_id", ",", "\n", "h_img", ")", "\n", "\n", "img_gray", "=", "torch", ".", "mean", "(", "img", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", "\n", "\n", "down_edge", ",", "h_edge", "=", "self", ".", "struct_down", "(", "torch", ".", "cat", "(", "\n", "(", "img_gray", ",", "edge", ")", ",", "\n", "dim", "=", "1", ")", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "style_id", ",", "\n", "h_edge", ")", "\n", "\n", "concat_images", "=", "torch", ".", "cat", "(", "(", "img", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "glob_down_img", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "down_edge", ")", ",", "\n", "dim", "=", "1", ")", "\n", "down_img", "=", "self", ".", "combine_down", "(", "concat_images", ")", "\n", "\n", "return", "down_img", ",", "glob_down_img", ",", "down_edge", ",", "h_img", ",", "h_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.HDR_model": [[270, 324], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "range", "solver.Solver.Up_ev_model", "solver.Solver.Up_ev_model", "solver.Solver.Down_ev_model", "solver.Solver.Down_ev_model"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.Up_ev_model", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.Up_ev_model", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.Down_ev_model", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.Down_ev_model"], ["", "def", "HDR_model", "(", "self", ",", "img_stack", ",", "edge_stack", ",", "ref_ev", ",", "\n", "up_length", ",", "down_length", ",", "step", ")", ":", "\n", "\n", "        ", "pred_stack", "=", "torch", ".", "zeros_like", "(", "img_stack", ")", "\n", "pred_int_stack", "=", "torch", ".", "zeros_like", "(", "img_stack", ")", "\n", "pred_edge", "=", "torch", ".", "zeros_like", "(", "edge_stack", ")", "\n", "\n", "up_img", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "up_int_img", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "down_img", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "down_int_img", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "up_edge", "=", "edge_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "down_edge", "=", "edge_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "\n", "\n", "pred_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "pred_int_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "pred_edge", "[", ":", ",", "ref_ev", ",", ":", "]", "=", "edge_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "\n", "up_h_img", "=", "None", "\n", "down_h_img", "=", "None", "\n", "up_h_edge", "=", "None", "\n", "down_h_edge", "=", "None", "\n", "\n", "for", "up", "in", "range", "(", "up_length", ")", ":", "\n", "            ", "up_index", "=", "ref_ev", "+", "up", "+", "1", "\n", "\n", "if", "step", "<=", "self", ".", "refine_step", ":", "\n", "                ", "up_img", ",", "up_int_img", ",", "up_edge", ",", "up_h_img", ",", "up_h_edge", "=", "self", ".", "Up_ev_model", "(", "up_int_img", ",", "up_edge", ",", "up_index", "-", "1", ",", "up_h_img", ",", "up_h_edge", ")", "\n", "", "else", ":", "\n", "                ", "up_img", ",", "up_int_img", ",", "up_edge", ",", "up_h_img", ",", "up_h_edge", "=", "self", ".", "Up_ev_model", "(", "up_img", ",", "up_edge", ",", "up_index", "-", "1", ",", "up_h_img", ",", "up_h_edge", ")", "\n", "\n", "", "pred_stack", "[", ":", ",", "up_index", ",", ":", "]", "=", "up_img", "\n", "pred_int_stack", "[", ":", ",", "up_index", ",", ":", "]", "=", "up_int_img", "\n", "pred_edge", "[", ":", ",", "up_index", ",", ":", "]", "=", "up_edge", "\n", "\n", "", "for", "down", "in", "range", "(", "down_length", ")", ":", "\n", "            ", "down_index", "=", "ref_ev", "-", "down", "-", "1", "\n", "if", "step", "<=", "self", ".", "refine_step", ":", "\n", "                ", "down_img", ",", "down_int_img", ",", "down_edge", ",", "down_h_img", ",", "down_h_edge", "=", "self", ".", "Down_ev_model", "(", "down_int_img", ",", "down_edge", ",", "\n", "down_index", ",", "down_h_img", ",", "down_h_edge", ")", "\n", "", "else", ":", "\n", "                ", "down_img", ",", "down_int_img", ",", "down_edge", ",", "down_h_img", ",", "down_h_edge", "=", "self", ".", "Down_ev_model", "(", "down_img", ",", "down_edge", ",", "\n", "down_index", ",", "down_h_img", ",", "down_h_edge", ")", "\n", "\n", "", "pred_stack", "[", ":", ",", "down_index", ",", ":", "]", "=", "down_img", "\n", "pred_int_stack", "[", ":", ",", "down_index", ",", ":", "]", "=", "down_int_img", "\n", "pred_edge", "[", ":", ",", "down_index", ",", ":", "]", "=", "down_edge", "\n", "\n", "", "return", "pred_stack", ",", "pred_int_stack", ",", "pred_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.validate": [[325, 423], ["os.path.join", "list", "torch.zeros", "enumerate", "len", "len", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "os.path.join", "data[].type", "data[].type", "data[].type", "data[].type", "image_stack.to.to.to", "target_hdr.to.to.to", "ev_stack.to.to.to", "edge_stack.to.to.to", "solver.Solver.HDR_model", "torch.tensor", "range", "solver.Solver.hdrlayer_pred", "solver.Solver.hdrlayer_gt", "utils.img_utils.tone_map", "utils.img_utils.tone_map", "cv2.cvtColor", "cv2.cvtColor", "utils.img_utils.tone_psnr", "numpy.concatenate", "os.path.join", "cv2.imwrite", "str", "str", "os.path.isdir", "os.mkdir", "utils.img_utils.inv_transform", "utils.img_utils.inv_transform", "numpy.concatenate", "PIL.Image.fromarray", "os.path.join", "PIL.Image.fromarray.save", "ev_stack.to.to.to", "ev_stack.to.to.to", "gen_hdr_stack.cpu", "target_hdr.to.to.cpu", "utils.img_utils.compute_psnr", "pred_stack[].cpu", "image_stack[].cpu", "image_stack[].cpu", "pred_stack[].cpu", "str"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.HDR_model", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.tone_map", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.tone_map", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.tone_psnr", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.inv_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.inv_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.compute_psnr"], ["", "def", "validate", "(", "self", ",", "step", ")", ":", "\n", "        ", "sample_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "sample_dir", ",", "'val_'", "+", "str", "(", "step", ")", ")", "\n", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "sample_path", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "sample_path", ")", "\n", "\n", "", "validate_imgs", "=", "list", "(", ")", "\n", "\n", "tot_tonemap_psnr", "=", "0", "\n", "\n", "pred_psnr", "=", "torch", ".", "zeros", "(", "self", ".", "length", "-", "1", ")", "\n", "\n", "dtype", "=", "torch", ".", "cuda", ".", "FloatTensor", "\n", "\n", "# Validation", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "self", ".", "validloader", ")", ":", "\n", "\n", "            ", "scene", "=", "'%04d'", "%", "index", "\n", "scene_path", "=", "os", ".", "path", ".", "join", "(", "sample_path", ",", "str", "(", "scene", ")", ")", "\n", "\n", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "scene_path", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "scene_path", ")", "\n", "\n", "# Inputs", "\n", "", "image_stack", "=", "data", "[", "0", "]", ".", "type", "(", "dtype", ")", "\n", "target_hdr", "=", "data", "[", "1", "]", ".", "type", "(", "dtype", ")", "\n", "ev_stack", "=", "data", "[", "2", "]", ".", "type", "(", "dtype", ")", "\n", "edge_stack", "=", "data", "[", "3", "]", ".", "type", "(", "dtype", ")", "\n", "\n", "image_stack", "=", "image_stack", ".", "to", "(", "self", ".", "device", "[", "0", "]", ")", "\n", "target_hdr", "=", "target_hdr", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", "\n", "ev_stack", "=", "ev_stack", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", "\n", "edge_stack", "=", "edge_stack", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", "\n", "\n", "pred_stack", ",", "pred_int_stack", ",", "pred_edge_stack", "=", "self", ".", "HDR_model", "(", "image_stack", ",", "edge_stack", ",", "self", ".", "ref_ev", ",", "\n", "up_length", "=", "3", ",", "down_length", "=", "3", ",", "\n", "step", "=", "step", ")", "\n", "\n", "if", "step", "<=", "self", ".", "refine_step", ":", "\n", "                ", "pred_stack", "=", "pred_int_stack", "\n", "\n", "", "psnr", "=", "torch", ".", "tensor", "(", "[", "compute_psnr", "(", "image_stack", "[", ":", ",", "i", ",", ":", "]", ".", "cpu", "(", ")", ",", "\n", "pred_stack", "[", ":", ",", "i", ",", ":", "]", ".", "cpu", "(", ")", ",", "1.0", ")", "for", "i", "in", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "6", "]", "]", ")", "\n", "pred_psnr", "+=", "psnr", "\n", "denorm_pred_stack", "=", "[", "inv_transform", "(", "pred_stack", "[", ":", ",", "i", ",", ":", "]", ".", "cpu", "(", ")", ")", "for", "i", "in", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "6", "]", "]", "\n", "denorm_gt_stack", "=", "[", "inv_transform", "(", "image_stack", "[", ":", ",", "i", ",", ":", "]", ".", "cpu", "(", ")", ")", "for", "i", "in", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "6", "]", "]", "\n", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "                ", "save_image", "=", "np", ".", "concatenate", "(", "(", "denorm_pred_stack", "[", "i", "]", ",", "\n", "denorm_gt_stack", "[", "i", "]", ")", ",", "\n", "axis", "=", "1", ")", "\n", "save_image", "=", "Image", ".", "fromarray", "(", "save_image", ")", "\n", "\n", "if", "i", "==", "3", ":", "\n", "                    ", "index", "+=", "1", "\n", "\n", "", "output_up_name", "=", "os", ".", "path", ".", "join", "(", "scene_path", ",", "\n", "str", "(", "index", "-", "self", ".", "ref_ev", ")", "+", "'EV.png'", ")", "\n", "\n", "save_image", ".", "save", "(", "output_up_name", ")", "\n", "index", "+=", "1", "\n", "\n", "", "gen_hdr_stack", ",", "_", "=", "self", ".", "hdrlayer_pred", "(", "(", "(", "pred_stack", "+", "1", ")", "/", "2", ")", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "ev_stack", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ")", "\n", "target_hdr", ",", "_", "=", "self", ".", "hdrlayer_gt", "(", "(", "(", "image_stack", "+", "1", ")", "/", "2", ")", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "ev_stack", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ")", "\n", "\n", "pred_tone_map", "=", "tone_map", "(", "gen_hdr_stack", ".", "cpu", "(", ")", ")", "\n", "gt_tone_map", "=", "tone_map", "(", "target_hdr", ".", "cpu", "(", ")", ")", "\n", "\n", "pred_tone_map", "=", "cv2", ".", "cvtColor", "(", "pred_tone_map", ",", "\n", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "gt_tone_map", "=", "cv2", ".", "cvtColor", "(", "gt_tone_map", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "tone_map_psnr", "=", "tone_psnr", "(", "pred_tone_map", ",", "gt_tone_map", ",", "\n", "pixel_range", "=", "255", ")", "\n", "pred_tone_map", "=", "np", ".", "concatenate", "(", "(", "pred_tone_map", ",", "gt_tone_map", ")", ",", "\n", "axis", "=", "1", ")", "\n", "\n", "tot_tonemap_psnr", "+=", "tone_map_psnr", "\n", "tone_map_name", "=", "os", ".", "path", ".", "join", "(", "scene_path", ",", "\n", "'pred_tone_map.png'", ")", "\n", "cv2", ".", "imwrite", "(", "tone_map_name", ",", "pred_tone_map", ")", "\n", "\n", "", "pred_psnr", "/=", "len", "(", "self", ".", "validloader", ")", "\n", "tot_tonemap_psnr", "/=", "len", "(", "self", ".", "validloader", ")", "\n", "print", "(", "'Validate tone_map PSNR : {}'", ".", "format", "(", "tot_tonemap_psnr", ")", ")", "\n", "print", "(", "'Validate up +1 generator PSNR : {}'", ".", "format", "(", "pred_psnr", "[", "3", "]", ")", ")", "\n", "print", "(", "'Validate up +2 generator PSNR : {}'", ".", "format", "(", "pred_psnr", "[", "4", "]", ")", ")", "\n", "print", "(", "'Validate up +3 generator PSNR : {}'", ".", "format", "(", "pred_psnr", "[", "5", "]", ")", ")", "\n", "print", "(", "'Validate down -1 generator PSNR : {}'", ".", "format", "(", "pred_psnr", "[", "2", "]", ")", ")", "\n", "print", "(", "'Validate down -2  generator PSNR : {}'", ".", "format", "(", "pred_psnr", "[", "1", "]", ")", ")", "\n", "print", "(", "'Validate down -3 generator PSNR : {}'", ".", "format", "(", "pred_psnr", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.train": [[424, 883], ["time.time", "range", "enumerate", "data[].type", "data[].type", "data[].type", "data[].type", "image_stack.to.to.to", "target_hdr.to.to.to", "ev_stack.to.to.to", "edge_stack.to.to.to", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "image_stack.to.to.to", "random.randrange", "solver.Solver.HDR_model", "utils.img_utils.extract_hist", "utils.img_utils.extract_hist", "solver.Solver.recon_loss", "solver.Solver.recon_loss", "solver.Solver.recon_loss", "stack_int_loss.item", "solver.Solver.item", "random.randrange", "utils.img_utils.extract_hist.to", "torch.zeros_like.to", "solver.Solver.hdrlayer_pred", "solver.Solver.recon_loss", "torch.tensor().mean", "torch.tensor().mean", "solver.Solver.recon_loss", "stack_loss.item", "solver.Solver.item", "solver.Solver.reset_grad", "solver.Solver.backward", "solver.Solver.optim_su.step", "solver.Solver.optim_sd.step", "solver.Solver.reset_grad", "stack_int_loss.backward", "solver.Solver.optim_gu.step", "solver.Solver.optim_gd.step", "solver.Solver.reset_grad", "stack_loss.backward", "solver.Solver.optim_cbu.step", "solver.Solver.optim_cbd.step", "torch.tensor().mean.item", "solver.Solver.reset_grad", "solver.Solver.backward", "solver.Solver.optim_su.step", "solver.Solver.optim_sd.step", "solver.Solver.reset_grad", "stack_int_loss.backward", "solver.Solver.optim_gu.step", "solver.Solver.optim_gd.step", "loss.items", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.cat", "torch.cat", "edge.expand.expand.expand", "torch.cat", "utils.img_utils.compute_psnr", "utils.img_utils.compute_psnr", "torchvision.utils.make_grid", "utils.img_utils.matplotlib_imshow", "solver.Solver.Up_ev_model", "h_up_img.detach.detach.detach", "h_up_edge.detach.detach.detach", "utils.img_utils.extract_hist", "utils.img_utils.extract_hist", "solver.Solver.recon_loss", "solver.Solver.recon_loss", "solver.Solver.recon_loss", "single_up_int_loss.item", "solver.Solver.item", "solver.Solver.Down_ev_model", "h_down_img.detach.detach.detach", "h_down_edge.detach.detach.detach", "utils.img_utils.extract_hist", "utils.img_utils.extract_hist", "solver.Solver.recon_loss", "solver.Solver.recon_loss", "solver.Solver.recon_loss", "single_down_int_loss.item", "solver.Solver.item", "utils.img_utils.mu_law", "utils.img_utils.mu_law", "solver.Solver.reset_grad", "solver.Solver.backward", "solver.Solver.optim_cbu.step", "solver.Solver.optim_cbd.step", "solver.Solver.optim_gu.step", "solver.Solver.optim_gd.step", "solver.Solver.optim_su.step", "solver.Solver.optim_sd.step", "time.time", "torch.no_grad", "solver.Solver.validate", "solver.Solver.gen_up.state_dict", "solver.Solver.gen_down.state_dict", "solver.Solver.struct_up.state_dict", "solver.Solver.struct_down.state_dict", "solver.Solver.combine_up.state_dict", "solver.Solver.combine_down.state_dict", "utils.img_utils.compute_psnr", "utils.img_utils.compute_psnr", "utils.img_utils.tone_map", "utils.img_utils.tone_map", "utils.img_utils.tone_psnr", "torch.cat", "torchvision.utils.make_grid", "print", "print", "print", "print", "print", "numpy.transpose.detach().cpu", "numpy.transpose.numpy", "numpy.transpose", "print", "print", "inter_genup.to", "utils.img_utils.extract_hist.to", "inter_genup.to", "solver.Solver.recon_loss", "solver.Solver.cx_loss1", "solver.Solver.cx_loss2", "solver.Solver.reset_grad", "solver.Solver.backward", "solver.Solver.optim_su.step", "solver.Solver.reset_grad", "single_up_int_loss.backward", "solver.Solver.optim_gu.step", "solver.Solver.reset_grad", "single_up_loss.backward", "solver.Solver.optim_cbu.step", "single_up_loss.item", "solver.Solver.reset_grad", "solver.Solver.backward", "solver.Solver.optim_su.step", "solver.Solver.reset_grad", "single_up_int_loss.backward", "solver.Solver.optim_gu.step", "utils.img_utils.extract_hist.to", "inter_gendown.to", "solver.Solver.recon_loss", "solver.Solver.cx_loss1", "solver.Solver.cx_loss2", "solver.Solver.reset_grad", "solver.Solver.backward", "solver.Solver.optim_sd.step", "solver.Solver.reset_grad", "single_down_int_loss.backward", "solver.Solver.optim_gd.step", "solver.Solver.reset_grad", "single_down_loss.backward", "solver.Solver.optim_cbd.step", "single_down_loss.item", "solver.Solver.reset_grad", "solver.Solver.backward", "solver.Solver.optim_sd.step", "solver.Solver.reset_grad", "single_down_int_loss.backward", "solver.Solver.optim_gd.step", "torch.tensor", "torch.tensor", "image_stack.to.to.squeeze", "torch.zeros_like.squeeze", "torch.zeros_like.squeeze", "target_hdr.to.to.detach().cpu", "gen_hdr.detach().cpu", "torch.from_numpy", "torch.from_numpy", "numpy.transpose.detach", "solver.Solver.cx_loss1", "solver.Solver.cx_loss2", "target_hdr.to.to.detach", "gen_hdr.detach", "range", "range"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.HDR_model", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.extract_hist", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.extract_hist", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.compute_psnr", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.compute_psnr", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.matplotlib_imshow", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.Up_ev_model", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.extract_hist", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.extract_hist", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.Down_ev_model", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.extract_hist", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.extract_hist", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.mu_law", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.mu_law", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.validate", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.compute_psnr", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.compute_psnr", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.tone_map", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.tone_map", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.tone_psnr", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "dataloader", "=", "self", ".", "dataloader", "\n", "dtype", "=", "torch", ".", "cuda", ".", "FloatTensor", "\n", "\n", "non_zero_offset", "=", "1e-6", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "pretrained", ":", "\n", "            ", "iter_num", "=", "self", ".", "load_step", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "iter_num", "=", "0", "\n", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "n_epochs", ")", ":", "\n", "            ", "for", "step", ",", "data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "# Preprocessing", "\n", "# Inputs", "\n", "                ", "image_stack", "=", "data", "[", "0", "]", ".", "type", "(", "dtype", ")", "\n", "target_hdr", "=", "data", "[", "1", "]", ".", "type", "(", "dtype", ")", "\n", "ev_stack", "=", "data", "[", "2", "]", ".", "type", "(", "dtype", ")", "\n", "edge_stack", "=", "data", "[", "3", "]", ".", "type", "(", "dtype", ")", "\n", "\n", "image_stack", "=", "image_stack", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", "\n", "target_hdr", "=", "target_hdr", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", "\n", "ev_stack", "=", "ev_stack", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", "\n", "edge_stack", "=", "edge_stack", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", "\n", "\n", "loss", "=", "{", "}", "\n", "\n", "single_gu_loss", "=", "0", "\n", "single_eu_loss", "=", "0", "\n", "single_gd_loss", "=", "0", "\n", "single_ed_loss", "=", "0", "\n", "single_cu_loss", "=", "0", "\n", "single_cd_loss", "=", "0", "\n", "single_iu_loss", "=", "0", "\n", "single_id_loss", "=", "0", "\n", "\n", "pred_int_stack", "=", "torch", ".", "zeros_like", "(", "image_stack", ")", "\n", "pred_stack", "=", "torch", ".", "zeros_like", "(", "image_stack", ")", "\n", "pred_edge_stack", "=", "torch", ".", "zeros_like", "(", "edge_stack", ")", "\n", "\n", "ev", "=", "random", ".", "randrange", "(", "-", "3", ",", "4", ")", "+", "self", ".", "ref_ev", "\n", "\n", "up_length", "=", "1e-8", "\n", "down_length", "=", "1e-8", "\n", "\n", "ref_ev_up", "=", "ev", "#self.ref_ev", "\n", "ref_ev_down", "=", "ev", "#self.ref_ev", "\n", "\n", "ref_up_image", "=", "image_stack", "[", ":", ",", "ref_ev_up", ",", ":", "]", "\n", "ref_down_image", "=", "image_stack", "[", ":", ",", "ref_ev_down", ",", ":", "]", "\n", "\n", "ref_up_edge", "=", "edge_stack", "[", ":", ",", "ref_ev_up", ",", ":", "]", "\n", "ref_down_edge", "=", "edge_stack", "[", ":", ",", "ref_ev_down", ",", ":", "]", "\n", "\n", "h_up_img", "=", "None", "\n", "h_up_edge", "=", "None", "\n", "h_down_img", "=", "None", "\n", "h_down_edge", "=", "None", "\n", "\n", "for", "index", "in", "range", "(", "(", "self", ".", "length", "-", "1", ")", ")", ":", "\n", "# Generator Up", "\n", "                    ", "up_index", "=", "index", "+", "1", "+", "ev", "\n", "\n", "if", "up_index", "<=", "self", ".", "length", "-", "1", ":", "\n", "\n", "                        ", "image_up_t", "=", "image_stack", "[", ":", ",", "up_index", ",", ":", "]", "\n", "edge_up_t", "=", "edge_stack", "[", ":", ",", "up_index", ",", ":", "]", "\n", "image_genup", ",", "inter_genup", ",", "edge_genup", ",", "h_up_img", ",", "h_up_edge", "=", "self", ".", "Up_ev_model", "(", "ref_up_image", ",", "\n", "ref_up_edge", ",", "\n", "up_index", "-", "1", ",", "\n", "h_up_img", ",", "\n", "h_up_edge", ")", "\n", "\n", "h_up_img", "=", "h_up_img", ".", "detach", "(", ")", "\n", "h_up_edge", "=", "h_up_edge", ".", "detach", "(", ")", "\n", "\n", "gen_img_hist", "=", "extract_hist", "(", "inter_genup", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ")", "\n", "t_img_hist", "=", "extract_hist", "(", "image_up_t", ")", "\n", "r_hist_loss", "=", "self", ".", "recon_loss", "(", "gen_img_hist", ",", "\n", "t_img_hist", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ")", "\n", "\n", "r_int_img_loss", "=", "self", ".", "recon_loss", "(", "inter_genup", ".", "to", "(", "\n", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "image_up_t", ")", "\n", "\n", "r_edge_loss", "=", "self", ".", "recon_loss", "(", "edge_genup", ",", "\n", "edge_up_t", ")", "\n", "single_up_int_loss", "=", "r_int_img_loss", "+", "0.01", "*", "r_hist_loss", "\n", "\n", "single_iu_loss", "+=", "single_up_int_loss", ".", "item", "(", ")", "\n", "single_eu_loss", "+=", "r_edge_loss", ".", "item", "(", ")", "\n", "\n", "if", "iter_num", ">", "self", ".", "refine_step", ":", "\n", "                            ", "r_img_loss", "=", "self", ".", "recon_loss", "(", "image_genup", ",", "\n", "image_up_t", ")", "\n", "\n", "cx_loss", "=", "self", ".", "cx_loss1", "(", "(", "image_genup", "+", "1", ")", "/", "2", ",", "\n", "(", "image_up_t", "+", "1", ")", "/", "2", ")", "\n", "cx_loss", "+=", "self", ".", "cx_loss2", "(", "(", "image_genup", "+", "1", ")", "/", "2", ",", "\n", "(", "image_up_t", "+", "1", ")", "/", "2", ")", "\n", "\n", "single_up_loss", "=", "r_img_loss", "+", "0.1", "*", "cx_loss", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "r_edge_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optim_su", ".", "step", "(", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "single_up_int_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optim_gu", ".", "step", "(", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "single_up_loss", ".", "backward", "(", ")", "\n", "self", ".", "optim_cbu", ".", "step", "(", ")", "\n", "\n", "single_gu_loss", "+=", "single_up_loss", ".", "item", "(", ")", "\n", "\n", "", "else", ":", "\n", "                            ", "self", ".", "reset_grad", "(", ")", "\n", "r_edge_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optim_su", ".", "step", "(", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "single_up_int_loss", ".", "backward", "(", ")", "\n", "self", ".", "optim_gu", ".", "step", "(", ")", "\n", "\n", "", "ref_up_image", "=", "image_up_t", "\n", "ref_up_edge", "=", "edge_up_t", "\n", "\n", "up_length", "+=", "1", "\n", "\n", "# Generator Down", "\n", "", "down_index", "=", "ev", "-", "index", "-", "1", "\n", "if", "down_index", ">=", "0", ":", "\n", "                        ", "image_down_t", "=", "image_stack", "[", ":", ",", "down_index", ",", ":", "]", "\n", "edge_down_t", "=", "edge_stack", "[", ":", ",", "down_index", ",", ":", "]", "\n", "\n", "image_gendown", ",", "inter_gendown", ",", "edge_gendown", ",", "h_down_img", ",", "h_down_edge", "=", "self", ".", "Down_ev_model", "(", "ref_down_image", ",", "\n", "ref_down_edge", ",", "\n", "down_index", ",", "\n", "h_down_img", ",", "\n", "h_down_edge", ")", "\n", "\n", "h_down_img", "=", "h_down_img", ".", "detach", "(", ")", "\n", "h_down_edge", "=", "h_down_edge", ".", "detach", "(", ")", "\n", "\n", "gen_img_hist", "=", "extract_hist", "(", "inter_gendown", ")", "\n", "t_img_hist", "=", "extract_hist", "(", "image_down_t", ")", "\n", "\n", "r_hist_loss", "=", "self", ".", "recon_loss", "(", "gen_img_hist", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "t_img_hist", ")", "\n", "\n", "r_int_img_loss", "=", "self", ".", "recon_loss", "(", "inter_gendown", ".", "to", "(", "\n", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "image_down_t", ")", "\n", "\n", "r_edge_loss", "=", "self", ".", "recon_loss", "(", "edge_gendown", ",", "\n", "edge_down_t", ")", "\n", "\n", "single_down_int_loss", "=", "r_int_img_loss", "+", "0.01", "*", "r_hist_loss", "\n", "\n", "single_id_loss", "+=", "single_down_int_loss", ".", "item", "(", ")", "\n", "single_ed_loss", "+=", "r_edge_loss", ".", "item", "(", ")", "\n", "\n", "if", "iter_num", ">", "self", ".", "refine_step", ":", "\n", "                            ", "r_img_loss", "=", "self", ".", "recon_loss", "(", "image_gendown", ",", "\n", "image_down_t", ")", "\n", "\n", "cx_loss", "=", "self", ".", "cx_loss1", "(", "(", "image_gendown", "+", "1", ")", "/", "2", ",", "\n", "(", "image_down_t", "+", "1", ")", "/", "2", ")", "\n", "cx_loss", "+=", "self", ".", "cx_loss2", "(", "(", "image_gendown", "+", "1", ")", "/", "2", ",", "\n", "(", "image_down_t", "+", "1", ")", "/", "2", ")", "\n", "\n", "single_down_loss", "=", "r_img_loss", "+", "0.1", "*", "cx_loss", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "r_edge_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optim_sd", ".", "step", "(", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "single_down_int_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optim_gd", ".", "step", "(", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "single_down_loss", ".", "backward", "(", ")", "\n", "self", ".", "optim_cbd", ".", "step", "(", ")", "\n", "\n", "single_gd_loss", "+=", "single_down_loss", ".", "item", "(", ")", "\n", "\n", "", "else", ":", "\n", "                            ", "self", ".", "reset_grad", "(", ")", "\n", "r_edge_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optim_sd", ".", "step", "(", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "single_down_int_loss", ".", "backward", "(", ")", "\n", "self", ".", "optim_gd", ".", "step", "(", ")", "\n", "\n", "", "ref_down_image", "=", "image_down_t", "\n", "ref_down_edge", "=", "edge_down_t", "\n", "\n", "down_length", "+=", "1", "\n", "\n", "", "", "if", "iter_num", ">", "self", ".", "refine_step", ":", "\n", "                    ", "loss", "[", "'GU/single_loss'", "]", "=", "single_gu_loss", "/", "up_length", "\n", "loss", "[", "'GD/single_loss'", "]", "=", "single_gd_loss", "/", "down_length", "\n", "\n", "", "loss", "[", "'GU/single_int_loss'", "]", "=", "single_iu_loss", "/", "up_length", "\n", "loss", "[", "'GU/edge_loss'", "]", "=", "single_eu_loss", "/", "up_length", "\n", "loss", "[", "'GD/single_int_loss'", "]", "=", "single_id_loss", "/", "down_length", "\n", "loss", "[", "'GD/edge_loss'", "]", "=", "single_ed_loss", "/", "down_length", "\n", "\n", "total_stack_loss", "=", "0", "\n", "total_int_stack_loss", "=", "0", "\n", "total_edge_loss", "=", "0", "\n", "total_hdr_loss", "=", "0", "\n", "\n", "image_stack", "=", "image_stack", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", "\n", "\n", "# Generate stack from centered ev", "\n", "ev", "=", "random", ".", "randrange", "(", "-", "1", ",", "2", ")", "\n", "ref_ev", "=", "self", ".", "ref_ev", "+", "ev", "\n", "\n", "pred_stack", ",", "pred_int_stack", ",", "pred_edge_stack", "=", "self", ".", "HDR_model", "(", "image_stack", ",", "edge_stack", ",", "\n", "ref_ev", ",", "\n", "up_length", "=", "self", ".", "max_ev", "-", "ev", ",", "\n", "down_length", "=", "ev", "-", "self", ".", "min_ev", ",", "\n", "step", "=", "iter_num", ")", "\n", "\n", "gen_hist", "=", "extract_hist", "(", "pred_int_stack", ")", "\n", "target_hist", "=", "extract_hist", "(", "image_stack", ")", "\n", "\n", "stack_hist_loss", "=", "self", ".", "recon_loss", "(", "gen_hist", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "target_hist", ")", "\n", "\n", "stack_int_recon_loss", "=", "self", ".", "recon_loss", "(", "pred_int_stack", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "image_stack", ")", "\n", "\n", "edge_recon_loss", "=", "self", ".", "recon_loss", "(", "pred_edge_stack", ",", "\n", "edge_stack", ")", "\n", "\n", "stack_int_loss", "=", "stack_int_recon_loss", "+", "0.01", "*", "stack_hist_loss", "\n", "\n", "total_int_stack_loss", "+=", "stack_int_loss", ".", "item", "(", ")", "\n", "total_edge_loss", "+=", "edge_recon_loss", ".", "item", "(", ")", "\n", "\n", "if", "iter_num", ">", "self", ".", "refine_step", ":", "\n", "\n", "                    ", "gen_hdr", ",", "gen_crf", "=", "self", ".", "hdrlayer_pred", "(", "(", "(", "pred_stack", "+", "1", ")", "/", "2", ")", ".", "to", "(", "self", ".", "device", "[", "1", "]", ")", ",", "\n", "ev_stack", ")", "\n", "#target_hdr, target_crf = self.hdrlayer_gt(\\", "\n", "#         ((image_stack+1)/2).to(self.device[1]),", "\n", "#           ev_stack)", "\n", "\n", "stack_recon_loss", "=", "self", ".", "recon_loss", "(", "pred_stack", ",", "image_stack", ")", "\n", "\n", "stack_cx_loss", "=", "torch", ".", "tensor", "(", "[", "self", ".", "cx_loss1", "(", "(", "pred_stack", "[", ":", ",", "i", ",", ":", "]", "+", "1", ")", "/", "2", ",", "\n", "(", "image_stack", "[", ":", ",", "i", ",", ":", "]", "+", "1", ")", "/", "2", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "length", ")", "]", ")", ".", "mean", "(", ")", "\n", "\n", "stack_cx_loss", "+=", "torch", ".", "tensor", "(", "[", "self", ".", "cx_loss2", "(", "(", "pred_stack", "[", ":", ",", "i", ",", ":", "]", "+", "1", ")", "/", "2", ",", "\n", "(", "image_stack", "[", ":", ",", "i", ",", ":", "]", "+", "1", ")", "/", "2", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "length", ")", "]", ")", ".", "mean", "(", ")", "\n", "\n", "hdr_loss", "=", "self", ".", "recon_loss", "(", "mu_law", "(", "gen_hdr", ",", "mu", "=", "100", ")", ",", "\n", "mu_law", "(", "target_hdr", ",", "mu", "=", "100", ")", ")", "\n", "\n", "stack_loss", "=", "stack_recon_loss", "+", "0.1", "*", "stack_cx_loss", "\n", "\n", "total_stack_loss", "+=", "stack_loss", ".", "item", "(", ")", "\n", "total_hdr_loss", "+=", "hdr_loss", ".", "item", "(", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "edge_recon_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optim_su", ".", "step", "(", ")", "\n", "self", ".", "optim_sd", ".", "step", "(", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "stack_int_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optim_gu", ".", "step", "(", ")", "\n", "self", ".", "optim_gd", ".", "step", "(", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "stack_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optim_cbu", ".", "step", "(", ")", "\n", "self", ".", "optim_cbd", ".", "step", "(", ")", "\n", "\n", "if", "iter_num", ">", "self", ".", "refine_step", ":", "\n", "                        ", "self", ".", "reset_grad", "(", ")", "\n", "hdr_loss", ".", "backward", "(", ")", "\n", "self", ".", "optim_cbu", ".", "step", "(", ")", "\n", "self", ".", "optim_cbd", ".", "step", "(", ")", "\n", "self", ".", "optim_gu", ".", "step", "(", ")", "\n", "self", ".", "optim_gd", ".", "step", "(", ")", "\n", "self", ".", "optim_su", ".", "step", "(", ")", "\n", "self", ".", "optim_sd", ".", "step", "(", ")", "\n", "\n", "", "loss", "[", "'HDR/LogHDR_loss'", "]", "=", "total_stack_loss", "\n", "loss", "[", "'HDR/HDR_loss'", "]", "=", "total_hdr_loss", "\n", "loss", "[", "'HDR/CXloss'", "]", "=", "stack_cx_loss", ".", "item", "(", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "self", ".", "reset_grad", "(", ")", "\n", "edge_recon_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optim_su", ".", "step", "(", ")", "\n", "self", ".", "optim_sd", ".", "step", "(", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "stack_int_loss", ".", "backward", "(", ")", "\n", "self", ".", "optim_gu", ".", "step", "(", ")", "\n", "self", ".", "optim_gd", ".", "step", "(", ")", "\n", "\n", "", "loss", "[", "'HDR/HDR_int_loss'", "]", "=", "total_int_stack_loss", "\n", "loss", "[", "'HDR/edge_loss'", "]", "=", "total_edge_loss", "\n", "\n", "'''\n                   Print log\n                '''", "\n", "\n", "# Print out training information.", "\n", "if", "(", "iter_num", "+", "1", ")", "%", "self", ".", "log_step", "==", "0", ":", "\n", "                    ", "et", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "log", "=", "\"Elapsed [{}], Iteration [{}]\"", ".", "format", "(", "\n", "et", ",", "iter_num", "+", "1", ")", "\n", "for", "tag", ",", "value", "in", "loss", ".", "items", "(", ")", ":", "\n", "                        ", "log", "+=", "\", {}: {:.4f}\"", ".", "format", "(", "tag", ",", "value", ")", "\n", "", "print", "(", "log", ")", "\n", "\n", "\n", "", "if", "(", "iter_num", "+", "1", ")", "%", "self", ".", "validate_step", "==", "0", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "self", ".", "validate", "(", "iter_num", ")", "\n", "\n", "# Save model checkpoints.", "\n", "", "", "if", "(", "iter_num", "+", "1", ")", "%", "self", ".", "model_save_step", "==", "0", ":", "\n", "                    ", "gu_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-gu.ckpt'", ".", "format", "(", "iter_num", "+", "1", ")", ")", "\n", "gd_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-gd.ckpt'", ".", "format", "(", "iter_num", "+", "1", ")", ")", "\n", "su_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-su.ckpt'", ".", "format", "(", "iter_num", "+", "1", ")", ")", "\n", "sd_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-sd.ckpt'", ".", "format", "(", "iter_num", "+", "1", ")", ")", "\n", "\n", "cbu_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-cbu.ckpt'", ".", "format", "(", "iter_num", "+", "1", ")", ")", "\n", "cbd_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-cbd.ckpt'", ".", "format", "(", "iter_num", "+", "1", ")", ")", "\n", "\n", "torch", ".", "save", "(", "self", ".", "gen_up", ".", "state_dict", "(", ")", ",", "gu_path", ")", "\n", "torch", ".", "save", "(", "self", ".", "gen_down", ".", "state_dict", "(", ")", ",", "gd_path", ")", "\n", "torch", ".", "save", "(", "self", ".", "struct_up", ".", "state_dict", "(", ")", ",", "su_path", ")", "\n", "torch", ".", "save", "(", "self", ".", "struct_down", ".", "state_dict", "(", ")", ",", "sd_path", ")", "\n", "torch", ".", "save", "(", "self", ".", "combine_up", ".", "state_dict", "(", ")", ",", "cbu_path", ")", "\n", "torch", ".", "save", "(", "self", ".", "combine_down", ".", "state_dict", "(", ")", ",", "cbd_path", ")", "\n", "\n", "print", "(", "'Saved model checkpoints into {}...'", ".", "format", "(", "\n", "self", ".", "model_path", ")", ")", "\n", "\n", "# Display interim results", "\n", "", "if", "(", "iter_num", "+", "1", ")", "%", "self", ".", "display_step", "==", "0", ":", "\n", "                    ", "image", "=", "torch", ".", "cat", "(", "[", "image_stack", ".", "squeeze", "(", "0", ")", ",", "\n", "pred_int_stack", ".", "squeeze", "(", "0", ")", ",", "\n", "pred_stack", ".", "squeeze", "(", "0", ")", "]", ",", "0", ")", "\n", "\n", "edge", "=", "torch", ".", "cat", "(", "[", "(", "edge_stack", "*", "2", "-", "1", ")", ".", "squeeze", "(", "0", ")", ",", "\n", "(", "pred_edge_stack", "*", "2", "-", "1", ")", ".", "squeeze", "(", "0", ")", "]", ",", "0", ")", "\n", "\n", "edge", "=", "edge", ".", "expand", "(", "[", "self", ".", "length", "*", "2", ",", "3", ",", "\n", "self", ".", "img_size", ",", "self", ".", "img_size", "]", ")", "\n", "\n", "image_edge", "=", "torch", ".", "cat", "(", "[", "image", ",", "edge", "]", ",", "0", ")", "\n", "\n", "psnr_int_up", "=", "compute_psnr", "(", "image_stack", "[", ":", ",", "self", ".", "ref_ev", "+", "1", ":", ",", ":", "]", ",", "\n", "pred_int_stack", "[", ":", ",", "self", ".", "ref_ev", "+", "1", ":", ",", ":", "]", ")", "\n", "psnr_int_down", "=", "compute_psnr", "(", "image_stack", "[", ":", ",", ":", "self", ".", "ref_ev", ",", ":", "]", ",", "\n", "pred_int_stack", "[", ":", ",", ":", "self", ".", "ref_ev", ",", ":", "]", ")", "\n", "\n", "image_edge_grid", "=", "make_grid", "(", "image_edge", ",", "\n", "nrow", "=", "self", ".", "length", ")", "\n", "\n", "if", "iter_num", ">", "self", ".", "refine_step", ":", "\n", "\n", "                        ", "psnr_up", "=", "compute_psnr", "(", "image_stack", "[", ":", ",", "self", ".", "ref_ev", "+", "1", ":", ",", ":", "]", ",", "\n", "pred_stack", "[", ":", ",", "self", ".", "ref_ev", "+", "1", ":", ",", ":", "]", ")", "\n", "\n", "psnr_down", "=", "compute_psnr", "(", "image_stack", "[", ":", ",", ":", "self", ".", "ref_ev", ",", ":", "]", ",", "\n", "pred_stack", "[", ":", ",", ":", "self", ".", "ref_ev", ",", ":", "]", ")", "\n", "\n", "hdr_t", "=", "tone_map", "(", "target_hdr", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "hdr_g", "=", "tone_map", "(", "gen_hdr", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "psnr_tonemap", "=", "tone_psnr", "(", "hdr_t", ",", "hdr_g", ")", "\n", "\n", "hdr", "=", "torch", ".", "cat", "(", "[", "torch", ".", "from_numpy", "(", "hdr_t", ")", ",", "\n", "torch", ".", "from_numpy", "(", "hdr_g", ")", "]", ",", "1", ")", "\n", "image_grid2", "=", "make_grid", "(", "hdr", ",", "\n", "nrow", "=", "self", ".", "batch_size", ")", "\n", "\n", "\n", "print", "(", "'PSNR of tonemapped image : {}'", ".", "format", "(", "psnr_tonemap", ")", ")", "\n", "print", "(", "'PSNR of up sample image : {}'", ".", "format", "(", "psnr_up", ")", ")", "\n", "print", "(", "'PSNR of down sample image : {}'", ".", "format", "(", "psnr_down", ")", ")", "\n", "print", "(", "'PSNR of int_up sample image : {}'", ".", "format", "(", "psnr_int_up", ")", ")", "\n", "print", "(", "'PSNR of int_down sample image : {}'", ".", "format", "(", "psnr_int_down", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                        ", "image_grid2", "=", "image_edge_grid", "\n", "image_grid2", "=", "(", "image_grid2", "+", "1", ")", "/", "2", "\n", "image_grid2", "=", "image_grid2", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "image_grid2", "=", "image_grid2", ".", "numpy", "(", ")", "\n", "image_grid2", "=", "np", ".", "transpose", "(", "image_grid2", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "print", "(", "'PSNR of int_up sample image : {}'", ".", "format", "(", "psnr_int_up", ")", ")", "\n", "print", "(", "'PSNR of int_down sample image : {}'", ".", "format", "(", "psnr_int_down", ")", ")", "\n", "\n", "\n", "", "matplotlib_imshow", "(", "image_edge_grid", ",", "image_grid2", ",", "\n", "one_channel", "=", "False", ")", "\n", "\n", "", "iter_num", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.config_tool.update_dict": [[8, 24], ["new_dict.items", "validate_item", "isinstance", "isinstance", "config_tool.update_dict"], "function", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.config_tool.update_dict"], ["def", "update_dict", "(", "target_dict", ",", "new_dict", ",", "validate_item", "=", "None", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "new_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "target_dict", "and", "value", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "validate_item", ":", "\n", "            ", "validate_item", "(", "key", ",", "value", ")", "\n", "", "if", "key", "not", "in", "target_dict", ":", "\n", "            ", "target_dict", "[", "key", "]", "=", "value", "\n", "# logger.warn('Skipping unexpected key in config: {}'", "\n", "#             .format(key))", "\n", "continue", "\n", "", "if", "isinstance", "(", "target_dict", "[", "key", "]", ",", "dict", ")", "and", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "update_dict", "(", "target_dict", "[", "key", "]", ",", "value", ",", "validate_item", "=", "validate_item", ")", "\n", "", "else", ":", "\n", "            ", "target_dict", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.config_tool.get_default_config": [[28, 34], ["os.join", "open", "yaml.load"], "function", ["None"], ["", "", "", "def", "get_default_config", "(", ")", ":", "\n", "    ", "config_file", "=", "osp", ".", "join", "(", "here", ",", "'default_config.yaml'", ".", "format", "(", "type", ")", ")", "\n", "with", "open", "(", "config_file", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.config_tool.get_config": [[35, 57], ["config_tool.get_default_config", "os.exists", "config_tool.update_dict", "config_tool.update_dict", "open", "yaml.load"], "function", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.config_tool.get_default_config", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.config_tool.update_dict", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.config_tool.update_dict"], ["", "def", "get_config", "(", "config_from_args", "=", "None", ",", "config_file", "=", "None", ")", ":", "\n", "# Configuration load order:", "\n", "#", "\n", "#   1. default config (lowest priority)", "\n", "#   2. config file passed by command line argument or ~/.labelmerc", "\n", "#   3. command line argument (highest priority)", "\n", "\n", "# 1. default config", "\n", "    ", "config", "=", "get_default_config", "(", ")", "\n", "\n", "# 2. config from yaml file", "\n", "if", "config_file", "is", "not", "None", "and", "osp", ".", "exists", "(", "config_file", ")", ":", "\n", "        ", "with", "open", "(", "config_file", ")", "as", "f", ":", "\n", "            ", "user_config", "=", "yaml", ".", "load", "(", "f", ")", "or", "{", "}", "\n", "", "update_dict", "(", "config", ",", "user_config", ",", "validate_item", "=", "validate_config_item", ")", "\n", "\n", "# 3. command line argument", "\n", "", "if", "config_from_args", "is", "not", "None", ":", "\n", "        ", "update_dict", "(", "config", ",", "config_from_args", ",", "\n", "validate_item", "=", "validate_config_item", ")", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.hdrlayer.hdrlayer.__init__": [[13, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "merge_type", "=", "'log'", ",", "\n", "lin_type", "=", "'LUT'", ",", "\n", "method", "=", "'Debevec'", ",", "\n", "bMeanWeight", "=", "0", ",", "\n", "weight_type", "=", "'Deb97'", ",", "\n", "device", "=", "0", ",", "\n", "num_channels", "=", "3", ",", "\n", ")", ":", "\n", "\n", "        ", "'''\n        Input:\n            -merge_type:\n              - 'linear': it merges different LDR images in the linear\n                 domain.\n              - 'log': it merges different LDR images in the natural\n                 logarithmic domain.\n              - 'w_time_sq': it merges different LDR images in the\n                 linear; the weight is scaled by the square of the exposure\n                 time.\n\n            -bMeanWeight: if it is set to 1, it will compute a single\n            weight for each exposure (not a weight for each color channel)\n            for assembling all images.\n            Note that this option typicallt improves numerical stability,\n            but it can introduce bias in the final colors. This option is\n            set to 0 by default.\n    '''", "\n", "super", "(", "hdrlayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "merge_type", "=", "merge_type", "\n", "self", ".", "bMeanWeight", "=", "bMeanWeight", "\n", "self", ".", "weight_type", "=", "weight_type", "\n", "self", ".", "lin_type", "=", "lin_type", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "method", "=", "method", "\n", "# rgb_channel", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.hdrlayer.hdrlayer.forward": [[50, 115], ["list", "range", "stack.view().max", "utils.np_DebevecCRF.DebevecCRF", "lin_fun.cuda.cuda.cuda", "utils.hdr_toolbox.ConstructRad", "list.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "utils.np_MitsunagaNayarCRF.MitsunagaNayarCRF", "stack.view"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.np_DebevecCRF.DebevecCRF", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.ConstructRad", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.np_MitsunagaNayarCRF.MitsunagaNayarCRF"], ["", "def", "forward", "(", "self", ",", "stack", ",", "stack_exposure", ")", ":", "\n", "        ", "'''\n        Input:\n            -stack: an input stack of LDR images. This has to be set if we\n            the stack is already in memory and we do not want to load it\n            from the disk using the tuple (dir_name, format).\n            If the stack is a single or dobule, values are assumed to be in\n            the range [0,1].\n \n            -stack_exposure: an array containg the exposure time of each\n            image. Time is expressed in second (s).\n\n        Output:\n           -imgOut: the final HDR image.\n           -lin_fun: the camera response function.\n\n        Example:\n            This example line shows how to load a stack from disk :\n            stack = ReadLDRStack('stack_alignment', 'jpg');      \n            stack_exposure = ReadLDRExif('stack_alignment', 'jpg');                 \n            BuildHDR(stack, stack_exposure,'tabledDeb97',[],'Deb97');\n        '''", "\n", "# Correcting the range of image pixel values", "\n", "if", "(", "stack", ".", "view", "(", "-", "1", ")", ".", "max", "(", ")", ">", "255", ")", ":", "\n", "           ", "scale", "=", "65535.0", "# uint16", "\n", "", "else", ":", "\n", "           ", "scale", "=", "1.0", "\n", "", "stack", "=", "stack", "/", "scale", "\n", "batch_size", ",", "num_images", ",", "channels", ",", "height", ",", "width", "=", "stack", ".", "shape", "\n", "\n", "# Estimate camera response function", "\n", "if", "self", ".", "method", "==", "'Debevec'", ":", "\n", "            ", "lin_fun", "=", "DebevecCRF", "(", "stack", ",", "stack_exposure", ")", "\n", "pp", "=", "0", "\n", "", "elif", "self", ".", "method", "==", "'Mitsun'", ":", "\n", "            ", "lin_fun", ",", "pp", "=", "MitsunagaNayarCRF", "(", "stack", ",", "stack_exposure", ",", "N", "=", "5", ")", "\n", "\n", "# For numerical stability", "\n", "", "delta_value", "=", "1.0", "/", "65536.0", "\n", "non_zero_offset", "=", "1e-9", "\n", "saturation", "=", "1e-4", "\n", "\n", "if", "stack", ".", "is_cuda", ":", "\n", "            ", "lin_fun", "=", "lin_fun", ".", "cuda", "(", "device", "=", "self", ".", "device", ")", "\n", "\n", "\n", "#for each LDR image...", "\n", "\n", "", "hdr_list", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "stack_b", "=", "stack", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", "# batch stack", "\n", "stack_exposure_b", "=", "stack_exposure", "[", "i", ",", ":", "]", "\n", "lin_fun_b", "=", "lin_fun", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "img_out", "=", "ConstructRad", "(", "stack_b", ",", "\n", "stack_exposure_b", ",", "\n", "lin_fun_b", ",", "\n", "pp", ",", "\n", "self", ".", "weight_type", ",", "\n", "self", ".", "merge_type", ",", "\n", "self", ".", "lin_type", ",", "\n", "self", ".", "device", ")", "\n", "hdr_list", ".", "append", "(", "img_out", ")", "\n", "", "return", "torch", ".", "stack", "(", "hdr_list", ",", "dim", "=", "0", ")", ",", "lin_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.__init__": [[25, 52], ["torch.Module.__init__", "VGG19().cuda", "cobi_loss.ContextualBilateralLoss.register_buffer", "cobi_loss.ContextualBilateralLoss.register_buffer", "cobi_loss.VGG19", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["def", "__init__", "(", "self", ",", "\n", "weight_sp", ":", "float", "=", "0.1", ",", "\n", "band_width", ":", "float", "=", "0.5", ",", "\n", "loss_type", ":", "str", "=", "'cosine'", ",", "\n", "use_vgg", ":", "bool", "=", "True", ",", "\n", "vgg_layer", ":", "str", "=", "'relu3_4'", ",", "\n", "device", ":", "int", "=", "1", ",", "\n", "patch_size", ":", "int", "=", "8", ")", ":", "\n", "\n", "        ", "super", "(", "ContextualBilateralLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "band_width", "=", "band_width", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "if", "use_vgg", ":", "\n", "            ", "self", ".", "vgg_model", "=", "VGG19", "(", ")", ".", "cuda", "(", "device", "=", "device", ")", "\n", "\n", "self", ".", "vgg_layer", "=", "vgg_layer", "\n", "self", ".", "register_buffer", "(", "\n", "name", "=", "'vgg_mean'", ",", "\n", "tensor", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "[", "0.485", "]", "]", ",", "[", "[", "0.456", "]", "]", ",", "[", "[", "0.406", "]", "]", "]", ",", "requires_grad", "=", "False", ")", "\n", ")", "\n", "self", ".", "register_buffer", "(", "\n", "name", "=", "'vgg_std'", ",", "\n", "tensor", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "[", "0.229", "]", "]", ",", "[", "[", "0.224", "]", "]", ",", "[", "[", "0.225", "]", "]", "]", ",", "requires_grad", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.forward": [[53, 83], ["hasattr", "getattr.sub().div", "getattr.sub().div", "getattr", "getattr", "cobi_loss.ContextualBilateralLoss.contextual_bilateral_loss", "getattr.unfold().unfold().unfold", "x_patch.unsqueeze.unsqueeze.reshape", "x_patch.unsqueeze.unsqueeze.unsqueeze", "getattr.unfold().unfold().unfold", "y_patch.unsqueeze.unsqueeze.reshape", "y_patch.unsqueeze.unsqueeze.unsqueeze", "cobi_loss.ContextualBilateralLoss.contextual_bilateral_loss", "cobi_loss.ContextualBilateralLoss.vgg_std.detach().cuda", "cobi_loss.ContextualBilateralLoss.vgg_std.detach().cuda", "cobi_loss.ContextualBilateralLoss.vgg_model", "cobi_loss.ContextualBilateralLoss.vgg_model", "getattr.sub", "getattr.sub", "getattr.unfold().unfold", "getattr.unfold().unfold", "cobi_loss.ContextualBilateralLoss.vgg_mean.detach().cuda", "cobi_loss.ContextualBilateralLoss.vgg_std.detach", "cobi_loss.ContextualBilateralLoss.vgg_mean.detach().cuda", "cobi_loss.ContextualBilateralLoss.vgg_std.detach", "getattr.unfold", "getattr.unfold", "cobi_loss.ContextualBilateralLoss.vgg_mean.detach", "cobi_loss.ContextualBilateralLoss.vgg_mean.detach"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.contextual_bilateral_loss", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.contextual_bilateral_loss"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'vgg_model'", ")", ":", "\n", "            ", "assert", "x", ".", "shape", "[", "1", "]", "==", "3", "and", "y", ".", "shape", "[", "1", "]", "==", "3", ",", "'VGG model takes 3 chennel images.'", "\n", "\n", "# normalization", "\n", "x", "=", "x", ".", "sub", "(", "self", ".", "vgg_mean", ".", "detach", "(", ")", ".", "cuda", "(", "self", ".", "device", ")", ")", ".", "div", "(", "self", ".", "vgg_std", ".", "detach", "(", ")", ".", "cuda", "(", "self", ".", "device", ")", ")", "\n", "y", "=", "y", ".", "sub", "(", "self", ".", "vgg_mean", ".", "detach", "(", ")", ".", "cuda", "(", "self", ".", "device", ")", ")", ".", "div", "(", "self", ".", "vgg_std", ".", "detach", "(", ")", ".", "cuda", "(", "self", ".", "device", ")", ")", "\n", "\n", "# picking up vgg feature maps", "\n", "x", "=", "getattr", "(", "self", ".", "vgg_model", "(", "x", ")", ",", "self", ".", "vgg_layer", ")", "\n", "y", "=", "getattr", "(", "self", ".", "vgg_model", "(", "y", ")", ",", "self", ".", "vgg_layer", ")", "\n", "\n", "output", "=", "self", ".", "contextual_bilateral_loss", "(", "x", ",", "y", ",", "self", ".", "band_width", ")", "\n", "", "else", ":", "\n", "            ", "x_patch", "=", "x", ".", "unfold", "(", "1", ",", "3", ",", "3", ")", ".", "unfold", "(", "2", ",", "self", ".", "patch_size", ",", "self", ".", "patch_size", ")", ".", "unfold", "(", "3", ",", "self", ".", "patch_size", ",", "self", ".", "patch_size", ")", "\n", "x_patch", "=", "x_patch", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "patch_size", ",", "self", ".", "patch_size", "]", ")", "\n", "x_patch", "=", "x_patch", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "y_patch", "=", "y", ".", "unfold", "(", "1", ",", "3", ",", "3", ")", ".", "unfold", "(", "2", ",", "self", ".", "patch_size", ",", "self", ".", "patch_size", ")", ".", "unfold", "(", "3", ",", "self", ".", "patch_size", ",", "self", ".", "patch_size", ")", "\n", "y_patch", "=", "y_patch", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "patch_size", ",", "self", ".", "patch_size", "]", ")", "\n", "y_patch", "=", "y_patch", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "output", "=", "self", ".", "contextual_bilateral_loss", "(", "x_patch", ",", "y_patch", ",", "\n", "self", ".", "band_width", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.contextual_bilateral_loss": [[85, 140], ["cobi_loss.ContextualBilateralLoss.compute_meshgrid().to", "cobi_loss.ContextualBilateralLoss.compute_l2_distance", "cobi_loss.ContextualBilateralLoss.compute_relative_distance", "cobi_loss.ContextualBilateralLoss.compute_cx", "cobi_loss.ContextualBilateralLoss.compute_relative_distance", "cobi_loss.ContextualBilateralLoss.compute_cx", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "k_max_NC.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.size", "y.size", "cobi_loss.ContextualBilateralLoss.compute_cosine_distance", "cobi_loss.ContextualBilateralLoss.compute_meshgrid", "cobi_loss.ContextualBilateralLoss.compute_l1_distance", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "cobi_loss.ContextualBilateralLoss.compute_l2_distance"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_l2_distance", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_relative_distance", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_cx", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_relative_distance", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_cx", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_cosine_distance", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_meshgrid", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_l1_distance", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_l2_distance"], ["", "def", "contextual_bilateral_loss", "(", "self", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "weight_sp", ":", "float", "=", "0.1", ",", "\n", "band_width", ":", "float", "=", "0.5", ",", "\n", "loss_type", ":", "str", "=", "'cosine'", ")", ":", "\n", "        ", "\"\"\"\n        Computes Contextual Bilateral (CoBi) Loss between x and y,\n            proposed in https://arxiv.org/pdf/1905.05169.pdf.\n        Parameters\n        ---\n        x : torch.Tensor\n            features of shape (N, C, H, W).\n        y : torch.Tensor\n            features of shape (N, C, H, W).\n        band_width : float, optional\n            a band-width parameter used to convert distance to similarity.\n            in the paper, this is described as :math:`h`.\n        loss_type : str, optional\n            a loss type to measure the distance between features.\n            Note: `l1` and `l2` frequently raises OOM.\n        Returns\n        ---\n        cx_loss : torch.Tensor\n            contextual loss between x and y (Eq (1) in the paper).\n        k_arg_max_NC : torch.Tensor\n            indices to maximize similarity over channels.\n        \"\"\"", "\n", "\n", "assert", "x", ".", "size", "(", ")", "==", "y", ".", "size", "(", ")", ",", "'input tensor must have the same size.'", "\n", "# spatial loss", "\n", "grid", "=", "self", ".", "compute_meshgrid", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "dist_raw", "=", "self", ".", "compute_l2_distance", "(", "grid", ",", "grid", ")", "\n", "dist_tilde", "=", "self", ".", "compute_relative_distance", "(", "dist_raw", ")", "\n", "cx_sp", "=", "self", ".", "compute_cx", "(", "dist_tilde", ",", "band_width", ")", "\n", "\n", "# feature loss", "\n", "if", "loss_type", "==", "'cosine'", ":", "\n", "            ", "dist_raw", "=", "self", ".", "compute_cosine_distance", "(", "x", ",", "y", ")", "\n", "", "elif", "loss_type", "==", "'l1'", ":", "\n", "            ", "dist_raw", "=", "self", ".", "compute_l1_distance", "(", "x", ",", "y", ")", "\n", "", "elif", "loss_type", "==", "'l2'", ":", "\n", "            ", "dist_raw", "=", "self", ".", "compute_l2_distance", "(", "x", ",", "y", ")", "\n", "", "dist_tilde", "=", "self", ".", "compute_relative_distance", "(", "dist_raw", ")", "\n", "cx_feat", "=", "self", ".", "compute_cx", "(", "dist_tilde", ",", "band_width", ")", "\n", "\n", "# combined loss", "\n", "cx_combine", "=", "(", "1.", "-", "weight_sp", ")", "*", "cx_feat", "+", "weight_sp", "*", "cx_sp", "\n", "\n", "k_max_NC", ",", "_", "=", "torch", ".", "max", "(", "cx_combine", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "cx", "=", "k_max_NC", ".", "mean", "(", "dim", "=", "1", ")", "\n", "cx_loss", "=", "torch", ".", "mean", "(", "-", "torch", ".", "log", "(", "cx", "+", "1e-5", ")", ")", "\n", "\n", "return", "cx_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_cx": [[142, 146], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "compute_cx", "(", "self", ",", "dist_tilde", ",", "band_width", ")", ":", "\n", "        ", "w", "=", "torch", ".", "exp", "(", "(", "1", "-", "dist_tilde", ")", "/", "band_width", ")", "# Eq(3)", "\n", "cx", "=", "w", "/", "torch", ".", "sum", "(", "w", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "# Eq(4)", "\n", "return", "cx", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_relative_distance": [[148, 152], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "compute_relative_distance", "(", "self", ",", "dist_raw", ")", ":", "\n", "        ", "dist_min", ",", "_", "=", "torch", ".", "min", "(", "dist_raw", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "dist_tilde", "=", "dist_raw", "/", "(", "dist_min", "+", "1e-5", ")", "\n", "return", "dist_tilde", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_cosine_distance": [[154, 177], ["y.mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "x.size", "x_normalized.reshape.reshape.reshape", "y_normalized.reshape.reshape.reshape", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x_normalized.reshape.reshape.transpose"], "methods", ["None"], ["", "def", "compute_cosine_distance", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# mean shifting by channel-wise mean of `y`.", "\n", "        ", "y_mu", "=", "y", ".", "mean", "(", "dim", "=", "(", "0", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", "\n", "x_centered", "=", "x", "-", "y_mu", "\n", "y_centered", "=", "y", "-", "y_mu", "\n", "\n", "# L2 normalization", "\n", "x_normalized", "=", "F", ".", "normalize", "(", "x_centered", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "y_normalized", "=", "F", ".", "normalize", "(", "y_centered", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "# channel-wise vectorization", "\n", "N", ",", "C", ",", "*", "_", "=", "x", ".", "size", "(", ")", "\n", "x_normalized", "=", "x_normalized", ".", "reshape", "(", "N", ",", "C", ",", "-", "1", ")", "# (N, C, H*W)", "\n", "y_normalized", "=", "y_normalized", ".", "reshape", "(", "N", ",", "C", ",", "-", "1", ")", "# (N, C, H*W)", "\n", "\n", "# consine similarity", "\n", "cosine_sim", "=", "torch", ".", "bmm", "(", "x_normalized", ".", "transpose", "(", "1", ",", "2", ")", ",", "\n", "y_normalized", ")", "# (N, H*W, H*W)", "\n", "\n", "# convert to distance", "\n", "dist", "=", "1", "-", "cosine_sim", "\n", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_l1_distance": [[180, 191], ["x.size", "x.view", "y.view", "dist.clamp.clamp.sum().abs", "dist.clamp.clamp.transpose().reshape", "dist.clamp.clamp.clamp", "x.view.unsqueeze", "y.view.unsqueeze", "dist.clamp.clamp.sum", "dist.clamp.clamp.transpose"], "methods", ["None"], ["", "def", "compute_l1_distance", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x_vec", "=", "x", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "y_vec", "=", "y", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "\n", "dist", "=", "x_vec", ".", "unsqueeze", "(", "2", ")", "-", "y_vec", ".", "unsqueeze", "(", "3", ")", "\n", "dist", "=", "dist", ".", "sum", "(", "dim", "=", "1", ")", ".", "abs", "(", ")", "\n", "dist", "=", "dist", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "N", ",", "H", "*", "W", ",", "H", "*", "W", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "0.", ")", "\n", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_l2_distance": [[194, 207], ["x.size", "x.view", "y.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "dist.clamp.clamp.transpose().reshape", "dist.clamp.clamp.clamp", "y.view.transpose", "torch.sum.transpose", "torch.sum.transpose", "torch.sum.transpose", "dist.clamp.clamp.transpose"], "methods", ["None"], ["", "def", "compute_l2_distance", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x_vec", "=", "x", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "y_vec", "=", "y", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "x_s", "=", "torch", ".", "sum", "(", "x_vec", "**", "2", ",", "dim", "=", "1", ")", "\n", "y_s", "=", "torch", ".", "sum", "(", "y_vec", "**", "2", ",", "dim", "=", "1", ")", "\n", "\n", "A", "=", "y_vec", ".", "transpose", "(", "1", ",", "2", ")", "@", "x_vec", "\n", "dist", "=", "y_s", "-", "2", "*", "A", "+", "x_s", ".", "transpose", "(", "0", ",", "1", ")", "\n", "dist", "=", "dist", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "N", ",", "H", "*", "W", ",", "H", "*", "W", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "0.", ")", "\n", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.ContextualBilateralLoss.compute_meshgrid": [[209, 219], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range"], "methods", ["None"], ["", "def", "compute_meshgrid", "(", "self", ",", "shape", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "shape", "\n", "rows", "=", "torch", ".", "arange", "(", "0", ",", "H", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "(", "H", "+", "1", ")", "\n", "cols", "=", "torch", ".", "arange", "(", "0", ",", "W", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "(", "W", "+", "1", ")", "\n", "\n", "feature_grid", "=", "torch", ".", "meshgrid", "(", "rows", ",", "cols", ")", "\n", "feature_grid", "=", "torch", ".", "stack", "(", "feature_grid", ")", ".", "unsqueeze", "(", "0", ")", "\n", "feature_grid", "=", "torch", ".", "cat", "(", "[", "feature_grid", "for", "_", "in", "range", "(", "N", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "feature_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.VGG19.__init__": [[221, 241], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "range", "range", "torchvision.vgg19", "cobi_loss.VGG19.slice1.add_module", "cobi_loss.VGG19.slice2.add_module", "cobi_loss.VGG19.slice3.add_module", "cobi_loss.VGG19.slice4.add_module", "cobi_loss.VGG19.parameters", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "VGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "vgg", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "18", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "18", ",", "27", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.cobi_loss.VGG19.forward": [[242, 256], ["cobi_loss.VGG19.slice1", "cobi_loss.VGG19.slice2", "cobi_loss.VGG19.slice3", "cobi_loss.VGG19.slice4", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_4", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_4", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\n", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_4'", ",", "'relu4_4'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_4", ",", "h_relu4_4", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.__init__": [[23, 51], ["super().__init__", "torch.utils.data.DataLoader", "test.test_HDR.build_model", "dataloader.ImageDataset", "int"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.build_model"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "test_HDR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "config", "[", "'batch_size'", "]", "# 32", "\n", "self", ".", "img_size", "=", "config", "[", "'img_size'", "]", "\n", "self", ".", "min_ev", "=", "config", "[", "'min_ev'", "]", "# -3", "\n", "self", ".", "max_ev", "=", "config", "[", "'max_ev'", "]", "#  3", "\n", "self", ".", "ref_ev", "=", "config", "[", "'ref_ev'", "]", "\n", "self", ".", "length", "=", "self", ".", "max_ev", "-", "self", ".", "min_ev", "+", "1", "\n", "\n", "self", ".", "data_dir", "=", "config", "[", "'test_dir'", "]", "\n", "\n", "self", ".", "device", "=", "config", "[", "'gpu_id'", "]", "\n", "self", ".", "model_path", "=", "config", "[", "'model_dir'", "]", "\n", "self", ".", "output_dir", "=", "config", "[", "'test_result_dir'", "]", "\n", "\n", "self", ".", "test_loader", "=", "DataLoader", "(", "ImageDataset", "(", "\n", "self", ".", "data_dir", ",", "self", ".", "img_size", ",", "\n", "min_ev", "=", "int", "(", "self", ".", "min_ev", ")", ",", "\n", "max_ev", "=", "self", ".", "max_ev", ",", "\n", "fliplr", "=", "False", ",", "fliptb", "=", "False", ",", "\n", "rot", "=", "False", ",", "randcrop", "=", "False", ",", "\n", "transform", "=", "True", ",", "\n", "mode", "=", "'test'", ")", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "self", ".", "load_step", "=", "config", "[", "'test_step'", "]", "\n", "self", ".", "build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.build_model": [[52, 83], ["model.GRU_model.Generator_up", "model.GRU_model.Generator_down", "model.structure.Structure_up", "model.structure.Structure_down", "model.combine.CombineNet_up", "model.combine.CombineNet_down", "hdrlayer.hdrlayer.hdrlayer", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "test.test_HDR.gen_up.load_state_dict", "test.test_HDR.gen_down.load_state_dict", "test.test_HDR.struct_up.load_state_dict", "test.test_HDR.struct_down.load_state_dict", "test.test_HDR.combine_up.load_state_dict", "test.test_HDR.combine_down.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "gen_up", "=", "Generator_up", "(", "3", ",", "32", ",", "5", ",", "1", ",", "7", "-", "1", ")", "\n", "self", ".", "gen_down", "=", "Generator_down", "(", "3", ",", "32", ",", "5", ",", "1", ",", "7", "-", "1", ")", "\n", "\n", "self", ".", "struct_up", "=", "Structure_up", "(", "2", ",", "16", ",", "4", ",", "1", ",", "7", "-", "1", ")", "\n", "self", ".", "struct_down", "=", "Structure_down", "(", "2", ",", "16", ",", "4", ",", "1", ",", "7", "-", "1", ")", "\n", "\n", "self", ".", "combine_up", "=", "CombineNet_up", "(", "7", ",", "16", ",", "5", ",", "1", ")", "\n", "self", ".", "combine_down", "=", "CombineNet_down", "(", "7", ",", "16", ",", "5", ",", "1", ")", "\n", "self", ".", "hdrlayer", "=", "hdrlayer", "(", "lin_type", "=", "'LUT'", ",", "method", "=", "'Debevec'", ")", "\n", "\n", "print", "(", "'Using pre-trained weights'", ")", "\n", "gen_up_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-gu.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "gen_down_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-gd.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "struct_up_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-su.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "struct_down_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-sd.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "combine_up_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-cbu.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "combine_down_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\n", "'{}-cbd.ckpt'", ".", "format", "(", "self", ".", "load_step", ")", ")", "\n", "\n", "self", ".", "gen_up", ".", "load_state_dict", "(", "torch", ".", "load", "(", "gen_up_path", ")", ")", "\n", "self", ".", "gen_down", ".", "load_state_dict", "(", "torch", ".", "load", "(", "gen_down_path", ")", ")", "\n", "self", ".", "struct_up", ".", "load_state_dict", "(", "torch", ".", "load", "(", "struct_up_path", ")", ")", "\n", "self", ".", "struct_down", ".", "load_state_dict", "(", "torch", ".", "load", "(", "struct_down_path", ")", ")", "\n", "self", ".", "combine_up", ".", "load_state_dict", "(", "torch", ".", "load", "(", "combine_up_path", ")", ")", "\n", "self", ".", "combine_down", ".", "load_state_dict", "(", "torch", ".", "load", "(", "combine_down_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.Up_ev_model": [[84, 101], ["test.test_HDR.gen_up", "torch.mean().unsqueeze", "test.test_HDR.struct_up", "torch.cat", "test.test_HDR.combine_up", "torch.cat", "torch.mean"], "methods", ["None"], ["", "def", "Up_ev_model", "(", "self", ",", "img", ",", "edge", ",", "style_id", "=", "0", ",", "h_img", "=", "None", ",", "h_edge", "=", "None", ")", ":", "\n", "        ", "glob_up_img", ",", "h_img", "=", "self", ".", "gen_up", "(", "img", ",", "\n", "style_id", ",", "\n", "h_img", ")", "\n", "\n", "img_gray", "=", "torch", ".", "mean", "(", "img", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "up_edge", ",", "h_edge", "=", "self", ".", "struct_up", "(", "torch", ".", "cat", "(", "(", "img_gray", ",", "edge", ")", ",", "\n", "dim", "=", "1", ")", ",", "\n", "style_id", ",", "\n", "h_edge", ")", "\n", "\n", "concat_images", "=", "torch", ".", "cat", "(", "(", "img", ",", "glob_up_img", ",", "\n", "up_edge", ")", ",", "\n", "dim", "=", "1", ")", "\n", "up_img", "=", "self", ".", "combine_up", "(", "concat_images", ")", "\n", "\n", "return", "up_img", ",", "glob_up_img", ",", "up_edge", ",", "h_img", ",", "h_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.Down_ev_model": [[102, 122], ["test.test_HDR.gen_down", "torch.mean().unsqueeze", "test.test_HDR.struct_down", "torch.cat", "test.test_HDR.combine_down", "torch.cat", "torch.mean"], "methods", ["None"], ["", "def", "Down_ev_model", "(", "self", ",", "img", ",", "edge", ",", "style_id", "=", "0", ",", "h_img", "=", "None", ",", "h_edge", "=", "None", ")", ":", "\n", "        ", "glob_down_img", ",", "h_img", "=", "self", ".", "gen_down", "(", "img", ",", "\n", "style_id", ",", "\n", "h_img", ")", "\n", "\n", "img_gray", "=", "torch", ".", "mean", "(", "img", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "down_edge", ",", "h_edge", "=", "self", ".", "struct_down", "(", "torch", ".", "cat", "(", "\n", "(", "img_gray", ",", "edge", ")", ",", "\n", "dim", "=", "1", ")", ",", "\n", "style_id", ",", "\n", "h_edge", ")", "\n", "\n", "concat_images", "=", "torch", ".", "cat", "(", "(", "img", ",", "\n", "glob_down_img", ",", "\n", "down_edge", ")", ",", "\n", "dim", "=", "1", ")", "\n", "down_img", "=", "self", ".", "combine_down", "(", "concat_images", ")", "\n", "\n", "return", "down_img", ",", "glob_down_img", ",", "down_edge", ",", "h_img", ",", "h_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.HDR_model": [[123, 169], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "range", "test.test_HDR.Up_ev_model", "test.test_HDR.Down_ev_model"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.Up_ev_model", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.Down_ev_model"], ["", "def", "HDR_model", "(", "self", ",", "img_stack", ",", "edge_stack", ",", "ref_ev", ",", "\n", "up_length", ",", "down_length", ")", ":", "\n", "\n", "        ", "pred_stack", "=", "torch", ".", "zeros_like", "(", "img_stack", ")", "\n", "pred_int_stack", "=", "torch", ".", "zeros_like", "(", "img_stack", ")", "\n", "pred_edge", "=", "torch", ".", "zeros_like", "(", "edge_stack", ")", "\n", "\n", "up_img", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "up_int_img", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "down_img", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "down_int_img", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "up_edge", "=", "edge_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "down_edge", "=", "edge_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "\n", "\n", "pred_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "pred_int_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "=", "img_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "pred_edge", "[", ":", ",", "ref_ev", ",", ":", "]", "=", "edge_stack", "[", ":", ",", "ref_ev", ",", ":", "]", "\n", "\n", "up_h_img", "=", "None", "\n", "down_h_img", "=", "None", "\n", "up_h_edge", "=", "None", "\n", "down_h_edge", "=", "None", "\n", "\n", "for", "up", "in", "range", "(", "up_length", ")", ":", "\n", "\n", "            ", "up_index", "=", "ref_ev", "+", "up", "+", "1", "\n", "\n", "up_img", ",", "up_int_img", ",", "up_edge", ",", "up_h_img", ",", "up_h_edge", "=", "self", ".", "Up_ev_model", "(", "up_img", ",", "up_edge", ",", "up_index", "-", "1", ",", "up_h_img", ",", "up_h_edge", ")", "\n", "\n", "pred_stack", "[", ":", ",", "up_index", ",", ":", "]", "=", "up_img", "\n", "pred_int_stack", "[", ":", ",", "up_index", ",", ":", "]", "=", "up_int_img", "\n", "pred_edge", "[", ":", ",", "up_index", ",", ":", "]", "=", "up_edge", "\n", "\n", "", "for", "down", "in", "range", "(", "down_length", ")", ":", "\n", "            ", "down_index", "=", "ref_ev", "-", "down", "-", "1", "\n", "down_img", ",", "down_int_img", ",", "down_edge", ",", "down_h_img", ",", "down_h_edge", "=", "self", ".", "Down_ev_model", "(", "down_img", ",", "down_edge", ",", "\n", "down_index", ",", "down_h_img", ",", "down_h_edge", ")", "\n", "\n", "pred_stack", "[", ":", ",", "down_index", ",", ":", "]", "=", "down_img", "\n", "pred_int_stack", "[", ":", ",", "down_index", ",", ":", "]", "=", "down_int_img", "\n", "pred_edge", "[", ":", ",", "down_index", ",", ":", "]", "=", "down_edge", "\n", "\n", "", "return", "pred_stack", ",", "pred_int_stack", ",", "pred_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.test": [[170, 275], ["os.path.join", "list", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "data[].type", "data[].type", "data[].type", "test.test_HDR.HDR_model", "range", "test.test_HDR.hdrlayer", "test.test_HDR.hdrlayer", "gen_hdr_stack.detach.detach.detach", "target_hdr.detach.detach.detach", "numpy.array", "numpy.array", "utils.img_utils.tone_map", "utils.img_utils.tone_map", "cv2.cvtColor", "cv2.cvtColor", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.save", "numpy.save", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "str", "os.path.isdir", "os.mkdir", "utils.img_utils.inv_transform", "utils.img_utils.inv_transform", "utils.img_utils.inv_transform", "utils.img_utils.inv_transform", "utils.img_utils.inv_transform", "os.path.join", "os.path.join", "pred_image.save", "pred_edge.save", "gen_hdr_stack.detach.detach.squeeze().permute().cpu", "target_hdr.detach.detach.squeeze().permute().cpu", "target_hdr.detach.detach.cpu", "gen_hdr_stack.detach.detach.cpu", "os.path.join", "gen_crf[].cpu", "os.path.join", "target_crf[].cpu", "pred_stack[].cpu", "image_stack[].cpu", "pred_int_stack[].cpu", "str", "str", "gen_hdr_stack.detach.detach.squeeze().permute", "target_hdr.detach.detach.squeeze().permute", "gen_hdr_stack.detach.detach.squeeze", "target_hdr.detach.detach.squeeze"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.test.test_HDR.HDR_model", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.tone_map", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.tone_map", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.inv_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.inv_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.inv_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.inv_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.inv_transform"], ["", "def", "test", "(", "self", ")", ":", "\n", "\n", "        ", "sample_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'test'", ")", "\n", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "sample_path", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "sample_path", ")", "\n", "\n", "", "validate_imgs", "=", "list", "(", ")", "\n", "\n", "dtype", "=", "torch", ".", "FloatTensor", "\n", "\n", "# Validation", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "\n", "            ", "scene", "=", "'%04d'", "%", "index", "\n", "scene_path", "=", "os", ".", "path", ".", "join", "(", "sample_path", ",", "str", "(", "scene", ")", ")", "\n", "\n", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "scene_path", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "scene_path", ")", "\n", "\n", "# Inputs", "\n", "", "image_stack", "=", "data", "[", "0", "]", ".", "type", "(", "dtype", ")", "\n", "#target_hdr = data[1].type(dtype)", "\n", "ev_stack", "=", "data", "[", "2", "]", ".", "type", "(", "dtype", ")", "\n", "edge_stack", "=", "data", "[", "3", "]", ".", "type", "(", "dtype", ")", "\n", "\n", "up_length", "=", "(", "self", ".", "max_ev", "-", "self", ".", "min_ev", ")", "-", "self", ".", "ref_ev", "\n", "down_length", "=", "self", ".", "ref_ev", "\n", "pred_stack", ",", "pred_int_stack", ",", "pred_edge_stack", "=", "self", ".", "HDR_model", "(", "image_stack", ",", "edge_stack", ",", "self", ".", "ref_ev", ",", "\n", "up_length", "=", "up_length", ",", "down_length", "=", "down_length", ")", "\n", "\n", "denorm_pred_stack", "=", "[", "inv_transform", "(", "pred_stack", "[", ":", ",", "i", ",", ":", "]", ".", "cpu", "(", ")", ")", "for", "i", "in", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "]", "\n", "denorm_image_stack", "=", "[", "inv_transform", "(", "image_stack", "[", ":", ",", "i", ",", ":", "]", ".", "cpu", "(", ")", ")", "for", "i", "in", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "]", "\n", "denorm_pred_edge", "=", "[", "inv_transform", "(", "(", "(", "pred_edge_stack", "[", ":", ",", "i", ",", ":", "]", "-", "0.5", ")", "*", "2", ")", ".", "cpu", "(", ")", ")", "for", "i", "in", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "]", "\n", "denorm_target_edge", "=", "[", "inv_transform", "(", "(", "(", "edge_stack", "[", ":", ",", "i", ",", ":", "]", "-", "0.5", ")", "*", "2", ")", ".", "cpu", "(", ")", ")", "for", "i", "in", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "]", "\n", "denorm_pred_int_stack", "=", "[", "inv_transform", "(", "pred_int_stack", "[", ":", ",", "i", ",", ":", "]", ".", "cpu", "(", ")", ")", "for", "i", "in", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "]", "\n", "\n", "\n", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "7", ")", ":", "\n", "                ", "pred_image", "=", "denorm_pred_stack", "[", "i", "]", "\n", "target_image", "=", "denorm_image_stack", "[", "i", "]", "\n", "\n", "pred_edge", "=", "denorm_pred_edge", "[", "i", "]", "\n", "target_edge", "=", "denorm_target_edge", "[", "i", "]", "\n", "\n", "pred_output_name", "=", "os", ".", "path", ".", "join", "(", "scene_path", ",", "\n", "str", "(", "index", "-", "self", ".", "ref_ev", ")", "+", "'EV_pred.jpg.png'", ")", "\n", "pred_edge_name", "=", "os", ".", "path", ".", "join", "(", "scene_path", ",", "\n", "str", "(", "index", "-", "self", ".", "ref_ev", ")", "+", "'EV_pred_edge.png'", ")", "\n", "\n", "pred_image", ".", "save", "(", "pred_output_name", ")", "\n", "pred_edge", ".", "save", "(", "pred_edge_name", ")", "\n", "\n", "index", "+=", "1", "\n", "\n", "", "gen_hdr_stack", ",", "gen_crf", "=", "self", ".", "hdrlayer", "(", "(", "(", "pred_stack", "+", "1", ")", "/", "2", ")", ",", "\n", "ev_stack", ")", "\n", "target_hdr", ",", "target_crf", "=", "self", ".", "hdrlayer", "(", "(", "(", "image_stack", "+", "1", ")", "/", "2", ")", ",", "\n", "ev_stack", ")", "\n", "\n", "gen_hdr_stack", "=", "gen_hdr_stack", ".", "detach", "(", ")", "\n", "target_hdr", "=", "target_hdr", ".", "detach", "(", ")", "\n", "denorm_gen_hdr", "=", "np", ".", "array", "(", "gen_hdr_stack", ".", "squeeze", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ")", "\n", "denorm_target_hdr", "=", "np", ".", "array", "(", "target_hdr", ".", "squeeze", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "denorm_gen_hdr", "=", "denorm_gen_hdr", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "denorm_target_hdr", "=", "denorm_target_hdr", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "gt_tone_map", "=", "tone_map", "(", "target_hdr", ".", "cpu", "(", ")", ")", "\n", "pred_tone_map", "=", "tone_map", "(", "gen_hdr_stack", ".", "cpu", "(", ")", ")", "\n", "\n", "gt_tone_map", "=", "cv2", ".", "cvtColor", "(", "gt_tone_map", ",", "\n", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "pred_tone_map", "=", "cv2", ".", "cvtColor", "(", "pred_tone_map", ",", "\n", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "gt_hdr_name", "=", "os", ".", "path", ".", "join", "(", "scene_path", ",", "\n", "'gt_hdr.hdr'", ")", "\n", "pred_hdr_name", "=", "os", ".", "path", ".", "join", "(", "scene_path", ",", "\n", "'pred_hdr.hdr'", ")", "\n", "gt_tone_map_name", "=", "os", ".", "path", ".", "join", "(", "scene_path", ",", "\n", "'gt_tone_map.png'", ")", "\n", "tone_map_name", "=", "os", ".", "path", ".", "join", "(", "scene_path", ",", "\n", "'pred_tone_map.png'", ")", "\n", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "scene_path", ",", "'pred_crf'", ")", ",", "gen_crf", "[", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "scene_path", ",", "'target_crf'", ")", ",", "target_crf", "[", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "pred_hdr_name", ",", "denorm_gen_hdr", ")", "\n", "cv2", ".", "imwrite", "(", "gt_hdr_name", ",", "denorm_target_hdr", ")", "\n", "cv2", ".", "imwrite", "(", "tone_map_name", ",", "pred_tone_map", ")", "\n", "cv2", ".", "imwrite", "(", "gt_tone_map_name", ",", "gt_tone_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.__init__": [[13, 41], ["int", "len", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.utils.io.read_stack", "torch.tensor", "os.listdir", "os.path.join", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "range"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.io.read_stack"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "img_size", "=", "256", ",", "\n", "min_ev", "=", "int", "(", "-", "3", ")", ",", "max_ev", "=", "3", ",", "\n", "fliplr", "=", "True", ",", "fliptb", "=", "True", ",", "rot", "=", "True", ",", "\n", "randcrop", "=", "True", ",", "transform", "=", "True", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "scene_num", "=", "len", "(", "os", ".", "listdir", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "mode", "+", "'_set'", ")", ")", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "fliplr", "=", "fliplr", "\n", "self", ".", "fliptb", "=", "fliptb", "\n", "self", ".", "rot", "=", "rot", "\n", "self", ".", "randcrop", "=", "randcrop", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "self", ".", "transform_gray", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "max_ev", "=", "max_ev", "\n", "self", ".", "min_ev", "=", "min_ev", "\n", "\n", "# Read images per scene with the type of list ", "\n", "# Ex. images[1] : images of scene 1", "\n", "\n", "self", ".", "images", ",", "self", ".", "hdrs", "=", "read_stack", "(", "data_dir", ",", "\n", "min_ev", ",", "max_ev", ",", "mode", ")", "\n", "self", ".", "evs", "=", "torch", ".", "tensor", "(", "[", "2", "**", "i", "for", "i", "in", "range", "(", "min_ev", ",", "max_ev", "+", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.__getitem__": [[42, 174], ["numpy.random.choice", "cv2.resize", "torch.stack", "torch.stack().squeeze", "torch.stack", "numpy.isnan", "rand_list.append", "rand_list.append", "rand_list.append", "cv2.resize", "cv2.resize.copy", "dataloader.ImageDataset.random_crop", "list", "list", "list", "range", "cv2.resize.copy", "dataloader.ImageDataset.hdr_transform", "torch.from_numpy", "list.append", "numpy.random.choice", "list", "list", "list", "range", "cv2.resize.copy", "dataloader.ImageDataset.img_rotate", "dataloader.ImageDataset.hdr_transform", "torch.from_numpy", "list.append", "list", "list", "list", "range", "cv2.resize.copy", "cv2.flip", "dataloader.ImageDataset.hdr_transform", "torch.from_numpy", "list.append", "list", "list", "list", "range", "cv2.resize.copy", "cv2.flip", "dataloader.ImageDataset.hdr_transform", "torch.from_numpy", "list.append", "numpy.array().any", "print", "dataloader.ImageDataset.copy", "len", "image_list[].copy", "dataloader.ImageDataset.cv2_transform", "dataloader.ImageDataset.edge_extract", "dataloader.ImageDataset.transform", "list.append", "dataloader.ImageDataset.transform_gray", "list.append", "len", "image_list[].copy", "dataloader.ImageDataset.img_rotate", "dataloader.ImageDataset.cv2_transform", "dataloader.ImageDataset.edge_extract", "dataloader.ImageDataset.transform", "list.append", "dataloader.ImageDataset.transform_gray", "list.append", "len", "image_list[].copy", "cv2.flip", "dataloader.ImageDataset.cv2_transform", "dataloader.ImageDataset.edge_extract", "dataloader.ImageDataset.transform", "list.append", "dataloader.ImageDataset.transform_gray", "list.append", "len", "image_list[].copy", "cv2.flip", "dataloader.ImageDataset.cv2_transform", "dataloader.ImageDataset.edge_extract", "dataloader.ImageDataset.transform", "list.append", "dataloader.ImageDataset.transform_gray", "list.append", "torch.stack", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.random_crop", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.hdr_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.img_rotate", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.hdr_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.hdr_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.hdr_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.cv2_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.edge_extract", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.img_rotate", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.cv2_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.edge_extract", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.cv2_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.edge_extract", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.cv2_transform", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.edge_extract"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image_list", ",", "hdr_list", "=", "self", ".", "images", "[", "idx", "]", ",", "self", ".", "hdrs", "[", "idx", "]", "\n", "#crf_list = self.crfs[idx]", "\n", "\n", "rand_list", "=", "[", "1", "]", "\n", "if", "self", ".", "rot", "==", "True", ":", "\n", "            ", "rand_list", ".", "append", "(", "2", ")", "\n", "", "if", "self", ".", "fliptb", "==", "True", ":", "\n", "            ", "rand_list", ".", "append", "(", "3", ")", "\n", "", "if", "self", ".", "fliplr", "==", "True", ":", "\n", "            ", "rand_list", ".", "append", "(", "4", ")", "\n", "\n", "", "aug_num", "=", "np", ".", "random", ".", "choice", "(", "rand_list", ")", "\n", "\n", "image_list", "=", "[", "cv2", ".", "resize", "(", "image", ".", "copy", "(", ")", ",", "\n", "(", "self", ".", "img_size", ",", "self", ".", "img_size", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "for", "image", "in", "image_list", "]", "\n", "hdr_list", "=", "cv2", ".", "resize", "(", "hdr_list", ".", "copy", "(", ")", ",", "\n", "(", "self", ".", "img_size", ",", "self", ".", "img_size", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "\n", "if", "self", ".", "randcrop", ":", "\n", "            ", "image_list", ",", "hdr_list", "=", "self", ".", "random_crop", "(", "image_list", ",", "\n", "hdr_list", ",", "\n", "self", ".", "img_size", ")", "\n", "\n", "", "if", "aug_num", "==", "1", ":", "\n", "\n", "            ", "transformed_images", "=", "list", "(", ")", "\n", "transformed_hdrs", "=", "list", "(", ")", "\n", "transformed_edges", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "image_list", ")", ")", ":", "\n", "                ", "image", "=", "image_list", "[", "i", "]", ".", "copy", "(", ")", "\n", "image", "=", "self", ".", "cv2_transform", "(", "image", ",", "self", ".", "img_size", ")", "\n", "edge", "=", "self", ".", "edge_extract", "(", "image", ")", "\n", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "transformed_images", ".", "append", "(", "image", ")", "\n", "edge", "=", "self", ".", "transform_gray", "(", "edge", ")", "\n", "transformed_edges", ".", "append", "(", "edge", ")", "\n", "\n", "", "hdr", "=", "hdr_list", ".", "copy", "(", ")", "\n", "hdr", "=", "self", ".", "hdr_transform", "(", "hdr", ",", "self", ".", "img_size", ")", "\n", "hdr", "=", "torch", ".", "from_numpy", "(", "hdr", ")", "\n", "transformed_hdrs", ".", "append", "(", "hdr", ")", "\n", "\n", "", "if", "(", "aug_num", "==", "2", ")", ":", "\n", "            ", "rot_angle", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "90", ",", "180", ",", "270", "]", ")", "\n", "\n", "transformed_images", "=", "list", "(", ")", "\n", "transformed_hdrs", "=", "list", "(", ")", "\n", "transformed_edges", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "image_list", ")", ")", ":", "\n", "                ", "image", "=", "image_list", "[", "i", "]", ".", "copy", "(", ")", "\n", "image", "=", "self", ".", "img_rotate", "(", "image", ",", "rot_angle", ")", "\n", "image", "=", "self", ".", "cv2_transform", "(", "image", ",", "self", ".", "img_size", ")", "\n", "\n", "edge", "=", "self", ".", "edge_extract", "(", "image", ")", "\n", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "transformed_images", ".", "append", "(", "image", ")", "\n", "\n", "edge", "=", "self", ".", "transform_gray", "(", "edge", ")", "\n", "transformed_edges", ".", "append", "(", "edge", ")", "\n", "\n", "", "hdr", "=", "hdr_list", ".", "copy", "(", ")", "\n", "hdr", "=", "self", ".", "img_rotate", "(", "hdr", ",", "rot_angle", ")", "\n", "hdr", "=", "self", ".", "hdr_transform", "(", "hdr", ",", "self", ".", "img_size", ")", "\n", "hdr", "=", "torch", ".", "from_numpy", "(", "hdr", ")", "\n", "transformed_hdrs", ".", "append", "(", "hdr", ")", "\n", "\n", "", "if", "aug_num", "==", "3", ":", "\n", "\n", "            ", "transformed_images", "=", "list", "(", ")", "\n", "transformed_hdrs", "=", "list", "(", ")", "\n", "transformed_edges", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "image_list", ")", ")", ":", "\n", "                ", "image", "=", "image_list", "[", "i", "]", ".", "copy", "(", ")", "\n", "image", "=", "cv2", ".", "flip", "(", "image", ",", "0", ")", "\n", "\n", "image", "=", "self", ".", "cv2_transform", "(", "image", ",", "self", ".", "img_size", ")", "\n", "edge", "=", "self", ".", "edge_extract", "(", "image", ")", "\n", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "transformed_images", ".", "append", "(", "image", ")", "\n", "\n", "edge", "=", "self", ".", "transform_gray", "(", "edge", ")", "\n", "transformed_edges", ".", "append", "(", "edge", ")", "\n", "\n", "", "hdr", "=", "hdr_list", ".", "copy", "(", ")", "\n", "hdr", "=", "cv2", ".", "flip", "(", "hdr", ",", "0", ")", "\n", "hdr", "=", "self", ".", "hdr_transform", "(", "hdr", ",", "self", ".", "img_size", ")", "\n", "hdr", "=", "torch", ".", "from_numpy", "(", "hdr", ")", "\n", "transformed_hdrs", ".", "append", "(", "hdr", ")", "\n", "\n", "", "if", "(", "aug_num", "==", "4", ")", ":", "\n", "\n", "            ", "transformed_images", "=", "list", "(", ")", "\n", "transformed_hdrs", "=", "list", "(", ")", "\n", "transformed_edges", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "image_list", ")", ")", ":", "\n", "                ", "image", "=", "image_list", "[", "i", "]", ".", "copy", "(", ")", "\n", "image", "=", "cv2", ".", "flip", "(", "image", ",", "1", ")", "\n", "\n", "image", "=", "self", ".", "cv2_transform", "(", "image", ",", "self", ".", "img_size", ")", "\n", "edge", "=", "self", ".", "edge_extract", "(", "image", ")", "\n", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "transformed_images", ".", "append", "(", "image", ")", "\n", "\n", "edge", "=", "self", ".", "transform_gray", "(", "edge", ")", "\n", "transformed_edges", ".", "append", "(", "edge", ")", "\n", "\n", "", "hdr", "=", "hdr_list", ".", "copy", "(", ")", "\n", "hdr", "=", "cv2", ".", "flip", "(", "hdr", ",", "1", ")", "\n", "hdr", "=", "self", ".", "hdr_transform", "(", "hdr", ",", "self", ".", "img_size", ")", "\n", "hdr", "=", "torch", ".", "from_numpy", "(", "hdr", ")", "\n", "transformed_hdrs", ".", "append", "(", "hdr", ")", "\n", "\n", "", "transformed_images", "=", "torch", ".", "stack", "(", "transformed_images", ",", "dim", "=", "0", ")", "\n", "transformed_hdrs", "=", "torch", ".", "stack", "(", "transformed_hdrs", ",", "dim", "=", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "transformed_edges", "=", "torch", ".", "stack", "(", "transformed_edges", ",", "dim", "=", "0", ")", "\n", "\n", "if", "np", ".", "isnan", "(", "np", ".", "array", "(", "transformed_hdrs", ")", ".", "any", "(", ")", ")", ":", "\n", "            ", "print", "(", "'Nan detected'", ")", "\n", "\n", "", "return", "transformed_images", ",", "transformed_hdrs", ",", "self", ".", "evs", ",", "transformed_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.__len__": [[175, 177], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "scene_num", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.cv2_transform": [[178, 182], ["numpy.array"], "methods", ["None"], ["", "def", "cv2_transform", "(", "self", ",", "image", ",", "img_size", ")", ":", "\n", "        ", "image", "=", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "image", "=", "image", "/", "255.0", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.hdr_transform": [[183, 187], ["numpy.clip", "hdr.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "hdr_transform", "(", "self", ",", "hdr", ",", "hdr_size", ")", ":", "\n", "        ", "hdr", "=", "np", ".", "clip", "(", "hdr", ",", "1e-6", ",", "None", ")", "\n", "hdr", "=", "hdr", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "hdr", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.img_rotate": [[188, 194], ["cv2.getRotationMatrix2D", "cv2.warpAffine"], "methods", ["None"], ["", "def", "img_rotate", "(", "self", ",", "image", ",", "rot_angle", ")", ":", "\n", "        ", "(", "h", ",", "w", ")", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "(", "cX", ",", "cY", ")", "=", "(", "w", "/", "2", ",", "h", "/", "2", ")", "\n", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "cX", ",", "cY", ")", ",", "rot_angle", ",", "1.0", ")", "\n", "rotated", "=", "cv2", ".", "warpAffine", "(", "image", ",", "M", ",", "(", "w", ",", "h", ")", ")", "\n", "return", "rotated", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.edge_extract": [[195, 199], ["cv2.cvtColor", "skimage.feature.canny().astype", "numpy.expand_dims", "skimage.feature.canny"], "methods", ["None"], ["", "def", "edge_extract", "(", "self", ",", "img", ")", ":", "\n", "        ", "gray_img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "edge", "=", "canny", "(", "gray_img", ",", "sigma", "=", "2", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "return", "np", ".", "expand_dims", "(", "edge", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.None.dataloader.ImageDataset.random_crop": [[200, 240], ["list", "round", "round", "numpy.random.randint", "numpy.random.randint", "cv2.resize", "numpy.clip", "numpy.random.random", "numpy.random.randint", "cv2.resize", "list.append", "round", "round", "numpy.random.random", "numpy.random.randint"], "methods", ["None"], ["", "def", "random_crop", "(", "self", ",", "image_list", ",", "hdr_list", ",", "crop_size", ")", ":", "\n", "\n", "        ", "image", "=", "image_list", "[", "0", "]", "\n", "img_height", "=", "image", ".", "shape", "[", "0", "]", "\n", "img_width", "=", "image", ".", "shape", "[", "1", "]", "\n", "\n", "r_size", "=", "np", ".", "random", ".", "random", "(", ")", "*", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "\n", "while", "(", "round", "(", "r_size", "*", "img_height", ")", "<=", "crop_size", ")", "or", "(", "\n", "round", "(", "r_size", "*", "img_width", ")", "<=", "crop_size", ")", "or", "(", "\n", "r_size", "<", "1", "and", "r_size", ">=", "2.05", ")", ":", "\n", "\n", "            ", "r_size", "=", "np", ".", "random", ".", "random", "(", ")", "*", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "\n", "", "cropped_list", "=", "list", "(", ")", "\n", "\n", "resized_height", "=", "round", "(", "img_height", "*", "r_size", ")", "\n", "resized_width", "=", "round", "(", "img_width", "*", "r_size", ")", "\n", "\n", "max_h", "=", "resized_height", "-", "crop_size", "\n", "max_w", "=", "resized_width", "-", "crop_size", "\n", "\n", "h", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "max_h", ")", "\n", "w", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "max_w", ")", "\n", "\n", "for", "image", "in", "image_list", ":", "\n", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "resized_width", ",", "resized_height", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "image", "=", "image", "[", "h", ":", "h", "+", "crop_size", ",", "w", ":", "w", "+", "crop_size", ",", ":", "]", "\n", "cropped_list", ".", "append", "(", "image", ")", "\n", "\n", "", "hdr_list", "=", "cv2", ".", "resize", "(", "hdr_list", ",", "(", "resized_width", ",", "resized_height", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "hdr_list", "=", "np", ".", "clip", "(", "hdr_list", ",", "1e-6", ",", "None", ")", "\n", "hdr_list", "=", "hdr_list", "[", "h", ":", "h", "+", "crop_size", ",", "w", ":", "w", "+", "crop_size", ",", ":", "]", "\n", "\n", "return", "cropped_list", ",", "hdr_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.tone_psnr": [[10, 13], ["numpy.mean", "math.log10"], "function", ["None"], ["def", "tone_psnr", "(", "target", ",", "pred", ",", "pixel_range", "=", "255", ")", ":", "\n", "    ", "mse", "=", "np", ".", "mean", "(", "(", "target", "-", "pred", ")", "**", "2", ")", "\n", "return", "10", "*", "math", ".", "log10", "(", "(", "pixel_range", "**", "2", ")", "/", "mse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.transform_image": [[14, 25], ["torchvision.transforms.Compose", "cv2.resize", "numpy.array", "transforms.Compose.", "image.unsqueeze.unsqueeze", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "transform_image", "(", "image", ",", "img_size", ")", ":", "\n", "    ", "totransform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "img_size", ",", "img_size", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "image", "=", "image", "/", "255.0", "\n", "image", "=", "totransform", "(", "image", ")", "\n", "image", "=", "image", ".", "unsqueeze", "(", "0", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.transform_edge": [[26, 36], ["torchvision.transforms.Compose", "cv2.resize", "numpy.array", "transforms.Compose.", "edge.unsqueeze.unsqueeze", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "transform_edge", "(", "edge", ",", "img_size", ")", ":", "\n", "    ", "totransform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", "]", ",", "std", "=", "[", "0.5", "]", ")", "]", ")", "\n", "\n", "edge", "=", "cv2", ".", "resize", "(", "edge", ",", "(", "img_size", ",", "img_size", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "edge", "=", "np", ".", "array", "(", "edge", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "edge", "=", "totransform", "(", "edge", ")", "\n", "edge", "=", "edge", ".", "unsqueeze", "(", "0", ")", "\n", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.compute_psnr": [[37, 42], ["torch.mean", "math.log10"], "function", ["None"], ["", "def", "compute_psnr", "(", "target_img", ",", "pred_img", ",", "pixel_range", "=", "1.0", ")", ":", "\n", "    ", "target_img", "=", "(", "(", "target_img", "+", "1", ")", "/", "2", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "pred_img", "=", "(", "(", "pred_img", "+", "1", ")", "/", "2", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "mse", "=", "torch", ".", "mean", "(", "(", "target_img", "-", "pred_img", ")", "**", "2", ")", "\n", "return", "10", "*", "math", ".", "log10", "(", "(", "pixel_range", "**", "2", ")", "/", "mse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.transform_hdr": [[43, 50], ["cv2.resize", "numpy.clip", "numpy.array().transpose", "numpy.expand_dims", "numpy.array"], "function", ["None"], ["", "def", "transform_hdr", "(", "hdr", ",", "img_size", ")", ":", "\n", "    ", "hdr", "=", "cv2", ".", "resize", "(", "hdr", ",", "(", "img_size", ",", "img_size", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "hdr", "=", "np", ".", "clip", "(", "hdr", ",", "0", ",", "None", ")", "\n", "hdr", "=", "np", ".", "array", "(", "hdr", ",", "dtype", "=", "np", ".", "float32", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "hdr", "=", "np", ".", "expand_dims", "(", "hdr", ",", "0", ")", "\n", "return", "hdr", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.inv_transform": [[51, 56], ["image.squeeze.squeeze", "out.clamp.clamp", "torchvision.transforms.ToPILImage"], "function", ["None"], ["", "def", "inv_transform", "(", "image", ")", ":", "\n", "    ", "image", "=", "image", ".", "squeeze", "(", "0", ")", "\n", "out", "=", "(", "image", "+", "1", ")", "/", "2", "\n", "out", "=", "out", ".", "clamp", "(", "0", ",", "1", ")", "\n", "return", "transforms", ".", "ToPILImage", "(", ")", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.matplotlib_imshow": [[57, 73], ["img.mean.detach().cpu", "img.mean.numpy", "matplotlib.figure", "plt.figure.show", "matplotlib.pause", "img.mean.mean", "matplotlib.imshow", "plt.figure.add_subplot", "fig.add_subplot.imshow", "plt.figure.add_subplot", "fig.add_subplot.imshow", "img.mean.detach", "numpy.transpose"], "function", ["None"], ["", "def", "matplotlib_imshow", "(", "img", ",", "img2", ",", "one_channel", "=", "False", ")", ":", "\n", "    ", "if", "one_channel", ":", "\n", "        ", "img", "=", "img", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "img", "=", "(", "img", "+", "1", ")", "/", "2", "\n", "img", "=", "img", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "if", "one_channel", ":", "\n", "        ", "plt", ".", "imshow", "(", "npimg", ",", "cmap", "=", "\"Greys\"", ")", "\n", "", "else", ":", "\n", "        ", "ax1", "=", "fig", ".", "add_subplot", "(", "2", ",", "1", ",", "1", ")", "\n", "ax1", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "2", ",", "1", ",", "2", ")", "\n", "ax2", ".", "imshow", "(", "img2", ")", "\n", "", "fig", ".", "show", "(", ")", "\n", "plt", ".", "pause", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.tone_map": [[74, 80], ["numpy.array().squeeze().transpose", "cv2.createTonemapReinhard", "cv2.createTonemapReinhard.process", "np.array().squeeze().transpose.copy", "numpy.array().squeeze", "numpy.array"], "function", ["None"], ["", "def", "tone_map", "(", "stack", ")", ":", "\n", "    ", "stack", "=", "np", ".", "array", "(", "stack", ")", ".", "squeeze", "(", "0", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "# Tonemap using Reinhard's method to obtain 24-bit color image", "\n", "tonemapReinhard", "=", "cv2", ".", "createTonemapReinhard", "(", "1.5", ",", "0", ",", "0", ",", "0", ")", "\n", "ldrReinhard", "=", "tonemapReinhard", ".", "process", "(", "stack", ".", "copy", "(", ")", ")", "\n", "return", "(", "ldrReinhard", "*", "255", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.mu_law": [[81, 86], ["torch.log", "torch.log", "torch.tensor"], "function", ["None"], ["", "def", "mu_law", "(", "stack", ",", "mu", "=", "5000.0", ")", ":", "\n", "    ", "numerate", "=", "torch", ".", "log", "(", "1.0", "+", "mu", "*", "stack", ")", "\n", "denominate", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "1.0", "+", "mu", ")", ")", "\n", "stack", "=", "numerate", "/", "denominate", "\n", "return", "stack", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.img_utils.extract_hist": [[87, 115], ["x.squeeze.get_device", "torch.arange.unsqueeze().unsqueeze", "torch.arange.repeat", "x.squeeze.view", "x.view.int().long", "torch.zeros.scatter_add", "len", "x.squeeze.squeeze", "torch.arange().cuda", "torch.zeros().cuda", "torch.zeros", "torch.arange", "torch.arange.unsqueeze", "x.view.int", "torch.arange.float", "torch.arange", "torch.zeros"], "function", ["None"], ["", "def", "extract_hist", "(", "x", ",", "min_value", "=", "0", ",", "max_value", "=", "256", ")", ":", "\n", "\n", "    ", "if", "len", "(", "x", ".", "shape", ")", ">", "4", ":", "\n", "        ", "x", "=", "x", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "x", "=", "(", "255.0", "*", "(", "x", "+", "1.0", ")", "/", "2", ")", ".", "clamp", "(", "0", ",", "255", ")", "\n", "\n", "batch_size", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "device", "=", "x", ".", "get_device", "(", ")", "\n", "\n", "if", "x", ".", "is_cuda", ":", "\n", "        ", "value", "=", "torch", ".", "arange", "(", "min_value", ",", "max_value", ")", ".", "cuda", "(", "device", ")", "\n", "value", "[", "0", "]", "=", "1", "\n", "histogram", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "c", ",", "max_value", "-", "min_value", ")", ")", ".", "cuda", "(", "device", ")", "\n", "", "else", ":", "\n", "\n", "        ", "histogram", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "c", ",", "max_value", "-", "min_value", ")", ")", "\n", "value", "=", "torch", ".", "arange", "(", "min_value", ",", "max_value", ")", "\n", "value", "[", "0", "]", "=", "1", "\n", "\n", "", "value", "=", "value", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "value", "=", "value", ".", "repeat", "(", "batch_size", ",", "c", ",", "1", ")", "\n", "\n", "updates", "=", "x", ".", "view", "(", "batch_size", ",", "c", ",", "-", "1", ")", "\n", "indices", "=", "updates", ".", "int", "(", ")", ".", "long", "(", ")", "\n", "histogram", "=", "histogram", ".", "scatter_add", "(", "-", "1", ",", "indices", ",", "updates", ")", "\n", "\n", "return", "(", "histogram", "/", "value", ".", "float", "(", ")", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.io.read_stack": [[10, 53], ["os.path.join", "os.path.join", "sorted", "sorted", "list", "numpy.array", "list.append", "os.path.join", "cv2.imread", "numpy.array", "os.path.join", "cv2.imread", "numpy.array", "cv2.cvtColor", "os.listdir", "os.path.isdir", "os.listdir", "os.path.isdir", "range", "cv2.cvtColor", "os.path.join", "os.path.join", "str"], "function", ["None"], ["def", "read_stack", "(", "path", ",", "min_ev", ",", "max_ev", ",", "mode", "=", "'train'", ")", ":", "\n", "# load image            ", "\n", "    ", "data_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "mode", "+", "'_set'", ")", "\n", "target_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "mode", "+", "'_hdr_set'", ")", "\n", "\n", "scene_path", "=", "sorted", "(", "[", "path", "for", "path", "in", "os", ".", "listdir", "(", "data_path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "path", ")", ")", "]", ")", "\n", "\n", "scene_target_path", "=", "sorted", "(", "[", "path", "for", "path", "in", "os", ".", "listdir", "(", "target_path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "path", ")", ")", "]", ")", "\n", "\n", "total_img_list", "=", "list", "(", ")", "\n", "\n", "for", "scene", "in", "scene_path", ":", "\n", "        ", "img_list", "=", "[", "os", ".", "path", ".", "join", "(", "data_path", ",", "\n", "scene", ",", "\n", "scene", "+", "'_'", "+", "str", "(", "i", ")", "+", "'EV_true.jpg.png'", ")", "\n", "for", "i", "in", "range", "(", "min_ev", ",", "max_ev", "+", "1", ")", "]", "\n", "\n", "img_list", "=", "[", "cv2", ".", "imread", "(", "img_path", ")", "\n", "for", "img_path", "in", "img_list", "]", "\n", "img_list", "=", "[", "np", ".", "array", "(", "\n", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "for", "img", "in", "img_list", "]", "\n", "\n", "img_list", "=", "np", ".", "array", "(", "img_list", ")", "#.transpose(0,3,1,2)", "\n", "\n", "total_img_list", ".", "append", "(", "img_list", ")", "\n", "\n", "", "hdr_list", "=", "[", "os", ".", "path", ".", "join", "(", "target_path", ",", "scene_t", ",", "'target_hdr.hdr'", ")", "\n", "for", "scene_t", "in", "scene_target_path", "]", "\n", "\n", "hdr_list", "=", "[", "cv2", ".", "imread", "(", "hdr_path", ",", "-", "1", ")", "\n", "for", "hdr_path", "in", "hdr_list", "]", "\n", "total_hdr_list", "=", "[", "np", ".", "array", "(", "\n", "cv2", ".", "cvtColor", "(", "hdr", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "for", "hdr", "in", "hdr_list", "]", "\n", "\n", "#crf_list = [os.path.join(target_path, scene_t, 'crf.npy')", "\n", "#            for scene_t in scene_target_path]", "\n", "#crf_list = [torch.from_numpy(np.load(crf)) for crf in crf_list]", "\n", "\n", "return", "total_img_list", ",", "total_hdr_list", "#,crf_list", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.io.convert_to_int": [[54, 64], ["array.astype", "type", "array.byte", "type"], "function", ["None"], ["", "def", "convert_to_int", "(", "array", ")", ":", "\n", "    ", "array", "*=", "255", "\n", "\n", "if", "type", "(", "array", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "return", "array", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "elif", "type", "(", "array", ")", ".", "__module__", "==", "'torch'", ":", "\n", "        ", "return", "array", ".", "byte", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.np_MitsunagaNayarCRF.MitsunagaNayarCRF": [[8, 69], ["numpy.log", "utils.hdr_toolbox.LDRStackSubSampling", "utils.hdr_toolbox.MitsunagaNayarCRFClassic", "range", "utils.hdr_toolbox.FindChromaticyScale", "numpy.zeros", "range", "isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.ones", "numpy.polyval", "range", "torch.tensor().float", "torch.tensor().float", "np.array.cpu().detach", "np.array.cpu().detach", "numpy.polyval", "torch.tensor", "torch.tensor", "np.array.cpu", "np.array.cpu", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.LDRStackSubSampling", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.MitsunagaNayarCRFClassic", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.FindChromaticyScale"], ["def", "MitsunagaNayarCRF", "(", "stack", ",", "\n", "stack_exposure", ",", "\n", "N", "=", "5", ",", "\n", "nSamples", "=", "256", ",", "\n", "sampling_strategy", "=", "'Grossberg'", ",", "\n", "bFull", "=", "1", ")", ":", "\n", "\n", "    ", "'''\n    This function computes camera response function using Debevec and\n    Malik method.\n\n    Input:\n        -stack: a stack of LDR images. If the stack is a single or\n         double values are assumed to be in [0,1].\n        -stack_exposure: an array containg the exposure time of each\n         image. Time is expressed in second (s)\n        -N : order of the polynomial\n        -nSamples: number of samples for computing the CRF\n        -sampling_strategy: how to select samples:\n          -'Grossberg': picking samples according to Grossberg and\n            Nayar algorithm (CDF based)\n          -'RandomSpatial': picking random samples in the image\n          -'RegularSpatial': picking regular samples in the image\n    Output:\n        -lin_fun: the inverse CRF\n        -pp : the coefficients for the polynomial function\n    '''", "\n", "# Convert to numpy array, gradient not required", "\n", "if", "not", "isinstance", "(", "stack", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "stack", "=", "np", ".", "array", "(", "stack", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", "", "if", "not", "isinstance", "(", "stack_exposure", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "stack_exposure", "=", "np", ".", "array", "(", "stack_exposure", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", "\n", "", "batch_size", ",", "num_images", ",", "channels", ",", "=", "stack", ".", "shape", "[", ":", "3", "]", "\n", "\n", "# Log of exposure values", "\n", "log_stack_exposure", "=", "np", ".", "log", "(", "stack_exposure", ")", "\n", "\n", "# Stack sub-sampling", "\n", "stack_samples", "=", "LDRStackSubSampling", "(", "stack", ",", "stack_exposure", ",", "\n", "nSamples", ",", "sampling_strategy", ",", "0.01", ")", "\n", "\n", "stack_samples", "=", "stack_samples", "/", "255.0", "\n", "\n", "pp", ",", "_", "=", "MitsunagaNayarCRFClassic", "(", "stack_samples", ",", "\n", "stack_exposure", ",", "N", ")", "\n", "mid_value", "=", "0.5", "*", "np", ".", "ones", "(", "(", "1", ",", "channels", ")", ")", "\n", "gray", "=", "mid_value", "\n", "\n", "for", "c", "in", "range", "(", "channels", ")", ":", "\n", "        ", "gray", "[", ":", ",", "c", "]", "=", "np", ".", "polyval", "(", "pp", "[", ":", ",", "c", "]", ",", "gray", "[", ":", ",", "c", "]", ")", "\n", "\n", "", "scale", "=", "FindChromaticyScale", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "gray", ")", "\n", "# batch_issue to be solved", "\n", "lin_fun", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "channels", ",", "nSamples", ")", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "channels", ")", ":", "\n", "            ", "lin_fun", "[", "i", ",", "c", ",", ":", "]", "=", "scale", "[", "i", ",", "c", "]", "*", "np", ".", "polyval", "(", "pp", "[", ":", ",", "c", "]", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "256", ")", ")", "\n", "\n", "", "", "return", "torch", ".", "tensor", "(", "lin_fun", ")", ".", "float", "(", ")", ",", "torch", ".", "tensor", "(", "pp", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.Adam_GCC.__init__": [[6, 19], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "Adam_GCC", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.Adam_GCC.__setstate__": [[20, 24], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "Adam_GCC", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.Adam_GCC.step": [[25, 90], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "grad.add_", "len", "grad.add_", "torch.max", "torch.zeros_like", "list", "exp_avg.mul_", "exp_avg_sq.mul_", "p.data.size", "grad.mean().mean().mean", "max_exp_avg_sq.sqrt", "math.sqrt", "exp_avg_sq.sqrt", "math.sqrt", "grad.mean().mean", "grad.mean"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", ".", "add_", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "#GC operation for Conv layers", "\n", "", "if", "len", "(", "list", "(", "p", ".", "data", ".", "size", "(", ")", ")", ")", "==", "4", ":", "\n", "                    ", "grad", ".", "add_", "(", "-", "grad", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "(", "max_exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "(", "exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.Adam_GC.__init__": [[116, 129], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "Adam_GC", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.Adam_GC.__setstate__": [[130, 134], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "Adam_GC", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.Adam_GC.step": [[135, 206], ["closure", "len", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "grad.add_", "list", "range", "grad.add_", "torch.max", "torch.zeros_like", "p.data.size", "m_grad.mean.mean.mean", "exp_avg.mul_", "exp_avg_sq.mul_", "max_exp_avg_sq.sqrt", "math.sqrt", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", ".", "add_", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "#GC operation for Conv layers and FC layers", "\n", "", "length", "=", "len", "(", "list", "(", "p", ".", "data", ".", "size", "(", ")", ")", ")", "\n", "if", "length", ">", "1", ":", "\n", "                    ", "m_grad", "=", "grad", "\n", "for", "i", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "                      ", "m_grad", "=", "m_grad", ".", "mean", "(", "i", "+", "1", ",", "keepdim", "=", "True", ")", "\n", "", "grad", ".", "add_", "(", "-", "m_grad", ")", "\n", "\n", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "(", "max_exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "(", "exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW.__init__": [[229, 242], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW.__setstate__": [[243, 247], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW.step": [[248, 309], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "torch.mul().addcdiv_", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt", "torch.mul"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# if group['weight_decay'] != 0:", "\n", "#     grad = grad.add(group['weight_decay'], p.data)", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "# p.data.addcdiv_(-step_size, exp_avg, denom)", "\n", "p", ".", "data", ".", "add_", "(", "-", "step_size", ",", "torch", ".", "mul", "(", "p", ".", "data", ",", "group", "[", "'weight_decay'", "]", ")", ".", "addcdiv_", "(", "1", ",", "exp_avg", ",", "denom", ")", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.__init__": [[332, 345], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "AdamW_GCC", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.__setstate__": [[346, 350], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW_GCC", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.Adam.AdamW_GCC.step": [[351, 415], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "len", "grad.add_", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "torch.mul().addcdiv_", "torch.zeros_like", "list", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "p.data.size", "grad.mean().mean().mean", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt", "torch.mul", "grad.mean().mean", "grad.mean"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "if", "len", "(", "list", "(", "p", ".", "data", ".", "size", "(", ")", ")", ")", "==", "4", ":", "\n", "                    ", "grad", ".", "add_", "(", "-", "grad", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# if group['weight_decay'] != 0:", "\n", "#     grad = grad.add(group['weight_decay'], p.data)", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "# p.data.addcdiv_(-step_size, exp_avg, denom)", "\n", "p", ".", "data", ".", "add_", "(", "-", "step_size", ",", "torch", ".", "mul", "(", "p", ".", "data", ",", "group", "[", "'weight_decay'", "]", ")", ".", "addcdiv_", "(", "1", ",", "exp_avg", ",", "denom", ")", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Identity.__init__": [[30, 32], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Identity.forward": [[32, 34], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Swish.__init__": [[36, 39], ["torch.Module.__init__", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Swish.forward": [[39, 41], ["block.Swish.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.PONO.__init__": [[43, 55], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", "=", "None", ",", "return_stats", "=", "False", ",", "affine", "=", "False", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "PONO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "return_stats", "=", "return_stats", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "affine", "=", "affine", "\n", "\n", "if", "affine", ":", "\n", "            ", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "*", "input_size", ")", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "1", ",", "*", "input_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "beta", ",", "self", ".", "gamma", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.PONO.forward": [[56, 63], ["x.mean", "x.var"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "(", "x", ".", "var", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "x", "=", "x", "*", "self", ".", "gamma", "+", "self", ".", "beta", "\n", "", "return", "x", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.MS.__init__": [[65, 68], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "None", ",", "gamma", "=", "None", ")", ":", "\n", "        ", "super", "(", "MS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", ",", "self", ".", "beta", "=", "gamma", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.MS.forward": [[69, 77], ["x.mul_", "x.add_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "beta", "=", "None", ",", "gamma", "=", "None", ")", ":", "\n", "        ", "beta", "=", "self", ".", "beta", "if", "beta", "is", "None", "else", "beta", "\n", "gamma", "=", "self", ".", "gamma", "if", "gamma", "is", "None", "else", "gamma", "\n", "if", "gamma", "is", "not", "None", ":", "\n", "            ", "x", ".", "mul_", "(", "gamma", ")", "\n", "", "if", "beta", "is", "not", "None", ":", "\n", "            ", "x", ".", "add_", "(", "beta", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.batch_InstanceNorm2d.__init__": [[79, 83], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "range"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "style_num", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "batch_InstanceNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inns", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "nn", ".", "InstanceNorm2d", "(", "in_channels", ",", "\n", "affine", "=", "True", ")", "for", "i", "in", "range", "(", "style_num", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.batch_InstanceNorm2d.forward": [[84, 87], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_x", ",", "style_id", ")", ":", "\n", "        ", "out", "=", "self", ".", "inns", "[", "style_id", "]", "(", "in_x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Preact_ConvBlock.__init__": [[92, 142], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "block.Identity", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "block.PONO", "block.Swish", "block.MS", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "block.Identity"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Preact_ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "\n", "output_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", "=", "padding", ")", "\n", "self", ".", "norm_name", "=", "norm", "\n", "self", ".", "act_name", "=", "activation", "\n", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "input_channels", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "input_channels", ")", "\n", "\n", "", "elif", "norm", "==", "'spec'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "utils", ".", "spectral_norm", "(", ")", "\n", "", "elif", "norm", "==", "'none'", ":", "\n", "            ", "self", ".", "norm", "=", "Identity", "(", ")", "\n", "", "elif", "norm", "==", "'pono'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "input_channels", ",", "\n", "affine", "=", "False", ",", "\n", "track_running_stats", "=", "False", ")", "\n", "self", ".", "norm2", "=", "PONO", "(", "affine", "=", "False", ")", "\n", "", "elif", "norm", "==", "'ms'", ":", "\n", "            ", "self", ".", "norm", "=", "MS", "(", ")", "\n", "", "elif", "norm", "==", "'group'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "GroupNorm", "(", "1", ",", "input_channels", ")", "\n", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'leaky'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", "0.01", ",", "True", ")", "\n", "", "elif", "activation", "==", "'swish'", ":", "\n", "            ", "self", ".", "act", "=", "Swish", "(", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "act", "=", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Preact_ConvBlock.forward": [[143, 157], ["block.Preact_ConvBlock.act", "block.Preact_ConvBlock.conv", "block.Preact_ConvBlock.norm", "block.Preact_ConvBlock.norm", "block.Preact_ConvBlock.norm2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "beta", "=", "None", ",", "gamma", "=", "None", ")", ":", "\n", "        ", "mean", ",", "std", "=", "None", ",", "None", "\n", "if", "self", ".", "norm_name", "==", "'ms'", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ",", "beta", ",", "gamma", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "norm_name", "==", "'pono'", ":", "\n", "            ", "x", ",", "mean", ",", "std", "=", "self", ".", "norm2", "(", "x", ")", "\n", "", "if", "mean", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.ConvBlock.__init__": [[159, 208], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "block.Identity", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "block.PONO", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "block.MS", "block.Swish", "block.batch_InstanceNorm2d", "block.Identity"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ",", "style_num", "=", "0", ")", ":", "\n", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "padding", ")", "\n", "self", ".", "norm_name", "=", "norm", "\n", "self", ".", "act_name", "=", "activation", "\n", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "output_channels", ",", "\n", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "False", ")", "\n", "", "elif", "norm", "==", "'spec'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "utils", ".", "spectral_norm", "(", ")", "\n", "", "elif", "norm", "==", "'none'", ":", "\n", "            ", "self", ".", "norm", "=", "Identity", "(", ")", "\n", "\n", "", "elif", "norm", "==", "'pono'", ":", "\n", "            ", "self", ".", "norm", "=", "PONO", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", "\n", "", "elif", "norm", "==", "'ms'", ":", "\n", "            ", "self", ".", "norm", "=", "MS", "(", ")", "\n", "", "elif", "norm", "==", "'cin'", ":", "\n", "            ", "self", ".", "norm", "=", "batch_InstanceNorm2d", "(", "style_num", ",", "output_channels", ")", "\n", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'leaky'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", "0.01", ",", "True", ")", "\n", "", "elif", "activation", "==", "'swish'", ":", "\n", "            ", "self", ".", "act", "=", "Swish", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "act", "=", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.ConvBlock.forward": [[209, 231], ["block.ConvBlock.conv", "block.ConvBlock.act", "block.ConvBlock.norm", "block.ConvBlock.norm2", "block.ConvBlock.norm", "block.ConvBlock.norm", "block.ConvBlock.norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "style_id", "=", "0", ",", "beta", "=", "None", ",", "gamma", "=", "None", ")", ":", "\n", "        ", "mean", ",", "std", "=", "None", ",", "None", "\n", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "norm_name", "==", "'pono'", ":", "\n", "            ", "x", ",", "mean", ",", "std", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "\n", "", "elif", "self", ".", "norm_name", "==", "'ms'", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ",", "beta", ",", "gamma", ")", "\n", "", "elif", "self", ".", "norm_name", "==", "'cin'", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ",", "style_id", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "\n", "if", "mean", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.ConvGRUCell.__init__": [[237, 251], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "kernel_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "reset_gate", "=", "nn", ".", "Conv2d", "(", "input_size", "+", "hidden_size", ",", "\n", "hidden_size", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "update_gate", "=", "nn", ".", "Conv2d", "(", "input_size", "+", "hidden_size", ",", "\n", "hidden_size", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "out_gate", "=", "nn", ".", "Conv2d", "(", "input_size", "+", "hidden_size", ",", "\n", "hidden_size", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "\n", "self", ".", "out_act", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.ConvGRUCell.forward": [[252, 280], ["input_.get_device", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block.ConvGRUCell.sigmoid", "block.ConvGRUCell.sigmoid", "block.ConvGRUCell.out_act", "input_.data.size", "input_.data.size", "block.ConvGRUCell.update_gate", "block.ConvGRUCell.reset_gate", "block.ConvGRUCell.out_gate", "list", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ",", "prev_state", "=", "None", ")", ":", "\n", "\n", "# get batch and spatial sizes", "\n", "        ", "batch_size", "=", "input_", ".", "data", ".", "size", "(", ")", "[", "0", "]", "\n", "spatial_size", "=", "input_", ".", "data", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "device", "=", "input_", ".", "get_device", "(", ")", "\n", "# generate empty prev_state, if None is provided", "\n", "if", "prev_state", "is", "None", ":", "\n", "            ", "state_size", "=", "[", "batch_size", ",", "self", ".", "hidden_size", "]", "+", "list", "(", "spatial_size", ")", "\n", "if", "input_", ".", "is_cuda", ":", "\n", "                ", "prev_state", "=", "torch", ".", "zeros", "(", "state_size", ")", ".", "cuda", "(", "device", ")", "\n", "", "else", ":", "\n", "                ", "prev_state", "=", "torch", ".", "zeros", "(", "state_size", ")", "\n", "\n", "# data size is [batch, channel, height, width]", "\n", "", "", "stacked_inputs", "=", "torch", ".", "cat", "(", "[", "input_", ",", "prev_state", "]", ",", "dim", "=", "1", ")", "\n", "update", "=", "self", ".", "sigmoid", "(", "self", ".", "update_gate", "(", "stacked_inputs", ")", ")", "\n", "reset", "=", "self", ".", "sigmoid", "(", "self", ".", "reset_gate", "(", "stacked_inputs", ")", ")", "\n", "out_inputs", "=", "self", ".", "out_act", "(", "self", ".", "out_gate", "(", "torch", ".", "cat", "(", "[", "input_", ",", "prev_state", "*", "reset", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# out_inputs = self.out_act(self.out_gate(torch.cat([input_,", "\n", "#prev_state], dim=1))) ", "\n", "#                                  prev_state * reset], dim=1)))", "\n", "\n", "new_state", "=", "prev_state", "*", "(", "1", "-", "update", ")", "+", "out_inputs", "*", "update", "\n", "\n", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.FC.__init__": [[282, 311], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "gain", "=", "2", "**", "(", "0.5", ")", ",", "\n", "use_wscale", "=", "False", ",", "\n", "lrmul", "=", "1.0", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n            The complete conversion of Dense/FC/Linear Layer of original\n            Tensorflow version.\n        \"\"\"", "\n", "\n", "super", "(", "FC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "he_std", "=", "gain", "*", "in_channels", "**", "(", "-", "0.5", ")", "# He init", "\n", "\n", "if", "use_wscale", ":", "\n", "            ", "init_std", "=", "1.0", "/", "lrmul", "\n", "self", ".", "w_lrmul", "=", "he_std", "*", "lrmul", "\n", "", "else", ":", "\n", "            ", "init_std", "=", "he_std", "/", "lrmul", "\n", "self", ".", "w_lrmul", "=", "lrmul", "\n", "\n", "", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "out_channels", ",", "in_channels", ")", "*", "init_std", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "self", ".", "b_lrmul", "=", "lrmul", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.FC.forward": [[312, 322], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "x", ",", "\n", "self", ".", "weight", "*", "self", ".", "w_lrmul", ",", "\n", "self", ".", "bias", "*", "self", ".", "b_lrmul", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "w_lrmul", ")", "\n", "\n", "", "out", "=", "F", ".", "leaky_relu", "(", "out", ",", "0.2", ",", "inplace", "=", "True", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Flatten.__init__": [[325, 327], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Flatten.forward": [[328, 330], ["x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Concatenate.__init__": [[332, 335], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "Concatenate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Concatenate.forward": [[336, 338], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "x", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.init_block.__init__": [[343, 354], ["torch.Module.__init__", "ConstantInput", "equal_lr", "AdaptiveINstanceNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NoiseInjection"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "style_dim", "=", "512", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chan", "=", "in_channel", "\n", "self", ".", "out_chan", "=", "out_channel", "\n", "self", ".", "style_dim", "=", "style_dim", "\n", "\n", "self", ".", "init_const", "=", "ConstantInput", "(", "in_channel", ")", "\n", "self", ".", "init_noise", "=", "equal_lr", "(", "NoiseInjection", "(", "out_channel", ")", ")", "\n", "self", ".", "adain", "=", "AdaptiveINstanceNorm", "(", "out_channel", ",", "style_dim", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.init_block.forward": [[355, 363], ["block.init_block.init_const", "block.init_block.init_noise", "block.init_block.adain", "block.init_block.lrelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "style", ",", "noise", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "init_const", "(", "x", ")", "\n", "output", "=", "self", ".", "init_noise", "(", "output", ",", "noise", ")", "\n", "output", "=", "self", ".", "adain", "(", "output", ",", "style", ")", "\n", "output", "=", "self", ".", "lrelu", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.ResBlock.__init__": [[368, 383], ["torch.Module.__init__", "block.ConvBlock", "block.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "enc_num", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "ConvBlock", "(", "enc_num", ",", "enc_num", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "self", ".", "conv2", "=", "ConvBlock", "(", "enc_num", ",", "enc_num", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.ResBlock.forward": [[384, 389], ["block.ResBlock.conv1", "block.ResBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "out", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Preact_ResBlock.__init__": [[391, 406], ["torch.Module.__init__", "block.Preact_ConvBlock", "block.Preact_ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "enc_num", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Preact_ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "Preact_ConvBlock", "(", "enc_num", ",", "enc_num", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "self", ".", "conv2", "=", "Preact_ConvBlock", "(", "enc_num", ",", "enc_num", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Preact_ResBlock.forward": [[407, 412], ["block.Preact_ResBlock.conv1", "block.Preact_ResBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "out", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Preact_ResBlock_avg_pool.__init__": [[414, 438], ["torch.Module.__init__", "block.PONO", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "block.Preact_ConvBlock", "block.Preact_ConvBlock", "block.Preact_ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "\n", "        ", "super", "(", "Preact_ResBlock_avg_pool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pono", "=", "PONO", "(", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "self", ".", "conv1", "=", "Preact_ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "self", ".", "conv2", "=", "Preact_ConvBlock", "(", "output_chan", ",", "output_chan", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "\n", "self", ".", "residual", "=", "Preact_ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'none'", ")", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Preact_ResBlock_avg_pool.forward": [[439, 457], ["block.Preact_ResBlock_avg_pool.pono", "block.Preact_ResBlock_avg_pool.residual", "block.Preact_ResBlock_avg_pool.conv1", "block.Preact_ResBlock_avg_pool.conv2", "block.Preact_ResBlock_avg_pool.avgpool", "block.Preact_ResBlock_avg_pool.avgpool", "block.Preact_ResBlock_avg_pool.avgpool", "block.Preact_ResBlock_avg_pool.residual", "block.Preact_ResBlock_avg_pool.conv1", "block.Preact_ResBlock_avg_pool.conv2", "block.Preact_ResBlock_avg_pool.avgpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm", "==", "'pono'", ":", "\n", "            ", "out", ",", "mean", ",", "std", "=", "self", ".", "pono", "(", "x", ")", "\n", "residual", "=", "self", ".", "residual", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", "+", "residual", ")", "\n", "mean", "=", "self", ".", "avgpool", "(", "mean", ")", "\n", "std", "=", "self", ".", "avgpool", "(", "std", ")", "\n", "return", "out", ",", "mean", ",", "std", "\n", "\n", "", "else", ":", "\n", "            ", "residual", "=", "self", ".", "residual", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "x", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", "+", "residual", ")", "\n", "return", "x", "+", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Preact_ResBlock_upsample.__init__": [[460, 482], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "block.Preact_ConvBlock", "block.Preact_ConvBlock", "block.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Preact_ResBlock_upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "conv1", "=", "Preact_ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "self", ".", "conv2", "=", "Preact_ConvBlock", "(", "output_chan", ",", "output_chan", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "\n", "self", ".", "residual", "=", "ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Preact_ResBlock_upsample.forward": [[483, 489], ["block.Preact_ResBlock_upsample.up", "block.Preact_ResBlock_upsample.residual", "block.Preact_ResBlock_upsample.conv1", "block.Preact_ResBlock_upsample.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "residual", "=", "self", ".", "residual", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "out", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Preact_DoubleBlock.__init__": [[491, 506], ["torch.Module.__init__", "block.Preact_ConvBlock", "block.Preact_ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Preact_DoubleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "Preact_ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "self", ".", "conv2", "=", "Preact_ConvBlock", "(", "output_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Preact_DoubleBlock.forward": [[507, 511], ["block.Preact_DoubleBlock.conv1", "block.Preact_DoubleBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.DoubleBlock.__init__": [[513, 537], ["torch.Module.__init__", "block.ConvBlock", "block.ConvBlock", "block.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "style_num", "=", "3", ",", "\n", "first_norm", "=", "'spec'", ",", "second_norm", "=", "'in'", ",", "\n", "first_act", "=", "'relu'", ",", "second_act", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "DoubleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "first_kernel", "==", "3", ":", "\n", "            ", "self", ".", "conv1", "=", "ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "norm", "=", "first_norm", ",", "activation", "=", "first_act", ",", "style_num", "=", "style_num", ")", "\n", "", "elif", "first_kernel", "==", "1", ":", "\n", "            ", "self", ".", "conv1", "=", "ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "norm", "=", "first_norm", ",", "activation", "=", "first_act", ",", "style_num", "=", "style_num", ")", "\n", "\n", "", "self", ".", "conv2", "=", "ConvBlock", "(", "output_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "second_kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "second_norm", ",", "activation", "=", "second_act", ",", "style_num", "=", "style_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.DoubleBlock.forward": [[538, 542], ["block.DoubleBlock.conv1", "block.DoubleBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "style_id", "=", "0", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ",", "style_id", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "style_id", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Double_GRU.__init__": [[544, 559], ["torch.Module.__init__", "block.ConvGRUCell", "block.ConvGRUCell"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "\n", "first_act", "=", "'relu'", ",", "second_act", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Double_GRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_gru", "=", "ConvGRUCell", "(", "input_chan", "=", "input_chan", ",", "\n", "hidden_chan", "=", "output_chan", ",", "\n", "kernel_size", "=", "first_kernel", ")", "\n", "\n", "self", ".", "conv_gru2", "=", "ConvGRUCell", "(", "input_chan", "=", "input_chan", ",", "\n", "hidden_chan", "=", "output_chan", ",", "\n", "kernel_size", "=", "second_kernel", ")", "\n", "\n", "self", ".", "hidden_1", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Double_GRU.forward": [[560, 567], ["block.Double_GRU.conv_gru", "block.Double_GRU.conv_gru2", "block.Double_GRU.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv_gru", "(", "x", ",", "self", ".", "hidden_1", ")", "\n", "x", "=", "self", ".", "conv_gru2", "(", "x", ",", "self", ".", "hidden_1", ")", "\n", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Recurrent_unit.__init__": [[569, 581], ["torch.Module.__init__", "block.ConvGRUCell", "block.DoubleBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "\n", "norm", "=", "'in'", ",", "act", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Recurrent_unit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gru_block", "=", "ConvGRUCell", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ")", "\n", "\n", "self", ".", "conv_block", "=", "DoubleBlock", "(", "output_chan", ",", "output_chan", ",", "\n", "first_kernel", "=", "kernel_size", ",", "second_kernel", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "first_norm", "=", "norm", ",", "second_norm", "=", "norm", ",", "\n", "first_act", "=", "act", ",", "second_act", "=", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.Recurrent_unit.forward": [[583, 588], ["block.Recurrent_unit.gru_block", "block.Recurrent_unit.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_x", ",", "hidden", "=", "None", ")", ":", "\n", "        ", "hidden", "=", "self", ".", "gru_block", "(", "in_x", ",", "hidden", ")", "\n", "x", "=", "self", ".", "conv_block", "(", "hidden", ")", "\n", "\n", "return", "x", ",", "hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.init_linear": [[19, 22], ["torch.nn.init.xavier_normal", "linear.bias.data.zero_"], "function", ["None"], ["def", "init_linear", "(", "linear", ")", ":", "\n", "    ", "init", ".", "xavier_normal", "(", "linear", ".", "weight", ")", "\n", "linear", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.block.init_conv": [[24, 28], ["torch.nn.init.kaiming_normal", "conv.bias.data.zero_"], "function", ["None"], ["", "def", "init_conv", "(", "conv", ",", "glu", "=", "True", ")", ":", "\n", "    ", "init", ".", "kaiming_normal", "(", "conv", ".", "weight", ")", "\n", "if", "conv", ".", "bias", "is", "not", "None", ":", "\n", "        ", "conv", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.RemoveCRF.RemoveCRF": [[3, 36], ["hdr_toolbox.tabledFunction"], "function", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.tabledFunction"], ["def", "RemoveCRF", "(", "img", ",", "lin_type", "=", "'gamma'", ",", "\n", "lin_fun", "=", "2.2", ")", ":", "\n", "    ", "'''\n    This function builds an HDR image from a stack of LDR images.\n    Input:\n        -img: an image with values in [0,1]\n        -lin_type: the linearization function:\n           - 'linear': images are already linear\n           - 'gamma2.2': gamma function 2.2 is used for linearization\n           - 'sRGB': images are encoded using sRGB\n           - 'LUT': the lineraziation function is a look-up\n                    table defined stored as an array in the \n                    lin_fun \n        -lin_fun: it is the camera response function of the camera that\n           took the pictures in the stack. If it is empty, [], and \n           type is 'LUT' it will be estimated using Debevec and Malik's\n           method.\n    Output:\n        -imgOut: a linearized (CRF is removed) image.\n    '''", "\n", "\n", "# linearization of the image", "\n", "if", "lin_type", "==", "'gamma'", ":", "\n", "        ", "img_out", "=", "img", "**", "lin_fun", "\n", "", "elif", "lin_type", "==", "'sRGB'", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "#imgOut = ConvertRGBtosRGB(img, 1);", "\n", "", "elif", "lin_type", "==", "'LUT'", ":", "\n", "        ", "img_out", "=", "tabledFunction", "(", "img", ",", "lin_fun", ")", "\n", "", "else", ":", "\n", "        ", "img_out", "=", "img", "\n", "\n", "", "return", "img_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Piecewise_Linear.forward": [[399, 419], ["torch.round", "torch.round", "torch.round", "torch.round", "x.type.type.type", "x.type.type.flatten().long", "slope[].reshape", "ctx.save_for_backward", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "w.float().cuda", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "w.float", "x.type.type.flatten", "x.type.type.long", "zip", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "w.float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "x.type.flatten().long.long", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "w", ",", "device", ")", ":", "\n", "        ", "x", "=", "torch", ".", "round", "(", "x", "*", "255", ")", "\n", "x", "=", "x", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "index_x", "=", "x", ".", "flatten", "(", ")", ".", "long", "(", ")", "\n", "slope", "=", "[", "index_x", "[", "0", "]", "]", "+", "[", "i", "-", "j", "for", "i", ",", "j", "in", "zip", "(", "w", "[", "1", ":", "]", ",", "w", ")", "]", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "slope", "=", "torch", ".", "tensor", "(", "slope", ")", ".", "float", "(", ")", ".", "cuda", "(", "device", "=", "device", ")", "\n", "piecewise", "=", "w", ".", "float", "(", ")", ".", "cuda", "(", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "slope", "=", "torch", ".", "tensor", "(", "slope", ")", ".", "float", "(", ")", "\n", "piecewise", "=", "w", ".", "float", "(", ")", "\n", "\n", "", "slope_x", "=", "slope", "[", "index_x", ".", "long", "(", ")", "]", ".", "reshape", "(", "x", ".", "shape", ")", "\n", "\n", "result", "=", "piecewise", "[", "x", ".", "long", "(", ")", "]", "\n", "ctx", ".", "save_for_backward", "(", "slope_x", ")", "\n", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Piecewise_Linear.backward": [[420, 425], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "\n", "        ", "result", ",", "=", "ctx", ".", "saved_tensors", "\n", "return", "grad_output", "*", "result", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.forward": [[427, 446], ["torch.round", "torch.round", "torch.round", "torch.round", "x.type.type.type", "x.type.type.flatten().long", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "slope[].reshape", "ctx.save_for_backward", "numpy.polyval", "slope.float.float.float().cuda", "w.float().cuda", "slope.float.float.float", "w.float", "x.type.type.flatten", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "x.type.type.long", "range", "slope.float.float.float", "w.float", "x.type.flatten().long.long"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "w", ",", "pp", ",", "device", ")", ":", "\n", "        ", "x", "=", "torch", ".", "round", "(", "x", "*", "255", ")", "\n", "x", "=", "x", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "index_x", "=", "x", ".", "flatten", "(", ")", ".", "long", "(", ")", "\n", "der_poly", "=", "torch", ".", "tensor", "(", "[", "pp", "[", "i", "]", "*", "i", "for", "i", "in", "range", "(", "pp", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "slope", "=", "torch", ".", "tensor", "(", "np", ".", "polyval", "(", "der_poly", ",", "torch", ".", "linspace", "(", "0", ",", "1", ",", "256", ")", ")", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "slope", "=", "slope", ".", "float", "(", ")", ".", "cuda", "(", "device", "=", "device", ")", "\n", "poly", "=", "w", ".", "float", "(", ")", ".", "cuda", "(", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "slope", "=", "slope", ".", "float", "(", ")", "\n", "poly", "=", "w", ".", "float", "(", ")", "\n", "\n", "", "slope_x", "=", "slope", "[", "index_x", ".", "long", "(", ")", "]", ".", "reshape", "(", "x", ".", "shape", ")", "\n", "\n", "result", "=", "poly", "[", "x", ".", "long", "(", ")", "]", "\n", "ctx", ".", "save_for_backward", "(", "slope_x", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.Polynomial.backward": [[447, 452], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "\n", "        ", "result", ",", "=", "ctx", ".", "saved_tensors", "\n", "return", "grad_output", "*", "result", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.WeightFunction": [[11, 81], ["torch.is_tensor", "torch.is_tensor", "img.cpu().data.numpy.cpu().data.numpy", "isinstance", "len", "numpy.ones_like", "torch.tensor().float", "torch.tensor().float", "Exception", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze.repeat", "numpy.ones_like", "numpy.where", "torch.tensor", "torch.tensor", "img.cpu().data.numpy.cpu", "torch.mean", "torch.mean", "numpy.zeros_like", "numpy.where", "numpy.where", "numpy.clip", "len", "numpy.exp", "numpy.exp"], "function", ["None"], ["def", "WeightFunction", "(", "img", ",", "\n", "weight_type", "=", "'Deb97'", ",", "\n", "bounds", "=", "[", "0", ",", "1", "]", ",", "bMeanWeight", "=", "0", ")", ":", "\n", "    ", "'''\n    Input:\n        -img: input LDR image in [0,1], 3channel\n        -weight_type:\n            - 'all': weight is set to 1\n            - 'hat': hat function 1-(2x-1)^12\n            - 'box': weight is set to 1 in [bounds(1), bounds(2)]\n            - 'Deb97': Debevec and Malik 97 weight function\n        -bMeanWeight:\n        -bounds: range of valid values for Deb97 and box\n        -pp:\n    Output:\n        -weight: the output weight function for a given LDR image\n    '''", "\n", "if", "torch", ".", "is_tensor", "(", "img", ")", ":", "\n", "        ", "dtype", "=", "'tensor'", "\n", "img", "=", "img", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "dtype", "=", "'numpy'", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\n", "'Data type should be numpy.array or torch.tensor'", "\n", ")", "\n", "", "if", "(", "len", "(", "img", ".", "shape", ")", ">", "2", ")", ":", "\n", "       ", "if", "(", "img", ".", "shape", "[", "2", "]", ">", "1", "and", "bMeanWeight", ")", ":", "\n", "           ", "L", "=", "torch", ".", "mean", "(", "img", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "img", "[", ":", ",", ":", ",", ":", "]", "=", "L", ".", "repeat", "(", "[", "3", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "", "if", "weight_type", "==", "'all'", ":", "\n", "        ", "weight", "=", "np", ".", "ones_like", "(", "img", ")", "\n", "", "elif", "weight_type", "==", "'box'", ":", "\n", "        ", "weight", "=", "np", ".", "ones_like", "(", "img", ")", "\n", "index", "=", "np", ".", "where", "(", "(", "img", "<", "bound", "[", "0", "]", ")", "&", "(", "img", ">", "bound", "[", "1", "]", ")", ")", "\n", "img", "[", "index", "]", "=", "0.0", "\n", "", "elif", "weight_type", "==", "'hat'", ":", "\n", "        ", "weight", "=", "1", "-", "(", "2", "*", "img", "-", "1", ")", "**", "12", ";", "\n", "", "elif", "weight_type", "==", "'Deb97'", ":", "\n", "\n", "        ", "Zmin", ",", "Zmax", "=", "bounds", "\n", "tr", "=", "(", "Zmin", "+", "Zmax", ")", "/", "2", ";", "\n", "\n", "weight", "=", "np", ".", "zeros_like", "(", "img", ")", "\n", "\n", "index", "=", "np", ".", "where", "(", "img", "<=", "tr", ")", "\n", "weight", "[", "index", "]", "=", "img", "[", "index", "]", "-", "Zmin", "\n", "\n", "index", "=", "np", ".", "where", "(", "img", ">", "tr", ")", "\n", "weight", "[", "index", "]", "=", "Zmax", "-", "img", "[", "index", "]", ";", "\n", "\n", "delta", "=", "(", "Zmax", "-", "Zmin", ")", "/", "len", "(", "weight", ")", "\n", "\n", "if", "delta", ">", "0.0", ":", "\n", "            ", "weight", "=", "weight", "/", "tr", ";", "\n", "", "weight", "=", "np", ".", "clip", "(", "weight", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "elif", "weight_type", "==", "'Robinson'", ":", "\n", "        ", "shift", "=", "np", ".", "exp", "(", "-", "4", ")", ";", "\n", "scaleDiv", "=", "(", "1.0", "-", "shift", ")", ";", "\n", "t", "=", "img", "-", "0.5", "\n", "weight", "=", "(", "np", ".", "exp", "(", "-", "16.0", "*", "(", "t", "*", "t", ")", ")", "-", "shift", ")", "/", "scaleDiv", ";", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "dtype", "==", "'tensor'", ":", "\n", "       ", "weight", "=", "torch", ".", "tensor", "(", "weight", ")", ".", "float", "(", ")", "\n", "\n", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.LDRStackSubSampling": [[82, 136], ["sampling.ComputeLDRStackHistogram", "sampling.GrossbergSampling", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.sampling.ComputeLDRStackHistogram", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.sampling.GrossbergSampling"], ["", "def", "LDRStackSubSampling", "(", "stack", ",", "\n", "stack_exposure", ",", "\n", "nSamples", "=", "256", ",", "\n", "sampling_strategy", "=", "'Grossberg'", ",", "\n", "outliers_percentage", "=", "0", ")", ":", "\n", "\n", "    ", "'''\n    This function subsamples a stack\n    Input:\n        -stack: a stack of LDR images. If the stack is a single or\n                double values are assumed to be in [0,1]\n        -nSamples: number of samples for computing the CRF\n        -sampling_strategy: how to select samples:\n            -'Grossberg'\n            -'RandomSpatial'\n            -'RegularSpatial'\n        -outliers_percentage\n\n    Output:\n        -stack_samples: sub-sampled stack\n    '''", "\n", "\n", "#RandomSpatial & RegularSpatial", "\n", "#sort_index = np.argsort(stack_exposure)", "\n", "\n", "# stack sub-sampling", "\n", "if", "sampling_strategy", "==", "'Grossberg'", ":", "\n", "        ", "stack_hist", "=", "ComputeLDRStackHistogram", "(", "stack", ")", ";", "\n", "stack_samples", "=", "GrossbergSampling", "(", "stack_hist", ",", "nSamples", ")", ";", "\n", "\n", "", "elif", "sampling_strategy", "==", "'RandomSpatial'", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "#stack_samples = RandomSpatialSampling(stack, ", "\n", "#     sort_index, nSamples);", "\n", "#stack_samples = torch.round(stack_samples * 255);", "\n", "\n", "", "elif", "sampling_strategy", "==", "'RegularSpatial'", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "#stack_samples = RegularSpatialSampling(stack, ", "\n", "#    sort_index, nSamples);", "\n", "#stack_samples = torch.round(stack_samples * 255);", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "(", "outliers_percentage", ">", "0.0", ")", ":", "\n", "        ", "t_min", "=", "outliers_percentage", ";", "\n", "t_max", "=", "1.0", "-", "t_min", ";", "\n", "\n", "index", "=", "np", ".", "where", "(", "stack_samples", "<", "(", "t_min", "*", "255.0", ")", ")", "\n", "stack_samples", "[", "index", "]", "=", "-", "1.0", "\n", "index", "=", "np", ".", "where", "(", "stack_samples", ">", "(", "t_max", "*", "255.0", ")", ")", "\n", "stack_samples", "[", "index", "]", "=", "-", "1.0", "\n", "\n", "", "return", "stack_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.FindChromaticyScale": [[137, 161], ["list", "numpy.zeros", "range", "len", "len", "numpy.ones", "scipy.optimize.fmin", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "FindChromaticyScale", "(", "M", ",", "gray", ")", ":", "\n", "# Color correction", "\n", "    ", "batch_size", ",", "channels", "=", "gray", ".", "shape", "\n", "total_scaled_list", "=", "list", "(", ")", "\n", "scales", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "3", ")", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "        ", "l_m", "=", "len", "(", "M", ")", ";", "\n", "l_I", "=", "len", "(", "gray", ")", ";", "\n", "\n", "def", "residualFunction", "(", "p", ")", ":", "\n", "            ", "I_c", "=", "gray", "*", "p", "\n", "I_c_n", "=", "I_c", "/", "np", ".", "linalg", ".", "norm", "(", "I_c", ")", "\n", "M_n", "=", "M", "/", "np", ".", "linalg", ".", "norm", "(", "M", ")", "\n", "return", "(", "(", "I_c_n", "-", "M_n", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "scale", "=", "np", ".", "ones", "(", "l_m", ")", "\n", "\n", "min_scale", "=", "optimize", ".", "fmin", "(", "residualFunction", ",", "scale", ",", "xtol", "=", "1e-8", ",", "\n", "ftol", "=", "1e-8", ",", "disp", "=", "False", ")", "\n", "\n", "# Shape matching", "\n", "scales", "[", "i", ",", ":", "]", "=", "min_scale", "\n", "", "return", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.gsolve": [[162, 234], ["list", "zip", "numpy.stack", "numpy.zeros", "range", "list.append", "numpy.zeros", "numpy.zeros", "numpy.arange().repeat", "Z.transpose().flatten().astype", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.tile", "x[].squeeze", "len", "numpy.linalg.lstsq", "numpy.arange", "Z.transpose().flatten", "len", "len", "len", "Z.transpose"], "function", ["None"], ["", "def", "gsolve", "(", "Z_stack", ",", "B_stack", ",", "l", ",", "w", ")", ":", "\n", "# batch_size, img number, pixel number", "\n", "    ", "'''\n    This function estimates camera response function(CRF)\n    from given sample stacks\n\n    Input:\n        -Z_stack : a stack of samples from LDR images. \n                  Values are assumed to be in [0,1]\n        -B_stack : a stack of exposure value corresponding\n                   to the Z_stack\n        -l       : smoothing hyper paramter to smoothen \n                   estimated CRF\n        -w       : weighting function #Debevec 97\n\n    Output:\n        -out     : Camera response function\n\n\n    '''", "\n", "batch_size", ",", "num_images", ",", "channels", ",", "samples", "=", "Z_stack", ".", "shape", "\n", "n", "=", "256", "\n", "out", "=", "list", "(", ")", "\n", "for", "Z_3chan", ",", "B", "in", "zip", "(", "Z_stack", ",", "B_stack", ")", ":", "\n", "\n", "# CRF for each batches", "\n", "        ", "CRF_b", "=", "np", ".", "zeros", "(", "(", "channels", ",", "samples", ")", ")", "\n", "for", "chan", "in", "range", "(", "channels", ")", ":", "\n", "\n", "# Compute CRF for each channel of Z", "\n", "          ", "Z", "=", "Z_3chan", "[", ":", ",", "chan", ",", ":", "]", "\n", "\n", "# Initialize input", "\n", "A", "=", "np", ".", "zeros", "(", "(", "Z", ".", "shape", "[", "-", "1", "]", "*", "Z", ".", "shape", "[", "-", "2", "]", "+", "n", "+", "1", ",", "\n", "n", "+", "Z", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "b", "=", "np", ".", "zeros", "(", "(", "A", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "# Index ", "\n", "\n", "# Col index for matrix A & b", "\n", "index_i", "=", "np", ".", "arange", "(", "n", ",", "n", "+", "Z", ".", "shape", "[", "-", "1", "]", ")", ".", "repeat", "(", "Z", ".", "shape", "[", "-", "2", "]", ")", "\n", "index_z", "=", "Z", ".", "transpose", "(", "1", ",", "0", ")", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "index_p", "=", "np", ".", "arange", "(", "n", "-", "1", ")", "\n", "\n", "# Row index for matrix A & b", "\n", "index_k1", "=", "np", ".", "arange", "(", "len", "(", "index_z", ")", ")", "\n", "index_k2", "=", "np", ".", "arange", "(", "len", "(", "index_z", ")", "+", "1", ",", "len", "(", "index_z", ")", "+", "n", ")", "\n", "\n", "# b = w[z]*B[j]    ", "\n", "B_repeat", "=", "np", ".", "tile", "(", "B", ",", "Z", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "A", "[", "index_k1", ",", "index_z", "]", "=", "w", "[", "index_z", "]", "\n", "A", "[", "index_k1", ",", "index_i", "]", "=", "-", "w", "[", "index_z", "]", "\n", "b", "[", "index_k1", ",", "0", "]", "=", "(", "w", "[", "index_z", "]", "*", "B_repeat", ")", "\n", "\n", "# Middle value to be zero(log(1) = 0)", "\n", "A", "[", "len", "(", "index_z", ")", ",", "n", "//", "2", "]", "=", "1", "\n", "\n", "# Smoothing term", "\n", "A", "[", "index_k2", ",", "index_p", "]", "=", "l", "*", "w", "[", "1", ":", "]", "\n", "A", "[", "index_k2", ",", "index_p", "+", "1", "]", "=", "-", "2", "*", "l", "*", "w", "[", "1", ":", "]", "\n", "A", "[", "index_k2", ",", "index_p", "+", "2", "]", "=", "l", "*", "w", "[", "1", ":", "]", "\n", "\n", "# Solve least square prob", "\n", "x", "=", "np", ".", "linalg", ".", "lstsq", "(", "A", ",", "b", ",", "rcond", "=", "None", ")", "[", "0", "]", "\n", "#x =  np.dot(np.linalg.pinv(A),b)", "\n", "\n", "CRF_b", "[", "chan", ",", ":", "]", "=", "x", "[", ":", "n", "]", ".", "squeeze", "(", ")", "\n", "\n", "", "out", ".", "append", "(", "CRF_b", ")", "\n", "\n", "", "return", "np", ".", "stack", "(", "out", ",", "axis", "=", "0", ")", "# batch_size, channels, samples", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.MitsunagaNayarCRFClassic": [[237, 314], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "d.ravel", "range", "numpy.power", "range", "numpy.zeros", "numpy.zeros", "range", "numpy.flip", "numpy.polyval", "numpy.polyval", "max", "numpy.polyval", "numpy.polyval", "sum", "numpy.power", "range", "range", "numpy.linalg.lstsq", "sum", "numpy.append", "range", "range", "numpy.abs", "numpy.polyval", "numpy.polyval", "sum", "sum", "sum", "hdr_toolbox.MitsunagaNayarCRFClassic.MN_d"], "function", ["None"], ["", "def", "MitsunagaNayarCRFClassic", "(", "stack_samples", ",", "stack_exposure", ",", "N", ")", ":", "\n", "\n", "    ", "threshold", "=", "1e-4", "\n", "batch", "=", "stack_samples", ".", "shape", "[", "0", "]", "\n", "chan", "=", "stack_samples", ".", "shape", "[", "2", "]", "\n", "Q", "=", "stack_exposure", ".", "shape", "[", "1", "]", "\n", "maxiterations", "=", "-", "1", "\n", "Mmax", "=", "1.0", "\n", "def", "MN_d", "(", "c", ",", "q", ",", "n", ")", ":", "\n", "        ", "q_p", "=", "q", "+", "1", "\n", "M_q", "=", "stack_samples", "[", ":", ",", "q", ",", "c", ",", ":", "]", "\n", "M_q_p", "=", "stack_samples", "[", ":", ",", "q_p", ",", "c", ",", ":", "]", "\n", "\n", "M_q_t", "=", "M_q", "[", "(", "M_q", ">", "0", ")", "&", "(", "M_q_p", ">", "0", ")", "]", "\n", "M_q_p_t", "=", "M_q_p", "[", "(", "M_q", ">", "0", ")", "&", "(", "M_q_p", ">", "0", ")", "]", "\n", "d", "=", "np", ".", "power", "(", "M_q_t", ",", "n", ")", "-", "R", "[", ":", ",", "q", "]", "*", "np", ".", "power", "(", "M_q_p_t", ",", "n", ")", "\n", "\n", "return", "d", ".", "ravel", "(", ")", "\n", "", "pp", "=", "np", ".", "zeros", "(", "(", "N", "+", "1", ",", "chan", ")", ")", "\n", "pp_prev", "=", "np", ".", "zeros", "(", "(", "N", "+", "1", ",", "chan", ")", ")", "\n", "\n", "err", "=", "0", "\n", "\n", "R0", "=", "np", ".", "zeros", "(", "(", "batch", ",", "Q", "-", "1", ")", ")", "\n", "\n", "for", "q", "in", "range", "(", "Q", "-", "1", ")", ":", "\n", "        ", "R0", "[", ":", ",", "q", "]", "=", "stack_exposure", "[", ":", ",", "q", "]", "/", "stack_exposure", "[", ":", ",", "q", "+", "1", "]", "\n", "\n", "", "x", "=", "[", "i", "/", "255.0", "for", "i", "in", "range", "(", "255", ")", "]", "\n", "\n", "for", "c", "in", "range", "(", "chan", ")", ":", "\n", "        ", "R", "=", "R0", "\n", "bLoop", "=", "1", "\n", "iter_n", "=", "0", "\n", "while", "(", "bLoop", ")", ":", "\n", "            ", "A", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ")", "\n", "b", "=", "np", ".", "zeros", "(", "(", "N", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "                    ", "for", "q", "in", "range", "(", "Q", "-", "1", ")", ":", "\n", "                        ", "delta", "=", "MN_d", "(", "c", ",", "q", ",", "j", ")", "-", "MN_d", "(", "c", ",", "q", ",", "N", ")", "\n", "A", "[", "i", ",", "j", "]", "=", "A", "[", "i", ",", "j", "]", "+", "sum", "(", "np", ".", "multiply", "(", "MN_d", "(", "c", ",", "q", ",", "i", ")", ",", "delta", ")", ")", "\n", "\n", "", "", "for", "q", "in", "range", "(", "Q", "-", "1", ")", ":", "\n", "                    ", "b", "[", "i", "]", "=", "b", "[", "i", "]", "-", "sum", "(", "np", ".", "multiply", "(", "Mmax", "*", "MN_d", "(", "c", ",", "q", ",", "i", ")", ",", "MN_d", "(", "c", ",", "q", ",", "N", ")", ")", ")", "\n", "\n", "", "", "coeff", "=", "np", ".", "linalg", ".", "lstsq", "(", "A", ",", "b", ",", "rcond", "=", "None", ")", "[", "0", "]", "\n", "coeff_n", "=", "Mmax", "-", "sum", "(", "coeff", ")", "\n", "\n", "pp", "[", ":", ",", "c", "]", "=", "np", ".", "flip", "(", "np", ".", "append", "(", "coeff", ",", "coeff_n", ")", ")", "\n", "\n", "f_1", "=", "np", ".", "polyval", "(", "pp", "[", ":", ",", "c", "]", ",", "x", ")", "\n", "f_2", "=", "np", ".", "polyval", "(", "pp_prev", "[", ":", ",", "c", "]", ",", "x", ")", "\n", "bLoop", "=", "max", "(", "np", ".", "abs", "(", "f_1", "-", "f_2", ")", ">", "threshold", ")", "\n", "bLoop", "=", "bLoop", "and", "(", "iter_n", "<", "maxiterations", ")", "\n", "if", "(", "bLoop", ")", ":", "\n", "                ", "pp_prev", "=", "pp", "\n", "for", "q", "in", "range", "(", "Q", "-", "1", ")", ":", "\n", "                    ", "s1", "=", "stack_samples", "[", ":", ",", "q", ",", "c", ",", ":", "]", "\n", "s2", "=", "stack_samples", "[", ":", ",", "q", "+", "1", ",", "c", ",", ":", "]", "\n", "indx", "=", "(", "s1", ">", "0", ")", "&", "(", "s2", ">", "0", ")", "\n", "e1", "=", "np", ".", "polyval", "(", "pp", "[", ":", ",", "c", "]", ",", "s1", "[", "indx", "]", ")", "\n", "e2", "=", "np", ".", "polyval", "(", "pp", "[", ":", ",", "c", "]", ",", "s2", "[", "indx", "]", ")", "\n", "R", "[", ":", ",", "q", "]", "=", "sum", "(", "e1", ")", "/", "sum", "(", "e2", ")", "\n", "\n", "", "iter", "+=", "1", "\n", "", "", "for", "q", "in", "range", "(", "Q", "-", "1", ")", ":", "\n", "            ", "s1", "=", "stack_samples", "[", ":", ",", "q", ",", "c", "]", "\n", "s2", "=", "stack_samples", "[", ":", ",", "q", "+", "1", ",", "c", "]", "\n", "indx", "=", "(", "s1", ">", "0", ")", "&", "(", "s2", ">", "0", ")", "\n", "e1", "=", "np", ".", "polyval", "(", "pp", "[", ":", ",", "c", "]", ",", "s1", "[", "indx", "]", ")", "\n", "e2", "=", "np", ".", "polyval", "(", "pp", "[", ":", ",", "c", "]", ",", "s2", "[", "indx", "]", ")", "\n", "err", "+=", "sum", "(", "(", "e1", "-", "R", "[", ":", ",", "q", "]", "*", "e2", ")", "**", "2", ")", "\n", "\n", "", "", "return", "pp", ",", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.tabledFunction": [[317, 345], ["torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.ones_like", "torch.ones_like", "len", "range", "range", "range", "plf", "plf"], "function", ["None"], ["", "def", "tabledFunction", "(", "img", ",", "table", ",", "device", ")", ":", "\n", "\n", "    ", "'''\n    Returns remapped values regarding the table function\n \n    Input:\n        -img: an LDR image or stack with values in [0,2^nBit - 1]\n        -table: three functions for remapping image pixels values\n    Output:\n        -img: an LDR image with remapped values\n    '''", "\n", "\n", "plf", "=", "Piecewise_Linear", ".", "apply", "\n", "img_out", "=", "torch", ".", "zeros_like", "(", "img", ")", "\n", "non_zero_offset", "=", "1e-7", "*", "torch", ".", "ones_like", "(", "table", ")", "\n", "table", "=", "torch", ".", "where", "(", "table", ">", "0", ",", "table", ",", "non_zero_offset", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", ">", "3", ":", "\n", "        ", "num_images", ",", "channels", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "channels", ")", ":", "\n", "                ", "img_out", "[", "i", ",", "j", ",", ":", ",", ":", "]", "=", "plf", "(", "img", "[", "i", ",", "j", ",", ":", ",", ":", "]", ",", "table", "[", "j", ",", ":", "]", ",", "device", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "channels", "=", "img", ".", "shape", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "channels", ")", ":", "\n", "            ", "img_out", "[", "j", ",", ":", ",", ":", "]", "=", "plf", "(", "img", "[", "j", ",", ":", ",", ":", "]", ",", "table", "[", "j", ",", ":", "]", ",", "device", ")", "\n", "\n", "", "", "return", "img_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.polyFunction": [[346, 362], ["torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.ones_like", "torch.ones_like", "len", "range", "range", "range", "poly", "poly"], "function", ["None"], ["", "def", "polyFunction", "(", "img", ",", "table", ",", "pp", ",", "device", ")", ":", "\n", "    ", "poly", "=", "Polynomial", ".", "apply", "\n", "img_out", "=", "torch", ".", "zeros_like", "(", "img", ")", "\n", "non_zero_offset", "=", "1e-7", "*", "torch", ".", "ones_like", "(", "img", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", ">", "3", ":", "\n", "        ", "num_images", ",", "channels", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "channels", ")", ":", "\n", "                ", "img_out", "[", "i", ",", "j", ",", ":", ",", ":", "]", "=", "poly", "(", "img", "[", "i", ",", "j", ",", ":", ",", ":", "]", ",", "table", "[", "j", ",", ":", "]", ",", "pp", "[", ":", ",", "j", "]", ",", "device", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "channels", "=", "img", ".", "shape", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "channels", ")", ":", "\n", "            ", "img_out", "[", "j", ",", ":", ",", ":", "]", "=", "poly", "(", "img", "[", "j", ",", ":", ",", ":", "]", ",", "table", "[", "j", ",", ":", "]", ",", "pp", "[", ":", ",", "j", "]", ",", "device", ")", "\n", "\n", "", "", "return", "torch", ".", "where", "(", "img_out", ">", "0", ",", "img_out", ",", "non_zero_offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.RemoveCRF": [[363, 397], ["hdr_toolbox.tabledFunction", "hdr_toolbox.polyFunction"], "function", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.tabledFunction", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.polyFunction"], ["", "def", "RemoveCRF", "(", "img", ",", "lin_type", ",", "lin_fun", ",", "\n", "pp", ",", "device", "=", "1", ")", ":", "\n", "\n", "    ", "'''\n    This function builds an HDR image from a stack of LDR images.\n    Input:\n        -img: an image with values in [0,1]\n        -lin_type: the linearization function:\n           - 'linear': images are already linear\n           - 'gamma2.2': gamma function 2.2 is used for linearization\n           - 'sRGB': images are encoded using sRGB\n           - 'LUT': the lineraziation function is a look-up\n                    table defined stored as an array in the\n                    lin_fun\n        -lin_fun: it is the camera response function of the camera that\n           took the pictures in the stack. If it is empty, [], and\n           type is 'LUT' it will be estimated using Debevec and Malik's\n           method.\n    Output:\n        -imgOut: a linearized (CRF is removed) image.\n    '''", "\n", "\n", "# linearization of the image", "\n", "if", "lin_type", "==", "'gamma'", ":", "\n", "        ", "img_out", "=", "img", "**", "lin_fun", "\n", "", "elif", "lin_type", "==", "'sRGB'", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "#imgOut = ConvertRGBtosRGB(img, 1);", "\n", "", "elif", "lin_type", "==", "'LUT'", ":", "\n", "        ", "img_out", "=", "tabledFunction", "(", "img", ",", "lin_fun", ",", "device", ")", "\n", "", "elif", "lin_type", "==", "'poly'", ":", "\n", "        ", "img_out", "=", "polyFunction", "(", "img", ",", "lin_fun", ",", "pp", ",", "device", ")", "\n", "\n", "", "return", "img_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.ConstructRad": [[453, 541], ["torch.clamp", "torch.clamp", "torch.argmin", "torch.argmin", "torch.clamp", "torch.clamp", "hdr_toolbox.RemoveCRF", "torch.argmax", "torch.argmax", "torch.clamp", "torch.clamp", "hdr_toolbox.RemoveCRF", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.where", "torch.where", "mask_sat.sum().repeat.sum().repeat", "torch.where", "torch.where", "mask_noisy.sum().repeat.sum().repeat", "torch.where", "torch.where", "torch.where", "torch.where", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "len", "WeightFunction().cuda", "hdr_toolbox.RemoveCRF", "hdr_toolbox.WeightFunction", "hdr_toolbox.RemoveCRF", "list", "range", "torch.stack", "torch.stack", "img_out.sum.sum", "WeightFunction.sum", "mask_sat.sum().repeat.sum", "mask_noisy.sum().repeat.sum", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "hdr_toolbox.WeightFunction", "list.append", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.RemoveCRF", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.RemoveCRF", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.RemoveCRF", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.WeightFunction", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.RemoveCRF", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.WeightFunction"], ["", "", "def", "ConstructRad", "(", "stack", ",", "\n", "exposure_stack", ",", "\n", "lin_fun", ",", "\n", "pp", ",", "\n", "weight_type", "=", "'Deb97'", ",", "\n", "merge_type", "=", "'log'", ",", "\n", "lin_type", "=", "'LUT'", ",", "\n", "device", "=", "0", ")", ":", "\n", "\n", "    ", "num_images", ",", "channels", ",", "height", ",", "width", "=", "stack", ".", "shape", "\n", "# Initialization", "\n", "if", "stack", ".", "is_cuda", "==", "True", ":", "\n", "        ", "mask_zeros", "=", "torch", ".", "zeros", "(", "channels", ",", "height", ",", "width", ")", ".", "cuda", "(", "device", "=", "device", ")", "\n", "mask_ones", "=", "torch", ".", "ones", "(", "channels", ",", "height", ",", "width", ")", ".", "cuda", "(", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "mask_zeros", "=", "torch", ".", "zeros", "(", "channels", ",", "height", ",", "width", ")", "\n", "mask_ones", "=", "torch", ".", "ones", "(", "channels", ",", "height", ",", "width", ")", "\n", "\n", "", "med", "=", "len", "(", "exposure_stack", ")", "//", "2", "\n", "img_med", "=", "torch", ".", "clamp", "(", "stack", "[", "med", ",", ":", ",", ":", ",", ":", "]", ",", "0.0", ",", "1.0", ")", "\n", "\n", "# For saturated pixels", "\n", "sat", "=", "torch", ".", "argmin", "(", "exposure_stack", ")", "\n", "\n", "img_sat", "=", "torch", ".", "clamp", "(", "stack", "[", "sat", ",", ":", ",", ":", ",", ":", "]", ",", "0.0", ",", "1.0", ")", "\n", "img_sat", "=", "RemoveCRF", "(", "img_sat", ",", "lin_type", ",", "lin_fun", ",", "pp", ",", "device", ")", "\n", "img_sat", "=", "img_sat", "/", "exposure_stack", "[", "sat", "]", "\n", "\n", "# For noisy pixels", "\n", "noisy", "=", "torch", ".", "argmax", "(", "exposure_stack", ")", "\n", "\n", "img_noisy", "=", "torch", ".", "clamp", "(", "stack", "[", "noisy", ",", ":", ",", ":", ",", ":", "]", ",", "0.0", ",", "1.0", ")", "\n", "img_noisy", "=", "RemoveCRF", "(", "img_noisy", ",", "lin_type", ",", "lin_fun", ",", "pp", ",", "device", ")", "\n", "img_noisy", "=", "img_noisy", "/", "exposure_stack", "[", "noisy", "]", "\n", "\n", "# Offsets for numerical stability(Avoid zero division)", "\n", "delta_value", "=", "1.0", "/", "65536.0", "\n", "non_zero_offset", "=", "1e-9", "\n", "saturation", "=", "1e-4", "\n", "\n", "# Normalizing stack", "\n", "clamped_stack", "=", "torch", ".", "clamp", "(", "stack", ",", "0.0", ",", "1.0", ")", "\n", "if", "stack", ".", "is_cuda", ":", "\n", "        ", "weight", "=", "WeightFunction", "(", "clamped_stack", ",", "weight_type", ")", ".", "cuda", "(", "device", "=", "device", ")", "\n", "rm_crf_stack", "=", "RemoveCRF", "(", "clamped_stack", ",", "lin_type", ",", "lin_fun", ",", "pp", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "weight", "=", "WeightFunction", "(", "clamped_stack", ",", "weight_type", ")", "\n", "rm_crf_stack", "=", "RemoveCRF", "(", "clamped_stack", ",", "lin_type", ",", "lin_fun", ",", "pp", ")", "\n", "\n", "# Merging stack images", "\n", "", "if", "merge_type", "==", "'linear'", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "#imgOut = imgOut + (weight * tmpStack) / dt_j", "\n", "#totWeight = totWeight + weight;", "\n", "\n", "", "elif", "merge_type", "==", "'log'", ":", "\n", "        ", "img_chan", "=", "list", "(", ")", "\n", "for", "n", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "img_temp", "=", "weight", "[", "n", ",", ":", ",", ":", ",", ":", "]", "*", "(", "torch", ".", "log", "(", "rm_crf_stack", "[", "n", ",", ":", ",", ":", ",", ":", "]", ")", "-", "torch", ".", "log", "(", "exposure_stack", "[", "n", "]", ")", ")", "\n", "img_chan", ".", "append", "(", "img_temp", ")", "\n", "", "img_out", "=", "torch", ".", "stack", "(", "img_chan", ",", "dim", "=", "0", ")", "\n", "img_out", "=", "img_out", ".", "sum", "(", "dim", "=", "0", ")", "\n", "totWeight", "=", "weight", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "", "elif", "merge_type", "==", "'w_time_sq'", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "# Todo", "\n", "#imgOut = imgOut + (weight * tmpStack) * dt_j", "\n", "#totWeight = totWeight + weight * dt_j * dt_j", "\n", "\n", "# Output images", "\n", "", "totWeight", "+=", "non_zero_offset", "\n", "img_out", "=", "img_out", "/", "(", "totWeight", ")", "\n", "img_out", "=", "torch", ".", "exp", "(", "img_out", ")", "\n", "\n", "# Masking zero division outliers       ", "\n", "mask_sat", "=", "torch", ".", "where", "(", "(", "totWeight", "<=", "saturation", ")", "&", "(", "img_med", ">", "0.5", ")", ",", "\n", "mask_ones", ",", "mask_zeros", ")", "\n", "mask_sat", "=", "mask_sat", ".", "sum", "(", "0", ")", ".", "repeat", "(", "3", ",", "1", ",", "1", ")", "\n", "\n", "mask_noisy", "=", "torch", ".", "where", "(", "(", "totWeight", "<=", "saturation", ")", "&", "(", "img_med", "<", "0.5", ")", ",", "\n", "mask_ones", ",", "mask_zeros", ")", "\n", "mask_noisy", "=", "mask_noisy", ".", "sum", "(", "0", ")", ".", "repeat", "(", "3", ",", "1", ",", "1", ")", "\n", "\n", "img_out", "=", "torch", ".", "where", "(", "mask_sat", ">", "0", ",", "img_sat", ",", "img_out", ")", "\n", "img_out", "=", "torch", ".", "where", "(", "mask_noisy", ">", "0", ",", "img_noisy", ",", "img_out", ")", "\n", "\n", "return", "img_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.np_DebevecCRF.DebevecCRF": [[8, 69], ["numpy.log", "utils.hdr_toolbox.WeightFunction", "utils.hdr_toolbox.LDRStackSubSampling", "utils.hdr_toolbox.gsolve", "numpy.exp", "utils.hdr_toolbox.FindChromaticyScale", "numpy.expand_dims", "scale.repeat.repeat", "numpy.zeros", "range", "numpy.amax", "torch.tensor().float", "isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.linspace", "np.array.cpu().detach", "np.array.cpu().detach", "torch.tensor", "np.array.cpu", "np.array.cpu"], "function", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.WeightFunction", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.LDRStackSubSampling", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.gsolve", "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.hdr_toolbox.FindChromaticyScale"], ["def", "DebevecCRF", "(", "stack", ",", "\n", "stack_exposure", ",", "\n", "nSamples", "=", "256", ",", "\n", "sampling_strategy", "=", "'Grossberg'", ",", "\n", "smoothing_term", "=", "20", ",", "\n", "bNormalize", "=", "1", ")", ":", "\n", "\n", "    ", "'''\n    This function computes camera response function using Debevec and\n    Malik method.\n\n    Input:\n        -stack: a stack of LDR images. If the stack is a single or\n         double values are assumed to be in [0,1].\n        -stack_exposure: an array containg the exposure time of each\n         image. Time is expressed in second (s)\n        -nSamples: number of samples for computing the CRF\n        -sampling_strategy: how to select samples:\n          -'Grossberg': picking samples according to Grossberg and\n            Nayar algorithm (CDF based)\n          -'RandomSpatial': picking random samples in the image\n          -'RegularSpatial': picking regular samples in the image\n        -smoothing_term: a smoothing term for solving the linear\n        -bNormalize: a boolean value for normalizing the inverse CRF\n    Output:\n        -lin_fun: the inverse CRF\n    '''", "\n", "# Convert to numpy array, gradient not required", "\n", "if", "not", "isinstance", "(", "stack", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "stack", "=", "np", ".", "array", "(", "stack", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", "", "if", "not", "isinstance", "(", "stack_exposure", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "stack_exposure", "=", "np", ".", "array", "(", "stack_exposure", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", "\n", "", "batch_size", ",", "num_images", ",", "channels", ",", "=", "stack", ".", "shape", "[", ":", "3", "]", "\n", "\n", "# Log of exposure values", "\n", "log_stack_exposure", "=", "np", ".", "log", "(", "stack_exposure", ")", "\n", "\n", "# Devebec weight function", "\n", "W", "=", "WeightFunction", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "256", ")", ",", "'Deb97'", ")", "\n", "# Stack sub-sampling", "\n", "stack_samples", "=", "LDRStackSubSampling", "(", "stack", ",", "stack_exposure", ",", "\n", "nSamples", ",", "sampling_strategy", ")", "\n", "\n", "# Recovering camera response function using least method", "\n", "g", "=", "gsolve", "(", "stack_samples", ",", "log_stack_exposure", ",", "\n", "smoothing_term", ",", "W", ")", "\n", "lin_fun", "=", "np", ".", "exp", "(", "g", ")", "\n", "# Normalization", "\n", "scale", "=", "FindChromaticyScale", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "lin_fun", "[", ":", ",", ":", ",", "127", "]", ")", "\n", "scale", "=", "np", ".", "expand_dims", "(", "scale", ",", "2", ")", "\n", "scale", "=", "scale", ".", "repeat", "(", "nSamples", ",", "axis", "=", "2", ")", "\n", "scaled_lin_fun", "=", "np", ".", "zeros", "(", "(", "lin_fun", ".", "shape", ")", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "scaled_lin_fun", "[", "i", ",", ":", ",", ":", "]", "=", "scale", "[", "i", ",", ":", "]", "*", "lin_fun", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "", "max_lin_fun", "=", "np", ".", "amax", "(", "lin_fun", "[", ":", ",", "2", ",", ":", "]", ")", "\n", "\n", "if", "bNormalize", ":", "\n", "        ", "scaled_lin_fun", "/=", "max_lin_fun", "\n", "", "return", "torch", ".", "tensor", "(", "scaled_lin_fun", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.sampling.ComputeLDRStackHistogram": [[3, 22], ["numpy.zeros", "range", "range", "range", "numpy.clip", "numpy.round", "numpy.histogram"], "function", ["None"], ["def", "ComputeLDRStackHistogram", "(", "stack", ")", ":", "\n", "    ", "'''\n    Input: stack\n    Output:\n        -stackOut: a stack of LDR image histograms\n    '''", "\n", "batch_size", ",", "num_images", ",", "channels", ",", "height", ",", "width", "=", "stack", ".", "shape", "\n", "stackOut", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_images", ",", "channels", ",", "256", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "channels", ")", ":", "\n", "                ", "tmp", "=", "stack", "[", "i", ",", "j", ",", "k", ",", ":", ",", ":", "]", "\n", "tmp", "=", "np", ".", "clip", "(", "np", ".", "round", "(", "tmp", "*", "255", ")", ",", "\n", "0.0", ",", "255.0", ")", "\n", "stackOut", "[", "i", ",", "j", ",", "k", ",", ":", "]", "=", "np", ".", "histogram", "(", "tmp", ",", "bins", "=", "256", ",", "\n", "range", "=", "(", "0.0", ",", "255.0", ")", ")", "[", "0", "]", "\n", "\n", "", "", "", "return", "stackOut", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.utils.sampling.GrossbergSampling": [[23, 50], ["range", "numpy.linspace", "numpy.zeros", "range", "range", "len", "range", "range", "range", "numpy.cumsum", "range", "np.cumsum.max", "numpy.argmin", "numpy.abs"], "function", ["None"], ["", "def", "GrossbergSampling", "(", "stack", ",", "nsamples", "=", "256", ")", ":", "\n", "    ", "'''\n    Input:\n        -stack: a stack of LDR histograms; \n        -nSamples: the number of samples for sampling the stack\n\n    Output:\n        -stackOut: a stack of LDR samples for Debevec and Malik method\n    '''", "\n", "batch_size", ",", "stackSize", ",", "channels", ",", "_", "=", "stack", ".", "shape", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "stackSize", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "channels", ")", ":", "\n", "                ", "h_cdf", "=", "np", ".", "cumsum", "(", "stack", "[", "i", ",", "j", ",", "k", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "stack", "[", "i", ",", "j", ",", "k", ",", ":", "]", "=", "h_cdf", "/", "h_cdf", ".", "max", "(", ")", "\n", "", "", "", "u", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "nsamples", ")", "\n", "stackOut", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "stackSize", ",", "channels", ",", "nsamples", ")", ")", "\n", "\n", "for", "l", "in", "range", "(", "len", "(", "u", ")", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "stackSize", ")", ":", "\n", "                ", "for", "k", "in", "range", "(", "channels", ")", ":", "\n", "#for l in range(len(u)):", "\n", "                    ", "val", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "stack", "[", "i", ",", "j", ",", "k", ",", ":", "]", "-", "u", "[", "l", "]", ")", ")", "\n", "stackOut", "[", "i", ",", "j", ",", "k", ",", "l", "]", "=", "val", "\n", "", "", "", "", "return", "stackOut", "\n", "", ""]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.combine.CombineNet_up.__init__": [[12, 52], ["torch.Module.__init__", "range", "range", "range", "utils.block.ConvBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.block.ConvBlock", "utils.block.DoubleBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.block.ConvBlock", "torch.Upsample", "torch.Upsample", "torch.Upsample", "utils.block.DoubleBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", "=", "2", ",", "nf", "=", "16", ",", "ndown", "=", "4", ",", "nintermediate", "=", "2", ")", ":", "\n", "        ", "super", "(", "CombineNet_up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "init_layers", "=", "[", "]", "\n", "init_layers", "+=", "[", "ConvBlock", "(", "in_ch", ",", "nf", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'swish'", ")", "]", "\n", "\n", "down_layers", "=", "[", "]", "\n", "for", "down", "in", "range", "(", "ndown", ")", ":", "\n", "            ", "down_layers", "+=", "[", "DoubleBlock", "(", "nf", ",", "nf", "*", "2", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'none'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "down_layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "2", ")", "]", "\n", "nf", "=", "nf", "*", "2", "\n", "\n", "", "inter_layers", "=", "[", "]", "\n", "for", "inter", "in", "range", "(", "nintermediate", ")", ":", "\n", "            ", "inter_layers", "+=", "[", "ConvBlock", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "norm", "=", "'none'", ",", "activation", "=", "'swish'", ")", "]", "\n", "\n", "", "up_layers", "=", "[", "]", "\n", "for", "up", "in", "range", "(", "ndown", ")", ":", "\n", "            ", "up_layers", "+=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "]", "\n", "\n", "up_layers", "+=", "[", "DoubleBlock", "(", "nf", "*", "2", ",", "nf", "//", "2", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'in'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "nf", "//=", "2", "\n", "\n", "", "self", ".", "out_conv", "=", "ConvBlock", "(", "nf", "*", "2", ",", "3", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'tanh'", ")", "\n", "\n", "self", ".", "init_layers", "=", "nn", ".", "Sequential", "(", "*", "init_layers", ")", "\n", "self", ".", "down_layers", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "self", ".", "inter_layers", "=", "nn", ".", "Sequential", "(", "*", "inter_layers", ")", "\n", "self", ".", "up_layers", "=", "nn", ".", "Sequential", "(", "*", "up_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.combine.CombineNet_up.forward": [[53, 83], ["combine.CombineNet_up.init_layers", "list", "list.append", "list.reverse", "combine.CombineNet_up.inter_layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "combine.CombineNet_up.out_conv", "isinstance", "isinstance", "down_block", "list.append", "down_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "up_block", "up_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_x", ")", ":", "\n", "        ", "out", "=", "self", ".", "init_layers", "(", "in_x", ")", "\n", "\n", "down_list", "=", "list", "(", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "for", "down_block", "in", "self", ".", "down_layers", ":", "\n", "            ", "if", "isinstance", "(", "down_block", ",", "nn", ".", "AvgPool2d", ")", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ")", "\n", "\n", "", "", "down_list", ".", "reverse", "(", ")", "\n", "out", "=", "self", ".", "inter_layers", "(", "out", ")", "\n", "\n", "i", "=", "0", "\n", "for", "up_block", "in", "self", ".", "up_layers", ":", "\n", "            ", "if", "isinstance", "(", "up_block", ",", "nn", ".", "Upsample", ")", ":", "\n", "                ", "skip", "=", "down_list", "[", "i", "]", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "skip", "]", ",", "1", ")", "\n", "out", "=", "up_block", "(", "out", ")", "\n", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "out", "=", "up_block", "(", "out", ")", "\n", "\n", "", "", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "down_list", "[", "i", "]", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "out_conv", "(", "out", ")", "\n", "out", "=", "(", "out", "+", "in_x", "[", ":", ",", "3", ":", "6", ",", ":", "]", ")", "/", "2", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.combine.CombineNet_down.__init__": [[85, 125], ["torch.Module.__init__", "range", "range", "range", "utils.block.ConvBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.block.ConvBlock", "utils.block.DoubleBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.block.ConvBlock", "torch.Upsample", "torch.Upsample", "torch.Upsample", "utils.block.DoubleBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", "=", "2", ",", "nf", "=", "16", ",", "ndown", "=", "4", ",", "nintermediate", "=", "2", ")", ":", "\n", "        ", "super", "(", "CombineNet_down", ",", "self", ")", ".", "__init__", "(", ")", "\n", "init_layers", "=", "[", "]", "\n", "init_layers", "+=", "[", "ConvBlock", "(", "in_ch", ",", "nf", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'swish'", ")", "]", "\n", "\n", "down_layers", "=", "[", "]", "\n", "for", "down", "in", "range", "(", "ndown", ")", ":", "\n", "            ", "down_layers", "+=", "[", "DoubleBlock", "(", "nf", ",", "nf", "*", "2", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'none'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "down_layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "2", ")", "]", "\n", "nf", "=", "nf", "*", "2", "\n", "\n", "", "inter_layers", "=", "[", "]", "\n", "for", "inter", "in", "range", "(", "nintermediate", ")", ":", "\n", "            ", "inter_layers", "+=", "[", "ConvBlock", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "norm", "=", "'none'", ",", "activation", "=", "'swish'", ")", "]", "\n", "\n", "", "up_layers", "=", "[", "]", "\n", "for", "up", "in", "range", "(", "ndown", ")", ":", "\n", "            ", "up_layers", "+=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "]", "\n", "\n", "up_layers", "+=", "[", "DoubleBlock", "(", "nf", "*", "2", ",", "nf", "//", "2", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'in'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "nf", "//=", "2", "\n", "\n", "", "self", ".", "out_conv", "=", "ConvBlock", "(", "nf", "*", "2", ",", "3", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'tanh'", ")", "\n", "\n", "self", ".", "init_layers", "=", "nn", ".", "Sequential", "(", "*", "init_layers", ")", "\n", "self", ".", "down_layers", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "self", ".", "inter_layers", "=", "nn", ".", "Sequential", "(", "*", "inter_layers", ")", "\n", "self", ".", "up_layers", "=", "nn", ".", "Sequential", "(", "*", "up_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.combine.CombineNet_down.forward": [[126, 156], ["combine.CombineNet_down.init_layers", "list", "list.append", "list.reverse", "combine.CombineNet_down.inter_layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "combine.CombineNet_down.out_conv", "isinstance", "isinstance", "down_block", "list.append", "down_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "up_block", "up_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_x", ")", ":", "\n", "        ", "out", "=", "self", ".", "init_layers", "(", "in_x", ")", "\n", "\n", "down_list", "=", "list", "(", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "for", "down_block", "in", "self", ".", "down_layers", ":", "\n", "            ", "if", "isinstance", "(", "down_block", ",", "nn", ".", "AvgPool2d", ")", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ")", "\n", "\n", "", "", "down_list", ".", "reverse", "(", ")", "\n", "out", "=", "self", ".", "inter_layers", "(", "out", ")", "\n", "\n", "i", "=", "0", "\n", "for", "up_block", "in", "self", ".", "up_layers", ":", "\n", "            ", "if", "isinstance", "(", "up_block", ",", "nn", ".", "Upsample", ")", ":", "\n", "                ", "skip", "=", "down_list", "[", "i", "]", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "skip", "]", ",", "1", ")", "\n", "out", "=", "up_block", "(", "out", ")", "\n", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "out", "=", "up_block", "(", "out", ")", "\n", "\n", "", "", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "down_list", "[", "i", "]", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "out_conv", "(", "out", ")", "\n", "out", "=", "(", "out", "+", "in_x", "[", ":", ",", "3", ":", "6", ",", ":", "]", ")", "/", "2", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.structure.Structure_up.__init__": [[13, 57], ["torch.Module.__init__", "range", "utils.block.Recurrent_unit", "range", "utils.block.ConvBlock", "utils.block.ConvBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.block.ConvBlock", "utils.block.DoubleBlock", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "utils.block.DoubleBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", "=", "2", ",", "nf", "=", "16", ",", "ndown", "=", "4", ",", "nintermediate", "=", "2", ",", "\n", "style_num", "=", "0", ")", ":", "\n", "        ", "super", "(", "Structure_up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "init_layers", "=", "[", "]", "\n", "init_layers", "+=", "[", "ConvBlock", "(", "in_ch", ",", "nf", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'swish'", ")", "]", "\n", "\n", "down_layers", "=", "[", "]", "\n", "for", "down", "in", "range", "(", "ndown", ")", ":", "\n", "            ", "down_layers", "+=", "[", "DoubleBlock", "(", "nf", ",", "nf", "*", "2", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "style_num", "=", "style_num", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'cin'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "down_layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "2", ")", "]", "\n", "nf", "=", "nf", "*", "2", "\n", "\n", "", "self", ".", "inter_layers", "=", "Recurrent_unit", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "\n", "norm", "=", "'none'", ",", "act", "=", "'swish'", ")", "\n", "\n", "up_layers", "=", "[", "]", "\n", "for", "up", "in", "range", "(", "ndown", ")", ":", "\n", "            ", "up_layers", "+=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "]", "\n", "\n", "up_layers", "+=", "[", "DoubleBlock", "(", "nf", "*", "2", ",", "nf", "//", "2", ",", "\n", "first_kernel", "=", "1", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "style_num", "=", "style_num", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'cin'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "nf", "//=", "2", "\n", "\n", "", "self", ".", "out_conv", "=", "ConvBlock", "(", "nf", "*", "2", ",", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'cin'", ",", "activation", "=", "'swish'", ",", "\n", "style_num", "=", "style_num", ")", "\n", "\n", "self", ".", "final_conv", "=", "ConvBlock", "(", "4", ",", "1", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'sigmoid'", ")", "\n", "\n", "self", ".", "init_layers", "=", "nn", ".", "Sequential", "(", "*", "init_layers", ")", "\n", "self", ".", "down_layers", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "self", ".", "up_layers", "=", "nn", ".", "Sequential", "(", "*", "up_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.structure.Structure_up.forward": [[58, 89], ["structure.Structure_up.init_layers", "list", "list.append", "list.reverse", "structure.Structure_up.inter_layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "structure.Structure_up.out_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "structure.Structure_up.final_conv", "isinstance", "isinstance", "down_block", "list.append", "down_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "up_block", "up_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_x", ",", "style_id", ",", "hidden", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "init_layers", "(", "in_x", ")", "\n", "\n", "down_list", "=", "list", "(", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "for", "down_block", "in", "self", ".", "down_layers", ":", "\n", "            ", "if", "isinstance", "(", "down_block", ",", "nn", ".", "MaxPool2d", ")", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ",", "style_id", ")", "\n", "\n", "", "", "down_list", ".", "reverse", "(", ")", "\n", "out", ",", "hidden", "=", "self", ".", "inter_layers", "(", "out", ",", "hidden", ")", "\n", "\n", "i", "=", "0", "\n", "for", "up_block", "in", "self", ".", "up_layers", ":", "\n", "            ", "if", "isinstance", "(", "up_block", ",", "nn", ".", "Upsample", ")", ":", "\n", "                ", "skip", "=", "down_list", "[", "i", "]", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "skip", "]", ",", "1", ")", "\n", "out", "=", "up_block", "(", "out", ")", "\n", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "out", "=", "up_block", "(", "out", ",", "style_id", ")", "\n", "\n", "", "", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "down_list", "[", "i", "]", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "out_conv", "(", "out", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "in_x", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "final_conv", "(", "out", ")", "\n", "return", "out", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.structure.Structure_down.__init__": [[91, 134], ["torch.Module.__init__", "range", "utils.block.Recurrent_unit", "range", "utils.block.ConvBlock", "utils.block.ConvBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.block.ConvBlock", "utils.block.DoubleBlock", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "utils.block.DoubleBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", "=", "2", ",", "nf", "=", "16", ",", "ndown", "=", "4", ",", "nintermediate", "=", "2", ",", "\n", "style_num", "=", "0", ")", ":", "\n", "        ", "super", "(", "Structure_down", ",", "self", ")", ".", "__init__", "(", ")", "\n", "init_layers", "=", "[", "]", "\n", "init_layers", "+=", "[", "ConvBlock", "(", "in_ch", ",", "nf", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'swish'", ")", "]", "\n", "\n", "down_layers", "=", "[", "]", "\n", "for", "down", "in", "range", "(", "ndown", ")", ":", "\n", "            ", "down_layers", "+=", "[", "DoubleBlock", "(", "nf", ",", "nf", "*", "2", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "style_num", "=", "style_num", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'cin'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "down_layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "2", ")", "]", "\n", "nf", "=", "nf", "*", "2", "\n", "\n", "", "self", ".", "inter_layers", "=", "Recurrent_unit", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "\n", "norm", "=", "'none'", ",", "act", "=", "'swish'", ")", "\n", "\n", "up_layers", "=", "[", "]", "\n", "for", "up", "in", "range", "(", "ndown", ")", ":", "\n", "            ", "up_layers", "+=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "]", "\n", "\n", "up_layers", "+=", "[", "DoubleBlock", "(", "nf", "*", "2", ",", "nf", "//", "2", ",", "\n", "first_kernel", "=", "1", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "style_num", "=", "style_num", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'cin'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "nf", "//=", "2", "\n", "\n", "", "self", ".", "out_conv", "=", "ConvBlock", "(", "nf", "*", "2", ",", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'cin'", ",", "activation", "=", "'swish'", ",", "style_num", "=", "style_num", ")", "\n", "\n", "self", ".", "final_conv", "=", "ConvBlock", "(", "4", ",", "1", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'sigmoid'", ")", "\n", "\n", "self", ".", "init_layers", "=", "nn", ".", "Sequential", "(", "*", "init_layers", ")", "\n", "self", ".", "down_layers", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "self", ".", "up_layers", "=", "nn", ".", "Sequential", "(", "*", "up_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.structure.Structure_down.forward": [[135, 168], ["structure.Structure_down.init_layers", "list", "list.append", "list.reverse", "structure.Structure_down.inter_layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "structure.Structure_down.out_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "structure.Structure_down.final_conv", "isinstance", "isinstance", "down_block", "list.append", "down_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "up_block", "up_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_x", ",", "style_id", ",", "hidden", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "init_layers", "(", "in_x", ")", "\n", "\n", "down_list", "=", "list", "(", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "for", "down_block", "in", "self", ".", "down_layers", ":", "\n", "            ", "if", "isinstance", "(", "down_block", ",", "nn", ".", "MaxPool2d", ")", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ",", "style_id", ")", "\n", "\n", "", "", "down_list", ".", "reverse", "(", ")", "\n", "out", ",", "hidden", "=", "self", ".", "inter_layers", "(", "out", ",", "hidden", ")", "\n", "\n", "i", "=", "0", "\n", "for", "up_block", "in", "self", ".", "up_layers", ":", "\n", "            ", "if", "isinstance", "(", "up_block", ",", "nn", ".", "Upsample", ")", ":", "\n", "                ", "skip", "=", "down_list", "[", "i", "]", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "skip", "]", ",", "1", ")", "\n", "out", "=", "up_block", "(", "out", ")", "\n", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "out", "=", "up_block", "(", "out", ",", "style_id", ")", "\n", "\n", "", "", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "down_list", "[", "i", "]", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "out_conv", "(", "out", ",", "style_id", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "in_x", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "final_conv", "(", "out", ")", "\n", "\n", "return", "out", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Identity.__init__": [[30, 32], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Identity.forward": [[32, 34], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Swish.__init__": [[36, 39], ["torch.Module.__init__", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Swish.forward": [[39, 41], ["block.Swish.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.PONO.__init__": [[43, 55], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", "=", "None", ",", "return_stats", "=", "False", ",", "affine", "=", "False", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "PONO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "return_stats", "=", "return_stats", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "affine", "=", "affine", "\n", "\n", "if", "affine", ":", "\n", "            ", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "*", "input_size", ")", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "1", ",", "*", "input_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "beta", ",", "self", ".", "gamma", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.PONO.forward": [[56, 63], ["x.mean", "x.var"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "(", "x", ".", "var", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "x", "=", "x", "*", "self", ".", "gamma", "+", "self", ".", "beta", "\n", "", "return", "x", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.MS.__init__": [[65, 68], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "None", ",", "gamma", "=", "None", ")", ":", "\n", "        ", "super", "(", "MS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", ",", "self", ".", "beta", "=", "gamma", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.MS.forward": [[69, 77], ["x.mul_", "x.add_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "beta", "=", "None", ",", "gamma", "=", "None", ")", ":", "\n", "        ", "beta", "=", "self", ".", "beta", "if", "beta", "is", "None", "else", "beta", "\n", "gamma", "=", "self", ".", "gamma", "if", "gamma", "is", "None", "else", "gamma", "\n", "if", "gamma", "is", "not", "None", ":", "\n", "            ", "x", ".", "mul_", "(", "gamma", ")", "\n", "", "if", "beta", "is", "not", "None", ":", "\n", "            ", "x", ".", "add_", "(", "beta", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.batch_InstanceNorm2d.__init__": [[79, 83], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "range"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "style_num", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "batch_InstanceNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inns", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "nn", ".", "InstanceNorm2d", "(", "in_channels", ",", "\n", "affine", "=", "True", ")", "for", "i", "in", "range", "(", "style_num", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.batch_InstanceNorm2d.forward": [[84, 87], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_x", ",", "style_id", ")", ":", "\n", "        ", "out", "=", "self", ".", "inns", "[", "style_id", "]", "(", "in_x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Preact_ConvBlock.__init__": [[92, 142], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "block.Identity", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "block.PONO", "block.Swish", "block.MS", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "block.Identity"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Preact_ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "\n", "output_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", "=", "padding", ")", "\n", "self", ".", "norm_name", "=", "norm", "\n", "self", ".", "act_name", "=", "activation", "\n", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "input_channels", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "input_channels", ")", "\n", "\n", "", "elif", "norm", "==", "'spec'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "utils", ".", "spectral_norm", "(", ")", "\n", "", "elif", "norm", "==", "'none'", ":", "\n", "            ", "self", ".", "norm", "=", "Identity", "(", ")", "\n", "", "elif", "norm", "==", "'pono'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "input_channels", ",", "\n", "affine", "=", "False", ",", "\n", "track_running_stats", "=", "False", ")", "\n", "self", ".", "norm2", "=", "PONO", "(", "affine", "=", "False", ")", "\n", "", "elif", "norm", "==", "'ms'", ":", "\n", "            ", "self", ".", "norm", "=", "MS", "(", ")", "\n", "", "elif", "norm", "==", "'group'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "GroupNorm", "(", "1", ",", "input_channels", ")", "\n", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'leaky'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", "0.01", ",", "True", ")", "\n", "", "elif", "activation", "==", "'swish'", ":", "\n", "            ", "self", ".", "act", "=", "Swish", "(", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "act", "=", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Preact_ConvBlock.forward": [[143, 157], ["block.Preact_ConvBlock.act", "block.Preact_ConvBlock.conv", "block.Preact_ConvBlock.norm", "block.Preact_ConvBlock.norm", "block.Preact_ConvBlock.norm2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "beta", "=", "None", ",", "gamma", "=", "None", ")", ":", "\n", "        ", "mean", ",", "std", "=", "None", ",", "None", "\n", "if", "self", ".", "norm_name", "==", "'ms'", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ",", "beta", ",", "gamma", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "norm_name", "==", "'pono'", ":", "\n", "            ", "x", ",", "mean", ",", "std", "=", "self", ".", "norm2", "(", "x", ")", "\n", "", "if", "mean", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.ConvBlock.__init__": [[159, 208], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "block.Identity", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "block.PONO", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "block.MS", "block.Swish", "block.batch_InstanceNorm2d", "block.Identity"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ",", "style_num", "=", "0", ")", ":", "\n", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "padding", ")", "\n", "self", ".", "norm_name", "=", "norm", "\n", "self", ".", "act_name", "=", "activation", "\n", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "output_channels", ",", "\n", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "False", ")", "\n", "", "elif", "norm", "==", "'spec'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "utils", ".", "spectral_norm", "(", ")", "\n", "", "elif", "norm", "==", "'none'", ":", "\n", "            ", "self", ".", "norm", "=", "Identity", "(", ")", "\n", "\n", "", "elif", "norm", "==", "'pono'", ":", "\n", "            ", "self", ".", "norm", "=", "PONO", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", "\n", "", "elif", "norm", "==", "'ms'", ":", "\n", "            ", "self", ".", "norm", "=", "MS", "(", ")", "\n", "", "elif", "norm", "==", "'cin'", ":", "\n", "            ", "self", ".", "norm", "=", "batch_InstanceNorm2d", "(", "style_num", ",", "output_channels", ")", "\n", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'leaky'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", "0.01", ",", "True", ")", "\n", "", "elif", "activation", "==", "'swish'", ":", "\n", "            ", "self", ".", "act", "=", "Swish", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "act", "=", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.ConvBlock.forward": [[209, 231], ["block.ConvBlock.conv", "block.ConvBlock.act", "block.ConvBlock.norm", "block.ConvBlock.norm2", "block.ConvBlock.norm", "block.ConvBlock.norm", "block.ConvBlock.norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "style_id", "=", "0", ",", "beta", "=", "None", ",", "gamma", "=", "None", ")", ":", "\n", "        ", "mean", ",", "std", "=", "None", ",", "None", "\n", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "norm_name", "==", "'pono'", ":", "\n", "            ", "x", ",", "mean", ",", "std", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "\n", "", "elif", "self", ".", "norm_name", "==", "'ms'", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ",", "beta", ",", "gamma", ")", "\n", "", "elif", "self", ".", "norm_name", "==", "'cin'", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ",", "style_id", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "\n", "if", "mean", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.ConvGRUCell.__init__": [[237, 251], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "kernel_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "reset_gate", "=", "nn", ".", "Conv2d", "(", "input_size", "+", "hidden_size", ",", "\n", "hidden_size", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "update_gate", "=", "nn", ".", "Conv2d", "(", "input_size", "+", "hidden_size", ",", "\n", "hidden_size", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "out_gate", "=", "nn", ".", "Conv2d", "(", "input_size", "+", "hidden_size", ",", "\n", "hidden_size", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "\n", "self", ".", "out_act", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.ConvGRUCell.forward": [[252, 280], ["input_.get_device", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block.ConvGRUCell.sigmoid", "block.ConvGRUCell.sigmoid", "block.ConvGRUCell.out_act", "input_.data.size", "input_.data.size", "block.ConvGRUCell.update_gate", "block.ConvGRUCell.reset_gate", "block.ConvGRUCell.out_gate", "list", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ",", "prev_state", "=", "None", ")", ":", "\n", "\n", "# get batch and spatial sizes", "\n", "        ", "batch_size", "=", "input_", ".", "data", ".", "size", "(", ")", "[", "0", "]", "\n", "spatial_size", "=", "input_", ".", "data", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "device", "=", "input_", ".", "get_device", "(", ")", "\n", "# generate empty prev_state, if None is provided", "\n", "if", "prev_state", "is", "None", ":", "\n", "            ", "state_size", "=", "[", "batch_size", ",", "self", ".", "hidden_size", "]", "+", "list", "(", "spatial_size", ")", "\n", "if", "input_", ".", "is_cuda", ":", "\n", "                ", "prev_state", "=", "torch", ".", "zeros", "(", "state_size", ")", ".", "cuda", "(", "device", ")", "\n", "", "else", ":", "\n", "                ", "prev_state", "=", "torch", ".", "zeros", "(", "state_size", ")", "\n", "\n", "# data size is [batch, channel, height, width]", "\n", "", "", "stacked_inputs", "=", "torch", ".", "cat", "(", "[", "input_", ",", "prev_state", "]", ",", "dim", "=", "1", ")", "\n", "update", "=", "self", ".", "sigmoid", "(", "self", ".", "update_gate", "(", "stacked_inputs", ")", ")", "\n", "reset", "=", "self", ".", "sigmoid", "(", "self", ".", "reset_gate", "(", "stacked_inputs", ")", ")", "\n", "out_inputs", "=", "self", ".", "out_act", "(", "self", ".", "out_gate", "(", "torch", ".", "cat", "(", "[", "input_", ",", "prev_state", "*", "reset", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# out_inputs = self.out_act(self.out_gate(torch.cat([input_,", "\n", "#prev_state], dim=1))) ", "\n", "#                                  prev_state * reset], dim=1)))", "\n", "\n", "new_state", "=", "prev_state", "*", "(", "1", "-", "update", ")", "+", "out_inputs", "*", "update", "\n", "\n", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.FC.__init__": [[282, 311], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "gain", "=", "2", "**", "(", "0.5", ")", ",", "\n", "use_wscale", "=", "False", ",", "\n", "lrmul", "=", "1.0", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n            The complete conversion of Dense/FC/Linear Layer of original\n            Tensorflow version.\n        \"\"\"", "\n", "\n", "super", "(", "FC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "he_std", "=", "gain", "*", "in_channels", "**", "(", "-", "0.5", ")", "# He init", "\n", "\n", "if", "use_wscale", ":", "\n", "            ", "init_std", "=", "1.0", "/", "lrmul", "\n", "self", ".", "w_lrmul", "=", "he_std", "*", "lrmul", "\n", "", "else", ":", "\n", "            ", "init_std", "=", "he_std", "/", "lrmul", "\n", "self", ".", "w_lrmul", "=", "lrmul", "\n", "\n", "", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "out_channels", ",", "in_channels", ")", "*", "init_std", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "self", ".", "b_lrmul", "=", "lrmul", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.FC.forward": [[312, 322], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "x", ",", "\n", "self", ".", "weight", "*", "self", ".", "w_lrmul", ",", "\n", "self", ".", "bias", "*", "self", ".", "b_lrmul", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "w_lrmul", ")", "\n", "\n", "", "out", "=", "F", ".", "leaky_relu", "(", "out", ",", "0.2", ",", "inplace", "=", "True", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Flatten.__init__": [[325, 327], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Flatten.forward": [[328, 330], ["x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Concatenate.__init__": [[332, 335], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "Concatenate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Concatenate.forward": [[336, 338], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "x", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.init_block.__init__": [[343, 354], ["torch.Module.__init__", "ConstantInput", "equal_lr", "AdaptiveINstanceNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NoiseInjection"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "style_dim", "=", "512", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chan", "=", "in_channel", "\n", "self", ".", "out_chan", "=", "out_channel", "\n", "self", ".", "style_dim", "=", "style_dim", "\n", "\n", "self", ".", "init_const", "=", "ConstantInput", "(", "in_channel", ")", "\n", "self", ".", "init_noise", "=", "equal_lr", "(", "NoiseInjection", "(", "out_channel", ")", ")", "\n", "self", ".", "adain", "=", "AdaptiveINstanceNorm", "(", "out_channel", ",", "style_dim", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.init_block.forward": [[355, 363], ["block.init_block.init_const", "block.init_block.init_noise", "block.init_block.adain", "block.init_block.lrelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "style", ",", "noise", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "init_const", "(", "x", ")", "\n", "output", "=", "self", ".", "init_noise", "(", "output", ",", "noise", ")", "\n", "output", "=", "self", ".", "adain", "(", "output", ",", "style", ")", "\n", "output", "=", "self", ".", "lrelu", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.ResBlock.__init__": [[368, 383], ["torch.Module.__init__", "block.ConvBlock", "block.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "enc_num", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "ConvBlock", "(", "enc_num", ",", "enc_num", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "self", ".", "conv2", "=", "ConvBlock", "(", "enc_num", ",", "enc_num", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.ResBlock.forward": [[384, 389], ["block.ResBlock.conv1", "block.ResBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "out", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Preact_ResBlock.__init__": [[391, 406], ["torch.Module.__init__", "block.Preact_ConvBlock", "block.Preact_ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "enc_num", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Preact_ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "Preact_ConvBlock", "(", "enc_num", ",", "enc_num", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "self", ".", "conv2", "=", "Preact_ConvBlock", "(", "enc_num", ",", "enc_num", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Preact_ResBlock.forward": [[407, 412], ["block.Preact_ResBlock.conv1", "block.Preact_ResBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "out", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Preact_ResBlock_avg_pool.__init__": [[414, 438], ["torch.Module.__init__", "block.PONO", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "block.Preact_ConvBlock", "block.Preact_ConvBlock", "block.Preact_ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "\n", "        ", "super", "(", "Preact_ResBlock_avg_pool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pono", "=", "PONO", "(", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "self", ".", "conv1", "=", "Preact_ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "self", ".", "conv2", "=", "Preact_ConvBlock", "(", "output_chan", ",", "output_chan", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "\n", "self", ".", "residual", "=", "Preact_ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'none'", ")", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Preact_ResBlock_avg_pool.forward": [[439, 457], ["block.Preact_ResBlock_avg_pool.pono", "block.Preact_ResBlock_avg_pool.residual", "block.Preact_ResBlock_avg_pool.conv1", "block.Preact_ResBlock_avg_pool.conv2", "block.Preact_ResBlock_avg_pool.avgpool", "block.Preact_ResBlock_avg_pool.avgpool", "block.Preact_ResBlock_avg_pool.avgpool", "block.Preact_ResBlock_avg_pool.residual", "block.Preact_ResBlock_avg_pool.conv1", "block.Preact_ResBlock_avg_pool.conv2", "block.Preact_ResBlock_avg_pool.avgpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm", "==", "'pono'", ":", "\n", "            ", "out", ",", "mean", ",", "std", "=", "self", ".", "pono", "(", "x", ")", "\n", "residual", "=", "self", ".", "residual", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", "+", "residual", ")", "\n", "mean", "=", "self", ".", "avgpool", "(", "mean", ")", "\n", "std", "=", "self", ".", "avgpool", "(", "std", ")", "\n", "return", "out", ",", "mean", ",", "std", "\n", "\n", "", "else", ":", "\n", "            ", "residual", "=", "self", ".", "residual", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "x", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", "+", "residual", ")", "\n", "return", "x", "+", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Preact_ResBlock_upsample.__init__": [[460, 482], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "block.Preact_ConvBlock", "block.Preact_ConvBlock", "block.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Preact_ResBlock_upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "conv1", "=", "Preact_ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "self", ".", "conv2", "=", "Preact_ConvBlock", "(", "output_chan", ",", "output_chan", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "\n", "self", ".", "residual", "=", "ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Preact_ResBlock_upsample.forward": [[483, 489], ["block.Preact_ResBlock_upsample.up", "block.Preact_ResBlock_upsample.residual", "block.Preact_ResBlock_upsample.conv1", "block.Preact_ResBlock_upsample.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "residual", "=", "self", ".", "residual", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "out", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Preact_DoubleBlock.__init__": [[491, 506], ["torch.Module.__init__", "block.Preact_ConvBlock", "block.Preact_ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Preact_DoubleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "Preact_ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "self", ".", "conv2", "=", "Preact_ConvBlock", "(", "output_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Preact_DoubleBlock.forward": [[507, 511], ["block.Preact_DoubleBlock.conv1", "block.Preact_DoubleBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.DoubleBlock.__init__": [[513, 537], ["torch.Module.__init__", "block.ConvBlock", "block.ConvBlock", "block.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "style_num", "=", "3", ",", "\n", "first_norm", "=", "'spec'", ",", "second_norm", "=", "'in'", ",", "\n", "first_act", "=", "'relu'", ",", "second_act", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "DoubleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "first_kernel", "==", "3", ":", "\n", "            ", "self", ".", "conv1", "=", "ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "norm", "=", "first_norm", ",", "activation", "=", "first_act", ",", "style_num", "=", "style_num", ")", "\n", "", "elif", "first_kernel", "==", "1", ":", "\n", "            ", "self", ".", "conv1", "=", "ConvBlock", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "norm", "=", "first_norm", ",", "activation", "=", "first_act", ",", "style_num", "=", "style_num", ")", "\n", "\n", "", "self", ".", "conv2", "=", "ConvBlock", "(", "output_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "second_kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "norm", "=", "second_norm", ",", "activation", "=", "second_act", ",", "style_num", "=", "style_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.DoubleBlock.forward": [[538, 542], ["block.DoubleBlock.conv1", "block.DoubleBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "style_id", "=", "0", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ",", "style_id", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "style_id", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Double_GRU.__init__": [[544, 559], ["torch.Module.__init__", "block.ConvGRUCell", "block.ConvGRUCell"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'spec'", ",", "\n", "first_act", "=", "'relu'", ",", "second_act", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Double_GRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_gru", "=", "ConvGRUCell", "(", "input_chan", "=", "input_chan", ",", "\n", "hidden_chan", "=", "output_chan", ",", "\n", "kernel_size", "=", "first_kernel", ")", "\n", "\n", "self", ".", "conv_gru2", "=", "ConvGRUCell", "(", "input_chan", "=", "input_chan", ",", "\n", "hidden_chan", "=", "output_chan", ",", "\n", "kernel_size", "=", "second_kernel", ")", "\n", "\n", "self", ".", "hidden_1", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Double_GRU.forward": [[560, 567], ["block.Double_GRU.conv_gru", "block.Double_GRU.conv_gru2", "block.Double_GRU.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv_gru", "(", "x", ",", "self", ".", "hidden_1", ")", "\n", "x", "=", "self", ".", "conv_gru2", "(", "x", ",", "self", ".", "hidden_1", ")", "\n", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Recurrent_unit.__init__": [[569, 581], ["torch.Module.__init__", "block.ConvGRUCell", "block.DoubleBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "3", ",", "\n", "norm", "=", "'in'", ",", "act", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "Recurrent_unit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gru_block", "=", "ConvGRUCell", "(", "input_chan", ",", "output_chan", ",", "\n", "kernel_size", "=", "kernel_size", ")", "\n", "\n", "self", ".", "conv_block", "=", "DoubleBlock", "(", "output_chan", ",", "output_chan", ",", "\n", "first_kernel", "=", "kernel_size", ",", "second_kernel", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "first_norm", "=", "norm", ",", "second_norm", "=", "norm", ",", "\n", "first_act", "=", "act", ",", "second_act", "=", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.Recurrent_unit.forward": [[583, 588], ["block.Recurrent_unit.gru_block", "block.Recurrent_unit.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_x", ",", "hidden", "=", "None", ")", ":", "\n", "        ", "hidden", "=", "self", ".", "gru_block", "(", "in_x", ",", "hidden", ")", "\n", "x", "=", "self", ".", "conv_block", "(", "hidden", ")", "\n", "\n", "return", "x", ",", "hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.init_linear": [[19, 22], ["torch.nn.init.xavier_normal", "linear.bias.data.zero_"], "function", ["None"], ["def", "init_linear", "(", "linear", ")", ":", "\n", "    ", "init", ".", "xavier_normal", "(", "linear", ".", "weight", ")", "\n", "linear", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.block.init_conv": [[24, 28], ["torch.nn.init.kaiming_normal", "conv.bias.data.zero_"], "function", ["None"], ["", "def", "init_conv", "(", "conv", ",", "glu", "=", "True", ")", ":", "\n", "    ", "init", ".", "kaiming_normal", "(", "conv", ".", "weight", ")", "\n", "if", "conv", ".", "bias", "is", "not", "None", ":", "\n", "        ", "conv", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.Generator_up.__init__": [[13, 65], ["torch.Module.__init__", "range", "utils.block.Recurrent_unit", "range", "utils.block.ConvBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.block.ConvBlock", "utils.block.DoubleBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "utils.block.DoubleBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", "=", "3", ",", "nf", "=", "64", ",", "ndown", "=", "5", ",", "nintermediate", "=", "1", ",", "style_num", "=", "0", ")", ":", "\n", "        ", "super", "(", "Generator_up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "init_layers", "=", "[", "]", "\n", "init_layers", "+=", "[", "ConvBlock", "(", "in_ch", ",", "nf", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'swish'", ")", "]", "\n", "\n", "down_layers", "=", "[", "]", "\n", "for", "down", "in", "range", "(", "ndown", ")", ":", "\n", "            ", "down_layers", "+=", "[", "DoubleBlock", "(", "nf", ",", "nf", "*", "2", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'none'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "\n", "down_layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "2", ")", "]", "\n", "nf", "=", "nf", "*", "2", "\n", "\n", "#inter_layers = []", "\n", "#for inter in range(nintermediate):", "\n", "#    inter_layers += [Recurrent_unit(nf,nf,kernel_size=3, ", "\n", "#                     norm = 'none', act = 'swish')]", "\n", "#inter_layers += [ConvGRUCell(nf, nf, kernel_size=3)]", "\n", "#ConvBlock(nf, nf, kernel_size=3, stride =1, padding=1, norm = 'none', activation = 'swish')]", "\n", "\n", "", "self", ".", "inter_layers", "=", "Recurrent_unit", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "\n", "norm", "=", "'none'", ",", "act", "=", "'swish'", ")", "\n", "\n", "up_layers", "=", "[", "]", "\n", "for", "up", "in", "range", "(", "ndown", ")", ":", "\n", "            ", "up_layers", "+=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "]", "\n", "up_layers", "+=", "[", "DoubleBlock", "(", "nf", "*", "2", ",", "nf", "//", "2", ",", "\n", "first_kernel", "=", "1", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "style_num", "=", "style_num", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'cin'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "nf", "//=", "2", "\n", "\n", "\n", "", "self", ".", "out_conv", "=", "ConvBlock", "(", "nf", "*", "2", ",", "3", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'tanh'", ")", "\n", "#self.final_conv = ConvBlock(6,3,", "\n", "#                   kernel_size=3, stride=1, padding= 1,", "\n", "#                   norm = 'none', activation = 'tanh')", "\n", "\n", "\n", "self", ".", "init_layers", "=", "nn", ".", "Sequential", "(", "*", "init_layers", ")", "\n", "self", ".", "down_layers", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "\n", "#self.inter_layers = nn.Sequential(*inter_layers)", "\n", "self", ".", "up_layers", "=", "nn", ".", "Sequential", "(", "*", "up_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.Generator_up.forward": [[66, 106], ["GRU_model.Generator_up.init_layers", "list", "list.append", "list.reverse", "GRU_model.Generator_up.inter_layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "GRU_model.Generator_up.out_conv", "isinstance", "isinstance", "down_block", "list.append", "down_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "up_block", "up_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_x", ",", "style_id", "=", "0", ",", "hidden", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "init_layers", "(", "in_x", ")", "\n", "\n", "#stats = list()", "\n", "down_list", "=", "list", "(", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "for", "down_block", "in", "self", ".", "down_layers", ":", "\n", "#out, mean, std = down_block(out)          ", "\n", "#stats.append((mean,std))", "\n", "            ", "if", "isinstance", "(", "down_block", ",", "nn", ".", "AvgPool2d", ")", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ")", "\n", "\n", "\n", "#stats.reverse()", "\n", "", "", "down_list", ".", "reverse", "(", ")", "\n", "out", ",", "hidden", "=", "self", ".", "inter_layers", "(", "out", ",", "hidden", ")", "\n", "\n", "i", "=", "0", "\n", "for", "up_block", "in", "self", ".", "up_layers", ":", "\n", "            ", "if", "isinstance", "(", "up_block", ",", "nn", ".", "Upsample", ")", ":", "\n", "#beta, gamma = stats[i]", "\n", "#out = out*gamma + beta", "\n", "                ", "skip", "=", "down_list", "[", "i", "]", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "skip", "]", ",", "1", ")", "\n", "out", "=", "up_block", "(", "out", ")", "\n", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "out", "=", "up_block", "(", "out", ",", "style_id", ")", "\n", "\n", "", "", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "down_list", "[", "i", "]", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "out_conv", "(", "out", ")", "\n", "out", "=", "(", "out", "+", "in_x", ")", "/", "2", "\n", "#out = torch.cat([in_x,out], 1)", "\n", "#out = self.final_conv(out)", "\n", "\n", "return", "out", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.Generator_up.masking_up": [[107, 124], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "masking_up", "(", "self", ",", "prediction", ",", "in_x", ")", ":", "\n", "        ", "thresh", "=", "0.95", "\n", "slope", "=", "4", "\n", "\n", "denorm_x", "=", "in_x", "/", "2", "+", "0.5", "\n", "denorm_x", "=", "torch", ".", "clamp", "(", "denorm_x", ",", "0", ",", "1", ")", "\n", "\n", "alpha", "=", "torch", ".", "where", "(", "denorm_x", ">", "thresh", ",", "\n", "(", "1", "-", "denorm_x", ")", "/", "slope", ",", "\n", "(", "slope", "-", "2", "*", "(", "1", "-", "thresh", ")", ")", "/", "(", "slope", "*", "(", "1", "-", "2", "*", "thresh", ")", ")", "*", "(", "denorm_x", "-", "thresh", ")", "+", "(", "1", "-", "thresh", ")", "/", "slope", ")", "\n", "alpha", "=", "torch", ".", "where", "(", "denorm_x", "<", "(", "1", "-", "thresh", ")", ",", "\n", "-", "(", "alpha", "-", "(", "1", "-", "thresh", ")", ")", "/", "slope", "+", "(", "1", "-", "thresh", "/", "slope", ")", ",", "\n", "alpha", ")", "\n", "\n", "#prediction = torch.exp(prediction)", "\n", "output", "=", "torch", ".", "cat", "(", "[", "alpha", ",", "prediction", "]", ",", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.Generator_down.__init__": [[126, 176], ["torch.Module.__init__", "range", "utils.block.Recurrent_unit", "range", "utils.block.ConvBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.block.ConvBlock", "utils.block.DoubleBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "utils.block.DoubleBlock"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", "=", "3", ",", "nf", "=", "64", ",", "ndown", "=", "5", ",", "nintermediate", "=", "1", ",", "style_num", "=", "0", ")", ":", "\n", "        ", "super", "(", "Generator_down", ",", "self", ")", ".", "__init__", "(", ")", "\n", "init_layers", "=", "[", "]", "\n", "init_layers", "+=", "[", "ConvBlock", "(", "in_ch", ",", "nf", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'swish'", ")", "]", "\n", "\n", "down_layers", "=", "[", "]", "\n", "for", "down", "in", "range", "(", "ndown", ")", ":", "\n", "\n", "            ", "down_layers", "+=", "[", "DoubleBlock", "(", "nf", ",", "nf", "*", "2", ",", "\n", "first_kernel", "=", "3", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'none'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "\n", "down_layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "2", ")", "]", "\n", "nf", "=", "nf", "*", "2", "\n", "\n", "", "self", ".", "inter_layers", "=", "Recurrent_unit", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "\n", "norm", "=", "'none'", ",", "act", "=", "'swish'", ")", "\n", "#inter_layers = []", "\n", "#for inter in range(nintermediate):", "\n", "#    inter_layers += [Recurrent_unit(nf,nf,kernel_size=3, norm = 'none', act = 'swish')]", "\n", "\n", "#inter_layers += [ConvGRUCell(nf, nf, kernel_size=3)]", "\n", "#ConvBlock(nf, nf, kernel_size=3, stride =1, padding=1, norm = 'none'  activation = 'swish')]", "\n", "\n", "up_layers", "=", "[", "]", "\n", "for", "up", "in", "range", "(", "ndown", ")", ":", "\n", "            ", "up_layers", "+=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "]", "\n", "up_layers", "+=", "[", "DoubleBlock", "(", "nf", "*", "2", ",", "nf", "//", "2", ",", "\n", "first_kernel", "=", "1", ",", "second_kernel", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "style_num", "=", "style_num", ",", "\n", "first_norm", "=", "'none'", ",", "second_norm", "=", "'cin'", ",", "\n", "first_act", "=", "'swish'", ",", "second_act", "=", "'swish'", ")", "]", "\n", "nf", "//=", "2", "\n", "\n", "\n", "", "self", ".", "out_conv", "=", "ConvBlock", "(", "nf", "*", "2", ",", "3", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "norm", "=", "'none'", ",", "activation", "=", "'tanh'", ")", "\n", "#self.final_conv = ConvBlock(6,3,", "\n", "#                   kernel_size=3, stride=1, padding= 1,", "\n", "#                   norm = 'none', activation = 'tanh')", "\n", "\n", "self", ".", "init_layers", "=", "nn", ".", "Sequential", "(", "*", "init_layers", ")", "\n", "self", ".", "down_layers", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "#self.inter_layers = nn.Sequential(*inter_layers)", "\n", "self", ".", "up_layers", "=", "nn", ".", "Sequential", "(", "*", "up_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.Generator_down.forward": [[177, 213], ["GRU_model.Generator_down.init_layers", "list", "list.append", "list.reverse", "GRU_model.Generator_down.inter_layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "GRU_model.Generator_down.out_conv", "isinstance", "isinstance", "down_block", "list.append", "down_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "up_block", "up_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_x", ",", "style_id", "=", "0", ",", "hidden", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "init_layers", "(", "in_x", ")", "\n", "\n", "#stats = list()", "\n", "down_list", "=", "list", "(", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "for", "down_block", "in", "self", ".", "down_layers", ":", "\n", "#out, mean, std = down_block(out)", "\n", "#stats.append((mean,std))", "\n", "            ", "if", "isinstance", "(", "down_block", ",", "nn", ".", "AvgPool2d", ")", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ")", "\n", "down_list", ".", "append", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "down_block", "(", "out", ")", "\n", "\n", "#stats.reverse()", "\n", "", "", "down_list", ".", "reverse", "(", ")", "\n", "out", ",", "hidden", "=", "self", ".", "inter_layers", "(", "out", ",", "hidden", ")", "\n", "\n", "i", "=", "0", "\n", "for", "up_block", "in", "self", ".", "up_layers", ":", "\n", "            ", "if", "isinstance", "(", "up_block", ",", "nn", ".", "Upsample", ")", ":", "\n", "                ", "skip", "=", "down_list", "[", "i", "]", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "skip", "]", ",", "1", ")", "\n", "out", "=", "up_block", "(", "out", ")", "\n", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "out", "=", "up_block", "(", "out", ",", "style_id", ")", "\n", "\n", "", "", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "down_list", "[", "i", "]", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "out_conv", "(", "out", ",", "style_id", ")", "\n", "#out = torch.cat([in_x, out], 1)", "\n", "#out = self.final_conv(out)", "\n", "out", "=", "(", "out", "+", "in_x", ")", "/", "2", "\n", "return", "out", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.Generator_down.masking_down": [[215, 231], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "masking_down", "(", "self", ",", "prediction", ",", "in_x", ")", ":", "\n", "        ", "thresh", "=", "0.05", "\n", "slope", "=", "4", "\n", "denorm_x", "=", "in_x", "/", "2", "+", "0.5", "\n", "denorm_x", "=", "torch", ".", "clamp", "(", "denorm_x", ",", "0", ",", "1", ")", "\n", "#alpha,_ = torch.max(denorm_x, dim= 1)", "\n", "\n", "alpha", "=", "torch", ".", "where", "(", "denorm_x", "<", "thresh", ",", "\n", "(", "thresh", "-", "denorm_x", ")", "/", "slope", ",", "\n", "(", "1", "-", "2", "*", "thresh", "/", "slope", ")", "/", "(", "(", "1", "-", "2", "*", "thresh", ")", ")", "*", "(", "denorm_x", "-", "thresh", ")", "+", "thresh", "/", "slope", ")", "\n", "alpha", "=", "torch", ".", "where", "(", "denorm_x", ">", "(", "1", "-", "thresh", ")", ",", "\n", "(", "alpha", "-", "(", "1", "-", "thresh", ")", ")", "/", "slope", "+", "(", "1", "-", "thresh", "/", "slope", ")", ",", "\n", "alpha", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "[", "alpha", ",", "prediction", "]", ",", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__": [[234, 258], ["torch.Module.__init__", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "utils.block.ConvBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.block.ConvBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", "=", "6", ",", "nf", "=", "64", ")", ":", "\n", "        ", "super", "(", "discrim", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_downs", "=", "4", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "ConvBlock", "(", "in_ch", ",", "nf", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "norm", "=", "'none'", ",", "\n", "activation", "=", "'none'", ")", ")", "\n", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "2", ")", "]", "\n", "\n", "dim", "=", "nf", "\n", "for", "n_down", "in", "range", "(", "n_downs", ")", ":", "\n", "            ", "layers", "+=", "[", "ConvBlock", "(", "dim", ",", "dim", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "norm", "=", "'none'", ",", "\n", "activation", "=", "'leaky'", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "2", ")", "]", "\n", "dim", "=", "dim", "*", "2", "\n", "\n", "", "self", ".", "body_net", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "dim", ",", "1", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JungHeeKim29_DiffHDRsyn.model.GRU_model.discrim.forward": [[259, 265], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "GRU_model.discrim.body_net", "GRU_model.discrim.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_x", ",", "pred_ev", ")", ":", "\n", "        ", "in_x", "=", "torch", ".", "cat", "(", "[", "in_x", ",", "pred_ev", "]", ",", "1", ")", "\n", "\n", "output", "=", "self", ".", "body_net", "(", "in_x", ")", "\n", "output", "=", "self", ".", "conv1", "(", "output", ")", "\n", "return", "output", "\n", "\n"]]}