{"home.repos.pwc.inspect_result.canqin001_PointDAN.None.visualize_sample.mkdir": [[7, 18], ["os.path.exists", "os.makedirs", "print", "print", "print"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "\n", "    ", "folder", "=", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "\n", "if", "not", "folder", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "print", "(", "\"---  new folder...  ---\"", ")", "\n", "print", "(", "\"---  OK  ---\"", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"---  There is this folder!  ---\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.visualize_sample.draw_pc": [[20, 32], ["matplotlib.pyplot.figure().add_subplot", "plt.figure().add_subplot.scatter", "plt.figure().add_subplot.grid", "matplotlib.pyplot.close", "matplotlib.pyplot.show", "visualize_sample.mkdir", "matplotlib.pyplot.savefig", "matplotlib.pyplot.figure", "str"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.visualize_sample.mkdir"], ["", "", "def", "draw_pc", "(", "pc", ",", "show", "=", "False", ",", "save_dir", "=", "None", ")", ":", "\n", "    ", "ax", "=", "plt", ".", "figure", "(", ")", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "scatter", "(", "pc", "[", ":", ",", "0", "]", ",", "pc", "[", ":", ",", "1", "]", ",", "pc", "[", ":", ",", "2", "]", ",", "marker", "=", "'.'", ")", "\n", "ax", ".", "grid", "(", "False", ")", "\n", "# ax.axis('off')", "\n", "if", "show", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "if", "save_dir", "is", "not", "None", ":", "\n", "        ", "mkdir", "(", "save_dir", ")", "\n", "save_dir", "=", "save_dir", "+", "'/'", "+", "str", "(", "i", ")", "+", "'.jpg'", "\n", "plt", ".", "savefig", "(", "save_dir", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "", "for", "dataset", "in", "[", "'shapenet'", ",", "'scannet'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.model_utils.conv_2d.__init__": [[7, 26], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Tanh", "torch.Tanh", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "kernel", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "conv_2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "kernel", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "kernel", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "", "elif", "activation", "==", "'leakyrelu'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "kernel", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.model_utils.conv_2d.forward": [[29, 32], ["model_utils.conv_2d.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.model_utils.fc_layer.__init__": [[35, 51], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "bn", "=", "True", ",", "activation", "=", "'leakyrelu'", ")", ":", "\n", "        ", "super", "(", "fc_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "ac", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'leakyrelu'", ":", "\n", "            ", "self", ".", "ac", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "", "if", "bn", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_ch", ",", "out_ch", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_ch", ")", ",", "\n", "self", ".", "ac", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_ch", ",", "out_ch", ")", ",", "\n", "self", ".", "ac", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.model_utils.fc_layer.forward": [[53, 56], ["model_utils.fc_layer.fc"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.model_utils.transform_net.__init__": [[60, 70], ["torch.Module.__init__", "model_utils.conv_2d", "model_utils.conv_2d", "model_utils.conv_2d", "torch.MaxPool2d", "torch.MaxPool2d", "model_utils.fc_layer", "model_utils.fc_layer", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "K", "=", "3", ")", ":", "\n", "        ", "super", "(", "transform_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "conv2d1", "=", "conv_2d", "(", "in_ch", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv_2d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv2d3", "=", "conv_2d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "512", ",", "1", ")", ")", "\n", "self", ".", "fc1", "=", "fc_layer", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "fc_layer", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "K", "*", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.model_utils.transform_net.forward": [[73, 88], ["model_utils.transform_net.conv2d1", "model_utils.transform_net.conv2d2", "model_utils.transform_net.conv2d3", "torch.max", "torch.max", "torch.max", "torch.max", "x.view.view.view", "model_utils.transform_net.fc1", "model_utils.transform_net.fc2", "model_utils.transform_net.fc3", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "iden.to.to.to", "x.view.view.view", "x.view.view.size", "x.view.view.size", "x.view.view.size", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d3", "(", "x", ")", "\n", "x", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "torch", ".", "eye", "(", "self", ".", "K", ")", ".", "view", "(", "1", ",", "self", ".", "K", "*", "self", ".", "K", ")", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "iden", "=", "iden", ".", "to", "(", "device", "=", "'cuda'", ")", "\n", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "K", ",", "self", ".", "K", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.model_utils.adapt_layer_off.__init__": [[92, 101], ["torch.Module.__init__", "model_utils.conv_2d", "torch.Sequential", "torch.Sequential", "model_utils.conv_2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_node", "=", "64", ",", "offset_dim", "=", "3", ",", "trans_dim_in", "=", "64", ",", "trans_dim_out", "=", "64", ",", "fc_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "adapt_layer_off", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_node", "=", "num_node", "\n", "self", ".", "offset_dim", "=", "offset_dim", "\n", "self", ".", "trans", "=", "conv_2d", "(", "trans_dim_in", ",", "trans_dim_out", ",", "1", ")", "\n", "self", ".", "pred_offset", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "trans_dim_out", ",", "offset_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "residual", "=", "conv_2d", "(", "trans_dim_in", ",", "fc_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.model_utils.adapt_layer_off.forward": [[102, 128], ["point_utils.farthest_point_sample", "point_utils.index_points", "point_utils.index_points", "point_utils.query_ball_point", "point_utils.index_points", "model_utils.adapt_layer_off.pred_offset", "point_utils.index_points", "point_utils.query_ball_point", "model_utils.adapt_layer_off.residual", "point_utils.index_points", "torch.max", "torch.max", "torch.max", "torch.max", "point_utils.upsample_inter().unsqueeze", "point_utils.index_points.unsqueeze().expand", "point_utils.index_points.unsqueeze().expand", "node_offset.squeeze", "point_utils.upsample_inter", "point_utils.index_points.unsqueeze", "point_utils.index_points.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.farthest_point_sample", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.index_points", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.index_points", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.query_ball_point", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.index_points", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.index_points", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.query_ball_point", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.index_points", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.upsample_inter"], ["", "def", "forward", "(", "self", ",", "input_fea", ",", "input_loc", ")", ":", "\n", "# Initialize node", "\n", "        ", "fpoint_idx", "=", "point_utils", ".", "farthest_point_sample", "(", "input_loc", ",", "self", ".", "num_node", ")", "# (B, num_node)", "\n", "fpoint_loc", "=", "point_utils", ".", "index_points", "(", "input_loc", ",", "fpoint_idx", ")", "# (B, 3, num_node)", "\n", "fpoint_fea", "=", "point_utils", ".", "index_points", "(", "input_fea", ",", "fpoint_idx", ")", "# (B, C, num_node)", "\n", "group_idx", "=", "point_utils", ".", "query_ball_point", "(", "0.3", ",", "64", ",", "input_loc", ",", "fpoint_loc", ")", "# (B, num_node, 64)", "\n", "group_fea", "=", "point_utils", ".", "index_points", "(", "input_fea", ",", "group_idx", ")", "# (B, C, num_node, 64)", "\n", "group_fea", "=", "group_fea", "-", "fpoint_fea", ".", "unsqueeze", "(", "3", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "self", ".", "num_node", ")", "\n", "\n", "# Learn node offset", "\n", "seman_trans", "=", "self", ".", "pred_offset", "(", "group_fea", ")", "# (B, 3, num_node, 64)", "\n", "group_loc", "=", "point_utils", ".", "index_points", "(", "input_loc", ",", "group_idx", ")", "# (B, 3, num_node, 64)", "\n", "group_loc", "=", "group_loc", "-", "fpoint_loc", ".", "unsqueeze", "(", "3", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "self", ".", "num_node", ")", "\n", "node_offset", "=", "(", "seman_trans", "*", "group_loc", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# Update node and get node feature", "\n", "node_loc", "=", "fpoint_loc", "+", "node_offset", ".", "squeeze", "(", "-", "1", ")", "# (B,3,num_node)", "\n", "group_idx", "=", "point_utils", ".", "query_ball_point", "(", "None", ",", "64", ",", "input_loc", ",", "node_loc", ")", "\n", "residual_fea", "=", "self", ".", "residual", "(", "input_fea", ")", "\n", "group_fea", "=", "point_utils", ".", "index_points", "(", "residual_fea", ",", "group_idx", ")", "\n", "node_fea", ",", "_", "=", "torch", ".", "max", "(", "group_fea", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# Interpolated back to original point", "\n", "output_fea", "=", "point_utils", ".", "upsample_inter", "(", "input_loc", ",", "node_loc", ",", "input_fea", ",", "node_fea", ",", "k", "=", "3", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "return", "output_fea", ",", "node_fea", ",", "node_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.normal_pc": [[3, 14], ["pc.mean", "numpy.max", "numpy.sqrt", "numpy.sum", "abs"], "function", ["None"], ["def", "normal_pc", "(", "pc", ")", ":", "\n", "    ", "\"\"\"\n    normalize point cloud in range L\n    :param pc: type list\n    :return: type list\n    \"\"\"", "\n", "pc_mean", "=", "pc", ".", "mean", "(", "axis", "=", "0", ")", "\n", "pc", "=", "pc", "-", "pc_mean", "\n", "pc_L_max", "=", "np", ".", "max", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "abs", "(", "pc", "**", "2", ")", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "pc", "=", "pc", "/", "pc_L_max", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.rotation_point_cloud": [[15, 39], ["numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "pc.reshape", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotation_point_cloud", "(", "pc", ")", ":", "\n", "    ", "\"\"\"\n    Randomly rotate the point clouds to augment the dataset\n    rotation is per shape based along up direction\n    :param pc: B X N X 3 array, original batch of point clouds\n    :return: BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "# rotated_data = np.zeros(pc.shape, dtype=np.float32)", "\n", "\n", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "# rotation_matrix = np.array([[cosval, 0, sinval],", "\n", "#                             [0, 1, 0],", "\n", "#                             [-sinval, 0, cosval]])", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosval", ",", "-", "sinval", "]", ",", "\n", "[", "0", ",", "sinval", ",", "cosval", "]", "]", ")", "\n", "# rotation_matrix = np.array([[cosval, -sinval, 0],", "\n", "#                             [sinval, cosval, 0],", "\n", "#                             [0, 0, 1]])", "\n", "rotated_data", "=", "np", ".", "dot", "(", "pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "\n", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.rotate_point_cloud_by_angle": [[41, 60], ["numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "pc.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle", "(", "pc", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\"\n    Randomly rotate the point clouds to augment the dataset\n    rotation is per shape based along up direction\n    :param pc: B X N X 3 array, original batch of point clouds\n    :param rotation_angle: angle of rotation\n    :return: BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "# rotated_data = np.zeros(pc.shape, dtype=np.float32)", "\n", "\n", "# rotation_angle = np.random.uniform() * 2 * np.pi", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "rotated_data", "=", "np", ".", "dot", "(", "pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "\n", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.jitter_point_cloud": [[62, 73], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_point_cloud", "(", "pc", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "    ", "\"\"\"\n    Randomly jitter points. jittering is per point.\n    :param pc: B X N X 3 array, original batch of point clouds\n    :param sigma:\n    :param clip:\n    :return:\n    \"\"\"", "\n", "jittered_data", "=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "*", "pc", ".", "shape", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "jittered_data", "+=", "pc", "\n", "return", "jittered_data", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.shift_point_cloud": [[75, 86], ["numpy.random.uniform"], "function", ["None"], ["", "def", "shift_point_cloud", "(", "pc", ",", "shift_range", "=", "0.1", ")", ":", "\n", "    ", "\"\"\" Randomly shift point cloud. Shift is per point cloud.\n    Input:\n      BxNx3 array, original batch of point clouds\n    Return:\n      BxNx3 array, shifted batch of point clouds\n    \"\"\"", "\n", "N", ",", "C", "=", "pc", ".", "shape", "\n", "shifts", "=", "np", ".", "random", ".", "uniform", "(", "-", "shift_range", ",", "shift_range", ",", "3", ")", "\n", "pc", "+=", "shifts", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.random_scale_point_cloud": [[88, 99], ["numpy.random.uniform"], "function", ["None"], ["", "def", "random_scale_point_cloud", "(", "pc", ",", "scale_low", "=", "0.8", ",", "scale_high", "=", "1.25", ")", ":", "\n", "    ", "\"\"\" Randomly scale the point cloud. Scale is per point cloud.\n    Input:\n      BxNx3 array, original batch of point clouds\n    Return:\n      BxNx3 array, scaled batch of point clouds\n    \"\"\"", "\n", "N", ",", "C", "=", "pc", ".", "shape", "\n", "scales", "=", "np", ".", "random", ".", "uniform", "(", "scale_low", ",", "scale_high", ",", "1", ")", "\n", "pc", "*=", "scales", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.rotate_perturbation_point_cloud": [[101, 123], ["numpy.clip", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "shape_pc.reshape", "numpy.random.randn", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "rotate_perturbation_point_cloud", "(", "pc", ",", "angle_sigma", "=", "0.06", ",", "angle_clip", "=", "0.18", ")", ":", "\n", "    ", "\"\"\" Randomly perturb the point clouds by small rotations\n    Input:\n      BxNx3 array, original batch of point clouds\n    Return:\n      BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "# rotated_data = np.zeros(pc.shape, dtype=np.float32)", "\n", "angles", "=", "np", ".", "clip", "(", "angle_sigma", "*", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "-", "angle_clip", ",", "angle_clip", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R", "=", "np", ".", "dot", "(", "Rz", ",", "np", ".", "dot", "(", "Ry", ",", "Rx", ")", ")", "\n", "shape_pc", "=", "pc", "\n", "rotated_data", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "R", ")", "\n", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.pc_augment": [[125, 132], ["data_utils.rotation_point_cloud", "data_utils.jitter_point_cloud"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.rotation_point_cloud", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.jitter_point_cloud"], ["", "def", "pc_augment", "(", "pc", ")", ":", "\n", "    ", "pc", "=", "rotation_point_cloud", "(", "pc", ")", "\n", "pc", "=", "jitter_point_cloud", "(", "pc", ")", "\n", "# pc = random_scale_point_cloud(pc)", "\n", "#    pc = rotate_perturbation_point_cloud(pc)", "\n", "# pc = shift_point_cloud(pc)", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.model_pointnet.Pointnet_cls.__init__": [[6, 21], ["nn.Module.__init__", "model_utils.transform_net", "model_utils.transform_net", "model_utils.conv_2d", "model_utils.conv_2d", "model_utils.conv_2d", "model_utils.conv_2d", "model_utils.conv_2d", "model_utils.fc_layer", "nn.Dropout2d", "model_utils.fc_layer", "nn.Dropout2d", "nn.Linear"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", "=", "40", ")", ":", "\n", "        ", "super", "(", "Pointnet_cls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "trans_net1", "=", "transform_net", "(", "3", ",", "3", ")", "\n", "self", ".", "trans_net2", "=", "transform_net", "(", "64", ",", "64", ")", "\n", "self", ".", "conv1", "=", "conv_2d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "conv_2d", "(", "64", ",", "64", ",", "1", ")", "\n", "self", ".", "conv3", "=", "conv_2d", "(", "64", ",", "64", ",", "1", ")", "\n", "self", ".", "conv4", "=", "conv_2d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv5", "=", "conv_2d", "(", "128", ",", "1024", ",", "1", ")", "\n", "\n", "self", ".", "mlp1", "=", "fc_layer", "(", "1024", ",", "512", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.7", ")", "\n", "self", ".", "mlp2", "=", "fc_layer", "(", "512", ",", "256", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.7", ")", "\n", "self", ".", "mlp3", "=", "nn", ".", "Linear", "(", "256", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.model_pointnet.Pointnet_cls.forward": [[22, 56], ["model_pointnet.Pointnet_cls.size", "model_pointnet.Pointnet_cls.size", "model_pointnet.Pointnet_cls.trans_net1", "model_pointnet.Pointnet_cls.transpose", "model_pointnet.Pointnet_cls.squeeze", "torch.bmm", "model_pointnet.Pointnet_cls.unsqueeze", "model_pointnet.Pointnet_cls.transpose", "model_pointnet.Pointnet_cls.conv1", "model_pointnet.Pointnet_cls.conv2", "model_pointnet.Pointnet_cls.trans_net2", "model_pointnet.Pointnet_cls.transpose", "model_pointnet.Pointnet_cls.squeeze", "torch.bmm", "model_pointnet.Pointnet_cls.unsqueeze", "model_pointnet.Pointnet_cls.transpose", "model_pointnet.Pointnet_cls.conv3", "model_pointnet.Pointnet_cls.conv4", "model_pointnet.Pointnet_cls.conv5", "torch.max", "model_pointnet.Pointnet_cls.squeeze", "model_pointnet.Pointnet_cls.mlp1", "model_pointnet.Pointnet_cls.dropout1", "model_pointnet.Pointnet_cls.mlp2", "model_pointnet.Pointnet_cls.dropout2", "model_pointnet.Pointnet_cls.mlp3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adapt", "=", "False", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "point_num", "=", "x", ".", "size", "(", "2", ")", "\n", "\n", "transform", "=", "self", ".", "trans_net1", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "transform", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "3", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "transform", "=", "self", ".", "trans_net2", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "transform", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "3", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "#batchsize*1024", "\n", "if", "adapt", "==", "True", ":", "\n", "            ", "mid_feature", "=", "x", "\n", "", "x", "=", "self", ".", "mlp1", "(", "x", ")", "#batchsize*512", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "mlp2", "(", "x", ")", "#batchsize*256", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "x", "=", "self", ".", "mlp3", "(", "x", ")", "#batchsize*10", "\n", "if", "adapt", "==", "False", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "mid_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.train.main": [[55, 250], ["print", "print", "print", "len", "len", "len", "len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "Model.Net_MDA", "model.to.to", "torch.CrossEntropyLoss", "criterion.to.to", "torch.Adam", "torch.lr_scheduler.CosineAnnealingLR", "torch.Adam", "torch.lr_scheduler.CosineAnnealingLR", "torch.Adam", "torch.lr_scheduler.CosineAnnealingLR", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "time.time", "optim.lr_scheduler.CosineAnnealingLR.step", "optim.lr_scheduler.CosineAnnealingLR.step", "train.main.adjust_learning_rate"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'Start Training\\nInitiliazing\\n'", ")", "\n", "print", "(", "'src:'", ",", "args", ".", "source", ")", "\n", "print", "(", "'tar:'", ",", "args", ".", "target", ")", "\n", "\n", "# Data loading", "\n", "\n", "data_func", "=", "{", "'modelnet'", ":", "Modelnet40_data", ",", "'scannet'", ":", "Scannet_data_h5", ",", "'shapenet'", ":", "Shapenet_data", "}", "\n", "\n", "source_train_dataset", "=", "data_func", "[", "args", ".", "source", "]", "(", "pc_input_num", "=", "1024", ",", "status", "=", "'train'", ",", "aug", "=", "True", ",", "pc_root", "=", "dir_root", "+", "args", ".", "source", ")", "\n", "target_train_dataset1", "=", "data_func", "[", "args", ".", "target", "]", "(", "pc_input_num", "=", "1024", ",", "status", "=", "'train'", ",", "aug", "=", "True", ",", "pc_root", "=", "dir_root", "+", "args", ".", "target", ")", "\n", "source_test_dataset", "=", "data_func", "[", "args", ".", "source", "]", "(", "pc_input_num", "=", "1024", ",", "status", "=", "'test'", ",", "aug", "=", "False", ",", "pc_root", "=", "dir_root", "+", "args", ".", "source", ")", "\n", "target_test_dataset1", "=", "data_func", "[", "args", ".", "target", "]", "(", "pc_input_num", "=", "1024", ",", "status", "=", "'test'", ",", "aug", "=", "False", ",", "pc_root", "=", "dir_root", "+", "args", ".", "target", ")", "\n", "\n", "num_source_train", "=", "len", "(", "source_train_dataset", ")", "\n", "num_source_test", "=", "len", "(", "source_test_dataset", ")", "\n", "num_target_train1", "=", "len", "(", "target_train_dataset1", ")", "\n", "num_target_test1", "=", "len", "(", "target_test_dataset1", ")", "\n", "\n", "source_train_dataloader", "=", "DataLoader", "(", "source_train_dataset", ",", "batch_size", "=", "BATCH_SIZE", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "drop_last", "=", "True", ")", "\n", "source_test_dataloader", "=", "DataLoader", "(", "source_test_dataset", ",", "batch_size", "=", "BATCH_SIZE", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "drop_last", "=", "True", ")", "\n", "target_train_dataloader1", "=", "DataLoader", "(", "target_train_dataset1", ",", "batch_size", "=", "BATCH_SIZE", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "drop_last", "=", "True", ")", "\n", "target_test_dataloader1", "=", "DataLoader", "(", "target_test_dataset1", ",", "batch_size", "=", "BATCH_SIZE", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "drop_last", "=", "True", ")", "\n", "\n", "print", "(", "'num_source_train: {:d}, num_source_test: {:d}, num_target_test1: {:d} '", ".", "format", "(", "num_source_train", ",", "num_source_test", ",", "num_target_test1", ")", ")", "\n", "print", "(", "'batch_size:'", ",", "BATCH_SIZE", ")", "\n", "\n", "# Model", "\n", "\n", "model", "=", "Model", ".", "Net_MDA", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "remain_epoch", "=", "50", "\n", "\n", "# Optimizer", "\n", "\n", "params", "=", "[", "{", "'params'", ":", "v", "}", "for", "k", ",", "v", "in", "model", ".", "g", ".", "named_parameters", "(", ")", "if", "'pred_offset'", "not", "in", "k", "]", "\n", "\n", "optimizer_g", "=", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "LR", ",", "weight_decay", "=", "weight_decay", ")", "\n", "lr_schedule_g", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer_g", ",", "T_max", "=", "args", ".", "epochs", "+", "remain_epoch", ")", "\n", "\n", "optimizer_c", "=", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "model", ".", "c1", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "model", ".", "c2", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "LR", "*", "2", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "lr_schedule_c", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer_c", ",", "T_max", "=", "args", ".", "epochs", "+", "remain_epoch", ")", "\n", "\n", "optimizer_dis", "=", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "model", ".", "g", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "model", ".", "attention_s", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "model", ".", "attention_t", ".", "parameters", "(", ")", "}", "]", ",", "\n", "lr", "=", "LR", "*", "args", ".", "scaler", ",", "weight_decay", "=", "weight_decay", ")", "\n", "lr_schedule_dis", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer_dis", ",", "T_max", "=", "args", ".", "epochs", "+", "remain_epoch", ")", "\n", "\n", "\n", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Sets the learning rate to the initial LR decayed by half by every 5 or 10 epochs\"\"\"", "\n", "if", "epoch", ">", "0", ":", "\n", "            ", "if", "epoch", "<=", "30", ":", "\n", "                ", "lr", "=", "args", ".", "lr", "*", "args", ".", "scaler", "*", "(", "0.5", "**", "(", "epoch", "//", "5", ")", ")", "\n", "", "else", ":", "\n", "                ", "lr", "=", "args", ".", "lr", "*", "args", ".", "scaler", "*", "(", "0.5", "**", "(", "epoch", "//", "10", ")", ")", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "writer", ".", "add_scalar", "(", "'lr_dis'", ",", "lr", ",", "epoch", ")", "\n", "\n", "", "", "def", "discrepancy", "(", "out1", ",", "out2", ")", ":", "\n", "        ", "\"\"\"discrepancy loss\"\"\"", "\n", "out", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "F", ".", "softmax", "(", "out1", ",", "dim", "=", "-", "1", ")", "-", "F", ".", "softmax", "(", "out2", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "return", "out", "\n", "\n", "", "def", "make_variable", "(", "tensor", ",", "volatile", "=", "False", ")", ":", "\n", "        ", "\"\"\"Convert Tensor to Variable.\"\"\"", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "tensor", "=", "tensor", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "tensor", ",", "volatile", "=", "volatile", ")", "\n", "\n", "", "best_target_test_acc", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "max_epoch", ")", ":", "\n", "        ", "since_e", "=", "time", ".", "time", "(", ")", "\n", "\n", "lr_schedule_g", ".", "step", "(", "epoch", "=", "epoch", ")", "\n", "lr_schedule_c", ".", "step", "(", "epoch", "=", "epoch", ")", "\n", "adjust_learning_rate", "(", "optimizer_dis", ",", "epoch", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'lr_g'", ",", "lr_schedule_g", ".", "get_lr", "(", ")", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'lr_c'", ",", "lr_schedule_c", ".", "get_lr", "(", ")", "[", "0", "]", ",", "epoch", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "loss_total", "=", "0", "\n", "loss_adv_total", "=", "0", "\n", "loss_node_total", "=", "0", "\n", "correct_total", "=", "0", "\n", "data_total", "=", "0", "\n", "data_t_total", "=", "0", "\n", "cons", "=", "math", ".", "sin", "(", "(", "epoch", "+", "1", ")", "/", "max_epoch", "*", "math", ".", "pi", "/", "2", ")", "\n", "\n", "# Training", "\n", "\n", "for", "batch_idx", ",", "(", "batch_s", ",", "batch_t", ")", "in", "enumerate", "(", "zip", "(", "source_train_dataloader", ",", "target_train_dataloader1", ")", ")", ":", "\n", "\n", "            ", "data", ",", "label", "=", "batch_s", "\n", "data_t", ",", "label_t", "=", "batch_t", "\n", "\n", "data", "=", "data", ".", "to", "(", "device", "=", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "data_t", "=", "data_t", ".", "to", "(", "device", "=", "device", ")", "\n", "label_t", "=", "label_t", ".", "to", "(", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "\n", "pred_s1", ",", "pred_s2", "=", "model", "(", "data", ")", "\n", "pred_t1", ",", "pred_t2", "=", "model", "(", "data_t", ",", "constant", "=", "cons", ",", "adaptation", "=", "True", ")", "\n", "\n", "# Classification loss", "\n", "\n", "loss_s1", "=", "criterion", "(", "pred_s1", ",", "label", ")", "\n", "loss_s2", "=", "criterion", "(", "pred_s2", ",", "label", ")", "\n", "\n", "# Adversarial loss", "\n", "\n", "loss_adv", "=", "-", "1", "*", "discrepancy", "(", "pred_t1", ",", "pred_t2", ")", "\n", "\n", "loss_s", "=", "loss_s1", "+", "loss_s2", "\n", "loss", "=", "args", ".", "weight", "*", "loss_s", "+", "loss_adv", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer_g", ".", "step", "(", ")", "\n", "optimizer_c", ".", "step", "(", ")", "\n", "optimizer_g", ".", "zero_grad", "(", ")", "\n", "optimizer_c", ".", "zero_grad", "(", ")", "\n", "\n", "\n", "# Local Alignment", "\n", "\n", "feat_node_s", "=", "model", "(", "data", ",", "node_adaptation_s", "=", "True", ")", "\n", "feat_node_t", "=", "model", "(", "data_t", ",", "node_adaptation_t", "=", "True", ")", "\n", "sigma_list", "=", "[", "0.01", ",", "0.1", ",", "1", ",", "10", ",", "100", "]", "\n", "loss_node_adv", "=", "1", "*", "mmd", ".", "mix_rbf_mmd2", "(", "feat_node_s", ",", "feat_node_t", ",", "sigma_list", ")", "\n", "loss", "=", "loss_node_adv", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer_dis", ".", "step", "(", ")", "\n", "optimizer_dis", ".", "zero_grad", "(", ")", "\n", "\n", "loss_total", "+=", "loss_s", ".", "item", "(", ")", "*", "data", ".", "size", "(", "0", ")", "\n", "loss_adv_total", "+=", "loss_adv", ".", "item", "(", ")", "*", "data", ".", "size", "(", "0", ")", "\n", "loss_node_total", "+=", "loss_node_adv", ".", "item", "(", ")", "*", "data", ".", "size", "(", "0", ")", "\n", "data_total", "+=", "data", ".", "size", "(", "0", ")", "\n", "data_t_total", "+=", "data_t", ".", "size", "(", "0", ")", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'Train:{} [{} {}/{}  loss_s: {:.4f} \\t loss_adv: {:.4f} \\t loss_node_adv: {:.4f} \\t cons: {:.4f}]'", ".", "format", "(", "\n", "epoch", ",", "data_total", ",", "data_t_total", ",", "num_source_train", ",", "loss_total", "/", "data_total", ",", "\n", "loss_adv_total", "/", "data_total", ",", "loss_node_total", "/", "data_total", ",", "cons", "\n", ")", ")", "\n", "\n", "# Testing", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "loss_total", "=", "0", "\n", "correct_total", "=", "0", "\n", "data_total", "=", "0", "\n", "acc_class", "=", "torch", ".", "zeros", "(", "10", ",", "1", ")", "\n", "acc_to_class", "=", "torch", ".", "zeros", "(", "10", ",", "1", ")", "\n", "acc_to_all_class", "=", "torch", ".", "zeros", "(", "10", ",", "10", ")", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "target_test_dataloader1", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", "=", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "pred1", ",", "pred2", "=", "model", "(", "data", ")", "\n", "output", "=", "(", "pred1", "+", "pred2", ")", "/", "2", "\n", "loss", "=", "criterion", "(", "output", ",", "label", ")", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "\n", "loss_total", "+=", "loss", ".", "item", "(", ")", "*", "data", ".", "size", "(", "0", ")", "\n", "correct_total", "+=", "torch", ".", "sum", "(", "pred", "==", "label", ")", "\n", "data_total", "+=", "data", ".", "size", "(", "0", ")", "\n", "\n", "", "pred_loss", "=", "loss_total", "/", "data_total", "\n", "pred_acc", "=", "correct_total", ".", "double", "(", ")", "/", "data_total", "\n", "\n", "if", "pred_acc", ">", "best_target_test_acc", ":", "\n", "                ", "best_target_test_acc", "=", "pred_acc", "\n", "", "print", "(", "'Target 1:{} [overall_acc: {:.4f} \\t loss: {:.4f} \\t Best Target Acc: {:.4f}]'", ".", "format", "(", "\n", "epoch", ",", "pred_acc", ",", "pred_loss", ",", "best_target_test_acc", "\n", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'accs/target_test_acc'", ",", "pred_acc", ",", "epoch", ")", "\n", "\n", "\n", "", "time_pass_e", "=", "time", ".", "time", "(", ")", "-", "since_e", "\n", "print", "(", "'The {} epoch takes {:.0f}m {:.0f}s'", ".", "format", "(", "epoch", ",", "time_pass_e", "//", "60", ",", "time_pass_e", "%", "60", ")", ")", "\n", "print", "(", "args", ")", "\n", "print", "(", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.CALayer.__init__": [[8, 18], ["nn.Module.__init__", "nn.Sequential", "nn.BatchNorm1d", "nn.Conv2d", "nn.ReLU", "nn.Conv2d", "nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "8", ")", ":", "\n", "        ", "super", "(", "CALayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# feature channel downscale and upscale --> channel weight", "\n", "self", ".", "conv_du", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "reduction", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "reduction", ",", "channel", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "4096", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.CALayer.forward": [[19, 26], ["Model.CALayer.conv_du", "Model.CALayer.view", "Model.CALayer.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv_du", "(", "x", ")", "\n", "y", "=", "x", "*", "y", "+", "x", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "bn", "(", "y", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.GradReverse.__init__": [[29, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.GradReverse.forward": [[32, 34], ["x.view_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.GradReverse.backward": [[35, 37], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "return", "(", "grad_output", "*", "-", "self", ".", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.Pointnet_g.__init__": [[43, 54], ["nn.Module.__init__", "model_utils.transform_net", "model_utils.transform_net", "model_utils.conv_2d", "model_utils.conv_2d", "model_utils.adapt_layer_off", "model_utils.conv_2d", "model_utils.conv_2d", "nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Pointnet_g", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "trans_net1", "=", "transform_net", "(", "3", ",", "3", ")", "\n", "self", ".", "trans_net2", "=", "transform_net", "(", "64", ",", "64", ")", "\n", "self", ".", "conv1", "=", "conv_2d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "conv_2d", "(", "64", ",", "64", ",", "1", ")", "\n", "# SA Node Module", "\n", "self", ".", "conv3", "=", "adapt_layer_off", "(", ")", "# (64->128)", "\n", "self", ".", "conv4", "=", "conv_2d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv5", "=", "conv_2d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.Pointnet_g.forward": [[55, 89], ["Model.Pointnet_g.squeeze", "Model.Pointnet_g.trans_net1", "Model.Pointnet_g.transpose", "Model.Pointnet_g.squeeze", "torch.bmm", "Model.Pointnet_g.unsqueeze", "Model.Pointnet_g.transpose", "Model.Pointnet_g.conv1", "Model.Pointnet_g.conv2", "Model.Pointnet_g.trans_net2", "Model.Pointnet_g.transpose", "Model.Pointnet_g.squeeze", "torch.bmm", "Model.Pointnet_g.unsqueeze", "Model.Pointnet_g.transpose", "Model.Pointnet_g.conv3", "Model.Pointnet_g.conv4", "Model.Pointnet_g.conv5", "torch.max", "Model.Pointnet_g.squeeze", "Model.Pointnet_g.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "node", "=", "False", ")", ":", "\n", "        ", "x_loc", "=", "x", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "transform", "=", "self", ".", "trans_net1", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "x", "=", "x", ".", "squeeze", "(", "-", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "transform", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "3", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "transform", "=", "self", ".", "trans_net2", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "x", "=", "x", ".", "squeeze", "(", "-", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "transform", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "3", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "x", ",", "node_fea", ",", "node_off", "=", "self", ".", "conv3", "(", "x", ",", "x_loc", ")", "# x = [B, dim, num_node, 1]/[64, 64, 1024, 1]; x_loc = [B, xyz, num_node] / [64, 3, 1024]", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "\n", "x", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "\n", "x", "=", "x", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "if", "node", "==", "True", ":", "\n", "            ", "return", "x", ",", "node_fea", ",", "node_off", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "node_fea", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.Pointnet_c.__init__": [[92, 95], ["nn.Module.__init__", "nn.Linear"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", "=", "10", ")", ":", "\n", "        ", "super", "(", "Pointnet_c", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "1024", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.Pointnet_c.forward": [[96, 99], ["Model.Pointnet_c.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.Net_MDA.__init__": [[101, 109], ["nn.Module.__init__", "Model.Pointnet_g", "Model.CALayer", "Model.CALayer", "Model.Pointnet_c", "Model.Pointnet_c"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_name", "=", "'Pointnet'", ")", ":", "\n", "        ", "super", "(", "Net_MDA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "model_name", "==", "'Pointnet'", ":", "\n", "            ", "self", ".", "g", "=", "Pointnet_g", "(", ")", "\n", "self", ".", "attention_s", "=", "CALayer", "(", "64", "*", "64", ")", "\n", "self", ".", "attention_t", "=", "CALayer", "(", "64", "*", "64", ")", "\n", "self", ".", "c1", "=", "Pointnet_c", "(", ")", "\n", "self", ".", "c2", "=", "Pointnet_c", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.Net_MDA.forward": [[110, 139], ["Model.Net_MDA.g", "feat_ori.size", "Model.Net_MDA.c1", "Model.Net_MDA.c2", "feat_ori.view", "Model.Net_MDA.attention_s", "Model.grad_reverse", "feat_ori.view.unsqueeze().unsqueeze", "feat_ori.view", "Model.Net_MDA.attention_t", "feat_ori.view.unsqueeze().unsqueeze", "feat_ori.view.unsqueeze", "feat_ori.view.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.grad_reverse"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "constant", "=", "1", ",", "adaptation", "=", "False", ",", "node_vis", "=", "False", ",", "mid_feat", "=", "False", ",", "node_adaptation_s", "=", "False", ",", "node_adaptation_t", "=", "False", ")", ":", "\n", "        ", "x", ",", "feat_ori", ",", "node_idx", "=", "self", ".", "g", "(", "x", ",", "node", "=", "True", ")", "\n", "batch_size", "=", "feat_ori", ".", "size", "(", "0", ")", "\n", "\n", "# sa node visualization", "\n", "if", "node_vis", "==", "True", ":", "\n", "            ", "return", "node_idx", "\n", "\n", "# collect mid-level feat", "\n", "", "if", "mid_feat", "==", "True", ":", "\n", "            ", "return", "x", ",", "feat_ori", "\n", "\n", "", "if", "node_adaptation_s", "==", "True", ":", "\n", "# source domain sa node feat", "\n", "            ", "feat_node", "=", "feat_ori", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "feat_node_s", "=", "self", ".", "attention_s", "(", "feat_node", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ")", "\n", "return", "feat_node_s", "\n", "", "elif", "node_adaptation_t", "==", "True", ":", "\n", "# target domain sa node feat", "\n", "            ", "feat_node", "=", "feat_ori", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "feat_node_t", "=", "self", ".", "attention_t", "(", "feat_node", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ")", "\n", "return", "feat_node_t", "\n", "\n", "", "if", "adaptation", "==", "True", ":", "\n", "            ", "x", "=", "grad_reverse", "(", "x", ",", "constant", ")", "\n", "\n", "", "y1", "=", "self", ".", "c1", "(", "x", ")", "\n", "y2", "=", "self", ".", "c2", "(", "x", ")", "\n", "return", "y1", ",", "y2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.grad_reverse": [[38, 40], ["Model.GradReverse"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ",", "lambd", "=", "1.0", ")", ":", "\n", "    ", "return", "GradReverse", "(", "lambd", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.farthest_point_sample": [[5, 27], ["torch.zeros().to", "torch.zeros().to", "torch.randint().to", "torch.randint().to", "torch.arange().to", "torch.arange().to", "range", "torch.ones().to", "torch.ones().to", "xyz[].view", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.ones", "torch.ones"], "function", ["None"], ["def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [B, C, N]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "C", ",", "N", "=", "xyz", ".", "shape", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "\n", "farthest", "=", "torch", ".", "randint", "(", "0", ",", "N", ",", "(", "B", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", ":", ",", "farthest", "]", ".", "view", "(", "B", ",", "3", ",", "1", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "1", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.index_points": [[28, 52], ["list", "list", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "points.squeeze.permute", "len", "points.squeeze.squeeze", "len", "new_points.permute.permute", "len", "torch.arange().to().view", "torch.arange().to().view", "len", "new_points.permute.permute", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "index_points", "(", "points", ",", "idx", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        points: input points data, [B, C, N]/[B,C,N,1]\n        idx: sample index data, [B, S]\n    Return:\n        new_points:, indexed points data, [B, C, S]\n    \"\"\"", "\n", "if", "len", "(", "points", ".", "shape", ")", "==", "4", ":", "\n", "        ", "points", "=", "points", ".", "squeeze", "(", ")", "\n", "", "device", "=", "points", ".", "device", "\n", "B", "=", "points", ".", "shape", "[", "0", "]", "\n", "view_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "view_shape", "[", "1", ":", "]", "=", "[", "1", "]", "*", "(", "len", "(", "view_shape", ")", "-", "1", ")", "\n", "repeat_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "repeat_shape", "[", "0", "]", "=", "1", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "view_shape", ")", ".", "repeat", "(", "repeat_shape", ")", "\n", "points", "=", "points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "#(B,N,C)", "\n", "new_points", "=", "points", "[", "batch_indices", ",", "idx", ",", ":", "]", "\n", "if", "len", "(", "new_points", ".", "shape", ")", "==", "3", ":", "\n", "        ", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "elif", "len", "(", "new_points", ".", "shape", ")", "==", "4", ":", "\n", "        ", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.query_ball_point": [[53, 77], ["point_utils.square_distance", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "group_idx[].view().repeat", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view().repeat.sort", "group_idx[].view", "torch.sort", "torch.sort", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.square_distance"], ["", "def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        radius: local region radius\n        nsample: max sample number in local region\n        xyz: all points, [B, C, N]\n        new_xyz: query points, [B, C, S]\n    Return:\n        group_idx: grouped points index, [B, S, nsample]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "C", ",", "N", "=", "xyz", ".", "shape", "\n", "_", ",", "_", ",", "S", "=", "new_xyz", ".", "shape", "\n", "sqrdists", "=", "square_distance", "(", "new_xyz", ",", "xyz", ")", "\n", "if", "radius", "is", "not", "None", ":", "\n", "        ", "group_idx", "=", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "1", ",", "1", ",", "N", ")", ".", "repeat", "(", "[", "B", ",", "S", ",", "1", "]", ")", "\n", "group_idx", "[", "sqrdists", ">", "radius", "**", "2", "]", "=", "N", "\n", "group_idx", "=", "group_idx", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "[", ":", ",", ":", ",", ":", "nsample", "]", "\n", "group_first", "=", "group_idx", "[", ":", ",", ":", ",", "0", "]", ".", "view", "(", "B", ",", "S", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "nsample", "]", ")", "\n", "mask", "=", "group_idx", "==", "N", "\n", "group_idx", "[", "mask", "]", "=", "group_first", "[", "mask", "]", "\n", "", "else", ":", "\n", "        ", "group_idx", "=", "torch", ".", "sort", "(", "sqrdists", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "[", ":", ",", ":", ",", ":", "nsample", "]", "\n", "", "return", "group_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.square_distance": [[78, 98], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.matmul", "torch.matmul", "src.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"\n    Calculate Euclid distance between each two points.\n    src^T * dst = xn * xm + yn * ym + zn * zm\uff1b\n    sum(src^2, dim=-1) = xn*xn + yn*yn + zn*zn;\n    sum(dst^2, dim=-1) = xm*xm + ym*ym + zm*zm;\n    dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2\n         = sum(src**2,dim=-1)+sum(dst**2,dim=-1)-2*src^T*dst\n    Input:\n        src: source points, [B, C, N]\n        dst: target points, [B, C, M]\n    Output:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "_", ",", "N", "=", "src", ".", "shape", "\n", "_", ",", "_", ",", "M", "=", "dst", ".", "shape", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "dst", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "src", "**", "2", ",", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "1", ")", ".", "view", "(", "B", ",", "1", ",", "M", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.upsample_inter": [[99, 130], ["xyz1.size", "xyz2.size", "point_utils.square_distance", "square_distance.sort", "torch.sum", "torch.sum", "len", "points2.squeeze.squeeze", "torch.sum().view", "torch.sum().view", "torch.cat", "torch.cat", "len", "points1.squeeze.squeeze", "point_utils.index_points", "weight.view", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.square_distance", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.index_points"], ["", "def", "upsample_inter", "(", "xyz1", ",", "xyz2", ",", "points1", ",", "points2", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz1: input points position data, [B, C, N]\n        xyz2: sampled input points position data, [B, C, S]\n        points1: input points data, [B, D, N]/[B,D,N,1]\n        points2: input points data, [B, D, S]/[B,D,S,1]\n        k:\n    Return:\n        new_points: upsampled points data, [B, D+D, N]\n    \"\"\"", "\n", "if", "points1", "is", "not", "None", ":", "\n", "        ", "if", "len", "(", "points1", ".", "shape", ")", "==", "4", ":", "\n", "            ", "points1", "=", "points1", ".", "squeeze", "(", ")", "\n", "", "", "if", "len", "(", "points2", ".", "shape", ")", "==", "4", ":", "\n", "        ", "points2", "=", "points2", ".", "squeeze", "(", ")", "\n", "", "B", ",", "C", ",", "N", "=", "xyz1", ".", "size", "(", ")", "\n", "_", ",", "_", ",", "S", "=", "xyz2", ".", "size", "(", ")", "\n", "\n", "dists", "=", "square_distance", "(", "xyz1", ",", "xyz2", ")", "#(B, N, S)", "\n", "dists", ",", "idx", "=", "dists", ".", "sort", "(", "dim", "=", "-", "1", ")", "\n", "dists", ",", "idx", "=", "dists", "[", ":", ",", ":", ",", ":", "k", "]", ",", "idx", "[", ":", ",", ":", ",", ":", "k", "]", "# [B, N, 3]", "\n", "dists", "[", "dists", "<", "1e-10", "]", "=", "1e-10", "\n", "weight", "=", "1.0", "/", "dists", "# [B, N, 3]", "\n", "weight", "=", "weight", "/", "torch", ".", "sum", "(", "weight", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "# [B, N, 3]; weight = [64, 1024, 3]", "\n", "interpolated_points", "=", "torch", ".", "sum", "(", "index_points", "(", "points2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "1", ",", "N", ",", "k", ")", ",", "dim", "=", "3", ")", "#(B,D,N); idx = [64, 1024, 3]; points2 = [64, 64, 64];", "\n", "if", "points1", "is", "not", "None", ":", "\n", "        ", "new_points", "=", "torch", ".", "cat", "(", "[", "points1", ",", "interpolated_points", "]", ",", "dim", "=", "1", ")", "# points1 = [64, 64, 1024];", "\n", "return", "new_points", "\n", "", "else", ":", "\n", "        ", "return", "interpolated_points", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.pairwise_distance": [[133, 144], ["x.size", "torch.squeeze", "torch.squeeze", "torch.transpose", "torch.transpose", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.transpose", "torch.transpose", "torch.unsqueeze", "torch.unsqueeze"], "function", ["None"], ["", "", "def", "pairwise_distance", "(", "x", ")", ":", "\n", "    ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "point_cloud", "=", "torch", ".", "squeeze", "(", "x", ")", "\n", "if", "batch_size", "==", "1", ":", "\n", "        ", "point_cloud", "=", "torch", ".", "unsqueeze", "(", "point_cloud", ",", "0", ")", "\n", "", "point_cloud_transpose", "=", "torch", ".", "transpose", "(", "point_cloud", ",", "dim0", "=", "1", ",", "dim1", "=", "2", ")", "\n", "point_cloud_inner", "=", "torch", ".", "matmul", "(", "point_cloud_transpose", ",", "point_cloud", ")", "\n", "point_cloud_inner", "=", "-", "2", "*", "point_cloud_inner", "\n", "point_cloud_square", "=", "torch", ".", "sum", "(", "point_cloud", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "point_cloud_square_transpose", "=", "torch", ".", "transpose", "(", "point_cloud_square", ",", "dim0", "=", "1", ",", "dim1", "=", "2", ")", "\n", "return", "point_cloud_square", "+", "point_cloud_inner", "+", "point_cloud_square_transpose", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.gather_neighbor": [[146, 155], ["torch.squeeze", "torch.squeeze", "torch.squeeze.unsqueeze().expand", "nn_idx.unsqueeze().expand", "torch.gather", "torch.gather", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.unsqueeze", "nn_idx.unsqueeze"], "function", ["None"], ["", "def", "gather_neighbor", "(", "x", ",", "nn_idx", ",", "n_neighbor", ")", ":", "\n", "    ", "x", "=", "torch", ".", "squeeze", "(", "x", ")", "\n", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "num_dim", "=", "x", ".", "size", "(", ")", "[", "1", "]", "\n", "num_point", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "point_expand", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "batch_size", ",", "num_dim", ",", "num_point", ",", "num_point", ")", "\n", "nn_idx_expand", "=", "nn_idx", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "num_dim", ",", "num_point", ",", "n_neighbor", ")", "\n", "pc_n", "=", "torch", ".", "gather", "(", "point_expand", ",", "-", "1", ",", "nn_idx_expand", ")", "\n", "return", "pc_n", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.get_neighbor_feature": [[156, 169], ["point_utils.pairwise_distance", "torch.topk", "torch.topk", "x[].expand", "nn_idx.unsqueeze().expand", "torch.gather", "torch.gather", "len", "x.unsqueeze.unsqueeze", "x.unsqueeze.size", "x.unsqueeze.size", "x.unsqueeze.size", "x.unsqueeze.size", "nn_idx.unsqueeze"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.pairwise_distance"], ["", "def", "get_neighbor_feature", "(", "x", ",", "n_point", ",", "n_neighbor", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", ")", "\n", "", "adj_matrix", "=", "pairwise_distance", "(", "x", ")", "\n", "_", ",", "nn_idx", "=", "torch", ".", "topk", "(", "adj_matrix", ",", "n_neighbor", ",", "dim", "=", "2", ",", "largest", "=", "False", ")", "\n", "nn_idx", "=", "nn_idx", "[", ":", ",", ":", "n_point", ",", ":", "]", "\n", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "num_dim", "=", "x", ".", "size", "(", ")", "[", "1", "]", "\n", "num_point", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "point_expand", "=", "x", "[", ":", ",", ":", ",", ":", "n_point", ",", ":", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "num_point", ")", "\n", "nn_idx_expand", "=", "nn_idx", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "num_dim", ",", "n_point", ",", "n_neighbor", ")", "\n", "pc_n", "=", "torch", ".", "gather", "(", "point_expand", ",", "-", "1", ",", "nn_idx_expand", ")", "\n", "return", "pc_n", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.get_edge_feature": [[171, 180], ["point_utils.pairwise_distance", "torch.topk", "torch.topk", "point_utils.gather_neighbor", "x.unsqueeze.expand", "torch.cat", "torch.cat", "len", "x.unsqueeze.unsqueeze", "x.unsqueeze.size"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.pairwise_distance", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.point_utils.gather_neighbor"], ["", "def", "get_edge_feature", "(", "x", ",", "n_neighbor", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "3", ")", "\n", "", "adj_matrix", "=", "pairwise_distance", "(", "x", ")", "\n", "_", ",", "nn_idx", "=", "torch", ".", "topk", "(", "adj_matrix", ",", "n_neighbor", ",", "dim", "=", "2", ",", "largest", "=", "False", ")", "\n", "point_cloud_neighbors", "=", "gather_neighbor", "(", "x", ",", "nn_idx", ",", "n_neighbor", ")", "\n", "point_cloud_center", "=", "x", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "n_neighbor", ")", "\n", "edge_feature", "=", "torch", ".", "cat", "(", "(", "point_cloud_center", ",", "point_cloud_neighbors", "-", "point_cloud_center", ")", ",", "dim", "=", "1", ")", "\n", "return", "edge_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd.linear_mmd2": [[17, 23], ["torch.mean"], "function", ["None"], ["def", "linear_mmd2", "(", "f_of_X", ",", "f_of_Y", ")", ":", "\n", "    ", "loss", "=", "0.0", "\n", "delta", "=", "f_of_X", "-", "f_of_Y", "\n", "#pdb.set_trace()", "\n", "loss", "=", "torch", ".", "mean", "(", "(", "delta", "[", ":", "-", "1", "]", "*", "delta", "[", "1", ":", "]", ")", ".", "sum", "(", "1", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd.poly_mmd2": [[29, 43], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "K_XX.pow", "K_YY.pow", "K_XY.pow", "K_YX.pow"], "function", ["None"], ["", "def", "poly_mmd2", "(", "f_of_X", ",", "f_of_Y", ",", "d", "=", "2", ",", "alpha", "=", "1.0", ",", "c", "=", "2.0", ")", ":", "\n", "    ", "K_XX", "=", "(", "alpha", "*", "(", "f_of_X", "[", ":", "-", "1", "]", "*", "f_of_X", "[", "1", ":", "]", ")", ".", "sum", "(", "1", ")", "+", "c", ")", "\n", "K_XX_mean", "=", "torch", ".", "mean", "(", "K_XX", ".", "pow", "(", "d", ")", ")", "\n", "\n", "K_YY", "=", "(", "alpha", "*", "(", "f_of_Y", "[", ":", "-", "1", "]", "*", "f_of_Y", "[", "1", ":", "]", ")", ".", "sum", "(", "1", ")", "+", "c", ")", "\n", "K_YY_mean", "=", "torch", ".", "mean", "(", "K_YY", ".", "pow", "(", "d", ")", ")", "\n", "\n", "K_XY", "=", "(", "alpha", "*", "(", "f_of_X", "[", ":", "-", "1", "]", "*", "f_of_Y", "[", "1", ":", "]", ")", ".", "sum", "(", "1", ")", "+", "c", ")", "\n", "K_XY_mean", "=", "torch", ".", "mean", "(", "K_XY", ".", "pow", "(", "d", ")", ")", "\n", "\n", "K_YX", "=", "(", "alpha", "*", "(", "f_of_Y", "[", ":", "-", "1", "]", "*", "f_of_X", "[", "1", ":", "]", ")", ".", "sum", "(", "1", ")", "+", "c", ")", "\n", "K_YX_mean", "=", "torch", ".", "mean", "(", "K_YX", ".", "pow", "(", "d", ")", ")", "\n", "\n", "return", "K_XX_mean", "+", "K_YY_mean", "-", "K_XY_mean", "-", "K_YX_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd._mix_rbf_kernel": [[45, 61], ["X.size", "torch.cat", "torch.mm", "torch.diag().unsqueeze", "torch.diag().unsqueeze.expand_as", "X.size", "Y.size", "torch.cat.t", "diag_ZZT.expand_as.t", "torch.exp", "len", "torch.diag"], "function", ["None"], ["", "def", "_mix_rbf_kernel", "(", "X", ",", "Y", ",", "sigma_list", ")", ":", "\n", "    ", "assert", "(", "X", ".", "size", "(", "0", ")", "==", "Y", ".", "size", "(", "0", ")", ")", "\n", "m", "=", "X", ".", "size", "(", "0", ")", "\n", "\n", "Z", "=", "torch", ".", "cat", "(", "(", "X", ",", "Y", ")", ",", "0", ")", "\n", "ZZT", "=", "torch", ".", "mm", "(", "Z", ",", "Z", ".", "t", "(", ")", ")", "\n", "diag_ZZT", "=", "torch", ".", "diag", "(", "ZZT", ")", ".", "unsqueeze", "(", "1", ")", "\n", "Z_norm_sqr", "=", "diag_ZZT", ".", "expand_as", "(", "ZZT", ")", "\n", "exponent", "=", "Z_norm_sqr", "-", "2", "*", "ZZT", "+", "Z_norm_sqr", ".", "t", "(", ")", "\n", "\n", "K", "=", "0.0", "\n", "for", "sigma", "in", "sigma_list", ":", "\n", "        ", "gamma", "=", "1.0", "/", "(", "2", "*", "sigma", "**", "2", ")", "\n", "K", "+=", "torch", ".", "exp", "(", "-", "gamma", "*", "exponent", ")", "\n", "\n", "", "return", "K", "[", ":", "m", ",", ":", "m", "]", ",", "K", "[", ":", "m", ",", "m", ":", "]", ",", "K", "[", "m", ":", ",", "m", ":", "]", ",", "len", "(", "sigma_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd.mix_rbf_mmd2": [[63, 67], ["mmd._mix_rbf_kernel", "mmd._mmd2"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd._mix_rbf_kernel", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd._mmd2"], ["", "def", "mix_rbf_mmd2", "(", "X", ",", "Y", ",", "sigma_list", ",", "biased", "=", "True", ")", ":", "\n", "    ", "K_XX", ",", "K_XY", ",", "K_YY", ",", "d", "=", "_mix_rbf_kernel", "(", "X", ",", "Y", ",", "sigma_list", ")", "\n", "# return _mmd2(K_XX, K_XY, K_YY, const_diagonal=d, biased=biased)", "\n", "return", "_mmd2", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "False", ",", "biased", "=", "biased", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd.mix_rbf_mmd2_and_ratio": [[69, 73], ["mmd._mix_rbf_kernel", "mmd._mmd2_and_ratio"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd._mix_rbf_kernel", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd._mmd2_and_ratio"], ["", "def", "mix_rbf_mmd2_and_ratio", "(", "X", ",", "Y", ",", "sigma_list", ",", "biased", "=", "True", ")", ":", "\n", "    ", "K_XX", ",", "K_XY", ",", "K_YY", ",", "d", "=", "_mix_rbf_kernel", "(", "X", ",", "Y", ",", "sigma_list", ")", "\n", "# return _mmd2_and_ratio(K_XX, K_XY, K_YY, const_diagonal=d, biased=biased)", "\n", "return", "_mmd2_and_ratio", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "False", ",", "biased", "=", "biased", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd._mmd2": [[80, 112], ["K_XX.size", "K_XY.sum", "Kt_XX_sums.sum", "Kt_YY_sums.sum", "K_XY.sum.sum", "torch.diag", "torch.diag", "torch.sum", "torch.sum", "K_XX.sum", "K_YY.sum"], "function", ["None"], ["", "def", "_mmd2", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "False", ",", "biased", "=", "False", ")", ":", "\n", "    ", "m", "=", "K_XX", ".", "size", "(", "0", ")", "# assume X, Y are same shape", "\n", "\n", "# Get the various sums of kernels that we'll use", "\n", "# Kts drop the diagonal, but we don't need to compute them explicitly", "\n", "if", "const_diagonal", "is", "not", "False", ":", "\n", "        ", "diag_X", "=", "diag_Y", "=", "const_diagonal", "\n", "sum_diag_X", "=", "sum_diag_Y", "=", "m", "*", "const_diagonal", "\n", "", "else", ":", "\n", "        ", "diag_X", "=", "torch", ".", "diag", "(", "K_XX", ")", "# (m,)", "\n", "diag_Y", "=", "torch", ".", "diag", "(", "K_YY", ")", "# (m,)", "\n", "sum_diag_X", "=", "torch", ".", "sum", "(", "diag_X", ")", "\n", "sum_diag_Y", "=", "torch", ".", "sum", "(", "diag_Y", ")", "\n", "\n", "", "Kt_XX_sums", "=", "K_XX", ".", "sum", "(", "dim", "=", "1", ")", "-", "diag_X", "# \\tilde{K}_XX * e = K_XX * e - diag_X", "\n", "Kt_YY_sums", "=", "K_YY", ".", "sum", "(", "dim", "=", "1", ")", "-", "diag_Y", "# \\tilde{K}_YY * e = K_YY * e - diag_Y", "\n", "K_XY_sums_0", "=", "K_XY", ".", "sum", "(", "dim", "=", "0", ")", "# K_{XY}^T * e", "\n", "\n", "Kt_XX_sum", "=", "Kt_XX_sums", ".", "sum", "(", ")", "# e^T * \\tilde{K}_XX * e", "\n", "Kt_YY_sum", "=", "Kt_YY_sums", ".", "sum", "(", ")", "# e^T * \\tilde{K}_YY * e", "\n", "K_XY_sum", "=", "K_XY_sums_0", ".", "sum", "(", ")", "# e^T * K_{XY} * e", "\n", "\n", "if", "biased", ":", "\n", "        ", "mmd2", "=", "(", "(", "Kt_XX_sum", "+", "sum_diag_X", ")", "/", "(", "m", "*", "m", ")", "\n", "+", "(", "Kt_YY_sum", "+", "sum_diag_Y", ")", "/", "(", "m", "*", "m", ")", "\n", "-", "2.0", "*", "K_XY_sum", "/", "(", "m", "*", "m", ")", ")", "\n", "", "else", ":", "\n", "        ", "mmd2", "=", "(", "Kt_XX_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "+", "Kt_YY_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "-", "2.0", "*", "K_XY_sum", "/", "(", "m", "*", "m", ")", ")", "\n", "\n", "", "return", "mmd2", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd._mmd2_and_ratio": [[114, 118], ["mmd._mmd2_and_variance", "torch.sqrt", "torch.clamp"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd._mmd2_and_variance"], ["", "def", "_mmd2_and_ratio", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "False", ",", "biased", "=", "False", ")", ":", "\n", "    ", "mmd2", ",", "var_est", "=", "_mmd2_and_variance", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "const_diagonal", ",", "biased", "=", "biased", ")", "\n", "loss", "=", "mmd2", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "var_est", ",", "min", "=", "min_var_est", ")", ")", "\n", "return", "loss", ",", "mmd2", ",", "var_est", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.mmd._mmd2_and_variance": [[120, 170], ["K_XX.size", "K_XY.sum", "K_XY.sum", "Kt_XX_sums.sum", "Kt_YY_sums.sum", "K_XY.sum.sum", "torch.diag", "torch.diag", "torch.sum", "torch.sum", "torch.diag.dot", "torch.diag.dot", "K_XX.sum", "K_YY.sum", "Kt_YY_sums.dot", "Kt_XX_sums.dot", "K_XY.sum.dot", "K_XY.sum.dot", "Kt_YY_sums.dot", "Kt_XX_sums.dot"], "function", ["None"], ["", "def", "_mmd2_and_variance", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "False", ",", "biased", "=", "False", ")", ":", "\n", "    ", "m", "=", "K_XX", ".", "size", "(", "0", ")", "# assume X, Y are same shape", "\n", "\n", "# Get the various sums of kernels that we'll use", "\n", "# Kts drop the diagonal, but we don't need to compute them explicitly", "\n", "if", "const_diagonal", "is", "not", "False", ":", "\n", "        ", "diag_X", "=", "diag_Y", "=", "const_diagonal", "\n", "sum_diag_X", "=", "sum_diag_Y", "=", "m", "*", "const_diagonal", "\n", "sum_diag2_X", "=", "sum_diag2_Y", "=", "m", "*", "const_diagonal", "**", "2", "\n", "", "else", ":", "\n", "        ", "diag_X", "=", "torch", ".", "diag", "(", "K_XX", ")", "# (m,)", "\n", "diag_Y", "=", "torch", ".", "diag", "(", "K_YY", ")", "# (m,)", "\n", "sum_diag_X", "=", "torch", ".", "sum", "(", "diag_X", ")", "\n", "sum_diag_Y", "=", "torch", ".", "sum", "(", "diag_Y", ")", "\n", "sum_diag2_X", "=", "diag_X", ".", "dot", "(", "diag_X", ")", "\n", "sum_diag2_Y", "=", "diag_Y", ".", "dot", "(", "diag_Y", ")", "\n", "\n", "", "Kt_XX_sums", "=", "K_XX", ".", "sum", "(", "dim", "=", "1", ")", "-", "diag_X", "# \\tilde{K}_XX * e = K_XX * e - diag_X", "\n", "Kt_YY_sums", "=", "K_YY", ".", "sum", "(", "dim", "=", "1", ")", "-", "diag_Y", "# \\tilde{K}_YY * e = K_YY * e - diag_Y", "\n", "K_XY_sums_0", "=", "K_XY", ".", "sum", "(", "dim", "=", "0", ")", "# K_{XY}^T * e", "\n", "K_XY_sums_1", "=", "K_XY", ".", "sum", "(", "dim", "=", "1", ")", "# K_{XY} * e", "\n", "\n", "Kt_XX_sum", "=", "Kt_XX_sums", ".", "sum", "(", ")", "# e^T * \\tilde{K}_XX * e", "\n", "Kt_YY_sum", "=", "Kt_YY_sums", ".", "sum", "(", ")", "# e^T * \\tilde{K}_YY * e", "\n", "K_XY_sum", "=", "K_XY_sums_0", ".", "sum", "(", ")", "# e^T * K_{XY} * e", "\n", "\n", "Kt_XX_2_sum", "=", "(", "K_XX", "**", "2", ")", ".", "sum", "(", ")", "-", "sum_diag2_X", "# \\| \\tilde{K}_XX \\|_F^2", "\n", "Kt_YY_2_sum", "=", "(", "K_YY", "**", "2", ")", ".", "sum", "(", ")", "-", "sum_diag2_Y", "# \\| \\tilde{K}_YY \\|_F^2", "\n", "K_XY_2_sum", "=", "(", "K_XY", "**", "2", ")", ".", "sum", "(", ")", "# \\| K_{XY} \\|_F^2", "\n", "\n", "if", "biased", ":", "\n", "        ", "mmd2", "=", "(", "(", "Kt_XX_sum", "+", "sum_diag_X", ")", "/", "(", "m", "*", "m", ")", "\n", "+", "(", "Kt_YY_sum", "+", "sum_diag_Y", ")", "/", "(", "m", "*", "m", ")", "\n", "-", "2.0", "*", "K_XY_sum", "/", "(", "m", "*", "m", ")", ")", "\n", "", "else", ":", "\n", "        ", "mmd2", "=", "(", "Kt_XX_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "+", "Kt_YY_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "-", "2.0", "*", "K_XY_sum", "/", "(", "m", "*", "m", ")", ")", "\n", "\n", "", "var_est", "=", "(", "\n", "2.0", "/", "(", "m", "**", "2", "*", "(", "m", "-", "1.0", ")", "**", "2", ")", "*", "(", "2", "*", "Kt_XX_sums", ".", "dot", "(", "Kt_XX_sums", ")", "-", "Kt_XX_2_sum", "+", "2", "*", "Kt_YY_sums", ".", "dot", "(", "Kt_YY_sums", ")", "-", "Kt_YY_2_sum", ")", "\n", "-", "(", "4.0", "*", "m", "-", "6.0", ")", "/", "(", "m", "**", "3", "*", "(", "m", "-", "1.0", ")", "**", "3", ")", "*", "(", "Kt_XX_sum", "**", "2", "+", "Kt_YY_sum", "**", "2", ")", "\n", "+", "4.0", "*", "(", "m", "-", "2.0", ")", "/", "(", "m", "**", "3", "*", "(", "m", "-", "1.0", ")", "**", "2", ")", "*", "(", "K_XY_sums_1", ".", "dot", "(", "K_XY_sums_1", ")", "+", "K_XY_sums_0", ".", "dot", "(", "K_XY_sums_0", ")", ")", "\n", "-", "4.0", "*", "(", "m", "-", "3.0", ")", "/", "(", "m", "**", "3", "*", "(", "m", "-", "1.0", ")", "**", "2", ")", "*", "(", "K_XY_2_sum", ")", "-", "(", "8", "*", "m", "-", "12", ")", "/", "(", "m", "**", "5", "*", "(", "m", "-", "1", ")", ")", "*", "K_XY_sum", "**", "2", "\n", "+", "8.0", "/", "(", "m", "**", "3", "*", "(", "m", "-", "1.0", ")", ")", "*", "(", "\n", "1.0", "/", "m", "*", "(", "Kt_XX_sum", "+", "Kt_YY_sum", ")", "*", "K_XY_sum", "\n", "-", "Kt_XX_sums", ".", "dot", "(", "K_XY_sums_1", ")", "\n", "-", "Kt_YY_sums", ".", "dot", "(", "K_XY_sums_0", ")", ")", "\n", ")", "\n", "return", "mmd2", ",", "var_est", "\n", "", ""]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Modelnet40_data.__init__": [[36, 61], ["torch.Dataset.__init__", "glob.glob", "sorted", "print", "os.path.join", "glob.glob", "glob.glob", "dataloader.Modelnet40_data.pc_list.append", "dataloader.Modelnet40_data.lbl_list.append", "c.split", "os.path.join", "os.path.join", "sorted.index", "len", "_dir.split"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pc_root", ",", "status", "=", "'train'", ",", "pc_input_num", "=", "1024", ",", "aug", "=", "True", ")", ":", "\n", "        ", "super", "(", "Modelnet40_data", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "status", "=", "status", "\n", "self", ".", "pc_list", "=", "[", "]", "\n", "self", ".", "lbl_list", "=", "[", "]", "\n", "self", ".", "pc_input_num", "=", "pc_input_num", "\n", "self", ".", "aug", "=", "aug", "\n", "\n", "categorys", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "pc_root", ",", "'*'", ")", ")", "\n", "categorys", "=", "[", "c", ".", "split", "(", "os", ".", "path", ".", "sep", ")", "[", "-", "1", "]", "for", "c", "in", "categorys", "]", "\n", "# sorted(categorys)", "\n", "categorys", "=", "sorted", "(", "categorys", ")", "\n", "\n", "if", "status", "==", "'train'", ":", "\n", "            ", "npy_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "pc_root", ",", "'*'", ",", "'train'", ",", "'*.npy'", ")", ")", "\n", "", "else", ":", "\n", "            ", "npy_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "pc_root", ",", "'*'", ",", "'test'", ",", "'*.npy'", ")", ")", "\n", "# names_dict = get_info(npy_list, isView=False)", "\n", "\n", "", "for", "_dir", "in", "npy_list", ":", "\n", "            ", "self", ".", "pc_list", ".", "append", "(", "_dir", ")", "\n", "self", ".", "lbl_list", ".", "append", "(", "categorys", ".", "index", "(", "_dir", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", ")", ")", "\n", "\n", "", "print", "(", "f'{status} data num: {len(self.pc_list)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Modelnet40_data.__getitem__": [[62, 72], ["[].astype", "data_utils.normal_pc", "numpy.expand_dims", "data_utils.rotation_point_cloud", "data_utils.jitter_point_cloud", "data_utils.jitter_point_cloud.transpose", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.load", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.normal_pc", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.rotation_point_cloud", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.jitter_point_cloud"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "lbl", "=", "self", ".", "lbl_list", "[", "idx", "]", "\n", "pc", "=", "np", ".", "load", "(", "self", ".", "pc_list", "[", "idx", "]", ")", "[", ":", "self", ".", "pc_input_num", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pc", "=", "normal_pc", "(", "pc", ")", "\n", "if", "self", ".", "aug", ":", "\n", "            ", "pc", "=", "rotation_point_cloud", "(", "pc", ")", "\n", "pc", "=", "jitter_point_cloud", "(", "pc", ")", "\n", "# print(pc.shape)", "\n", "", "pc", "=", "np", ".", "expand_dims", "(", "pc", ".", "transpose", "(", ")", ",", "axis", "=", "2", ")", "\n", "return", "torch", ".", "from_numpy", "(", "pc", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Modelnet40_data.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "pc_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Shapenet_data.__init__": [[78, 106], ["torch.Dataset.__init__", "glob.glob", "sorted", "print", "os.path.join", "glob.glob", "dataloader.Shapenet_data.pc_list.append", "dataloader.Shapenet_data.lbl_list.append", "c.split", "os.path.join", "glob.glob", "glob.glob", "sorted.index", "os.path.join", "os.path.join", "len", "_dir.split"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pc_root", ",", "status", "=", "'train'", ",", "pc_input_num", "=", "1024", ",", "aug", "=", "True", ",", "data_type", "=", "'*.npy'", ")", ":", "\n", "        ", "super", "(", "Shapenet_data", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "status", "=", "status", "\n", "self", ".", "pc_list", "=", "[", "]", "\n", "self", ".", "lbl_list", "=", "[", "]", "\n", "self", ".", "pc_input_num", "=", "pc_input_num", "\n", "self", ".", "aug", "=", "aug", "\n", "self", ".", "data_type", "=", "data_type", "\n", "\n", "categorys", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "pc_root", ",", "'*'", ")", ")", "\n", "categorys", "=", "[", "c", ".", "split", "(", "os", ".", "path", ".", "sep", ")", "[", "-", "1", "]", "for", "c", "in", "categorys", "]", "\n", "# sorted(categorys)", "\n", "categorys", "=", "sorted", "(", "categorys", ")", "\n", "\n", "if", "status", "==", "'train'", ":", "\n", "            ", "pts_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "pc_root", ",", "'*'", ",", "'train'", ",", "self", ".", "data_type", ")", ")", "\n", "", "elif", "status", "==", "'test'", ":", "\n", "            ", "pts_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "pc_root", ",", "'*'", ",", "'test'", ",", "self", ".", "data_type", ")", ")", "\n", "", "else", ":", "\n", "            ", "pts_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "pc_root", ",", "'*'", ",", "'validation'", ",", "self", ".", "data_type", ")", ")", "\n", "# names_dict = get_info(pts_list, isView=False)", "\n", "\n", "", "for", "_dir", "in", "pts_list", ":", "\n", "            ", "self", ".", "pc_list", ".", "append", "(", "_dir", ")", "\n", "self", ".", "lbl_list", ".", "append", "(", "categorys", ".", "index", "(", "_dir", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", ")", ")", "\n", "\n", "", "print", "(", "f'{status} data num: {len(self.pc_list)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Shapenet_data.__getitem__": [[107, 122], ["data_utils.normal_pc", "numpy.zeros", "numpy.concatenate", "numpy.expand_dims", "data_utils.rotation_point_cloud", "data_utils.jitter_point_cloud", "[].astype.transpose", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.array", "[].astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "float", "open", "numpy.load", "xyz.split", "len", "xyz.split"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.normal_pc", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.rotation_point_cloud", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.jitter_point_cloud"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "lbl", "=", "self", ".", "lbl_list", "[", "idx", "]", "\n", "if", "self", ".", "data_type", "==", "'*.pts'", ":", "\n", "            ", "pc", "=", "np", ".", "array", "(", "[", "[", "float", "(", "value", ")", "for", "value", "in", "xyz", ".", "split", "(", "' '", ")", "]", "\n", "for", "xyz", "in", "open", "(", "self", ".", "pc_list", "[", "idx", "]", ",", "'r'", ")", "if", "len", "(", "xyz", ".", "split", "(", "' '", ")", ")", "==", "3", "]", ")", "[", ":", "self", ".", "pc_input_num", ",", ":", "]", "\n", "", "elif", "self", ".", "data_type", "==", "'*.npy'", ":", "\n", "            ", "pc", "=", "np", ".", "load", "(", "self", ".", "pc_list", "[", "idx", "]", ")", "[", ":", "self", ".", "pc_input_num", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "pc", "=", "normal_pc", "(", "pc", ")", "\n", "if", "self", ".", "aug", ":", "\n", "            ", "pc", "=", "rotation_point_cloud", "(", "pc", ")", "\n", "pc", "=", "jitter_point_cloud", "(", "pc", ")", "\n", "", "pad_pc", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "pc_input_num", "-", "pc", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "float", ")", "\n", "pc", "=", "np", ".", "concatenate", "(", "(", "pc", ",", "pad_pc", ")", ",", "axis", "=", "0", ")", "\n", "pc", "=", "np", ".", "expand_dims", "(", "pc", ".", "transpose", "(", ")", ",", "axis", "=", "2", ")", "\n", "return", "torch", ".", "from_numpy", "(", "pc", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Shapenet_data.__len__": [[123, 125], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "pc_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__": [[128, 155], ["torch.Dataset.__init__", "numpy.concatenate", "numpy.concatenate", "dataloader.load_dir", "dataloader.load_dir", "h5py.File", "point_list.append", "label_list.append"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__init__", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.load_dir", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.load_dir"], ["    ", "def", "__init__", "(", "self", ",", "pc_root", ",", "status", "=", "'train'", ",", "pc_input_num", "=", "1024", ",", "aug", "=", "True", ")", ":", "\n", "        ", "super", "(", "Scannet_data_h5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_points", "=", "pc_input_num", "\n", "self", ".", "status", "=", "status", "\n", "self", ".", "aug", "=", "aug", "\n", "# self.label_map = [2, 3, 4, 5, 6, 7, 9, 10, 14, 16]", "\n", "\n", "if", "self", ".", "status", "==", "'train'", ":", "\n", "            ", "data_pth", "=", "load_dir", "(", "pc_root", ",", "name", "=", "'train_files.txt'", ")", "\n", "", "else", ":", "\n", "            ", "data_pth", "=", "load_dir", "(", "pc_root", ",", "name", "=", "'test_files.txt'", ")", "\n", "\n", "", "point_list", "=", "[", "]", "\n", "label_list", "=", "[", "]", "\n", "for", "pth", "in", "data_pth", ":", "\n", "            ", "data_file", "=", "h5py", ".", "File", "(", "pth", ",", "'r'", ")", "\n", "point", "=", "data_file", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "data_file", "[", "'label'", "]", "[", ":", "]", "\n", "\n", "# idx = [index for index, value in enumerate(list(label)) if value in self.label_map]", "\n", "# point_new = point[idx]", "\n", "# label_new = np.array([self.label_map.index(value) for value in label[idx]])", "\n", "\n", "point_list", ".", "append", "(", "point", ")", "\n", "label_list", ".", "append", "(", "label", ")", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "point_list", ",", "axis", "=", "0", ")", "\n", "self", ".", "label", "=", "np", ".", "concatenate", "(", "label_list", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__getitem__": [[156, 169], ["numpy.arange", "numpy.random.shuffle", "data_utils.normal_pc", "numpy.expand_dims", "data_utils.rotation_point_cloud", "data_utils.jitter_point_cloud", "data_utils.jitter_point_cloud.transpose", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.normal_pc", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.rotation_point_cloud", "home.repos.pwc.inspect_result.canqin001_PointDAN.None.data_utils.jitter_point_cloud"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "point_idx", "=", "np", ".", "arange", "(", "0", ",", "self", ".", "num_points", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "point_idx", ")", "\n", "point", "=", "self", ".", "data", "[", "idx", "]", "[", "point_idx", "]", "[", ":", ",", ":", "3", "]", "\n", "label", "=", "self", ".", "label", "[", "idx", "]", "\n", "\n", "pc", "=", "normal_pc", "(", "point", ")", "\n", "if", "self", ".", "aug", ":", "\n", "            ", "pc", "=", "rotation_point_cloud", "(", "pc", ")", "\n", "pc", "=", "jitter_point_cloud", "(", "pc", ")", "\n", "# print(pc.shape)", "\n", "", "pc", "=", "np", ".", "expand_dims", "(", "pc", ".", "transpose", "(", ")", ",", "axis", "=", "2", ")", "\n", "return", "torch", ".", "from_numpy", "(", "pc", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "label", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.Scannet_data_h5.__len__": [[169, 171], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.load_dir": [[12, 16], ["open", "f.readlines", "os.path.join", "os.path.join", "line.rstrip().split", "line.rstrip"], "function", ["None"], ["def", "load_dir", "(", "data_dir", ",", "name", "=", "'train_files.txt'", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "name", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "return", "[", "os", ".", "path", ".", "join", "(", "data_dir", ",", "line", ".", "rstrip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "line", "in", "lines", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.dataloader.get_info": [[18, 33], ["names_dict[].append", "[].split", "[].split", "os.path.split", "[].split", "os.path.split"], "function", ["None"], ["", "def", "get_info", "(", "shapes_dir", ",", "isView", "=", "False", ")", ":", "\n", "    ", "names_dict", "=", "{", "}", "\n", "if", "isView", ":", "\n", "        ", "for", "shape_dir", "in", "shapes_dir", ":", "\n", "            ", "name", "=", "'_'", ".", "join", "(", "os", ".", "path", ".", "split", "(", "shape_dir", ")", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "name", "in", "names_dict", ":", "\n", "                ", "names_dict", "[", "name", "]", ".", "append", "(", "shape_dir", ")", "\n", "", "else", ":", "\n", "                ", "names_dict", "[", "name", "]", "=", "[", "shape_dir", "]", "\n", "", "", "", "else", ":", "\n", "        ", "for", "shape_dir", "in", "shapes_dir", ":", "\n", "            ", "name", "=", "os", ".", "path", ".", "split", "(", "shape_dir", ")", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "names_dict", "[", "name", "]", "=", "shape_dir", "\n", "\n", "", "", "return", "names_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.None.train_source.main": [[41, 254], ["print", "print", "print", "print", "len", "len", "len", "len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "model_pointnet.Pointnet_cls", "model.to.to", "torch.CrossEntropyLoss", "criterion.to.to", "torch.Adam", "torch.lr_scheduler.CosineAnnealingLR", "range", "model.to.parameters", "optim.lr_scheduler.CosineAnnealingLR.step", "print", "writer.add_scalar", "model.to.train", "enumerate", "optim.lr_scheduler.CosineAnnealingLR.get_lr", "optim.lr_scheduler.CosineAnnealingLR.get_lr", "data.to.to", "label.to().long.to().long", "model.to.", "criterion.to.", "criterion.backward", "optim.Adam.step", "optim.Adam.zero_grad", "data.to.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.to.eval", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "range", "print", "writer.add_scalar", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "range", "print", "writer.add_scalar", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "range", "print", "writer.add_scalar", "criterion.item", "data.to.size", "print", "data.to.to", "label.to().long.to().long", "model.to.", "criterion.to.", "torch.max", "torch.max", "torch.max", "range", "torch.sum", "torch.sum", "torch.sum", "data.to.size", "correct_total.double", "range", "data.to.to", "label.to().long.to().long", "model.to.", "criterion.to.", "torch.max", "torch.max", "torch.max", "range", "torch.sum", "torch.sum", "torch.sum", "data.to.size", "correct_total.double", "range", "data.to.to", "label.to().long.to().long", "model.to.", "criterion.to.", "torch.max", "torch.max", "torch.max", "range", "torch.sum", "torch.sum", "torch.sum", "data.to.size", "correct_total.double", "range", "label.to().long.to", "label_j_list.sum().cpu().float", "range", "criterion.item", "data.to.size", "label_j_list.sum().cpu().float", "range", "criterion.item", "data.to.size", "label_j_list.sum().cpu().float", "range", "criterion.item", "data.to.size", "label.to().long.to", "label.to().long.to", "label.to().long.to", "label_j_list.sum().cpu", "label_j_list.sum().cpu", "label_j_list.sum().cpu", "label_j_list.sum", "label_j_list.sum", "label_j_list.sum"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.Model.GradReverse.backward"], ["def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'Start Training\\nInitiliazing\\n'", ")", "\n", "print", "(", "'src:'", ",", "args", ".", "source", ")", "\n", "print", "(", "'tar1:'", ",", "args", ".", "target1", ")", "\n", "print", "(", "'tar2:'", ",", "args", ".", "target2", ")", "\n", "data_func", "=", "{", "'modelnet'", ":", "Modelnet40_data", ",", "'scannet'", ":", "Scannet_data_h5", ",", "'shapenet'", ":", "Shapenet_data", "}", "\n", "\n", "source_train_dataset", "=", "data_func", "[", "args", ".", "source", "]", "(", "pc_input_num", "=", "1024", ",", "status", "=", "'train'", ",", "aug", "=", "True", ",", "pc_root", "=", "dir_root", "+", "args", ".", "source", ")", "\n", "source_test_dataset", "=", "data_func", "[", "args", ".", "source", "]", "(", "pc_input_num", "=", "1024", ",", "status", "=", "'test'", ",", "aug", "=", "False", ",", "pc_root", "=", "dir_root", "+", "args", ".", "source", ")", "\n", "target_test_dataset1", "=", "data_func", "[", "args", ".", "target1", "]", "(", "pc_input_num", "=", "1024", ",", "status", "=", "'test'", ",", "aug", "=", "False", ",", "pc_root", "=", "dir_root", "+", "args", ".", "target1", ")", "\n", "target_test_dataset2", "=", "data_func", "[", "args", ".", "target2", "]", "(", "pc_input_num", "=", "1024", ",", "status", "=", "'test'", ",", "aug", "=", "False", ",", "pc_root", "=", "dir_root", "+", "args", ".", "target2", ")", "\n", "\n", "\n", "num_source_train", "=", "len", "(", "source_train_dataset", ")", "\n", "num_source_test", "=", "len", "(", "source_test_dataset", ")", "\n", "num_target_test1", "=", "len", "(", "target_test_dataset1", ")", "\n", "num_target_test2", "=", "len", "(", "target_test_dataset2", ")", "\n", "\n", "source_train_dataloader", "=", "DataLoader", "(", "source_train_dataset", ",", "batch_size", "=", "BATCH_SIZE", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "drop_last", "=", "False", ")", "\n", "source_test_dataloader", "=", "DataLoader", "(", "source_test_dataset", ",", "batch_size", "=", "BATCH_SIZE", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "drop_last", "=", "False", ")", "\n", "target_test_dataloader1", "=", "DataLoader", "(", "target_test_dataset1", ",", "batch_size", "=", "BATCH_SIZE", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "drop_last", "=", "False", ")", "\n", "target_test_dataloader2", "=", "DataLoader", "(", "target_test_dataset2", ",", "batch_size", "=", "BATCH_SIZE", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "drop_last", "=", "False", ")", "\n", "\n", "print", "(", "'num_source_train: {:d}, num_source_test: {:d}, num_target_test1: {:d}, num_target_test2: {:d}'", ".", "format", "(", "\n", "num_source_train", ",", "num_source_test", ",", "num_target_test1", ",", "num_target_test2", ")", ")", "\n", "print", "(", "'batch_size:'", ",", "BATCH_SIZE", ")", "\n", "\n", "# Model", "\n", "\n", "model", "=", "Pointnet_cls", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "\n", "# Optimizer", "\n", "remain_epoch", "=", "50", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "LR", ",", "weight_decay", "=", "weight_decay", ")", "\n", "lr_schedule", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "args", ".", "epochs", "+", "remain_epoch", ")", "\n", "# lr_schedule = optim.lr_scheduler.StepLR(optimizer, step_size=20, gamma=0.7)", "\n", "\n", "\n", "best_source_test_acc", "=", "0", "\n", "best_target_test_acc1", "=", "0", "\n", "best_target_test_acc2", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "max_epoch", ")", ":", "\n", "\n", "        ", "lr_schedule", ".", "step", "(", "epoch", "=", "epoch", ")", "\n", "print", "(", "lr_schedule", ".", "get_lr", "(", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'lr'", ",", "lr_schedule", ".", "get_lr", "(", ")", ",", "epoch", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "loss_total", "=", "0", "\n", "data_total", "=", "0", "\n", "\n", "for", "batch_idx", ",", "batch_s", "in", "enumerate", "(", "source_train_dataloader", ")", ":", "\n", "\n", "            ", "data", ",", "label", "=", "batch_s", "\n", "\n", "data", "=", "data", ".", "to", "(", "device", "=", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "\n", "output_s", "=", "model", "(", "data", ")", "\n", "\n", "loss_s", "=", "criterion", "(", "output_s", ",", "label", ")", "\n", "\n", "loss_s", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss_total", "+=", "loss_s", ".", "item", "(", ")", "*", "data", ".", "size", "(", "0", ")", "\n", "data_total", "+=", "data", ".", "size", "(", "0", ")", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'Train:{} [{} /{}  loss: {:.4f} \\t]'", ".", "format", "(", "\n", "epoch", ",", "data_total", ",", "num_source_train", ",", "loss_total", "/", "data_total", ")", ")", "\n", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "# ------------Source------------", "\n", "loss_total", "=", "0", "\n", "correct_total", "=", "0", "\n", "data_total", "=", "0", "\n", "acc_class", "=", "torch", ".", "zeros", "(", "10", ",", "1", ")", "\n", "acc_to_class", "=", "torch", ".", "zeros", "(", "10", ",", "1", ")", "\n", "acc_to_all_class", "=", "torch", ".", "zeros", "(", "10", ",", "10", ")", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "source_test_dataloader", ")", ":", "\n", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", "=", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "label", ")", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "\n", "acc", "=", "pred", "==", "label", "\n", "\n", "for", "j", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                    ", "label_j_list", "=", "(", "label", "==", "j", ")", "\n", "acc_class", "[", "j", "]", "+=", "(", "pred", "[", "acc", "]", "==", "j", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "acc_to_class", "[", "j", "]", "+=", "label_j_list", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                        ", "acc_to_all_class", "[", "j", ",", "k", "]", "+=", "(", "pred", "[", "label_j_list", "]", "==", "k", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "\n", "", "", "loss_total", "+=", "loss", ".", "item", "(", ")", "*", "data", ".", "size", "(", "0", ")", "\n", "correct_total", "+=", "torch", ".", "sum", "(", "pred", "==", "label", ")", "\n", "data_total", "+=", "data", ".", "size", "(", "0", ")", "\n", "\n", "", "pred_loss", "=", "loss_total", "/", "data_total", "\n", "pred_acc", "=", "correct_total", ".", "double", "(", ")", "/", "data_total", "\n", "\n", "if", "pred_acc", ">", "best_source_test_acc", ":", "\n", "                ", "best_source_test_acc", "=", "pred_acc", "\n", "", "for", "j", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                ", "for", "k", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                    ", "acc_to_all_class", "[", "j", ",", "k", "]", "=", "acc_to_all_class", "[", "j", ",", "k", "]", "/", "acc_to_class", "[", "j", "]", "\n", "", "", "print", "(", "'Source Test:{} [overall_acc: {:.4f} \\t loss: {:.4f} \\t Best Source Test Acc: {:.4f}]'", ".", "format", "(", "\n", "epoch", ",", "pred_acc", ",", "pred_loss", ",", "best_source_test_acc", "\n", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'accs/source_test_acc'", ",", "pred_acc", ",", "epoch", ")", "\n", "\n", "# ------------Target1------------", "\n", "loss_total", "=", "0", "\n", "correct_total", "=", "0", "\n", "data_total", "=", "0", "\n", "acc_class", "=", "torch", ".", "zeros", "(", "10", ",", "1", ")", "\n", "acc_to_class", "=", "torch", ".", "zeros", "(", "10", ",", "1", ")", "\n", "acc_to_all_class", "=", "torch", ".", "zeros", "(", "10", ",", "10", ")", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "target_test_dataloader1", ")", ":", "\n", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", "=", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "label", ")", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "\n", "acc", "=", "pred", "==", "label", "\n", "\n", "for", "j", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                    ", "label_j_list", "=", "(", "label", "==", "j", ")", "\n", "acc_class", "[", "j", "]", "+=", "(", "pred", "[", "acc", "]", "==", "j", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "acc_to_class", "[", "j", "]", "+=", "label_j_list", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                        ", "acc_to_all_class", "[", "j", ",", "k", "]", "+=", "(", "pred", "[", "label_j_list", "]", "==", "k", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "\n", "", "", "loss_total", "+=", "loss", ".", "item", "(", ")", "*", "data", ".", "size", "(", "0", ")", "\n", "correct_total", "+=", "torch", ".", "sum", "(", "pred", "==", "label", ")", "\n", "data_total", "+=", "data", ".", "size", "(", "0", ")", "\n", "\n", "", "pred_loss", "=", "loss_total", "/", "data_total", "\n", "pred_acc", "=", "correct_total", ".", "double", "(", ")", "/", "data_total", "\n", "\n", "if", "pred_acc", ">", "best_target_test_acc1", ":", "\n", "                ", "best_target_test_acc1", "=", "pred_acc", "\n", "", "for", "j", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                ", "for", "k", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                    ", "acc_to_all_class", "[", "j", ",", "k", "]", "=", "acc_to_all_class", "[", "j", ",", "k", "]", "/", "acc_to_class", "[", "j", "]", "\n", "", "", "print", "(", "'Target 1:{} [overall_acc: {:.4f} \\t loss: {:.4f} \\t Best Target 1 Acc: {:.4f}]'", ".", "format", "(", "\n", "epoch", ",", "pred_acc", ",", "pred_loss", ",", "best_target_test_acc1", "\n", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'accs/target1_test_acc'", ",", "pred_acc", ",", "epoch", ")", "\n", "\n", "\n", "# ------------Target2------------", "\n", "loss_total", "=", "0", "\n", "correct_total", "=", "0", "\n", "data_total", "=", "0", "\n", "acc_class", "=", "torch", ".", "zeros", "(", "10", ",", "1", ")", "\n", "acc_to_class", "=", "torch", ".", "zeros", "(", "10", ",", "1", ")", "\n", "acc_to_all_class", "=", "torch", ".", "zeros", "(", "10", ",", "10", ")", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "target_test_dataloader2", ")", ":", "\n", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", "=", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "label", ")", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "\n", "acc", "=", "pred", "==", "label", "\n", "\n", "for", "j", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                    ", "label_j_list", "=", "(", "label", "==", "j", ")", "\n", "acc_class", "[", "j", "]", "+=", "(", "pred", "[", "acc", "]", "==", "j", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "acc_to_class", "[", "j", "]", "+=", "label_j_list", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                        ", "acc_to_all_class", "[", "j", ",", "k", "]", "+=", "(", "pred", "[", "label_j_list", "]", "==", "k", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "\n", "", "", "loss_total", "+=", "loss", ".", "item", "(", ")", "*", "data", ".", "size", "(", "0", ")", "\n", "correct_total", "+=", "torch", ".", "sum", "(", "pred", "==", "label", ")", "\n", "data_total", "+=", "data", ".", "size", "(", "0", ")", "\n", "\n", "", "pred_loss", "=", "loss_total", "/", "data_total", "\n", "pred_acc", "=", "correct_total", ".", "double", "(", ")", "/", "data_total", "\n", "\n", "if", "pred_acc", ">", "best_target_test_acc2", ":", "\n", "                ", "best_target_test_acc2", "=", "pred_acc", "\n", "", "for", "j", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                ", "for", "k", "in", "range", "(", "0", ",", "10", ")", ":", "\n", "                    ", "acc_to_all_class", "[", "j", ",", "k", "]", "=", "acc_to_all_class", "[", "j", ",", "k", "]", "/", "acc_to_class", "[", "j", "]", "\n", "", "", "print", "(", "'Target 2:{} [overall_acc: {:.4f} \\t loss: {:.4f} \\t Best Target 2 Acc: {:.4f}]'", ".", "format", "(", "\n", "epoch", ",", "pred_acc", ",", "pred_loss", ",", "best_target_test_acc2", "\n", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'accs/target2_test_acc'", ",", "pred_acc", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.ScanNet.prepare_scannet_cls_data_new10.main": [[15, 77], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "sorted", "print", "dict", "enumerate", "numpy.zeros", "numpy.zeros", "os.path.exists", "os.mkdir", "os.path.join", "os.listdir", "set", "len", "os.path.join", "os.path.join", "sorted.append", "open", "os.listdir", "enumerate", "int", "os.path.join", "numpy.array", "numpy.random.shuffle", "numpy.random.choice", "os.path.join", "print", "filelist_h5.write", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close", "filename[].split", "int", "float", "open", "len", "datetime.datetime.now", "filename[].split", "xyzrgb.split", "len", "xyzrgb.split"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.None.visualize_sample.mkdir"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--folder'", ",", "'-f'", ",", "help", "=", "'Path to pts data folder'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "'-o'", ",", "help", "=", "'Path to save output'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "batch_size", "=", "2048", "\n", "sample_num", "=", "2048", "\n", "\n", "folder_scanenet", "=", "args", ".", "folder", "if", "args", ".", "folder", "else", "'../../data/scannet/cls_new10'", "\n", "folder_output", "=", "args", ".", "output", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_output", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "folder_output", ")", "\n", "", "train_test_folders", "=", "[", "'train'", ",", "'test'", "]", "\n", "\n", "label_list", "=", "[", "]", "\n", "for", "folder", "in", "train_test_folders", ":", "\n", "        ", "folder_pts", "=", "os", ".", "path", ".", "join", "(", "folder_scanenet", ",", "folder", ",", "'pts'", ")", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "folder_pts", ")", ":", "\n", "            ", "label_list", ".", "append", "(", "int", "(", "filename", "[", ":", "-", "4", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", ")", "\n", "", "", "label_list", "=", "sorted", "(", "set", "(", "label_list", ")", ")", "\n", "print", "(", "'label_num:'", ",", "len", "(", "label_list", ")", ")", "\n", "label_dict", "=", "dict", "(", ")", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "label_list", ")", ":", "\n", "        ", "label_dict", "[", "label", "]", "=", "idx", "\n", "\n", "", "data", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "sample_num", ",", "6", ")", ")", "\n", "label", "=", "np", ".", "zeros", "(", "(", "batch_size", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "folder", "in", "train_test_folders", ":", "\n", "        ", "folder_pts", "=", "os", ".", "path", ".", "join", "(", "folder_scanenet", ",", "folder", ",", "'pts'", ")", "\n", "\n", "idx_h5", "=", "0", "\n", "filename_filelist_h5", "=", "os", ".", "path", ".", "join", "(", "folder_output", ",", "'%s_files.txt'", "%", "folder", ")", "\n", "with", "open", "(", "filename_filelist_h5", ",", "'w'", ")", "as", "filelist_h5", ":", "\n", "            ", "filelist", "=", "os", ".", "listdir", "(", "folder_pts", ")", "\n", "for", "idx_pts", ",", "filename", "in", "enumerate", "(", "filelist", ")", ":", "\n", "                ", "label_object", "=", "label_dict", "[", "int", "(", "filename", "[", ":", "-", "4", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "]", "\n", "filename_pts", "=", "os", ".", "path", ".", "join", "(", "folder_pts", ",", "filename", ")", "\n", "xyzrgbs", "=", "np", ".", "array", "(", "[", "[", "float", "(", "value", ")", "for", "value", "in", "xyzrgb", ".", "split", "(", "' '", ")", "]", "\n", "for", "xyzrgb", "in", "open", "(", "filename_pts", ",", "'r'", ")", "if", "len", "(", "xyzrgb", ".", "split", "(", "' '", ")", ")", "==", "6", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "xyzrgbs", ")", "\n", "pt_num", "=", "xyzrgbs", ".", "shape", "[", "0", "]", "\n", "indices", "=", "np", ".", "random", ".", "choice", "(", "pt_num", ",", "sample_num", ",", "replace", "=", "(", "pt_num", "<", "sample_num", ")", ")", "\n", "points_array", "=", "xyzrgbs", "[", "indices", "]", "\n", "points_array", "[", "...", ",", "3", ":", "]", "=", "points_array", "[", "...", ",", "3", ":", "]", "/", "255", "-", "0.5", "# normalize colors", "\n", "\n", "idx_in_batch", "=", "idx_pts", "%", "batch_size", "\n", "data", "[", "idx_in_batch", ",", "...", "]", "=", "points_array", "\n", "label", "[", "idx_in_batch", "]", "=", "label_object", "\n", "if", "(", "(", "idx_pts", "+", "1", ")", "%", "batch_size", "==", "0", ")", "or", "idx_pts", "==", "len", "(", "filelist", ")", "-", "1", ":", "\n", "                    ", "item_num", "=", "idx_in_batch", "+", "1", "\n", "filename_h5", "=", "os", ".", "path", ".", "join", "(", "folder_output", ",", "'%s_%d.h5'", "%", "(", "folder", ",", "idx_h5", ")", ")", "\n", "print", "(", "'{}-Saving {}...'", ".", "format", "(", "datetime", ".", "now", "(", ")", ",", "filename_h5", ")", ")", "\n", "filelist_h5", ".", "write", "(", "'./%s_%d.h5\\n'", "%", "(", "folder", ",", "idx_h5", ")", ")", "\n", "\n", "file", "=", "h5py", ".", "File", "(", "filename_h5", ",", "'w'", ")", "\n", "file", ".", "create_dataset", "(", "'data'", ",", "data", "=", "data", "[", "0", ":", "item_num", ",", "...", "]", ")", "\n", "file", ".", "create_dataset", "(", "'label'", ",", "data", "=", "label", "[", "0", ":", "item_num", ",", "...", "]", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n", "idx_h5", "=", "idx_h5", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.ScanNet.extract_scannet_objs_revised.dir": [[16, 42], ["os.listdir", "os.path.isdir", "os.path.isfile", "print", "dirList.append", "dirList.append", "fileList.append", "fileList.append"], "function", ["None"], ["def", "dir", "(", "root", ",", "type", "=", "'f'", ",", "addroot", "=", "True", ")", ":", "\n", "    ", "dirList", "=", "[", "]", "\n", "fileList", "=", "[", "]", "\n", "root", "=", "root", "+", "\"/\"", "\n", "files", "=", "os", ".", "listdir", "(", "root", ")", "\n", "\n", "for", "f", "in", "files", ":", "\n", "        ", "if", "(", "os", ".", "path", ".", "isdir", "(", "root", "+", "f", ")", ")", ":", "\n", "            ", "if", "addroot", "==", "True", ":", "\n", "                ", "dirList", ".", "append", "(", "root", "+", "f", ")", "\n", "", "else", ":", "\n", "                ", "dirList", ".", "append", "(", "f", ")", "\n", "\n", "", "", "if", "(", "os", ".", "path", ".", "isfile", "(", "root", "+", "f", ")", ")", ":", "\n", "            ", "if", "addroot", "==", "True", ":", "\n", "                ", "fileList", ".", "append", "(", "root", "+", "f", ")", "\n", "", "else", ":", "\n", "                ", "fileList", ".", "append", "(", "f", ")", "\n", "\n", "", "", "", "if", "type", "==", "\"f\"", ":", "\n", "        ", "return", "fileList", "\n", "", "elif", "type", "==", "\"d\"", ":", "\n", "        ", "return", "dirList", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"ERROR: TMC.dir(root,type) type must be [f] for file or [d] for dir\"", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.ScanNet.extract_scannet_objs_revised.save_ply": [[44, 64], ["numpy.array", "numpy.array", "len", "numpy.empty", "plyfile.PlyData", "plyfile.PlyData.write", "print", "len", "tuple", "tuple", "plyfile.PlyElement.describe"], "function", ["None"], ["", "", "def", "save_ply", "(", "points", ",", "colors", ",", "filename", ")", ":", "\n", "    ", "vertex", "=", "np", ".", "array", "(", "[", "tuple", "(", "p", ")", "for", "p", "in", "points", "]", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", "]", ")", "\n", "\n", "vertex_color", "=", "np", ".", "array", "(", "[", "tuple", "(", "c", ")", "for", "c", "in", "colors", "]", ",", "dtype", "=", "[", "(", "'red'", ",", "'u1'", ")", ",", "(", "'green'", ",", "'u1'", ")", ",", "(", "'blue'", ",", "'u1'", ")", "]", ")", "\n", "\n", "n", "=", "len", "(", "vertex", ")", "\n", "assert", "len", "(", "vertex_color", ")", "==", "n", "\n", "\n", "vertex_all", "=", "np", ".", "empty", "(", "n", ",", "dtype", "=", "vertex", ".", "dtype", ".", "descr", "+", "vertex_color", ".", "dtype", ".", "descr", ")", "\n", "\n", "for", "prop", "in", "vertex", ".", "dtype", ".", "names", ":", "\n", "        ", "vertex_all", "[", "prop", "]", "=", "vertex", "[", "prop", "]", "\n", "\n", "", "for", "prop", "in", "vertex_color", ".", "dtype", ".", "names", ":", "\n", "        ", "vertex_all", "[", "prop", "]", "=", "vertex_color", "[", "prop", "]", "\n", "\n", "", "ply", "=", "plyfile", ".", "PlyData", "(", "[", "plyfile", ".", "PlyElement", ".", "describe", "(", "vertex_all", ",", "'vertex'", ")", "]", ",", "text", "=", "False", ")", "\n", "ply", ".", "write", "(", "filename", ")", "\n", "\n", "print", "(", "\"save ply to\"", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.ScanNet.extract_scannet_objs_revised.pc_getbbox": [[66, 79], ["x.append", "y.append", "z.append", "min", "max", "min", "max", "min", "max"], "function", ["None"], ["", "def", "pc_getbbox", "(", "pc", ")", ":", "\n", "    ", "x", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "z", "=", "[", "]", "\n", "\n", "for", "pts", "in", "pc", ":", "\n", "        ", "x", ".", "append", "(", "pts", "[", "0", "]", ")", "\n", "y", ".", "append", "(", "pts", "[", "1", "]", ")", "\n", "z", ".", "append", "(", "pts", "[", "2", "]", ")", "\n", "\n", "", "boundary", "=", "[", "min", "(", "x", ")", ",", "max", "(", "x", ")", ",", "min", "(", "y", ")", ",", "max", "(", "y", ")", ",", "min", "(", "z", ")", ",", "max", "(", "z", ")", "]", "\n", "\n", "return", "boundary", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.ScanNet.extract_scannet_objs_revised.scene2instances": [[81, 244], ["print", "print", "len", "print", "print", "json.load", "print", "json.load", "enumerate", "obj_dict.keys", "scene_path.strip().split", "sceneid.split", "sceneid.split", "os.path.exists", "print", "os.makedirs", "open", "json_data[].strip", "len", "print", "os.exit", "open", "aggjson_data[].strip", "print", "os.exit", "str().strip", "obj_dict[].append", "os.path.exists", "print", "os.makedirs", "print", "os.exit", "obj_dict.keys", "objkey.split", "objkey.split", "label_list.index", "open", "extract_scannet_objs_revised.pc_getbbox", "range", "enumerate", "open.close", "scene_path.strip", "plyfile.PlyData.read", "seg[].strip", "str", "pts.append", "rgb.append", "len", "enumerate", "extract_scannet_objs_revised.save_ply", "open.writelines", "str", "seg_pts.append", "seg_ply.append", "str", "str", "str", "int", "str", "str", "str", "str", "str", "int", "str", "str"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.ScanNet.extract_scannet_objs_revised.pc_getbbox", "home.repos.pwc.inspect_result.canqin001_PointDAN.ScanNet.extract_scannet_objs_revised.save_ply"], ["", "def", "scene2instances", "(", "scene_path", ",", "out_root", ",", "all_label", ",", "label_map", ",", "issave_ply", ")", ":", "\n", "    ", "print", "(", "\"Process Scene:\"", ",", "scene_path", ")", "\n", "\n", "sceneid", "=", "scene_path", ".", "strip", "(", ")", ".", "split", "(", "\"scene\"", ")", "[", "1", "]", "\n", "spaceid", "=", "sceneid", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "scanid", "=", "sceneid", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "\n", "label_list", "=", "all_label", "[", "0", "]", "\n", "label_info", "=", "all_label", "[", "1", "]", "\n", "\n", "pts_dir", "=", "out_root", "+", "\"/pts/\"", "\n", "\n", "# check the path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pts_dir", ")", ":", "\n", "        ", "print", "(", "pts_dir", ",", "\"Not Exists! Create\"", ",", "pts_dir", ")", "\n", "os", ".", "makedirs", "(", "pts_dir", ")", "\n", "\n", "", "if", "save_ply", ":", "\n", "\n", "        ", "ply_dir", "=", "out_root", "+", "\"/ply/\"", "+", "spaceid", "+", "scanid", "+", "\"/\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ply_dir", ")", ":", "\n", "            ", "print", "(", "ply_dir", ",", "\"Not Exists! Create\"", ",", "ply_dir", ")", "\n", "os", ".", "makedirs", "(", "ply_dir", ")", "\n", "\n", "", "", "ply_file", "=", "scene_path", "+", "\"/scene\"", "+", "sceneid", "+", "\"_vh_clean_2.ply\"", "\n", "jsonflie", "=", "scene_path", "+", "\"/scene\"", "+", "sceneid", "+", "\"_vh_clean_2.0.010000.segs.json\"", "\n", "aggjsonfile", "=", "scene_path", "+", "\"/scene\"", "+", "sceneid", "+", "\".aggregation.json\"", "\n", "\n", "# Read ply file", "\n", "print", "(", "\"\\nRead ply file:\"", ",", "ply_file", ")", "\n", "plydata", "=", "PlyData", ".", "read", "(", "ply_file", ")", ".", "elements", "[", "0", "]", ".", "data", "\n", "pts_num", "=", "len", "(", "plydata", ")", "\n", "print", "(", "\"points num:\"", ",", "pts_num", ")", "\n", "\n", "# Read json file", "\n", "print", "(", "\"Read json file:\"", ",", "jsonflie", ")", "\n", "json_data", "=", "json", ".", "load", "(", "open", "(", "jsonflie", ")", ")", "\n", "\n", "# check json file", "\n", "if", "json_data", "[", "'sceneId'", "]", ".", "strip", "(", ")", "==", "(", "'scene'", "+", "sceneid", ")", ":", "\n", "\n", "        ", "segIndices", "=", "json_data", "[", "'segIndices'", "]", "\n", "seg_num", "=", "len", "(", "segIndices", ")", "\n", "\n", "# check num", "\n", "if", "seg_num", "!=", "pts_num", ":", "\n", "            ", "print", "(", "\"seg num != pts num!\"", ")", "\n", "os", ".", "exit", "(", "0", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "        ", "print", "(", "\"Read Wrong Json File!\"", ")", "\n", "os", ".", "exit", "(", "0", ")", "\n", "\n", "# Read aggregation json file", "\n", "", "print", "(", "\"Read aggregation json file:\"", ",", "aggjsonfile", ")", "\n", "aggjson_data", "=", "json", ".", "load", "(", "open", "(", "aggjsonfile", ")", ")", "\n", "\n", "# check json file", "\n", "if", "aggjson_data", "[", "'sceneId'", "]", ".", "strip", "(", ")", "==", "(", "'scene'", "+", "sceneid", ")", ":", "\n", "\n", "        ", "segGroups", "=", "aggjson_data", "[", "'segGroups'", "]", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "print", "(", "\"Read Wrong Aggregation Json File!\"", ")", "\n", "os", ".", "exit", "(", "0", ")", "\n", "\n", "# split pts", "\n", "", "obj_dict", "=", "{", "}", "\n", "\n", "for", "k", ",", "pts", "in", "enumerate", "(", "plydata", ")", ":", "\n", "\n", "        ", "seg_indice", "=", "segIndices", "[", "k", "]", "\n", "\n", "# find obj", "\n", "label", "=", "\"unannotated\"", "\n", "objid", "=", "-", "1", "\n", "\n", "for", "seg", "in", "segGroups", ":", "\n", "\n", "            ", "segments", "=", "seg", "[", "'segments'", "]", "\n", "\n", "if", "seg_indice", "in", "segments", ":", "\n", "                ", "label", "=", "seg", "[", "'label'", "]", ".", "strip", "(", ")", "\n", "objid", "=", "seg", "[", "'objectId'", "]", "\n", "\n", "break", "\n", "\n", "", "", "obj_key", "=", "str", "(", "label", "+", "\"_\"", "+", "str", "(", "objid", ")", ")", ".", "strip", "(", ")", "\n", "\n", "if", "obj_key", "not", "in", "obj_dict", ".", "keys", "(", ")", ":", "\n", "            ", "obj_dict", "[", "obj_key", "]", "=", "[", "]", "\n", "\n", "", "obj_dict", "[", "obj_key", "]", ".", "append", "(", "pts", ")", "\n", "\n", "# save data file by obj", "\n", "", "for", "objkey", "in", "obj_dict", ".", "keys", "(", ")", ":", "\n", "\n", "        ", "obj_label", "=", "objkey", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "obj_id", "=", "objkey", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "\n", "if", "obj_label", "in", "label_list", ":", "\n", "\n", "            ", "label_id", "=", "label_list", ".", "index", "(", "obj_label", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "label_id", "=", "0", "\n", "\n", "", "label_full", "=", "label_info", "[", "label_id", "]", "\n", "\n", "label_id", "=", "label_full", "[", "0", "]", "\n", "label_s55", "=", "label_full", "[", "3", "]", "\n", "label_cat", "=", "label_full", "[", "1", "]", "\n", "label_s10_id", "=", "0", "\n", "\n", "for", "l", "in", "label_map", ":", "\n", "\n", "            ", "if", "label_cat", "==", "l", "[", "1", "]", ":", "\n", "                ", "label_s10_id", "=", "l", "[", "0", "]", "\n", "\n", "", "", "if", "label_s10_id", "!=", "0", ":", "\n", "\n", "            ", "pts_out_file", "=", "pts_dir", "+", "spaceid", "+", "scanid", "+", "\"%04d\"", "%", "int", "(", "obj_id", ")", "+", "\"_\"", "+", "str", "(", "label_s10_id", ")", "+", "\".pts\"", "\n", "f_pts", "=", "open", "(", "pts_out_file", ",", "\"w\"", ")", "\n", "\n", "pts", "=", "[", "]", "\n", "rgb", "=", "[", "]", "\n", "\n", "for", "p", "in", "obj_dict", "[", "objkey", "]", ":", "\n", "                ", "pts", ".", "append", "(", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", "]", ")", "\n", "rgb", ".", "append", "(", "[", "p", "[", "3", "]", ",", "p", "[", "4", "]", ",", "p", "[", "5", "]", "]", ")", "\n", "\n", "", "bbox", "=", "pc_getbbox", "(", "pts", ")", "\n", "dimxy", "=", "[", "bbox", "[", "1", "]", "-", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "2", "]", "]", "\n", "\n", "# retrans", "\n", "for", "i", "in", "range", "(", "len", "(", "pts", ")", ")", ":", "\n", "                ", "pts", "[", "i", "]", "=", "[", "pts", "[", "i", "]", "[", "0", "]", "-", "bbox", "[", "0", "]", "-", "dimxy", "[", "0", "]", "/", "2", ",", "pts", "[", "i", "]", "[", "2", "]", "-", "bbox", "[", "4", "]", ",", "pts", "[", "i", "]", "[", "1", "]", "-", "bbox", "[", "2", "]", "-", "dimxy", "[", "1", "]", "/", "2", "]", "\n", "\n", "", "if", "issave_ply", ":", "\n", "\n", "                ", "ply_out_file", "=", "ply_dir", "+", "spaceid", "+", "\"_\"", "+", "scanid", "+", "\"_\"", "+", "\"%04d\"", "%", "int", "(", "\n", "obj_id", ")", "+", "\"_\"", "+", "obj_label", "+", "\"_\"", "+", "str", "(", "label_id", ")", "+", "\"_\"", "+", "str", "(", "label_s55", ")", "+", "\"_\"", "+", "str", "(", "\n", "label_s10_id", ")", "+", "\".ply\"", "\n", "\n", "seg_pts", "=", "[", "]", "\n", "seg_ply", "=", "[", "]", "\n", "\n", "for", "k", ",", "p", "in", "enumerate", "(", "pts", ")", ":", "\n", "                    ", "seg_pts", ".", "append", "(", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", ")", ")", "\n", "seg_ply", ".", "append", "(", "(", "rgb", "[", "k", "]", "[", "0", "]", ",", "rgb", "[", "k", "]", "[", "1", "]", ",", "rgb", "[", "k", "]", "[", "2", "]", ")", ")", "\n", "\n", "", "save_ply", "(", "seg_pts", ",", "seg_ply", ",", "ply_out_file", ")", "\n", "\n", "# write pts xyzrgb", "\n", "", "for", "k", ",", "p", "in", "enumerate", "(", "pts", ")", ":", "\n", "                ", "f_pts", ".", "writelines", "(", "str", "(", "p", "[", "0", "]", ")", "+", "\" \"", "+", "str", "(", "p", "[", "1", "]", ")", "+", "\" \"", "+", "str", "(", "p", "[", "2", "]", ")", "+", "\" \"", "+", "str", "(", "rgb", "[", "k", "]", "[", "0", "]", ")", "+", "\" \"", "+", "str", "(", "\n", "rgb", "[", "k", "]", "[", "1", "]", ")", "+", "\" \"", "+", "str", "(", "rgb", "[", "k", "]", "[", "2", "]", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "f_pts", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.canqin001_PointDAN.ScanNet.extract_scannet_objs_revised.main": [[246, 345], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "extract_scannet_objs_revised.dir", "print", "print", "print", "print", "print", "print", "print", "print", "open", "train_f.readlines", "open", "train_f.readlines", "open", "enumerate", "open", "enumerate", "len", "len", "len", "len", "len", "extract_scannet_objs_revised.scene2instances", "extract_scannet_objs_revised.scene2instances", "train_scene_list.append", "test_scene_list.append", "tsv_f.readlines", "label_scannet10_f.readlines", "line.strip().split", "label_scannet10_map.append", "scene.strip().split", "sceneid.split", "sceneid.split", "process_train_list.append", "line.strip().split", "sceneid.split", "sceneid.split", "line.strip().split", "sceneid.split", "sceneid.split", "line.strip().split", "int", "int", "label_map.append", "label_info.append", "process_test_list.append", "line.strip", "scene.strip", "line.strip", "line.strip", "line.strip"], "function", ["home.repos.pwc.inspect_result.canqin001_PointDAN.ScanNet.extract_scannet_objs_revised.dir", "home.repos.pwc.inspect_result.canqin001_PointDAN.ScanNet.extract_scannet_objs_revised.scene2instances", "home.repos.pwc.inspect_result.canqin001_PointDAN.ScanNet.extract_scannet_objs_revised.scene2instances"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--folder'", ",", "'-f'", ",", "help", "=", "'Path to data folder'", ")", "\n", "parser", ".", "add_argument", "(", "'--benchmark'", ",", "'-b'", ",", "help", "=", "'Path to benchmark folder'", ")", "\n", "parser", ".", "add_argument", "(", "'--outpath'", ",", "'-o'", ",", "help", "=", "'Path to output folder'", ")", "\n", "parser", ".", "add_argument", "(", "'--saveply'", ",", "'-s'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Save color ply or not'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "label_tsv", "=", "args", ".", "benchmark", "+", "\"/scannet-labels.combined.tsv\"", "\n", "trainval_list_file", "=", "args", ".", "benchmark", "+", "\"/scannet_trainval.txt\"", "\n", "test_list_file", "=", "args", ".", "benchmark", "+", "\"/scannet_test.txt\"", "\n", "label_scannet10", "=", "args", ".", "benchmark", "+", "\"/classes_ObjClassification-scannet10.txt\"", "\n", "\n", "##########################################################Read Source##########################################################", "\n", "\n", "print", "(", "\"read scene dir:\"", ",", "args", ".", "folder", ")", "\n", "scenedir", "=", "dir", "(", "args", ".", "folder", ",", "'d'", ")", "\n", "\n", "print", "(", "\"read trainval list:\"", ",", "trainval_list_file", ")", "\n", "train_scene_list", "=", "[", "]", "\n", "with", "open", "(", "trainval_list_file", ",", "'r'", ")", "as", "train_f", ":", "\n", "        ", "for", "line", "in", "train_f", ".", "readlines", "(", ")", ":", "\n", "            ", "sceneid", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"scene\"", ")", "[", "1", "]", "\n", "spaceid", "=", "sceneid", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "scanid", "=", "sceneid", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "train_scene_list", ".", "append", "(", "spaceid", "+", "scanid", ")", "\n", "\n", "", "", "print", "(", "\"read test list:\"", ",", "test_list_file", ")", "\n", "test_scene_list", "=", "[", "]", "\n", "with", "open", "(", "test_list_file", ",", "'r'", ")", "as", "train_f", ":", "\n", "        ", "for", "line", "in", "train_f", ".", "readlines", "(", ")", ":", "\n", "            ", "sceneid", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"scene\"", ")", "[", "1", "]", "\n", "spaceid", "=", "sceneid", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "scanid", "=", "sceneid", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "test_scene_list", ".", "append", "(", "spaceid", "+", "scanid", ")", "\n", "\n", "", "", "print", "(", "\"read label tsv file:\"", ",", "label_tsv", ")", "\n", "label_map", "=", "[", "]", "\n", "label_info", "=", "[", "]", "\n", "\n", "with", "open", "(", "label_tsv", ",", "'r'", ")", "as", "tsv_f", ":", "\n", "\n", "        ", "for", "k", ",", "line", "in", "enumerate", "(", "tsv_f", ".", "readlines", "(", ")", ")", ":", "\n", "\n", "            ", "if", "k", ">", "0", ":", "\n", "                ", "line_s", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "label_id", "=", "int", "(", "line_s", "[", "0", "]", ")", "\n", "category", "=", "line_s", "[", "1", "]", "\n", "count", "=", "int", "(", "line_s", "[", "2", "]", ")", "\n", "ShapeNetCore55", "=", "line_s", "[", "11", "]", "\n", "\n", "label_map", ".", "append", "(", "category", ")", "\n", "label_info", ".", "append", "(", "[", "label_id", ",", "category", ",", "count", ",", "ShapeNetCore55", "]", ")", "\n", "\n", "", "", "", "print", "(", "\"read scannet10 label file:\"", ",", "label_scannet10", ")", "\n", "label_scannet10_map", "=", "[", "]", "\n", "with", "open", "(", "label_scannet10", ",", "'r'", ")", "as", "label_scannet10_f", ":", "\n", "\n", "        ", "for", "k", ",", "line", "in", "enumerate", "(", "label_scannet10_f", ".", "readlines", "(", ")", ")", ":", "\n", "            ", "line_s", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "label_id", "=", "line_s", "[", "0", "]", "\n", "category", "=", "line_s", "[", "1", "]", "\n", "label_scannet10_map", ".", "append", "(", "[", "label_id", ",", "category", "]", ")", "\n", "\n", "# split scene to train and test", "\n", "", "", "process_train_list", "=", "[", "]", "\n", "process_test_list", "=", "[", "]", "\n", "\n", "for", "scene", "in", "scenedir", ":", "\n", "\n", "        ", "sceneid", "=", "scene", ".", "strip", "(", ")", ".", "split", "(", "\"scene\"", ")", "[", "1", "]", "\n", "spaceid", "=", "sceneid", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "scanid", "=", "sceneid", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "scenename", "=", "spaceid", "+", "scanid", "\n", "\n", "if", "scenename", "in", "train_scene_list", ":", "\n", "\n", "            ", "process_train_list", ".", "append", "(", "scene", ")", "\n", "\n", "", "elif", "scenename", "in", "test_scene_list", ":", "\n", "\n", "            ", "process_test_list", ".", "append", "(", "scene", ")", "\n", "\n", "", "", "print", "(", "\"Train all:\"", ",", "len", "(", "train_scene_list", ")", ",", "\"Test all:\"", ",", "len", "(", "test_scene_list", ")", ",", "\"Dir all:\"", ",", "len", "(", "scenedir", ")", ")", "\n", "print", "(", "\"Process Train:\"", ",", "len", "(", "process_train_list", ")", ",", "\"Process Test:\"", ",", "len", "(", "process_test_list", ")", ")", "\n", "\n", "##########################################################Process Data##########################################################", "\n", "print", "(", "\"Process Train Scene:\"", ")", "\n", "\n", "for", "scene", "in", "process_train_list", ":", "\n", "        ", "scene2instances", "(", "scene", ",", "args", ".", "outpath", "+", "\"/train/\"", ",", "[", "label_map", ",", "label_info", "]", ",", "label_scannet10_map", ",", "\n", "args", ".", "saveply", ")", "\n", "\n", "", "print", "(", "\"Process Test Scene:\"", ")", "\n", "\n", "for", "scene", "in", "process_test_list", ":", "\n", "        ", "scene2instances", "(", "scene", ",", "args", ".", "outpath", "+", "\"/test/\"", ",", "[", "label_map", ",", "label_info", "]", ",", "label_scannet10_map", ",", "args", ".", "saveply", ")", "\n", "\n"]]}