{"home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.ft_classify.calculate_accuracy": [[28, 37], ["targets.size", "outputs.topk", "pred.t.t", "pred.t.eq", "pred.eq.float().sum().data.item", "targets.view", "pred.eq.float().sum", "pred.eq.float"], "function", ["None"], ["def", "calculate_accuracy", "(", "outputs", ",", "targets", ")", ":", "\n", "    ", "batch_size", "=", "targets", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "outputs", ".", "topk", "(", "1", ",", "1", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "targets", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "n_correct_elems", "=", "correct", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "data", ".", "item", "(", ")", "\n", "\n", "return", "n_correct_elems", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.ft_classify.diff": [[39, 42], ["torch.roll", "torch.roll", "torch.roll"], "function", ["None"], ["", "def", "diff", "(", "x", ")", ":", "\n", "    ", "shift_x", "=", "torch", ".", "roll", "(", "x", ",", "1", ",", "2", ")", "\n", "return", "x", "-", "shift_x", "# without rescaling", "\n", "#return ((x - shift_x) + 1) / 2", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.ft_classify.load_pretrained_weights": [[45, 55], ["torch.load", "torch.load", "torch.load", "torch.load.items", "name.find"], "function", ["None"], ["", "def", "load_pretrained_weights", "(", "ckpt_path", ")", ":", "\n", "    ", "\"\"\"load pretrained weights and adjust params name.\"\"\"", "\n", "adjusted_weights", "=", "{", "}", "\n", "pretrained_weights", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "for", "name", ",", "params", "in", "pretrained_weights", ".", "items", "(", ")", ":", "\n", "        ", "if", "'base_network'", "in", "name", ":", "\n", "            ", "name", "=", "name", "[", "name", ".", "find", "(", "'.'", ")", "+", "1", ":", "]", "\n", "adjusted_weights", "[", "name", "]", "=", "params", "\n", "#print('Pretrained weight name: [{}]'.format(name))", "\n", "", "", "return", "adjusted_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.ft_classify.train": [[57, 98], ["torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model.train", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "enumerate", "print", "inputs.cuda.cuda", "targets.cuda.cuda", "optimizer.zero_grad", "criterion", "criterion.backward", "optimizer.step", "ft_classify.calculate_accuracy", "lib.utils.AverageMeter.update", "lib.utils.AverageMeter.update", "print", "model", "model", "criterion.data.item", "inputs.cuda.size", "inputs.cuda.size", "ft_classify.diff", "len"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.train", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.LinearAverage.LinearAverageOp.backward", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.ft_classify.calculate_accuracy", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.diff"], ["", "def", "train", "(", "args", ",", "model", ",", "criterion", ",", "optimizer", ",", "train_dataloader", ",", "epoch", ")", ":", "\n", "    ", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "accuracies", "=", "AverageMeter", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_dataloader", ",", "1", ")", ":", "\n", "# get inputs", "\n", "        ", "sampled_clips", ",", "u_clips", ",", "v_clips", ",", "targets", ",", "_", "=", "data", "\n", "if", "args", ".", "modality", "==", "'u'", ":", "\n", "            ", "inputs", "=", "u_clips", "\n", "", "elif", "args", ".", "modality", "==", "'v'", ":", "\n", "            ", "inputs", "=", "v_clips", "\n", "", "else", ":", "# rgb and res", "\n", "            ", "inputs", "=", "sampled_clips", "\n", "", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "# zero the parameter gradients", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# forward and backward", "\n", "if", "args", ".", "modality", "==", "'res'", ":", "\n", "            ", "outputs", "=", "model", "(", "diff", "(", "inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "acc", "=", "calculate_accuracy", "(", "outputs", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "accuracies", ".", "update", "(", "acc", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "print", "(", "'Train epoch: [{0:3d}/{1:3d}][{2:4d}/{3:4d}]\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc {acc.val:.3f} ({acc.avg:.3f})\\t'", "\n", "'lr: {lr}'", ".", "format", "(", "\n", "epoch", ",", "args", ".", "epochs", ",", "i", "+", "1", ",", "len", "(", "train_dataloader", ")", ",", "\n", "loss", "=", "losses", ",", "acc", "=", "accuracies", ",", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ",", "end", "=", "'\\r'", ")", "\n", "", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.ft_classify.validate": [[100, 138], ["torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model.eval", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "enumerate", "print", "inputs.cuda.cuda", "targets.cuda.cuda", "criterion", "ft_classify.calculate_accuracy", "lib.utils.AverageMeter.update", "lib.utils.AverageMeter.update", "print", "model", "model", "criterion.data.item", "inputs.cuda.size", "inputs.cuda.size", "ft_classify.diff", "len"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.ft_classify.calculate_accuracy", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.diff"], ["", "def", "validate", "(", "args", ",", "model", ",", "criterion", ",", "val_dataloader", ",", "epoch", ")", ":", "\n", "    ", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "accuracies", "=", "AverageMeter", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "val_dataloader", ")", ":", "\n", "# get inputs", "\n", "        ", "sampled_clips", ",", "u_clips", ",", "v_clips", ",", "targets", ",", "_", "=", "data", "\n", "if", "args", ".", "modality", "==", "'u'", ":", "\n", "            ", "inputs", "=", "u_clips", "\n", "", "elif", "args", ".", "modality", "==", "'v'", ":", "\n", "            ", "inputs", "=", "v_clips", "\n", "", "else", ":", "# rgb and res", "\n", "            ", "inputs", "=", "sampled_clips", "\n", "", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "# forward", "\n", "if", "args", ".", "modality", "==", "'res'", ":", "\n", "            ", "outputs", "=", "model", "(", "diff", "(", "inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "# compute loss and acc", "\n", "acc", "=", "calculate_accuracy", "(", "outputs", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "accuracies", ".", "update", "(", "acc", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "print", "(", "'Val epoch:   [{0:3d}/{1:3d}][{2:4d}/{3:4d}]\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc {acc.val:.3f} ({acc.avg:.3f})\\t'", "\n", "'lr: {lr}'", ".", "format", "(", "\n", "epoch", ",", "args", ".", "epochs", ",", "i", "+", "1", ",", "len", "(", "val_dataloader", ")", ",", "\n", "loss", "=", "losses", ",", "acc", "=", "accuracies", ",", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ",", "end", "=", "'\\r'", ")", "\n", "", "print", "(", "''", ")", "\n", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.ft_classify.test": [[140, 181], ["torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model.eval", "lib.utils.AverageMeter", "enumerate", "print", "print", "sampled_clips.cuda.cuda", "targets.cuda.cuda", "torch.stack", "torch.stack", "torch.stack", "criterion", "criterion.item", "ft_classify.calculate_accuracy", "lib.utils.AverageMeter.update", "print", "len", "clips.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.stack.append", "clips.cuda.size", "model", "model", "len", "ft_classify.diff"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.ft_classify.calculate_accuracy", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.diff"], ["", "def", "test", "(", "args", ",", "model", ",", "criterion", ",", "test_dataloader", ")", ":", "\n", "    ", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "accuracies", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "args", ".", "modality", "==", "'res'", ":", "\n", "        ", "print", "(", "\"[Warning]: using residual frames as input\"", ")", "\n", "\n", "", "total_loss", "=", "0.0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "test_dataloader", ",", "1", ")", ":", "\n", "# get inputs", "\n", "        ", "rgb_clips", ",", "u_clips", ",", "v_clips", ",", "targets", ",", "_", "=", "data", "\n", "if", "args", ".", "modality", "==", "'u'", ":", "\n", "            ", "sampled_clips", "=", "u_clips", "\n", "", "elif", "args", ".", "modality", "==", "'v'", ":", "\n", "            ", "sampled_clips", "=", "v_clips", "\n", "", "else", ":", "# rgb and res", "\n", "            ", "sampled_clips", "=", "rgb_clips", "\n", "", "sampled_clips", "=", "sampled_clips", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "clips", "in", "sampled_clips", ":", "\n", "            ", "inputs", "=", "clips", ".", "cuda", "(", ")", "\n", "# forward", "\n", "if", "args", ".", "modality", "==", "'res'", ":", "\n", "                ", "o", "=", "model", "(", "diff", "(", "inputs", ")", ")", "\n", "", "else", ":", "\n", "                ", "o", "=", "model", "(", "inputs", ")", "\n", "", "o", "=", "torch", ".", "mean", "(", "o", ",", "dim", "=", "0", ")", "\n", "outputs", ".", "append", "(", "o", ")", "\n", "", "outputs", "=", "torch", ".", "stack", "(", "outputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "# compute loss and acc", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "acc", "=", "calculate_accuracy", "(", "outputs", ",", "targets", ")", "\n", "accuracies", ".", "update", "(", "acc", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "print", "(", "'Test: [{}/{}], {acc.val:.3f} ({acc.avg:.3f})'", ".", "format", "(", "i", ",", "len", "(", "test_dataloader", ")", ",", "acc", "=", "accuracies", ")", ",", "end", "=", "'\\r'", ")", "\n", "", "avg_loss", "=", "total_loss", "/", "len", "(", "test_dataloader", ")", "\n", "print", "(", "'\\n[TEST] loss: {:.3f}, acc: {:.3f}'", ".", "format", "(", "avg_loss", ",", "accuracies", ".", "avg", ")", ")", "\n", "return", "avg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.ft_classify.parse_args": [[183, 206], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Finetune 3D CNN from pretrained weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'train'", ")", "\n", "parser", ".", "add_argument", "(", "'--cl'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'clip length'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'r3d'", ",", "help", "=", "'c3d/r3d/r21d'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'ucf101'", ",", "help", "=", "'ucf101/hmdb51'", ")", "\n", "parser", ".", "add_argument", "(", "'--split'", ",", "type", "=", "str", ",", "default", "=", "'1'", ",", "help", "=", "'dataset split'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'GPU id'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--ft_lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'finetune learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "9e-1", ",", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_dir'", ",", "type", "=", "str", ",", "default", "=", "'./ckpt/'", ",", "help", "=", "'path to save model'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt'", ",", "type", "=", "str", ",", "help", "=", "'checkpoint path'", ")", "\n", "parser", ".", "add_argument", "(", "'--desp'", ",", "type", "=", "str", ",", "help", "=", "'additional description'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--start-epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'manual epoch number (useful on restarts)'", ")", "\n", "parser", ".", "add_argument", "(", "'--bs'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'mini-batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'number of data loading workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "632", ",", "help", "=", "'seed for initializing training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--modality'", ",", "default", "=", "'res'", ",", "type", "=", "str", ",", "help", "=", "'modality from [rgb, res, u, v]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.gen_neg.adjacent_shuffle": [[5, 14], ["torch.chunk", "torch.chunk", "random.randint", "torch.cat", "torch.cat", "random.randint"], "function", ["None"], ["def", "adjacent_shuffle", "(", "x", ")", ":", "\n", "# (C X T x H x W)", "\n", "    ", "tmp", "=", "torch", ".", "chunk", "(", "x", ",", "4", ",", "dim", "=", "1", ")", "\n", "order", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", "ind1", "=", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "ind2", "=", "(", "ind1", "+", "random", ".", "randint", "(", "0", ",", "2", ")", "+", "1", ")", "%", "4", "\n", "order", "[", "ind1", "]", ",", "order", "[", "ind2", "]", "=", "order", "[", "ind2", "]", ",", "order", "[", "ind1", "]", "\n", "x_new", "=", "torch", ".", "cat", "(", "(", "tmp", "[", "order", "[", "0", "]", "]", ",", "tmp", "[", "order", "[", "1", "]", "]", ",", "tmp", "[", "order", "[", "2", "]", "]", ",", "tmp", "[", "order", "[", "3", "]", "]", ")", ",", "1", ")", "\n", "return", "x_new", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.gen_neg.spatial_permutation": [[15, 30], ["slices.append", "slices.append", "slices.append", "slices.append", "torch.cat", "torch.cat", "random.shuffle", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "spatial_permutation", "(", "x", ")", ":", "\n", "    ", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "hm", "=", "h", "//", "2", "\n", "wm", "=", "w", "//", "2", "\n", "slices", "=", "[", "]", "\n", "slices", ".", "append", "(", "x", "[", ":", ",", ":", ",", ":", "hm", ",", ":", "wm", "]", ")", "# A", "\n", "slices", ".", "append", "(", "x", "[", ":", ",", ":", ",", ":", "hm", ",", "wm", ":", "]", ")", "# B", "\n", "slices", ".", "append", "(", "x", "[", ":", ",", ":", ",", "hm", ":", ",", ":", "wm", "]", ")", "# C", "\n", "slices", ".", "append", "(", "x", "[", ":", ",", ":", ",", "hm", ":", ",", "wm", ":", "]", ")", "# D", "\n", "order", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", "\n", "while", "order", "==", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "        ", "random", ".", "shuffle", "(", "order", ")", "\n", "#order = [3,2,1,0]", "\n", "", "x_new", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cat", "(", "(", "slices", "[", "order", "[", "0", "]", "]", ",", "slices", "[", "order", "[", "1", "]", "]", ")", ",", "3", ")", ",", "torch", ".", "cat", "(", "(", "slices", "[", "order", "[", "2", "]", "]", ",", "slices", "[", "order", "[", "3", "]", "]", ")", ",", "3", ")", ")", ",", "2", ")", "\n", "return", "x_new", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.gen_neg.repeating": [[32, 39], ["random.randint", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.repeat"], "function", ["None"], ["", "def", "repeating", "(", "x", ")", ":", "\n", "    ", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "ind", "=", "random", ".", "randint", "(", "0", ",", "t", "-", "1", ")", "\n", "one_frame", "=", "x", "[", ":", ",", "ind", ",", ":", ",", ":", "]", "# c, h, w", "\n", "one_frame", "=", "torch", ".", "unsqueeze", "(", "one_frame", ",", "1", ")", "# -> c, 1, h, w", "\n", "x_new", "=", "one_frame", ".", "repeat", "(", "1", ",", "t", ",", "1", ",", "1", ")", "\n", "return", "x_new", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.gen_neg.blur_clip": [[40, 46], ["kernel.cuda.cuda", "torch.conv2d", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda"], ["", "def", "blur_clip", "(", "x", ")", ":", "\n", "    ", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "kernel", "=", "torch", ".", "ones", "(", "t", ",", "1", ",", "5", ",", "5", ")", "/", "25", "\n", "kernel", "=", "kernel", ".", "cuda", "(", ")", "\n", "x_new", "=", "F", ".", "conv2d", "(", "x", ",", "kernel", ",", "padding", "=", "2", ",", "groups", "=", "t", ")", "\n", "return", "x_new", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.gen_neg.preprocess": [[48, 61], ["range", "torch.stack", "torch.stack", "new_in.append", "new_in.append", "gen_neg.repeating", "gen_neg.adjacent_shuffle"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.gen_neg.repeating", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.gen_neg.adjacent_shuffle"], ["", "def", "preprocess", "(", "inputs", ",", "option", "=", "'repeat'", ")", ":", "\n", "    ", "b", ",", "c", ",", "t", ",", "h", ",", "w", "=", "inputs", ".", "shape", "\n", "# blur should be positive", "\n", "# repeating should be negtive", "\n", "new_in", "=", "[", "]", "\n", "# origin, rotation, spatial permtation, temporal shuffling, remote clip", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "        ", "one_sample", "=", "inputs", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "if", "option", "==", "'repeat'", ":", "\n", "            ", "new_in", ".", "append", "(", "repeating", "(", "one_sample", ")", ")", "\n", "", "if", "option", "==", "'shuffle'", ":", "\n", "            ", "new_in", ".", "append", "(", "adjacent_shuffle", "(", "one_sample", ")", ")", "\n", "", "", "return", "torch", ".", "stack", "(", "new_in", ")", "", "", ""]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.parse_option": [[42, 107], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "print", "print", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "time.strftime", "time.strftime"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.parse_args"], ["def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'argument for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_freq'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'tb frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'num of workers to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "240", ",", "help", "=", "'number of training epochs'", ")", "\n", "\n", "# optimization", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'120,160,200'", ",", "help", "=", "'where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'beta1 for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'beta2 for Adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "\n", "# resume path", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "\n", "# model definition", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'r3d'", ",", "choices", "=", "[", "'r3d'", ",", "'c3d'", ",", "'r21d'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--softmax'", ",", "type", "=", "ast", ".", "literal_eval", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_k'", ",", "type", "=", "int", ",", "default", "=", "1024", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_t'", ",", "type", "=", "float", ",", "default", "=", "0.07", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_m'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--feat_dim'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'dim of feat for inner product'", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'ucf101'", ",", "choices", "=", "[", "'ucf101'", ",", "'hmdb51'", "]", ")", "\n", "\n", "# specify folder", "\n", "#parser.add_argument('--data_folder', type=str, default=None, help='path to data')", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "'./ckpt/'", ",", "help", "=", "'path to save model'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_path'", ",", "type", "=", "str", ",", "default", "=", "'./logs/'", ",", "help", "=", "'path to tensorboard'", ")", "\n", "\n", "# add new views", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "type", "=", "ast", ".", "literal_eval", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--modality'", ",", "type", "=", "str", ",", "default", "=", "'res'", ",", "choices", "=", "[", "'rgb'", ",", "'res'", ",", "'u'", ",", "'v'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--intra_neg'", ",", "type", "=", "ast", ".", "literal_eval", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--neg'", ",", "type", "=", "str", ",", "default", "=", "'repeat'", ",", "choices", "=", "[", "'repeat'", ",", "'shuffle'", "]", ")", "\n", "#parser.add_argument('--desp', type=str)", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "632", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "opt", ".", "intra_neg", ":", "\n", "        ", "print", "(", "'[Warning] using intra-negative'", ")", "\n", "opt", ".", "model_name", "=", "'intraneg_{}_{}_{}'", ".", "format", "(", "opt", ".", "model", ",", "opt", ".", "modality", ",", "time", ".", "strftime", "(", "'%m%d'", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'[Warning] using baseline'", ")", "\n", "opt", ".", "model_name", "=", "'{}_{}_{}'", ".", "format", "(", "opt", ".", "model", ",", "opt", ".", "modality", ",", "time", ".", "strftime", "(", "'%m%d'", ")", ")", "\n", "\n", "", "opt", ".", "model_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "model_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "model_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "model_folder", ")", "\n", "\n", "", "opt", ".", "tb_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "tb_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "tb_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "tb_folder", ")", "\n", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.set_model": [[109, 134], ["models.r21d.R2Plus1DNet.cuda", "lib.NCEAverage.NCEAverage_ori.cuda", "criterion_1.cuda.cuda", "criterion_2.cuda.cuda", "models.c3d.C3D", "lib.NCEAverage.NCEAverage", "lib.NCEAverage.NCEAverage_ori", "lib.NCECriterion.NCESoftmaxLoss", "lib.NCECriterion.NCECriterion", "lib.NCECriterion.NCESoftmaxLoss", "lib.NCECriterion.NCECriterion", "models.r3d.R3DNet", "models.r21d.R2Plus1DNet"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda"], ["", "def", "set_model", "(", "args", ",", "n_data", ")", ":", "\n", "# set the model", "\n", "    ", "if", "args", ".", "model", "==", "'c3d'", ":", "\n", "        ", "model", "=", "C3D", "(", "with_classifier", "=", "False", ")", "\n", "", "elif", "args", ".", "model", "==", "'r3d'", ":", "\n", "        ", "model", "=", "R3DNet", "(", "layer_sizes", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "with_classifier", "=", "False", ")", "\n", "", "elif", "args", ".", "model", "==", "'r21d'", ":", "\n", "        ", "model", "=", "R2Plus1DNet", "(", "layer_sizes", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "with_classifier", "=", "False", ")", "\n", "\n", "", "if", "args", ".", "intra_neg", ":", "\n", "        ", "contrast", "=", "NCEAverage", "(", "args", ".", "feat_dim", ",", "n_data", ",", "args", ".", "nce_k", ",", "args", ".", "nce_t", ",", "args", ".", "nce_m", ",", "args", ".", "softmax", ")", "\n", "", "else", ":", "\n", "        ", "contrast", "=", "NCEAverage_ori", "(", "args", ".", "feat_dim", ",", "n_data", ",", "args", ".", "nce_k", ",", "args", ".", "nce_t", ",", "args", ".", "nce_m", ",", "args", ".", "softmax", ")", "\n", "\n", "", "criterion_1", "=", "NCESoftmaxLoss", "(", ")", "if", "args", ".", "softmax", "else", "NCECriterion", "(", "n_data", ")", "\n", "criterion_2", "=", "NCESoftmaxLoss", "(", ")", "if", "args", ".", "softmax", "else", "NCECriterion", "(", "n_data", ")", "\n", "\n", "# GPU mode", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "contrast", "=", "contrast", ".", "cuda", "(", ")", "\n", "criterion_1", "=", "criterion_1", ".", "cuda", "(", ")", "\n", "criterion_2", "=", "criterion_2", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "return", "model", ",", "contrast", ",", "criterion_1", ",", "criterion_2", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.set_optimizer": [[136, 143], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "model.parameters"], "function", ["None"], ["", "def", "set_optimizer", "(", "args", ",", "model", ")", ":", "\n", "# return optimizer", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.diff": [[145, 148], ["torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll"], "function", ["None"], ["", "def", "diff", "(", "x", ")", ":", "\n", "    ", "shift_x", "=", "torch", ".", "roll", "(", "x", ",", "1", ",", "2", ")", "\n", "return", "(", "(", "x", "-", "shift_x", ")", "+", "1", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.train": [[150, 227], ["model.train", "contrast.train", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "time.time", "enumerate", "lib.utils.AverageMeter.update", "inputs.float().cuda.size", "inputs.float().cuda.float().cuda", "u_inputs.float().cuda.float().cuda", "v_inputs.float().cuda.float().cuda", "index.cuda.cuda", "model", "criterion_1", "criterion_2", "out_1[].mean", "out_2[].mean", "optimizer.zero_grad", "loss.backward", "optimizer.step", "lib.utils.AverageMeter.update", "lib.utils.AverageMeter.update", "lib.utils.AverageMeter.update", "lib.utils.AverageMeter.update", "lib.utils.AverageMeter.update", "lib.utils.AverageMeter.update", "time.time", "model", "contrast", "model", "contrast", "loss.item", "criterion_1.item", "out_1[].mean.item", "criterion_2.item", "out_2[].mean.item", "print", "time.time", "inputs.float().cuda.float", "u_inputs.float().cuda.float", "v_inputs.float().cuda.float", "train_ssl.diff", "model", "gen_neg.preprocess", "time.time", "model", "len"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.train", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.train", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.LinearAverage.LinearAverageOp.backward", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.diff", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.gen_neg.preprocess"], ["", "def", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "contrast", ",", "criterion_1", ",", "criterion_2", ",", "optimizer", ",", "opt", ")", ":", "\n", "    ", "\"\"\"\n    one epoch training\n    \"\"\"", "\n", "model", ".", "train", "(", ")", "\n", "contrast", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "view1_loss_meter", "=", "AverageMeter", "(", ")", "\n", "view2_loss_meter", "=", "AverageMeter", "(", ")", "\n", "view1_prob_meter", "=", "AverageMeter", "(", ")", "\n", "view2_prob_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "inputs", ",", "u_inputs", ",", "v_inputs", ",", "_", ",", "index", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "bsz", "=", "inputs", ".", "size", "(", "0", ")", "\n", "inputs", "=", "inputs", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "u_inputs", "=", "u_inputs", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "v_inputs", "=", "v_inputs", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "index", "=", "index", ".", "cuda", "(", ")", "\n", "\n", "# ===================forward=====================", "\n", "feat_1", "=", "model", "(", "inputs", ")", "# view 1 is always RGB", "\n", "if", "opt", ".", "modality", "==", "'res'", ":", "\n", "            ", "feat_2", "=", "model", "(", "diff", "(", "inputs", ")", ")", "\n", "", "elif", "opt", ".", "modality", "==", "'u'", ":", "\n", "            ", "feat_2", "=", "model", "(", "u_inputs", ")", "\n", "", "elif", "opt", ".", "modality", "==", "'v'", ":", "\n", "            ", "feat_2", "=", "model", "(", "v_inputs", ")", "\n", "", "else", ":", "\n", "            ", "feat_2", "=", "feat_1", "\n", "\n", "", "if", "not", "opt", ".", "intra_neg", ":", "\n", "            ", "out_1", ",", "out_2", "=", "contrast", "(", "feat_1", ",", "feat_2", ",", "index", ")", "\n", "", "else", ":", "\n", "            ", "feat_neg", "=", "model", "(", "preprocess", "(", "inputs", ",", "opt", ".", "neg", ")", ")", "\n", "out_1", ",", "out_2", "=", "contrast", "(", "feat_1", ",", "feat_2", ",", "feat_neg", ",", "index", ")", "\n", "\n", "", "view1_loss", "=", "criterion_1", "(", "out_1", ")", "\n", "view2_loss", "=", "criterion_2", "(", "out_2", ")", "\n", "view1_prob", "=", "out_1", "[", ":", ",", "0", "]", ".", "mean", "(", ")", "\n", "view2_prob", "=", "out_2", "[", ":", ",", "0", "]", ".", "mean", "(", ")", "\n", "\n", "loss", "=", "view1_loss", "+", "view2_loss", "\n", "\n", "# ===================backward=====================", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# ===================meters=====================", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "bsz", ")", "\n", "view1_loss_meter", ".", "update", "(", "view1_loss", ".", "item", "(", ")", ",", "bsz", ")", "\n", "view1_prob_meter", ".", "update", "(", "view1_prob", ".", "item", "(", ")", ",", "bsz", ")", "\n", "view2_loss_meter", ".", "update", "(", "view2_loss", ".", "item", "(", ")", ",", "bsz", ")", "\n", "view2_prob_meter", ".", "update", "(", "view2_prob", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print info", "\n", "if", "(", "idx", "+", "1", ")", "%", "opt", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Train: [{0}/{1}][{2}/{3}]\\t'", "\n", "'BT {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'DT {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'loss {loss.val:.3f} ({loss.avg:.3f})\\t'", "\n", "'1_p {probs1.val:.3f} ({probs1.avg:.3f})\\t'", "\n", "'2_p {probs2.val:.3f} ({probs2.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "opt", ".", "epochs", ",", "idx", "+", "1", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "probs1", "=", "view1_prob_meter", ",", "\n", "probs2", "=", "view2_prob_meter", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "", "", "return", "view1_loss_meter", ".", "avg", ",", "view1_prob_meter", ".", "avg", ",", "view2_loss_meter", ".", "avg", ",", "view2_prob_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.main": [[229, 335], ["train_ssl.parse_option", "print", "random.seed", "numpy.random.seed", "str", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "torchvision.Compose", "torch.utils.data.DataLoader", "datasets.hmdb51.HMDB51Dataset.__len__", "train_ssl.set_model", "train_ssl.set_optimizer", "tensorboard_logger.Logger", "torch.optim.lr_scheduler.MultiStepLR", "range", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "vars", "datasets.ucf101.UCF101Dataset", "datasets.hmdb51.HMDB51Dataset", "os.path.isfile", "time.time", "train_ssl.train", "time.time", "print", "tb_logger.Logger.log_value", "tb_logger.Logger.log_value", "tb_logger.Logger.log_value", "tb_logger.Logger.log_value", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "lr_scheduler.MultiStepLR.step", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.ToTensor", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "set_optimizer.load_state_dict", "contrast.load_state_dict", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "print", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.state_dict", "contrast.state_dict", "set_optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.parse_option", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.UCF101ClipRetrievalDataset.__len__", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.set_model", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.set_optimizer", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.train_ssl.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "raise", "'Only support GPU mode'", "\n", "# parse the args", "\n", "", "args", "=", "parse_option", "(", ")", "\n", "print", "(", "vars", "(", "args", ")", ")", "\n", "\n", "best_acc", "=", "0", "# best test accuracy", "\n", "start_epoch", "=", "0", "# start from epoch 0 or last checkpoint epoch", "\n", "\n", "''' Old version\n    random.seed(args.seed)\n    np.random.seed(args.seed)\n    torch.manual_seed(args.seed)\n    torch.cuda.manual_seed_all(args.seed)\n    '''", "\n", "# Fix all parameters for reproducibility", "\n", "seed", "=", "args", ".", "seed", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "#'''", "\n", "\n", "print", "(", "'[Warning] The training modalities are RGB and [{}]'", ".", "format", "(", "args", ".", "modality", ")", ")", "\n", "\n", "# Data", "\n", "train_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "128", ",", "171", ")", ")", ",", "# smaller edge to 128", "\n", "transforms", ".", "RandomCrop", "(", "112", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "if", "args", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "trainset", "=", "UCF101Dataset", "(", "'./data/ucf101/'", ",", "transforms_", "=", "train_transforms", ")", "\n", "", "else", ":", "\n", "        ", "trainset", "=", "HMDB51Dataset", "(", "'./data/hmdb51/'", ",", "transforms_", "=", "train_transforms", ")", "\n", "\n", "", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "n_data", "=", "trainset", ".", "__len__", "(", ")", "\n", "\n", "# set the model", "\n", "model", ",", "contrast", ",", "criterion_1", ",", "criterion_2", "=", "set_model", "(", "args", ",", "n_data", ")", "\n", "\n", "# set the optimizer", "\n", "optimizer", "=", "set_optimizer", "(", "args", ",", "model", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "args", ".", "start_epoch", "=", "1", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "contrast", ".", "load_state_dict", "(", "checkpoint", "[", "'contrast'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "# tensorboard", "\n", "", "", "logger", "=", "tb_logger", ".", "Logger", "(", "logdir", "=", "args", ".", "tb_folder", ",", "flush_secs", "=", "2", ")", "\n", "\n", "scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "45", ",", "90", ",", "125", ",", "160", "]", ",", "gamma", "=", "0.2", ")", "\n", "# routine", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "time1", "=", "time", ".", "time", "(", ")", "\n", "view1_loss", ",", "view1_prob", ",", "view2_loss", ",", "view2_prob", "=", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "contrast", ",", "\n", "criterion_1", ",", "criterion_2", ",", "optimizer", ",", "args", ")", "\n", "time2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'\\nepoch {}, total time {:.2f}'", ".", "format", "(", "epoch", ",", "time2", "-", "time1", ")", ")", "\n", "\n", "# tensorboard logger", "\n", "logger", ".", "log_value", "(", "'view1_loss'", ",", "view1_loss", ",", "epoch", ")", "\n", "logger", ".", "log_value", "(", "'view1_prob'", ",", "view1_prob", ",", "epoch", ")", "\n", "logger", ".", "log_value", "(", "'view2_loss'", ",", "view2_loss", ",", "epoch", ")", "\n", "logger", ".", "log_value", "(", "'view2_prob'", ",", "view2_prob", ",", "epoch", ")", "\n", "\n", "# save model", "\n", "if", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "            ", "print", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'opt'", ":", "args", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'contrast'", ":", "contrast", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'ckpt_epoch_{epoch}.pth'", ".", "format", "(", "epoch", "=", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "# help release GPU memory", "\n", "del", "state", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "print", "(", "args", ".", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.load_pretrained_weights": [[28, 38], ["torch.load", "torch.load", "torch.load.items", "name.find"], "function", ["None"], ["def", "load_pretrained_weights", "(", "ckpt_path", ")", ":", "\n", "    ", "\"\"\"load pretrained weights and adjust params name.\"\"\"", "\n", "adjusted_weights", "=", "{", "}", "\n", "pretrained_weights", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "for", "name", ",", "params", "in", "pretrained_weights", ".", "items", "(", ")", ":", "\n", "        ", "if", "'base_network'", "in", "name", ":", "\n", "            ", "name", "=", "name", "[", "name", ".", "find", "(", "'.'", ")", "+", "1", ":", "]", "\n", "adjusted_weights", "[", "name", "]", "=", "params", "\n", "#print('Pretrained weight name: [{}]'.format(name))", "\n", "", "", "return", "adjusted_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.diff": [[40, 43], ["torch.roll", "torch.roll"], "function", ["None"], ["", "def", "diff", "(", "x", ")", ":", "\n", "    ", "shift_x", "=", "torch", ".", "roll", "(", "x", ",", "1", ",", "2", ")", "\n", "return", "(", "(", "x", "-", "shift_x", ")", "+", "1", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.extract_feature": [[45, 154], ["torch.device", "torch.device", "R2Plus1DNet().to.eval", "torch.set_grad_enabled", "torch.set_grad_enabled", "torchvision.transforms.Compose", "torch.utils.data.DataLoader", "tqdm.tqdm", "numpy.array().reshape", "numpy.array().reshape", "numpy.save", "numpy.save", "torchvision.transforms.Compose", "torch.utils.data.DataLoader", "tqdm.tqdm", "numpy.array().reshape", "numpy.array().reshape", "numpy.save", "numpy.save", "print", "models.c3d.C3D().to", "R2Plus1DNet().to.load_state_dict", "datasets.ucf101.UCF101ClipRetrievalDataset", "input_clips.reshape", "input_clips.reshape.to", "np.array().reshape.append", "np.array().reshape.append", "os.path.join", "os.path.join", "datasets.ucf101.UCF101ClipRetrievalDataset", "input_clips.reshape", "input_clips.reshape.to", "np.array().reshape.append", "np.array().reshape.append", "os.path.join", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "models.r3d.R3DNet().to", "torch.load", "torch.load", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "datasets.hmdb51.HMDB51ClipRetrievalDataset", "R2Plus1DNet().to.", "R2Plus1DNet().to.", "sampled_clips.reshape().to", "R2Plus1DNet().to.", "torch.cat", "torch.cat", "torch.cat.cpu().numpy().tolist", "idxs.cpu().numpy().tolist", "numpy.array", "numpy.array", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "datasets.hmdb51.HMDB51ClipRetrievalDataset", "R2Plus1DNet().to.", "R2Plus1DNet().to.", "sampled_clips.reshape().to", "R2Plus1DNet().to.", "torch.cat", "torch.cat", "torch.cat.cpu().numpy().tolist", "idxs.cpu().numpy().tolist", "numpy.array", "numpy.array", "models.c3d.C3D", "models.r21d.R2Plus1DNet().to", "retrieve_clips.diff", "retrieve_clips.diff", "models.r3d.R3DNet", "sampled_clips.reshape", "torch.cat.cpu().numpy", "idxs.cpu().numpy", "sampled_clips.reshape", "torch.cat.cpu().numpy", "idxs.cpu().numpy", "models.r21d.R2Plus1DNet", "torch.cat.cpu", "idxs.cpu", "torch.cat.cpu", "idxs.cpu"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.diff", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.diff"], ["", "def", "extract_feature", "(", "args", ")", ":", "\n", "    ", "\"\"\"Extract and save features for train split, several clips per video.\"\"\"", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "########### model ##############", "\n", "if", "args", ".", "model", "==", "'c3d'", ":", "\n", "        ", "model", "=", "C3D", "(", "with_classifier", "=", "False", ",", "return_conv", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "model", "==", "'r3d'", ":", "\n", "        ", "model", "=", "R3DNet", "(", "layer_sizes", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "with_classifier", "=", "False", ",", "return_conv", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "model", "==", "'r21d'", ":", "\n", "        ", "model", "=", "R2Plus1DNet", "(", "layer_sizes", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "with_classifier", "=", "False", ",", "return_conv", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "\n", "#model = nn.DataParallel(model)", "\n", "", "if", "args", ".", "ckpt", ":", "\n", "        ", "pretrained_weights", "=", "torch", ".", "load", "(", "args", ".", "ckpt", ")", "[", "'model'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained_weights", ",", "strict", "=", "True", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "#'''", "\n", "### Exract for train split ###", "\n", "train_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "128", ",", "171", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "112", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "if", "args", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "train_dataset", "=", "UCF101ClipRetrievalDataset", "(", "'data/ucf101'", ",", "16", ",", "10", ",", "True", ",", "train_transforms", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'hmdb51'", ":", "\n", "        ", "train_dataset", "=", "HMDB51ClipRetrievalDataset", "(", "'data/hmdb51'", ",", "16", ",", "10", ",", "True", ",", "train_transforms", ")", "\n", "\n", "", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "bs", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "features", "=", "[", "]", "\n", "classes", "=", "[", "]", "\n", "for", "data", "in", "tqdm", "(", "train_dataloader", ")", ":", "\n", "        ", "sampled_clips", ",", "u_clips", ",", "v_clips", ",", "idxs", "=", "data", "\n", "if", "args", ".", "modality", "==", "'u'", ":", "\n", "            ", "input_clips", "=", "u_clips", "\n", "", "elif", "args", ".", "modality", "==", "'v'", ":", "\n", "            ", "input_clips", "=", "v_clips", "\n", "", "else", ":", "# rgb and res", "\n", "            ", "input_clips", "=", "sampled_clips", "\n", "", "clips", "=", "input_clips", ".", "reshape", "(", "(", "-", "1", ",", "3", ",", "16", ",", "112", ",", "112", ")", ")", "\n", "inputs", "=", "clips", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "modality", "==", "'res'", ":", "\n", "            ", "outputs", "=", "model", "(", "diff", "(", "inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "", "if", "args", ".", "merge", ":", "\n", "            ", "rgb_clips", "=", "sampled_clips", ".", "reshape", "(", "(", "-", "1", ",", "3", ",", "16", ",", "112", ",", "112", ")", ")", ".", "to", "(", "device", ")", "\n", "outputs_rgb", "=", "model", "(", "rgb_clips", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "(", "outputs_rgb", ",", "outputs", ")", ",", "1", ")", "\n", "\n", "", "features", ".", "append", "(", "outputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "classes", ".", "append", "(", "idxs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "features", "=", "np", ".", "array", "(", "features", ")", ".", "reshape", "(", "-", "1", ",", "10", ",", "outputs", ".", "shape", "[", "1", "]", ")", "\n", "classes", "=", "np", ".", "array", "(", "classes", ")", ".", "reshape", "(", "-", "1", ",", "10", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "feature_dir", ",", "'train_feature.npy'", ")", ",", "features", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "feature_dir", ",", "'train_class.npy'", ")", ",", "classes", ")", "\n", "\n", "### Exract for test split ###", "\n", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "128", ",", "171", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "112", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "if", "args", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "test_dataset", "=", "UCF101ClipRetrievalDataset", "(", "'data/ucf101'", ",", "16", ",", "10", ",", "False", ",", "test_transforms", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'hmdb51'", ":", "\n", "        ", "test_dataset", "=", "HMDB51ClipRetrievalDataset", "(", "'data/hmdb51'", ",", "16", ",", "10", ",", "False", ",", "test_transforms", ")", "\n", "", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "args", ".", "bs", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "features", "=", "[", "]", "\n", "classes", "=", "[", "]", "\n", "for", "data", "in", "tqdm", "(", "test_dataloader", ")", ":", "\n", "        ", "sampled_clips", ",", "u_clips", ",", "v_clips", ",", "idxs", "=", "data", "\n", "if", "args", ".", "modality", "==", "'u'", ":", "\n", "            ", "input_clips", "=", "u_clips", "\n", "", "elif", "args", ".", "modality", "==", "'v'", ":", "\n", "            ", "input_clips", "=", "v_clips", "\n", "", "else", ":", "# rgb and res", "\n", "            ", "input_clips", "=", "sampled_clips", "\n", "", "clips", "=", "input_clips", ".", "reshape", "(", "(", "-", "1", ",", "3", ",", "16", ",", "112", ",", "112", ")", ")", "\n", "inputs", "=", "clips", ".", "to", "(", "device", ")", "\n", "# forward", "\n", "if", "args", ".", "modality", "==", "'res'", ":", "\n", "            ", "outputs", "=", "model", "(", "diff", "(", "inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "", "if", "args", ".", "merge", ":", "\n", "            ", "rgb_clips", "=", "sampled_clips", ".", "reshape", "(", "(", "-", "1", ",", "3", ",", "16", ",", "112", ",", "112", ")", ")", ".", "to", "(", "device", ")", "\n", "outputs_rgb", "=", "model", "(", "rgb_clips", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "(", "outputs_rgb", ",", "outputs", ")", ",", "1", ")", "\n", "\n", "", "features", ".", "append", "(", "outputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "classes", ".", "append", "(", "idxs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "features", "=", "np", ".", "array", "(", "features", ")", ".", "reshape", "(", "-", "1", ",", "10", ",", "outputs", ".", "shape", "[", "1", "]", ")", "\n", "classes", "=", "np", ".", "array", "(", "classes", ")", ".", "reshape", "(", "-", "1", ",", "10", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "feature_dir", ",", "'test_feature.npy'", ")", ",", "features", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "feature_dir", ",", "'test_class.npy'", ")", ",", "classes", ")", "\n", "print", "(", "'Saving features to ...'", ",", "args", ".", "feature_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.topk_retrieval": [[155, 192], ["print", "numpy.load", "numpy.load", "numpy.mean", "X_train.reshape.reshape", "y_train.reshape.reshape", "numpy.load", "numpy.load", "numpy.mean", "X_test.reshape.reshape", "y_test.reshape.reshape", "sklearn.metrics.pairwise.cosine_distances", "numpy.argsort", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "zip", "len", "print", "open", "json.dump", "os.path.join"], "function", ["None"], ["", "def", "topk_retrieval", "(", "args", ")", ":", "\n", "    ", "\"\"\"Extract features from test split and search on train split features.\"\"\"", "\n", "print", "(", "'Load local .npy files. from ...'", ",", "args", ".", "feature_dir", ")", "\n", "X_train", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "feature_dir", ",", "'train_feature.npy'", ")", ")", "\n", "y_train", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "feature_dir", ",", "'train_class.npy'", ")", ")", "\n", "X_train", "=", "np", ".", "mean", "(", "X_train", ",", "1", ")", "\n", "y_train", "=", "y_train", "[", ":", ",", "0", "]", "\n", "X_train", "=", "X_train", ".", "reshape", "(", "(", "-", "1", ",", "X_train", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "y_train", "=", "y_train", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "X_test", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "feature_dir", ",", "'test_feature.npy'", ")", ")", "\n", "y_test", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "feature_dir", ",", "'test_class.npy'", ")", ")", "\n", "X_test", "=", "np", ".", "mean", "(", "X_test", ",", "1", ")", "\n", "y_test", "=", "y_test", "[", ":", ",", "0", "]", "\n", "X_test", "=", "X_test", ".", "reshape", "(", "(", "-", "1", ",", "X_test", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "y_test", "=", "y_test", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "ks", "=", "[", "1", ",", "5", ",", "10", ",", "20", ",", "50", "]", "\n", "topk_correct", "=", "{", "k", ":", "0", "for", "k", "in", "ks", "}", "\n", "\n", "distances", "=", "cosine_distances", "(", "X_test", ",", "X_train", ")", "\n", "indices", "=", "np", ".", "argsort", "(", "distances", ")", "\n", "\n", "for", "k", "in", "ks", ":", "\n", "        ", "top_k_indices", "=", "indices", "[", ":", ",", ":", "k", "]", "\n", "for", "ind", ",", "test_label", "in", "zip", "(", "top_k_indices", ",", "y_test", ")", ":", "\n", "            ", "labels", "=", "y_train", "[", "ind", "]", "\n", "if", "test_label", "in", "labels", ":", "\n", "                ", "topk_correct", "[", "k", "]", "+=", "1", "\n", "\n", "", "", "", "for", "k", "in", "ks", ":", "\n", "        ", "correct", "=", "topk_correct", "[", "k", "]", "\n", "total", "=", "len", "(", "X_test", ")", "\n", "print", "(", "'Top-{}, correct = {:.2f}, total = {}, acc = {:.3f}'", ".", "format", "(", "k", ",", "correct", ",", "total", ",", "correct", "/", "total", ")", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "feature_dir", ",", "'topk_correct.json'", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "topk_correct", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.parse_args": [[194, 210], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.None.retrieve_clips.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Frame Retrieval Experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--cl'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'clip length'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'r3d'", ",", "help", "=", "'c3d/r3d/r21d'", ")", "\n", "parser", ".", "add_argument", "(", "'--id'", ",", "type", "=", "str", ",", "default", "=", "'r3d'", ",", "help", "=", "'ID to distinguish with each other'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'ucf101'", ",", "help", "=", "'ucf101/hmdb51'", ")", "\n", "parser", ".", "add_argument", "(", "'--feature_dir'", ",", "type", "=", "str", ",", "default", "=", "'features/ucf101/'", ",", "help", "=", "'dir to store feature.npy'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'GPU id'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt'", ",", "type", "=", "str", ",", "help", "=", "'checkpoint path'", ")", "\n", "parser", ".", "add_argument", "(", "'--bs'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'mini-batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'number of data loading workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--extract'", ",", "default", "=", "True", ",", "type", "=", "ast", ".", "literal_eval", ",", "help", "=", "'extract features when True'", ")", "\n", "parser", ".", "add_argument", "(", "'--modality'", ",", "default", "=", "'res'", ",", "type", "=", "str", ",", "help", "=", "'modality from [rgb, res, u, v]'", ")", "\n", "parser", ".", "add_argument", "(", "'--merge'", ",", "default", "=", "False", ",", "type", "=", "ast", ".", "literal_eval", ",", "help", "=", "'If True, merge two input.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.normalize.Normalize.__init__": [[7, 10], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.normalize.Normalize.forward": [[11, 15], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.NCEAverage.NCEAverage_ori.__init__": [[10, 23], ["torch.nn.Module.__init__", "torch.ones", "alias_multinomial.AliasMethod", "NCEAverage.NCEAverage_ori.multinomial.cuda", "NCEAverage.NCEAverage_ori.register_buffer", "NCEAverage.NCEAverage_ori.register_buffer", "NCEAverage.NCEAverage_ori.register_buffer", "torch.tensor", "math.sqrt", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda"], ["    ", "def", "__init__", "(", "self", ",", "inputSize", ",", "outputSize", ",", "K", ",", "T", "=", "0.07", ",", "momentum", "=", "0.5", ",", "use_softmax", "=", "False", ")", ":", "\n", "        ", "super", "(", "NCEAverage_ori", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nLem", "=", "outputSize", "\n", "self", ".", "unigrams", "=", "torch", ".", "ones", "(", "self", ".", "nLem", ")", "\n", "self", ".", "multinomial", "=", "AliasMethod", "(", "self", ".", "unigrams", ")", "\n", "self", ".", "multinomial", ".", "cuda", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "use_softmax", "=", "use_softmax", "\n", "\n", "self", ".", "register_buffer", "(", "'params'", ",", "torch", ".", "tensor", "(", "[", "K", ",", "T", ",", "-", "1", ",", "-", "1", ",", "momentum", "]", ")", ")", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "inputSize", "/", "3", ")", "\n", "self", ".", "register_buffer", "(", "'memory_l'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_ab'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.NCEAverage.NCEAverage_ori.forward": [[24, 87], ["int", "NCEAverage.NCEAverage_ori.params[].item", "NCEAverage.NCEAverage_ori.params[].item", "NCEAverage.NCEAverage_ori.params[].item", "NCEAverage.NCEAverage_ori.params[].item", "l.size", "NCEAverage.NCEAverage_ori.memory_l.size", "NCEAverage.NCEAverage_ori.memory_l.size", "torch.index_select().detach", "weight_l.view.view.view", "torch.bmm", "torch.index_select().detach", "weight_ab.view.view.view", "torch.bmm", "NCEAverage.NCEAverage_ori.params[].item", "NCEAverage.NCEAverage_ori.multinomial.draw().view", "NCEAverage.NCEAverage_ori.select().copy_", "ab.view", "l.view", "torch.div", "torch.div", "torch.div().contiguous.contiguous", "torch.div().contiguous.contiguous", "torch.exp", "torch.exp", "torch.div().contiguous", "torch.div().contiguous", "torch.no_grad", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverage_ori.memory_l.index_copy_", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverage_ori.memory_ab.index_copy_", "torch.index_select", "torch.index_select", "torch.div", "torch.div", "NCEAverage.NCEAverage_ori.params[].clone().detach().item", "print", "NCEAverage.NCEAverage_ori.params[].clone().detach().item", "print", "y.view", "torch.mul", "y.view", "torch.mul", "NCEAverage.NCEAverage_ori.multinomial.draw", "NCEAverage.NCEAverage_ori.select", "NCEAverage.NCEAverage_ori.view", "NCEAverage.NCEAverage_ori.view", "torch.div().contiguous.mean", "torch.div().contiguous.mean", "torch.div", "torch.div", "torch.index_select.pow().sum", "torch.index_select.pow().sum", "NCEAverage.NCEAverage_ori.params[].clone().detach", "NCEAverage.NCEAverage_ori.params[].clone().detach", "torch.index_select.pow", "torch.index_select.pow", "NCEAverage.NCEAverage_ori.params[].clone", "NCEAverage.NCEAverage_ori.params[].clone"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.draw"], ["", "def", "forward", "(", "self", ",", "l", ",", "ab", ",", "y", ",", "idx", "=", "None", ")", ":", "\n", "        ", "K", "=", "int", "(", "self", ".", "params", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "T", "=", "self", ".", "params", "[", "1", "]", ".", "item", "(", ")", "\n", "Z_l", "=", "self", ".", "params", "[", "2", "]", ".", "item", "(", ")", "\n", "Z_ab", "=", "self", ".", "params", "[", "3", "]", ".", "item", "(", ")", "\n", "\n", "momentum", "=", "self", ".", "params", "[", "4", "]", ".", "item", "(", ")", "\n", "batchSize", "=", "l", ".", "size", "(", "0", ")", "\n", "outputSize", "=", "self", ".", "memory_l", ".", "size", "(", "0", ")", "\n", "inputSize", "=", "self", ".", "memory_l", ".", "size", "(", "1", ")", "\n", "\n", "# score computation", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "self", ".", "multinomial", ".", "draw", "(", "batchSize", "*", "(", "self", ".", "K", "+", "1", ")", ")", ".", "view", "(", "batchSize", ",", "-", "1", ")", "\n", "idx", ".", "select", "(", "1", ",", "0", ")", ".", "copy_", "(", "y", ".", "data", ")", "\n", "# sample", "\n", "", "weight_l", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_l", "=", "weight_l", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "out_ab", "=", "torch", ".", "bmm", "(", "weight_l", ",", "ab", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "# sample", "\n", "weight_ab", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_ab", "=", "weight_ab", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "out_l", "=", "torch", ".", "bmm", "(", "weight_ab", ",", "l", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "use_softmax", ":", "\n", "            ", "out_ab", "=", "torch", ".", "div", "(", "out_ab", ",", "T", ")", "\n", "out_l", "=", "torch", ".", "div", "(", "out_l", ",", "T", ")", "\n", "out_l", "=", "out_l", ".", "contiguous", "(", ")", "\n", "out_ab", "=", "out_ab", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "out_ab", "=", "torch", ".", "exp", "(", "torch", ".", "div", "(", "out_ab", ",", "T", ")", ")", "\n", "out_l", "=", "torch", ".", "exp", "(", "torch", ".", "div", "(", "out_l", ",", "T", ")", ")", "\n", "# set Z_0 if haven't been set yet,", "\n", "# Z_0 is used as a constant approximation of Z, to scale the probs", "\n", "if", "Z_l", "<", "0", ":", "\n", "                ", "self", ".", "params", "[", "2", "]", "=", "out_l", ".", "mean", "(", ")", "*", "outputSize", "\n", "Z_l", "=", "self", ".", "params", "[", "2", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_l is set to {:.1f}\"", ".", "format", "(", "Z_l", ")", ")", "\n", "", "if", "Z_ab", "<", "0", ":", "\n", "                ", "self", ".", "params", "[", "3", "]", "=", "out_ab", ".", "mean", "(", ")", "*", "outputSize", "\n", "Z_ab", "=", "self", ".", "params", "[", "3", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_ab is set to {:.1f}\"", ".", "format", "(", "Z_ab", ")", ")", "\n", "# compute out_l, out_ab", "\n", "", "out_l", "=", "torch", ".", "div", "(", "out_l", ",", "Z_l", ")", ".", "contiguous", "(", ")", "\n", "out_ab", "=", "torch", ".", "div", "(", "out_ab", ",", "Z_ab", ")", ".", "contiguous", "(", ")", "\n", "\n", "# # update memory", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "l_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "l_pos", ".", "mul_", "(", "momentum", ")", "\n", "l_pos", ".", "add_", "(", "torch", ".", "mul", "(", "l", ",", "1", "-", "momentum", ")", ")", "\n", "l_norm", "=", "l_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_l", "=", "l_pos", ".", "div", "(", "l_norm", ")", "\n", "self", ".", "memory_l", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_l", ")", "\n", "\n", "ab_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "ab_pos", ".", "mul_", "(", "momentum", ")", "\n", "ab_pos", ".", "add_", "(", "torch", ".", "mul", "(", "ab", ",", "1", "-", "momentum", ")", ")", "\n", "ab_norm", "=", "ab_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_ab", "=", "ab_pos", ".", "div", "(", "ab_norm", ")", "\n", "self", ".", "memory_ab", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_ab", ")", "\n", "\n", "", "return", "out_l", ",", "out_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.NCEAverage.NCEAverage.__init__": [[92, 106], ["torch.nn.Module.__init__", "torch.ones", "alias_multinomial.AliasMethod", "NCEAverage.NCEAverage.multinomial.cuda", "NCEAverage.NCEAverage.register_buffer", "NCEAverage.NCEAverage.register_buffer", "NCEAverage.NCEAverage.register_buffer", "NCEAverage.NCEAverage.register_buffer", "torch.tensor", "math.sqrt", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda"], ["    ", "def", "__init__", "(", "self", ",", "inputSize", ",", "outputSize", ",", "K", ",", "T", "=", "0.07", ",", "momentum", "=", "0.5", ",", "use_softmax", "=", "False", ")", ":", "\n", "        ", "super", "(", "NCEAverage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nLem", "=", "outputSize", "\n", "self", ".", "unigrams", "=", "torch", ".", "ones", "(", "self", ".", "nLem", ")", "\n", "self", ".", "multinomial", "=", "AliasMethod", "(", "self", ".", "unigrams", ")", "\n", "self", ".", "multinomial", ".", "cuda", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "use_softmax", "=", "use_softmax", "\n", "\n", "self", ".", "register_buffer", "(", "'params'", ",", "torch", ".", "tensor", "(", "[", "K", ",", "T", ",", "-", "1", ",", "-", "1", ",", "momentum", "]", ")", ")", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "inputSize", "/", "3", ")", "\n", "self", ".", "register_buffer", "(", "'memory_l'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_ab'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_neg'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.NCEAverage.NCEAverage.forward": [[107, 185], ["int", "NCEAverage.NCEAverage.params[].item", "NCEAverage.NCEAverage.params[].item", "NCEAverage.NCEAverage.params[].item", "NCEAverage.NCEAverage.params[].item", "l.size", "NCEAverage.NCEAverage.memory_l.size", "NCEAverage.NCEAverage.memory_l.size", "torch.index_select().detach", "weight_neg.view.view.view", "torch.index_select().detach", "torch.cat.view", "torch.cat", "torch.bmm", "torch.index_select().detach", "torch.cat.view", "torch.cat", "torch.bmm", "NCEAverage.NCEAverage.params[].item", "NCEAverage.NCEAverage.multinomial.draw().view", "NCEAverage.NCEAverage.select().copy_", "ab.view", "l.view", "torch.div", "torch.div", "torch.div().contiguous.contiguous", "torch.div().contiguous.contiguous", "torch.exp", "torch.exp", "torch.div().contiguous", "torch.div().contiguous", "torch.no_grad", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverage.memory_l.index_copy_", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverage.memory_ab.index_copy_", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverage.memory_neg.index_copy_", "torch.index_select", "torch.index_select", "torch.index_select", "torch.div", "torch.div", "NCEAverage.NCEAverage.params[].clone().detach().item", "print", "NCEAverage.NCEAverage.params[].clone().detach().item", "print", "y.view", "torch.mul", "y.view", "torch.mul", "y.view", "torch.mul", "NCEAverage.NCEAverage.multinomial.draw", "NCEAverage.NCEAverage.select", "NCEAverage.NCEAverage.view", "NCEAverage.NCEAverage.view", "NCEAverage.NCEAverage.view", "torch.div().contiguous.mean", "torch.div().contiguous.mean", "torch.div", "torch.div", "torch.index_select.pow().sum", "torch.index_select.pow().sum", "torch.index_select.pow().sum", "NCEAverage.NCEAverage.params[].clone().detach", "NCEAverage.NCEAverage.params[].clone().detach", "torch.index_select.pow", "torch.index_select.pow", "torch.index_select.pow", "NCEAverage.NCEAverage.params[].clone", "NCEAverage.NCEAverage.params[].clone"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.draw"], ["", "def", "forward", "(", "self", ",", "l", ",", "ab", ",", "neg", ",", "y", ",", "idx", "=", "None", ")", ":", "\n", "        ", "K", "=", "int", "(", "self", ".", "params", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "T", "=", "self", ".", "params", "[", "1", "]", ".", "item", "(", ")", "\n", "Z_l", "=", "self", ".", "params", "[", "2", "]", ".", "item", "(", ")", "\n", "Z_ab", "=", "self", ".", "params", "[", "3", "]", ".", "item", "(", ")", "\n", "\n", "momentum", "=", "self", ".", "params", "[", "4", "]", ".", "item", "(", ")", "\n", "batchSize", "=", "l", ".", "size", "(", "0", ")", "\n", "outputSize", "=", "self", ".", "memory_l", ".", "size", "(", "0", ")", "\n", "inputSize", "=", "self", ".", "memory_l", ".", "size", "(", "1", ")", "\n", "\n", "# score computation", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "self", ".", "multinomial", ".", "draw", "(", "batchSize", "*", "(", "self", ".", "K", "+", "1", ")", ")", ".", "view", "(", "batchSize", ",", "-", "1", ")", "\n", "idx", ".", "select", "(", "1", ",", "0", ")", ".", "copy_", "(", "y", ".", "data", ")", "\n", "\n", "# neg sample", "\n", "", "weight_neg", "=", "torch", ".", "index_select", "(", "self", ".", "memory_neg", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_neg", "=", "weight_neg", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "\n", "# sample", "\n", "weight_l", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_l", "=", "weight_l", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "weight_l", "=", "torch", ".", "cat", "(", "(", "weight_l", ",", "weight_neg", ")", ",", "1", ")", "\n", "out_ab", "=", "torch", ".", "bmm", "(", "weight_l", ",", "ab", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "# sample", "\n", "weight_ab", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_ab", "=", "weight_ab", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "weight_ab", "=", "torch", ".", "cat", "(", "(", "weight_ab", ",", "weight_neg", ")", ",", "1", ")", "\n", "out_l", "=", "torch", ".", "bmm", "(", "weight_ab", ",", "l", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "use_softmax", ":", "\n", "            ", "out_ab", "=", "torch", ".", "div", "(", "out_ab", ",", "T", ")", "\n", "out_l", "=", "torch", ".", "div", "(", "out_l", ",", "T", ")", "\n", "out_l", "=", "out_l", ".", "contiguous", "(", ")", "\n", "out_ab", "=", "out_ab", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "out_ab", "=", "torch", ".", "exp", "(", "torch", ".", "div", "(", "out_ab", ",", "T", ")", ")", "\n", "out_l", "=", "torch", ".", "exp", "(", "torch", ".", "div", "(", "out_l", ",", "T", ")", ")", "\n", "# set Z_0 if haven't been set yet,", "\n", "# Z_0 is used as a constant approximation of Z, to scale the probs", "\n", "if", "Z_l", "<", "0", ":", "\n", "                ", "self", ".", "params", "[", "2", "]", "=", "out_l", ".", "mean", "(", ")", "*", "outputSize", "\n", "Z_l", "=", "self", ".", "params", "[", "2", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_l is set to {:.1f}\"", ".", "format", "(", "Z_l", ")", ")", "\n", "", "if", "Z_ab", "<", "0", ":", "\n", "                ", "self", ".", "params", "[", "3", "]", "=", "out_ab", ".", "mean", "(", ")", "*", "outputSize", "\n", "Z_ab", "=", "self", ".", "params", "[", "3", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_ab is set to {:.1f}\"", ".", "format", "(", "Z_ab", ")", ")", "\n", "# compute out_l, out_ab", "\n", "", "out_l", "=", "torch", ".", "div", "(", "out_l", ",", "Z_l", ")", ".", "contiguous", "(", ")", "\n", "out_ab", "=", "torch", ".", "div", "(", "out_ab", ",", "Z_ab", ")", ".", "contiguous", "(", ")", "\n", "\n", "# # update memory", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "l_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "l_pos", ".", "mul_", "(", "momentum", ")", "\n", "l_pos", ".", "add_", "(", "torch", ".", "mul", "(", "l", ",", "1", "-", "momentum", ")", ")", "\n", "l_norm", "=", "l_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_l", "=", "l_pos", ".", "div", "(", "l_norm", ")", "\n", "self", ".", "memory_l", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_l", ")", "\n", "\n", "ab_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "ab_pos", ".", "mul_", "(", "momentum", ")", "\n", "ab_pos", ".", "add_", "(", "torch", ".", "mul", "(", "ab", ",", "1", "-", "momentum", ")", ")", "\n", "ab_norm", "=", "ab_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_ab", "=", "ab_pos", ".", "div", "(", "ab_norm", ")", "\n", "self", ".", "memory_ab", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_ab", ")", "\n", "\n", "neg_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_neg", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "neg_pos", ".", "mul_", "(", "momentum", ")", "\n", "neg_pos", ".", "add_", "(", "torch", ".", "mul", "(", "neg", ",", "1", "-", "momentum", ")", ")", "\n", "neg_norm", "=", "neg_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_neg", "=", "neg_pos", ".", "div", "(", "neg_norm", ")", "\n", "self", ".", "memory_neg", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_neg", ")", "\n", "\n", "\n", "", "return", "out_l", ",", "out_ab", "", "", "", ""]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.NCECriterion.NCECriterion.__init__": [[11, 14], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["def", "__init__", "(", "self", ",", "n_data", ")", ":", "\n", "        ", "super", "(", "NCECriterion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_data", "=", "n_data", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.NCECriterion.NCECriterion.forward": [[15, 33], ["x.select", "torch.div().log_", "x.narrow", "torch.div().log_", "x.size", "float", "torch.div", "torch.div", "x.select.add", "x.narrow.clone().fill_", "x.narrow.add", "torch.div().log_.sum", "torch.div().log_.view().sum", "x.narrow.clone", "torch.div().log_.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bsz", "=", "x", ".", "shape", "[", "0", "]", "\n", "m", "=", "x", ".", "size", "(", "1", ")", "-", "1", "\n", "\n", "# noise distribution", "\n", "Pn", "=", "1", "/", "float", "(", "self", ".", "n_data", ")", "\n", "\n", "# loss for positive pair", "\n", "P_pos", "=", "x", ".", "select", "(", "1", ",", "0", ")", "\n", "log_D1", "=", "torch", ".", "div", "(", "P_pos", ",", "P_pos", ".", "add", "(", "m", "*", "Pn", "+", "eps", ")", ")", ".", "log_", "(", ")", "\n", "\n", "# loss for K negative pair", "\n", "P_neg", "=", "x", ".", "narrow", "(", "1", ",", "1", ",", "m", ")", "\n", "log_D0", "=", "torch", ".", "div", "(", "P_neg", ".", "clone", "(", ")", ".", "fill_", "(", "m", "*", "Pn", ")", ",", "P_neg", ".", "add", "(", "m", "*", "Pn", "+", "eps", ")", ")", ".", "log_", "(", ")", "\n", "\n", "loss", "=", "-", "(", "log_D1", ".", "sum", "(", "0", ")", "+", "log_D0", ".", "view", "(", "-", "1", ",", "1", ")", ".", "sum", "(", "0", ")", ")", "/", "bsz", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.NCECriterion.NCESoftmaxLoss.__init__": [[37, 40], ["torch.nn.Module.__init__", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NCESoftmaxLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.NCECriterion.NCESoftmaxLoss.forward": [[41, 47], ["x.squeeze.squeeze.squeeze", "torch.zeros().cuda().long", "NCECriterion.NCESoftmaxLoss.criterion", "torch.zeros().cuda", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bsz", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "label", "=", "torch", ".", "zeros", "(", "[", "bsz", "]", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "x", ",", "label", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.LinearAverage.LinearAverageOp.forward": [[7, 19], ["params[].item", "x.size", "torch.mm", "torch.mm.div_", "LinearAverage.LinearAverageOp.save_for_backward", "memory.t"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "memory", ",", "params", ")", ":", "\n", "        ", "T", "=", "params", "[", "0", "]", ".", "item", "(", ")", "\n", "batchSize", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# inner product", "\n", "out", "=", "torch", ".", "mm", "(", "x", ".", "data", ",", "memory", ".", "t", "(", ")", ")", "\n", "out", ".", "div_", "(", "T", ")", "# batchSize * N", "\n", "\n", "self", ".", "save_for_backward", "(", "x", ",", "memory", ",", "y", ",", "params", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.LinearAverage.LinearAverageOp.backward": [[20, 43], ["gradOutput.size", "params[].item", "params[].item", "gradOutput.data.div_", "torch.mm", "torch.mm.resize_as_", "memory.index_select().resize_as_", "memory.index_select().resize_as_.mul_", "memory.index_select().resize_as_.add_", "memory.index_select().resize_as_.pow().sum().pow", "memory.index_select().resize_as_.div", "memory.index_copy_", "torch.mul", "memory.index_select", "memory.index_select().resize_as_.pow().sum", "y.data.view", "memory.index_select().resize_as_.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "gradOutput", ")", ":", "\n", "        ", "x", ",", "memory", ",", "y", ",", "params", "=", "self", ".", "saved_tensors", "\n", "batchSize", "=", "gradOutput", ".", "size", "(", "0", ")", "\n", "T", "=", "params", "[", "0", "]", ".", "item", "(", ")", "\n", "momentum", "=", "params", "[", "1", "]", ".", "item", "(", ")", "\n", "\n", "# add temperature", "\n", "gradOutput", ".", "data", ".", "div_", "(", "T", ")", "\n", "\n", "# gradient of linear", "\n", "gradInput", "=", "torch", ".", "mm", "(", "gradOutput", ".", "data", ",", "memory", ")", "\n", "gradInput", ".", "resize_as_", "(", "x", ")", "\n", "\n", "# update the non-parametric data", "\n", "weight_pos", "=", "memory", ".", "index_select", "(", "0", ",", "y", ".", "data", ".", "view", "(", "-", "1", ")", ")", ".", "resize_as_", "(", "x", ")", "\n", "weight_pos", ".", "mul_", "(", "momentum", ")", "\n", "weight_pos", ".", "add_", "(", "torch", ".", "mul", "(", "x", ".", "data", ",", "1", "-", "momentum", ")", ")", "\n", "w_norm", "=", "weight_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_weight", "=", "weight_pos", ".", "div", "(", "w_norm", ")", "\n", "memory", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_weight", ")", "\n", "\n", "return", "gradInput", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.LinearAverage.LinearAverage.__init__": [[46, 54], ["torch.nn.Module.__init__", "LinearAverage.LinearAverage.register_buffer", "LinearAverage.LinearAverage.register_buffer", "math.sqrt", "torch.tensor", "math.sqrt", "torch.rand().mul_().add_", "torch.rand().mul_", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputSize", ",", "outputSize", ",", "T", "=", "0.07", ",", "momentum", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "LinearAverage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "stdv", "=", "1", "/", "math", ".", "sqrt", "(", "inputSize", ")", "\n", "self", ".", "nLem", "=", "outputSize", "\n", "\n", "self", ".", "register_buffer", "(", "'params'", ",", "torch", ".", "tensor", "(", "[", "T", ",", "momentum", "]", ")", ")", ";", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "inputSize", "/", "3", ")", "\n", "self", ".", "register_buffer", "(", "'memory'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.LinearAverage.LinearAverage.forward": [[55, 58], ["LinearAverageOp.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "out", "=", "LinearAverageOp", ".", "apply", "(", "x", ",", "y", ",", "self", ".", "memory", ",", "self", ".", "params", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.Merge.__init__": [[82, 84], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "axis", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.Merge.__call__": [[85, 97], ["isinstance", "isinstance", "all", "all", "numpy.concatenate", "Exception", "list", "isinstance"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "isinstance", "(", "images", ",", "collections", ".", "Sequence", ")", "or", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "assert", "all", "(", "[", "isinstance", "(", "i", ",", "np", ".", "ndarray", ")", "\n", "for", "i", "in", "images", "]", ")", ",", "'only numpy array is supported'", "\n", "shapes", "=", "[", "list", "(", "i", ".", "shape", ")", "for", "i", "in", "images", "]", "\n", "for", "s", "in", "shapes", ":", "\n", "                ", "s", "[", "self", ".", "axis", "]", "=", "None", "\n", "", "assert", "all", "(", "[", "s", "==", "shapes", "[", "0", "]", "for", "s", "in", "shapes", "]", "\n", ")", ",", "'shapes must be the same except the merge axis'", "\n", "return", "np", ".", "concatenate", "(", "images", ",", "axis", "=", "self", ".", "axis", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"obj is not a sequence (list, tuple, etc)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.Split.__init__": [[103, 115], ["isinstance", "all", "kwargs.get", "isinstance", "slices_.append", "slices_.append", "isinstance", "slice"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "slices", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "slices", ",", "collections", ".", "Sequence", ")", "\n", "slices_", "=", "[", "]", "\n", "for", "s", "in", "slices", ":", "\n", "            ", "if", "isinstance", "(", "s", ",", "collections", ".", "Sequence", ")", ":", "\n", "                ", "slices_", ".", "append", "(", "slice", "(", "*", "s", ")", ")", "\n", "", "else", ":", "\n", "                ", "slices_", ".", "append", "(", "s", ")", "\n", "", "", "assert", "all", "(", "[", "isinstance", "(", "s", ",", "slice", ")", "for", "s", "in", "slices_", "]", "\n", ")", ",", "'slices must be consist of slice instances'", "\n", "self", ".", "slices", "=", "slices_", "\n", "self", ".", "axis", "=", "kwargs", ".", "get", "(", "'axis'", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.Split.__call__": [[116, 126], ["isinstance", "Exception", "ret.append", "slice"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "ret", "=", "[", "]", "\n", "for", "s", "in", "self", ".", "slices", ":", "\n", "                ", "sl", "=", "[", "slice", "(", "None", ")", "]", "*", "image", ".", "ndim", "\n", "sl", "[", "self", ".", "axis", "]", "=", "s", "\n", "ret", ".", "append", "(", "image", "[", "sl", "]", ")", "\n", "", "return", "ret", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"obj is not an numpy array\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.ElasticTransform.__init__": [[132, 135], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alpha", ",", "sigma", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.ElasticTransform.__call__": [[136, 146], ["isinstance", "isinstance", "custom_transforms.elastic_transform", "custom_transforms.random_num_generator", "custom_transforms.random_num_generator"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.elastic_transform", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.random_num_generator", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.random_num_generator"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "alpha", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "alpha", "=", "random_num_generator", "(", "self", ".", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "alpha", "=", "self", ".", "alpha", "\n", "", "if", "isinstance", "(", "self", ".", "sigma", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "sigma", "=", "random_num_generator", "(", "self", ".", "sigma", ")", "\n", "", "else", ":", "\n", "            ", "sigma", "=", "self", ".", "sigma", "\n", "", "return", "elastic_transform", "(", "image", ",", "alpha", "=", "alpha", ",", "sigma", "=", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.PoissonSubsampling.__init__": [[152, 155], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "peak", ",", "random_state", "=", "np", ".", "random", ")", ":", "\n", "        ", "self", ".", "peak", "=", "peak", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.PoissonSubsampling.__call__": [[156, 163], ["isinstance", "custom_transforms.poisson_downsampling", "custom_transforms.random_num_generator"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.poisson_downsampling", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.random_num_generator"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "peak", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "peak", "=", "random_num_generator", "(", "\n", "self", ".", "peak", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "", "else", ":", "\n", "            ", "peak", "=", "self", ".", "peak", "\n", "", "return", "poisson_downsampling", "(", "image", ",", "peak", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.AddGaussianNoise.__init__": [[169, 173], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "sigma", ",", "random_state", "=", "np", ".", "random", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.AddGaussianNoise.__call__": [[174, 189], ["isinstance", "isinstance", "custom_transforms.AddGaussianNoise.random_state.normal", "gauss.reshape.reshape.reshape", "custom_transforms.random_num_generator", "custom_transforms.random_num_generator"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.random_num_generator", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.random_num_generator"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "sigma", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "sigma", "=", "random_num_generator", "(", "\n", "self", ".", "sigma", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "", "else", ":", "\n", "            ", "sigma", "=", "self", ".", "sigma", "\n", "", "if", "isinstance", "(", "self", ".", "mean", ",", "collections", ".", "Sequence", ",", "random_state", "=", "self", ".", "random_state", ")", ":", "\n", "            ", "mean", "=", "random_num_generator", "(", "self", ".", "mean", ")", "\n", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "mean", "\n", "", "row", ",", "col", ",", "ch", "=", "image", ".", "shape", "\n", "gauss", "=", "self", ".", "random_state", ".", "normal", "(", "mean", ",", "sigma", ",", "(", "row", ",", "col", ",", "ch", ")", ")", "\n", "gauss", "=", "gauss", ".", "reshape", "(", "row", ",", "col", ",", "ch", ")", "\n", "image", "+=", "gauss", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.AddSpeckleNoise.__init__": [[195, 199], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "sigma", ",", "random_state", "=", "np", ".", "random", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.AddSpeckleNoise.__call__": [[200, 216], ["isinstance", "isinstance", "custom_transforms.AddSpeckleNoise.random_state.normal", "gauss.reshape.reshape.reshape", "custom_transforms.random_num_generator", "custom_transforms.random_num_generator"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.random_num_generator", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.random_num_generator"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "sigma", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "sigma", "=", "random_num_generator", "(", "\n", "self", ".", "sigma", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "", "else", ":", "\n", "            ", "sigma", "=", "self", ".", "sigma", "\n", "", "if", "isinstance", "(", "self", ".", "mean", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "mean", "=", "random_num_generator", "(", "\n", "self", ".", "mean", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "mean", "\n", "", "row", ",", "col", ",", "ch", "=", "image", ".", "shape", "\n", "gauss", "=", "self", ".", "random_state", ".", "normal", "(", "mean", ",", "sigma", ",", "(", "row", ",", "col", ",", "ch", ")", ")", "\n", "gauss", "=", "gauss", ".", "reshape", "(", "row", ",", "col", ",", "ch", ")", "\n", "image", "+=", "image", "*", "gauss", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.RandomGaussianBlurring.__init__": [[222, 226], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", ",", "p", "=", "0.2", ",", "random_state", "=", "np", ".", "random", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.RandomGaussianBlurring.__call__": [[227, 236], ["isinstance", "custom_transforms.random_num_generator", "random.random", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.random_num_generator"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "sigma", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "sigma", "=", "random_num_generator", "(", "\n", "self", ".", "sigma", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "", "else", ":", "\n", "            ", "sigma", "=", "self", ".", "sigma", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "image", "=", "gaussian_filter", "(", "image", ",", "sigma", "=", "(", "sigma", ",", "sigma", ",", "0", ")", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.AddGaussianPoissonNoise.__init__": [[242, 246], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", ",", "peak", ",", "random_state", "=", "np", ".", "random", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "peak", "=", "peak", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.AddGaussianPoissonNoise.__call__": [[247, 262], ["isinstance", "isinstance", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "custom_transforms.poisson_downsampling", "custom_transforms.random_num_generator", "custom_transforms.random_num_generator"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.poisson_downsampling", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.random_num_generator", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.random_num_generator"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "sigma", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "sigma", "=", "random_num_generator", "(", "\n", "self", ".", "sigma", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "", "else", ":", "\n", "            ", "sigma", "=", "self", ".", "sigma", "\n", "", "if", "isinstance", "(", "self", ".", "peak", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "peak", "=", "random_num_generator", "(", "\n", "self", ".", "peak", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "", "else", ":", "\n", "            ", "peak", "=", "self", ".", "peak", "\n", "", "bg", "=", "gaussian_filter", "(", "image", ",", "sigma", "=", "(", "sigma", ",", "sigma", ",", "0", ")", ")", "\n", "bg", "=", "poisson_downsampling", "(", "\n", "bg", ",", "peak", "=", "peak", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "return", "image", "+", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.MaxScaleNumpy.__init__": [[269, 271], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "range_min", "=", "0.0", ",", "range_max", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "scale", "=", "(", "range_min", ",", "range_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.MaxScaleNumpy.__call__": [[272, 276], ["image.min", "image.max"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "mn", "=", "image", ".", "min", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "mx", "=", "image", ".", "max", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "return", "self", ".", "scale", "[", "0", "]", "+", "(", "image", "-", "mn", ")", "*", "(", "self", ".", "scale", "[", "1", "]", "-", "self", ".", "scale", "[", "0", "]", ")", "/", "(", "mx", "-", "mn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.MedianScaleNumpy.__init__": [[283, 285], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "range_min", "=", "0.0", ",", "range_max", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "scale", "=", "(", "range_min", ",", "range_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.MedianScaleNumpy.__call__": [[286, 290], ["image.min", "numpy.median"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "mn", "=", "image", ".", "min", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "md", "=", "np", ".", "median", "(", "image", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "return", "self", ".", "scale", "[", "0", "]", "+", "(", "image", "-", "mn", ")", "*", "(", "self", ".", "scale", "[", "1", "]", "-", "self", ".", "scale", "[", "0", "]", ")", "/", "(", "md", "-", "mn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.NormalizeNumpy.__call__": [[297, 303], ["image.mean", "image.std"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "-=", "image", ".", "mean", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "s", "=", "image", ".", "std", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "s", "[", "s", "==", "0", "]", "=", "1.0", "\n", "image", "/=", "s", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.MutualExclude.__init__": [[309, 312], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "exclude_channel", ",", "from_channel", ")", ":", "\n", "        ", "self", ".", "from_channel", "=", "from_channel", "\n", "self", ".", "exclude_channel", "=", "exclude_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.MutualExclude.__call__": [[313, 317], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "mask", "=", "image", "[", ":", ",", ":", ",", "self", ".", "exclude_channel", "]", ">", "0", "\n", "image", "[", ":", ",", ":", ",", "self", ".", "from_channel", "]", "[", "mask", "]", "=", "0", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.RandomCropNumpy.__init__": [[325, 331], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "random_state", "=", "np", ".", "random", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.RandomCropNumpy.__call__": [[332, 341], ["custom_transforms.RandomCropNumpy.random_state.randint", "custom_transforms.RandomCropNumpy.random_state.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", "\n", "\n", "", "x1", "=", "self", ".", "random_state", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "self", ".", "random_state", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "return", "img", "[", "x1", ":", "x1", "+", "tw", ",", "y1", ":", "y1", "+", "th", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.CenterCropNumpy.__init__": [[349, 354], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.CenterCropNumpy.__call__": [[355, 361], ["int", "int", "round", "round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", "[", "x1", ":", "x1", "+", "tw", ",", "y1", ":", "y1", "+", "th", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.RandomRotate.__init__": [[367, 373], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "angle_range", "=", "(", "0.0", ",", "360.0", ")", ",", "axes", "=", "(", "0", ",", "1", ")", ",", "mode", "=", "'reflect'", ",", "random_state", "=", "np", ".", "random", ")", ":", "\n", "        ", "assert", "isinstance", "(", "angle_range", ",", "tuple", ")", "\n", "self", ".", "angle_range", "=", "angle_range", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "axes", "=", "axes", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.RandomRotate.__call__": [[374, 386], ["custom_transforms.RandomRotate.random_state.uniform", "isinstance", "scipy.ndimage.interpolation.rotate", "scipy.ndimage.interpolation.rotate", "scipy.ndimage.interpolation.rotate", "scipy.ndimage.interpolation.rotate", "numpy.clip", "isinstance", "scipy.ndimage.interpolation.rotate.min", "scipy.ndimage.interpolation.rotate.min", "scipy.ndimage.interpolation.rotate.max", "scipy.ndimage.interpolation.rotate.max", "scipy.ndimage.interpolation.rotate.rotate", "scipy.ndimage.interpolation.rotate.rotate", "Exception"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "angle", "=", "self", ".", "random_state", ".", "uniform", "(", "\n", "self", ".", "angle_range", "[", "0", "]", ",", "self", ".", "angle_range", "[", "1", "]", ")", "\n", "if", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "mi", ",", "ma", "=", "image", ".", "min", "(", ")", ",", "image", ".", "max", "(", ")", "\n", "image", "=", "scipy", ".", "ndimage", ".", "interpolation", ".", "rotate", "(", "\n", "image", ",", "angle", ",", "reshape", "=", "False", ",", "axes", "=", "self", ".", "axes", ",", "mode", "=", "self", ".", "mode", ")", "\n", "return", "np", ".", "clip", "(", "image", ",", "mi", ",", "ma", ")", "\n", "", "elif", "isinstance", "(", "image", ",", "Image", ".", "Image", ")", ":", "\n", "            ", "return", "image", ".", "rotate", "(", "angle", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unsupported type'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.BilinearResize.__init__": [[392, 394], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "zoom", ")", ":", "\n", "        ", "self", ".", "zoom", "=", "[", "zoom", ",", "zoom", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.BilinearResize.__call__": [[395, 402], ["isinstance", "scipy.ndimage.interpolation.zoom", "scipy.ndimage.interpolation.zoom", "scipy.ndimage.interpolation.zoom", "scipy.ndimage.interpolation.zoom", "isinstance", "image.resize", "Exception"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "scipy", ".", "ndimage", ".", "interpolation", ".", "zoom", "(", "image", ",", "self", ".", "zoom", ")", "\n", "", "elif", "isinstance", "(", "image", ",", "Image", ".", "Image", ")", ":", "\n", "            ", "return", "image", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unsupported type'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.EnhancedCompose.__init__": [[415, 417], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.EnhancedCompose.__call__": [[418, 437], ["isinstance", "enumerate", "callable", "isinstance", "callable", "t", "len", "len", "tmp_.append", "tmp_.append", "Exception"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "if", "isinstance", "(", "t", ",", "collections", ".", "Sequence", ")", ":", "\n", "                ", "assert", "isinstance", "(", "img", ",", "collections", ".", "Sequence", ")", "and", "len", "(", "img", ")", "==", "len", "(", "\n", "t", ")", ",", "\"size of image group and transform group does not fit\"", "\n", "tmp_", "=", "[", "]", "\n", "for", "i", ",", "im_", "in", "enumerate", "(", "img", ")", ":", "\n", "                    ", "if", "callable", "(", "t", "[", "i", "]", ")", ":", "\n", "                        ", "tmp_", ".", "append", "(", "t", "[", "i", "]", "(", "im_", ")", ")", "\n", "", "else", ":", "\n", "                        ", "tmp_", ".", "append", "(", "im_", ")", "\n", "", "", "img", "=", "tmp_", "\n", "", "elif", "callable", "(", "t", ")", ":", "\n", "                ", "img", "=", "t", "(", "img", ")", "\n", "", "elif", "t", "is", "None", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'unexpected type'", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.center_crop": [[17, 22], ["None"], "function", ["None"], ["def", "center_crop", "(", "x", ",", "center_crop_size", ")", ":", "\n", "    ", "assert", "x", ".", "ndim", "==", "3", "\n", "centerw", ",", "centerh", "=", "x", ".", "shape", "[", "1", "]", "//", "2", ",", "x", ".", "shape", "[", "2", "]", "//", "2", "\n", "halfw", ",", "halfh", "=", "center_crop_size", "[", "0", "]", "//", "2", ",", "center_crop_size", "[", "1", "]", "//", "2", "\n", "return", "x", "[", ":", ",", "centerw", "-", "halfw", ":", "centerw", "+", "halfw", ",", "centerh", "-", "halfh", ":", "centerh", "+", "halfh", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.to_tensor": [[24, 28], ["x.transpose.transpose", "torch.from_numpy().float", "torch.from_numpy"], "function", ["None"], ["", "def", "to_tensor", "(", "x", ")", ":", "\n", "    ", "import", "torch", "\n", "x", "=", "x", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.random_num_generator": [[30, 39], ["random_state.uniform", "print", "Exception", "random_state.lognormal"], "function", ["None"], ["", "def", "random_num_generator", "(", "config", ",", "random_state", "=", "np", ".", "random", ")", ":", "\n", "    ", "if", "config", "[", "0", "]", "==", "'uniform'", ":", "\n", "        ", "ret", "=", "random_state", ".", "uniform", "(", "config", "[", "1", "]", ",", "config", "[", "2", "]", ",", "1", ")", "[", "0", "]", "\n", "", "elif", "config", "[", "0", "]", "==", "'lognormal'", ":", "\n", "        ", "ret", "=", "random_state", ".", "lognormal", "(", "config", "[", "1", "]", ",", "config", "[", "2", "]", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "config", ")", "\n", "raise", "Exception", "(", "'unsupported format'", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.poisson_downsampling": [[41, 52], ["random_state.poisson", "random_state.poisson.astype", "isinstance", "numpy.array", "image.astype", "image.astype.max"], "function", ["None"], ["", "def", "poisson_downsampling", "(", "image", ",", "peak", ",", "random_state", "=", "np", ".", "random", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "imgArr", "=", "np", ".", "array", "(", "image", ",", "dtype", "=", "'float32'", ")", "\n", "", "else", ":", "\n", "        ", "imgArr", "=", "image", ".", "astype", "(", "'float32'", ")", "\n", "", "Q", "=", "imgArr", ".", "max", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "/", "peak", "\n", "if", "Q", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "imgArr", "\n", "", "ima_lambda", "=", "imgArr", "/", "Q", "\n", "noisy_img", "=", "random_state", ".", "poisson", "(", "lam", "=", "ima_lambda", ")", "\n", "return", "noisy_img", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.custom_transforms.elastic_transform": [[54, 76], ["numpy.meshgrid", "numpy.empty_like", "range", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "numpy.arange", "numpy.arange", "numpy.reshape", "numpy.reshape", "scipy.ndimage.interpolation.map_coordinates().reshape", "scipy.ndimage.interpolation.map_coordinates", "random_state.rand", "random_state.rand"], "function", ["None"], ["", "def", "elastic_transform", "(", "image", ",", "alpha", "=", "1000", ",", "sigma", "=", "30", ",", "spline_order", "=", "1", ",", "mode", "=", "'nearest'", ",", "random_state", "=", "np", ".", "random", ")", ":", "\n", "    ", "\"\"\"Elastic deformation of image as described in [Simard2003]_.\n    .. [Simard2003] Simard, Steinkraus and Platt, \"Best Practices for\n       Convolutional Neural Networks applied to Visual Document Analysis\", in\n       Proc. of the International Conference on Document Analysis and\n       Recognition, 2003.\n    \"\"\"", "\n", "assert", "image", ".", "ndim", "==", "3", "\n", "shape", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "\n", "dx", "=", "gaussian_filter", "(", "(", "random_state", ".", "rand", "(", "*", "shape", ")", "*", "2", "-", "1", ")", ",", "\n", "sigma", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0", ")", "*", "alpha", "\n", "dy", "=", "gaussian_filter", "(", "(", "random_state", ".", "rand", "(", "*", "shape", ")", "*", "2", "-", "1", ")", ",", "\n", "sigma", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0", ")", "*", "alpha", "\n", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "shape", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "shape", "[", "1", "]", ")", ",", "indexing", "=", "'ij'", ")", "\n", "indices", "=", "[", "np", ".", "reshape", "(", "x", "+", "dx", ",", "(", "-", "1", ",", "1", ")", ")", ",", "np", ".", "reshape", "(", "y", "+", "dy", ",", "(", "-", "1", ",", "1", ")", ")", "]", "\n", "result", "=", "np", ".", "empty_like", "(", "image", ")", "\n", "for", "i", "in", "range", "(", "image", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "result", "[", ":", ",", ":", ",", "i", "]", "=", "map_coordinates", "(", "\n", "image", "[", ":", ",", ":", ",", "i", "]", ",", "indices", ",", "order", "=", "spline_order", ",", "mode", "=", "mode", ")", ".", "reshape", "(", "shape", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.__init__": [[8, 44], ["len", "torch.zeros", "torch.LongTensor", "enumerate", "probs.sum", "probs.div_", "smaller.pop", "larger.pop", "probs.sum", "smaller.append", "larger.append", "len", "len", "smaller.append", "larger.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probs", ")", ":", "\n", "\n", "        ", "if", "probs", ".", "sum", "(", ")", ">", "1", ":", "\n", "            ", "probs", ".", "div_", "(", "probs", ".", "sum", "(", ")", ")", "\n", "", "K", "=", "len", "(", "probs", ")", "\n", "self", ".", "prob", "=", "torch", ".", "zeros", "(", "K", ")", "\n", "self", ".", "alias", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", "*", "K", ")", "\n", "\n", "# Sort the data into the outcomes with probabilities", "\n", "# that are larger and smaller than 1/K.", "\n", "smaller", "=", "[", "]", "\n", "larger", "=", "[", "]", "\n", "for", "kk", ",", "prob", "in", "enumerate", "(", "probs", ")", ":", "\n", "            ", "self", ".", "prob", "[", "kk", "]", "=", "K", "*", "prob", "\n", "if", "self", ".", "prob", "[", "kk", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "kk", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "kk", ")", "\n", "\n", "# Loop though and create little binary mixtures that", "\n", "# appropriately allocate the larger outcomes over the", "\n", "# overall uniform mixture.", "\n", "", "", "while", "len", "(", "smaller", ")", ">", "0", "and", "len", "(", "larger", ")", ">", "0", ":", "\n", "            ", "small", "=", "smaller", ".", "pop", "(", ")", "\n", "large", "=", "larger", ".", "pop", "(", ")", "\n", "\n", "self", ".", "alias", "[", "small", "]", "=", "large", "\n", "self", ".", "prob", "[", "large", "]", "=", "(", "self", ".", "prob", "[", "large", "]", "-", "1.0", ")", "+", "self", ".", "prob", "[", "small", "]", "\n", "\n", "if", "self", ".", "prob", "[", "large", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "large", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "large", ")", "\n", "\n", "", "", "for", "last_one", "in", "smaller", "+", "larger", ":", "\n", "            ", "self", ".", "prob", "[", "last_one", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda": [[45, 48], ["alias_multinomial.AliasMethod.prob.cuda", "alias_multinomial.AliasMethod.alias.cuda"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "prob", "=", "self", ".", "prob", ".", "cuda", "(", ")", "\n", "self", ".", "alias", "=", "self", ".", "alias", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.alias_multinomial.AliasMethod.draw": [[49, 64], ["alias_multinomial.AliasMethod.alias.size", "torch.zeros().random_", "alias_multinomial.AliasMethod.prob.index_select", "alias_multinomial.AliasMethod.alias.index_select", "torch.bernoulli", "torch.zeros().random_.mul", "alias_multinomial.AliasMethod.mul", "torch.bernoulli.long", "torch.zeros"], "methods", ["None"], ["", "def", "draw", "(", "self", ",", "N", ")", ":", "\n", "        ", "'''\n            Draw N samples from multinomial\n        '''", "\n", "K", "=", "self", ".", "alias", ".", "size", "(", "0", ")", "\n", "\n", "kk", "=", "torch", ".", "zeros", "(", "N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "prob", ".", "device", ")", ".", "random_", "(", "0", ",", "K", ")", "\n", "prob", "=", "self", ".", "prob", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "alias", "=", "self", ".", "alias", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "# b is whether a random number is greater than q", "\n", "b", "=", "torch", ".", "bernoulli", "(", "prob", ")", "\n", "oq", "=", "kk", ".", "mul", "(", "b", ".", "long", "(", ")", ")", "\n", "oj", "=", "alias", ".", "mul", "(", "(", "1", "-", "b", ")", ".", "long", "(", ")", ")", "\n", "\n", "return", "oq", "+", "oj", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.__init__": [[15, 17], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.reset": [[18, 23], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.AverageMeter.update": [[24, 29], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.adjust_learning_rate": [[5, 12], ["numpy.sum", "numpy.asarray"], "function", ["None"], ["def", "adjust_learning_rate", "(", "epoch", ",", "opt", ",", "optimizer", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 0.2 every steep step\"\"\"", "\n", "steps", "=", "np", ".", "sum", "(", "epoch", ">", "np", ".", "asarray", "(", "opt", ".", "lr_decay_epochs", ")", ")", "\n", "if", "steps", ">", "0", ":", "\n", "        ", "new_lr", "=", "opt", ".", "learning_rate", "*", "(", "opt", ".", "lr_decay_rate", "**", "steps", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.lib.utils.accuracy": [[30, 45], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.hmdb51.HMDB51Dataset.__init__": [[61, 80], ["torchvision.transforms.ToPILImage", "os.path.join", "print", "pandas.read_csv().set_index", "pandas.read_csv().set_index", "os.path.join", "os.path.join", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "clip_len", "=", "16", ",", "split", "=", "'1'", ",", "train", "=", "True", ",", "transforms_", "=", "None", ",", "test_sample_num", "=", "10", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transforms_", "=", "transforms_", "\n", "self", ".", "test_sample_num", "=", "test_sample_num", "\n", "self", ".", "toPIL", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "class_idx_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'classInd.txt'", ")", "\n", "self", ".", "class_idx2label", "=", "pd", ".", "read_csv", "(", "class_idx_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "set_index", "(", "0", ")", "[", "1", "]", "\n", "self", ".", "class_label2idx", "=", "pd", ".", "read_csv", "(", "class_idx_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "set_index", "(", "1", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "train_split_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'trainlist0'", "+", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "train_split", "=", "pd", ".", "read_csv", "(", "train_split_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "test_split_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'testlist0'", "+", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "test_split", "=", "pd", ".", "read_csv", "(", "test_split_path", ",", "header", "=", "None", ")", "[", "0", "]", "\n", "", "print", "(", "'Use split'", "+", "self", ".", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.hmdb51.HMDB51Dataset.__len__": [[81, 86], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_split", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.hmdb51.HMDB51Dataset.__getitem__": [[87, 206], ["vid.split", "os.path.join", "os.path.join", "os.path.join", "os.walk", "videoname.split", "vid[].split", "sorted", "len", "print", "print", "random.randint", "hmdb51.load_one_clip", "hmdb51.load_one_clip", "hmdb51.load_one_clip", "numpy.linspace", "sorted.remove", "random.random", "range", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "int", "hmdb51.load_one_clip", "hmdb51.load_one_clip", "hmdb51.load_one_clip", "all_clips.append", "all_u_clips.append", "all_v_clips.append", "all_idx.append", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "len", "random.seed", "hmdb51.HMDB51Dataset.toPIL", "hmdb51.HMDB51Dataset.transforms_", "trans_clip.append", "hmdb51.HMDB51Dataset.toPIL", "hmdb51.HMDB51Dataset.transforms_", "trans_u_clip.append", "hmdb51.HMDB51Dataset.toPIL", "hmdb51.HMDB51Dataset.transforms_", "trans_v_clip.append", "int", "random.random", "range", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "int", "torch.stack", "torch.stack", "torch.stack", "len", "random.seed", "hmdb51.HMDB51Dataset.toPIL", "hmdb51.HMDB51Dataset.transforms_", "trans_clip.append", "hmdb51.HMDB51Dataset.toPIL", "hmdb51.HMDB51Dataset.transforms_", "trans_u_clip.append", "hmdb51.HMDB51Dataset.toPIL", "hmdb51.HMDB51Dataset.transforms_", "trans_v_clip.append", "int", "videoname.find", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            clip (tensor): [channel x time x height x width]\n            class_idx (tensor): class index, [0-100]\n        \"\"\"", "\n", "if", "self", ".", "train", ":", "\n", "            ", "videoname", "=", "self", ".", "train_split", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "videoname", "=", "self", ".", "test_split", "[", "idx", "]", "\n", "\n", "", "class_idx", "=", "self", ".", "class_label2idx", "[", "videoname", "[", ":", "videoname", ".", "find", "(", "'/'", ")", "]", "]", "-", "1", "\n", "# videoname = 'ApplyEyeMakeup/v_ApplyEyeMakeup_g01_c01.avi'", "\n", "vid", "=", "videoname", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "vid", "=", "vid", "[", ":", "-", "4", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "# to avoid void folder", "\n", "vids", "=", "vid", ".", "split", "(", "'_'", ")", "\n", "if", "vids", "[", "1", "]", "==", "'HandStandPushups'", ":", "\n", "            ", "vid", "=", "vids", "[", "0", "]", "+", "'_HandstandPushups_'", "+", "vids", "[", "2", "]", "+", "'_'", "+", "vids", "[", "3", "]", "\n", "\n", "", "rgb_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/hmdb51_rgbflow/jpegs_256/'", ",", "vid", ")", "# + v_**", "\n", "u_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/hmdb51_rgbflow/tvl1_flow/u/'", ",", "vid", ")", "\n", "v_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/hmdb51_rgbflow/tvl1_flow/v/'", ",", "vid", ")", "\n", "\n", "filenames", "=", "[", "'frame000001.jpg'", "]", "\n", "for", "parent", ",", "dirnames", ",", "filenames", "in", "os", ".", "walk", "(", "rgb_folder", ")", ":", "\n", "            ", "if", "'n_frames'", "in", "filenames", ":", "\n", "                ", "filenames", ".", "remove", "(", "'n_frames'", ")", "\n", "", "filenames", "=", "sorted", "(", "filenames", ")", "\n", "", "framenames", "=", "filenames", "\n", "length", "=", "len", "(", "framenames", ")", "-", "1", "\n", "if", "length", "<", "16", ":", "\n", "            ", "print", "(", "vid", ",", "length", ")", "\n", "print", "(", "'\\n'", ")", "\n", "raise", "\n", "\n", "# random select a clip for train", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "clip_start", "=", "random", ".", "randint", "(", "0", ",", "length", "-", "self", ".", "clip_len", ")", "\n", "clip", "=", "load_one_clip", "(", "rgb_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "u_clip", "=", "load_one_clip", "(", "u_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "v_clip", "=", "load_one_clip", "(", "v_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "#clip = videodata[clip_start: clip_start + self.clip_len]", "\n", "\n", "if", "self", ".", "transforms_", ":", "\n", "                ", "trans_clip", "=", "[", "]", "\n", "trans_u_clip", "=", "[", "]", "\n", "trans_v_clip", "=", "[", "]", "\n", "# fix seed, apply the sample `random transformation` for all frames in the clip ", "\n", "seed", "=", "random", ".", "random", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "clip", ")", ")", ":", "\n", "                    ", "random", ".", "seed", "(", "seed", ")", "\n", "frame", "=", "self", ".", "toPIL", "(", "clip", "[", "i", "]", ")", "# PIL image", "\n", "frame", "=", "self", ".", "transforms_", "(", "frame", ")", "# tensor [C x H x W]", "\n", "trans_clip", ".", "append", "(", "frame", ")", "\n", "\n", "u_frame", "=", "self", ".", "toPIL", "(", "u_clip", "[", "i", "]", ")", "# PIL image", "\n", "u_frame", "=", "self", ".", "transforms_", "(", "u_frame", ")", "# tensor [C x H x W]", "\n", "trans_u_clip", ".", "append", "(", "u_frame", ")", "\n", "\n", "v_frame", "=", "self", ".", "toPIL", "(", "v_clip", "[", "i", "]", ")", "# PIL image", "\n", "v_frame", "=", "self", ".", "transforms_", "(", "v_frame", ")", "# tensor [C x H x W]", "\n", "trans_v_clip", ".", "append", "(", "v_frame", ")", "\n", "\n", "# (T x C X H x W) to (C X T x H x W)", "\n", "", "clip", "=", "torch", ".", "stack", "(", "trans_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "u_clip", "=", "torch", ".", "stack", "(", "trans_u_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "v_clip", "=", "torch", ".", "stack", "(", "trans_v_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "                ", "clip", "=", "torch", ".", "tensor", "(", "clip", ")", "\n", "u_clip", "=", "torch", ".", "tensor", "(", "u_clip", ")", "\n", "v_clip", "=", "torch", ".", "tensor", "(", "v_clip", ")", "\n", "\n", "", "return", "clip", ",", "u_clip", ",", "v_clip", ",", "torch", ".", "tensor", "(", "int", "(", "class_idx", ")", ")", ",", "idx", "\n", "# sample several clips for test", "\n", "", "else", ":", "\n", "            ", "all_clips", "=", "[", "]", "\n", "all_u_clips", "=", "[", "]", "\n", "all_v_clips", "=", "[", "]", "\n", "all_idx", "=", "[", "]", "\n", "for", "i", "in", "np", ".", "linspace", "(", "self", ".", "clip_len", "/", "2", ",", "length", "-", "self", ".", "clip_len", "/", "2", ",", "self", ".", "test_sample_num", ")", ":", "\n", "                ", "clip_start", "=", "int", "(", "i", "-", "self", ".", "clip_len", "/", "2", ")", "\n", "#clip = videodata[clip_start: clip_start + self.clip_len]", "\n", "clip", "=", "load_one_clip", "(", "rgb_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "u_clip", "=", "load_one_clip", "(", "u_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "v_clip", "=", "load_one_clip", "(", "v_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "if", "self", ".", "transforms_", ":", "\n", "                    ", "trans_clip", "=", "[", "]", "\n", "trans_u_clip", "=", "[", "]", "\n", "trans_v_clip", "=", "[", "]", "\n", "# fix seed, apply the sample `random transformation` for all frames in the clip ", "\n", "seed", "=", "random", ".", "random", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "clip", ")", ")", ":", "\n", "                        ", "random", ".", "seed", "(", "seed", ")", "\n", "frame", "=", "self", ".", "toPIL", "(", "clip", "[", "i", "]", ")", "# PIL image", "\n", "frame", "=", "self", ".", "transforms_", "(", "frame", ")", "# tensor [C x H x W]", "\n", "trans_clip", ".", "append", "(", "frame", ")", "\n", "\n", "u_frame", "=", "self", ".", "toPIL", "(", "u_clip", "[", "i", "]", ")", "# PIL image", "\n", "u_frame", "=", "self", ".", "transforms_", "(", "u_frame", ")", "# tensor [C x H x W]", "\n", "trans_u_clip", ".", "append", "(", "u_frame", ")", "\n", "\n", "v_frame", "=", "self", ".", "toPIL", "(", "v_clip", "[", "i", "]", ")", "# PIL image", "\n", "v_frame", "=", "self", ".", "transforms_", "(", "v_frame", ")", "# tensor [C x H x W]", "\n", "trans_v_clip", ".", "append", "(", "v_frame", ")", "\n", "# (T x C X H x W) to (C X T x H x W)", "\n", "", "clip", "=", "torch", ".", "stack", "(", "trans_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "u_clip", "=", "torch", ".", "stack", "(", "trans_u_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "v_clip", "=", "torch", ".", "stack", "(", "trans_v_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "                    ", "clip", "=", "torch", ".", "tensor", "(", "clip", ")", "\n", "u_clip", "=", "torch", ".", "tensor", "(", "u_clip", ")", "\n", "v_clip", "=", "torch", ".", "tensor", "(", "v_clip", ")", "\n", "", "all_clips", ".", "append", "(", "clip", ")", "\n", "all_u_clips", ".", "append", "(", "u_clip", ")", "\n", "all_v_clips", ".", "append", "(", "v_clip", ")", "\n", "all_idx", ".", "append", "(", "torch", ".", "tensor", "(", "int", "(", "class_idx", ")", ")", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "all_clips", ")", ",", "torch", ".", "stack", "(", "all_u_clips", ")", ",", "torch", ".", "stack", "(", "all_v_clips", ")", ",", "torch", ".", "tensor", "(", "int", "(", "class_idx", ")", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.hmdb51.HMDB51ClipRetrievalDataset.__init__": [[218, 236], ["torchvision.transforms.ToPILImage", "os.path.join", "pandas.read_csv().set_index", "pandas.read_csv().set_index", "os.path.join", "os.path.join", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "clip_len", ",", "sample_num", ",", "train", "=", "True", ",", "transforms_", "=", "None", ",", "split", "=", "'1'", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "sample_num", "=", "sample_num", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transforms_", "=", "transforms_", "\n", "self", ".", "toPIL", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "class_idx_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'classInd.txt'", ")", "\n", "self", ".", "class_idx2label", "=", "pd", ".", "read_csv", "(", "class_idx_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "set_index", "(", "0", ")", "[", "1", "]", "\n", "self", ".", "class_label2idx", "=", "pd", ".", "read_csv", "(", "class_idx_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "set_index", "(", "1", ")", "[", "0", "]", "\n", "self", ".", "split", "=", "split", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "train_split_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'trainlist0'", "+", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "train_split", "=", "pd", ".", "read_csv", "(", "train_split_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "test_split_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'testlist0'", "+", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "test_split", "=", "pd", ".", "read_csv", "(", "test_split_path", ",", "header", "=", "None", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.hmdb51.HMDB51ClipRetrievalDataset.__len__": [[237, 242], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_split", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.hmdb51.HMDB51ClipRetrievalDataset.__getitem__": [[243, 317], ["vid.split", "os.path.join", "os.path.join", "os.path.join", "os.walk", "numpy.linspace", "videoname.split", "vid[].split", "sorted", "len", "int", "hmdb51.load_one_clip", "hmdb51.load_one_clip", "hmdb51.load_one_clip", "all_clips.append", "all_u_clips.append", "all_v_clips.append", "all_idx.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "sorted.remove", "random.random", "range", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "random.seed", "hmdb51.HMDB51ClipRetrievalDataset.toPIL", "hmdb51.HMDB51ClipRetrievalDataset.transforms_", "trans_clip.append", "hmdb51.HMDB51ClipRetrievalDataset.toPIL", "hmdb51.HMDB51ClipRetrievalDataset.transforms_", "trans_u_clip.append", "hmdb51.HMDB51ClipRetrievalDataset.toPIL", "hmdb51.HMDB51ClipRetrievalDataset.transforms_", "trans_v_clip.append", "int", "videoname.find", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            clip (tensor): [channel x time x height x width]\n            class_idx (tensor): class index [0-100]\n        \"\"\"", "\n", "if", "self", ".", "train", ":", "\n", "            ", "videoname", "=", "self", ".", "train_split", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "videoname", "=", "self", ".", "test_split", "[", "idx", "]", "\n", "", "class_idx", "=", "self", ".", "class_label2idx", "[", "videoname", "[", ":", "videoname", ".", "find", "(", "'/'", ")", "]", "]", "\n", "\n", "vid", "=", "videoname", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "vid", "=", "vid", "[", ":", "-", "4", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "# to avoid void folder", "\n", "vids", "=", "vid", ".", "split", "(", "'_'", ")", "\n", "if", "vids", "[", "1", "]", "==", "'HandStandPushups'", ":", "\n", "            ", "vid", "=", "vids", "[", "0", "]", "+", "'_HandstandPushups_'", "+", "vids", "[", "2", "]", "+", "'_'", "+", "vids", "[", "3", "]", "\n", "\n", "", "rgb_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/hmdb51_rgbflow/jpegs_256/'", ",", "vid", ")", "# + v_**", "\n", "u_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/hmdb51_rgbflow/tvl1_flow/u/'", ",", "vid", ")", "\n", "v_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/hmdb51_rgbflow/tvl1_flow/v/'", ",", "vid", ")", "\n", "\n", "filenames", "=", "[", "'frame000001.jpg'", "]", "\n", "for", "parent", ",", "dirnames", ",", "filenames", "in", "os", ".", "walk", "(", "rgb_folder", ")", ":", "\n", "            ", "if", "'n_frames'", "in", "filenames", ":", "\n", "                ", "filenames", ".", "remove", "(", "'n_frames'", ")", "\n", "", "filenames", "=", "sorted", "(", "filenames", ")", "\n", "", "framenames", "=", "filenames", "\n", "length", "=", "len", "(", "framenames", ")", "-", "1", "\n", "\n", "all_clips", "=", "[", "]", "\n", "all_u_clips", "=", "[", "]", "\n", "all_v_clips", "=", "[", "]", "\n", "all_idx", "=", "[", "]", "\n", "for", "i", "in", "np", ".", "linspace", "(", "self", ".", "clip_len", "/", "2", ",", "length", "-", "self", ".", "clip_len", "/", "2", ",", "self", ".", "sample_num", ")", ":", "\n", "            ", "clip_start", "=", "int", "(", "i", "-", "self", ".", "clip_len", "/", "2", ")", "\n", "#clip = videodata[clip_start: clip_start + self.clip_len]", "\n", "clip", "=", "load_one_clip", "(", "rgb_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "u_clip", "=", "load_one_clip", "(", "u_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "v_clip", "=", "load_one_clip", "(", "v_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "if", "self", ".", "transforms_", ":", "\n", "                ", "trans_clip", "=", "[", "]", "\n", "trans_u_clip", "=", "[", "]", "\n", "trans_v_clip", "=", "[", "]", "\n", "# fix seed, apply the sample `random transformation` for all frames in the clip ", "\n", "seed", "=", "random", ".", "random", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "clip", ")", ")", ":", "\n", "                    ", "random", ".", "seed", "(", "seed", ")", "\n", "frame", "=", "self", ".", "toPIL", "(", "clip", "[", "i", "]", ")", "# PIL image", "\n", "frame", "=", "self", ".", "transforms_", "(", "frame", ")", "# tensor [C x H x W]", "\n", "trans_clip", ".", "append", "(", "frame", ")", "\n", "\n", "u_frame", "=", "self", ".", "toPIL", "(", "u_clip", "[", "i", "]", ")", "# PIL image", "\n", "u_frame", "=", "self", ".", "transforms_", "(", "u_frame", ")", "# tensor [C x H x W]", "\n", "trans_u_clip", ".", "append", "(", "u_frame", ")", "\n", "\n", "v_frame", "=", "self", ".", "toPIL", "(", "v_clip", "[", "i", "]", ")", "# PIL image", "\n", "v_frame", "=", "self", ".", "transforms_", "(", "v_frame", ")", "# tensor [C x H x W]", "\n", "trans_v_clip", ".", "append", "(", "v_frame", ")", "\n", "# (T x C X H x W) to (C X T x H x W)", "\n", "", "clip", "=", "torch", ".", "stack", "(", "trans_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "u_clip", "=", "torch", ".", "stack", "(", "trans_u_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "v_clip", "=", "torch", ".", "stack", "(", "trans_v_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "                ", "clip", "=", "torch", ".", "tensor", "(", "clip", ")", "\n", "u_clip", "=", "torch", ".", "tensor", "(", "u_clip", ")", "\n", "v_clip", "=", "torch", ".", "tensor", "(", "v_clip", ")", "\n", "", "all_clips", ".", "append", "(", "clip", ")", "\n", "all_u_clips", ".", "append", "(", "u_clip", ")", "\n", "all_v_clips", ".", "append", "(", "v_clip", ")", "\n", "all_idx", ".", "append", "(", "torch", ".", "tensor", "(", "int", "(", "class_idx", ")", ")", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "all_clips", ")", ",", "torch", ".", "stack", "(", "all_u_clips", ")", ",", "torch", ".", "stack", "(", "all_v_clips", ")", ",", "torch", ".", "stack", "(", "all_idx", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.hmdb51.image_to_np": [[14, 19], ["numpy.empty", "image.copyto", "numpy.transpose"], "function", ["None"], ["def", "image_to_np", "(", "image", ")", ":", "\n", "  ", "image_np", "=", "np", ".", "empty", "(", "[", "image", ".", "channels", ",", "image", ".", "height", ",", "image", ".", "width", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "image", ".", "copyto", "(", "image_np", ")", "\n", "image_np", "=", "np", ".", "transpose", "(", "image_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "return", "image_np", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.hmdb51.readim": [[21, 26], ["accimage.Image", "hmdb51.image_to_np"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.image_to_np"], ["", "def", "readim", "(", "image_name", ")", ":", "\n", "# read image", "\n", "  ", "img_data", "=", "accimage", ".", "Image", "(", "image_name", ")", "\n", "img_data", "=", "image_to_np", "(", "img_data", ")", "# RGB", "\n", "return", "img_data", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.hmdb51.load_from_frames": [[28, 39], ["range", "range", "clip_tuple.append", "os.path.join", "hmdb51.readim", "one_clip.append"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.readim"], ["", "def", "load_from_frames", "(", "foldername", ",", "framenames", ",", "start_index", ",", "tuple_len", ",", "clip_len", ",", "interval", ")", ":", "\n", "  ", "clip_tuple", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "tuple_len", ")", ":", "\n", "      ", "one_clip", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "clip_len", ")", ":", "\n", "          ", "im_name", "=", "os", ".", "path", ".", "join", "(", "foldername", ",", "framenames", "[", "start_index", "+", "i", "*", "(", "tuple_len", "+", "interval", ")", "+", "j", "]", ")", "\n", "im_data", "=", "readim", "(", "im_name", ")", "\n", "one_clip", ".", "append", "(", "im_data", ")", "\n", "#one_clip_arr = np.array(one_clip)", "\n", "", "clip_tuple", ".", "append", "(", "one_clip", ")", "\n", "", "return", "clip_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.hmdb51.load_one_clip": [[41, 49], ["range", "numpy.array", "os.path.join", "hmdb51.readim", "one_clip.append"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.readim"], ["", "def", "load_one_clip", "(", "foldername", ",", "framenames", ",", "start_index", ",", "clip_len", ")", ":", "\n", "    ", "one_clip", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "clip_len", ")", ":", "\n", "        ", "im_name", "=", "os", ".", "path", ".", "join", "(", "foldername", ",", "framenames", "[", "start_index", "+", "i", "]", ")", "\n", "im_data", "=", "readim", "(", "im_name", ")", "\n", "one_clip", ".", "append", "(", "im_data", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "one_clip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.UCF101Dataset.__init__": [[60, 79], ["torchvision.transforms.ToPILImage", "os.path.join", "print", "pandas.read_csv().set_index", "pandas.read_csv().set_index", "os.path.join", "os.path.join", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "clip_len", "=", "16", ",", "split", "=", "'1'", ",", "train", "=", "True", ",", "transforms_", "=", "None", ",", "test_sample_num", "=", "10", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transforms_", "=", "transforms_", "\n", "self", ".", "test_sample_num", "=", "test_sample_num", "\n", "self", ".", "toPIL", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "class_idx_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'classInd.txt'", ")", "\n", "self", ".", "class_idx2label", "=", "pd", ".", "read_csv", "(", "class_idx_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "set_index", "(", "0", ")", "[", "1", "]", "\n", "self", ".", "class_label2idx", "=", "pd", ".", "read_csv", "(", "class_idx_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "set_index", "(", "1", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "train_split_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'trainlist0'", "+", "self", ".", "split", "+", "'.txt'", ")", "#+ '_rgbflow.txt')", "\n", "self", ".", "train_split", "=", "pd", ".", "read_csv", "(", "train_split_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "test_split_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'testlist0'", "+", "self", ".", "split", "+", "'.txt'", ")", "#'_rgbflow.txt')", "\n", "self", ".", "test_split", "=", "pd", ".", "read_csv", "(", "test_split_path", ",", "header", "=", "None", ")", "[", "0", "]", "\n", "", "print", "(", "'Use split'", "+", "self", ".", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.UCF101Dataset.__len__": [[80, 85], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_split", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.UCF101Dataset.__getitem__": [[86, 206], ["vid.split", "os.path.join", "os.path.join", "os.path.join", "os.walk", "videoname.split", "vid[].split", "sorted", "len", "print", "print", "random.randint", "ucf101.load_one_clip", "ucf101.load_one_clip", "ucf101.load_one_clip", "numpy.linspace", "sorted.remove", "random.random", "range", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "int", "ucf101.load_one_clip", "ucf101.load_one_clip", "ucf101.load_one_clip", "all_clips.append", "all_u_clips.append", "all_v_clips.append", "all_idx.append", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "len", "random.seed", "ucf101.UCF101Dataset.toPIL", "ucf101.UCF101Dataset.transforms_", "trans_clip.append", "ucf101.UCF101Dataset.toPIL", "ucf101.UCF101Dataset.transforms_", "trans_u_clip.append", "ucf101.UCF101Dataset.toPIL", "ucf101.UCF101Dataset.transforms_", "trans_v_clip.append", "int", "random.random", "range", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "int", "torch.stack", "torch.stack", "torch.stack", "len", "random.seed", "ucf101.UCF101Dataset.toPIL", "ucf101.UCF101Dataset.transforms_", "trans_clip.append", "ucf101.UCF101Dataset.toPIL", "ucf101.UCF101Dataset.transforms_", "trans_u_clip.append", "ucf101.UCF101Dataset.toPIL", "ucf101.UCF101Dataset.transforms_", "trans_v_clip.append", "int", "videoname.find", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            clip (tensor): [channel x time x height x width]\n            class_idx (tensor): class index, [0-100]\n        \"\"\"", "\n", "if", "self", ".", "train", ":", "\n", "            ", "videoname", "=", "self", ".", "train_split", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "videoname", "=", "self", ".", "test_split", "[", "idx", "]", "\n", "\n", "", "class_idx", "=", "self", ".", "class_label2idx", "[", "videoname", "[", ":", "videoname", ".", "find", "(", "'/'", ")", "]", "]", "-", "1", "# add - 1 because it is range [1,101] which should be [0, 100]", "\n", "\n", "vid", "=", "videoname", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "vid", "=", "vid", "[", ":", "-", "4", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "#'''", "\n", "# to avoid void folder because different names: HandStandPushups vs HandstandPushups", "\n", "vids", "=", "vid", ".", "split", "(", "'_'", ")", "\n", "if", "vids", "[", "1", "]", "==", "'HandStandPushups'", ":", "\n", "            ", "vid", "=", "vids", "[", "0", "]", "+", "'_HandstandPushups_'", "+", "vids", "[", "2", "]", "+", "'_'", "+", "vids", "[", "3", "]", "\n", "#'''", "\n", "\n", "", "rgb_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/ucf101/jpegs_256/'", ",", "vid", ")", "\n", "u_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/ucf101/tvl1_flow/u/'", ",", "vid", ")", "\n", "v_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/ucf101/tvl1_flow/v/'", ",", "vid", ")", "\n", "\n", "filenames", "=", "[", "'frame000001.jpg'", "]", "\n", "for", "parent", ",", "dirnames", ",", "filenames", "in", "os", ".", "walk", "(", "rgb_folder", ")", ":", "\n", "            ", "if", "'n_frames'", "in", "filenames", ":", "\n", "                ", "filenames", ".", "remove", "(", "'n_frames'", ")", "\n", "", "filenames", "=", "sorted", "(", "filenames", ")", "\n", "", "framenames", "=", "filenames", "\n", "length", "=", "len", "(", "framenames", ")", "-", "1", "\n", "if", "length", "<", "16", ":", "\n", "            ", "print", "(", "vid", ",", "length", ")", "\n", "print", "(", "'\\n'", ")", "\n", "raise", "\n", "\n", "# random select a clip for train", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "clip_start", "=", "random", ".", "randint", "(", "0", ",", "length", "-", "self", ".", "clip_len", ")", "\n", "clip", "=", "load_one_clip", "(", "rgb_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "u_clip", "=", "load_one_clip", "(", "u_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "v_clip", "=", "load_one_clip", "(", "v_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "\n", "if", "self", ".", "transforms_", ":", "\n", "                ", "trans_clip", "=", "[", "]", "\n", "trans_u_clip", "=", "[", "]", "\n", "trans_v_clip", "=", "[", "]", "\n", "# fix seed, apply the sample `random transformation` for all frames in the clip ", "\n", "seed", "=", "random", ".", "random", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "clip", ")", ")", ":", "\n", "                    ", "random", ".", "seed", "(", "seed", ")", "\n", "frame", "=", "self", ".", "toPIL", "(", "clip", "[", "i", "]", ")", "# PIL image", "\n", "frame", "=", "self", ".", "transforms_", "(", "frame", ")", "# tensor [C x H x W]", "\n", "trans_clip", ".", "append", "(", "frame", ")", "\n", "\n", "u_frame", "=", "self", ".", "toPIL", "(", "u_clip", "[", "i", "]", ")", "# PIL image", "\n", "u_frame", "=", "self", ".", "transforms_", "(", "u_frame", ")", "# tensor [C x H x W]", "\n", "trans_u_clip", ".", "append", "(", "u_frame", ")", "\n", "\n", "v_frame", "=", "self", ".", "toPIL", "(", "v_clip", "[", "i", "]", ")", "# PIL image", "\n", "v_frame", "=", "self", ".", "transforms_", "(", "v_frame", ")", "# tensor [C x H x W]", "\n", "trans_v_clip", ".", "append", "(", "v_frame", ")", "\n", "\n", "# (T x C X H x W) to (C X T x H x W)", "\n", "", "clip", "=", "torch", ".", "stack", "(", "trans_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "u_clip", "=", "torch", ".", "stack", "(", "trans_u_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "v_clip", "=", "torch", ".", "stack", "(", "trans_v_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "                ", "clip", "=", "torch", ".", "tensor", "(", "clip", ")", "\n", "u_clip", "=", "torch", ".", "tensor", "(", "u_clip", ")", "\n", "v_clip", "=", "torch", ".", "tensor", "(", "v_clip", ")", "\n", "\n", "", "return", "clip", ",", "u_clip", ",", "v_clip", ",", "torch", ".", "tensor", "(", "int", "(", "class_idx", ")", ")", ",", "idx", "\n", "# sample several clips for test", "\n", "", "else", ":", "\n", "            ", "all_clips", "=", "[", "]", "\n", "all_u_clips", "=", "[", "]", "\n", "all_v_clips", "=", "[", "]", "\n", "all_idx", "=", "[", "]", "\n", "for", "i", "in", "np", ".", "linspace", "(", "self", ".", "clip_len", "/", "2", ",", "length", "-", "self", ".", "clip_len", "/", "2", ",", "self", ".", "test_sample_num", ")", ":", "\n", "                ", "clip_start", "=", "int", "(", "i", "-", "self", ".", "clip_len", "/", "2", ")", "\n", "#clip = videodata[clip_start: clip_start + self.clip_len]", "\n", "clip", "=", "load_one_clip", "(", "rgb_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "u_clip", "=", "load_one_clip", "(", "u_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "v_clip", "=", "load_one_clip", "(", "v_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "if", "self", ".", "transforms_", ":", "\n", "                    ", "trans_clip", "=", "[", "]", "\n", "trans_u_clip", "=", "[", "]", "\n", "trans_v_clip", "=", "[", "]", "\n", "# fix seed, apply the sample `random transformation` for all frames in the clip ", "\n", "seed", "=", "random", ".", "random", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "clip", ")", ")", ":", "\n", "                        ", "random", ".", "seed", "(", "seed", ")", "\n", "frame", "=", "self", ".", "toPIL", "(", "clip", "[", "i", "]", ")", "# PIL image", "\n", "frame", "=", "self", ".", "transforms_", "(", "frame", ")", "# tensor [C x H x W]", "\n", "trans_clip", ".", "append", "(", "frame", ")", "\n", "\n", "u_frame", "=", "self", ".", "toPIL", "(", "u_clip", "[", "i", "]", ")", "# PIL image", "\n", "u_frame", "=", "self", ".", "transforms_", "(", "u_frame", ")", "# tensor [C x H x W]", "\n", "trans_u_clip", ".", "append", "(", "u_frame", ")", "\n", "\n", "v_frame", "=", "self", ".", "toPIL", "(", "v_clip", "[", "i", "]", ")", "# PIL image", "\n", "v_frame", "=", "self", ".", "transforms_", "(", "v_frame", ")", "# tensor [C x H x W]", "\n", "trans_v_clip", ".", "append", "(", "v_frame", ")", "\n", "# (T x C X H x W) to (C X T x H x W)", "\n", "", "clip", "=", "torch", ".", "stack", "(", "trans_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "u_clip", "=", "torch", ".", "stack", "(", "trans_u_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "v_clip", "=", "torch", ".", "stack", "(", "trans_v_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "                    ", "clip", "=", "torch", ".", "tensor", "(", "clip", ")", "\n", "u_clip", "=", "torch", ".", "tensor", "(", "u_clip", ")", "\n", "v_clip", "=", "torch", ".", "tensor", "(", "v_clip", ")", "\n", "", "all_clips", ".", "append", "(", "clip", ")", "\n", "all_u_clips", ".", "append", "(", "u_clip", ")", "\n", "all_v_clips", ".", "append", "(", "v_clip", ")", "\n", "all_idx", ".", "append", "(", "torch", ".", "tensor", "(", "int", "(", "class_idx", ")", ")", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "all_clips", ")", ",", "torch", ".", "stack", "(", "all_u_clips", ")", ",", "torch", ".", "stack", "(", "all_v_clips", ")", ",", "torch", ".", "tensor", "(", "int", "(", "class_idx", ")", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.UCF101ClipRetrievalDataset.__init__": [[218, 236], ["torchvision.transforms.ToPILImage", "os.path.join", "pandas.read_csv().set_index", "pandas.read_csv().set_index", "os.path.join", "os.path.join", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "clip_len", ",", "sample_num", ",", "train", "=", "True", ",", "transforms_", "=", "None", ",", "split", "=", "'1'", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "sample_num", "=", "sample_num", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transforms_", "=", "transforms_", "\n", "self", ".", "toPIL", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "class_idx_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'classInd.txt'", ")", "\n", "self", ".", "class_idx2label", "=", "pd", ".", "read_csv", "(", "class_idx_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "set_index", "(", "0", ")", "[", "1", "]", "\n", "self", ".", "class_label2idx", "=", "pd", ".", "read_csv", "(", "class_idx_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "set_index", "(", "1", ")", "[", "0", "]", "\n", "self", ".", "split", "=", "split", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "train_split_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'trainlist0'", "+", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "train_split", "=", "pd", ".", "read_csv", "(", "train_split_path", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "test_split_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'split'", ",", "'testlist0'", "+", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "test_split", "=", "pd", ".", "read_csv", "(", "test_split_path", ",", "header", "=", "None", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.UCF101ClipRetrievalDataset.__len__": [[237, 242], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_split", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.UCF101ClipRetrievalDataset.__getitem__": [[243, 317], ["vid.split", "os.path.join", "os.path.join", "os.path.join", "os.walk", "numpy.linspace", "videoname.split", "vid[].split", "sorted", "len", "int", "ucf101.load_one_clip", "ucf101.load_one_clip", "ucf101.load_one_clip", "all_clips.append", "all_u_clips.append", "all_v_clips.append", "all_idx.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "sorted.remove", "random.random", "range", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "random.seed", "ucf101.UCF101ClipRetrievalDataset.toPIL", "ucf101.UCF101ClipRetrievalDataset.transforms_", "trans_clip.append", "ucf101.UCF101ClipRetrievalDataset.toPIL", "ucf101.UCF101ClipRetrievalDataset.transforms_", "trans_u_clip.append", "ucf101.UCF101ClipRetrievalDataset.toPIL", "ucf101.UCF101ClipRetrievalDataset.transforms_", "trans_v_clip.append", "int", "videoname.find", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip", "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            clip (tensor): [channel x time x height x width]\n            class_idx (tensor): class index [0-100]\n        \"\"\"", "\n", "if", "self", ".", "train", ":", "\n", "            ", "videoname", "=", "self", ".", "train_split", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "videoname", "=", "self", ".", "test_split", "[", "idx", "]", "\n", "", "class_idx", "=", "self", ".", "class_label2idx", "[", "videoname", "[", ":", "videoname", ".", "find", "(", "'/'", ")", "]", "]", "\n", "\n", "vid", "=", "videoname", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "vid", "=", "vid", "[", ":", "-", "4", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "# to avoid void folder", "\n", "vids", "=", "vid", ".", "split", "(", "'_'", ")", "\n", "if", "vids", "[", "1", "]", "==", "'HandStandPushups'", ":", "\n", "            ", "vid", "=", "vids", "[", "0", "]", "+", "'_HandstandPushups_'", "+", "vids", "[", "2", "]", "+", "'_'", "+", "vids", "[", "3", "]", "\n", "\n", "", "rgb_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/ucf101/jpegs_256/'", ",", "vid", ")", "# + v_**", "\n", "u_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/ucf101/tvl1_flow/u/'", ",", "vid", ")", "\n", "v_folder", "=", "os", ".", "path", ".", "join", "(", "'/work/taoli/ucf101/tvl1_flow/v/'", ",", "vid", ")", "\n", "\n", "filenames", "=", "[", "'frame000001.jpg'", "]", "\n", "for", "parent", ",", "dirnames", ",", "filenames", "in", "os", ".", "walk", "(", "rgb_folder", ")", ":", "\n", "            ", "if", "'n_frames'", "in", "filenames", ":", "\n", "                ", "filenames", ".", "remove", "(", "'n_frames'", ")", "\n", "", "filenames", "=", "sorted", "(", "filenames", ")", "\n", "", "framenames", "=", "filenames", "\n", "length", "=", "len", "(", "framenames", ")", "-", "1", "\n", "\n", "all_clips", "=", "[", "]", "\n", "all_u_clips", "=", "[", "]", "\n", "all_v_clips", "=", "[", "]", "\n", "all_idx", "=", "[", "]", "\n", "for", "i", "in", "np", ".", "linspace", "(", "self", ".", "clip_len", "/", "2", ",", "length", "-", "self", ".", "clip_len", "/", "2", ",", "self", ".", "sample_num", ")", ":", "\n", "            ", "clip_start", "=", "int", "(", "i", "-", "self", ".", "clip_len", "/", "2", ")", "\n", "#clip = videodata[clip_start: clip_start + self.clip_len]", "\n", "clip", "=", "load_one_clip", "(", "rgb_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "u_clip", "=", "load_one_clip", "(", "u_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "v_clip", "=", "load_one_clip", "(", "v_folder", ",", "framenames", ",", "clip_start", ",", "self", ".", "clip_len", ")", "\n", "if", "self", ".", "transforms_", ":", "\n", "                ", "trans_clip", "=", "[", "]", "\n", "trans_u_clip", "=", "[", "]", "\n", "trans_v_clip", "=", "[", "]", "\n", "# fix seed, apply the sample `random transformation` for all frames in the clip ", "\n", "seed", "=", "random", ".", "random", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "clip", ")", ")", ":", "\n", "                    ", "random", ".", "seed", "(", "seed", ")", "\n", "frame", "=", "self", ".", "toPIL", "(", "clip", "[", "i", "]", ")", "# PIL image", "\n", "frame", "=", "self", ".", "transforms_", "(", "frame", ")", "# tensor [C x H x W]", "\n", "trans_clip", ".", "append", "(", "frame", ")", "\n", "\n", "u_frame", "=", "self", ".", "toPIL", "(", "u_clip", "[", "i", "]", ")", "# PIL image", "\n", "u_frame", "=", "self", ".", "transforms_", "(", "u_frame", ")", "# tensor [C x H x W]", "\n", "trans_u_clip", ".", "append", "(", "u_frame", ")", "\n", "\n", "v_frame", "=", "self", ".", "toPIL", "(", "v_clip", "[", "i", "]", ")", "# PIL image", "\n", "v_frame", "=", "self", ".", "transforms_", "(", "v_frame", ")", "# tensor [C x H x W]", "\n", "trans_v_clip", ".", "append", "(", "v_frame", ")", "\n", "# (T x C X H x W) to (C X T x H x W)", "\n", "", "clip", "=", "torch", ".", "stack", "(", "trans_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "u_clip", "=", "torch", ".", "stack", "(", "trans_u_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "v_clip", "=", "torch", ".", "stack", "(", "trans_v_clip", ")", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "                ", "clip", "=", "torch", ".", "tensor", "(", "clip", ")", "\n", "u_clip", "=", "torch", ".", "tensor", "(", "u_clip", ")", "\n", "v_clip", "=", "torch", ".", "tensor", "(", "v_clip", ")", "\n", "", "all_clips", ".", "append", "(", "clip", ")", "\n", "all_u_clips", ".", "append", "(", "u_clip", ")", "\n", "all_v_clips", ".", "append", "(", "v_clip", ")", "\n", "all_idx", ".", "append", "(", "torch", ".", "tensor", "(", "int", "(", "class_idx", ")", ")", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "all_clips", ")", ",", "torch", ".", "stack", "(", "all_u_clips", ")", ",", "torch", ".", "stack", "(", "all_v_clips", ")", ",", "torch", ".", "stack", "(", "all_idx", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.image_to_np": [[14, 19], ["numpy.empty", "image.copyto", "numpy.transpose"], "function", ["None"], ["def", "image_to_np", "(", "image", ")", ":", "\n", "  ", "image_np", "=", "np", ".", "empty", "(", "[", "image", ".", "channels", ",", "image", ".", "height", ",", "image", ".", "width", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "image", ".", "copyto", "(", "image_np", ")", "\n", "image_np", "=", "np", ".", "transpose", "(", "image_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "return", "image_np", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.readim": [[21, 26], ["accimage.Image", "ucf101.image_to_np"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.image_to_np"], ["", "def", "readim", "(", "image_name", ")", ":", "\n", "# read image", "\n", "  ", "img_data", "=", "accimage", ".", "Image", "(", "image_name", ")", "\n", "img_data", "=", "image_to_np", "(", "img_data", ")", "# RGB", "\n", "return", "img_data", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_from_frames": [[28, 39], ["range", "range", "clip_tuple.append", "os.path.join", "ucf101.readim", "one_clip.append"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.readim"], ["", "def", "load_from_frames", "(", "foldername", ",", "framenames", ",", "start_index", ",", "tuple_len", ",", "clip_len", ",", "interval", ")", ":", "\n", "  ", "clip_tuple", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "tuple_len", ")", ":", "\n", "      ", "one_clip", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "clip_len", ")", ":", "\n", "          ", "im_name", "=", "os", ".", "path", ".", "join", "(", "foldername", ",", "framenames", "[", "start_index", "+", "i", "*", "(", "tuple_len", "+", "interval", ")", "+", "j", "]", ")", "\n", "im_data", "=", "readim", "(", "im_name", ")", "\n", "one_clip", ".", "append", "(", "im_data", ")", "\n", "#one_clip_arr = np.array(one_clip)", "\n", "", "clip_tuple", ".", "append", "(", "one_clip", ")", "\n", "", "return", "clip_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.load_one_clip": [[41, 49], ["range", "numpy.array", "os.path.join", "ucf101.readim", "one_clip.append"], "function", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.datasets.ucf101.readim"], ["", "def", "load_one_clip", "(", "foldername", ",", "framenames", ",", "start_index", ",", "clip_len", ")", ":", "\n", "    ", "one_clip", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "clip_len", ")", ":", "\n", "        ", "im_name", "=", "os", ".", "path", ".", "join", "(", "foldername", ",", "framenames", "[", "start_index", "+", "i", "]", ")", "\n", "im_data", "=", "readim", "(", "im_name", ")", "\n", "one_clip", ".", "append", "(", "im_data", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "one_clip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r21d.SpatioTemporalConv.__init__": [[23, 63], ["torch.Module.__init__", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "int", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "math.floor"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "first_conv", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# if ints are entered, convert them to iterables, 1 -> [1, 1, 1]", "\n", "kernel_size", "=", "_triple", "(", "kernel_size", ")", "\n", "stride", "=", "_triple", "(", "stride", ")", "\n", "padding", "=", "_triple", "(", "padding", ")", "\n", "\n", "# decomposing the parameters into spatial and temporal components by", "\n", "# masking out the values with the defaults on the axis that", "\n", "# won't be convolved over. This is necessary to avoid unintentional", "\n", "# behavior such as padding being added twice", "\n", "spatial_kernel_size", "=", "(", "1", ",", "kernel_size", "[", "1", "]", ",", "kernel_size", "[", "2", "]", ")", "\n", "spatial_stride", "=", "(", "1", ",", "stride", "[", "1", "]", ",", "stride", "[", "2", "]", ")", "\n", "spatial_padding", "=", "(", "0", ",", "padding", "[", "1", "]", ",", "padding", "[", "2", "]", ")", "\n", "\n", "temporal_kernel_size", "=", "(", "kernel_size", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "temporal_stride", "=", "(", "stride", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "temporal_padding", "=", "(", "padding", "[", "0", "]", ",", "0", ",", "0", ")", "\n", "\n", "# compute the number of intermediary channels (M) using formula", "\n", "# from the paper section 3.5", "\n", "intermed_channels", "=", "int", "(", "math", ".", "floor", "(", "(", "kernel_size", "[", "0", "]", "*", "kernel_size", "[", "1", "]", "*", "kernel_size", "[", "2", "]", "*", "in_channels", "*", "out_channels", ")", "/", "(", "kernel_size", "[", "1", "]", "*", "kernel_size", "[", "2", "]", "*", "in_channels", "+", "kernel_size", "[", "0", "]", "*", "out_channels", ")", ")", ")", "\n", "# print(intermed_channels)", "\n", "\n", "# the spatial conv is effectively a 2D conv due to the", "\n", "# spatial_kernel_size, followed by batch_norm and ReLU", "\n", "self", ".", "spatial_conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "intermed_channels", ",", "spatial_kernel_size", ",", "\n", "stride", "=", "spatial_stride", ",", "padding", "=", "spatial_padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "intermed_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# the temporal conv is effectively a 1D conv, but has batch norm", "\n", "# and ReLU added inside the model constructor, not here. This is an", "\n", "# intentional design choice, to allow this module to externally act", "\n", "# identical to a standard Conv3D, so it can be reused easily in any", "\n", "# other codebase", "\n", "self", ".", "temporal_conv", "=", "nn", ".", "Conv3d", "(", "intermed_channels", ",", "out_channels", ",", "temporal_kernel_size", ",", "\n", "stride", "=", "temporal_stride", ",", "padding", "=", "temporal_padding", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r21d.SpatioTemporalConv.forward": [[64, 68], ["r21d.SpatioTemporalConv.relu", "r21d.SpatioTemporalConv.temporal_conv", "r21d.SpatioTemporalConv.bn", "r21d.SpatioTemporalConv.spatial_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "spatial_conv", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "temporal_conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r21d.SpatioTemporalResBlock.__init__": [[80, 110], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r21d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r21d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "r21d.SpatioTemporalConv", "r21d.SpatioTemporalConv"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# If downsample == True, the first conv of the layer has stride = 2", "\n", "# to halve the residual output size, and the input x is passed", "\n", "# through a seperate 1x1x1 conv with stride = 2 to also halve it.", "\n", "\n", "# no pooling layers are used inside ResNet", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "# to allow for SAME padding", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "# downsample with stride =2 the input x", "\n", "            ", "self", ".", "downsampleconv", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "downsamplebn", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "\n", "# downsample with stride = 2 when producing the residual", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# standard conv->batchnorm->ReLU", "\n", "self", ".", "conv2", "=", "SpatioTemporalConv", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "outrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r21d.SpatioTemporalResBlock.forward": [[111, 119], ["r21d.SpatioTemporalResBlock.relu1", "r21d.SpatioTemporalResBlock.bn2", "r21d.SpatioTemporalResBlock.outrelu", "r21d.SpatioTemporalResBlock.bn1", "r21d.SpatioTemporalResBlock.conv2", "r21d.SpatioTemporalResBlock.downsamplebn", "r21d.SpatioTemporalResBlock.conv1", "r21d.SpatioTemporalResBlock.downsampleconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "res", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "res", ")", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "downsamplebn", "(", "self", ".", "downsampleconv", "(", "x", ")", ")", "\n", "\n", "", "return", "self", ".", "outrelu", "(", "x", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r21d.SpatioTemporalResLayer.__init__": [[133, 146], ["torch.Module.__init__", "block_type", "torch.ModuleList", "torch.ModuleList", "range", "block_type"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "layer_size", ",", "block_type", "=", "SpatioTemporalResBlock", ",", "\n", "downsample", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "SpatioTemporalResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# implement the first block", "\n", "self", ".", "block1", "=", "block_type", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", ")", "\n", "\n", "# prepare module list to hold all (layer_size - 1) blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "layer_size", "-", "1", ")", ":", "\n", "# all these blocks are identical, and have downsample = False by default", "\n", "            ", "self", ".", "blocks", "+=", "[", "block_type", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r21d.SpatioTemporalResLayer.forward": [[147, 153], ["r21d.SpatioTemporalResLayer.block1", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r21d.R2Plus1DNet.__init__": [[164, 191], ["torch.Module.__init__", "r21d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r21d.SpatioTemporalResLayer", "r21d.SpatioTemporalResLayer", "r21d.SpatioTemporalResLayer", "r21d.SpatioTemporalResLayer", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["def", "__init__", "(", "self", ",", "layer_sizes", ",", "block_type", "=", "SpatioTemporalResBlock", ",", "with_classifier", "=", "False", ",", "return_conv", "=", "False", ",", "num_classes", "=", "101", ")", ":", "\n", "        ", "super", "(", "R2Plus1DNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_classifier", "=", "with_classifier", "\n", "self", ".", "return_conv", "=", "return_conv", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "# first conv, with stride 1x2x2 and kernel size 1x7x7", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "3", ",", "64", ",", "(", "3", ",", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "3", ",", "3", ")", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "# output of conv2 is same size as of conv1, no downsampling needed. kernel_size 3x3x3", "\n", "self", ".", "conv2", "=", "SpatioTemporalResLayer", "(", "64", ",", "64", ",", "3", ",", "layer_sizes", "[", "0", "]", ",", "block_type", "=", "block_type", ")", "\n", "# each of the final three layers doubles num_channels, while performing downsampling", "\n", "# inside the first block", "\n", "self", ".", "conv3", "=", "SpatioTemporalResLayer", "(", "64", ",", "128", ",", "3", ",", "layer_sizes", "[", "1", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv4", "=", "SpatioTemporalResLayer", "(", "128", ",", "256", ",", "3", ",", "layer_sizes", "[", "2", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv5", "=", "SpatioTemporalResLayer", "(", "256", ",", "512", ",", "3", ",", "layer_sizes", "[", "3", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "\n", "if", "self", ".", "return_conv", ":", "\n", "            ", "self", ".", "feature_pool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "# 9216", "\n", "# self.feature_pool = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2)) 4182", "\n", "\n", "# global average pooling of the output", "\n", "", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "\n", "if", "self", ".", "with_classifier", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r21d.R2Plus1DNet.forward": [[192, 211], ["r21d.R2Plus1DNet.relu1", "r21d.R2Plus1DNet.conv2", "r21d.R2Plus1DNet.conv3", "r21d.R2Plus1DNet.conv4", "r21d.R2Plus1DNet.conv5", "r21d.R2Plus1DNet.pool", "r21d.R2Plus1DNet.view", "r21d.R2Plus1DNet.bn1", "r21d.R2Plus1DNet.feature_pool", "r21d.R2Plus1DNet.view", "r21d.R2Plus1DNet.linear", "r21d.R2Plus1DNet.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "\n", "if", "self", ".", "return_conv", ":", "\n", "            ", "x", "=", "self", ".", "feature_pool", "(", "x", ")", "\n", "# print(x.shape)", "\n", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "\n", "if", "self", ".", "with_classifier", ":", "\n", "            ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r3d.SpatioTemporalConv.__init__": [[24, 35], ["torch.Module.__init__", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# if ints are entered, convert them to iterables, 1 -> [1, 1, 1]", "\n", "kernel_size", "=", "_triple", "(", "kernel_size", ")", "\n", "stride", "=", "_triple", "(", "stride", ")", "\n", "padding", "=", "_triple", "(", "padding", ")", "\n", "\n", "\n", "self", ".", "temporal_spatial_conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r3d.SpatioTemporalConv.forward": [[36, 39], ["r3d.SpatioTemporalConv.temporal_spatial_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "temporal_spatial_conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r3d.SpatioTemporalResBlock.__init__": [[51, 81], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r3d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r3d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "r3d.SpatioTemporalConv", "r3d.SpatioTemporalConv"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# If downsample == True, the first conv of the layer has stride = 2", "\n", "# to halve the residual output size, and the input x is passed", "\n", "# through a seperate 1x1x1 conv with stride = 2 to also halve it.", "\n", "\n", "# no pooling layers are used inside ResNet", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "# to allow for SAME padding", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "# downsample with stride = 2 the input x", "\n", "            ", "self", ".", "downsampleconv", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "downsamplebn", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "\n", "# downsample with stride = 2 when producing the residual", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# standard conv->batchnorm->ReLU", "\n", "self", ".", "conv2", "=", "SpatioTemporalConv", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "outrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r3d.SpatioTemporalResBlock.forward": [[82, 90], ["r3d.SpatioTemporalResBlock.relu1", "r3d.SpatioTemporalResBlock.bn2", "r3d.SpatioTemporalResBlock.outrelu", "r3d.SpatioTemporalResBlock.bn1", "r3d.SpatioTemporalResBlock.conv2", "r3d.SpatioTemporalResBlock.downsamplebn", "r3d.SpatioTemporalResBlock.conv1", "r3d.SpatioTemporalResBlock.downsampleconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "res", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "res", ")", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "downsamplebn", "(", "self", ".", "downsampleconv", "(", "x", ")", ")", "\n", "\n", "", "return", "self", ".", "outrelu", "(", "x", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r3d.SpatioTemporalResLayer.__init__": [[104, 117], ["torch.Module.__init__", "block_type", "torch.ModuleList", "torch.ModuleList", "range", "block_type"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "layer_size", ",", "block_type", "=", "SpatioTemporalResBlock", ",", "\n", "downsample", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "SpatioTemporalResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# implement the first block", "\n", "self", ".", "block1", "=", "block_type", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", ")", "\n", "\n", "# prepare module list to hold all (layer_size - 1) blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "layer_size", "-", "1", ")", ":", "\n", "# all these blocks are identical, and have downsample = False by default", "\n", "            ", "self", ".", "blocks", "+=", "[", "block_type", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r3d.SpatioTemporalResLayer.forward": [[118, 124], ["r3d.SpatioTemporalResLayer.block1", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r3d.R3DNet.__init__": [[135, 167], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r3d.SpatioTemporalResLayer", "r3d.SpatioTemporalResLayer", "r3d.SpatioTemporalResLayer", "r3d.SpatioTemporalResLayer", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "r3d.SpatioTemporalConv", "print", "r3d.SpatioTemporalConv", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["def", "__init__", "(", "self", ",", "layer_sizes", ",", "block_type", "=", "SpatioTemporalResBlock", ",", "with_classifier", "=", "False", ",", "return_conv", "=", "False", ",", "num_classes", "=", "101", ",", "modality", "=", "'rgb'", ")", ":", "\n", "        ", "super", "(", "R3DNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_classifier", "=", "with_classifier", "\n", "self", ".", "return_conv", "=", "return_conv", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "# first conv, with stride 1x2x2 and kernel size 3x7x7", "\n", "if", "modality", "==", "'uv'", ":", "\n", "            ", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "2", ",", "64", ",", "[", "3", ",", "7", ",", "7", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "[", "1", ",", "3", ",", "3", "]", ")", "\n", "print", "(", "'[Warning]: using optical flow 3D models'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "3", ",", "64", ",", "[", "3", ",", "7", ",", "7", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "[", "1", ",", "3", ",", "3", "]", ")", "\n", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "# output of conv2 is same size as of conv1, no downsampling needed. kernel_size 3x3x3", "\n", "self", ".", "conv2", "=", "SpatioTemporalResLayer", "(", "64", ",", "64", ",", "3", ",", "layer_sizes", "[", "0", "]", ",", "block_type", "=", "block_type", ")", "\n", "# each of the final three layers doubles num_channels, while performing downsampling", "\n", "# inside the first block", "\n", "self", ".", "conv3", "=", "SpatioTemporalResLayer", "(", "64", ",", "128", ",", "3", ",", "layer_sizes", "[", "1", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv4", "=", "SpatioTemporalResLayer", "(", "128", ",", "256", ",", "3", ",", "layer_sizes", "[", "2", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv5", "=", "SpatioTemporalResLayer", "(", "256", ",", "512", ",", "3", ",", "layer_sizes", "[", "3", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "\n", "if", "self", ".", "return_conv", ":", "\n", "            ", "self", ".", "feature_pool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "# 9216", "\n", "# self.feature_pool = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2)) 4182", "\n", "\n", "# global average pooling of the output", "\n", "", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "\n", "if", "self", ".", "with_classifier", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.r3d.R3DNet.forward": [[169, 188], ["r3d.R3DNet.relu1", "r3d.R3DNet.conv2", "r3d.R3DNet.conv3", "r3d.R3DNet.conv4", "r3d.R3DNet.conv5", "r3d.R3DNet.pool", "r3d.R3DNet.view", "r3d.R3DNet.bn1", "r3d.R3DNet.feature_pool", "r3d.R3DNet.view", "r3d.R3DNet.linear", "r3d.R3DNet.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "\n", "if", "self", ".", "return_conv", ":", "\n", "            ", "x", "=", "self", ".", "feature_pool", "(", "x", ")", "\n", "# print(x.shape)", "\n", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "\n", "if", "self", ".", "with_classifier", ":", "\n", "            ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__": [[12, 59], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.__init__"], ["def", "__init__", "(", "self", ",", "with_classifier", "=", "False", ",", "return_conv", "=", "False", ",", "num_classes", "=", "101", ")", ":", "\n", "        ", "super", "(", "C3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_classifier", "=", "with_classifier", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "return_conv", "=", "return_conv", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv3a", "=", "nn", ".", "Conv3d", "(", "128", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn3a", "=", "nn", ".", "BatchNorm3d", "(", "256", ")", "\n", "self", ".", "relu3a", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv3b", "=", "nn", ".", "Conv3d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn3b", "=", "nn", ".", "BatchNorm3d", "(", "256", ")", "\n", "self", ".", "relu3b", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv4a", "=", "nn", ".", "Conv3d", "(", "256", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn4a", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu4a", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv4b", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn4b", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu4b", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv5a", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn5a", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu5a", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv5b", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn5b", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu5b", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "if", "self", ".", "return_conv", ":", "\n", "            ", "self", ".", "feature_pool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "# 9216", "\n", "# self.feature_pool = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2)) 4182", "\n", "\n", "", "self", ".", "pool5", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "\n", "if", "self", ".", "with_classifier", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BestJuly_Inter-intra-video-contrastive-learning.models.c3d.C3D.forward": [[60, 106], ["c3d.C3D.conv1", "c3d.C3D.bn1", "c3d.C3D.relu1", "c3d.C3D.pool1", "c3d.C3D.conv2", "c3d.C3D.bn2", "c3d.C3D.relu2", "c3d.C3D.pool2", "c3d.C3D.conv3a", "c3d.C3D.bn3a", "c3d.C3D.relu3a", "c3d.C3D.conv3b", "c3d.C3D.bn3b", "c3d.C3D.relu3b", "c3d.C3D.pool3", "c3d.C3D.conv4a", "c3d.C3D.bn4a", "c3d.C3D.relu4a", "c3d.C3D.conv4b", "c3d.C3D.bn4b", "c3d.C3D.relu4b", "c3d.C3D.pool4", "c3d.C3D.conv5a", "c3d.C3D.bn5a", "c3d.C3D.relu5a", "c3d.C3D.conv5b", "c3d.C3D.bn5b", "c3d.C3D.relu5b", "c3d.C3D.pool5", "c3d.C3D.view", "c3d.C3D.feature_pool", "c3d.C3D.view", "c3d.C3D.linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "pool2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3a", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3a", "(", "x", ")", "\n", "x", "=", "self", ".", "relu3a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3b", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3b", "(", "x", ")", "\n", "x", "=", "self", ".", "relu3b", "(", "x", ")", "\n", "x", "=", "self", ".", "pool3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4a", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4a", "(", "x", ")", "\n", "x", "=", "self", ".", "relu4a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4b", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4b", "(", "x", ")", "\n", "x", "=", "self", ".", "relu4b", "(", "x", ")", "\n", "x", "=", "self", ".", "pool4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5a", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5a", "(", "x", ")", "\n", "x", "=", "self", ".", "relu5a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5b", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5b", "(", "x", ")", "\n", "x", "=", "self", ".", "relu5b", "(", "x", ")", "\n", "\n", "if", "self", ".", "return_conv", ":", "\n", "            ", "x", "=", "self", ".", "feature_pool", "(", "x", ")", "\n", "# print(x.shape)", "\n", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "pool5", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "\n", "if", "self", ".", "with_classifier", ":", "\n", "            ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]]}