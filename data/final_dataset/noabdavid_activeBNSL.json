{"home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.activeBNSL.activeBNSL": [[9, 135], ["utils.generateId", "print", "open", "open.close", "open", "open.write", "utils.loadNetwork", "node_names.copy", "set", "math.ceil", "open.write", "pandas.DataFrame", "utils.computeNumberOfFamilies", "open.write", "sample_size.sample_size", "open.write", "families.compute_scores", "utils.runGOBNILP", "families.bn_file_to_family_set", "families.bn_file_to_family_set.union", "open.write", "open.close", "math.log2", "print", "sample_size.support", "open.write", "print", "sample_size.sample_size", "print", "pandas.concat", "open.write", "print", "families.compute_scores", "len", "pandas.concat", "min", "sum", "len", "len", "min", "utils.runEBNSL", "print", "print", "open.write", "families.families_intersection", "open.write", "open.write", "len", "open.write", "open.close", "str", "list", "str", "str", "families.sample_subsets", "len", "Accept.union.union", "open.write", "open.write", "bool", "sum", "str", "str", "families.sample_subsets", "sorted", "str", "str", "str", "random.choice", "activeBNSL.updateConstraintFile", "candidates.remove", "Accept.union.add", "open.write", "print", "print", "node_names.copy.remove", "open.write", "str", "list", "max", "list", "str", "str", "str", "str", "tuple", "sum", "str", "str", "str", "str", "str", "str", "str", "list", "str", "str", "str", "sorted", "list"], "function", ["home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.generateId", "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.loadNetwork", "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.computeNumberOfFamilies", "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.runGOBNILP", "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.runEBNSL", "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.activeBNSL.updateConstraintFile"], ["def", "activeBNSL", "(", "d", ",", "k", ",", "epsilon", ",", "delta", ",", "prob_name", ",", "penalty", "=", "False", ",", "Ma", "=", "None", ",", "Mb", "=", "None", ")", ":", "\n", "    ", "\"\"\" \n Parameters\n        ----------\n        d           : int\n                      number of nodes\n        k           : int\n                      maximal in-degree\n        epsilon     : float\n                      accuracy level\n        delta       : float\n                      confidence level\n        prob_name   : str\n                      name of Bayesian network as saved in BIF folder\n        penalty     : bool, optional\n                      True to include the penalty term in the score computation\n        Ma          : int, optional\n                      maximal support among nodes. If not given, this would be computed.\n        Mb          : int, optional\n                      maximal support among subsets of size k. If not given, this would be computed.\n\"\"\"", "\n", "id", "=", "utils", ".", "generateId", "(", ")", "# this id is used for all the files of a specific run", "\n", "score_path", "=", "'./eBNSL/scores/'", "+", "prob_name", "+", "id", "\n", "network_path", "=", "'./eBNSL/networks/'", "+", "prob_name", "+", "id", "\n", "constraints_path", "=", "'./eBNSL/constraints/constraints'", "+", "prob_name", "+", "id", "\n", "\n", "# create constraints file", "\n", "print", "(", "'creating constraint file...'", ")", "\n", "c", "=", "open", "(", "constraints_path", ",", "'w+'", ")", "\n", "c", ".", "close", "(", ")", "\n", "# create log file", "\n", "log", "=", "open", "(", "'log'", "+", "id", ",", "'w+'", ")", "\n", "log", ".", "write", "(", "'epsilon = '", "+", "str", "(", "epsilon", ")", "+", "'\\nr = '", "+", "str", "(", "d", "/", "epsilon", ")", "+", "'\\n'", ")", "\n", "\n", "\n", "model", ",", "node_names", ",", "states", "=", "utils", ".", "loadNetwork", "(", "prob_name", ")", "\n", "active_vars", "=", "node_names", ".", "copy", "(", ")", "\n", "Accept", "=", "set", "(", ")", "\n", "N_curr", "=", "0", "\n", "t", "=", "1", "\n", "epsilon_t", "=", "epsilon", "\n", "T", "=", "math", ".", "ceil", "(", "math", ".", "log2", "(", "2", "*", "d", ")", ")", "\n", "log", ".", "write", "(", "'Number of rounds T = '", "+", "str", "(", "T", ")", "+", "'\\n'", ")", "\n", "counts", "=", "pd", ".", "DataFrame", "(", "columns", "=", "node_names", "+", "[", "'count'", "]", ")", "\n", "num_families", "=", "utils", ".", "computeNumberOfFamilies", "(", "d", ",", "k", ")", "\n", "\n", "if", "Ma", "==", "None", "or", "Mb", "==", "None", ":", "\n", "        ", "print", "(", "'Computing support..'", ")", "\n", "Ma", ",", "Mb", "=", "sample_size", ".", "support", "(", "states", ",", "k", ")", "\n", "\n", "\n", "", "delta_tag", "=", "delta", "/", "(", "T", "*", "num_families", ")", "\n", "\n", "while", "epsilon_t", ">", "(", "epsilon", "/", "len", "(", "active_vars", ")", ")", ":", "\n", "\n", "        ", "log", ".", "write", "(", "'Accuracy level in round '", "+", "str", "(", "t", ")", "+", "': '", "+", "str", "(", "epsilon_t", ")", "+", "'\\n'", ")", "\n", "print", "(", "'Computing sample size..'", ")", "\n", "N_next", "=", "sample_size", ".", "sample_size", "(", "epsilon_t", "/", "2", ",", "delta_tag", ",", "Ma", ",", "Mb", ")", "\n", "\n", "\n", "print", "(", "'Sampling data..'", ")", "\n", "counts", "=", "pd", ".", "concat", "(", "[", "counts", ",", "families", ".", "sample_subsets", "(", "k", ",", "model", ",", "states", ",", "N_next", "-", "N_curr", ",", "active_vars", ")", "]", ")", "\n", "log", ".", "write", "(", "'Number of samples taken per family in round '", "+", "str", "(", "t", ")", "+", "' : '", "+", "str", "(", "N_next", "-", "N_curr", ")", "+", "'\\n'", ")", "\n", "N_curr", "=", "N_next", "\n", "\n", "print", "(", "'Computing scores...'", ")", "\n", "families", ".", "compute_scores", "(", "d", ",", "active_vars", ",", "k", ",", "counts", ",", "min", "(", "1", ",", "t", "-", "1", ")", ",", "score_path", ",", "penalty", ")", "\n", "\n", "family_accepted", "=", "True", "\n", "\n", "while", "family_accepted", ":", "\n", "            ", "theta", "=", "len", "(", "active_vars", ")", "*", "epsilon_t", "\n", "\n", "# run eBNSL with scores file saved in file_path to collect networks within a factor of theta", "\n", "utils", ".", "runEBNSL", "(", "prob_name", ",", "theta", ",", "k", ",", "id", ")", "\n", "print", "(", "'Gap = '", "+", "str", "(", "theta", ")", ")", "\n", "print", "(", "(", "'./run_score.sh '", "+", "prob_name", "+", "' '", "+", "'{:.10f}'", ".", "format", "(", "theta", ")", "+", "' '", "+", "str", "(", "k", ")", "+", "' '", "+", "id", ")", ")", "\n", "log", ".", "write", "(", "'Gap = '", "+", "str", "(", "theta", ")", "+", "'\\n'", ")", "\n", "\n", "intersect", ",", "num_sols", ",", "num_ECs", "=", "families", ".", "families_intersection", "(", "node_names", ",", "d", ",", "network_path", ",", "k", ",", "active_vars", ")", "\n", "log", ".", "write", "(", "'Families in intersection: '", "+", "str", "(", "intersect", ")", "+", "'\\n'", ")", "\n", "log", ".", "write", "(", "'Number of solutions found: '", "+", "str", "(", "num_sols", ")", "+", "'\\nNumber of equivalence calsses: '", "+", "str", "(", "\n", "num_ECs", ")", "+", "'\\n'", ")", "\n", "if", "num_sols", "==", "1", ":", "\n", "                ", "Accept", "=", "Accept", ".", "union", "(", "intersect", ")", "\n", "log", ".", "write", "(", "'Accept: '", "+", "str", "(", "Accept", ")", "+", "'\\n'", ")", "\n", "family_accepted", "=", "False", "\n", "\n", "", "else", ":", "\n", "                ", "candidates", "=", "intersect", "-", "Accept", "\n", "log", ".", "write", "(", "'Candidate families for acceptance: '", "+", "str", "(", "candidates", ")", "+", "'\\n'", ")", "\n", "family_accepted", "=", "bool", "(", "candidates", ")", "\n", "if", "family_accepted", ":", "\n", "                    ", "f", "=", "random", ".", "choice", "(", "tuple", "(", "candidates", ")", ")", "# accepted family is chosen randomly", "\n", "updateConstraintFile", "(", "constraints_path", ",", "f", ",", "node_names", ",", "k", ")", "\n", "candidates", ".", "remove", "(", "f", ")", "\n", "Accept", ".", "add", "(", "f", ")", "\n", "log", ".", "write", "(", "'Family '", "+", "str", "(", "f", ")", "+", "' was accepted...\\n'", ")", "\n", "print", "(", "active_vars", ")", "\n", "print", "(", "f", "[", "0", "]", ")", "\n", "active_vars", ".", "remove", "(", "f", "[", "0", "]", ")", "\n", "log", ".", "write", "(", "'Variable '", "+", "str", "(", "f", "[", "0", "]", ")", "+", "' is no longer active\\n'", ")", "\n", "\n", "", "", "", "if", "len", "(", "Accept", ")", "==", "d", ":", "\n", "            ", "log", ".", "write", "(", "'BN: '", "+", "str", "(", "sorted", "(", "list", "(", "Accept", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ")", "+", "'\\nTotal number of samples: '", "+", "str", "(", "sum", "(", "list", "(", "counts", "[", "'count'", "]", ")", ")", ")", ")", "\n", "log", ".", "close", "(", ")", "\n", "return", "Accept", ",", "sum", "(", "list", "(", "counts", "[", "'count'", "]", ")", ")", ",", "d", "\n", "\n", "", "t", "=", "t", "+", "1", "\n", "epsilon_t", "=", "epsilon_t", "/", "2", "\n", "\n", "", "epsilon_T", "=", "epsilon", "/", "len", "(", "active_vars", ")", "\n", "log", ".", "write", "(", "'epsilon_T = '", "+", "str", "(", "epsilon_T", ")", "+", "', delta_T = '", "+", "str", "(", "delta_tag", ")", "+", "'\\n'", ")", "\n", "N_next", "=", "sample_size", ".", "sample_size", "(", "epsilon_T", "/", "2", ",", "delta_tag", ",", "Ma", ",", "Mb", ")", "\n", "log", ".", "write", "(", "'Number of samples taken per family in the last round: '", "+", "str", "(", "max", "(", "0", ",", "N_next", "-", "N_curr", ")", ")", "+", "'\\n'", ")", "\n", "if", "N_next", "-", "N_curr", ">", "0", ":", "#  added to fix a bug in the algorithm", "\n", "        ", "counts", "=", "pd", ".", "concat", "(", "[", "counts", ",", "families", ".", "sample_subsets", "(", "k", ",", "model", ",", "states", ",", "N_next", "-", "N_curr", ",", "active_vars", ")", "]", ")", "\n", "\n", "# run gobnilp with scores file saved in file_path", "\n", "", "families", ".", "compute_scores", "(", "d", ",", "active_vars", ",", "k", ",", "counts", ",", "min", "(", "1", ",", "t", "-", "1", ")", ",", "score_path", ",", "penalty", ")", "\n", "utils", ".", "runGOBNILP", "(", "prob_name", "+", "id", ",", "k", ")", "\n", "G_hat", "=", "families", ".", "bn_file_to_family_set", "(", "'./eBNSL/networks/'", "+", "prob_name", "+", "id", "+", "'.opt'", ",", "node_names", ")", "\n", "output", "=", "G_hat", ".", "union", "(", "Accept", ")", "\n", "log", ".", "write", "(", "'BN: '", "+", "str", "(", "sorted", "(", "list", "(", "output", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ")", ")", "\n", "log", ".", "close", "(", ")", "\n", "return", "output", ",", "sum", "(", "list", "(", "counts", "[", "'count'", "]", ")", ")", ",", "len", "(", "Accept", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.activeBNSL.updateConstraintFile": [[136, 149], ["open", "open.close", "open.write", "len", "set", "set().union", "open.write", "set", "str"], "function", ["None"], ["", "def", "updateConstraintFile", "(", "path", ",", "f", ",", "vars", ",", "k", ")", ":", "\n", "    ", "c", "=", "open", "(", "path", ",", "'a+'", ")", "\n", "\n", "v", "=", "f", "[", "0", "]", "\n", "P", "=", "f", "[", "1", "]", "\n", "\n", "for", "p", "in", "P", ":", "\n", "        ", "c", ".", "write", "(", "str", "(", "v", ")", "+", "'<-'", "+", "p", "+", "'\\n'", ")", "# add all v's parents to constraint file", "\n", "", "if", "len", "(", "P", ")", "<", "k", ":", "# if parent set has less than k variables", "\n", "        ", "P_not", "=", "set", "(", "vars", ")", "-", "(", "set", "(", "P", ")", ".", "union", "(", "{", "v", "}", ")", ")", "\n", "for", "pn", "in", "P_not", ":", "\n", "            ", "c", ".", "write", "(", "'~'", "+", "v", "+", "'<-'", "+", "pn", "+", "'\\n'", ")", "\n", "", "", "c", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.loadNetwork": [[6, 12], ["pgmpy.readwrite.BIFReader", "pgmpy.readwrite.BIFReader.get_states", "list", "pgmpy.readwrite.BIFReader.get_model", "reader.get_states.keys"], "function", ["None"], ["def", "loadNetwork", "(", "net_name", ")", ":", "\n", "    ", "reader", "=", "BIFReader", "(", "'./BIF/'", "+", "net_name", "+", "'.bif'", ")", "\n", "states", "=", "reader", ".", "get_states", "(", ")", "# get all node states", "\n", "node_names", "=", "list", "(", "states", ".", "keys", "(", ")", ")", "# get node names", "\n", "model", "=", "reader", ".", "get_model", "(", ")", "\n", "return", "model", ",", "node_names", ",", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.generateId": [[13, 15], ["str", "uuid.uuid1"], "function", ["None"], ["", "def", "generateId", "(", ")", ":", "\n", "    ", "return", "str", "(", "uuid", ".", "uuid1", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.binom": [[16, 18], ["math.factorial", "math.factorial", "math.factorial"], "function", ["None"], ["", "def", "binom", "(", "n", ",", "k", ")", ":", "\n", "    ", "return", "math", ".", "factorial", "(", "n", ")", "//", "math", ".", "factorial", "(", "k", ")", "//", "math", ".", "factorial", "(", "n", "-", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.runEBNSL": [[19, 21], ["os.system", "str"], "function", ["None"], ["", "def", "runEBNSL", "(", "prob_name", ",", "theta", ",", "k", ",", "id", "=", "'\"\"'", ")", ":", "\n", "    ", "os", ".", "system", "(", "'./run_score.sh '", "+", "prob_name", "+", "' '", "+", "'{:.10f}'", ".", "format", "(", "theta", ")", "+", "' '", "+", "str", "(", "k", ")", "+", "' '", "+", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.runGOBNILP": [[22, 31], ["os.system", "open", "open.write", "open.close", "str"], "function", ["None"], ["", "def", "runGOBNILP", "(", "prob_name", ",", "k", ",", "set", "=", "False", ")", ":", "\n", "    ", "if", "set", ":", "\n", "        ", "settings", "=", "open", "(", "'./eBNSL/networks/settings/'", "+", "prob_name", "+", "'.opt'", ",", "'w+'", ")", "# create settings file", "\n", "# settings file includes: maximal number of parents k, no variable names in the score file, path to write solution", "\n", "settings", ".", "write", "(", "'gobnilp/scoring/palim = '", "+", "str", "(", "\n", "k", ")", "+", "'\\ngobnilp/scoring/arities = FALSE\\ngobnilp/outputfile/solution = \"./eBNSL/networks/'", "+", "prob_name", "+", "'.opt\"'", ")", "\n", "settings", ".", "close", "(", ")", "\n", "\n", "", "os", ".", "system", "(", "'./eBNSL/gobnilp/bin/gobnilp -f=jkl -g=./eBNSL/networks/settings/'", "+", "prob_name", "+", "'.opt  ./eBNSL/scores/'", "+", "prob_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.computeNumberOfFamilies": [[32, 39], ["range", "utils.binom"], "function", ["home.repos.pwc.inspect_result.noabdavid_activeBNSL.None.utils.binom"], ["", "def", "computeNumberOfFamilies", "(", "d", ",", "k", ",", "c", "=", "None", ")", ":", "\n", "    ", "sum_coeff", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "k", "+", "1", ")", ":", "\n", "        ", "sum_coeff", "=", "sum_coeff", "+", "binom", "(", "d", "-", "1", ",", "i", ")", "\n", "", "if", "not", "c", ":", "\n", "        ", "return", "d", "*", "sum_coeff", "\n", "", "return", "c", "*", "sum_coeff", "\n", "", ""]]}