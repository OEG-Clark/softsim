{"home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.opts.opts.__init__": [[11, 239], ["argparse.ArgumentParser", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# basic experiment setting", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'ctdet'", ",", "\n", "help", "=", "'ctdet | ddd | pose_2d | exdet'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'coco'", ",", "\n", "help", "=", "'coco | guns | openimgs | kitti | coco_hp | pascal'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "80", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--scarcity'", ",", "default", "=", "'55'", ",", "\n", "help", "=", "'level of scarcity.'", "\n", "'55: split train/val into 5/5'", "\n", "'37: split train/val into 3/7'", "\n", "'19: split train/val into 1/9'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--exp_id'", ",", "default", "=", "'default'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--debug'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'level of visualization.'", "\n", "'1: only show the final detection results'", "\n", "'2: show the network output features'", "\n", "'3: use matplot to display'", "# useful when launching training with ipython notebook", "\n", "'4: save all visualizations to disk'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--demo'", ",", "default", "=", "''", ",", "\n", "help", "=", "'path to image/ image folders/ video. '", "\n", "'or \"webcam\"'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_model'", ",", "default", "=", "''", ",", "\n", "help", "=", "'path to pretrained model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'resume an experiment. '", "\n", "'Reloaded the optimizer parameter and '", "\n", "'set load_model to model_last.pth '", "\n", "'in the exp dir if load_model is empty.'", ")", "\n", "\n", "# system", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpus'", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'-1 for CPU, use comma for multiple gpus'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'dataloader threads. 0 for single-thread.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--not_cuda_benchmark'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable when the input size is not fixed.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "317", ",", "\n", "help", "=", "'random seed'", ")", "# from CornerNet", "\n", "\n", "# log", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_iter'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'disable progress bar and print to screen.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--hide_data_time'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'not display time during training.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_all'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'save model to disk every 5 epochs.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--metric'", ",", "default", "=", "'loss'", ",", "\n", "help", "=", "'main metric to save best model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--vis_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "\n", "help", "=", "'visualization threshold.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--debugger_theme'", ",", "default", "=", "'white'", ",", "\n", "choices", "=", "[", "'white'", ",", "'black'", "]", ")", "\n", "\n", "# model", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--arch'", ",", "default", "=", "'hourglass'", ",", "\n", "help", "=", "'model architecture. Currently tested'", "\n", "'res_18 | res_101 | resdcn_18 | resdcn_101 |'", "\n", "'dlav0_34 | dla_34 | hourglass | resnest_50'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--head_conv'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'conv layer channels for output head'", "\n", "'0 for no conv layer'", "\n", "'-1 for default setting: '", "\n", "'64 for resnets and 256 for dla.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--down_ratio'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'output stride. Currently only supports 4.'", ")", "\n", "\n", "# input", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_res'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'input height and width. -1 for default from '", "\n", "'dataset. Will be overriden by input_h | input_w'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_h'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'input height. -1 for default from dataset.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_w'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'input width. -1 for default from dataset.'", ")", "\n", "\n", "# train", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "2.5e-4", ",", "\n", "help", "=", "'learning rate for batch size 24.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr_step'", ",", "type", "=", "str", ",", "default", "=", "'90,110'", ",", "\n", "help", "=", "'drop learning rate by 10.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "120", ",", "\n", "help", "=", "'total training epochs.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'batch size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--master_batch_size'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'batch size on the master gpu.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_iters'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'default: #samples / batch_size.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--val_intervals'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'number of epochs to run validation.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--trainval'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'include validation in training and '", "\n", "'test on test set'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--flag_finetune'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Finetuning. Loading pre-trained model from --pretrained_path '", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pretrained_path'", ",", "type", "=", "str", ",", "\n", "default", "=", "'/root/CenterNet-Gluon/CenterNet_hourglass_0030.params'", ",", "\n", "help", "=", "'Finetuning from this model.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "# if use distributed training", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--image_mixup'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'perform image and heatmap mixup '", ")", "# if use image mixup augmentation", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--self_supervise'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'perform self-supervision of pixel alignment on embeddings '", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--em_weight'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'loss weight for self supervision.'", ")", "\n", "\n", "# test", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--flip_test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'flip data augmentation.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_scales'", ",", "type", "=", "str", ",", "default", "=", "'1'", ",", "\n", "help", "=", "'multi scale test augmentation.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nms'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'run nms in testing.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--K'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'max number of output objects.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--not_prefetch_test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'not use parallal data pre-processing.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fix_res'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'fix testing resolution or keep '", "\n", "'the original resolution'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--keep_res'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'keep the original resolution'", "\n", "' during validation.'", ")", "\n", "\n", "# dataset", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--not_rand_crop'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'not use the random crop data augmentation'", "\n", "'from CornerNet.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--shift'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'when not using random crop'", "\n", "'apply shift augmentation.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--scale'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "\n", "help", "=", "'when not using random crop'", "\n", "'apply scale augmentation.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--rotate'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "'when not using random crop'", "\n", "'apply rotation augmentation.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--flip'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'probability of applying flip augmentation.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_color_aug'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'not use the color augmenation '", "\n", "'from CornerNet'", ")", "\n", "# multi_pose", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--aug_rot'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "'probability of applying '", "\n", "'rotation augmentation.'", ")", "\n", "\n", "# loss", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--mse_loss'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use mse loss or focal loss to train '", "\n", "'keypoint heatmaps.'", ")", "\n", "# loss for center_det", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--reg_loss'", ",", "default", "=", "'l1'", ",", "\n", "help", "=", "'regression loss: sl1 | l1 | l2'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--hm_weight'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'loss weight for keypoint heatmaps.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--off_weight'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'loss weight for keypoint local offsets.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--wh_weight'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'loss weight for bounding box size.'", ")", "\n", "# loss for multi_pose_2d", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--hp_weight'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'loss weight for human pose offset.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--hm_hp_weight'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'loss weight for human keypoint heatmap.'", ")", "\n", "\n", "# sub-task: center_det", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm_wh'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'L1(\\hat(y) / y, 1) or L1(\\hat(y), y)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dense_wh'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply weighted regression near center or '", "\n", "'just apply regression on center point.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--cat_spec_wh'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'category specific bounding box size.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--not_reg_offset'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'not regress local offset.'", ")", "\n", "\n", "# sub-task: multi_pose_2d", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dense_hp'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply weighted pose regression near center '", "\n", "'or just apply regression on center point.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--not_hm_hp'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'not estimate human joint heatmap, '", "\n", "'directly use the joint offset from center.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--not_reg_hp_offset'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'not regress local offset for '", "\n", "'human joint heatmaps.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--not_reg_bbox'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'not regression bounding box size.'", ")", "\n", "\n", "# ground truth validation", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--eval_oracle_hm'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use ground center heatmap.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--eval_oracle_wh'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use ground truth bounding box size.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--eval_oracle_offset'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use ground truth local heatmap offset.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--eval_oracle_kps'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use ground truth human pose offset.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--eval_oracle_hmhp'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use ground truth human joint heatmaps.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--eval_oracle_hp_offset'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use ground truth human joint local offset.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--eval_oracle_dep'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use ground truth depth.'", ")", "\n", "\n", "# classification", "\n", "# loss", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_mixup'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use mixup loss for classification'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_ricap'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use ricap loss for classification'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_cutmix'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use cutmix loss for classification'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_label_smoothing'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use label_smoothing loss for classification'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_dual_cutout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dual_cutout loss for classification'", ")", "\n", "# model", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--cls_arch'", ",", "default", "=", "'resnest_50'", ",", "\n", "help", "=", "'classification model architecture. Currently tested'", "\n", "'BiT_res_50 | resnest_50'", ")", "\n", "# test", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_split'", ",", "type", "=", "str", ",", "default", "=", "'val'", ",", "\n", "help", "=", "'For politics dataset, use val, test, test_extra, or test_all'", ")", "\n", "\n", "# debug", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--center_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'threshold for object center, above which to be considered object.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.opts.opts.parse": [[240, 296], ["print", "range", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "opts.opts.parser.parse_args", "opts.opts.parser.parse_args", "int", "int", "float", "opts.opts.chunk_sizes.append", "os.path.dirname", "os.path.join", "opts.opts.gpus.split", "opts.opts.lr_step.split", "opts.opts.test_scales.split", "len", "len", "opts.opts.save_dir.endswith", "range", "len", "len", "len"], "methods", ["None"], ["", "def", "parse", "(", "self", ",", "args", "=", "''", ")", ":", "\n", "        ", "if", "args", "==", "''", ":", "\n", "            ", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "", "else", ":", "\n", "            ", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "", "opt", ".", "gpus_str", "=", "opt", ".", "gpus", "\n", "opt", ".", "gpus", "=", "[", "int", "(", "gpu", ")", "for", "gpu", "in", "opt", ".", "gpus", ".", "split", "(", "','", ")", "]", "\n", "opt", ".", "gpus", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "gpus", ")", ")", "]", "if", "opt", ".", "gpus", "[", "0", "]", ">=", "0", "else", "[", "-", "1", "]", "\n", "opt", ".", "lr_step", "=", "[", "int", "(", "i", ")", "for", "i", "in", "opt", ".", "lr_step", ".", "split", "(", "','", ")", "]", "\n", "opt", ".", "test_scales", "=", "[", "float", "(", "i", ")", "for", "i", "in", "opt", ".", "test_scales", ".", "split", "(", "','", ")", "]", "\n", "\n", "opt", ".", "fix_res", "=", "not", "opt", ".", "keep_res", "\n", "print", "(", "'Fix size testing.'", "if", "opt", ".", "fix_res", "else", "'Keep resolution testing.'", ")", "\n", "opt", ".", "reg_offset", "=", "not", "opt", ".", "not_reg_offset", "\n", "opt", ".", "reg_bbox", "=", "not", "opt", ".", "not_reg_bbox", "\n", "opt", ".", "hm_hp", "=", "not", "opt", ".", "not_hm_hp", "\n", "opt", ".", "reg_hp_offset", "=", "(", "not", "opt", ".", "not_reg_hp_offset", ")", "and", "opt", ".", "hm_hp", "\n", "\n", "if", "opt", ".", "head_conv", "==", "-", "1", ":", "# init default head_conv", "\n", "            ", "opt", ".", "head_conv", "=", "256", "if", "'dla'", "in", "opt", ".", "arch", "else", "64", "\n", "", "opt", ".", "pad", "=", "127", "if", "'hourglass'", "in", "opt", ".", "arch", "else", "31", "\n", "opt", ".", "num_stacks", "=", "2", "if", "opt", ".", "arch", "==", "'hourglass'", "else", "1", "\n", "\n", "if", "opt", ".", "trainval", ":", "\n", "            ", "opt", ".", "val_intervals", "=", "100000000", "\n", "\n", "", "if", "opt", ".", "debug", ">", "0", ":", "\n", "            ", "opt", ".", "num_workers", "=", "0", "\n", "opt", ".", "batch_size", "=", "1", "\n", "opt", ".", "gpus", "=", "[", "opt", ".", "gpus", "[", "0", "]", "]", "\n", "opt", ".", "master_batch_size", "=", "-", "1", "\n", "\n", "", "if", "opt", ".", "master_batch_size", "==", "-", "1", ":", "\n", "            ", "opt", ".", "master_batch_size", "=", "opt", ".", "batch_size", "//", "len", "(", "opt", ".", "gpus", ")", "\n", "", "rest_batch_size", "=", "(", "opt", ".", "batch_size", "-", "opt", ".", "master_batch_size", ")", "\n", "opt", ".", "chunk_sizes", "=", "[", "opt", ".", "master_batch_size", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "gpus", ")", "-", "1", ")", ":", "\n", "            ", "slave_chunk_size", "=", "rest_batch_size", "//", "(", "len", "(", "opt", ".", "gpus", ")", "-", "1", ")", "\n", "if", "i", "<", "rest_batch_size", "%", "(", "len", "(", "opt", ".", "gpus", ")", "-", "1", ")", ":", "\n", "                ", "slave_chunk_size", "+=", "1", "\n", "", "opt", ".", "chunk_sizes", ".", "append", "(", "slave_chunk_size", ")", "\n", "", "print", "(", "'training chunk_sizes:'", ",", "opt", ".", "chunk_sizes", ")", "\n", "\n", "opt", ".", "root_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", "\n", "opt", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root_dir", ",", "'data'", ")", "\n", "opt", ".", "exp_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root_dir", ",", "'exp'", ",", "opt", ".", "task", ")", "\n", "opt", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "exp_dir", ",", "opt", ".", "exp_id", ")", "\n", "opt", ".", "debug_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'debug'", ")", "\n", "print", "(", "'The output will be saved to '", ",", "opt", ".", "save_dir", ")", "\n", "\n", "if", "opt", ".", "resume", "and", "opt", ".", "load_model", "==", "''", ":", "\n", "            ", "model_path", "=", "opt", ".", "save_dir", "[", ":", "-", "4", "]", "if", "opt", ".", "save_dir", ".", "endswith", "(", "'TEST'", ")", "else", "opt", ".", "save_dir", "\n", "opt", ".", "load_model", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "'model_last.pth'", ")", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.opts.opts.update_dataset_info_and_set_heads": [[297, 335], ["max", "max", "print", "opt.heads.update", "opt.heads.update", "opt.heads.update", "opt.heads.update"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update"], ["", "def", "update_dataset_info_and_set_heads", "(", "self", ",", "opt", ",", "dataset", ")", ":", "\n", "        ", "input_h", ",", "input_w", "=", "dataset", ".", "default_resolution", "\n", "opt", ".", "mean", ",", "opt", ".", "std", "=", "dataset", ".", "mean", ",", "dataset", ".", "std", "\n", "#opt.num_classes = dataset.num_classes", "\n", "\n", "# input_h(w): opt.input_h overrides opt.input_res overrides dataset default", "\n", "input_h", "=", "opt", ".", "input_res", "if", "opt", ".", "input_res", ">", "0", "else", "input_h", "\n", "input_w", "=", "opt", ".", "input_res", "if", "opt", ".", "input_res", ">", "0", "else", "input_w", "\n", "opt", ".", "input_h", "=", "opt", ".", "input_h", "if", "opt", ".", "input_h", ">", "0", "else", "input_h", "\n", "opt", ".", "input_w", "=", "opt", ".", "input_w", "if", "opt", ".", "input_w", ">", "0", "else", "input_w", "\n", "opt", ".", "output_h", "=", "opt", ".", "input_h", "//", "opt", ".", "down_ratio", "\n", "opt", ".", "output_w", "=", "opt", ".", "input_w", "//", "opt", ".", "down_ratio", "\n", "opt", ".", "input_res", "=", "max", "(", "opt", ".", "input_h", ",", "opt", ".", "input_w", ")", "\n", "opt", ".", "output_res", "=", "max", "(", "opt", ".", "output_h", ",", "opt", ".", "output_w", ")", "\n", "\n", "if", "opt", ".", "task", "==", "'ctdet'", ":", "\n", "            ", "assert", "opt", ".", "dataset", "in", "[", "'pascal'", ",", "'coco'", ",", "'guns'", ",", "'openimgs'", ",", "'flags'", ",", "'openlogo'", ",", "'logodet3k'", ",", "'indoor'", ",", "# detection", "\n", "'politics'", ",", "'ViolenceScene'", "]", "# classification", "\n", "opt", ".", "heads", "=", "{", "'hm'", ":", "opt", ".", "num_classes", ",", "\n", "'wh'", ":", "2", "if", "not", "opt", ".", "cat_spec_wh", "else", "2", "*", "opt", ".", "num_classes", "}", "\n", "if", "opt", ".", "reg_offset", ":", "\n", "                ", "opt", ".", "heads", ".", "update", "(", "{", "'reg'", ":", "2", "}", ")", "\n", "", "", "elif", "opt", ".", "task", "==", "'pose_2d'", ":", "\n", "            ", "assert", "opt", ".", "dataset", "in", "[", "'coco_hp'", "]", "\n", "opt", ".", "flip_idx", "=", "dataset", ".", "flip_idx", "\n", "opt", ".", "heads", "=", "{", "'hm'", ":", "opt", ".", "num_classes", ",", "\n", "'wh'", ":", "2", ",", "\n", "'hps'", ":", "34", "}", "\n", "if", "opt", ".", "reg_offset", ":", "\n", "                ", "opt", ".", "heads", ".", "update", "(", "{", "'reg'", ":", "2", "}", ")", "\n", "", "if", "opt", ".", "hm_hp", ":", "\n", "                ", "opt", ".", "heads", ".", "update", "(", "{", "'hm_hp'", ":", "17", "}", ")", "\n", "", "if", "opt", ".", "reg_hp_offset", ":", "\n", "                ", "opt", ".", "heads", ".", "update", "(", "{", "'hp_offset'", ":", "2", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "0", ",", "'task not defined!'", "\n", "", "print", "(", "'heads'", ",", "opt", ".", "heads", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.opts.opts.init": [[336, 359], ["opts.opts.parse", "Struct", "opts.opts.update_dataset_info_and_set_heads", "entries.items", "opts.opts.__setattr__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.opts.opts.parse", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.opts.opts.update_dataset_info_and_set_heads"], ["", "def", "init", "(", "self", ",", "args", "=", "''", ")", ":", "\n", "        ", "default_dataset_info", "=", "{", "\n", "'ctdet'", ":", "{", "'default_resolution'", ":", "[", "512", ",", "512", "]", ",", "'num_classes'", ":", "80", ",", "\n", "'mean'", ":", "[", "0.408", ",", "0.447", ",", "0.470", "]", ",", "'std'", ":", "[", "0.289", ",", "0.274", ",", "0.278", "]", ",", "\n", "'dataset'", ":", "'coco'", "}", ",", "\n", "'pose_2d'", ":", "{", "\n", "'default_resolution'", ":", "[", "512", ",", "512", "]", ",", "'num_classes'", ":", "1", ",", "\n", "'mean'", ":", "[", "0.408", ",", "0.447", ",", "0.470", "]", ",", "'std'", ":", "[", "0.289", ",", "0.274", ",", "0.278", "]", ",", "\n", "'dataset'", ":", "'coco_hp'", ",", "'num_joints'", ":", "17", ",", "\n", "'flip_idx'", ":", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", ",", "[", "5", ",", "6", "]", ",", "[", "7", ",", "8", "]", ",", "[", "9", ",", "10", "]", ",", "\n", "[", "11", ",", "12", "]", ",", "[", "13", ",", "14", "]", ",", "[", "15", ",", "16", "]", "]", "}", ",", "\n", "}", "\n", "\n", "class", "Struct", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "entries", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "entries", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "__setattr__", "(", "k", ",", "v", ")", "\n", "\n", "", "", "", "opt", "=", "self", ".", "parse", "(", "args", ")", "\n", "dataset", "=", "Struct", "(", "default_dataset_info", "[", "opt", ".", "task", "]", ")", "\n", "dataset", ".", "dataset", "=", "opt", ".", "dataset", "\n", "opt", "=", "self", ".", "update_dataset_info_and_set_heads", "(", "opt", ",", "dataset", ")", "\n", "return", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pointSS.add_path": [[21, 24], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "", "", "this_dir", "=", "osp", ".", "dirname", "(", "__file__", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pointSS.get_dataset": [[29, 46], ["dataset.det.indoor_centernet.CenterIndoorDataset", "dataset.det.indoor_centernet.CenterIndoorDataset", "dataset.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset", "dataset.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset", "dataset.det.indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset", "dataset.det.indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset", "dataset.det.indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset", "dataset.det.indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset", "print"], "function", ["None"], ["def", "get_dataset", "(", "opt", ",", "dataset_name", "=", "\"openimgs\"", ")", ":", "\n", "    ", "if", "dataset_name", "==", "\"indoor\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "elif", "dataset_name", "==", "\"indoor_render256native\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorRender256NativeDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorRender256NativeDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "elif", "dataset_name", "==", "\"indoor_render512pixelSS\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorRender512PixelSSDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorRender512PixelSSDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "elif", "dataset_name", "==", "\"indoor_render512pointSS\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorRender512PointSSDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorRender512PointSSDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown dataset.\"", ")", "\n", "return", "NotImplementedError", "\n", "", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pointSS.get_distributed_dataloader": [[48, 78], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "len"], "function", ["None"], ["", "def", "get_distributed_dataloader", "(", "train_dataset", ",", "val_dataset", ")", ":", "\n", "    ", "if", "train_dataset", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Setting up training set...'", ")", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ",", "\n", "num_replicas", "=", "len", "(", "opt", ".", "gpus", ")", ",", "\n", "rank", "=", "opt", ".", "local_rank", ",", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Training set skipped...'", ")", "\n", "train_loader", "=", "None", "\n", "\n", "", "print", "(", "'Setting up validation set...'", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pointSS.my_collate": [[79, 83], ["list", "default_collate", "filter"], "function", ["None"], ["", "def", "my_collate", "(", "batch", ")", ":", "\n", "    ", "\"Puts each data field into a tensor with outer dimension batch size\"", "\n", "batch", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", ")", "\n", "return", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pointSS.get_distributed_concat_dataloader": [[84, 115], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "len"], "function", ["None"], ["", "def", "get_distributed_concat_dataloader", "(", "train_dataset_list", ",", "val_dataset_list", ")", ":", "\n", "\n", "    ", "if", "train_dataset_list", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Setting up training set...'", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset_list", ")", ",", "\n", "num_replicas", "=", "len", "(", "opt", ".", "gpus", ")", ",", "\n", "rank", "=", "opt", ".", "local_rank", ",", "\n", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset_list", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Training set skipped...'", ")", "\n", "train_loader", "=", "None", "\n", "\n", "", "print", "(", "'Setting up validation set...'", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "val_dataset_list", ")", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pointSS.train": [[117, 167], ["range", "train_sampler.set_epoch", "trainer.train", "logger.write", "log_dict_train.items", "logger.write", "logger.scalar_summary", "logger.write", "models.model.save_model", "print", "log_dict_val.items", "print", "models.model.save_model", "print", "models.model.save_model", "print", "os.path.join", "os.path.join", "logger.scalar_summary", "logger.write", "print", "models.model.save_model", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.no_grad", "torch.no_grad", "trainer.val_for_eval", "torch.no_grad", "torch.no_grad", "trainer.val", "os.path.join", "os.path.join", "opt.lr_step.index"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val_for_eval", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val"], ["", "def", "train", "(", "model", ",", "optimizer", ",", "trainer", ",", "train_loader", ",", "val_loader", ",", "train_sampler", ",", "opt", ",", "logger", ")", ":", "\n", "\n", "    ", "best", "=", "1e10", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "cur_epoch", "+", "1", ",", "opt", ".", "num_epochs", "+", "1", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "mark", "=", "epoch", "if", "opt", ".", "save_all", "else", "'last'", "\n", "log_dict_train", ",", "_", "=", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ")", "\n", "logger", ".", "write", "(", "'epoch: {} |'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "log_dict_train", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "scalar_summary", "(", "'train_{}'", ".", "format", "(", "k", ")", ",", "v", ",", "epoch", ")", "\n", "logger", ".", "write", "(", "'{} {:8f} | '", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "opt", ".", "val_intervals", ">", "0", "and", "epoch", "%", "opt", ".", "val_intervals", "==", "0", ":", "\n", "            ", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "mark", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "opt", ".", "local_rank", ")", "\n", "\n", "print", "(", "'Performing validation...'", ")", "\n", "if", "epoch", "%", "(", "2", "*", "opt", ".", "val_intervals", ")", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "log_dict_val", ",", "preds", "=", "trainer", ".", "val_for_eval", "(", "epoch", ",", "val_loader", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "log_dict_val", ",", "preds", "=", "trainer", ".", "val", "(", "epoch", ",", "val_loader", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "log_dict_val", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "scalar_summary", "(", "'val_{}'", ".", "format", "(", "k", ")", ",", "v", ",", "epoch", ")", "\n", "logger", ".", "write", "(", "'{} {:8f} | '", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "log_dict_val", "[", "opt", ".", "metric", "]", "<", "best", ":", "\n", "                ", "print", "(", "'Overwriting the current best model...'", ")", "\n", "best", "=", "log_dict_val", "[", "opt", ".", "metric", "]", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_best.pth'", ")", ",", "\n", "epoch", ",", "model", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Finishing...Saving the last model...'", ")", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_last.pth'", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "\n", "", "logger", ".", "write", "(", "'\\n'", ")", "\n", "if", "epoch", "in", "opt", ".", "lr_step", ":", "\n", "            ", "print", "(", "'Saving model...'", ")", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "epoch", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "lr", "=", "opt", ".", "lr", "*", "(", "0.1", "**", "(", "opt", ".", "lr_step", ".", "index", "(", "epoch", ")", "+", "1", ")", ")", "\n", "print", "(", "'Drop LR to'", ",", "lr", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pointSS.validate": [[169, 176], ["print", "trainer.val", "print", "val_loader.dataset.run_eval"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.run_eval"], ["", "def", "validate", "(", "trainer", ",", "val_loader", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "test", ":", "\n", "        ", "print", "(", "'Performing validation...'", ")", "\n", "_", ",", "preds", "=", "trainer", ".", "val", "(", "0", ",", "val_loader", ")", "\n", "print", "(", "'Evaluating accuracy...'", ")", "\n", "val_loader", ".", "dataset", ".", "run_eval", "(", "preds", ",", "opt", ".", "save_dir", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.__init__": [[15, 51], ["time.strftime", "dict", "os.path.join", "open", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "open", "opt_file.write", "opt_file.write", "opt_file.write", "opt_file.write", "opt_file.write", "sorted", "tensorboardX.SummaryWriter", "os.system", "str", "dict.items", "opt_file.write", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "getattr", "dir", "torch.backends.cudnn.version", "os.path.dirname", "os.path.dirname", "name.startswith", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "opt", ".", "save_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "debug_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "opt", ".", "debug_dir", ")", "\n", "\n", "", "time_str", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ")", "\n", "\n", "args", "=", "dict", "(", "(", "name", ",", "getattr", "(", "opt", ",", "name", ")", ")", "for", "name", "in", "dir", "(", "opt", ")", "\n", "if", "not", "name", ".", "startswith", "(", "'_'", ")", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "'==> torch version: {}\\n'", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "opt_file", ".", "write", "(", "'==> cudnn version: {}\\n'", ".", "format", "(", "\n", "torch", ".", "backends", ".", "cudnn", ".", "version", "(", ")", ")", ")", "\n", "opt_file", ".", "write", "(", "'==> Cmd:\\n'", ")", "\n", "opt_file", ".", "write", "(", "str", "(", "sys", ".", "argv", ")", ")", "\n", "opt_file", ".", "write", "(", "'\\n==> Opt:\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                ", "opt_file", ".", "write", "(", "'  %s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "\n", "", "", "log_dir", "=", "opt", ".", "save_dir", "+", "'/logs_{}'", ".", "format", "(", "time_str", ")", "\n", "if", "USE_TENSORBOARD", ":", "\n", "            ", "self", ".", "writer", "=", "tensorboardX", ".", "SummaryWriter", "(", "log_dir", "=", "log_dir", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "log_dir", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "dirname", "(", "log_dir", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "log_dir", ")", "\n", "", "", "self", ".", "log", "=", "open", "(", "log_dir", "+", "'/log.txt'", ",", "'w'", ")", "\n", "try", ":", "\n", "            ", "os", ".", "system", "(", "'cp {}/opt.txt {}/'", ".", "format", "(", "opt", ".", "save_dir", ",", "log_dir", ")", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "self", ".", "start_line", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write": [[52, 62], ["time.strftime", "logger.Logger.log.write", "logger.Logger.log.write", "logger.Logger.log.flush"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write"], ["", "def", "write", "(", "self", ",", "txt", ")", ":", "\n", "        ", "if", "self", ".", "start_line", ":", "\n", "            ", "time_str", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ")", "\n", "self", ".", "log", ".", "write", "(", "'{}: {}'", ".", "format", "(", "time_str", ",", "txt", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "log", ".", "write", "(", "txt", ")", "\n", "", "self", ".", "start_line", "=", "False", "\n", "if", "'\\n'", "in", "txt", ":", "\n", "            ", "self", ".", "start_line", "=", "True", "\n", "self", ".", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.close": [[63, 65], ["logger.Logger.log.close"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.scalar_summary": [[66, 70], ["logger.Logger.writer.add_scalar"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "if", "USE_TENSORBOARD", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "tag", ",", "value", ",", "step", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.test_det_indoor.PrefetchDataset.__init__": [[32, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "dataset", ",", "pre_process_func", ")", ":", "\n", "        ", "self", ".", "images", "=", "dataset", ".", "images", "\n", "self", ".", "load_image_func", "=", "dataset", ".", "coco", ".", "loadImgs", "\n", "self", ".", "img_dir", "=", "dataset", ".", "img_dir", "\n", "self", ".", "pre_process_func", "=", "pre_process_func", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.test_det_indoor.PrefetchDataset.__getitem__": [[39, 48], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "cv2.imread", "test_det_indoor.PrefetchDataset.load_image_func", "test_det_indoor.PrefetchDataset.pre_process_func"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "images", "[", "index", "]", "\n", "img_info", "=", "self", ".", "load_image_func", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "img_info", "[", "'file_name'", "]", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "images", ",", "meta", "=", "{", "}", ",", "{", "}", "\n", "for", "scale", "in", "opt", ".", "test_scales", ":", "\n", "            ", "images", "[", "scale", "]", ",", "meta", "[", "scale", "]", "=", "self", ".", "pre_process_func", "(", "image", ",", "scale", ")", "\n", "", "return", "img_id", ",", "{", "'images'", ":", "images", ",", "'image'", ":", "image", ",", "'meta'", ":", "meta", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.test_det_indoor.PrefetchDataset.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.test_det_indoor.add_path": [[20, 23], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.test_det_indoor.prefetch_test": [[53, 92], ["opts.opts().update_dataset_info_and_set_heads", "print", "print", "dataset.det.indoor_centernet.CenterIndoorDataset", "detectors.center_detector.CenterDetector", "torch.utils.data.DataLoader", "len", "progress.bar.Bar", "enumerate", "progress.bar.Bar.finish", "dataset.det.indoor_centernet.CenterIndoorDataset.export_qualitative_results", "test_det_indoor.PrefetchDataset", "utils.misc.AverageMeter", "detectors.center_detector.CenterDetector.run", "progress.bar.Bar.next", "opts.opts", "avg_time_stats[].update", "img_id.numpy().astype", "img_id.numpy"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.opts.opts.update_dataset_info_and_set_heads", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.export_qualitative_results", "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.run", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update"], ["", "", "def", "prefetch_test", "(", "opt", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "opt", ".", "gpus_str", "\n", "\n", "opt", "=", "opts", "(", ")", ".", "update_dataset_info_and_set_heads", "(", "opt", ",", "CenterIndoorDataset", ")", "# HERE!", "\n", "print", "(", "opt", ")", "\n", "\n", "split", "=", "'val'", "if", "not", "opt", ".", "trainval", "else", "'test'", "\n", "print", "(", "\"Split: {}\"", ".", "format", "(", "split", ")", ")", "\n", "dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", ")", "\n", "detector", "=", "CenterDetector", "(", "opt", ")", "\n", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "PrefetchDataset", "(", "opt", ",", "dataset", ",", "detector", ".", "pre_process", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "pin_memory", "=", "True", ")", "\n", "\n", "results", "=", "{", "}", "\n", "num_iters", "=", "len", "(", "dataset", ")", "\n", "bar", "=", "Bar", "(", "'{}'", ".", "format", "(", "opt", ".", "exp_id", ")", ",", "max", "=", "num_iters", ")", "\n", "time_stats", "=", "[", "'tot'", ",", "'load'", ",", "'pre'", ",", "'net'", ",", "'dec'", ",", "'post'", ",", "'merge'", "]", "\n", "avg_time_stats", "=", "{", "t", ":", "AverageMeter", "(", ")", "for", "t", "in", "time_stats", "}", "\n", "for", "ind", ",", "(", "img_id", ",", "pre_processed_images", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "ret", "=", "detector", ".", "run", "(", "pre_processed_images", ")", "\n", "results", "[", "img_id", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "[", "0", "]", "]", "=", "ret", "[", "'results'", "]", "\n", "Bar", ".", "suffix", "=", "'[{0}/{1}]|Tot: {total:} |ETA: {eta:} '", ".", "format", "(", "\n", "ind", ",", "num_iters", ",", "total", "=", "bar", ".", "elapsed_td", ",", "eta", "=", "bar", ".", "eta_td", ")", "\n", "for", "t", "in", "avg_time_stats", ":", "\n", "            ", "avg_time_stats", "[", "t", "]", ".", "update", "(", "ret", "[", "t", "]", ")", "\n", "Bar", ".", "suffix", "=", "Bar", ".", "suffix", "+", "'|{} {tm.val:.3f}s ({tm.avg:.3f}s) '", ".", "format", "(", "\n", "t", ",", "tm", "=", "avg_time_stats", "[", "t", "]", ")", "\n", "", "bar", ".", "next", "(", ")", "\n", "", "bar", ".", "finish", "(", ")", "\n", "'''\n    # evaluate bbox\n    dataset.run_eval(results, opt.save_dir)\n    # evaluate censorship\n    dataset.run_censor_eval(results, opt.save_dir)\n    '''", "\n", "# export qualitative results", "\n", "dataset", ".", "export_qualitative_results", "(", "results", ",", "split", ",", "thresh", "=", "0.15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.test_det_indoor.test": [[94, 134], ["opts.opts().update_dataset_info_and_set_heads", "print", "print", "dataset.det.indoor_centernet.CenterIndoorDataset", "detectors.center_detector.CenterDetector", "len", "progress.bar.Bar", "range", "progress.bar.Bar.finish", "dataset.det.indoor_centernet.CenterIndoorDataset.run_eval", "utils.misc.AverageMeter", "os.path.join", "os.path.join", "detectors.center_detector.CenterDetector.run", "progress.bar.Bar.next", "opts.opts", "dataset.det.indoor_centernet.CenterIndoorDataset.coco.loadImgs", "avg_time_stats[].update"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.opts.opts.update_dataset_info_and_set_heads", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.run_eval", "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.run", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update"], ["", "def", "test", "(", "opt", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "opt", ".", "gpus_str", "\n", "\n", "opt", "=", "opts", "(", ")", ".", "update_dataset_info_and_set_heads", "(", "opt", ",", "CenterIndoorDataset", ")", "# HERE!", "\n", "print", "(", "opt", ")", "\n", "\n", "split", "=", "'val'", "if", "not", "opt", ".", "trainval", "else", "'test'", "\n", "print", "(", "\"Split: {}\"", ".", "format", "(", "split", ")", ")", "\n", "dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", ")", "\n", "detector", "=", "CenterDetector", "(", "opt", ")", "\n", "\n", "results", "=", "{", "}", "\n", "num_iters", "=", "len", "(", "dataset", ")", "\n", "bar", "=", "Bar", "(", "'{}'", ".", "format", "(", "opt", ".", "exp_id", ")", ",", "max", "=", "num_iters", ")", "\n", "time_stats", "=", "[", "'tot'", ",", "'load'", ",", "'pre'", ",", "'net'", ",", "'dec'", ",", "'post'", ",", "'merge'", "]", "\n", "avg_time_stats", "=", "{", "t", ":", "AverageMeter", "(", ")", "for", "t", "in", "time_stats", "}", "\n", "for", "ind", "in", "range", "(", "num_iters", ")", ":", "\n", "        ", "img_id", "=", "dataset", ".", "images", "[", "ind", "]", "\n", "img_info", "=", "dataset", ".", "coco", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "dataset", ".", "img_dir", ",", "img_info", "[", "'file_name'", "]", ")", "\n", "\n", "ret", "=", "detector", ".", "run", "(", "img_path", ")", "\n", "\n", "results", "[", "img_id", "]", "=", "ret", "[", "'results'", "]", "\n", "\n", "Bar", ".", "suffix", "=", "'[{0}/{1}]|Tot: {total:} |ETA: {eta:} '", ".", "format", "(", "\n", "ind", ",", "num_iters", ",", "total", "=", "bar", ".", "elapsed_td", ",", "eta", "=", "bar", ".", "eta_td", ")", "\n", "for", "t", "in", "avg_time_stats", ":", "\n", "            ", "avg_time_stats", "[", "t", "]", ".", "update", "(", "ret", "[", "t", "]", ")", "\n", "Bar", ".", "suffix", "=", "Bar", ".", "suffix", "+", "'|{} {:.3f} '", ".", "format", "(", "t", ",", "avg_time_stats", "[", "t", "]", ".", "avg", ")", "\n", "", "bar", ".", "next", "(", ")", "\n", "", "bar", ".", "finish", "(", ")", "\n", "# evaluate bbox", "\n", "dataset", ".", "run_eval", "(", "results", ",", "opt", ".", "save_dir", ")", "\n", "'''\n    # evaluate censorship\n    dataset.run_censor_eval(results, opt.save_dir)\n    # export qualitative results\n    dataset.export_qualitative_results(results, split, thresh=0.15)\n    '''", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render256native.add_path": [[19, 22], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "", "", "this_dir", "=", "osp", ".", "dirname", "(", "__file__", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render256native.get_dataset": [[27, 38], ["dataset.det.indoor_centernet.CenterIndoorDataset", "dataset.det.indoor_centernet.CenterIndoorDataset", "dataset.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset", "dataset.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset", "print"], "function", ["None"], ["def", "get_dataset", "(", "opt", ",", "dataset_name", "=", "\"openimgs\"", ")", ":", "\n", "    ", "if", "dataset_name", "==", "\"indoor\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "elif", "dataset_name", "==", "\"indoor_render256native\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorRender256NativeDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorRender256NativeDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown dataset.\"", ")", "\n", "return", "NotImplementedError", "\n", "", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render256native.get_distributed_dataloader": [[40, 70], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "len"], "function", ["None"], ["", "def", "get_distributed_dataloader", "(", "train_dataset", ",", "val_dataset", ")", ":", "\n", "    ", "if", "train_dataset", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Setting up training set...'", ")", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ",", "\n", "num_replicas", "=", "len", "(", "opt", ".", "gpus", ")", ",", "\n", "rank", "=", "opt", ".", "local_rank", ",", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Training set skipped...'", ")", "\n", "train_loader", "=", "None", "\n", "\n", "", "print", "(", "'Setting up validation set...'", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render256native.my_collate": [[71, 75], ["list", "default_collate", "filter"], "function", ["None"], ["", "def", "my_collate", "(", "batch", ")", ":", "\n", "    ", "\"Puts each data field into a tensor with outer dimension batch size\"", "\n", "batch", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", ")", "\n", "return", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render256native.get_distributed_concat_dataloader": [[76, 107], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "len"], "function", ["None"], ["", "def", "get_distributed_concat_dataloader", "(", "train_dataset_list", ",", "val_dataset_list", ")", ":", "\n", "\n", "    ", "if", "train_dataset_list", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Setting up training set...'", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset_list", ")", ",", "\n", "num_replicas", "=", "len", "(", "opt", ".", "gpus", ")", ",", "\n", "rank", "=", "opt", ".", "local_rank", ",", "\n", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset_list", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Training set skipped...'", ")", "\n", "train_loader", "=", "None", "\n", "\n", "", "print", "(", "'Setting up validation set...'", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "val_dataset_list", ")", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render256native.train": [[109, 159], ["range", "train_sampler.set_epoch", "trainer.train", "logger.write", "log_dict_train.items", "logger.write", "logger.scalar_summary", "logger.write", "models.model.save_model", "print", "log_dict_val.items", "print", "models.model.save_model", "print", "models.model.save_model", "print", "os.path.join", "os.path.join", "logger.scalar_summary", "logger.write", "print", "models.model.save_model", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.no_grad", "torch.no_grad", "trainer.val_for_eval", "torch.no_grad", "torch.no_grad", "trainer.val", "os.path.join", "os.path.join", "opt.lr_step.index"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val_for_eval", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val"], ["", "def", "train", "(", "model", ",", "optimizer", ",", "trainer", ",", "train_loader", ",", "val_loader", ",", "train_sampler", ",", "opt", ",", "logger", ")", ":", "\n", "\n", "    ", "best", "=", "1e10", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "cur_epoch", "+", "1", ",", "opt", ".", "num_epochs", "+", "1", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "mark", "=", "epoch", "if", "opt", ".", "save_all", "else", "'last'", "\n", "log_dict_train", ",", "_", "=", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ")", "\n", "logger", ".", "write", "(", "'epoch: {} |'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "log_dict_train", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "scalar_summary", "(", "'train_{}'", ".", "format", "(", "k", ")", ",", "v", ",", "epoch", ")", "\n", "logger", ".", "write", "(", "'{} {:8f} | '", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "opt", ".", "val_intervals", ">", "0", "and", "epoch", "%", "opt", ".", "val_intervals", "==", "0", ":", "\n", "            ", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "mark", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "opt", ".", "local_rank", ")", "\n", "\n", "print", "(", "'Performing validation...'", ")", "\n", "if", "epoch", "%", "(", "2", "*", "opt", ".", "val_intervals", ")", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "log_dict_val", ",", "preds", "=", "trainer", ".", "val_for_eval", "(", "epoch", ",", "val_loader", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "log_dict_val", ",", "preds", "=", "trainer", ".", "val", "(", "epoch", ",", "val_loader", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "log_dict_val", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "scalar_summary", "(", "'val_{}'", ".", "format", "(", "k", ")", ",", "v", ",", "epoch", ")", "\n", "logger", ".", "write", "(", "'{} {:8f} | '", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "log_dict_val", "[", "opt", ".", "metric", "]", "<", "best", ":", "\n", "                ", "print", "(", "'Overwriting the current best model...'", ")", "\n", "best", "=", "log_dict_val", "[", "opt", ".", "metric", "]", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_best.pth'", ")", ",", "\n", "epoch", ",", "model", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Finishing...Saving the last model...'", ")", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_last.pth'", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "\n", "", "logger", ".", "write", "(", "'\\n'", ")", "\n", "if", "epoch", "in", "opt", ".", "lr_step", ":", "\n", "            ", "print", "(", "'Saving model...'", ")", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "epoch", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "lr", "=", "opt", ".", "lr", "*", "(", "0.1", "**", "(", "opt", ".", "lr_step", ".", "index", "(", "epoch", ")", "+", "1", ")", ")", "\n", "print", "(", "'Drop LR to'", ",", "lr", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render256native.validate": [[161, 168], ["print", "trainer.val", "print", "val_loader.dataset.run_eval"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.run_eval"], ["", "def", "validate", "(", "trainer", ",", "val_loader", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "test", ":", "\n", "        ", "print", "(", "'Performing validation...'", ")", "\n", "_", ",", "preds", "=", "trainer", ".", "val", "(", "0", ",", "val_loader", ")", "\n", "print", "(", "'Evaluating accuracy...'", ")", "\n", "val_loader", ".", "dataset", ".", "run_eval", "(", "preds", ",", "opt", ".", "save_dir", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor.add_path": [[18, 21], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "", "", "this_dir", "=", "osp", ".", "dirname", "(", "__file__", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor.get_dataset": [[26, 34], ["dataset.det.indoor_centernet.CenterIndoorDataset", "dataset.det.indoor_centernet.CenterIndoorDataset", "print"], "function", ["None"], ["def", "get_dataset", "(", "opt", ",", "dataset_name", "=", "\"openimgs\"", ")", ":", "\n", "    ", "if", "dataset_name", "==", "\"indoor\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown dataset.\"", ")", "\n", "return", "NotImplementedError", "\n", "", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor.get_distributed_dataloader": [[36, 66], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "len"], "function", ["None"], ["", "def", "get_distributed_dataloader", "(", "train_dataset", ",", "val_dataset", ")", ":", "\n", "    ", "if", "train_dataset", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Setting up training set...'", ")", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ",", "\n", "num_replicas", "=", "len", "(", "opt", ".", "gpus", ")", ",", "\n", "rank", "=", "opt", ".", "local_rank", ",", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Training set skipped...'", ")", "\n", "train_loader", "=", "None", "\n", "\n", "", "print", "(", "'Setting up validation set...'", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor.my_collate": [[67, 71], ["list", "default_collate", "filter"], "function", ["None"], ["", "def", "my_collate", "(", "batch", ")", ":", "\n", "    ", "\"Puts each data field into a tensor with outer dimension batch size\"", "\n", "batch", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", ")", "\n", "return", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor.get_distributed_concat_dataloader": [[72, 103], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "len"], "function", ["None"], ["", "def", "get_distributed_concat_dataloader", "(", "train_dataset_list", ",", "val_dataset_list", ")", ":", "\n", "\n", "    ", "if", "train_dataset_list", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Setting up training set...'", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset_list", ")", ",", "\n", "num_replicas", "=", "len", "(", "opt", ".", "gpus", ")", ",", "\n", "rank", "=", "opt", ".", "local_rank", ",", "\n", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset_list", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Training set skipped...'", ")", "\n", "train_loader", "=", "None", "\n", "\n", "", "print", "(", "'Setting up validation set...'", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "val_dataset_list", ")", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor.train": [[105, 167], ["range", "train_sampler.set_epoch", "trainer.train", "logger.write", "log_dict_train.items", "logger.write", "logger.scalar_summary", "logger.write", "models.model.save_model", "print", "log_dict_val.items", "print", "models.model.save_model", "print", "models.model.save_model", "print", "os.path.join", "os.path.join", "logger.scalar_summary", "logger.write", "print", "models.model.save_model", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.no_grad", "torch.no_grad", "trainer.val_for_eval", "torch.no_grad", "torch.no_grad", "trainer.val", "os.path.join", "os.path.join", "opt.lr_step.index"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val_for_eval", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val"], ["", "def", "train", "(", "model", ",", "optimizer", ",", "trainer", ",", "train_loader", ",", "val_loader", ",", "train_sampler", ",", "opt", ",", "logger", ")", ":", "\n", "\n", "    ", "best", "=", "1e10", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "cur_epoch", "+", "1", ",", "opt", ".", "num_epochs", "+", "1", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "'''\n        with torch.no_grad():\n            log_dict_val, preds = trainer.val_for_eval(epoch, val_loader)\n\n            print('Evaluating accuracy...')\n            val_loader.dataset.run_eval(preds, opt.save_dir)\n        '''", "\n", "mark", "=", "epoch", "if", "opt", ".", "save_all", "else", "'last'", "\n", "log_dict_train", ",", "_", "=", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ")", "\n", "logger", ".", "write", "(", "'epoch: {} |'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "log_dict_train", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "scalar_summary", "(", "'train_{}'", ".", "format", "(", "k", ")", ",", "v", ",", "epoch", ")", "\n", "logger", ".", "write", "(", "'{} {:8f} | '", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "opt", ".", "val_intervals", ">", "0", "and", "epoch", "%", "opt", ".", "val_intervals", "==", "0", ":", "\n", "            ", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "mark", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "opt", ".", "local_rank", ")", "\n", "\n", "print", "(", "'Performing validation...'", ")", "\n", "if", "epoch", "%", "(", "2", "*", "opt", ".", "val_intervals", ")", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "log_dict_val", ",", "preds", "=", "trainer", ".", "val_for_eval", "(", "epoch", ",", "val_loader", ")", "\n", "\n", "'''\n                    print('Evaluating accuracy...')\n                    val_loader.dataset.run_eval(preds, opt.save_dir)\n                    '''", "\n", "", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "log_dict_val", ",", "preds", "=", "trainer", ".", "val", "(", "epoch", ",", "val_loader", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "log_dict_val", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "scalar_summary", "(", "'val_{}'", ".", "format", "(", "k", ")", ",", "v", ",", "epoch", ")", "\n", "logger", ".", "write", "(", "'{} {:8f} | '", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "log_dict_val", "[", "opt", ".", "metric", "]", "<", "best", ":", "\n", "                ", "print", "(", "'Overwriting the current best model...'", ")", "\n", "best", "=", "log_dict_val", "[", "opt", ".", "metric", "]", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_best.pth'", ")", ",", "\n", "epoch", ",", "model", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Finishing...Saving the last model...'", ")", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_last.pth'", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "\n", "", "logger", ".", "write", "(", "'\\n'", ")", "\n", "if", "epoch", "in", "opt", ".", "lr_step", ":", "\n", "            ", "print", "(", "'Saving model...'", ")", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "epoch", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "lr", "=", "opt", ".", "lr", "*", "(", "0.1", "**", "(", "opt", ".", "lr_step", ".", "index", "(", "epoch", ")", "+", "1", ")", ")", "\n", "print", "(", "'Drop LR to'", ",", "lr", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor.validate": [[169, 176], ["print", "trainer.val", "print", "val_loader.dataset.run_eval"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.run_eval"], ["", "def", "validate", "(", "trainer", ",", "val_loader", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "test", ":", "\n", "        ", "print", "(", "'Performing validation...'", ")", "\n", "_", ",", "preds", "=", "trainer", ".", "val", "(", "0", ",", "val_loader", ")", "\n", "print", "(", "'Evaluating accuracy...'", ")", "\n", "val_loader", ".", "dataset", ".", "run_eval", "(", "preds", ",", "opt", ".", "save_dir", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512native.add_path": [[22, 25], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "", "", "this_dir", "=", "osp", ".", "dirname", "(", "__file__", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512native.get_dataset": [[30, 50], ["dataset.det.indoor_centernet.CenterIndoorDataset", "dataset.det.indoor_centernet.CenterIndoorDataset", "dataset.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset", "dataset.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset", "dataset.det.indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset", "dataset.det.indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset", "dataset.det.indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset", "dataset.det.indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset", "dataset.det.indoor_render512native_centernet.CenterIndoorRender512NativeDataset", "dataset.det.indoor_render512native_centernet.CenterIndoorRender512NativeDataset", "print"], "function", ["None"], ["def", "get_dataset", "(", "opt", ",", "dataset_name", "=", "\"openimgs\"", ")", ":", "\n", "    ", "if", "dataset_name", "==", "\"indoor\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "elif", "dataset_name", "==", "\"indoor_render256native\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorRender256NativeDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorRender256NativeDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "elif", "dataset_name", "==", "\"indoor_render512pixelSS\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorRender512PixelSSDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorRender512PixelSSDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "elif", "dataset_name", "==", "\"indoor_render512pointSS\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorRender512PointSSDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorRender512PointSSDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "elif", "dataset_name", "==", "\"indoor_render512native\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorRender512NativeDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorRender512NativeDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown dataset.\"", ")", "\n", "return", "NotImplementedError", "\n", "", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512native.get_distributed_dataloader": [[52, 82], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "len"], "function", ["None"], ["", "def", "get_distributed_dataloader", "(", "train_dataset", ",", "val_dataset", ")", ":", "\n", "    ", "if", "train_dataset", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Setting up training set...'", ")", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ",", "\n", "num_replicas", "=", "len", "(", "opt", ".", "gpus", ")", ",", "\n", "rank", "=", "opt", ".", "local_rank", ",", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Training set skipped...'", ")", "\n", "train_loader", "=", "None", "\n", "\n", "", "print", "(", "'Setting up validation set...'", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512native.my_collate": [[83, 87], ["list", "default_collate", "filter"], "function", ["None"], ["", "def", "my_collate", "(", "batch", ")", ":", "\n", "    ", "\"Puts each data field into a tensor with outer dimension batch size\"", "\n", "batch", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", ")", "\n", "return", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512native.get_distributed_concat_dataloader": [[88, 119], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "len"], "function", ["None"], ["", "def", "get_distributed_concat_dataloader", "(", "train_dataset_list", ",", "val_dataset_list", ")", ":", "\n", "\n", "    ", "if", "train_dataset_list", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Setting up training set...'", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset_list", ")", ",", "\n", "num_replicas", "=", "len", "(", "opt", ".", "gpus", ")", ",", "\n", "rank", "=", "opt", ".", "local_rank", ",", "\n", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset_list", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Training set skipped...'", ")", "\n", "train_loader", "=", "None", "\n", "\n", "", "print", "(", "'Setting up validation set...'", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "val_dataset_list", ")", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512native.train": [[121, 171], ["range", "train_sampler.set_epoch", "trainer.train", "logger.write", "log_dict_train.items", "logger.write", "logger.scalar_summary", "logger.write", "models.model.save_model", "print", "log_dict_val.items", "print", "models.model.save_model", "print", "models.model.save_model", "print", "os.path.join", "os.path.join", "logger.scalar_summary", "logger.write", "print", "models.model.save_model", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.no_grad", "torch.no_grad", "trainer.val_for_eval", "torch.no_grad", "torch.no_grad", "trainer.val", "os.path.join", "os.path.join", "opt.lr_step.index"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val_for_eval", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val"], ["", "def", "train", "(", "model", ",", "optimizer", ",", "trainer", ",", "train_loader", ",", "val_loader", ",", "train_sampler", ",", "opt", ",", "logger", ")", ":", "\n", "\n", "    ", "best", "=", "1e10", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "cur_epoch", "+", "1", ",", "opt", ".", "num_epochs", "+", "1", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "mark", "=", "epoch", "if", "opt", ".", "save_all", "else", "'last'", "\n", "log_dict_train", ",", "_", "=", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ")", "\n", "logger", ".", "write", "(", "'epoch: {} |'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "log_dict_train", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "scalar_summary", "(", "'train_{}'", ".", "format", "(", "k", ")", ",", "v", ",", "epoch", ")", "\n", "logger", ".", "write", "(", "'{} {:8f} | '", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "opt", ".", "val_intervals", ">", "0", "and", "epoch", "%", "opt", ".", "val_intervals", "==", "0", ":", "\n", "            ", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "mark", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "opt", ".", "local_rank", ")", "\n", "\n", "print", "(", "'Performing validation...'", ")", "\n", "if", "epoch", "%", "(", "2", "*", "opt", ".", "val_intervals", ")", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "log_dict_val", ",", "preds", "=", "trainer", ".", "val_for_eval", "(", "epoch", ",", "val_loader", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "log_dict_val", ",", "preds", "=", "trainer", ".", "val", "(", "epoch", ",", "val_loader", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "log_dict_val", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "scalar_summary", "(", "'val_{}'", ".", "format", "(", "k", ")", ",", "v", ",", "epoch", ")", "\n", "logger", ".", "write", "(", "'{} {:8f} | '", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "log_dict_val", "[", "opt", ".", "metric", "]", "<", "best", ":", "\n", "                ", "print", "(", "'Overwriting the current best model...'", ")", "\n", "best", "=", "log_dict_val", "[", "opt", ".", "metric", "]", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_best.pth'", ")", ",", "\n", "epoch", ",", "model", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Finishing...Saving the last model...'", ")", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_last.pth'", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "\n", "", "logger", ".", "write", "(", "'\\n'", ")", "\n", "if", "epoch", "in", "opt", ".", "lr_step", ":", "\n", "            ", "print", "(", "'Saving model...'", ")", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "epoch", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "lr", "=", "opt", ".", "lr", "*", "(", "0.1", "**", "(", "opt", ".", "lr_step", ".", "index", "(", "epoch", ")", "+", "1", ")", ")", "\n", "print", "(", "'Drop LR to'", ",", "lr", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512native.validate": [[173, 180], ["print", "trainer.val", "print", "val_loader.dataset.run_eval"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.run_eval"], ["", "def", "validate", "(", "trainer", ",", "val_loader", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "test", ":", "\n", "        ", "print", "(", "'Performing validation...'", ")", "\n", "_", ",", "preds", "=", "trainer", ".", "val", "(", "0", ",", "val_loader", ")", "\n", "print", "(", "'Evaluating accuracy...'", ")", "\n", "val_loader", ".", "dataset", ".", "run_eval", "(", "preds", ",", "opt", ".", "save_dir", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pixelSS.add_path": [[20, 23], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "", "", "this_dir", "=", "osp", ".", "dirname", "(", "__file__", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pixelSS.get_dataset": [[28, 42], ["dataset.det.indoor_centernet.CenterIndoorDataset", "dataset.det.indoor_centernet.CenterIndoorDataset", "dataset.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset", "dataset.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset", "dataset.det.indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset", "dataset.det.indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset", "print"], "function", ["None"], ["def", "get_dataset", "(", "opt", ",", "dataset_name", "=", "\"openimgs\"", ")", ":", "\n", "    ", "if", "dataset_name", "==", "\"indoor\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "elif", "dataset_name", "==", "\"indoor_render256native\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorRender256NativeDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorRender256NativeDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "elif", "dataset_name", "==", "\"indoor_render512pixelSS\"", ":", "\n", "        ", "train_dataset", "=", "CenterIndoorRender512PixelSSDataset", "(", "opt", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "CenterIndoorRender512PixelSSDataset", "(", "opt", ",", "split", "=", "'val'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown dataset.\"", ")", "\n", "return", "NotImplementedError", "\n", "", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pixelSS.get_distributed_dataloader": [[44, 74], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "len"], "function", ["None"], ["", "def", "get_distributed_dataloader", "(", "train_dataset", ",", "val_dataset", ")", ":", "\n", "    ", "if", "train_dataset", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Setting up training set...'", ")", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ",", "\n", "num_replicas", "=", "len", "(", "opt", ".", "gpus", ")", ",", "\n", "rank", "=", "opt", ".", "local_rank", ",", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Training set skipped...'", ")", "\n", "train_loader", "=", "None", "\n", "\n", "", "print", "(", "'Setting up validation set...'", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pixelSS.my_collate": [[75, 79], ["list", "default_collate", "filter"], "function", ["None"], ["", "def", "my_collate", "(", "batch", ")", ":", "\n", "    ", "\"Puts each data field into a tensor with outer dimension batch size\"", "\n", "batch", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", ")", "\n", "return", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pixelSS.get_distributed_concat_dataloader": [[80, 111], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "len"], "function", ["None"], ["", "def", "get_distributed_concat_dataloader", "(", "train_dataset_list", ",", "val_dataset_list", ")", ":", "\n", "\n", "    ", "if", "train_dataset_list", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Setting up training set...'", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset_list", ")", ",", "\n", "num_replicas", "=", "len", "(", "opt", ".", "gpus", ")", ",", "\n", "rank", "=", "opt", ".", "local_rank", ",", "\n", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset_list", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Training set skipped...'", ")", "\n", "train_loader", "=", "None", "\n", "\n", "", "print", "(", "'Setting up validation set...'", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "val_dataset_list", ")", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pixelSS.train": [[113, 163], ["range", "train_sampler.set_epoch", "trainer.train", "logger.write", "log_dict_train.items", "logger.write", "logger.scalar_summary", "logger.write", "models.model.save_model", "print", "log_dict_val.items", "print", "models.model.save_model", "print", "models.model.save_model", "print", "os.path.join", "os.path.join", "logger.scalar_summary", "logger.write", "print", "models.model.save_model", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.no_grad", "torch.no_grad", "trainer.val_for_eval", "torch.no_grad", "torch.no_grad", "trainer.val", "os.path.join", "os.path.join", "opt.lr_step.index"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.logger.Logger.write", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val_for_eval", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val"], ["", "def", "train", "(", "model", ",", "optimizer", ",", "trainer", ",", "train_loader", ",", "val_loader", ",", "train_sampler", ",", "opt", ",", "logger", ")", ":", "\n", "\n", "    ", "best", "=", "1e10", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "cur_epoch", "+", "1", ",", "opt", ".", "num_epochs", "+", "1", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "mark", "=", "epoch", "if", "opt", ".", "save_all", "else", "'last'", "\n", "log_dict_train", ",", "_", "=", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ")", "\n", "logger", ".", "write", "(", "'epoch: {} |'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "log_dict_train", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "scalar_summary", "(", "'train_{}'", ".", "format", "(", "k", ")", ",", "v", ",", "epoch", ")", "\n", "logger", ".", "write", "(", "'{} {:8f} | '", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "opt", ".", "val_intervals", ">", "0", "and", "epoch", "%", "opt", ".", "val_intervals", "==", "0", ":", "\n", "            ", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "mark", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "opt", ".", "local_rank", ")", "\n", "\n", "print", "(", "'Performing validation...'", ")", "\n", "if", "epoch", "%", "(", "2", "*", "opt", ".", "val_intervals", ")", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "log_dict_val", ",", "preds", "=", "trainer", ".", "val_for_eval", "(", "epoch", ",", "val_loader", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "log_dict_val", ",", "preds", "=", "trainer", ".", "val", "(", "epoch", ",", "val_loader", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "log_dict_val", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "scalar_summary", "(", "'val_{}'", ".", "format", "(", "k", ")", ",", "v", ",", "epoch", ")", "\n", "logger", ".", "write", "(", "'{} {:8f} | '", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "log_dict_val", "[", "opt", ".", "metric", "]", "<", "best", ":", "\n", "                ", "print", "(", "'Overwriting the current best model...'", ")", "\n", "best", "=", "log_dict_val", "[", "opt", ".", "metric", "]", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_best.pth'", ")", ",", "\n", "epoch", ",", "model", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Finishing...Saving the last model...'", ")", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_last.pth'", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "\n", "", "logger", ".", "write", "(", "'\\n'", ")", "\n", "if", "epoch", "in", "opt", ".", "lr_step", ":", "\n", "            ", "print", "(", "'Saving model...'", ")", "\n", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "epoch", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ",", "rank", "=", "opt", ".", "local_rank", ")", "\n", "lr", "=", "opt", ".", "lr", "*", "(", "0.1", "**", "(", "opt", ".", "lr_step", ".", "index", "(", "epoch", ")", "+", "1", ")", ")", "\n", "print", "(", "'Drop LR to'", ",", "lr", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.DANR-det.train_distributed_indoor_render512pixelSS.validate": [[165, 172], ["print", "trainer.val", "print", "val_loader.dataset.run_eval"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.run_eval"], ["", "def", "validate", "(", "trainer", ",", "val_loader", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "test", ":", "\n", "        ", "print", "(", "'Performing validation...'", ")", "\n", "_", ",", "preds", "=", "trainer", ".", "val", "(", "0", ",", "val_loader", ")", "\n", "print", "(", "'Evaluating accuracy...'", ")", "\n", "val_loader", ".", "dataset", ".", "run_eval", "(", "preds", ",", "opt", ".", "save_dir", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.__init__": [[9, 66], ["numpy.array().reshape", "len", "color_list[].astype", "len", "[].reshape", "numpy.clip().astype", "range", "numpy.array", "len", "len", "numpy.clip", "debugger.Debugger.colors.reshape"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "ipynb", "=", "False", ",", "theme", "=", "'black'", ",", "\n", "num_classes", "=", "-", "1", ",", "dataset", "=", "None", ",", "down_ratio", "=", "4", ")", ":", "\n", "    ", "self", ".", "ipynb", "=", "ipynb", "\n", "if", "not", "self", ".", "ipynb", ":", "\n", "      ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "self", ".", "plt", "=", "plt", "\n", "", "else", ":", "\n", "      ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "self", ".", "plt", "=", "plt", "\n", "", "self", ".", "imgs", "=", "{", "}", "\n", "self", ".", "theme", "=", "theme", "\n", "colors", "=", "[", "(", "color_list", "[", "_", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "for", "_", "in", "range", "(", "len", "(", "color_list", ")", ")", "]", "\n", "self", ".", "colors", "=", "np", ".", "array", "(", "colors", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "reshape", "(", "len", "(", "colors", ")", ",", "1", ",", "1", ",", "3", ")", "\n", "if", "self", ".", "theme", "==", "'white'", ":", "\n", "      ", "self", ".", "colors", "=", "self", ".", "colors", ".", "reshape", "(", "-", "1", ")", "[", ":", ":", "-", "1", "]", ".", "reshape", "(", "len", "(", "colors", ")", ",", "1", ",", "1", ",", "3", ")", "\n", "self", ".", "colors", "=", "np", ".", "clip", "(", "self", ".", "colors", ",", "0.", ",", "0.6", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "self", ".", "dim_scale", "=", "1", "\n", "if", "dataset", "==", "'coco_hp'", ":", "\n", "      ", "self", ".", "names", "=", "[", "'p'", "]", "\n", "self", ".", "num_class", "=", "1", "\n", "self", ".", "num_joints", "=", "17", "\n", "self", ".", "edges", "=", "[", "[", "0", ",", "1", "]", ",", "[", "0", ",", "2", "]", ",", "[", "1", ",", "3", "]", ",", "[", "2", ",", "4", "]", ",", "\n", "[", "3", ",", "5", "]", ",", "[", "4", ",", "6", "]", ",", "[", "5", ",", "6", "]", ",", "\n", "[", "5", ",", "7", "]", ",", "[", "7", ",", "9", "]", ",", "[", "6", ",", "8", "]", ",", "[", "8", ",", "10", "]", ",", "\n", "[", "5", ",", "11", "]", ",", "[", "6", ",", "12", "]", ",", "[", "11", ",", "12", "]", ",", "\n", "[", "11", ",", "13", "]", ",", "[", "13", ",", "15", "]", ",", "[", "12", ",", "14", "]", ",", "[", "14", ",", "16", "]", "]", "\n", "self", ".", "ec", "=", "[", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "(", "255", ",", "0", ",", "255", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "(", "255", ",", "0", ",", "255", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "(", "0", ",", "0", ",", "255", ")", "]", "\n", "self", ".", "colors_hp", "=", "[", "(", "255", ",", "0", ",", "255", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "255", ")", "]", "\n", "", "elif", "num_classes", "==", "80", "or", "dataset", "==", "'coco'", ":", "\n", "      ", "self", ".", "names", "=", "coco_class_name", "\n", "", "elif", "num_classes", "==", "20", "or", "dataset", "==", "'pascal'", ":", "\n", "      ", "self", ".", "names", "=", "pascal_class_name", "\n", "", "elif", "num_classes", "==", "27", "or", "dataset", "==", "'openimgs'", ":", "\n", "      ", "self", ".", "names", "=", "openimgs_class_name", "\n", "", "elif", "num_classes", "==", "40", "or", "dataset", "==", "'flags'", ":", "\n", "      ", "self", ".", "names", "=", "flags_class_name", "\n", "", "elif", "num_classes", "==", "352", "or", "dataset", "==", "'openlogo'", ":", "\n", "      ", "self", ".", "names", "=", "openlogo_class_name", "\n", "", "elif", "num_classes", "==", "1", "or", "dataset", "==", "'logodet3k'", ":", "\n", "      ", "self", ".", "names", "=", "logodet3k_class_name", "\n", "", "elif", "num_classes", "==", "7", "or", "dataset", "==", "'indoor'", ":", "\n", "        ", "self", ".", "names", "=", "indoor_class_name", "\n", "\n", "", "num_classes", "=", "len", "(", "self", ".", "names", ")", "\n", "self", ".", "down_ratio", "=", "down_ratio", "\n", "# for bird view", "\n", "self", ".", "world_size", "=", "64", "\n", "self", ".", "out_size", "=", "384", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_img": [[67, 71], ["img.copy"], "methods", ["None"], ["", "def", "add_img", "(", "self", ",", "img", ",", "img_id", "=", "'default'", ",", "revert_color", "=", "False", ")", ":", "\n", "    ", "if", "revert_color", ":", "\n", "      ", "img", "=", "255", "-", "img", "\n", "", "self", ".", "imgs", "[", "img_id", "]", "=", "img", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_mask": [[72, 76], ["mask.reshape"], "methods", ["None"], ["", "def", "add_mask", "(", "self", ",", "mask", ",", "bg", ",", "imgId", "=", "'default'", ",", "trans", "=", "0.8", ")", ":", "\n", "    ", "self", ".", "imgs", "[", "imgId", "]", "=", "(", "mask", ".", "reshape", "(", "\n", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ",", "1", ")", "*", "255", "*", "trans", "+", "bg", "*", "(", "1", "-", "trans", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.show_img": [[77, 81], ["cv2.imshow", "cv2.waitKey"], "methods", ["None"], ["", "def", "show_img", "(", "self", ",", "pause", "=", "False", ",", "imgId", "=", "'default'", ")", ":", "\n", "    ", "cv2", ".", "imshow", "(", "'{}'", ".", "format", "(", "imgId", ")", ",", "self", ".", "imgs", "[", "imgId", "]", ")", "\n", "if", "pause", ":", "\n", "      ", "cv2", ".", "waitKey", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_blend_img": [[82, 93], ["debugger.Debugger.imgs[].astype().copy", "cv2.resize", "len", "fore.reshape.reshape.reshape", "debugger.Debugger.imgs[].astype"], "methods", ["None"], ["", "", "def", "add_blend_img", "(", "self", ",", "back", ",", "fore", ",", "img_id", "=", "'blend'", ",", "trans", "=", "0.7", ")", ":", "\n", "    ", "if", "self", ".", "theme", "==", "'white'", ":", "\n", "      ", "fore", "=", "255", "-", "fore", "\n", "", "if", "fore", ".", "shape", "[", "0", "]", "!=", "back", ".", "shape", "[", "0", "]", "or", "fore", ".", "shape", "[", "0", "]", "!=", "back", ".", "shape", "[", "1", "]", ":", "\n", "      ", "fore", "=", "cv2", ".", "resize", "(", "fore", ",", "(", "back", ".", "shape", "[", "1", "]", ",", "back", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "len", "(", "fore", ".", "shape", ")", "==", "2", ":", "\n", "      ", "fore", "=", "fore", ".", "reshape", "(", "fore", ".", "shape", "[", "0", "]", ",", "fore", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "", "self", ".", "imgs", "[", "img_id", "]", "=", "(", "back", "*", "(", "1.", "-", "trans", ")", "+", "fore", "*", "trans", ")", "\n", "self", ".", "imgs", "[", "img_id", "]", "[", "self", ".", "imgs", "[", "img_id", "]", ">", "255", "]", "=", "255", "\n", "self", ".", "imgs", "[", "img_id", "]", "[", "self", ".", "imgs", "[", "img_id", "]", "<", "0", "]", "=", "0", "\n", "self", ".", "imgs", "[", "img_id", "]", "=", "self", ".", "imgs", "[", "img_id", "]", ".", "astype", "(", "np", ".", "uint8", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.gen_colormap": [[95, 108], ["img.transpose().reshape().astype.transpose().reshape().astype.copy", "img.transpose().reshape().astype.transpose().reshape().astype.transpose().reshape().astype", "[].reshape", "cv2.resize", "img.transpose().reshape().astype.transpose().reshape().astype.transpose().reshape", "numpy.array().reshape", "img.transpose().reshape().astype.transpose().reshape().astype.transpose", "numpy.array"], "methods", ["None"], ["", "def", "gen_colormap", "(", "self", ",", "img", ",", "output_res", "=", "None", ")", ":", "\n", "    ", "img", "=", "img", ".", "copy", "(", ")", "\n", "c", ",", "h", ",", "w", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", "\n", "if", "output_res", "is", "None", ":", "\n", "      ", "output_res", "=", "(", "h", "*", "self", ".", "down_ratio", ",", "w", "*", "self", ".", "down_ratio", ")", "\n", "", "img", "=", "img", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "h", ",", "w", ",", "c", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "colors", "=", "np", ".", "array", "(", "\n", "self", ".", "colors", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "[", ":", "c", "]", ".", "reshape", "(", "1", ",", "1", ",", "c", ",", "3", ")", "\n", "if", "self", ".", "theme", "==", "'white'", ":", "\n", "      ", "colors", "=", "255", "-", "colors", "\n", "", "color_map", "=", "(", "img", "*", "colors", ")", ".", "max", "(", "axis", "=", "2", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "color_map", "=", "cv2", ".", "resize", "(", "color_map", ",", "(", "output_res", "[", "0", "]", ",", "output_res", "[", "1", "]", ")", ")", "\n", "return", "color_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.gen_colormap_hp": [[110, 122], ["img.transpose().reshape().astype.transpose().reshape().astype.transpose().reshape().astype", "[].reshape", "cv2.resize", "img.transpose().reshape().astype.transpose().reshape().astype.transpose().reshape", "numpy.array().reshape", "img.transpose().reshape().astype.transpose().reshape().astype.transpose", "numpy.array"], "methods", ["None"], ["", "def", "gen_colormap_hp", "(", "self", ",", "img", ",", "output_res", "=", "None", ")", ":", "\n", "    ", "c", ",", "h", ",", "w", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", "\n", "if", "output_res", "is", "None", ":", "\n", "      ", "output_res", "=", "(", "h", "*", "self", ".", "down_ratio", ",", "w", "*", "self", ".", "down_ratio", ")", "\n", "", "img", "=", "img", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "h", ",", "w", ",", "c", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "colors", "=", "np", ".", "array", "(", "\n", "self", ".", "colors_hp", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "[", ":", "c", "]", ".", "reshape", "(", "1", ",", "1", ",", "c", ",", "3", ")", "\n", "if", "self", ".", "theme", "==", "'white'", ":", "\n", "      ", "colors", "=", "255", "-", "colors", "\n", "", "color_map", "=", "(", "img", "*", "colors", ")", ".", "max", "(", "axis", "=", "2", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "color_map", "=", "cv2", ".", "resize", "(", "color_map", ",", "(", "output_res", "[", "0", "]", ",", "output_res", "[", "1", "]", ")", ")", "\n", "return", "color_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_rect": [[124, 132], ["cv2.rectangle", "cv2.circle", "cv2.circle", "cv2.circle", "cv2.circle", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "add_rect", "(", "self", ",", "rect1", ",", "rect2", ",", "c", ",", "conf", "=", "1", ",", "img_id", "=", "'default'", ")", ":", "\n", "    ", "cv2", ".", "rectangle", "(", "\n", "self", ".", "imgs", "[", "img_id", "]", ",", "(", "rect1", "[", "0", "]", ",", "rect1", "[", "1", "]", ")", ",", "(", "rect2", "[", "0", "]", ",", "rect2", "[", "1", "]", ")", ",", "c", ",", "2", ")", "\n", "if", "conf", "<", "1", ":", "\n", "      ", "cv2", ".", "circle", "(", "self", ".", "imgs", "[", "img_id", "]", ",", "(", "rect1", "[", "0", "]", ",", "rect1", "[", "1", "]", ")", ",", "int", "(", "10", "*", "conf", ")", ",", "c", ",", "1", ")", "\n", "cv2", ".", "circle", "(", "self", ".", "imgs", "[", "img_id", "]", ",", "(", "rect2", "[", "0", "]", ",", "rect2", "[", "1", "]", ")", ",", "int", "(", "10", "*", "conf", ")", ",", "c", ",", "1", ")", "\n", "cv2", ".", "circle", "(", "self", ".", "imgs", "[", "img_id", "]", ",", "(", "rect1", "[", "0", "]", ",", "rect2", "[", "1", "]", ")", ",", "int", "(", "10", "*", "conf", ")", ",", "c", ",", "1", ")", "\n", "cv2", ".", "circle", "(", "self", ".", "imgs", "[", "img_id", "]", ",", "(", "rect2", "[", "0", "]", ",", "rect1", "[", "1", "]", ")", ",", "int", "(", "10", "*", "conf", ")", ",", "c", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_coco_bbox": [[133, 152], ["numpy.array", "int", "[].tolist", "cv2.rectangle", "cv2.getTextSize", "cv2.rectangle", "cv2.putText", "numpy.array"], "methods", ["None"], ["", "", "def", "add_coco_bbox", "(", "self", ",", "bbox", ",", "cat", ",", "conf", "=", "1", ",", "show_txt", "=", "True", ",", "img_id", "=", "'default'", ")", ":", "\n", "    ", "bbox", "=", "np", ".", "array", "(", "bbox", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# cat = (int(cat) + 1) % 80", "\n", "cat", "=", "int", "(", "cat", ")", "\n", "# print('cat', cat, self.names[cat])", "\n", "c", "=", "self", ".", "colors", "[", "cat", "]", "[", "0", "]", "[", "0", "]", ".", "tolist", "(", ")", "\n", "if", "self", ".", "theme", "==", "'white'", ":", "\n", "      ", "c", "=", "(", "255", "-", "np", ".", "array", "(", "c", ")", ")", ".", "tolist", "(", ")", "\n", "", "txt", "=", "'{}{:.1f}'", ".", "format", "(", "self", ".", "names", "[", "cat", "]", ",", "conf", ")", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "cat_size", "=", "cv2", ".", "getTextSize", "(", "txt", ",", "font", ",", "0.5", ",", "2", ")", "[", "0", "]", "\n", "cv2", ".", "rectangle", "(", "\n", "self", ".", "imgs", "[", "img_id", "]", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "(", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ")", ",", "c", ",", "2", ")", "\n", "if", "show_txt", ":", "\n", "      ", "cv2", ".", "rectangle", "(", "self", ".", "imgs", "[", "img_id", "]", ",", "\n", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "cat_size", "[", "1", "]", "-", "2", ")", ",", "\n", "(", "bbox", "[", "0", "]", "+", "cat_size", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ")", ",", "c", ",", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "self", ".", "imgs", "[", "img_id", "]", ",", "txt", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ")", ",", "\n", "font", ",", "0.5", ",", "(", "0", ",", "0", ",", "0", ")", ",", "thickness", "=", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_coco_hp": [[153, 163], ["numpy.array().reshape", "range", "enumerate", "cv2.circle", "numpy.array", "points[].min", "cv2.line"], "methods", ["None"], ["", "", "def", "add_coco_hp", "(", "self", ",", "points", ",", "img_id", "=", "'default'", ")", ":", "\n", "    ", "points", "=", "np", ".", "array", "(", "points", ",", "dtype", "=", "np", ".", "int32", ")", ".", "reshape", "(", "self", ".", "num_joints", ",", "2", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "num_joints", ")", ":", "\n", "      ", "cv2", ".", "circle", "(", "self", ".", "imgs", "[", "img_id", "]", ",", "\n", "(", "points", "[", "j", ",", "0", "]", ",", "points", "[", "j", ",", "1", "]", ")", ",", "3", ",", "self", ".", "colors_hp", "[", "j", "]", ",", "-", "1", ")", "\n", "", "for", "j", ",", "e", "in", "enumerate", "(", "self", ".", "edges", ")", ":", "\n", "      ", "if", "points", "[", "e", "]", ".", "min", "(", ")", ">", "0", ":", "\n", "        ", "cv2", ".", "line", "(", "self", ".", "imgs", "[", "img_id", "]", ",", "(", "points", "[", "e", "[", "0", "]", ",", "0", "]", ",", "points", "[", "e", "[", "0", "]", ",", "1", "]", ")", ",", "\n", "(", "points", "[", "e", "[", "1", "]", ",", "0", "]", ",", "points", "[", "e", "[", "1", "]", ",", "1", "]", ")", ",", "self", ".", "ec", "[", "j", "]", ",", "2", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_points": [[164, 176], ["len", "range", "range", "len", "cv2.circle", "cv2.circle", "int", "int", "int"], "methods", ["None"], ["", "", "", "def", "add_points", "(", "self", ",", "points", ",", "img_id", "=", "'default'", ")", ":", "\n", "    ", "num_classes", "=", "len", "(", "points", ")", "\n", "# assert num_classes == len(self.colors)", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "len", "(", "points", "[", "i", "]", ")", ")", ":", "\n", "        ", "c", "=", "self", ".", "colors", "[", "i", ",", "0", ",", "0", "]", "\n", "cv2", ".", "circle", "(", "self", ".", "imgs", "[", "img_id", "]", ",", "(", "points", "[", "i", "]", "[", "j", "]", "[", "0", "]", "*", "self", ".", "down_ratio", ",", "\n", "points", "[", "i", "]", "[", "j", "]", "[", "1", "]", "*", "self", ".", "down_ratio", ")", ",", "\n", "5", ",", "(", "255", ",", "255", ",", "255", ")", ",", "-", "1", ")", "\n", "cv2", ".", "circle", "(", "self", ".", "imgs", "[", "img_id", "]", ",", "(", "points", "[", "i", "]", "[", "j", "]", "[", "0", "]", "*", "self", ".", "down_ratio", ",", "\n", "points", "[", "i", "]", "[", "j", "]", "[", "1", "]", "*", "self", ".", "down_ratio", ")", ",", "\n", "3", ",", "(", "int", "(", "c", "[", "0", "]", ")", ",", "int", "(", "c", "[", "1", "]", ")", ",", "int", "(", "c", "[", "2", "]", ")", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.show_all_imgs": [[177, 197], ["debugger.Debugger.imgs.items", "len", "debugger.Debugger.plt.figure", "enumerate", "debugger.Debugger.plt.show", "cv2.imshow", "cv2.waitKey", "sys.exit", "debugger.Debugger.imgs.items", "debugger.Debugger.add_subplot", "len", "debugger.Debugger.plt.imshow", "debugger.Debugger.plt.imshow", "cv2.cvtColor"], "methods", ["None"], ["", "", "", "def", "show_all_imgs", "(", "self", ",", "pause", "=", "False", ",", "time", "=", "0", ")", ":", "\n", "    ", "if", "not", "self", ".", "ipynb", ":", "\n", "      ", "for", "i", ",", "v", "in", "self", ".", "imgs", ".", "items", "(", ")", ":", "\n", "        ", "cv2", ".", "imshow", "(", "'{}'", ".", "format", "(", "i", ")", ",", "v", ")", "\n", "", "if", "cv2", ".", "waitKey", "(", "0", "if", "pause", "else", "1", ")", "==", "27", ":", "\n", "        ", "import", "sys", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "ax", "=", "None", "\n", "nImgs", "=", "len", "(", "self", ".", "imgs", ")", "\n", "fig", "=", "self", ".", "plt", ".", "figure", "(", "figsize", "=", "(", "nImgs", "*", "10", ",", "10", ")", ")", "\n", "nCols", "=", "nImgs", "\n", "nRows", "=", "nImgs", "//", "nCols", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "self", ".", "imgs", ".", "items", "(", ")", ")", ":", "\n", "        ", "fig", ".", "add_subplot", "(", "1", ",", "nImgs", ",", "i", "+", "1", ")", "\n", "if", "len", "(", "v", ".", "shape", ")", "==", "3", ":", "\n", "          ", "self", ".", "plt", ".", "imshow", "(", "cv2", ".", "cvtColor", "(", "v", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "plt", ".", "imshow", "(", "v", ")", "\n", "", "", "self", ".", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.save_img": [[198, 200], ["cv2.imwrite"], "methods", ["None"], ["", "", "def", "save_img", "(", "self", ",", "imgId", "=", "'default'", ",", "path", "=", "'./cache/debug/'", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "path", "+", "'{}_{}.png'", ".", "format", "(", "imgId", ",", "prefix", ")", ",", "self", ".", "imgs", "[", "imgId", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.save_all_imgs": [[201, 212], ["debugger.Debugger.imgs.items", "numpy.savetxt", "print", "cv2.imwrite", "int", "numpy.loadtxt", "numpy.ones"], "methods", ["None"], ["", "def", "save_all_imgs", "(", "self", ",", "path", "=", "'./cache/debug/'", ",", "prefix", "=", "''", ",", "genID", "=", "False", ")", ":", "\n", "    ", "if", "genID", ":", "\n", "      ", "try", ":", "\n", "        ", "idx", "=", "int", "(", "np", ".", "loadtxt", "(", "path", "+", "'/id.txt'", ")", ")", "\n", "", "except", ":", "\n", "        ", "idx", "=", "0", "\n", "", "prefix", "=", "idx", "\n", "np", ".", "savetxt", "(", "path", "+", "'/id.txt'", ",", "np", ".", "ones", "(", "1", ")", "*", "(", "idx", "+", "1", ")", ",", "fmt", "=", "'%d'", ")", "\n", "", "for", "i", ",", "v", "in", "self", ".", "imgs", ".", "items", "(", ")", ":", "\n", "      ", "print", "(", "\"writing image to:\"", ",", "path", "+", "'/{}{}.png'", ".", "format", "(", "prefix", ",", "i", ")", ")", "\n", "cv2", ".", "imwrite", "(", "path", "+", "'/{}{}.png'", ".", "format", "(", "prefix", ",", "i", ")", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.remove_side": [[213, 231], ["img.sum().sum", "img.sum().sum", "[].copy", "img.sum", "len", "img.sum", "len"], "methods", ["None"], ["", "", "def", "remove_side", "(", "self", ",", "img_id", ",", "img", ")", ":", "\n", "    ", "if", "not", "(", "img_id", "in", "self", ".", "imgs", ")", ":", "\n", "      ", "return", "\n", "", "ws", "=", "img", ".", "sum", "(", "axis", "=", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "l", "=", "0", "\n", "while", "ws", "[", "l", "]", "==", "0", "and", "l", "<", "len", "(", "ws", ")", ":", "\n", "      ", "l", "+=", "1", "\n", "", "r", "=", "ws", ".", "shape", "[", "0", "]", "-", "1", "\n", "while", "ws", "[", "r", "]", "==", "0", "and", "r", ">", "0", ":", "\n", "      ", "r", "-=", "1", "\n", "", "hs", "=", "img", ".", "sum", "(", "axis", "=", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "t", "=", "0", "\n", "while", "hs", "[", "t", "]", "==", "0", "and", "t", "<", "len", "(", "hs", ")", ":", "\n", "      ", "t", "+=", "1", "\n", "", "b", "=", "hs", ".", "shape", "[", "0", "]", "-", "1", "\n", "while", "hs", "[", "b", "]", "==", "0", "and", "b", ">", "0", ":", "\n", "      ", "b", "-=", "1", "\n", "", "self", ".", "imgs", "[", "img_id", "]", "=", "self", ".", "imgs", "[", "img_id", "]", "[", "t", ":", "b", "+", "1", ",", "l", ":", "r", "+", "1", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_ct_detection": [[233, 267], ["img.copy", "type", "type", "range", "range", "len", "len", "int", "cv2.circle", "debugger.Debugger.colors[].tolist", "[].astype", "dets[].astype", "numpy.array", "debugger.Debugger.add_coco_bbox", "numpy.array", "debugger.Debugger.add_coco_bbox"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.add_coco_bbox", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.add_coco_bbox"], ["", "def", "add_ct_detection", "(", "\n", "self", ",", "img", ",", "dets", ",", "show_box", "=", "False", ",", "show_txt", "=", "True", ",", "\n", "center_thresh", "=", "0.5", ",", "img_id", "=", "'det'", ")", ":", "\n", "# dets: max_preds x 5", "\n", "    ", "self", ".", "imgs", "[", "img_id", "]", "=", "img", ".", "copy", "(", ")", "\n", "if", "type", "(", "dets", ")", "==", "type", "(", "{", "}", ")", ":", "\n", "      ", "for", "cat", "in", "dets", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "dets", "[", "cat", "]", ")", ")", ":", "\n", "          ", "if", "dets", "[", "cat", "]", "[", "i", ",", "2", "]", ">", "center_thresh", ":", "\n", "            ", "cl", "=", "(", "self", ".", "colors", "[", "cat", ",", "0", ",", "0", "]", ")", ".", "tolist", "(", ")", "\n", "ct", "=", "dets", "[", "cat", "]", "[", "i", ",", ":", "2", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "if", "show_box", ":", "\n", "              ", "w", ",", "h", "=", "dets", "[", "cat", "]", "[", "i", ",", "-", "2", "]", ",", "dets", "[", "cat", "]", "[", "i", ",", "-", "1", "]", "\n", "x", ",", "y", "=", "dets", "[", "cat", "]", "[", "i", ",", "0", "]", ",", "dets", "[", "cat", "]", "[", "i", ",", "1", "]", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x", "-", "w", "/", "2", ",", "y", "-", "h", "/", "2", ",", "x", "+", "w", "/", "2", ",", "y", "+", "h", "/", "2", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "add_coco_bbox", "(", "\n", "bbox", ",", "cat", "-", "1", ",", "dets", "[", "cat", "]", "[", "i", ",", "2", "]", ",", "\n", "show_txt", "=", "show_txt", ",", "img_id", "=", "img_id", ")", "\n", "", "", "", "", "", "else", ":", "\n", "      ", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", ":", "\n", "        ", "if", "dets", "[", "i", ",", "2", "]", ">", "center_thresh", ":", "\n", "# print('dets', dets[i])", "\n", "          ", "cat", "=", "int", "(", "dets", "[", "i", ",", "-", "1", "]", ")", "\n", "cl", "=", "(", "self", ".", "colors", "[", "cat", ",", "0", ",", "0", "]", "if", "self", ".", "theme", "==", "'black'", "else", "255", "-", "self", ".", "colors", "[", "cat", ",", "0", ",", "0", "]", ")", ".", "tolist", "(", ")", "\n", "ct", "=", "dets", "[", "i", ",", ":", "2", "]", ".", "astype", "(", "np", ".", "int32", ")", "*", "self", ".", "down_ratio", "\n", "cv2", ".", "circle", "(", "self", ".", "imgs", "[", "img_id", "]", ",", "(", "ct", "[", "0", "]", ",", "ct", "[", "1", "]", ")", ",", "3", ",", "cl", ",", "-", "1", ")", "\n", "if", "show_box", ":", "\n", "            ", "w", ",", "h", "=", "dets", "[", "i", ",", "-", "3", "]", "*", "self", ".", "down_ratio", ",", "dets", "[", "i", ",", "-", "2", "]", "*", "self", ".", "down_ratio", "\n", "x", ",", "y", "=", "dets", "[", "i", ",", "0", "]", "*", "self", ".", "down_ratio", ",", "dets", "[", "i", ",", "1", "]", "*", "self", ".", "down_ratio", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x", "-", "w", "/", "2", ",", "y", "-", "h", "/", "2", ",", "x", "+", "w", "/", "2", ",", "y", "+", "h", "/", "2", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "add_coco_bbox", "(", "bbox", ",", "dets", "[", "i", ",", "-", "1", "]", ",", "dets", "[", "i", ",", "2", "]", ",", "img_id", "=", "img_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_2d_detection": [[269, 281], ["range", "len", "debugger.Debugger.colors[].tolist", "debugger.Debugger.add_coco_bbox"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.add_coco_bbox"], ["", "", "", "", "", "def", "add_2d_detection", "(", "\n", "self", ",", "img", ",", "dets", ",", "show_box", "=", "False", ",", "show_txt", "=", "True", ",", "\n", "center_thresh", "=", "0.5", ",", "img_id", "=", "'det'", ")", ":", "\n", "    ", "self", ".", "imgs", "[", "img_id", "]", "=", "img", "\n", "for", "cat", "in", "dets", ":", "\n", "      ", "for", "i", "in", "range", "(", "len", "(", "dets", "[", "cat", "]", ")", ")", ":", "\n", "        ", "cl", "=", "(", "self", ".", "colors", "[", "cat", "-", "1", ",", "0", ",", "0", "]", ")", ".", "tolist", "(", ")", "\n", "if", "dets", "[", "cat", "]", "[", "i", ",", "-", "1", "]", ">", "center_thresh", ":", "\n", "          ", "bbox", "=", "dets", "[", "cat", "]", "[", "i", ",", "1", ":", "5", "]", "\n", "self", ".", "add_coco_bbox", "(", "\n", "bbox", ",", "cat", "-", "1", ",", "dets", "[", "cat", "]", "[", "i", ",", "-", "1", "]", ",", "\n", "show_txt", "=", "show_txt", ",", "img_id", "=", "img_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.oracle_utils.gen_oracle_map": [[8, 43], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "numpy.zeros", "numpy.zeros", "range"], "function", ["None"], ["@", "numba", ".", "jit", "(", "nopython", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "gen_oracle_map", "(", "feat", ",", "ind", ",", "w", ",", "h", ")", ":", "\n", "# feat: B x maxN x featDim", "\n", "# ind: B x maxN", "\n", "  ", "batch_size", "=", "feat", ".", "shape", "[", "0", "]", "\n", "max_objs", "=", "feat", ".", "shape", "[", "1", "]", "\n", "feat_dim", "=", "feat", ".", "shape", "[", "2", "]", "\n", "out", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "feat_dim", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vis", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ds", "=", "[", "(", "0", ",", "1", ")", ",", "(", "0", ",", "-", "1", ")", ",", "(", "1", ",", "0", ")", ",", "(", "-", "1", ",", "0", ")", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "    ", "queue_ind", "=", "np", ".", "zeros", "(", "(", "h", "*", "w", "*", "2", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "queue_feat", "=", "np", ".", "zeros", "(", "(", "h", "*", "w", "*", "2", ",", "feat_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "head", ",", "tail", "=", "0", ",", "0", "\n", "for", "j", "in", "range", "(", "max_objs", ")", ":", "\n", "      ", "if", "ind", "[", "i", "]", "[", "j", "]", ">", "0", ":", "\n", "        ", "x", ",", "y", "=", "ind", "[", "i", "]", "[", "j", "]", "%", "w", ",", "ind", "[", "i", "]", "[", "j", "]", "//", "w", "\n", "out", "[", "i", ",", ":", ",", "y", ",", "x", "]", "=", "feat", "[", "i", "]", "[", "j", "]", "\n", "vis", "[", "i", ",", "y", ",", "x", "]", "=", "1", "\n", "queue_ind", "[", "tail", "]", "=", "x", ",", "y", "\n", "queue_feat", "[", "tail", "]", "=", "feat", "[", "i", "]", "[", "j", "]", "\n", "tail", "+=", "1", "\n", "", "", "while", "tail", "-", "head", ">", "0", ":", "\n", "      ", "x", ",", "y", "=", "queue_ind", "[", "head", "]", "\n", "f", "=", "queue_feat", "[", "head", "]", "\n", "head", "+=", "1", "\n", "for", "(", "dx", ",", "dy", ")", "in", "ds", ":", "\n", "        ", "xx", ",", "yy", "=", "x", "+", "dx", ",", "y", "+", "dy", "\n", "if", "xx", ">=", "0", "and", "yy", ">=", "0", "and", "xx", "<", "w", "and", "yy", "<", "h", "and", "vis", "[", "i", ",", "yy", ",", "xx", "]", "<", "1", ":", "\n", "          ", "out", "[", "i", ",", ":", ",", "yy", ",", "xx", "]", "=", "f", "\n", "vis", "[", "i", ",", "yy", ",", "xx", "]", "=", "1", "\n", "queue_ind", "[", "tail", "]", "=", "xx", ",", "yy", "\n", "queue_feat", "[", "tail", "]", "=", "f", "\n", "tail", "+=", "1", "\n", "", "", "", "", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.post_process.centernet_post_process": [[8, 26], ["range", "image.transform_preds", "image.transform_preds", "range", "ret.append", "numpy.concatenate().tolist", "numpy.concatenate", "dets[].astype", "dets[].astype"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.transform_preds", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.transform_preds"], ["def", "centernet_post_process", "(", "dets", ",", "c", ",", "s", ",", "h", ",", "w", ",", "num_classes", ")", ":", "\n", "# dets: batch x max_dets x dim", "\n", "# return 1-based class det dict", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "top_preds", "=", "{", "}", "\n", "dets", "[", "i", ",", ":", ",", ":", "2", "]", "=", "transform_preds", "(", "\n", "dets", "[", "i", ",", ":", ",", "0", ":", "2", "]", ",", "c", "[", "i", "]", ",", "s", "[", "i", "]", ",", "(", "w", ",", "h", ")", ")", "\n", "dets", "[", "i", ",", ":", ",", "2", ":", "4", "]", "=", "transform_preds", "(", "\n", "dets", "[", "i", ",", ":", ",", "2", ":", "4", "]", ",", "c", "[", "i", "]", ",", "s", "[", "i", "]", ",", "(", "w", ",", "h", ")", ")", "\n", "classes", "=", "dets", "[", "i", ",", ":", ",", "-", "1", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "inds", "=", "(", "classes", "==", "j", ")", "\n", "top_preds", "[", "j", "+", "1", "]", "=", "np", ".", "concatenate", "(", "[", "\n", "dets", "[", "i", ",", "inds", ",", ":", "4", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "dets", "[", "i", ",", "inds", ",", "4", ":", "5", "]", ".", "astype", "(", "np", ".", "float32", ")", "]", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "", "ret", ".", "append", "(", "top_preds", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.post_process.multi_pose_2d_post_process": [[28, 40], ["range", "image.transform_preds", "image.transform_preds", "numpy.concatenate().astype().tolist", "ret.append", "dets[].reshape", "dets[].reshape", "numpy.concatenate().astype", "numpy.ones", "numpy.concatenate", "image.transform_preds.reshape", "image.transform_preds.reshape"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.transform_preds", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.transform_preds"], ["", "def", "multi_pose_2d_post_process", "(", "dets", ",", "c", ",", "s", ",", "h", ",", "w", ")", ":", "\n", "# dets: batch x max_dets x 40", "\n", "# return list of 39 in image coord", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "bbox", "=", "transform_preds", "(", "dets", "[", "i", ",", ":", ",", ":", "4", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", ",", "c", "[", "i", "]", ",", "s", "[", "i", "]", ",", "(", "w", ",", "h", ")", ")", "\n", "pts", "=", "transform_preds", "(", "dets", "[", "i", ",", ":", ",", "5", ":", "39", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", ",", "c", "[", "i", "]", ",", "s", "[", "i", "]", ",", "(", "w", ",", "h", ")", ")", "\n", "top_preds", "=", "np", ".", "concatenate", "(", "\n", "[", "bbox", ".", "reshape", "(", "-", "1", ",", "4", ")", ",", "dets", "[", "i", ",", ":", ",", "4", ":", "5", "]", ",", "\n", "pts", ".", "reshape", "(", "-", "1", ",", "34", ")", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "tolist", "(", ")", "\n", "ret", ".", "append", "(", "{", "np", ".", "ones", "(", "1", ",", "dtype", "=", "np", ".", "int32", ")", "[", "0", "]", ":", "top_preds", "}", ")", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_vis_bbox.add_coco_bbox": [[105, 124], ["numpy.array", "int", "[].tolist", "cv2.rectangle", "cv2.getTextSize", "cv2.rectangle", "cv2.putText", "numpy.array"], "function", ["None"], ["def", "add_coco_bbox", "(", "img", ",", "bbox", ",", "cat", ",", "conf", "=", "1", ",", "names", "=", "openimgs_class_name", ",", "show_txt", "=", "True", ")", ":", "\n", "    ", "bbox", "=", "np", ".", "array", "(", "bbox", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# cat = (int(cat) + 1) % 80", "\n", "cat", "=", "int", "(", "cat", ")", "\n", "# print('cat', cat, self.names[cat])", "\n", "c", "=", "colors", "[", "cat", "]", "[", "0", "]", "[", "0", "]", ".", "tolist", "(", ")", "\n", "c", "=", "(", "255", "-", "np", ".", "array", "(", "c", ")", ")", ".", "tolist", "(", ")", "\n", "txt", "=", "'{}{:.1f}'", ".", "format", "(", "names", "[", "cat", "]", ",", "conf", ")", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "cat_size", "=", "cv2", ".", "getTextSize", "(", "txt", ",", "font", ",", "0.5", ",", "2", ")", "[", "0", "]", "\n", "cv2", ".", "rectangle", "(", "\n", "img", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "(", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ")", ",", "c", ",", "2", ")", "\n", "if", "show_txt", ":", "\n", "        ", "cv2", ".", "rectangle", "(", "img", ",", "\n", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "cat_size", "[", "1", "]", "-", "2", ")", ",", "\n", "(", "bbox", "[", "0", "]", "+", "cat_size", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ")", ",", "c", ",", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "txt", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ")", ",", "\n", "font", ",", "0.5", ",", "(", "0", ",", "0", ",", "0", ")", ",", "thickness", "=", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_vis_bbox.draw_bboxes_on_img": [[126, 132], ["range", "utils_vis_bbox.add_coco_bbox"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.add_coco_bbox"], ["", "def", "draw_bboxes_on_img", "(", "img", ",", "results", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "1", ",", "num_classes", "+", "1", ")", ":", "\n", "        ", "for", "bbox", "in", "results", "[", "j", "]", ":", "\n", "            ", "if", "bbox", "[", "4", "]", ">", "vis_thresh", ":", "\n", "                ", "add_coco_bbox", "(", "img", ",", "bbox", "[", ":", "4", "]", ",", "j", "-", "1", ",", "bbox", "[", "4", "]", ")", "\n", "", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_json.write_json_to_file": [[4, 9], ["open", "json.dump", "print"], "function", ["None"], ["def", "write_json_to_file", "(", "python_data", ",", "output_path", ",", "flag_verbose", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "output_path", ",", "\"w\"", ")", "as", "write_file", ":", "\n", "        ", "json", ".", "dump", "(", "python_data", ",", "write_file", ")", "\n", "", "if", "flag_verbose", "is", "True", ":", "\n", "        ", "print", "(", "\"Json string dumped to: %s\"", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_json.read_json_from_file": [[11, 15], ["open", "json.load"], "function", ["None"], ["", "", "def", "read_json_from_file", "(", "input_path", ")", ":", "\n", "    ", "with", "open", "(", "input_path", ",", "\"r\"", ")", "as", "read_file", ":", "\n", "        ", "python_data", "=", "json", ".", "load", "(", "read_file", ")", "\n", "", "return", "python_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_json.python_to_json": [[17, 21], ["json.dumps"], "function", ["None"], ["", "def", "python_to_json", "(", "python_data", ")", ":", "\n", "    ", "'''Convert python data (tuple, list, dict, etc) into json string'''", "\n", "json_str", "=", "json", ".", "dumps", "(", "python_data", ",", "indent", "=", "4", ")", "\n", "return", "json_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_json.json_to_python": [[23, 27], ["json.loads"], "function", ["None"], ["", "def", "json_to_python", "(", "json_str", ")", ":", "\n", "    ", "'''Convert json string to python data (tuple, list, dict, etc)'''", "\n", "python_data", "=", "json", ".", "loads", "(", "json_str", ")", "\n", "return", "python_data", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.remove_files_in_folder": [[5, 15], ["os.listdir", "os.path.join", "os.path.isfile", "os.path.islink", "os.unlink", "os.path.isdir", "print", "shutil.rmtree"], "function", ["None"], ["def", "remove_files_in_folder", "(", "folder", ")", ":", "\n", "    ", "for", "filename", "in", "os", ".", "listdir", "(", "folder", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", "\n", "try", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", "or", "os", ".", "path", ".", "islink", "(", "file_path", ")", ":", "\n", "                ", "os", ".", "unlink", "(", "file_path", ")", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "file_path", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "file_path", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'Failed to delete %s. Reason: %s'", "%", "(", "file_path", ",", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.natural_sort": [[17, 20], ["given_list.sort"], "function", ["None"], ["", "", "", "def", "natural_sort", "(", "given_list", ")", ":", "\n", "    ", "\"\"\" Sort the given list in the way that humans expect.\"\"\"", "\n", "given_list", ".", "sort", "(", "key", "=", "alphanum_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.alphanum_key": [[22, 26], ["utils_io_folder.tryint", "re.split"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.tryint"], ["", "def", "alphanum_key", "(", "s", ")", ":", "\n", "    ", "\"\"\" Turn a string into a list of string and number chunks.\n        \"z23a\" -> [\"z\", 23, \"a\"] \"\"\"", "\n", "return", "[", "tryint", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "'([0-9]+)'", ",", "s", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.tryint": [[28, 33], ["int"], "function", ["None"], ["", "def", "tryint", "(", "s", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "int", "(", "s", ")", "\n", "", "except", ":", "\n", "        ", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.validate_file_format": [[34, 39], ["os.path.isfile", "os.path.splitext"], "function", ["None"], ["", "", "def", "validate_file_format", "(", "file_in_path", ",", "allowed_format", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "file_in_path", ")", "and", "os", ".", "path", ".", "splitext", "(", "file_in_path", ")", "[", "1", "]", "[", "1", ":", "]", "in", "allowed_format", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.is_image": [[40, 45], ["utils_io_folder.validate_file_format"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.validate_file_format"], ["", "", "def", "is_image", "(", "file_in_path", ")", ":", "\n", "    ", "if", "validate_file_format", "(", "file_in_path", ",", "[", "'jpg'", ",", "'JPEG'", ",", "'png'", ",", "'JPG'", "]", ")", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.get_immediate_subfolder_paths": [[47, 51], ["utils_io_folder.get_immediate_subfolder_names", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.get_immediate_subfolder_names"], ["", "", "def", "get_immediate_subfolder_paths", "(", "folder_path", ")", ":", "\n", "    ", "subfolder_names", "=", "get_immediate_subfolder_names", "(", "folder_path", ")", "\n", "subfolder_paths", "=", "[", "os", ".", "path", ".", "join", "(", "folder_path", ",", "subfolder_name", ")", "for", "subfolder_name", "in", "subfolder_names", "]", "\n", "return", "subfolder_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.get_immediate_subfolder_names": [[53, 58], ["utils_io_folder.natural_sort", "os.listdir", "os.path.isdir", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.natural_sort"], ["", "def", "get_immediate_subfolder_names", "(", "folder_path", ")", ":", "\n", "    ", "subfolder_names", "=", "[", "folder_name", "for", "folder_name", "in", "os", ".", "listdir", "(", "folder_path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "folder_name", ")", ")", "]", "\n", "natural_sort", "(", "subfolder_names", ")", "\n", "return", "subfolder_names", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.get_immediate_childfile_paths": [[59, 63], ["utils_io_folder.get_immediate_childfile_names", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.get_immediate_childfile_names"], ["", "def", "get_immediate_childfile_paths", "(", "folder_path", ",", "ext", "=", "None", ",", "exclude", "=", "None", ")", ":", "\n", "    ", "files_names", "=", "get_immediate_childfile_names", "(", "folder_path", ",", "ext", ",", "exclude", ")", "\n", "files_full_paths", "=", "[", "os", ".", "path", ".", "join", "(", "folder_path", ",", "file_name", ")", "for", "file_name", "in", "files_names", "]", "\n", "return", "files_full_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.get_immediate_childfile_names": [[65, 75], ["utils_io_folder.natural_sort", "next", "file_name.endswith", "os.walk", "file_name.endswith"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.natural_sort"], ["", "def", "get_immediate_childfile_names", "(", "folder_path", ",", "ext", "=", "None", ",", "exclude", "=", "None", ")", ":", "\n", "    ", "files_names", "=", "[", "file_name", "for", "file_name", "in", "next", "(", "os", ".", "walk", "(", "folder_path", ")", ")", "[", "2", "]", "]", "\n", "if", "ext", "is", "not", "None", ":", "\n", "        ", "files_names", "=", "[", "file_name", "for", "file_name", "in", "files_names", "\n", "if", "file_name", ".", "endswith", "(", "ext", ")", "]", "\n", "", "if", "exclude", "is", "not", "None", ":", "\n", "        ", "files_names", "=", "[", "file_name", "for", "file_name", "in", "files_names", "\n", "if", "not", "file_name", ".", "endswith", "(", "exclude", ")", "]", "\n", "", "natural_sort", "(", "files_names", ")", "\n", "return", "files_names", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.get_folder_name_from_path": [[77, 80], ["os.path.split"], "function", ["None"], ["", "def", "get_folder_name_from_path", "(", "folder_path", ")", ":", "\n", "    ", "path", ",", "folder_name", "=", "os", ".", "path", ".", "split", "(", "folder_path", ")", "\n", "return", "folder_name", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.get_parent_folder_from_path": [[82, 86], ["os.path.abspath", "os.path.basename", "os.path.join"], "function", ["None"], ["", "def", "get_parent_folder_from_path", "(", "folder_path", ")", ":", "\n", "    ", "parent_folder_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "os", ".", "pardir", ")", ")", "\n", "parent_folder_name", "=", "os", ".", "path", ".", "basename", "(", "parent_folder_path", ")", "\n", "return", "parent_folder_path", ",", "parent_folder_name", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.create_folder": [[88, 91], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "create_folder", "(", "folder_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.__init__": [[3, 5], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.reset": [[6, 11], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update": [[12, 18], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "if", "self", ".", "count", ">", "0", ":", "\n", "          ", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_vis_censor.vis_censor": [[4, 67], ["numpy.ones", "int", "cv2.resize", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "numpy.hstack", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple"], "function", ["None"], ["def", "vis_censor", "(", "img", ",", "gt_censor_str", "=", "\"Yes\"", ",", "gt_cls_str", "=", "\"weapon, knife\"", ",", "\n", "pred_censor_str", "=", "\"Yes\"", ",", "pred_cls_str", "=", "\"weapon, knife\"", ",", "\n", "extra_str", "=", "\"TP\"", ")", ":", "\n", "    ", "ht", ",", "wid", ",", "nchannels", "=", "img", ".", "shape", "\n", "\n", "# create extra img", "\n", "debug_ht", "=", "512", "\n", "debug_wid", "=", "500", "\n", "debug_img", "=", "np", ".", "ones", "(", "(", "debug_ht", ",", "debug_wid", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "# resize img", "\n", "new_ht", "=", "debug_ht", "\n", "resize_ratio", "=", "1.0", "*", "ht", "/", "new_ht", "# = wid / new_wid", "\n", "new_wid", "=", "int", "(", "1.0", "*", "wid", "/", "resize_ratio", ")", "\n", "dim", "=", "(", "new_wid", ",", "new_ht", ")", "\n", "resized_img", "=", "cv2", ".", "resize", "(", "img", ",", "dim", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "# put text on extra img", "\n", "# font", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "# org", "\n", "org", "=", "[", "10", ",", "20", "]", "\n", "# fontScale", "\n", "fontScale", "=", "0.51", "\n", "# Blue color in BGR", "\n", "color", "=", "(", "255", ",", "255", ",", "255", ")", "\n", "# Line thickness of 2 px", "\n", "thickness", "=", "1", "\n", "\n", "# GT INFO", "\n", "text", "=", "'GT INFO:'", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   censor: {}'", ".", "format", "(", "gt_censor_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   classes to censor: {}'", ".", "format", "(", "gt_cls_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "40", "\n", "\n", "# pred INFO", "\n", "text", "=", "'Pred INFO:'", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   censor: {}'", ".", "format", "(", "pred_censor_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   classes to censor: {}'", ".", "format", "(", "pred_cls_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "40", "\n", "\n", "# extra INFO", "\n", "text", "=", "'Extra INFO:'", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   result: {}'", ".", "format", "(", "extra_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n", "horizontalAppendedImg", "=", "np", ".", "hstack", "(", "(", "resized_img", ",", "debug_img", ")", ")", "\n", "#cv2.imshow('Horizontal Appended', horizontalAppendedImg)", "\n", "#cv2.waitKey(2000)", "\n", "#cv2.destroyAllWindows()", "\n", "return", "horizontalAppendedImg", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip": [[5, 7], ["img[].copy"], "function", ["None"], ["def", "flip", "(", "img", ")", ":", "\n", "  ", "return", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.transform_preds": [[8, 14], ["numpy.zeros", "image.get_affine_transform", "range", "image.affine_transform"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform"], ["", "def", "transform_preds", "(", "coords", ",", "center", ",", "scale", ",", "output_size", ")", ":", "\n", "    ", "target_coords", "=", "np", ".", "zeros", "(", "coords", ".", "shape", ")", "\n", "trans", "=", "get_affine_transform", "(", "center", ",", "scale", ",", "0", ",", "output_size", ",", "inv", "=", "1", ")", "\n", "for", "p", "in", "range", "(", "coords", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "target_coords", "[", "p", ",", "0", ":", "2", "]", "=", "affine_transform", "(", "coords", "[", "p", ",", "0", ":", "2", "]", ",", "trans", ")", "\n", "", "return", "target_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.get_affine_transform": [[16, 50], ["numpy.array", "image.get_dir", "numpy.array", "numpy.zeros", "numpy.zeros", "image.get_3rd_point", "image.get_3rd_point", "numpy.array", "numpy.array", "cv2.getAffineTransform", "cv2.getAffineTransform", "isinstance", "isinstance", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_dir", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_3rd_point", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_3rd_point"], ["", "def", "get_affine_transform", "(", "center", ",", "\n", "scale", ",", "\n", "rot", ",", "\n", "output_size", ",", "\n", "shift", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "inv", "=", "0", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "scale", ",", "np", ".", "ndarray", ")", "and", "not", "isinstance", "(", "scale", ",", "list", ")", ":", "\n", "        ", "scale", "=", "np", ".", "array", "(", "[", "scale", ",", "scale", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "scale_tmp", "=", "scale", "\n", "src_w", "=", "scale_tmp", "[", "0", "]", "\n", "dst_w", "=", "output_size", "[", "0", "]", "\n", "dst_h", "=", "output_size", "[", "1", "]", "\n", "\n", "rot_rad", "=", "np", ".", "pi", "*", "rot", "/", "180", "\n", "src_dir", "=", "get_dir", "(", "[", "0", ",", "src_w", "*", "-", "0.5", "]", ",", "rot_rad", ")", "\n", "dst_dir", "=", "np", ".", "array", "(", "[", "0", ",", "dst_w", "*", "-", "0.5", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", "0", ",", ":", "]", "=", "center", "+", "scale_tmp", "*", "shift", "\n", "src", "[", "1", ",", ":", "]", "=", "center", "+", "src_dir", "+", "scale_tmp", "*", "shift", "\n", "dst", "[", "0", ",", ":", "]", "=", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", ",", "np", ".", "float32", ")", "+", "dst_dir", "\n", "\n", "src", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "src", "[", "0", ",", ":", "]", ",", "src", "[", "1", ",", ":", "]", ")", "\n", "dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "if", "inv", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "dst", ")", ",", "np", ".", "float32", "(", "src", ")", ")", "\n", "", "else", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n", "\n", "", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.affine_transform": [[52, 56], ["numpy.dot", "numpy.array"], "function", ["None"], ["", "def", "affine_transform", "(", "pt", ",", "t", ")", ":", "\n", "    ", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "1.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "new_pt", "=", "np", ".", "dot", "(", "t", ",", "new_pt", ")", "\n", "return", "new_pt", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.get_3rd_point": [[58, 61], ["numpy.array"], "function", ["None"], ["", "def", "get_3rd_point", "(", "a", ",", "b", ")", ":", "\n", "    ", "direct", "=", "a", "-", "b", "\n", "return", "b", "+", "np", ".", "array", "(", "[", "-", "direct", "[", "1", "]", ",", "direct", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.get_dir": [[63, 71], ["numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "get_dir", "(", "src_point", ",", "rot_rad", ")", ":", "\n", "    ", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "\n", "src_result", "=", "[", "0", ",", "0", "]", "\n", "src_result", "[", "0", "]", "=", "src_point", "[", "0", "]", "*", "cs", "-", "src_point", "[", "1", "]", "*", "sn", "\n", "src_result", "[", "1", "]", "=", "src_point", "[", "0", "]", "*", "sn", "+", "src_point", "[", "1", "]", "*", "cs", "\n", "\n", "return", "src_result", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.crop": [[73, 82], ["image.get_affine_transform", "cv2.warpAffine", "int", "int"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform"], ["", "def", "crop", "(", "img", ",", "center", ",", "scale", ",", "output_size", ",", "rot", "=", "0", ")", ":", "\n", "    ", "trans", "=", "get_affine_transform", "(", "center", ",", "scale", ",", "rot", ",", "output_size", ")", "\n", "\n", "dst_img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "\n", "trans", ",", "\n", "(", "int", "(", "output_size", "[", "0", "]", ")", ",", "int", "(", "output_size", "[", "1", "]", ")", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "dst_img", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.gaussian_radius": [[84, 105], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "min"], "function", ["None"], ["", "def", "gaussian_radius", "(", "det_size", ",", "min_overlap", "=", "0.7", ")", ":", "\n", "  ", "height", ",", "width", "=", "det_size", "\n", "\n", "a1", "=", "1", "\n", "b1", "=", "(", "height", "+", "width", ")", "\n", "c1", "=", "width", "*", "height", "*", "(", "1", "-", "min_overlap", ")", "/", "(", "1", "+", "min_overlap", ")", "\n", "sq1", "=", "np", ".", "sqrt", "(", "b1", "**", "2", "-", "4", "*", "a1", "*", "c1", ")", "\n", "r1", "=", "(", "b1", "+", "sq1", ")", "/", "2", "\n", "\n", "a2", "=", "4", "\n", "b2", "=", "2", "*", "(", "height", "+", "width", ")", "\n", "c2", "=", "(", "1", "-", "min_overlap", ")", "*", "width", "*", "height", "\n", "sq2", "=", "np", ".", "sqrt", "(", "b2", "**", "2", "-", "4", "*", "a2", "*", "c2", ")", "\n", "r2", "=", "(", "b2", "+", "sq2", ")", "/", "2", "\n", "\n", "a3", "=", "4", "*", "min_overlap", "\n", "b3", "=", "-", "2", "*", "min_overlap", "*", "(", "height", "+", "width", ")", "\n", "c3", "=", "(", "min_overlap", "-", "1", ")", "*", "width", "*", "height", "\n", "sq3", "=", "np", ".", "sqrt", "(", "b3", "**", "2", "-", "4", "*", "a3", "*", "c3", ")", "\n", "r3", "=", "(", "b3", "+", "sq3", ")", "/", "2", "\n", "return", "min", "(", "r1", ",", "r2", ",", "r3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.gaussian2D": [[107, 114], ["numpy.exp", "np.exp.max", "numpy.finfo"], "function", ["None"], ["", "def", "gaussian2D", "(", "shape", ",", "sigma", "=", "1", ")", ":", "\n", "    ", "m", ",", "n", "=", "[", "(", "ss", "-", "1.", ")", "/", "2.", "for", "ss", "in", "shape", "]", "\n", "y", ",", "x", "=", "np", ".", "ogrid", "[", "-", "m", ":", "m", "+", "1", ",", "-", "n", ":", "n", "+", "1", "]", "\n", "\n", "h", "=", "np", ".", "exp", "(", "-", "(", "x", "*", "x", "+", "y", "*", "y", ")", "/", "(", "2", "*", "sigma", "*", "sigma", ")", ")", "\n", "h", "[", "h", "<", "np", ".", "finfo", "(", "h", ".", "dtype", ")", ".", "eps", "*", "h", ".", "max", "(", ")", "]", "=", "0", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.draw_umich_gaussian": [[115, 131], ["image.gaussian2D", "int", "int", "min", "min", "min", "min", "numpy.maximum", "min", "min"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.gaussian2D"], ["", "def", "draw_umich_gaussian", "(", "heatmap", ",", "center", ",", "radius", ",", "k", "=", "1", ")", ":", "\n", "  ", "diameter", "=", "2", "*", "radius", "+", "1", "\n", "gaussian", "=", "gaussian2D", "(", "(", "diameter", ",", "diameter", ")", ",", "sigma", "=", "diameter", "/", "6", ")", "\n", "\n", "x", ",", "y", "=", "int", "(", "center", "[", "0", "]", ")", ",", "int", "(", "center", "[", "1", "]", ")", "\n", "\n", "height", ",", "width", "=", "heatmap", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "left", ",", "right", "=", "min", "(", "x", ",", "radius", ")", ",", "min", "(", "width", "-", "x", ",", "radius", "+", "1", ")", "\n", "top", ",", "bottom", "=", "min", "(", "y", ",", "radius", ")", ",", "min", "(", "height", "-", "y", ",", "radius", "+", "1", ")", "\n", "\n", "masked_heatmap", "=", "heatmap", "[", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_gaussian", "=", "gaussian", "[", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", "if", "min", "(", "masked_gaussian", ".", "shape", ")", ">", "0", "and", "min", "(", "masked_heatmap", ".", "shape", ")", ">", "0", ":", "# TODO debug", "\n", "    ", "np", ".", "maximum", "(", "masked_heatmap", ",", "masked_gaussian", "*", "k", ",", "out", "=", "masked_heatmap", ")", "\n", "", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.draw_dense_reg": [[132, 162], ["image.gaussian2D", "numpy.array().reshape", "numpy.ones", "int", "int", "min", "min", "min", "min", "numpy.array", "numpy.arange", "delta.reshape", "delta.reshape", "min", "min"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.gaussian2D"], ["", "def", "draw_dense_reg", "(", "regmap", ",", "heatmap", ",", "center", ",", "value", ",", "radius", ",", "is_offset", "=", "False", ")", ":", "\n", "  ", "diameter", "=", "2", "*", "radius", "+", "1", "\n", "gaussian", "=", "gaussian2D", "(", "(", "diameter", ",", "diameter", ")", ",", "sigma", "=", "diameter", "/", "6", ")", "\n", "value", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "dim", "=", "value", ".", "shape", "[", "0", "]", "\n", "reg", "=", "np", ".", "ones", "(", "(", "dim", ",", "diameter", "*", "2", "+", "1", ",", "diameter", "*", "2", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "value", "\n", "if", "is_offset", "and", "dim", "==", "2", ":", "\n", "    ", "delta", "=", "np", ".", "arange", "(", "diameter", "*", "2", "+", "1", ")", "-", "radius", "\n", "reg", "[", "0", "]", "=", "reg", "[", "0", "]", "-", "delta", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "reg", "[", "1", "]", "=", "reg", "[", "1", "]", "-", "delta", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "x", ",", "y", "=", "int", "(", "center", "[", "0", "]", ")", ",", "int", "(", "center", "[", "1", "]", ")", "\n", "\n", "height", ",", "width", "=", "heatmap", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "left", ",", "right", "=", "min", "(", "x", ",", "radius", ")", ",", "min", "(", "width", "-", "x", ",", "radius", "+", "1", ")", "\n", "top", ",", "bottom", "=", "min", "(", "y", ",", "radius", ")", ",", "min", "(", "height", "-", "y", ",", "radius", "+", "1", ")", "\n", "\n", "masked_heatmap", "=", "heatmap", "[", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_regmap", "=", "regmap", "[", ":", ",", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_gaussian", "=", "gaussian", "[", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "\n", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", "masked_reg", "=", "reg", "[", ":", ",", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "\n", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", "if", "min", "(", "masked_gaussian", ".", "shape", ")", ">", "0", "and", "min", "(", "masked_heatmap", ".", "shape", ")", ">", "0", ":", "# TODO debug", "\n", "    ", "idx", "=", "(", "masked_gaussian", ">=", "masked_heatmap", ")", ".", "reshape", "(", "\n", "1", ",", "masked_gaussian", ".", "shape", "[", "0", "]", ",", "masked_gaussian", ".", "shape", "[", "1", "]", ")", "\n", "masked_regmap", "=", "(", "1", "-", "idx", ")", "*", "masked_regmap", "+", "idx", "*", "masked_reg", "\n", "", "regmap", "[", ":", ",", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "=", "masked_regmap", "\n", "return", "regmap", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.draw_msra_gaussian": [[164, 186], ["int", "int", "numpy.arange", "numpy.exp", "numpy.maximum", "int", "int", "int", "int", "max", "max", "max", "min", "max", "min", "min", "min"], "function", ["None"], ["", "def", "draw_msra_gaussian", "(", "heatmap", ",", "center", ",", "sigma", ")", ":", "\n", "  ", "tmp_size", "=", "sigma", "*", "3", "\n", "mu_x", "=", "int", "(", "center", "[", "0", "]", "+", "0.5", ")", "\n", "mu_y", "=", "int", "(", "center", "[", "1", "]", "+", "0.5", ")", "\n", "w", ",", "h", "=", "heatmap", ".", "shape", "[", "0", "]", ",", "heatmap", ".", "shape", "[", "1", "]", "\n", "ul", "=", "[", "int", "(", "mu_x", "-", "tmp_size", ")", ",", "int", "(", "mu_y", "-", "tmp_size", ")", "]", "\n", "br", "=", "[", "int", "(", "mu_x", "+", "tmp_size", "+", "1", ")", ",", "int", "(", "mu_y", "+", "tmp_size", "+", "1", ")", "]", "\n", "if", "ul", "[", "0", "]", ">=", "h", "or", "ul", "[", "1", "]", ">=", "w", "or", "br", "[", "0", "]", "<", "0", "or", "br", "[", "1", "]", "<", "0", ":", "\n", "    ", "return", "heatmap", "\n", "", "size", "=", "2", "*", "tmp_size", "+", "1", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "np", ".", "float32", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", "=", "y0", "=", "size", "//", "2", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "g_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "h", ")", "-", "ul", "[", "0", "]", "\n", "g_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "w", ")", "-", "ul", "[", "1", "]", "\n", "img_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "h", ")", "\n", "img_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "w", ")", "\n", "heatmap", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", "=", "np", ".", "maximum", "(", "\n", "heatmap", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", ",", "\n", "g", "[", "g_y", "[", "0", "]", ":", "g_y", "[", "1", "]", ",", "g_x", "[", "0", "]", ":", "g_x", "[", "1", "]", "]", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.grayscale": [[187, 189], ["cv2.cvtColor"], "function", ["None"], ["", "def", "grayscale", "(", "image", ")", ":", "\n", "    ", "return", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.lighting_": [[190, 193], ["data_rng.normal", "numpy.dot"], "function", ["None"], ["", "def", "lighting_", "(", "data_rng", ",", "image", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "    ", "alpha", "=", "data_rng", ".", "normal", "(", "scale", "=", "alphastd", ",", "size", "=", "(", "3", ",", ")", ")", "\n", "image", "+=", "np", ".", "dot", "(", "eigvec", ",", "eigval", "*", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.blend_": [[194, 198], ["None"], "function", ["None"], ["", "def", "blend_", "(", "alpha", ",", "image1", ",", "image2", ")", ":", "\n", "    ", "image1", "*=", "alpha", "\n", "image2", "*=", "(", "1", "-", "alpha", ")", "\n", "image1", "+=", "image2", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.saturation_": [[199, 202], ["image.blend_", "data_rng.uniform"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.blend_"], ["", "def", "saturation_", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "var", ")", ":", "\n", "    ", "alpha", "=", "1.", "+", "data_rng", ".", "uniform", "(", "low", "=", "-", "var", ",", "high", "=", "var", ")", "\n", "blend_", "(", "alpha", ",", "image", ",", "gs", "[", ":", ",", ":", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.brightness_": [[203, 206], ["data_rng.uniform"], "function", ["None"], ["", "def", "brightness_", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "var", ")", ":", "\n", "    ", "alpha", "=", "1.", "+", "data_rng", ".", "uniform", "(", "low", "=", "-", "var", ",", "high", "=", "var", ")", "\n", "image", "*=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.contrast_": [[207, 210], ["image.blend_", "data_rng.uniform"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.blend_"], ["", "def", "contrast_", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "var", ")", ":", "\n", "    ", "alpha", "=", "1.", "+", "data_rng", ".", "uniform", "(", "low", "=", "-", "var", ",", "high", "=", "var", ")", "\n", "blend_", "(", "alpha", ",", "image", ",", "gs_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.color_aug": [[211, 220], ["random.shuffle", "image.grayscale", "grayscale.mean", "image.lighting_", "f"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.grayscale", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.lighting_"], ["", "def", "color_aug", "(", "data_rng", ",", "image", ",", "eig_val", ",", "eig_vec", ")", ":", "\n", "    ", "functions", "=", "[", "brightness_", ",", "contrast_", ",", "saturation_", "]", "\n", "random", ".", "shuffle", "(", "functions", ")", "\n", "\n", "gs", "=", "grayscale", "(", "image", ")", "\n", "gs_mean", "=", "gs", ".", "mean", "(", ")", "\n", "for", "f", "in", "functions", ":", "\n", "        ", "f", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "0.4", ")", "\n", "", "lighting_", "(", "data_rng", ",", "image", ",", "0.1", ",", "eig_val", ",", "eig_vec", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.create_model": [[14, 22], ["deploy_detector.model_tiny.get_pose_net", "deploy_detector.model.get_pose_net", "deploy_detector.model_resnest.get_pose_net"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.get_pose_net", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.get_pose_net", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.get_pose_net"], ["def", "create_model", "(", "num_layers", ")", ":", "\n", "    ", "if", "num_layers", "==", "18", ":", "\n", "        ", "model", "=", "get_res18", "(", "num_layers", ",", "heads", "=", "opt", ".", "heads", ")", "\n", "", "elif", "num_layers", "==", "34", ":", "\n", "        ", "model", "=", "get_dla34", "(", "num_layers", ",", "heads", "=", "opt", ".", "heads", ")", "\n", "", "elif", "num_layers", "==", "50", ":", "\n", "        ", "model", "=", "get_resneSt50", "(", "num_layers", ",", "heads", "=", "opt", ".", "heads", ",", "head_conv", "=", "opt", ".", "head_conv", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.load_model": [[24, 78], ["torch.load", "torch.load", "print", "model.state_dict", "model.load_state_dict", "k.startswith", "print", "print", "optimizer.load_state_dict", "print", "print", "k.startswith", "print"], "function", ["None"], ["", "def", "load_model", "(", "model", ",", "model_path", ",", "optimizer", "=", "None", ",", "resume", "=", "False", ",", "\n", "lr", "=", "None", ",", "lr_step", "=", "None", ")", ":", "\n", "    ", "start_epoch", "=", "0", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "print", "(", "'loaded {}, epoch {}'", ".", "format", "(", "model_path", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "state_dict_", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "state_dict", "=", "{", "}", "\n", "\n", "# convert data_parallal to model", "\n", "for", "k", "in", "state_dict_", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "'module'", ")", "and", "not", "k", ".", "startswith", "(", "'module_list'", ")", ":", "\n", "            ", "state_dict", "[", "k", "[", "7", ":", "]", "]", "=", "state_dict_", "[", "k", "]", "\n", "", "else", ":", "\n", "            ", "state_dict", "[", "k", "]", "=", "state_dict_", "[", "k", "]", "\n", "", "", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "# check loaded parameters and created model parameters", "\n", "msg", "=", "'If you see this, your model does not fully load the '", "+", "'pre-trained weight. Please make sure '", "+", "'you have correctly specified --arch xxx '", "+", "'or set the correct --num_classes for your own dataset.'", "\n", "for", "k", "in", "state_dict", ":", "\n", "        ", "if", "k", "in", "model_state_dict", ":", "\n", "            ", "if", "state_dict", "[", "k", "]", ".", "shape", "!=", "model_state_dict", "[", "k", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'Skip loading parameter {}, required shape{}, '", "'loaded shape{}. {}'", ".", "format", "(", "\n", "k", ",", "model_state_dict", "[", "k", "]", ".", "shape", ",", "state_dict", "[", "k", "]", ".", "shape", ",", "msg", ")", ")", "\n", "state_dict", "[", "k", "]", "=", "model_state_dict", "[", "k", "]", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Drop parameter {}.'", ".", "format", "(", "k", ")", "+", "msg", ")", "\n", "", "", "for", "k", "in", "model_state_dict", ":", "\n", "        ", "if", "not", "(", "k", "in", "state_dict", ")", ":", "\n", "            ", "print", "(", "'No param {}.'", ".", "format", "(", "k", ")", "+", "msg", ")", "\n", "state_dict", "[", "k", "]", "=", "model_state_dict", "[", "k", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "# resume optimizer parameters", "\n", "if", "optimizer", "is", "not", "None", "and", "resume", ":", "\n", "        ", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "start_lr", "=", "lr", "\n", "for", "step", "in", "lr_step", ":", "\n", "                ", "if", "start_epoch", ">=", "step", ":", "\n", "                    ", "start_lr", "*=", "0.1", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "start_lr", "\n", "", "print", "(", "'Resumed optimizer with start lr'", ",", "start_lr", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No optimizer parameters in checkpoint.'", ")", "\n", "", "", "if", "optimizer", "is", "not", "None", ":", "\n", "        ", "return", "model", ",", "optimizer", ",", "start_epoch", "\n", "", "else", ":", "\n", "        ", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.get_affine_transform": [[83, 117], ["numpy.array", "utility.get_dir", "numpy.array", "numpy.zeros", "numpy.zeros", "utility.get_3rd_point", "utility.get_3rd_point", "numpy.array", "numpy.array", "cv2.getAffineTransform", "cv2.getAffineTransform", "isinstance", "isinstance", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_dir", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_3rd_point", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_3rd_point"], ["def", "get_affine_transform", "(", "center", ",", "\n", "scale", ",", "\n", "rot", ",", "\n", "output_size", ",", "\n", "shift", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "inv", "=", "0", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "scale", ",", "np", ".", "ndarray", ")", "and", "not", "isinstance", "(", "scale", ",", "list", ")", ":", "\n", "        ", "scale", "=", "np", ".", "array", "(", "[", "scale", ",", "scale", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "scale_tmp", "=", "scale", "\n", "src_w", "=", "scale_tmp", "[", "0", "]", "\n", "dst_w", "=", "output_size", "[", "0", "]", "\n", "dst_h", "=", "output_size", "[", "1", "]", "\n", "\n", "rot_rad", "=", "np", ".", "pi", "*", "rot", "/", "180", "\n", "src_dir", "=", "get_dir", "(", "[", "0", ",", "src_w", "*", "-", "0.5", "]", ",", "rot_rad", ")", "\n", "dst_dir", "=", "np", ".", "array", "(", "[", "0", ",", "dst_w", "*", "-", "0.5", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", "0", ",", ":", "]", "=", "center", "+", "scale_tmp", "*", "shift", "\n", "src", "[", "1", ",", ":", "]", "=", "center", "+", "src_dir", "+", "scale_tmp", "*", "shift", "\n", "dst", "[", "0", ",", ":", "]", "=", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", ",", "np", ".", "float32", ")", "+", "dst_dir", "\n", "\n", "src", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "src", "[", "0", ",", ":", "]", ",", "src", "[", "1", ",", ":", "]", ")", "\n", "dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "if", "inv", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "dst", ")", ",", "np", ".", "float32", "(", "src", ")", ")", "\n", "", "else", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n", "\n", "", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.get_dir": [[119, 127], ["numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "get_dir", "(", "src_point", ",", "rot_rad", ")", ":", "\n", "    ", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "\n", "src_result", "=", "[", "0", ",", "0", "]", "\n", "src_result", "[", "0", "]", "=", "src_point", "[", "0", "]", "*", "cs", "-", "src_point", "[", "1", "]", "*", "sn", "\n", "src_result", "[", "1", "]", "=", "src_point", "[", "0", "]", "*", "sn", "+", "src_point", "[", "1", "]", "*", "cs", "\n", "\n", "return", "src_result", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.get_3rd_point": [[129, 132], ["numpy.array"], "function", ["None"], ["", "def", "get_3rd_point", "(", "a", ",", "b", ")", ":", "\n", "    ", "direct", "=", "a", "-", "b", "\n", "return", "b", "+", "np", ".", "array", "(", "[", "-", "direct", "[", "1", "]", ",", "direct", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.centernet_decode": [[137, 169], ["_nms.size", "utility._nms", "utility._topk", "utility._transpose_and_gather_feat", "clses.view().float.view().float", "scores.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utility._transpose_and_gather_feat", "reg.view.view", "wh.view.view", "clses.view().float.view().expand().long", "wh.view.gather().view", "wh.view.view", "xs.view", "ys.view", "xs.view", "ys.view", "clses.view().float.view", "clses.view().float.view().expand", "wh.view.gather", "clses.view().float.view"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._nms", "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._topk", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather"], ["def", "centernet_decode", "(", "heat", ",", "wh", ",", "reg", "=", "None", ",", "cat_spec_wh", "=", "False", ",", "K", "=", "100", ")", ":", "\n", "    ", "batch", ",", "cat", ",", "height", ",", "width", "=", "heat", ".", "size", "(", ")", "\n", "\n", "# heat = torch.sigmoid(heat)", "\n", "# perform nms on heatmaps", "\n", "heat", "=", "_nms", "(", "heat", ")", "\n", "\n", "scores", ",", "inds", ",", "clses", ",", "ys", ",", "xs", "=", "_topk", "(", "heat", ",", "K", "=", "K", ")", "\n", "if", "reg", "is", "not", "None", ":", "\n", "        ", "reg", "=", "_transpose_and_gather_feat", "(", "reg", ",", "inds", ")", "\n", "reg", "=", "reg", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "xs", "=", "xs", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "reg", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "ys", "=", "ys", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "reg", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "", "else", ":", "\n", "        ", "xs", "=", "xs", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "0.5", "\n", "ys", "=", "ys", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "0.5", "\n", "", "wh", "=", "_transpose_and_gather_feat", "(", "wh", ",", "inds", ")", "\n", "if", "cat_spec_wh", ":", "\n", "        ", "wh", "=", "wh", ".", "view", "(", "batch", ",", "K", ",", "cat", ",", "2", ")", "\n", "clses_ind", "=", "clses", ".", "view", "(", "batch", ",", "K", ",", "1", ",", "1", ")", ".", "expand", "(", "batch", ",", "K", ",", "1", ",", "2", ")", ".", "long", "(", ")", "\n", "wh", "=", "wh", ".", "gather", "(", "2", ",", "clses_ind", ")", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "wh", "=", "wh", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "", "clses", "=", "clses", ".", "view", "(", "batch", ",", "K", ",", "1", ")", ".", "float", "(", ")", "\n", "scores", "=", "scores", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "\n", "bboxes", "=", "torch", ".", "cat", "(", "[", "xs", "-", "wh", "[", "...", ",", "0", ":", "1", "]", "/", "2", ",", "\n", "ys", "-", "wh", "[", "...", ",", "1", ":", "2", "]", "/", "2", ",", "\n", "xs", "+", "wh", "[", "...", ",", "0", ":", "1", "]", "/", "2", ",", "\n", "ys", "+", "wh", "[", "...", ",", "1", ":", "2", "]", "/", "2", "]", ",", "dim", "=", "2", ")", "\n", "detections", "=", "torch", ".", "cat", "(", "[", "bboxes", ",", "scores", ",", "clses", "]", ",", "dim", "=", "2", ")", "\n", "\n", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility._nms": [[171, 178], ["torch.functional.max_pool2d"], "function", ["None"], ["", "def", "_nms", "(", "heat", ",", "kernel", "=", "3", ")", ":", "\n", "    ", "pad", "=", "(", "kernel", "-", "1", ")", "//", "2", "\n", "\n", "hmax", "=", "nn", ".", "functional", ".", "max_pool2d", "(", "\n", "heat", ",", "(", "kernel", ",", "kernel", ")", ",", "stride", "=", "1", ",", "padding", "=", "pad", ")", "\n", "keep", "=", "(", "hmax", "==", "heat", ")", ".", "float", "(", ")", "\n", "return", "heat", "*", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility._topk": [[180, 197], ["scores.size", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "_gather_feat().view", "_gather_feat().view", "_gather_feat().view", "scores.view", "topk_scores.view", "utility._gather_feat", "utility._gather_feat", "utility._gather_feat", "_gather_feat().view.view", "_gather_feat().view.view", "_gather_feat().view.view"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat"], ["", "def", "_topk", "(", "scores", ",", "K", "=", "40", ")", ":", "\n", "    ", "batch", ",", "cat", ",", "height", ",", "width", "=", "scores", ".", "size", "(", ")", "\n", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "scores", ".", "view", "(", "batch", ",", "cat", ",", "-", "1", ")", ",", "K", ")", "\n", "\n", "topk_inds", "=", "topk_inds", "%", "(", "height", "*", "width", ")", "\n", "topk_ys", "=", "(", "topk_inds", "/", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "topk_xs", "=", "(", "topk_inds", "%", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "\n", "topk_score", ",", "topk_ind", "=", "torch", ".", "topk", "(", "topk_scores", ".", "view", "(", "batch", ",", "-", "1", ")", ",", "K", ")", "\n", "topk_clses", "=", "(", "topk_ind", "/", "K", ")", ".", "int", "(", ")", "\n", "topk_inds", "=", "_gather_feat", "(", "\n", "topk_inds", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "topk_ys", "=", "_gather_feat", "(", "topk_ys", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "topk_xs", "=", "_gather_feat", "(", "topk_xs", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "\n", "return", "topk_score", ",", "topk_inds", ",", "topk_clses", ",", "topk_ys", ",", "topk_xs", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility._transpose_and_gather_feat": [[199, 204], ["_gather_feat.permute().contiguous", "_gather_feat.view", "utility._gather_feat", "_gather_feat.size", "_gather_feat.size", "_gather_feat.permute"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat"], ["", "def", "_transpose_and_gather_feat", "(", "feat", ",", "ind", ")", ":", "\n", "    ", "feat", "=", "feat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ",", "feat", ".", "size", "(", "3", ")", ")", "\n", "feat", "=", "_gather_feat", "(", "feat", ",", "ind", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility._gather_feat": [[206, 215], ["feat.view.size", "ind.unsqueeze().expand.unsqueeze().expand", "feat.view.gather", "ind.unsqueeze().expand.size", "ind.unsqueeze().expand.size", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "feat.view.view", "ind.unsqueeze().expand.unsqueeze", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather"], ["", "def", "_gather_feat", "(", "feat", ",", "ind", ",", "mask", "=", "None", ")", ":", "\n", "    ", "dim", "=", "feat", ".", "size", "(", "2", ")", "\n", "ind", "=", "ind", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "ind", ".", "size", "(", "0", ")", ",", "ind", ".", "size", "(", "1", ")", ",", "dim", ")", "\n", "feat", "=", "feat", ".", "gather", "(", "1", ",", "ind", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "feat", ")", "\n", "feat", "=", "feat", "[", "mask", "]", "\n", "feat", "=", "feat", ".", "view", "(", "-", "1", ",", "dim", ")", "\n", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.flip_tensor": [[217, 219], ["torch.flip", "torch.flip"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip"], ["", "def", "flip_tensor", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "flip", "(", "x", ",", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.centernet_post_process": [[224, 242], ["range", "utility.transform_preds", "utility.transform_preds", "range", "ret.append", "numpy.concatenate().tolist", "numpy.concatenate", "dets[].astype", "dets[].astype"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.transform_preds", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.transform_preds"], ["def", "centernet_post_process", "(", "dets", ",", "c", ",", "s", ",", "h", ",", "w", ",", "num_classes", ")", ":", "\n", "# dets: batch x max_dets x dim", "\n", "# return 1-based class det dict", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "top_preds", "=", "{", "}", "\n", "dets", "[", "i", ",", ":", ",", ":", "2", "]", "=", "transform_preds", "(", "\n", "dets", "[", "i", ",", ":", ",", "0", ":", "2", "]", ",", "c", "[", "i", "]", ",", "s", "[", "i", "]", ",", "(", "w", ",", "h", ")", ")", "\n", "dets", "[", "i", ",", ":", ",", "2", ":", "4", "]", "=", "transform_preds", "(", "\n", "dets", "[", "i", ",", ":", ",", "2", ":", "4", "]", ",", "c", "[", "i", "]", ",", "s", "[", "i", "]", ",", "(", "w", ",", "h", ")", ")", "\n", "classes", "=", "dets", "[", "i", ",", ":", ",", "-", "1", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "inds", "=", "(", "classes", "==", "j", ")", "\n", "top_preds", "[", "j", "+", "1", "]", "=", "np", ".", "concatenate", "(", "[", "\n", "dets", "[", "i", ",", "inds", ",", ":", "4", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "dets", "[", "i", ",", "inds", ",", "4", ":", "5", "]", ".", "astype", "(", "np", ".", "float32", ")", "]", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "", "ret", ".", "append", "(", "top_preds", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.transform_preds": [[244, 250], ["numpy.zeros", "utility.get_affine_transform", "range", "utility.affine_transform"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform"], ["", "def", "transform_preds", "(", "coords", ",", "center", ",", "scale", ",", "output_size", ")", ":", "\n", "    ", "target_coords", "=", "np", ".", "zeros", "(", "coords", ".", "shape", ")", "\n", "trans", "=", "get_affine_transform", "(", "center", ",", "scale", ",", "0", ",", "output_size", ",", "inv", "=", "1", ")", "\n", "for", "p", "in", "range", "(", "coords", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "target_coords", "[", "p", ",", "0", ":", "2", "]", "=", "affine_transform", "(", "coords", "[", "p", ",", "0", ":", "2", "]", ",", "trans", ")", "\n", "", "return", "target_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.affine_transform": [[252, 256], ["numpy.dot", "numpy.array"], "function", ["None"], ["", "def", "affine_transform", "(", "pt", ",", "t", ")", ":", "\n", "    ", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "1.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "new_pt", "=", "np", ".", "dot", "(", "t", ",", "new_pt", ")", "\n", "return", "new_pt", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.censor": [[261, 278], ["pred_pos_cat_list.append"], "function", ["None"], ["def", "censor", "(", "opt", ",", "preds_all_cls", ")", ":", "\n", "    ", "censor_pred", "=", "False", "\n", "pred_pos_cat_list", "=", "[", "]", "\n", "max_conf", "=", "-", "1000", "\n", "for", "cat_id", "in", "opt", ".", "pos_ids", ":", "\n", "        ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "            ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "if", "conf", ">=", "max_conf", ":", "\n", "                ", "max_conf", "=", "conf", "\n", "# if conf > self.id_to_thresh[cat_id]:   # using class-specific thresholds (during inference)", "\n", "", "if", "conf", ">", "opt", ".", "censor_thresh", ":", "\n", "                ", "censor_pred", "=", "True", "\n", "if", "opt", ".", "class_name", "[", "cat_id", "]", "not", "in", "pred_pos_cat_list", ":", "\n", "                    ", "pred_pos_cat_list", ".", "append", "(", "opt", ".", "class_name", "[", "cat_id", "]", ")", "\n", "", "", "", "", "return", "censor_pred", ",", "pred_pos_cat_list", ",", "max_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.add_coco_bbox": [[280, 297], ["numpy.array", "int", "[].tolist", "cv2.rectangle", "cv2.getTextSize", "cv2.rectangle", "cv2.putText", "numpy.array"], "function", ["None"], ["", "def", "add_coco_bbox", "(", "img", ",", "bbox", ",", "cat", ",", "conf", "=", "1", ",", "names", "=", "opt", ".", "class_name", "[", "1", ":", "]", ",", "show_txt", "=", "True", ")", ":", "\n", "    ", "bbox", "=", "np", ".", "array", "(", "bbox", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "cat", "=", "int", "(", "cat", ")", "\n", "c", "=", "colors", "[", "cat", "]", "[", "0", "]", "[", "0", "]", ".", "tolist", "(", ")", "\n", "c", "=", "(", "255", "-", "np", ".", "array", "(", "c", ")", ")", ".", "tolist", "(", ")", "\n", "txt", "=", "'{}{:.1f}'", ".", "format", "(", "names", "[", "cat", "]", ",", "conf", ")", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "cat_size", "=", "cv2", ".", "getTextSize", "(", "txt", ",", "font", ",", "0.5", ",", "2", ")", "[", "0", "]", "\n", "cv2", ".", "rectangle", "(", "\n", "img", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "(", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ")", ",", "c", ",", "2", ")", "\n", "if", "show_txt", ":", "\n", "        ", "cv2", ".", "rectangle", "(", "img", ",", "\n", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "cat_size", "[", "1", "]", "-", "2", ")", ",", "\n", "(", "bbox", "[", "0", "]", "+", "cat_size", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ")", ",", "c", ",", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "txt", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ")", ",", "\n", "font", ",", "0.5", ",", "(", "0", ",", "0", ",", "0", ")", ",", "thickness", "=", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.draw_bboxes_on_img": [[299, 305], ["range", "utility.add_coco_bbox"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.add_coco_bbox"], ["", "def", "draw_bboxes_on_img", "(", "img", ",", "results", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "1", ",", "opt", ".", "num_classes", "+", "1", ")", ":", "\n", "        ", "for", "bbox", "in", "results", "[", "j", "]", ":", "\n", "            ", "if", "bbox", "[", "4", "]", ">", "opt", ".", "vis_thresh", ":", "\n", "                ", "add_coco_bbox", "(", "img", ",", "bbox", "[", ":", "4", "]", ",", "j", "-", "1", ",", "bbox", "[", "4", "]", ")", "\n", "", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.utility.vis_censor": [[307, 367], ["numpy.ones", "int", "cv2.resize", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "numpy.hstack", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple"], "function", ["None"], ["", "def", "vis_censor", "(", "img", ",", "gt_censor_str", "=", "\" \"", ",", "gt_cls_str", "=", "\" \"", ",", "\n", "pred_censor_str", "=", "\" \"", ",", "pred_cls_str", "=", "\" \"", ",", "\n", "extra_str", "=", "\" \"", ")", ":", "\n", "    ", "ht", ",", "wid", ",", "nchannels", "=", "img", ".", "shape", "\n", "\n", "# create extra img", "\n", "debug_ht", "=", "512", "\n", "debug_wid", "=", "500", "\n", "debug_img", "=", "np", ".", "ones", "(", "(", "debug_ht", ",", "debug_wid", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "# resize img", "\n", "new_ht", "=", "debug_ht", "\n", "resize_ratio", "=", "1.0", "*", "ht", "/", "new_ht", "# = wid / new_wid", "\n", "new_wid", "=", "int", "(", "1.0", "*", "wid", "/", "resize_ratio", ")", "\n", "dim", "=", "(", "new_wid", ",", "new_ht", ")", "\n", "resized_img", "=", "cv2", ".", "resize", "(", "img", ",", "dim", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "# put text on extra img", "\n", "# font", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "# org", "\n", "org", "=", "[", "10", ",", "20", "]", "\n", "# fontScale", "\n", "fontScale", "=", "0.51", "\n", "# Blue color in BGR", "\n", "color", "=", "(", "255", ",", "255", ",", "255", ")", "\n", "# Line thickness of 2 px", "\n", "thickness", "=", "1", "\n", "\n", "# GT INFO", "\n", "text", "=", "'GT INFO:'", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   censor: {}'", ".", "format", "(", "gt_censor_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   classes to censor: {}'", ".", "format", "(", "gt_cls_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "40", "\n", "\n", "# pred INFO", "\n", "text", "=", "'Pred INFO:'", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   censor: {}'", ".", "format", "(", "pred_censor_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   classes to censor: {}'", ".", "format", "(", "pred_cls_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "40", "\n", "\n", "# extra INFO", "\n", "text", "=", "'Extra INFO:'", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   result: {}'", ".", "format", "(", "extra_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n", "horizontalAppendedImg", "=", "np", ".", "hstack", "(", "(", "resized_img", ",", "debug_img", ")", ")", "\n", "return", "horizontalAppendedImg", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.BasicBlock.__init__": [[30, 39], ["torch.Module.__init__", "model_tiny.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model_tiny.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.conv3x3", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.BasicBlock.forward": [[40, 57], ["model_tiny.BasicBlock.conv1", "model_tiny.BasicBlock.bn1", "model_tiny.BasicBlock.relu", "model_tiny.BasicBlock.conv2", "model_tiny.BasicBlock.bn2", "model_tiny.BasicBlock.relu", "model_tiny.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.Bottleneck.__init__": [[62, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.Bottleneck.forward": [[77, 98], ["model_tiny.Bottleneck.conv1", "model_tiny.Bottleneck.bn1", "model_tiny.Bottleneck.relu", "model_tiny.Bottleneck.conv2", "model_tiny.Bottleneck.bn2", "model_tiny.Bottleneck.relu", "model_tiny.Bottleneck.conv3", "model_tiny.Bottleneck.bn3", "model_tiny.Bottleneck.relu", "model_tiny.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.PoseResNet.__init__": [[102, 143], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "model_tiny.PoseResNet._make_layer", "model_tiny.PoseResNet._make_layer", "model_tiny.PoseResNet._make_layer", "model_tiny.PoseResNet._make_layer", "model_tiny.PoseResNet._make_deconv_layer", "sorted", "model_tiny.PoseResNet.__setattr__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_deconv_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "heads", ",", "head_conv", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "deconv_with_bias", "=", "False", "\n", "self", ".", "heads", "=", "heads", "\n", "\n", "super", "(", "PoseResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "# used for deconv layers", "\n", "self", ".", "deconv_layers", "=", "self", ".", "_make_deconv_layer", "(", "\n", "3", ",", "\n", "[", "256", ",", "256", ",", "256", "]", ",", "\n", "[", "4", ",", "4", ",", "4", "]", ",", "\n", ")", "\n", "\n", "for", "head", "in", "sorted", "(", "self", ".", "heads", ")", ":", "\n", "          ", "num_output", "=", "self", ".", "heads", "[", "head", "]", "\n", "if", "head_conv", ">", "0", ":", "\n", "            ", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "num_output", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "fc", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "num_output", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.PoseResNet._make_layer": [[144, 160], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.PoseResNet._get_deconv_cfg": [[161, 173], ["None"], "methods", ["None"], ["", "def", "_get_deconv_cfg", "(", "self", ",", "deconv_kernel", ",", "index", ")", ":", "\n", "        ", "if", "deconv_kernel", "==", "4", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "0", "\n", "", "elif", "deconv_kernel", "==", "3", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "1", "\n", "", "elif", "deconv_kernel", "==", "2", ":", "\n", "            ", "padding", "=", "0", "\n", "output_padding", "=", "0", "\n", "\n", "", "return", "deconv_kernel", ",", "padding", ",", "output_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.PoseResNet._make_deconv_layer": [[174, 200], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "len", "model_tiny.PoseResNet._get_deconv_cfg", "layers.append", "layers.append", "layers.append", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._get_deconv_cfg"], ["", "def", "_make_deconv_layer", "(", "self", ",", "num_layers", ",", "num_filters", ",", "num_kernels", ")", ":", "\n", "        ", "assert", "num_layers", "==", "len", "(", "num_filters", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "assert", "num_layers", "==", "len", "(", "num_kernels", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "kernel", ",", "padding", ",", "output_padding", "=", "self", ".", "_get_deconv_cfg", "(", "num_kernels", "[", "i", "]", ",", "i", ")", "\n", "\n", "planes", "=", "num_filters", "[", "i", "]", "\n", "layers", ".", "append", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "self", ".", "inplanes", ",", "\n", "out_channels", "=", "planes", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "bias", "=", "self", ".", "deconv_with_bias", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.PoseResNet.forward": [[201, 217], ["model_tiny.PoseResNet.conv1", "model_tiny.PoseResNet.bn1", "model_tiny.PoseResNet.relu", "model_tiny.PoseResNet.maxpool", "model_tiny.PoseResNet.layer1", "model_tiny.PoseResNet.layer2", "model_tiny.PoseResNet.layer3", "model_tiny.PoseResNet.layer4", "model_tiny.PoseResNet.deconv_layers", "model_tiny.PoseResNet.__getattr__"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "deconv_layers", "(", "x", ")", "\n", "ret", "=", "{", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "ret", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "x", ")", "\n", "", "return", "[", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.PoseResNet.init_weights": [[218, 246], ["model_tiny.PoseResNet.deconv_layers.named_modules", "torch.load_url", "torch.load_url", "torch.load_url", "print", "model_tiny.PoseResNet.load_state_dict", "print", "print", "ValueError", "isinstance", "model_tiny.PoseResNet.__getattr__", "enumerate", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "model_tiny.PoseResNet.modules", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "num_layers", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "if", "pretrained", ":", "\n", "            ", "for", "_", ",", "m", "in", "self", ".", "deconv_layers", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "self", ".", "deconv_with_bias", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "for", "head", "in", "self", ".", "heads", ":", "\n", "              ", "final_layer", "=", "self", ".", "__getattr__", "(", "head", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "final_layer", ".", "modules", "(", ")", ")", ":", "\n", "                  ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                      ", "if", "m", ".", "weight", ".", "shape", "[", "0", "]", "==", "self", ".", "heads", "[", "head", "]", ":", "\n", "                          ", "if", "'hm'", "in", "head", ":", "\n", "                              ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                              ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "", "", "url", "=", "model_urls", "[", "'resnet{}'", ".", "format", "(", "num_layers", ")", "]", "\n", "pretrained_state_dict", "=", "model_zoo", ".", "load_url", "(", "url", ")", "\n", "print", "(", "'=> loading pretrained model {}'", ".", "format", "(", "url", ")", ")", "\n", "self", ".", "load_state_dict", "(", "pretrained_state_dict", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'=> imagenet pretrained model dose not exist'", ")", "\n", "print", "(", "'=> please download it first'", ")", "\n", "raise", "ValueError", "(", "'imagenet pretrained model does not exist'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.conv3x3": [[21, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_tiny.get_pose_net": [[255, 261], ["model_tiny.PoseResNet", "model_tiny.PoseResNet.init_weights"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet.init_weights"], ["def", "get_pose_net", "(", "num_layers", ",", "heads", ",", "head_conv", "=", "64", ")", ":", "\n", "  ", "block_class", ",", "layers", "=", "resnet_spec", "[", "num_layers", "]", "\n", "\n", "model", "=", "PoseResNet", "(", "block_class", ",", "layers", ",", "heads", ",", "head_conv", "=", "head_conv", ")", "\n", "model", ".", "init_weights", "(", "num_layers", ",", "pretrained", "=", "True", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.detector.CenterNetDetector.__init__": [[14, 36], ["print", "deploy_detector.utility.create_model", "deploy_detector.utility.load_model", "detector.CenterNetDetector.model.to", "detector.CenterNetDetector.model.eval", "numpy.array().reshape", "numpy.array().reshape", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "torch.device", "torch.device", "torchvision.Normalize", "numpy.array", "numpy.array", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.model.create_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.load_model"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "gpus", "[", "0", "]", ">=", "0", ":", "\n", "            ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "            ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "print", "(", "'Creating model...'", ")", "\n", "self", ".", "model", "=", "create_model", "(", "opt", ".", "num_layers", ")", "\n", "self", ".", "model", "=", "load_model", "(", "self", ".", "model", ",", "opt", ".", "model_path", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "opt", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "opt", ".", "mean", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "opt", ".", "std", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "self", ".", "max_per_image", "=", "opt", ".", "K", "\n", "self", ".", "num_classes", "=", "opt", ".", "num_classes", "\n", "self", ".", "scales", "=", "opt", ".", "test_scales", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "img_name", "=", "None", "\n", "self", ".", "transform_list", "=", "[", "transforms", ".", "Normalize", "(", "mean", "=", "opt", ".", "mean", ",", "std", "=", "opt", ".", "std", ")", "]", "\n", "self", ".", "mean_gpu", "=", "torch", ".", "from_numpy", "(", "self", ".", "mean", ")", ".", "to", "(", "self", ".", "opt", ".", "device", ")", ".", "reshape", "(", "3", ")", "\n", "self", ".", "std_gpu", "=", "torch", ".", "from_numpy", "(", "self", ".", "std", ")", ".", "to", "(", "self", ".", "opt", ".", "device", ")", ".", "reshape", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.detector.CenterNetDetector.pre_process_org": [[38, 59], ["int", "int", "numpy.array", "deploy_detector.utility.get_affine_transform", "cv2.resize", "cv2.warpAffine", "cv2.warpAffine.transpose().reshape", "torch.from_numpy", "max", "cv2.warpAffine.transpose"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform"], ["", "def", "pre_process_org", "(", "self", ",", "image", ",", "scale", ",", "meta", "=", "None", ")", ":", "\n", "        ", "height", ",", "width", "=", "image", ".", "shape", "[", "0", ":", "2", "]", "\n", "new_height", "=", "int", "(", "height", "*", "scale", ")", "\n", "new_width", "=", "int", "(", "width", "*", "scale", ")", "\n", "\n", "inp_height", ",", "inp_width", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "c", "=", "np", ".", "array", "(", "[", "new_width", "/", "2.", ",", "new_height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "height", ",", "width", ")", "*", "1.0", "\n", "\n", "trans_input", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "inp_width", ",", "inp_height", "]", ")", "\n", "resized_image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "new_width", ",", "new_height", ")", ")", "\n", "inp_image", "=", "cv2", ".", "warpAffine", "(", "resized_image", ",", "trans_input", ",", "(", "inp_width", ",", "inp_height", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "inp_image", "=", "(", "(", "inp_image", "/", "255.", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "images", "=", "inp_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "reshape", "(", "1", ",", "3", ",", "inp_height", ",", "inp_width", ")", "\n", "images", "=", "torch", ".", "from_numpy", "(", "images", ")", "\n", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "return", "images", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.detector.CenterNetDetector.pre_process_resize": [[61, 77], ["time.time", "cv2.resize", "time.time", "torch.from_numpy().float", "numpy.array", "max", "torch.from_numpy"], "methods", ["None"], ["", "def", "pre_process_resize", "(", "self", ",", "image", ",", "scale", "=", "1", ",", "meta", "=", "None", ")", ":", "\n", "        ", "height", ",", "width", "=", "image", ".", "shape", "[", "0", ":", "2", "]", "\n", "inp_height", ",", "inp_width", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "resized_image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "inp_width", ",", "inp_height", ")", ")", "\n", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "images", "=", "torch", ".", "from_numpy", "(", "resized_image", ")", ".", "float", "(", ")", "\n", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "return", "images", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.detector.CenterNetDetector.pre_process_affine": [[79, 96], ["time.time", "numpy.array", "deploy_detector.utility.get_affine_transform", "cv2.warpAffine", "time.time", "torch.from_numpy().float", "max", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform"], ["", "def", "pre_process_affine", "(", "self", ",", "image", ",", "scale", "=", "1", ",", "meta", "=", "None", ")", ":", "\n", "        ", "height", ",", "width", "=", "image", ".", "shape", "[", "0", ":", "2", "]", "\n", "inp_height", ",", "inp_width", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "height", ",", "width", ")", "*", "1.0", "\n", "trans_input", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "inp_width", ",", "inp_height", "]", ")", "\n", "inp_image", "=", "cv2", ".", "warpAffine", "(", "image", ",", "trans_input", ",", "(", "inp_width", ",", "inp_height", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "images", "=", "torch", ".", "from_numpy", "(", "inp_image", ")", ".", "float", "(", ")", "\n", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "return", "images", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.detector.CenterNetDetector.process": [[98, 117], ["torch.no_grad", "output[].sigmoid_", "torch.cuda.synchronize", "time.time", "deploy_detector.utility.centernet_decode", "detector.CenterNetDetector.model", "deploy_detector.utility.flip_tensor", "deploy_detector.utility.flip_tensor"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder.centernet_decode", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils.flip_tensor", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils.flip_tensor"], ["", "def", "process", "(", "self", ",", "images", ",", "return_time", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "self", ".", "model", "(", "images", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid_", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "reg", "=", "output", "[", "'reg'", "]", "\n", "if", "self", ".", "opt", ".", "flip_test", ":", "\n", "                ", "hm", "=", "(", "hm", "[", "0", ":", "1", "]", "+", "flip_tensor", "(", "hm", "[", "1", ":", "2", "]", ")", ")", "/", "2", "\n", "wh", "=", "(", "wh", "[", "0", ":", "1", "]", "+", "flip_tensor", "(", "wh", "[", "1", ":", "2", "]", ")", ")", "/", "2", "\n", "reg", "=", "reg", "[", "0", ":", "1", "]", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "forward_time", "=", "time", ".", "time", "(", ")", "\n", "dets", "=", "centernet_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "\n", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "", "if", "return_time", ":", "\n", "            ", "return", "output", ",", "dets", ",", "forward_time", "\n", "", "else", ":", "\n", "            ", "return", "output", ",", "dets", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.detector.CenterNetDetector.post_process": [[118, 129], ["deploy_detector.utility.centernet_post_process.detach().cpu().numpy", "deploy_detector.utility.centernet_post_process.reshape", "deploy_detector.utility.centernet_post_process", "range", "deploy_detector.utility.centernet_post_process.copy", "numpy.array().reshape", "deploy_detector.utility.centernet_post_process.detach().cpu", "numpy.array", "deploy_detector.utility.centernet_post_process.detach"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.centernet_post_process"], ["", "", "def", "post_process", "(", "self", ",", "dets", ",", "meta", ",", "scale", "=", "1", ")", ":", "\n", "        ", "dets", "=", "dets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dets", "=", "dets", ".", "reshape", "(", "1", ",", "-", "1", ",", "dets", ".", "shape", "[", "2", "]", ")", "\n", "dets", "=", "centernet_post_process", "(", "dets", ".", "copy", "(", ")", ",", "\n", "[", "meta", "[", "'c'", "]", "]", ",", "[", "meta", "[", "'s'", "]", "]", ",", "meta", "[", "'out_height'", "]", ",", "\n", "meta", "[", "'out_width'", "]", ",", "\n", "self", ".", "opt", ".", "num_classes", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", ":", "\n", "            ", "dets", "[", "0", "]", "[", "j", "]", "=", "np", ".", "array", "(", "dets", "[", "0", "]", "[", "j", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "5", ")", "\n", "dets", "[", "0", "]", "[", "j", "]", "[", ":", ",", ":", "4", "]", "/=", "scale", "\n", "", "return", "dets", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.detector.CenterNetDetector.merge_outputs": [[130, 144], ["range", "numpy.hstack", "numpy.concatenate().astype", "len", "range", "len", "numpy.partition", "numpy.concatenate", "range"], "methods", ["None"], ["", "def", "merge_outputs", "(", "self", ",", "detections", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", ":", "\n", "            ", "results", "[", "j", "]", "=", "np", ".", "concatenate", "(", "\n", "[", "detection", "[", "j", "]", "for", "detection", "in", "detections", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "scores", "=", "np", ".", "hstack", "(", "\n", "[", "results", "[", "j", "]", "[", ":", ",", "4", "]", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", ")", "\n", "if", "len", "(", "scores", ")", ">", "self", ".", "max_per_image", ":", "\n", "            ", "kth", "=", "len", "(", "scores", ")", "-", "self", ".", "max_per_image", "\n", "thresh", "=", "np", ".", "partition", "(", "scores", ",", "kth", ")", "[", "kth", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", ":", "\n", "                ", "keep_inds", "=", "(", "results", "[", "j", "]", "[", ":", ",", "4", "]", ">=", "thresh", ")", "\n", "results", "[", "j", "]", "=", "results", "[", "j", "]", "[", "keep_inds", "]", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.detector.CenterNetDetector.inference": [[145, 217], ["time.time", "isinstance", "time.time", "detector.CenterNetDetector.merge_outputs", "torch.cuda.synchronize", "time.time", "time.time", "time.time", "torch.unsqueeze.to", "print", "time.time", "torch.unsqueeze.permute", "torch.unsqueeze", "print", "torch.cuda.synchronize", "time.time", "detector.CenterNetDetector.process", "torch.cuda.synchronize", "time.time", "detector.CenterNetDetector.post_process", "torch.cuda.synchronize", "time.time", "detections.append", "type", "type", "cv2.imread", "os.path.basename", "[].numpy", "detector.CenterNetDetector.pre_process_affine", "detector.CenterNetDetector.std_gpu.expand_as", "detector.CenterNetDetector.mean_gpu.expand_as", "v.numpy", "meta.items", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.merge_outputs", "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.process", "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.post_process", "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.detector.CenterNetDetector.pre_process_affine"], ["", "def", "inference", "(", "self", ",", "image_or_path_or_tensor", ",", "meta", "=", "None", ")", ":", "\n", "        ", "load_time", ",", "pre_time", ",", "net_time", ",", "dec_time", ",", "post_time", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "merge_time", ",", "tot_time", "=", "0", ",", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "pre_processed", "=", "False", "\n", "if", "isinstance", "(", "image_or_path_or_tensor", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "image", "=", "image_or_path_or_tensor", "\n", "", "elif", "type", "(", "image_or_path_or_tensor", ")", "==", "type", "(", "''", ")", ":", "\n", "            ", "image", "=", "cv2", ".", "imread", "(", "image_or_path_or_tensor", ")", "\n", "self", ".", "img_name", "=", "os", ".", "path", ".", "basename", "(", "image_or_path_or_tensor", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "image_or_path_or_tensor", "[", "'image'", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "pre_processed_images", "=", "image_or_path_or_tensor", "\n", "pre_processed", "=", "True", "\n", "\n", "", "loaded_time", "=", "time", ".", "time", "(", ")", "\n", "load_time", "+=", "(", "loaded_time", "-", "start_time", ")", "\n", "\n", "detections", "=", "[", "]", "\n", "for", "scale", "in", "self", ".", "scales", ":", "\n", "            ", "scale_start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "pre_processed", ":", "\n", "                ", "images", ",", "meta", "=", "self", ".", "pre_process_affine", "(", "image", ",", "scale", ",", "meta", ")", "\n", "#images, meta = self.pre_process_resize(image, scale, meta)   # decreased performance", "\n", "#images, meta = self.pre_process_org(image, scale, meta)     # same performance with pre_process_affine", "\n", "", "else", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "                ", "images", "=", "pre_processed_images", "[", "'images'", "]", "[", "scale", "]", "[", "0", "]", "\n", "meta", "=", "pre_processed_images", "[", "'meta'", "]", "[", "scale", "]", "\n", "meta", "=", "{", "k", ":", "v", ".", "numpy", "(", ")", "[", "0", "]", "for", "k", ",", "v", "in", "meta", ".", "items", "(", ")", "}", "\n", "\n", "", "ts", "=", "time", ".", "time", "(", ")", "\n", "images", "=", "images", ".", "to", "(", "self", ".", "opt", ".", "device", ")", "\n", "print", "(", "\"tensor to GPU time: {}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "ts", ")", ")", "\n", "\n", "# if using pre_process_org, comment this code block", "\n", "#'''", "\n", "# perform image normalization on GPU", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "images", "=", "(", "(", "images", "/", "255.", "-", "self", ".", "mean_gpu", ".", "expand_as", "(", "images", ")", ")", "/", "self", ".", "std_gpu", ".", "expand_as", "(", "images", ")", ")", "\n", "images", "=", "images", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "images", "=", "torch", ".", "unsqueeze", "(", "images", ",", "0", ")", "\n", "print", "(", "\"GPU image normalization time: {}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "ts", ")", ")", "\n", "#'''", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "pre_process_time", "=", "time", ".", "time", "(", ")", "\n", "pre_time", "+=", "pre_process_time", "-", "scale_start_time", "\n", "\n", "output", ",", "dets", ",", "forward_time", "=", "self", ".", "process", "(", "images", ",", "return_time", "=", "True", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "net_time", "+=", "forward_time", "-", "pre_process_time", "\n", "decode_time", "=", "time", ".", "time", "(", ")", "\n", "dec_time", "+=", "decode_time", "-", "forward_time", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets", ",", "meta", ",", "scale", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "post_process_time", "=", "time", ".", "time", "(", ")", "\n", "post_time", "+=", "post_process_time", "-", "decode_time", "\n", "\n", "detections", ".", "append", "(", "dets", ")", "\n", "\n", "", "results", "=", "self", ".", "merge_outputs", "(", "detections", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "merge_time", "+=", "end_time", "-", "post_process_time", "\n", "tot_time", "+=", "end_time", "-", "start_time", "\n", "\n", "return", "{", "'results'", ":", "results", ",", "'tot'", ":", "tot_time", ",", "'load'", ":", "load_time", ",", "\n", "'pre'", ":", "pre_time", ",", "'net'", ":", "net_time", ",", "'dec'", ":", "dec_time", ",", "\n", "'post'", ":", "post_time", ",", "'merge'", ":", "merge_time", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.BasicBlock.__init__": [[30, 42], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.BasicBlock.forward": [[43, 58], ["model.BasicBlock.conv1", "model.BasicBlock.bn1", "model.BasicBlock.relu", "model.BasicBlock.conv2", "model.BasicBlock.bn2", "model.BasicBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.Bottleneck.__init__": [[63, 79], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "expansion", "=", "Bottleneck", ".", "expansion", "\n", "bottle_planes", "=", "planes", "//", "expansion", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "bottle_planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "bottle_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.Bottleneck.forward": [[80, 99], ["model.Bottleneck.conv1", "model.Bottleneck.bn1", "model.Bottleneck.relu", "model.Bottleneck.conv2", "model.Bottleneck.bn2", "model.Bottleneck.relu", "model.Bottleneck.conv3", "model.Bottleneck.bn3", "model.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.BottleneckX.__init__": [[105, 121], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BottleneckX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cardinality", "=", "BottleneckX", ".", "cardinality", "\n", "bottle_planes", "=", "planes", "*", "cardinality", "//", "32", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "bottle_planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "bottle_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.BottleneckX.forward": [[122, 141], ["model.BottleneckX.conv1", "model.BottleneckX.bn1", "model.BottleneckX.relu", "model.BottleneckX.conv2", "model.BottleneckX.bn2", "model.BottleneckX.relu", "model.BottleneckX.conv3", "model.BottleneckX.bn3", "model.BottleneckX.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.Root.__init__": [[144, 152], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "residual", ")", ":", "\n", "        ", "super", "(", "Root", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "\n", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ")", "\n", "self", ".", "bn", "=", "BatchNorm", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.Root.forward": [[153, 162], ["model.Root.conv", "model.Root.bn", "model.Root.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "x", ")", ":", "\n", "        ", "children", "=", "x", "\n", "x", "=", "self", ".", "conv", "(", "torch", ".", "cat", "(", "x", ",", "1", ")", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "x", "+=", "children", "[", "0", "]", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.Tree.__init__": [[165, 202], ["torch.nn.Module.__init__", "block", "block", "model.Tree", "model.Tree", "model.Root", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "levels", ",", "block", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "\n", "level_root", "=", "False", ",", "root_dim", "=", "0", ",", "root_kernel_size", "=", "1", ",", "\n", "dilation", "=", "1", ",", "root_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "Tree", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "root_dim", "==", "0", ":", "\n", "            ", "root_dim", "=", "2", "*", "out_channels", "\n", "", "if", "level_root", ":", "\n", "            ", "root_dim", "+=", "in_channels", "\n", "", "if", "levels", "==", "1", ":", "\n", "            ", "self", ".", "tree1", "=", "block", "(", "in_channels", ",", "out_channels", ",", "stride", ",", "\n", "dilation", "=", "dilation", ")", "\n", "self", ".", "tree2", "=", "block", "(", "out_channels", ",", "out_channels", ",", "1", ",", "\n", "dilation", "=", "dilation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tree1", "=", "Tree", "(", "levels", "-", "1", ",", "block", ",", "in_channels", ",", "out_channels", ",", "\n", "stride", ",", "root_dim", "=", "0", ",", "\n", "root_kernel_size", "=", "root_kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "root_residual", "=", "root_residual", ")", "\n", "self", ".", "tree2", "=", "Tree", "(", "levels", "-", "1", ",", "block", ",", "out_channels", ",", "out_channels", ",", "\n", "root_dim", "=", "root_dim", "+", "out_channels", ",", "\n", "root_kernel_size", "=", "root_kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "root_residual", "=", "root_residual", ")", "\n", "", "if", "levels", "==", "1", ":", "\n", "            ", "self", ".", "root", "=", "Root", "(", "root_dim", ",", "out_channels", ",", "root_kernel_size", ",", "\n", "root_residual", ")", "\n", "", "self", ".", "level_root", "=", "level_root", "\n", "self", ".", "root_dim", "=", "root_dim", "\n", "self", ".", "downsample", "=", "None", "\n", "self", ".", "project", "=", "None", "\n", "self", ".", "levels", "=", "levels", "\n", "if", "stride", ">", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "MaxPool2d", "(", "stride", ",", "stride", "=", "stride", ")", "\n", "", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.Tree.forward": [[204, 218], ["model.Tree.tree1", "model.Tree.downsample", "model.Tree.project", "children.append", "model.Tree.tree2", "model.Tree.root", "children.append", "model.Tree.tree2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ",", "children", "=", "None", ")", ":", "\n", "        ", "children", "=", "[", "]", "if", "children", "is", "None", "else", "children", "\n", "bottom", "=", "self", ".", "downsample", "(", "x", ")", "if", "self", ".", "downsample", "else", "x", "\n", "residual", "=", "self", ".", "project", "(", "bottom", ")", "if", "self", ".", "project", "else", "bottom", "\n", "if", "self", ".", "level_root", ":", "\n", "            ", "children", ".", "append", "(", "bottom", ")", "\n", "", "x1", "=", "self", ".", "tree1", "(", "x", ",", "residual", ")", "\n", "if", "self", ".", "levels", "==", "1", ":", "\n", "            ", "x2", "=", "self", ".", "tree2", "(", "x1", ")", "\n", "x", "=", "self", ".", "root", "(", "x2", ",", "x1", ",", "*", "children", ")", "\n", "", "else", ":", "\n", "            ", "children", ".", "append", "(", "x1", ")", "\n", "x", "=", "self", ".", "tree2", "(", "x1", ",", "children", "=", "children", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.DLA.__init__": [[221, 258], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "model.DLA._make_conv_level", "model.DLA._make_conv_level", "model.Tree", "model.Tree", "model.Tree", "model.Tree", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "model.DLA.modules", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA._make_conv_level", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA._make_conv_level"], ["    ", "def", "__init__", "(", "self", ",", "levels", ",", "channels", ",", "num_classes", "=", "1000", ",", "\n", "block", "=", "BasicBlock", ",", "residual_root", "=", "False", ",", "return_levels", "=", "False", ",", "\n", "pool_size", "=", "7", ",", "linear_root", "=", "False", ")", ":", "\n", "        ", "super", "(", "DLA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "return_levels", "=", "return_levels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "base_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "level0", "=", "self", ".", "_make_conv_level", "(", "\n", "channels", "[", "0", "]", ",", "channels", "[", "0", "]", ",", "levels", "[", "0", "]", ")", "\n", "self", ".", "level1", "=", "self", ".", "_make_conv_level", "(", "\n", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "levels", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "level2", "=", "Tree", "(", "levels", "[", "2", "]", ",", "block", ",", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "2", ",", "\n", "level_root", "=", "False", ",", "\n", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level3", "=", "Tree", "(", "levels", "[", "3", "]", ",", "block", ",", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level4", "=", "Tree", "(", "levels", "[", "4", "]", ",", "block", ",", "channels", "[", "3", "]", ",", "channels", "[", "4", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level5", "=", "Tree", "(", "levels", "[", "5", "]", ",", "block", ",", "channels", "[", "4", "]", ",", "channels", "[", "5", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "pool_size", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "channels", "[", "-", "1", "]", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.DLA._make_level": [[259, 275], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "", "def", "_make_level", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "stride", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.DLA._make_conv_level": [[276, 287], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "modules.extend", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["None"], ["", "def", "_make_conv_level", "(", "self", ",", "inplanes", ",", "planes", ",", "convs", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "convs", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", ",", "\n", "BatchNorm", "(", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", "\n", "inplanes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.DLA.forward": [[288, 302], ["model.DLA.base_layer", "range", "y.append", "model.DLA.avgpool", "model.DLA.fc", "x.view.view.view", "getattr", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "[", "]", "\n", "x", "=", "self", ".", "base_layer", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "'level{}'", ".", "format", "(", "i", ")", ")", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "", "if", "self", ".", "return_levels", ":", "\n", "            ", "return", "y", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.DLA.load_pretrained_model": [[303, 316], ["name.endswith", "len", "torch.nn.Conv2d", "torch.nn.Conv2d", "model.DLA.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "model.get_model_url", "torch.load_url", "torch.load_url", "list", "torch.load_url.keys"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.get_model_url"], ["", "", "def", "load_pretrained_model", "(", "self", ",", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", ":", "\n", "        ", "fc", "=", "self", ".", "fc", "\n", "if", "name", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "            ", "model_weights", "=", "torch", ".", "load", "(", "data", "+", "name", ")", "\n", "", "else", ":", "\n", "            ", "model_url", "=", "get_model_url", "(", "data", ",", "name", ",", "hash", ")", "\n", "model_weights", "=", "model_zoo", ".", "load_url", "(", "model_url", ")", "\n", "", "num_classes", "=", "len", "(", "model_weights", "[", "list", "(", "model_weights", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "]", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", "[", "-", "1", "]", ",", "num_classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "load_state_dict", "(", "model_weights", ")", "\n", "self", ".", "fc", "=", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.Identity.__init__": [[420, 422], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.Identity.forward": [[423, 425], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.IDAUp.__init__": [[440, 480], ["torch.nn.Module.__init__", "enumerate", "range", "model.IDAUp.modules", "int", "setattr", "setattr", "len", "torch.nn.Sequential", "torch.nn.Sequential", "setattr", "isinstance", "model.Identity", "torch.nn.Sequential", "torch.nn.Sequential", "model.Identity", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "model.fill_up_weights", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "m.weight.data.normal_", "isinstance", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "str", "str", "str", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.fill_up_weights"], ["    ", "def", "__init__", "(", "self", ",", "node_kernel", ",", "out_dim", ",", "channels", ",", "up_factors", ")", ":", "\n", "        ", "super", "(", "IDAUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "channels", ")", ":", "\n", "            ", "if", "c", "==", "out_dim", ":", "\n", "                ", "proj", "=", "Identity", "(", ")", "\n", "", "else", ":", "\n", "                ", "proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "c", ",", "out_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "f", "=", "int", "(", "up_factors", "[", "i", "]", ")", "\n", "if", "f", "==", "1", ":", "\n", "                ", "up", "=", "Identity", "(", ")", "\n", "", "else", ":", "\n", "                ", "up", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "out_dim", ",", "out_dim", ",", "f", "*", "2", ",", "stride", "=", "f", ",", "padding", "=", "f", "//", "2", ",", "\n", "output_padding", "=", "0", ",", "groups", "=", "out_dim", ",", "bias", "=", "False", ")", "\n", "fill_up_weights", "(", "up", ")", "\n", "", "setattr", "(", "self", ",", "'proj_'", "+", "str", "(", "i", ")", ",", "proj", ")", "\n", "setattr", "(", "self", ",", "'up_'", "+", "str", "(", "i", ")", ",", "up", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "channels", ")", ")", ":", "\n", "            ", "node", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "out_dim", "*", "2", ",", "out_dim", ",", "\n", "kernel_size", "=", "node_kernel", ",", "stride", "=", "1", ",", "\n", "padding", "=", "node_kernel", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "setattr", "(", "self", ",", "'node_'", "+", "str", "(", "i", ")", ",", "node", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.IDAUp.forward": [[481, 496], ["list", "enumerate", "range", "len", "len", "len", "len", "getattr", "getattr", "getattr.", "len", "getattr", "getattr.", "y.append", "getattr.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str", "str"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "layers", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "channels", ")", "==", "len", "(", "layers", ")", ",", "'{} vs {} layers'", ".", "format", "(", "len", "(", "self", ".", "channels", ")", ",", "len", "(", "layers", ")", ")", "\n", "layers", "=", "list", "(", "layers", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "upsample", "=", "getattr", "(", "self", ",", "'up_'", "+", "str", "(", "i", ")", ")", "\n", "project", "=", "getattr", "(", "self", ",", "'proj_'", "+", "str", "(", "i", ")", ")", "\n", "layers", "[", "i", "]", "=", "upsample", "(", "project", "(", "l", ")", ")", "\n", "", "x", "=", "layers", "[", "0", "]", "\n", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layers", ")", ")", ":", "\n", "            ", "node", "=", "getattr", "(", "self", ",", "'node_'", "+", "str", "(", "i", ")", ")", "\n", "x", "=", "node", "(", "torch", ".", "cat", "(", "[", "x", ",", "layers", "[", "i", "]", "]", ",", "1", ")", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.DLAUp.__init__": [[499, 513], ["torch.nn.Module.__init__", "list", "numpy.array", "range", "setattr", "len", "model.IDAUp"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "scales", "=", "(", "1", ",", "2", ",", "4", ",", "8", ",", "16", ")", ",", "in_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", "DLAUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "is", "None", ":", "\n", "            ", "in_channels", "=", "channels", "\n", "", "self", ".", "channels", "=", "channels", "\n", "channels", "=", "list", "(", "channels", ")", "\n", "scales", "=", "np", ".", "array", "(", "scales", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "channels", ")", "-", "1", ")", ":", "\n", "            ", "j", "=", "-", "i", "-", "2", "\n", "setattr", "(", "self", ",", "'ida_{}'", ".", "format", "(", "i", ")", ",", "\n", "IDAUp", "(", "3", ",", "channels", "[", "j", "]", ",", "in_channels", "[", "j", ":", "]", ",", "\n", "scales", "[", "j", ":", "]", "//", "scales", "[", "j", "]", ")", ")", "\n", "scales", "[", "j", "+", "1", ":", "]", "=", "scales", "[", "j", "]", "\n", "in_channels", "[", "j", "+", "1", ":", "]", "=", "[", "channels", "[", "j", "]", "for", "_", "in", "channels", "[", "j", "+", "1", ":", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.DLAUp.forward": [[514, 522], ["list", "range", "len", "getattr", "getattr.", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "layers", ")", ":", "\n", "        ", "layers", "=", "list", "(", "layers", ")", "\n", "assert", "len", "(", "layers", ")", ">", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "layers", ")", "-", "1", ")", ":", "\n", "            ", "ida", "=", "getattr", "(", "self", ",", "'ida_{}'", ".", "format", "(", "i", ")", ")", "\n", "x", ",", "y", "=", "ida", "(", "layers", "[", "-", "i", "-", "2", ":", "]", ")", "\n", "layers", "[", "-", "i", "-", "1", ":", "]", "=", "y", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.DLASeg.__init__": [[533, 568], ["torch.nn.Module.__init__", "int", "model.DLAUp", "numpy.log2", "model.DLASeg.__setattr__", "globals", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "len", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "fc[].bias.data.fill_", "model.fill_fc_weights", "torch.nn.Conv2d.bias.data.fill_", "model.fill_fc_weights"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.fill_fc_weights", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.fill_fc_weights"], ["    ", "def", "__init__", "(", "self", ",", "base_name", ",", "heads", ",", "\n", "pretrained", "=", "True", ",", "down_ratio", "=", "4", ",", "head_conv", "=", "256", ")", ":", "\n", "        ", "super", "(", "DLASeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "down_ratio", "in", "[", "2", ",", "4", ",", "8", ",", "16", "]", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "first_level", "=", "int", "(", "np", ".", "log2", "(", "down_ratio", ")", ")", "\n", "self", ".", "base", "=", "globals", "(", ")", "[", "base_name", "]", "(", "\n", "pretrained", "=", "pretrained", ",", "return_levels", "=", "True", ")", "\n", "channels", "=", "self", ".", "base", ".", "channels", "\n", "scales", "=", "[", "2", "**", "i", "for", "i", "in", "range", "(", "len", "(", "channels", "[", "self", ".", "first_level", ":", "]", ")", ")", "]", "\n", "self", ".", "dla_up", "=", "DLAUp", "(", "channels", "[", "self", ".", "first_level", ":", "]", ",", "scales", "=", "scales", ")", "\n", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "classes", "=", "self", ".", "heads", "[", "head", "]", "\n", "if", "head_conv", ">", "0", ":", "\n", "                ", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channels", "[", "self", ".", "first_level", "]", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                    ", "fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                    ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "else", ":", "\n", "                ", "fc", "=", "nn", ".", "Conv2d", "(", "channels", "[", "self", ".", "first_level", "]", ",", "classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                    ", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                    ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.DLASeg.forward": [[570, 577], ["model.DLASeg.base", "model.DLASeg.dla_up", "model.DLASeg.__getattr__"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "x", "=", "self", ".", "dla_up", "(", "x", "[", "self", ".", "first_level", ":", "]", ")", "\n", "ret", "=", "{", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "ret", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "x", ")", "\n", "", "return", "[", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.get_model_url": [[19, 21], ["os.path.join"], "function", ["None"], ["def", "get_model_url", "(", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", ":", "\n", "    ", "return", "join", "(", "'http://dl.yf.io/dla/models'", ",", "data", ",", "'{}-{}.pth'", ".", "format", "(", "name", ",", "hash", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.conv3x3": [[23, 27], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.dla34": [[318, 325], ["model.DLA", "DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "", "def", "dla34", "(", "pretrained", ",", "**", "kwargs", ")", ":", "# DLA-34", "\n", "    ", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", "]", ",", "\n", "block", "=", "BasicBlock", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.dla46_c": [[327, 335], ["model.DLA", "DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla46_c", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-46-C", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "64", ",", "128", ",", "256", "]", ",", "\n", "block", "=", "Bottleneck", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla46_c'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.dla46x_c": [[337, 345], ["model.DLA", "DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla46x_c", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-46-C", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "64", ",", "128", ",", "256", "]", ",", "\n", "block", "=", "BottleneckX", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla46x_c'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.dla60x_c": [[347, 355], ["model.DLA", "DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla60x_c", "(", "pretrained", ",", "**", "kwargs", ")", ":", "# DLA-X-60-C", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "64", ",", "128", ",", "256", "]", ",", "\n", "block", "=", "BottleneckX", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "data", "=", "'imagenet'", ",", "name", "=", "'dla60x_c'", ",", "hash", "=", "'b870c45c'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.dla60": [[357, 365], ["model.DLA", "DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla60", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-60", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "Bottleneck", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla60'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.dla60x": [[367, 375], ["model.DLA", "DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla60x", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-60", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "BottleneckX", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla60x'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.dla102": [[377, 384], ["model.DLA", "DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla102", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-102", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "3", ",", "4", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "Bottleneck", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla102'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.dla102x": [[386, 393], ["model.DLA", "DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla102x", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-102", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "3", ",", "4", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "BottleneckX", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla102x'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.dla102x2": [[395, 402], ["model.DLA", "DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla102x2", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-102 64", "\n", "    ", "BottleneckX", ".", "cardinality", "=", "64", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "3", ",", "4", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "BottleneckX", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla102x2'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.dla169": [[404, 411], ["model.DLA", "DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla169", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-169", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "Bottleneck", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla169'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.set_bn": [[413, 417], ["None"], "function", ["None"], ["", "def", "set_bn", "(", "bn", ")", ":", "\n", "    ", "global", "BatchNorm", "\n", "BatchNorm", "=", "bn", "\n", "dla", ".", "BatchNorm", "=", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.fill_up_weights": [[427, 437], ["math.ceil", "range", "range", "w.size", "range", "w.size", "w.size", "w.size", "math.fabs", "math.fabs"], "function", ["None"], ["", "", "def", "fill_up_weights", "(", "up", ")", ":", "\n", "    ", "w", "=", "up", ".", "weight", ".", "data", "\n", "f", "=", "math", ".", "ceil", "(", "w", ".", "size", "(", "2", ")", "/", "2", ")", "\n", "c", "=", "(", "2", "*", "f", "-", "1", "-", "f", "%", "2", ")", "/", "(", "2.", "*", "f", ")", "\n", "for", "i", "in", "range", "(", "w", ".", "size", "(", "2", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "w", ".", "size", "(", "3", ")", ")", ":", "\n", "            ", "w", "[", "0", ",", "0", ",", "i", ",", "j", "]", "=", "(", "1", "-", "math", ".", "fabs", "(", "i", "/", "f", "-", "c", ")", ")", "*", "(", "1", "-", "math", ".", "fabs", "(", "j", "/", "f", "-", "c", ")", ")", "\n", "", "", "for", "c", "in", "range", "(", "1", ",", "w", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "w", "[", "c", ",", "0", ",", ":", ",", ":", "]", "=", "w", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.fill_fc_weights": [[524, 530], ["layers.modules", "isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "fill_fc_weights", "(", "layers", ")", ":", "\n", "    ", "for", "m", "in", "layers", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model.get_pose_net": [[579, 585], ["model.DLASeg"], "function", ["None"], ["", "", "def", "get_pose_net", "(", "num_layers", ",", "heads", ",", "head_conv", "=", "256", ",", "down_ratio", "=", "4", ")", ":", "\n", "    ", "model", "=", "DLASeg", "(", "'dla{}'", ".", "format", "(", "num_layers", ")", ",", "heads", ",", "\n", "pretrained", "=", "True", ",", "\n", "down_ratio", "=", "down_ratio", ",", "\n", "head_conv", "=", "head_conv", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.SplAtConv2d.__init__": [[42, 76], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "max", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "model_resnest.rSoftMax", "RFConv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "norm_layer", "model_resnest.DropBlock2D"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "kernel_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SplAtConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "rectify", "=", "rectify", "and", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "inter_channels", "=", "max", "(", "in_channels", "*", "radix", "//", "reduction_factor", ",", "32", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "if", "self", ".", "rectify", ":", "\n", "# pip install rfconv", "\n", "# rectified convolution", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv", "=", "RFConv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "average_mode", "=", "rectify_avg", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "**", "kwargs", ")", "\n", "", "self", ".", "use_bn", "=", "norm_layer", "is", "not", "None", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn0", "=", "norm_layer", "(", "channels", "*", "radix", ")", "\n", "", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "channels", ",", "inter_channels", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "norm_layer", "(", "inter_channels", ")", "\n", "", "self", ".", "fc2", "=", "Conv2d", "(", "inter_channels", ",", "channels", "*", "radix", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "rsoftmax", "=", "rSoftMax", "(", "radix", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.SplAtConv2d.forward": [[77, 107], ["model_resnest.SplAtConv2d.conv", "model_resnest.SplAtConv2d.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "model_resnest.SplAtConv2d.fc1", "model_resnest.SplAtConv2d.relu", "model_resnest.SplAtConv2d.fc2", "model_resnest.SplAtConv2d.rsoftmax().view", "sum.contiguous", "model_resnest.SplAtConv2d.bn0", "model_resnest.SplAtConv2d.dropblock", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "model_resnest.SplAtConv2d.bn1", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "model_resnest.SplAtConv2d.rsoftmax", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "x", "=", "self", ".", "dropblock", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "batch", ",", "rchannel", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "splited", "=", "torch", ".", "split", "(", "x", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "gap", "=", "sum", "(", "splited", ")", "\n", "", "else", ":", "\n", "            ", "gap", "=", "x", "\n", "", "gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "gap", ",", "1", ")", "\n", "gap", "=", "self", ".", "fc1", "(", "gap", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "gap", "=", "self", ".", "bn1", "(", "gap", ")", "\n", "", "gap", "=", "self", ".", "relu", "(", "gap", ")", "\n", "\n", "atten", "=", "self", ".", "fc2", "(", "gap", ")", "\n", "atten", "=", "self", ".", "rsoftmax", "(", "atten", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "attens", "=", "torch", ".", "split", "(", "atten", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "out", "=", "sum", "(", "[", "att", "*", "split", "for", "(", "att", ",", "split", ")", "in", "zip", "(", "attens", ",", "splited", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "atten", "*", "x", "\n", "", "return", "out", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.rSoftMax.__init__": [[109, 113], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radix", ",", "cardinality", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.rSoftMax.forward": [[114, 123], ["torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.view().transpose", "torch.sigmoid.view().transpose", "torch.softmax", "torch.softmax", "torch.sigmoid.reshape", "torch.sigmoid.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.view", "torch.sigmoid.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "batch", ",", "self", ".", "cardinality", ",", "self", ".", "radix", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "batch", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.DropBlock2D.__init__": [[128, 130], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.GlobalAvgPool2d.__init__": [[132, 135], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Global average pooling over the input's spatial dimensions\"\"\"", "\n", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.GlobalAvgPool2d.forward": [[136, 138], ["torch.nn.functional.adaptive_avg_pool2d().view", "torch.nn.functional.adaptive_avg_pool2d().view", "inputs.size", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "inputs", ",", "1", ")", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.Bottleneck.__init__": [[144, 203], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "int", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "model_resnest.DropBlock2D", "model_resnest.DropBlock2D", "model_resnest.SplAtConv2d", "zeros_", "model_resnest.DropBlock2D", "RFConv2d", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "radix", "=", "1", ",", "cardinality", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "dilation", "=", "1", ",", "is_first", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "norm_layer", "=", "None", ",", "dropblock_prob", "=", "0.0", ",", "last_gamma", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "int", "(", "planes", "*", "(", "bottleneck_width", "/", "64.", ")", ")", "*", "cardinality", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "group_width", ")", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "and", "(", "stride", ">", "1", "or", "is_first", ")", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "if", "self", ".", "avd", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", ",", "padding", "=", "1", ")", "\n", "stride", "=", "1", "\n", "\n", "", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock1", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "if", "radix", "==", "1", ":", "\n", "                ", "self", ".", "dropblock2", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "dropblock3", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "\n", "", "if", "radix", ">=", "1", ":", "\n", "            ", "self", ".", "conv2", "=", "SplAtConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "radix", "=", "radix", ",", "rectify", "=", "rectified_conv", ",", "\n", "rectify_avg", "=", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "rectified_conv", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv2", "=", "RFConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "average_mode", "=", "rectify_avg", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "4", ")", "\n", "\n", "if", "last_gamma", ":", "\n", "            ", "from", "torch", ".", "nn", ".", "init", "import", "zeros_", "\n", "zeros_", "(", "self", ".", "bn3", ".", "weight", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.Bottleneck.forward": [[204, 238], ["model_resnest.Bottleneck.conv1", "model_resnest.Bottleneck.bn1", "model_resnest.Bottleneck.relu", "model_resnest.Bottleneck.conv2", "model_resnest.Bottleneck.conv3", "model_resnest.Bottleneck.bn3", "model_resnest.Bottleneck.relu", "model_resnest.Bottleneck.dropblock1", "model_resnest.Bottleneck.avd_layer", "model_resnest.Bottleneck.bn2", "model_resnest.Bottleneck.relu", "model_resnest.Bottleneck.avd_layer", "model_resnest.Bottleneck.dropblock3", "model_resnest.Bottleneck.downsample", "model_resnest.Bottleneck.dropblock2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd", "and", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "radix", "==", "0", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "                ", "out", "=", "self", ".", "dropblock2", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "avd", "and", "not", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock3", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.ResNet.__init__": [[264, 378], ["torch.nn.Module.__init__", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_deconv_layer", "sorted", "torch.nn.Sequential", "torch.nn.Sequential", "conv_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet.__setattr__", "conv_layer", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "conv_layer", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "conv_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_layer", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_deconv_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "heads", ",", "head_conv", ",", "\n", "radix", "=", "1", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "dilated", "=", "False", ",", "dilation", "=", "1", ",", "\n", "deep_stem", "=", "False", ",", "stem_width", "=", "64", ",", "avg_down", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "\n", "final_drop", "=", "0.0", ",", "dropblock_prob", "=", "0", ",", "\n", "last_gamma", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\n", "        ", "self", ".", "deconv_with_bias", "=", "False", "\n", "self", ".", "heads", "=", "heads", "\n", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "# ResNet-D params", "\n", "self", ".", "inplanes", "=", "stem_width", "*", "2", "if", "deep_stem", "else", "64", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "last_gamma", "=", "last_gamma", "\n", "# ResNeSt params", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rectified_conv", "=", "rectified_conv", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "if", "rectified_conv", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "conv_layer", "=", "RFConv2d", "\n", "", "else", ":", "\n", "            ", "conv_layer", "=", "nn", ".", "Conv2d", "\n", "", "conv_kwargs", "=", "{", "'average_mode'", ":", "rectify_avg", "}", "if", "rectified_conv", "else", "{", "}", "\n", "if", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", "(", "3", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_layer", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "**", "conv_kwargs", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ",", "is_first", "=", "False", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "if", "dilated", "or", "dilation", "==", "4", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "dilation", "==", "2", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "\n", "", "'''\n        self.avgpool = GlobalAvgPool2d()\n        self.drop = nn.Dropout(final_drop) if final_drop > 0.0 else None\n        self.fc = nn.Linear(512 * block.expansion, num_classes)\n        '''", "\n", "\n", "# used for deconv layers", "\n", "self", ".", "deconv_layers", "=", "self", ".", "_make_deconv_layer", "(", "\n", "3", ",", "\n", "[", "256", ",", "256", ",", "256", "]", ",", "\n", "[", "4", ",", "4", ",", "4", "]", ",", "\n", ")", "\n", "# self.final_layer = []", "\n", "\n", "for", "head", "in", "sorted", "(", "self", ".", "heads", ")", ":", "\n", "            ", "num_output", "=", "self", ".", "heads", "[", "head", "]", "\n", "if", "head_conv", ">", "0", ":", "\n", "                ", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "num_output", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "fc", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "num_output", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n", "# self.final_layer = nn.ModuleList(self.final_layer)", "\n", "", "'''\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n                m.weight.data.normal_(0, math.sqrt(2. / n))\n            elif isinstance(m, norm_layer):\n                m.weight.data.fill_(1)\n                m.bias.data.zero_()\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.ResNet._make_layer": [[379, 433], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "down_layers.append", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "layers.append", "down_layers.append", "down_layers.append", "norm_layer", "block", "layers.append", "RuntimeError", "block", "down_layers.append", "down_layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "block", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "is_first", "=", "True", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "down_layers", "=", "[", "]", "\n", "if", "self", ".", "avg_down", ":", "\n", "                ", "if", "dilation", "==", "1", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "dilation", "==", "1", "or", "dilation", "==", "2", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "1", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "elif", "dilation", "==", "4", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "2", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"=> unknown dilation size: {}\"", ".", "format", "(", "dilation", ")", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "dilation", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.ResNet._get_deconv_cfg": [[434, 446], ["None"], "methods", ["None"], ["", "def", "_get_deconv_cfg", "(", "self", ",", "deconv_kernel", ",", "index", ")", ":", "\n", "        ", "if", "deconv_kernel", "==", "4", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "0", "\n", "", "elif", "deconv_kernel", "==", "3", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "1", "\n", "", "elif", "deconv_kernel", "==", "2", ":", "\n", "            ", "padding", "=", "0", "\n", "output_padding", "=", "0", "\n", "\n", "", "return", "deconv_kernel", ",", "padding", ",", "output_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.ResNet._make_deconv_layer": [[447, 473], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "len", "len", "model_resnest.ResNet._get_deconv_cfg", "layers.append", "layers.append", "layers.append", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._get_deconv_cfg"], ["", "def", "_make_deconv_layer", "(", "self", ",", "num_layers", ",", "num_filters", ",", "num_kernels", ")", ":", "\n", "        ", "assert", "num_layers", "==", "len", "(", "num_filters", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "assert", "num_layers", "==", "len", "(", "num_kernels", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "kernel", ",", "padding", ",", "output_padding", "=", "self", ".", "_get_deconv_cfg", "(", "num_kernels", "[", "i", "]", ",", "i", ")", "\n", "\n", "planes", "=", "num_filters", "[", "i", "]", "\n", "layers", ".", "append", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "self", ".", "inplanes", ",", "\n", "out_channels", "=", "planes", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "bias", "=", "self", ".", "deconv_with_bias", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.ResNet.forward": [[474, 500], ["model_resnest.ResNet.conv1", "model_resnest.ResNet.bn1", "model_resnest.ResNet.relu", "model_resnest.ResNet.maxpool", "model_resnest.ResNet.layer1", "model_resnest.ResNet.layer2", "model_resnest.ResNet.layer3", "model_resnest.ResNet.layer4", "model_resnest.ResNet.deconv_layers", "model_resnest.ResNet.__getattr__"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "'''\n        x = self.avgpool(x)\n        #x = x.view(x.size(0), -1)\n        x = torch.flatten(x, 1)\n        if self.drop:\n            x = self.drop(x)\n        x = self.fc(x)\n        return x\n        '''", "\n", "\n", "x", "=", "self", ".", "deconv_layers", "(", "x", ")", "\n", "ret", "=", "{", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "ret", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "x", ")", "\n", "", "return", "[", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.ResNet.init_weights": [[501, 544], ["model_resnest.ResNet.deconv_layers.named_modules", "model_resnest.ResNet.load_state_dict", "print", "print", "ValueError", "isinstance", "model_resnest.ResNet.__getattr__", "enumerate", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.nn.init.normal_", "torch.nn.init.normal_", "isinstance", "model_resnest.ResNet.modules", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "num_layers", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "if", "pretrained", ":", "\n", "# print('=> init resnet deconv weights from normal distribution')", "\n", "            ", "for", "_", ",", "m", "in", "self", ".", "deconv_layers", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# print('=> init {}.weight as normal(0, 0.001)'.format(name))", "\n", "# print('=> init {}.bias as 0'.format(name))", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "self", ".", "deconv_with_bias", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "# print('=> init {}.weight as 1'.format(name))", "\n", "# print('=> init {}.bias as 0'.format(name))", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "# print('=> init final conv weights from normal distribution')", "\n", "", "", "for", "head", "in", "self", ".", "heads", ":", "\n", "                ", "final_layer", "=", "self", ".", "__getattr__", "(", "head", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "final_layer", ".", "modules", "(", ")", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "# print('=> init {}.weight as normal(0, 0.001)'.format(name))", "\n", "# print('=> init {}.bias as 0'.format(name))", "\n", "                        ", "if", "m", ".", "weight", ".", "shape", "[", "0", "]", "==", "self", ".", "heads", "[", "head", "]", ":", "\n", "                            ", "if", "'hm'", "in", "head", ":", "\n", "                                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "", "", "self", ".", "load_state_dict", "(", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "resnest_model_urls", "[", "'resnest50'", "]", ",", "progress", "=", "True", ",", "check_hash", "=", "True", ")", ",", "strict", "=", "False", ")", "\n", "'''\n            #pretrained_state_dict = torch.load(pretrained)\n            url = model_urls['resnet{}'.format(num_layers)]\n            pretrained_state_dict = model_zoo.load_url(url)\n            print('=> loading pretrained model {}'.format(url))\n            self.load_state_dict(pretrained_state_dict, strict=False)\n            '''", "\n", "", "else", ":", "\n", "            ", "print", "(", "'=> imagenet pretrained model dose not exist'", ")", "\n", "print", "(", "'=> please download it first'", ")", "\n", "raise", "ValueError", "(", "'imagenet pretrained model does not exist'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.short_hash": [[19, 23], ["ValueError"], "function", ["None"], ["def", "short_hash", "(", "name", ")", ":", "\n", "    ", "if", "name", "not", "in", "_model_sha256", ":", "\n", "        ", "raise", "ValueError", "(", "'Pretrained model for {name} is not available.'", ".", "format", "(", "name", "=", "name", ")", ")", "\n", "", "return", "_model_sha256", "[", "name", "]", "[", ":", "8", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.resnest50": [[28, 37], ["model_resnest.ResNet", "ResNet.load_state_dict", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url"], "function", ["None"], ["def", "resnest50", "(", "pretrained", "=", "False", ",", "root", "=", "'/home/DANR/weights'", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "radix", "=", "2", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "32", ",", "avg_down", "=", "True", ",", "\n", "avd", "=", "True", ",", "avd_first", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "resnest_model_urls", "[", "'resnest50'", "]", ",", "progress", "=", "True", ",", "check_hash", "=", "True", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.deploy_detector.model_resnest.get_pose_net": [[552, 561], ["model_resnest.ResNet", "model_resnest.ResNet.init_weights"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet.init_weights"], ["def", "get_pose_net", "(", "num_layers", ",", "heads", ",", "head_conv", ")", ":", "\n", "    ", "block_class", ",", "layers", "=", "resnet_spec", "[", "num_layers", "]", "\n", "\n", "model", "=", "ResNet", "(", "block_class", ",", "layers", ",", "heads", ",", "head_conv", "=", "head_conv", ",", "\n", "radix", "=", "2", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "32", ",", "avg_down", "=", "True", ",", "\n", "avd", "=", "True", ",", "avd_first", "=", "False", ")", "\n", "model", ".", "init_weights", "(", "num_layers", ",", "pretrained", "=", "True", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS.__init__": [[23, 78], ["torch.Dataset.__init__", "os.path.join", "os.path.join", "numpy.random.RandomState", "numpy.array", "numpy.array", "pycocotools.COCO", "indoor_render512pointSS.IndoorRender512PointSS.coco.getImgIds", "len", "print", "os.path.join", "os.path.join", "range", "range", "enumerate", "range", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "split", ")", ":", "\n", "        ", "super", "(", "IndoorRender512PointSS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_dir", ",", "'indoor_render_512pointSS'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'images'", ")", "\n", "\n", "if", "opt", ".", "scarcity", "==", "'55'", ":", "\n", "# 50:50 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}.json'", ".", "format", "(", "split", ")", ")", "\n", "", "elif", "opt", ".", "scarcity", "==", "'37'", ":", "\n", "# 30:70 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}_37.json'", ".", "format", "(", "split", ")", ")", "\n", "", "elif", "opt", ".", "scarcity", "==", "'19'", ":", "\n", "# 10:90 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}_19.json'", ".", "format", "(", "split", ")", ")", "\n", "\n", "", "self", ".", "max_objs", "=", "128", "\n", "self", ".", "class_name", "=", "[", "\n", "'__background__'", ",", "\n", "'chair'", ",", "# 1", "\n", "'clock'", ",", "# 2", "\n", "'exit'", ",", "# 3", "\n", "'fireextinguisher'", ",", "# 4", "\n", "'printer'", ",", "# 5", "\n", "'screen'", ",", "# 6", "\n", "'trashbin'", "]", "# 7", "\n", "\n", "self", ".", "pos_ids", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", "# remove knife(kitchen) from weapon", "\n", "self", ".", "neg_ids", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "class_name", ")", ")", "if", "i", "not", "in", "self", ".", "pos_ids", "]", "\n", "self", ".", "ignore_cls_list", "=", "[", "]", "# do not train with these classes", "\n", "self", ".", "id_to_thresh", "=", "{", "}", "\n", "for", "pos_id", "in", "self", ".", "pos_ids", ":", "\n", "            ", "self", ".", "id_to_thresh", "[", "pos_id", "]", "=", "0.2", "\n", "\n", "#self._valid_ids = [i for i in range(1, self.num_classes+1) if i not in self.ignore_cls_list]", "\n", "", "self", ".", "_valid_ids", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", "\n", "self", ".", "cat_ids", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "_valid_ids", ")", "}", "\n", "self", ".", "voc_color", "=", "[", "(", "v", "//", "32", "*", "64", "+", "64", ",", "(", "v", "//", "8", ")", "%", "4", "*", "64", ",", "v", "%", "8", "*", "32", ")", "for", "v", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", "\n", "self", ".", "_data_rng", "=", "np", ".", "random", ".", "RandomState", "(", "123", ")", "\n", "self", ".", "_eig_val", "=", "np", ".", "array", "(", "[", "0.2141788", ",", "0.01817699", ",", "0.00341571", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_eig_vec", "=", "np", ".", "array", "(", "[", "\n", "[", "-", "0.58752847", ",", "-", "0.69563484", ",", "0.41340352", "]", ",", "\n", "[", "-", "0.5832747", ",", "0.00994535", ",", "-", "0.81221408", "]", ",", "\n", "[", "-", "0.56089297", ",", "0.71832671", ",", "0.41158938", "]", "\n", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "coco", "=", "coco", ".", "COCO", "(", "self", ".", "annot_path", ")", "\n", "self", ".", "images", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "images", ")", "\n", "\n", "print", "(", "'Loaded {} {} samples'", ".", "format", "(", "split", ",", "self", ".", "num_samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS._to_float": [[79, 81], ["float"], "methods", ["None"], ["", "def", "_to_float", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "float", "(", "\"{:.2f}\"", ".", "format", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS.convert_eval_format": [[82, 102], ["list", "detections.append", "map", "int", "int", "float"], "methods", ["None"], ["", "def", "convert_eval_format", "(", "self", ",", "all_bboxes", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "        ", "detections", "=", "[", "]", "\n", "for", "image_id", "in", "all_bboxes", ":", "\n", "            ", "for", "cls_ind", "in", "all_bboxes", "[", "image_id", "]", ":", "\n", "                ", "category_id", "=", "self", ".", "_valid_ids", "[", "cls_ind", "-", "1", "]", "\n", "for", "bbox", "in", "all_bboxes", "[", "image_id", "]", "[", "cls_ind", "]", ":", "\n", "                    ", "bbox", "[", "2", "]", "-=", "bbox", "[", "0", "]", "\n", "bbox", "[", "3", "]", "-=", "bbox", "[", "1", "]", "\n", "score", "=", "bbox", "[", "4", "]", "\n", "bbox_out", "=", "list", "(", "map", "(", "self", ".", "_to_float", ",", "bbox", "[", "0", ":", "4", "]", ")", ")", "\n", "\n", "detection", "=", "{", "\n", "\"image_id\"", ":", "int", "(", "image_id", ")", ",", "\n", "\"category_id\"", ":", "int", "(", "category_id", ")", ",", "\n", "\"bbox\"", ":", "bbox_out", ",", "\n", "\"score\"", ":", "float", "(", "\"{:.2f}\"", ".", "format", "(", "score", ")", ")", "\n", "}", "\n", "detections", ".", "append", "(", "detection", ")", "\n", "", "", "", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS.__len__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS.save_results": [[106, 109], ["json.dump", "indoor_render512pointSS.IndoorRender512PointSS.convert_eval_format", "open"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.convert_eval_format"], ["", "def", "save_results", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "json", ".", "dump", "(", "self", ".", "convert_eval_format", "(", "results", ")", ",", "\n", "open", "(", "'{}/results.json'", ".", "format", "(", "save_dir", ")", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS.run_eval": [[110, 117], ["indoor_render512pointSS.IndoorRender512PointSS.save_results", "indoor_render512pointSS.IndoorRender512PointSS.coco.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.save_results"], ["", "def", "run_eval", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_results", "(", "results", ",", "save_dir", ")", "\n", "coco_dets", "=", "self", ".", "coco", ".", "loadRes", "(", "'{}/results.json'", ".", "format", "(", "save_dir", ")", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "coco", ",", "coco_dets", ",", "\"bbox\"", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS.run_censor_eval": [[119, 149], ["indoor_render512pointSS.IndoorRender512PointSS.save_results", "numpy.arange", "print", "print", "os.path.join", "indoor_render512pointSS.IndoorRender512PointSS.plot_precision_recall_curve", "print", "print", "print", "os.path.join", "indoor_render512pointSS.IndoorRender512PointSS.plot_roc_curve", "print", "print", "indoor_render512pointSS.IndoorRender512PointSS.calculate_precision_recall_at_thresh", "prec_list.append", "recall_list.append", "true_pos_rate_list.append", "false_pos_rate_list.append"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.save_results", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_precision_recall_curve", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_roc_curve", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.calculate_precision_recall_at_thresh"], ["", "def", "run_censor_eval", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_results", "(", "results", ",", "save_dir", ")", "\n", "\n", "thresh_list", "=", "np", ".", "arange", "(", "0.05", ",", "1.0", ",", "0.05", ")", "\n", "prec_list", "=", "[", "]", "\n", "recall_list", "=", "[", "]", "\n", "true_pos_rate_list", "=", "[", "1.0", "]", "\n", "false_pos_rate_list", "=", "[", "1.0", "]", "\n", "for", "thresh", "in", "thresh_list", ":", "\n", "            ", "print", "(", "\"Working on thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "=", "self", ".", "calculate_precision_recall_at_thresh", "(", "results", ",", "thresh", ")", "\n", "prec_list", ".", "append", "(", "precision", ")", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "true_pos_rate_list", ".", "append", "(", "true_pos_rate", ")", "\n", "false_pos_rate_list", ".", "append", "(", "false_pos_rate", ")", "\n", "\n", "# draw precision-recall curve and calculate auc", "\n", "", "print", "(", "\"precision list: {}\"", ".", "format", "(", "prec_list", ")", ")", "\n", "print", "(", "\"recall list: {}\"", ".", "format", "(", "recall_list", ")", ")", "\n", "fig_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"prec-recall-curve.png\"", ")", "\n", "self", ".", "plot_precision_recall_curve", "(", "fig_save_path", ",", "prec_list", ",", "recall_list", ")", "\n", "print", "(", "\"precision-recall-curve saved to {}\"", ".", "format", "(", "fig_save_path", ")", ")", "\n", "\n", "# draw ROC-curve", "\n", "print", "(", "\"true_pos_rate_list: {}\"", ".", "format", "(", "true_pos_rate_list", ")", ")", "\n", "print", "(", "\"false_pos_rate_list: {}\"", ".", "format", "(", "false_pos_rate_list", ")", ")", "\n", "fig_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"ROC-curve.png\"", ")", "\n", "self", ".", "plot_roc_curve", "(", "fig_save_path", ",", "true_pos_rate_list", ",", "false_pos_rate_list", ")", "\n", "print", "(", "\"ROC-curve saved to {}\"", ".", "format", "(", "fig_save_path", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS.calculate_precision_recall_at_thresh": [[151, 203], ["indoor_render512pointSS.IndoorRender512PointSS.coco.getImgIds", "len", "print", "print", "print", "print", "print", "print", "print", "indoor_render512pointSS.IndoorRender512PointSS.coco.getAnnIds", "indoor_render512pointSS.IndoorRender512PointSS.coco.loadAnns"], "methods", ["None"], ["", "def", "calculate_precision_recall_at_thresh", "(", "self", ",", "results", ",", "thresh", ")", ":", "\n", "        ", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "true_pos", ",", "true_neg", ",", "false_pos", ",", "false_neg", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "num_imgs", "=", "len", "(", "img_ids", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "''' Determine ground truth'''", "\n", "censor_gt", "=", "False", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "cat_id", "=", "ann", "[", "\"category_id\"", "]", "\n", "if", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                    ", "censor_gt", "=", "True", "\n", "\n", "", "", "''' Determine prediction '''", "\n", "censor_pred", "=", "False", "\n", "preds_all_cls", "=", "results", "[", "img_id", "]", "\n", "for", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "                    ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "if", "conf", ">", "thresh", ":", "\n", "                        ", "censor_pred", "=", "True", "\n", "\n", "", "", "", "''' Compare GT and Pred '''", "\n", "if", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "true_pos", "+=", "1", "\n", "", "elif", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "false_neg", "+=", "1", "\n", "", "elif", "not", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "true_neg", "+=", "1", "\n", "", "elif", "not", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "false_pos", "+=", "1", "\n", "\n", "", "", "''' metrics '''", "\n", "precision", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_pos", ")", "if", "true_pos", "+", "false_pos", "!=", "0", "else", "0", "\n", "recall", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_neg", ")", "if", "true_pos", "+", "false_neg", "!=", "0", "else", "0", "\n", "censor_rate", "=", "1.0", "*", "(", "true_pos", "+", "false_pos", ")", "/", "num_imgs", "\n", "\n", "true_pos_rate", "=", "recall", "\n", "false_pos_rate", "=", "1.0", "*", "false_pos", "/", "(", "false_pos", "+", "true_neg", ")", "if", "false_pos", "+", "true_neg", "!=", "0", "else", "0", "# fallout", "\n", "\n", "print", "(", "\"With thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "print", "(", "\"TP: {}, FP: {}, TN: {}, FN: {}\"", ".", "format", "(", "true_pos", ",", "false_pos", ",", "true_neg", ",", "false_neg", ")", ")", "\n", "print", "(", "\"Precision: {}\"", ".", "format", "(", "precision", ")", ")", "\n", "print", "(", "\"Recall / sensitivity: {}\"", ".", "format", "(", "recall", ")", ")", "\n", "print", "(", "\"Censor rate: {}\"", ".", "format", "(", "censor_rate", ")", ")", "\n", "print", "(", "\"True positive rate = recall\"", ")", "\n", "print", "(", "\"False positive rate: {}\"", ".", "format", "(", "false_pos_rate", ")", ")", "\n", "return", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS.plot_precision_recall_curve": [[205, 219], ["metrics.auc", "plt.clf", "plt.plot", "plt.text", "plt.xlabel", "plt.ylabel", "plt.ylim", "plt.xlim", "plt.title", "plt.legend", "plt.savefig"], "methods", ["None"], ["", "def", "plot_precision_recall_curve", "(", "self", ",", "fig_save_path", ",", "prec_list", ",", "recall_list", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "recall_list", ",", "prec_list", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "recall_list", ",", "prec_list", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.5", ",", "'AUC(%s)'", "%", "(", "auc_score", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "xlabel", "(", "'Recall'", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'Precision-Recall'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS.plot_roc_curve": [[221, 235], ["metrics.auc", "plt.clf", "plt.plot", "plt.text", "plt.xlabel", "plt.ylabel", "plt.ylim", "plt.xlim", "plt.title", "plt.legend", "plt.savefig"], "methods", ["None"], ["", "def", "plot_roc_curve", "(", "self", ",", "fig_save_path", ",", "true_pos_rate_list", ",", "false_pos_rate_list", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "false_pos_rate_list", ",", "true_pos_rate_list", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "false_pos_rate_list", ",", "true_pos_rate_list", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.5", ",", "'AUC(%s)'", "%", "(", "auc_score", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "xlabel", "(", "'False positive rate'", ")", "\n", "plt", ".", "ylabel", "(", "'True positive rate'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'ROC curve'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS.batch_plot_precision_recall_curves": [[237, 278], ["plt.clf", "plt.subplots", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.set_ylim", "ax.set_xlim", "ax.set_title", "ax.legend", "ax.legend.get_frame().set_facecolor", "plt.savefig", "metrics.auc", "ax.plot", "ax.legend.get_frame", "len", "len"], "methods", ["None"], ["", "def", "batch_plot_precision_recall_curves", "(", "self", ",", "fig_save_path", ",", "curve_lists", ")", ":", "\n", "        ", "'''\n        :param curve_lists: a list of dictionaries, e.g., [dict_1, dict_2], where\n                            dict_1 = { 'model_name': model_name,\n                                       'prec_list': prec_list,\n                                       'recall_list': recall_list}\n        :return:\n        '''", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "\n", "colors", "=", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'c'", ",", "'m'", ",", "'y'", ",", "'k'", "]", "\n", "line_styles", "=", "[", "'-'", ",", "'--'", ",", "'-.'", ",", "':'", ",", "''", "]", "\n", "plt", ".", "clf", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "for", "i", ",", "curve", "in", "enumerate", "(", "curve_lists", ")", ":", "\n", "            ", "recall_list", "=", "curve", "[", "'recall_list'", "]", "\n", "prec_list", "=", "curve", "[", "'prec_list'", "]", "\n", "model_name", "=", "curve", "[", "'model_name'", "]", "\n", "\n", "color", "=", "colors", "[", "i", "%", "len", "(", "colors", ")", "]", "\n", "line_style", "=", "line_styles", "[", "i", "%", "len", "(", "line_styles", ")", "]", "\n", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "recall_list", ",", "prec_list", ")", "\n", "label_str", "=", "'{:s}(AUC): {:03.2f}'", ".", "format", "(", "model_name", ",", "auc_score", ")", "\n", "\n", "ax", ".", "plot", "(", "recall_list", ",", "prec_list", ",", "color", "=", "color", ",", "linestyle", "=", "line_style", ",", "linewidth", "=", "2.0", ",", "label", "=", "label_str", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "'Recall'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Precision'", ")", "\n", "ax", ".", "set_ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "ax", ".", "set_title", "(", "'Precision-Recall'", ")", "\n", "legend", "=", "ax", ".", "legend", "(", "loc", "=", "'upper right'", ",", "shadow", "=", "True", ",", "fontsize", "=", "'x-large'", ")", "\n", "\n", "# Put a nicer background color on the legend.", "\n", "legend", ".", "get_frame", "(", ")", ".", "set_facecolor", "(", "'C0'", ")", "\n", "\n", "# save figure", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS.IndoorRender512PointSS.export_qualitative_results": [[280, 380], ["os.path.join", "indoor_render512pointSS.IndoorRender512PointSS.coco.getImgIds", "len", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "remove_files_in_folder", "print", "os.path.join", "cv2.imread", "indoor_render512pointSS.IndoorRender512PointSS.coco.getAnnIds", "indoor_render512pointSS.IndoorRender512PointSS.coco.loadAnns", "draw_bboxes_on_img", "vis_censor", "os.path.join", "create_folder", "os.path.join", "cv2.imwrite", "indoor_render512pointSS.IndoorRender512PointSS.coco.loadImgs", "gt_pos_cat_list.append", "pred_pos_cat_list.append"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.remove_files_in_folder", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.draw_bboxes_on_img", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.vis_censor", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.create_folder"], ["", "def", "export_qualitative_results", "(", "self", ",", "results", ",", "split", ",", "thresh", ")", ":", "\n", "        ", "from", "utils", ".", "utils_vis_bbox", "import", "draw_bboxes_on_img", "\n", "from", "utils", ".", "utils_vis_censor", "import", "vis_censor", "\n", "from", "utils", ".", "utils_io_folder", "import", "create_folder", ",", "remove_files_in_folder", "\n", "import", "cv2", "\n", "\n", "# clean previous results", "\n", "img_output_parent_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"qualitative\"", ",", "split", ")", "\n", "for", "extra_str", "in", "[", "\"TP\"", ",", "\"TN\"", ",", "\"FP\"", ",", "\"FN\"", "]", ":", "\n", "            ", "img_output_folder_path", "=", "os", ".", "path", ".", "join", "(", "img_output_parent_folder", ",", "extra_str", ")", "\n", "remove_files_in_folder", "(", "img_output_folder_path", ")", "\n", "\n", "", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "true_pos", ",", "true_neg", ",", "false_pos", ",", "false_neg", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "num_imgs", "=", "len", "(", "img_ids", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "''' Load image '''", "\n", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "print", "(", "\"filename = {}\"", ".", "format", "(", "file_name", ")", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "file_name", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "''' Determine ground truth'''", "\n", "censor_gt", "=", "False", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "gt_pos_cat_list", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "cat_id", "=", "ann", "[", "\"category_id\"", "]", "\n", "if", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                    ", "censor_gt", "=", "True", "\n", "if", "self", ".", "class_name", "[", "cat_id", "]", "not", "in", "gt_pos_cat_list", ":", "\n", "                        ", "gt_pos_cat_list", ".", "append", "(", "self", ".", "class_name", "[", "cat_id", "]", ")", "\n", "\n", "", "", "", "''' Determine prediction '''", "\n", "censor_pred", "=", "False", "\n", "preds_all_cls", "=", "results", "[", "img_id", "]", "\n", "pred_pos_cat_list", "=", "[", "]", "\n", "for", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "                    ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "#if conf > self.id_to_thresh[cat_id]:   # using class-specific thresholds (during inference)", "\n", "if", "conf", ">", "thresh", ":", "\n", "                        ", "censor_pred", "=", "True", "\n", "if", "self", ".", "class_name", "[", "cat_id", "]", "not", "in", "pred_pos_cat_list", ":", "\n", "                            ", "pred_pos_cat_list", ".", "append", "(", "self", ".", "class_name", "[", "cat_id", "]", ")", "\n", "\n", "", "", "", "", "''' Compare GT and Pred '''", "\n", "if", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "true_pos", "+=", "1", "\n", "extra_str", "=", "\"TP\"", "\n", "", "elif", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "false_neg", "+=", "1", "\n", "extra_str", "=", "\"FN\"", "\n", "", "elif", "not", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "true_neg", "+=", "1", "\n", "extra_str", "=", "\"TN\"", "\n", "", "elif", "not", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "false_pos", "+=", "1", "\n", "extra_str", "=", "\"FP\"", "\n", "\n", "", "''' visualize results for this image '''", "\n", "# add bboxes", "\n", "img", "=", "draw_bboxes_on_img", "(", "img", ",", "preds_all_cls", ")", "\n", "\n", "# add censor info", "\n", "gt_censor_str", "=", "\"YES\"", "if", "censor_gt", "else", "\"NO\"", "\n", "pred_censor_str", "=", "\"YES\"", "if", "censor_pred", "else", "\"NO\"", "\n", "gt_cls_str", "=", "', '", ".", "join", "(", "gt_pos_cat_list", ")", "\n", "pred_cls_str", "=", "', '", ".", "join", "(", "pred_pos_cat_list", ")", "\n", "img", "=", "vis_censor", "(", "img", ",", "\n", "gt_censor_str", ",", "gt_cls_str", ",", "\n", "pred_censor_str", ",", "pred_cls_str", ",", "\n", "extra_str", ")", "\n", "\n", "img_output_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"qualitative\"", ",", "split", ",", "extra_str", ")", "\n", "create_folder", "(", "img_output_folder", ")", "\n", "img_output_path", "=", "os", ".", "path", ".", "join", "(", "img_output_folder", ",", "file_name", ")", "\n", "cv2", ".", "imwrite", "(", "img_output_path", ",", "img", ")", "\n", "\n", "\n", "", "''' metrics '''", "\n", "precision", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_pos", ")", "\n", "recall", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_neg", ")", "\n", "censor_rate", "=", "1.0", "*", "(", "true_pos", "+", "false_pos", ")", "/", "num_imgs", "\n", "\n", "true_pos_rate", "=", "recall", "\n", "false_pos_rate", "=", "1.0", "*", "false_pos", "/", "(", "false_pos", "+", "true_neg", ")", "# fallout", "\n", "\n", "print", "(", "\"With thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "print", "(", "\"TP: {}, FP: {}, TN: {}, FN: {}\"", ".", "format", "(", "true_pos", ",", "false_pos", ",", "true_neg", ",", "false_neg", ")", ")", "\n", "print", "(", "\"Precision: {}\"", ".", "format", "(", "precision", ")", ")", "\n", "print", "(", "\"Recall / sensitivity: {}\"", ".", "format", "(", "recall", ")", ")", "\n", "print", "(", "\"Censor rate: {}\"", ".", "format", "(", "censor_rate", ")", ")", "\n", "print", "(", "\"True positive rate = recall\"", ")", "\n", "print", "(", "\"False positive rate: {}\"", ".", "format", "(", "false_pos_rate", ")", ")", "\n", "return", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native.__init__": [[23, 77], ["torch.Dataset.__init__", "os.path.join", "os.path.join", "numpy.random.RandomState", "numpy.array", "numpy.array", "pycocotools.COCO", "indoor_render256native.IndoorRender256Native.coco.getImgIds", "len", "print", "os.path.join", "os.path.join", "range", "range", "enumerate", "range", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "split", ")", ":", "\n", "        ", "super", "(", "IndoorRender256Native", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_dir", ",", "'indoor_render_256native'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'images'", ")", "\n", "\n", "if", "opt", ".", "scarcity", "==", "'55'", ":", "\n", "# 50:50 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}.json'", ".", "format", "(", "split", ")", ")", "\n", "", "elif", "opt", ".", "scarcity", "==", "'37'", ":", "\n", "# 30:70 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}_37.json'", ".", "format", "(", "split", ")", ")", "\n", "", "elif", "opt", ".", "scarcity", "==", "'19'", ":", "\n", "# 10:90 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}_19.json'", ".", "format", "(", "split", ")", ")", "\n", "\n", "", "self", ".", "max_objs", "=", "128", "\n", "self", ".", "class_name", "=", "[", "\n", "'__background__'", ",", "\n", "'chair'", ",", "# 1", "\n", "'clock'", ",", "# 2", "\n", "'exit'", ",", "# 3", "\n", "'fireextinguisher'", ",", "# 4", "\n", "'printer'", ",", "# 5", "\n", "'screen'", ",", "# 6", "\n", "'trashbin'", "]", "# 7", "\n", "\n", "self", ".", "pos_ids", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", "# remove knife(kitchen) from weapon", "\n", "self", ".", "neg_ids", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "class_name", ")", ")", "if", "i", "not", "in", "self", ".", "pos_ids", "]", "\n", "self", ".", "ignore_cls_list", "=", "[", "]", "# do not train with these classes", "\n", "self", ".", "id_to_thresh", "=", "{", "}", "\n", "for", "pos_id", "in", "self", ".", "pos_ids", ":", "\n", "            ", "self", ".", "id_to_thresh", "[", "pos_id", "]", "=", "0.2", "\n", "\n", "", "self", ".", "_valid_ids", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", "\n", "self", ".", "cat_ids", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "_valid_ids", ")", "}", "\n", "self", ".", "voc_color", "=", "[", "(", "v", "//", "32", "*", "64", "+", "64", ",", "(", "v", "//", "8", ")", "%", "4", "*", "64", ",", "v", "%", "8", "*", "32", ")", "for", "v", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", "\n", "self", ".", "_data_rng", "=", "np", ".", "random", ".", "RandomState", "(", "123", ")", "\n", "self", ".", "_eig_val", "=", "np", ".", "array", "(", "[", "0.2141788", ",", "0.01817699", ",", "0.00341571", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_eig_vec", "=", "np", ".", "array", "(", "[", "\n", "[", "-", "0.58752847", ",", "-", "0.69563484", ",", "0.41340352", "]", ",", "\n", "[", "-", "0.5832747", ",", "0.00994535", ",", "-", "0.81221408", "]", ",", "\n", "[", "-", "0.56089297", ",", "0.71832671", ",", "0.41158938", "]", "\n", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "coco", "=", "coco", ".", "COCO", "(", "self", ".", "annot_path", ")", "\n", "self", ".", "images", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "images", ")", "\n", "\n", "print", "(", "'Loaded {} {} samples'", ".", "format", "(", "split", ",", "self", ".", "num_samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native._to_float": [[78, 80], ["float"], "methods", ["None"], ["", "def", "_to_float", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "float", "(", "\"{:.2f}\"", ".", "format", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native.convert_eval_format": [[81, 100], ["list", "detections.append", "map", "int", "int", "float"], "methods", ["None"], ["", "def", "convert_eval_format", "(", "self", ",", "all_bboxes", ")", ":", "\n", "        ", "detections", "=", "[", "]", "\n", "for", "image_id", "in", "all_bboxes", ":", "\n", "            ", "for", "cls_ind", "in", "all_bboxes", "[", "image_id", "]", ":", "\n", "                ", "category_id", "=", "self", ".", "_valid_ids", "[", "cls_ind", "-", "1", "]", "\n", "for", "bbox", "in", "all_bboxes", "[", "image_id", "]", "[", "cls_ind", "]", ":", "\n", "                    ", "bbox", "[", "2", "]", "-=", "bbox", "[", "0", "]", "\n", "bbox", "[", "3", "]", "-=", "bbox", "[", "1", "]", "\n", "score", "=", "bbox", "[", "4", "]", "\n", "bbox_out", "=", "list", "(", "map", "(", "self", ".", "_to_float", ",", "bbox", "[", "0", ":", "4", "]", ")", ")", "\n", "\n", "detection", "=", "{", "\n", "\"image_id\"", ":", "int", "(", "image_id", ")", ",", "\n", "\"category_id\"", ":", "int", "(", "category_id", ")", ",", "\n", "\"bbox\"", ":", "bbox_out", ",", "\n", "\"score\"", ":", "float", "(", "\"{:.2f}\"", ".", "format", "(", "score", ")", ")", "\n", "}", "\n", "detections", ".", "append", "(", "detection", ")", "\n", "", "", "", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native.__len__": [[101, 103], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native.save_results": [[104, 107], ["json.dump", "indoor_render256native.IndoorRender256Native.convert_eval_format", "open"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.convert_eval_format"], ["", "def", "save_results", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "json", ".", "dump", "(", "self", ".", "convert_eval_format", "(", "results", ")", ",", "\n", "open", "(", "'{}/results.json'", ".", "format", "(", "save_dir", ")", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native.run_eval": [[108, 115], ["indoor_render256native.IndoorRender256Native.save_results", "indoor_render256native.IndoorRender256Native.coco.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.save_results"], ["", "def", "run_eval", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_results", "(", "results", ",", "save_dir", ")", "\n", "coco_dets", "=", "self", ".", "coco", ".", "loadRes", "(", "'{}/results.json'", ".", "format", "(", "save_dir", ")", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "coco", ",", "coco_dets", ",", "\"bbox\"", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native.run_censor_eval": [[117, 147], ["indoor_render256native.IndoorRender256Native.save_results", "numpy.arange", "print", "print", "os.path.join", "indoor_render256native.IndoorRender256Native.plot_precision_recall_curve", "print", "print", "print", "os.path.join", "indoor_render256native.IndoorRender256Native.plot_roc_curve", "print", "print", "indoor_render256native.IndoorRender256Native.calculate_precision_recall_at_thresh", "prec_list.append", "recall_list.append", "true_pos_rate_list.append", "false_pos_rate_list.append"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.save_results", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_precision_recall_curve", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_roc_curve", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.calculate_precision_recall_at_thresh"], ["", "def", "run_censor_eval", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_results", "(", "results", ",", "save_dir", ")", "\n", "\n", "thresh_list", "=", "np", ".", "arange", "(", "0.05", ",", "1.0", ",", "0.05", ")", "\n", "prec_list", "=", "[", "]", "\n", "recall_list", "=", "[", "]", "\n", "true_pos_rate_list", "=", "[", "1.0", "]", "\n", "false_pos_rate_list", "=", "[", "1.0", "]", "\n", "for", "thresh", "in", "thresh_list", ":", "\n", "            ", "print", "(", "\"Working on thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "=", "self", ".", "calculate_precision_recall_at_thresh", "(", "results", ",", "thresh", ")", "\n", "prec_list", ".", "append", "(", "precision", ")", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "true_pos_rate_list", ".", "append", "(", "true_pos_rate", ")", "\n", "false_pos_rate_list", ".", "append", "(", "false_pos_rate", ")", "\n", "\n", "# draw precision-recall curve and calculate auc", "\n", "", "print", "(", "\"precision list: {}\"", ".", "format", "(", "prec_list", ")", ")", "\n", "print", "(", "\"recall list: {}\"", ".", "format", "(", "recall_list", ")", ")", "\n", "fig_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"prec-recall-curve.png\"", ")", "\n", "self", ".", "plot_precision_recall_curve", "(", "fig_save_path", ",", "prec_list", ",", "recall_list", ")", "\n", "print", "(", "\"precision-recall-curve saved to {}\"", ".", "format", "(", "fig_save_path", ")", ")", "\n", "\n", "# draw ROC-curve", "\n", "print", "(", "\"true_pos_rate_list: {}\"", ".", "format", "(", "true_pos_rate_list", ")", ")", "\n", "print", "(", "\"false_pos_rate_list: {}\"", ".", "format", "(", "false_pos_rate_list", ")", ")", "\n", "fig_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"ROC-curve.png\"", ")", "\n", "self", ".", "plot_roc_curve", "(", "fig_save_path", ",", "true_pos_rate_list", ",", "false_pos_rate_list", ")", "\n", "print", "(", "\"ROC-curve saved to {}\"", ".", "format", "(", "fig_save_path", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native.calculate_precision_recall_at_thresh": [[149, 203], ["indoor_render256native.IndoorRender256Native.coco.getImgIds", "len", "print", "print", "print", "print", "print", "print", "print", "indoor_render256native.IndoorRender256Native.coco.getAnnIds", "indoor_render256native.IndoorRender256Native.coco.loadAnns"], "methods", ["None"], ["", "def", "calculate_precision_recall_at_thresh", "(", "self", ",", "results", ",", "thresh", ")", ":", "\n", "        ", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "true_pos", ",", "true_neg", ",", "false_pos", ",", "false_neg", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "num_imgs", "=", "len", "(", "img_ids", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "''' Determine ground truth'''", "\n", "censor_gt", "=", "False", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "#print(\"anns = {}\".format(anns))", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "cat_id", "=", "ann", "[", "\"category_id\"", "]", "\n", "if", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                    ", "censor_gt", "=", "True", "\n", "\n", "", "", "''' Determine prediction '''", "\n", "censor_pred", "=", "False", "\n", "preds_all_cls", "=", "results", "[", "img_id", "]", "\n", "for", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "                    ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "#if conf > self.id_to_thresh[cat_id]:   # using class-specific thresholds (during inference)", "\n", "if", "conf", ">", "thresh", ":", "\n", "                        ", "censor_pred", "=", "True", "\n", "\n", "", "", "", "''' Compare GT and Pred '''", "\n", "if", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "true_pos", "+=", "1", "\n", "", "elif", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "false_neg", "+=", "1", "\n", "", "elif", "not", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "true_neg", "+=", "1", "\n", "", "elif", "not", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "false_pos", "+=", "1", "\n", "\n", "", "", "''' metrics '''", "\n", "precision", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_pos", ")", "if", "true_pos", "+", "false_pos", "!=", "0", "else", "0", "\n", "recall", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_neg", ")", "if", "true_pos", "+", "false_neg", "!=", "0", "else", "0", "\n", "censor_rate", "=", "1.0", "*", "(", "true_pos", "+", "false_pos", ")", "/", "num_imgs", "\n", "\n", "true_pos_rate", "=", "recall", "\n", "false_pos_rate", "=", "1.0", "*", "false_pos", "/", "(", "false_pos", "+", "true_neg", ")", "if", "false_pos", "+", "true_neg", "!=", "0", "else", "0", "# fallout", "\n", "\n", "print", "(", "\"With thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "print", "(", "\"TP: {}, FP: {}, TN: {}, FN: {}\"", ".", "format", "(", "true_pos", ",", "false_pos", ",", "true_neg", ",", "false_neg", ")", ")", "\n", "print", "(", "\"Precision: {}\"", ".", "format", "(", "precision", ")", ")", "\n", "print", "(", "\"Recall / sensitivity: {}\"", ".", "format", "(", "recall", ")", ")", "\n", "print", "(", "\"Censor rate: {}\"", ".", "format", "(", "censor_rate", ")", ")", "\n", "print", "(", "\"True positive rate = recall\"", ")", "\n", "print", "(", "\"False positive rate: {}\"", ".", "format", "(", "false_pos_rate", ")", ")", "\n", "return", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native.plot_precision_recall_curve": [[205, 219], ["metrics.auc", "plt.clf", "plt.plot", "plt.text", "plt.xlabel", "plt.ylabel", "plt.ylim", "plt.xlim", "plt.title", "plt.legend", "plt.savefig"], "methods", ["None"], ["", "def", "plot_precision_recall_curve", "(", "self", ",", "fig_save_path", ",", "prec_list", ",", "recall_list", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "recall_list", ",", "prec_list", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "recall_list", ",", "prec_list", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.5", ",", "'AUC(%s)'", "%", "(", "auc_score", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "xlabel", "(", "'Recall'", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'Precision-Recall'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native.plot_roc_curve": [[221, 235], ["metrics.auc", "plt.clf", "plt.plot", "plt.text", "plt.xlabel", "plt.ylabel", "plt.ylim", "plt.xlim", "plt.title", "plt.legend", "plt.savefig"], "methods", ["None"], ["", "def", "plot_roc_curve", "(", "self", ",", "fig_save_path", ",", "true_pos_rate_list", ",", "false_pos_rate_list", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "false_pos_rate_list", ",", "true_pos_rate_list", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "false_pos_rate_list", ",", "true_pos_rate_list", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.5", ",", "'AUC(%s)'", "%", "(", "auc_score", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "xlabel", "(", "'False positive rate'", ")", "\n", "plt", ".", "ylabel", "(", "'True positive rate'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'ROC curve'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native.batch_plot_precision_recall_curves": [[237, 278], ["plt.clf", "plt.subplots", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.set_ylim", "ax.set_xlim", "ax.set_title", "ax.legend", "ax.legend.get_frame().set_facecolor", "plt.savefig", "metrics.auc", "ax.plot", "ax.legend.get_frame", "len", "len"], "methods", ["None"], ["", "def", "batch_plot_precision_recall_curves", "(", "self", ",", "fig_save_path", ",", "curve_lists", ")", ":", "\n", "        ", "'''\n        :param curve_lists: a list of dictionaries, e.g., [dict_1, dict_2], where\n                            dict_1 = { 'model_name': model_name,\n                                       'prec_list': prec_list,\n                                       'recall_list': recall_list}\n        :return:\n        '''", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "\n", "colors", "=", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'c'", ",", "'m'", ",", "'y'", ",", "'k'", "]", "\n", "line_styles", "=", "[", "'-'", ",", "'--'", ",", "'-.'", ",", "':'", ",", "''", "]", "\n", "plt", ".", "clf", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "for", "i", ",", "curve", "in", "enumerate", "(", "curve_lists", ")", ":", "\n", "            ", "recall_list", "=", "curve", "[", "'recall_list'", "]", "\n", "prec_list", "=", "curve", "[", "'prec_list'", "]", "\n", "model_name", "=", "curve", "[", "'model_name'", "]", "\n", "\n", "color", "=", "colors", "[", "i", "%", "len", "(", "colors", ")", "]", "\n", "line_style", "=", "line_styles", "[", "i", "%", "len", "(", "line_styles", ")", "]", "\n", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "recall_list", ",", "prec_list", ")", "\n", "label_str", "=", "'{:s}(AUC): {:03.2f}'", ".", "format", "(", "model_name", ",", "auc_score", ")", "\n", "\n", "ax", ".", "plot", "(", "recall_list", ",", "prec_list", ",", "color", "=", "color", ",", "linestyle", "=", "line_style", ",", "linewidth", "=", "2.0", ",", "label", "=", "label_str", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "'Recall'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Precision'", ")", "\n", "ax", ".", "set_ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "ax", ".", "set_title", "(", "'Precision-Recall'", ")", "\n", "legend", "=", "ax", ".", "legend", "(", "loc", "=", "'upper right'", ",", "shadow", "=", "True", ",", "fontsize", "=", "'x-large'", ")", "\n", "\n", "# Put a nicer background color on the legend.", "\n", "legend", ".", "get_frame", "(", ")", ".", "set_facecolor", "(", "'C0'", ")", "\n", "\n", "# save figure", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native.IndoorRender256Native.export_qualitative_results": [[280, 379], ["os.path.join", "indoor_render256native.IndoorRender256Native.coco.getImgIds", "len", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "remove_files_in_folder", "print", "os.path.join", "cv2.imread", "indoor_render256native.IndoorRender256Native.coco.getAnnIds", "indoor_render256native.IndoorRender256Native.coco.loadAnns", "draw_bboxes_on_img", "vis_censor", "os.path.join", "create_folder", "os.path.join", "cv2.imwrite", "indoor_render256native.IndoorRender256Native.coco.loadImgs", "gt_pos_cat_list.append", "pred_pos_cat_list.append"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.remove_files_in_folder", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.draw_bboxes_on_img", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.vis_censor", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.create_folder"], ["", "def", "export_qualitative_results", "(", "self", ",", "results", ",", "split", ",", "thresh", ")", ":", "\n", "        ", "from", "utils", ".", "utils_vis_bbox", "import", "draw_bboxes_on_img", "\n", "from", "utils", ".", "utils_vis_censor", "import", "vis_censor", "\n", "from", "utils", ".", "utils_io_folder", "import", "create_folder", ",", "remove_files_in_folder", "\n", "import", "cv2", "\n", "\n", "# clean previous results", "\n", "img_output_parent_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"qualitative\"", ",", "split", ")", "\n", "for", "extra_str", "in", "[", "\"TP\"", ",", "\"TN\"", ",", "\"FP\"", ",", "\"FN\"", "]", ":", "\n", "            ", "img_output_folder_path", "=", "os", ".", "path", ".", "join", "(", "img_output_parent_folder", ",", "extra_str", ")", "\n", "remove_files_in_folder", "(", "img_output_folder_path", ")", "\n", "\n", "", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "true_pos", ",", "true_neg", ",", "false_pos", ",", "false_neg", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "num_imgs", "=", "len", "(", "img_ids", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "''' Load image '''", "\n", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "print", "(", "\"filename = {}\"", ".", "format", "(", "file_name", ")", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "file_name", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "''' Determine ground truth'''", "\n", "censor_gt", "=", "False", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "gt_pos_cat_list", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "cat_id", "=", "ann", "[", "\"category_id\"", "]", "\n", "if", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                    ", "censor_gt", "=", "True", "\n", "if", "self", ".", "class_name", "[", "cat_id", "]", "not", "in", "gt_pos_cat_list", ":", "\n", "                        ", "gt_pos_cat_list", ".", "append", "(", "self", ".", "class_name", "[", "cat_id", "]", ")", "\n", "\n", "", "", "", "''' Determine prediction '''", "\n", "censor_pred", "=", "False", "\n", "preds_all_cls", "=", "results", "[", "img_id", "]", "\n", "pred_pos_cat_list", "=", "[", "]", "\n", "for", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "                    ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "if", "conf", ">", "thresh", ":", "\n", "                        ", "censor_pred", "=", "True", "\n", "if", "self", ".", "class_name", "[", "cat_id", "]", "not", "in", "pred_pos_cat_list", ":", "\n", "                            ", "pred_pos_cat_list", ".", "append", "(", "self", ".", "class_name", "[", "cat_id", "]", ")", "\n", "\n", "", "", "", "", "''' Compare GT and Pred '''", "\n", "if", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "true_pos", "+=", "1", "\n", "extra_str", "=", "\"TP\"", "\n", "", "elif", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "false_neg", "+=", "1", "\n", "extra_str", "=", "\"FN\"", "\n", "", "elif", "not", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "true_neg", "+=", "1", "\n", "extra_str", "=", "\"TN\"", "\n", "", "elif", "not", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "false_pos", "+=", "1", "\n", "extra_str", "=", "\"FP\"", "\n", "\n", "", "''' visualize results for this image '''", "\n", "# add bboxes", "\n", "img", "=", "draw_bboxes_on_img", "(", "img", ",", "preds_all_cls", ")", "\n", "\n", "# add censor info", "\n", "gt_censor_str", "=", "\"YES\"", "if", "censor_gt", "else", "\"NO\"", "\n", "pred_censor_str", "=", "\"YES\"", "if", "censor_pred", "else", "\"NO\"", "\n", "gt_cls_str", "=", "', '", ".", "join", "(", "gt_pos_cat_list", ")", "\n", "pred_cls_str", "=", "', '", ".", "join", "(", "pred_pos_cat_list", ")", "\n", "img", "=", "vis_censor", "(", "img", ",", "\n", "gt_censor_str", ",", "gt_cls_str", ",", "\n", "pred_censor_str", ",", "pred_cls_str", ",", "\n", "extra_str", ")", "\n", "\n", "img_output_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"qualitative\"", ",", "split", ",", "extra_str", ")", "\n", "create_folder", "(", "img_output_folder", ")", "\n", "img_output_path", "=", "os", ".", "path", ".", "join", "(", "img_output_folder", ",", "file_name", ")", "\n", "cv2", ".", "imwrite", "(", "img_output_path", ",", "img", ")", "\n", "\n", "\n", "", "''' metrics '''", "\n", "precision", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_pos", ")", "\n", "recall", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_neg", ")", "\n", "censor_rate", "=", "1.0", "*", "(", "true_pos", "+", "false_pos", ")", "/", "num_imgs", "\n", "\n", "true_pos_rate", "=", "recall", "\n", "false_pos_rate", "=", "1.0", "*", "false_pos", "/", "(", "false_pos", "+", "true_neg", ")", "# fallout", "\n", "\n", "print", "(", "\"With thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "print", "(", "\"TP: {}, FP: {}, TN: {}, FN: {}\"", ".", "format", "(", "true_pos", ",", "false_pos", ",", "true_neg", ",", "false_neg", ")", ")", "\n", "print", "(", "\"Precision: {}\"", ".", "format", "(", "precision", ")", ")", "\n", "print", "(", "\"Recall / sensitivity: {}\"", ".", "format", "(", "recall", ")", ")", "\n", "print", "(", "\"Censor rate: {}\"", ".", "format", "(", "censor_rate", ")", ")", "\n", "print", "(", "\"True positive rate = recall\"", ")", "\n", "print", "(", "\"False positive rate: {}\"", ".", "format", "(", "false_pos_rate", ")", ")", "\n", "return", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset._coco_box_to_bbox": [[12, 15], ["numpy.array"], "methods", ["None"], ["    ", "def", "_coco_box_to_bbox", "(", "self", ",", "box", ")", ":", "\n", "        ", "bbox", "=", "np", ".", "array", "(", "[", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "0", "]", "+", "box", "[", "2", "]", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset._get_border": [[16, 21], ["None"], "methods", ["None"], ["", "def", "_get_border", "(", "self", ",", "border", ",", "size", ")", ":", "\n", "        ", "i", "=", "1", "\n", "while", "size", "-", "border", "//", "i", "<=", "border", "//", "i", ":", "\n", "            ", "i", "*=", "2", "\n", "", "return", "border", "//", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset.__getitem__": [[22, 149], ["os.path.join", "indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset.coco.getAnnIds", "indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset.coco.loadAnns", "min", "cv2.imread", "numpy.array", "utils.image.get_affine_transform", "cv2.warpAffine", "inp.transpose.transpose.transpose", "utils.image.get_affine_transform", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "numpy.array", "numpy.random.random", "inp.transpose.transpose.astype", "utils.image.color_aug", "indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset._coco_box_to_bbox", "utils.image.affine_transform", "utils.image.affine_transform", "numpy.clip", "numpy.clip", "numpy.zeros.max", "numpy.concatenate", "ret.update", "ret.update", "indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset.coco.loadImgs", "max", "indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset._get_border", "indoor_render512pixelSS_centernet.CenterIndoorRender512PixelSSDataset._get_border", "numpy.random.randint", "numpy.random.randint", "print", "int", "utils.image.gaussian_radius", "max", "numpy.array", "numpy.array.astype", "draw_gaussian", "ret.update", "numpy.array", "numpy.zeros", "numpy.random.choice", "numpy.clip", "numpy.clip", "numpy.clip", "int", "utils.image.draw_dense_reg", "gt_det.append", "gt_det.append", "len", "numpy.arange", "math.ceil", "math.ceil", "numpy.zeros.max", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.color_aug", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._coco_box_to_bbox", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.gaussian_radius", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.draw_dense_reg"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "images", "[", "index", "]", "\n", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "file_name", ")", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "num_objs", "=", "min", "(", "len", "(", "anns", ")", ",", "self", ".", "max_objs", ")", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "height", ",", "width", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "img", ".", "shape", "[", "1", "]", "/", "2.", ",", "img", ".", "shape", "[", "0", "]", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "opt", ".", "keep_res", ":", "\n", "            ", "input_h", "=", "(", "height", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "input_w", "=", "(", "width", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "s", "=", "np", ".", "array", "(", "[", "input_w", ",", "input_h", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "max", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "*", "1.0", "\n", "input_h", ",", "input_w", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "\n", "", "flipped", "=", "False", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "not_rand_crop", ":", "\n", "                ", "s", "=", "s", "*", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "0.6", ",", "1.4", ",", "0.1", ")", ")", "\n", "w_border", "=", "self", ".", "_get_border", "(", "128", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "h_border", "=", "self", ".", "_get_border", "(", "128", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "c", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "w_border", ",", "high", "=", "img", ".", "shape", "[", "1", "]", "-", "w_border", ")", "\n", "c", "[", "1", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "h_border", ",", "high", "=", "img", ".", "shape", "[", "0", "]", "-", "h_border", ")", "\n", "", "else", ":", "\n", "                ", "sf", "=", "self", ".", "opt", ".", "scale", "\n", "cf", "=", "self", ".", "opt", ".", "shift", "\n", "c", "[", "0", "]", "+=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "cf", ",", "-", "2", "*", "cf", ",", "2", "*", "cf", ")", "\n", "c", "[", "1", "]", "+=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "cf", ",", "-", "2", "*", "cf", ",", "2", "*", "cf", ")", "\n", "s", "=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "sf", "+", "1", ",", "1", "-", "sf", ",", "1", "+", "sf", ")", "\n", "\n", "", "", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "opt", ".", "flip", ":", "\n", "            ", "flipped", "=", "True", "\n", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "c", "[", "0", "]", "=", "width", "-", "c", "[", "0", "]", "-", "1", "\n", "\n", "\n", "", "trans_input", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "input_w", ",", "input_h", "]", ")", "\n", "inp", "=", "cv2", ".", "warpAffine", "(", "img", ",", "trans_input", ",", "\n", "(", "input_w", ",", "input_h", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "inp", "=", "(", "inp", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", ")", "\n", "if", "self", ".", "split", "==", "'train'", "and", "not", "self", ".", "opt", ".", "no_color_aug", ":", "\n", "            ", "color_aug", "(", "self", ".", "_data_rng", ",", "inp", ",", "self", ".", "_eig_val", ",", "self", ".", "_eig_vec", ")", "# color augmentation", "\n", "", "inp", "=", "(", "inp", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "inp", "=", "inp", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# xyc -> cxy", "\n", "\n", "output_h", "=", "input_h", "//", "self", ".", "opt", ".", "down_ratio", "\n", "output_w", "=", "input_w", "//", "self", ".", "opt", ".", "down_ratio", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "trans_output", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "output_w", ",", "output_h", "]", ")", "\n", "\n", "hm", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "output_h", ",", "output_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "wh", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dense_wh", "=", "np", ".", "zeros", "(", "(", "2", ",", "output_h", ",", "output_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "reg", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ind", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "reg_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cat_spec_wh", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "num_classes", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cat_spec_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "num_classes", "*", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "draw_gaussian", "=", "draw_msra_gaussian", "if", "self", ".", "opt", ".", "mse_loss", "else", "draw_umich_gaussian", "\n", "\n", "gt_det", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "            ", "ann", "=", "anns", "[", "k", "]", "\n", "bbox", "=", "self", ".", "_coco_box_to_bbox", "(", "ann", "[", "'bbox'", "]", ")", "\n", "if", "'category_id'", "not", "in", "ann", ":", "\n", "                ", "print", "(", "\"ann: {}\"", ",", "ann", ")", "\n", "return", "KeyError", "\n", "", "else", ":", "\n", "                ", "cls_id", "=", "int", "(", "self", ".", "cat_ids", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "if", "cls_id", "in", "self", ".", "ignore_cls_list", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "if", "flipped", ":", "\n", "              ", "bbox", "[", "[", "0", ",", "2", "]", "]", "=", "width", "-", "bbox", "[", "[", "2", ",", "0", "]", "]", "-", "1", "\n", "\n", "", "bbox", "[", ":", "2", "]", "=", "affine_transform", "(", "bbox", "[", ":", "2", "]", ",", "trans_output", ")", "\n", "bbox", "[", "2", ":", "]", "=", "affine_transform", "(", "bbox", "[", "2", ":", "]", ",", "trans_output", ")", "\n", "bbox", "[", "[", "0", ",", "2", "]", "]", "=", "np", ".", "clip", "(", "bbox", "[", "[", "0", ",", "2", "]", "]", ",", "0", ",", "output_w", "-", "1", ")", "\n", "bbox", "[", "[", "1", ",", "3", "]", "]", "=", "np", ".", "clip", "(", "bbox", "[", "[", "1", ",", "3", "]", "]", ",", "0", ",", "output_h", "-", "1", ")", "\n", "h", ",", "w", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "\n", "\n", "if", "h", ">", "0", "and", "w", ">", "0", ":", "\n", "                ", "radius", "=", "gaussian_radius", "(", "(", "math", ".", "ceil", "(", "h", ")", ",", "math", ".", "ceil", "(", "w", ")", ")", ")", "\n", "radius", "=", "max", "(", "0", ",", "int", "(", "radius", ")", ")", "\n", "radius", "=", "self", ".", "opt", ".", "hm_gauss", "if", "self", ".", "opt", ".", "mse_loss", "else", "radius", "\n", "ct", "=", "np", ".", "array", "(", "[", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "/", "2", ",", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct_int", ",", "radius", ")", "\n", "wh", "[", "k", "]", "=", "1.", "*", "w", ",", "1.", "*", "h", "\n", "ind", "[", "k", "]", "=", "ct_int", "[", "1", "]", "*", "output_w", "+", "ct_int", "[", "0", "]", "\n", "reg", "[", "k", "]", "=", "ct", "-", "ct_int", "\n", "reg_mask", "[", "k", "]", "=", "1", "\n", "cat_spec_wh", "[", "k", ",", "cls_id", "*", "2", ":", "cls_id", "*", "2", "+", "2", "]", "=", "wh", "[", "k", "]", "\n", "cat_spec_mask", "[", "k", ",", "cls_id", "*", "2", ":", "cls_id", "*", "2", "+", "2", "]", "=", "1", "\n", "if", "self", ".", "opt", ".", "dense_wh", ":", "\n", "                    ", "draw_dense_reg", "(", "dense_wh", ",", "hm", ".", "max", "(", "axis", "=", "0", ")", ",", "ct_int", ",", "wh", "[", "k", "]", ",", "radius", ")", "\n", "", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                    ", "gt_det", ".", "append", "(", "[", "ct", "[", "0", "]", "-", "w", "/", "2", ",", "ct", "[", "1", "]", "-", "h", "/", "2", ",", "ct", "[", "0", "]", "+", "w", "/", "2", ",", "ct", "[", "1", "]", "+", "h", "/", "2", ",", "1", ",", "cls_id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "gt_det", ".", "append", "(", "[", "ct", "[", "0", "]", "-", "w", "/", "2", ",", "ct", "[", "1", "]", "-", "h", "/", "2", ",", "ct", "[", "0", "]", "+", "w", "/", "2", ",", "ct", "[", "1", "]", "+", "h", "/", "2", ",", "cls_id", "]", ")", "\n", "\n", "", "", "", "ret", "=", "{", "'input'", ":", "inp", ",", "'hm'", ":", "hm", ",", "'reg_mask'", ":", "reg_mask", ",", "'ind'", ":", "ind", ",", "'wh'", ":", "wh", "}", "\n", "if", "self", ".", "opt", ".", "dense_wh", ":", "\n", "            ", "hm_a", "=", "hm", ".", "max", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "dense_wh_mask", "=", "np", ".", "concatenate", "(", "[", "hm_a", ",", "hm_a", "]", ",", "axis", "=", "0", ")", "\n", "ret", ".", "update", "(", "{", "'dense_wh'", ":", "dense_wh", ",", "'dense_wh_mask'", ":", "dense_wh_mask", "}", ")", "\n", "del", "ret", "[", "'wh'", "]", "\n", "", "elif", "self", ".", "opt", ".", "cat_spec_wh", ":", "\n", "            ", "ret", ".", "update", "(", "{", "'cat_spec_wh'", ":", "cat_spec_wh", ",", "'cat_spec_mask'", ":", "cat_spec_mask", "}", ")", "\n", "del", "ret", "[", "'wh'", "]", "\n", "", "if", "self", ".", "opt", ".", "reg_offset", ":", "\n", "            ", "ret", ".", "update", "(", "{", "'reg'", ":", "reg", "}", ")", "\n", "", "if", "self", ".", "opt", ".", "debug", ">", "0", "or", "not", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "gt_det", "=", "np", ".", "array", "(", "gt_det", ",", "dtype", "=", "np", ".", "float32", ")", "if", "len", "(", "gt_det", ")", ">", "0", "else", "np", ".", "zeros", "(", "(", "1", ",", "6", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "'gt_det'", ":", "gt_det", ",", "'img_id'", ":", "img_id", "}", "\n", "ret", "[", "'meta'", "]", "=", "meta", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_centernet.CenterIndoorDataset._coco_box_to_bbox": [[12, 15], ["numpy.array"], "methods", ["None"], ["    ", "def", "_coco_box_to_bbox", "(", "self", ",", "box", ")", ":", "\n", "        ", "bbox", "=", "np", ".", "array", "(", "[", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "0", "]", "+", "box", "[", "2", "]", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_centernet.CenterIndoorDataset._get_border": [[16, 21], ["None"], "methods", ["None"], ["", "def", "_get_border", "(", "self", ",", "border", ",", "size", ")", ":", "\n", "        ", "i", "=", "1", "\n", "while", "size", "-", "border", "//", "i", "<=", "border", "//", "i", ":", "\n", "            ", "i", "*=", "2", "\n", "", "return", "border", "//", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_centernet.CenterIndoorDataset.__getitem__": [[22, 157], ["os.path.join", "indoor_centernet.CenterIndoorDataset.coco.getAnnIds", "indoor_centernet.CenterIndoorDataset.coco.loadAnns", "min", "cv2.imread", "numpy.array", "utils.image.get_affine_transform", "cv2.warpAffine", "inp.transpose.transpose.transpose", "utils.image.get_affine_transform", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "numpy.array", "numpy.random.random", "inp.transpose.transpose.astype", "utils.image.color_aug", "indoor_centernet.CenterIndoorDataset._coco_box_to_bbox", "utils.image.affine_transform", "utils.image.affine_transform", "numpy.clip", "numpy.clip", "numpy.zeros.max", "numpy.concatenate", "ret.update", "ret.update", "indoor_centernet.CenterIndoorDataset.coco.loadImgs", "max", "indoor_centernet.CenterIndoorDataset._get_border", "indoor_centernet.CenterIndoorDataset._get_border", "numpy.random.randint", "numpy.random.randint", "print", "int", "utils.image.gaussian_radius", "max", "numpy.array", "numpy.array.astype", "draw_gaussian", "ret.update", "numpy.array", "numpy.zeros", "numpy.random.choice", "numpy.clip", "numpy.clip", "numpy.clip", "int", "utils.image.draw_dense_reg", "gt_det.append", "gt_det.append", "len", "numpy.arange", "math.ceil", "math.ceil", "numpy.zeros.max", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.color_aug", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._coco_box_to_bbox", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.gaussian_radius", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.draw_dense_reg"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "images", "[", "index", "]", "\n", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "file_name", ")", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "num_objs", "=", "min", "(", "len", "(", "anns", ")", ",", "self", ".", "max_objs", ")", "\n", "\n", "#print(img_path)", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "height", ",", "width", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "img", ".", "shape", "[", "1", "]", "/", "2.", ",", "img", ".", "shape", "[", "0", "]", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "opt", ".", "keep_res", ":", "\n", "            ", "input_h", "=", "(", "height", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "input_w", "=", "(", "width", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "s", "=", "np", ".", "array", "(", "[", "input_w", ",", "input_h", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "max", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "*", "1.0", "\n", "input_h", ",", "input_w", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "\n", "", "flipped", "=", "False", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "not_rand_crop", ":", "\n", "                ", "s", "=", "s", "*", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "0.6", ",", "1.4", ",", "0.1", ")", ")", "\n", "w_border", "=", "self", ".", "_get_border", "(", "128", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "h_border", "=", "self", ".", "_get_border", "(", "128", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "c", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "w_border", ",", "high", "=", "img", ".", "shape", "[", "1", "]", "-", "w_border", ")", "\n", "c", "[", "1", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "h_border", ",", "high", "=", "img", ".", "shape", "[", "0", "]", "-", "h_border", ")", "\n", "", "else", ":", "\n", "                ", "sf", "=", "self", ".", "opt", ".", "scale", "\n", "cf", "=", "self", ".", "opt", ".", "shift", "\n", "c", "[", "0", "]", "+=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "cf", ",", "-", "2", "*", "cf", ",", "2", "*", "cf", ")", "\n", "c", "[", "1", "]", "+=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "cf", ",", "-", "2", "*", "cf", ",", "2", "*", "cf", ")", "\n", "s", "=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "sf", "+", "1", ",", "1", "-", "sf", ",", "1", "+", "sf", ")", "\n", "\n", "", "", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "opt", ".", "flip", ":", "\n", "            ", "flipped", "=", "True", "\n", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "c", "[", "0", "]", "=", "width", "-", "c", "[", "0", "]", "-", "1", "\n", "\n", "\n", "", "trans_input", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "input_w", ",", "input_h", "]", ")", "\n", "inp", "=", "cv2", ".", "warpAffine", "(", "img", ",", "trans_input", ",", "\n", "(", "input_w", ",", "input_h", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "inp", "=", "(", "inp", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", ")", "\n", "if", "self", ".", "split", "==", "'train'", "and", "not", "self", ".", "opt", ".", "no_color_aug", ":", "\n", "            ", "color_aug", "(", "self", ".", "_data_rng", ",", "inp", ",", "self", ".", "_eig_val", ",", "self", ".", "_eig_vec", ")", "# color augmentation", "\n", "", "inp", "=", "(", "inp", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "inp", "=", "inp", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# xyc -> cxy", "\n", "\n", "output_h", "=", "input_h", "//", "self", ".", "opt", ".", "down_ratio", "\n", "output_w", "=", "input_w", "//", "self", ".", "opt", ".", "down_ratio", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "trans_output", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "output_w", ",", "output_h", "]", ")", "\n", "\n", "hm", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "output_h", ",", "output_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "wh", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dense_wh", "=", "np", ".", "zeros", "(", "(", "2", ",", "output_h", ",", "output_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "reg", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ind", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "reg_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cat_spec_wh", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "num_classes", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cat_spec_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "num_classes", "*", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "draw_gaussian", "=", "draw_msra_gaussian", "if", "self", ".", "opt", ".", "mse_loss", "else", "draw_umich_gaussian", "\n", "\n", "gt_det", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "            ", "ann", "=", "anns", "[", "k", "]", "\n", "bbox", "=", "self", ".", "_coco_box_to_bbox", "(", "ann", "[", "'bbox'", "]", ")", "\n", "if", "'category_id'", "not", "in", "ann", ":", "\n", "                ", "print", "(", "\"ann: {}\"", ",", "ann", ")", "\n", "return", "KeyError", "\n", "", "else", ":", "\n", "                ", "cls_id", "=", "int", "(", "self", ".", "cat_ids", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "if", "cls_id", "in", "self", ".", "ignore_cls_list", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "if", "flipped", ":", "\n", "              ", "bbox", "[", "[", "0", ",", "2", "]", "]", "=", "width", "-", "bbox", "[", "[", "2", ",", "0", "]", "]", "-", "1", "\n", "\n", "", "bbox", "[", ":", "2", "]", "=", "affine_transform", "(", "bbox", "[", ":", "2", "]", ",", "trans_output", ")", "\n", "bbox", "[", "2", ":", "]", "=", "affine_transform", "(", "bbox", "[", "2", ":", "]", ",", "trans_output", ")", "\n", "bbox", "[", "[", "0", ",", "2", "]", "]", "=", "np", ".", "clip", "(", "bbox", "[", "[", "0", ",", "2", "]", "]", ",", "0", ",", "output_w", "-", "1", ")", "\n", "bbox", "[", "[", "1", ",", "3", "]", "]", "=", "np", ".", "clip", "(", "bbox", "[", "[", "1", ",", "3", "]", "]", ",", "0", ",", "output_h", "-", "1", ")", "\n", "h", ",", "w", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "\n", "\n", "if", "h", ">", "0", "and", "w", ">", "0", ":", "\n", "                ", "radius", "=", "gaussian_radius", "(", "(", "math", ".", "ceil", "(", "h", ")", ",", "math", ".", "ceil", "(", "w", ")", ")", ")", "\n", "radius", "=", "max", "(", "0", ",", "int", "(", "radius", ")", ")", "\n", "radius", "=", "self", ".", "opt", ".", "hm_gauss", "if", "self", ".", "opt", ".", "mse_loss", "else", "radius", "\n", "ct", "=", "np", ".", "array", "(", "[", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "/", "2", ",", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct_int", ",", "radius", ")", "\n", "wh", "[", "k", "]", "=", "1.", "*", "w", ",", "1.", "*", "h", "\n", "ind", "[", "k", "]", "=", "ct_int", "[", "1", "]", "*", "output_w", "+", "ct_int", "[", "0", "]", "\n", "reg", "[", "k", "]", "=", "ct", "-", "ct_int", "\n", "reg_mask", "[", "k", "]", "=", "1", "\n", "cat_spec_wh", "[", "k", ",", "cls_id", "*", "2", ":", "cls_id", "*", "2", "+", "2", "]", "=", "wh", "[", "k", "]", "\n", "cat_spec_mask", "[", "k", ",", "cls_id", "*", "2", ":", "cls_id", "*", "2", "+", "2", "]", "=", "1", "\n", "if", "self", ".", "opt", ".", "dense_wh", ":", "\n", "                    ", "draw_dense_reg", "(", "dense_wh", ",", "hm", ".", "max", "(", "axis", "=", "0", ")", ",", "ct_int", ",", "wh", "[", "k", "]", ",", "radius", ")", "\n", "", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                    ", "gt_det", ".", "append", "(", "[", "ct", "[", "0", "]", "-", "w", "/", "2", ",", "ct", "[", "1", "]", "-", "h", "/", "2", ",", "ct", "[", "0", "]", "+", "w", "/", "2", ",", "ct", "[", "1", "]", "+", "h", "/", "2", ",", "1", ",", "cls_id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "gt_det", ".", "append", "(", "[", "ct", "[", "0", "]", "-", "w", "/", "2", ",", "ct", "[", "1", "]", "-", "h", "/", "2", ",", "ct", "[", "0", "]", "+", "w", "/", "2", ",", "ct", "[", "1", "]", "+", "h", "/", "2", ",", "cls_id", "]", ")", "\n", "\n", "", "", "", "'''\n        if self.split == 'val':\n            gt_det = np.array(gt_det, dtype=np.float32) if len(gt_det) > 0 else \\\n                   np.zeros((1, 5), dtype=np.float32)\n            return inp, gt_det\n        '''", "\n", "\n", "ret", "=", "{", "'input'", ":", "inp", ",", "'hm'", ":", "hm", ",", "'reg_mask'", ":", "reg_mask", ",", "'ind'", ":", "ind", ",", "'wh'", ":", "wh", "}", "\n", "if", "self", ".", "opt", ".", "dense_wh", ":", "\n", "            ", "hm_a", "=", "hm", ".", "max", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "dense_wh_mask", "=", "np", ".", "concatenate", "(", "[", "hm_a", ",", "hm_a", "]", ",", "axis", "=", "0", ")", "\n", "ret", ".", "update", "(", "{", "'dense_wh'", ":", "dense_wh", ",", "'dense_wh_mask'", ":", "dense_wh_mask", "}", ")", "\n", "del", "ret", "[", "'wh'", "]", "\n", "", "elif", "self", ".", "opt", ".", "cat_spec_wh", ":", "\n", "            ", "ret", ".", "update", "(", "{", "'cat_spec_wh'", ":", "cat_spec_wh", ",", "'cat_spec_mask'", ":", "cat_spec_mask", "}", ")", "\n", "del", "ret", "[", "'wh'", "]", "\n", "", "if", "self", ".", "opt", ".", "reg_offset", ":", "\n", "            ", "ret", ".", "update", "(", "{", "'reg'", ":", "reg", "}", ")", "\n", "", "if", "self", ".", "opt", ".", "debug", ">", "0", "or", "not", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "gt_det", "=", "np", ".", "array", "(", "gt_det", ",", "dtype", "=", "np", ".", "float32", ")", "if", "len", "(", "gt_det", ")", ">", "0", "else", "np", ".", "zeros", "(", "(", "1", ",", "6", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "'gt_det'", ":", "gt_det", ",", "'img_id'", ":", "img_id", "}", "\n", "ret", "[", "'meta'", "]", "=", "meta", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS.__init__": [[23, 78], ["torch.Dataset.__init__", "os.path.join", "os.path.join", "numpy.random.RandomState", "numpy.array", "numpy.array", "pycocotools.COCO", "indoor_render512pixelSS.IndoorRender512PixelSS.coco.getImgIds", "len", "print", "os.path.join", "os.path.join", "range", "range", "enumerate", "range", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "split", ")", ":", "\n", "        ", "super", "(", "IndoorRender512PixelSS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_dir", ",", "'indoor_render_512pixelSS'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'images'", ")", "\n", "\n", "if", "opt", ".", "scarcity", "==", "'55'", ":", "\n", "# 50:50 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}.json'", ".", "format", "(", "split", ")", ")", "\n", "", "elif", "opt", ".", "scarcity", "==", "'37'", ":", "\n", "# 30:70 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}_37.json'", ".", "format", "(", "split", ")", ")", "\n", "", "elif", "opt", ".", "scarcity", "==", "'19'", ":", "\n", "# 10:90 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}_19.json'", ".", "format", "(", "split", ")", ")", "\n", "\n", "", "self", ".", "max_objs", "=", "128", "\n", "self", ".", "class_name", "=", "[", "\n", "'__background__'", ",", "\n", "'chair'", ",", "# 1", "\n", "'clock'", ",", "# 2", "\n", "'exit'", ",", "# 3", "\n", "'fireextinguisher'", ",", "# 4", "\n", "'printer'", ",", "# 5", "\n", "'screen'", ",", "# 6", "\n", "'trashbin'", "]", "# 7", "\n", "\n", "self", ".", "pos_ids", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", "# remove knife(kitchen) from weapon", "\n", "self", ".", "neg_ids", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "class_name", ")", ")", "if", "i", "not", "in", "self", ".", "pos_ids", "]", "\n", "self", ".", "ignore_cls_list", "=", "[", "]", "# do not train with these classes", "\n", "self", ".", "id_to_thresh", "=", "{", "}", "\n", "for", "pos_id", "in", "self", ".", "pos_ids", ":", "\n", "            ", "self", ".", "id_to_thresh", "[", "pos_id", "]", "=", "0.2", "\n", "\n", "#self._valid_ids = [i for i in range(1, self.num_classes+1) if i not in self.ignore_cls_list]", "\n", "", "self", ".", "_valid_ids", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", "\n", "self", ".", "cat_ids", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "_valid_ids", ")", "}", "\n", "self", ".", "voc_color", "=", "[", "(", "v", "//", "32", "*", "64", "+", "64", ",", "(", "v", "//", "8", ")", "%", "4", "*", "64", ",", "v", "%", "8", "*", "32", ")", "for", "v", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", "\n", "self", ".", "_data_rng", "=", "np", ".", "random", ".", "RandomState", "(", "123", ")", "\n", "self", ".", "_eig_val", "=", "np", ".", "array", "(", "[", "0.2141788", ",", "0.01817699", ",", "0.00341571", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_eig_vec", "=", "np", ".", "array", "(", "[", "\n", "[", "-", "0.58752847", ",", "-", "0.69563484", ",", "0.41340352", "]", ",", "\n", "[", "-", "0.5832747", ",", "0.00994535", ",", "-", "0.81221408", "]", ",", "\n", "[", "-", "0.56089297", ",", "0.71832671", ",", "0.41158938", "]", "\n", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "coco", "=", "coco", ".", "COCO", "(", "self", ".", "annot_path", ")", "\n", "self", ".", "images", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "images", ")", "\n", "\n", "print", "(", "'Loaded {} {} samples'", ".", "format", "(", "split", ",", "self", ".", "num_samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS._to_float": [[79, 81], ["float"], "methods", ["None"], ["", "def", "_to_float", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "float", "(", "\"{:.2f}\"", ".", "format", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS.convert_eval_format": [[82, 102], ["list", "detections.append", "map", "int", "int", "float"], "methods", ["None"], ["", "def", "convert_eval_format", "(", "self", ",", "all_bboxes", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "        ", "detections", "=", "[", "]", "\n", "for", "image_id", "in", "all_bboxes", ":", "\n", "            ", "for", "cls_ind", "in", "all_bboxes", "[", "image_id", "]", ":", "\n", "                ", "category_id", "=", "self", ".", "_valid_ids", "[", "cls_ind", "-", "1", "]", "\n", "for", "bbox", "in", "all_bboxes", "[", "image_id", "]", "[", "cls_ind", "]", ":", "\n", "                    ", "bbox", "[", "2", "]", "-=", "bbox", "[", "0", "]", "\n", "bbox", "[", "3", "]", "-=", "bbox", "[", "1", "]", "\n", "score", "=", "bbox", "[", "4", "]", "\n", "bbox_out", "=", "list", "(", "map", "(", "self", ".", "_to_float", ",", "bbox", "[", "0", ":", "4", "]", ")", ")", "\n", "\n", "detection", "=", "{", "\n", "\"image_id\"", ":", "int", "(", "image_id", ")", ",", "\n", "\"category_id\"", ":", "int", "(", "category_id", ")", ",", "\n", "\"bbox\"", ":", "bbox_out", ",", "\n", "\"score\"", ":", "float", "(", "\"{:.2f}\"", ".", "format", "(", "score", ")", ")", "\n", "}", "\n", "detections", ".", "append", "(", "detection", ")", "\n", "", "", "", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS.__len__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS.save_results": [[106, 109], ["json.dump", "indoor_render512pixelSS.IndoorRender512PixelSS.convert_eval_format", "open"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.convert_eval_format"], ["", "def", "save_results", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "json", ".", "dump", "(", "self", ".", "convert_eval_format", "(", "results", ")", ",", "\n", "open", "(", "'{}/results.json'", ".", "format", "(", "save_dir", ")", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS.run_eval": [[110, 117], ["indoor_render512pixelSS.IndoorRender512PixelSS.save_results", "indoor_render512pixelSS.IndoorRender512PixelSS.coco.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.save_results"], ["", "def", "run_eval", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_results", "(", "results", ",", "save_dir", ")", "\n", "coco_dets", "=", "self", ".", "coco", ".", "loadRes", "(", "'{}/results.json'", ".", "format", "(", "save_dir", ")", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "coco", ",", "coco_dets", ",", "\"bbox\"", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS.run_censor_eval": [[119, 149], ["indoor_render512pixelSS.IndoorRender512PixelSS.save_results", "numpy.arange", "print", "print", "os.path.join", "indoor_render512pixelSS.IndoorRender512PixelSS.plot_precision_recall_curve", "print", "print", "print", "os.path.join", "indoor_render512pixelSS.IndoorRender512PixelSS.plot_roc_curve", "print", "print", "indoor_render512pixelSS.IndoorRender512PixelSS.calculate_precision_recall_at_thresh", "prec_list.append", "recall_list.append", "true_pos_rate_list.append", "false_pos_rate_list.append"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.save_results", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_precision_recall_curve", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_roc_curve", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.calculate_precision_recall_at_thresh"], ["", "def", "run_censor_eval", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_results", "(", "results", ",", "save_dir", ")", "\n", "\n", "thresh_list", "=", "np", ".", "arange", "(", "0.05", ",", "1.0", ",", "0.05", ")", "\n", "prec_list", "=", "[", "]", "\n", "recall_list", "=", "[", "]", "\n", "true_pos_rate_list", "=", "[", "1.0", "]", "\n", "false_pos_rate_list", "=", "[", "1.0", "]", "\n", "for", "thresh", "in", "thresh_list", ":", "\n", "            ", "print", "(", "\"Working on thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "=", "self", ".", "calculate_precision_recall_at_thresh", "(", "results", ",", "thresh", ")", "\n", "prec_list", ".", "append", "(", "precision", ")", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "true_pos_rate_list", ".", "append", "(", "true_pos_rate", ")", "\n", "false_pos_rate_list", ".", "append", "(", "false_pos_rate", ")", "\n", "\n", "# draw precision-recall curve and calculate auc", "\n", "", "print", "(", "\"precision list: {}\"", ".", "format", "(", "prec_list", ")", ")", "\n", "print", "(", "\"recall list: {}\"", ".", "format", "(", "recall_list", ")", ")", "\n", "fig_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"prec-recall-curve.png\"", ")", "\n", "self", ".", "plot_precision_recall_curve", "(", "fig_save_path", ",", "prec_list", ",", "recall_list", ")", "\n", "print", "(", "\"precision-recall-curve saved to {}\"", ".", "format", "(", "fig_save_path", ")", ")", "\n", "\n", "# draw ROC-curve", "\n", "print", "(", "\"true_pos_rate_list: {}\"", ".", "format", "(", "true_pos_rate_list", ")", ")", "\n", "print", "(", "\"false_pos_rate_list: {}\"", ".", "format", "(", "false_pos_rate_list", ")", ")", "\n", "fig_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"ROC-curve.png\"", ")", "\n", "self", ".", "plot_roc_curve", "(", "fig_save_path", ",", "true_pos_rate_list", ",", "false_pos_rate_list", ")", "\n", "print", "(", "\"ROC-curve saved to {}\"", ".", "format", "(", "fig_save_path", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS.calculate_precision_recall_at_thresh": [[151, 205], ["indoor_render512pixelSS.IndoorRender512PixelSS.coco.getImgIds", "len", "print", "print", "print", "print", "print", "print", "print", "indoor_render512pixelSS.IndoorRender512PixelSS.coco.getAnnIds", "indoor_render512pixelSS.IndoorRender512PixelSS.coco.loadAnns"], "methods", ["None"], ["", "def", "calculate_precision_recall_at_thresh", "(", "self", ",", "results", ",", "thresh", ")", ":", "\n", "        ", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "true_pos", ",", "true_neg", ",", "false_pos", ",", "false_neg", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "num_imgs", "=", "len", "(", "img_ids", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "''' Determine ground truth'''", "\n", "censor_gt", "=", "False", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "#print(\"anns = {}\".format(anns))", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "cat_id", "=", "ann", "[", "\"category_id\"", "]", "\n", "if", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                    ", "censor_gt", "=", "True", "\n", "\n", "", "", "''' Determine prediction '''", "\n", "censor_pred", "=", "False", "\n", "preds_all_cls", "=", "results", "[", "img_id", "]", "\n", "for", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "                    ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "#if conf > self.id_to_thresh[cat_id]:   # using class-specific thresholds (during inference)", "\n", "if", "conf", ">", "thresh", ":", "\n", "                        ", "censor_pred", "=", "True", "\n", "\n", "", "", "", "''' Compare GT and Pred '''", "\n", "if", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "true_pos", "+=", "1", "\n", "", "elif", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "false_neg", "+=", "1", "\n", "", "elif", "not", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "true_neg", "+=", "1", "\n", "", "elif", "not", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "false_pos", "+=", "1", "\n", "\n", "", "", "''' metrics '''", "\n", "precision", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_pos", ")", "if", "true_pos", "+", "false_pos", "!=", "0", "else", "0", "\n", "recall", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_neg", ")", "if", "true_pos", "+", "false_neg", "!=", "0", "else", "0", "\n", "censor_rate", "=", "1.0", "*", "(", "true_pos", "+", "false_pos", ")", "/", "num_imgs", "\n", "\n", "true_pos_rate", "=", "recall", "\n", "false_pos_rate", "=", "1.0", "*", "false_pos", "/", "(", "false_pos", "+", "true_neg", ")", "if", "false_pos", "+", "true_neg", "!=", "0", "else", "0", "# fallout", "\n", "\n", "print", "(", "\"With thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "print", "(", "\"TP: {}, FP: {}, TN: {}, FN: {}\"", ".", "format", "(", "true_pos", ",", "false_pos", ",", "true_neg", ",", "false_neg", ")", ")", "\n", "print", "(", "\"Precision: {}\"", ".", "format", "(", "precision", ")", ")", "\n", "print", "(", "\"Recall / sensitivity: {}\"", ".", "format", "(", "recall", ")", ")", "\n", "print", "(", "\"Censor rate: {}\"", ".", "format", "(", "censor_rate", ")", ")", "\n", "print", "(", "\"True positive rate = recall\"", ")", "\n", "print", "(", "\"False positive rate: {}\"", ".", "format", "(", "false_pos_rate", ")", ")", "\n", "return", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS.plot_precision_recall_curve": [[207, 221], ["metrics.auc", "plt.clf", "plt.plot", "plt.text", "plt.xlabel", "plt.ylabel", "plt.ylim", "plt.xlim", "plt.title", "plt.legend", "plt.savefig"], "methods", ["None"], ["", "def", "plot_precision_recall_curve", "(", "self", ",", "fig_save_path", ",", "prec_list", ",", "recall_list", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "recall_list", ",", "prec_list", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "recall_list", ",", "prec_list", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.5", ",", "'AUC(%s)'", "%", "(", "auc_score", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "xlabel", "(", "'Recall'", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'Precision-Recall'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS.plot_roc_curve": [[223, 237], ["metrics.auc", "plt.clf", "plt.plot", "plt.text", "plt.xlabel", "plt.ylabel", "plt.ylim", "plt.xlim", "plt.title", "plt.legend", "plt.savefig"], "methods", ["None"], ["", "def", "plot_roc_curve", "(", "self", ",", "fig_save_path", ",", "true_pos_rate_list", ",", "false_pos_rate_list", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "false_pos_rate_list", ",", "true_pos_rate_list", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "false_pos_rate_list", ",", "true_pos_rate_list", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.5", ",", "'AUC(%s)'", "%", "(", "auc_score", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "xlabel", "(", "'False positive rate'", ")", "\n", "plt", ".", "ylabel", "(", "'True positive rate'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'ROC curve'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS.batch_plot_precision_recall_curves": [[239, 280], ["plt.clf", "plt.subplots", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.set_ylim", "ax.set_xlim", "ax.set_title", "ax.legend", "ax.legend.get_frame().set_facecolor", "plt.savefig", "metrics.auc", "ax.plot", "ax.legend.get_frame", "len", "len"], "methods", ["None"], ["", "def", "batch_plot_precision_recall_curves", "(", "self", ",", "fig_save_path", ",", "curve_lists", ")", ":", "\n", "        ", "'''\n        :param curve_lists: a list of dictionaries, e.g., [dict_1, dict_2], where\n                            dict_1 = { 'model_name': model_name,\n                                       'prec_list': prec_list,\n                                       'recall_list': recall_list}\n        :return:\n        '''", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "\n", "colors", "=", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'c'", ",", "'m'", ",", "'y'", ",", "'k'", "]", "\n", "line_styles", "=", "[", "'-'", ",", "'--'", ",", "'-.'", ",", "':'", ",", "''", "]", "\n", "plt", ".", "clf", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "for", "i", ",", "curve", "in", "enumerate", "(", "curve_lists", ")", ":", "\n", "            ", "recall_list", "=", "curve", "[", "'recall_list'", "]", "\n", "prec_list", "=", "curve", "[", "'prec_list'", "]", "\n", "model_name", "=", "curve", "[", "'model_name'", "]", "\n", "\n", "color", "=", "colors", "[", "i", "%", "len", "(", "colors", ")", "]", "\n", "line_style", "=", "line_styles", "[", "i", "%", "len", "(", "line_styles", ")", "]", "\n", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "recall_list", ",", "prec_list", ")", "\n", "label_str", "=", "'{:s}(AUC): {:03.2f}'", ".", "format", "(", "model_name", ",", "auc_score", ")", "\n", "\n", "ax", ".", "plot", "(", "recall_list", ",", "prec_list", ",", "color", "=", "color", ",", "linestyle", "=", "line_style", ",", "linewidth", "=", "2.0", ",", "label", "=", "label_str", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "'Recall'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Precision'", ")", "\n", "ax", ".", "set_ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "ax", ".", "set_title", "(", "'Precision-Recall'", ")", "\n", "legend", "=", "ax", ".", "legend", "(", "loc", "=", "'upper right'", ",", "shadow", "=", "True", ",", "fontsize", "=", "'x-large'", ")", "\n", "\n", "# Put a nicer background color on the legend.", "\n", "legend", ".", "get_frame", "(", ")", ".", "set_facecolor", "(", "'C0'", ")", "\n", "\n", "# save figure", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pixelSS.IndoorRender512PixelSS.export_qualitative_results": [[282, 382], ["os.path.join", "indoor_render512pixelSS.IndoorRender512PixelSS.coco.getImgIds", "len", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "remove_files_in_folder", "print", "os.path.join", "cv2.imread", "indoor_render512pixelSS.IndoorRender512PixelSS.coco.getAnnIds", "indoor_render512pixelSS.IndoorRender512PixelSS.coco.loadAnns", "draw_bboxes_on_img", "vis_censor", "os.path.join", "create_folder", "os.path.join", "cv2.imwrite", "indoor_render512pixelSS.IndoorRender512PixelSS.coco.loadImgs", "gt_pos_cat_list.append", "pred_pos_cat_list.append"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.remove_files_in_folder", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.draw_bboxes_on_img", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.vis_censor", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.create_folder"], ["", "def", "export_qualitative_results", "(", "self", ",", "results", ",", "split", ",", "thresh", ")", ":", "\n", "        ", "from", "utils", ".", "utils_vis_bbox", "import", "draw_bboxes_on_img", "\n", "from", "utils", ".", "utils_vis_censor", "import", "vis_censor", "\n", "from", "utils", ".", "utils_io_folder", "import", "create_folder", ",", "remove_files_in_folder", "\n", "import", "cv2", "\n", "\n", "# clean previous results", "\n", "img_output_parent_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"qualitative\"", ",", "split", ")", "\n", "for", "extra_str", "in", "[", "\"TP\"", ",", "\"TN\"", ",", "\"FP\"", ",", "\"FN\"", "]", ":", "\n", "            ", "img_output_folder_path", "=", "os", ".", "path", ".", "join", "(", "img_output_parent_folder", ",", "extra_str", ")", "\n", "remove_files_in_folder", "(", "img_output_folder_path", ")", "\n", "\n", "", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "true_pos", ",", "true_neg", ",", "false_pos", ",", "false_neg", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "num_imgs", "=", "len", "(", "img_ids", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "''' Load image '''", "\n", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "print", "(", "\"filename = {}\"", ".", "format", "(", "file_name", ")", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "file_name", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "''' Determine ground truth'''", "\n", "censor_gt", "=", "False", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "gt_pos_cat_list", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "cat_id", "=", "ann", "[", "\"category_id\"", "]", "\n", "if", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                    ", "censor_gt", "=", "True", "\n", "if", "self", ".", "class_name", "[", "cat_id", "]", "not", "in", "gt_pos_cat_list", ":", "\n", "                        ", "gt_pos_cat_list", ".", "append", "(", "self", ".", "class_name", "[", "cat_id", "]", ")", "\n", "\n", "", "", "", "''' Determine prediction '''", "\n", "censor_pred", "=", "False", "\n", "preds_all_cls", "=", "results", "[", "img_id", "]", "\n", "pred_pos_cat_list", "=", "[", "]", "\n", "for", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "                    ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "#if conf > self.id_to_thresh[cat_id]:   # using class-specific thresholds (during inference)", "\n", "if", "conf", ">", "thresh", ":", "\n", "                        ", "censor_pred", "=", "True", "\n", "if", "self", ".", "class_name", "[", "cat_id", "]", "not", "in", "pred_pos_cat_list", ":", "\n", "                            ", "pred_pos_cat_list", ".", "append", "(", "self", ".", "class_name", "[", "cat_id", "]", ")", "\n", "\n", "", "", "", "", "''' Compare GT and Pred '''", "\n", "if", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "true_pos", "+=", "1", "\n", "extra_str", "=", "\"TP\"", "\n", "", "elif", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "false_neg", "+=", "1", "\n", "extra_str", "=", "\"FN\"", "\n", "", "elif", "not", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "true_neg", "+=", "1", "\n", "extra_str", "=", "\"TN\"", "\n", "", "elif", "not", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "false_pos", "+=", "1", "\n", "extra_str", "=", "\"FP\"", "\n", "\n", "", "''' visualize results for this image '''", "\n", "# add bboxes", "\n", "img", "=", "draw_bboxes_on_img", "(", "img", ",", "preds_all_cls", ")", "\n", "\n", "# add censor info", "\n", "gt_censor_str", "=", "\"YES\"", "if", "censor_gt", "else", "\"NO\"", "\n", "pred_censor_str", "=", "\"YES\"", "if", "censor_pred", "else", "\"NO\"", "\n", "gt_cls_str", "=", "', '", ".", "join", "(", "gt_pos_cat_list", ")", "\n", "pred_cls_str", "=", "', '", ".", "join", "(", "pred_pos_cat_list", ")", "\n", "img", "=", "vis_censor", "(", "img", ",", "\n", "gt_censor_str", ",", "gt_cls_str", ",", "\n", "pred_censor_str", ",", "pred_cls_str", ",", "\n", "extra_str", ")", "\n", "\n", "img_output_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"qualitative\"", ",", "split", ",", "extra_str", ")", "\n", "create_folder", "(", "img_output_folder", ")", "\n", "img_output_path", "=", "os", ".", "path", ".", "join", "(", "img_output_folder", ",", "file_name", ")", "\n", "cv2", ".", "imwrite", "(", "img_output_path", ",", "img", ")", "\n", "\n", "\n", "", "''' metrics '''", "\n", "precision", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_pos", ")", "\n", "recall", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_neg", ")", "\n", "censor_rate", "=", "1.0", "*", "(", "true_pos", "+", "false_pos", ")", "/", "num_imgs", "\n", "\n", "true_pos_rate", "=", "recall", "\n", "false_pos_rate", "=", "1.0", "*", "false_pos", "/", "(", "false_pos", "+", "true_neg", ")", "# fallout", "\n", "\n", "print", "(", "\"With thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "print", "(", "\"TP: {}, FP: {}, TN: {}, FN: {}\"", ".", "format", "(", "true_pos", ",", "false_pos", ",", "true_neg", ",", "false_neg", ")", ")", "\n", "print", "(", "\"Precision: {}\"", ".", "format", "(", "precision", ")", ")", "\n", "print", "(", "\"Recall / sensitivity: {}\"", ".", "format", "(", "recall", ")", ")", "\n", "print", "(", "\"Censor rate: {}\"", ".", "format", "(", "censor_rate", ")", ")", "\n", "print", "(", "\"True positive rate = recall\"", ")", "\n", "print", "(", "\"False positive rate: {}\"", ".", "format", "(", "false_pos_rate", ")", ")", "\n", "return", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native.__init__": [[23, 78], ["torch.Dataset.__init__", "os.path.join", "os.path.join", "numpy.random.RandomState", "numpy.array", "numpy.array", "pycocotools.COCO", "indoor_render512native.IndoorRender512Native.coco.getImgIds", "len", "print", "os.path.join", "os.path.join", "range", "range", "enumerate", "range", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "split", ")", ":", "\n", "        ", "super", "(", "IndoorRender512Native", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_dir", ",", "'indoor_render_512pointSS'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'images'", ")", "\n", "\n", "if", "opt", ".", "scarcity", "==", "'55'", ":", "\n", "# 50:50 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}.json'", ".", "format", "(", "split", ")", ")", "\n", "", "elif", "opt", ".", "scarcity", "==", "'37'", ":", "\n", "# 30:70 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}_37.json'", ".", "format", "(", "split", ")", ")", "\n", "", "elif", "opt", ".", "scarcity", "==", "'19'", ":", "\n", "# 10:90 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}_19.json'", ".", "format", "(", "split", ")", ")", "\n", "\n", "", "self", ".", "max_objs", "=", "128", "\n", "self", ".", "class_name", "=", "[", "\n", "'__background__'", ",", "\n", "'chair'", ",", "# 1", "\n", "'clock'", ",", "# 2", "\n", "'exit'", ",", "# 3", "\n", "'fireextinguisher'", ",", "# 4", "\n", "'printer'", ",", "# 5", "\n", "'screen'", ",", "# 6", "\n", "'trashbin'", "]", "# 7", "\n", "\n", "self", ".", "pos_ids", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", "# remove knife(kitchen) from weapon", "\n", "self", ".", "neg_ids", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "class_name", ")", ")", "if", "i", "not", "in", "self", ".", "pos_ids", "]", "\n", "self", ".", "ignore_cls_list", "=", "[", "]", "# do not train with these classes", "\n", "self", ".", "id_to_thresh", "=", "{", "}", "\n", "for", "pos_id", "in", "self", ".", "pos_ids", ":", "\n", "            ", "self", ".", "id_to_thresh", "[", "pos_id", "]", "=", "0.2", "\n", "\n", "#self._valid_ids = [i for i in range(1, self.num_classes+1) if i not in self.ignore_cls_list]", "\n", "", "self", ".", "_valid_ids", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", "\n", "self", ".", "cat_ids", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "_valid_ids", ")", "}", "\n", "self", ".", "voc_color", "=", "[", "(", "v", "//", "32", "*", "64", "+", "64", ",", "(", "v", "//", "8", ")", "%", "4", "*", "64", ",", "v", "%", "8", "*", "32", ")", "for", "v", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", "\n", "self", ".", "_data_rng", "=", "np", ".", "random", ".", "RandomState", "(", "123", ")", "\n", "self", ".", "_eig_val", "=", "np", ".", "array", "(", "[", "0.2141788", ",", "0.01817699", ",", "0.00341571", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_eig_vec", "=", "np", ".", "array", "(", "[", "\n", "[", "-", "0.58752847", ",", "-", "0.69563484", ",", "0.41340352", "]", ",", "\n", "[", "-", "0.5832747", ",", "0.00994535", ",", "-", "0.81221408", "]", ",", "\n", "[", "-", "0.56089297", ",", "0.71832671", ",", "0.41158938", "]", "\n", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "coco", "=", "coco", ".", "COCO", "(", "self", ".", "annot_path", ")", "\n", "self", ".", "images", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "images", ")", "\n", "\n", "print", "(", "'Loaded {} {} samples'", ".", "format", "(", "split", ",", "self", ".", "num_samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native._to_float": [[79, 81], ["float"], "methods", ["None"], ["", "def", "_to_float", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "float", "(", "\"{:.2f}\"", ".", "format", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native.convert_eval_format": [[82, 102], ["list", "detections.append", "map", "int", "int", "float"], "methods", ["None"], ["", "def", "convert_eval_format", "(", "self", ",", "all_bboxes", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "        ", "detections", "=", "[", "]", "\n", "for", "image_id", "in", "all_bboxes", ":", "\n", "            ", "for", "cls_ind", "in", "all_bboxes", "[", "image_id", "]", ":", "\n", "                ", "category_id", "=", "self", ".", "_valid_ids", "[", "cls_ind", "-", "1", "]", "\n", "for", "bbox", "in", "all_bboxes", "[", "image_id", "]", "[", "cls_ind", "]", ":", "\n", "                    ", "bbox", "[", "2", "]", "-=", "bbox", "[", "0", "]", "\n", "bbox", "[", "3", "]", "-=", "bbox", "[", "1", "]", "\n", "score", "=", "bbox", "[", "4", "]", "\n", "bbox_out", "=", "list", "(", "map", "(", "self", ".", "_to_float", ",", "bbox", "[", "0", ":", "4", "]", ")", ")", "\n", "\n", "detection", "=", "{", "\n", "\"image_id\"", ":", "int", "(", "image_id", ")", ",", "\n", "\"category_id\"", ":", "int", "(", "category_id", ")", ",", "\n", "\"bbox\"", ":", "bbox_out", ",", "\n", "\"score\"", ":", "float", "(", "\"{:.2f}\"", ".", "format", "(", "score", ")", ")", "\n", "}", "\n", "detections", ".", "append", "(", "detection", ")", "\n", "", "", "", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native.__len__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native.save_results": [[106, 109], ["json.dump", "indoor_render512native.IndoorRender512Native.convert_eval_format", "open"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.convert_eval_format"], ["", "def", "save_results", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "json", ".", "dump", "(", "self", ".", "convert_eval_format", "(", "results", ")", ",", "\n", "open", "(", "'{}/results.json'", ".", "format", "(", "save_dir", ")", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native.run_eval": [[110, 117], ["indoor_render512native.IndoorRender512Native.save_results", "indoor_render512native.IndoorRender512Native.coco.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.save_results"], ["", "def", "run_eval", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_results", "(", "results", ",", "save_dir", ")", "\n", "coco_dets", "=", "self", ".", "coco", ".", "loadRes", "(", "'{}/results.json'", ".", "format", "(", "save_dir", ")", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "coco", ",", "coco_dets", ",", "\"bbox\"", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native.run_censor_eval": [[119, 149], ["indoor_render512native.IndoorRender512Native.save_results", "numpy.arange", "print", "print", "os.path.join", "indoor_render512native.IndoorRender512Native.plot_precision_recall_curve", "print", "print", "print", "os.path.join", "indoor_render512native.IndoorRender512Native.plot_roc_curve", "print", "print", "indoor_render512native.IndoorRender512Native.calculate_precision_recall_at_thresh", "prec_list.append", "recall_list.append", "true_pos_rate_list.append", "false_pos_rate_list.append"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.save_results", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_precision_recall_curve", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_roc_curve", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.calculate_precision_recall_at_thresh"], ["", "def", "run_censor_eval", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_results", "(", "results", ",", "save_dir", ")", "\n", "\n", "thresh_list", "=", "np", ".", "arange", "(", "0.05", ",", "1.0", ",", "0.05", ")", "\n", "prec_list", "=", "[", "]", "\n", "recall_list", "=", "[", "]", "\n", "true_pos_rate_list", "=", "[", "1.0", "]", "\n", "false_pos_rate_list", "=", "[", "1.0", "]", "\n", "for", "thresh", "in", "thresh_list", ":", "\n", "            ", "print", "(", "\"Working on thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "=", "self", ".", "calculate_precision_recall_at_thresh", "(", "results", ",", "thresh", ")", "\n", "prec_list", ".", "append", "(", "precision", ")", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "true_pos_rate_list", ".", "append", "(", "true_pos_rate", ")", "\n", "false_pos_rate_list", ".", "append", "(", "false_pos_rate", ")", "\n", "\n", "# draw precision-recall curve and calculate auc", "\n", "", "print", "(", "\"precision list: {}\"", ".", "format", "(", "prec_list", ")", ")", "\n", "print", "(", "\"recall list: {}\"", ".", "format", "(", "recall_list", ")", ")", "\n", "fig_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"prec-recall-curve.png\"", ")", "\n", "self", ".", "plot_precision_recall_curve", "(", "fig_save_path", ",", "prec_list", ",", "recall_list", ")", "\n", "print", "(", "\"precision-recall-curve saved to {}\"", ".", "format", "(", "fig_save_path", ")", ")", "\n", "\n", "# draw ROC-curve", "\n", "print", "(", "\"true_pos_rate_list: {}\"", ".", "format", "(", "true_pos_rate_list", ")", ")", "\n", "print", "(", "\"false_pos_rate_list: {}\"", ".", "format", "(", "false_pos_rate_list", ")", ")", "\n", "fig_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"ROC-curve.png\"", ")", "\n", "self", ".", "plot_roc_curve", "(", "fig_save_path", ",", "true_pos_rate_list", ",", "false_pos_rate_list", ")", "\n", "print", "(", "\"ROC-curve saved to {}\"", ".", "format", "(", "fig_save_path", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native.calculate_precision_recall_at_thresh": [[151, 205], ["indoor_render512native.IndoorRender512Native.coco.getImgIds", "len", "print", "print", "print", "print", "print", "print", "print", "indoor_render512native.IndoorRender512Native.coco.getAnnIds", "indoor_render512native.IndoorRender512Native.coco.loadAnns"], "methods", ["None"], ["", "def", "calculate_precision_recall_at_thresh", "(", "self", ",", "results", ",", "thresh", ")", ":", "\n", "        ", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "true_pos", ",", "true_neg", ",", "false_pos", ",", "false_neg", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "num_imgs", "=", "len", "(", "img_ids", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "''' Determine ground truth'''", "\n", "censor_gt", "=", "False", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "#print(\"anns = {}\".format(anns))", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "cat_id", "=", "ann", "[", "\"category_id\"", "]", "\n", "if", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                    ", "censor_gt", "=", "True", "\n", "\n", "", "", "''' Determine prediction '''", "\n", "censor_pred", "=", "False", "\n", "preds_all_cls", "=", "results", "[", "img_id", "]", "\n", "for", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "                    ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "#if conf > self.id_to_thresh[cat_id]:   # using class-specific thresholds (during inference)", "\n", "if", "conf", ">", "thresh", ":", "\n", "                        ", "censor_pred", "=", "True", "\n", "\n", "", "", "", "''' Compare GT and Pred '''", "\n", "if", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "true_pos", "+=", "1", "\n", "", "elif", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "false_neg", "+=", "1", "\n", "", "elif", "not", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "true_neg", "+=", "1", "\n", "", "elif", "not", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "false_pos", "+=", "1", "\n", "\n", "", "", "''' metrics '''", "\n", "precision", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_pos", ")", "if", "true_pos", "+", "false_pos", "!=", "0", "else", "0", "\n", "recall", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_neg", ")", "if", "true_pos", "+", "false_neg", "!=", "0", "else", "0", "\n", "censor_rate", "=", "1.0", "*", "(", "true_pos", "+", "false_pos", ")", "/", "num_imgs", "\n", "\n", "true_pos_rate", "=", "recall", "\n", "false_pos_rate", "=", "1.0", "*", "false_pos", "/", "(", "false_pos", "+", "true_neg", ")", "if", "false_pos", "+", "true_neg", "!=", "0", "else", "0", "# fallout", "\n", "\n", "print", "(", "\"With thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "print", "(", "\"TP: {}, FP: {}, TN: {}, FN: {}\"", ".", "format", "(", "true_pos", ",", "false_pos", ",", "true_neg", ",", "false_neg", ")", ")", "\n", "print", "(", "\"Precision: {}\"", ".", "format", "(", "precision", ")", ")", "\n", "print", "(", "\"Recall / sensitivity: {}\"", ".", "format", "(", "recall", ")", ")", "\n", "print", "(", "\"Censor rate: {}\"", ".", "format", "(", "censor_rate", ")", ")", "\n", "print", "(", "\"True positive rate = recall\"", ")", "\n", "print", "(", "\"False positive rate: {}\"", ".", "format", "(", "false_pos_rate", ")", ")", "\n", "return", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native.plot_precision_recall_curve": [[207, 221], ["metrics.auc", "plt.clf", "plt.plot", "plt.text", "plt.xlabel", "plt.ylabel", "plt.ylim", "plt.xlim", "plt.title", "plt.legend", "plt.savefig"], "methods", ["None"], ["", "def", "plot_precision_recall_curve", "(", "self", ",", "fig_save_path", ",", "prec_list", ",", "recall_list", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "recall_list", ",", "prec_list", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "recall_list", ",", "prec_list", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.5", ",", "'AUC(%s)'", "%", "(", "auc_score", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "xlabel", "(", "'Recall'", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'Precision-Recall'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native.plot_roc_curve": [[223, 237], ["metrics.auc", "plt.clf", "plt.plot", "plt.text", "plt.xlabel", "plt.ylabel", "plt.ylim", "plt.xlim", "plt.title", "plt.legend", "plt.savefig"], "methods", ["None"], ["", "def", "plot_roc_curve", "(", "self", ",", "fig_save_path", ",", "true_pos_rate_list", ",", "false_pos_rate_list", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "false_pos_rate_list", ",", "true_pos_rate_list", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "false_pos_rate_list", ",", "true_pos_rate_list", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.5", ",", "'AUC(%s)'", "%", "(", "auc_score", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "xlabel", "(", "'False positive rate'", ")", "\n", "plt", ".", "ylabel", "(", "'True positive rate'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'ROC curve'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native.batch_plot_precision_recall_curves": [[239, 280], ["plt.clf", "plt.subplots", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.set_ylim", "ax.set_xlim", "ax.set_title", "ax.legend", "ax.legend.get_frame().set_facecolor", "plt.savefig", "metrics.auc", "ax.plot", "ax.legend.get_frame", "len", "len"], "methods", ["None"], ["", "def", "batch_plot_precision_recall_curves", "(", "self", ",", "fig_save_path", ",", "curve_lists", ")", ":", "\n", "        ", "'''\n        :param curve_lists: a list of dictionaries, e.g., [dict_1, dict_2], where\n                            dict_1 = { 'model_name': model_name,\n                                       'prec_list': prec_list,\n                                       'recall_list': recall_list}\n        :return:\n        '''", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "\n", "colors", "=", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'c'", ",", "'m'", ",", "'y'", ",", "'k'", "]", "\n", "line_styles", "=", "[", "'-'", ",", "'--'", ",", "'-.'", ",", "':'", ",", "''", "]", "\n", "plt", ".", "clf", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "for", "i", ",", "curve", "in", "enumerate", "(", "curve_lists", ")", ":", "\n", "            ", "recall_list", "=", "curve", "[", "'recall_list'", "]", "\n", "prec_list", "=", "curve", "[", "'prec_list'", "]", "\n", "model_name", "=", "curve", "[", "'model_name'", "]", "\n", "\n", "color", "=", "colors", "[", "i", "%", "len", "(", "colors", ")", "]", "\n", "line_style", "=", "line_styles", "[", "i", "%", "len", "(", "line_styles", ")", "]", "\n", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "recall_list", ",", "prec_list", ")", "\n", "label_str", "=", "'{:s}(AUC): {:03.2f}'", ".", "format", "(", "model_name", ",", "auc_score", ")", "\n", "\n", "ax", ".", "plot", "(", "recall_list", ",", "prec_list", ",", "color", "=", "color", ",", "linestyle", "=", "line_style", ",", "linewidth", "=", "2.0", ",", "label", "=", "label_str", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "'Recall'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Precision'", ")", "\n", "ax", ".", "set_ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "ax", ".", "set_title", "(", "'Precision-Recall'", ")", "\n", "legend", "=", "ax", ".", "legend", "(", "loc", "=", "'upper right'", ",", "shadow", "=", "True", ",", "fontsize", "=", "'x-large'", ")", "\n", "\n", "# Put a nicer background color on the legend.", "\n", "legend", ".", "get_frame", "(", ")", ".", "set_facecolor", "(", "'C0'", ")", "\n", "\n", "# save figure", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native.IndoorRender512Native.export_qualitative_results": [[282, 382], ["os.path.join", "indoor_render512native.IndoorRender512Native.coco.getImgIds", "len", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "remove_files_in_folder", "print", "os.path.join", "cv2.imread", "indoor_render512native.IndoorRender512Native.coco.getAnnIds", "indoor_render512native.IndoorRender512Native.coco.loadAnns", "draw_bboxes_on_img", "vis_censor", "os.path.join", "create_folder", "os.path.join", "cv2.imwrite", "indoor_render512native.IndoorRender512Native.coco.loadImgs", "gt_pos_cat_list.append", "pred_pos_cat_list.append"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.remove_files_in_folder", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.draw_bboxes_on_img", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.vis_censor", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.create_folder"], ["", "def", "export_qualitative_results", "(", "self", ",", "results", ",", "split", ",", "thresh", ")", ":", "\n", "        ", "from", "utils", ".", "utils_vis_bbox", "import", "draw_bboxes_on_img", "\n", "from", "utils", ".", "utils_vis_censor", "import", "vis_censor", "\n", "from", "utils", ".", "utils_io_folder", "import", "create_folder", ",", "remove_files_in_folder", "\n", "import", "cv2", "\n", "\n", "# clean previous results", "\n", "img_output_parent_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"qualitative\"", ",", "split", ")", "\n", "for", "extra_str", "in", "[", "\"TP\"", ",", "\"TN\"", ",", "\"FP\"", ",", "\"FN\"", "]", ":", "\n", "            ", "img_output_folder_path", "=", "os", ".", "path", ".", "join", "(", "img_output_parent_folder", ",", "extra_str", ")", "\n", "remove_files_in_folder", "(", "img_output_folder_path", ")", "\n", "\n", "", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "true_pos", ",", "true_neg", ",", "false_pos", ",", "false_neg", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "num_imgs", "=", "len", "(", "img_ids", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "''' Load image '''", "\n", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "print", "(", "\"filename = {}\"", ".", "format", "(", "file_name", ")", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "file_name", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "''' Determine ground truth'''", "\n", "censor_gt", "=", "False", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "gt_pos_cat_list", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "cat_id", "=", "ann", "[", "\"category_id\"", "]", "\n", "if", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                    ", "censor_gt", "=", "True", "\n", "if", "self", ".", "class_name", "[", "cat_id", "]", "not", "in", "gt_pos_cat_list", ":", "\n", "                        ", "gt_pos_cat_list", ".", "append", "(", "self", ".", "class_name", "[", "cat_id", "]", ")", "\n", "\n", "", "", "", "''' Determine prediction '''", "\n", "censor_pred", "=", "False", "\n", "preds_all_cls", "=", "results", "[", "img_id", "]", "\n", "pred_pos_cat_list", "=", "[", "]", "\n", "for", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "                    ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "#if conf > self.id_to_thresh[cat_id]:   # using class-specific thresholds (during inference)", "\n", "if", "conf", ">", "thresh", ":", "\n", "                        ", "censor_pred", "=", "True", "\n", "if", "self", ".", "class_name", "[", "cat_id", "]", "not", "in", "pred_pos_cat_list", ":", "\n", "                            ", "pred_pos_cat_list", ".", "append", "(", "self", ".", "class_name", "[", "cat_id", "]", ")", "\n", "\n", "", "", "", "", "''' Compare GT and Pred '''", "\n", "if", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "true_pos", "+=", "1", "\n", "extra_str", "=", "\"TP\"", "\n", "", "elif", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "false_neg", "+=", "1", "\n", "extra_str", "=", "\"FN\"", "\n", "", "elif", "not", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "true_neg", "+=", "1", "\n", "extra_str", "=", "\"TN\"", "\n", "", "elif", "not", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "false_pos", "+=", "1", "\n", "extra_str", "=", "\"FP\"", "\n", "\n", "", "''' visualize results for this image '''", "\n", "# add bboxes", "\n", "img", "=", "draw_bboxes_on_img", "(", "img", ",", "preds_all_cls", ")", "\n", "\n", "# add censor info", "\n", "gt_censor_str", "=", "\"YES\"", "if", "censor_gt", "else", "\"NO\"", "\n", "pred_censor_str", "=", "\"YES\"", "if", "censor_pred", "else", "\"NO\"", "\n", "gt_cls_str", "=", "', '", ".", "join", "(", "gt_pos_cat_list", ")", "\n", "pred_cls_str", "=", "', '", ".", "join", "(", "pred_pos_cat_list", ")", "\n", "img", "=", "vis_censor", "(", "img", ",", "\n", "gt_censor_str", ",", "gt_cls_str", ",", "\n", "pred_censor_str", ",", "pred_cls_str", ",", "\n", "extra_str", ")", "\n", "\n", "img_output_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"qualitative\"", ",", "split", ",", "extra_str", ")", "\n", "create_folder", "(", "img_output_folder", ")", "\n", "img_output_path", "=", "os", ".", "path", ".", "join", "(", "img_output_folder", ",", "file_name", ")", "\n", "cv2", ".", "imwrite", "(", "img_output_path", ",", "img", ")", "\n", "\n", "\n", "", "''' metrics '''", "\n", "precision", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_pos", ")", "\n", "recall", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_neg", ")", "\n", "censor_rate", "=", "1.0", "*", "(", "true_pos", "+", "false_pos", ")", "/", "num_imgs", "\n", "\n", "true_pos_rate", "=", "recall", "\n", "false_pos_rate", "=", "1.0", "*", "false_pos", "/", "(", "false_pos", "+", "true_neg", ")", "# fallout", "\n", "\n", "print", "(", "\"With thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "print", "(", "\"TP: {}, FP: {}, TN: {}, FN: {}\"", ".", "format", "(", "true_pos", ",", "false_pos", ",", "true_neg", ",", "false_neg", ")", ")", "\n", "print", "(", "\"Precision: {}\"", ".", "format", "(", "precision", ")", ")", "\n", "print", "(", "\"Recall / sensitivity: {}\"", ".", "format", "(", "recall", ")", ")", "\n", "print", "(", "\"Censor rate: {}\"", ".", "format", "(", "censor_rate", ")", ")", "\n", "print", "(", "\"True positive rate = recall\"", ")", "\n", "print", "(", "\"False positive rate: {}\"", ".", "format", "(", "false_pos_rate", ")", ")", "\n", "return", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.__init__": [[23, 78], ["torch.Dataset.__init__", "os.path.join", "os.path.join", "numpy.random.RandomState", "numpy.array", "numpy.array", "pycocotools.COCO", "indoor.Indoor.coco.getImgIds", "len", "print", "os.path.join", "os.path.join", "range", "range", "enumerate", "range", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "split", ")", ":", "\n", "        ", "super", "(", "Indoor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_dir", ",", "'indoor'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'images'", ")", "\n", "\n", "if", "opt", ".", "scarcity", "==", "'55'", ":", "\n", "# 50:50 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}.json'", ".", "format", "(", "split", ")", ")", "\n", "", "elif", "opt", ".", "scarcity", "==", "'37'", ":", "\n", "# 30:70 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}_37.json'", ".", "format", "(", "split", ")", ")", "\n", "", "elif", "opt", ".", "scarcity", "==", "'19'", ":", "\n", "# 10:90 split", "\n", "            ", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'{}_19.json'", ".", "format", "(", "split", ")", ")", "\n", "\n", "", "self", ".", "max_objs", "=", "128", "\n", "self", ".", "class_name", "=", "[", "\n", "'__background__'", ",", "\n", "'chair'", ",", "# 1", "\n", "'clock'", ",", "# 2", "\n", "'exit'", ",", "# 3", "\n", "'fireextinguisher'", ",", "# 4", "\n", "'printer'", ",", "# 5", "\n", "'screen'", ",", "# 6", "\n", "'trashbin'", "]", "# 7", "\n", "\n", "self", ".", "pos_ids", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", "# remove knife(kitchen) from weapon", "\n", "self", ".", "neg_ids", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "class_name", ")", ")", "if", "i", "not", "in", "self", ".", "pos_ids", "]", "\n", "self", ".", "ignore_cls_list", "=", "[", "]", "# do not train with these classes", "\n", "self", ".", "id_to_thresh", "=", "{", "}", "\n", "for", "pos_id", "in", "self", ".", "pos_ids", ":", "\n", "            ", "self", ".", "id_to_thresh", "[", "pos_id", "]", "=", "0.2", "\n", "\n", "#self._valid_ids = [i for i in range(1, self.num_classes+1) if i not in self.ignore_cls_list]", "\n", "", "self", ".", "_valid_ids", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", "\n", "self", ".", "cat_ids", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "_valid_ids", ")", "}", "\n", "self", ".", "voc_color", "=", "[", "(", "v", "//", "32", "*", "64", "+", "64", ",", "(", "v", "//", "8", ")", "%", "4", "*", "64", ",", "v", "%", "8", "*", "32", ")", "for", "v", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", "\n", "self", ".", "_data_rng", "=", "np", ".", "random", ".", "RandomState", "(", "123", ")", "\n", "self", ".", "_eig_val", "=", "np", ".", "array", "(", "[", "0.2141788", ",", "0.01817699", ",", "0.00341571", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_eig_vec", "=", "np", ".", "array", "(", "[", "\n", "[", "-", "0.58752847", ",", "-", "0.69563484", ",", "0.41340352", "]", ",", "\n", "[", "-", "0.5832747", ",", "0.00994535", ",", "-", "0.81221408", "]", ",", "\n", "[", "-", "0.56089297", ",", "0.71832671", ",", "0.41158938", "]", "\n", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "coco", "=", "coco", ".", "COCO", "(", "self", ".", "annot_path", ")", "\n", "self", ".", "images", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "images", ")", "\n", "\n", "print", "(", "'Loaded {} {} samples'", ".", "format", "(", "split", ",", "self", ".", "num_samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor._to_float": [[79, 81], ["float"], "methods", ["None"], ["", "def", "_to_float", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "float", "(", "\"{:.2f}\"", ".", "format", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.convert_eval_format": [[82, 102], ["list", "detections.append", "map", "int", "int", "float"], "methods", ["None"], ["", "def", "convert_eval_format", "(", "self", ",", "all_bboxes", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "        ", "detections", "=", "[", "]", "\n", "for", "image_id", "in", "all_bboxes", ":", "\n", "            ", "for", "cls_ind", "in", "all_bboxes", "[", "image_id", "]", ":", "\n", "                ", "category_id", "=", "self", ".", "_valid_ids", "[", "cls_ind", "-", "1", "]", "\n", "for", "bbox", "in", "all_bboxes", "[", "image_id", "]", "[", "cls_ind", "]", ":", "\n", "                    ", "bbox", "[", "2", "]", "-=", "bbox", "[", "0", "]", "\n", "bbox", "[", "3", "]", "-=", "bbox", "[", "1", "]", "\n", "score", "=", "bbox", "[", "4", "]", "\n", "bbox_out", "=", "list", "(", "map", "(", "self", ".", "_to_float", ",", "bbox", "[", "0", ":", "4", "]", ")", ")", "\n", "\n", "detection", "=", "{", "\n", "\"image_id\"", ":", "int", "(", "image_id", ")", ",", "\n", "\"category_id\"", ":", "int", "(", "category_id", ")", ",", "\n", "\"bbox\"", ":", "bbox_out", ",", "\n", "\"score\"", ":", "float", "(", "\"{:.2f}\"", ".", "format", "(", "score", ")", ")", "\n", "}", "\n", "detections", ".", "append", "(", "detection", ")", "\n", "", "", "", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.__len__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.save_results": [[106, 109], ["json.dump", "indoor.Indoor.convert_eval_format", "open"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.convert_eval_format"], ["", "def", "save_results", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "json", ".", "dump", "(", "self", ".", "convert_eval_format", "(", "results", ")", ",", "\n", "open", "(", "'{}/results.json'", ".", "format", "(", "save_dir", ")", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.run_eval": [[110, 117], ["indoor.Indoor.save_results", "indoor.Indoor.coco.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.save_results"], ["", "def", "run_eval", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_results", "(", "results", ",", "save_dir", ")", "\n", "coco_dets", "=", "self", ".", "coco", ".", "loadRes", "(", "'{}/results.json'", ".", "format", "(", "save_dir", ")", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "coco", ",", "coco_dets", ",", "\"bbox\"", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.run_censor_eval": [[119, 149], ["indoor.Indoor.save_results", "numpy.arange", "print", "print", "os.path.join", "indoor.Indoor.plot_precision_recall_curve", "print", "print", "print", "os.path.join", "indoor.Indoor.plot_roc_curve", "print", "print", "indoor.Indoor.calculate_precision_recall_at_thresh", "prec_list.append", "recall_list.append", "true_pos_rate_list.append", "false_pos_rate_list.append"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.save_results", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_precision_recall_curve", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_roc_curve", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.calculate_precision_recall_at_thresh"], ["", "def", "run_censor_eval", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_results", "(", "results", ",", "save_dir", ")", "\n", "\n", "thresh_list", "=", "np", ".", "arange", "(", "0.05", ",", "1.0", ",", "0.05", ")", "\n", "prec_list", "=", "[", "]", "\n", "recall_list", "=", "[", "]", "\n", "true_pos_rate_list", "=", "[", "1.0", "]", "\n", "false_pos_rate_list", "=", "[", "1.0", "]", "\n", "for", "thresh", "in", "thresh_list", ":", "\n", "            ", "print", "(", "\"Working on thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "=", "self", ".", "calculate_precision_recall_at_thresh", "(", "results", ",", "thresh", ")", "\n", "prec_list", ".", "append", "(", "precision", ")", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "true_pos_rate_list", ".", "append", "(", "true_pos_rate", ")", "\n", "false_pos_rate_list", ".", "append", "(", "false_pos_rate", ")", "\n", "\n", "# draw precision-recall curve and calculate auc", "\n", "", "print", "(", "\"precision list: {}\"", ".", "format", "(", "prec_list", ")", ")", "\n", "print", "(", "\"recall list: {}\"", ".", "format", "(", "recall_list", ")", ")", "\n", "fig_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"prec-recall-curve.png\"", ")", "\n", "self", ".", "plot_precision_recall_curve", "(", "fig_save_path", ",", "prec_list", ",", "recall_list", ")", "\n", "print", "(", "\"precision-recall-curve saved to {}\"", ".", "format", "(", "fig_save_path", ")", ")", "\n", "\n", "# draw ROC-curve", "\n", "print", "(", "\"true_pos_rate_list: {}\"", ".", "format", "(", "true_pos_rate_list", ")", ")", "\n", "print", "(", "\"false_pos_rate_list: {}\"", ".", "format", "(", "false_pos_rate_list", ")", ")", "\n", "fig_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"ROC-curve.png\"", ")", "\n", "self", ".", "plot_roc_curve", "(", "fig_save_path", ",", "true_pos_rate_list", ",", "false_pos_rate_list", ")", "\n", "print", "(", "\"ROC-curve saved to {}\"", ".", "format", "(", "fig_save_path", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.calculate_precision_recall_at_thresh": [[151, 205], ["indoor.Indoor.coco.getImgIds", "len", "print", "print", "print", "print", "print", "print", "print", "indoor.Indoor.coco.getAnnIds", "indoor.Indoor.coco.loadAnns"], "methods", ["None"], ["", "def", "calculate_precision_recall_at_thresh", "(", "self", ",", "results", ",", "thresh", ")", ":", "\n", "        ", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "true_pos", ",", "true_neg", ",", "false_pos", ",", "false_neg", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "num_imgs", "=", "len", "(", "img_ids", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "''' Determine ground truth'''", "\n", "censor_gt", "=", "False", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "#print(\"anns = {}\".format(anns))", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "cat_id", "=", "ann", "[", "\"category_id\"", "]", "\n", "if", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                    ", "censor_gt", "=", "True", "\n", "\n", "", "", "''' Determine prediction '''", "\n", "censor_pred", "=", "False", "\n", "preds_all_cls", "=", "results", "[", "img_id", "]", "\n", "for", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "                    ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "#if conf > self.id_to_thresh[cat_id]:   # using class-specific thresholds (during inference)", "\n", "if", "conf", ">", "thresh", ":", "\n", "                        ", "censor_pred", "=", "True", "\n", "\n", "", "", "", "''' Compare GT and Pred '''", "\n", "if", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "true_pos", "+=", "1", "\n", "", "elif", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "false_neg", "+=", "1", "\n", "", "elif", "not", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "true_neg", "+=", "1", "\n", "", "elif", "not", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "false_pos", "+=", "1", "\n", "\n", "", "", "''' metrics '''", "\n", "precision", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_pos", ")", "if", "true_pos", "+", "false_pos", "!=", "0", "else", "0", "\n", "recall", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_neg", ")", "if", "true_pos", "+", "false_neg", "!=", "0", "else", "0", "\n", "censor_rate", "=", "1.0", "*", "(", "true_pos", "+", "false_pos", ")", "/", "num_imgs", "\n", "\n", "true_pos_rate", "=", "recall", "\n", "false_pos_rate", "=", "1.0", "*", "false_pos", "/", "(", "false_pos", "+", "true_neg", ")", "if", "false_pos", "+", "true_neg", "!=", "0", "else", "0", "# fallout", "\n", "\n", "print", "(", "\"With thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "print", "(", "\"TP: {}, FP: {}, TN: {}, FN: {}\"", ".", "format", "(", "true_pos", ",", "false_pos", ",", "true_neg", ",", "false_neg", ")", ")", "\n", "print", "(", "\"Precision: {}\"", ".", "format", "(", "precision", ")", ")", "\n", "print", "(", "\"Recall / sensitivity: {}\"", ".", "format", "(", "recall", ")", ")", "\n", "print", "(", "\"Censor rate: {}\"", ".", "format", "(", "censor_rate", ")", ")", "\n", "print", "(", "\"True positive rate = recall\"", ")", "\n", "print", "(", "\"False positive rate: {}\"", ".", "format", "(", "false_pos_rate", ")", ")", "\n", "return", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_precision_recall_curve": [[207, 221], ["metrics.auc", "plt.clf", "plt.plot", "plt.text", "plt.xlabel", "plt.ylabel", "plt.ylim", "plt.xlim", "plt.title", "plt.legend", "plt.savefig"], "methods", ["None"], ["", "def", "plot_precision_recall_curve", "(", "self", ",", "fig_save_path", ",", "prec_list", ",", "recall_list", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "recall_list", ",", "prec_list", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "recall_list", ",", "prec_list", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.5", ",", "'AUC(%s)'", "%", "(", "auc_score", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "xlabel", "(", "'Recall'", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'Precision-Recall'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.plot_roc_curve": [[223, 237], ["metrics.auc", "plt.clf", "plt.plot", "plt.text", "plt.xlabel", "plt.ylabel", "plt.ylim", "plt.xlim", "plt.title", "plt.legend", "plt.savefig"], "methods", ["None"], ["", "def", "plot_roc_curve", "(", "self", ",", "fig_save_path", ",", "true_pos_rate_list", ",", "false_pos_rate_list", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "false_pos_rate_list", ",", "true_pos_rate_list", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "false_pos_rate_list", ",", "true_pos_rate_list", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.5", ",", "'AUC(%s)'", "%", "(", "auc_score", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "xlabel", "(", "'False positive rate'", ")", "\n", "plt", ".", "ylabel", "(", "'True positive rate'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'ROC curve'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.batch_plot_precision_recall_curves": [[239, 280], ["plt.clf", "plt.subplots", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.set_ylim", "ax.set_xlim", "ax.set_title", "ax.legend", "ax.legend.get_frame().set_facecolor", "plt.savefig", "metrics.auc", "ax.plot", "ax.legend.get_frame", "len", "len"], "methods", ["None"], ["", "def", "batch_plot_precision_recall_curves", "(", "self", ",", "fig_save_path", ",", "curve_lists", ")", ":", "\n", "        ", "'''\n        :param curve_lists: a list of dictionaries, e.g., [dict_1, dict_2], where\n                            dict_1 = { 'model_name': model_name,\n                                       'prec_list': prec_list,\n                                       'recall_list': recall_list}\n        :return:\n        '''", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "sklearn", "import", "metrics", "\n", "\n", "colors", "=", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'c'", ",", "'m'", ",", "'y'", ",", "'k'", "]", "\n", "line_styles", "=", "[", "'-'", ",", "'--'", ",", "'-.'", ",", "':'", ",", "''", "]", "\n", "plt", ".", "clf", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "for", "i", ",", "curve", "in", "enumerate", "(", "curve_lists", ")", ":", "\n", "            ", "recall_list", "=", "curve", "[", "'recall_list'", "]", "\n", "prec_list", "=", "curve", "[", "'prec_list'", "]", "\n", "model_name", "=", "curve", "[", "'model_name'", "]", "\n", "\n", "color", "=", "colors", "[", "i", "%", "len", "(", "colors", ")", "]", "\n", "line_style", "=", "line_styles", "[", "i", "%", "len", "(", "line_styles", ")", "]", "\n", "\n", "auc_score", "=", "metrics", ".", "auc", "(", "recall_list", ",", "prec_list", ")", "\n", "label_str", "=", "'{:s}(AUC): {:03.2f}'", ".", "format", "(", "model_name", ",", "auc_score", ")", "\n", "\n", "ax", ".", "plot", "(", "recall_list", ",", "prec_list", ",", "color", "=", "color", ",", "linestyle", "=", "line_style", ",", "linewidth", "=", "2.0", ",", "label", "=", "label_str", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "'Recall'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Precision'", ")", "\n", "ax", ".", "set_ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "ax", ".", "set_title", "(", "'Precision-Recall'", ")", "\n", "legend", "=", "ax", ".", "legend", "(", "loc", "=", "'upper right'", ",", "shadow", "=", "True", ",", "fontsize", "=", "'x-large'", ")", "\n", "\n", "# Put a nicer background color on the legend.", "\n", "legend", ".", "get_frame", "(", ")", ".", "set_facecolor", "(", "'C0'", ")", "\n", "\n", "# save figure", "\n", "plt", ".", "savefig", "(", "fig_save_path", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.export_qualitative_results": [[282, 382], ["os.path.join", "indoor.Indoor.coco.getImgIds", "len", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "remove_files_in_folder", "print", "os.path.join", "cv2.imread", "indoor.Indoor.coco.getAnnIds", "indoor.Indoor.coco.loadAnns", "draw_bboxes_on_img", "vis_censor", "os.path.join", "create_folder", "os.path.join", "cv2.imwrite", "indoor.Indoor.coco.loadImgs", "gt_pos_cat_list.append", "pred_pos_cat_list.append"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.remove_files_in_folder", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.draw_bboxes_on_img", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.vis_censor", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.utils_io_folder.create_folder"], ["", "def", "export_qualitative_results", "(", "self", ",", "results", ",", "split", ",", "thresh", ")", ":", "\n", "        ", "from", "utils", ".", "utils_vis_bbox", "import", "draw_bboxes_on_img", "\n", "from", "utils", ".", "utils_vis_censor", "import", "vis_censor", "\n", "from", "utils", ".", "utils_io_folder", "import", "create_folder", ",", "remove_files_in_folder", "\n", "import", "cv2", "\n", "\n", "# clean previous results", "\n", "img_output_parent_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"qualitative\"", ",", "split", ")", "\n", "for", "extra_str", "in", "[", "\"TP\"", ",", "\"TN\"", ",", "\"FP\"", ",", "\"FN\"", "]", ":", "\n", "            ", "img_output_folder_path", "=", "os", ".", "path", ".", "join", "(", "img_output_parent_folder", ",", "extra_str", ")", "\n", "remove_files_in_folder", "(", "img_output_folder_path", ")", "\n", "\n", "", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "true_pos", ",", "true_neg", ",", "false_pos", ",", "false_neg", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "num_imgs", "=", "len", "(", "img_ids", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "''' Load image '''", "\n", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "print", "(", "\"filename = {}\"", ".", "format", "(", "file_name", ")", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "file_name", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "''' Determine ground truth'''", "\n", "censor_gt", "=", "False", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "gt_pos_cat_list", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "cat_id", "=", "ann", "[", "\"category_id\"", "]", "\n", "if", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                    ", "censor_gt", "=", "True", "\n", "if", "self", ".", "class_name", "[", "cat_id", "]", "not", "in", "gt_pos_cat_list", ":", "\n", "                        ", "gt_pos_cat_list", ".", "append", "(", "self", ".", "class_name", "[", "cat_id", "]", ")", "\n", "\n", "", "", "", "''' Determine prediction '''", "\n", "censor_pred", "=", "False", "\n", "preds_all_cls", "=", "results", "[", "img_id", "]", "\n", "pred_pos_cat_list", "=", "[", "]", "\n", "for", "cat_id", "in", "self", ".", "pos_ids", ":", "\n", "                ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "                    ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "#if conf > self.id_to_thresh[cat_id]:   # using class-specific thresholds (during inference)", "\n", "if", "conf", ">", "thresh", ":", "\n", "                        ", "censor_pred", "=", "True", "\n", "if", "self", ".", "class_name", "[", "cat_id", "]", "not", "in", "pred_pos_cat_list", ":", "\n", "                            ", "pred_pos_cat_list", ".", "append", "(", "self", ".", "class_name", "[", "cat_id", "]", ")", "\n", "\n", "", "", "", "", "''' Compare GT and Pred '''", "\n", "if", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "true_pos", "+=", "1", "\n", "extra_str", "=", "\"TP\"", "\n", "", "elif", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "false_neg", "+=", "1", "\n", "extra_str", "=", "\"FN\"", "\n", "", "elif", "not", "censor_gt", "and", "not", "censor_pred", ":", "\n", "                ", "true_neg", "+=", "1", "\n", "extra_str", "=", "\"TN\"", "\n", "", "elif", "not", "censor_gt", "and", "censor_pred", ":", "\n", "                ", "false_pos", "+=", "1", "\n", "extra_str", "=", "\"FP\"", "\n", "\n", "", "''' visualize results for this image '''", "\n", "# add bboxes", "\n", "img", "=", "draw_bboxes_on_img", "(", "img", ",", "preds_all_cls", ")", "\n", "\n", "# add censor info", "\n", "gt_censor_str", "=", "\"YES\"", "if", "censor_gt", "else", "\"NO\"", "\n", "pred_censor_str", "=", "\"YES\"", "if", "censor_pred", "else", "\"NO\"", "\n", "gt_cls_str", "=", "', '", ".", "join", "(", "gt_pos_cat_list", ")", "\n", "pred_cls_str", "=", "', '", ".", "join", "(", "pred_pos_cat_list", ")", "\n", "img", "=", "vis_censor", "(", "img", ",", "\n", "gt_censor_str", ",", "gt_cls_str", ",", "\n", "pred_censor_str", ",", "pred_cls_str", ",", "\n", "extra_str", ")", "\n", "\n", "img_output_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_dir", ",", "\"qualitative\"", ",", "split", ",", "extra_str", ")", "\n", "create_folder", "(", "img_output_folder", ")", "\n", "img_output_path", "=", "os", ".", "path", ".", "join", "(", "img_output_folder", ",", "file_name", ")", "\n", "cv2", ".", "imwrite", "(", "img_output_path", ",", "img", ")", "\n", "\n", "\n", "", "''' metrics '''", "\n", "precision", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_pos", ")", "\n", "recall", "=", "1.0", "*", "true_pos", "/", "(", "true_pos", "+", "false_neg", ")", "\n", "censor_rate", "=", "1.0", "*", "(", "true_pos", "+", "false_pos", ")", "/", "num_imgs", "\n", "\n", "true_pos_rate", "=", "recall", "\n", "false_pos_rate", "=", "1.0", "*", "false_pos", "/", "(", "false_pos", "+", "true_neg", ")", "# fallout", "\n", "\n", "print", "(", "\"With thresh: {}\"", ".", "format", "(", "thresh", ")", ")", "\n", "print", "(", "\"TP: {}, FP: {}, TN: {}, FN: {}\"", ".", "format", "(", "true_pos", ",", "false_pos", ",", "true_neg", ",", "false_neg", ")", ")", "\n", "print", "(", "\"Precision: {}\"", ".", "format", "(", "precision", ")", ")", "\n", "print", "(", "\"Recall / sensitivity: {}\"", ".", "format", "(", "recall", ")", ")", "\n", "print", "(", "\"Censor rate: {}\"", ".", "format", "(", "censor_rate", ")", ")", "\n", "print", "(", "\"True positive rate = recall\"", ")", "\n", "print", "(", "\"False positive rate: {}\"", ".", "format", "(", "false_pos_rate", ")", ")", "\n", "return", "precision", ",", "recall", ",", "censor_rate", ",", "true_pos_rate", ",", "false_pos_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor.Indoor.load_images": [[384, 387], ["None"], "methods", ["None"], ["", "def", "load_images", "(", "self", ")", ":", "\n", "# TODO:", "\n", "        ", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native_centernet.CenterIndoorRender512NativeDataset._coco_box_to_bbox": [[12, 15], ["numpy.array"], "methods", ["None"], ["    ", "def", "_coco_box_to_bbox", "(", "self", ",", "box", ")", ":", "\n", "        ", "bbox", "=", "np", ".", "array", "(", "[", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "0", "]", "+", "box", "[", "2", "]", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native_centernet.CenterIndoorRender512NativeDataset._get_border": [[16, 21], ["None"], "methods", ["None"], ["", "def", "_get_border", "(", "self", ",", "border", ",", "size", ")", ":", "\n", "        ", "i", "=", "1", "\n", "while", "size", "-", "border", "//", "i", "<=", "border", "//", "i", ":", "\n", "            ", "i", "*=", "2", "\n", "", "return", "border", "//", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512native_centernet.CenterIndoorRender512NativeDataset.__getitem__": [[22, 149], ["os.path.join", "indoor_render512native_centernet.CenterIndoorRender512NativeDataset.coco.getAnnIds", "indoor_render512native_centernet.CenterIndoorRender512NativeDataset.coco.loadAnns", "min", "cv2.imread", "numpy.array", "utils.image.get_affine_transform", "cv2.warpAffine", "inp.transpose.transpose.transpose", "utils.image.get_affine_transform", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "numpy.array", "numpy.random.random", "inp.transpose.transpose.astype", "utils.image.color_aug", "indoor_render512native_centernet.CenterIndoorRender512NativeDataset._coco_box_to_bbox", "utils.image.affine_transform", "utils.image.affine_transform", "numpy.clip", "numpy.clip", "numpy.zeros.max", "numpy.concatenate", "ret.update", "ret.update", "indoor_render512native_centernet.CenterIndoorRender512NativeDataset.coco.loadImgs", "max", "indoor_render512native_centernet.CenterIndoorRender512NativeDataset._get_border", "indoor_render512native_centernet.CenterIndoorRender512NativeDataset._get_border", "numpy.random.randint", "numpy.random.randint", "print", "int", "utils.image.gaussian_radius", "max", "numpy.array", "numpy.array.astype", "draw_gaussian", "ret.update", "numpy.array", "numpy.zeros", "numpy.random.choice", "numpy.clip", "numpy.clip", "numpy.clip", "int", "utils.image.draw_dense_reg", "gt_det.append", "gt_det.append", "len", "numpy.arange", "math.ceil", "math.ceil", "numpy.zeros.max", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.color_aug", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._coco_box_to_bbox", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.gaussian_radius", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.draw_dense_reg"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "images", "[", "index", "]", "\n", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "file_name", ")", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "num_objs", "=", "min", "(", "len", "(", "anns", ")", ",", "self", ".", "max_objs", ")", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "height", ",", "width", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "img", ".", "shape", "[", "1", "]", "/", "2.", ",", "img", ".", "shape", "[", "0", "]", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "opt", ".", "keep_res", ":", "\n", "            ", "input_h", "=", "(", "height", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "input_w", "=", "(", "width", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "s", "=", "np", ".", "array", "(", "[", "input_w", ",", "input_h", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "max", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "*", "1.0", "\n", "input_h", ",", "input_w", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "\n", "", "flipped", "=", "False", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "not_rand_crop", ":", "\n", "                ", "s", "=", "s", "*", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "0.6", ",", "1.4", ",", "0.1", ")", ")", "\n", "w_border", "=", "self", ".", "_get_border", "(", "128", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "h_border", "=", "self", ".", "_get_border", "(", "128", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "c", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "w_border", ",", "high", "=", "img", ".", "shape", "[", "1", "]", "-", "w_border", ")", "\n", "c", "[", "1", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "h_border", ",", "high", "=", "img", ".", "shape", "[", "0", "]", "-", "h_border", ")", "\n", "", "else", ":", "\n", "                ", "sf", "=", "self", ".", "opt", ".", "scale", "\n", "cf", "=", "self", ".", "opt", ".", "shift", "\n", "c", "[", "0", "]", "+=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "cf", ",", "-", "2", "*", "cf", ",", "2", "*", "cf", ")", "\n", "c", "[", "1", "]", "+=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "cf", ",", "-", "2", "*", "cf", ",", "2", "*", "cf", ")", "\n", "s", "=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "sf", "+", "1", ",", "1", "-", "sf", ",", "1", "+", "sf", ")", "\n", "\n", "", "", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "opt", ".", "flip", ":", "\n", "            ", "flipped", "=", "True", "\n", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "c", "[", "0", "]", "=", "width", "-", "c", "[", "0", "]", "-", "1", "\n", "\n", "\n", "", "trans_input", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "input_w", ",", "input_h", "]", ")", "\n", "inp", "=", "cv2", ".", "warpAffine", "(", "img", ",", "trans_input", ",", "\n", "(", "input_w", ",", "input_h", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "inp", "=", "(", "inp", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", ")", "\n", "if", "self", ".", "split", "==", "'train'", "and", "not", "self", ".", "opt", ".", "no_color_aug", ":", "\n", "            ", "color_aug", "(", "self", ".", "_data_rng", ",", "inp", ",", "self", ".", "_eig_val", ",", "self", ".", "_eig_vec", ")", "# color augmentation", "\n", "", "inp", "=", "(", "inp", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "inp", "=", "inp", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# xyc -> cxy", "\n", "\n", "output_h", "=", "input_h", "//", "self", ".", "opt", ".", "down_ratio", "\n", "output_w", "=", "input_w", "//", "self", ".", "opt", ".", "down_ratio", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "trans_output", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "output_w", ",", "output_h", "]", ")", "\n", "\n", "hm", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "output_h", ",", "output_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "wh", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dense_wh", "=", "np", ".", "zeros", "(", "(", "2", ",", "output_h", ",", "output_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "reg", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ind", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "reg_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cat_spec_wh", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "num_classes", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cat_spec_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "num_classes", "*", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "draw_gaussian", "=", "draw_msra_gaussian", "if", "self", ".", "opt", ".", "mse_loss", "else", "draw_umich_gaussian", "\n", "\n", "gt_det", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "            ", "ann", "=", "anns", "[", "k", "]", "\n", "bbox", "=", "self", ".", "_coco_box_to_bbox", "(", "ann", "[", "'bbox'", "]", ")", "\n", "if", "'category_id'", "not", "in", "ann", ":", "\n", "                ", "print", "(", "\"ann: {}\"", ",", "ann", ")", "\n", "return", "KeyError", "\n", "", "else", ":", "\n", "                ", "cls_id", "=", "int", "(", "self", ".", "cat_ids", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "if", "cls_id", "in", "self", ".", "ignore_cls_list", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "if", "flipped", ":", "\n", "              ", "bbox", "[", "[", "0", ",", "2", "]", "]", "=", "width", "-", "bbox", "[", "[", "2", ",", "0", "]", "]", "-", "1", "\n", "\n", "", "bbox", "[", ":", "2", "]", "=", "affine_transform", "(", "bbox", "[", ":", "2", "]", ",", "trans_output", ")", "\n", "bbox", "[", "2", ":", "]", "=", "affine_transform", "(", "bbox", "[", "2", ":", "]", ",", "trans_output", ")", "\n", "bbox", "[", "[", "0", ",", "2", "]", "]", "=", "np", ".", "clip", "(", "bbox", "[", "[", "0", ",", "2", "]", "]", ",", "0", ",", "output_w", "-", "1", ")", "\n", "bbox", "[", "[", "1", ",", "3", "]", "]", "=", "np", ".", "clip", "(", "bbox", "[", "[", "1", ",", "3", "]", "]", ",", "0", ",", "output_h", "-", "1", ")", "\n", "h", ",", "w", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "\n", "\n", "if", "h", ">", "0", "and", "w", ">", "0", ":", "\n", "                ", "radius", "=", "gaussian_radius", "(", "(", "math", ".", "ceil", "(", "h", ")", ",", "math", ".", "ceil", "(", "w", ")", ")", ")", "\n", "radius", "=", "max", "(", "0", ",", "int", "(", "radius", ")", ")", "\n", "radius", "=", "self", ".", "opt", ".", "hm_gauss", "if", "self", ".", "opt", ".", "mse_loss", "else", "radius", "\n", "ct", "=", "np", ".", "array", "(", "[", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "/", "2", ",", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct_int", ",", "radius", ")", "\n", "wh", "[", "k", "]", "=", "1.", "*", "w", ",", "1.", "*", "h", "\n", "ind", "[", "k", "]", "=", "ct_int", "[", "1", "]", "*", "output_w", "+", "ct_int", "[", "0", "]", "\n", "reg", "[", "k", "]", "=", "ct", "-", "ct_int", "\n", "reg_mask", "[", "k", "]", "=", "1", "\n", "cat_spec_wh", "[", "k", ",", "cls_id", "*", "2", ":", "cls_id", "*", "2", "+", "2", "]", "=", "wh", "[", "k", "]", "\n", "cat_spec_mask", "[", "k", ",", "cls_id", "*", "2", ":", "cls_id", "*", "2", "+", "2", "]", "=", "1", "\n", "if", "self", ".", "opt", ".", "dense_wh", ":", "\n", "                    ", "draw_dense_reg", "(", "dense_wh", ",", "hm", ".", "max", "(", "axis", "=", "0", ")", ",", "ct_int", ",", "wh", "[", "k", "]", ",", "radius", ")", "\n", "", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                    ", "gt_det", ".", "append", "(", "[", "ct", "[", "0", "]", "-", "w", "/", "2", ",", "ct", "[", "1", "]", "-", "h", "/", "2", ",", "ct", "[", "0", "]", "+", "w", "/", "2", ",", "ct", "[", "1", "]", "+", "h", "/", "2", ",", "1", ",", "cls_id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "gt_det", ".", "append", "(", "[", "ct", "[", "0", "]", "-", "w", "/", "2", ",", "ct", "[", "1", "]", "-", "h", "/", "2", ",", "ct", "[", "0", "]", "+", "w", "/", "2", ",", "ct", "[", "1", "]", "+", "h", "/", "2", ",", "cls_id", "]", ")", "\n", "\n", "", "", "", "ret", "=", "{", "'input'", ":", "inp", ",", "'hm'", ":", "hm", ",", "'reg_mask'", ":", "reg_mask", ",", "'ind'", ":", "ind", ",", "'wh'", ":", "wh", "}", "\n", "if", "self", ".", "opt", ".", "dense_wh", ":", "\n", "            ", "hm_a", "=", "hm", ".", "max", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "dense_wh_mask", "=", "np", ".", "concatenate", "(", "[", "hm_a", ",", "hm_a", "]", ",", "axis", "=", "0", ")", "\n", "ret", ".", "update", "(", "{", "'dense_wh'", ":", "dense_wh", ",", "'dense_wh_mask'", ":", "dense_wh_mask", "}", ")", "\n", "del", "ret", "[", "'wh'", "]", "\n", "", "elif", "self", ".", "opt", ".", "cat_spec_wh", ":", "\n", "            ", "ret", ".", "update", "(", "{", "'cat_spec_wh'", ":", "cat_spec_wh", ",", "'cat_spec_mask'", ":", "cat_spec_mask", "}", ")", "\n", "del", "ret", "[", "'wh'", "]", "\n", "", "if", "self", ".", "opt", ".", "reg_offset", ":", "\n", "            ", "ret", ".", "update", "(", "{", "'reg'", ":", "reg", "}", ")", "\n", "", "if", "self", ".", "opt", ".", "debug", ">", "0", "or", "not", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "gt_det", "=", "np", ".", "array", "(", "gt_det", ",", "dtype", "=", "np", ".", "float32", ")", "if", "len", "(", "gt_det", ")", ">", "0", "else", "np", ".", "zeros", "(", "(", "1", ",", "6", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "'gt_det'", ":", "gt_det", ",", "'img_id'", ":", "img_id", "}", "\n", "ret", "[", "'meta'", "]", "=", "meta", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset._coco_box_to_bbox": [[12, 15], ["numpy.array"], "methods", ["None"], ["    ", "def", "_coco_box_to_bbox", "(", "self", ",", "box", ")", ":", "\n", "        ", "bbox", "=", "np", ".", "array", "(", "[", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "0", "]", "+", "box", "[", "2", "]", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset._get_border": [[16, 21], ["None"], "methods", ["None"], ["", "def", "_get_border", "(", "self", ",", "border", ",", "size", ")", ":", "\n", "        ", "i", "=", "1", "\n", "while", "size", "-", "border", "//", "i", "<=", "border", "//", "i", ":", "\n", "            ", "i", "*=", "2", "\n", "", "return", "border", "//", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset.__getitem__": [[22, 156], ["os.path.join", "indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset.coco.getAnnIds", "indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset.coco.loadAnns", "min", "cv2.imread", "numpy.array", "utils.image.get_affine_transform", "cv2.warpAffine", "inp.transpose.transpose.transpose", "utils.image.get_affine_transform", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "numpy.array", "numpy.random.random", "inp.transpose.transpose.astype", "utils.image.color_aug", "indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset._coco_box_to_bbox", "utils.image.affine_transform", "utils.image.affine_transform", "numpy.clip", "numpy.clip", "numpy.zeros.max", "numpy.concatenate", "ret.update", "ret.update", "indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset.coco.loadImgs", "max", "indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset._get_border", "indoor_render512pointSS_centernet.CenterIndoorRender512PointSSDataset._get_border", "numpy.random.randint", "numpy.random.randint", "print", "int", "utils.image.gaussian_radius", "max", "numpy.array", "numpy.array.astype", "draw_gaussian", "ret.update", "numpy.array", "numpy.zeros", "numpy.random.choice", "numpy.clip", "numpy.clip", "numpy.clip", "int", "utils.image.draw_dense_reg", "gt_det.append", "gt_det.append", "len", "numpy.arange", "math.ceil", "math.ceil", "numpy.zeros.max", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.color_aug", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._coco_box_to_bbox", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.gaussian_radius", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.draw_dense_reg"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "images", "[", "index", "]", "\n", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "file_name", ")", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "num_objs", "=", "min", "(", "len", "(", "anns", ")", ",", "self", ".", "max_objs", ")", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "height", ",", "width", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "img", ".", "shape", "[", "1", "]", "/", "2.", ",", "img", ".", "shape", "[", "0", "]", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "opt", ".", "keep_res", ":", "\n", "            ", "input_h", "=", "(", "height", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "input_w", "=", "(", "width", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "s", "=", "np", ".", "array", "(", "[", "input_w", ",", "input_h", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "max", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "*", "1.0", "\n", "input_h", ",", "input_w", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "\n", "", "flipped", "=", "False", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "not_rand_crop", ":", "\n", "                ", "s", "=", "s", "*", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "0.6", ",", "1.4", ",", "0.1", ")", ")", "\n", "w_border", "=", "self", ".", "_get_border", "(", "128", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "h_border", "=", "self", ".", "_get_border", "(", "128", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "c", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "w_border", ",", "high", "=", "img", ".", "shape", "[", "1", "]", "-", "w_border", ")", "\n", "c", "[", "1", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "h_border", ",", "high", "=", "img", ".", "shape", "[", "0", "]", "-", "h_border", ")", "\n", "", "else", ":", "\n", "                ", "sf", "=", "self", ".", "opt", ".", "scale", "\n", "cf", "=", "self", ".", "opt", ".", "shift", "\n", "c", "[", "0", "]", "+=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "cf", ",", "-", "2", "*", "cf", ",", "2", "*", "cf", ")", "\n", "c", "[", "1", "]", "+=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "cf", ",", "-", "2", "*", "cf", ",", "2", "*", "cf", ")", "\n", "s", "=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "sf", "+", "1", ",", "1", "-", "sf", ",", "1", "+", "sf", ")", "\n", "\n", "", "", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "opt", ".", "flip", ":", "\n", "            ", "flipped", "=", "True", "\n", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "c", "[", "0", "]", "=", "width", "-", "c", "[", "0", "]", "-", "1", "\n", "\n", "\n", "", "trans_input", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "input_w", ",", "input_h", "]", ")", "\n", "inp", "=", "cv2", ".", "warpAffine", "(", "img", ",", "trans_input", ",", "\n", "(", "input_w", ",", "input_h", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "inp", "=", "(", "inp", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", ")", "\n", "if", "self", ".", "split", "==", "'train'", "and", "not", "self", ".", "opt", ".", "no_color_aug", ":", "\n", "            ", "color_aug", "(", "self", ".", "_data_rng", ",", "inp", ",", "self", ".", "_eig_val", ",", "self", ".", "_eig_vec", ")", "# color augmentation", "\n", "", "inp", "=", "(", "inp", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "inp", "=", "inp", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# xyc -> cxy", "\n", "\n", "output_h", "=", "input_h", "//", "self", ".", "opt", ".", "down_ratio", "\n", "output_w", "=", "input_w", "//", "self", ".", "opt", ".", "down_ratio", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "trans_output", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "output_w", ",", "output_h", "]", ")", "\n", "\n", "hm", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "output_h", ",", "output_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "wh", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dense_wh", "=", "np", ".", "zeros", "(", "(", "2", ",", "output_h", ",", "output_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "reg", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ind", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "reg_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cat_spec_wh", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "num_classes", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cat_spec_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "num_classes", "*", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "draw_gaussian", "=", "draw_msra_gaussian", "if", "self", ".", "opt", ".", "mse_loss", "else", "draw_umich_gaussian", "\n", "\n", "gt_det", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "            ", "ann", "=", "anns", "[", "k", "]", "\n", "bbox", "=", "self", ".", "_coco_box_to_bbox", "(", "ann", "[", "'bbox'", "]", ")", "\n", "if", "'category_id'", "not", "in", "ann", ":", "\n", "                ", "print", "(", "\"ann: {}\"", ",", "ann", ")", "\n", "return", "KeyError", "\n", "", "else", ":", "\n", "                ", "cls_id", "=", "int", "(", "self", ".", "cat_ids", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "if", "cls_id", "in", "self", ".", "ignore_cls_list", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "if", "flipped", ":", "\n", "              ", "bbox", "[", "[", "0", ",", "2", "]", "]", "=", "width", "-", "bbox", "[", "[", "2", ",", "0", "]", "]", "-", "1", "\n", "\n", "", "bbox", "[", ":", "2", "]", "=", "affine_transform", "(", "bbox", "[", ":", "2", "]", ",", "trans_output", ")", "\n", "bbox", "[", "2", ":", "]", "=", "affine_transform", "(", "bbox", "[", "2", ":", "]", ",", "trans_output", ")", "\n", "bbox", "[", "[", "0", ",", "2", "]", "]", "=", "np", ".", "clip", "(", "bbox", "[", "[", "0", ",", "2", "]", "]", ",", "0", ",", "output_w", "-", "1", ")", "\n", "bbox", "[", "[", "1", ",", "3", "]", "]", "=", "np", ".", "clip", "(", "bbox", "[", "[", "1", ",", "3", "]", "]", ",", "0", ",", "output_h", "-", "1", ")", "\n", "h", ",", "w", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "\n", "\n", "if", "h", ">", "0", "and", "w", ">", "0", ":", "\n", "                ", "radius", "=", "gaussian_radius", "(", "(", "math", ".", "ceil", "(", "h", ")", ",", "math", ".", "ceil", "(", "w", ")", ")", ")", "\n", "radius", "=", "max", "(", "0", ",", "int", "(", "radius", ")", ")", "\n", "radius", "=", "self", ".", "opt", ".", "hm_gauss", "if", "self", ".", "opt", ".", "mse_loss", "else", "radius", "\n", "ct", "=", "np", ".", "array", "(", "[", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "/", "2", ",", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct_int", ",", "radius", ")", "\n", "wh", "[", "k", "]", "=", "1.", "*", "w", ",", "1.", "*", "h", "\n", "ind", "[", "k", "]", "=", "ct_int", "[", "1", "]", "*", "output_w", "+", "ct_int", "[", "0", "]", "\n", "reg", "[", "k", "]", "=", "ct", "-", "ct_int", "\n", "reg_mask", "[", "k", "]", "=", "1", "\n", "cat_spec_wh", "[", "k", ",", "cls_id", "*", "2", ":", "cls_id", "*", "2", "+", "2", "]", "=", "wh", "[", "k", "]", "\n", "cat_spec_mask", "[", "k", ",", "cls_id", "*", "2", ":", "cls_id", "*", "2", "+", "2", "]", "=", "1", "\n", "if", "self", ".", "opt", ".", "dense_wh", ":", "\n", "                    ", "draw_dense_reg", "(", "dense_wh", ",", "hm", ".", "max", "(", "axis", "=", "0", ")", ",", "ct_int", ",", "wh", "[", "k", "]", ",", "radius", ")", "\n", "", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                    ", "gt_det", ".", "append", "(", "[", "ct", "[", "0", "]", "-", "w", "/", "2", ",", "ct", "[", "1", "]", "-", "h", "/", "2", ",", "ct", "[", "0", "]", "+", "w", "/", "2", ",", "ct", "[", "1", "]", "+", "h", "/", "2", ",", "1", ",", "cls_id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "gt_det", ".", "append", "(", "[", "ct", "[", "0", "]", "-", "w", "/", "2", ",", "ct", "[", "1", "]", "-", "h", "/", "2", ",", "ct", "[", "0", "]", "+", "w", "/", "2", ",", "ct", "[", "1", "]", "+", "h", "/", "2", ",", "cls_id", "]", ")", "\n", "\n", "", "", "", "'''\n        if self.split == 'val':\n            gt_det = np.array(gt_det, dtype=np.float32) if len(gt_det) > 0 else \\\n                   np.zeros((1, 5), dtype=np.float32)\n            return inp, gt_det\n        '''", "\n", "\n", "ret", "=", "{", "'input'", ":", "inp", ",", "'hm'", ":", "hm", ",", "'reg_mask'", ":", "reg_mask", ",", "'ind'", ":", "ind", ",", "'wh'", ":", "wh", "}", "\n", "if", "self", ".", "opt", ".", "dense_wh", ":", "\n", "            ", "hm_a", "=", "hm", ".", "max", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "dense_wh_mask", "=", "np", ".", "concatenate", "(", "[", "hm_a", ",", "hm_a", "]", ",", "axis", "=", "0", ")", "\n", "ret", ".", "update", "(", "{", "'dense_wh'", ":", "dense_wh", ",", "'dense_wh_mask'", ":", "dense_wh_mask", "}", ")", "\n", "del", "ret", "[", "'wh'", "]", "\n", "", "elif", "self", ".", "opt", ".", "cat_spec_wh", ":", "\n", "            ", "ret", ".", "update", "(", "{", "'cat_spec_wh'", ":", "cat_spec_wh", ",", "'cat_spec_mask'", ":", "cat_spec_mask", "}", ")", "\n", "del", "ret", "[", "'wh'", "]", "\n", "", "if", "self", ".", "opt", ".", "reg_offset", ":", "\n", "            ", "ret", ".", "update", "(", "{", "'reg'", ":", "reg", "}", ")", "\n", "", "if", "self", ".", "opt", ".", "debug", ">", "0", "or", "not", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "gt_det", "=", "np", ".", "array", "(", "gt_det", ",", "dtype", "=", "np", ".", "float32", ")", "if", "len", "(", "gt_det", ")", ">", "0", "else", "np", ".", "zeros", "(", "(", "1", ",", "6", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "'gt_det'", ":", "gt_det", ",", "'img_id'", ":", "img_id", "}", "\n", "ret", "[", "'meta'", "]", "=", "meta", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._coco_box_to_bbox": [[12, 15], ["numpy.array"], "methods", ["None"], ["    ", "def", "_coco_box_to_bbox", "(", "self", ",", "box", ")", ":", "\n", "        ", "bbox", "=", "np", ".", "array", "(", "[", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "0", "]", "+", "box", "[", "2", "]", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border": [[16, 21], ["None"], "methods", ["None"], ["", "def", "_get_border", "(", "self", ",", "border", ",", "size", ")", ":", "\n", "        ", "i", "=", "1", "\n", "while", "size", "-", "border", "//", "i", "<=", "border", "//", "i", ":", "\n", "            ", "i", "*=", "2", "\n", "", "return", "border", "//", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset.__getitem__": [[22, 149], ["os.path.join", "indoor_render256native_centernet.CenterIndoorRender256NativeDataset.coco.getAnnIds", "indoor_render256native_centernet.CenterIndoorRender256NativeDataset.coco.loadAnns", "min", "cv2.imread", "numpy.array", "utils.image.get_affine_transform", "cv2.warpAffine", "inp.transpose.transpose.transpose", "utils.image.get_affine_transform", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "numpy.array", "numpy.random.random", "inp.transpose.transpose.astype", "utils.image.color_aug", "indoor_render256native_centernet.CenterIndoorRender256NativeDataset._coco_box_to_bbox", "utils.image.affine_transform", "utils.image.affine_transform", "numpy.clip", "numpy.clip", "numpy.zeros.max", "numpy.concatenate", "ret.update", "ret.update", "indoor_render256native_centernet.CenterIndoorRender256NativeDataset.coco.loadImgs", "max", "indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "numpy.random.randint", "numpy.random.randint", "print", "int", "utils.image.gaussian_radius", "max", "numpy.array", "numpy.array.astype", "draw_gaussian", "ret.update", "numpy.array", "numpy.zeros", "numpy.random.choice", "numpy.clip", "numpy.clip", "numpy.clip", "int", "utils.image.draw_dense_reg", "gt_det.append", "gt_det.append", "len", "numpy.arange", "math.ceil", "math.ceil", "numpy.zeros.max", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.color_aug", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._coco_box_to_bbox", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "home.repos.pwc.inspect_result.Guanghan_DANR.det.indoor_render256native_centernet.CenterIndoorRender256NativeDataset._get_border", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.gaussian_radius", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.draw_dense_reg"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "images", "[", "index", "]", "\n", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "file_name", ")", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ids", "=", "ann_ids", ")", "\n", "num_objs", "=", "min", "(", "len", "(", "anns", ")", ",", "self", ".", "max_objs", ")", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "height", ",", "width", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "img", ".", "shape", "[", "1", "]", "/", "2.", ",", "img", ".", "shape", "[", "0", "]", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "opt", ".", "keep_res", ":", "\n", "            ", "input_h", "=", "(", "height", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "input_w", "=", "(", "width", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "s", "=", "np", ".", "array", "(", "[", "input_w", ",", "input_h", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "max", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "*", "1.0", "\n", "input_h", ",", "input_w", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "\n", "", "flipped", "=", "False", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "not_rand_crop", ":", "\n", "                ", "s", "=", "s", "*", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "0.6", ",", "1.4", ",", "0.1", ")", ")", "\n", "w_border", "=", "self", ".", "_get_border", "(", "128", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "h_border", "=", "self", ".", "_get_border", "(", "128", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "c", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "w_border", ",", "high", "=", "img", ".", "shape", "[", "1", "]", "-", "w_border", ")", "\n", "c", "[", "1", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "h_border", ",", "high", "=", "img", ".", "shape", "[", "0", "]", "-", "h_border", ")", "\n", "", "else", ":", "\n", "                ", "sf", "=", "self", ".", "opt", ".", "scale", "\n", "cf", "=", "self", ".", "opt", ".", "shift", "\n", "c", "[", "0", "]", "+=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "cf", ",", "-", "2", "*", "cf", ",", "2", "*", "cf", ")", "\n", "c", "[", "1", "]", "+=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "cf", ",", "-", "2", "*", "cf", ",", "2", "*", "cf", ")", "\n", "s", "=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "sf", "+", "1", ",", "1", "-", "sf", ",", "1", "+", "sf", ")", "\n", "\n", "", "", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "opt", ".", "flip", ":", "\n", "            ", "flipped", "=", "True", "\n", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "c", "[", "0", "]", "=", "width", "-", "c", "[", "0", "]", "-", "1", "\n", "\n", "\n", "", "trans_input", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "input_w", ",", "input_h", "]", ")", "\n", "inp", "=", "cv2", ".", "warpAffine", "(", "img", ",", "trans_input", ",", "\n", "(", "input_w", ",", "input_h", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "inp", "=", "(", "inp", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", ")", "\n", "if", "self", ".", "split", "==", "'train'", "and", "not", "self", ".", "opt", ".", "no_color_aug", ":", "\n", "            ", "color_aug", "(", "self", ".", "_data_rng", ",", "inp", ",", "self", ".", "_eig_val", ",", "self", ".", "_eig_vec", ")", "# color augmentation", "\n", "", "inp", "=", "(", "inp", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "inp", "=", "inp", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# xyc -> cxy", "\n", "\n", "output_h", "=", "input_h", "//", "self", ".", "opt", ".", "down_ratio", "\n", "output_w", "=", "input_w", "//", "self", ".", "opt", ".", "down_ratio", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "trans_output", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "output_w", ",", "output_h", "]", ")", "\n", "\n", "hm", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "output_h", ",", "output_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "wh", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dense_wh", "=", "np", ".", "zeros", "(", "(", "2", ",", "output_h", ",", "output_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "reg", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ind", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "reg_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cat_spec_wh", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "num_classes", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cat_spec_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "num_classes", "*", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "draw_gaussian", "=", "draw_msra_gaussian", "if", "self", ".", "opt", ".", "mse_loss", "else", "draw_umich_gaussian", "\n", "\n", "gt_det", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "            ", "ann", "=", "anns", "[", "k", "]", "\n", "bbox", "=", "self", ".", "_coco_box_to_bbox", "(", "ann", "[", "'bbox'", "]", ")", "\n", "if", "'category_id'", "not", "in", "ann", ":", "\n", "                ", "print", "(", "\"ann: {}\"", ",", "ann", ")", "\n", "return", "KeyError", "\n", "", "else", ":", "\n", "                ", "cls_id", "=", "int", "(", "self", ".", "cat_ids", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "if", "cls_id", "in", "self", ".", "ignore_cls_list", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "if", "flipped", ":", "\n", "              ", "bbox", "[", "[", "0", ",", "2", "]", "]", "=", "width", "-", "bbox", "[", "[", "2", ",", "0", "]", "]", "-", "1", "\n", "\n", "", "bbox", "[", ":", "2", "]", "=", "affine_transform", "(", "bbox", "[", ":", "2", "]", ",", "trans_output", ")", "\n", "bbox", "[", "2", ":", "]", "=", "affine_transform", "(", "bbox", "[", "2", ":", "]", ",", "trans_output", ")", "\n", "bbox", "[", "[", "0", ",", "2", "]", "]", "=", "np", ".", "clip", "(", "bbox", "[", "[", "0", ",", "2", "]", "]", ",", "0", ",", "output_w", "-", "1", ")", "\n", "bbox", "[", "[", "1", ",", "3", "]", "]", "=", "np", ".", "clip", "(", "bbox", "[", "[", "1", ",", "3", "]", "]", ",", "0", ",", "output_h", "-", "1", ")", "\n", "h", ",", "w", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "\n", "\n", "if", "h", ">", "0", "and", "w", ">", "0", ":", "\n", "                ", "radius", "=", "gaussian_radius", "(", "(", "math", ".", "ceil", "(", "h", ")", ",", "math", ".", "ceil", "(", "w", ")", ")", ")", "\n", "radius", "=", "max", "(", "0", ",", "int", "(", "radius", ")", ")", "\n", "radius", "=", "self", ".", "opt", ".", "hm_gauss", "if", "self", ".", "opt", ".", "mse_loss", "else", "radius", "\n", "ct", "=", "np", ".", "array", "(", "[", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "/", "2", ",", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct_int", ",", "radius", ")", "\n", "wh", "[", "k", "]", "=", "1.", "*", "w", ",", "1.", "*", "h", "\n", "ind", "[", "k", "]", "=", "ct_int", "[", "1", "]", "*", "output_w", "+", "ct_int", "[", "0", "]", "\n", "reg", "[", "k", "]", "=", "ct", "-", "ct_int", "\n", "reg_mask", "[", "k", "]", "=", "1", "\n", "cat_spec_wh", "[", "k", ",", "cls_id", "*", "2", ":", "cls_id", "*", "2", "+", "2", "]", "=", "wh", "[", "k", "]", "\n", "cat_spec_mask", "[", "k", ",", "cls_id", "*", "2", ":", "cls_id", "*", "2", "+", "2", "]", "=", "1", "\n", "if", "self", ".", "opt", ".", "dense_wh", ":", "\n", "                    ", "draw_dense_reg", "(", "dense_wh", ",", "hm", ".", "max", "(", "axis", "=", "0", ")", ",", "ct_int", ",", "wh", "[", "k", "]", ",", "radius", ")", "\n", "", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                    ", "gt_det", ".", "append", "(", "[", "ct", "[", "0", "]", "-", "w", "/", "2", ",", "ct", "[", "1", "]", "-", "h", "/", "2", ",", "ct", "[", "0", "]", "+", "w", "/", "2", ",", "ct", "[", "1", "]", "+", "h", "/", "2", ",", "1", ",", "cls_id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "gt_det", ".", "append", "(", "[", "ct", "[", "0", "]", "-", "w", "/", "2", ",", "ct", "[", "1", "]", "-", "h", "/", "2", ",", "ct", "[", "0", "]", "+", "w", "/", "2", ",", "ct", "[", "1", "]", "+", "h", "/", "2", ",", "cls_id", "]", ")", "\n", "\n", "", "", "", "ret", "=", "{", "'input'", ":", "inp", ",", "'hm'", ":", "hm", ",", "'reg_mask'", ":", "reg_mask", ",", "'ind'", ":", "ind", ",", "'wh'", ":", "wh", "}", "\n", "if", "self", ".", "opt", ".", "dense_wh", ":", "\n", "            ", "hm_a", "=", "hm", ".", "max", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "dense_wh_mask", "=", "np", ".", "concatenate", "(", "[", "hm_a", ",", "hm_a", "]", ",", "axis", "=", "0", ")", "\n", "ret", ".", "update", "(", "{", "'dense_wh'", ":", "dense_wh", ",", "'dense_wh_mask'", ":", "dense_wh_mask", "}", ")", "\n", "del", "ret", "[", "'wh'", "]", "\n", "", "elif", "self", ".", "opt", ".", "cat_spec_wh", ":", "\n", "            ", "ret", ".", "update", "(", "{", "'cat_spec_wh'", ":", "cat_spec_wh", ",", "'cat_spec_mask'", ":", "cat_spec_mask", "}", ")", "\n", "del", "ret", "[", "'wh'", "]", "\n", "", "if", "self", ".", "opt", ".", "reg_offset", ":", "\n", "            ", "ret", ".", "update", "(", "{", "'reg'", ":", "reg", "}", ")", "\n", "", "if", "self", ".", "opt", ".", "debug", ">", "0", "or", "not", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "gt_det", "=", "np", ".", "array", "(", "gt_det", ",", "dtype", "=", "np", ".", "float32", ")", "if", "len", "(", "gt_det", ")", ">", "0", "else", "np", ".", "zeros", "(", "(", "1", ",", "6", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "'gt_det'", ":", "gt_det", ",", "'img_id'", ":", "img_id", "}", "\n", "ret", "[", "'meta'", "]", "=", "meta", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.__init__": [[16, 40], ["print", "models.model.create_model", "models.model.load_model", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "base_detector.BaseDetector.model.to", "base_detector.BaseDetector.model.eval", "base_detector.BaseDetector.model.modules", "numpy.array().reshape", "numpy.array().reshape", "torch.device", "torch.device", "isinstance", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.model.create_model", "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.load_model"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "gpus", "[", "0", "]", ">=", "0", ":", "\n", "            ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "            ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "print", "(", "'Creating model...'", ")", "\n", "self", ".", "model", "=", "create_model", "(", "opt", ".", "arch", ",", "opt", ".", "heads", ",", "opt", ".", "head_conv", ")", "\n", "self", ".", "model", "=", "load_model", "(", "self", ".", "model", ",", "opt", ".", "load_model", ")", "\n", "self", ".", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "self", ".", "model", ")", "# debugging: if using SyncBN", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "opt", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "m", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "# debugging:", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "track_running_stats", "=", "False", "\n", "\n", "", "", "self", ".", "mean", "=", "np", ".", "array", "(", "opt", ".", "mean", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "opt", ".", "std", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "self", ".", "max_per_image", "=", "100", "\n", "self", ".", "num_classes", "=", "opt", ".", "num_classes", "\n", "self", ".", "scales", "=", "opt", ".", "test_scales", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "pause", "=", "True", "\n", "self", ".", "img_name", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.pre_process": [[42, 71], ["int", "int", "utils.image.get_affine_transform", "cv2.resize", "cv2.warpAffine", "cv2.warpAffine.transpose().reshape", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "max", "cv2.warpAffine.transpose"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform"], ["", "def", "pre_process", "(", "self", ",", "image", ",", "scale", ",", "meta", "=", "None", ")", ":", "\n", "        ", "height", ",", "width", "=", "image", ".", "shape", "[", "0", ":", "2", "]", "\n", "new_height", "=", "int", "(", "height", "*", "scale", ")", "\n", "new_width", "=", "int", "(", "width", "*", "scale", ")", "\n", "if", "self", ".", "opt", ".", "fix_res", ":", "\n", "            ", "inp_height", ",", "inp_width", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "c", "=", "np", ".", "array", "(", "[", "new_width", "/", "2.", ",", "new_height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "height", ",", "width", ")", "*", "1.0", "\n", "", "else", ":", "\n", "            ", "inp_height", "=", "(", "new_height", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "inp_width", "=", "(", "new_width", "|", "self", ".", "opt", ".", "pad", ")", "+", "1", "\n", "c", "=", "np", ".", "array", "(", "[", "new_width", "//", "2", ",", "new_height", "//", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "np", ".", "array", "(", "[", "inp_width", ",", "inp_height", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "trans_input", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "inp_width", ",", "inp_height", "]", ")", "\n", "resized_image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "new_width", ",", "new_height", ")", ")", "\n", "inp_image", "=", "cv2", ".", "warpAffine", "(", "\n", "resized_image", ",", "trans_input", ",", "(", "inp_width", ",", "inp_height", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "inp_image", "=", "(", "(", "inp_image", "/", "255.", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "images", "=", "inp_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "reshape", "(", "1", ",", "3", ",", "inp_height", ",", "inp_width", ")", "\n", "if", "self", ".", "opt", ".", "flip_test", ":", "\n", "            ", "images", "=", "np", ".", "concatenate", "(", "(", "images", ",", "images", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "images", "=", "torch", ".", "from_numpy", "(", "images", ")", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "return", "images", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.pre_process_resize": [[73, 93], ["cv2.resize", "cv2.resize.transpose().reshape", "torch.from_numpy().float", "numpy.array", "max", "cv2.resize.transpose", "torch.from_numpy"], "methods", ["None"], ["", "def", "pre_process_resize", "(", "self", ",", "image", ",", "scale", "=", "1", ",", "meta", "=", "None", ")", ":", "\n", "        ", "height", ",", "width", "=", "image", ".", "shape", "[", "0", ":", "2", "]", "\n", "inp_height", ",", "inp_width", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "inp_width", ",", "inp_height", ")", ")", "\n", "image", "=", "(", "(", "image", "/", "255.", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "images", "=", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "reshape", "(", "1", ",", "3", ",", "inp_height", ",", "inp_width", ")", "\n", "#ts = time.time()", "\n", "#print(\"\\ncv2 image resize time: {}\".format(time.time() - ts))", "\n", "\n", "#ts = time.time()", "\n", "images", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "float", "(", ")", "\n", "#print(\"numpy to tensor time: {}\".format(time.time() - ts))", "\n", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "return", "images", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.process": [[94, 96], ["None"], "methods", ["None"], ["", "def", "process", "(", "self", ",", "images", ",", "return_time", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.post_process": [[97, 99], ["None"], "methods", ["None"], ["", "def", "post_process", "(", "self", ",", "dets", ",", "meta", ",", "scale", "=", "1", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.merge_outputs": [[100, 102], ["None"], "methods", ["None"], ["", "def", "merge_outputs", "(", "self", ",", "detections", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.debug": [[103, 105], ["None"], "methods", ["None"], ["", "def", "debug", "(", "self", ",", "debugger", ",", "images", ",", "dets", ",", "output", ",", "scale", "=", "1", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.show_results": [[106, 108], ["None"], "methods", ["None"], ["", "def", "show_results", "(", "self", ",", "debugger", ",", "image", ",", "results", ",", "img_name", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.run": [[109, 186], ["utils.debugger.Debugger", "time.time", "isinstance", "time.time", "base_detector.BaseDetector.merge_outputs", "torch.cuda.synchronize", "time.time", "time.time", "images.to.to.to", "torch.cuda.synchronize", "time.time", "base_detector.BaseDetector.process", "torch.cuda.synchronize", "time.time", "base_detector.BaseDetector.post_process", "torch.cuda.synchronize", "time.time", "detections.append", "base_detector.BaseDetector.show_results", "type", "type", "cv2.imread", "os.path.basename", "[].numpy", "base_detector.BaseDetector.pre_process", "base_detector.BaseDetector.debug", "v.numpy", "meta.items"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.merge_outputs", "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.process", "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.post_process", "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.show_results", "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.base_detector.BaseDetector.pre_process", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.debug"], ["", "def", "run", "(", "self", ",", "image_or_path_or_tensor", ",", "meta", "=", "None", ")", ":", "\n", "        ", "load_time", ",", "pre_time", ",", "net_time", ",", "dec_time", ",", "post_time", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "merge_time", ",", "tot_time", "=", "0", ",", "0", "\n", "self", ".", "debugger", "=", "Debugger", "(", "dataset", "=", "self", ".", "opt", ".", "dataset", ",", "ipynb", "=", "(", "self", ".", "opt", ".", "debug", "==", "3", ")", ",", "\n", "theme", "=", "self", ".", "opt", ".", "debugger_theme", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "pre_processed", "=", "False", "\n", "if", "isinstance", "(", "image_or_path_or_tensor", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "image", "=", "image_or_path_or_tensor", "\n", "", "elif", "type", "(", "image_or_path_or_tensor", ")", "==", "type", "(", "''", ")", ":", "\n", "            ", "image", "=", "cv2", ".", "imread", "(", "image_or_path_or_tensor", ")", "\n", "\n", "'''\n            from PIL import Image\n            image = Image.open(image_or_path_or_tensor).convert(\"RGB\")\n            image = np.array(image)[:, :, ::-1]\n            '''", "\n", "\n", "self", ".", "img_name", "=", "os", ".", "path", ".", "basename", "(", "image_or_path_or_tensor", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "image_or_path_or_tensor", "[", "'image'", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "pre_processed_images", "=", "image_or_path_or_tensor", "\n", "pre_processed", "=", "True", "\n", "\n", "", "loaded_time", "=", "time", ".", "time", "(", ")", "\n", "load_time", "+=", "(", "loaded_time", "-", "start_time", ")", "\n", "\n", "#print(\"image:\", image)", "\n", "if", "image", "is", "None", ":", "\n", "            ", "return", "{", "'results'", ":", "None", ",", "'tot'", ":", "tot_time", ",", "'load'", ":", "load_time", ",", "\n", "'pre'", ":", "pre_time", ",", "'net'", ":", "net_time", ",", "'dec'", ":", "dec_time", ",", "\n", "'post'", ":", "post_time", ",", "'merge'", ":", "merge_time", "}", "\n", "\n", "", "detections", "=", "[", "]", "\n", "for", "scale", "in", "self", ".", "scales", ":", "\n", "            ", "scale_start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "pre_processed", ":", "\n", "                ", "images", ",", "meta", "=", "self", ".", "pre_process", "(", "image", ",", "scale", ",", "meta", ")", "\n", "", "else", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "                ", "images", "=", "pre_processed_images", "[", "'images'", "]", "[", "scale", "]", "[", "0", "]", "\n", "meta", "=", "pre_processed_images", "[", "'meta'", "]", "[", "scale", "]", "\n", "meta", "=", "{", "k", ":", "v", ".", "numpy", "(", ")", "[", "0", "]", "for", "k", ",", "v", "in", "meta", ".", "items", "(", ")", "}", "\n", "", "images", "=", "images", ".", "to", "(", "self", ".", "opt", ".", "device", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "pre_process_time", "=", "time", ".", "time", "(", ")", "\n", "pre_time", "+=", "pre_process_time", "-", "scale_start_time", "\n", "\n", "output", ",", "dets", ",", "forward_time", "=", "self", ".", "process", "(", "images", ",", "return_time", "=", "True", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "net_time", "+=", "forward_time", "-", "pre_process_time", "\n", "decode_time", "=", "time", ".", "time", "(", ")", "\n", "dec_time", "+=", "decode_time", "-", "forward_time", "\n", "\n", "if", "self", ".", "opt", ".", "debug", ">=", "2", ":", "\n", "                ", "self", ".", "debug", "(", "self", ".", "debugger", ",", "images", ",", "dets", ",", "output", ",", "scale", ")", "\n", "\n", "", "dets", "=", "self", ".", "post_process", "(", "dets", ",", "meta", ",", "scale", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "post_process_time", "=", "time", ".", "time", "(", ")", "\n", "post_time", "+=", "post_process_time", "-", "decode_time", "\n", "\n", "detections", ".", "append", "(", "dets", ")", "\n", "\n", "", "results", "=", "self", ".", "merge_outputs", "(", "detections", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "merge_time", "+=", "end_time", "-", "post_process_time", "\n", "tot_time", "+=", "end_time", "-", "start_time", "\n", "\n", "if", "self", ".", "opt", ".", "debug", ">=", "1", ":", "\n", "            ", "self", ".", "show_results", "(", "self", ".", "debugger", ",", "image", ",", "results", ",", "self", ".", "img_name", ")", "\n", "\n", "", "return", "{", "'results'", ":", "results", ",", "'tot'", ":", "tot_time", ",", "'load'", ":", "load_time", ",", "\n", "'pre'", ":", "pre_time", ",", "'net'", ":", "net_time", ",", "'dec'", ":", "dec_time", ",", "\n", "'post'", ":", "post_time", ",", "'merge'", ":", "merge_time", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.__init__": [[24, 26], ["base_detector.BaseDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "CenterDetector", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.process": [[27, 46], ["torch.no_grad", "output[].sigmoid_", "torch.cuda.synchronize", "time.time", "models.decoder.centernet_decode", "center_detector.CenterDetector.model", "models.tensor_utils.flip_tensor", "models.tensor_utils.flip_tensor"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder.centernet_decode", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils.flip_tensor", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils.flip_tensor"], ["", "def", "process", "(", "self", ",", "images", ",", "return_time", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "self", ".", "model", "(", "images", ")", "[", "-", "1", "]", "\n", "#output = self.model(images)", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid_", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "if", "self", ".", "opt", ".", "flip_test", ":", "\n", "                ", "hm", "=", "(", "hm", "[", "0", ":", "1", "]", "+", "flip_tensor", "(", "hm", "[", "1", ":", "2", "]", ")", ")", "/", "2", "\n", "wh", "=", "(", "wh", "[", "0", ":", "1", "]", "+", "flip_tensor", "(", "wh", "[", "1", ":", "2", "]", ")", ")", "/", "2", "\n", "reg", "=", "reg", "[", "0", ":", "1", "]", "if", "reg", "is", "not", "None", "else", "None", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "forward_time", "=", "time", ".", "time", "(", ")", "\n", "dets", "=", "centernet_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "", "if", "return_time", ":", "\n", "            ", "return", "output", ",", "dets", ",", "forward_time", "\n", "", "else", ":", "\n", "            ", "return", "output", ",", "dets", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.post_process": [[47, 57], ["utils.post_process.centernet_post_process.detach().cpu().numpy", "utils.post_process.centernet_post_process.reshape", "utils.post_process.centernet_post_process", "range", "utils.post_process.centernet_post_process.copy", "numpy.array().reshape", "utils.post_process.centernet_post_process.detach().cpu", "numpy.array", "utils.post_process.centernet_post_process.detach"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.centernet_post_process"], ["", "", "def", "post_process", "(", "self", ",", "dets", ",", "meta", ",", "scale", "=", "1", ")", ":", "\n", "        ", "dets", "=", "dets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dets", "=", "dets", ".", "reshape", "(", "1", ",", "-", "1", ",", "dets", ".", "shape", "[", "2", "]", ")", "\n", "dets", "=", "centernet_post_process", "(", "\n", "dets", ".", "copy", "(", ")", ",", "[", "meta", "[", "'c'", "]", "]", ",", "[", "meta", "[", "'s'", "]", "]", ",", "\n", "meta", "[", "'out_height'", "]", ",", "meta", "[", "'out_width'", "]", ",", "self", ".", "opt", ".", "num_classes", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", ":", "\n", "            ", "dets", "[", "0", "]", "[", "j", "]", "=", "np", ".", "array", "(", "dets", "[", "0", "]", "[", "j", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "5", ")", "\n", "dets", "[", "0", "]", "[", "j", "]", "[", ":", ",", ":", "4", "]", "/=", "scale", "\n", "", "return", "dets", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.merge_outputs": [[58, 74], ["range", "numpy.hstack", "numpy.concatenate().astype", "len", "range", "soft_nms", "len", "numpy.partition", "numpy.concatenate", "len", "range"], "methods", ["None"], ["", "def", "merge_outputs", "(", "self", ",", "detections", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", ":", "\n", "            ", "results", "[", "j", "]", "=", "np", ".", "concatenate", "(", "\n", "[", "detection", "[", "j", "]", "for", "detection", "in", "detections", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "len", "(", "self", ".", "scales", ")", ">", "1", "or", "self", ".", "opt", ".", "nms", ":", "\n", "                ", "soft_nms", "(", "results", "[", "j", "]", ",", "Nt", "=", "0.5", ",", "method", "=", "2", ")", "\n", "", "", "scores", "=", "np", ".", "hstack", "(", "\n", "[", "results", "[", "j", "]", "[", ":", ",", "4", "]", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", ")", "\n", "if", "len", "(", "scores", ")", ">", "self", ".", "max_per_image", ":", "\n", "            ", "kth", "=", "len", "(", "scores", ")", "-", "self", ".", "max_per_image", "\n", "thresh", "=", "np", ".", "partition", "(", "scores", ",", "kth", ")", "[", "kth", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", ":", "\n", "                ", "keep_inds", "=", "(", "results", "[", "j", "]", "[", ":", ",", "4", "]", ">=", "thresh", ")", "\n", "results", "[", "j", "]", "=", "results", "[", "j", "]", "[", "keep_inds", "]", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.debug": [[75, 89], ["dets.detach().cpu().numpy().copy", "range", "images[].detach().cpu().numpy().transpose", "debugger.gen_colormap", "debugger.add_blend_img", "debugger.add_img", "range", "dets.detach().cpu().numpy", "[].detach().cpu().numpy", "len", "images[].detach().cpu().numpy", "debugger.add_coco_bbox", "dets.detach().cpu", "[].detach().cpu", "images[].detach().cpu", "dets.detach", "[].detach", "images[].detach"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.gen_colormap", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_blend_img", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_img", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.add_coco_bbox"], ["", "def", "debug", "(", "self", ",", "debugger", ",", "images", ",", "dets", ",", "output", ",", "scale", "=", "1", ")", ":", "\n", "        ", "detection", "=", "dets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "detection", "[", ":", ",", ":", ",", ":", "4", "]", "*=", "self", ".", "opt", ".", "down_ratio", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "            ", "img", "=", "images", "[", "i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "=", "(", "(", "img", "*", "self", ".", "std", "+", "self", ".", "mean", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pred", "=", "debugger", ".", "gen_colormap", "(", "output", "[", "'hm'", "]", "[", "i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "debugger", ".", "add_blend_img", "(", "img", ",", "pred", ",", "'pred_hm_{:.1f}'", ".", "format", "(", "scale", ")", ")", "\n", "debugger", ".", "add_img", "(", "img", ",", "img_id", "=", "'out_pred_{:.1f}'", ".", "format", "(", "scale", ")", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "dets", "[", "i", "]", ")", ")", ":", "\n", "                ", "if", "detection", "[", "i", ",", "k", ",", "4", "]", ">", "self", ".", "opt", ".", "center_thresh", ":", "\n", "                    ", "debugger", ".", "add_coco_bbox", "(", "detection", "[", "i", ",", "k", ",", ":", "4", "]", ",", "detection", "[", "i", ",", "k", ",", "-", "1", "]", ",", "\n", "detection", "[", "i", ",", "k", ",", "4", "]", ",", "\n", "img_id", "=", "'out_pred_{:.1f}'", ".", "format", "(", "scale", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.detectors.center_detector.CenterDetector.show_results": [[90, 97], ["debugger.add_img", "range", "debugger.save_img", "debugger.add_coco_bbox"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_img", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.save_img", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.add_coco_bbox"], ["", "", "", "", "def", "show_results", "(", "self", ",", "debugger", ",", "image", ",", "results", ",", "img_name", ")", ":", "\n", "        ", "debugger", ".", "add_img", "(", "image", ",", "img_id", "=", "'ctdet'", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", ":", "\n", "            ", "for", "bbox", "in", "results", "[", "j", "]", ":", "\n", "                ", "if", "bbox", "[", "4", "]", ">", "self", ".", "opt", ".", "vis_thresh", ":", "\n", "                    ", "debugger", ".", "add_coco_bbox", "(", "bbox", "[", ":", "4", "]", ",", "j", "-", "1", ",", "bbox", "[", "4", "]", ",", "img_id", "=", "'ctdet'", ")", "\n", "", "", "", "debugger", ".", "save_img", "(", "imgId", "=", "'ctdet'", ",", "path", "=", "'./cache/test/'", ",", "prefix", "=", "img_name", "[", ":", "-", "4", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.optimizers.lars.LARSOptimizer.__init__": [[11, 32], ["dict", "super().__init__", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "lr", ",", "\n", "momentum", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "\n", "eps", "=", "1e-9", ",", "\n", "thresh", "=", "1e-2", ")", ":", "\n", "\n", "        ", "if", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid learning rate: {lr}'", ")", "\n", "", "if", "momentum", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid momentum value: {momentum}'", ")", "\n", "", "if", "weight_decay", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid weight_decay value: {weight_decay}'", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "\n", "momentum", "=", "momentum", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "eps", "=", "eps", ",", "\n", "thresh", "=", "thresh", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.optimizers.lars.LARSOptimizer.step": [[33, 71], ["closure", "torch.norm", "torch.norm", "torch.where", "torch.zeros_like.mul_().add_", "p.data.add_", "torch.ones_like", "d_p.add_", "torch.zeros_like", "torch.zeros_like.mul_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "lr", "=", "group", "[", "'lr'", "]", "\n", "eps", "=", "group", "[", "'eps'", "]", "\n", "thresh", "=", "group", "[", "'thresh'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "d_p", "=", "p", ".", "grad", ".", "data", "\n", "\n", "weight_norm", "=", "torch", ".", "norm", "(", "p", ".", "data", ")", "\n", "grad_norm", "=", "torch", ".", "norm", "(", "d_p", ")", "\n", "local_lr", "=", "weight_norm", "/", "(", "eps", "+", "grad_norm", "+", "\n", "weight_decay", "*", "weight_norm", ")", "\n", "local_lr", "=", "torch", ".", "where", "(", "weight_norm", "<", "thresh", ",", "\n", "torch", ".", "ones_like", "(", "local_lr", ")", ",", "local_lr", ")", "\n", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "weight_decay", ",", "p", ".", "data", ")", "\n", "\n", "", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "zeros_like", "(", "\n", "p", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "lr", "*", "local_lr", ",", "d_p", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "1.0", ",", "buf", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.optimizers.adabound.AdaBound.__init__": [[25, 56], ["dict", "super().__init__", "list", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "map"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "lr", "=", "1e-3", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "final_lr", "=", "0.1", ",", "\n", "gamma", "=", "1e-3", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "\n", "amsbound", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid learning rate: {lr}'", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid epsilon value: {eps}'", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid beta parameter at index 0: {betas[0]}'", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid beta parameter at index 1: {betas[1]}'", ")", "\n", "", "if", "not", "0.0", "<=", "final_lr", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid final learning rate: {final_lr}'", ")", "\n", "", "if", "not", "0.0", "<=", "gamma", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid gamma parameter: {gamma}'", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "\n", "betas", "=", "betas", ",", "\n", "final_lr", "=", "final_lr", ",", "\n", "gamma", "=", "gamma", ",", "\n", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "amsbound", "=", "amsbound", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'lr'", "]", ",", "self", ".", "param_groups", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.optimizers.adabound.AdaBound.__setstate__": [[57, 61], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.optimizers.adabound.AdaBoundW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsbound'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.optimizers.adabound.AdaBound.step": [[62, 139], ["zip", "closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "torch.full_like", "torch.full_like.div_().clamp_().mul_", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "grad.add.add.add", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "torch.full_like.div_().clamp_", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt", "torch.full_like.div_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates\n                the model and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", ",", "base_lr", "in", "zip", "(", "self", ".", "param_groups", ",", "self", ".", "base_lrs", ")", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'AdaBound does not support sparse gradients'", ")", "\n", "", "amsbound", "=", "group", "[", "'amsbound'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsbound", ":", "\n", "# Maintains max of all exp. moving avg. of", "\n", "# sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsbound", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsbound", ":", "\n", "# Maintains the maximum of all 2nd moment running avg.", "\n", "# till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "\n", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "# Applies bounds on actual learning rate", "\n", "# lr_scheduler cannot affect final_lr, this is a", "\n", "# workaround to apply lr decay", "\n", "final_lr", "=", "group", "[", "'final_lr'", "]", "*", "group", "[", "'lr'", "]", "/", "base_lr", "\n", "lower_bound", "=", "final_lr", "*", "(", "1", "-", "1", "/", "\n", "(", "group", "[", "'gamma'", "]", "*", "state", "[", "'step'", "]", "+", "1", ")", ")", "\n", "upper_bound", "=", "final_lr", "*", "(", "1", "+", "1", "/", "\n", "(", "group", "[", "'gamma'", "]", "*", "state", "[", "'step'", "]", ")", ")", "\n", "step_size", "=", "torch", ".", "full_like", "(", "denom", ",", "step_size", ")", "\n", "step_size", ".", "div_", "(", "denom", ")", ".", "clamp_", "(", "lower_bound", ",", "\n", "upper_bound", ")", ".", "mul_", "(", "exp_avg", ")", "\n", "\n", "p", ".", "data", ".", "add_", "(", "-", "step_size", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.optimizers.adabound.AdaBoundW.__init__": [[159, 190], ["dict", "super().__init__", "list", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "map"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "lr", "=", "1e-3", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "final_lr", "=", "0.1", ",", "\n", "gamma", "=", "1e-3", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "\n", "amsbound", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid learning rate: {lr}'", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid epsilon value: {eps}'", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid beta parameter at index 0: {betas[0]}'", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid beta parameter at index 1: {betas[1]}'", ")", "\n", "", "if", "not", "0.0", "<=", "final_lr", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid final learning rate: {final_lr}'", ")", "\n", "", "if", "not", "0.0", "<=", "gamma", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid gamma parameter: {gamma}'", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "\n", "betas", "=", "betas", ",", "\n", "final_lr", "=", "final_lr", ",", "\n", "gamma", "=", "gamma", ",", "\n", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "amsbound", "=", "amsbound", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'lr'", "]", ",", "self", ".", "param_groups", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.optimizers.adabound.AdaBoundW.__setstate__": [[191, 195], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.optimizers.adabound.AdaBoundW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsbound'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.optimizers.adabound.AdaBoundW.step": [[196, 275], ["zip", "closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "torch.full_like", "torch.full_like.div_().clamp_().mul_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "torch.mul", "p.data.add_", "p.data.sub_", "p.data.add_", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "torch.full_like.div_().clamp_", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt", "torch.full_like.div_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", ",", "base_lr", "in", "zip", "(", "self", ".", "param_groups", ",", "self", ".", "base_lrs", ")", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'AdaBound does not support sparse gradients'", ")", "\n", "", "amsbound", "=", "group", "[", "'amsbound'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsbound", ":", "\n", "# Maintains max of all exp. moving avg. of", "\n", "# sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsbound", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsbound", ":", "\n", "# Maintains the maximum of all 2nd moment running avg.", "\n", "# till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "\n", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "# Applies bounds on actual learning rate", "\n", "# lr_scheduler cannot affect final_lr, this is a", "\n", "# workaround to apply lr decay", "\n", "final_lr", "=", "group", "[", "'final_lr'", "]", "*", "group", "[", "'lr'", "]", "/", "base_lr", "\n", "lower_bound", "=", "final_lr", "*", "(", "1", "-", "1", "/", "\n", "(", "group", "[", "'gamma'", "]", "*", "state", "[", "'step'", "]", "+", "1", ")", ")", "\n", "upper_bound", "=", "final_lr", "*", "(", "1", "+", "1", "/", "\n", "(", "group", "[", "'gamma'", "]", "*", "state", "[", "'step'", "]", ")", ")", "\n", "step_size", "=", "torch", ".", "full_like", "(", "denom", ",", "step_size", ")", "\n", "step_size", ".", "div_", "(", "denom", ")", ".", "clamp_", "(", "lower_bound", ",", "\n", "upper_bound", ")", ".", "mul_", "(", "exp_avg", ")", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "decayed_weights", "=", "torch", ".", "mul", "(", "p", ".", "data", ",", "group", "[", "'weight_decay'", "]", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "step_size", ")", "\n", "p", ".", "data", ".", "sub_", "(", "decayed_weights", ")", "\n", "", "else", ":", "\n", "                    ", "p", ".", "data", ".", "add_", "(", "-", "step_size", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.det_trainer.CtSSLoss.__init__": [[19, 24], ["super().__init__", "torch.nn.MSELoss", "torch.nn.MSELoss", "models.losses.FocalLoss"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "CtSSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crit_hm", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "if", "opt", ".", "mse_loss", "else", "FocalLoss", "(", ")", "\n", "self", ".", "crit_em", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.det_trainer.CtSSLoss.forward": [[25, 43], ["range", "torch.flip", "torch.flip", "models.tensor_utils._sigmoid", "det_trainer.CtSSLoss.crit_hm", "det_trainer.CtSSLoss.crit_em"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._sigmoid"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "outputs_flipped", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "hm_loss", ",", "em_loss", "=", "0", ",", "0", "\n", "for", "s", "in", "range", "(", "opt", ".", "num_stacks", ")", ":", "\n", "            ", "output", "=", "outputs", "[", "s", "]", "\n", "output_flipped", "=", "outputs_flipped", "[", "s", "]", "\n", "if", "not", "opt", ".", "mse_loss", ":", "\n", "                ", "output_flipped", "[", "'hm'", "]", "=", "_sigmoid", "(", "output_flipped", "[", "'hm'", "]", ")", "\n", "\n", "", "flipped_hm", "=", "torch", ".", "flip", "(", "output_flipped", "[", "'hm'", "]", ",", "[", "3", "]", ")", "# vertical flip", "\n", "flipped_em", "=", "torch", ".", "flip", "(", "output_flipped", "[", "'em'", "]", ",", "[", "3", "]", ")", "# vertical flip", "\n", "\n", "hm_loss", "+=", "self", ".", "crit_hm", "(", "output", "[", "'hm'", "]", ",", "flipped_hm", ")", "/", "opt", ".", "num_stacks", "\n", "em_loss", "+=", "self", ".", "crit_em", "(", "output", "[", "'em'", "]", ",", "flipped_em", ")", "/", "opt", ".", "num_stacks", "\n", "\n", "", "ss_loss", "=", "opt", ".", "hm_weight", "*", "hm_loss", "+", "opt", ".", "em_weight", "*", "em_loss", "\n", "ss_loss_stats", "=", "{", "'ss_loss'", ":", "ss_loss", ",", "'em_loss'", ":", "em_loss", ",", "'hm_loss'", ":", "hm_loss", "}", "\n", "return", "ss_loss", ",", "ss_loss_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.det_trainer.CtdetLoss.__init__": [[46, 55], ["super().__init__", "torch.nn.MSELoss", "models.losses.FocalLoss", "models.losses.RegL1Loss", "torch.nn.L1Loss", "models.losses.RegLoss", "models.losses.NormRegL1Loss", "models.losses.RegWeightedL1Loss"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "CtdetLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crit", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "if", "opt", ".", "mse_loss", "else", "FocalLoss", "(", ")", "\n", "self", ".", "crit_reg", "=", "RegL1Loss", "(", ")", "if", "opt", ".", "reg_loss", "==", "'l1'", "else", "RegLoss", "(", ")", "if", "opt", ".", "reg_loss", "==", "'sl1'", "else", "None", "\n", "self", ".", "crit_wh", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'sum'", ")", "if", "opt", ".", "dense_wh", "else", "NormRegL1Loss", "(", ")", "if", "opt", ".", "norm_wh", "else", "RegWeightedL1Loss", "(", ")", "if", "opt", ".", "cat_spec_wh", "else", "self", ".", "crit_reg", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.det_trainer.CtdetLoss.forward": [[56, 103], ["range", "models.tensor_utils._sigmoid", "torch.from_numpy().to", "torch.from_numpy().to", "det_trainer.CtdetLoss.crit", "det_trainer.CtdetLoss.crit_reg", "torch.from_numpy", "torch.from_numpy", "batch[].sum", "utils.oracle_utils.gen_oracle_map", "utils.oracle_utils.gen_oracle_map", "det_trainer.CtdetLoss.crit_wh", "det_trainer.CtdetLoss.crit_wh", "det_trainer.CtdetLoss.crit_reg", "batch[].detach().cpu().numpy", "batch[].detach().cpu().numpy", "batch[].detach().cpu().numpy", "batch[].detach().cpu().numpy", "batch[].detach().cpu", "batch[].detach().cpu", "batch[].detach().cpu", "batch[].detach().cpu", "batch[].detach", "batch[].detach", "batch[].detach", "batch[].detach"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._sigmoid", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.oracle_utils.gen_oracle_map", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.oracle_utils.gen_oracle_map"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "batch", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "hm_loss", ",", "wh_loss", ",", "off_loss", "=", "0", ",", "0", ",", "0", "\n", "for", "s", "in", "range", "(", "opt", ".", "num_stacks", ")", ":", "\n", "            ", "output", "=", "outputs", "[", "s", "]", "\n", "if", "not", "opt", ".", "mse_loss", ":", "\n", "                ", "output", "[", "'hm'", "]", "=", "_sigmoid", "(", "output", "[", "'hm'", "]", ")", "\n", "\n", "", "if", "opt", ".", "eval_oracle_hm", ":", "\n", "                ", "output", "[", "'hm'", "]", "=", "batch", "[", "'hm'", "]", "\n", "", "if", "opt", ".", "eval_oracle_wh", ":", "\n", "                ", "output", "[", "'wh'", "]", "=", "torch", ".", "from_numpy", "(", "gen_oracle_map", "(", "\n", "batch", "[", "'wh'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "batch", "[", "'ind'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "output", "[", "'wh'", "]", ".", "shape", "[", "3", "]", ",", "output", "[", "'wh'", "]", ".", "shape", "[", "2", "]", ")", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "", "if", "opt", ".", "eval_oracle_offset", ":", "\n", "                ", "output", "[", "'reg'", "]", "=", "torch", ".", "from_numpy", "(", "gen_oracle_map", "(", "\n", "batch", "[", "'reg'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "batch", "[", "'ind'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "output", "[", "'reg'", "]", ".", "shape", "[", "3", "]", ",", "output", "[", "'reg'", "]", ".", "shape", "[", "2", "]", ")", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "\n", "", "hm_loss", "+=", "self", ".", "crit", "(", "output", "[", "'hm'", "]", ",", "batch", "[", "'hm'", "]", ")", "/", "opt", ".", "num_stacks", "\n", "if", "opt", ".", "wh_weight", ">", "0", ":", "\n", "                ", "if", "opt", ".", "dense_wh", ":", "\n", "                    ", "mask_weight", "=", "batch", "[", "'dense_wh_mask'", "]", ".", "sum", "(", ")", "+", "1e-4", "\n", "wh_loss", "+=", "(", "\n", "self", ".", "crit_wh", "(", "output", "[", "'wh'", "]", "*", "batch", "[", "'dense_wh_mask'", "]", ",", "\n", "batch", "[", "'dense_wh'", "]", "*", "batch", "[", "'dense_wh_mask'", "]", ")", "/", "\n", "mask_weight", ")", "/", "opt", ".", "num_stacks", "\n", "", "elif", "opt", ".", "cat_spec_wh", ":", "\n", "                    ", "wh_loss", "+=", "self", ".", "crit_wh", "(", "\n", "output", "[", "'wh'", "]", ",", "batch", "[", "'cat_spec_mask'", "]", ",", "\n", "batch", "[", "'ind'", "]", ",", "batch", "[", "'cat_spec_wh'", "]", ")", "/", "opt", ".", "num_stacks", "\n", "", "else", ":", "\n", "                    ", "wh_loss", "+=", "self", ".", "crit_reg", "(", "\n", "output", "[", "'wh'", "]", ",", "batch", "[", "'reg_mask'", "]", ",", "\n", "batch", "[", "'ind'", "]", ",", "batch", "[", "'wh'", "]", ")", "/", "opt", ".", "num_stacks", "\n", "\n", "", "", "if", "opt", ".", "reg_offset", "and", "opt", ".", "off_weight", ">", "0", ":", "\n", "                ", "off_loss", "+=", "self", ".", "crit_reg", "(", "output", "[", "'reg'", "]", ",", "batch", "[", "'reg_mask'", "]", ",", "\n", "batch", "[", "'ind'", "]", ",", "batch", "[", "'reg'", "]", ")", "/", "opt", ".", "num_stacks", "\n", "\n", "", "", "loss", "=", "opt", ".", "hm_weight", "*", "hm_loss", "+", "opt", ".", "wh_weight", "*", "wh_loss", "+", "opt", ".", "off_weight", "*", "off_loss", "\n", "loss_stats", "=", "{", "'loss'", ":", "loss", ",", "'hm_loss'", ":", "hm_loss", ",", "\n", "'wh_loss'", ":", "wh_loss", ",", "'off_loss'", ":", "off_loss", "}", "\n", "return", "loss", ",", "loss_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.det_trainer.CtdetTrainer.__init__": [[106, 108], ["base_trainer.BaseTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "model", ",", "optimizer", "=", "None", ")", ":", "\n", "        ", "super", "(", "CtdetTrainer", ",", "self", ")", ".", "__init__", "(", "opt", ",", "model", ",", "optimizer", "=", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.det_trainer.CtdetTrainer._get_losses": [[109, 113], ["det_trainer.CtdetLoss"], "methods", ["None"], ["", "def", "_get_losses", "(", "self", ",", "opt", ")", ":", "\n", "        ", "loss_states", "=", "[", "'loss'", ",", "'hm_loss'", ",", "'wh_loss'", ",", "'off_loss'", "]", "\n", "loss", "=", "CtdetLoss", "(", "opt", ")", "\n", "return", "loss_states", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.det_trainer.CtdetTrainer.debug": [[114, 150], ["models.decoder.centernet_decode", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape", "[].numpy().reshape", "range", "utils.debugger.Debugger", "[].detach().cpu().numpy().transpose", "numpy.clip().astype", "utils.debugger.Debugger.gen_colormap", "utils.debugger.Debugger.gen_colormap", "utils.debugger.Debugger.add_blend_img", "utils.debugger.Debugger.add_blend_img", "utils.debugger.Debugger.add_img", "range", "utils.debugger.Debugger.add_img", "range", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach().cpu().numpy", "[].numpy", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "len", "len", "utils.debugger.Debugger.save_all_imgs", "utils.debugger.Debugger.show_all_imgs", "[].detach().cpu().numpy", "numpy.clip", "utils.debugger.Debugger.add_coco_bbox", "utils.debugger.Debugger.add_coco_bbox", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach().cpu", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach", "[].detach", "[].detach", "[].detach"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder.centernet_decode", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.gen_colormap", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.gen_colormap", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_blend_img", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_blend_img", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_img", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.add_img", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.save_all_imgs", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.debugger.Debugger.show_all_imgs", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.add_coco_bbox", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.add_coco_bbox"], ["", "def", "debug", "(", "self", ",", "batch", ",", "output", ",", "iter_id", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "opt", ".", "reg_offset", "else", "None", "\n", "dets", "=", "centernet_decode", "(", "\n", "output", "[", "'hm'", "]", ",", "output", "[", "'wh'", "]", ",", "reg", "=", "reg", ",", "\n", "cat_spec_wh", "=", "opt", ".", "cat_spec_wh", ",", "K", "=", "opt", ".", "K", ")", "\n", "dets", "=", "dets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "dets", ".", "shape", "[", "2", "]", ")", "\n", "dets", "[", ":", ",", ":", ",", ":", "4", "]", "*=", "opt", ".", "down_ratio", "\n", "dets_gt", "=", "batch", "[", "'meta'", "]", "[", "'gt_det'", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "dets", ".", "shape", "[", "2", "]", ")", "\n", "dets_gt", "[", ":", ",", ":", ",", ":", "4", "]", "*=", "opt", ".", "down_ratio", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "            ", "debugger", "=", "Debugger", "(", "\n", "dataset", "=", "opt", ".", "dataset", ",", "ipynb", "=", "(", "opt", ".", "debug", "==", "3", ")", ",", "theme", "=", "opt", ".", "debugger_theme", ")", "\n", "img", "=", "batch", "[", "'input'", "]", "[", "i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "=", "np", ".", "clip", "(", "(", "(", "\n", "img", "*", "opt", ".", "std", "+", "opt", ".", "mean", ")", "*", "255.", ")", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pred", "=", "debugger", ".", "gen_colormap", "(", "output", "[", "'hm'", "]", "[", "i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gt", "=", "debugger", ".", "gen_colormap", "(", "batch", "[", "'hm'", "]", "[", "i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "debugger", ".", "add_blend_img", "(", "img", ",", "pred", ",", "'pred_hm'", ")", "\n", "debugger", ".", "add_blend_img", "(", "img", ",", "gt", ",", "'gt_hm'", ")", "\n", "debugger", ".", "add_img", "(", "img", ",", "img_id", "=", "'out_pred'", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "dets", "[", "i", "]", ")", ")", ":", "\n", "                ", "if", "dets", "[", "i", ",", "k", ",", "4", "]", ">", "opt", ".", "center_thresh", ":", "\n", "                    ", "debugger", ".", "add_coco_bbox", "(", "dets", "[", "i", ",", "k", ",", ":", "4", "]", ",", "dets", "[", "i", ",", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "i", ",", "k", ",", "4", "]", ",", "img_id", "=", "'out_pred'", ")", "\n", "\n", "", "", "debugger", ".", "add_img", "(", "img", ",", "img_id", "=", "'out_gt'", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "dets_gt", "[", "i", "]", ")", ")", ":", "\n", "                ", "if", "dets_gt", "[", "i", ",", "k", ",", "4", "]", ">", "opt", ".", "center_thresh", ":", "\n", "                    ", "debugger", ".", "add_coco_bbox", "(", "dets_gt", "[", "i", ",", "k", ",", ":", "4", "]", ",", "dets_gt", "[", "i", ",", "k", ",", "-", "1", "]", ",", "\n", "dets_gt", "[", "i", ",", "k", ",", "4", "]", ",", "img_id", "=", "'out_gt'", ")", "\n", "\n", "", "", "if", "opt", ".", "debug", "==", "4", ":", "\n", "                ", "debugger", ".", "save_all_imgs", "(", "opt", ".", "debug_dir", ",", "prefix", "=", "'{}'", ".", "format", "(", "iter_id", ")", ")", "\n", "", "else", ":", "\n", "                ", "debugger", ".", "show_all_imgs", "(", "pause", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.det_trainer.CtdetTrainer.save_result": [[151, 162], ["models.decoder.centernet_decode", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape", "utils.post_process.centernet_post_process", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.copy", "[].cpu().numpy", "[].cpu().numpy", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach().cpu().numpy", "[].cpu", "[].cpu", "[].cpu().numpy", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach().cpu", "[].cpu", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder.centernet_decode", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.centernet_post_process"], ["", "", "", "def", "save_result", "(", "self", ",", "output", ",", "batch", ",", "results", ")", ":", "\n", "        ", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets", "=", "centernet_decode", "(", "\n", "output", "[", "'hm'", "]", ",", "output", "[", "'wh'", "]", ",", "reg", "=", "reg", ",", "\n", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "dets", "=", "dets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "dets", ".", "shape", "[", "2", "]", ")", "\n", "dets_out", "=", "centernet_post_process", "(", "\n", "dets", ".", "copy", "(", ")", ",", "batch", "[", "'meta'", "]", "[", "'c'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "batch", "[", "'meta'", "]", "[", "'s'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "output", "[", "'hm'", "]", ".", "shape", "[", "2", "]", ",", "output", "[", "'hm'", "]", ".", "shape", "[", "3", "]", ",", "output", "[", "'hm'", "]", ".", "shape", "[", "1", "]", ")", "\n", "results", "[", "batch", "[", "'meta'", "]", "[", "'img_id'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "]", "=", "dets_out", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.ModelWithLoss.__init__": [[14, 19], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss", ",", "ss_loss", "=", "None", ")", ":", "\n", "        ", "super", "(", "ModelWithLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "ss_loss", "=", "ss_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.ModelWithLoss.forward": [[20, 31], ["base_trainer.ModelWithLoss.model", "base_trainer.ModelWithLoss.loss", "torch.flip", "base_trainer.ModelWithLoss.model", "base_trainer.ModelWithLoss.ss_loss", "batch[].clone"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "batch", "[", "'input'", "]", ")", "\n", "loss", ",", "loss_stats", "=", "self", ".", "loss", "(", "outputs", ",", "batch", ")", "\n", "\n", "if", "self", ".", "ss_loss", ":", "\n", "            ", "input_flipped", "=", "torch", ".", "flip", "(", "batch", "[", "'input'", "]", ".", "clone", "(", ")", ",", "[", "3", "]", ")", "# horizontal flip", "\n", "outputs_flipped", "=", "self", ".", "model", "(", "input_flipped", ")", "\n", "ss_loss", ",", "ss_loss_stats", "=", "self", ".", "ss_loss", "(", "outputs", ",", "outputs_flipped", ")", "\n", "return", "outputs", "[", "-", "1", "]", ",", "loss", ",", "loss_stats", ",", "ss_loss", ",", "ss_loss_stats", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "[", "-", "1", "]", ",", "loss", ",", "loss_stats", "\n", "#return outputs, loss, loss_stats", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.__init__": [[35, 47], ["base_trainer.BaseTrainer._get_losses", "base_trainer.ModelWithLoss", "CtSSLoss", "base_trainer.ModelWithLoss"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer._get_losses"], ["    ", "def", "__init__", "(", "\n", "self", ",", "opt", ",", "model", ",", "optimizer", "=", "None", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "loss_stats", ",", "self", ".", "loss", "=", "self", ".", "_get_losses", "(", "opt", ")", "\n", "self", ".", "model_with_loss", "=", "ModelWithLoss", "(", "model", ",", "self", ".", "loss", ")", "\n", "\n", "if", "opt", ".", "self_supervise", ":", "\n", "            ", "from", "trainers", ".", "det_trainer", "import", "CtSSLoss", "\n", "self", ".", "ss_loss_stats", "=", "[", "'ss_loss'", ",", "'hm_loss'", ",", "'em_loss'", "]", "\n", "self", ".", "ss_loss", "=", "CtSSLoss", "(", "opt", ")", "\n", "self", ".", "model_with_loss", "=", "ModelWithLoss", "(", "model", ",", "self", ".", "loss", ",", "self", ".", "ss_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.set_device": [[48, 60], ["base_trainer.BaseTrainer.optimizer.state.values", "len", "models.data_parallel.DataParallel().to", "base_trainer.BaseTrainer.model_with_loss.to", "state.items", "isinstance", "models.data_parallel.DataParallel", "v.to"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel.DataParallel"], ["", "", "def", "set_device", "(", "self", ",", "gpus", ",", "chunk_sizes", ",", "device", ")", ":", "\n", "        ", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "            ", "self", ".", "model_with_loss", "=", "DataParallel", "(", "\n", "self", ".", "model_with_loss", ",", "device_ids", "=", "gpus", ",", "\n", "chunk_sizes", "=", "chunk_sizes", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_with_loss", "=", "self", ".", "model_with_loss", ".", "to", "(", "device", ")", "\n", "\n", "", "for", "state", "in", "self", ".", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "state", "[", "k", "]", "=", "v", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.set_device_distributed": [[62, 75], ["base_trainer.BaseTrainer.model_with_loss.to", "torch.nn.parallel.DistributedDataParallel", "base_trainer.BaseTrainer.optimizer.state.values", "state.items", "isinstance", "v.to"], "methods", ["None"], ["", "", "", "", "def", "set_device_distributed", "(", "self", ",", "gpus", ",", "device", ")", ":", "\n", "\n", "        ", "self", ".", "model_with_loss", "=", "self", ".", "model_with_loss", ".", "to", "(", "device", ")", "\n", "self", ".", "model_with_loss", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "self", ".", "model_with_loss", ",", "\n", "device_ids", "=", "[", "self", ".", "opt", ".", "local_rank", "]", ",", "\n", "output_device", "=", "self", ".", "opt", ".", "local_rank", ",", "\n", ")", "\n", "\n", "for", "state", "in", "self", ".", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "state", "[", "k", "]", "=", "v", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.run_epoch": [[77, 169], ["progress.bar.Bar", "time.time", "enumerate", "progress.bar.Bar.finish", "model_with_loss.train", "model_with_loss.eval", "torch.cuda.empty_cache", "utils.misc.AverageMeter", "utils.misc.AverageMeter", "utils.misc.AverageMeter", "len", "data_time.update", "isinstance", "loss.mean.mean.mean", "batch_time.update", "time.time", "ret.update", "progress.bar.Bar.elapsed_td.total_seconds", "len", "utils.misc.AverageMeter", "model_with_loss", "model_with_loss", "base_trainer.BaseTrainer.optimizer.zero_grad", "loss.mean.mean.backward", "base_trainer.BaseTrainer.optimizer.step", "avg_loss_stats[].update", "progress.bar.Bar.next", "base_trainer.BaseTrainer.debug", "avg_loss_stats.items", "time.time", "batch[].to", "models.tensor_utils.image_mixup", "time.time", "loss_stats[].mean().item", "batch[].size", "avg_ss_loss_stats[].update", "print", "print", "base_trainer.BaseTrainer.save_result", "avg_ss_loss_stats.items", "ss_loss_stats[].mean().item", "batch[].size", "loss_stats[].mean", "ss_loss_stats[].mean"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.optimizers.adabound.AdaBoundW.step", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils.image_mixup", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.save_result"], ["", "", "", "", "def", "run_epoch", "(", "self", ",", "phase", ",", "epoch", ",", "data_loader", ")", ":", "\n", "        ", "model_with_loss", "=", "self", ".", "model_with_loss", "\n", "if", "phase", "==", "'train'", ":", "\n", "            ", "model_with_loss", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "opt", ".", "gpus", ")", ">", "1", ":", "\n", "                ", "model_with_loss", "=", "self", ".", "model_with_loss", ".", "module", "\n", "", "model_with_loss", ".", "eval", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "opt", "=", "self", ".", "opt", "\n", "results", "=", "{", "}", "\n", "data_time", ",", "batch_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "avg_loss_stats", "=", "{", "l", ":", "AverageMeter", "(", ")", "for", "l", "in", "self", ".", "loss_stats", "}", "\n", "if", "opt", ".", "self_supervise", ":", "\n", "            ", "avg_ss_loss_stats", "=", "{", "l", ":", "AverageMeter", "(", ")", "for", "l", "in", "self", ".", "ss_loss_stats", "}", "\n", "", "num_iters", "=", "len", "(", "data_loader", ")", "if", "opt", ".", "num_iters", "<", "0", "else", "opt", ".", "num_iters", "\n", "bar", "=", "Bar", "(", "'{}/{}'", ".", "format", "(", "opt", ".", "task", ",", "opt", ".", "exp_id", ")", ",", "max", "=", "num_iters", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "iter_id", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "if", "iter_id", ">=", "num_iters", ":", "\n", "                ", "break", "\n", "", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "isinstance", "(", "batch", ",", "list", ")", ":", "\n", "# classification: batch is a list of two tensors (img, label) with ImageFolder dataset class", "\n", "                ", "batch_dict", "=", "{", "}", "\n", "batch_dict", "[", "'input'", "]", "=", "batch", "[", "0", "]", "\n", "batch_dict", "[", "'cls_vector'", "]", "=", "batch", "[", "1", "]", "\n", "batch", "=", "batch_dict", "\n", "\n", "#  batch is a dict", "\n", "", "for", "k", "in", "batch", ":", "\n", "                ", "if", "k", "!=", "'meta'", ":", "\n", "                    ", "batch", "[", "k", "]", "=", "batch", "[", "k", "]", ".", "to", "(", "device", "=", "opt", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# image mixup", "\n", "", "", "if", "opt", ".", "image_mixup", "is", "True", "and", "phase", "==", "\"train\"", ":", "\n", "                ", "if", "iter_id", "%", "5", "==", "0", ":", "\n", "                    ", "batch", "=", "image_mixup", "(", "batch", ")", "\n", "\n", "", "", "if", "opt", ".", "self_supervise", ":", "\n", "                ", "output", ",", "loss", ",", "loss_stats", ",", "ss_loss", ",", "ss_loss_stats", "=", "model_with_loss", "(", "batch", ")", "\n", "loss", "+=", "ss_loss", "\n", "", "else", ":", "\n", "                ", "output", ",", "loss", ",", "loss_stats", "=", "model_with_loss", "(", "batch", ")", "\n", "", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "if", "phase", "==", "'train'", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "Bar", ".", "suffix", "=", "'{phase}: [{0}][{1}/{2}]|Tot: {total:} |ETA: {eta:} '", ".", "format", "(", "\n", "epoch", ",", "iter_id", ",", "num_iters", ",", "phase", "=", "phase", ",", "\n", "total", "=", "bar", ".", "elapsed_td", ",", "eta", "=", "bar", ".", "eta_td", ")", "\n", "for", "l", "in", "avg_loss_stats", ":", "\n", "                ", "avg_loss_stats", "[", "l", "]", ".", "update", "(", "loss_stats", "[", "l", "]", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "batch", "[", "'input'", "]", ".", "size", "(", "0", ")", ")", "\n", "Bar", ".", "suffix", "=", "Bar", ".", "suffix", "+", "'|{} {:.4f} '", ".", "format", "(", "l", ",", "avg_loss_stats", "[", "l", "]", ".", "avg", ")", "\n", "", "if", "opt", ".", "self_supervise", ":", "\n", "                ", "for", "l", "in", "avg_ss_loss_stats", ":", "\n", "                    ", "avg_ss_loss_stats", "[", "l", "]", ".", "update", "(", "ss_loss_stats", "[", "l", "]", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "batch", "[", "'input'", "]", ".", "size", "(", "0", ")", ")", "\n", "Bar", ".", "suffix", "=", "Bar", ".", "suffix", "+", "'|{} {:.4f} '", ".", "format", "(", "l", ",", "avg_ss_loss_stats", "[", "l", "]", ".", "avg", ")", "\n", "", "", "if", "not", "opt", ".", "hide_data_time", ":", "\n", "                ", "Bar", ".", "suffix", "=", "Bar", ".", "suffix", "+", "'|Data {dt.val:.3f}s({dt.avg:.3f}s) '", "'|Net {bt.avg:.3f}s'", ".", "format", "(", "dt", "=", "data_time", ",", "bt", "=", "batch_time", ")", "\n", "", "if", "opt", ".", "print_iter", ">", "0", ":", "\n", "                ", "if", "iter_id", "%", "opt", ".", "print_iter", "==", "0", ":", "\n", "                    ", "print", "(", "'{}/{}| {}'", ".", "format", "(", "opt", ".", "task", ",", "opt", ".", "exp_id", ",", "Bar", ".", "suffix", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "bar", ".", "next", "(", ")", "\n", "\n", "", "if", "opt", ".", "debug", ">", "0", ":", "\n", "                ", "self", ".", "debug", "(", "batch", ",", "output", ",", "iter_id", ")", "\n", "\n", "", "if", "opt", ".", "test", "or", "phase", "==", "\"eval\"", ":", "\n", "                ", "if", "opt", ".", "local_rank", "==", "0", ":", "\n", "                    ", "print", "(", "\"rank is: \"", ",", "opt", ".", "local_rank", ")", "\n", "self", ".", "save_result", "(", "output", ",", "batch", ",", "results", ")", "\n", "\n", "", "", "del", "output", ",", "loss", ",", "loss_stats", "\n", "if", "opt", ".", "self_supervise", ":", "\n", "                ", "del", "ss_loss", ",", "ss_loss_stats", "\n", "\n", "", "", "bar", ".", "finish", "(", ")", "\n", "ret", "=", "{", "k", ":", "v", ".", "avg", "for", "k", ",", "v", "in", "avg_loss_stats", ".", "items", "(", ")", "}", "\n", "if", "opt", ".", "self_supervise", ":", "\n", "            ", "addition_ret", "=", "{", "k", ":", "v", ".", "avg", "for", "k", ",", "v", "in", "avg_ss_loss_stats", ".", "items", "(", ")", "}", "\n", "ret", ".", "update", "(", "addition_ret", ")", "\n", "", "ret", "[", "'time'", "]", "=", "bar", ".", "elapsed_td", ".", "total_seconds", "(", ")", "/", "60.", "\n", "return", "ret", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.debug": [[170, 172], ["None"], "methods", ["None"], ["", "def", "debug", "(", "self", ",", "batch", ",", "output", ",", "iter_id", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.save_result": [[173, 175], ["None"], "methods", ["None"], ["", "def", "save_result", "(", "self", ",", "output", ",", "batch", ",", "results", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer._get_losses": [[176, 178], ["None"], "methods", ["None"], ["", "def", "_get_losses", "(", "self", ",", "opt", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val": [[179, 181], ["base_trainer.BaseTrainer.run_epoch"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.run_epoch"], ["", "def", "val", "(", "self", ",", "epoch", ",", "data_loader", ")", ":", "\n", "        ", "return", "self", ".", "run_epoch", "(", "'val'", ",", "epoch", ",", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.train": [[182, 184], ["base_trainer.BaseTrainer.run_epoch"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.run_epoch"], ["", "def", "train", "(", "self", ",", "epoch", ",", "data_loader", ")", ":", "\n", "        ", "return", "self", ".", "run_epoch", "(", "'train'", ",", "epoch", ",", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.val_for_eval": [[185, 187], ["base_trainer.BaseTrainer.run_epoch"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.run_epoch"], ["", "def", "val_for_eval", "(", "self", ",", "epoch", ",", "data_loader", ")", ":", "\n", "        ", "return", "self", ".", "run_epoch", "(", "'eval'", ",", "epoch", ",", "data_loader", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.app.ImageScanner.__init__": [[33, 38], ["models.detector.CenterNetDetector"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "self", ".", "logger", "=", "kwargs", "[", "'logger'", "]", "\n", "self", ".", "detector", "=", "CenterNetDetector", "(", "kwargs", "[", "'config'", "]", "[", "'MODEL_PATH'", "]", ",", "kwargs", "[", "'config'", "]", "[", "'NUM_CLASSES'", "]", ")", "\n", "self", ".", "img_size", "=", "kwargs", "[", "'config'", "]", "[", "'IMG_SIZE'", "]", "\n", "self", ".", "worker_timeout", "=", "8", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.app.ImageScanner.predict_entry_point": [[40, 80], ["time.time.time", "app.ImageScanner.logger.debug", "requests.request", "app.ImageScanner.logger.info", "PIL.Image.open().convert", "app.ImageScanner.detector.preprocess_image", "app.ImageScanner.logger.info", "app.ImageScanner.detector.inference", "app.ImageScanner.logger.info", "app.ImageScanner.logger.error", "app.ImageScanner.logger.error", "utils.checkValidImage", "app.ImageScanner.logger.error", "app.ImageScanner.logger.error", "app.ImageScanner.logger.error", "app.ImageScanner.logger.error", "app.ImageScanner.request_queue.get", "str", "PIL.Image.open", "str", "str", "time.time.time", "time.time.time", "io.BytesIO", "time.time.time", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.trainers.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector.preprocess_image", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector.inference", "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.checkValidImage"], ["", "def", "predict_entry_point", "(", "self", ",", "request", ")", ":", "\n", "    ", "start_time", "=", "time", "(", ")", "\n", "\n", "# Download content", "\n", "try", ":", "\n", "      ", "url", "=", "request", "[", "\"data\"", "]", "[", "0", "]", "[", "\"content\"", "]", "\n", "req", "=", "requests", ".", "request", "(", "'GET'", ",", "url", ",", "headers", "=", "{", "'appauthoritykey'", ":", "'imagescanner_app'", ",", "'appname'", ":", "'imagescanner_app'", "}", ",", "timeout", "=", "1", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"download time= %.3f\"", "%", "(", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "      ", "error_msg", "=", "\"Can't get request, url=%s\"", "%", "(", "url", ")", "\n", "self", ".", "logger", ".", "error", "(", "error_msg", ")", "\n", "self", ".", "logger", ".", "error", "(", "str", "(", "e", ")", ")", "\n", "return", "None", ",", "{", "'msg'", ":", "error_msg", ",", "'code'", ":", "400", "}", "\n", "\n", "# Open Image", "\n", "", "try", ":", "\n", "      ", "image", "=", "Image", ".", "open", "(", "BytesIO", "(", "req", ".", "content", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "if", "not", "checkValidImage", "(", "image", ")", ":", "\n", "        ", "error_msg", "=", "\"Resolution (%d, %d) is too small for url=%s\"", "%", "(", "image", ".", "size", "[", "0", "]", ",", "image", ".", "size", "[", "1", "]", ",", "url", ")", "\n", "return", "None", ",", "{", "'msg'", ":", "error_msg", ",", "'code'", ":", "400", "}", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "      ", "error_msg", "=", "\"Can't get image, url=%s\"", "%", "(", "url", ")", "\n", "self", ".", "logger", ".", "error", "(", "error_msg", ")", "\n", "self", ".", "logger", ".", "error", "(", "str", "(", "e", ")", ")", "\n", "return", "None", ",", "{", "'msg'", ":", "error_msg", ",", "'code'", ":", "400", "}", "\n", "\n", "", "try", ":", "\n", "      ", "image", "=", "self", ".", "detector", ".", "preprocess_image", "(", "image", ",", "self", ".", "img_size", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"preprocess time= %.3f\"", "%", "(", "time", "(", ")", "-", "start_time", ")", ")", "\n", "prob", "=", "self", ".", "detector", ".", "inference", "(", "image", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"inference time= %.3f\"", "%", "(", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "      ", "error_msg", "=", "\"Can't get prob, url=%s\"", "%", "(", "url", ")", "\n", "self", ".", "logger", ".", "error", "(", "error_msg", ")", "\n", "self", ".", "logger", ".", "error", "(", "str", "(", "e", ")", ")", "\n", "self", ".", "request_queue", ".", "get", "(", "key", ")", "\n", "return", "None", ",", "{", "'msg'", ":", "error_msg", ",", "'code'", ":", "400", "}", "\n", "\n", "", "self", ".", "logger", ".", "debug", "(", "\"Total exec time= %.3f\"", "%", "(", "time", "(", ")", "-", "start_time", ")", ")", "\n", "return", "prob", ",", "{", "'msg'", ":", "''", ",", "'code'", ":", "200", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.app.image_review_api": [[82, 113], ["app.route", "limiter.limit", "time.time", "utils.parse_request", "utils.prepared_response", "utils.get_response", "utils.get_response", "imagescanner.predict_entry_point", "utils.prepared_empty_response", "utils.get_response", "utils.get_response", "time.time", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.parse_request", "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.prepared_response", "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.get_response", "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.get_response", "home.repos.pwc.inspect_result.Guanghan_DANR.framework.app.ImageScanner.predict_entry_point", "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.prepared_empty_response", "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.get_response", "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.get_response"], ["", "", "@", "app", ".", "route", "(", "\"/imagereview\"", ",", "methods", "=", "[", "\"POST\"", "]", ")", "\n", "@", "limiter", ".", "limit", "(", "'60/second;3000/minute'", ")", "\n", "def", "image_review_api", "(", ")", ":", "\n", "  ", "\"\"\" for RESTful API\n  :return:\n  \"\"\"", "\n", "start_time", "=", "time", "(", ")", "\n", "request_json", ",", "status", "=", "parse_request", "(", "request", ",", "app", ".", "config", "[", "\"THRESHOLD\"", "]", ")", "\n", "if", "status", "[", "'code'", "]", "!=", "200", ":", "\n", "      ", "duration", "=", "time", "(", ")", "-", "start_time", "\n", "return", "get_response", "(", "request_json", ",", "status", ",", "duration", ")", "\n", "\n", "", "if", "'p203'", "in", "request_json", "[", "'retrieve_source'", "]", "[", "0", "]", "[", "'violation_type'", "]", "[", "'p20'", "]", ":", "\n", "      ", "result", ",", "status", "=", "imagescanner", ".", "predict_entry_point", "(", "request_json", ")", "\n", "", "else", ":", "\n", "      ", "response", "=", "prepared_empty_response", "(", "request_json", ")", "\n", "duration", "=", "time", "(", ")", "-", "start_time", "\n", "res", "=", "get_response", "(", "request_json", ",", "status", ",", "duration", ",", "response", ")", "\n", "return", "res", "\n", "\n", "", "if", "status", "[", "'code'", "]", "!=", "200", "or", "result", "is", "None", ":", "\n", "      ", "duration", "=", "time", "(", ")", "-", "start_time", "\n", "return", "get_response", "(", "request_json", ",", "status", ",", "duration", ")", "\n", "\n", "", "response", "=", "prepared_response", "(", "result", ",", "request_json", ")", "\n", "duration", "=", "time", "(", ")", "-", "start_time", "\n", "res", "=", "get_response", "(", "request_json", ",", "status", ",", "duration", ",", "response", ")", "\n", "return", "res", "\n", "\n", "\n", "# mp_logger", "\n", "", "log_listener_configurer", "(", "app", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.prepared_response": [[8, 36], ["int", "response.append", "output[].append", "float"], "function", ["None"], ["def", "prepared_response", "(", "prediction", ",", "request_json", ")", ":", "\n", "  ", "\"\"\"\n  :param predictions:\n  :param parse_result:\n  :param get_violation_result_fn:\n  :param dataset_violation_codes: {\"default\": {\"p20\": {p201\"}}}; {\"default\": {}} #\u7a7a\u4ee3\u8868\u5168\u90e8\n  :param set: (0:porn, 1:tagging, 2:objd, 3:retrieval)\n  :return:\n  \"\"\"", "\n", "response", "=", "[", "]", "\n", "output", "=", "{", "}", "\n", "output", "[", "'data_id'", "]", "=", "request_json", "[", "'data'", "]", "[", "0", "]", "[", "'data_id'", "]", "\n", "output", "[", "'violation'", "]", "=", "int", "(", "prediction", ">", "request_json", "[", "'violation_threshold'", "]", ")", "\n", "output", "[", "'violation_data'", "]", "=", "[", "]", "\n", "for", "item", "in", "request_json", "[", "'retrieve_source'", "]", ":", "\n", "      ", "violation_data", "=", "{", "}", "\n", "violation_data", "[", "'type'", "]", "=", "'p20'", "\n", "violation_data", "[", "'type_msg'", "]", "=", "'\u6d89\u653f'", "\n", "violation_data", "[", "'type_probability'", "]", "=", "'%.3f'", "%", "prediction", "\n", "violation_data", "[", "'hits'", "]", "=", "[", "{", "\n", "'dataset_name'", ":", "item", "[", "'dataset_name'", "]", ",", "\n", "'probability'", ":", "float", "(", "'%.3f'", "%", "prediction", ")", ",", "\n", "'md5'", ":", "''", ",", "\n", "'sub_type'", ":", "'p203'", "}", "]", "# 401 means weapon", "\n", "output", "[", "'violation_data'", "]", ".", "append", "(", "violation_data", ")", "\n", "\n", "", "response", ".", "append", "(", "output", ")", "\n", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.prepared_empty_response": [[39, 63], ["response.append", "output[].append"], "function", ["None"], ["", "def", "prepared_empty_response", "(", "request_json", ")", ":", "\n", "    ", "\"\"\"\n    :param predictions:\n    :param parse_result:\n    :param get_violation_result_fn:\n    :param dataset_violation_codes: {\"default\": {\"p20\": {p201\"}}}; {\"default\": {}} #\u7a7a\u4ee3\u8868\u5168\u90e8\n    :param set: (0:porn, 1:tagging, 2:objd, 3:retrieval)\n    :return:\n    \"\"\"", "\n", "response", "=", "[", "]", "\n", "output", "=", "{", "}", "\n", "output", "[", "'data_id'", "]", "=", "request_json", "[", "'data'", "]", "[", "0", "]", "[", "'data_id'", "]", "\n", "output", "[", "'violation'", "]", "=", "0", "\n", "output", "[", "'violation_data'", "]", "=", "[", "]", "\n", "for", "item", "in", "request_json", "[", "'retrieve_source'", "]", ":", "\n", "        ", "violation_data", "=", "{", "}", "\n", "violation_data", "[", "'type'", "]", "=", "'p20'", "\n", "violation_data", "[", "'type_msg'", "]", "=", "'\u6d89\u653f'", "\n", "violation_data", "[", "'type_probability'", "]", "=", "0", "\n", "violation_data", "[", "'hits'", "]", "=", "[", "]", "\n", "output", "[", "'violation_data'", "]", ".", "append", "(", "violation_data", ")", "\n", "\n", "", "response", ".", "append", "(", "output", ")", "\n", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.prepared_response_v2": [[65, 96], ["response.append", "int", "output[].append", "violation_data[].append"], "function", ["None"], ["", "def", "prepared_response_v2", "(", "prediction", ",", "request_json", ")", ":", "\n", "    ", "\"\"\"\n    :param predictions:\n    :param parse_result:\n    :param get_violation_result_fn:\n    :param dataset_violation_codes: {\"default\": {\"p20\": {p201\"}}}; {\"default\": {}} #\u7a7a\u4ee3\u8868\u5168\u90e8\n    :param set: (0:porn, 1:tagging, 2:objd, 3:retrieval)\n    :return:\n    \"\"\"", "\n", "response", "=", "[", "]", "\n", "output", "=", "{", "}", "\n", "output", "[", "'data_id'", "]", "=", "request_json", "[", "'data'", "]", "[", "0", "]", "[", "'data_id'", "]", "\n", "output", "[", "'violation'", "]", "=", "int", "(", "prediction", ">", "request_json", "[", "'violation_threshold'", "]", ")", "if", "prediction", "is", "not", "None", "else", "0", "\n", "output", "[", "'violation_data'", "]", "=", "[", "]", "\n", "for", "item", "in", "request_json", "[", "'retrieve_source'", "]", ":", "\n", "        ", "violation_data", "=", "{", "}", "\n", "violation_data", "[", "'type'", "]", "=", "'p20'", "\n", "violation_data", "[", "'type_msg'", "]", "=", "'\u6d89\u653f'", "\n", "violation_data", "[", "'type_probability'", "]", "=", "'%.3f'", "%", "prediction", "if", "prediction", "is", "not", "None", "else", "0", "\n", "violation_data", "[", "'hits'", "]", "=", "[", "]", "\n", "for", "subtype", "in", "item", "[", "'violation_type'", "]", "[", "'p20'", "]", ":", "\n", "            ", "hit", "=", "{", "\n", "'dataset_name'", ":", "item", "[", "'dataset_name'", "]", ",", "\n", "'probability'", ":", "None", "if", "subtype", "!=", "'p203'", "else", "'%.3f'", "%", "prediction", ",", "\n", "'md5'", ":", "''", ",", "\n", "'sub_type'", ":", "subtype", "}", "\n", "violation_data", "[", "'hits'", "]", ".", "append", "(", "hit", ")", "\n", "", "output", "[", "'violation_data'", "]", ".", "append", "(", "violation_data", ")", "\n", "\n", "", "response", ".", "append", "(", "output", ")", "\n", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.checkValidImage": [[98, 106], ["None"], "function", ["None"], ["", "def", "checkValidImage", "(", "pil_image", ",", "min_h", "=", "50", ",", "min_w", "=", "50", ")", ":", "\n", "  ", "\"\"\"\n  check if resolution is too small\n  :param image: IPLImage\n  :return: Boolean\n  \"\"\"", "\n", "image_w", ",", "image_h", "=", "pil_image", ".", "size", "\n", "return", "image_w", ">", "min_w", "and", "image_h", ">", "min_h", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.parse_request": [[107, 191], ["request.get_json", "isinstance", "isinstance", "isinstance", "len", "len", "isinstance", "isinstance", "len", "isinstance", "isinstance", "len", "isinstance", "isinstance", "filter_retrieve_source.append", "len", "filter_retrieve_source.append"], "function", ["None"], ["", "def", "parse_request", "(", "request", ":", "flask", ".", "request", ",", "threshold", ":", "float", ")", ":", "\n", "  ", "\"\"\"\n  This function parse request in a complete json format, and generate error\n      message and error code.\n  :return json: request json format\n          json: status\n  \"\"\"", "\n", "if", "not", "request", ".", "is_json", ":", "\n", "    ", "return", "None", ",", "{", "'msg'", ":", "'Only support json format'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "request_json", "=", "request", ".", "get_json", "(", ")", "\n", "if", "'request_no'", "not", "in", "request_json", "or", "request_json", "[", "'request_no'", "]", "is", "None", ":", "\n", "      ", "return", "request_json", ",", "{", "'msg'", ":", "'missing request_no'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "if", "not", "isinstance", "(", "request_json", "[", "'request_no'", "]", ",", "str", ")", ":", "\n", "      ", "return", "request_json", ",", "{", "'msg'", ":", "'request_no is not string'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "if", "'data'", "not", "in", "request_json", ":", "\n", "      ", "return", "request_json", ",", "{", "'msg'", ":", "'missing data'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "if", "'business_id'", "not", "in", "request_json", "or", "request_json", "[", "'business_id'", "]", "is", "None", ":", "\n", "      ", "return", "request_json", ",", "{", "'msg'", ":", "'missing business_id'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "if", "not", "isinstance", "(", "request_json", "[", "'business_id'", "]", ",", "str", ")", ":", "\n", "      ", "return", "request_json", ",", "{", "'msg'", ":", "'business_id is not string'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "data", "=", "request_json", "[", "'data'", "]", "\n", "if", "not", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "     ", "return", "request_json", ",", "{", "'msg'", ":", "'data is not list'", ",", "'code'", ":", "400", "}", "\n", "", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "     ", "return", "request_json", ",", "{", "'msg'", ":", "'data is empty'", ",", "'code'", ":", "400", "}", "\n", "", "if", "len", "(", "data", ")", ">", "1", ":", "\n", "     ", "return", "request_json", ",", "{", "'msg'", ":", "'multiple data'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "if", "not", "isinstance", "(", "data", "[", "0", "]", ",", "dict", ")", ":", "\n", "     ", "return", "request_json", ",", "{", "'msg'", ":", "'item in data is not dictionary'", ",", "'code'", ":", "400", "}", "\n", "", "if", "'content'", "not", "in", "data", "[", "0", "]", "or", "'data_id'", "not", "in", "data", "[", "0", "]", "or", "not", "isinstance", "(", "data", "[", "0", "]", "[", "'content'", "]", ",", "str", ")", "or", "not", "isinstance", "(", "data", "[", "0", "]", "[", "'data_id'", "]", ",", "str", ")", ":", "\n", "     ", "return", "request_json", ",", "{", "'msg'", ":", "'data format error'", ",", "'code'", ":", "400", "}", "\n", "", "if", "'violation_threshold'", "not", "in", "request_json", "or", "request_json", "[", "'violation_threshold'", "]", "is", "None", ":", "\n", "     ", "request_json", "[", "'violation_threshold'", "]", "=", "threshold", "\n", "\n", "", "if", "'retrieve_source'", "not", "in", "request_json", ":", "\n", "     ", "return", "request_json", ",", "{", "'msg'", ":", "'retrieve_source not given'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "if", "not", "isinstance", "(", "request_json", "[", "'retrieve_source'", "]", ",", "list", ")", ":", "\n", "      ", "return", "request_json", ",", "{", "'msg'", ":", "'retrieve_source not a list'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "if", "len", "(", "request_json", "[", "'retrieve_source'", "]", ")", "==", "0", ":", "\n", "     ", "request_json", "[", "'retrieve_source'", "]", "=", "[", "{", "'dataset_name'", ":", "'default'", ",", "\n", "'violation_type'", ":", "{", "\"p20\"", ":", "[", "'p203'", "]", "}", "}", "]", "\n", "#'violation_type':{\"p20\":[]}}]", "\n", "", "else", ":", "\n", "     ", "filter_retrieve_source", "=", "[", "]", "\n", "for", "item", "in", "request_json", "[", "'retrieve_source'", "]", ":", "\n", "       ", "if", "'dataset_name'", "not", "in", "item", "or", "\"violation_type\"", "not", "in", "item", ":", "\n", "         ", "return", "request_json", ",", "{", "'msg'", ":", "'retrieve_source format error'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "if", "not", "isinstance", "(", "item", "[", "'dataset_name'", "]", ",", "str", ")", ":", "\n", "         ", "return", "request_json", ",", "{", "'msg'", ":", "'dataset_name is not of type string'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "if", "item", "[", "'dataset_name'", "]", "not", "in", "[", "'default'", ",", "'fengkong'", "]", ":", "\n", "         ", "return", "request_json", ",", "{", "'msg'", ":", "'dataset_name {} is not valid'", ".", "format", "(", "item", "[", "'dataset_name'", "]", ")", ",", "'code'", ":", "400", "}", "\n", "\n", "", "if", "not", "isinstance", "(", "item", "[", "'violation_type'", "]", ",", "dict", ")", ":", "\n", "         ", "return", "request_json", ",", "{", "'msg'", ":", "'violation_type format error (not dict)'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "if", "'p20'", "in", "item", "[", "'violation_type'", "]", ":", "\n", "           ", "for", "cur_type", "in", "item", "[", "'violation_type'", "]", "[", "'p20'", "]", ":", "\n", "               ", "if", "cur_type", "not", "in", "[", "\"p201\"", ",", "\"p202\"", ",", "\"p203\"", ",", "\"p204\"", ",", "\"p205\"", ",", "\"p206\"", ",", "\"p207\"", ",", "\"p208\"", ",", "\"p209\"", "]", ":", "\n", "                   ", "return", "request_json", ",", "{", "'msg'", ":", "'violation_subtype does not match violation_type'", ",", "'code'", ":", "400", "}", "\n", "\n", "", "", "", "if", "'p20'", "in", "item", "[", "'violation_type'", "]", ":", "\n", "           ", "if", "item", "[", "'violation_type'", "]", "[", "'p20'", "]", "==", "[", "]", ":", "item", "[", "'violation_type'", "]", "[", "'p20'", "]", "=", "[", "'p203'", "]", "\n", "filter_retrieve_source", ".", "append", "(", "item", ")", "\n", "\n", "", "if", "len", "(", "item", "[", "'violation_type'", "]", ")", "==", "0", ":", "\n", "           ", "filter_retrieve_source", ".", "append", "(", "item", ")", "\n", "\n", "", "", "if", "len", "(", "filter_retrieve_source", ")", "==", "0", ":", "\n", "       ", "return", "request_json", ",", "{", "'msg'", ":", "'p20 not in retrieve_source'", ",", "'code'", ":", "400", "}", "\n", "", "request_json", "[", "'retrieve_source'", "]", "=", "filter_retrieve_source", "\n", "\n", "", "return", "request_json", ",", "{", "'msg'", ":", "''", ",", "'code'", ":", "200", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.get_response": [[208, 220], ["None"], "function", ["None"], ["", "def", "get_response", "(", "request_json", ",", "status", ",", "duration", ",", "response", "=", "[", "]", ",", "model_version", "=", "\"\"", ")", ":", "\n", "  ", "message_results", "=", "{", "\n", "\"request_no\"", ":", "request_json", "[", "\"request_no\"", "]", ",", "\n", "\"business_id\"", ":", "request_json", "[", "\"business_id\"", "]", ",", "\n", "\"service_type\"", ":", "\"image\"", ",", "\n", "\"model_version\"", ":", "model_version", ",", "\n", "\"status\"", ":", "status", "[", "'code'", "]", ",", "\n", "\"error_message\"", ":", "status", "[", "'msg'", "]", ",", "\n", "\"response\"", ":", "response", ",", "\n", "#\"processing times(s)\": \"%.3f\"%duration,", "\n", "}", "\n", "return", "message_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.log_speaker_configurer": [[238, 250], ["logging.getLogger", "logging.getLogger", "logging.getLogger.setLevel"], "function", ["None"], ["", "def", "log_speaker_configurer", "(", "app", ")", ":", "\n", "  ", "log_level_d", "=", "{", "\n", "\"debug\"", ":", "logging", ".", "DEBUG", ",", "\n", "\"warning\"", ":", "logging", ".", "WARNING", ",", "\n", "\"error\"", ":", "logging", ".", "ERROR", ",", "\n", "\"info\"", ":", "logging", ".", "INFO", ",", "\n", "}", "\n", "_log_level", "=", "app", ".", "config", "[", "\"LOG_LEVEL\"", "]", "\n", "log_level", "=", "log_level_d", "[", "_log_level", "]", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "log_level", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.log_listener_configurer": [[253, 266], ["os.makedirs", "os.path.join", "logging.handlers.TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler", "logging.Formatter", "logging.Formatter", "logging.handlers.TimedRotatingFileHandler.setFormatter", "logging.getLogger", "logging.getLogger", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "log_listener_configurer", "(", "app", ")", ":", "\n", "  ", "log_dir", "=", "app", ".", "config", "[", "\"LOG_DIR\"", "]", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "log_file_name", "=", "app", ".", "config", "[", "\"LOG_FILE_NAME\"", "]", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "log_file_name", ")", "\n", "file_handler", "=", "logging", ".", "handlers", ".", "TimedRotatingFileHandler", "(", "\n", "log_file", ",", "when", "=", "\"midnight\"", ",", "interval", "=", "1", "\n", ")", "\n", "file_handler", ".", "suffix", "=", "\"%Y%m%d\"", "\n", "logging_format", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s - %(levelname)s - %(threadName)s - %(funcName)s - %(message)s\"", ")", "\n", "file_handler", ".", "setFormatter", "(", "logging_format", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.log_listener_process": [[271, 284], ["configurer", "queue.get", "logging.getLogger", "logging.getLogger", "logging.getLogger.handle", "print", "traceback.print_exc"], "function", ["None"], ["", "def", "log_listener_process", "(", "queue", ",", "configurer", ",", "app", ")", ":", "\n", "    ", "configurer", "(", "app", ")", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "record", "=", "queue", ".", "get", "(", "block", "=", "True", ")", "\n", "if", "record", "is", "None", ":", "# We send this as a sentinel to tell the listener to quit.", "\n", "                ", "break", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "record", ".", "name", ")", "\n", "logger", ".", "handle", "(", "record", ")", "# No level or filter logic applied - just do it!", "\n", "", "except", "Exception", ":", "\n", "            ", "import", "sys", ",", "traceback", "\n", "print", "(", "'Whoops! Problem:'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "traceback", ".", "print_exc", "(", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.framework.utils.checkValidImage_CV2": [[108, 116], ["None"], "function", ["None"], ["  ", "\"\"\"\n  This function parse request in a complete json format, and generate error\n      message and error code.\n  :return json: request json format\n          json: status\n  \"\"\"", "\n", "if", "not", "request", ".", "is_json", ":", "\n", "    ", "return", "None", ",", "{", "'msg'", ":", "'Only support json format'", ",", "'code'", ":", "400", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.create_model": [[13, 19], ["model_tiny.get_pose_net", "model.get_pose_net"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.get_pose_net", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.get_pose_net"], ["\n", "def", "create_model", "(", "num_layers", ")", ":", "\n", "    ", "if", "num_layers", "==", "18", ":", "\n", "        ", "model", "=", "get_res18", "(", "num_layers", ",", "heads", "=", "opt", ".", "heads", ")", "\n", "", "elif", "num_layers", "==", "34", ":", "\n", "        ", "model", "=", "get_dla34", "(", "num_layers", ",", "heads", "=", "opt", ".", "heads", ")", "\n", "", "elif", "num_layers", "==", "50", ":", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.load_model": [[21, 75], ["torch.load", "torch.load", "print", "model.state_dict", "model.load_state_dict", "k.startswith", "print", "print", "optimizer.load_state_dict", "print", "print", "k.startswith", "print"], "function", ["None"], ["", "return", "model", "\n", "\n", "\n", "", "def", "load_model", "(", "model", ",", "model_path", ",", "optimizer", "=", "None", ",", "resume", "=", "False", ",", "\n", "lr", "=", "None", ",", "lr_step", "=", "None", ")", ":", "\n", "    ", "start_epoch", "=", "0", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "print", "(", "'loaded {}, epoch {}'", ".", "format", "(", "model_path", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "state_dict_", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "state_dict", "=", "{", "}", "\n", "\n", "# convert data_parallal to model", "\n", "for", "k", "in", "state_dict_", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "'module'", ")", "and", "not", "k", ".", "startswith", "(", "'module_list'", ")", ":", "\n", "            ", "state_dict", "[", "k", "[", "7", ":", "]", "]", "=", "state_dict_", "[", "k", "]", "\n", "", "else", ":", "\n", "            ", "state_dict", "[", "k", "]", "=", "state_dict_", "[", "k", "]", "\n", "", "", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "# check loaded parameters and created model parameters", "\n", "msg", "=", "'If you see this, your model does not fully load the '", "+", "'pre-trained weight. Please make sure '", "+", "'you have correctly specified --arch xxx '", "+", "'or set the correct --num_classes for your own dataset.'", "\n", "for", "k", "in", "state_dict", ":", "\n", "        ", "if", "k", "in", "model_state_dict", ":", "\n", "            ", "if", "state_dict", "[", "k", "]", ".", "shape", "!=", "model_state_dict", "[", "k", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'Skip loading parameter {}, required shape{}, '", "'loaded shape{}. {}'", ".", "format", "(", "\n", "k", ",", "model_state_dict", "[", "k", "]", ".", "shape", ",", "state_dict", "[", "k", "]", ".", "shape", ",", "msg", ")", ")", "\n", "state_dict", "[", "k", "]", "=", "model_state_dict", "[", "k", "]", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Drop parameter {}.'", ".", "format", "(", "k", ")", "+", "msg", ")", "\n", "", "", "for", "k", "in", "model_state_dict", ":", "\n", "        ", "if", "not", "(", "k", "in", "state_dict", ")", ":", "\n", "            ", "print", "(", "'No param {}.'", ".", "format", "(", "k", ")", "+", "msg", ")", "\n", "state_dict", "[", "k", "]", "=", "model_state_dict", "[", "k", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "# resume optimizer parameters", "\n", "if", "optimizer", "is", "not", "None", "and", "resume", ":", "\n", "        ", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "start_lr", "=", "lr", "\n", "for", "step", "in", "lr_step", ":", "\n", "                ", "if", "start_epoch", ">=", "step", ":", "\n", "                    ", "start_lr", "*=", "0.1", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "start_lr", "\n", "", "print", "(", "'Resumed optimizer with start lr'", ",", "start_lr", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No optimizer parameters in checkpoint.'", ")", "\n", "", "", "if", "optimizer", "is", "not", "None", ":", "\n", "        ", "return", "model", ",", "optimizer", ",", "start_epoch", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.get_affine_transform": [[80, 114], ["numpy.array", "utility.get_dir", "numpy.array", "numpy.zeros", "numpy.zeros", "utility.get_3rd_point", "utility.get_3rd_point", "numpy.array", "numpy.array", "cv2.getAffineTransform", "cv2.getAffineTransform", "isinstance", "isinstance", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_dir", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_3rd_point", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_3rd_point"], ["", "", "''' Image Pre-processing '''", "\n", "\n", "\n", "def", "get_affine_transform", "(", "center", ",", "\n", "scale", ",", "\n", "rot", ",", "\n", "output_size", ",", "\n", "shift", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "inv", "=", "0", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "scale", ",", "np", ".", "ndarray", ")", "and", "not", "isinstance", "(", "scale", ",", "list", ")", ":", "\n", "        ", "scale", "=", "np", ".", "array", "(", "[", "scale", ",", "scale", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "scale_tmp", "=", "scale", "\n", "src_w", "=", "scale_tmp", "[", "0", "]", "\n", "dst_w", "=", "output_size", "[", "0", "]", "\n", "dst_h", "=", "output_size", "[", "1", "]", "\n", "\n", "rot_rad", "=", "np", ".", "pi", "*", "rot", "/", "180", "\n", "src_dir", "=", "get_dir", "(", "[", "0", ",", "src_w", "*", "-", "0.5", "]", ",", "rot_rad", ")", "\n", "dst_dir", "=", "np", ".", "array", "(", "[", "0", ",", "dst_w", "*", "-", "0.5", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", "0", ",", ":", "]", "=", "center", "+", "scale_tmp", "*", "shift", "\n", "src", "[", "1", ",", ":", "]", "=", "center", "+", "src_dir", "+", "scale_tmp", "*", "shift", "\n", "dst", "[", "0", ",", ":", "]", "=", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", ",", "np", ".", "float32", ")", "+", "dst_dir", "\n", "\n", "src", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "src", "[", "0", ",", ":", "]", ",", "src", "[", "1", ",", ":", "]", ")", "\n", "dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "if", "inv", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "dst", ")", ",", "np", ".", "float32", "(", "src", ")", ")", "\n", "", "else", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.get_dir": [[116, 124], ["numpy.sin", "numpy.cos"], "function", ["None"], ["", "return", "trans", "\n", "\n", "\n", "", "def", "get_dir", "(", "src_point", ",", "rot_rad", ")", ":", "\n", "    ", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "\n", "src_result", "=", "[", "0", ",", "0", "]", "\n", "src_result", "[", "0", "]", "=", "src_point", "[", "0", "]", "*", "cs", "-", "src_point", "[", "1", "]", "*", "sn", "\n", "src_result", "[", "1", "]", "=", "src_point", "[", "0", "]", "*", "sn", "+", "src_point", "[", "1", "]", "*", "cs", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.get_3rd_point": [[126, 129], ["numpy.array"], "function", ["None"], ["return", "src_result", "\n", "\n", "\n", "", "def", "get_3rd_point", "(", "a", ",", "b", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.centernet_decode": [[134, 166], ["_nms.size", "utility._nms", "utility._topk", "utility._transpose_and_gather_feat", "clses.view().float.view().float", "scores.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utility._transpose_and_gather_feat", "reg.view.view", "wh.view.view", "clses.view().float.view().expand().long", "wh.view.gather().view", "wh.view.view", "xs.view", "ys.view", "xs.view", "ys.view", "clses.view().float.view", "clses.view().float.view().expand", "wh.view.gather", "clses.view().float.view"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._nms", "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._topk", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather"], ["", "''' CenterNet Ouput: Tensor Decoder '''", "\n", "\n", "\n", "def", "centernet_decode", "(", "heat", ",", "wh", ",", "reg", "=", "None", ",", "cat_spec_wh", "=", "False", ",", "K", "=", "100", ")", ":", "\n", "    ", "batch", ",", "cat", ",", "height", ",", "width", "=", "heat", ".", "size", "(", ")", "\n", "\n", "# heat = torch.sigmoid(heat)", "\n", "# perform nms on heatmaps", "\n", "heat", "=", "_nms", "(", "heat", ")", "\n", "\n", "scores", ",", "inds", ",", "clses", ",", "ys", ",", "xs", "=", "_topk", "(", "heat", ",", "K", "=", "K", ")", "\n", "if", "reg", "is", "not", "None", ":", "\n", "        ", "reg", "=", "_transpose_and_gather_feat", "(", "reg", ",", "inds", ")", "\n", "reg", "=", "reg", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "xs", "=", "xs", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "reg", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "ys", "=", "ys", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "reg", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "", "else", ":", "\n", "        ", "xs", "=", "xs", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "0.5", "\n", "ys", "=", "ys", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "0.5", "\n", "", "wh", "=", "_transpose_and_gather_feat", "(", "wh", ",", "inds", ")", "\n", "if", "cat_spec_wh", ":", "\n", "        ", "wh", "=", "wh", ".", "view", "(", "batch", ",", "K", ",", "cat", ",", "2", ")", "\n", "clses_ind", "=", "clses", ".", "view", "(", "batch", ",", "K", ",", "1", ",", "1", ")", ".", "expand", "(", "batch", ",", "K", ",", "1", ",", "2", ")", ".", "long", "(", ")", "\n", "wh", "=", "wh", ".", "gather", "(", "2", ",", "clses_ind", ")", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "wh", "=", "wh", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "", "clses", "=", "clses", ".", "view", "(", "batch", ",", "K", ",", "1", ")", ".", "float", "(", ")", "\n", "scores", "=", "scores", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "\n", "bboxes", "=", "torch", ".", "cat", "(", "[", "xs", "-", "wh", "[", "...", ",", "0", ":", "1", "]", "/", "2", ",", "\n", "ys", "-", "wh", "[", "...", ",", "1", ":", "2", "]", "/", "2", ",", "\n", "xs", "+", "wh", "[", "...", ",", "0", ":", "1", "]", "/", "2", ",", "\n", "ys", "+", "wh", "[", "...", ",", "1", ":", "2", "]", "/", "2", "]", ",", "dim", "=", "2", ")", "\n", "detections", "=", "torch", ".", "cat", "(", "[", "bboxes", ",", "scores", ",", "clses", "]", ",", "dim", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility._nms": [[168, 175], ["torch.functional.max_pool2d"], "function", ["None"], ["return", "detections", "\n", "\n", "\n", "", "def", "_nms", "(", "heat", ",", "kernel", "=", "3", ")", ":", "\n", "    ", "pad", "=", "(", "kernel", "-", "1", ")", "//", "2", "\n", "\n", "hmax", "=", "nn", ".", "functional", ".", "max_pool2d", "(", "\n", "heat", ",", "(", "kernel", ",", "kernel", ")", ",", "stride", "=", "1", ",", "padding", "=", "pad", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility._topk": [[177, 194], ["scores.size", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "_gather_feat().view", "_gather_feat().view", "_gather_feat().view", "scores.view", "topk_scores.view", "utility._gather_feat", "utility._gather_feat", "utility._gather_feat", "_gather_feat().view.view", "_gather_feat().view.view", "_gather_feat().view.view"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat"], ["return", "heat", "*", "keep", "\n", "\n", "\n", "", "def", "_topk", "(", "scores", ",", "K", "=", "40", ")", ":", "\n", "    ", "batch", ",", "cat", ",", "height", ",", "width", "=", "scores", ".", "size", "(", ")", "\n", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "scores", ".", "view", "(", "batch", ",", "cat", ",", "-", "1", ")", ",", "K", ")", "\n", "\n", "topk_inds", "=", "topk_inds", "%", "(", "height", "*", "width", ")", "\n", "topk_ys", "=", "(", "topk_inds", "/", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "topk_xs", "=", "(", "topk_inds", "%", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "\n", "topk_score", ",", "topk_ind", "=", "torch", ".", "topk", "(", "topk_scores", ".", "view", "(", "batch", ",", "-", "1", ")", ",", "K", ")", "\n", "topk_clses", "=", "(", "topk_ind", "/", "K", ")", ".", "int", "(", ")", "\n", "topk_inds", "=", "_gather_feat", "(", "\n", "topk_inds", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "topk_ys", "=", "_gather_feat", "(", "topk_ys", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "topk_xs", "=", "_gather_feat", "(", "topk_xs", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility._transpose_and_gather_feat": [[196, 201], ["_gather_feat.permute().contiguous", "_gather_feat.view", "utility._gather_feat", "_gather_feat.size", "_gather_feat.size", "_gather_feat.permute"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat"], ["return", "topk_score", ",", "topk_inds", ",", "topk_clses", ",", "topk_ys", ",", "topk_xs", "\n", "\n", "\n", "", "def", "_transpose_and_gather_feat", "(", "feat", ",", "ind", ")", ":", "\n", "    ", "feat", "=", "feat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ",", "feat", ".", "size", "(", "3", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility._gather_feat": [[203, 212], ["feat.view.size", "ind.unsqueeze().expand.unsqueeze().expand", "feat.view.gather", "ind.unsqueeze().expand.size", "ind.unsqueeze().expand.size", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "feat.view.view", "ind.unsqueeze().expand.unsqueeze", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather"], ["return", "feat", "\n", "\n", "\n", "", "def", "_gather_feat", "(", "feat", ",", "ind", ",", "mask", "=", "None", ")", ":", "\n", "    ", "dim", "=", "feat", ".", "size", "(", "2", ")", "\n", "ind", "=", "ind", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "ind", ".", "size", "(", "0", ")", ",", "ind", ".", "size", "(", "1", ")", ",", "dim", ")", "\n", "feat", "=", "feat", ".", "gather", "(", "1", ",", "ind", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "feat", ")", "\n", "feat", "=", "feat", "[", "mask", "]", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.flip_tensor": [[214, 216], ["torch.flip", "torch.flip"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip"], ["", "return", "feat", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.centernet_post_process": [[221, 239], ["range", "utility.transform_preds", "utility.transform_preds", "range", "ret.append", "numpy.concatenate().tolist", "numpy.concatenate", "dets[].astype", "dets[].astype"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.transform_preds", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.transform_preds"], ["", "'''  Post-processing '''", "\n", "\n", "\n", "def", "centernet_post_process", "(", "dets", ",", "c", ",", "s", ",", "h", ",", "w", ",", "num_classes", ")", ":", "\n", "# dets: batch x max_dets x dim", "\n", "# return 1-based class det dict", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "top_preds", "=", "{", "}", "\n", "dets", "[", "i", ",", ":", ",", ":", "2", "]", "=", "transform_preds", "(", "\n", "dets", "[", "i", ",", ":", ",", "0", ":", "2", "]", ",", "c", "[", "i", "]", ",", "s", "[", "i", "]", ",", "(", "w", ",", "h", ")", ")", "\n", "dets", "[", "i", ",", ":", ",", "2", ":", "4", "]", "=", "transform_preds", "(", "\n", "dets", "[", "i", ",", ":", ",", "2", ":", "4", "]", ",", "c", "[", "i", "]", ",", "s", "[", "i", "]", ",", "(", "w", ",", "h", ")", ")", "\n", "classes", "=", "dets", "[", "i", ",", ":", ",", "-", "1", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "inds", "=", "(", "classes", "==", "j", ")", "\n", "top_preds", "[", "j", "+", "1", "]", "=", "np", ".", "concatenate", "(", "[", "\n", "dets", "[", "i", ",", "inds", ",", ":", "4", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "dets", "[", "i", ",", "inds", ",", "4", ":", "5", "]", ".", "astype", "(", "np", ".", "float32", ")", "]", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.transform_preds": [[241, 247], ["numpy.zeros", "utility.get_affine_transform", "range", "utility.affine_transform"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform"], ["", "return", "ret", "\n", "\n", "\n", "", "def", "transform_preds", "(", "coords", ",", "center", ",", "scale", ",", "output_size", ")", ":", "\n", "    ", "target_coords", "=", "np", ".", "zeros", "(", "coords", ".", "shape", ")", "\n", "trans", "=", "get_affine_transform", "(", "center", ",", "scale", ",", "0", ",", "output_size", ",", "inv", "=", "1", ")", "\n", "for", "p", "in", "range", "(", "coords", ".", "shape", "[", "0", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.affine_transform": [[249, 253], ["numpy.dot", "numpy.array"], "function", ["None"], ["", "return", "target_coords", "\n", "\n", "\n", "", "def", "affine_transform", "(", "pt", ",", "t", ")", ":", "\n", "    ", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "1.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.censor": [[258, 272], ["pred_pos_cat_list.append"], "function", ["None"], ["", "''' Image Censoring and visualization '''", "\n", "\n", "\n", "def", "censor", "(", "opt", ",", "preds_all_cls", ")", ":", "\n", "    ", "censor_pred", "=", "False", "\n", "pred_pos_cat_list", "=", "[", "]", "\n", "max_conf", "=", "-", "1000", "\n", "for", "cat_id", "in", "opt", ".", "pos_ids", ":", "\n", "        ", "preds", "=", "preds_all_cls", "[", "cat_id", "]", "\n", "if", "preds", "==", "[", "]", ":", "continue", "\n", "for", "pred", "in", "preds", ":", "\n", "            ", "conf", "=", "pred", "[", "-", "1", "]", "\n", "if", "conf", ">=", "max_conf", ":", "\n", "                ", "max_conf", "=", "conf", "\n", "# if conf > self.id_to_thresh[cat_id]:   # using class-specific thresholds (during inference)", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.add_coco_bbox": [[274, 291], ["numpy.array", "int", "[].tolist", "cv2.rectangle", "cv2.getTextSize", "cv2.rectangle", "cv2.putText", "numpy.array"], "function", ["None"], ["                ", "censor_pred", "=", "True", "\n", "if", "opt", ".", "class_name", "[", "cat_id", "]", "not", "in", "pred_pos_cat_list", ":", "\n", "                    ", "pred_pos_cat_list", ".", "append", "(", "opt", ".", "class_name", "[", "cat_id", "]", ")", "\n", "", "", "", "", "return", "censor_pred", ",", "pred_pos_cat_list", ",", "max_conf", "\n", "\n", "\n", "", "def", "add_coco_bbox", "(", "img", ",", "bbox", ",", "cat", ",", "conf", "=", "1", ",", "names", "=", "opt", ".", "class_name", "[", "1", ":", "]", ",", "show_txt", "=", "True", ")", ":", "\n", "    ", "bbox", "=", "np", ".", "array", "(", "bbox", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "cat", "=", "int", "(", "cat", ")", "\n", "c", "=", "colors", "[", "cat", "]", "[", "0", "]", "[", "0", "]", ".", "tolist", "(", ")", "\n", "c", "=", "(", "255", "-", "np", ".", "array", "(", "c", ")", ")", ".", "tolist", "(", ")", "\n", "txt", "=", "'{}{:.1f}'", ".", "format", "(", "names", "[", "cat", "]", ",", "conf", ")", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "cat_size", "=", "cv2", ".", "getTextSize", "(", "txt", ",", "font", ",", "0.5", ",", "2", ")", "[", "0", "]", "\n", "cv2", ".", "rectangle", "(", "\n", "img", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "(", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ")", ",", "c", ",", "2", ")", "\n", "if", "show_txt", ":", "\n", "        ", "cv2", ".", "rectangle", "(", "img", ",", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.draw_bboxes_on_img": [[293, 299], ["range", "utility.add_coco_bbox"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.add_coco_bbox"], ["(", "bbox", "[", "0", "]", "+", "cat_size", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ")", ",", "c", ",", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "txt", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ")", ",", "\n", "font", ",", "0.5", ",", "(", "0", ",", "0", ",", "0", ")", ",", "thickness", "=", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "return", "img", "\n", "\n", "\n", "", "def", "draw_bboxes_on_img", "(", "img", ",", "results", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.utility.vis_censor": [[301, 361], ["numpy.ones", "int", "cv2.resize", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "numpy.hstack", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple"], "function", ["None"], ["        ", "for", "bbox", "in", "results", "[", "j", "]", ":", "\n", "            ", "if", "bbox", "[", "4", "]", ">", "opt", ".", "vis_thresh", ":", "\n", "                ", "add_coco_bbox", "(", "img", ",", "bbox", "[", ":", "4", "]", ",", "j", "-", "1", ",", "bbox", "[", "4", "]", ")", "\n", "", "", "", "return", "img", "\n", "\n", "\n", "", "def", "vis_censor", "(", "img", ",", "gt_censor_str", "=", "\" \"", ",", "gt_cls_str", "=", "\" \"", ",", "\n", "pred_censor_str", "=", "\" \"", ",", "pred_cls_str", "=", "\" \"", ",", "\n", "extra_str", "=", "\" \"", ")", ":", "\n", "    ", "ht", ",", "wid", ",", "nchannels", "=", "img", ".", "shape", "\n", "\n", "# create extra img", "\n", "debug_ht", "=", "512", "\n", "debug_wid", "=", "500", "\n", "debug_img", "=", "np", ".", "ones", "(", "(", "debug_ht", ",", "debug_wid", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "# resize img", "\n", "new_ht", "=", "debug_ht", "\n", "resize_ratio", "=", "1.0", "*", "ht", "/", "new_ht", "# = wid / new_wid", "\n", "new_wid", "=", "int", "(", "1.0", "*", "wid", "/", "resize_ratio", ")", "\n", "dim", "=", "(", "new_wid", ",", "new_ht", ")", "\n", "resized_img", "=", "cv2", ".", "resize", "(", "img", ",", "dim", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "# put text on extra img", "\n", "# font", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "# org", "\n", "org", "=", "[", "10", ",", "20", "]", "\n", "# fontScale", "\n", "fontScale", "=", "0.51", "\n", "# Blue color in BGR", "\n", "color", "=", "(", "255", ",", "255", ",", "255", ")", "\n", "# Line thickness of 2 px", "\n", "thickness", "=", "1", "\n", "\n", "# GT INFO", "\n", "text", "=", "'GT INFO:'", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   censor: {}'", ".", "format", "(", "gt_censor_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   classes to censor: {}'", ".", "format", "(", "gt_cls_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "40", "\n", "\n", "# pred INFO", "\n", "text", "=", "'Pred INFO:'", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   censor: {}'", ".", "format", "(", "pred_censor_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n", "text", "=", "'   classes to censor: {}'", ".", "format", "(", "pred_cls_str", ")", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "40", "\n", "\n", "# extra INFO", "\n", "text", "=", "'Extra INFO:'", "\n", "debug_img", "=", "cv2", ".", "putText", "(", "debug_img", ",", "text", ",", "tuple", "(", "org", ")", ",", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "org", "[", "1", "]", "+=", "20", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector.__init__": [[64, 76], ["model_resnest.get_pose_net", "torch.device", "torch.device", "torch.device", "torch.device", "detector.CenterNetDetector._load_weight", "detector.CenterNetDetector.net.to", "detector.CenterNetDetector.net.eval", "detector.CenterNetDetector._warmup", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.get_pose_net", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector._load_weight", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector._warmup"], ["\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "resized_image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "inp_width", ",", "inp_height", ")", ")", "\n", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "images", "=", "torch", ".", "from_numpy", "(", "resized_image", ")", ".", "float", "(", ")", "\n", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "return", "images", ",", "meta", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector._warmup": [[78, 82], ["numpy.random.rand", "detector.CenterNetDetector._normalize", "detector.CenterNetDetector.inference"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector._normalize", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector.inference"], ["\n", "", "def", "pre_process_affine", "(", "self", ",", "image", ",", "scale", "=", "1", ",", "meta", "=", "None", ")", ":", "\n", "        ", "height", ",", "width", "=", "image", ".", "shape", "[", "0", ":", "2", "]", "\n", "inp_height", ",", "inp_width", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector._load_weight": [[84, 98], ["collections.OrderedDict", "params.items", "detector.CenterNetDetector.net.state_dict().keys", "torch.load", "torch.load", "torch.load", "torch.load", "detector.CenterNetDetector.net.state_dict", "print", "detector.CenterNetDetector.net.state_dict", "detector.CenterNetDetector.net.state_dict"], "methods", ["None"], ["c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "height", ",", "width", ")", "*", "1.0", "\n", "trans_input", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "inp_width", ",", "inp_height", "]", ")", "\n", "inp_image", "=", "cv2", ".", "warpAffine", "(", "image", ",", "trans_input", ",", "(", "inp_width", ",", "inp_height", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "images", "=", "torch", ".", "from_numpy", "(", "inp_image", ")", ".", "float", "(", ")", "\n", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "return", "images", ",", "meta", "\n", "\n", "\n", "", "def", "process", "(", "self", ",", "images", ",", "return_time", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector._normalize": [[100, 106], ["numpy.array().astype", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["            ", "output", "=", "self", ".", "model", "(", "images", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid_", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "reg", "=", "output", "[", "'reg'", "]", "\n", "if", "self", ".", "opt", ".", "flip_test", ":", "\n", "                ", "hm", "=", "(", "hm", "[", "0", ":", "1", "]", "+", "flip_tensor", "(", "hm", "[", "1", ":", "2", "]", ")", ")", "/", "2", "\n", "wh", "=", "(", "wh", "[", "0", ":", "1", "]", "+", "flip_tensor", "(", "wh", "[", "1", ":", "2", "]", ")", ")", "/", "2", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector.preprocess_image": [[108, 128], ["time.time", "numpy.array", "detector.get_affine_transform", "cv2.warpAffine", "numpy.ascontiguousarray", "detector.CenterNetDetector._normalize", "numpy.array", "max"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector._normalize"], ["", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "forward_time", "=", "time", ".", "time", "(", ")", "\n", "dets", "=", "centernet_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "\n", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "", "if", "return_time", ":", "\n", "            ", "return", "output", ",", "dets", ",", "forward_time", "\n", "", "else", ":", "\n", "            ", "return", "output", ",", "dets", "\n", "\n", "", "", "def", "post_process", "(", "self", ",", "dets", ",", "meta", ",", "scale", "=", "1", ")", ":", "\n", "        ", "dets", "=", "dets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dets", "=", "dets", ".", "reshape", "(", "1", ",", "-", "1", ",", "dets", ".", "shape", "[", "2", "]", ")", "\n", "dets", "=", "centernet_post_process", "(", "dets", ".", "copy", "(", ")", ",", "\n", "[", "meta", "[", "'c'", "]", "]", ",", "[", "meta", "[", "'s'", "]", "]", ",", "meta", "[", "'out_height'", "]", ",", "\n", "meta", "[", "'out_width'", "]", ",", "\n", "self", ".", "opt", ".", "num_classes", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", ":", "\n", "            ", "dets", "[", "0", "]", "[", "j", "]", "=", "np", ".", "array", "(", "dets", "[", "0", "]", "[", "j", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "5", ")", "\n", "dets", "[", "0", "]", "[", "j", "]", "[", ":", ",", ":", "4", "]", "/=", "scale", "\n", "", "return", "dets", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.CenterNetDetector.inference": [[130, 140], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "image.unsqueeze_.unsqueeze_.unsqueeze_", "image.unsqueeze_.unsqueeze_.to", "hm[].reshape.cpu().data.numpy().max", "image.unsqueeze_.unsqueeze_.transpose", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "detector.CenterNetDetector.net", "outputs[].sigmoid_", "hm[].reshape", "hm[].reshape.cpu().data.numpy", "hm[].reshape.cpu"], "methods", ["None"], ["", "def", "merge_outputs", "(", "self", ",", "detections", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", ":", "\n", "            ", "results", "[", "j", "]", "=", "np", ".", "concatenate", "(", "\n", "[", "detection", "[", "j", "]", "for", "detection", "in", "detections", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "scores", "=", "np", ".", "hstack", "(", "\n", "[", "results", "[", "j", "]", "[", ":", ",", "4", "]", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", "]", ")", "\n", "if", "len", "(", "scores", ")", ">", "self", ".", "max_per_image", ":", "\n", "            ", "kth", "=", "len", "(", "scores", ")", "-", "self", ".", "max_per_image", "\n", "thresh", "=", "np", ".", "partition", "(", "scores", ",", "kth", ")", "[", "kth", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_classes", "+", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_dir": [[11, 19], ["numpy.sin", "numpy.cos"], "function", ["None"], ["from", "deploy_detector", ".", "utility", "import", "create_model", ",", "load_model", ",", "get_affine_transform", ",", "centernet_decode", ",", "centernet_post_process", ",", "flip_tensor", "\n", "\n", "class", "CenterNetDetector", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "gpus", "[", "0", "]", ">=", "0", ":", "\n", "            ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "            ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_3rd_point": [[21, 24], ["numpy.array"], "function", ["None"], ["self", ".", "model", "=", "create_model", "(", "opt", ".", "num_layers", ")", "\n", "self", ".", "model", "=", "load_model", "(", "self", ".", "model", ",", "opt", ".", "model_path", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "opt", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_affine_transform": [[26, 60], ["numpy.array", "detector.get_dir", "numpy.array", "numpy.zeros", "numpy.zeros", "detector.get_3rd_point", "detector.get_3rd_point", "numpy.array", "numpy.array", "cv2.getAffineTransform", "cv2.getAffineTransform", "isinstance", "isinstance", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_dir", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_3rd_point", "home.repos.pwc.inspect_result.Guanghan_DANR.models.detector.get_3rd_point"], ["self", ".", "mean", "=", "np", ".", "array", "(", "opt", ".", "mean", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "opt", ".", "std", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "self", ".", "max_per_image", "=", "opt", ".", "K", "\n", "self", ".", "num_classes", "=", "opt", ".", "num_classes", "\n", "self", ".", "scales", "=", "opt", ".", "test_scales", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "img_name", "=", "None", "\n", "self", ".", "transform_list", "=", "[", "transforms", ".", "Normalize", "(", "mean", "=", "opt", ".", "mean", ",", "std", "=", "opt", ".", "std", ")", "]", "\n", "self", ".", "mean_gpu", "=", "torch", ".", "from_numpy", "(", "self", ".", "mean", ")", ".", "to", "(", "self", ".", "opt", ".", "device", ")", ".", "reshape", "(", "3", ")", "\n", "self", ".", "std_gpu", "=", "torch", ".", "from_numpy", "(", "self", ".", "std", ")", ".", "to", "(", "self", ".", "opt", ".", "device", ")", ".", "reshape", "(", "3", ")", "\n", "\n", "\n", "", "def", "pre_process_org", "(", "self", ",", "image", ",", "scale", ",", "meta", "=", "None", ")", ":", "\n", "        ", "height", ",", "width", "=", "image", ".", "shape", "[", "0", ":", "2", "]", "\n", "new_height", "=", "int", "(", "height", "*", "scale", ")", "\n", "new_width", "=", "int", "(", "width", "*", "scale", ")", "\n", "\n", "inp_height", ",", "inp_width", "=", "self", ".", "opt", ".", "input_h", ",", "self", ".", "opt", ".", "input_w", "\n", "c", "=", "np", ".", "array", "(", "[", "new_width", "/", "2.", ",", "new_height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "height", ",", "width", ")", "*", "1.0", "\n", "\n", "trans_input", "=", "get_affine_transform", "(", "c", ",", "s", ",", "0", ",", "[", "inp_width", ",", "inp_height", "]", ")", "\n", "resized_image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "new_width", ",", "new_height", ")", ")", "\n", "inp_image", "=", "cv2", ".", "warpAffine", "(", "resized_image", ",", "trans_input", ",", "(", "inp_width", ",", "inp_height", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "inp_image", "=", "(", "(", "inp_image", "/", "255.", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "images", "=", "inp_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "reshape", "(", "1", ",", "3", ",", "inp_height", ",", "inp_width", ")", "\n", "images", "=", "torch", ".", "from_numpy", "(", "images", ")", "\n", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "return", "images", ",", "meta", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.SplAtConv2d.__init__": [[42, 76], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "max", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "model_resnest.rSoftMax", "RFConv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "norm_layer", "model_resnest.DropBlock2D"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "kernel_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SplAtConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "rectify", "=", "rectify", "and", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "inter_channels", "=", "max", "(", "in_channels", "*", "radix", "//", "reduction_factor", ",", "32", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "if", "self", ".", "rectify", ":", "\n", "# pip install rfconv", "\n", "# rectified convolution", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv", "=", "RFConv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "average_mode", "=", "rectify_avg", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "**", "kwargs", ")", "\n", "", "self", ".", "use_bn", "=", "norm_layer", "is", "not", "None", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn0", "=", "norm_layer", "(", "channels", "*", "radix", ")", "\n", "", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "channels", ",", "inter_channels", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "norm_layer", "(", "inter_channels", ")", "\n", "", "self", ".", "fc2", "=", "Conv2d", "(", "inter_channels", ",", "channels", "*", "radix", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "rsoftmax", "=", "rSoftMax", "(", "radix", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.SplAtConv2d.forward": [[77, 107], ["model_resnest.SplAtConv2d.conv", "model_resnest.SplAtConv2d.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "model_resnest.SplAtConv2d.fc1", "model_resnest.SplAtConv2d.relu", "model_resnest.SplAtConv2d.fc2", "model_resnest.SplAtConv2d.rsoftmax().view", "sum.contiguous", "model_resnest.SplAtConv2d.bn0", "model_resnest.SplAtConv2d.dropblock", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "model_resnest.SplAtConv2d.bn1", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "model_resnest.SplAtConv2d.rsoftmax", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "x", "=", "self", ".", "dropblock", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "batch", ",", "rchannel", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "splited", "=", "torch", ".", "split", "(", "x", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "gap", "=", "sum", "(", "splited", ")", "\n", "", "else", ":", "\n", "            ", "gap", "=", "x", "\n", "", "gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "gap", ",", "1", ")", "\n", "gap", "=", "self", ".", "fc1", "(", "gap", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "gap", "=", "self", ".", "bn1", "(", "gap", ")", "\n", "", "gap", "=", "self", ".", "relu", "(", "gap", ")", "\n", "\n", "atten", "=", "self", ".", "fc2", "(", "gap", ")", "\n", "atten", "=", "self", ".", "rsoftmax", "(", "atten", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "attens", "=", "torch", ".", "split", "(", "atten", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "out", "=", "sum", "(", "[", "att", "*", "split", "for", "(", "att", ",", "split", ")", "in", "zip", "(", "attens", ",", "splited", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "atten", "*", "x", "\n", "", "return", "out", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.rSoftMax.__init__": [[109, 113], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radix", ",", "cardinality", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.rSoftMax.forward": [[114, 123], ["torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.view().transpose", "torch.sigmoid.view().transpose", "torch.softmax", "torch.softmax", "torch.sigmoid.reshape", "torch.sigmoid.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.view", "torch.sigmoid.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "batch", ",", "self", ".", "cardinality", ",", "self", ".", "radix", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "batch", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.DropBlock2D.__init__": [[128, 130], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.GlobalAvgPool2d.__init__": [[132, 135], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Global average pooling over the input's spatial dimensions\"\"\"", "\n", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.GlobalAvgPool2d.forward": [[136, 138], ["torch.nn.functional.adaptive_avg_pool2d().view", "torch.nn.functional.adaptive_avg_pool2d().view", "inputs.size", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "inputs", ",", "1", ")", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.Bottleneck.__init__": [[144, 203], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "int", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "model_resnest.DropBlock2D", "model_resnest.DropBlock2D", "model_resnest.SplAtConv2d", "zeros_", "model_resnest.DropBlock2D", "RFConv2d", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "radix", "=", "1", ",", "cardinality", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "dilation", "=", "1", ",", "is_first", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "norm_layer", "=", "None", ",", "dropblock_prob", "=", "0.0", ",", "last_gamma", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "int", "(", "planes", "*", "(", "bottleneck_width", "/", "64.", ")", ")", "*", "cardinality", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "group_width", ")", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "and", "(", "stride", ">", "1", "or", "is_first", ")", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "if", "self", ".", "avd", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", ",", "padding", "=", "1", ")", "\n", "stride", "=", "1", "\n", "\n", "", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock1", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "if", "radix", "==", "1", ":", "\n", "                ", "self", ".", "dropblock2", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "dropblock3", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "\n", "", "if", "radix", ">=", "1", ":", "\n", "            ", "self", ".", "conv2", "=", "SplAtConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "radix", "=", "radix", ",", "rectify", "=", "rectified_conv", ",", "\n", "rectify_avg", "=", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "rectified_conv", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv2", "=", "RFConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "average_mode", "=", "rectify_avg", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "4", ")", "\n", "\n", "if", "last_gamma", ":", "\n", "            ", "from", "torch", ".", "nn", ".", "init", "import", "zeros_", "\n", "zeros_", "(", "self", ".", "bn3", ".", "weight", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.Bottleneck.forward": [[204, 238], ["model_resnest.Bottleneck.conv1", "model_resnest.Bottleneck.bn1", "model_resnest.Bottleneck.relu", "model_resnest.Bottleneck.conv2", "model_resnest.Bottleneck.conv3", "model_resnest.Bottleneck.bn3", "model_resnest.Bottleneck.relu", "model_resnest.Bottleneck.dropblock1", "model_resnest.Bottleneck.avd_layer", "model_resnest.Bottleneck.bn2", "model_resnest.Bottleneck.relu", "model_resnest.Bottleneck.avd_layer", "model_resnest.Bottleneck.dropblock3", "model_resnest.Bottleneck.downsample", "model_resnest.Bottleneck.dropblock2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd", "and", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "radix", "==", "0", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "                ", "out", "=", "self", ".", "dropblock2", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "avd", "and", "not", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock3", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.ResNet.__init__": [[258, 361], ["torch.nn.Module.__init__", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_deconv_layer", "sorted", "torch.nn.Sequential", "torch.nn.Sequential", "conv_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet.__setattr__", "conv_layer", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "conv_layer", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "conv_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_layer", "model_resnest.ResNet._make_layer", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_deconv_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer"], ["\n", "# pylint: disable=unused-variable", "\n", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "heads", ",", "head_conv", ",", "\n", "radix", "=", "1", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "dilated", "=", "False", ",", "dilation", "=", "1", ",", "\n", "deep_stem", "=", "False", ",", "stem_width", "=", "64", ",", "avg_down", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "\n", "final_drop", "=", "0.0", ",", "dropblock_prob", "=", "0", ",", "\n", "last_gamma", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\n", "        ", "self", ".", "deconv_with_bias", "=", "False", "\n", "self", ".", "heads", "=", "heads", "\n", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "# ResNet-D params", "\n", "self", ".", "inplanes", "=", "stem_width", "*", "2", "if", "deep_stem", "else", "64", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "last_gamma", "=", "last_gamma", "\n", "# ResNeSt params", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rectified_conv", "=", "rectified_conv", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "if", "rectified_conv", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "conv_layer", "=", "RFConv2d", "\n", "", "else", ":", "\n", "            ", "conv_layer", "=", "nn", ".", "Conv2d", "\n", "", "conv_kwargs", "=", "{", "'average_mode'", ":", "rectify_avg", "}", "if", "rectified_conv", "else", "{", "}", "\n", "if", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", "(", "3", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_layer", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "**", "conv_kwargs", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ",", "is_first", "=", "False", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "if", "dilated", "or", "dilation", "==", "4", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "dilation", "==", "2", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "\n", "", "'''\n        self.avgpool = GlobalAvgPool2d()\n        self.drop = nn.Dropout(final_drop) if final_drop > 0.0 else None\n        self.fc = nn.Linear(512 * block.expansion, num_classes)\n        '''", "\n", "\n", "# used for deconv layers", "\n", "self", ".", "deconv_layers", "=", "self", ".", "_make_deconv_layer", "(", "\n", "3", ",", "\n", "[", "256", ",", "256", ",", "256", "]", ",", "\n", "[", "4", ",", "4", ",", "4", "]", ",", "\n", ")", "\n", "# self.final_layer = []", "\n", "\n", "for", "head", "in", "sorted", "(", "self", ".", "heads", ")", ":", "\n", "            ", "num_output", "=", "self", ".", "heads", "[", "head", "]", "\n", "if", "head_conv", ">", "0", ":", "\n", "                ", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "num_output", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "fc", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "num_output", ",", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.ResNet._make_layer": [[363, 417], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "down_layers.append", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "layers.append", "down_layers.append", "down_layers.append", "norm_layer", "block", "layers.append", "RuntimeError", "block", "down_layers.append", "down_layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "block", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d"], "methods", ["None"], ["stride", "=", "1", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n", "# self.final_layer = nn.ModuleList(self.final_layer)", "\n", "", "'''\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n                m.weight.data.normal_(0, math.sqrt(2. / n))\n            elif isinstance(m, norm_layer):\n                m.weight.data.fill_(1)\n                m.bias.data.zero_()\n        '''", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "is_first", "=", "True", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "down_layers", "=", "[", "]", "\n", "if", "self", ".", "avg_down", ":", "\n", "                ", "if", "dilation", "==", "1", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "dilation", "==", "1", "or", "dilation", "==", "2", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "1", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "elif", "dilation", "==", "4", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "2", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.ResNet._get_deconv_cfg": [[418, 430], ["None"], "methods", ["None"], ["", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"=> unknown dilation size: {}\"", ".", "format", "(", "dilation", ")", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "dilation", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.ResNet._make_deconv_layer": [[431, 457], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "len", "len", "model_resnest.ResNet._get_deconv_cfg", "layers.append", "layers.append", "layers.append", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._get_deconv_cfg"], ["\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "_get_deconv_cfg", "(", "self", ",", "deconv_kernel", ",", "index", ")", ":", "\n", "        ", "if", "deconv_kernel", "==", "4", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "0", "\n", "", "elif", "deconv_kernel", "==", "3", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "1", "\n", "", "elif", "deconv_kernel", "==", "2", ":", "\n", "            ", "padding", "=", "0", "\n", "output_padding", "=", "0", "\n", "\n", "", "return", "deconv_kernel", ",", "padding", ",", "output_padding", "\n", "\n", "", "def", "_make_deconv_layer", "(", "self", ",", "num_layers", ",", "num_filters", ",", "num_kernels", ")", ":", "\n", "        ", "assert", "num_layers", "==", "len", "(", "num_filters", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "assert", "num_layers", "==", "len", "(", "num_kernels", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "kernel", ",", "padding", ",", "output_padding", "=", "self", ".", "_get_deconv_cfg", "(", "num_kernels", "[", "i", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.ResNet.forward": [[458, 474], ["model_resnest.ResNet.conv1", "model_resnest.ResNet.bn1", "model_resnest.ResNet.relu", "model_resnest.ResNet.maxpool", "model_resnest.ResNet.layer1", "model_resnest.ResNet.layer2", "model_resnest.ResNet.layer3", "model_resnest.ResNet.layer4", "model_resnest.ResNet.deconv_layers", "model_resnest.ResNet.__getattr__"], "methods", ["None"], ["planes", "=", "num_filters", "[", "i", "]", "\n", "layers", ".", "append", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "self", ".", "inplanes", ",", "\n", "out_channels", "=", "planes", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "bias", "=", "self", ".", "deconv_with_bias", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.ResNet.init_weights": [[475, 502], ["model_resnest.ResNet.deconv_layers.named_modules", "model_resnest.ResNet.load_state_dict", "print", "print", "ValueError", "isinstance", "model_resnest.ResNet.__getattr__", "enumerate", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.nn.init.normal_", "torch.nn.init.normal_", "isinstance", "model_resnest.ResNet.modules", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "'''\n        x = self.avgpool(x)\n        #x = x.view(x.size(0), -1)\n        x = torch.flatten(x, 1)\n        if self.drop:\n            x = self.drop(x)\n        x = self.fc(x)\n        return x\n        '''", "\n", "\n", "x", "=", "self", ".", "deconv_layers", "(", "x", ")", "\n", "ret", "=", "{", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "ret", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "x", ")", "\n", "", "return", "[", "ret", "]", "\n", "\n", "", "def", "init_weights", "(", "self", ",", "num_layers", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "if", "pretrained", ":", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.short_hash": [[19, 23], ["ValueError"], "function", ["None"], ["def", "short_hash", "(", "name", ")", ":", "\n", "    ", "if", "name", "not", "in", "_model_sha256", ":", "\n", "        ", "raise", "ValueError", "(", "'Pretrained model for {name} is not available.'", ".", "format", "(", "name", "=", "name", ")", ")", "\n", "", "return", "_model_sha256", "[", "name", "]", "[", ":", "8", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.resnest50": [[28, 37], ["model_resnest.ResNet", "ResNet.load_state_dict", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url"], "function", ["None"], ["def", "resnest50", "(", "pretrained", "=", "False", ",", "root", "=", "'/home/DANR/weights'", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "radix", "=", "2", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "32", ",", "avg_down", "=", "True", ",", "\n", "avd", "=", "True", ",", "avd_first", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "resnest_model_urls", "[", "'resnest50'", "]", ",", "progress", "=", "True", ",", "check_hash", "=", "True", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model_resnest.get_pose_net": [[510, 518], ["model_resnest.ResNet"], "function", ["None"], ["                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "# print('=> init {}.weight as 1'.format(name))", "\n", "# print('=> init {}.bias as 0'.format(name))", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "# print('=> init final conv weights from normal distribution')", "\n", "", "", "for", "head", "in", "self", ".", "heads", ":", "\n", "                ", "final_layer", "=", "self", ".", "__getattr__", "(", "head", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.__init__": [[42, 61], ["torch.nn.modules.Module.__init__", "torch.cuda.is_available", "list", "len", "data_parallel._DataParallel.module.cuda", "range", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "module", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "        ", "super", "(", "_DataParallel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "module", "=", "module", "\n", "self", ".", "device_ids", "=", "[", "]", "\n", "return", "\n", "\n", "", "if", "device_ids", "is", "None", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "if", "output_device", "is", "None", ":", "\n", "            ", "output_device", "=", "device_ids", "[", "0", "]", "\n", "", "self", ".", "dim", "=", "dim", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "device_ids", "=", "device_ids", "\n", "self", ".", "chunk_sizes", "=", "chunk_sizes", "\n", "self", ".", "output_device", "=", "output_device", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "self", ".", "module", ".", "cuda", "(", "device_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.forward": [[62, 71], ["data_parallel._DataParallel.scatter", "data_parallel._DataParallel.replicate", "data_parallel._DataParallel.parallel_apply", "data_parallel._DataParallel.gather", "data_parallel._DataParallel.module", "len", "data_parallel._DataParallel.module", "len"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.scatter_gather.scatter", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.replicate", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.parallel_apply", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather"], ["", "", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", ",", "self", ".", "chunk_sizes", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "outputs", "=", "self", ".", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ")", "\n", "return", "self", ".", "gather", "(", "outputs", ",", "self", ".", "output_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.replicate": [[72, 74], ["torch.nn.parallel.replicate.replicate"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.replicate"], ["", "def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "return", "replicate", "(", "module", ",", "device_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.scatter": [[75, 77], ["scatter_gather.scatter_kwargs"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.scatter_gather.scatter_kwargs"], ["", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ",", "chunk_sizes", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ",", "chunk_sizes", "=", "self", ".", "chunk_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.parallel_apply": [[78, 80], ["torch.nn.parallel.parallel_apply.parallel_apply", "len"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.parallel_apply"], ["", "def", "parallel_apply", "(", "self", ",", "replicas", ",", "inputs", ",", "kwargs", ")", ":", "\n", "        ", "return", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", "[", ":", "len", "(", "replicas", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather": [[81, 83], ["torch.nn.parallel.scatter_gather.gather"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather"], ["", "def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel.data_parallel": [[85, 116], ["scatter_gather.scatter_kwargs", "torch.nn.parallel.replicate.replicate", "torch.nn.parallel.parallel_apply.parallel_apply", "torch.nn.parallel.scatter_gather.gather", "isinstance", "list", "len", "module", "range", "len", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.scatter_gather.scatter_kwargs", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.replicate", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.parallel_apply", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather"], ["", "", "def", "data_parallel", "(", "module", ",", "inputs", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "module_kwargs", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Evaluates module(input) in parallel across the GPUs given in device_ids.\n\n    This is the functional version of the DataParallel module.\n\n    Args:\n        module: the module to evaluate in parallel\n        inputs: inputs to the module\n        device_ids: GPU ids on which to replicate module\n        output_device: GPU location of the output  Use -1 to indicate the CPU.\n            (default: device_ids[0])\n    Returns:\n        a Variable containing the result of module(input) located on\n        output_device\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "        ", "inputs", "=", "(", "inputs", ",", ")", "\n", "\n", "", "if", "device_ids", "is", "None", ":", "\n", "        ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "", "if", "output_device", "is", "None", ":", "\n", "        ", "output_device", "=", "device_ids", "[", "0", "]", "\n", "\n", "", "inputs", ",", "module_kwargs", "=", "scatter_kwargs", "(", "inputs", ",", "module_kwargs", ",", "device_ids", ",", "dim", ")", "\n", "if", "len", "(", "device_ids", ")", "==", "1", ":", "\n", "        ", "return", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "module_kwargs", "[", "0", "]", ")", "\n", "", "used_device_ids", "=", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", "\n", "replicas", "=", "replicate", "(", "module", ",", "used_device_ids", ")", "\n", "outputs", "=", "parallel_apply", "(", "replicas", ",", "inputs", ",", "module_kwargs", ",", "used_device_ids", ")", "\n", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel.DataParallel": [[117, 127], ["range", "data_parallel._DataParallel", "torch.nn.DataParallel", "len", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel.DataParallel", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel.DataParallel"], ["", "def", "DataParallel", "(", "module", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "    ", "if", "chunk_sizes", "is", "None", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "DataParallel", "(", "module", ",", "device_ids", ",", "output_device", ",", "dim", ")", "\n", "", "standard_size", "=", "True", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "chunk_sizes", ")", ")", ":", "\n", "        ", "if", "chunk_sizes", "[", "i", "]", "!=", "chunk_sizes", "[", "0", "]", ":", "\n", "            ", "standard_size", "=", "False", "\n", "", "", "if", "standard_size", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "DataParallel", "(", "module", ",", "device_ids", ",", "output_device", ",", "dim", ")", "\n", "", "return", "_DataParallel", "(", "module", ",", "device_ids", ",", "output_device", ",", "dim", ",", "chunk_sizes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._nms": [[10, 17], ["torch.functional.max_pool2d"], "function", ["None"], ["def", "_nms", "(", "heat", ",", "kernel", "=", "3", ")", ":", "\n", "    ", "pad", "=", "(", "kernel", "-", "1", ")", "//", "2", "\n", "\n", "hmax", "=", "nn", ".", "functional", ".", "max_pool2d", "(", "\n", "heat", ",", "(", "kernel", ",", "kernel", ")", ",", "stride", "=", "1", ",", "padding", "=", "pad", ")", "\n", "keep", "=", "(", "hmax", "==", "heat", ")", ".", "float", "(", ")", "\n", "return", "heat", "*", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._left_aggregate": [[19, 31], ["heat.transpose().contiguous.reshape", "heat.transpose().contiguous.transpose().contiguous", "heat.transpose().contiguous.clone", "range", "heat.transpose().contiguous.transpose", "inds.float"], "function", ["None"], ["", "def", "_left_aggregate", "(", "heat", ")", ":", "\n", "    ", "'''\n        heat: batchsize x channels x h x w\n    '''", "\n", "shape", "=", "heat", ".", "shape", "\n", "heat", "=", "heat", ".", "reshape", "(", "-", "1", ",", "heat", ".", "shape", "[", "3", "]", ")", "\n", "heat", "=", "heat", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "ret", "=", "heat", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "heat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "inds", "=", "(", "heat", "[", "i", "]", ">=", "heat", "[", "i", "-", "1", "]", ")", "\n", "ret", "[", "i", "]", "+=", "ret", "[", "i", "-", "1", "]", "*", "inds", ".", "float", "(", ")", "\n", "", "return", "(", "ret", "-", "heat", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._right_aggregate": [[33, 45], ["heat.transpose().contiguous.reshape", "heat.transpose().contiguous.transpose().contiguous", "heat.transpose().contiguous.clone", "range", "heat.transpose().contiguous.transpose", "inds.float"], "function", ["None"], ["", "def", "_right_aggregate", "(", "heat", ")", ":", "\n", "    ", "'''\n        heat: batchsize x channels x h x w\n    '''", "\n", "shape", "=", "heat", ".", "shape", "\n", "heat", "=", "heat", ".", "reshape", "(", "-", "1", ",", "heat", ".", "shape", "[", "3", "]", ")", "\n", "heat", "=", "heat", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "ret", "=", "heat", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "heat", ".", "shape", "[", "0", "]", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "inds", "=", "(", "heat", "[", "i", "]", ">=", "heat", "[", "i", "+", "1", "]", ")", "\n", "ret", "[", "i", "]", "+=", "ret", "[", "i", "+", "1", "]", "*", "inds", ".", "float", "(", ")", "\n", "", "return", "(", "ret", "-", "heat", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._top_aggregate": [[47, 60], ["heat.transpose().contiguous.transpose", "heat.transpose().contiguous.reshape", "heat.transpose().contiguous.transpose().contiguous", "heat.transpose().contiguous.clone", "range", "heat.transpose().contiguous.transpose", "inds.float"], "function", ["None"], ["", "def", "_top_aggregate", "(", "heat", ")", ":", "\n", "    ", "'''\n        heat: batchsize x channels x h x w\n    '''", "\n", "heat", "=", "heat", ".", "transpose", "(", "3", ",", "2", ")", "\n", "shape", "=", "heat", ".", "shape", "\n", "heat", "=", "heat", ".", "reshape", "(", "-", "1", ",", "heat", ".", "shape", "[", "3", "]", ")", "\n", "heat", "=", "heat", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "ret", "=", "heat", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "heat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "inds", "=", "(", "heat", "[", "i", "]", ">=", "heat", "[", "i", "-", "1", "]", ")", "\n", "ret", "[", "i", "]", "+=", "ret", "[", "i", "-", "1", "]", "*", "inds", ".", "float", "(", ")", "\n", "", "return", "(", "ret", "-", "heat", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "shape", ")", ".", "transpose", "(", "3", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._bottom_aggregate": [[62, 75], ["heat.transpose().contiguous.transpose", "heat.transpose().contiguous.reshape", "heat.transpose().contiguous.transpose().contiguous", "heat.transpose().contiguous.clone", "range", "heat.transpose().contiguous.transpose", "inds.float"], "function", ["None"], ["", "def", "_bottom_aggregate", "(", "heat", ")", ":", "\n", "    ", "'''\n        heat: batchsize x channels x h x w\n    '''", "\n", "heat", "=", "heat", ".", "transpose", "(", "3", ",", "2", ")", "\n", "shape", "=", "heat", ".", "shape", "\n", "heat", "=", "heat", ".", "reshape", "(", "-", "1", ",", "heat", ".", "shape", "[", "3", "]", ")", "\n", "heat", "=", "heat", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "ret", "=", "heat", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "heat", ".", "shape", "[", "0", "]", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "inds", "=", "(", "heat", "[", "i", "]", ">=", "heat", "[", "i", "+", "1", "]", ")", "\n", "ret", "[", "i", "]", "+=", "ret", "[", "i", "+", "1", "]", "*", "inds", ".", "float", "(", ")", "\n", "", "return", "(", "ret", "-", "heat", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "shape", ")", ".", "transpose", "(", "3", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._h_aggregate": [[77, 80], ["decoder._left_aggregate", "decoder._right_aggregate"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._left_aggregate", "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._right_aggregate"], ["", "def", "_h_aggregate", "(", "heat", ",", "aggr_weight", "=", "0.1", ")", ":", "\n", "    ", "return", "aggr_weight", "*", "_left_aggregate", "(", "heat", ")", "+", "aggr_weight", "*", "_right_aggregate", "(", "heat", ")", "+", "heat", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._v_aggregate": [[82, 85], ["decoder._top_aggregate", "decoder._bottom_aggregate"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._top_aggregate", "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._bottom_aggregate"], ["", "def", "_v_aggregate", "(", "heat", ",", "aggr_weight", "=", "0.1", ")", ":", "\n", "    ", "return", "aggr_weight", "*", "_top_aggregate", "(", "heat", ")", "+", "aggr_weight", "*", "_bottom_aggregate", "(", "heat", ")", "+", "heat", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._topk_channel": [[87, 97], ["scores.size", "torch.topk", "torch.topk", "scores.view"], "function", ["None"], ["", "def", "_topk_channel", "(", "scores", ",", "K", "=", "40", ")", ":", "\n", "    ", "batch", ",", "cat", ",", "height", ",", "width", "=", "scores", ".", "size", "(", ")", "\n", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "scores", ".", "view", "(", "batch", ",", "cat", ",", "-", "1", ")", ",", "K", ")", "\n", "\n", "topk_inds", "=", "topk_inds", "%", "(", "height", "*", "width", ")", "\n", "topk_ys", "=", "(", "topk_inds", "/", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "topk_xs", "=", "(", "topk_inds", "%", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "\n", "return", "topk_scores", ",", "topk_inds", ",", "topk_ys", ",", "topk_xs", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._topk": [[99, 116], ["scores.size", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "models.tensor_utils._gather_feat().view", "models.tensor_utils._gather_feat().view", "models.tensor_utils._gather_feat().view", "scores.view", "topk_scores.view", "models.tensor_utils._gather_feat", "models.tensor_utils._gather_feat", "models.tensor_utils._gather_feat", "_gather_feat().view.view", "_gather_feat().view.view", "_gather_feat().view.view"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat"], ["", "def", "_topk", "(", "scores", ",", "K", "=", "40", ")", ":", "\n", "    ", "batch", ",", "cat", ",", "height", ",", "width", "=", "scores", ".", "size", "(", ")", "\n", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "scores", ".", "view", "(", "batch", ",", "cat", ",", "-", "1", ")", ",", "K", ")", "\n", "\n", "topk_inds", "=", "topk_inds", "%", "(", "height", "*", "width", ")", "\n", "topk_ys", "=", "(", "topk_inds", "/", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "topk_xs", "=", "(", "topk_inds", "%", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "\n", "topk_score", ",", "topk_ind", "=", "torch", ".", "topk", "(", "topk_scores", ".", "view", "(", "batch", ",", "-", "1", ")", ",", "K", ")", "\n", "topk_clses", "=", "(", "topk_ind", "/", "K", ")", ".", "int", "(", ")", "\n", "topk_inds", "=", "_gather_feat", "(", "\n", "topk_inds", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "topk_ys", "=", "_gather_feat", "(", "topk_ys", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "topk_xs", "=", "_gather_feat", "(", "topk_xs", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "\n", "return", "topk_score", ",", "topk_inds", ",", "topk_clses", ",", "topk_ys", ",", "topk_xs", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder.centernet_decode": [[118, 150], ["_nms.size", "decoder._nms", "decoder._topk", "models.tensor_utils._transpose_and_gather_feat", "clses.view().float.view().float", "scores.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.tensor_utils._transpose_and_gather_feat", "reg.view.view", "wh.view.view", "clses.view().float.view().expand().long", "wh.view.gather().view", "wh.view.view", "xs.view", "ys.view", "xs.view", "ys.view", "clses.view().float.view", "clses.view().float.view().expand", "wh.view.gather", "clses.view().float.view"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._nms", "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._topk", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather"], ["", "def", "centernet_decode", "(", "heat", ",", "wh", ",", "reg", "=", "None", ",", "cat_spec_wh", "=", "False", ",", "K", "=", "100", ")", ":", "\n", "    ", "batch", ",", "cat", ",", "height", ",", "width", "=", "heat", ".", "size", "(", ")", "\n", "\n", "# heat = torch.sigmoid(heat)", "\n", "# perform nms on heatmaps", "\n", "heat", "=", "_nms", "(", "heat", ")", "\n", "\n", "scores", ",", "inds", ",", "clses", ",", "ys", ",", "xs", "=", "_topk", "(", "heat", ",", "K", "=", "K", ")", "\n", "if", "reg", "is", "not", "None", ":", "\n", "        ", "reg", "=", "_transpose_and_gather_feat", "(", "reg", ",", "inds", ")", "\n", "reg", "=", "reg", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "xs", "=", "xs", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "reg", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "ys", "=", "ys", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "reg", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "", "else", ":", "\n", "        ", "xs", "=", "xs", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "0.5", "\n", "ys", "=", "ys", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "0.5", "\n", "", "wh", "=", "_transpose_and_gather_feat", "(", "wh", ",", "inds", ")", "\n", "if", "cat_spec_wh", ":", "\n", "        ", "wh", "=", "wh", ".", "view", "(", "batch", ",", "K", ",", "cat", ",", "2", ")", "\n", "clses_ind", "=", "clses", ".", "view", "(", "batch", ",", "K", ",", "1", ",", "1", ")", ".", "expand", "(", "batch", ",", "K", ",", "1", ",", "2", ")", ".", "long", "(", ")", "\n", "wh", "=", "wh", ".", "gather", "(", "2", ",", "clses_ind", ")", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "wh", "=", "wh", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "", "clses", "=", "clses", ".", "view", "(", "batch", ",", "K", ",", "1", ")", ".", "float", "(", ")", "\n", "scores", "=", "scores", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "\n", "bboxes", "=", "torch", ".", "cat", "(", "[", "xs", "-", "wh", "[", "...", ",", "0", ":", "1", "]", "/", "2", ",", "\n", "ys", "-", "wh", "[", "...", ",", "1", ":", "2", "]", "/", "2", ",", "\n", "xs", "+", "wh", "[", "...", ",", "0", ":", "1", "]", "/", "2", ",", "\n", "ys", "+", "wh", "[", "...", ",", "1", ":", "2", "]", "/", "2", "]", ",", "dim", "=", "2", ")", "\n", "detections", "=", "torch", ".", "cat", "(", "[", "bboxes", ",", "scores", ",", "clses", "]", ",", "dim", "=", "2", ")", "\n", "\n", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder.multi_pose_2d_decode": [[152, 225], ["_nms.size", "decoder._nms", "decoder._topk", "models.tensor_utils._transpose_and_gather_feat", "kps.permute().contiguous().view.view", "xs.view().expand", "ys.view().expand", "models.tensor_utils._transpose_and_gather_feat", "wh.view.view", "clses.view().float.view().float", "scores.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.tensor_utils._transpose_and_gather_feat", "reg.view.view", "decoder._nms", "kps.permute().contiguous().view.view().permute().contiguous", "kps.permute().contiguous().view.unsqueeze().expand", "decoder._topk_channel", "torch.stack().unsqueeze().expand", "torch.stack().unsqueeze().expand", "dist.min", "hm_score.gather().unsqueeze.gather().unsqueeze", "min_dist.unsqueeze.unsqueeze", "min_ind.view().expand.view().expand", "hm_kps.view.gather", "hm_kps.view.view", "bboxes[].view().expand", "bboxes[].view().expand", "bboxes[].view().expand", "bboxes[].view().expand", "kps.permute().contiguous().view.permute().contiguous().view", "xs.view", "ys.view", "xs.view", "ys.view", "xs.view", "ys.view", "clses.view().float.view", "models.tensor_utils._transpose_and_gather_feat", "hp_offset.view.view", "kps.permute().contiguous().view.view().permute", "kps.permute().contiguous().view.unsqueeze", "hm_inds.view", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "hm_score.gather().unsqueeze.gather", "min_ind.view().expand.view", "bboxes[].view", "bboxes[].view", "bboxes[].view", "bboxes[].view", "kps.permute().contiguous().view.permute().contiguous", "torch.max", "torch.max", "kps.permute().contiguous().view.view", "torch.stack", "torch.stack", "kps.permute().contiguous().view.permute"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._nms", "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._topk", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._nms", "home.repos.pwc.inspect_result.Guanghan_DANR.models.decoder._topk_channel", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather", "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather"], ["", "def", "multi_pose_2d_decode", "(", "heat", ",", "wh", ",", "kps", ",", "reg", "=", "None", ",", "hm_hp", "=", "None", ",", "hp_offset", "=", "None", ",", "K", "=", "100", ")", ":", "\n", "    ", "batch", ",", "cat", ",", "height", ",", "width", "=", "heat", ".", "size", "(", ")", "\n", "num_joints", "=", "kps", ".", "shape", "[", "1", "]", "//", "2", "\n", "# perform nms on heatmaps", "\n", "heat", "=", "_nms", "(", "heat", ")", "\n", "scores", ",", "inds", ",", "clses", ",", "ys", ",", "xs", "=", "_topk", "(", "heat", ",", "K", "=", "K", ")", "\n", "\n", "kps", "=", "_transpose_and_gather_feat", "(", "kps", ",", "inds", ")", "\n", "kps", "=", "kps", ".", "view", "(", "batch", ",", "K", ",", "num_joints", "*", "2", ")", "\n", "kps", "[", "...", ",", ":", ":", "2", "]", "+=", "xs", ".", "view", "(", "batch", ",", "K", ",", "1", ")", ".", "expand", "(", "batch", ",", "K", ",", "num_joints", ")", "\n", "kps", "[", "...", ",", "1", ":", ":", "2", "]", "+=", "ys", ".", "view", "(", "batch", ",", "K", ",", "1", ")", ".", "expand", "(", "batch", ",", "K", ",", "num_joints", ")", "\n", "if", "reg", "is", "not", "None", ":", "\n", "        ", "reg", "=", "_transpose_and_gather_feat", "(", "reg", ",", "inds", ")", "\n", "reg", "=", "reg", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "xs", "=", "xs", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "reg", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "ys", "=", "ys", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "reg", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "", "else", ":", "\n", "        ", "xs", "=", "xs", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "0.5", "\n", "ys", "=", "ys", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "0.5", "\n", "", "wh", "=", "_transpose_and_gather_feat", "(", "wh", ",", "inds", ")", "\n", "wh", "=", "wh", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "clses", "=", "clses", ".", "view", "(", "batch", ",", "K", ",", "1", ")", ".", "float", "(", ")", "\n", "scores", "=", "scores", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "\n", "\n", "bboxes", "=", "torch", ".", "cat", "(", "[", "xs", "-", "wh", "[", "...", ",", "0", ":", "1", "]", "/", "2", ",", "\n", "ys", "-", "wh", "[", "...", ",", "1", ":", "2", "]", "/", "2", ",", "\n", "xs", "+", "wh", "[", "...", ",", "0", ":", "1", "]", "/", "2", ",", "\n", "ys", "+", "wh", "[", "...", ",", "1", ":", "2", "]", "/", "2", "]", ",", "dim", "=", "2", ")", "\n", "if", "hm_hp", "is", "not", "None", ":", "\n", "        ", "hm_hp", "=", "_nms", "(", "hm_hp", ")", "\n", "thresh", "=", "0.1", "\n", "kps", "=", "kps", ".", "view", "(", "batch", ",", "K", ",", "num_joints", ",", "2", ")", ".", "permute", "(", "\n", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "# b x J x K x 2", "\n", "reg_kps", "=", "kps", ".", "unsqueeze", "(", "3", ")", ".", "expand", "(", "batch", ",", "num_joints", ",", "K", ",", "K", ",", "2", ")", "\n", "hm_score", ",", "hm_inds", ",", "hm_ys", ",", "hm_xs", "=", "_topk_channel", "(", "hm_hp", ",", "K", "=", "K", ")", "# b x J x K", "\n", "if", "hp_offset", "is", "not", "None", ":", "\n", "            ", "hp_offset", "=", "_transpose_and_gather_feat", "(", "\n", "hp_offset", ",", "hm_inds", ".", "view", "(", "batch", ",", "-", "1", ")", ")", "\n", "hp_offset", "=", "hp_offset", ".", "view", "(", "batch", ",", "num_joints", ",", "K", ",", "2", ")", "\n", "hm_xs", "=", "hm_xs", "+", "hp_offset", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "hm_ys", "=", "hm_ys", "+", "hp_offset", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "hm_xs", "=", "hm_xs", "+", "0.5", "\n", "hm_ys", "=", "hm_ys", "+", "0.5", "\n", "\n", "", "mask", "=", "(", "hm_score", ">", "thresh", ")", ".", "float", "(", ")", "\n", "hm_score", "=", "(", "1", "-", "mask", ")", "*", "-", "1", "+", "mask", "*", "hm_score", "\n", "hm_ys", "=", "(", "1", "-", "mask", ")", "*", "(", "-", "10000", ")", "+", "mask", "*", "hm_ys", "\n", "hm_xs", "=", "(", "1", "-", "mask", ")", "*", "(", "-", "10000", ")", "+", "mask", "*", "hm_xs", "\n", "hm_kps", "=", "torch", ".", "stack", "(", "[", "hm_xs", ",", "hm_ys", "]", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "\n", "2", ")", ".", "expand", "(", "batch", ",", "num_joints", ",", "K", ",", "K", ",", "2", ")", "\n", "dist", "=", "(", "(", "(", "reg_kps", "-", "hm_kps", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "4", ")", "**", "0.5", ")", "\n", "min_dist", ",", "min_ind", "=", "dist", ".", "min", "(", "dim", "=", "3", ")", "# b x J x K", "\n", "hm_score", "=", "hm_score", ".", "gather", "(", "2", ",", "min_ind", ")", ".", "unsqueeze", "(", "-", "1", ")", "# b x J x K x 1", "\n", "min_dist", "=", "min_dist", ".", "unsqueeze", "(", "-", "1", ")", "\n", "min_ind", "=", "min_ind", ".", "view", "(", "batch", ",", "num_joints", ",", "K", ",", "1", ",", "1", ")", ".", "expand", "(", "batch", ",", "num_joints", ",", "K", ",", "1", ",", "2", ")", "\n", "hm_kps", "=", "hm_kps", ".", "gather", "(", "3", ",", "min_ind", ")", "\n", "hm_kps", "=", "hm_kps", ".", "view", "(", "batch", ",", "num_joints", ",", "K", ",", "2", ")", "\n", "l", "=", "bboxes", "[", ":", ",", ":", ",", "0", "]", ".", "view", "(", "batch", ",", "1", ",", "K", ",", "1", ")", ".", "expand", "(", "batch", ",", "num_joints", ",", "K", ",", "1", ")", "\n", "t", "=", "bboxes", "[", ":", ",", ":", ",", "1", "]", ".", "view", "(", "batch", ",", "1", ",", "K", ",", "1", ")", ".", "expand", "(", "batch", ",", "num_joints", ",", "K", ",", "1", ")", "\n", "r", "=", "bboxes", "[", ":", ",", ":", ",", "2", "]", ".", "view", "(", "batch", ",", "1", ",", "K", ",", "1", ")", ".", "expand", "(", "batch", ",", "num_joints", ",", "K", ",", "1", ")", "\n", "b", "=", "bboxes", "[", ":", ",", ":", ",", "3", "]", ".", "view", "(", "batch", ",", "1", ",", "K", ",", "1", ")", ".", "expand", "(", "batch", ",", "num_joints", ",", "K", ",", "1", ")", "\n", "\n", "mask", "=", "(", "hm_kps", "[", "...", ",", "0", ":", "1", "]", "<", "l", ")", "+", "(", "hm_kps", "[", "...", ",", "0", ":", "1", "]", ">", "r", ")", "+", "(", "hm_kps", "[", "...", ",", "1", ":", "2", "]", "<", "t", ")", "+", "(", "hm_kps", "[", "...", ",", "1", ":", "2", "]", ">", "b", ")", "+", "(", "hm_score", "<", "thresh", ")", "+", "(", "min_dist", ">", "(", "torch", ".", "max", "(", "b", "-", "t", ",", "r", "-", "l", ")", "*", "0.3", ")", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "float", "(", ")", ".", "expand", "(", "batch", ",", "num_joints", ",", "K", ",", "2", ")", "\n", "kps", "=", "(", "1", "-", "mask", ")", "*", "hm_kps", "+", "mask", "*", "kps", "\n", "kps", "=", "kps", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "batch", ",", "K", ",", "num_joints", "*", "2", ")", "\n", "", "detections", "=", "torch", ".", "cat", "(", "[", "bboxes", ",", "scores", ",", "kps", ",", "clses", "]", ",", "dim", "=", "2", ")", "\n", "\n", "return", "detections", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.create_model": [[20, 26], ["get_model", "int", "arch.find", "arch.find"], "function", ["None"], ["    ", "return", "join", "(", "'http://dl.yf.io/dla/models'", ",", "data", ",", "'{}-{}.pth'", ".", "format", "(", "name", ",", "hash", ")", ")", "\n", "\n", "\n", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.load_model": [[28, 86], ["print", "model.state_dict", "model.load_state_dict", "torch.load", "torch.load", "k.startswith", "print", "print", "optimizer.load_state_dict", "print", "print", "k.startswith", "print"], "function", ["None"], ["\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "2", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "expansion", "=", "Bottleneck", ".", "expansion", "\n", "bottle_planes", "=", "planes", "//", "expansion", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "bottle_planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "bottle_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.model.save_model": [[88, 109], ["isinstance", "torch.save", "print", "model.module.state_dict", "isinstance", "optimizer.state_dict", "print", "model.module.state_dict", "print", "model.state_dict", "model.state_dict", "print"], "function", ["None"], ["out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "BottleneckX", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "2", "\n", "cardinality", "=", "32", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BottleneckX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cardinality", "=", "BottleneckX", ".", "cardinality", "\n", "bottle_planes", "=", "planes", "*", "cardinality", "//", "32", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "bottle_planes", ",", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.scatter_gather.scatter": [[6, 26], ["scatter_gather.scatter.scatter_map"], "function", ["None"], ["def", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    Slices variables into approximately equal chunks and\n    distributes them across given GPUs. Duplicates\n    references to objects that are not variables. Does not\n    support Tensors.\n    \"\"\"", "\n", "def", "scatter_map", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "Variable", ")", ":", "\n", "            ", "return", "Scatter", ".", "apply", "(", "target_gpus", ",", "chunk_sizes", ",", "dim", ",", "obj", ")", "\n", "", "assert", "not", "torch", ".", "is_tensor", "(", "obj", ")", ",", "\"Tensors not supported in scatter.\"", "\n", "if", "isinstance", "(", "obj", ",", "tuple", ")", ":", "\n", "            ", "return", "list", "(", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "            ", "return", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "return", "list", "(", "map", "(", "type", "(", "obj", ")", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ".", "items", "(", ")", ")", ")", ")", ")", "\n", "", "return", "[", "obj", "for", "targets", "in", "target_gpus", "]", "\n", "\n", "", "return", "scatter_map", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.scatter_gather.scatter_kwargs": [[28, 39], ["tuple", "tuple", "scatter_gather.scatter", "scatter_gather.scatter", "len", "len", "tuple.extend", "len", "len", "tuple.extend", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.scatter_gather.scatter", "home.repos.pwc.inspect_result.Guanghan_DANR.models.scatter_gather.scatter"], ["", "def", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "target_gpus", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Scatter with support for kwargs dictionary\"\"\"", "\n", "inputs", "=", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", ",", "chunk_sizes", ")", "if", "inputs", "else", "[", "]", "\n", "kwargs", "=", "scatter", "(", "kwargs", ",", "target_gpus", ",", "dim", ",", "chunk_sizes", ")", "if", "kwargs", "else", "[", "]", "\n", "if", "len", "(", "inputs", ")", "<", "len", "(", "kwargs", ")", ":", "\n", "        ", "inputs", ".", "extend", "(", "[", "(", ")", "for", "_", "in", "range", "(", "len", "(", "kwargs", ")", "-", "len", "(", "inputs", ")", ")", "]", ")", "\n", "", "elif", "len", "(", "kwargs", ")", "<", "len", "(", "inputs", ")", ":", "\n", "        ", "kwargs", ".", "extend", "(", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "inputs", ")", "-", "len", "(", "kwargs", ")", ")", "]", ")", "\n", "", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "kwargs", "=", "tuple", "(", "kwargs", ")", "\n", "return", "inputs", ",", "kwargs", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils.image_mixup": [[8, 37], ["numpy.random.beta", "torch.flip", "torch.flip", "max_vals.reshape.reshape", "torch.flip", "torch.cat", "torch.flip", "torch.cat", "torch.flip", "torch.cat", "torch.flip", "torch.cat", "[].max", "[].max", "batch[].max"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip", "home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip"], ["def", "image_mixup", "(", "batch", ")", ":", "\n", "    ", "alpha", "=", "1.5", "\n", "lam", "=", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ")", "\n", "\n", "flipped_input", "=", "torch", ".", "flip", "(", "batch", "[", "'input'", "]", ",", "[", "0", "]", ")", "\n", "batch", "[", "'input'", "]", "=", "lam", "*", "batch", "[", "'input'", "]", "+", "(", "1", "-", "lam", ")", "*", "flipped_input", "\n", "\n", "flipped_hm", "=", "torch", ".", "flip", "(", "batch", "[", "'hm'", "]", ",", "[", "0", "]", ")", "\n", "batch", "[", "'hm'", "]", "=", "lam", "*", "batch", "[", "'hm'", "]", "+", "(", "1", "-", "lam", ")", "*", "flipped_hm", "\n", "\n", "max_vals", "=", "batch", "[", "'hm'", "]", ".", "max", "(", "1", ")", "[", "0", "]", ".", "max", "(", "1", ")", "[", "0", "]", ".", "max", "(", "1", ")", "[", "0", "]", "# max val for each sample in a mini-batch", "\n", "max_vals", "[", "max_vals", "==", "0", "]", "=", "1", "# if max_val == 0, will return nan during normalization", "\n", "batch_size", "=", "max_vals", ".", "shape", "[", "0", "]", "\n", "max_vals", "=", "max_vals", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "batch", "[", "'hm'", "]", "=", "batch", "[", "'hm'", "]", "/", "max_vals", "# normalize so that the maximum value is 1", "\n", "\n", "flipped_ind", "=", "torch", ".", "flip", "(", "batch", "[", "'ind'", "]", ",", "[", "0", "]", ")", "\n", "batch", "[", "'ind'", "]", "=", "torch", ".", "cat", "(", "(", "batch", "[", "'ind'", "]", ",", "flipped_ind", ")", ",", "1", ")", "\n", "\n", "flipped_wh", "=", "torch", ".", "flip", "(", "batch", "[", "'wh'", "]", ",", "[", "0", "]", ")", "\n", "batch", "[", "'wh'", "]", "=", "torch", ".", "cat", "(", "(", "batch", "[", "'wh'", "]", ",", "flipped_wh", ")", ",", "1", ")", "\n", "\n", "flipped_reg", "=", "torch", ".", "flip", "(", "batch", "[", "'reg'", "]", ",", "[", "0", "]", ")", "\n", "batch", "[", "'reg'", "]", "=", "torch", ".", "cat", "(", "(", "batch", "[", "'reg'", "]", ",", "flipped_reg", ")", ",", "1", ")", "\n", "\n", "flipped_mask", "=", "torch", ".", "flip", "(", "batch", "[", "'reg_mask'", "]", ",", "[", "0", "]", ")", "\n", "batch", "[", "'reg_mask'", "]", "=", "torch", ".", "cat", "(", "(", "batch", "[", "'reg_mask'", "]", ",", "flipped_mask", ")", ",", "1", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._sigmoid": [[39, 42], ["torch.clamp", "x.sigmoid_"], "function", ["None"], ["", "def", "_sigmoid", "(", "x", ")", ":", "\n", "    ", "y", "=", "torch", ".", "clamp", "(", "x", ".", "sigmoid_", "(", ")", ",", "min", "=", "1e-4", ",", "max", "=", "1", "-", "1e-4", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat": [[43, 52], ["feat.view.size", "ind.unsqueeze().expand.unsqueeze().expand", "feat.view.gather", "ind.unsqueeze().expand.size", "ind.unsqueeze().expand.size", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "feat.view.view", "ind.unsqueeze().expand.unsqueeze", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.data_parallel._DataParallel.gather"], ["", "def", "_gather_feat", "(", "feat", ",", "ind", ",", "mask", "=", "None", ")", ":", "\n", "    ", "dim", "=", "feat", ".", "size", "(", "2", ")", "\n", "ind", "=", "ind", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "ind", ".", "size", "(", "0", ")", ",", "ind", ".", "size", "(", "1", ")", ",", "dim", ")", "\n", "feat", "=", "feat", ".", "gather", "(", "1", ",", "ind", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "feat", ")", "\n", "feat", "=", "feat", "[", "mask", "]", "\n", "feat", "=", "feat", ".", "view", "(", "-", "1", ",", "dim", ")", "\n", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat": [[53, 58], ["_gather_feat.permute().contiguous", "_gather_feat.view", "tensor_utils._gather_feat", "_gather_feat.size", "_gather_feat.size", "_gather_feat.permute"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._gather_feat"], ["", "def", "_transpose_and_gather_feat", "(", "feat", ",", "ind", ")", ":", "\n", "    ", "feat", "=", "feat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ",", "feat", ".", "size", "(", "3", ")", ")", "\n", "feat", "=", "_gather_feat", "(", "feat", ",", "ind", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils.flip_tensor": [[59, 61], ["torch.flip"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.utils.image.flip"], ["", "def", "flip_tensor", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "flip", "(", "x", ",", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils.flip_lr": [[62, 69], ["[].copy", "torch.from_numpy().to", "tmp[].copy", "tmp[].copy", "torch.from_numpy", "x.detach().cpu().numpy", "[].copy.reshape", "x.detach().cpu", "x.detach"], "function", ["None"], ["", "def", "flip_lr", "(", "x", ",", "flip_idx", ")", ":", "\n", "  ", "tmp", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "...", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "shape", "=", "tmp", ".", "shape", "\n", "for", "e", "in", "flip_idx", ":", "\n", "    ", "tmp", "[", ":", ",", "e", "[", "0", "]", ",", "...", "]", ",", "tmp", "[", ":", ",", "e", "[", "1", "]", ",", "...", "]", "=", "tmp", "[", ":", ",", "e", "[", "1", "]", ",", "...", "]", ".", "copy", "(", ")", ",", "tmp", "[", ":", ",", "e", "[", "0", "]", ",", "...", "]", ".", "copy", "(", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "tmp", ".", "reshape", "(", "shape", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils.flip_lr_off": [[70, 80], ["[].copy", "tmp.reshape.reshape", "torch.from_numpy().to", "tmp[].copy", "tmp[].copy", "torch.from_numpy", "x.detach().cpu().numpy", "tmp.reshape.reshape", "x.detach().cpu", "x.detach"], "function", ["None"], ["", "def", "flip_lr_off", "(", "x", ",", "flip_idx", ")", ":", "\n", "  ", "tmp", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "...", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "shape", "=", "tmp", ".", "shape", "\n", "tmp", "=", "tmp", ".", "reshape", "(", "tmp", ".", "shape", "[", "0", "]", ",", "17", ",", "2", ",", "\n", "tmp", ".", "shape", "[", "2", "]", ",", "tmp", ".", "shape", "[", "3", "]", ")", "\n", "tmp", "[", ":", ",", ":", ",", "0", ",", ":", ",", ":", "]", "*=", "-", "1", "\n", "for", "e", "in", "flip_idx", ":", "\n", "    ", "tmp", "[", ":", ",", "e", "[", "0", "]", ",", "...", "]", ",", "tmp", "[", ":", ",", "e", "[", "1", "]", ",", "...", "]", "=", "tmp", "[", ":", ",", "e", "[", "1", "]", ",", "...", "]", ".", "copy", "(", ")", ",", "tmp", "[", ":", ",", "e", "[", "0", "]", ",", "...", "]", ".", "copy", "(", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "tmp", ".", "reshape", "(", "shape", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.FocalLoss.__init__": [[116, 119], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "neg_loss", "=", "_neg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.FocalLoss.forward": [[120, 122], ["losses.FocalLoss.neg_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "out", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "neg_loss", "(", "out", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.RegLoss.__init__": [[133, 135], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RegLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.RegLoss.forward": [[136, 140], ["tensor_utils._transpose_and_gather_feat", "losses._reg_loss"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses._reg_loss"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "target", ")", ":", "\n", "        ", "pred", "=", "_transpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "loss", "=", "_reg_loss", "(", "pred", ",", "target", ",", "mask", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.RegL1Loss.__init__": [[143, 145], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RegL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.RegL1Loss.forward": [[146, 153], ["tensor_utils._transpose_and_gather_feat", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as().float", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.sum", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "target", ")", ":", "\n", "        ", "pred", "=", "_transpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "pred", ")", ".", "float", "(", ")", "\n", "# loss = F.l1_loss(pred * mask, target * mask, reduction='elementwise_mean')", "\n", "loss", "=", "F", ".", "l1_loss", "(", "pred", "*", "mask", ",", "target", "*", "mask", ",", "size_average", "=", "False", ")", "\n", "loss", "=", "loss", "/", "(", "mask", ".", "sum", "(", ")", "+", "1e-4", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.NormRegL1Loss.__init__": [[156, 158], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NormRegL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.NormRegL1Loss.forward": [[159, 168], ["tensor_utils._transpose_and_gather_feat", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as().float", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.sum", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "target", ")", ":", "\n", "        ", "pred", "=", "_transpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "pred", ")", ".", "float", "(", ")", "\n", "# loss = F.l1_loss(pred * mask, target * mask, reduction='elementwise_mean')", "\n", "pred", "=", "pred", "/", "(", "target", "+", "1e-4", ")", "\n", "target", "=", "target", "*", "0", "+", "1", "\n", "loss", "=", "F", ".", "l1_loss", "(", "pred", "*", "mask", ",", "target", "*", "mask", ",", "size_average", "=", "False", ")", "\n", "loss", "=", "loss", "/", "(", "mask", ".", "sum", "(", ")", "+", "1e-4", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.RegWeightedL1Loss.__init__": [[171, 173], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RegWeightedL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.RegWeightedL1Loss.forward": [[174, 181], ["tensor_utils._transpose_and_gather_feat", "mask.float.float.float", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "mask.float.float.sum"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "target", ")", ":", "\n", "        ", "pred", "=", "_transpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", "\n", "# loss = F.l1_loss(pred * mask, target * mask, reduction='elementwise_mean')", "\n", "loss", "=", "F", ".", "l1_loss", "(", "pred", "*", "mask", ",", "target", "*", "mask", ",", "size_average", "=", "False", ")", "\n", "loss", "=", "loss", "/", "(", "mask", ".", "sum", "(", ")", "+", "1e-4", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.L1Loss.__init__": [[184, 186], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "L1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.L1Loss.forward": [[187, 192], ["tensor_utils._transpose_and_gather_feat", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as().float", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "target", ")", ":", "\n", "        ", "pred", "=", "_transpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "pred", ")", ".", "float", "(", ")", "\n", "loss", "=", "F", ".", "l1_loss", "(", "pred", "*", "mask", ",", "target", "*", "mask", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.BinRotLoss.__init__": [[195, 197], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BinRotLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.BinRotLoss.forward": [[198, 202], ["tensor_utils._transpose_and_gather_feat", "losses.compute_rot_loss"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.tensor_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.compute_rot_loss"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "rotbin", ",", "rotres", ")", ":", "\n", "        ", "pred", "=", "_transpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "loss", "=", "compute_rot_loss", "(", "pred", ",", "rotbin", ",", "rotres", ",", "mask", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.CutMixLoss.__init__": [[252, 254], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "reduction", ":", "str", ")", ":", "\n", "        ", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.CutMixLoss.__call__": [[255, 261], ["losses.CutMixLoss.criterion", "losses.CutMixLoss.criterion"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "predictions", ":", "torch", ".", "Tensor", ",", "\n", "targets", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "float", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "targets1", ",", "targets2", ",", "lam", "=", "targets", "\n", "return", "lam", "*", "self", ".", "criterion", "(", "predictions", ",", "targets1", ")", "+", "(", "\n", "1", "-", "lam", ")", "*", "self", ".", "criterion", "(", "predictions", ",", "targets2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.DualCutoutLoss.__init__": [[263, 266], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "reduction", ":", "str", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "config", ".", "dual_cutout_alpha", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.DualCutoutLoss.__call__": [[267, 273], ["torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "losses.DualCutoutLoss.loss_func", "losses.DualCutoutLoss.loss_func"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "predictions", ":", "torch", ".", "Tensor", ",", "\n", "targets", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "predictions1", ",", "predictions2", "=", "predictions", "[", ":", ",", "0", "]", ",", "predictions", "[", ":", ",", "1", "]", "\n", "return", "(", "self", ".", "loss_func", "(", "predictions1", ",", "targets", ")", "+", "self", ".", "loss_func", "(", "\n", "predictions2", ",", "targets", ")", ")", "*", "0.5", "+", "self", ".", "alpha", "*", "F", ".", "mse_loss", "(", "\n", "predictions1", ",", "predictions2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.LabelSmoothingLoss.__init__": [[296, 300], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "reduction", ":", "str", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "config", ".", "n_classes", "\n", "self", ".", "epsilon", "=", "config", ".", "label_smoothing_epsilon", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.LabelSmoothingLoss.__call__": [[301, 311], ["onehot_encoding().type_as().to", "losses.cross_entropy_loss", "onehot_encoding().type_as", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "losses.onehot_encoding", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.cross_entropy_loss", "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.onehot_encoding"], ["", "def", "__call__", "(", "self", ",", "predictions", ":", "torch", ".", "Tensor", ",", "\n", "targets", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "device", "=", "predictions", ".", "device", "\n", "\n", "onehot", "=", "onehot_encoding", "(", "\n", "targets", ",", "self", ".", "n_classes", ")", ".", "type_as", "(", "predictions", ")", ".", "to", "(", "device", ")", "\n", "targets", "=", "onehot", "*", "(", "1", "-", "self", ".", "epsilon", ")", "+", "torch", ".", "ones_like", "(", "onehot", ")", ".", "to", "(", "\n", "device", ")", "*", "self", ".", "epsilon", "/", "self", ".", "n_classes", "\n", "loss", "=", "cross_entropy_loss", "(", "predictions", ",", "targets", ",", "self", ".", "reduction", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.MixupLoss.__init__": [[313, 315], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "reduction", ":", "str", ")", ":", "\n", "        ", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.MixupLoss.__call__": [[316, 322], ["losses.MixupLoss.loss_func", "losses.MixupLoss.loss_func"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "predictions", ":", "torch", ".", "Tensor", ",", "\n", "targets", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "float", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "targets1", ",", "targets2", ",", "lam", "=", "targets", "\n", "return", "lam", "*", "self", ".", "loss_func", "(", "predictions", ",", "targets1", ")", "+", "(", "\n", "1", "-", "lam", ")", "*", "self", ".", "loss_func", "(", "predictions", ",", "targets2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.RICAPLoss.__init__": [[324, 326], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "reduction", ":", "str", ")", ":", "\n", "        ", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.RICAPLoss.__call__": [[327, 334], ["sum", "losses.RICAPLoss.loss_func", "zip"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "predictions", ":", "torch", ".", "Tensor", ",", "\n", "targets", ":", "Tuple", "[", "List", "[", "torch", ".", "Tensor", "]", ",", "List", "[", "float", "]", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "target_list", ",", "weights", "=", "targets", "\n", "return", "sum", "(", "[", "\n", "weight", "*", "self", ".", "loss_func", "(", "predictions", ",", "targets", ")", "\n", "for", "targets", ",", "weight", "in", "zip", "(", "target_list", ",", "weights", ")", "\n", "]", ")", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses._slow_neg_loss": [[12, 35], ["gt.eq", "gt.lt", "torch.pow", "torch.pow", "torch.pow", "gt.eq.float().sum", "pos_loss.sum.sum", "neg_loss.sum.sum", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow", "pos_pred.nelement", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow", "gt.eq.float"], "function", ["None"], ["def", "_slow_neg_loss", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "'''focal loss from CornerNet'''", "\n", "pos_inds", "=", "gt", ".", "eq", "(", "1", ")", "\n", "neg_inds", "=", "gt", ".", "lt", "(", "1", ")", "\n", "\n", "neg_weights", "=", "torch", ".", "pow", "(", "1", "-", "gt", "[", "neg_inds", "]", ",", "4", ")", "\n", "\n", "loss", "=", "0", "\n", "pos_pred", "=", "pred", "[", "pos_inds", "]", "\n", "neg_pred", "=", "pred", "[", "neg_inds", "]", "\n", "\n", "pos_loss", "=", "torch", ".", "log", "(", "pos_pred", ")", "*", "torch", ".", "pow", "(", "1", "-", "pos_pred", ",", "2", ")", "\n", "neg_loss", "=", "torch", ".", "log", "(", "1", "-", "neg_pred", ")", "*", "torch", ".", "pow", "(", "neg_pred", ",", "2", ")", "*", "neg_weights", "\n", "\n", "num_pos", "=", "pos_inds", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "pos_loss", "=", "pos_loss", ".", "sum", "(", ")", "\n", "neg_loss", "=", "neg_loss", ".", "sum", "(", ")", "\n", "\n", "if", "pos_pred", ".", "nelement", "(", ")", "==", "0", ":", "\n", "        ", "loss", "=", "loss", "-", "neg_loss", "\n", "", "else", ":", "\n", "        ", "loss", "=", "loss", "-", "(", "pos_loss", "+", "neg_loss", ")", "/", "num_pos", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses._neg_loss": [[37, 63], ["gt.eq().float", "gt.lt().float", "torch.pow", "torch.pow", "torch.pow", "gt.eq().float.float().sum", "pos_loss.sum.sum", "neg_loss.sum.sum", "gt.eq", "gt.lt", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow", "gt.eq().float.float", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "_neg_loss", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "''' Modified focal loss. Exactly the same as CornerNet.\n        Runs faster and costs a little bit more memory\n      Arguments:\n        pred (batch x c x h x w)\n        gt_regr (batch x c x h x w)\n    '''", "\n", "pos_inds", "=", "gt", ".", "eq", "(", "1", ")", ".", "float", "(", ")", "\n", "neg_inds", "=", "gt", ".", "lt", "(", "1", ")", ".", "float", "(", ")", "\n", "\n", "neg_weights", "=", "torch", ".", "pow", "(", "1", "-", "gt", ",", "4", ")", "\n", "\n", "loss", "=", "0", "\n", "\n", "pos_loss", "=", "torch", ".", "log", "(", "pred", ")", "*", "torch", ".", "pow", "(", "1", "-", "pred", ",", "2", ")", "*", "pos_inds", "\n", "neg_loss", "=", "torch", ".", "log", "(", "1", "-", "pred", ")", "*", "torch", ".", "pow", "(", "pred", ",", "2", ")", "*", "neg_weights", "*", "neg_inds", "\n", "\n", "num_pos", "=", "pos_inds", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "pos_loss", "=", "pos_loss", ".", "sum", "(", ")", "\n", "neg_loss", "=", "neg_loss", ".", "sum", "(", ")", "\n", "\n", "if", "num_pos", "==", "0", ":", "\n", "        ", "loss", "=", "loss", "-", "neg_loss", "\n", "", "else", ":", "\n", "        ", "loss", "=", "loss", "-", "(", "pos_loss", "+", "neg_loss", ")", "/", "num_pos", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses._not_faster_neg_loss": [[65, 81], ["gt.eq().float", "gt.lt().float", "gt.eq().float.float().sum", "torch.pow", "torch.pow", "torch.pow", "all_loss.sum.sum", "gt.eq", "gt.lt", "gt.eq().float.float", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "_not_faster_neg_loss", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "pos_inds", "=", "gt", ".", "eq", "(", "1", ")", ".", "float", "(", ")", "\n", "neg_inds", "=", "gt", ".", "lt", "(", "1", ")", ".", "float", "(", ")", "\n", "num_pos", "=", "pos_inds", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "neg_weights", "=", "torch", ".", "pow", "(", "1", "-", "gt", ",", "4", ")", "\n", "\n", "loss", "=", "0", "\n", "trans_pred", "=", "pred", "*", "neg_inds", "+", "(", "1", "-", "pred", ")", "*", "pos_inds", "\n", "weight", "=", "neg_weights", "*", "neg_inds", "+", "pos_inds", "\n", "all_loss", "=", "torch", ".", "log", "(", "1", "-", "trans_pred", ")", "*", "torch", ".", "pow", "(", "trans_pred", ",", "2", ")", "*", "weight", "\n", "all_loss", "=", "all_loss", ".", "sum", "(", ")", "\n", "\n", "if", "num_pos", ">", "0", ":", "\n", "        ", "all_loss", "/=", "num_pos", "\n", "", "loss", "-=", "all_loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses._slow_reg_loss": [[83, 93], ["mask.unsqueeze().expand_as.float().sum", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "torch.functional.smooth_l1_loss", "mask.unsqueeze().expand_as.float", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["None"], ["", "def", "_slow_reg_loss", "(", "regr", ",", "gt_regr", ",", "mask", ")", ":", "\n", "    ", "num", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "gt_regr", ")", "\n", "\n", "regr", "=", "regr", "[", "mask", "]", "\n", "gt_regr", "=", "gt_regr", "[", "mask", "]", "\n", "\n", "regr_loss", "=", "nn", ".", "functional", ".", "smooth_l1_loss", "(", "regr", ",", "gt_regr", ",", "size_average", "=", "False", ")", "\n", "regr_loss", "=", "regr_loss", "/", "(", "num", "+", "1e-4", ")", "\n", "return", "regr_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses._reg_loss": [[95, 111], ["mask.unsqueeze().expand_as().float.float().sum", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float", "torch.functional.smooth_l1_loss", "mask.unsqueeze().expand_as().float.float", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as", "mask.unsqueeze().expand_as().float.unsqueeze"], "function", ["None"], ["", "def", "_reg_loss", "(", "regr", ",", "gt_regr", ",", "mask", ")", ":", "\n", "    ", "''' L1 regression loss\n      Arguments:\n        regr (batch x max_objects x dim)\n        gt_regr (batch x max_objects x dim)\n        mask (batch x max_objects)\n    '''", "\n", "num", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "gt_regr", ")", ".", "float", "(", ")", "\n", "\n", "regr", "=", "regr", "*", "mask", "\n", "gt_regr", "=", "gt_regr", "*", "mask", "\n", "\n", "regr_loss", "=", "nn", ".", "functional", ".", "smooth_l1_loss", "(", "regr", ",", "gt_regr", ",", "size_average", "=", "False", ")", "\n", "regr_loss", "=", "regr_loss", "/", "(", "num", "+", "1e-4", ")", "\n", "return", "regr_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.compute_res_loss": [[204, 206], ["torch.smooth_l1_loss"], "function", ["None"], ["", "", "def", "compute_res_loss", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "F", ".", "smooth_l1_loss", "(", "output", ",", "target", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.compute_bin_loss": [[209, 213], ["mask.expand_as.expand_as", "torch.cross_entropy", "mask.expand_as.float"], "function", ["None"], ["", "def", "compute_bin_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "expand_as", "(", "output", ")", "\n", "output", "=", "output", "*", "mask", ".", "float", "(", ")", "\n", "return", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.compute_rot_loss": [[215, 248], ["output.view.view", "target_bin.view.view", "target_res.view.view", "mask.view.view", "losses.compute_bin_loss", "losses.compute_bin_loss", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "losses.compute_res_loss", "losses.compute_res_loss", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "losses.compute_res_loss", "losses.compute_res_loss", "target_bin[].nonzero", "idx1.long", "idx1.long", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "target_bin[].nonzero", "idx2.long", "idx2.long", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "target_bin[].nonzero", "target_bin[].nonzero"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.compute_bin_loss", "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.compute_bin_loss", "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.compute_res_loss", "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.compute_res_loss", "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.compute_res_loss", "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.compute_res_loss"], ["", "def", "compute_rot_loss", "(", "output", ",", "target_bin", ",", "target_res", ",", "mask", ")", ":", "\n", "# output: (B, 128, 8) [bin1_cls[0], bin1_cls[1], bin1_sin, bin1_cos,", "\n", "#                 bin2_cls[0], bin2_cls[1], bin2_sin, bin2_cos]", "\n", "# target_bin: (B, 128, 2) [bin1_cls, bin2_cls]", "\n", "# target_res: (B, 128, 2) [bin1_res, bin2_res]", "\n", "# mask: (B, 128, 1)", "\n", "# import pdb; pdb.set_trace()", "\n", "    ", "output", "=", "output", ".", "view", "(", "-", "1", ",", "8", ")", "\n", "target_bin", "=", "target_bin", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "target_res", "=", "target_res", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "mask", "=", "mask", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "loss_bin1", "=", "compute_bin_loss", "(", "output", "[", ":", ",", "0", ":", "2", "]", ",", "target_bin", "[", ":", ",", "0", "]", ",", "mask", ")", "\n", "loss_bin2", "=", "compute_bin_loss", "(", "output", "[", ":", ",", "4", ":", "6", "]", ",", "target_bin", "[", ":", ",", "1", "]", ",", "mask", ")", "\n", "loss_res", "=", "torch", ".", "zeros_like", "(", "loss_bin1", ")", "\n", "if", "target_bin", "[", ":", ",", "0", "]", ".", "nonzero", "(", ")", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "idx1", "=", "target_bin", "[", ":", ",", "0", "]", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "valid_output1", "=", "torch", ".", "index_select", "(", "output", ",", "0", ",", "idx1", ".", "long", "(", ")", ")", "\n", "valid_target_res1", "=", "torch", ".", "index_select", "(", "target_res", ",", "0", ",", "idx1", ".", "long", "(", ")", ")", "\n", "loss_sin1", "=", "compute_res_loss", "(", "\n", "valid_output1", "[", ":", ",", "2", "]", ",", "torch", ".", "sin", "(", "valid_target_res1", "[", ":", ",", "0", "]", ")", ")", "\n", "loss_cos1", "=", "compute_res_loss", "(", "\n", "valid_output1", "[", ":", ",", "3", "]", ",", "torch", ".", "cos", "(", "valid_target_res1", "[", ":", ",", "0", "]", ")", ")", "\n", "loss_res", "+=", "loss_sin1", "+", "loss_cos1", "\n", "", "if", "target_bin", "[", ":", ",", "1", "]", ".", "nonzero", "(", ")", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "idx2", "=", "target_bin", "[", ":", ",", "1", "]", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "valid_output2", "=", "torch", ".", "index_select", "(", "output", ",", "0", ",", "idx2", ".", "long", "(", ")", ")", "\n", "valid_target_res2", "=", "torch", ".", "index_select", "(", "target_res", ",", "0", ",", "idx2", ".", "long", "(", ")", ")", "\n", "loss_sin2", "=", "compute_res_loss", "(", "\n", "valid_output2", "[", ":", ",", "6", "]", ",", "torch", ".", "sin", "(", "valid_target_res2", "[", ":", ",", "1", "]", ")", ")", "\n", "loss_cos2", "=", "compute_res_loss", "(", "\n", "valid_output2", "[", ":", ",", "7", "]", ",", "torch", ".", "cos", "(", "valid_target_res2", "[", ":", ",", "1", "]", ")", ")", "\n", "loss_res", "+=", "loss_sin2", "+", "loss_cos2", "\n", "", "return", "loss_bin1", "+", "loss_bin2", "+", "loss_res", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.onehot_encoding": [[275, 278], ["torch.zeros().to().scatter_", "torch.zeros().to().scatter_", "torch.zeros().to().scatter_", "label.view", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "label.size"], "function", ["None"], ["", "", "def", "onehot_encoding", "(", "label", ":", "torch", ".", "Tensor", ",", "n_classes", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "torch", ".", "zeros", "(", "label", ".", "size", "(", "0", ")", ",", "n_classes", ")", ".", "to", "(", "label", ".", "device", ")", ".", "scatter_", "(", "\n", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.models.losses.cross_entropy_loss": [[280, 293], ["torch.log_softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum.mean", "torch.sum.sum", "ValueError"], "function", ["None"], ["", "def", "cross_entropy_loss", "(", "data", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "\n", "reduction", ":", "str", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "logp", "=", "F", ".", "log_softmax", "(", "data", ",", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "-", "logp", "*", "target", ",", "dim", "=", "1", ")", "\n", "if", "reduction", "==", "'none'", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction", "==", "'mean'", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "'sum'", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'`reduction` must be one of \\'none\\', \\'mean\\', or \\'sum\\'.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.BasicBlock.__init__": [[30, 42], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.BasicBlock.forward": [[43, 58], ["dlav0.BasicBlock.conv1", "dlav0.BasicBlock.bn1", "dlav0.BasicBlock.relu", "dlav0.BasicBlock.conv2", "dlav0.BasicBlock.bn2", "dlav0.BasicBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.Bottleneck.__init__": [[63, 79], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "expansion", "=", "Bottleneck", ".", "expansion", "\n", "bottle_planes", "=", "planes", "//", "expansion", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "bottle_planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "bottle_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.Bottleneck.forward": [[80, 99], ["dlav0.Bottleneck.conv1", "dlav0.Bottleneck.bn1", "dlav0.Bottleneck.relu", "dlav0.Bottleneck.conv2", "dlav0.Bottleneck.bn2", "dlav0.Bottleneck.relu", "dlav0.Bottleneck.conv3", "dlav0.Bottleneck.bn3", "dlav0.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.BottleneckX.__init__": [[105, 123], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BottleneckX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cardinality", "=", "BottleneckX", ".", "cardinality", "\n", "# dim = int(math.floor(planes * (BottleneckV5.expansion / 64.0)))", "\n", "# bottle_planes = dim * cardinality", "\n", "bottle_planes", "=", "planes", "*", "cardinality", "//", "32", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "bottle_planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "bottle_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.BottleneckX.forward": [[124, 143], ["dlav0.BottleneckX.conv1", "dlav0.BottleneckX.bn1", "dlav0.BottleneckX.relu", "dlav0.BottleneckX.conv2", "dlav0.BottleneckX.bn2", "dlav0.BottleneckX.relu", "dlav0.BottleneckX.conv3", "dlav0.BottleneckX.bn3", "dlav0.BottleneckX.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.Root.__init__": [[146, 154], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "residual", ")", ":", "\n", "        ", "super", "(", "Root", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "\n", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ")", "\n", "self", ".", "bn", "=", "BatchNorm", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.Root.forward": [[155, 164], ["dlav0.Root.conv", "dlav0.Root.bn", "dlav0.Root.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "x", ")", ":", "\n", "        ", "children", "=", "x", "\n", "x", "=", "self", ".", "conv", "(", "torch", ".", "cat", "(", "x", ",", "1", ")", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "x", "+=", "children", "[", "0", "]", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.Tree.__init__": [[167, 204], ["torch.nn.Module.__init__", "block", "block", "dlav0.Tree", "dlav0.Tree", "dlav0.Root", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "levels", ",", "block", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "\n", "level_root", "=", "False", ",", "root_dim", "=", "0", ",", "root_kernel_size", "=", "1", ",", "\n", "dilation", "=", "1", ",", "root_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "Tree", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "root_dim", "==", "0", ":", "\n", "            ", "root_dim", "=", "2", "*", "out_channels", "\n", "", "if", "level_root", ":", "\n", "            ", "root_dim", "+=", "in_channels", "\n", "", "if", "levels", "==", "1", ":", "\n", "            ", "self", ".", "tree1", "=", "block", "(", "in_channels", ",", "out_channels", ",", "stride", ",", "\n", "dilation", "=", "dilation", ")", "\n", "self", ".", "tree2", "=", "block", "(", "out_channels", ",", "out_channels", ",", "1", ",", "\n", "dilation", "=", "dilation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tree1", "=", "Tree", "(", "levels", "-", "1", ",", "block", ",", "in_channels", ",", "out_channels", ",", "\n", "stride", ",", "root_dim", "=", "0", ",", "\n", "root_kernel_size", "=", "root_kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "root_residual", "=", "root_residual", ")", "\n", "self", ".", "tree2", "=", "Tree", "(", "levels", "-", "1", ",", "block", ",", "out_channels", ",", "out_channels", ",", "\n", "root_dim", "=", "root_dim", "+", "out_channels", ",", "\n", "root_kernel_size", "=", "root_kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "root_residual", "=", "root_residual", ")", "\n", "", "if", "levels", "==", "1", ":", "\n", "            ", "self", ".", "root", "=", "Root", "(", "root_dim", ",", "out_channels", ",", "root_kernel_size", ",", "\n", "root_residual", ")", "\n", "", "self", ".", "level_root", "=", "level_root", "\n", "self", ".", "root_dim", "=", "root_dim", "\n", "self", ".", "downsample", "=", "None", "\n", "self", ".", "project", "=", "None", "\n", "self", ".", "levels", "=", "levels", "\n", "if", "stride", ">", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "MaxPool2d", "(", "stride", ",", "stride", "=", "stride", ")", "\n", "", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.Tree.forward": [[206, 220], ["dlav0.Tree.tree1", "dlav0.Tree.downsample", "dlav0.Tree.project", "children.append", "dlav0.Tree.tree2", "dlav0.Tree.root", "children.append", "dlav0.Tree.tree2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ",", "children", "=", "None", ")", ":", "\n", "        ", "children", "=", "[", "]", "if", "children", "is", "None", "else", "children", "\n", "bottom", "=", "self", ".", "downsample", "(", "x", ")", "if", "self", ".", "downsample", "else", "x", "\n", "residual", "=", "self", ".", "project", "(", "bottom", ")", "if", "self", ".", "project", "else", "bottom", "\n", "if", "self", ".", "level_root", ":", "\n", "            ", "children", ".", "append", "(", "bottom", ")", "\n", "", "x1", "=", "self", ".", "tree1", "(", "x", ",", "residual", ")", "\n", "if", "self", ".", "levels", "==", "1", ":", "\n", "            ", "x2", "=", "self", ".", "tree2", "(", "x1", ")", "\n", "x", "=", "self", ".", "root", "(", "x2", ",", "x1", ",", "*", "children", ")", "\n", "", "else", ":", "\n", "            ", "children", ".", "append", "(", "x1", ")", "\n", "x", "=", "self", ".", "tree2", "(", "x1", ",", "children", "=", "children", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.__init__": [[223, 260], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "dlav0.DLA._make_conv_level", "dlav0.DLA._make_conv_level", "dlav0.Tree", "dlav0.Tree", "dlav0.Tree", "dlav0.Tree", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "dlav0.DLA.modules", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA._make_conv_level", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA._make_conv_level"], ["    ", "def", "__init__", "(", "self", ",", "levels", ",", "channels", ",", "num_classes", "=", "1000", ",", "\n", "block", "=", "BasicBlock", ",", "residual_root", "=", "False", ",", "return_levels", "=", "False", ",", "\n", "pool_size", "=", "7", ",", "linear_root", "=", "False", ")", ":", "\n", "        ", "super", "(", "DLA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "return_levels", "=", "return_levels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "base_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "level0", "=", "self", ".", "_make_conv_level", "(", "\n", "channels", "[", "0", "]", ",", "channels", "[", "0", "]", ",", "levels", "[", "0", "]", ")", "\n", "self", ".", "level1", "=", "self", ".", "_make_conv_level", "(", "\n", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "levels", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "level2", "=", "Tree", "(", "levels", "[", "2", "]", ",", "block", ",", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "2", ",", "\n", "level_root", "=", "False", ",", "\n", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level3", "=", "Tree", "(", "levels", "[", "3", "]", ",", "block", ",", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level4", "=", "Tree", "(", "levels", "[", "4", "]", ",", "block", ",", "channels", "[", "3", "]", ",", "channels", "[", "4", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level5", "=", "Tree", "(", "levels", "[", "5", "]", ",", "block", ",", "channels", "[", "4", "]", ",", "channels", "[", "5", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "pool_size", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "channels", "[", "-", "1", "]", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA._make_level": [[261, 277], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "", "def", "_make_level", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "stride", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA._make_conv_level": [[278, 289], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "modules.extend", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["None"], ["", "def", "_make_conv_level", "(", "self", ",", "inplanes", ",", "planes", ",", "convs", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "convs", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", ",", "\n", "BatchNorm", "(", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", "\n", "inplanes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.forward": [[290, 304], ["dlav0.DLA.base_layer", "range", "y.append", "dlav0.DLA.avgpool", "dlav0.DLA.fc", "x.view.view.view", "getattr", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "[", "]", "\n", "x", "=", "self", ".", "base_layer", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "'level{}'", ".", "format", "(", "i", ")", ")", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "", "if", "self", ".", "return_levels", ":", "\n", "            ", "return", "y", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model": [[305, 318], ["name.endswith", "len", "torch.nn.Conv2d", "torch.nn.Conv2d", "dlav0.DLA.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "dlav0.get_model_url", "torch.load_url", "torch.load_url", "list", "torch.load_url.keys"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.get_model_url"], ["", "", "def", "load_pretrained_model", "(", "self", ",", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", ":", "\n", "        ", "fc", "=", "self", ".", "fc", "\n", "if", "name", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "            ", "model_weights", "=", "torch", ".", "load", "(", "data", "+", "name", ")", "\n", "", "else", ":", "\n", "            ", "model_url", "=", "get_model_url", "(", "data", ",", "name", ",", "hash", ")", "\n", "model_weights", "=", "model_zoo", ".", "load_url", "(", "model_url", ")", "\n", "", "num_classes", "=", "len", "(", "model_weights", "[", "list", "(", "model_weights", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "]", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", "[", "-", "1", "]", ",", "num_classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "load_state_dict", "(", "model_weights", ")", "\n", "self", ".", "fc", "=", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.Identity.__init__": [[422, 424], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.Identity.forward": [[425, 427], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.IDAUp.__init__": [[442, 482], ["torch.nn.Module.__init__", "enumerate", "range", "dlav0.IDAUp.modules", "int", "setattr", "setattr", "len", "torch.nn.Sequential", "torch.nn.Sequential", "setattr", "isinstance", "dlav0.Identity", "torch.nn.Sequential", "torch.nn.Sequential", "dlav0.Identity", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "dlav0.fill_up_weights", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "m.weight.data.normal_", "isinstance", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "str", "str", "str", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.fill_up_weights"], ["    ", "def", "__init__", "(", "self", ",", "node_kernel", ",", "out_dim", ",", "channels", ",", "up_factors", ")", ":", "\n", "        ", "super", "(", "IDAUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "channels", ")", ":", "\n", "            ", "if", "c", "==", "out_dim", ":", "\n", "                ", "proj", "=", "Identity", "(", ")", "\n", "", "else", ":", "\n", "                ", "proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "c", ",", "out_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "f", "=", "int", "(", "up_factors", "[", "i", "]", ")", "\n", "if", "f", "==", "1", ":", "\n", "                ", "up", "=", "Identity", "(", ")", "\n", "", "else", ":", "\n", "                ", "up", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "out_dim", ",", "out_dim", ",", "f", "*", "2", ",", "stride", "=", "f", ",", "padding", "=", "f", "//", "2", ",", "\n", "output_padding", "=", "0", ",", "groups", "=", "out_dim", ",", "bias", "=", "False", ")", "\n", "fill_up_weights", "(", "up", ")", "\n", "", "setattr", "(", "self", ",", "'proj_'", "+", "str", "(", "i", ")", ",", "proj", ")", "\n", "setattr", "(", "self", ",", "'up_'", "+", "str", "(", "i", ")", ",", "up", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "channels", ")", ")", ":", "\n", "            ", "node", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "out_dim", "*", "2", ",", "out_dim", ",", "\n", "kernel_size", "=", "node_kernel", ",", "stride", "=", "1", ",", "\n", "padding", "=", "node_kernel", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "setattr", "(", "self", ",", "'node_'", "+", "str", "(", "i", ")", ",", "node", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.IDAUp.forward": [[483, 498], ["list", "enumerate", "range", "len", "len", "len", "len", "getattr", "getattr", "getattr.", "len", "getattr", "getattr.", "y.append", "getattr.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str", "str"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "layers", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "channels", ")", "==", "len", "(", "layers", ")", ",", "'{} vs {} layers'", ".", "format", "(", "len", "(", "self", ".", "channels", ")", ",", "len", "(", "layers", ")", ")", "\n", "layers", "=", "list", "(", "layers", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "upsample", "=", "getattr", "(", "self", ",", "'up_'", "+", "str", "(", "i", ")", ")", "\n", "project", "=", "getattr", "(", "self", ",", "'proj_'", "+", "str", "(", "i", ")", ")", "\n", "layers", "[", "i", "]", "=", "upsample", "(", "project", "(", "l", ")", ")", "\n", "", "x", "=", "layers", "[", "0", "]", "\n", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layers", ")", ")", ":", "\n", "            ", "node", "=", "getattr", "(", "self", ",", "'node_'", "+", "str", "(", "i", ")", ")", "\n", "x", "=", "node", "(", "torch", ".", "cat", "(", "[", "x", ",", "layers", "[", "i", "]", "]", ",", "1", ")", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLAUp.__init__": [[501, 515], ["torch.nn.Module.__init__", "list", "numpy.array", "range", "setattr", "len", "dlav0.IDAUp"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "scales", "=", "(", "1", ",", "2", ",", "4", ",", "8", ",", "16", ")", ",", "in_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", "DLAUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "is", "None", ":", "\n", "            ", "in_channels", "=", "channels", "\n", "", "self", ".", "channels", "=", "channels", "\n", "channels", "=", "list", "(", "channels", ")", "\n", "scales", "=", "np", ".", "array", "(", "scales", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "channels", ")", "-", "1", ")", ":", "\n", "            ", "j", "=", "-", "i", "-", "2", "\n", "setattr", "(", "self", ",", "'ida_{}'", ".", "format", "(", "i", ")", ",", "\n", "IDAUp", "(", "3", ",", "channels", "[", "j", "]", ",", "in_channels", "[", "j", ":", "]", ",", "\n", "scales", "[", "j", ":", "]", "//", "scales", "[", "j", "]", ")", ")", "\n", "scales", "[", "j", "+", "1", ":", "]", "=", "scales", "[", "j", "]", "\n", "in_channels", "[", "j", "+", "1", ":", "]", "=", "[", "channels", "[", "j", "]", "for", "_", "in", "channels", "[", "j", "+", "1", ":", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLAUp.forward": [[516, 524], ["list", "range", "len", "getattr", "getattr.", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "layers", ")", ":", "\n", "        ", "layers", "=", "list", "(", "layers", ")", "\n", "assert", "len", "(", "layers", ")", ">", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "layers", ")", "-", "1", ")", ":", "\n", "            ", "ida", "=", "getattr", "(", "self", ",", "'ida_{}'", ".", "format", "(", "i", ")", ")", "\n", "x", ",", "y", "=", "ida", "(", "layers", "[", "-", "i", "-", "2", ":", "]", ")", "\n", "layers", "[", "-", "i", "-", "1", ":", "]", "=", "y", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLASeg.__init__": [[535, 570], ["torch.nn.Module.__init__", "int", "dlav0.DLAUp", "numpy.log2", "dlav0.DLASeg.__setattr__", "globals", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "len", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "fc[].bias.data.fill_", "dlav0.fill_fc_weights", "torch.nn.Conv2d.bias.data.fill_", "dlav0.fill_fc_weights"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.fill_fc_weights", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.fill_fc_weights"], ["    ", "def", "__init__", "(", "self", ",", "base_name", ",", "heads", ",", "\n", "pretrained", "=", "True", ",", "down_ratio", "=", "4", ",", "head_conv", "=", "256", ")", ":", "\n", "        ", "super", "(", "DLASeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "down_ratio", "in", "[", "2", ",", "4", ",", "8", ",", "16", "]", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "first_level", "=", "int", "(", "np", ".", "log2", "(", "down_ratio", ")", ")", "\n", "self", ".", "base", "=", "globals", "(", ")", "[", "base_name", "]", "(", "\n", "pretrained", "=", "pretrained", ",", "return_levels", "=", "True", ")", "\n", "channels", "=", "self", ".", "base", ".", "channels", "\n", "scales", "=", "[", "2", "**", "i", "for", "i", "in", "range", "(", "len", "(", "channels", "[", "self", ".", "first_level", ":", "]", ")", ")", "]", "\n", "self", ".", "dla_up", "=", "DLAUp", "(", "channels", "[", "self", ".", "first_level", ":", "]", ",", "scales", "=", "scales", ")", "\n", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "classes", "=", "self", ".", "heads", "[", "head", "]", "\n", "if", "head_conv", ">", "0", ":", "\n", "                ", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channels", "[", "self", ".", "first_level", "]", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                    ", "fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                    ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "else", ":", "\n", "                ", "fc", "=", "nn", ".", "Conv2d", "(", "channels", "[", "self", ".", "first_level", "]", ",", "classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                    ", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                    ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLASeg.forward": [[571, 578], ["dlav0.DLASeg.base", "dlav0.DLASeg.dla_up", "dlav0.DLASeg.__getattr__"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "x", "=", "self", ".", "dla_up", "(", "x", "[", "self", ".", "first_level", ":", "]", ")", "\n", "ret", "=", "{", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "ret", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "x", ")", "\n", "", "return", "[", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.get_model_url": [[19, 21], ["os.path.join"], "function", ["None"], ["def", "get_model_url", "(", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", ":", "\n", "    ", "return", "join", "(", "'http://dl.yf.io/dla/models'", ",", "data", ",", "'{}-{}.pth'", ".", "format", "(", "name", ",", "hash", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.conv3x3": [[23, 27], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.dla34": [[320, 327], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "", "def", "dla34", "(", "pretrained", ",", "**", "kwargs", ")", ":", "# DLA-34", "\n", "    ", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", "]", ",", "\n", "block", "=", "BasicBlock", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.dla46_c": [[329, 337], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla46_c", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-46-C", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "64", ",", "128", ",", "256", "]", ",", "\n", "block", "=", "Bottleneck", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla46_c'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.dla46x_c": [[339, 347], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla46x_c", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-46-C", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "64", ",", "128", ",", "256", "]", ",", "\n", "block", "=", "BottleneckX", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla46x_c'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.dla60x_c": [[349, 357], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla60x_c", "(", "pretrained", ",", "**", "kwargs", ")", ":", "# DLA-X-60-C", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "64", ",", "128", ",", "256", "]", ",", "\n", "block", "=", "BottleneckX", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "data", "=", "'imagenet'", ",", "name", "=", "'dla60x_c'", ",", "hash", "=", "'b870c45c'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.dla60": [[359, 367], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla60", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-60", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "Bottleneck", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla60'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.dla60x": [[369, 377], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla60x", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-60", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "BottleneckX", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla60x'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.dla102": [[379, 386], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla102", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-102", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "3", ",", "4", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "Bottleneck", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla102'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.dla102x": [[388, 395], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla102x", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-102", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "3", ",", "4", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "BottleneckX", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla102x'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.dla102x2": [[397, 404], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla102x2", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-102 64", "\n", "    ", "BottleneckX", ".", "cardinality", "=", "64", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "3", ",", "4", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "BottleneckX", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla102x2'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.dla169": [[406, 413], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.DLA.load_pretrained_model"], ["", "def", "dla169", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-169", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "Bottleneck", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla169'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.set_bn": [[415, 419], ["None"], "function", ["None"], ["", "def", "set_bn", "(", "bn", ")", ":", "\n", "    ", "global", "BatchNorm", "\n", "BatchNorm", "=", "bn", "\n", "dla", ".", "BatchNorm", "=", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.fill_up_weights": [[429, 439], ["math.ceil", "range", "range", "w.size", "range", "w.size", "w.size", "w.size", "math.fabs", "math.fabs"], "function", ["None"], ["", "", "def", "fill_up_weights", "(", "up", ")", ":", "\n", "    ", "w", "=", "up", ".", "weight", ".", "data", "\n", "f", "=", "math", ".", "ceil", "(", "w", ".", "size", "(", "2", ")", "/", "2", ")", "\n", "c", "=", "(", "2", "*", "f", "-", "1", "-", "f", "%", "2", ")", "/", "(", "2.", "*", "f", ")", "\n", "for", "i", "in", "range", "(", "w", ".", "size", "(", "2", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "w", ".", "size", "(", "3", ")", ")", ":", "\n", "            ", "w", "[", "0", ",", "0", ",", "i", ",", "j", "]", "=", "(", "1", "-", "math", ".", "fabs", "(", "i", "/", "f", "-", "c", ")", ")", "*", "(", "1", "-", "math", ".", "fabs", "(", "j", "/", "f", "-", "c", ")", ")", "\n", "", "", "for", "c", "in", "range", "(", "1", ",", "w", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "w", "[", "c", ",", "0", ",", ":", ",", ":", "]", "=", "w", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.fill_fc_weights": [[526, 532], ["layers.modules", "isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "fill_fc_weights", "(", "layers", ")", ":", "\n", "    ", "for", "m", "in", "layers", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.dlav0.get_pose_net": [[580, 586], ["dlav0.DLASeg"], "function", ["None"], ["", "", "def", "get_pose_net", "(", "num_layers", ",", "heads", ",", "head_conv", "=", "256", ",", "down_ratio", "=", "4", ")", ":", "\n", "    ", "model", "=", "DLASeg", "(", "'dla{}'", ".", "format", "(", "num_layers", ")", ",", "heads", ",", "\n", "pretrained", "=", "True", ",", "\n", "down_ratio", "=", "down_ratio", ",", "\n", "head_conv", "=", "head_conv", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.BasicBlock.__init__": [[30, 39], ["torch.Module.__init__", "msra_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "msra_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.conv3x3", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.BasicBlock.forward": [[40, 57], ["msra_resnet.BasicBlock.conv1", "msra_resnet.BasicBlock.bn1", "msra_resnet.BasicBlock.relu", "msra_resnet.BasicBlock.conv2", "msra_resnet.BasicBlock.bn2", "msra_resnet.BasicBlock.relu", "msra_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.Bottleneck.__init__": [[62, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.Bottleneck.forward": [[77, 98], ["msra_resnet.Bottleneck.conv1", "msra_resnet.Bottleneck.bn1", "msra_resnet.Bottleneck.relu", "msra_resnet.Bottleneck.conv2", "msra_resnet.Bottleneck.bn2", "msra_resnet.Bottleneck.relu", "msra_resnet.Bottleneck.conv3", "msra_resnet.Bottleneck.bn3", "msra_resnet.Bottleneck.relu", "msra_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.PoseResNet.__init__": [[102, 144], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "msra_resnet.PoseResNet._make_layer", "msra_resnet.PoseResNet._make_layer", "msra_resnet.PoseResNet._make_layer", "msra_resnet.PoseResNet._make_layer", "msra_resnet.PoseResNet._make_deconv_layer", "sorted", "msra_resnet.PoseResNet.__setattr__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_deconv_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "heads", ",", "head_conv", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "deconv_with_bias", "=", "False", "\n", "self", ".", "heads", "=", "heads", "\n", "\n", "super", "(", "PoseResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "# used for deconv layers", "\n", "self", ".", "deconv_layers", "=", "self", ".", "_make_deconv_layer", "(", "\n", "3", ",", "\n", "[", "256", ",", "256", ",", "256", "]", ",", "\n", "[", "4", ",", "4", ",", "4", "]", ",", "\n", ")", "\n", "# self.final_layer = []", "\n", "\n", "for", "head", "in", "sorted", "(", "self", ".", "heads", ")", ":", "\n", "          ", "num_output", "=", "self", ".", "heads", "[", "head", "]", "\n", "if", "head_conv", ">", "0", ":", "\n", "            ", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "num_output", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "fc", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "num_output", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.PoseResNet._make_layer": [[147, 163], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.PoseResNet._get_deconv_cfg": [[164, 176], ["None"], "methods", ["None"], ["", "def", "_get_deconv_cfg", "(", "self", ",", "deconv_kernel", ",", "index", ")", ":", "\n", "        ", "if", "deconv_kernel", "==", "4", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "0", "\n", "", "elif", "deconv_kernel", "==", "3", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "1", "\n", "", "elif", "deconv_kernel", "==", "2", ":", "\n", "            ", "padding", "=", "0", "\n", "output_padding", "=", "0", "\n", "\n", "", "return", "deconv_kernel", ",", "padding", ",", "output_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.PoseResNet._make_deconv_layer": [[177, 203], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "len", "msra_resnet.PoseResNet._get_deconv_cfg", "layers.append", "layers.append", "layers.append", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._get_deconv_cfg"], ["", "def", "_make_deconv_layer", "(", "self", ",", "num_layers", ",", "num_filters", ",", "num_kernels", ")", ":", "\n", "        ", "assert", "num_layers", "==", "len", "(", "num_filters", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "assert", "num_layers", "==", "len", "(", "num_kernels", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "kernel", ",", "padding", ",", "output_padding", "=", "self", ".", "_get_deconv_cfg", "(", "num_kernels", "[", "i", "]", ",", "i", ")", "\n", "\n", "planes", "=", "num_filters", "[", "i", "]", "\n", "layers", ".", "append", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "self", ".", "inplanes", ",", "\n", "out_channels", "=", "planes", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "bias", "=", "self", ".", "deconv_with_bias", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.PoseResNet.forward": [[204, 222], ["msra_resnet.PoseResNet.conv1", "msra_resnet.PoseResNet.bn1", "msra_resnet.PoseResNet.relu", "msra_resnet.PoseResNet.maxpool", "msra_resnet.PoseResNet.layer1", "msra_resnet.PoseResNet.layer2", "msra_resnet.PoseResNet.layer3", "msra_resnet.PoseResNet.layer4", "msra_resnet.PoseResNet.deconv_layers", "msra_resnet.PoseResNet.__getattr__"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "em", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "ret", "=", "{", "}", "\n", "ret", "[", "'em'", "]", "=", "em", "\n", "\n", "y", "=", "self", ".", "deconv_layers", "(", "em", ")", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "ret", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "y", ")", "\n", "", "return", "[", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.PoseResNet.init_weights": [[223, 251], ["msra_resnet.PoseResNet.deconv_layers.named_modules", "torch.load_url", "torch.load_url", "torch.load_url", "print", "msra_resnet.PoseResNet.load_state_dict", "print", "print", "ValueError", "isinstance", "msra_resnet.PoseResNet.__getattr__", "enumerate", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "msra_resnet.PoseResNet.modules", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "num_layers", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "if", "pretrained", ":", "\n", "            ", "for", "_", ",", "m", "in", "self", ".", "deconv_layers", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "self", ".", "deconv_with_bias", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "for", "head", "in", "self", ".", "heads", ":", "\n", "              ", "final_layer", "=", "self", ".", "__getattr__", "(", "head", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "final_layer", ".", "modules", "(", ")", ")", ":", "\n", "                  ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                      ", "if", "m", ".", "weight", ".", "shape", "[", "0", "]", "==", "self", ".", "heads", "[", "head", "]", ":", "\n", "                          ", "if", "'hm'", "in", "head", ":", "\n", "                              ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                              ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "", "", "url", "=", "model_urls", "[", "'resnet{}'", ".", "format", "(", "num_layers", ")", "]", "\n", "pretrained_state_dict", "=", "model_zoo", ".", "load_url", "(", "url", ")", "\n", "print", "(", "'=> loading pretrained model {}'", ".", "format", "(", "url", ")", ")", "\n", "self", ".", "load_state_dict", "(", "pretrained_state_dict", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'=> imagenet pretrained model dose not exist'", ")", "\n", "print", "(", "'=> please download it first'", ")", "\n", "raise", "ValueError", "(", "'imagenet pretrained model does not exist'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.conv3x3": [[21, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.msra_resnet.get_pose_net": [[260, 266], ["msra_resnet.PoseResNet", "msra_resnet.PoseResNet.init_weights"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet.init_weights"], ["def", "get_pose_net", "(", "num_layers", ",", "heads", ",", "head_conv", ")", ":", "\n", "  ", "block_class", ",", "layers", "=", "resnet_spec", "[", "num_layers", "]", "\n", "\n", "model", "=", "PoseResNet", "(", "block_class", ",", "layers", ",", "heads", ",", "head_conv", "=", "head_conv", ")", "\n", "model", ".", "init_weights", "(", "num_layers", ",", "pretrained", "=", "True", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.SplAtConv2d.__init__": [[43, 77], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "max", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "resnest.rSoftMax", "RFConv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "norm_layer", "resnest.DropBlock2D"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "kernel_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SplAtConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "rectify", "=", "rectify", "and", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "inter_channels", "=", "max", "(", "in_channels", "*", "radix", "//", "reduction_factor", ",", "32", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "if", "self", ".", "rectify", ":", "\n", "# pip install rfconv", "\n", "# rectified convolution", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv", "=", "RFConv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "average_mode", "=", "rectify_avg", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "**", "kwargs", ")", "\n", "", "self", ".", "use_bn", "=", "norm_layer", "is", "not", "None", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn0", "=", "norm_layer", "(", "channels", "*", "radix", ")", "\n", "", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "channels", ",", "inter_channels", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "norm_layer", "(", "inter_channels", ")", "\n", "", "self", ".", "fc2", "=", "Conv2d", "(", "inter_channels", ",", "channels", "*", "radix", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "rsoftmax", "=", "rSoftMax", "(", "radix", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.SplAtConv2d.forward": [[78, 108], ["resnest.SplAtConv2d.conv", "resnest.SplAtConv2d.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "resnest.SplAtConv2d.fc1", "resnest.SplAtConv2d.relu", "resnest.SplAtConv2d.fc2", "resnest.SplAtConv2d.rsoftmax().view", "sum.contiguous", "resnest.SplAtConv2d.bn0", "resnest.SplAtConv2d.dropblock", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "resnest.SplAtConv2d.bn1", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "resnest.SplAtConv2d.rsoftmax", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "x", "=", "self", ".", "dropblock", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "batch", ",", "rchannel", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "splited", "=", "torch", ".", "split", "(", "x", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "gap", "=", "sum", "(", "splited", ")", "\n", "", "else", ":", "\n", "            ", "gap", "=", "x", "\n", "", "gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "gap", ",", "1", ")", "\n", "gap", "=", "self", ".", "fc1", "(", "gap", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "gap", "=", "self", ".", "bn1", "(", "gap", ")", "\n", "", "gap", "=", "self", ".", "relu", "(", "gap", ")", "\n", "\n", "atten", "=", "self", ".", "fc2", "(", "gap", ")", "\n", "atten", "=", "self", ".", "rsoftmax", "(", "atten", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "attens", "=", "torch", ".", "split", "(", "atten", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "out", "=", "sum", "(", "[", "att", "*", "split", "for", "(", "att", ",", "split", ")", "in", "zip", "(", "attens", ",", "splited", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "atten", "*", "x", "\n", "", "return", "out", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.rSoftMax.__init__": [[110, 114], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radix", ",", "cardinality", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.rSoftMax.forward": [[115, 124], ["torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.view().transpose", "torch.sigmoid.view().transpose", "torch.softmax", "torch.softmax", "torch.sigmoid.reshape", "torch.sigmoid.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.view", "torch.sigmoid.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "batch", ",", "self", ".", "cardinality", ",", "self", ".", "radix", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "batch", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.DropBlock2D.__init__": [[129, 131], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.GlobalAvgPool2d.__init__": [[133, 136], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Global average pooling over the input's spatial dimensions\"\"\"", "\n", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.GlobalAvgPool2d.forward": [[137, 139], ["torch.nn.functional.adaptive_avg_pool2d().view", "torch.nn.functional.adaptive_avg_pool2d().view", "inputs.size", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "inputs", ",", "1", ")", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.Bottleneck.__init__": [[145, 204], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "int", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "resnest.DropBlock2D", "resnest.DropBlock2D", "resnest.SplAtConv2d", "zeros_", "resnest.DropBlock2D", "RFConv2d", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "radix", "=", "1", ",", "cardinality", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "dilation", "=", "1", ",", "is_first", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "norm_layer", "=", "None", ",", "dropblock_prob", "=", "0.0", ",", "last_gamma", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "int", "(", "planes", "*", "(", "bottleneck_width", "/", "64.", ")", ")", "*", "cardinality", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "group_width", ")", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "and", "(", "stride", ">", "1", "or", "is_first", ")", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "if", "self", ".", "avd", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", ",", "padding", "=", "1", ")", "\n", "stride", "=", "1", "\n", "\n", "", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock1", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "if", "radix", "==", "1", ":", "\n", "                ", "self", ".", "dropblock2", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "dropblock3", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "\n", "", "if", "radix", ">=", "1", ":", "\n", "            ", "self", ".", "conv2", "=", "SplAtConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "radix", "=", "radix", ",", "rectify", "=", "rectified_conv", ",", "\n", "rectify_avg", "=", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "rectified_conv", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv2", "=", "RFConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "average_mode", "=", "rectify_avg", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "4", ")", "\n", "\n", "if", "last_gamma", ":", "\n", "            ", "from", "torch", ".", "nn", ".", "init", "import", "zeros_", "\n", "zeros_", "(", "self", ".", "bn3", ".", "weight", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.Bottleneck.forward": [[205, 239], ["resnest.Bottleneck.conv1", "resnest.Bottleneck.bn1", "resnest.Bottleneck.relu", "resnest.Bottleneck.conv2", "resnest.Bottleneck.conv3", "resnest.Bottleneck.bn3", "resnest.Bottleneck.relu", "resnest.Bottleneck.dropblock1", "resnest.Bottleneck.avd_layer", "resnest.Bottleneck.bn2", "resnest.Bottleneck.relu", "resnest.Bottleneck.avd_layer", "resnest.Bottleneck.dropblock3", "resnest.Bottleneck.downsample", "resnest.Bottleneck.dropblock2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd", "and", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "radix", "==", "0", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "                ", "out", "=", "self", ".", "dropblock2", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "avd", "and", "not", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock3", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet.__init__": [[259, 356], ["torch.nn.Module.__init__", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_deconv_layer", "sorted", "torch.nn.Sequential", "torch.nn.Sequential", "conv_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "resnest.ResNet.__setattr__", "conv_layer", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "conv_layer", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "conv_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_deconv_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "heads", ",", "head_conv", ",", "\n", "radix", "=", "1", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "dilated", "=", "False", ",", "dilation", "=", "1", ",", "\n", "deep_stem", "=", "False", ",", "stem_width", "=", "64", ",", "avg_down", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "\n", "final_drop", "=", "0.0", ",", "dropblock_prob", "=", "0", ",", "\n", "last_gamma", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\n", "        ", "self", ".", "deconv_with_bias", "=", "False", "\n", "self", ".", "heads", "=", "heads", "\n", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "# ResNet-D params", "\n", "self", ".", "inplanes", "=", "stem_width", "*", "2", "if", "deep_stem", "else", "64", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "last_gamma", "=", "last_gamma", "\n", "# ResNeSt params", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rectified_conv", "=", "rectified_conv", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "if", "rectified_conv", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "conv_layer", "=", "RFConv2d", "\n", "", "else", ":", "\n", "            ", "conv_layer", "=", "nn", ".", "Conv2d", "\n", "", "conv_kwargs", "=", "{", "'average_mode'", ":", "rectify_avg", "}", "if", "rectified_conv", "else", "{", "}", "\n", "if", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", "(", "3", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_layer", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "**", "conv_kwargs", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ",", "is_first", "=", "False", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "if", "dilated", "or", "dilation", "==", "4", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "dilation", "==", "2", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "\n", "# used for deconv layers", "\n", "", "self", ".", "deconv_layers", "=", "self", ".", "_make_deconv_layer", "(", "\n", "3", ",", "\n", "[", "256", ",", "256", ",", "256", "]", ",", "\n", "[", "4", ",", "4", ",", "4", "]", ",", "\n", ")", "\n", "# self.final_layer = []", "\n", "\n", "for", "head", "in", "sorted", "(", "self", ".", "heads", ")", ":", "\n", "            ", "num_output", "=", "self", ".", "heads", "[", "head", "]", "\n", "if", "head_conv", ">", "0", ":", "\n", "                ", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "num_output", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "fc", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "num_output", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_layer": [[358, 412], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "down_layers.append", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "layers.append", "down_layers.append", "down_layers.append", "norm_layer", "block", "layers.append", "RuntimeError", "block", "down_layers.append", "down_layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "block", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "is_first", "=", "True", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "down_layers", "=", "[", "]", "\n", "if", "self", ".", "avg_down", ":", "\n", "                ", "if", "dilation", "==", "1", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "dilation", "==", "1", "or", "dilation", "==", "2", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "1", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "elif", "dilation", "==", "4", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "2", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"=> unknown dilation size: {}\"", ".", "format", "(", "dilation", ")", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "dilation", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._get_deconv_cfg": [[413, 425], ["None"], "methods", ["None"], ["", "def", "_get_deconv_cfg", "(", "self", ",", "deconv_kernel", ",", "index", ")", ":", "\n", "        ", "if", "deconv_kernel", "==", "4", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "0", "\n", "", "elif", "deconv_kernel", "==", "3", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "1", "\n", "", "elif", "deconv_kernel", "==", "2", ":", "\n", "            ", "padding", "=", "0", "\n", "output_padding", "=", "0", "\n", "\n", "", "return", "deconv_kernel", ",", "padding", ",", "output_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._make_deconv_layer": [[426, 452], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "len", "len", "resnest.ResNet._get_deconv_cfg", "layers.append", "layers.append", "layers.append", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet._get_deconv_cfg"], ["", "def", "_make_deconv_layer", "(", "self", ",", "num_layers", ",", "num_filters", ",", "num_kernels", ")", ":", "\n", "        ", "assert", "num_layers", "==", "len", "(", "num_filters", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "assert", "num_layers", "==", "len", "(", "num_kernels", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "kernel", ",", "padding", ",", "output_padding", "=", "self", ".", "_get_deconv_cfg", "(", "num_kernels", "[", "i", "]", ",", "i", ")", "\n", "\n", "planes", "=", "num_filters", "[", "i", "]", "\n", "layers", ".", "append", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "self", ".", "inplanes", ",", "\n", "out_channels", "=", "planes", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "bias", "=", "self", ".", "deconv_with_bias", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet.forward": [[453, 482], ["resnest.ResNet.conv1", "resnest.ResNet.bn1", "resnest.ResNet.relu", "resnest.ResNet.maxpool", "resnest.ResNet.layer1", "resnest.ResNet.layer2", "resnest.ResNet.layer3", "resnest.ResNet.layer4", "resnest.ResNet.deconv_layers", "resnest.ResNet.__getattr__"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "em", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "ret", "=", "{", "}", "\n", "ret", "[", "'em'", "]", "=", "em", "\n", "\n", "'''\n        x = self.avgpool(x)\n        #x = x.view(x.size(0), -1)\n        x = torch.flatten(x, 1)\n        if self.drop:\n            x = self.drop(x)\n        x = self.fc(x)\n        return x\n        '''", "\n", "\n", "y", "=", "self", ".", "deconv_layers", "(", "em", ")", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "ret", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "y", ")", "\n", "\n", "", "return", "[", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet.init_weights": [[483, 513], ["resnest.ResNet.deconv_layers.named_modules", "print", "resnest.ResNet.load_state_dict", "print", "print", "print", "ValueError", "isinstance", "resnest.ResNet.__getattr__", "enumerate", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.init.normal_", "torch.nn.init.normal_", "isinstance", "resnest.ResNet.modules", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "num_layers", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "if", "pretrained", ":", "\n", "            ", "for", "_", ",", "m", "in", "self", ".", "deconv_layers", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "self", ".", "deconv_with_bias", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "for", "head", "in", "self", ".", "heads", ":", "\n", "                ", "final_layer", "=", "self", ".", "__getattr__", "(", "head", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "final_layer", ".", "modules", "(", ")", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                        ", "if", "m", ".", "weight", ".", "shape", "[", "0", "]", "==", "self", ".", "heads", "[", "head", "]", ":", "\n", "                            ", "if", "'hm'", "in", "head", ":", "\n", "                                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "#self.load_state_dict(torch.hub.load_state_dict_from_url(", "\n", "#        resnest_model_urls['resnest50'], progress=True, check_hash=True), strict=False)", "\n", "", "", "", "", "", "print", "(", "'loading pretrained model...'", ")", "\n", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/home/DANR/weights/resnest50-528c19ca.pth'", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "'model loaded.'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'=> imagenet pretrained model dose not exist'", ")", "\n", "print", "(", "'=> please download it first'", ")", "\n", "raise", "ValueError", "(", "'imagenet pretrained model does not exist'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.short_hash": [[19, 23], ["ValueError"], "function", ["None"], ["def", "short_hash", "(", "name", ")", ":", "\n", "    ", "if", "name", "not", "in", "_model_sha256", ":", "\n", "        ", "raise", "ValueError", "(", "'Pretrained model for {name} is not available.'", ".", "format", "(", "name", "=", "name", ")", ")", "\n", "", "return", "_model_sha256", "[", "name", "]", "[", ":", "8", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.resnest50": [[28, 38], ["resnest.ResNet", "print", "ResNet.load_state_dict", "print", "torch.load", "torch.load"], "function", ["None"], ["def", "resnest50", "(", "pretrained", "=", "True", ",", "root", "=", "'/home/DANR/weights'", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "radix", "=", "2", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "32", ",", "avg_down", "=", "True", ",", "\n", "avd", "=", "True", ",", "avd_first", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "print", "(", "'loading pretrained model...'", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "root", "+", "'/resnest50-528c19ca.pth'", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "'model loaded.'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.get_pose_net": [[521, 530], ["resnest.ResNet", "resnest.ResNet.init_weights"], "function", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.resnest.ResNet.init_weights"], ["def", "get_pose_net", "(", "num_layers", ",", "heads", ",", "head_conv", ")", ":", "\n", "    ", "block_class", ",", "layers", "=", "resnet_spec", "[", "num_layers", "]", "\n", "\n", "model", "=", "ResNet", "(", "block_class", ",", "layers", ",", "heads", ",", "head_conv", "=", "head_conv", ",", "\n", "radix", "=", "2", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "32", ",", "avg_down", "=", "True", ",", "\n", "avd", "=", "True", ",", "avd_first", "=", "False", ")", "\n", "model", ".", "init_weights", "(", "num_layers", ",", "pretrained", "=", "True", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.StdConv2d.forward": [[17, 23], ["torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["  ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "w", "=", "self", ".", "weight", "\n", "v", ",", "m", "=", "torch", ".", "var_mean", "(", "w", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ",", "unbiased", "=", "False", ")", "\n", "w", "=", "(", "w", "-", "m", ")", "/", "torch", ".", "sqrt", "(", "v", "+", "1e-10", ")", "\n", "return", "F", ".", "conv2d", "(", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.PreActBottleneck.__init__": [[43, 59], ["torch.Module.__init__", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "google_resnet.conv1x1", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "google_resnet.conv3x3", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "google_resnet.conv1x1", "torch.ReLU", "torch.ReLU", "torch.ReLU", "google_resnet.conv1x1"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.conv1x1", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.conv3x3", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.conv1x1", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.conv1x1"], ["  ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", "=", "None", ",", "cmid", "=", "None", ",", "stride", "=", "1", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "cout", "=", "cout", "or", "cin", "\n", "cmid", "=", "cmid", "or", "cout", "//", "4", "\n", "\n", "self", ".", "gn1", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cin", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "cin", ",", "cmid", ")", "\n", "self", ".", "gn2", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cmid", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "cmid", ",", "cmid", ",", "stride", ")", "# Original code has it on conv1!!", "\n", "self", ".", "gn3", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cmid", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "cmid", ",", "cout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "(", "stride", "!=", "1", "or", "cin", "!=", "cout", ")", ":", "\n", "# Projection also with pre-activation according to paper.", "\n", "      ", "self", ".", "downsample", "=", "conv1x1", "(", "cin", ",", "cout", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.PreActBottleneck.forward": [[60, 74], ["google_resnet.PreActBottleneck.relu", "hasattr", "google_resnet.PreActBottleneck.conv1", "google_resnet.PreActBottleneck.conv2", "google_resnet.PreActBottleneck.conv3", "google_resnet.PreActBottleneck.gn1", "google_resnet.PreActBottleneck.downsample", "google_resnet.PreActBottleneck.relu", "google_resnet.PreActBottleneck.relu", "google_resnet.PreActBottleneck.gn2", "google_resnet.PreActBottleneck.gn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "relu", "(", "self", ".", "gn1", "(", "x", ")", ")", "\n", "\n", "# Residual branch", "\n", "residual", "=", "x", "\n", "if", "hasattr", "(", "self", ",", "'downsample'", ")", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "# Unit's branch", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "self", ".", "relu", "(", "self", ".", "gn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "self", ".", "relu", "(", "self", ".", "gn3", "(", "out", ")", ")", ")", "\n", "\n", "return", "out", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.PreActBottleneck.load_from": [[75, 90], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "google_resnet.PreActBottleneck.conv1.weight.copy_", "google_resnet.PreActBottleneck.conv2.weight.copy_", "google_resnet.PreActBottleneck.conv3.weight.copy_", "google_resnet.PreActBottleneck.gn1.weight.copy_", "google_resnet.PreActBottleneck.gn2.weight.copy_", "google_resnet.PreActBottleneck.gn3.weight.copy_", "google_resnet.PreActBottleneck.gn1.bias.copy_", "google_resnet.PreActBottleneck.gn2.bias.copy_", "google_resnet.PreActBottleneck.gn3.bias.copy_", "hasattr", "google_resnet.tf2th", "google_resnet.tf2th", "google_resnet.tf2th", "google_resnet.tf2th", "google_resnet.tf2th", "google_resnet.tf2th", "google_resnet.tf2th", "google_resnet.tf2th", "google_resnet.tf2th", "google_resnet.PreActBottleneck.downsample.weight.copy_", "google_resnet.tf2th"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th"], ["", "def", "load_from", "(", "self", ",", "weights", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "convname", "=", "'standardized_conv2d'", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "self", ".", "conv1", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "conv2", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "conv3", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "gn1", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn2", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn3", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn1", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/group_norm/beta'", "]", ")", ")", "\n", "self", ".", "gn2", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/group_norm/beta'", "]", ")", ")", "\n", "self", ".", "gn3", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/group_norm/beta'", "]", ")", ")", "\n", "if", "hasattr", "(", "self", ",", "'downsample'", ")", ":", "\n", "        ", "w", "=", "weights", "[", "f'{prefix}a/proj/{convname}/kernel'", "]", "\n", "self", ".", "downsample", ".", "weight", ".", "copy_", "(", "tf2th", "(", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.ResNetV2.__init__": [[95, 135], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "google_resnet.StdConv2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "google_resnet.PreActBottleneck", "google_resnet.PreActBottleneck", "range", "google_resnet.PreActBottleneck", "google_resnet.PreActBottleneck", "range", "google_resnet.PreActBottleneck", "google_resnet.PreActBottleneck", "range", "google_resnet.PreActBottleneck", "google_resnet.PreActBottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["def", "__init__", "(", "self", ",", "block_units", ",", "width_factor", ",", "head_size", "=", "21843", ",", "zero_head", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "wf", "=", "width_factor", "# shortcut 'cause we'll use it a lot.", "\n", "\n", "# The following will be unreadable if we split lines.", "\n", "# pylint: disable=line-too-long", "\n", "self", ".", "root", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv'", ",", "StdConv2d", "(", "3", ",", "64", "*", "wf", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'pad'", ",", "nn", ".", "ConstantPad2d", "(", "1", ",", "0", ")", ")", ",", "\n", "(", "'pool'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ")", ",", "\n", "# The following is subtly not the same!", "\n", "# ('pool', nn.MaxPool2d(kernel_size=3, stride=2, padding=1)),", "\n", "]", ")", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'block1'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "64", "*", "wf", ",", "cout", "=", "256", "*", "wf", ",", "cmid", "=", "64", "*", "wf", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "256", "*", "wf", ",", "cout", "=", "256", "*", "wf", ",", "cmid", "=", "64", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "0", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block2'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "256", "*", "wf", ",", "cout", "=", "512", "*", "wf", ",", "cmid", "=", "128", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "512", "*", "wf", ",", "cout", "=", "512", "*", "wf", ",", "cmid", "=", "128", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "1", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block3'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "512", "*", "wf", ",", "cout", "=", "1024", "*", "wf", ",", "cmid", "=", "256", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "1024", "*", "wf", ",", "cout", "=", "1024", "*", "wf", ",", "cmid", "=", "256", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "2", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block4'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "1024", "*", "wf", ",", "cout", "=", "2048", "*", "wf", ",", "cmid", "=", "512", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "2048", "*", "wf", ",", "cout", "=", "2048", "*", "wf", ",", "cmid", "=", "512", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "3", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "]", ")", ")", "\n", "# pylint: enable=line-too-long", "\n", "\n", "self", ".", "zero_head", "=", "zero_head", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'gn'", ",", "nn", ".", "GroupNorm", "(", "32", ",", "2048", "*", "wf", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'avg'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "1", ")", ")", ",", "\n", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "2048", "*", "wf", ",", "head_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", ",", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.ResNetV2.forward": [[137, 141], ["google_resnet.ResNetV2.head", "google_resnet.ResNetV2.body", "google_resnet.ResNetV2.root"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "head", "(", "self", ".", "body", "(", "self", ".", "root", "(", "x", ")", ")", ")", "\n", "assert", "x", ".", "shape", "[", "-", "2", ":", "]", "==", "(", "1", ",", "1", ")", "# We should have no spatial shape left.", "\n", "return", "x", "[", "...", ",", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.ResNetV2.load_from": [[142, 157], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "google_resnet.ResNetV2.root.conv.weight.copy_", "google_resnet.ResNetV2.head.gn.weight.copy_", "google_resnet.ResNetV2.head.gn.bias.copy_", "google_resnet.ResNetV2.body.named_children", "google_resnet.tf2th", "google_resnet.tf2th", "google_resnet.tf2th", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "google_resnet.ResNetV2.head.conv.weight.copy_", "google_resnet.ResNetV2.head.conv.bias.copy_", "block.named_children", "google_resnet.tf2th", "google_resnet.tf2th", "unit.load_from"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.ResNetV2.load_from"], ["", "def", "load_from", "(", "self", ",", "weights", ",", "prefix", "=", "'resnet/'", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "self", ".", "root", ".", "conv", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}root_block/standardized_conv2d/kernel'", "]", ")", ")", "# pylint: disable=line-too-long", "\n", "self", ".", "head", ".", "gn", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "head", ".", "gn", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}group_norm/beta'", "]", ")", ")", "\n", "if", "self", ".", "zero_head", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "head", ".", "conv", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "head", ".", "conv", ".", "bias", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "head", ".", "conv", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}head/conv2d/kernel'", "]", ")", ")", "# pylint: disable=line-too-long", "\n", "self", ".", "head", ".", "conv", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}head/conv2d/bias'", "]", ")", ")", "\n", "\n", "", "for", "bname", ",", "block", "in", "self", ".", "body", ".", "named_children", "(", ")", ":", "\n", "        ", "for", "uname", ",", "unit", "in", "block", ".", "named_children", "(", ")", ":", "\n", "          ", "unit", ".", "load_from", "(", "weights", ",", "prefix", "=", "f'{prefix}{bname}/{uname}/'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.conv3x3": [[25, 28], ["google_resnet.StdConv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "cin", ",", "cout", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "  ", "return", "StdConv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "bias", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.conv1x1": [[30, 33], ["google_resnet.StdConv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "cin", ",", "cout", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "  ", "return", "StdConv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.google_resnet.tf2th": [[35, 40], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "conv_weights.transpose.transpose"], "function", ["None"], ["", "def", "tf2th", "(", "conv_weights", ")", ":", "\n", "  ", "\"\"\"Possibly convert HWIO to OIHW.\"\"\"", "\n", "if", "conv_weights", ".", "ndim", "==", "4", ":", "\n", "    ", "conv_weights", "=", "conv_weights", ".", "transpose", "(", "[", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "conv_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.convolution.__init__": [[11, 18], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "inp_dim", ",", "out_dim", ",", "stride", "=", "1", ",", "with_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "convolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pad", "=", "(", "k", "-", "1", ")", "//", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "(", "k", ",", "k", ")", ",", "padding", "=", "(", "pad", ",", "pad", ")", ",", "stride", "=", "(", "stride", ",", "stride", ")", ",", "bias", "=", "not", "with_bn", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "if", "with_bn", "else", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.convolution.forward": [[19, 24], ["large_hourglass.convolution.conv", "large_hourglass.convolution.bn", "large_hourglass.convolution.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv", "=", "self", ".", "conv", "(", "x", ")", "\n", "bn", "=", "self", ".", "bn", "(", "conv", ")", "\n", "relu", "=", "self", ".", "relu", "(", "bn", ")", "\n", "return", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.fully_connected.__init__": [[27, 35], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "out_dim", ",", "with_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "fully_connected", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_bn", "=", "with_bn", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "inp_dim", ",", "out_dim", ")", "\n", "if", "self", ".", "with_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.fully_connected.forward": [[36, 41], ["large_hourglass.fully_connected.linear", "large_hourglass.fully_connected.relu", "large_hourglass.fully_connected.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "linear", "=", "self", ".", "linear", "(", "x", ")", "\n", "bn", "=", "self", ".", "bn", "(", "linear", ")", "if", "self", ".", "with_bn", "else", "linear", "\n", "relu", "=", "self", ".", "relu", "(", "bn", ")", "\n", "return", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.residual.__init__": [[44, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "inp_dim", ",", "out_dim", ",", "stride", "=", "1", ",", "with_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "residual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "stride", ",", "stride", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", "\n", "self", ".", "skip", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "stride", ",", "stride", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", ")", "if", "stride", "!=", "1", "or", "inp_dim", "!=", "out_dim", "else", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.residual.forward": [[60, 70], ["large_hourglass.residual.conv1", "large_hourglass.residual.bn1", "large_hourglass.residual.relu1", "large_hourglass.residual.conv2", "large_hourglass.residual.bn2", "large_hourglass.residual.skip", "large_hourglass.residual.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "bn1", "=", "self", ".", "bn1", "(", "conv1", ")", "\n", "relu1", "=", "self", ".", "relu1", "(", "bn1", ")", "\n", "\n", "conv2", "=", "self", ".", "conv2", "(", "relu1", ")", "\n", "bn2", "=", "self", ".", "bn2", "(", "conv2", ")", "\n", "\n", "skip", "=", "self", ".", "skip", "(", "x", ")", "\n", "return", "self", ".", "relu", "(", "bn2", "+", "skip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.MergeUp.forward": [[88, 90], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "up1", ",", "up2", ")", ":", "\n", "        ", "return", "up1", "+", "up2", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.kp_module.__init__": [[120, 168], ["torch.Module.__init__", "make_up_layer", "large_hourglass.make_pool_layer", "large_hourglass.make_hg_layer", "make_hg_layer_revr", "large_hourglass.make_unpool_layer", "large_hourglass.make_merge_layer", "large_hourglass.kp_module", "make_low_layer"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_pool_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_hg_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_unpool_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_merge_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "n", ",", "dims", ",", "modules", ",", "layer", "=", "residual", ",", "\n", "make_up_layer", "=", "make_layer", ",", "make_low_layer", "=", "make_layer", ",", "\n", "make_hg_layer", "=", "make_layer", ",", "make_hg_layer_revr", "=", "make_layer_revr", ",", "\n", "make_pool_layer", "=", "make_pool_layer", ",", "make_unpool_layer", "=", "make_unpool_layer", ",", "\n", "make_merge_layer", "=", "make_merge_layer", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "kp_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n", "=", "n", "\n", "\n", "curr_mod", "=", "modules", "[", "0", "]", "\n", "next_mod", "=", "modules", "[", "1", "]", "\n", "\n", "curr_dim", "=", "dims", "[", "0", "]", "\n", "next_dim", "=", "dims", "[", "1", "]", "\n", "\n", "self", ".", "up1", "=", "make_up_layer", "(", "\n", "3", ",", "curr_dim", ",", "curr_dim", ",", "curr_mod", ",", "\n", "layer", "=", "layer", ",", "**", "kwargs", "\n", ")", "\n", "self", ".", "max1", "=", "make_pool_layer", "(", "curr_dim", ")", "\n", "self", ".", "low1", "=", "make_hg_layer", "(", "\n", "3", ",", "curr_dim", ",", "next_dim", ",", "curr_mod", ",", "\n", "layer", "=", "layer", ",", "**", "kwargs", "\n", ")", "\n", "self", ".", "low2", "=", "kp_module", "(", "\n", "n", "-", "1", ",", "dims", "[", "1", ":", "]", ",", "modules", "[", "1", ":", "]", ",", "layer", "=", "layer", ",", "\n", "make_up_layer", "=", "make_up_layer", ",", "\n", "make_low_layer", "=", "make_low_layer", ",", "\n", "make_hg_layer", "=", "make_hg_layer", ",", "\n", "make_hg_layer_revr", "=", "make_hg_layer_revr", ",", "\n", "make_pool_layer", "=", "make_pool_layer", ",", "\n", "make_unpool_layer", "=", "make_unpool_layer", ",", "\n", "make_merge_layer", "=", "make_merge_layer", ",", "\n", "**", "kwargs", "\n", ")", "if", "self", ".", "n", ">", "1", "else", "make_low_layer", "(", "\n", "3", ",", "next_dim", ",", "next_dim", ",", "next_mod", ",", "\n", "layer", "=", "layer", ",", "**", "kwargs", "\n", ")", "\n", "self", ".", "low3", "=", "make_hg_layer_revr", "(", "\n", "3", ",", "next_dim", ",", "curr_dim", ",", "curr_mod", ",", "\n", "layer", "=", "layer", ",", "**", "kwargs", "\n", ")", "\n", "self", ".", "up2", "=", "make_unpool_layer", "(", "curr_dim", ")", "\n", "\n", "self", ".", "merge", "=", "make_merge_layer", "(", "curr_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.kp_module.forward": [[169, 177], ["large_hourglass.kp_module.up1", "large_hourglass.kp_module.max1", "large_hourglass.kp_module.low1", "large_hourglass.kp_module.low2", "large_hourglass.kp_module.low3", "large_hourglass.kp_module.up2", "large_hourglass.kp_module.merge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "up1", "=", "self", ".", "up1", "(", "x", ")", "\n", "max1", "=", "self", ".", "max1", "(", "x", ")", "\n", "low1", "=", "self", ".", "low1", "(", "max1", ")", "\n", "low2", "=", "self", ".", "low2", "(", "low1", ")", "\n", "low3", "=", "self", ".", "low3", "(", "low2", ")", "\n", "up2", "=", "self", ".", "up2", "(", "low3", ")", "\n", "return", "self", ".", "merge", "(", "up1", ",", "up2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.exkp.__init__": [[180, 254], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "heads.keys", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "large_hourglass.convolution", "large_hourglass.residual", "large_hourglass.kp_module", "large_hourglass.make_cnv_layer", "large_hourglass.make_inter_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "large_hourglass.exkp.__setattr__", "large_hourglass.exkp.__getattr__", "torch.ModuleList", "torch.ModuleList", "large_hourglass.exkp.__setattr__", "range", "range", "range", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "heat[].bias.data.fill_", "make_heat_layer", "make_regr_layer", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_cnv_layer", "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_inter_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "n", ",", "nstack", ",", "dims", ",", "modules", ",", "heads", ",", "pre", "=", "None", ",", "cnv_dim", "=", "256", ",", "\n", "make_tl_layer", "=", "None", ",", "make_br_layer", "=", "None", ",", "\n", "make_cnv_layer", "=", "make_cnv_layer", ",", "make_heat_layer", "=", "make_kp_layer", ",", "\n", "make_tag_layer", "=", "make_kp_layer", ",", "make_regr_layer", "=", "make_kp_layer", ",", "\n", "make_up_layer", "=", "make_layer", ",", "make_low_layer", "=", "make_layer", ",", "\n", "make_hg_layer", "=", "make_layer", ",", "make_hg_layer_revr", "=", "make_layer_revr", ",", "\n", "make_pool_layer", "=", "make_pool_layer", ",", "make_unpool_layer", "=", "make_unpool_layer", ",", "\n", "make_merge_layer", "=", "make_merge_layer", ",", "make_inter_layer", "=", "make_inter_layer", ",", "\n", "kp_layer", "=", "residual", "\n", ")", ":", "\n", "        ", "super", "(", "exkp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nstack", "=", "nstack", "\n", "self", ".", "heads", "=", "heads", "\n", "\n", "curr_dim", "=", "dims", "[", "0", "]", "\n", "\n", "self", ".", "pre", "=", "nn", ".", "Sequential", "(", "\n", "convolution", "(", "7", ",", "3", ",", "128", ",", "stride", "=", "2", ")", ",", "\n", "residual", "(", "3", ",", "128", ",", "256", ",", "stride", "=", "2", ")", "\n", ")", "if", "pre", "is", "None", "else", "pre", "\n", "\n", "self", ".", "kps", "=", "nn", ".", "ModuleList", "(", "[", "\n", "kp_module", "(", "\n", "n", ",", "dims", ",", "modules", ",", "layer", "=", "kp_layer", ",", "\n", "make_up_layer", "=", "make_up_layer", ",", "\n", "make_low_layer", "=", "make_low_layer", ",", "\n", "make_hg_layer", "=", "make_hg_layer", ",", "\n", "make_hg_layer_revr", "=", "make_hg_layer_revr", ",", "\n", "make_pool_layer", "=", "make_pool_layer", ",", "\n", "make_unpool_layer", "=", "make_unpool_layer", ",", "\n", "make_merge_layer", "=", "make_merge_layer", "\n", ")", "for", "_", "in", "range", "(", "nstack", ")", "\n", "]", ")", "\n", "self", ".", "cnvs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "make_cnv_layer", "(", "curr_dim", ",", "cnv_dim", ")", "for", "_", "in", "range", "(", "nstack", ")", "\n", "]", ")", "\n", "\n", "self", ".", "inters", "=", "nn", ".", "ModuleList", "(", "[", "\n", "make_inter_layer", "(", "curr_dim", ")", "for", "_", "in", "range", "(", "nstack", "-", "1", ")", "\n", "]", ")", "\n", "\n", "self", ".", "inters_", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "curr_dim", ")", "\n", ")", "for", "_", "in", "range", "(", "nstack", "-", "1", ")", "\n", "]", ")", "\n", "self", ".", "cnvs_", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "cnv_dim", ",", "curr_dim", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "curr_dim", ")", "\n", ")", "for", "_", "in", "range", "(", "nstack", "-", "1", ")", "\n", "]", ")", "\n", "\n", "## keypoint heatmaps", "\n", "for", "head", "in", "heads", ".", "keys", "(", ")", ":", "\n", "            ", "if", "'hm'", "in", "head", ":", "\n", "                ", "module", "=", "nn", ".", "ModuleList", "(", "[", "\n", "make_heat_layer", "(", "\n", "cnv_dim", ",", "curr_dim", ",", "heads", "[", "head", "]", ")", "for", "_", "in", "range", "(", "nstack", ")", "\n", "]", ")", "\n", "self", ".", "__setattr__", "(", "head", ",", "module", ")", "\n", "for", "heat", "in", "self", ".", "__getattr__", "(", "head", ")", ":", "\n", "                    ", "heat", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "", "else", ":", "\n", "                ", "module", "=", "nn", ".", "ModuleList", "(", "[", "\n", "make_regr_layer", "(", "\n", "cnv_dim", ",", "curr_dim", ",", "heads", "[", "head", "]", ")", "for", "_", "in", "range", "(", "nstack", ")", "\n", "]", ")", "\n", "self", ".", "__setattr__", "(", "head", ",", "module", ")", "\n", "\n", "", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.exkp.forward": [[255, 276], ["large_hourglass.exkp.pre", "range", "kp_", "cnv_", "outs.append", "layer", "large_hourglass.exkp.relu", "large_hourglass.exkp.__getattr__"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "inter", "=", "self", ".", "pre", "(", "image", ")", "\n", "outs", "=", "[", "]", "\n", "\n", "for", "ind", "in", "range", "(", "self", ".", "nstack", ")", ":", "\n", "            ", "kp_", ",", "cnv_", "=", "self", ".", "kps", "[", "ind", "]", ",", "self", ".", "cnvs", "[", "ind", "]", "\n", "kp", "=", "kp_", "(", "inter", ")", "\n", "cnv", "=", "cnv_", "(", "kp", ")", "\n", "\n", "out", "=", "{", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "                ", "layer", "=", "self", ".", "__getattr__", "(", "head", ")", "[", "ind", "]", "\n", "y", "=", "layer", "(", "cnv", ")", "\n", "out", "[", "head", "]", "=", "y", "\n", "\n", "", "outs", ".", "append", "(", "out", ")", "\n", "if", "ind", "<", "self", ".", "nstack", "-", "1", ":", "\n", "                ", "inter", "=", "self", ".", "inters_", "[", "ind", "]", "(", "inter", ")", "+", "self", ".", "cnvs_", "[", "ind", "]", "(", "cnv", ")", "\n", "inter", "=", "self", ".", "relu", "(", "inter", ")", "\n", "inter", "=", "self", ".", "inters", "[", "ind", "]", "(", "inter", ")", "\n", "", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__": [[285, 297], ["large_hourglass.exkp.__init__"], "methods", ["home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.HourglassNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "heads", ",", "num_stacks", "=", "2", ")", ":", "\n", "        ", "n", "=", "5", "\n", "dims", "=", "[", "256", ",", "256", ",", "384", ",", "384", ",", "384", ",", "512", "]", "\n", "modules", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "4", "]", "\n", "\n", "super", "(", "HourglassNet", ",", "self", ")", ".", "__init__", "(", "\n", "n", ",", "num_stacks", ",", "dims", ",", "modules", ",", "heads", ",", "\n", "make_tl_layer", "=", "None", ",", "\n", "make_br_layer", "=", "None", ",", "\n", "make_pool_layer", "=", "make_pool_layer", ",", "\n", "make_hg_layer", "=", "make_hg_layer", ",", "\n", "kp_layer", "=", "residual", ",", "cnv_dim", "=", "256", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_layer": [[72, 77], ["range", "torch.Sequential", "layer", "layers.append", "layer"], "function", ["None"], ["", "", "def", "make_layer", "(", "k", ",", "inp_dim", ",", "out_dim", ",", "modules", ",", "layer", "=", "convolution", ",", "**", "kwargs", ")", ":", "\n", "    ", "layers", "=", "[", "layer", "(", "k", ",", "inp_dim", ",", "out_dim", ",", "**", "kwargs", ")", "]", "\n", "for", "_", "in", "range", "(", "1", ",", "modules", ")", ":", "\n", "        ", "layers", ".", "append", "(", "layer", "(", "k", ",", "out_dim", ",", "out_dim", ",", "**", "kwargs", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_layer_revr": [[79, 85], ["range", "layers.append", "torch.Sequential", "layers.append", "layer", "layer"], "function", ["None"], ["", "def", "make_layer_revr", "(", "k", ",", "inp_dim", ",", "out_dim", ",", "modules", ",", "layer", "=", "convolution", ",", "**", "kwargs", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "modules", "-", "1", ")", ":", "\n", "        ", "layers", ".", "append", "(", "layer", "(", "k", ",", "inp_dim", ",", "inp_dim", ",", "**", "kwargs", ")", ")", "\n", "", "layers", ".", "append", "(", "layer", "(", "k", ",", "inp_dim", ",", "out_dim", ",", "**", "kwargs", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_merge_layer": [[92, 94], ["large_hourglass.MergeUp"], "function", ["None"], ["", "", "def", "make_merge_layer", "(", "dim", ")", ":", "\n", "    ", "return", "MergeUp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_pool_layer": [[96, 98], ["torch.Sequential"], "function", ["None"], ["", "def", "make_pool_layer", "(", "dim", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_unpool_layer": [[100, 102], ["torch.Upsample"], "function", ["None"], ["", "def", "make_unpool_layer", "(", "dim", ")", ":", "\n", "    ", "return", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_kp_layer": [[104, 108], ["torch.Sequential", "large_hourglass.convolution", "torch.Conv2d"], "function", ["None"], ["", "def", "make_kp_layer", "(", "cnv_dim", ",", "curr_dim", ",", "out_dim", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "convolution", "(", "3", ",", "cnv_dim", ",", "curr_dim", ",", "with_bn", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "curr_dim", ",", "out_dim", ",", "(", "1", ",", "1", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_inter_layer": [[111, 113], ["large_hourglass.residual"], "function", ["None"], ["", "def", "make_inter_layer", "(", "dim", ")", ":", "\n", "    ", "return", "residual", "(", "3", ",", "dim", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_cnv_layer": [[115, 117], ["large_hourglass.convolution"], "function", ["None"], ["", "def", "make_cnv_layer", "(", "inp_dim", ",", "out_dim", ")", ":", "\n", "    ", "return", "convolution", "(", "3", ",", "inp_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.make_hg_layer": [[278, 282], ["torch.Sequential", "layer", "layer", "range"], "function", ["None"], ["", "", "def", "make_hg_layer", "(", "kernel", ",", "dim0", ",", "dim1", ",", "mod", ",", "layer", "=", "convolution", ",", "**", "kwargs", ")", ":", "\n", "    ", "layers", "=", "[", "layer", "(", "kernel", ",", "dim0", ",", "dim1", ",", "stride", "=", "2", ")", "]", "\n", "layers", "+=", "[", "layer", "(", "kernel", ",", "dim1", ",", "dim1", ")", "for", "_", "in", "range", "(", "mod", "-", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Guanghan_DANR.networks.large_hourglass.get_large_hourglass_net": [[300, 303], ["large_hourglass.HourglassNet"], "function", ["None"], ["", "", "def", "get_large_hourglass_net", "(", "num_layers", ",", "heads", ",", "head_conv", ")", ":", "\n", "    ", "model", "=", "HourglassNet", "(", "heads", ",", "2", ")", "\n", "return", "model", "\n", "", ""]]}