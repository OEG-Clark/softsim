{"home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.compute_rawdata_xml_statistics.generate_xml_statistics": [[15, 29], ["dict", "pandas.concat().fillna().astype", "pd.concat().fillna().astype.sum", "pd.concat().fillna().astype.sort_values", "open", "bs4.BeautifulSoup", "pandas.DataFrame().set_index", "print", "pandas.concat().fillna", "[].split", "pandas.DataFrame", "pandas.concat", "xml_counter().most_common", "dict.values", "file.split", "xml_counter"], "function", ["None"], ["def", "generate_xml_statistics", "(", "xml_counter", ",", "counted_name", ",", "files", ")", ":", "\n", "    ", "dfs", "=", "dict", "(", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "            ", "filename", "=", "file", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "soup", "=", "BeautifulSoup", "(", "f", ",", "\"lxml-xml\"", ")", "\n", "dfs", "[", "filename", "]", "=", "pd", ".", "DataFrame", "(", "\n", "xml_counter", "(", "soup", ")", ".", "most_common", "(", ")", ",", "columns", "=", "[", "counted_name", ",", "f\"c_{filename}\"", "]", "\n", ")", ".", "set_index", "(", "counted_name", ")", "\n", "print", "(", "\"Done:\"", ",", "filename", ")", "\n", "", "", "df", "=", "pd", ".", "concat", "(", "dfs", ".", "values", "(", ")", ",", "axis", "=", "1", ")", ".", "fillna", "(", "0", ")", ".", "astype", "(", "int", ")", "\n", "df", "[", "\"c_total\"", "]", "=", "df", ".", "sum", "(", "axis", "=", "1", ")", "\n", "df", "=", "df", ".", "sort_values", "(", "\"c_total\"", ",", "ascending", "=", "False", ")", "[", "[", "df", ".", "columns", "[", "-", "1", "]", ",", "*", "df", ".", "columns", "[", ":", "-", "1", "]", "]", "]", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.compute_rawdata_xml_statistics.count_paths": [[31, 40], ["compute_rawdata_xml_statistics.generate_xml_statistics", "generate_xml_statistics.to_csv", "collections.Counter", "reversed", "tuple"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.compute_rawdata_xml_statistics.generate_xml_statistics"], ["", "def", "count_paths", "(", "files", ")", ":", "\n", "    ", "xml_counter", "=", "lambda", "soup", ":", "Counter", "(", "\n", "\"/\"", ".", "join", "(", "reversed", "(", "[", "t", ".", "name", ",", "*", "tuple", "(", "p", ".", "name", "for", "p", "in", "t", ".", "parents", ")", "]", ")", ")", "\n", "for", "t", "in", "soup", ".", "descendants", "\n", "if", "t", ".", "name", "is", "not", "None", "\n", ")", "\n", "counted_name", "=", "\"path\"", "\n", "df", "=", "generate_xml_statistics", "(", "xml_counter", ",", "counted_name", ",", "files", ")", "\n", "df", ".", "to_csv", "(", "f\"{META_PATH}/xml_{counted_name}_counts.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.compute_rawdata_xml_statistics.count_tags": [[42, 49], ["compute_rawdata_xml_statistics.generate_xml_statistics", "generate_xml_statistics.to_csv", "collections.Counter"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.compute_rawdata_xml_statistics.generate_xml_statistics"], ["", "def", "count_tags", "(", "files", ")", ":", "\n", "    ", "xml_counter", "=", "lambda", "soup", ":", "Counter", "(", "\n", "t", ".", "name", "for", "t", "in", "soup", ".", "descendants", "if", "t", ".", "name", "is", "not", "None", "\n", ")", "\n", "counted_name", "=", "\"tag\"", "\n", "df", "=", "generate_xml_statistics", "(", "xml_counter", ",", "counted_name", ",", "files", ")", "\n", "df", ".", "to_csv", "(", "f\"{META_PATH}/xml_{counted_name}_counts.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.compute_rawdata_xml_statistics.count_attributes": [[51, 60], ["compute_rawdata_xml_statistics.generate_xml_statistics", "generate_xml_statistics.to_csv", "collections.Counter", "sorted", "t.attrs.keys"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.compute_rawdata_xml_statistics.generate_xml_statistics"], ["", "def", "count_attributes", "(", "files", ")", ":", "\n", "    ", "xml_counter", "=", "lambda", "soup", ":", "Counter", "(", "\n", "t", ".", "name", "+", "\"/\"", "+", "\"|\"", ".", "join", "(", "sorted", "(", "t", ".", "attrs", ".", "keys", "(", ")", ")", ")", "\n", "for", "t", "in", "soup", ".", "descendants", "\n", "if", "t", ".", "name", "is", "not", "None", "\n", ")", "\n", "counted_name", "=", "\"tag_attrs\"", "\n", "df", "=", "generate_xml_statistics", "(", "xml_counter", ",", "counted_name", ",", "files", ")", "\n", "df", ".", "to_csv", "(", "f\"{META_PATH}/xml_{counted_name}_counts.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.compute_rawdata_xml_statistics.make_tag_url": [[62, 64], ["None"], "function", ["None"], ["", "def", "make_tag_url", "(", "tag", ")", ":", "\n", "    ", "return", "f\"https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-{tag}.html\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.compute_rawdata_xml_statistics.get_tag_description": [[66, 74], ["requests.get", "bs4.BeautifulSoup", "time.sleep", "Exception", "random.random"], "function", ["None"], ["", "def", "get_tag_description", "(", "tag_url", ")", ":", "\n", "    ", "res", "=", "requests", ".", "get", "(", "tag_url", ")", "\n", "if", "res", ".", "status_code", "==", "200", ":", "\n", "        ", "soup", "=", "BeautifulSoup", "(", "res", ".", "text", ")", "\n", "sleep", "(", "random", "(", ")", ")", "\n", "return", "soup", ".", "table", ".", "tr", ".", "td", ".", "text", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.compute_rawdata_xml_statistics.retrieve_tag_descriptions": [[76, 90], ["pandas.read_csv", "pandas.DataFrame", "pd.DataFrame.index.map", "pd.DataFrame.url.map", "pd.DataFrame.description.map", "df_tag_descriptions[].to_csv", "regex.sub", "desc.strip"], "function", ["None"], ["", "", "def", "retrieve_tag_descriptions", "(", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "f\"{META_PATH}/xml_tag_counts.csv\"", ")", "\n", "df_tag_descriptions", "=", "pd", ".", "DataFrame", "(", "\n", "index", "=", "df", ".", "tag", ",", "columns", "=", "[", "\"url\"", ",", "\"description\"", "]", ",", "data", "=", "\"\"", "\n", ")", "\n", "df_tag_descriptions", "[", "\"url\"", "]", "=", "df_tag_descriptions", ".", "index", ".", "map", "(", "make_tag_url", ")", "\n", "df_tag_descriptions", "[", "\"description\"", "]", "=", "df_tag_descriptions", ".", "url", ".", "map", "(", "\n", "get_tag_description", "\n", ")", "# this takes a bit of time b/c we are being nice to the server", "\n", "df_tag_descriptions", "[", "\"description\"", "]", "=", "df_tag_descriptions", ".", "description", ".", "map", "(", "\n", "lambda", "desc", ":", "re", ".", "sub", "(", "\"\\s+\"", ",", "\" \"", ",", "desc", ".", "strip", "(", ")", ")", "\n", ")", "\n", "df_tag_descriptions", "[", "[", "\"description\"", ",", "\"url\"", "]", "]", ".", "to_csv", "(", "\n", "f\"{META_PATH}/xml_tag_descriptions.csv\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting.get_hypergraph": [[26, 37], ["hypernetx.Hypergraph", "df_grouped.iterrows", "hnx.Hypergraph.add_edge", "hypernetx.Entity", "row.items"], "function", ["None"], ["def", "get_hypergraph", "(", "df_grouped", ")", ":", "\n", "    ", "H", "=", "hnx", ".", "Hypergraph", "(", ")", "\n", "for", "idx", ",", "row", "in", "df_grouped", ".", "iterrows", "(", ")", ":", "\n", "        ", "H", ".", "add_edge", "(", "\n", "hnx", ".", "Entity", "(", "\n", "idx", ",", "\n", "row", "[", "\"onstage\"", "]", ",", "\n", "**", "{", "k", ":", "v", "for", "k", ",", "v", "in", "row", ".", "items", "(", ")", "if", "k", "!=", "\"onstage\"", "}", ",", "\n", ")", "\n", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting.plot_character_rankings": [[39, 73], ["hyperbard.ranking.get_character_ranking_df", "matplotlib.subplots", "ax.set_prop_cycle", "pandas.plotting.parallel_coordinates", "ax.invert_yaxis", "matplotlib.legend", "matplotlib.tight_layout", "cycler.cycler", "cycler.cycler", "hyperbard.utils.get_name_from_identifier", "matplotlib.savefig", "matplotlib.close", "matplotlib.cm.tab20c", "matplotlib.cm.tab20b", "elem.get_text", "ax.legend().get_texts", "ax.legend", "len", "len"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.get_character_ranking_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_name_from_identifier"], ["", "def", "plot_character_rankings", "(", "df", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    baby plotting function (wip!)\n    \"\"\"", "\n", "character_ranking_df", "=", "get_character_ranking_df", "(", "df", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "\n", "1", ",", "\n", "1", ",", "\n", "figsize", "=", "(", "\n", "3", "*", "(", "len", "(", "character_ranking_df", ".", "columns", ")", "-", "1", ")", ",", "\n", "9", "+", "len", "(", "character_ranking_df", ")", "//", "10", ",", "\n", ")", ",", "\n", ")", "\n", "custom_cycler", "=", "cycler", "(", "linestyle", "=", "[", "\"-\"", ",", "\"--\"", ",", "\":\"", ",", "\"-.\"", "]", ")", "*", "cycler", "(", "\n", "marker", "=", "[", "\"^\"", ",", "\">\"", ",", "\"v\"", ",", "\"<\"", "]", "\n", ")", "\n", "cmap", "=", "lambda", "i", ":", "cm", ".", "tab20c", "(", "i", ")", "if", "i", "%", "2", "==", "0", "else", "cm", ".", "tab20b", "(", "i", ")", "\n", "ax", ".", "set_prop_cycle", "(", "custom_cycler", ")", "\n", "pd", ".", "plotting", ".", "parallel_coordinates", "(", "\n", "character_ranking_df", ",", "\n", "class_column", "=", "\"index\"", ",", "\n", "colormap", "=", "cmap", ",", "\n", "ax", "=", "ax", ",", "\n", "alpha", "=", "0.5", ",", "\n", ")", "\n", "ax", ".", "invert_yaxis", "(", ")", "\n", "labels", "=", "[", "\n", "get_name_from_identifier", "(", "elem", ".", "get_text", "(", ")", ")", "for", "elem", "in", "ax", ".", "legend", "(", ")", ".", "get_texts", "(", ")", "\n", "]", "\n", "plt", ".", "legend", "(", "loc", "=", "(", "1", ",", "0", ")", ",", "labels", "=", "labels", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "plt", ".", "savefig", "(", "save_path", ",", "transparent", "=", "True", ",", "bbox_inches", "=", "\"tight\"", ",", "backend", "=", "\"pgf\"", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting.plot_correlation_matrix": [[75, 109], ["hyperbard.ranking.get_character_ranking_df", "hyperbard.ranking.get_character_ranking_df.set_index", "min", "seaborn.heatmap", "seaborn.heatmap", "matplotlib.title", "character_ranking_df.set_index.corr().min().min", "character_ranking_df.set_index.corr().min().min", "character_ranking_df.set_index.corr", "character_ranking_df.set_index.corr", "matplotlib.savefig", "matplotlib.close", "dict", "numpy.tril().astype", "dict", "numpy.triu().astype", "character_ranking_df.set_index.corr().min", "character_ranking_df.set_index.corr().min", "numpy.tril", "numpy.triu", "character_ranking_df.set_index.corr", "character_ranking_df.set_index.corr", "character_ranking_df.set_index.corr", "character_ranking_df.set_index.corr"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.get_character_ranking_df"], ["", "", "def", "plot_correlation_matrix", "(", "df", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "character_ranking_df", "=", "get_character_ranking_df", "(", "df", ")", "\n", "character_ranking_df_indexed", "=", "character_ranking_df", ".", "set_index", "(", "\"index\"", ")", "\n", "vmin", "=", "min", "(", "\n", "character_ranking_df_indexed", ".", "corr", "(", "\"spearman\"", ")", ".", "min", "(", ")", ".", "min", "(", ")", ",", "\n", "character_ranking_df_indexed", ".", "corr", "(", "\"kendall\"", ")", ".", "min", "(", ")", ".", "min", "(", ")", ",", "\n", ")", "\n", "sns", ".", "heatmap", "(", "\n", "character_ranking_df_indexed", ".", "corr", "(", "\"kendall\"", ")", ",", "\n", "square", "=", "True", ",", "\n", "cmap", "=", "cm", ".", "Reds", ",", "\n", "cbar_kws", "=", "dict", "(", "shrink", "=", "0.8", ")", ",", "\n", "mask", "=", "np", ".", "tril", "(", "character_ranking_df_indexed", ".", "corr", "(", "\"kendall\"", ")", ".", "values", ",", "k", "=", "0", ")", ".", "astype", "(", "\n", "bool", "\n", ")", ",", "\n", "vmin", "=", "vmin", ",", "\n", "vmax", "=", "1.0", ",", "\n", "cbar", "=", "False", ",", "\n", ")", "\n", "sns", ".", "heatmap", "(", "\n", "character_ranking_df_indexed", ".", "corr", "(", "\"spearman\"", ")", ",", "\n", "square", "=", "True", ",", "\n", "cmap", "=", "cm", ".", "Reds", ",", "\n", "cbar_kws", "=", "dict", "(", "shrink", "=", "0.8", ")", ",", "\n", "mask", "=", "np", ".", "triu", "(", "character_ranking_df_indexed", ".", "corr", "(", "\"spearman\"", ")", ".", "values", ",", "k", "=", "0", ")", ".", "astype", "(", "\n", "bool", "\n", ")", ",", "\n", "vmin", "=", "vmin", ",", "\n", "vmax", "=", "1.0", ",", "\n", ")", "\n", "plt", ".", "title", "(", "\"upper triangle: kendall, lower triangle: spearman\"", ")", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "plt", ".", "savefig", "(", "save_path", ",", "transparent", "=", "True", ",", "backend", "=", "\"pgf\"", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting.plot_hypergraphs": [[111, 179], ["plotting.get_hypergraph", "df.copy", "df.copy.speaker.map", "df.copy.explode().groupby().agg().reset_index", "matplotlib.tight_layout", "matplotlib.subplots", "dict", "plotting.draw_hypergraph", "matplotlib.savefig", "matplotlib.close", "df.copy.explode().groupby().agg", "sorted", "len", "matplotlib.subplots", "dict", "set", "tax.set_title", "get_hypergraph.restrict_to_edges", "dict", "plotting.draw_hypergraph", "sorted", "len", "sorted", "len", "matplotlib.subplots", "sorted", "itertools.product", "ValueError", "df.copy.explode().groupby", "set", "set", "set", "tax.set_title", "get_hypergraph.restrict_to_edges", "dict", "plotting.draw_hypergraph", "list", "list", "[].axis", "range", "range", "df.copy.explode", "get_hypergraph.edges", "get_hypergraph.edges", "df_speakerlist.explode().groupby().agg().reset_index.groupby().agg", "get_hypergraph.edges", "get_hypergraph.edges", "get_hypergraph.edges", "get_hypergraph.edges", "dict", "df_speakerlist.explode().groupby().agg().reset_index.groupby", "df_speakerlist.explode().groupby().agg().reset_index.query().groupby().agg", "dict", "df_speakerlist.explode().groupby().agg().reset_index.query().groupby().agg", "df_speakerlist.explode().groupby().agg().reset_index.query().groupby", "dict", "df_speakerlist.explode().groupby().agg().reset_index.query().groupby", "df_speakerlist.explode().groupby().agg().reset_index.query", "df_speakerlist.explode().groupby().agg().reset_index.query"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting.get_hypergraph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_hypergraphs.draw_hypergraph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_hypergraphs.draw_hypergraph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_hypergraphs.draw_hypergraph"], ["", "", "def", "plot_hypergraphs", "(", "df", ",", "groupby", ",", "separate", "=", "\"graph\"", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "H", "=", "get_hypergraph", "(", "df", ",", "groupby", ")", "\n", "layout_kwargs", "=", "{", "\"layout_kwargs\"", ":", "{", "\"seed\"", ":", "1234", "}", "}", "\n", "df_speakerlist", "=", "df", ".", "copy", "(", ")", "\n", "df_speakerlist", ".", "speaker", "=", "df_speakerlist", ".", "speaker", ".", "map", "(", "character_string_to_sorted_list", ")", "\n", "df_speakerlist_lines", "=", "(", "\n", "df_speakerlist", ".", "explode", "(", "\"speaker\"", ")", "\n", ".", "groupby", "(", "groupby", "+", "[", "\"speaker\"", "]", ")", "\n", ".", "agg", "(", "dict", "(", "n_lines", "=", "sum", ")", ")", "\n", ")", ".", "reset_index", "(", ")", "\n", "if", "separate", "==", "\"graph\"", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "5", ",", "5", ")", ")", "\n", "node_radius", "=", "dict", "(", "\n", "(", "\n", "df_speakerlist_lines", ".", "groupby", "(", "\"speaker\"", ")", ".", "agg", "(", "dict", "(", "n_lines", "=", "sum", ")", ")", "/", "200", "+", "1", "\n", ")", ".", "n_lines", ".", "items", "(", ")", "\n", ")", "\n", "draw_hypergraph", "(", "H", ",", "node_radius", ",", "ax", ",", "layout_kwargs", ")", "\n", "", "elif", "separate", "==", "\"act\"", ":", "\n", "        ", "acts", "=", "sorted", "(", "set", "(", "e", ".", "act", "for", "e", "in", "H", ".", "edges", "(", ")", ")", ")", "\n", "n_acts", "=", "len", "(", "acts", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "n_acts", ",", "figsize", "=", "(", "n_acts", "*", "5", ",", "5", ")", ")", "\n", "for", "act", "in", "acts", ":", "\n", "            ", "tax", "=", "ax", "[", "act", "-", "1", "]", "\n", "tax", ".", "set_title", "(", "f\"Act {act}\"", ")", "\n", "nH", "=", "H", ".", "restrict_to_edges", "(", "[", "e", "for", "e", "in", "H", ".", "edges", "(", ")", "if", "e", ".", "act", "==", "act", "]", ")", "\n", "node_radius", "=", "dict", "(", "\n", "(", "\n", "df_speakerlist_lines", ".", "query", "(", "\"act == @act\"", ")", "\n", ".", "groupby", "(", "\"speaker\"", ")", "\n", ".", "agg", "(", "dict", "(", "n_lines", "=", "sum", ")", ")", "\n", "/", "25", "\n", "+", "1", "\n", ")", ".", "n_lines", ".", "items", "(", ")", "\n", ")", "\n", "draw_hypergraph", "(", "nH", ",", "node_radius", ",", "tax", ",", "layout_kwargs", ")", "\n", "", "", "elif", "separate", "==", "\"scene\"", ":", "\n", "        ", "acts", "=", "sorted", "(", "set", "(", "e", ".", "act", "for", "e", "in", "H", ".", "edges", "(", ")", ")", ")", "\n", "n_acts", "=", "len", "(", "acts", ")", "\n", "scenes", "=", "sorted", "(", "set", "(", "e", ".", "scene", "for", "e", "in", "H", ".", "edges", "(", ")", ")", ")", "\n", "n_scenes", "=", "len", "(", "scenes", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "n_scenes", ",", "n_acts", ",", "figsize", "=", "(", "n_acts", "*", "5", ",", "n_scenes", "*", "5", ")", ")", "\n", "for", "act", ",", "scene", "in", "sorted", "(", "set", "(", "(", "e", ".", "act", ",", "e", ".", "scene", ")", "for", "e", "in", "H", ".", "edges", "(", ")", ")", ")", ":", "\n", "            ", "tax", "=", "ax", "[", "scene", "-", "1", "]", "[", "act", "-", "1", "]", "\n", "tax", ".", "set_title", "(", "f\"Act {act}, Scene {scene}\"", ")", "\n", "nH", "=", "H", ".", "restrict_to_edges", "(", "\n", "[", "e", "for", "e", "in", "H", ".", "edges", "(", ")", "if", "e", ".", "act", "==", "act", "and", "e", ".", "scene", "==", "scene", "]", "\n", ")", "\n", "node_radius", "=", "dict", "(", "\n", "(", "\n", "df_speakerlist_lines", ".", "query", "(", "\"act == @act and scene == @scene\"", ")", "\n", ".", "groupby", "(", "\"speaker\"", ")", "\n", ".", "agg", "(", "dict", "(", "n_lines", "=", "sum", ")", ")", "\n", "/", "25", "\n", "+", "1", "\n", ")", ".", "n_lines", ".", "items", "(", ")", "\n", ")", "\n", "draw_hypergraph", "(", "nH", ",", "node_radius", ",", "tax", ",", "layout_kwargs", ")", "\n", "", "for", "x", ",", "y", "in", "product", "(", "list", "(", "range", "(", "n_scenes", ")", ")", ",", "list", "(", "range", "(", "n_acts", ")", ")", ")", ":", "\n", "            ", "ax", "[", "x", "]", "[", "y", "]", ".", "axis", "(", "\"off\"", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"separate={separate} but must be one of ['graph', 'act', 'scene']\"", "\n", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "plt", ".", "savefig", "(", "save_path", ",", "transparent", "=", "True", ",", "backend", "=", "\"pgf\"", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting.draw_hypergraph": [[181, 192], ["hypernetx.draw", "dict", "hyperbard.utils.get_name_from_identifier", "nH.nodes", "matplotlib.cm.viridis_r", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_name_from_identifier"], ["", "", "def", "draw_hypergraph", "(", "nH", ",", "node_radius", ",", "tax", ",", "layout_kwargs", ")", ":", "\n", "    ", "hnx", ".", "draw", "(", "\n", "nH", ",", "\n", "ax", "=", "tax", ",", "\n", "node_labels", "=", "{", "n", ".", "uid", ":", "get_name_from_identifier", "(", "n", ".", "uid", ")", "for", "n", "in", "nH", ".", "nodes", "(", ")", "}", ",", "\n", "node_radius", "=", "node_radius", ",", "\n", "with_edge_labels", "=", "False", ",", "\n", "edges_kwargs", "=", "dict", "(", "\n", "edgecolors", "=", "[", "cm", ".", "viridis_r", "(", "x", "/", "len", "(", "nH", ")", ")", "for", "x", "in", "range", "(", "len", "(", "nH", ")", ")", "]", "\n", ")", ",", "\n", "**", "layout_kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_hypergraphs.draw_hypergraph": [[15, 45], ["networkx.spring_layout", "min", "hypernetx.draw", "tax.get_children", "H.bipartite", "hyperbard.utils.get_name_from_identifier", "isinstance", "dict", "dict", "dict", "child.set_path_effects", "matplotlib.withStroke", "matplotlib.cm.viridis_r", "range", "H.number_of_edges", "H.number_of_edges"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_name_from_identifier"], ["def", "draw_hypergraph", "(", "H", ",", "node_radius", ",", "edge_width", ",", "fontsize", ",", "tax", ",", "layout_kwargs", ")", ":", "\n", "    ", "pos", "=", "nx", ".", "spring_layout", "(", "H", ".", "bipartite", "(", ")", ",", "**", "layout_kwargs", "[", "\"layout_kwargs\"", "]", ")", "\n", "min_edge_label", "=", "min", "(", "H", ".", "edges", ")", "\n", "edge_labels", "=", "{", "k", ":", "(", "k", "-", "min_edge_label", "+", "1", ")", "for", "k", "in", "H", ".", "edges", "}", "\n", "node_labels", "=", "{", "k", ":", "get_name_from_identifier", "(", "k", ")", "for", "k", "in", "H", ".", "nodes", "}", "\n", "hnx", ".", "draw", "(", "\n", "H", ",", "\n", "ax", "=", "tax", ",", "\n", "pos", "=", "pos", ",", "\n", "with_node_labels", "=", "True", ",", "\n", "node_radius", "=", "node_radius", ",", "\n", "node_labels", "=", "node_labels", ",", "\n", "with_edge_labels", "=", "True", ",", "\n", "edge_labels", "=", "edge_labels", ",", "\n", "edges_kwargs", "=", "dict", "(", "\n", "edgecolors", "=", "[", "\n", "cm", ".", "viridis_r", "(", "x", "/", "H", ".", "number_of_edges", "(", ")", ")", "\n", "for", "x", "in", "range", "(", "H", ".", "number_of_edges", "(", ")", ")", "\n", "]", ",", "\n", "lw", "=", "edge_width", ",", "\n", "dr", "=", "0.05", ",", "\n", ")", ",", "\n", "edge_labels_kwargs", "=", "dict", "(", "fontsize", "=", "fontsize", ")", ",", "\n", "node_labels_kwargs", "=", "dict", "(", "fontsize", "=", "fontsize", ")", ",", "\n", "label_alpha", "=", "0", ",", "\n", ")", "\n", "for", "child", "in", "tax", ".", "get_children", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "child", ",", "Annotation", ")", ":", "\n", "            ", "child", ".", "set_path_effects", "(", "\n", "[", "PathEffects", ".", "withStroke", "(", "linewidth", "=", "5", ",", "foreground", "=", "\"w\"", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_hypergraphs.plot_romeo_hypergraphs": [[48, 81], ["graph_io.load_hypergraph", "pandas.read_csv().query", "range", "graph_io.load_hypergraph.restrict_to_edges", "pd.read_csv().query.query", "node_weights_scene.groupby().agg.groupby().agg", "matplotlib.pyplot.subplots", "plot_romeo_hypergraphs.draw_hypergraph", "hyperbard.plotting_utils.save_pgf_fig", "matplotlib.pyplot.close", "graph_io.load_hypergraph.edges", "pandas.read_csv", "dict", "node_weights_scene.groupby().agg.groupby", "zip", "H.restrict_to_edges.edges"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_hypergraph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_hypergraphs.draw_hypergraph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig"], ["", "", "", "def", "plot_romeo_hypergraphs", "(", ")", ":", "\n", "    ", "H", "=", "load_hypergraph", "(", "\"romeo-and-juliet\"", ",", "\"hg-group-mw\"", ")", "\n", "hyperedges_act_three", "=", "[", "e", "for", "e", "in", "H", ".", "edges", "(", ")", "if", "e", ".", "act", "==", "3", "]", "\n", "node_weights_act_three", "=", "pd", ".", "read_csv", "(", "\n", "f\"{GRAPHDATA_PATH}/romeo-and-juliet_hg-group-mw.node-weights.csv\"", "\n", ")", ".", "query", "(", "\"act == 3\"", ")", "\n", "seed", "=", "5", "\n", "for", "scene", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "scene_edges", "=", "[", "e", "for", "e", "in", "hyperedges_act_three", "if", "e", ".", "scene", "==", "scene", "]", "\n", "H3", "=", "H", ".", "restrict_to_edges", "(", "scene_edges", ")", "\n", "node_weights_scene", "=", "node_weights_act_three", ".", "query", "(", "\"scene == @scene\"", ")", "\n", "node_weights_scene", "=", "node_weights_scene", ".", "groupby", "(", "\"node\"", ")", ".", "agg", "(", "\n", "dict", "(", "n_lines_speaker", "=", "sum", ")", "\n", ")", "\n", "radii3", "=", "{", "\n", "k", ":", "v", "/", "(", "50", "/", "3", ")", "\n", "for", "k", ",", "v", "in", "zip", "(", "\n", "node_weights_scene", ".", "index", ",", "node_weights_scene", ".", "n_lines_speaker", "\n", ")", "\n", "}", "\n", "edge_width3", "=", "{", "k", ".", "uid", ":", "k", ".", "n_lines", "/", "(", "50", "/", "3", ")", "for", "k", "in", "H3", ".", "edges", "(", ")", "}", "\n", "\n", "seed", "=", "11", "\n", "fontsize", "=", "45", "if", "scene", "in", "[", "2", ",", "3", ",", "4", "]", "else", "30", "\n", "layout_kwargs", "=", "{", "\"layout_kwargs\"", ":", "{", "\"seed\"", ":", "seed", "}", "}", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "draw_hypergraph", "(", "H3", ",", "radii3", ",", "edge_width3", ",", "fontsize", "+", "6", ",", "ax", ",", "layout_kwargs", ")", "\n", "save_pgf_fig", "(", "\n", "f\"{PAPERGRAPHICS_PATH}/romeo_and_juliet_hg-group_3-{scene}.pdf\"", ",", "\n", "axis_off", "=", "False", ",", "\n", "tight", "=", "True", ",", "\n", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.raw_summary_statistics.compute_raw_statistics": [[11, 30], ["pandas.read_csv", "len", "df_agg[].sum", "df_agg[].sum", "hyperbard.utils.get_filename_base().split", "pd.read_csv.speaker.map", "hyperbard.utils.get_filename_base"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_filename_base"], ["def", "compute_raw_statistics", "(", "filename_agg", ":", "str", ",", "name_to_type", ":", "pd", ".", "DataFrame", ")", "->", "dict", ":", "\n", "    ", "play", "=", "get_filename_base", "(", "filename_agg", ",", "full", "=", "True", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "df_agg", "=", "pd", ".", "read_csv", "(", "filename_agg", ",", "low_memory", "=", "False", ")", "\n", "\n", "speaking_characters", "=", "{", "\n", "elem", "for", "subset", "in", "df_agg", ".", "speaker", ".", "map", "(", "string_to_set", ")", "for", "elem", "in", "subset", "\n", "}", "\n", "n_characters", "=", "len", "(", "speaking_characters", ")", "\n", "n_words", "=", "df_agg", "[", "\"n_tokens\"", "]", ".", "sum", "(", ")", "\n", "n_lines", "=", "df_agg", "[", "\"n_lines\"", "]", ".", "sum", "(", ")", "\n", "\n", "row", "=", "{", "\n", "\"play\"", ":", "play", ",", "\n", "\"n_characters\"", ":", "n_characters", ",", "\n", "\"n_words\"", ":", "n_words", ",", "\n", "\"n_lines\"", ":", "n_lines", ",", "\n", "\"type\"", ":", "name_to_type", ".", "at", "[", "play", ",", "\"play_type\"", "]", ",", "\n", "}", "\n", "return", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.raw_summary_statistics.compute_all_raw_statistics": [[32, 40], ["pandas.DataFrame.from_records", "raw_summary_statistics.compute_raw_statistics", "rows.append"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.raw_summary_statistics.compute_raw_statistics"], ["", "def", "compute_all_raw_statistics", "(", "filenames_agg", ",", "name_to_type", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "\n", "for", "filename_agg", "in", "filenames_agg", ":", "\n", "        ", "row", "=", "compute_raw_statistics", "(", "filename_agg", ",", "name_to_type", ")", "\n", "rows", ".", "append", "(", "row", ")", "\n", "\n", "", "return", "pd", ".", "DataFrame", ".", "from_records", "(", "rows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_graph_rankings.plot_character_rankings": [[21, 60], ["matplotlib.subplots", "ax.set_prop_cycle", "pandas.plotting.parallel_coordinates", "ax.invert_yaxis", "matplotlib.xticks", "matplotlib.legend", "plt.legend.get_frame", "legend.get_frame.set_edgecolor", "legend.get_frame.set_boxstyle", "cycler.cycler", "cycler.cycler", "character_ranking_df.reset_index", "hyperbard.utils.remove_uppercase_prefixes", "matplotlib.savefig", "matplotlib.close", "matplotlib.show", "matplotlib.cm.tab20c", "matplotlib.cm.tab20b", "elem.get_text", "ax.legend().get_texts", "ax.legend", "len", "len"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes"], ["def", "plot_character_rankings", "(", "character_ranking_df", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "\n", "1", ",", "\n", "1", ",", "\n", "figsize", "=", "(", "\n", "2", "*", "(", "len", "(", "character_ranking_df", ".", "columns", ")", "-", "1", ")", ",", "\n", "9", "+", "len", "(", "character_ranking_df", ")", "//", "10", ",", "\n", ")", ",", "\n", ")", "\n", "custom_cycler", "=", "cycler", "(", "linestyle", "=", "[", "\"-\"", ",", "\"--\"", ",", "\":\"", ",", "\"-.\"", "]", ")", "*", "cycler", "(", "\n", "marker", "=", "[", "\"^\"", ",", "\">\"", ",", "\"v\"", ",", "\"<\"", "]", "\n", ")", "\n", "cmap", "=", "lambda", "i", ":", "cm", ".", "tab20c", "(", "i", ")", "if", "i", "%", "2", "==", "0", "else", "cm", ".", "tab20b", "(", "i", ")", "\n", "ax", ".", "set_prop_cycle", "(", "custom_cycler", ")", "\n", "pd", ".", "plotting", ".", "parallel_coordinates", "(", "\n", "character_ranking_df", ".", "reset_index", "(", ")", ",", "\n", "class_column", "=", "\"index\"", ",", "\n", "colormap", "=", "cmap", ",", "\n", "ax", "=", "ax", ",", "\n", "alpha", "=", "0.8", ",", "\n", "lw", "=", "4", ",", "\n", "sort_labels", "=", "True", ",", "\n", "markersize", "=", "10", ",", "\n", ")", "\n", "ax", ".", "invert_yaxis", "(", ")", "\n", "labels", "=", "[", "\n", "remove_uppercase_prefixes", "(", "elem", ".", "get_text", "(", ")", ")", "for", "elem", "in", "ax", ".", "legend", "(", ")", ".", "get_texts", "(", ")", "\n", "]", "\n", "plt", ".", "xticks", "(", "rotation", "=", "45", ")", "\n", "legend", "=", "plt", ".", "legend", "(", "loc", "=", "(", "1.01", ",", "0", ")", ",", "labels", "=", "labels", ",", "ncol", "=", "2", ")", "\n", "frame", "=", "legend", ".", "get_frame", "(", ")", "\n", "frame", ".", "set_edgecolor", "(", "\"black\"", ")", "\n", "frame", ".", "set_boxstyle", "(", "\"square\"", ",", "pad", "=", "0", ")", "\n", "# plt.tight_layout()", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "plt", ".", "savefig", "(", "save_path", ",", "transparent", "=", "True", ",", "bbox_inches", "=", "\"tight\"", ",", "backend", "=", "\"pgf\"", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_graph_rankings.get_selected_representations": [[62, 135], ["hyperbard.graph_io.load_graph", "hyperbard.graph_io.load_graph", "hyperbard.graph_io.load_graph", "hyperbard.graph_io.load_graph", "hyperbard.graph_io.load_graph", "hyperbard.graph_io.load_graph", "hyperbard.graph_io.load_graph"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph"], ["", "", "def", "get_selected_representations", "(", "play", ")", ":", "\n", "    ", "ce_scene_b", "=", "load_graph", "(", "play", ",", "\"ce-scene-w\"", ",", "\"count\"", ")", "\n", "ce_scene_m", "=", "load_graph", "(", "play", ",", "\"ce-scene-mw\"", ",", "\"n_lines\"", ")", "\n", "\n", "ce_group_b", "=", "load_graph", "(", "play", ",", "\"ce-group-w\"", ",", "\"count\"", ")", "\n", "ce_group_m", "=", "load_graph", "(", "play", ",", "\"ce-group-mw\"", ",", "\"n_lines\"", ")", "\n", "\n", "se_scene", "=", "load_graph", "(", "play", ",", "\"se-scene-w\"", ",", "\"n_lines\"", ")", "\n", "se_group", "=", "load_graph", "(", "play", ",", "\"se-group-w\"", ",", "\"n_lines\"", ")", "\n", "\n", "se_speech", "=", "load_graph", "(", "play", ",", "\"se-speech-wd\"", ",", "\"n_lines\"", ")", "\n", "\n", "representations", "=", "[", "\n", "{", "\n", "\"name\"", ":", "\"01-ce-scene-b\"", ",", "\n", "\"graph\"", ":", "ce_scene_b", ",", "\n", "}", ",", "\n", "{", "\n", "\"name\"", ":", "\"02-ce-scene-mb\"", ",", "\n", "\"graph\"", ":", "ce_scene_b", ",", "\n", "\"weight\"", ":", "\"count\"", ",", "\n", "}", ",", "\n", "{", "\n", "\"name\"", ":", "\"03-ce-scene-mw\"", ",", "\n", "\"graph\"", ":", "ce_scene_m", ",", "\n", "\"weight\"", ":", "\"n_lines\"", ",", "\n", "}", ",", "\n", "{", "\n", "\"name\"", ":", "\"04-ce-group-b\"", ",", "\n", "\"graph\"", ":", "ce_group_b", ",", "\n", "}", ",", "\n", "{", "\n", "\"name\"", ":", "\"05-ce-group-mb\"", ",", "\n", "\"graph\"", ":", "ce_group_b", ",", "\n", "\"weight\"", ":", "\"count\"", ",", "\n", "}", ",", "\n", "{", "\n", "\"name\"", ":", "\"06-ce-group-mw\"", ",", "\n", "\"graph\"", ":", "ce_group_m", ",", "\n", "\"weight\"", ":", "\"n_lines\"", ",", "\n", "}", ",", "\n", "{", "\n", "\"name\"", ":", "\"07-se-scene-b\"", ",", "\n", "\"graph\"", ":", "se_scene", ",", "\n", "}", ",", "\n", "{", "\n", "\"name\"", ":", "\"08-se-scene-w\"", ",", "\n", "\"graph\"", ":", "se_scene", ",", "\n", "\"weight\"", ":", "\"n_lines\"", ",", "\n", "}", ",", "\n", "{", "\n", "\"name\"", ":", "\"09-se-group-b\"", ",", "\n", "\"graph\"", ":", "se_group", ",", "\n", "}", ",", "\n", "{", "\n", "\"name\"", ":", "\"10-se-group-w\"", ",", "\n", "\"graph\"", ":", "se_group", ",", "\n", "\"weight\"", ":", "\"n_lines\"", ",", "\n", "}", ",", "\n", "{", "\n", "\"name\"", ":", "\"11-se-speech-wd_in\"", ",", "\n", "\"graph\"", ":", "se_speech", ",", "\n", "\"weight\"", ":", "\"n_lines\"", ",", "\n", "\"degree\"", ":", "\"in\"", ",", "\n", "}", ",", "\n", "{", "\n", "\"name\"", ":", "\"12-se-speech-wd_out\"", ",", "\n", "\"graph\"", ":", "se_speech", ",", "\n", "\"weight\"", ":", "\"n_lines\"", ",", "\n", "\"degree\"", ":", "\"out\"", ",", "\n", "}", ",", "\n", "]", "\n", "return", "representations", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_graph_rankings.compute_ranking_df": [[137, 144], ["print", "plot_graph_rankings.get_selected_representations", "hyperbard.ranking.get_character_ranking", "df_ranking.sort_index.index.map", "df_ranking.sort_index.sort_index"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_graph_rankings.get_selected_representations", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.get_character_ranking"], ["", "def", "compute_ranking_df", "(", "play", ")", ":", "\n", "    ", "print", "(", "play", ")", "\n", "representations", "=", "get_selected_representations", "(", "play", ")", "\n", "df_ranking", "=", "get_character_ranking", "(", "representations", ")", "\n", "df_ranking", ".", "index", "=", "df_ranking", ".", "index", ".", "map", "(", "remove_uppercase_prefixes", ")", "\n", "df_ranking", "=", "df_ranking", ".", "sort_index", "(", ")", "\n", "return", "df_ranking", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_graph_rankings.plot_graph_rankings": [[146, 164], ["hyperbard.utils.get_filename_base().replace", "plot_graph_rankings.compute_ranking_df", "plot_graph_rankings.plot_character_rankings", "compute_ranking_df.to_csv", "sorted", "os.path.join", "hyperbard.utils.get_filename_base", "glob.glob", "os.path.join"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_graph_rankings.compute_ranking_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_graph_rankings.plot_character_rankings", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_filename_base"], ["", "@", "timeit", "\n", "def", "plot_graph_rankings", "(", ")", ":", "\n", "    ", "plays", "=", "[", "\n", "get_filename_base", "(", "fn", ")", ".", "replace", "(", "\".agg\"", ",", "\"\"", ")", "\n", "for", "fn", "in", "sorted", "(", "glob", "(", "f\"{DATA_PATH}/*.agg.csv\"", ")", ")", "\n", "]", "\n", "\n", "for", "play", "in", "plays", ":", "\n", "        ", "df_ranking", "=", "compute_ranking_df", "(", "play", ")", "\n", "plot_character_rankings", "(", "\n", "df_ranking", ",", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "\n", "f\"{GRAPHICS_PATH}\"", ",", "f\"{play}_ranking_parallel_coordinates.pdf\"", "\n", ")", ",", "\n", ")", "\n", "\n", "df_ranking", ".", "to_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "f\"{RANKINGDATA_PATH}\"", ",", "f\"{play}_ranking.csv\"", ")", ",", "index", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.track_time.timeit": [[7, 20], ["os.makedirs", "time.time", "method", "time.time", "open", "f.write", "os.path.basename"], "function", ["None"], ["def", "timeit", "(", "method", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "RESOURCE_USAGE_PATH", ",", "exist_ok", "=", "True", ")", "\n", "\n", "def", "timed", "(", "*", "args", ",", "**", "kw", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "result", "=", "method", "(", "*", "args", ",", "**", "kw", ")", "\n", "finish", "=", "time", ".", "time", "(", ")", "\n", "timefile", "=", "f\"{RESOURCE_USAGE_PATH}/{method.__name__}.txt\"", "\n", "with", "open", "(", "timefile", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "f\"{os.path.basename(__file__)}, {finish - start}\"", ")", "\n", "", "return", "result", "\n", "\n", "", "return", "timed", "\n", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_weighted_multigraph": [[10, 36], ["dict", "df.groupby().agg().reset_index", "df_aggregated[].map", "networkx.MultiGraph", "df.groupby().agg().reset_index.iterrows", "nx.MultiGraph.add_edges_from", "df.groupby().agg", "list", "itertools.combinations", "df.groupby", "row.items"], "function", ["None"], ["def", "get_weighted_multigraph", "(", "df", ":", "pd", ".", "DataFrame", ",", "groupby", ":", "list", ")", "->", "nx", ".", "MultiGraph", ":", "\n", "    ", "\"\"\"\n    Create a weighted multigraph from an aggregated dataframe,\n    with edges resolved at the level given by the groupby argument,\n    where multiedges are kept, and n_tokens and n_lines are potential weights.\n\n    Representations: ce-{scene, group}-{mb,mw}\n\n    :param df: pd.DataFrame generated from an .agg.csv file\n    :param groupby: [\"act\", \"scene\"] -> one edge per act and scene,\n    [\"act\", \"scene\", \"stagegroup\"] -> one edge per act, scene, and stagegroup\n    :return: nx.MultiGraph corresponding to the specified groupby\n    \"\"\"", "\n", "agg", "=", "dict", "(", "onstage", "=", "sort_join_strings", ",", "n_tokens", "=", "sum", ",", "n_lines", "=", "sum", ")", "\n", "df_aggregated", "=", "df", ".", "groupby", "(", "groupby", ")", ".", "agg", "(", "agg", ")", ".", "reset_index", "(", ")", "\n", "df_aggregated", "[", "\"onstage\"", "]", "=", "df_aggregated", "[", "\"onstage\"", "]", ".", "map", "(", "\n", "character_string_to_sorted_list", "\n", ")", "\n", "mG", "=", "nx", ".", "MultiGraph", "(", ")", "\n", "for", "idx", ",", "row", "in", "df_aggregated", ".", "iterrows", "(", ")", ":", "\n", "        ", "mG", ".", "add_edges_from", "(", "\n", "list", "(", "combinations", "(", "row", "[", "\"onstage\"", "]", ",", "2", ")", ")", ",", "\n", "**", "{", "k", ":", "v", "for", "k", ",", "v", "in", "row", ".", "items", "(", ")", "if", "k", "!=", "\"onstage\"", "}", ",", "\n", "edge_index", "=", "idx", "+", "1", ",", "\n", ")", "\n", "", "return", "mG", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_count_weighted_graph": [[38, 57], ["graph_representations.get_weighted_multigraph", "networkx.Graph", "get_weighted_multigraph.edges", "nx.Graph.edges", "nx.Graph.add_edge"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_weighted_multigraph"], ["", "def", "get_count_weighted_graph", "(", "df", ":", "pd", ".", "DataFrame", ",", "groupby", ":", "list", ")", ":", "\n", "    ", "\"\"\"\n    Create a count-weighted graph from an aggregated dataframe,\n    with edges resolved at the level given by the groupby argument,\n    where multiedges are _not_ kept, and counts are potential weights.\n\n    Representations: ce-{act,group}-{b,w}\n\n    :param groupby: [\"act\", \"scene\"] -> one edge per act and scene, [\"act\", \"scene\", \"stagegroup\"] -> one edge per act, scene, and stagegroup\n    :return: nx.Graph corresponding to the specified groupby\n    \"\"\"", "\n", "mG", "=", "get_weighted_multigraph", "(", "df", ",", "groupby", ")", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "for", "(", "u", ",", "v", ",", "k", ")", "in", "mG", ".", "edges", "(", "keys", "=", "True", ")", ":", "\n", "        ", "if", "(", "u", ",", "v", ")", "in", "G", ".", "edges", "(", ")", ":", "\n", "            ", "G", ".", "edges", "[", "u", ",", "v", "]", "[", "\"count\"", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "G", ".", "add_edge", "(", "u", ",", "v", ",", "count", "=", "1", ")", "\n", "", "", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.format_text_unit_node": [[59, 62], ["str().zfill", "enumerate", "str"], "function", ["None"], ["", "def", "format_text_unit_node", "(", "elem", ")", ":", "\n", "    ", "index_to_digits", "=", "{", "0", ":", "1", ",", "1", ":", "2", ",", "2", ":", "4", "}", "\n", "return", "\".\"", ".", "join", "(", "[", "str", "(", "e", ")", ".", "zfill", "(", "index_to_digits", "[", "idx", "]", ")", "for", "idx", ",", "e", "in", "enumerate", "(", "elem", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_bipartite_graph": [[64, 138], ["dict", "df.groupby().agg().reset_index", "df_aggregated[].map", "graph_representations.format_text_unit_node", "df_aggregated[].map", "networkx.MultiDiGraph", "nx.Graph.add_nodes_from", "nx.Graph.add_nodes_from", "df.groupby().agg().reset_index.iterrows", "networkx.Graph", "nx.Graph.add_nodes_from", "nx.Graph.add_nodes_from", "df.groupby().agg().reset_index.iterrows", "df.groupby().agg", "zip", "graph_representations.format_text_unit_node", "nx.Graph.add_edges_from", "graph_representations.format_text_unit_node", "nx.Graph.add_edges_from", "tuple", "nx.Graph.add_edge", "tuple", "df.groupby"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.format_text_unit_node", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.format_text_unit_node", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.format_text_unit_node"], ["", "def", "get_bipartite_graph", "(", "\n", "df", ":", "pd", ".", "DataFrame", ",", "groupby", ":", "list", "\n", ")", "->", "Union", "[", "nx", ".", "Graph", ",", "nx", ".", "MultiDiGraph", "]", ":", "\n", "    ", "\"\"\"\n    Create a weighted bipartite graph from an aggregated dataframe,\n    with play-part nodes resolved at the level given by the groupby argument,\n    where n_tokens and n_lines are potential weights.\n\n    Representations: se-{scene, group}-{b,w}, se-speech-mwd\n\n    :param df: pd.DataFrame generated from an .agg.csv file\n    :param groupby: [\"act\", \"scene\"] -> one play part node per act and scene, [\"act\", \"scene\", \"stagegroup\"] -> one play part node per act, scene, and stagegroup, [\"act\", \"scene\", \"stagegroup\", \"setting\", \"speaker\"] -> one play part node per act, scene, and stagegroup, directed edges for speech acts/information flow\n    :return: nx.Graph (if groupby is not by speech act) or nx.MultiDiGraph (if groupby is by speech act)\n    \"\"\"", "\n", "agg", "=", "dict", "(", "onstage", "=", "sort_join_strings", ",", "n_tokens", "=", "sum", ",", "n_lines", "=", "sum", ")", "\n", "df_aggregated", "=", "df", ".", "groupby", "(", "groupby", ")", ".", "agg", "(", "agg", ")", ".", "reset_index", "(", ")", "\n", "df_aggregated", "[", "\"onstage\"", "]", "=", "df_aggregated", "[", "\"onstage\"", "]", ".", "map", "(", "\n", "character_string_to_sorted_list", "\n", ")", "\n", "text_units", "=", "[", "\n", "format_text_unit_node", "(", "elem", ")", "\n", "for", "elem", "in", "zip", "(", "\n", "*", "[", "df_aggregated", "[", "c", "]", ".", "values", "for", "c", "in", "df_aggregated", "[", "groupby", "[", ":", "3", "]", "]", ".", "columns", "]", "\n", ")", "\n", "]", "\n", "if", "groupby", "==", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", ",", "\"setting\"", ",", "\"speaker\"", "]", ":", "\n", "        ", "df_aggregated", "[", "\"speaker\"", "]", "=", "df_aggregated", "[", "\"speaker\"", "]", ".", "map", "(", "\n", "character_string_to_sorted_list", "\n", ")", "\n", "G", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "G", ".", "add_nodes_from", "(", "text_units", ",", "node_type", "=", "\"text_unit\"", ")", "\n", "characters", "=", "[", "elem", "for", "sublist", "in", "df_aggregated", ".", "onstage", "for", "elem", "in", "sublist", "]", "\n", "G", ".", "add_nodes_from", "(", "characters", ",", "node_type", "=", "\"character\"", ")", "\n", "for", "idx", ",", "row", "in", "df_aggregated", ".", "iterrows", "(", ")", ":", "\n", "            ", "row_node", "=", "format_text_unit_node", "(", "tuple", "(", "row", "[", "x", "]", "for", "x", "in", "groupby", "[", ":", "3", "]", ")", ")", "\n", "row_speaker_list", "=", "row", "[", "\"speaker\"", "]", "\n", "row_lines", "=", "row", "[", "\"n_lines\"", "]", "\n", "row_tokens", "=", "row", "[", "\"n_tokens\"", "]", "\n", "for", "row_speaker", "in", "row_speaker_list", ":", "\n", "                ", "G", ".", "add_edge", "(", "\n", "row_speaker", ",", "\n", "row_node", ",", "\n", "n_lines", "=", "row_lines", ",", "\n", "n_tokens", "=", "row_tokens", ",", "\n", "edge_index", "=", "idx", "+", "1", ",", "\n", "edge_type", "=", "\"active\"", ",", "\n", ")", "\n", "", "G", ".", "add_edges_from", "(", "\n", "[", "\n", "(", "row_node", ",", "character", ")", "\n", "for", "character", "in", "row", "[", "\"onstage\"", "]", "\n", "if", "character", "not", "in", "row_speaker_list", "\n", "]", ",", "\n", "n_lines", "=", "row_lines", ",", "\n", "n_tokens", "=", "row_tokens", ",", "\n", "edge_index", "=", "idx", "+", "1", ",", "\n", "edge_type", "=", "\"passive\"", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "G", ".", "add_nodes_from", "(", "\n", "[", "elem", "for", "sublist", "in", "df_aggregated", ".", "onstage", "for", "elem", "in", "sublist", "]", ",", "\n", "node_type", "=", "\"character\"", ",", "\n", ")", "\n", "G", ".", "add_nodes_from", "(", "text_units", ",", "node_type", "=", "\"text_unit\"", ")", "\n", "for", "idx", ",", "row", "in", "df_aggregated", ".", "iterrows", "(", ")", ":", "\n", "            ", "row_node", "=", "format_text_unit_node", "(", "tuple", "(", "row", "[", "x", "]", "for", "x", "in", "groupby", ")", ")", "\n", "G", ".", "add_edges_from", "(", "\n", "[", "(", "row_node", ",", "character", ")", "for", "character", "in", "row", "[", "\"onstage\"", "]", "]", ",", "\n", "n_lines", "=", "row", "[", "\"n_lines\"", "]", ",", "\n", "n_tokens", "=", "row", "[", "\"n_tokens\"", "]", ",", "\n", ")", "\n", "\n", "", "", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_weighted_bipartite_graph": [[140, 166], ["graph_representations.get_bipartite_graph", "dict", "get_bipartite_graph.edges", "networkx.DiGraph", "nx.DiGraph.add_nodes_from", "dict.items", "NotImplementedError", "get_bipartite_graph.nodes", "nx.DiGraph.add_edge", "dict.keys"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_bipartite_graph"], ["", "def", "get_weighted_bipartite_graph", "(", "df", ":", "pd", ".", "DataFrame", ",", "groupby", ":", "list", ")", "->", "nx", ".", "DiGraph", ":", "\n", "    ", "if", "groupby", "==", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", ",", "\"setting\"", ",", "\"speaker\"", "]", ":", "\n", "        ", "mG", "=", "get_bipartite_graph", "(", "df", ",", "groupby", ")", "\n", "edges", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "k", ",", "d", "in", "mG", ".", "edges", "(", "keys", "=", "True", ",", "data", "=", "True", ")", ":", "\n", "            ", "if", "(", "u", ",", "v", ")", "not", "in", "edges", ".", "keys", "(", ")", ":", "\n", "                ", "edges", "[", "(", "u", ",", "v", ")", "]", "=", "{", "\n", "\"n_lines\"", ":", "d", "[", "\"n_lines\"", "]", ",", "\n", "\"n_tokens\"", ":", "d", "[", "\"n_tokens\"", "]", ",", "\n", "\"edge_type\"", ":", "d", "[", "\"edge_type\"", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "                ", "edges", "[", "(", "u", ",", "v", ")", "]", "[", "\"n_lines\"", "]", "+=", "d", "[", "\"n_lines\"", "]", "\n", "edges", "[", "(", "u", ",", "v", ")", "]", "[", "\"n_tokens\"", "]", "+=", "d", "[", "\"n_tokens\"", "]", "\n", "", "", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "G", ".", "add_nodes_from", "(", "mG", ".", "nodes", "(", "data", "=", "True", ")", ")", "\n", "for", "e", ",", "data", "in", "edges", ".", "items", "(", ")", ":", "\n", "            ", "G", ".", "add_edge", "(", "\n", "*", "e", ",", "\n", "n_lines", "=", "edges", "[", "e", "]", "[", "\"n_lines\"", "]", ",", "\n", "n_tokens", "=", "edges", "[", "e", "]", "[", "\"n_tokens\"", "]", ",", "\n", "edge_type", "=", "edges", "[", "e", "]", "[", "\"edge_type\"", "]", ",", "\n", ")", "\n", "", "return", "G", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Grouping by {groupby} not currently implemented!\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.run_preprocessing.handle_file": [[13, 51], ["print", "hyperbard.utils.get_filename_base", "os.path.exists", "print", "hyperbard.preprocessing.get_cast_df", "hyperbard.preprocessing.get_cast_df.to_csv", "os.path.exists", "print", "hyperbard.preprocessing.get_raw_xml_df", "hyperbard.preprocessing.get_raw_xml_df.to_csv", "os.path.exists", "print", "hyperbard.preprocessing.get_agg_xml_df", "all", "hyperbard.preprocessing.get_agg_xml_df.to_csv", "Exception", "bool"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_filename_base", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_cast_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_raw_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_agg_xml_df"], ["def", "handle_file", "(", "file", ",", "args", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "print", "(", "f\"Starting {file}...\"", ")", "\n", "filename_base", "=", "get_filename_base", "(", "file", ",", "full", "=", "False", ")", "\n", "\n", "out_file", "=", "f\"{DATA_PATH}/{filename_base}.cast.csv\"", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_file", ")", "and", "not", "args", ".", "force", ":", "\n", "            ", "print", "(", "f\"{out_file} already exists; will not overwrite\"", ")", "\n", "", "else", ":", "\n", "#  .cast.csv", "\n", "            ", "cast_df", "=", "get_cast_df", "(", "file", ")", "\n", "cast_df", ".", "to_csv", "(", "f\"{out_file}\"", ",", "index", "=", "False", ")", "\n", "\n", "", "out_file", "=", "f\"{DATA_PATH}/{filename_base}.raw.csv\"", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_file", ")", "and", "not", "args", ".", "force", ":", "\n", "            ", "print", "(", "f\"{out_file} already exists; will not overwrite\"", ")", "\n", "", "else", ":", "\n", "#  .raw.csv", "\n", "            ", "df", "=", "get_raw_xml_df", "(", "file", ")", "\n", "df", ".", "to_csv", "(", "f\"{out_file}\"", ",", "index", "=", "False", ")", "\n", "\n", "", "out_file", "=", "f\"{DATA_PATH}/{filename_base}.agg.csv\"", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_file", ")", "and", "not", "args", ".", "force", ":", "\n", "            ", "print", "(", "f\"{out_file} already exists; will not overwrite\"", ")", "\n", "", "else", ":", "\n", "            ", "aggdf", "=", "get_agg_xml_df", "(", "df", ")", "\n", "assert", "all", "(", "\n", "[", "bool", "(", "x", ")", "for", "x", "in", "aggdf", ".", "onstage", "]", "\n", ")", ",", "f\"{file}: found nan values in 'onstage' column of aggregated (i.e., speech-only) dataframe!\"", "\n", "\n", "# .agg.csv", "\n", "aggdf", ".", "to_csv", "(", "f\"{out_file}\"", ",", "index", "=", "False", ")", "\n", "\n", "", "", "except", "TypeError", "as", "e", ":", "\n", "        ", "raise", "Exception", "(", "f\"Problem with {file}: {e}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations._explode_df": [[5, 15], ["df.copy", "df_exploded[].map", "df.copy.explode"], "function", ["None"], ["def", "_explode_df", "(", "df", ",", "explode_column", ")", ":", "\n", "    ", "\"\"\"\n\n    :param df:\n    :param explode_column:\n    :return:\n    \"\"\"", "\n", "df_exploded", "=", "df", ".", "copy", "(", ")", "\n", "df_exploded", "[", "explode_column", "]", "=", "df_exploded", "[", "explode_column", "]", ".", "map", "(", "string_to_set", ")", "\n", "return", "df_exploded", ".", "explode", "(", "explode_column", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations.get_hypergraph_edges": [[17, 79], ["df.groupby().agg().reset_index", "df_grouped[].map", "hypergraph_representations._explode_df", "_explode_df.groupby().agg().reset_index().rename", "hypergraph_representations._explode_df", "_explode_df.groupby().agg().reset_index().rename", "df_speaker_exploded.groupby().agg().reset_index().rename.merge().fillna", "df.groupby().agg().reset_index.onstage.map", "dict", "dict", "edge_specific_node_weights[].astype", "df.groupby().agg", "_explode_df.groupby().agg().reset_index", "_explode_df.groupby().agg().reset_index", "df_speaker_exploded.groupby().agg().reset_index().rename.merge", "df.groupby", "_explode_df.groupby().agg", "_explode_df.groupby().agg", "_explode_df.groupby", "_explode_df.groupby"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations._explode_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations._explode_df"], ["", "def", "get_hypergraph_edges", "(", "\n", "df", ":", "pd", ".", "DataFrame", ",", "groupby", ":", "list", "\n", ")", "->", "(", "pd", ".", "DataFrame", ",", "pd", ".", "DataFrame", ")", ":", "\n", "    ", "\"\"\"\n    Create an edge-weighted hypergraph from an aggregated dataframe,\n    with edges resolved at the level given by the groupby argument,\n    where multiedges are kept, and n_tokens and n_lines are potential weights.\n\n    Representations: hg-{scene, group}-{mb,mw}\n\n    :param groupby: [\"act\", \"scene\"] -> one edge per act and scene, [\"act\", \"scene\", \"stagegroup\"] -> one edge per act, scene, and stagegroup\n    :return: tuple of pd.DataFrame objects corresponding to (edges, edge_specific_node_weights)\n    \"\"\"", "\n", "agg", "=", "{", "\n", "\"n_tokens\"", ":", "\"sum\"", ",", "\n", "\"n_lines\"", ":", "\"sum\"", ",", "\n", "\"onstage\"", ":", "sort_join_strings", ",", "\n", "}", "\n", "df_grouped", "=", "df", ".", "groupby", "(", "groupby", ")", ".", "agg", "(", "agg", ")", ".", "reset_index", "(", ")", "\n", "df_grouped", "[", "\"onstage\"", "]", "=", "df_grouped", "[", "\"onstage\"", "]", ".", "map", "(", "character_string_to_sorted_list", ")", "\n", "# for node weights <- lines of speech", "\n", "df_speaker_exploded", "=", "_explode_df", "(", "df", ",", "\"speaker\"", ")", "\n", "speaker_weights", "=", "(", "\n", "df_speaker_exploded", ".", "groupby", "(", "groupby", "+", "[", "\"speaker\"", "]", ")", "\n", ".", "agg", "(", "{", "\"n_tokens\"", ":", "\"sum\"", ",", "\"n_lines\"", ":", "\"sum\"", "}", ")", "\n", ".", "reset_index", "(", ")", "\n", ".", "rename", "(", "\n", "dict", "(", "\n", "speaker", "=", "\"node\"", ",", "n_lines", "=", "\"n_lines_speaker\"", ",", "n_tokens", "=", "\"n_tokens_speaker\"", "\n", ")", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", ")", "\n", "# for node weights <- lines onstage", "\n", "df_onstage_exploded", "=", "_explode_df", "(", "df", ",", "\"onstage\"", ")", "\n", "onstage_weights", "=", "(", "\n", "df_onstage_exploded", ".", "groupby", "(", "groupby", "+", "[", "\"onstage\"", "]", ")", "\n", ".", "agg", "(", "{", "\"n_tokens\"", ":", "\"sum\"", ",", "\"n_lines\"", ":", "\"sum\"", "}", ")", "\n", ".", "reset_index", "(", ")", "\n", ".", "rename", "(", "\n", "dict", "(", "\n", "onstage", "=", "\"node\"", ",", "n_lines", "=", "\"n_lines_onstage\"", ",", "n_tokens", "=", "\"n_tokens_onstage\"", "\n", ")", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", ")", "\n", "merge_columns", "=", "[", "\"node\"", "]", "+", "groupby", "\n", "edge_specific_node_weights", "=", "speaker_weights", ".", "merge", "(", "\n", "onstage_weights", ",", "left_on", "=", "merge_columns", ",", "right_on", "=", "merge_columns", ",", "how", "=", "\"outer\"", "\n", ")", ".", "fillna", "(", "0", ")", "\n", "int_columns", "=", "[", "\n", "\"n_lines_speaker\"", ",", "\n", "\"n_tokens_speaker\"", ",", "\n", "\"n_lines_onstage\"", ",", "\n", "\"n_tokens_onstage\"", ",", "\n", "]", "\n", "for", "column", "in", "int_columns", ":", "\n", "        ", "edge_specific_node_weights", "[", "column", "]", "=", "edge_specific_node_weights", "[", "column", "]", ".", "astype", "(", "\n", "int", "\n", ")", "\n", "", "df_grouped", ".", "onstage", "=", "df_grouped", ".", "onstage", ".", "map", "(", "sort_join_strings", ")", "\n", "return", "df_grouped", ",", "edge_specific_node_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations.get_multi_directed_hypergraph_edges": [[81, 111], ["df.groupby().agg().reset_index", "df_grouped[].map", "df_grouped[].map", "df.groupby().agg().reset_index.onstage.map", "df.groupby().agg().reset_index.speaker.map", "df.groupby().agg", "df.groupby"], "function", ["None"], ["", "def", "get_multi_directed_hypergraph_edges", "(", "df", ":", "pd", ".", "DataFrame", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n\n    Representation: hg-speech-mwd\n\n    :param df:\n    :return:\n    \"\"\"", "\n", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", ",", "\"setting\"", ",", "\"speaker\"", "]", "\n", "agg", "=", "{", "\n", "\"n_tokens\"", ":", "\"sum\"", ",", "\n", "\"n_lines\"", ":", "\"sum\"", ",", "\n", "\"onstage\"", ":", "sort_join_strings", ",", "\n", "}", "\n", "df_grouped", "=", "df", ".", "groupby", "(", "groupby", ")", ".", "agg", "(", "agg", ")", ".", "reset_index", "(", ")", "\n", "df_grouped", "[", "\"onstage\"", "]", "=", "df_grouped", "[", "\"onstage\"", "]", ".", "map", "(", "character_string_to_sorted_list", ")", "\n", "df_grouped", "[", "\"speaker\"", "]", "=", "df_grouped", "[", "\"speaker\"", "]", ".", "map", "(", "character_string_to_sorted_list", ")", "\n", "df_grouped", ".", "onstage", "=", "df_grouped", ".", "onstage", ".", "map", "(", "sort_join_strings", ")", "\n", "df_grouped", ".", "speaker", "=", "df_grouped", ".", "speaker", ".", "map", "(", "sort_join_strings", ")", "\n", "column_order", "=", "[", "\n", "\"act\"", ",", "\n", "\"scene\"", ",", "\n", "\"stagegroup\"", ",", "\n", "\"setting\"", ",", "\n", "\"speaker\"", ",", "\n", "\"onstage\"", ",", "\n", "\"n_tokens\"", ",", "\n", "\"n_lines\"", ",", "\n", "]", "\n", "return", "df_grouped", "[", "column_order", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations.get_weighted_directed_hypergraph_edges": [[113, 126], ["hypergraph_representations.get_multi_directed_hypergraph_edges", "df_mwd.groupby().agg().reset_index.groupby().agg().reset_index", "df_mwd.groupby().agg().reset_index.groupby().agg", "dict", "df_mwd.groupby().agg().reset_index.groupby"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations.get_multi_directed_hypergraph_edges"], ["", "def", "get_weighted_directed_hypergraph_edges", "(", "df", ":", "pd", ".", "DataFrame", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n\n    :param df:\n    :return:\n    \"\"\"", "\n", "df_mwd", "=", "get_multi_directed_hypergraph_edges", "(", "df", ")", "\n", "df_mwd", "=", "(", "\n", "df_mwd", ".", "groupby", "(", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", ",", "\"speaker\"", ",", "\"onstage\"", "]", ")", "\n", ".", "agg", "(", "dict", "(", "n_tokens", "=", "sum", ",", "n_lines", "=", "sum", ")", ")", "\n", ".", "reset_index", "(", ")", "\n", ")", "\n", "return", "df_mwd", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations._hypergraph_node_dataframe": [[128, 159], ["pandas.DataFrame", "sorted", "pd.DataFrame.node.map", "pd.DataFrame.node.map", "pd.DataFrame.node.map", "pd.DataFrame.node.map", "df_exploded_onstage.onstage.unique", "df_exploded_onstage.query().n_lines.sum", "df_exploded_onstage.query().n_tokens.sum", "df_exploded_speaker.query().n_lines.sum", "df_exploded_speaker.query().n_tokens.sum", "df_exploded_onstage.query", "df_exploded_onstage.query", "df_exploded_speaker.query", "df_exploded_speaker.query"], "function", ["None"], ["", "def", "_hypergraph_node_dataframe", "(", "\n", "df_exploded_onstage", ":", "pd", ".", "DataFrame", ",", "df_exploded_speaker", ":", "pd", ".", "DataFrame", "\n", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n\n    :param df_exploded_onstage:\n    :param df_exploded_speaker:\n    :return:\n    \"\"\"", "\n", "nodes", "=", "pd", ".", "DataFrame", "(", ")", "\n", "nodes", "[", "\"node\"", "]", "=", "sorted", "(", "df_exploded_onstage", ".", "onstage", ".", "unique", "(", ")", ")", "\n", "nodes", "[", "\"n_lines_onstage\"", "]", "=", "nodes", ".", "node", ".", "map", "(", "\n", "lambda", "node", ":", "df_exploded_onstage", ".", "query", "(", "\"onstage == @node\"", ")", ".", "n_lines", ".", "sum", "(", ")", "\n", ")", "\n", "nodes", "[", "\"n_tokens_onstage\"", "]", "=", "nodes", ".", "node", ".", "map", "(", "\n", "lambda", "node", ":", "df_exploded_onstage", ".", "query", "(", "\"onstage == @node\"", ")", ".", "n_tokens", ".", "sum", "(", ")", "\n", ")", "\n", "nodes", "[", "\"n_lines_speaker\"", "]", "=", "nodes", ".", "node", ".", "map", "(", "\n", "lambda", "node", ":", "df_exploded_speaker", ".", "query", "(", "\"speaker == @node\"", ")", ".", "n_lines", ".", "sum", "(", ")", "\n", ")", "\n", "nodes", "[", "\"n_tokens_speaker\"", "]", "=", "nodes", ".", "node", ".", "map", "(", "\n", "lambda", "node", ":", "df_exploded_speaker", ".", "query", "(", "\"speaker == @node\"", ")", ".", "n_tokens", ".", "sum", "(", ")", "\n", ")", "\n", "column_order", "=", "[", "\n", "\"node\"", ",", "\n", "\"n_tokens_onstage\"", ",", "\n", "\"n_tokens_speaker\"", ",", "\n", "\"n_lines_onstage\"", ",", "\n", "\"n_lines_speaker\"", ",", "\n", "]", "\n", "return", "nodes", "[", "column_order", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations.get_hypergraph_nodes": [[161, 171], ["hypergraph_representations._explode_df", "hypergraph_representations._explode_df", "hypergraph_representations._hypergraph_node_dataframe"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations._explode_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations._explode_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations._hypergraph_node_dataframe"], ["", "def", "get_hypergraph_nodes", "(", "df", ":", "pd", ".", "DataFrame", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n\n    :param df: pd.DataFrame as loaded from an .agg.csv file\n    :return: pd.DataFrame of hypergraph nodes with {tokens,lines} {spoken,heard} as potential global node weights\n    \"\"\"", "\n", "df_exploded_onstage", "=", "_explode_df", "(", "df", ",", "\"onstage\"", ")", "\n", "df_exploded_speaker", "=", "_explode_df", "(", "df", ",", "\"speaker\"", ")", "\n", "nodes", "=", "_hypergraph_node_dataframe", "(", "df_exploded_onstage", ",", "df_exploded_speaker", ")", "\n", "return", "nodes", "\n", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.from_edges": [[29, 40], ["hypernetx.Hypergraph", "df_grouped.iterrows", "hnx.Hypergraph.add_edge", "hypernetx.Entity", "row.items"], "function", ["None"], ["def", "from_edges", "(", "df_grouped", ")", ":", "\n", "    ", "H", "=", "hnx", ".", "Hypergraph", "(", ")", "\n", "for", "idx", ",", "row", "in", "df_grouped", ".", "iterrows", "(", ")", ":", "\n", "        ", "H", ".", "add_edge", "(", "\n", "hnx", ".", "Entity", "(", "\n", "idx", ",", "\n", "row", "[", "\"onstage\"", "]", ",", "\n", "**", "{", "k", ":", "v", "for", "k", ",", "v", "in", "row", ".", "items", "(", ")", "if", "k", "!=", "\"onstage\"", "}", ",", "\n", ")", "\n", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.s_degree": [[42, 85], ["sum", "set", "set", "getattr", "len", "len"], "function", ["None"], ["", "def", "s_degree", "(", "H", ",", "s", "=", "1", ",", "weight", "=", "None", ",", "superlevel", "=", "True", ")", ":", "\n", "    ", "\"\"\"Calculate degree values of a hypergraph.\n\n    This function calculates the (weighted) degree of a hypergraph,\n    focusing either on edges of cardinality at least `s` or at most\n    `s` (in case `superlevel == False`).\n\n    Parameters\n    ----------\n    H : hnx.Hypergraph\n        Hypergraph\n\n    s : int\n        Specifies connectivity threshold. The flag `superlevel` controls\n        the direction of said threshold.\n\n    weight : str or `None`\n        If set, queries the specific edge attribute to use as a weight\n        for the degree calculation.\n\n    superlevel : bool\n        If set, `s` is treated as a *minimum* connectivity threshold. If\n        not set, `s` is treated as a maximum.\n\n    Returns\n    -------\n    dict\n        Dictionary with nodes as keys and values as (weighted) degrees.\n    \"\"\"", "\n", "values", "=", "{", "}", "\n", "for", "node", "in", "H", ".", "nodes", ":", "\n", "        ", "if", "weight", "is", "not", "None", ":", "\n", "# Get all edges of size at least `s` (if `superlevel` is", "\n", "# set) in which the specific node participates.", "\n", "            ", "memberships", "=", "H", ".", "nodes", "[", "node", "]", ".", "memberships", "\n", "if", "superlevel", ":", "\n", "                ", "edges", "=", "set", "(", "e", "for", "e", "in", "memberships", "if", "len", "(", "H", ".", "edges", "[", "e", "]", ")", ">=", "s", ")", "\n", "", "else", ":", "\n", "                ", "edges", "=", "set", "(", "e", "for", "e", "in", "memberships", "if", "len", "(", "H", ".", "edges", "[", "e", "]", ")", "<=", "s", ")", "\n", "\n", "", "values", "[", "node", "]", "=", "sum", "(", "getattr", "(", "H", ".", "edges", "[", "e", "]", ",", "weight", ")", "for", "e", "in", "edges", ")", "\n", "\n", "", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.calculate_degree": [[87, 145], ["ValueError", "ValueError", "[].keys", "type", "[].keys", "dict", "dict", "type", "dict", "list", "networkx.degree", "networkx.degree", "G.nodes", "G.degree", "type", "dict", "NotImplementedError", "type", "[].keys", "list", "degree_func", "dict().values", "list", "type", "G.edges", "dict", "list", "G.nodes", "G.edges"], "function", ["None"], ["", "def", "calculate_degree", "(", "G", ",", "weight", "=", "None", ",", "degree_type", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate degree values of a graph.\n\n    This is essentially a wrapper function around `nx.degree` that is\n    capable of accounting for weights.\n\n    Parameters\n    ----------\n    degree: None or \"in\" or \"out\"\n\n    weight : None or str\n        If specified, access edge attribute named `weight` to calculate\n        weighted degrees.\n\n    Returns\n    -------\n    dict\n        Dictionary with nodes as key and (weighted) degrees as values.\n    \"\"\"", "\n", "# Defenses against garbage input", "\n", "if", "degree_type", "not", "in", "[", "None", ",", "\"in\"", ",", "\"out\"", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"degree_type={degree_type}, must be in {[None, 'in', 'out']}!\"", "\n", ")", "\n", "", "if", "degree_type", "is", "not", "None", "and", "type", "(", "G", ")", "not", "in", "[", "nx", ".", "DiGraph", ",", "nx", ".", "MultiDiGraph", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"type(G)={type(G)}, must be in {[nx.DiGraph, nx.MultiDiGraph]} because degree={degree}!\"", "\n", ")", "\n", "# Actual degree computation", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "        ", "assert", "(", "\n", "weight", "in", "list", "(", "G", ".", "edges", "(", "data", "=", "True", ")", ")", "[", "0", "]", "[", "-", "1", "]", ".", "keys", "(", ")", "\n", ")", ",", "f\"Attribute '{weight}'\\\n            is not an edge attribute! Edge attributes are: {list(list(G.edges(data=True))[0][-1].keys())}\"", "\n", "", "if", "\"node_type\"", "not", "in", "list", "(", "dict", "(", "G", ".", "nodes", "(", "data", "=", "True", ")", ")", ".", "values", "(", ")", ")", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "weight", "is", "None", ":", "\n", "            ", "degrees", "=", "dict", "(", "nx", ".", "degree", "(", "G", ")", ")", "\n", "", "else", ":", "\n", "            ", "degrees", "=", "dict", "(", "nx", ".", "degree", "(", "G", ",", "weight", "=", "weight", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "character_nodes", "=", "[", "\n", "n", "for", "n", ",", "node_type", "in", "G", ".", "nodes", "(", "data", "=", "\"node_type\"", ")", "if", "node_type", "==", "\"character\"", "\n", "]", "\n", "if", "type", "(", "G", ")", "==", "nx", ".", "Graph", ":", "\n", "            ", "degrees", "=", "dict", "(", "G", ".", "degree", "(", "character_nodes", ",", "weight", "=", "weight", ")", ")", "\n", "# TODO: Check whether `DiGraphs` are supported correctly", "\n", "", "elif", "type", "(", "G", ")", "in", "[", "nx", ".", "DiGraph", ",", "nx", ".", "MultiDiGraph", "]", ":", "\n", "            ", "if", "degree_type", "==", "\"out\"", ":", "\n", "                ", "degree_func", "=", "G", ".", "out_degree", "\n", "", "elif", "degree_type", "==", "\"in\"", ":", "\n", "                ", "degree_func", "=", "G", ".", "in_degree", "\n", "", "else", ":", "\n", "                ", "degree_func", "=", "G", ".", "degree", "\n", "", "degrees", "=", "dict", "(", "degree_func", "(", "character_nodes", ",", "weight", "=", "weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Unexpected graph type: {type(G)}!\"", ")", "\n", "\n", "", "", "return", "degrees", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_wrapper": [[147, 154], ["isinstance", "ranking.s_degree", "ranking.calculate_degree"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.s_degree", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.calculate_degree"], ["", "def", "degree_wrapper", "(", "G", ",", "weight", "=", "None", ",", "degree_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wrapper function for degree calculation of (hyper)graphs.\"\"\"", "\n", "if", "isinstance", "(", "G", ",", "hnx", ".", "Hypergraph", ")", ":", "\n", "# TODO: Incorporate `degree_type` variable.", "\n", "        ", "return", "s_degree", "(", "G", ",", "weight", "=", "weight", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "return", "calculate_degree", "(", "G", ",", "weight", "=", "weight", ",", "degree_type", "=", "degree_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking": [[156, 164], ["sorted", "degree_wrapper().items", "ranking.degree_wrapper"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_wrapper"], ["", "", "def", "degree_ranking", "(", "G", ",", "weight", "=", "None", ",", "degree_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    degree: None or \"in\" or \"out\"\n    \"\"\"", "\n", "return", "sorted", "(", "\n", "degree_wrapper", "(", "G", ",", "weight", ",", "degree_type", ",", "**", "kwargs", ")", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", ",", "\n", "reverse", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities": [[167, 181], ["ranking.degree_ranking", "[].add", "new_list.append"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking"], ["", "def", "degree_ranking_with_equalities", "(", "G", ",", "weight", "=", "None", ",", "degree_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    degree: None or \"in\" or \"out\"\n    output: list of tuples [({set of characters}, degree), ...], sorted by degree descending\n    \"\"\"", "\n", "ranking_list", "=", "degree_ranking", "(", "G", ",", "weight", ",", "degree_type", ",", "**", "kwargs", ")", "\n", "new_list", "=", "[", "]", "\n", "for", "character", ",", "degree", "in", "ranking_list", ":", "\n", "        ", "if", "new_list", "and", "degree", "==", "new_list", "[", "-", "1", "]", "[", "-", "1", "]", ":", "\n", "            ", "new_list", "[", "-", "1", "]", "[", "0", "]", ".", "add", "(", "character", ")", "\n", "", "else", ":", "\n", "            ", "new_list", ".", "append", "(", "(", "{", "character", "}", ",", "degree", ")", ")", "\n", "\n", "", "", "return", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary": [[183, 191], ["dict", "len"], "function", ["None"], ["", "def", "character_rank_dictionary", "(", "ranking", ")", ":", "\n", "    ", "rank_dict", "=", "dict", "(", ")", "\n", "rank", "=", "1", "\n", "for", "(", "characters", ",", "_", ")", "in", "ranking", ":", "\n", "        ", "for", "character", "in", "characters", ":", "\n", "            ", "rank_dict", "[", "character", "]", "=", "rank", "\n", "", "rank", "+=", "len", "(", "characters", ")", "\n", "", "return", "rank_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.get_character_ranking_df": [[193, 266], ["hyperbard.graph_representations.get_count_weighted_graph", "hyperbard.graph_representations.get_count_weighted_graph", "hyperbard.graph_representations.get_weighted_multigraph", "hyperbard.graph_representations.get_weighted_multigraph", "hyperbard.graph_representations.get_bipartite_graph", "hyperbard.graph_representations.get_bipartite_graph", "hyperbard.graph_representations.get_bipartite_graph", "ranking.from_edges", "ranking.from_edges", "ranking.from_edges", "ranking.from_edges", "collections.OrderedDict", "pandas.DataFrame.from_records", "pd.DataFrame.from_records.sort_index", "hyperbard.hypergraph_representations.get_multi_directed_hypergraph_edges", "hyperbard.hypergraph_representations.get_weighted_directed_hypergraph_edges", "hyperbard.hypergraph_representations.get_hypergraph_edges", "hyperbard.hypergraph_representations.get_hypergraph_edges", "ranking.character_rank_dictionary", "ranking.character_rank_dictionary", "ranking.character_rank_dictionary", "ranking.character_rank_dictionary", "ranking.character_rank_dictionary", "ranking.character_rank_dictionary", "ranking.character_rank_dictionary", "ranking.character_rank_dictionary", "ranking.character_rank_dictionary", "ranking.character_rank_dictionary", "ranking.character_rank_dictionary", "ranking.character_rank_dictionary", "ranking.degree_ranking_with_equalities", "ranking.degree_ranking_with_equalities", "ranking.degree_ranking_with_equalities", "ranking.degree_ranking_with_equalities", "ranking.degree_ranking_with_equalities", "ranking.degree_ranking_with_equalities", "ranking.degree_ranking_with_equalities", "ranking.degree_ranking_with_equalities", "ranking.degree_ranking_with_equalities", "ranking.degree_ranking_with_equalities", "ranking.degree_ranking_with_equalities", "ranking.degree_ranking_with_equalities"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_count_weighted_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_count_weighted_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_weighted_multigraph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_weighted_multigraph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_bipartite_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_bipartite_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_bipartite_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.from_edges", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.from_edges", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.from_edges", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.from_edges", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations.get_multi_directed_hypergraph_edges", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations.get_weighted_directed_hypergraph_edges", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations.get_hypergraph_edges", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations.get_hypergraph_edges", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities"], ["", "def", "get_character_ranking_df", "(", "df", ")", ":", "\n", "    ", "G", "=", "get_count_weighted_graph", "(", "df", ",", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", "]", ")", "\n", "G2", "=", "get_count_weighted_graph", "(", "df", ",", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", "]", ")", "\n", "mG", "=", "get_weighted_multigraph", "(", "df", ",", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", "]", ")", "\n", "mG2", "=", "get_weighted_multigraph", "(", "df", ",", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", "]", ")", "\n", "bG", "=", "get_bipartite_graph", "(", "df", ",", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", "]", ")", "\n", "bG2", "=", "get_bipartite_graph", "(", "df", ",", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", "]", ")", "\n", "bG3", "=", "get_bipartite_graph", "(", "\n", "df", ",", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", ",", "\"setting\"", ",", "\"speaker\"", "]", "\n", ")", "\n", "\n", "# TODO: Does *not* yet use the right weights.", "\n", "hg_scene_mw", "=", "from_edges", "(", "get_hypergraph_edges", "(", "df", ",", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", "]", ")", "[", "0", "]", ")", "\n", "hg_group_mw", "=", "from_edges", "(", "\n", "get_hypergraph_edges", "(", "df", ",", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", "]", ")", "[", "0", "]", "\n", ")", "\n", "hg_speech_mwd", "=", "from_edges", "(", "get_multi_directed_hypergraph_edges", "(", "df", ")", ")", "\n", "hg_speech_wd", "=", "from_edges", "(", "get_weighted_directed_hypergraph_edges", "(", "df", ")", ")", "\n", "\n", "ranks", "=", "OrderedDict", "(", "\n", "{", "\n", "\"01_se-scene-b\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "bG", ")", "\n", ")", ",", "\n", "\"02_se-scene-w\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "bG", ",", "weight", "=", "\"n_lines\"", ")", "\n", ")", ",", "\n", "\"03_se-group-b\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "bG2", ")", "\n", ")", ",", "\n", "\"04_se-group-w\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "bG2", ",", "weight", "=", "\"n_lines\"", ")", "\n", ")", ",", "\n", "\"05_se-speech-wd_in\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "bG3", ",", "weight", "=", "\"n_lines\"", ",", "degree_type", "=", "\"in\"", ")", "\n", ")", ",", "\n", "\"06_se-speech-wd_out\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "bG3", ",", "weight", "=", "\"n_lines\"", ",", "degree_type", "=", "\"out\"", ")", "\n", ")", ",", "\n", "\"07_ce-scene-b\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "G", ")", "\n", ")", ",", "\n", "\"08_ce-scene-mb\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "mG", ")", "\n", ")", ",", "\n", "\"09_ce-scene-mw\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "mG", ",", "weight", "=", "\"n_lines\"", ")", "\n", ")", ",", "\n", "\"10_ce-group-b\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "G2", ")", "\n", ")", ",", "\n", "\"11_ce-group-mb\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "mG2", ")", "\n", ")", ",", "\n", "\"12_act_group-mw\"", ":", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "mG2", ",", "weight", "=", "\"n_lines\"", ")", "\n", ")", ",", "\n", "# \"13_hg-scene-mb\": character_rank_dictionary(", "\n", "#    degree_ranking_with_equalities(hg_scene_mw)", "\n", "# ),", "\n", "# \"14_hg-scene-mw\": character_rank_dictionary(", "\n", "#    degree_ranking_with_equalities(hg_scene_mw, weight=\"n_lines\")", "\n", "# ),", "\n", "# \"15_hg-group-mb\": character_rank_dictionary(", "\n", "#    degree_ranking_with_equalities(hg_group_mw)", "\n", "# ),", "\n", "# \"16_hg-group-mw\": character_rank_dictionary(", "\n", "#    degree_ranking_with_equalities(hg_group_mw, weight=\"n_lines\")", "\n", "# ),", "\n", "}", "\n", ")", "\n", "rank_df", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "ranks", ")", "# .reset_index()", "\n", "return", "rank_df", ".", "sort_index", "(", ")", "# .sort_values(by=\"index\")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.get_character_ranking": [[268, 300], ["collections.OrderedDict", "pandas.DataFrame.from_records().rename", "pd.DataFrame.from_records().rename.sort_index", "representation.get", "representation.get", "representation.get", "representation.get", "ranking.character_rank_dictionary", "ranking.degree_ranking_with_equalities", "pandas.DataFrame.from_records", "x.split"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.character_rank_dictionary", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.degree_ranking_with_equalities"], ["", "def", "get_character_ranking", "(", "representations", ")", ":", "\n", "    ", "ranks", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "representation", "in", "representations", ":", "\n", "        ", "name", "=", "representation", "[", "\"name\"", "]", "\n", "graph", "=", "representation", "[", "\"graph\"", "]", "\n", "weight", "=", "representation", ".", "get", "(", "\"weight\"", ",", "None", ")", "\n", "degree", "=", "representation", ".", "get", "(", "\"degree\"", ",", "None", ")", "\n", "s", "=", "representation", ".", "get", "(", "\"s\"", ",", "1", ")", "\n", "superlevel", "=", "representation", ".", "get", "(", "\"superlevel\"", ",", "True", ")", "\n", "\n", "ranks", "[", "name", "]", "=", "character_rank_dictionary", "(", "\n", "degree_ranking_with_equalities", "(", "\n", "graph", ",", "\n", "weight", "=", "weight", ",", "\n", "degree_type", "=", "degree", ",", "\n", "# Will be ignored for graphs", "\n", "s", "=", "s", ",", "\n", "superlevel", "=", "superlevel", ",", "\n", ")", "\n", ")", "\n", "\n", "", "rank_df", "=", "(", "\n", "pd", ".", "DataFrame", ".", "from_records", "(", "ranks", ")", ".", "rename", "(", "\n", "# Rename columns by dropping the 'XX-' prefix.", "\n", "mapper", "=", "lambda", "x", ":", "\"-\"", ".", "join", "(", "x", ".", "split", "(", "\"-\"", ")", "[", "1", ":", "]", ")", ",", "\n", "axis", "=", "\"columns\"", ",", "\n", ")", "\n", "# .reset_index()", "\n", ")", "\n", "\n", "return", "rank_df", ".", "sort_index", "(", ")", "# rank_df.sort_values(by=\"index\")", "\n", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_hypergraph_representations.handle_file": [[18, 59], ["print", "pandas.read_csv", "collections.OrderedDict", "collections.OrderedDict", "hyperbard.hypergraph_representations.get_hypergraph_nodes", "hyperbard.hypergraph_representations.get_hypergraph_nodes.to_csv", "collections.OrderedDict.items", "collections.OrderedDict.items", "hyperbard.utils.get_filename_base().split", "edges.to_csv", "edge_specific_node_weights.to_csv", "edges.to_csv", "hyperbard.utils.get_filename_base"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.hypergraph_representations.get_hypergraph_nodes", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_filename_base"], ["def", "handle_file", "(", "file", ")", ":", "\n", "    ", "file_base", "=", "get_filename_base", "(", "file", ",", "full", "=", "True", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "print", "(", "file_base", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "file", ")", "\n", "undirected_expansions", "=", "OrderedDict", "(", "\n", "{", "\n", "\"hg-scene-mw\"", ":", "{", "\n", "\"groupby\"", ":", "[", "\"act\"", ",", "\"scene\"", "]", ",", "\n", "\"constructor\"", ":", "get_hypergraph_edges", ",", "\n", "}", ",", "\n", "\"hg-group-mw\"", ":", "{", "\n", "\"groupby\"", ":", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", "]", ",", "\n", "\"constructor\"", ":", "get_hypergraph_edges", ",", "\n", "}", ",", "\n", "}", "\n", ")", "\n", "directed_expansions", "=", "OrderedDict", "(", "\n", "{", "\n", "\"hg-speech-mwd\"", ":", "{", "\n", "\"constructor\"", ":", "get_multi_directed_hypergraph_edges", ",", "\n", "}", ",", "\n", "\"hg-speech-wd\"", ":", "{", "\n", "\"constructor\"", ":", "get_weighted_directed_hypergraph_edges", ",", "\n", "}", ",", "\n", "}", "\n", ")", "\n", "path", "=", "f\"{GRAPHDATA_PATH}/{file_base}\"", "\n", "representation_for_nodes", "=", "\"hg\"", "\n", "nodes", "=", "get_hypergraph_nodes", "(", "df", ")", "\n", "nodes", ".", "to_csv", "(", "f\"{path}_{representation_for_nodes}.nodes.csv\"", ",", "index", "=", "False", ")", "\n", "for", "representation", ",", "parameters", "in", "undirected_expansions", ".", "items", "(", ")", ":", "\n", "        ", "edges", ",", "edge_specific_node_weights", "=", "parameters", "[", "\"constructor\"", "]", "(", "\n", "df", ",", "parameters", "[", "\"groupby\"", "]", "\n", ")", "\n", "edges", ".", "to_csv", "(", "f\"{path}_{representation}.edges.csv\"", ",", "index", "=", "False", ")", "\n", "edge_specific_node_weights", ".", "to_csv", "(", "\n", "f\"{path}_{representation}.node-weights.csv\"", ",", "index", "=", "False", "\n", ")", "\n", "", "for", "representation", ",", "parameters", "in", "directed_expansions", ".", "items", "(", ")", ":", "\n", "        ", "edges", "=", "parameters", "[", "\"constructor\"", "]", "(", "df", ")", "\n", "edges", ".", "to_csv", "(", "f\"{path}_{representation}.edges.csv\"", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_toy.draw_toy": [[14, 24], ["networkx.draw_networkx_edges", "pos.items", "plotting_utils.save_pgf_fig", "n.isnumeric", "ax.annotate", "ax.annotate.set_path_effects", "int", "matplotlib.withStroke"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig"], ["def", "draw_toy", "(", "G", ",", "pos", ",", "ax", ",", "path", ")", ":", "\n", "    ", "nx", ".", "draw_networkx_edges", "(", "G", ",", "pos", "=", "pos", ")", "\n", "for", "n", ",", "position", "in", "pos", ".", "items", "(", ")", ":", "\n", "        ", "if", "n", ".", "isnumeric", "(", ")", ":", "\n", "            ", "label", "=", "int", "(", "n", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "label", "=", "n", "\n", "", "txt", "=", "ax", ".", "annotate", "(", "label", ",", "position", ",", "ha", "=", "\"center\"", ",", "va", "=", "\"center\"", ")", "\n", "txt", ".", "set_path_effects", "(", "[", "PathEffects", ".", "withStroke", "(", "linewidth", "=", "5", ",", "foreground", "=", "\"w\"", ")", "]", ")", "\n", "", "save_pgf_fig", "(", "path", ",", "axis_off", "=", "True", ",", "tight", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.node_dataframe": [[19, 23], ["pandas.DataFrame.from_records().sort_values", "pandas.DataFrame.from_records", "dict", "G.nodes"], "function", ["None"], ["def", "node_dataframe", "(", "G", ")", ":", "\n", "    ", "return", "pd", ".", "DataFrame", ".", "from_records", "(", "\n", "[", "{", "\"node\"", ":", "n", ",", "**", "dict", "(", "data", ")", "}", "for", "n", ",", "data", "in", "G", ".", "nodes", "(", "data", "=", "True", ")", "]", "\n", ")", ".", "sort_values", "(", "\"node\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.edge_dataframe": [[25, 82], ["type", "pandas.DataFrame.from_records().sort_values", "type", "pandas.DataFrame.from_records().sort_values", "pandas.DataFrame.from_records", "type", "pandas.DataFrame.from_records().sort_values", "pandas.DataFrame.from_records", "type", "pandas.DataFrame.from_records", "NotImplementedError", "pandas.DataFrame.from_records", "pd.DataFrame.from_records.sort_values", "dict", "G.edges", "pd.DataFrame.from_records.sort_values", "pd.DataFrame.from_records.sort_values", "dict", "G.edges", "dict", "G.edges", "type", "dict", "G.edges"], "function", ["None"], ["", "def", "edge_dataframe", "(", "G", ")", ":", "\n", "    ", "if", "type", "(", "G", ")", "==", "nx", ".", "MultiGraph", ":", "# multigraph clique expansions", "\n", "        ", "return", "pd", ".", "DataFrame", ".", "from_records", "(", "\n", "[", "\n", "{", "\n", "\"node1\"", ":", "u", ",", "\n", "\"node2\"", ":", "v", ",", "\n", "\"key\"", ":", "key", ",", "\n", "**", "dict", "(", "data", ")", ",", "\n", "}", "\n", "for", "u", ",", "v", ",", "key", ",", "data", "in", "G", ".", "edges", "(", "keys", "=", "True", ",", "data", "=", "True", ")", "\n", "]", "\n", ")", ".", "sort_values", "(", "[", "\"edge_index\"", ",", "\"node1\"", ",", "\"node2\"", ",", "\"key\"", "]", ")", "\n", "", "elif", "type", "(", "G", ")", "==", "nx", ".", "MultiDiGraph", ":", "#  directed multigraph star expansions", "\n", "        ", "return", "pd", ".", "DataFrame", ".", "from_records", "(", "\n", "[", "\n", "{", "\n", "\"source\"", ":", "u", ",", "\n", "\"target\"", ":", "v", ",", "\n", "\"key\"", ":", "key", ",", "\n", "**", "dict", "(", "data", ")", ",", "\n", "}", "\n", "for", "u", ",", "v", ",", "key", ",", "data", "in", "G", ".", "edges", "(", "keys", "=", "True", ",", "data", "=", "True", ")", "\n", "]", "\n", ")", ".", "sort_values", "(", "[", "\"edge_index\"", ",", "\"source\"", ",", "\"target\"", ",", "\"key\"", "]", ")", "\n", "", "elif", "type", "(", "G", ")", "==", "nx", ".", "DiGraph", ":", "# directed weighted star expansions", "\n", "        ", "return", "pd", ".", "DataFrame", ".", "from_records", "(", "\n", "[", "\n", "{", "\n", "\"source\"", ":", "u", ",", "\n", "\"target\"", ":", "v", ",", "\n", "**", "dict", "(", "data", ")", ",", "\n", "}", "\n", "for", "u", ",", "v", ",", "data", "in", "G", ".", "edges", "(", "data", "=", "True", ")", "\n", "]", "\n", ")", ".", "sort_values", "(", "[", "\"source\"", ",", "\"target\"", "]", ")", "\n", "", "elif", "type", "(", "G", ")", "==", "nx", ".", "Graph", ":", "\n", "        ", "df", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "\n", "[", "\n", "{", "\n", "\"node1\"", ":", "u", ",", "\n", "\"node2\"", ":", "v", ",", "\n", "**", "dict", "(", "data", ")", ",", "\n", "}", "\n", "for", "u", ",", "v", ",", "data", "in", "G", ".", "edges", "(", "data", "=", "True", ")", "\n", "]", "\n", ")", "\n", "if", "\"edge_index\"", "in", "df", ":", "# weighted star expansions", "\n", "            ", "return", "df", ".", "sort_values", "(", "[", "\"edge_index\"", ",", "\"node1\"", ",", "\"node2\"", "]", ")", "\n", "", "elif", "\"count\"", "in", "df", ":", "# weighted clique expansions", "\n", "            ", "return", "df", ".", "sort_values", "(", "\n", "[", "\"node1\"", ",", "\"node2\"", ",", "\"count\"", "]", ",", "ascending", "=", "[", "True", ",", "True", ",", "False", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "df", ".", "sort_values", "(", "[", "\"node1\"", ",", "\"node2\"", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Currently no transformation for {type(G)}!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.save_graph": [[84, 108], ["representation.startswith", "node_dataframe.to_csv", "edge_dataframe.to_csv", "create_graph_representations.node_dataframe", "create_graph_representations.edge_dataframe", "representation.startswith", "representation.split", "create_graph_representations.node_dataframe", "representation.startswith", "type", "edge_dataframe().sort_values", "NotImplementedError", "representation.split", "type", "create_graph_representations.edge_dataframe", "NotImplementedError", "create_graph_representations.edge_dataframe", "type"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.node_dataframe", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.edge_dataframe", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.node_dataframe", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.edge_dataframe", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.edge_dataframe"], ["", "", "def", "save_graph", "(", "G", ",", "representation", ",", "path", ")", ":", "\n", "    ", "if", "representation", ".", "startswith", "(", "\"ce\"", ")", ":", "# clique expansions", "\n", "        ", "representation_for_nodes", "=", "representation", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "\n", "nodes", "=", "node_dataframe", "(", "G", ")", "\n", "edges", "=", "edge_dataframe", "(", "G", ")", "\n", "", "elif", "representation", ".", "startswith", "(", "\"se\"", ")", ":", "# star expansions", "\n", "        ", "representation_for_nodes", "=", "\"-\"", ".", "join", "(", "representation", ".", "split", "(", "\"-\"", ")", "[", ":", "-", "1", "]", ")", "\n", "nodes", "=", "node_dataframe", "(", "G", ")", "\n", "if", "type", "(", "G", ")", "==", "nx", ".", "Graph", ":", "\n", "            ", "edges", "=", "edge_dataframe", "(", "G", ")", ".", "sort_values", "(", "\n", "[", "\"node2\"", ",", "\"node1\"", "]", "\n", ")", "# node2 is the play part, so sorting by that first is more intuitive", "\n", "", "elif", "type", "(", "G", ")", "in", "[", "nx", ".", "MultiDiGraph", ",", "nx", ".", "DiGraph", "]", ":", "# speech act star expansions", "\n", "            ", "edges", "=", "edge_dataframe", "(", "G", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "f\"Unknown graph type for given representation: {representation}, {type(G)}\"", "\n", ")", "\n", "", "", "elif", "representation", ".", "startswith", "(", "\"hg\"", ")", ":", "# TODO hgs", "\n", "        ", "return", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Unknown representation: {representation}\"", ")", "\n", "", "nodes", ".", "to_csv", "(", "f\"{path}_{representation_for_nodes}.nodes.csv\"", ",", "index", "=", "False", ")", "\n", "edges", ".", "to_csv", "(", "f\"{path}_{representation}.edges.csv\"", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.handle_file": [[110, 154], ["print", "pandas.read_csv", "collections.OrderedDict", "collections.OrderedDict.items", "hyperbard.utils.get_filename_base().split", "create_graph_representations.save_graph", "hyperbard.utils.get_filename_base"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.save_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_filename_base"], ["", "def", "handle_file", "(", "file", ")", ":", "\n", "    ", "file_base", "=", "get_filename_base", "(", "file", ",", "full", "=", "True", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "print", "(", "file_base", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "file", ")", "\n", "\n", "expansions", "=", "OrderedDict", "(", "\n", "{", "\n", "\"ce-scene-mw\"", ":", "{", "\n", "\"groupby\"", ":", "[", "\"act\"", ",", "\"scene\"", "]", ",", "\n", "\"constructor\"", ":", "get_weighted_multigraph", ",", "\n", "}", ",", "\n", "\"ce-group-mw\"", ":", "{", "\n", "\"groupby\"", ":", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", "]", ",", "\n", "\"constructor\"", ":", "get_weighted_multigraph", ",", "\n", "}", ",", "\n", "\"ce-scene-w\"", ":", "{", "\n", "\"groupby\"", ":", "[", "\"act\"", ",", "\"scene\"", "]", ",", "\n", "\"constructor\"", ":", "get_count_weighted_graph", ",", "\n", "}", ",", "\n", "\"ce-group-w\"", ":", "{", "\n", "\"groupby\"", ":", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", "]", ",", "\n", "\"constructor\"", ":", "get_count_weighted_graph", ",", "\n", "}", ",", "\n", "\"se-scene-w\"", ":", "{", "\n", "\"groupby\"", ":", "[", "\"act\"", ",", "\"scene\"", "]", ",", "\n", "\"constructor\"", ":", "get_bipartite_graph", ",", "\n", "}", ",", "\n", "\"se-group-w\"", ":", "{", "\n", "\"groupby\"", ":", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", "]", ",", "\n", "\"constructor\"", ":", "get_bipartite_graph", ",", "\n", "}", ",", "\n", "\"se-speech-mwd\"", ":", "{", "\n", "\"groupby\"", ":", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", ",", "\"setting\"", ",", "\"speaker\"", "]", ",", "\n", "\"constructor\"", ":", "get_bipartite_graph", ",", "\n", "}", ",", "\n", "\"se-speech-wd\"", ":", "{", "\n", "\"groupby\"", ":", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", ",", "\"setting\"", ",", "\"speaker\"", "]", ",", "\n", "\"constructor\"", ":", "get_weighted_bipartite_graph", ",", "\n", "}", ",", "\n", "}", "\n", ")", "\n", "for", "representation", ",", "parameters", "in", "expansions", ".", "items", "(", ")", ":", "\n", "        ", "G", "=", "parameters", "[", "\"constructor\"", "]", "(", "df", ",", "parameters", "[", "\"groupby\"", "]", ")", "\n", "save_graph", "(", "G", ",", "representation", ",", "f\"{GRAPHDATA_PATH}/{file_base}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.create_graph_representations": [[156, 160], ["create_graph_representations.handle_file"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.create_graph_representations.handle_file"], ["", "", "@", "timeit", "\n", "def", "create_graph_representations", "(", ")", ":", "\n", "    ", "for", "file", "in", "files", ":", "\n", "        ", "handle_file", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_hypergraph_rankings.compute_hypergraph_ranking_df": [[17, 49], ["print", "hyperbard.graph_io.load_hypergraph", "hyperbard.ranking.get_character_ranking", "df_ranking.sort_index.index.map", "df_ranking.sort_index.sort_index", "range", "range"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_hypergraph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.ranking.get_character_ranking"], ["def", "compute_hypergraph_ranking_df", "(", "play", ")", ":", "\n", "    ", "print", "(", "play", ")", "\n", "\n", "hg_group_mw", "=", "load_hypergraph", "(", "play", ",", "\"hg-group-mw\"", ")", "\n", "\n", "sublevel", "=", "[", "\n", "{", "\n", "\"name\"", ":", "f\"{i:02d}- $s \\leq {i}$\"", ",", "\n", "\"graph\"", ":", "hg_group_mw", ",", "\n", "\"weight\"", ":", "\"n_lines\"", ",", "\n", "\"s\"", ":", "i", ",", "\n", "\"superlevel\"", ":", "False", ",", "\n", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "7", ")", "\n", "]", "\n", "\n", "superlevel", "=", "[", "\n", "{", "\n", "\"name\"", ":", "f\"{i + 6:02d}- $s \\geq {i}$\"", ",", "\n", "\"graph\"", ":", "hg_group_mw", ",", "\n", "\"weight\"", ":", "\"n_lines\"", ",", "\n", "\"s\"", ":", "i", ",", "\n", "\"superlevel\"", ":", "True", ",", "\n", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "7", ")", "\n", "]", "\n", "\n", "representations", "=", "sublevel", "+", "superlevel", "\n", "df_ranking", "=", "get_character_ranking", "(", "representations", ")", "\n", "df_ranking", ".", "index", "=", "df_ranking", ".", "index", ".", "map", "(", "remove_uppercase_prefixes", ")", "\n", "df_ranking", "=", "df_ranking", ".", "sort_index", "(", ")", "\n", "return", "df_ranking", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_hypergraph_rankings.handle_play": [[51, 57], ["plot_hypergraph_rankings.compute_hypergraph_ranking_df", "hyperbard.plot_graph_rankings.plot_character_rankings", "os.path.join"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_hypergraph_rankings.compute_hypergraph_ranking_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_graph_rankings.plot_character_rankings"], ["", "def", "handle_play", "(", "play", ")", ":", "\n", "    ", "df_ranking", "=", "compute_hypergraph_ranking_df", "(", "play", ")", "\n", "plot_character_rankings", "(", "\n", "df_ranking", ",", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "\n", "f\"{GRAPHICS_PATH}\"", ",", "f\"{play}_hg_ranking_parallel_coordinates.pdf\"", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_hypergraph_rankings.plot_hypergraph_rankings": [[61, 70], ["hyperbard.utils.get_filename_base().replace", "plot_hypergraph_rankings.handle_play", "sorted", "hyperbard.utils.get_filename_base", "glob.glob"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_hypergraph_rankings.handle_play", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_filename_base"], ["", "@", "timeit", "\n", "def", "plot_hypergraph_rankings", "(", ")", ":", "\n", "    ", "plays", "=", "[", "\n", "get_filename_base", "(", "fn", ")", ".", "replace", "(", "\".agg\"", ",", "\"\"", ")", "\n", "for", "fn", "in", "sorted", "(", "glob", "(", "f\"{DATA_PATH}/*.agg.csv\"", ")", ")", "\n", "]", "\n", "\n", "for", "play", "in", "plays", ":", "\n", "        ", "handle_play", "(", "play", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_soup": [[14, 25], ["open", "bs4.BeautifulSoup"], "function", ["None"], ["def", "get_soup", "(", "file", ":", "str", ",", "parser", ":", "str", "=", "\"lxml-xml\"", ")", "->", "BeautifulSoup", ":", "\n", "    ", "\"\"\"\n    Parse an XML or HTML document with the specified BeautifulSoup parser.\n\n    :param file: Path to file\n    :param parser: Parser to use\n    :return: BeautifulSoup object containing the parsed file\n    \"\"\"", "\n", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "        ", "soup", "=", "BeautifulSoup", "(", "f", ",", "parser", ")", "\n", "", "return", "soup", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_cast_df": [[27, 36], ["preprocessing.get_soup", "pandas.DataFrame.from_records().sort_values().reset_index", "get_soup.find_all", "pandas.DataFrame.from_records().sort_values", "pandas.DataFrame.from_records"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_soup"], ["", "def", "get_cast_df", "(", "file", ":", "str", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "soup", "=", "get_soup", "(", "file", ")", "\n", "cast_items", "=", "[", "item", ".", "attrs", "for", "item", "in", "soup", ".", "find_all", "(", "\"castItem\"", ")", "]", "\n", "cast_df", "=", "(", "\n", "pd", ".", "DataFrame", ".", "from_records", "(", "cast_items", ")", "\n", ".", "sort_values", "(", "\"xml:id\"", ")", "\n", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", ")", "\n", "return", "cast_df", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body": [[38, 51], ["soup.find_all", "text.find_all", "len", "len"], "function", ["None"], ["", "def", "get_body", "(", "soup", ":", "BeautifulSoup", ")", "->", "Tag", ":", "\n", "    ", "\"\"\"\n    Extract the text body from an appropriately shaped BeautifulSoup object.\n\n    :param soup: BeautifulSoup with exactly one text.body object\n    :return: The text body as a BeautifulSoup object\n    \"\"\"", "\n", "texts", "=", "soup", ".", "find_all", "(", "\"text\"", ")", "\n", "assert", "len", "(", "texts", ")", "==", "1", ",", "\"Found multiple text tags, expected exactly one.\"", "\n", "text", "=", "texts", "[", "0", "]", "\n", "bodies", "=", "text", ".", "find_all", "(", "\"body\"", ")", "\n", "assert", "len", "(", "bodies", ")", "==", "1", ",", "\"Found no body tag in text, expected exactly one.\"", "\n", "return", "bodies", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_leaf": [[53, 62], ["len"], "function", ["None"], ["", "def", "is_leaf", "(", "elem", ":", "Tag", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Check if a bs4 Tag element has at most one child, i.e., if it is a leaf in the Tag tree\n    (single children are NavigableStrings)\n\n    :param elem: bs4 Tag element\n    :return: If the element has at most one child\n    \"\"\"", "\n", "return", "len", "(", "elem", ".", "contents", ")", "<=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_attrs": [[64, 76], ["preprocessing.is_leaf", "float"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_leaf"], ["", "def", "get_attrs", "(", "elem", ":", "Tag", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Get the attributes of a bs4 Tag element, plus its tag name and - if the element is a leaf - its text,\n    as a dictionary.\n\n    :param elem: bs4 Tag element\n    :return: Dictionary containing the element's tag name, attributes, and - if the element is a leaf - text\n    \"\"\"", "\n", "if", "is_leaf", "(", "elem", ")", ":", "\n", "        ", "return", "{", "\"tag\"", ":", "elem", ".", "name", ",", "**", "elem", ".", "attrs", ",", "\"text\"", ":", "elem", ".", "text", "}", "\n", "", "else", ":", "\n", "        ", "return", "{", "\"tag\"", ":", "elem", ".", "name", ",", "**", "elem", ".", "attrs", ",", "\"text\"", ":", "float", "(", "\"nan\"", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_navigable_string": [[78, 80], ["type"], "function", ["None"], ["", "", "def", "is_navigable_string", "(", "elem", ":", "PageElement", ")", "->", "bool", ":", "\n", "    ", "return", "type", "(", "elem", ")", "==", "NavigableString", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_redundant_element": [[82, 92], ["None"], "function", ["None"], ["", "def", "is_redundant_element", "(", "elem", ":", "Union", "[", "Tag", ",", "NavigableString", "]", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Check if an element is redundant, i.e., it is (contained in) a \"header\" or\n    a \"speaker\" element, because the information contained in \"head\" and \"speaker\" elements\n    and their descendants is already encoded in XML attributes of other tags.\n\n    :param elem: bs4 element\n    :return: If the element is redundant\n    \"\"\"", "\n", "return", "elem", ".", "name", "in", "[", "\"head\"", ",", "\"speaker\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_descendant_of_redundant_element": [[94, 97], ["set", "bool"], "function", ["None"], ["", "def", "is_descendant_of_redundant_element", "(", "elem", ":", "Union", "[", "Tag", ",", "NavigableString", "]", ")", "->", "bool", ":", "\n", "    ", "parent_names", "=", "set", "(", "[", "x", ".", "name", "for", "x", "in", "elem", ".", "parents", "]", ")", "\n", "return", "bool", "(", "{", "\"head\"", ",", "\"speaker\"", "}", ".", "intersection", "(", "parent_names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.keep_elem_in_xml_df": [[99, 111], ["preprocessing.is_navigable_string", "preprocessing.is_redundant_element", "preprocessing.is_descendant_of_redundant_element"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_navigable_string", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_redundant_element", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_descendant_of_redundant_element"], ["", "def", "keep_elem_in_xml_df", "(", "elem", ":", "Union", "[", "Tag", ",", "NavigableString", "]", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Decide whether to keep an bs4 element in the XML dataframe produced as the\n    raw preprocessed data.\n\n    :param elem: bs4 element from a BeautifulSoup object\n    :return: Whether to keep the element\n    \"\"\"", "\n", "return", "(", "\n", "not", "is_navigable_string", "(", "elem", ")", "\n", "and", "not", "is_redundant_element", "(", "elem", ")", "\n", "and", "not", "is_descendant_of_redundant_element", "(", "elem", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df": [[114, 126], ["pandas.DataFrame.from_records", "preprocessing.get_attrs", "preprocessing.keep_elem_in_xml_df"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_attrs", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.keep_elem_in_xml_df"], ["", "def", "get_xml_df", "(", "body", ":", "Tag", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n    Construct a pd.DataFrame from the non-redundant XML tags of a TEI-encoded\n    BeautifulSoup object.\n\n    :param body: Body of a TEI-encoded BeautifulSoup object\n    :return: pd.DataFrame containing all non-redundant XML tags with names, attributes, and text\n    \"\"\"", "\n", "records", "=", "[", "\n", "get_attrs", "(", "elem", ")", "for", "elem", "in", "body", ".", "descendants", "if", "keep_elem_in_xml_df", "(", "elem", ")", "\n", "]", "\n", "return", "pd", ".", "DataFrame", ".", "from_records", "(", "records", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_act": [[128, 148], ["float", "df[].ffill().bfill().astype", "df.query", "df[].ffill().bfill", "df.query", "df.query", "df.query", "df[].ffill"], "function", ["None"], ["", "def", "set_act", "(", "df", ":", "pd", ".", "DataFrame", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Adds act information to a pd.DataFrame created with get_xml_df, using the\n    observation that rows with type == \"act\" hold the new act number in column \"n\".\n    Complete via first forward-filling, then backward-filling,\n    and convert act numbers to integers.\n    Inductions, prologues, and epilogues receive special treatment as act 0\n    (inductions and prologues) resp. act 6 (epilogues).\n\n    :param df: pd.DataFrame created with get_xml_df\n    :return: None\n    \"\"\"", "\n", "df", "[", "\"act\"", "]", "=", "float", "(", "\"nan\"", ")", "\n", "act_query", "=", "\"type == 'act'\"", "\n", "df", ".", "loc", "[", "df", ".", "query", "(", "act_query", ")", ".", "index", ",", "\"act\"", "]", "=", "df", ".", "query", "(", "act_query", ")", "[", "\"n\"", "]", "\n", "induction_query", "=", "\"type == 'induction' or type == 'prologue'\"", "\n", "df", ".", "loc", "[", "df", ".", "query", "(", "induction_query", ")", ".", "index", ",", "\"act\"", "]", "=", "0", "\n", "epilogue_query", "=", "\"type == 'epilogue'\"", "\n", "df", ".", "loc", "[", "df", ".", "query", "(", "epilogue_query", ")", ".", "index", ",", "\"act\"", "]", "=", "6", "\n", "df", "[", "\"act\"", "]", "=", "df", "[", "\"act\"", "]", ".", "ffill", "(", ")", ".", "bfill", "(", ")", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_scene": [[150, 169], ["float", "df.scene.ffill().bfill().astype", "df.query", "df.scene.ffill().bfill", "df.query", "df.query", "df.scene.ffill"], "function", ["None"], ["", "def", "set_scene", "(", "df", ":", "pd", ".", "DataFrame", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Adds scene information to a pd.DataFrame created with get_xml_df, using the\n    observation that rows with type == \"scene\" hold the new scene number in column \"n\".\n    Complete via first forward-filling, then backward-filling,\n    and convert act numbers to integers.\n    Acts, inductions, prologues, and epilogues receive special treatment as scene 0.\n\n    :param df: pd.DataFrame created with get_xml_df\n    :return: None\n    \"\"\"", "\n", "df", "[", "\"scene\"", "]", "=", "float", "(", "\"nan\"", ")", "\n", "special_types", "=", "[", "\"act\"", ",", "\"induction\"", ",", "\"prologue\"", ",", "\"epilogue\"", "]", "\n", "general_act_query", "=", "\"type in @special_types\"", "\n", "df", ".", "loc", "[", "df", ".", "query", "(", "general_act_query", ")", ".", "index", ",", "\"scene\"", "]", "=", "0", "\n", "df", ".", "loc", "[", "df", ".", "query", "(", "\"type == 'scene'\"", ")", ".", "index", ",", "\"scene\"", "]", "=", "df", ".", "query", "(", "\"type == 'scene'\"", ")", "[", "\n", "\"n\"", "\n", "]", "\n", "df", "[", "\"scene\"", "]", "=", "df", ".", "scene", ".", "ffill", "(", ")", ".", "bfill", "(", ")", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_entrance": [[171, 173], ["None"], "function", ["None"], ["", "def", "is_entrance", "(", "row", ")", ":", "\n", "    ", "return", "row", "[", "\"tag\"", "]", "==", "\"stage\"", "and", "row", "[", "\"type\"", "]", "==", "\"entrance\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_exit": [[175, 177], ["None"], "function", ["None"], ["", "def", "is_exit", "(", "row", ")", ":", "\n", "    ", "return", "row", "[", "\"tag\"", "]", "==", "\"stage\"", "and", "row", "[", "\"type\"", "]", "==", "\"exit\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.has_speaker": [[179, 181], ["pandas.isna"], "function", ["None"], ["", "def", "has_speaker", "(", "row", ")", ":", "\n", "    ", "return", "row", "[", "\"tag\"", "]", "==", "\"sp\"", "and", "not", "pd", ".", "isna", "(", "row", "[", "\"who\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_new_act": [[183, 185], ["None"], "function", ["None"], ["", "def", "is_new_act", "(", "row", ",", "prev_act", ")", ":", "\n", "    ", "return", "row", "[", "\"act\"", "]", "!=", "prev_act", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_new_scene": [[187, 189], ["None"], "function", ["None"], ["", "def", "is_new_scene", "(", "row", ",", "prev_scene", ")", ":", "\n", "    ", "return", "row", "[", "\"scene\"", "]", "!=", "prev_scene", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_onstage": [[191, 242], ["df.who.map", "df.iterrows", "df.onstage.apply", "len", "any", "set", "set", "preprocessing.is_new_act", "preprocessing.is_new_scene", "set", "preprocessing.is_entrance", "preprocessing.has_speaker", "preprocessing.is_exit", "pandas.isna"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_new_act", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_new_scene", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_entrance", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.has_speaker", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_exit"], ["", "def", "set_onstage", "(", "df", ":", "pd", ".", "DataFrame", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Adds information on who is onstage to a pd.DataFrame created with get_xml_df,\n    primarily based on hints in the XML attributes of \"stage\" and \"sp\" tags.\n\n    Notes:\n\n    - We ensure that the speaker(s) are always onstage.\n      Note that there can be multiple speakers for one line, hence the need to treat\n      the \"who\" attribute as a set.\n    - We flush characters when a new act starts.\n      Rationale: Limit repercussions of encoding \"errors\" in stage directions,\n      found, e.g., when characters are dead or unconscious and not marked as exiting.\n      Example: R&J - Juliet not marked up as exiting at the end of Act IV\n    - We _also_ flush characters when a new scene starts.\n      Rationale: The same as for flushing when a new act starts, but somewhat more problematic.\n      Example: R&J - Citizen from Act III, Scene I never marked up as exiting,\n      and thus still onstage in Act III, Scene V (on the balcony!).\n    - Thus, we currently model character presence on stage \"conservatively\" overall, and\n      we are looking into better character management (not relying on the markup)\n      as a potential improvement.\n    - Flushing when a new scene starts is problematic:\n      Stage directions in the Folger Shakespeare often use \"Exeunt all but\",\n      and as a consequence, only exits are marked up and not entries in the next scene.\n      Example: Julius Caesar - Brutus and Cassius not marked up to enter in Act IV Scene III,\n      but rather staying from Act IV Scene II (stage directions differ from the Oxford Shakespeare).\n    - Even flushing when a new act starts is problematic with the Folger stage directions,\n      but the problematic instances are very rare. We limit the impact of errors introduced\n      by this modeling choice by also ensuring that the speaker is always onstage.\n\n    :param df: pd.DataFrame created with get_xml_df, with act and scene already annotated\n    :return: None\n    \"\"\"", "\n", "df", "[", "\"who\"", "]", "=", "df", ".", "who", ".", "map", "(", "string_to_set", ")", "\n", "df", "[", "\"onstage\"", "]", "=", "[", "set", "(", ")", "]", "*", "len", "(", "df", ")", "\n", "for", "idx", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "prev_onstage", "=", "df", ".", "at", "[", "idx", "-", "1", ",", "\"onstage\"", "]", "if", "idx", ">", "0", "else", "set", "(", ")", "\n", "prev_act", "=", "df", ".", "at", "[", "idx", "-", "1", ",", "\"act\"", "]", "if", "idx", ">", "0", "else", "0", "\n", "prev_scene", "=", "df", ".", "at", "[", "idx", "-", "1", ",", "\"scene\"", "]", "if", "idx", ">", "0", "else", "0", "\n", "if", "is_new_act", "(", "row", ",", "prev_act", ")", "or", "is_new_scene", "(", "row", ",", "prev_scene", ")", ":", "\n", "            ", "prev_onstage", "=", "set", "(", ")", "\n", "", "if", "is_entrance", "(", "row", ")", "or", "has_speaker", "(", "row", ")", ":", "\n", "            ", "df", ".", "at", "[", "idx", ",", "\"onstage\"", "]", "=", "prev_onstage", "|", "row", "[", "\"who\"", "]", "\n", "", "elif", "is_exit", "(", "row", ")", ":", "\n", "            ", "df", ".", "at", "[", "idx", ",", "\"onstage\"", "]", "=", "prev_onstage", "-", "row", "[", "\"who\"", "]", "\n", "", "else", ":", "\n", "            ", "df", ".", "at", "[", "idx", ",", "\"onstage\"", "]", "=", "prev_onstage", "\n", "", "", "assert", "not", "any", "(", "\n", "pd", ".", "isna", "(", "x", ")", "for", "x", "in", "df", "[", "\"onstage\"", "]", "\n", ")", ",", "f\"Found unexpected nan values in 'onstage' column!\"", "\n", "df", ".", "onstage", "=", "df", ".", "onstage", ".", "apply", "(", "sort_join_strings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_stagegroup": [[244, 254], ["float", "enumerate", "df.stagegroup_raw.astype", "zip", "df.shift"], "function", ["None"], ["", "def", "set_stagegroup", "(", "df", ":", "pd", ".", "DataFrame", ")", "->", "None", ":", "\n", "    ", "df", "[", "\"stagegroup_raw\"", "]", "=", "float", "(", "\"nan\"", ")", "\n", "stage_n", "=", "0", "\n", "for", "idx1", ",", "(", "os1", ",", "os2", ")", "in", "enumerate", "(", "zip", "(", "df", ".", "onstage", "[", ":", "-", "1", "]", ",", "df", ".", "shift", "(", "-", "1", ")", ".", "onstage", ")", ")", ":", "\n", "        ", "if", "idx1", "==", "0", ":", "\n", "            ", "df", ".", "at", "[", "idx1", ",", "\"stagegroup_raw\"", "]", "=", "stage_n", "\n", "", "if", "os1", "!=", "os2", ":", "\n", "            ", "stage_n", "+=", "1", "\n", "", "df", ".", "at", "[", "idx1", "+", "1", ",", "\"stagegroup_raw\"", "]", "=", "stage_n", "\n", "", "df", ".", "stagegroup_raw", "=", "df", ".", "stagegroup_raw", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_who_attributes": [[256, 259], ["elem.attrs.get", "float"], "function", ["None"], ["", "def", "get_who_attributes", "(", "elem", ":", "Tag", ")", "->", "Union", "[", "str", ",", "float", "]", ":", "\n", "# the nan is relevant for sp tags of songs without who annotations", "\n", "    ", "return", "elem", ".", "attrs", ".", "get", "(", "\"who\"", ",", "float", "(", "\"nan\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_descendants_ids": [[261, 265], ["e.attrs.get", "preprocessing.is_navigable_string"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_navigable_string"], ["", "def", "get_descendants_ids", "(", "elem", ":", "Tag", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "descendants", "=", "[", "e", "for", "e", "in", "elem", ".", "descendants", "if", "not", "is_navigable_string", "(", "e", ")", "]", "\n", "descendants_ids", "=", "[", "e", ".", "attrs", "[", "\"xml:id\"", "]", "for", "e", "in", "descendants", "if", "e", ".", "attrs", ".", "get", "(", "\"n\"", ")", "]", "\n", "return", "descendants_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_speaker": [[267, 283], ["body.find_all", "zip", "float", "[].map", "df.speaker.apply", "map", "map", "df.query", "hyperbard.utils.sort_join_strings", "hyperbard.utils.sort_join_strings", "df[].map", "df.query", "pandas.isna", "pandas.isna", "hyperbard.utils.character_string_to_sorted_list"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.sort_join_strings", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.sort_join_strings", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.character_string_to_sorted_list"], ["", "def", "set_speaker", "(", "df", ":", "pd", ".", "DataFrame", ",", "body", ":", "Tag", ")", "->", "None", ":", "\n", "    ", "speech_tags", "=", "body", ".", "find_all", "(", "\"sp\"", ")", "\n", "speaker_helper", "=", "zip", "(", "\n", "map", "(", "get_who_attributes", ",", "speech_tags", ")", ",", "\n", "map", "(", "get_descendants_ids", ",", "speech_tags", ")", ",", "\n", ")", "\n", "df", "[", "\"speaker\"", "]", "=", "float", "(", "\"nan\"", ")", "\n", "for", "speaker", ",", "descendants", "in", "speaker_helper", ":", "\n", "        ", "df", ".", "loc", "[", "df", "[", "\"xml:id\"", "]", ".", "map", "(", "lambda", "x", ":", "x", "in", "descendants", ")", ",", "\"speaker\"", "]", "=", "speaker", "\n", "", "df", ".", "loc", "[", "df", ".", "query", "(", "\"tag == 'sp'\"", ")", ".", "index", ",", "\"speaker\"", "]", "=", "df", ".", "query", "(", "\"tag == 'sp'\"", ")", "[", "\n", "\"who\"", "\n", "]", ".", "map", "(", "lambda", "val", ":", "sort_join_strings", "(", "val", ")", "if", "not", "pd", ".", "isna", "(", "val", ")", "else", "val", ")", "\n", "df", ".", "speaker", "=", "df", ".", "speaker", ".", "apply", "(", "\n", "lambda", "sp", ":", "sort_join_strings", "(", "character_string_to_sorted_list", "(", "sp", ")", ")", "\n", "if", "not", "pd", ".", "isna", "(", "sp", ")", "\n", "else", "sp", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_raw_xml_df": [[286, 305], ["preprocessing.get_soup", "preprocessing.get_body", "preprocessing.get_xml_df", "preprocessing.set_act", "preprocessing.set_scene", "preprocessing.set_onstage", "preprocessing.set_stagegroup", "preprocessing.set_speaker"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_soup", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_act", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_scene", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_onstage", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_stagegroup", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_speaker"], ["", "def", "get_raw_xml_df", "(", "file", ":", "str", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n    Construct and enrich a pd.DataFrame from the non-redundant XML tags of a\n    TEI-encoded BeautifulSoup object.\n\n    Produces a DataFrame object of the shape of the *.raw.csv files.\n\n    :param file: Path to file\n    :return: pd.DataFrame containing all non-redundant XML tags with names, attributes, text, and annotations\n    \"\"\"", "\n", "soup", "=", "get_soup", "(", "file", ")", "\n", "body", "=", "get_body", "(", "soup", ")", "\n", "df", "=", "get_xml_df", "(", "body", ")", "\n", "set_act", "(", "df", ")", "\n", "set_scene", "(", "df", ")", "\n", "set_onstage", "(", "df", ")", "\n", "set_stagegroup", "(", "df", ")", "\n", "set_speaker", "(", "df", ",", "body", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_aggregated": [[307, 327], ["df.query().groupby().agg().rename().reset_index", "df.query().groupby().agg().rename().reset_index.sort_values().reset_index", "df.query().groupby().agg().rename", "df.query().groupby().agg().rename().reset_index.sort_values", "dict", "df.query().groupby().agg", "df.query().groupby", "df.query"], "function", ["None"], ["", "def", "get_aggregated", "(", "df", ":", "pd", ".", "DataFrame", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n    Given a pd.DataFrame output by get_raw_xml_df, produce a pd.DataFrame\n    containing only spoken words, aggregated by speech acts, i.e., consecutive\n    settings with the same speaker and the same other characters on stage.\n\n    :param df: pd.DataFrame output by get_raw_xml_df\n    :return: pd.DataFrame containing only spoken words, aggregated by speech acts\n    \"\"\"", "\n", "# select all words (w) that are not stage directions (SD)", "\n", "selector", "=", "\"tag == 'w' and not n.fillna('').str.startswith('SD')\"", "\n", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup_raw\"", ",", "\"onstage\"", ",", "\"speaker\"", ",", "\"n\"", "]", "\n", "aggregated", "=", "(", "\n", "df", ".", "query", "(", "selector", ")", "\n", ".", "groupby", "(", "groupby", ")", "\n", ".", "agg", "(", "{", "\"tag\"", ":", "\"count\"", ",", "\"xml:id\"", ":", "\"min\"", "}", ")", "\n", ".", "rename", "(", "dict", "(", "tag", "=", "\"n_tokens\"", ")", ",", "axis", "=", "1", ")", "\n", ".", "reset_index", "(", ")", "\n", ")", "\n", "return", "aggregated", ".", "sort_values", "(", "\"xml:id\"", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_setting": [[329, 345], ["float", "enumerate", "aggregated.setting.astype", "zip", "aggregated.shift", "aggregated.shift"], "function", ["None"], ["", "def", "set_setting", "(", "aggregated", ")", ":", "\n", "    ", "aggregated", "[", "\"setting\"", "]", "=", "float", "(", "\"nan\"", ")", "\n", "setting_n", "=", "1", "# first non-empty stagegroup_raw is 1, too -> consistency", "\n", "aggregated", ".", "at", "[", "0", ",", "\"setting\"", "]", "=", "setting_n", "\n", "for", "idx", ",", "(", "os1", ",", "s1", ",", "os2", ",", "s2", ")", "in", "enumerate", "(", "\n", "zip", "(", "\n", "aggregated", ".", "onstage", "[", ":", "-", "1", "]", ",", "\n", "aggregated", ".", "speaker", "[", ":", "-", "1", "]", ",", "\n", "aggregated", ".", "shift", "(", "-", "1", ")", ".", "onstage", ",", "\n", "aggregated", ".", "shift", "(", "-", "1", ")", ".", "speaker", "[", ":", "-", "1", "]", ",", "\n", ")", "\n", ")", ":", "\n", "        ", "if", "os1", "!=", "os2", "or", "s1", "!=", "s2", ":", "\n", "            ", "setting_n", "+=", "1", "\n", "", "aggregated", ".", "at", "[", "idx", "+", "1", ",", "\"setting\"", "]", "=", "setting_n", "\n", "", "aggregated", ".", "setting", "=", "aggregated", ".", "setting", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_grouped_df": [[347, 378], ["aggregated.groupby().agg().reset_index().rename().sort_values", "aggregated.groupby().agg().reset_index().rename().sort_values.stagegroup_raw.map", "aggregated_grouped[].reset_index", "aggregated.groupby().agg().reset_index().rename", "enumerate", "dict", "sorted", "aggregated.groupby().agg().reset_index", "aggregated.groupby().agg().reset_index().rename().sort_values.stagegroup_raw.unique", "aggregated.groupby().agg", "dict", "aggregated.groupby"], "function", ["None"], ["", "def", "get_grouped_df", "(", "aggregated", ")", ":", "\n", "    ", "aggregated_grouped", "=", "(", "\n", "aggregated", ".", "groupby", "(", "\n", "[", "\"stagegroup_raw\"", ",", "\"onstage\"", ",", "\"speaker\"", ",", "\"setting\"", ",", "\"act\"", ",", "\"scene\"", "]", "\n", ")", "\n", ".", "agg", "(", "dict", "(", "n_tokens", "=", "\"sum\"", ",", "n", "=", "\"count\"", ")", ")", "\n", ".", "reset_index", "(", ")", "\n", ".", "rename", "(", "dict", "(", "n", "=", "\"n_lines\"", ")", ",", "axis", "=", "1", ")", "\n", ".", "sort_values", "(", "\"setting\"", ")", "\n", ")", "\n", "stagegroups_renumbered", "=", "{", "\n", "elem", ":", "idx", "\n", "for", "idx", ",", "elem", "in", "enumerate", "(", "\n", "sorted", "(", "aggregated_grouped", ".", "stagegroup_raw", ".", "unique", "(", ")", ")", ",", "start", "=", "1", "\n", ")", "\n", "}", "\n", "aggregated_grouped", "[", "\"stagegroup\"", "]", "=", "aggregated_grouped", ".", "stagegroup_raw", ".", "map", "(", "\n", "lambda", "sg", ":", "stagegroups_renumbered", "[", "sg", "]", "\n", ")", "\n", "columns_ordered", "=", "[", "\n", "\"act\"", ",", "\n", "\"scene\"", ",", "\n", "\"stagegroup\"", ",", "\n", "\"stagegroup_raw\"", ",", "\n", "\"setting\"", ",", "\n", "\"onstage\"", ",", "\n", "\"speaker\"", ",", "\n", "\"n_lines\"", ",", "\n", "\"n_tokens\"", ",", "\n", "]", "\n", "return", "aggregated_grouped", "[", "columns_ordered", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_agg_xml_df": [[380, 396], ["preprocessing.get_aggregated", "preprocessing.set_setting", "preprocessing.get_grouped_df"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_aggregated", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_setting", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_grouped_df"], ["", "def", "get_agg_xml_df", "(", "df", ":", "pd", ".", "DataFrame", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n    Given a pd.DataFrame output by get_raw_xml_df, produce a pd.DataFrame\n    containing only spoken words, aggregated by speech acts, i.e., consecutive\n    settings with the same speaker and the same other characters on stage,\n    with full setting annotations.\n\n    Produces a DataFrame object of the shape of the *.agg.csv files.\n\n    :param df: pd.DataFrame output by get_raw_xml_df\n    :return: pd.DataFrame containing only spoken words, aggregated by speech acts\n    \"\"\"", "\n", "aggregated", "=", "get_aggregated", "(", "df", ")", "\n", "set_setting", "(", "aggregated", ")", "\n", "aggregated_grouped", "=", "get_grouped_df", "(", "aggregated", ")", "\n", "return", "aggregated_grouped", "\n", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.rename_directed_columns": [[14, 21], ["edges.rename"], "function", ["None"], ["def", "rename_directed_columns", "(", "edges", ")", ":", "\n", "    ", "return", "edges", ".", "rename", "(", "\n", "{", "\n", "\"source\"", ":", "\"node1\"", ",", "\n", "\"target\"", ":", "\"node2\"", ",", "\n", "}", ",", "\n", "axis", "=", "\"columns\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph": [[24, 125], ["RuntimeError", "representation.split", "RuntimeError", "RuntimeError", "os.path.join", "pandas.read_csv", "pandas.read_csv", "graph_io.rename_directed_columns", "edges.query().copy.node2.astype", "graph_io.find_key_columns", "edges.query().copy.set_index", "len", "os.path.join", "os.path.join", "nodes.query().copy.query().copy", "edges.query().copy.query().copy", "prop_type.startswith", "prop_type.startswith", "nodes.query().copy.iterrows", "nx.DiGraph.add_edges_from", "nx.DiGraph.add_weighted_edges_from", "dict", "networkx.set_edge_attributes", "representation.split", "networkx.MultiGraph", "networkx.Graph", "nx.DiGraph.add_nodes_from", "networkx.MultiDiGraph", "networkx.DiGraph", "nx.DiGraph.add_node", "zip", "zip", "representation.split", "filter", "nodes.query().copy.query", "edges.query().copy.query", "nx.DiGraph.add_nodes_from", "nx.DiGraph.add_nodes_from", "zip", "nodes.query().copy.node.map", "nodes.query().copy.query", "nodes.query().copy.query", "tup[].isupper"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.rename_directed_columns", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.find_key_columns"], ["", "def", "load_graph", "(", "\n", "play", ",", "representation", ",", "edge_weights", "=", "None", ",", "restrict_to_named_characters", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\"Load graph for a specific representation of a play.\n\n    Parameters\n    ----------\n    play : str\n        Identifier of the play, e.g. 'romeo-and-juliet'.\n\n    representation : str\n        Graph representation identifier, e.g. 'ce-group-mw'.\n\n    edge_weights : None or str\n        Optional attribute to use for assigning edge weights.\n\n    Returns\n    -------\n    nx.Graph\n        Graph corresponding to the specified play and representation.\n    \"\"\"", "\n", "assert", "len", "(", "representation", ".", "split", "(", "\"-\"", ")", ")", "==", "3", ",", "RuntimeError", "(", "\n", "f\"Unexpected representation string: {representation}, expected 3 components!\"", "\n", ")", "\n", "\n", "graph_type", ",", "agg_type", ",", "prop_type", "=", "representation", ".", "split", "(", "\"-\"", ")", "\n", "\n", "assert", "graph_type", "in", "[", "\"ce\"", ",", "\"se\"", "]", ",", "RuntimeError", "(", "\n", "f\"Unexpected graph type: {graph_type}\"", "\n", ")", "\n", "assert", "agg_type", "in", "[", "\"scene\"", ",", "\"group\"", ",", "\"speech\"", "]", ",", "RuntimeError", "(", "\n", "f\"Unexpected aggregation type: {agg_type}\"", "\n", ")", "\n", "\n", "if", "graph_type", "==", "\"ce\"", ":", "\n", "        ", "nodes_file", "=", "os", ".", "path", ".", "join", "(", "GRAPHDATA_PATH", ",", "f\"{play}_{graph_type}.nodes.csv\"", ")", "\n", "", "else", ":", "# i.e., graph_type == \"se\":", "\n", "        ", "nodes_repr", "=", "\"-\"", ".", "join", "(", "representation", ".", "split", "(", "\"-\"", ")", "[", ":", "2", "]", ")", "\n", "nodes_file", "=", "os", ".", "path", ".", "join", "(", "GRAPHDATA_PATH", ",", "f\"{play}_{nodes_repr}.nodes.csv\"", ")", "\n", "", "edges_file", "=", "os", ".", "path", ".", "join", "(", "GRAPHDATA_PATH", ",", "f\"{play}_{representation}.edges.csv\"", ")", "\n", "\n", "nodes", "=", "pd", ".", "read_csv", "(", "nodes_file", ")", "\n", "edges", "=", "pd", ".", "read_csv", "(", "edges_file", ")", "\n", "\n", "edges", "=", "rename_directed_columns", "(", "edges", ")", "\n", "\n", "# Coercing this to a `str` is at best a NOP; it only ever applies to", "\n", "# the star expansion.", "\n", "edges", ".", "node2", "=", "edges", ".", "node2", ".", "astype", "(", "str", ")", "\n", "\n", "if", "restrict_to_named_characters", ":", "\n", "        ", "named_nodes", "=", "[", "\n", "tup", "[", "0", "]", "\n", "for", "tup", "in", "filter", "(", "\n", "lambda", "tup", ":", "not", "tup", "[", "-", "1", "]", ".", "isupper", "(", ")", ",", "\n", "zip", "(", "nodes", ".", "node", ",", "nodes", ".", "node", ".", "map", "(", "remove_uppercase_prefixes", ")", ")", ",", "\n", ")", "\n", "]", "\n", "nodes", "=", "nodes", ".", "query", "(", "\"node in @named_nodes\"", ")", ".", "copy", "(", ")", "\n", "edges", "=", "edges", ".", "query", "(", "\"node1 in @named_nodes and node2 in @named_nodes\"", ")", ".", "copy", "(", ")", "\n", "\n", "# TODO the if-else branches on unintuitive decisions", "\n", "", "if", "agg_type", "!=", "\"speech\"", ":", "\n", "        ", "if", "prop_type", ".", "startswith", "(", "\"m\"", ")", ":", "\n", "            ", "G", "=", "nx", ".", "MultiGraph", "(", ")", "\n", "", "else", ":", "\n", "            ", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "\n", "", "if", "graph_type", "==", "\"ce\"", ":", "\n", "            ", "G", ".", "add_nodes_from", "(", "nodes", ".", "node", ")", "\n", "", "elif", "graph_type", "==", "\"se\"", ":", "\n", "            ", "G", ".", "add_nodes_from", "(", "\n", "nodes", ".", "query", "(", "\"node_type == 'character'\"", ")", ".", "node", ",", "node_type", "=", "\"character\"", "\n", ")", "\n", "G", ".", "add_nodes_from", "(", "\n", "nodes", ".", "query", "(", "\"node_type == 'text_unit'\"", ")", ".", "node", ",", "node_type", "=", "\"text_unit\"", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "prop_type", ".", "startswith", "(", "\"m\"", ")", ":", "\n", "            ", "G", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "", "else", ":", "\n", "            ", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "\n", "", "for", "_", ",", "row", "in", "nodes", ".", "iterrows", "(", ")", ":", "\n", "            ", "G", ".", "add_node", "(", "row", ".", "node", ",", "node_type", "=", "row", "[", "\"node_type\"", "]", ")", "\n", "\n", "", "", "if", "edge_weights", "is", "None", ":", "\n", "        ", "G", ".", "add_edges_from", "(", "zip", "(", "edges", ".", "node1", ",", "edges", ".", "node2", ")", ")", "\n", "", "else", ":", "\n", "        ", "G", ".", "add_weighted_edges_from", "(", "\n", "zip", "(", "edges", ".", "node1", ",", "edges", ".", "node2", ",", "edges", "[", "edge_weights", "]", ")", ",", "\n", "weight", "=", "edge_weights", ",", "\n", ")", "\n", "", "key_columns", "=", "find_key_columns", "(", "G", ")", "\n", "attribute_columns", "=", "[", "c", "for", "c", "in", "edges", ".", "columns", "if", "c", "not", "in", "key_columns", "]", "\n", "edges_indexed", "=", "edges", ".", "set_index", "(", "key_columns", ")", "\n", "for", "attribute", "in", "attribute_columns", ":", "\n", "        ", "values", "=", "dict", "(", "edges_indexed", "[", "attribute", "]", ")", "\n", "nx", ".", "set_edge_attributes", "(", "G", ",", "values", ",", "name", "=", "attribute", ")", "\n", "\n", "", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.find_key_columns": [[127, 135], ["isinstance", "isinstance", "isinstance", "isinstance", "ValueError", "type"], "function", ["None"], ["", "def", "find_key_columns", "(", "G", ")", ":", "\n", "    ", "if", "isinstance", "(", "G", ",", "nx", ".", "MultiDiGraph", ")", "or", "isinstance", "(", "G", ",", "nx", ".", "MultiGraph", ")", ":", "\n", "        ", "key_columns", "=", "[", "\"node1\"", ",", "\"node2\"", ",", "\"key\"", "]", "\n", "", "elif", "isinstance", "(", "G", ",", "nx", ".", "DiGraph", ")", "or", "isinstance", "(", "G", ",", "nx", ".", "Graph", ")", ":", "\n", "        ", "key_columns", "=", "[", "\"node1\"", ",", "\"node2\"", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unexpected graph type: {type(G)}\"", ")", "\n", "", "return", "key_columns", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_hypergraph": [[137, 193], ["RuntimeError", "representation.split", "RuntimeError", "os.path.join", "pandas.read_csv", "pd.read_csv.onstage.map().map", "hypernetx.Hypergraph", "pd.read_csv.iterrows", "len", "pd.read_csv.onstage.map", "hnx.Hypergraph.add_edge", "representation.split", "pd.read_csv.onstage.map", "hypernetx.Entity", "x.split", "hyperbard.utils.remove_uppercase_prefixes().isupper", "x.isupper", "hyperbard.utils.remove_uppercase_prefixes", "row.items"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes"], ["", "def", "load_hypergraph", "(", "play", ",", "representation", ",", "restrict_to_named_characters", "=", "True", ")", ":", "\n", "    ", "\"\"\"Load specific hypergraph representation for a play.\n\n    Parameters\n    ----------\n    play : str\n        Identifier of the play, e.g. 'romeo-and-juliet'.\n\n    representation : str\n        Hypergraph representation identifier, e.g. 'hg-group-mw'.\n\n    edge_weights : None or str\n        Optional attribute to use for assigning edge weights.\n\n    Returns\n    -------\n    hnx.Hypergraph\n        Hypergraph corresponding to the specified play and representation.\n    \"\"\"", "\n", "assert", "len", "(", "representation", ".", "split", "(", "\"-\"", ")", ")", "==", "3", ",", "RuntimeError", "(", "\n", "f\"Unexpected representation string: {representation}, expected 3 components!\"", "\n", ")", "\n", "\n", "hypergraph_type", ",", "agg_type", ",", "prop_type", "=", "representation", ".", "split", "(", "\"-\"", ")", "\n", "\n", "assert", "hypergraph_type", "==", "\"hg\"", ",", "RuntimeError", "(", "\"Expecting hypergraph representation\"", ")", "\n", "\n", "edges_file", "=", "os", ".", "path", ".", "join", "(", "GRAPHDATA_PATH", ",", "f\"{play}_{representation}.edges.csv\"", ")", "\n", "edges", "=", "pd", ".", "read_csv", "(", "edges_file", ")", "\n", "\n", "edges", ".", "onstage", "=", "edges", ".", "onstage", ".", "map", "(", "lambda", "x", ":", "x", ".", "split", "(", ")", ")", ".", "map", "(", "\n", "lambda", "onstage", ":", "[", "x", "for", "x", "in", "onstage", "if", "not", "x", ".", "isupper", "(", ")", "]", "\n", ")", "\n", "\n", "if", "restrict_to_named_characters", ":", "\n", "        ", "named_characters", "=", "{", "\n", "elem", "\n", "for", "sublist", "in", "edges", ".", "onstage", "\n", "for", "elem", "in", "sublist", "\n", "if", "not", "remove_uppercase_prefixes", "(", "elem", ")", ".", "isupper", "(", ")", "\n", "}", "\n", "edges", ".", "onstage", "=", "edges", ".", "onstage", ".", "map", "(", "\n", "lambda", "characters", ":", "[", "elem", "for", "elem", "in", "characters", "if", "elem", "in", "named_characters", "]", "\n", ")", "\n", "\n", "", "H", "=", "hnx", ".", "Hypergraph", "(", ")", "\n", "for", "idx", ",", "row", "in", "edges", ".", "iterrows", "(", ")", ":", "\n", "        ", "H", ".", "add_edge", "(", "\n", "hnx", ".", "Entity", "(", "\n", "idx", ",", "\n", "row", "[", "\"onstage\"", "]", ",", "\n", "**", "{", "k", ":", "v", "for", "k", ",", "v", "in", "row", ".", "items", "(", ")", "if", "k", "!=", "\"onstage\"", "}", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "H", "\n", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_hypergraph_over_time.plot_romeo_hypergraph_over_time": [[11, 97], ["pandas.read_csv", "pd.read_csv.speaker.map", "pd.read_csv.onstage.map", "pd.read_csv.n_lines.cumsum", "pd.read_csv.explode", "pandas.DataFrame", "pd.DataFrame.T[].fillna", "matplotlib.subplots", "ax.vlines", "transformed_df[].plot.line", "transformed_df[].plot.line", "seaborn.despine", "ax.get_legend_handles_labels", "matplotlib.xticks", "matplotlib.yticks", "ax.legend", "ax.legend.get_frame", "legend.get_frame.set_edgecolor", "legend.get_frame.set_boxstyle", "matplotlib.xlabel", "matplotlib.ylabel", "hyperbard.plotting_utils.save_pgf_fig", "hg_speech_mwd.explode.query().groupby().agg", "hg_speech_mwd_exploded_speaker.query().groupby().agg.n_lines.items", "range", "numpy.arange", "sorted", "dict", "pd.read_csv.n_lines_cumulative.max", "hg_speech_mwd.explode.query().groupby", "pd.read_csv.query().n_lines_cumulative.max", "hyperbard.plotting_utils.get_character_color", "hyperbard.plotting_utils.get_character_color", "map", "map", "range", "x.split", "x.split", "hg_speech_mwd.explode.query", "sorted", "y.isupper", "y.startswith", "y.isupper", "y.startswith", "pd.read_csv.query"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.get_character_color", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.get_character_color"], ["def", "plot_romeo_hypergraph_over_time", "(", "selected_labels", ",", "font_size", ")", ":", "\n", "    ", "hg_speech_mwd", "=", "pd", ".", "read_csv", "(", "\n", "f\"{GRAPHDATA_PATH}/romeo-and-juliet_hg-speech-mwd.edges.csv\"", "\n", ")", "\n", "hg_speech_mwd", ".", "speaker", "=", "hg_speech_mwd", ".", "speaker", ".", "map", "(", "\n", "lambda", "x", ":", "[", "\n", "y", "\n", "for", "y", "in", "map", "(", "get_name_from_identifier", ",", "x", ".", "split", "(", ")", ")", "\n", "if", "not", "y", ".", "isupper", "(", ")", "and", "not", "y", ".", "startswith", "(", "\"SERVANT\"", ")", "\n", "]", "\n", ")", "\n", "hg_speech_mwd", ".", "onstage", "=", "hg_speech_mwd", ".", "onstage", ".", "map", "(", "\n", "lambda", "x", ":", "[", "\n", "y", "\n", "for", "y", "in", "map", "(", "get_name_from_identifier", ",", "x", ".", "split", "(", ")", ")", "\n", "if", "not", "y", ".", "isupper", "(", ")", "and", "not", "y", ".", "startswith", "(", "\"SERVANT\"", ")", "\n", "]", "\n", ")", "\n", "hg_speech_mwd", "[", "\"n_lines_cumulative\"", "]", "=", "hg_speech_mwd", ".", "n_lines", ".", "cumsum", "(", ")", "\n", "hg_speech_mwd_exploded_speaker", "=", "hg_speech_mwd", ".", "explode", "(", "\"speaker\"", ")", "\n", "speaker_df", "=", "pd", ".", "DataFrame", "(", "\n", "index", "=", "sorted", "(", "{", "elem", "for", "sublist", "in", "hg_speech_mwd", ".", "speaker", "for", "elem", "in", "sublist", "}", ")", ",", "\n", "columns", "=", "hg_speech_mwd", ".", "n_lines_cumulative", ",", "\n", ")", "\n", "for", "line", "in", "hg_speech_mwd", ".", "n_lines_cumulative", ":", "\n", "        ", "queried", "=", "(", "\n", "hg_speech_mwd_exploded_speaker", ".", "query", "(", "\"n_lines_cumulative <= @line\"", ")", "\n", ".", "groupby", "(", "\"speaker\"", ")", "\n", ".", "agg", "(", "dict", "(", "n_lines", "=", "sum", ")", ")", "\n", ")", "\n", "for", "idx", ",", "n_lines", "in", "queried", ".", "n_lines", ".", "items", "(", ")", ":", "\n", "            ", "speaker_df", ".", "at", "[", "idx", ",", "line", "]", "=", "n_lines", "/", "line", "\n", "", "", "transformed_df", "=", "speaker_df", ".", "T", "[", "\n", "[", "x", "for", "x", "in", "speaker_df", ".", "index", "if", "x", "!=", "\"Chorus\"", "]", "\n", "]", ".", "fillna", "(", "0", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "16", ",", "7", ")", ")", "\n", "ax", ".", "vlines", "(", "\n", "x", "=", "[", "\n", "hg_speech_mwd", ".", "query", "(", "\"act == @act\"", ")", ".", "n_lines_cumulative", ".", "max", "(", ")", "\n", "for", "act", "in", "range", "(", "0", ",", "5", ")", "\n", "]", ",", "\n", "lw", "=", "1", ",", "\n", "ymin", "=", "0", ",", "\n", "ymax", "=", "0.25", ",", "\n", "colors", "=", "\"k\"", ",", "\n", "linestyles", "=", "\"--\"", ",", "\n", ")", "\n", "transformed_df", "[", "\n", "[", "c", "for", "c", "in", "transformed_df", ".", "columns", "if", "c", "not", "in", "selected_labels", "]", "\n", "]", ".", "plot", ".", "line", "(", "\n", "ax", "=", "ax", ",", "\n", "color", "=", "{", "k", ":", "get_character_color", "(", "k", ")", "for", "k", "in", "transformed_df", ".", "columns", "}", ",", "\n", "lw", "=", "1", ",", "\n", "linestyle", "=", "\"-\"", ",", "\n", "legend", "=", "False", ",", "\n", ")", "\n", "transformed_df", "[", "sorted", "(", "selected_labels", ")", "]", ".", "plot", ".", "line", "(", "\n", "ax", "=", "ax", ",", "\n", "color", "=", "{", "k", ":", "get_character_color", "(", "k", ")", "for", "k", "in", "transformed_df", ".", "columns", "}", ",", "\n", "linestyle", "=", "\"-\"", ",", "\n", "lw", "=", "3", ",", "\n", ")", "\n", "sns", ".", "despine", "(", "offset", "=", "0", ",", "trim", "=", "True", ")", "\n", "handles", ",", "labels", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "plt", ".", "xticks", "(", "\n", "range", "(", "0", ",", "hg_speech_mwd", ".", "n_lines_cumulative", ".", "max", "(", ")", ",", "500", ")", ",", "\n", "fontsize", "=", "font_size", ",", "\n", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "0.26", ",", "0.05", ")", ",", "fontsize", "=", "font_size", ")", "\n", "legend", "=", "ax", ".", "legend", "(", "\n", "handles", "=", "handles", "[", "-", "5", ":", "]", ",", "\n", "labels", "=", "labels", "[", "-", "5", ":", "]", ",", "\n", "loc", "=", "(", "1.001", ",", "0.535", ")", ",", "\n", "fontsize", "=", "font_size", ",", "\n", ")", "\n", "frame", "=", "legend", ".", "get_frame", "(", ")", "\n", "frame", ".", "set_edgecolor", "(", "\"black\"", ")", "\n", "frame", ".", "set_boxstyle", "(", "\"square\"", ",", "pad", "=", "0", ")", "\n", "# plt.tight_layout()", "\n", "plt", ".", "xlabel", "(", "\"Number of lines spoken\"", ",", "fontsize", "=", "font_size", ",", "labelpad", "=", "9", ")", "\n", "plt", ".", "ylabel", "(", "\"Fraction of lines spoken\"", ",", "fontsize", "=", "font_size", ",", "labelpad", "=", "15", ")", "\n", "save_pgf_fig", "(", "\n", "f\"{PAPERGRAPHICS_PATH}/romeo_and_juliet_hg-speech-over-time.pdf\"", ",", "\n", "axis_off", "=", "False", ",", "\n", "tight", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_bipartite.make_label": [[12, 15], ["int", "label.split"], "function", ["None"], ["def", "make_label", "(", "label", ")", ":", "\n", "    ", "components", "=", "[", "int", "(", "x", ")", "for", "x", "in", "label", ".", "split", "(", "\".\"", ")", "]", "\n", "return", "components", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_bipartite.plot_romeo_bipartite": [[17, 150], ["hyperbard.graph_io.load_graph", "hyperbard.graph_io.load_graph.edge_subgraph", "hyperbard.graph_io.load_graph", "hyperbard.graph_io.load_graph.edge_subgraph", "sorted", "sorted", "sorted", "matplotlib.subplots", "min", "max", "networkx.draw_networkx_edges", "plot_romeo_bipartite.position_bipartite_labels", "hyperbard.plotting_utils.save_pgf_fig", "plot_romeo_bipartite.get_bipartite_labels", "matplotlib.subplots", "min", "max", "networkx.draw_networkx_edges", "G2.edge_subgraph.nodes", "hyperbard.plotting_utils.save_pgf_fig", "ax.annotate", "ax.annotate.set_path_effects", "hyperbard.graph_io.load_graph.edges", "hyperbard.graph_io.load_graph.edges", "n.replace", "sorted", "sorted", "u.startswith", "v.startswith", "u.startswith", "v.startswith", "G1.edge_subgraph.nodes", "G1.edge_subgraph.nodes", "G2.edge_subgraph.nodes", "enumerate", "enumerate", "hyperbard.utils.remove_uppercase_prefixes", "G1.edge_subgraph.edges", "enumerate", "enumerate", "G2.edge_subgraph.edges", "matplotlib.patheffects.withStroke", "hyperbard.utils.remove_uppercase_prefixes", "sorted", "sorted", "hyperbard.utils.remove_uppercase_prefixes", "G1.edge_subgraph.edges", "G2.edge_subgraph.edges", "len", "len", "len", "len", "l[].isdigit"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_bipartite.position_bipartite_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_bipartite.get_bipartite_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes"], ["", "def", "plot_romeo_bipartite", "(", "selected_labels", ",", "font_size", ")", ":", "\n", "# Star expansions for Act III only, with all named characters occurring in that act", "\n", "    ", "G1", "=", "load_graph", "(", "\"romeo-and-juliet\"", ",", "\"se-scene-w\"", ",", "\"n_lines\"", ")", "\n", "act_three_edges_scene", "=", "[", "\n", "(", "u", ",", "v", ")", "for", "u", ",", "v", "in", "G1", ".", "edges", "(", ")", "if", "u", ".", "startswith", "(", "\"3\"", ")", "or", "v", ".", "startswith", "(", "\"3\"", ")", "\n", "]", "\n", "G1_subgraph", "=", "G1", ".", "edge_subgraph", "(", "act_three_edges_scene", ")", "\n", "\n", "G2", "=", "load_graph", "(", "\"romeo-and-juliet\"", ",", "\"se-group-w\"", ",", "\"n_lines\"", ")", "\n", "act_three_edges_group", "=", "[", "\n", "(", "u", ",", "v", ")", "for", "u", ",", "v", "in", "G2", ".", "edges", "(", ")", "if", "u", ".", "startswith", "(", "\"3\"", ")", "or", "v", ".", "startswith", "(", "\"3\"", ")", "\n", "]", "\n", "G2_subgraph", "=", "G2", ".", "edge_subgraph", "(", "act_three_edges_group", ")", "\n", "\n", "characters_act3", "=", "sorted", "(", "\n", "{", "n", "for", "n", ",", "t", "in", "G1_subgraph", ".", "nodes", "(", "data", "=", "\"node_type\"", ")", "if", "t", "==", "\"character\"", "}", "\n", ")", "\n", "scene_play_parts_act3", "=", "sorted", "(", "\n", "{", "n", "for", "n", ",", "t", "in", "G1_subgraph", ".", "nodes", "(", "data", "=", "\"node_type\"", ")", "if", "t", "==", "\"text_unit\"", "}", "\n", ")", "\n", "group_play_parts_act3", "=", "sorted", "(", "\n", "{", "n", "for", "n", ",", "t", "in", "G2_subgraph", ".", "nodes", "(", "data", "=", "\"node_type\"", ")", "if", "t", "==", "\"text_unit\"", "}", "\n", ")", "\n", "\n", "pos", "=", "{", "\n", "**", "{", "\n", "k", ":", "(", "0", ",", "1", "-", "idx", "/", "(", "len", "(", "characters_act3", ")", "-", "1", ")", ")", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "characters_act3", ")", "\n", "}", ",", "\n", "**", "{", "\n", "k", ":", "(", "1", ",", "1", "-", "idx", "/", "(", "len", "(", "scene_play_parts_act3", ")", "-", "1", ")", ")", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "scene_play_parts_act3", ")", "\n", "}", ",", "\n", "}", "\n", "\n", "labels", "=", "{", "\n", "**", "{", "\n", "n", ":", "remove_uppercase_prefixes", "(", "n", ")", "\n", "if", "remove_uppercase_prefixes", "(", "n", ")", "not", "in", "selected_labels", "\n", "else", "r\"\\textbf{\"", "+", "remove_uppercase_prefixes", "(", "n", ")", "+", "\"}\"", "\n", "for", "n", "in", "characters_act3", "\n", "}", ",", "\n", "**", "{", "n", ":", "n", ".", "replace", "(", "\"3.0\"", ",", "\"3.\"", ")", "for", "n", "in", "scene_play_parts_act3", "}", ",", "\n", "}", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "6", "-", "1", ",", "6", ")", ")", "\n", "\n", "act3_edgewidths", "=", "[", "\n", "w", "/", "75", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "G1_subgraph", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "]", "\n", "min3", "=", "min", "(", "act3_edgewidths", ")", "\n", "max3", "=", "max", "(", "act3_edgewidths", ")", "\n", "nx", ".", "draw_networkx_edges", "(", "\n", "G1_subgraph", ",", "\n", "pos", "=", "pos", ",", "\n", "width", "=", "act3_edgewidths", ",", "\n", "edgelist", "=", "[", "\n", "(", "u", ",", "v", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "G1_subgraph", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "]", ",", "\n", "edge_cmap", "=", "cm", ".", "Reds", ",", "\n", "edge_vmin", "=", "min3", "-", "5", ",", "\n", "edge_vmax", "=", "max3", ",", "\n", "edge_color", "=", "act3_edgewidths", ",", "\n", ")", "\n", "position_bipartite_labels", "(", "G1_subgraph", ",", "pos", ",", "ax", ",", "labels", ",", "font_size", ")", "\n", "\n", "save_pgf_fig", "(", "\n", "f\"{PAPERGRAPHICS_PATH}/romeo_and_juliet_se-scene_act-3.pdf\"", ",", "\n", "axis_off", "=", "True", ",", "\n", "tight", "=", "True", ",", "\n", ")", "\n", "\n", "bipartite_labels", "=", "get_bipartite_labels", "(", "\n", "characters_act3", ",", "group_play_parts_act3", ",", "selected_labels", "\n", ")", "\n", "\n", "pos", "=", "{", "\n", "**", "{", "\n", "k", ":", "(", "0", ",", "1", "-", "idx", "/", "(", "len", "(", "characters_act3", ")", "-", "1", ")", ")", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "[", "l", "for", "l", "in", "bipartite_labels", "if", "l", "[", "0", "]", "==", "\"#\"", "]", ")", "\n", "}", ",", "\n", "**", "{", "\n", "k", ":", "(", "1", ",", "1", "-", "idx", "/", "(", "len", "(", "group_play_parts_act3", ")", "-", "1", ")", ")", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "[", "l", "for", "l", "in", "bipartite_labels", "if", "l", "[", "0", "]", ".", "isdigit", "(", ")", "]", ")", "\n", "}", ",", "\n", "}", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "6", "-", "1", ",", "6", ")", ")", "\n", "act3_group_edgewidths", "=", "[", "\n", "w", "/", "(", "75", "/", "2", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "G2_subgraph", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "]", "\n", "min3", "=", "min", "(", "act3_group_edgewidths", ")", "\n", "max3", "=", "max", "(", "act3_group_edgewidths", ")", "\n", "nx", ".", "draw_networkx_edges", "(", "\n", "G2_subgraph", ",", "\n", "pos", "=", "pos", ",", "\n", "width", "=", "act3_group_edgewidths", ",", "\n", "edgelist", "=", "[", "\n", "(", "u", ",", "v", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "G2_subgraph", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "]", ",", "\n", "edge_cmap", "=", "cm", ".", "Reds", ",", "\n", "edge_vmin", "=", "min3", ",", "\n", "edge_vmax", "=", "max3", ",", "\n", "edge_color", "=", "act3_group_edgewidths", ",", "\n", ")", "\n", "for", "n", "in", "G2_subgraph", ".", "nodes", "(", ")", ":", "\n", "        ", "pos_n", "=", "pos", "[", "n", "]", "\n", "label_n", "=", "bipartite_labels", "[", "n", "]", "\n", "if", "pos_n", "[", "0", "]", "==", "0", ":", "\n", "            ", "ha", "=", "\"right\"", "\n", "fontsize", "=", "font_size", "\n", "", "else", ":", "\n", "            ", "ha", "=", "\"left\"", "\n", "fontsize", "=", "font_size", "-", "6", "\n", "", "va", "=", "\"center\"", "\n", "txt", "=", "ax", ".", "annotate", "(", "label_n", ",", "pos_n", ",", "fontsize", "=", "fontsize", ",", "va", "=", "va", ",", "ha", "=", "ha", ")", "\n", "txt", ".", "set_path_effects", "(", "[", "PathEffects", ".", "withStroke", "(", "linewidth", "=", "5", ",", "foreground", "=", "\"w\"", ")", "]", ")", "\n", "", "save_pgf_fig", "(", "\n", "f\"{PAPERGRAPHICS_PATH}/romeo_and_juliet_se-group_act-3.pdf\"", ",", "\n", "axis_off", "=", "True", ",", "\n", "tight", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_bipartite.get_bipartite_labels": [[153, 171], ["min", "bipartite_labels.items", "plot_romeo_bipartite.make_label", "type", "hyperbard.utils.remove_uppercase_prefixes", "bipartite_labels.values", "hyperbard.utils.remove_uppercase_prefixes", "type", "hyperbard.utils.remove_uppercase_prefixes"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_bipartite.make_label", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes"], ["", "def", "get_bipartite_labels", "(", "characters", ",", "text_units", ",", "selected_labels", ")", ":", "\n", "    ", "bipartite_labels", "=", "{", "\n", "**", "{", "\n", "n", ":", "remove_uppercase_prefixes", "(", "n", ")", "\n", "if", "remove_uppercase_prefixes", "(", "n", ")", "not", "in", "selected_labels", "\n", "else", "r\"\\textbf{\"", "+", "remove_uppercase_prefixes", "(", "n", ")", "+", "\"}\"", "\n", "for", "n", "in", "characters", "\n", "}", ",", "\n", "**", "{", "n", ":", "make_label", "(", "n", ")", "for", "n", "in", "text_units", "}", ",", "\n", "}", "\n", "min_label", "=", "min", "(", "[", "n", "[", "-", "1", "]", "for", "n", "in", "bipartite_labels", ".", "values", "(", ")", "if", "type", "(", "n", ")", "==", "list", "]", ")", "\n", "for", "k", ",", "v", "in", "bipartite_labels", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "v", ")", "==", "list", ":", "\n", "            ", "bipartite_labels", "[", "k", "]", "[", "-", "1", "]", "-=", "min_label", "-", "1", "\n", "bipartite_labels", "[", "\n", "k", "\n", "]", "=", "f\"{bipartite_labels[k][0]}.{bipartite_labels[k][1]}.{bipartite_labels[k][-1]:02}\"", "\n", "", "", "return", "bipartite_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_bipartite.plot_romeo_bipartite_speech": [[173, 321], ["hyperbard.graph_io.load_graph", "hyperbard.graph_io.load_graph.remove_nodes_from", "list", "hyperbard.graph_io.load_graph.remove_nodes_from", "networkx.DiGraph", "nx.DiGraph.add_nodes_from", "nx.DiGraph.add_nodes_from", "nx.DiGraph.add_nodes_from", "nx.DiGraph.add_weighted_edges_from", "nx.DiGraph.add_weighted_edges_from", "sorted", "sorted", "sorted", "plot_romeo_bipartite.get_bipartite_labels", "matplotlib.subplots", "min", "max", "networkx.draw_networkx_edges", "networkx.draw_networkx_edges", "nx.DiGraph.nodes", "hyperbard.plotting_utils.save_pgf_fig", "networkx.isolates", "sorted", "ax.annotate", "ax.annotate.set_path_effects", "sorted", "sorted", "u.endswith", "sorted", "v.endswith", "hyperbard.graph_io.load_graph.nodes", "hyperbard.graph_io.load_graph.nodes", "hyperbard.graph_io.load_graph.edges", "hyperbard.graph_io.load_graph.edges", "hyperbard.graph_io.load_graph.edges", "hyperbard.graph_io.load_graph.edges", "n.endswith", "n.endswith", "n.startswith", "enumerate", "enumerate", "enumerate", "nx.DiGraph.edges", "nx.DiGraph.edges", "nx.DiGraph.edges", "matplotlib.patheffects.withStroke", "sorted", "u.endswith", "sorted", "v.endswith", "n.startswith", "nx.DiGraph.edges", "nx.DiGraph.edges", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_bipartite.get_bipartite_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig"], ["", "def", "plot_romeo_bipartite_speech", "(", "selected_labels", ",", "font_size", ")", ":", "\n", "    ", "speech_G", "=", "load_graph", "(", "\"romeo-and-juliet\"", ",", "\"se-speech-wd\"", ",", "\"n_lines\"", ")", "\n", "speech_G", ".", "remove_nodes_from", "(", "\n", "[", "\n", "n", "\n", "for", "n", ",", "node_type", "in", "speech_G", ".", "nodes", "(", "data", "=", "\"node_type\"", ")", "\n", "if", "node_type", "==", "\"text_unit\"", "and", "not", "n", ".", "startswith", "(", "\"3\"", ")", "\n", "]", "\n", ")", "\n", "isolates", "=", "list", "(", "nx", ".", "isolates", "(", "speech_G", ")", ")", "\n", "speech_G", ".", "remove_nodes_from", "(", "isolates", ")", "\n", "speech_G_split", "=", "nx", ".", "DiGraph", "(", ")", "\n", "speech_G_split", ".", "add_nodes_from", "(", "\n", "[", "\n", "n", "\n", "for", "n", ",", "node_type", "in", "speech_G", ".", "nodes", "(", "data", "=", "\"node_type\"", ")", "\n", "if", "node_type", "==", "\"text_unit\"", "\n", "]", ",", "\n", "node_type", "=", "\"text_unit\"", ",", "\n", ")", "\n", "speech_G_split", ".", "add_nodes_from", "(", "\n", "[", "\n", "f\"{u}-O\"", "\n", "for", "u", ",", "v", ",", "edge_type", "in", "speech_G", ".", "edges", "(", "data", "=", "\"edge_type\"", ")", "\n", "if", "edge_type", "==", "\"active\"", "\n", "]", ",", "\n", "node_type", "=", "\"character\"", ",", "\n", ")", "\n", "speech_G_split", ".", "add_nodes_from", "(", "\n", "[", "\n", "f\"{v}-I\"", "\n", "for", "u", ",", "v", ",", "edge_type", "in", "speech_G", ".", "edges", "(", "data", "=", "\"edge_type\"", ")", "\n", "if", "edge_type", "==", "\"passive\"", "\n", "]", ",", "\n", "node_type", "=", "\"character\"", ",", "\n", ")", "\n", "speech_G_split", ".", "add_weighted_edges_from", "(", "\n", "[", "\n", "(", "f\"{u}-O\"", ",", "v", ",", "data", "[", "\"n_lines\"", "]", ")", "\n", "for", "u", ",", "v", ",", "data", "in", "speech_G", ".", "edges", "(", "data", "=", "True", ")", "\n", "if", "data", "[", "\"edge_type\"", "]", "==", "\"active\"", "\n", "]", ",", "\n", "edge_type", "=", "\"active\"", ",", "\n", ")", "\n", "speech_G_split", ".", "add_weighted_edges_from", "(", "\n", "[", "\n", "(", "u", ",", "f\"{v}-I\"", ",", "data", "[", "\"n_lines\"", "]", ")", "\n", "for", "u", ",", "v", ",", "data", "in", "speech_G", ".", "edges", "(", "data", "=", "True", ")", "\n", "if", "data", "[", "\"edge_type\"", "]", "==", "\"passive\"", "\n", "]", ",", "\n", "edge_type", "=", "\"passive\"", ",", "\n", ")", "\n", "in_characters", "=", "sorted", "(", "[", "n", "for", "n", "in", "speech_G_split", ".", "nodes", "if", "n", ".", "endswith", "(", "\"I\"", ")", "]", ")", "\n", "out_characters", "=", "sorted", "(", "[", "n", "for", "n", "in", "speech_G_split", ".", "nodes", "if", "n", ".", "endswith", "(", "\"O\"", ")", "]", ")", "\n", "text_units", "=", "sorted", "(", "[", "n", "for", "n", "in", "speech_G_split", ".", "nodes", "if", "n", ".", "startswith", "(", "\"3\"", ")", "]", ")", "\n", "bipartite_labels", "=", "get_bipartite_labels", "(", "\n", "sorted", "(", "{", "*", "in_characters", ",", "*", "out_characters", "}", ")", ",", "text_units", ",", "selected_labels", "\n", ")", "\n", "pos", "=", "{", "\n", "**", "{", "\n", "k", ":", "(", "0", ",", "1", "-", "idx", "/", "(", "len", "(", "out_characters", ")", "-", "1", ")", ")", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "out_characters", ")", "\n", "}", ",", "\n", "**", "{", "k", ":", "(", "1", ",", "1", "-", "idx", "/", "(", "len", "(", "text_units", ")", "-", "1", ")", ")", "for", "idx", ",", "k", "in", "enumerate", "(", "text_units", ")", "}", ",", "\n", "**", "{", "\n", "k", ":", "(", "2", ",", "1", "-", "idx", "/", "(", "len", "(", "in_characters", ")", "-", "1", ")", ")", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "in_characters", ")", "\n", "}", ",", "\n", "}", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "6", "+", "2", ",", "6", ")", ")", "\n", "speech_edgewidths", "=", "[", "\n", "w", "/", "(", "75", "/", "2", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "speech_G_split", ".", "edges", "(", "data", "=", "\"weight\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "]", "\n", "speech_edgewidths_out", "=", "[", "\n", "w", "/", "(", "75", "/", "2", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "speech_G_split", ".", "edges", "(", "data", "=", "\"weight\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "if", "u", ".", "endswith", "(", "\"O\"", ")", "\n", "]", "\n", "speech_edgewidths_in", "=", "[", "\n", "w", "/", "(", "75", "/", "2", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "speech_G_split", ".", "edges", "(", "data", "=", "\"weight\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "if", "v", ".", "endswith", "(", "\"I\"", ")", "\n", "]", "\n", "min3", "=", "min", "(", "speech_edgewidths", ")", "\n", "max3", "=", "max", "(", "speech_edgewidths", ")", "\n", "\n", "nx", ".", "draw_networkx_edges", "(", "\n", "speech_G_split", ",", "\n", "pos", "=", "pos", ",", "\n", "width", "=", "speech_edgewidths_out", ",", "\n", "edgelist", "=", "[", "\n", "(", "u", ",", "v", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "speech_G_split", ".", "edges", "(", "data", "=", "\"weight\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "if", "u", ".", "endswith", "(", "\"O\"", ")", "\n", "]", ",", "\n", "edge_cmap", "=", "cm", ".", "Reds", ",", "\n", "edge_vmin", "=", "min3", ",", "\n", "edge_vmax", "=", "max3", ",", "\n", "edge_color", "=", "speech_edgewidths_out", ",", "\n", "arrows", "=", "True", ",", "\n", "arrowstyle", "=", "\"wedge\"", ",", "\n", ")", "\n", "nx", ".", "draw_networkx_edges", "(", "\n", "speech_G_split", ",", "\n", "pos", "=", "pos", ",", "\n", "width", "=", "speech_edgewidths_in", ",", "\n", "edgelist", "=", "[", "\n", "(", "u", ",", "v", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "speech_G_split", ".", "edges", "(", "data", "=", "\"weight\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "if", "v", ".", "endswith", "(", "\"I\"", ")", "\n", "]", ",", "\n", "edge_cmap", "=", "cm", ".", "Blues", ",", "\n", "edge_vmin", "=", "min3", ",", "\n", "edge_vmax", "=", "max3", ",", "\n", "edge_color", "=", "speech_edgewidths_in", ",", "\n", "arrows", "=", "True", ",", "\n", "arrowstyle", "=", "\"wedge\"", ",", "\n", ")", "\n", "for", "n", "in", "speech_G_split", ".", "nodes", "(", ")", ":", "\n", "        ", "pos_n", "=", "pos", "[", "n", "]", "\n", "label_n", "=", "bipartite_labels", "[", "n", "]", "\n", "if", "pos_n", "[", "0", "]", "==", "0", ":", "\n", "            ", "ha", "=", "\"right\"", "\n", "fontsize", "=", "font_size", "\n", "", "elif", "pos_n", "[", "0", "]", "==", "2", ":", "\n", "            ", "ha", "=", "\"left\"", "\n", "fontsize", "=", "font_size", "\n", "", "else", ":", "\n", "            ", "ha", "=", "\"center\"", "\n", "fontsize", "=", "font_size", "-", "6", "\n", "", "va", "=", "\"center\"", "\n", "txt", "=", "ax", ".", "annotate", "(", "label_n", ",", "pos_n", ",", "fontsize", "=", "fontsize", ",", "va", "=", "va", ",", "ha", "=", "ha", ")", "\n", "txt", ".", "set_path_effects", "(", "[", "PathEffects", ".", "withStroke", "(", "linewidth", "=", "5", ",", "foreground", "=", "\"w\"", ")", "]", ")", "\n", "", "save_pgf_fig", "(", "\n", "f\"{PAPERGRAPHICS_PATH}/romeo_and_juliet_se-speech_3.pdf\"", ",", "\n", "axis_off", "=", "True", ",", "\n", "tight", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_bipartite.position_bipartite_labels": [[324, 335], ["G.nodes", "ax.annotate", "ax.annotate.set_path_effects", "matplotlib.patheffects.withStroke"], "function", ["None"], ["", "def", "position_bipartite_labels", "(", "G", ",", "pos", ",", "ax", ",", "labels", ",", "fontsize", ")", ":", "\n", "    ", "for", "n", "in", "G", ".", "nodes", "(", ")", ":", "\n", "        ", "pos_n", "=", "pos", "[", "n", "]", "\n", "label_n", "=", "labels", "[", "n", "]", "\n", "if", "pos_n", "[", "0", "]", "==", "0", ":", "\n", "            ", "ha", "=", "\"right\"", "\n", "", "else", ":", "\n", "            ", "ha", "=", "\"left\"", "\n", "", "va", "=", "\"center\"", "\n", "txt", "=", "ax", ".", "annotate", "(", "label_n", ",", "pos_n", ",", "fontsize", "=", "fontsize", ",", "va", "=", "va", ",", "ha", "=", "ha", ")", "\n", "txt", ".", "set_path_effects", "(", "[", "PathEffects", ".", "withStroke", "(", "linewidth", "=", "5", ",", "foreground", "=", "\"w\"", ")", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.plot_romeo_radials_full": [[12, 116], ["hyperbard.graph_io.load_graph", "matplotlib.subplots", "hyperbard.plotting_utils.get_formatted_labels", "networkx.circular_layout", "networkx.draw_networkx_edges", "plot_romeo_radials.position_full_radial_labels", "hyperbard.plotting_utils.save_pgf_fig", "hyperbard.graph_io.load_graph", "matplotlib.subplots", "hyperbard.plotting_utils.get_formatted_labels", "networkx.circular_layout", "min", "max", "networkx.draw_networkx_edges", "plot_romeo_radials.position_full_radial_labels", "hyperbard.plotting_utils.save_pgf_fig", "hyperbard.graph_io.load_graph", "plot_romeo_radials.weighted_multi_to_weighted_simple", "min", "max", "matplotlib.subplots", "hyperbard.plotting_utils.get_formatted_labels", "networkx.circular_layout", "networkx.draw_networkx_edges", "plot_romeo_radials.position_full_radial_labels", "hyperbard.plotting_utils.save_pgf_fig", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "sorted", "sorted", "sorted", "sorted", "hyperbard.graph_io.load_graph.number_of_edges", "hyperbard.graph_io.load_graph.edges", "hyperbard.graph_io.load_graph.edges", "hyperbard.graph_io.load_graph.edges", "hyperbard.graph_io.load_graph.edges", "weighted_multi_to_weighted_simple.edges", "weighted_multi_to_weighted_simple.edges"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.get_formatted_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.position_full_radial_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.get_formatted_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.position_full_radial_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.weighted_multi_to_weighted_simple", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.get_formatted_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.position_full_radial_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig"], ["def", "plot_romeo_radials_full", "(", "selected_labels", ",", "font_size", ",", "height", ")", ":", "\n", "# Radials for the entire play, with all named characters", "\n", "    ", "G1", "=", "load_graph", "(", "\n", "\"romeo-and-juliet\"", ",", "\n", "\"ce-scene-w\"", ",", "\n", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "height", "+", "1", ",", "height", ")", ")", "\n", "\n", "labels", "=", "get_formatted_labels", "(", "G1", ",", "selected_labels", ")", "\n", "pos", "=", "nx", ".", "circular_layout", "(", "G1", ")", "\n", "\n", "nx", ".", "draw_networkx_edges", "(", "\n", "G1", ",", "\n", "pos", "=", "pos", ",", "\n", "ax", "=", "ax", ",", "\n", "edge_cmap", "=", "cm", ".", "Reds", ",", "\n", "edge_vmin", "=", "0", ",", "\n", "edge_vmax", "=", "1", ",", "\n", "edge_color", "=", "[", "0.5", "]", "*", "G1", ".", "number_of_edges", "(", ")", ",", "\n", "node_size", "=", "50", ",", "\n", ")", "\n", "position_full_radial_labels", "(", "G1", ",", "pos", ",", "plt", ".", "gca", "(", ")", ",", "labels", ",", "font_size", ")", "\n", "save_pgf_fig", "(", "\n", "f\"{PAPERGRAPHICS_PATH}/romeo_and_juliet_ce-scene-b.pdf\"", ",", "\n", "axis_off", "=", "True", ",", "\n", "tight", "=", "True", ",", "\n", ")", "\n", "\n", "G2", "=", "load_graph", "(", "\"romeo-and-juliet\"", ",", "\"ce-scene-w\"", ",", "edge_weights", "=", "\"count\"", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "height", "+", "1", ",", "height", ")", ")", "\n", "\n", "labels", "=", "get_formatted_labels", "(", "G2", ",", "selected_labels", ")", "\n", "pos", "=", "nx", ".", "circular_layout", "(", "G2", ")", "\n", "\n", "sorted_edges", "=", "[", "\n", "(", "u", ",", "v", ")", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "G2", ".", "edges", "(", "data", "=", "\"count\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", ")", "\n", "]", "\n", "sorted_counts", "=", "[", "\n", "w", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "G2", ".", "edges", "(", "data", "=", "\"count\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", ")", "\n", "]", "\n", "\n", "vmin", "=", "min", "(", "[", "w", "for", "u", ",", "v", ",", "w", "in", "G2", ".", "edges", "(", "data", "=", "\"count\"", ")", "]", ")", "\n", "vmax", "=", "max", "(", "[", "w", "for", "u", ",", "v", ",", "w", "in", "G2", ".", "edges", "(", "data", "=", "\"count\"", ")", "]", ")", "\n", "\n", "nx", ".", "draw_networkx_edges", "(", "\n", "G2", ",", "\n", "pos", "=", "pos", ",", "\n", "ax", "=", "ax", ",", "\n", "edge_cmap", "=", "cm", ".", "Reds", ",", "\n", "edgelist", "=", "sorted_edges", ",", "\n", "edge_vmin", "=", "vmin", ",", "\n", "edge_vmax", "=", "vmax", ",", "\n", "edge_color", "=", "sorted_counts", ",", "\n", "width", "=", "sorted_counts", ",", "\n", "node_size", "=", "50", ",", "\n", ")", "\n", "position_full_radial_labels", "(", "G2", ",", "pos", ",", "plt", ".", "gca", "(", ")", ",", "labels", ",", "font_size", ")", "\n", "save_pgf_fig", "(", "\n", "f\"{PAPERGRAPHICS_PATH}/romeo_and_juliet_ce-scene-mb.pdf\"", ",", "\n", "axis_off", "=", "True", ",", "\n", "tight", "=", "True", ",", "\n", ")", "\n", "\n", "G3", "=", "load_graph", "(", "\"romeo-and-juliet\"", ",", "\"ce-scene-mw\"", ",", "edge_weights", "=", "\"n_lines\"", ")", "\n", "G3_for_drawing", "=", "weighted_multi_to_weighted_simple", "(", "G3", ",", "\"n_lines\"", ")", "\n", "\n", "sorted_edges", "=", "[", "\n", "(", "u", ",", "v", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "G3_for_drawing", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "]", "\n", "sorted_weights", "=", "[", "\n", "w", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "G3_for_drawing", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "]", "\n", "edge_widths_scene", "=", "[", "w", "/", "150", "for", "w", "in", "sorted_weights", "]", "\n", "vmin", "=", "min", "(", "edge_widths_scene", ")", "\n", "vmax", "=", "max", "(", "edge_widths_scene", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "height", "+", "1", ",", "height", ")", ")", "\n", "labels", "=", "get_formatted_labels", "(", "G3_for_drawing", ",", "selected_labels", ")", "\n", "pos", "=", "nx", ".", "circular_layout", "(", "G3_for_drawing", ")", "\n", "\n", "nx", ".", "draw_networkx_edges", "(", "\n", "G3_for_drawing", ",", "\n", "pos", "=", "pos", ",", "\n", "ax", "=", "ax", ",", "\n", "edgelist", "=", "sorted_edges", ",", "\n", "width", "=", "edge_widths_scene", ",", "\n", "edge_cmap", "=", "cm", ".", "Reds", ",", "\n", "edge_vmin", "=", "vmin", ",", "\n", "edge_vmax", "=", "vmax", ",", "\n", "edge_color", "=", "edge_widths_scene", ",", "\n", ")", "\n", "position_full_radial_labels", "(", "G3_for_drawing", ",", "pos", ",", "plt", ".", "gca", "(", ")", ",", "labels", ",", "font_size", ")", "\n", "save_pgf_fig", "(", "\n", "f\"{PAPERGRAPHICS_PATH}/romeo_and_juliet_ce-scene-mw.pdf\"", ",", "\n", "axis_off", "=", "True", ",", "\n", "tight", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.plot_romeo_radials_partial": [[119, 245], ["hyperbard.graph_io.load_graph", "hyperbard.graph_io.load_graph.edge_subgraph", "plot_romeo_radials.weighted_multi_to_weighted_simple", "matplotlib.subplots", "hyperbard.plotting_utils.get_formatted_labels", "networkx.circular_layout", "networkx.draw_networkx_edges", "plot_romeo_radials.position_partial_radial_labels", "hyperbard.plotting_utils.save_pgf_fig", "hyperbard.graph_io.load_graph", "hyperbard.graph_io.load_graph.edge_subgraph", "plot_romeo_radials.weighted_multi_to_weighted_simple", "matplotlib.subplots", "hyperbard.plotting_utils.get_formatted_labels", "networkx.circular_layout", "networkx.draw_networkx_edges", "plot_romeo_radials.position_partial_radial_labels", "matplotlib.axis", "matplotlib.tight_layout", "hyperbard.plotting_utils.save_pgf_fig", "pandas.DataFrame().set_index", "weighted_multi_to_weighted_simple.edges", "df_diff.query.query", "matplotlib.subplots", "networkx.circular_layout", "networkx.draw_networkx_edges", "plot_romeo_radials.position_partial_radial_labels", "hyperbard.plotting_utils.save_pgf_fig", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "hyperbard.graph_io.load_graph.edges", "sorted", "sorted", "min", "max", "hyperbard.graph_io.load_graph.edges", "sorted", "sorted", "min", "max", "pandas.DataFrame", "weighted_multi_to_weighted_simple.edges", "sorted", "min", "max", "sorted", "weighted_multi_to_weighted_simple.edges", "weighted_multi_to_weighted_simple.edges", "weighted_multi_to_weighted_simple.edges", "weighted_multi_to_weighted_simple.edges", "sorted", "df_diff.query.sort_values", "weighted_multi_to_weighted_simple.edges"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.weighted_multi_to_weighted_simple", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.get_formatted_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.position_partial_radial_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_io.load_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.weighted_multi_to_weighted_simple", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.get_formatted_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.position_partial_radial_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.position_partial_radial_labels", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig"], ["", "def", "plot_romeo_radials_partial", "(", "selected_labels", ",", "font_size", ",", "height", ")", ":", "\n", "# Radials for Act III only, with all named characters occurring in that act", "\n", "    ", "G3", "=", "load_graph", "(", "\"romeo-and-juliet\"", ",", "\"ce-scene-mw\"", ",", "edge_weights", "=", "\"n_lines\"", ")", "\n", "act_three_edges", "=", "[", "\n", "(", "u", ",", "v", ",", "k", ")", "for", "u", ",", "v", ",", "k", ",", "d", "in", "G3", ".", "edges", "(", "keys", "=", "True", ",", "data", "=", "True", ")", "if", "d", "[", "\"act\"", "]", "==", "3", "\n", "]", "\n", "G3_subgraph", "=", "G3", ".", "edge_subgraph", "(", "act_three_edges", ")", "\n", "G3_subgraph_for_drawing", "=", "weighted_multi_to_weighted_simple", "(", "G3_subgraph", ",", "\"n_lines\"", ")", "\n", "sorted_edges", "=", "[", "\n", "(", "u", ",", "v", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "G3_subgraph_for_drawing", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "]", "\n", "sorted_weights", "=", "[", "\n", "w", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "G3_subgraph_for_drawing", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "]", "\n", "edge_widths_scene", "=", "[", "w", "/", "50", "for", "w", "in", "sorted_weights", "]", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "height", "+", "1", ",", "height", ")", ")", "\n", "labels", "=", "get_formatted_labels", "(", "G3_subgraph_for_drawing", ",", "selected_labels", ")", "\n", "pos", "=", "nx", ".", "circular_layout", "(", "G3_subgraph_for_drawing", ")", "\n", "\n", "nx", ".", "draw_networkx_edges", "(", "\n", "G3_subgraph_for_drawing", ",", "\n", "pos", "=", "pos", ",", "\n", "ax", "=", "ax", ",", "\n", "edgelist", "=", "sorted_edges", ",", "\n", "width", "=", "edge_widths_scene", ",", "\n", "edge_cmap", "=", "cm", ".", "Reds", ",", "\n", "edge_vmin", "=", "min", "(", "edge_widths_scene", ")", ",", "\n", "edge_vmax", "=", "max", "(", "edge_widths_scene", ")", ",", "\n", "edge_color", "=", "edge_widths_scene", ",", "\n", ")", "\n", "position_partial_radial_labels", "(", "\n", "G3_subgraph_for_drawing", ",", "pos", ",", "plt", ".", "gca", "(", ")", ",", "labels", ",", "font_size", "\n", ")", "\n", "save_pgf_fig", "(", "\n", "f\"{PAPERGRAPHICS_PATH}/romeo_and_juliet_ce-scene-mw-3.pdf\"", ",", "\n", "axis_off", "=", "True", ",", "\n", "tight", "=", "True", ",", "\n", ")", "\n", "\n", "G4", "=", "load_graph", "(", "\"romeo-and-juliet\"", ",", "\"ce-group-mw\"", ",", "edge_weights", "=", "\"n_lines\"", ")", "\n", "act_three_edges_group", "=", "[", "\n", "(", "u", ",", "v", ",", "k", ")", "for", "u", ",", "v", ",", "k", ",", "d", "in", "G4", ".", "edges", "(", "keys", "=", "True", ",", "data", "=", "True", ")", "if", "d", "[", "\"act\"", "]", "==", "3", "\n", "]", "\n", "G4_subgraph", "=", "G4", ".", "edge_subgraph", "(", "act_three_edges_group", ")", "\n", "G4_subgraph_for_drawing", "=", "weighted_multi_to_weighted_simple", "(", "G4_subgraph", ",", "\"n_lines\"", ")", "\n", "sorted_edges_G4", "=", "[", "\n", "(", "u", ",", "v", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "G4_subgraph_for_drawing", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "]", "\n", "sorted_weights_G4", "=", "[", "\n", "w", "\n", "for", "u", ",", "v", ",", "w", "in", "sorted", "(", "\n", "G4_subgraph_for_drawing", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "-", "1", "]", "\n", ")", "\n", "]", "\n", "edge_widths_G4", "=", "[", "w", "/", "50", "for", "w", "in", "sorted_weights_G4", "]", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "height", "+", "1", ",", "height", ")", ")", "\n", "labels", "=", "get_formatted_labels", "(", "G4_subgraph_for_drawing", ",", "selected_labels", ")", "\n", "pos", "=", "nx", ".", "circular_layout", "(", "G4_subgraph_for_drawing", ")", "\n", "\n", "nx", ".", "draw_networkx_edges", "(", "\n", "G4_subgraph_for_drawing", ",", "\n", "pos", "=", "pos", ",", "\n", "ax", "=", "ax", ",", "\n", "edgelist", "=", "sorted_edges_G4", ",", "\n", "width", "=", "edge_widths_G4", ",", "\n", "edge_cmap", "=", "cm", ".", "Reds", ",", "\n", "edge_vmin", "=", "min", "(", "edge_widths_G4", ")", ",", "\n", "edge_vmax", "=", "max", "(", "edge_widths_G4", ")", ",", "\n", "edge_color", "=", "edge_widths_G4", ",", "\n", ")", "\n", "position_partial_radial_labels", "(", "\n", "G4_subgraph_for_drawing", ",", "pos", ",", "plt", ".", "gca", "(", ")", ",", "labels", ",", "font_size", "\n", ")", "\n", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "save_pgf_fig", "(", "f\"{PAPERGRAPHICS_PATH}/romeo_and_juliet_ce-group-mw-3.pdf\"", ")", "\n", "\n", "df_diff", "=", "pd", ".", "DataFrame", "(", "\n", "sorted", "(", "G3_subgraph_for_drawing", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ")", ",", "\n", "columns", "=", "[", "\"node1\"", ",", "\"node2\"", ",", "\"n_lines_scene\"", "]", ",", "\n", ")", ".", "set_index", "(", "[", "\"node1\"", ",", "\"node2\"", "]", ")", "\n", "df_diff", "[", "\"n_lines_group\"", "]", "=", "0", "\n", "for", "n1", ",", "n2", ",", "w", "in", "G4_subgraph_for_drawing", ".", "edges", "(", "data", "=", "\"n_lines\"", ")", ":", "\n", "        ", "df_diff", ".", "at", "[", "(", "n1", ",", "n2", ")", ",", "\"n_lines_group\"", "]", "=", "w", "\n", "", "df_diff", "[", "\"n_lines_difference\"", "]", "=", "df_diff", ".", "n_lines_scene", "-", "df_diff", ".", "n_lines_group", "\n", "df_diff", "=", "df_diff", ".", "query", "(", "\"n_lines_difference != 0\"", ")", "\n", "edge_widths_difference", "=", "[", "\n", "df_diff", ".", "at", "[", "(", "u", ",", "v", ")", ",", "\"n_lines_difference\"", "]", "/", "50", "\n", "for", "u", ",", "v", "in", "G3_subgraph_for_drawing", ".", "edges", "(", ")", "\n", "if", "(", "u", ",", "v", ")", "in", "df_diff", ".", "index", "\n", "]", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "height", "+", "1", ",", "height", ")", ")", "\n", "pos", "=", "nx", ".", "circular_layout", "(", "G3_subgraph_for_drawing", ")", "\n", "nx", ".", "draw_networkx_edges", "(", "\n", "G3_subgraph_for_drawing", ",", "\n", "pos", "=", "pos", ",", "\n", "ax", "=", "ax", ",", "\n", "edgelist", "=", "df_diff", ".", "sort_values", "(", "\"n_lines_difference\"", ",", "ascending", "=", "True", ")", ".", "index", ",", "\n", "width", "=", "sorted", "(", "edge_widths_difference", ")", ",", "\n", "edge_cmap", "=", "cm", ".", "Blues", ",", "\n", "edge_vmin", "=", "min", "(", "edge_widths_difference", ")", ",", "\n", "edge_vmax", "=", "max", "(", "edge_widths_difference", ")", ",", "\n", "edge_color", "=", "sorted", "(", "edge_widths_difference", ")", ",", "\n", ")", "\n", "\n", "position_partial_radial_labels", "(", "\n", "G3_subgraph_for_drawing", ",", "pos", ",", "plt", ".", "gca", "(", ")", ",", "labels", ",", "font_size", "\n", ")", "\n", "\n", "save_pgf_fig", "(", "\n", "f\"{PAPERGRAPHICS_PATH}/romeo_and_juliet_ce-3-differences.pdf\"", ",", "\n", "axis_off", "=", "True", ",", "\n", "tight", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.weighted_multi_to_weighted_simple": [[248, 258], ["G.edges", "list", "networkx.Graph", "nx.Graph.add_nodes_from", "nx.Graph.add_edges_from", "networkx.set_edge_attributes", "G.nodes", "G.edges", "G.edges"], "function", ["None"], ["", "def", "weighted_multi_to_weighted_simple", "(", "G", ",", "weight_name", ")", ":", "\n", "    ", "new_edges", "=", "{", "(", "u", ",", "v", ")", ":", "0", "for", "u", ",", "v", "in", "G", ".", "edges", "(", ")", "}", "\n", "for", "u", ",", "v", ",", "k", ",", "w", "in", "G", ".", "edges", "(", "data", "=", "weight_name", ",", "keys", "=", "True", ")", ":", "\n", "        ", "new_edges", "[", "(", "u", ",", "v", ")", "]", "+=", "w", "\n", "", "new_nodes", "=", "list", "(", "G", ".", "nodes", "(", ")", ")", "\n", "G_new", "=", "nx", ".", "Graph", "(", ")", "\n", "G_new", ".", "add_nodes_from", "(", "new_nodes", ")", "\n", "G_new", ".", "add_edges_from", "(", "G", ".", "edges", "(", ")", ")", "\n", "nx", ".", "set_edge_attributes", "(", "G_new", ",", "new_edges", ",", "weight_name", ")", "\n", "return", "G_new", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.position_full_radial_labels": [[260, 274], ["G.nodes", "ax.annotate", "ax.annotate.set_path_effects", "matplotlib.patheffects.withStroke"], "function", ["None"], ["", "def", "position_full_radial_labels", "(", "G", ",", "pos", ",", "ax", ",", "labels", ",", "fontsize", ")", ":", "\n", "    ", "for", "n", "in", "G", ".", "nodes", "(", ")", ":", "\n", "        ", "pos_n", "=", "pos", "[", "n", "]", "\n", "label_n", "=", "labels", "[", "n", "]", "\n", "if", "label_n", "in", "[", "\"FriarLawrence\"", "]", ":", "\n", "            ", "pos_n", "[", "-", "1", "]", "+=", "0.125", "\n", "", "if", "label_n", "in", "[", "\"FriarJohn\"", "]", ":", "\n", "            ", "pos_n", "[", "-", "1", "]", "+=", "0.035", "\n", "", "if", "label_n", "in", "[", "\"Gregory\"", "]", ":", "\n", "            ", "pos_n", "[", "-", "1", "]", "-=", "0.075", "\n", "", "ha", "=", "\"center\"", "\n", "va", "=", "\"center\"", "\n", "txt", "=", "ax", ".", "annotate", "(", "labels", "[", "n", "]", ",", "pos_n", ",", "fontsize", "=", "fontsize", ",", "va", "=", "va", ",", "ha", "=", "ha", ")", "\n", "txt", ".", "set_path_effects", "(", "[", "PathEffects", ".", "withStroke", "(", "linewidth", "=", "5", ",", "foreground", "=", "\"w\"", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_romeo_radials.position_partial_radial_labels": [[276, 290], ["G.nodes", "ax.annotate", "ax.annotate.set_path_effects", "matplotlib.patheffects.withStroke"], "function", ["None"], ["", "", "def", "position_partial_radial_labels", "(", "G", ",", "pos", ",", "ax", ",", "labels", ",", "fontsize", ")", ":", "\n", "    ", "for", "n", "in", "G", ".", "nodes", "(", ")", ":", "\n", "        ", "pos_n", "=", "pos", "[", "n", "]", "\n", "label_n", "=", "labels", "[", "n", "]", "\n", "if", "label_n", "in", "[", "\"\\\\textbf{LadyCapulet}\"", "]", ":", "\n", "            ", "pos_n", "[", "0", "]", "-=", "0.2", "\n", "", "if", "label_n", "in", "[", "\"Petrucio\"", "]", ":", "\n", "            ", "pos_n", "[", "0", "]", "-=", "0.1", "\n", "", "if", "label_n", "in", "[", "\"PrinceEscalus\"", "]", ":", "\n", "            ", "pos_n", "[", "0", "]", "+=", "0.2", "\n", "", "ha", "=", "\"center\"", "\n", "va", "=", "\"center\"", "\n", "txt", "=", "ax", ".", "annotate", "(", "labels", "[", "n", "]", ",", "pos_n", ",", "fontsize", "=", "fontsize", ",", "va", "=", "va", ",", "ha", "=", "ha", ")", "\n", "txt", ".", "set_path_effects", "(", "[", "PathEffects", ".", "withStroke", "(", "linewidth", "=", "5", ",", "foreground", "=", "\"w\"", ")", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_rank_correlations.get_correlation_dfs": [[14, 22], ["dict", "dict", "pandas.read_csv", "dfs[].corr", "[].split", "file.split"], "function", ["None"], ["def", "get_correlation_dfs", "(", "ranking_files", ")", ":", "\n", "    ", "dfs", "=", "dict", "(", ")", "\n", "corrs", "=", "dict", "(", ")", "\n", "for", "file", "in", "ranking_files", ":", "\n", "        ", "filename", "=", "file", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "dfs", "[", "filename", "]", "=", "pd", ".", "read_csv", "(", "file", ",", "index_col", "=", "0", ")", "\n", "corrs", "[", "filename", "]", "=", "dfs", "[", "filename", "]", ".", "corr", "(", ")", "\n", "", "return", "corrs", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_rank_correlations.get_average_correlation": [[24, 26], ["sum", "len", "corrs.values"], "function", ["None"], ["", "def", "get_average_correlation", "(", "corrs", ")", ":", "\n", "    ", "return", "sum", "(", "corrs", ".", "values", "(", ")", ")", "/", "len", "(", "corrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_rank_correlations.get_asymmetric_correlation_difference": [[28, 30], ["None"], "function", ["None"], ["", "def", "get_asymmetric_correlation_difference", "(", "first_corr_df", ",", "second_corr_df", ")", ":", "\n", "    ", "return", "first_corr_df", "-", "second_corr_df", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_rank_correlations.plot_correlation_difference_matrix": [[32, 86], ["matplotlib.subplots", "mpl_toolkits.axes_grid1.inset_locator.inset_axes", "mpl_toolkits.axes_grid1.inset_locator.inset_axes", "seaborn.heatmap", "seaborn.heatmap", "sns.heatmap.get_xaxis().set_tick_params", "mpl_toolkits.axes_grid1.inset_locator.inset_axes.get_xaxis().set_ticks", "mpl_toolkits.axes_grid1.inset_locator.inset_axes.get_xaxis().set_ticks", "mpl_toolkits.axes_grid1.inset_locator.inset_axes.set_xlim", "mpl_toolkits.axes_grid1.inset_locator.inset_axes.set_xlim", "matplotlib.subplots_adjust", "matplotlib.savefig", "numpy.arange", "numpy.arange", "selected_correlation.min().min", "selected_correlation.max().max", "numpy.triu", "dict", "numpy.tril", "dict", "sns.heatmap.get_xaxis", "mpl_toolkits.axes_grid1.inset_locator.inset_axes.get_xaxis", "mpl_toolkits.axes_grid1.inset_locator.inset_axes.get_xaxis", "selected_correlation.min", "selected_correlation.max"], "function", ["None"], ["", "def", "plot_correlation_difference_matrix", "(", "\n", "selected_correlation", ",", "difference_correlation", ",", "selected_name", "\n", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "14", ",", "12", ")", ")", "\n", "cax", "=", "inset_axes", "(", "\n", "ax", ",", "\n", "width", "=", "\"40%\"", ",", "\n", "height", "=", "\"10%\"", ",", "\n", "loc", "=", "\"lower left\"", ",", "\n", "bbox_to_anchor", "=", "(", "0", ",", "1.1", ",", "1", ",", "1", ")", ",", "\n", "bbox_transform", "=", "ax", ".", "transAxes", ",", "\n", "borderpad", "=", "0", ",", "\n", ")", "\n", "cax2", "=", "inset_axes", "(", "\n", "ax", ",", "\n", "width", "=", "\"40%\"", ",", "\n", "height", "=", "\"10%\"", ",", "\n", "loc", "=", "\"lower right\"", ",", "\n", "bbox_to_anchor", "=", "(", "0", ",", "1.1", ",", "1", ",", "1", ")", ",", "\n", "bbox_transform", "=", "ax", ".", "transAxes", ",", "\n", "borderpad", "=", "0", ",", "\n", ")", "\n", "sns", ".", "heatmap", "(", "\n", "selected_correlation", ",", "\n", "square", "=", "True", ",", "\n", "cmap", "=", "\"Greys\"", ",", "\n", "mask", "=", "np", ".", "triu", "(", "selected_correlation", ",", "k", "=", "0", ")", ",", "\n", "ax", "=", "ax", ",", "\n", "cbar_ax", "=", "cax", ",", "\n", "cbar_kws", "=", "dict", "(", "orientation", "=", "\"horizontal\"", ")", ",", "\n", ")", "\n", "g", "=", "sns", ".", "heatmap", "(", "\n", "difference_correlation", ",", "\n", "square", "=", "True", ",", "\n", "cmap", "=", "\"RdBu_r\"", ",", "\n", "vmin", "=", "-", "0.15", ",", "\n", "vmax", "=", "0.15", ",", "\n", "mask", "=", "np", ".", "tril", "(", "difference_correlation", ",", "k", "=", "0", ")", ",", "\n", "ax", "=", "ax", ",", "\n", "cbar_ax", "=", "cax2", ",", "\n", "cbar_kws", "=", "dict", "(", "orientation", "=", "\"horizontal\"", ")", ",", "\n", "xticklabels", "=", "3", ",", "\n", ")", "\n", "g", ".", "get_xaxis", "(", ")", ".", "set_tick_params", "(", "rotation", "=", "0", ")", "\n", "cax2", ".", "get_xaxis", "(", ")", ".", "set_ticks", "(", "np", ".", "arange", "(", "-", "0.15", ",", "0.16", ",", "0.1", ")", ")", "\n", "cax", ".", "get_xaxis", "(", ")", ".", "set_ticks", "(", "np", ".", "arange", "(", "0.7", ",", "1.01", ",", "0.1", ")", ")", "\n", "cax", ".", "set_xlim", "(", "selected_correlation", ".", "min", "(", ")", ".", "min", "(", ")", ",", "selected_correlation", ".", "max", "(", ")", ".", "max", "(", ")", ")", "\n", "cax2", ".", "set_xlim", "(", "-", "0.15", ",", "0.15", ")", "\n", "plt", ".", "subplots_adjust", "(", "top", "=", "0.8", ")", "\n", "# pgf backend fails to plot second colorbar ticks - no idea why", "\n", "plt", ".", "savefig", "(", "\n", "f\"{PAPERGRAPHICS_PATH}/{selected_name}_rank-correlations.pdf\"", ",", "\n", "transparent", "=", "True", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_rank_correlations.plot_rank_correlations": [[89, 100], ["sorted", "plot_rank_correlations.get_correlation_dfs", "plot_rank_correlations.get_average_correlation", "plot_rank_correlations.get_asymmetric_correlation_difference", "plot_rank_correlations.plot_correlation_difference_matrix", "glob.glob"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_rank_correlations.get_correlation_dfs", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_rank_correlations.get_average_correlation", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_rank_correlations.get_asymmetric_correlation_difference", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plot_rank_correlations.plot_correlation_difference_matrix"], ["", "@", "timeit", "\n", "def", "plot_rank_correlations", "(", ")", ":", "\n", "    ", "ranking_files", "=", "sorted", "(", "glob", "(", "f\"{RANKINGDATA_PATH}/**_ranking.csv\"", ")", ")", "\n", "corrs", "=", "get_correlation_dfs", "(", "ranking_files", ")", "\n", "average_correlation", "=", "get_average_correlation", "(", "corrs", ")", "\n", "randj_correlation", "=", "corrs", "[", "\"romeo-and-juliet\"", "]", "\n", "diff_correlation", "=", "get_asymmetric_correlation_difference", "(", "\n", "randj_correlation", ",", "average_correlation", "\n", ")", "\n", "plot_correlation_difference_matrix", "(", "\n", "randj_correlation", ",", "diff_correlation", ",", "\"romeo-and-juliet\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.set_rcParams": [[7, 14], ["None"], "function", ["None"], ["def", "set_rcParams", "(", "fontsize", "=", "None", ")", ":", "\n", "    ", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"serif\"", "\n", "plt", ".", "rcParams", "[", "\"font.serif\"", "]", "=", "\"Palatino\"", "\n", "plt", ".", "rcParams", "[", "\"text.usetex\"", "]", "=", "True", "\n", "plt", ".", "rcParams", "[", "\"pdf.fonttype\"", "]", "=", "42", "\n", "if", "fontsize", "is", "not", "None", ":", "\n", "        ", "plt", ".", "rcParams", "[", "\"font.size\"", "]", "=", "fontsize", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.save_pgf_fig": [[16, 28], ["matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.axis", "matplotlib.pyplot.tight_layout"], "function", ["None"], ["", "", "def", "save_pgf_fig", "(", "path", ",", "axis_off", "=", "False", ",", "tight", "=", "False", ")", ":", "\n", "    ", "if", "axis_off", ":", "\n", "        ", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "", "if", "tight", ":", "\n", "        ", "plt", ".", "tight_layout", "(", ")", "\n", "", "plt", ".", "savefig", "(", "\n", "path", ",", "\n", "backend", "=", "\"pgf\"", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", "transparent", "=", "True", ",", "\n", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.get_character_color": [[30, 44], ["matplotlib.cm.tab10", "matplotlib.cm.tab10", "matplotlib.cm.tab10", "matplotlib.cm.tab10", "matplotlib.cm.tab10"], "function", ["None"], ["", "def", "get_character_color", "(", "k", ")", ":", "\n", "    ", "if", "k", "==", "\"Romeo\"", ":", "\n", "        ", "color", "=", "cm", ".", "tab10", "(", "1", ")", "\n", "", "elif", "k", "==", "\"Juliet\"", ":", "\n", "        ", "color", "=", "cm", ".", "tab10", "(", "3", ")", "\n", "", "elif", "k", "==", "\"Nurse\"", ":", "\n", "        ", "color", "=", "cm", ".", "tab10", "(", "2", ")", "\n", "", "elif", "k", "==", "\"Capulet\"", ":", "\n", "        ", "color", "=", "cm", ".", "tab10", "(", "0", ")", "\n", "", "elif", "k", "==", "\"LadyCapulet\"", ":", "\n", "        ", "color", "=", "cm", ".", "tab10", "(", "4", ")", "\n", "", "else", ":", "\n", "        ", "color", "=", "\"k\"", "\n", "", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.plotting_utils.get_formatted_labels": [[46, 52], ["hyperbard.utils.remove_uppercase_prefixes", "G.nodes", "hyperbard.utils.remove_uppercase_prefixes"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes"], ["", "def", "get_formatted_labels", "(", "G", ",", "selected_labels", ")", ":", "\n", "    ", "return", "{", "\n", "n", ":", "remove_uppercase_prefixes", "(", "n", ")", "\n", "if", "n", "not", "in", "selected_labels", "\n", "else", "r\"\\textbf{\"", "+", "remove_uppercase_prefixes", "(", "n", ")", "+", "\"}\"", "\n", "for", "n", "in", "G", ".", "nodes", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.character_string_to_sorted_list": [[8, 17], ["sorted", "set", "regex.split"], "function", ["None"], ["def", "character_string_to_sorted_list", "(", "character_string", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Given a string of character identifiers of shape \"id1 id2  id3 ... id1 idn\",\n    return a sorted, deduplicated list of these identifiers.\n\n    :param character_string: String of character identifiers separated by whitespace\n    :return: Sorted list of unique character identifiers\n    \"\"\"", "\n", "return", "sorted", "(", "set", "(", "re", ".", "split", "(", "r\"\\s+\"", ",", "character_string", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_name_from_identifier": [[19, 28], ["utils.remove_play_abbreviation", "utils.remove_hashtag"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_play_abbreviation", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_hashtag"], ["", "def", "get_name_from_identifier", "(", "character_identifier", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Given a character identifier of shape \"#CharacterName_PlayAbbreviation\",\n    extract CharacterName.\n\n    :param character_identifier: Character identifier of shape \"#CharacterName_PlayAbbreviation\"\n    :return: Character name\n    \"\"\"", "\n", "return", "remove_play_abbreviation", "(", "remove_hashtag", "(", "character_identifier", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_hashtag": [[30, 32], ["regex.sub"], "function", ["None"], ["", "def", "remove_hashtag", "(", "identifier", ":", "str", ")", "->", "str", ":", "\n", "    ", "return", "re", ".", "sub", "(", "\"^#\"", ",", "\"\"", ",", "identifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_play_abbreviation": [[34, 36], ["regex.sub"], "function", ["None"], ["", "def", "remove_play_abbreviation", "(", "identifier", ":", "str", ")", "->", "str", ":", "\n", "    ", "return", "re", ".", "sub", "(", "\"_.*?$\"", ",", "\"\"", ",", "identifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes": [[38, 47], ["utils.get_name_from_identifier", "get_name_from_identifier.split", "last_part.isupper", "last_part.isnumeric"], "function", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_name_from_identifier"], ["", "def", "remove_uppercase_prefixes", "(", "identifier", ":", "str", ")", "->", "str", ":", "\n", "    ", "identifier", "=", "get_name_from_identifier", "(", "identifier", ")", "\n", "split_identifier", "=", "identifier", ".", "split", "(", "\".\"", ")", "\n", "last_part", "=", "split_identifier", "[", "-", "1", "]", "\n", "if", "not", "last_part", ".", "isupper", "(", ")", "and", "not", "last_part", ".", "isnumeric", "(", ")", ":", "\n", "        ", "new_identifier", "=", "last_part", "\n", "", "else", ":", "\n", "        ", "new_identifier", "=", "identifier", "\n", "", "return", "new_identifier", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.sort_join_strings": [[49, 57], ["sorted"], "function", ["None"], ["", "def", "sort_join_strings", "(", "string_iterable", ":", "Iterable", "[", "str", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Sort and concatenate an iterable of strings, joining on a whitespace character.\n\n    :param string_iterable: Iterable of strings (e.g., a list or a set)\n    :return: String with the entries in the iterable sorted and concatenated with a whitespace as the join character\n    \"\"\"", "\n", "return", "\" \"", ".", "join", "(", "sorted", "(", "string_iterable", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_filename_base": [[59, 73], ["os.path.splitext", "filename_base.split", "os.path.split"], "function", ["None"], ["", "def", "get_filename_base", "(", "file", ":", "str", ",", "full", ":", "bool", "=", "True", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Given a file name of shape \"path/to/PlayName_XMLFlavor_Source.ext\",\n    extract PlayName (if not full) or PlayName_XMLFlavor (if full).\n\n    :param file: Path of shape \"path/to/PlayName_XMLFlavor_Source.ext\"\n    :param full: Return \"_XMLFlavor_Source\" as part of the file name\n    :return: String of shape \"PlayName(_XMLFlavor_Source)\"\n    \"\"\"", "\n", "filename_base", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "file", ")", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "if", "full", ":", "\n", "        ", "return", "filename_base", "\n", "", "else", ":", "\n", "        ", "return", "filename_base", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.string_to_set": [[75, 87], ["set", "pandas.isna", "regex.split"], "function", ["None"], ["", "", "def", "string_to_set", "(", "character_string", ":", "Union", "[", "str", ",", "float", "]", ")", "->", "Union", "[", "set", ",", "float", "]", ":", "\n", "    ", "\"\"\"\n    Given a string of character identifiers of shape \"id1 id2  id3 ... id1 idn\",\n    or nan, return a set of the identifiers or nan.\n\n    :param character_string: string of character identifiers of shape \"id1 id2  id3 ... id1 idn\" or nan\n    :return: set of identifiers or nan\n    \"\"\"", "\n", "return", "(", "\n", "set", "(", "re", ".", "split", "(", "r\"\\s+\"", ",", "character_string", ")", ")", "\n", "if", "not", "pd", ".", "isna", "(", "character_string", ")", "\n", "else", "character_string", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_get_agg_xml_df": [[39, 50], ["hyperbard.preprocessing.get_raw_xml_df", "hyperbard.preprocessing.get_agg_xml_df", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_raw_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_agg_xml_df"], ["    ", "def", "test_get_agg_xml_df", "(", "self", ")", ":", "\n", "        ", "df", "=", "get_raw_xml_df", "(", "self", ".", "toy_xml_file", ")", "\n", "agg_df", "=", "get_agg_xml_df", "(", "df", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "agg_df", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "0", ",", "\"setting\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "0", ",", "\"n_tokens\"", "]", ",", "14", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "1", ",", "\"n_tokens\"", "]", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "0", ",", "\"n_lines\"", "]", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "1", ",", "\"n_lines\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "0", ",", "\"stagegroup\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "1", ",", "\"stagegroup\"", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_get_aggregated": [[51, 64], ["hyperbard.preprocessing.get_raw_xml_df", "hyperbard.preprocessing.get_aggregated", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_raw_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_aggregated"], ["", "def", "test_get_aggregated", "(", "self", ")", ":", "\n", "        ", "raw_df", "=", "get_raw_xml_df", "(", "self", ".", "toy_xml_file", ")", "\n", "agg_df", "=", "get_aggregated", "(", "raw_df", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "0", ",", "\"n\"", "]", ",", "\"1.1.1\"", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "1", ",", "\"n\"", "]", ",", "\"1.1.2\"", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "2", ",", "\"n\"", "]", ",", "\"1.1.12\"", ")", "\n", "self", ".", "assertEqual", "(", "\n", "agg_df", ".", "at", "[", "0", ",", "\"onstage\"", "]", ",", "\n", "\"#ATTENDANTS_MND #Hippolyta_MND #Philostrate_MND #Theseus_MND\"", ",", "\n", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "0", ",", "\"speaker\"", "]", ",", "\"#Theseus_MND\"", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "0", ",", "\"n_tokens\"", "]", ",", "6", ")", "\n", "self", ".", "assertEqual", "(", "agg_df", ".", "at", "[", "0", ",", "\"xml:id\"", "]", ",", "\"fs-mnd-0000250\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_get_body": [[65, 68], ["test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "[].get_text", "hyperbard.preprocessing.get_body", "hyperbard.preprocessing.get_body().find_all", "hyperbard.preprocessing.get_body"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body"], ["", "def", "test_get_body", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "get_body", "(", "self", ".", "soup", ")", ".", "parent", ".", "name", ",", "\"text\"", ")", "\n", "self", ".", "assertEqual", "(", "get_body", "(", "self", ".", "soup", ")", ".", "find_all", "(", "\"w\"", ")", "[", "0", "]", ".", "get_text", "(", ")", ",", "\"ACT\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_get_attrs": [[69, 80], ["test_preprocessing.PreprocessingTest.soup.find", "test_preprocessing.PreprocessingTest.assertTrue", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.soup.find", "test_preprocessing.PreprocessingTest.assertEqual", "math.isnan", "hyperbard.preprocessing.get_attrs", "hyperbard.preprocessing.get_attrs", "hyperbard.preprocessing.get_attrs().items", "hyperbard.preprocessing.get_attrs"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_attrs", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_attrs", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_attrs"], ["", "def", "test_get_attrs", "(", "self", ")", ":", "\n", "        ", "elem_notext", "=", "self", ".", "soup", ".", "find", "(", "\"div\"", ")", "\n", "self", ".", "assertTrue", "(", "math", ".", "isnan", "(", "get_attrs", "(", "elem_notext", ")", "[", "\"text\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "get_attrs", "(", "elem_notext", ")", ".", "items", "(", ")", "if", "k", "!=", "\"text\"", "}", ",", "\n", "{", "\"tag\"", ":", "\"div\"", ",", "\"type\"", ":", "\"act\"", ",", "\"n\"", ":", "\"1\"", "}", ",", "\n", ")", "\n", "elem_text", "=", "self", ".", "soup", ".", "find", "(", "\"w\"", ")", "\n", "self", ".", "assertEqual", "(", "\n", "get_attrs", "(", "elem_text", ")", ",", "\n", "{", "\"tag\"", ":", "\"w\"", ",", "\"xml:id\"", ":", "\"fs-mnd-0000010\"", ",", "\"text\"", ":", "\"ACT\"", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_get_descendants_ids": [[82, 97], ["test_preprocessing.PreprocessingTest.assertListEqual", "hyperbard.preprocessing.get_descendants_ids", "test_preprocessing.PreprocessingTest.soup.find"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_descendants_ids"], ["", "def", "test_get_descendants_ids", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertListEqual", "(", "\n", "get_descendants_ids", "(", "self", ".", "soup", ".", "find", "(", "\"stage\"", ")", ")", ",", "\n", "[", "\n", "\"fs-mnd-0000070\"", ",", "\n", "\"fs-mnd-0000090\"", ",", "\n", "\"fs-mnd-0000100\"", ",", "\n", "\"fs-mnd-0000120\"", ",", "\n", "\"fs-mnd-0000130\"", ",", "\n", "\"fs-mnd-0000150\"", ",", "\n", "\"fs-mnd-0000170\"", ",", "\n", "\"fs-mnd-0000180\"", ",", "\n", "\"fs-mnd-0000200\"", ",", "\n", "\"fs-mnd-0000220\"", ",", "\n", "\"fs-mnd-0000230\"", ",", "\n", "]", ",", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_get_grouped_df": [[100, 113], ["hyperbard.preprocessing.get_raw_xml_df", "hyperbard.preprocessing.get_aggregated", "hyperbard.preprocessing.set_setting", "hyperbard.preprocessing.get_grouped_df", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_raw_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_aggregated", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_setting", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_grouped_df"], ["", "def", "test_get_grouped_df", "(", "self", ")", ":", "\n", "        ", "df", "=", "get_raw_xml_df", "(", "self", ".", "toy_xml_file", ")", "\n", "aggregated", "=", "get_aggregated", "(", "df", ")", "\n", "set_setting", "(", "aggregated", ")", "\n", "grouped", "=", "get_grouped_df", "(", "aggregated", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "grouped", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "grouped", ".", "at", "[", "0", ",", "\"setting\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "grouped", ".", "at", "[", "0", ",", "\"n_tokens\"", "]", ",", "14", ")", "\n", "self", ".", "assertEqual", "(", "grouped", ".", "at", "[", "1", ",", "\"n_tokens\"", "]", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "grouped", ".", "at", "[", "0", ",", "\"n_lines\"", "]", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "grouped", ".", "at", "[", "1", ",", "\"n_lines\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "grouped", ".", "at", "[", "0", ",", "\"stagegroup\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "grouped", ".", "at", "[", "1", ",", "\"stagegroup\"", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_get_soup": [[114, 118], ["test_preprocessing.PreprocessingTest.assertTrue", "test_preprocessing.PreprocessingTest.assertEqual", "bool", "[].get_text", "hyperbard.preprocessing.get_soup", "hyperbard.preprocessing.get_soup().find_all", "hyperbard.preprocessing.get_soup"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_soup", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_soup"], ["", "def", "test_get_soup", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "bool", "(", "get_soup", "(", "self", ".", "toy_xml_file", ")", ".", "text", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "get_soup", "(", "self", ".", "toy_xml_file", ")", ".", "find_all", "(", "\"w\"", ")", "[", "-", "1", "]", ".", "get_text", "(", ")", ",", "\"Demetrius\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_get_who_attributes": [[120, 123], ["test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertTrue", "hyperbard.preprocessing.get_who_attributes", "math.isnan", "test_preprocessing.PreprocessingTest.soup.find", "hyperbard.preprocessing.get_who_attributes", "test_preprocessing.PreprocessingTest.soup.find"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_who_attributes", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_who_attributes"], ["", "def", "test_get_who_attributes", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "get_who_attributes", "(", "self", ".", "soup", ".", "find", "(", "\"sp\"", ")", ")", ",", "\"#Theseus_MND\"", ")", "\n", "self", ".", "assertTrue", "(", "math", ".", "isnan", "(", "get_who_attributes", "(", "self", ".", "soup", ".", "find", "(", "\"w\"", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_get_cast_df": [[124, 129], ["hyperbard.preprocessing.get_cast_df", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_cast_df"], ["", "def", "test_get_cast_df", "(", "self", ")", ":", "\n", "        ", "cast_df", "=", "get_cast_df", "(", "self", ".", "toy_cast_file", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "cast_df", ")", ",", "11", ")", "\n", "self", ".", "assertEqual", "(", "cast_df", ".", "at", "[", "0", ",", "\"xml:id\"", "]", ",", "\"ATTENDANTS.0.1_MND\"", ")", "\n", "self", ".", "assertEqual", "(", "cast_df", ".", "at", "[", "0", ",", "\"corresp\"", "]", ",", "\"#ATTENDANTS_MND\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_get_xml_df": [[130, 137], ["test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "len", "len", "len", "len", "hyperbard.preprocessing.get_xml_df().query", "hyperbard.preprocessing.get_xml_df().query", "hyperbard.preprocessing.get_xml_df().query", "hyperbard.preprocessing.get_xml_df().query", "hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.get_body", "hyperbard.preprocessing.get_body", "hyperbard.preprocessing.get_body", "hyperbard.preprocessing.get_body"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body"], ["", "def", "test_get_xml_df", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "len", "(", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", ".", "query", "(", "\"tag == 'l'\"", ")", ")", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", ".", "query", "(", "\"tag == 'stage'\"", ")", ")", ",", "3", "\n", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", ".", "query", "(", "\"tag == 'sp'\"", ")", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", ".", "query", "(", "\"tag == 'w'\"", ")", ")", ",", "35", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_has_speaker": [[138, 142], ["hyperbard.preprocessing.get_xml_df", "test_preprocessing.PreprocessingTest.assertTrue", "test_preprocessing.PreprocessingTest.assertFalse", "hyperbard.preprocessing.get_body", "hyperbard.preprocessing.has_speaker", "hyperbard.preprocessing.has_speaker", "hyperbard.preprocessing.get_xml_df.query", "hyperbard.preprocessing.get_xml_df.query"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.has_speaker", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.has_speaker"], ["", "def", "test_has_speaker", "(", "self", ")", ":", "\n", "        ", "xml_df", "=", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", "\n", "self", ".", "assertTrue", "(", "has_speaker", "(", "xml_df", ".", "query", "(", "\"tag == 'sp'\"", ")", ".", "iloc", "[", "0", "]", ")", ")", "\n", "self", ".", "assertFalse", "(", "has_speaker", "(", "xml_df", ".", "query", "(", "\"tag == 'w'\"", ")", ".", "iloc", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_is_descendant_of_redundant_element": [[143, 151], ["test_preprocessing.PreprocessingTest.soup.find", "test_preprocessing.PreprocessingTest.soup.find", "test_preprocessing.PreprocessingTest.assertTrue", "test_preprocessing.PreprocessingTest.assertFalse", "hyperbard.preprocessing.is_descendant_of_redundant_element", "hyperbard.preprocessing.is_descendant_of_redundant_element"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_descendant_of_redundant_element", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_descendant_of_redundant_element"], ["", "def", "test_is_descendant_of_redundant_element", "(", "self", ")", ":", "\n", "        ", "elem_descendant_of_redundant", "=", "self", ".", "soup", ".", "find", "(", "\"w\"", ")", "\n", "elem_no_descendant_of_redundant", "=", "self", ".", "soup", ".", "find", "(", "\"div\"", ")", "\n", "self", ".", "assertTrue", "(", "\n", "is_descendant_of_redundant_element", "(", "elem_descendant_of_redundant", ")", "\n", ")", "\n", "self", ".", "assertFalse", "(", "\n", "is_descendant_of_redundant_element", "(", "elem_no_descendant_of_redundant", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_is_entrance": [[153, 159], ["hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.get_xml_df.query().iterrows", "hyperbard.preprocessing.get_body", "test_preprocessing.PreprocessingTest.assertTrue", "hyperbard.preprocessing.get_xml_df.query", "hyperbard.preprocessing.is_entrance"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_entrance"], ["", "def", "test_is_entrance", "(", "self", ")", ":", "\n", "        ", "xml_df", "=", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", "\n", "for", "idx", ",", "row", "in", "xml_df", ".", "query", "(", "\n", "\"tag == 'stage' and type == 'entrance'\"", "\n", ")", ".", "iterrows", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "is_entrance", "(", "row", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_is_exit": [[160, 164], ["hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.get_xml_df.query().iterrows", "hyperbard.preprocessing.get_body", "test_preprocessing.PreprocessingTest.assertTrue", "hyperbard.preprocessing.get_xml_df.query", "hyperbard.preprocessing.is_exit"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_exit"], ["", "", "def", "test_is_exit", "(", "self", ")", ":", "\n", "        ", "xml_df", "=", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", "\n", "for", "idx", ",", "row", "in", "xml_df", ".", "query", "(", "\"tag == 'stage' and type == 'exit'\"", ")", ".", "iterrows", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "is_exit", "(", "row", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_is_leaf": [[165, 170], ["test_preprocessing.PreprocessingTest.soup.find", "test_preprocessing.PreprocessingTest.soup.find", "test_preprocessing.PreprocessingTest.assertTrue", "test_preprocessing.PreprocessingTest.assertFalse", "hyperbard.preprocessing.is_leaf", "hyperbard.preprocessing.is_leaf"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_leaf", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_leaf"], ["", "", "def", "test_is_leaf", "(", "self", ")", ":", "\n", "        ", "elem_leaf", "=", "self", ".", "soup", ".", "find", "(", "\"w\"", ")", "\n", "elem_nonleaf", "=", "self", ".", "soup", ".", "find", "(", "\"div\"", ")", "\n", "self", ".", "assertTrue", "(", "is_leaf", "(", "elem_leaf", ")", ")", "\n", "self", ".", "assertFalse", "(", "is_leaf", "(", "elem_nonleaf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_is_navigable_string": [[171, 176], ["test_preprocessing.PreprocessingTest.soup.find", "test_preprocessing.PreprocessingTest.assertFalse", "test_preprocessing.PreprocessingTest.assertTrue", "hyperbard.preprocessing.is_navigable_string", "hyperbard.preprocessing.is_navigable_string", "test_preprocessing.PreprocessingTest.soup.find"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_navigable_string", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_navigable_string"], ["", "def", "test_is_navigable_string", "(", "self", ")", ":", "\n", "        ", "elem_no_navigable_string", "=", "self", ".", "soup", ".", "find", "(", "\"w\"", ")", "\n", "elem_navigable_string", "=", "self", ".", "soup", ".", "find", "(", "\"w\"", ")", ".", "contents", "[", "0", "]", "\n", "self", ".", "assertFalse", "(", "is_navigable_string", "(", "elem_no_navigable_string", ")", ")", "\n", "self", ".", "assertTrue", "(", "is_navigable_string", "(", "elem_navigable_string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_is_new_act": [[177, 182], ["hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.set_act", "test_preprocessing.PreprocessingTest.assertTrue", "test_preprocessing.PreprocessingTest.assertFalse", "hyperbard.preprocessing.get_body", "hyperbard.preprocessing.is_new_act", "hyperbard.preprocessing.is_new_act", "hyperbard.preprocessing.get_xml_df.query", "hyperbard.preprocessing.get_xml_df.query"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_act", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_new_act", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_new_act"], ["", "def", "test_is_new_act", "(", "self", ")", ":", "\n", "        ", "xml_df", "=", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", "\n", "set_act", "(", "xml_df", ")", "\n", "self", ".", "assertTrue", "(", "is_new_act", "(", "xml_df", ".", "query", "(", "\"tag == 'sp'\"", ")", ".", "iloc", "[", "0", "]", ",", "0", ")", ")", "\n", "self", ".", "assertFalse", "(", "is_new_act", "(", "xml_df", ".", "query", "(", "\"tag == 'sp'\"", ")", ".", "iloc", "[", "0", "]", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_is_redundant_element": [[183, 188], ["test_preprocessing.PreprocessingTest.soup.find", "test_preprocessing.PreprocessingTest.soup.find", "test_preprocessing.PreprocessingTest.assertTrue", "test_preprocessing.PreprocessingTest.assertFalse", "hyperbard.preprocessing.is_redundant_element", "hyperbard.preprocessing.is_redundant_element"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_redundant_element", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.is_redundant_element"], ["", "def", "test_is_redundant_element", "(", "self", ")", ":", "\n", "        ", "elem_reduntant", "=", "self", ".", "soup", ".", "find", "(", "\"head\"", ")", "\n", "elem_nonredundant", "=", "self", ".", "soup", ".", "find", "(", "\"div\"", ")", "\n", "self", ".", "assertTrue", "(", "is_redundant_element", "(", "elem_reduntant", ")", ")", "\n", "self", ".", "assertFalse", "(", "is_redundant_element", "(", "elem_nonredundant", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_keep_elem_in_xml_df": [[189, 194], ["test_preprocessing.PreprocessingTest.soup.find", "test_preprocessing.PreprocessingTest.soup.find", "test_preprocessing.PreprocessingTest.assertTrue", "test_preprocessing.PreprocessingTest.assertFalse", "hyperbard.preprocessing.keep_elem_in_xml_df", "hyperbard.preprocessing.keep_elem_in_xml_df"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.keep_elem_in_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.keep_elem_in_xml_df"], ["", "def", "test_keep_elem_in_xml_df", "(", "self", ")", ":", "\n", "        ", "elem_keep", "=", "self", ".", "soup", ".", "find", "(", "\"div\"", ")", "\n", "elem_nokeep", "=", "self", ".", "soup", ".", "find", "(", "\"head\"", ")", "\n", "self", ".", "assertTrue", "(", "keep_elem_in_xml_df", "(", "elem_keep", ")", ")", "\n", "self", ".", "assertFalse", "(", "keep_elem_in_xml_df", "(", "elem_nokeep", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_set_act": [[195, 201], ["hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.set_act", "test_preprocessing.PreprocessingTest.assertListEqual", "test_preprocessing.PreprocessingTest.assertFalse", "hyperbard.preprocessing.get_body", "list", "any", "hyperbard.preprocessing.get_xml_df.query", "pandas.isna"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_act", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body"], ["", "def", "test_set_act", "(", "self", ")", ":", "\n", "        ", "xml_df", "=", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", "\n", "set_act", "(", "xml_df", ")", "\n", "self", ".", "assertListEqual", "(", "list", "(", "xml_df", ".", "query", "(", "\"type == 'act'\"", ")", "[", "\"act\"", "]", ")", ",", "[", "1", "]", ")", "\n", "self", ".", "assertFalse", "(", "any", "(", "pd", ".", "isna", "(", "x", ")", "for", "x", "in", "xml_df", "[", "\"act\"", "]", ")", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_set_onstage": [[202, 210], ["hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.set_act", "hyperbard.preprocessing.set_scene", "hyperbard.preprocessing.set_onstage", "test_preprocessing.PreprocessingTest.assertEqual", "hyperbard.preprocessing.get_body", "hyperbard.preprocessing.get_xml_df.query"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_act", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_scene", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_onstage", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body"], ["", "def", "test_set_onstage", "(", "self", ")", ":", "\n", "        ", "xml_df", "=", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", "\n", "set_act", "(", "xml_df", ")", "\n", "set_scene", "(", "xml_df", ")", "\n", "set_onstage", "(", "xml_df", ")", "\n", "self", ".", "assertEqual", "(", "\n", "xml_df", ".", "query", "(", "\"tag == 'stage'\"", ")", ".", "iloc", "[", "0", "]", "[", "\"onstage\"", "]", ",", "\n", "\"#ATTENDANTS_MND #Hippolyta_MND #Philostrate_MND #Theseus_MND\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_set_scene": [[212, 219], ["hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.set_act", "hyperbard.preprocessing.set_scene", "test_preprocessing.PreprocessingTest.assertTrue", "test_preprocessing.PreprocessingTest.assertFalse", "test_preprocessing.PreprocessingTest.assertFalse", "hyperbard.preprocessing.get_body", "any", "set", "set", "pandas.isna", "hyperbard.preprocessing.get_xml_df.query", "hyperbard.preprocessing.get_xml_df.query"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_act", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_scene", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body"], ["", "def", "test_set_scene", "(", "self", ")", ":", "\n", "        ", "xml_df", "=", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", "\n", "set_act", "(", "xml_df", ")", "\n", "set_scene", "(", "xml_df", ")", "\n", "self", ".", "assertTrue", "(", "set", "(", "xml_df", ".", "query", "(", "\"type == 'act'\"", ")", "[", "\"scene\"", "]", ")", "==", "{", "0", "}", ")", "\n", "self", ".", "assertFalse", "(", "0", "in", "set", "(", "xml_df", ".", "query", "(", "\"type != 'act'\"", ")", "[", "\"scene\"", "]", ")", ")", "\n", "self", ".", "assertFalse", "(", "any", "(", "pd", ".", "isna", "(", "x", ")", "for", "x", "in", "xml_df", "[", "\"scene\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_set_setting": [[220, 225], ["hyperbard.preprocessing.get_raw_xml_df", "hyperbard.preprocessing.get_aggregated", "hyperbard.preprocessing.set_setting", "test_preprocessing.PreprocessingTest.assertSetEqual", "set"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_raw_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_aggregated", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_setting"], ["", "def", "test_set_setting", "(", "self", ")", ":", "\n", "        ", "raw_df", "=", "get_raw_xml_df", "(", "self", ".", "toy_xml_file", ")", "\n", "agg_df", "=", "get_aggregated", "(", "raw_df", ")", "\n", "set_setting", "(", "agg_df", ")", "\n", "self", ".", "assertSetEqual", "(", "set", "(", "agg_df", ".", "setting", ")", ",", "{", "1", ",", "2", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_set_speaker": [[226, 238], ["hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.set_act", "hyperbard.preprocessing.set_scene", "hyperbard.preprocessing.set_onstage", "hyperbard.preprocessing.set_stagegroup", "hyperbard.preprocessing.set_speaker", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertEqual", "hyperbard.preprocessing.get_body", "hyperbard.preprocessing.get_body", "hyperbard.preprocessing.get_xml_df.query", "hyperbard.preprocessing.get_xml_df.query"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_act", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_scene", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_onstage", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_stagegroup", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_speaker", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body"], ["", "def", "test_set_speaker", "(", "self", ")", ":", "\n", "        ", "xml_df", "=", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", "\n", "set_act", "(", "xml_df", ")", "\n", "set_scene", "(", "xml_df", ")", "\n", "set_onstage", "(", "xml_df", ")", "\n", "set_stagegroup", "(", "xml_df", ")", "\n", "set_speaker", "(", "xml_df", ",", "get_body", "(", "self", ".", "soup", ")", ")", "\n", "self", ".", "assertEqual", "(", "xml_df", ".", "query", "(", "\"tag == 'sp'\"", ")", ".", "iloc", "[", "0", "]", "[", "\"speaker\"", "]", ",", "\"#Theseus_MND\"", ")", "\n", "self", ".", "assertEqual", "(", "xml_df", ".", "query", "(", "\"tag == 'l'\"", ")", ".", "iloc", "[", "0", "]", "[", "\"speaker\"", "]", ",", "\"#Theseus_MND\"", ")", "\n", "self", ".", "assertEqual", "(", "\n", "xml_df", "[", "xml_df", "[", "\"xml:id\"", "]", "==", "\"ftln-0012\"", "]", ".", "iloc", "[", "0", "]", "[", "\"speaker\"", "]", ",", "\n", "\"#Philostrate_MND\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_preprocessing.PreprocessingTest.test_set_stagegroup": [[240, 256], ["hyperbard.preprocessing.get_xml_df", "hyperbard.preprocessing.set_act", "hyperbard.preprocessing.set_scene", "hyperbard.preprocessing.set_onstage", "hyperbard.preprocessing.set_stagegroup", "test_preprocessing.PreprocessingTest.assertEqual", "test_preprocessing.PreprocessingTest.assertSetEqual", "test_preprocessing.PreprocessingTest.assertSetEqual", "test_preprocessing.PreprocessingTest.assertSetEqual", "hyperbard.preprocessing.get_body", "len", "set", "set", "set", "hyperbard.preprocessing.get_xml_df.stagegroup_raw.unique", "[].unique", "[].unique", "[].unique", "hyperbard.preprocessing.get_xml_df.query", "hyperbard.preprocessing.get_xml_df.query", "hyperbard.preprocessing.get_xml_df.query"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_xml_df", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_act", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_scene", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_onstage", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.set_stagegroup", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_body"], ["", "def", "test_set_stagegroup", "(", "self", ")", ":", "\n", "        ", "xml_df", "=", "get_xml_df", "(", "get_body", "(", "self", ".", "soup", ")", ")", "\n", "set_act", "(", "xml_df", ")", "\n", "set_scene", "(", "xml_df", ")", "\n", "set_onstage", "(", "xml_df", ")", "\n", "set_stagegroup", "(", "xml_df", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "xml_df", ".", "stagegroup_raw", ".", "unique", "(", ")", ")", ",", "3", ")", "\n", "self", ".", "assertSetEqual", "(", "\n", "set", "(", "xml_df", ".", "query", "(", "\"tag == 'div' and n == '1'\"", ")", "[", "\"stagegroup_raw\"", "]", ".", "unique", "(", ")", ")", ",", "\n", "{", "0", "}", ",", "\n", ")", "\n", "self", ".", "assertSetEqual", "(", "\n", "set", "(", "xml_df", ".", "query", "(", "\"n == 'SD 1.1.0'\"", ")", "[", "\"stagegroup_raw\"", "]", ".", "unique", "(", ")", ")", ",", "{", "1", "}", "\n", ")", "\n", "self", ".", "assertSetEqual", "(", "\n", "set", "(", "xml_df", ".", "query", "(", "\"n == 'SD 1.1.20.1'\"", ")", "[", "\"stagegroup_raw\"", "]", ".", "unique", "(", ")", ")", ",", "{", "2", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_statics.test_paths": [[8, 17], ["pytest.mark.skipif", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "\"config.getoption('--remote')\"", ",", "\n", "reason", "=", "\"Only run locally\"", ",", "\n", ")", "\n", "def", "test_paths", "(", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "DATA_PATH", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "GRAPHICS_PATH", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "META_PATH", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "RAWDATA_PATH", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_graph_representations.RepresentationsTest.test_get_weighted_multigraph": [[10, 30], ["hyperbard.graph_representations.get_weighted_multigraph", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "hyperbard.graph_representations.get_weighted_multigraph", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "hyperbard.graph_representations.get_weighted_multigraph.number_of_nodes", "hyperbard.graph_representations.get_weighted_multigraph.number_of_edges", "hyperbard.graph_representations.get_weighted_multigraph.number_of_nodes", "hyperbard.graph_representations.get_weighted_multigraph.number_of_edges", "hyperbard.graph_representations.get_weighted_multigraph.get_edge_data", "hyperbard.graph_representations.get_weighted_multigraph.get_edge_data", "hyperbard.graph_representations.get_weighted_multigraph.get_edge_data", "hyperbard.graph_representations.get_weighted_multigraph.get_edge_data"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_weighted_multigraph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_weighted_multigraph"], ["    ", "def", "test_get_weighted_multigraph", "(", "self", ")", ":", "\n", "        ", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", "]", "\n", "G", "=", "get_weighted_multigraph", "(", "self", ".", "toy_agg_df", ",", "groupby", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_nodes", "(", ")", ",", "8", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_edges", "(", ")", ",", "48", ")", "\n", "self", ".", "assertEqual", "(", "\n", "G", ".", "get_edge_data", "(", "\"#ATTENDANTS_MND\"", ",", "\"#Hippolyta_MND\"", ",", "0", ")", "[", "\"n_lines\"", "]", ",", "11", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "G", ".", "get_edge_data", "(", "\"#ATTENDANTS_MND\"", ",", "\"#Hippolyta_MND\"", ",", "1", ")", "[", "\"n_lines\"", "]", ",", "2", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "G", ".", "get_edge_data", "(", "\"#ATTENDANTS_MND\"", ",", "\"#Hippolyta_MND\"", ",", "2", ")", "[", "\"n_lines\"", "]", ",", "1", "\n", ")", "\n", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", "]", "\n", "G", "=", "get_weighted_multigraph", "(", "self", ".", "toy_agg_df", ",", "groupby", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_nodes", "(", ")", ",", "8", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_edges", "(", ")", ",", "51", ")", "\n", "self", ".", "assertEqual", "(", "\n", "G", ".", "get_edge_data", "(", "\"#ATTENDANTS_MND\"", ",", "\"#Hippolyta_MND\"", ",", "0", ")", "[", "\"n_lines\"", "]", ",", "5", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_graph_representations.RepresentationsTest.test_get_count_weighted_graph": [[32, 46], ["hyperbard.graph_representations.get_count_weighted_graph", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "hyperbard.graph_representations.get_count_weighted_graph", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "hyperbard.graph_representations.get_count_weighted_graph.number_of_nodes", "hyperbard.graph_representations.get_count_weighted_graph.number_of_edges", "hyperbard.graph_representations.get_count_weighted_graph.number_of_nodes", "hyperbard.graph_representations.get_count_weighted_graph.number_of_edges", "hyperbard.graph_representations.get_count_weighted_graph.get_edge_data", "hyperbard.graph_representations.get_count_weighted_graph.get_edge_data"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_count_weighted_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_count_weighted_graph"], ["", "def", "test_get_count_weighted_graph", "(", "self", ")", ":", "\n", "        ", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", "]", "\n", "G", "=", "get_count_weighted_graph", "(", "self", ".", "toy_agg_df", ",", "groupby", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_nodes", "(", ")", ",", "8", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_edges", "(", ")", ",", "24", ")", "\n", "self", ".", "assertEqual", "(", "\n", "G", ".", "get_edge_data", "(", "\"#ATTENDANTS_MND\"", ",", "\"#Hippolyta_MND\"", ")", "[", "\"count\"", "]", ",", "3", "\n", ")", "\n", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", "]", "\n", "G", "=", "get_count_weighted_graph", "(", "self", ".", "toy_agg_df", ",", "groupby", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_nodes", "(", ")", ",", "8", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_edges", "(", ")", ",", "24", ")", "\n", "self", ".", "assertEqual", "(", "\n", "G", ".", "get_edge_data", "(", "\"#ATTENDANTS_MND\"", ",", "\"#Hippolyta_MND\"", ")", "[", "\"count\"", "]", ",", "3", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_graph_representations.RepresentationsTest.test_get_bipartite_graph": [[48, 57], ["hyperbard.graph_representations.get_bipartite_graph", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "hyperbard.graph_representations.get_bipartite_graph", "test_graph_representations.RepresentationsTest.assertEqual", "test_graph_representations.RepresentationsTest.assertEqual", "hyperbard.graph_representations.get_bipartite_graph.number_of_nodes", "hyperbard.graph_representations.get_bipartite_graph.number_of_edges", "hyperbard.graph_representations.get_bipartite_graph.number_of_nodes", "hyperbard.graph_representations.get_bipartite_graph.number_of_edges"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_bipartite_graph", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.graph_representations.get_bipartite_graph"], ["", "def", "test_get_bipartite_graph", "(", "self", ")", ":", "\n", "        ", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", "]", "\n", "G", "=", "get_bipartite_graph", "(", "self", ".", "toy_agg_df", ",", "groupby", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_nodes", "(", ")", ",", "11", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_edges", "(", ")", ",", "18", ")", "\n", "groupby", "=", "[", "\"act\"", ",", "\"scene\"", ",", "\"stagegroup\"", "]", "\n", "G", "=", "get_bipartite_graph", "(", "self", ".", "toy_agg_df", ",", "groupby", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_nodes", "(", ")", ",", "12", ")", "\n", "self", ".", "assertEqual", "(", "G", ".", "number_of_edges", "(", ")", ",", "21", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_utils.UtilsTest.setUp": [[17, 34], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "identifier", "=", "\"#Theseus_MND\"", "\n", "self", ".", "identifier1", "=", "\"#ATTENDANTS.0.1_MND\"", "\n", "self", ".", "identifier2", "=", "\"#FAIRIES.TITANIA.Peaseblossom_MND\"", "\n", "self", ".", "identifier3", "=", "\"#SERVANTS.HOTSPUR.1_1H4\"", "\n", "self", ".", "identifier4", "=", "\"#TRAVELERS.CARRIERS.X_1H4\"", "\n", "self", ".", "identifier5", "=", "\"#SERVANTS.GARDENER.1_R2\"", "\n", "self", ".", "character_list", "=", "[", "\n", "\"#ATTENDANTS_MND\"", ",", "\n", "\"#Hippolyta_MND\"", ",", "\n", "\"#Philostrate_MND\"", ",", "\n", "\"#Theseus_MND\"", ",", "\n", "]", "\n", "self", ".", "character_string_unsorted", "=", "\"#Hippolyta_MND  #Demetrius_MND #Egeus_MND \\\n        #Hermia_MND #Lysander_MND #Theseus_MND   #ATTENDANTS_MND\"", "\n", "self", ".", "full_filename", "=", "(", "\n", "\"some/directory/a-midsummer-nights-dream_TEIsimple_FolgerShakespeare.xml\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_utils.UtilsTest.test_remove_hashtag": [[36, 38], ["test_utils.UtilsTest.assertEqual", "hyperbard.utils.remove_hashtag"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_hashtag"], ["", "def", "test_remove_hashtag", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "remove_hashtag", "(", "self", ".", "identifier1", ")", ",", "\"ATTENDANTS.0.1_MND\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_utils.UtilsTest.test_remove_play_abbreviation": [[39, 41], ["test_utils.UtilsTest.assertEqual", "hyperbard.utils.remove_play_abbreviation"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_play_abbreviation"], ["", "def", "test_remove_play_abbreviation", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "remove_play_abbreviation", "(", "self", ".", "identifier1", ")", ",", "\"#ATTENDANTS.0.1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_utils.UtilsTest.test_remove_uppercase_prefix": [[42, 53], ["test_utils.UtilsTest.assertEqual", "test_utils.UtilsTest.assertEqual", "test_utils.UtilsTest.assertEqual", "test_utils.UtilsTest.assertEqual", "test_utils.UtilsTest.assertEqual", "hyperbard.utils.remove_uppercase_prefixes", "hyperbard.utils.remove_uppercase_prefixes", "hyperbard.utils.remove_uppercase_prefixes", "hyperbard.utils.remove_uppercase_prefixes", "hyperbard.utils.remove_uppercase_prefixes"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.remove_uppercase_prefixes"], ["", "def", "test_remove_uppercase_prefix", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "remove_uppercase_prefixes", "(", "self", ".", "identifier1", ")", ",", "\"ATTENDANTS.0.1\"", ")", "\n", "self", ".", "assertEqual", "(", "remove_uppercase_prefixes", "(", "self", ".", "identifier2", ")", ",", "\"Peaseblossom\"", ")", "\n", "self", ".", "assertEqual", "(", "\n", "remove_uppercase_prefixes", "(", "self", ".", "identifier3", ")", ",", "\"SERVANTS.HOTSPUR.1\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "remove_uppercase_prefixes", "(", "self", ".", "identifier4", ")", ",", "\"TRAVELERS.CARRIERS.X\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "remove_uppercase_prefixes", "(", "self", ".", "identifier5", ")", ",", "\"SERVANTS.GARDENER.1\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_utils.UtilsTest.test_character_string_to_sorted_list": [[55, 66], ["test_utils.UtilsTest.assertListEqual", "hyperbard.utils.character_string_to_sorted_list"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.character_string_to_sorted_list"], ["", "def", "test_character_string_to_sorted_list", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertListEqual", "(", "\n", "character_string_to_sorted_list", "(", "self", ".", "character_string_unsorted", ")", ",", "\n", "[", "\n", "\"#ATTENDANTS_MND\"", ",", "\n", "\"#Demetrius_MND\"", ",", "\n", "\"#Egeus_MND\"", ",", "\n", "\"#Hermia_MND\"", ",", "\n", "\"#Hippolyta_MND\"", ",", "\n", "\"#Lysander_MND\"", ",", "\n", "\"#Theseus_MND\"", ",", "\n", "]", ",", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_utils.UtilsTest.test_get_filename_base": [[69, 83], ["test_utils.UtilsTest.assertEqual", "test_utils.UtilsTest.assertEqual", "hyperbard.utils.get_filename_base", "hyperbard.utils.get_filename_base"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_filename_base", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_filename_base"], ["", "def", "test_get_filename_base", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "\n", "get_filename_base", "(", "\n", "self", ".", "full_filename", ",", "\n", "full", "=", "False", ",", "\n", ")", ",", "\n", "\"a-midsummer-nights-dream\"", ",", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "get_filename_base", "(", "\n", "self", ".", "full_filename", ",", "\n", "full", "=", "True", ",", "\n", ")", ",", "\n", "\"a-midsummer-nights-dream_TEIsimple_FolgerShakespeare\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_utils.UtilsTest.test_get_name_from_identifier": [[85, 87], ["test_utils.UtilsTest.assertEqual", "hyperbard.utils.get_name_from_identifier"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.get_name_from_identifier"], ["", "def", "test_get_name_from_identifier", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "get_name_from_identifier", "(", "self", ".", "identifier", ")", ",", "\"Theseus\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_utils.UtilsTest.test_sort_join_strings": [[88, 92], ["test_utils.UtilsTest.assertEqual", "hyperbard.utils.sort_join_strings"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.sort_join_strings"], ["", "def", "test_sort_join_strings", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "\n", "sort_join_strings", "(", "self", ".", "character_list", ")", ",", "\n", "\"#ATTENDANTS_MND #Hippolyta_MND #Philostrate_MND #Theseus_MND\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.test_utils.UtilsTest.test_string_to_set": [[94, 99], ["float", "test_utils.UtilsTest.assertEqual", "test_utils.UtilsTest.assertTrue", "hyperbard.utils.string_to_set", "math.isnan", "hyperbard.utils.string_to_set"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.string_to_set", "home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.utils.string_to_set"], ["", "def", "test_string_to_set", "(", "self", ")", ":", "\n", "        ", "who_string_nonan", "=", "\"#A #B #A\"", "\n", "who_string_nan", "=", "float", "(", "\"nan\"", ")", "\n", "self", ".", "assertEqual", "(", "string_to_set", "(", "who_string_nonan", ")", ",", "{", "\"#A\"", ",", "\"#B\"", "}", ")", "\n", "self", ".", "assertTrue", "(", "math", ".", "isnan", "(", "string_to_set", "(", "who_string_nan", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.xml_testcase.XMLTestCase.setUp": [[11, 212], ["hyperbard.preprocessing.get_soup", "pandas.read_csv", "open", "f.write", "open", "f.write", "io.StringIO"], "methods", ["home.repos.pwc.inspect_result.hyperbard_hyperbard.hyperbard.preprocessing.get_soup"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "toy_xml_file", "=", "\"tei_toy.xml\"", "\n", "self", ".", "toy_xml_text", "=", "\"\"\"\n            <?xml-model href=\"https://raw.githubusercontent.com/TEIC/TEI-Simple/master/teisimple.rng\" type=\"application/xml\" schematypens=\"http://relaxng.org/ns/structure/1.0\"?>\n    <TEI xmlns=\"http://www.tei-c.org/ns/1.0\">\n      <text>\n        <body>\n            <div type=\"act\" n=\"1\">\n            <head>\n              <w xml:id=\"fs-mnd-0000010\">ACT</w>\n              <c> </c>\n              <w xml:id=\"fs-mnd-0000030\">1</w>\n            </head>\n            <div type=\"scene\" n=\"1\">\n              <head>\n                <w xml:id=\"fs-mnd-0000040\">Scene</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0000060\">1</w>\n              </head>\n              <stage xml:id=\"stg-0000\" n=\"SD 1.1.0\" type=\"entrance\" who=\"#Theseus_MND #Hippolyta_MND #Philostrate_MND #ATTENDANTS_MND\">\n                <w xml:id=\"fs-mnd-0000070\" n=\"SD 1.1.0\">Enter</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0000090\" n=\"SD 1.1.0\">Theseus</w>\n                <pc xml:id=\"fs-mnd-0000100\" n=\"SD 1.1.0\">,</pc>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0000120\" n=\"SD 1.1.0\">Hippolyta</w>\n                <pc xml:id=\"fs-mnd-0000130\" n=\"SD 1.1.0\">,</pc>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0000150\" n=\"SD 1.1.0\">and</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0000170\" n=\"SD 1.1.0\">Philostrate</w>\n                <pc xml:id=\"fs-mnd-0000180\" n=\"SD 1.1.0\">,</pc>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0000200\" n=\"SD 1.1.0\">with</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0000220\" n=\"SD 1.1.0\">others</w>\n                <pc xml:id=\"fs-mnd-0000230\" n=\"SD 1.1.0\">.</pc>\n              </stage>\n              <sp xml:id=\"sp-0001\" who=\"#Theseus_MND\">\n                <speaker xml:id=\"spk-0001\">\n                  <w xml:id=\"fs-mnd-0000240\">THESEUS</w>\n                </speaker>\n                <l xml:id=\"ftln-0001\" n=\"1.1.1\">\n                  <w xml:id=\"fs-mnd-0000250\" n=\"1.1.1\" lemma=\"now\" ana=\"#av\">Now</w>\n                  <pc xml:id=\"fs-mnd-0000260\" n=\"1.1.1\">,</pc>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000280\" n=\"1.1.1\" lemma=\"fair\" ana=\"#j\">fair</w>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000300\" n=\"1.1.1\" lemma=\"Hippolyta\" ana=\"#n1-nn\">Hippolyta</w>\n                  <pc xml:id=\"fs-mnd-0000310\" n=\"1.1.1\">,</pc>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000330\" n=\"1.1.1\" lemma=\"our\" ana=\"#po\">our</w>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000350\" n=\"1.1.1\" lemma=\"nuptial\" ana=\"#j\">nuptial</w>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000370\" n=\"1.1.1\" lemma=\"hour\" ana=\"#n1\">hour</w>\n                </l>\n                <l xml:id=\"ftln-0002\" n=\"1.1.2\">\n                  <w xml:id=\"fs-mnd-0000380\" n=\"1.1.2\" lemma=\"draw\" ana=\"#vvz\">Draws</w>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000400\" n=\"1.1.2\" lemma=\"on\" ana=\"#acp-p\">on</w>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000420\" n=\"1.1.2\" lemma=\"apace\" ana=\"#av\">apace</w>\n                  <pc xml:id=\"fs-mnd-0000430\" n=\"1.1.2\">.</pc>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000450\" n=\"1.1.2\" lemma=\"four\" ana=\"#crd\">Four</w>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000470\" n=\"1.1.2\" lemma=\"happy\" ana=\"#j\">happy</w>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000490\" n=\"1.1.2\" lemma=\"day\" ana=\"#n2\">days</w>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000510\" n=\"1.1.2\" lemma=\"bring\" ana=\"#vvb\">bring</w>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0000530\" n=\"1.1.2\" lemma=\"in\" ana=\"#acp-p\">in</w>\n                </l>\n              </sp>\n              <stage xml:id=\"stg-0364.1\" n=\"SD 1.2.107.1\" type=\"exit\" who=\"#Quince_MND #Bottom_MND #Flute_MND #Snout_MND #Snug_MND #Starveling_MND\">\n                <w xml:id=\"fs-mnd-0057740\" n=\"SD 1.2.107.1\">They</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0057760\" n=\"SD 1.2.107.1\">exit</w>\n                <pc xml:id=\"fs-mnd-0057770\" n=\"SD 1.2.107.1\">.</pc>\n              </stage>\n              <sp xml:id=\"sp-0012\" who=\"#Philostrate_MND\">\n                <speaker xml:id=\"spk-0012\">\n                  <w xml:id=\"fs-mnd-0001840\">THESEUS</w>\n                </speaker>\n                <l xml:id=\"ftln-0012\" n=\"1.1.12\" part=\"F\">\n                  <w xml:id=\"fs-mnd-0001850\" n=\"1.1.12\" lemma=\"go\" ana=\"#vvb\">Go</w>\n                  <pc xml:id=\"fs-mnd-0001860\" n=\"1.1.12\">,</pc>\n                  <c> </c>\n                  <w xml:id=\"fs-mnd-0001880\" n=\"1.1.12\" lemma=\"Philostrate\" ana=\"#n1-nn\">Philostrate</w>\n                  <pc xml:id=\"fs-mnd-0001890\" n=\"1.1.12\">,</pc>\n                </l>\n              </sp>\n              <stage xml:id=\"stg-0020.1\" n=\"SD 1.1.20.1\" type=\"entrance\" who=\"#Egeus_MND #Hermia_MND #Lysander_MND #Demetrius_MND\">\n                <w xml:id=\"fs-mnd-0003100\" n=\"SD 1.1.20.1\">Enter</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0003120\" n=\"SD 1.1.20.1\">Egeus</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0003140\" n=\"SD 1.1.20.1\">and</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0003160\" n=\"SD 1.1.20.1\">his</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0003180\" n=\"SD 1.1.20.1\">daughter</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0003200\" n=\"SD 1.1.20.1\">Hermia</w>\n                <pc xml:id=\"fs-mnd-0003210\" n=\"SD 1.1.20.1\">,</pc>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0003230\" n=\"SD 1.1.20.1\">and</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0003250\" n=\"SD 1.1.20.1\">Lysander</w>\n                <c> </c>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0003280\" n=\"SD 1.1.20.1\">and</w>\n                <c> </c>\n                <w xml:id=\"fs-mnd-0003300\" n=\"SD 1.1.20.1\">Demetrius</w>\n                <pc xml:\n              </stage>\n            </div>\n          </div>\n        </body>\n      </text>\n    </TEI>\n            \"\"\"", "\n", "self", ".", "toy_cast_file", "=", "\"toy_cast.xml\"", "\n", "self", ".", "toy_cast_text", "=", "\"\"\"\n            <castList xmlns=\"http://www.tei-c.org/ns/1.0\">\n            <castGroup>\n              <castGroup>\n                <head>four lovers</head>\n                <castItem xml:id=\"Hermia_MND\">\n                  <role>\n                    <name>Hermia</name>\n                  </role>\n                </castItem>\n                <castItem xml:id=\"Lysander_MND\">\n                  <role>\n                    <name>Lysander</name>\n                  </role>\n                </castItem>\n                <castItem xml:id=\"Helena_MND\">\n                  <role>\n                    <name>Helena</name>\n                  </role>\n                </castItem>\n                <castItem xml:id=\"Demetrius_MND\">\n                  <role>\n                    <name>Demetrius</name>\n                  </role>\n                </castItem>\n              </castGroup>\n            </castGroup>\n            <castGroup>\n              <castItem xml:id=\"Theseus_MND\">\n                <role>\n                  <name>Theseus</name>\n                </role>\n                <roleDesc>duke of Athens</roleDesc>\n              </castItem>\n              <castItem xml:id=\"Hippolyta_MND\">\n                <role>\n                  <name>Hippolyta</name>\n                </role>\n                <roleDesc>queen of the Amazons</roleDesc>\n              </castItem>\n              <castItem xml:id=\"Egeus_MND\">\n                <role>\n                  <name>Egeus</name>\n                </role>\n                <roleDesc>father to Hermia</roleDesc>\n              </castItem>\n              <castItem xml:id=\"Philostrate_MND\">\n                <role>\n                  <name>Philostrate</name>\n                </role>\n                <roleDesc>master of the revels to Theseus</roleDesc>\n              </castItem>\n            </castGroup>\n            <castGroup>\n              <head>Lords and Attendants on Theseus and Hippolyta</head>\n              <castItem xml:id=\"ATTENDANTS_MND\"/>\n              <castItem xml:id=\"ATTENDANTS.0.1_MND\" corresp=\"#ATTENDANTS_MND\"/>\n              <castItem xml:id=\"ATTENDANTS.0.2_MND\" corresp=\"#ATTENDANTS_MND\"/>\n            </castGroup>\n            </castList>\n            \"\"\"", "\n", "with", "open", "(", "self", ".", "toy_xml_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "self", ".", "toy_xml_text", ")", "\n", "", "self", ".", "soup", "=", "get_soup", "(", "self", ".", "toy_xml_file", ")", "\n", "with", "open", "(", "self", ".", "toy_cast_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "self", ".", "toy_cast_text", ")", "\n", "", "self", ".", "toy_agg_df", "=", "pd", ".", "read_csv", "(", "\n", "StringIO", "(", "\n", "\"\"\"\nact,scene,stagegroup,stagegroup_raw,setting,onstage,speaker,n_lines,n_tokens\n1,1,1,1,1,#ATTENDANTS_MND #Philostrate_MND #Theseus_MND,#Theseus_MND,6,43\n1,1,2,2,2,#ATTENDANTS_MND #Hippolyta_MND #Philostrate_MND #Theseus_MND,#Hippolyta_MND,5,35\n1,2,3,3,3,#ATTENDANTS_MND #Demetrius_MND #Egeus_MND #Hermia_MND #Hippolyta_MND #Lysander_MND #Theseus_MND,#Egeus_MND,1,6\n1,2,3,3,4,#ATTENDANTS_MND #Demetrius_MND #Egeus_MND #Hermia_MND #Hippolyta_MND #Lysander_MND #Theseus_MND,#Theseus_MND,1,8\n2,1,4,4,5,#ATTENDANTS_MND #Demetrius_MND #Egeus_MND #Hermia_MND #Hippolyta_MND #Lysander_MND #Theseus_MND,#Egeus_MND,1,7\n\"\"\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.xml_testcase.XMLTestCase.tearDown": [[215, 220], ["os.path.exists", "os.path.exists", "os.remove", "os.remove"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "toy_xml_file", ")", ":", "\n", "            ", "os", ".", "remove", "(", "self", ".", "toy_xml_file", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "toy_cast_file", ")", ":", "\n", "            ", "os", ".", "remove", "(", "self", ".", "toy_cast_file", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hyperbard_hyperbard.tests.conftest.pytest_addoption": [[1, 7], ["parser.addoption"], "function", ["None"], ["def", "pytest_addoption", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "addoption", "(", "\n", "\"--remote\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Run tests remotely (e.g., via GitHub action)\"", ",", "\n", ")", "\n"]]}