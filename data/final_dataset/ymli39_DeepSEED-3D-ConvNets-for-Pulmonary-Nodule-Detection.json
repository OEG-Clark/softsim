{"home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.step1.binarize_per_slice": [[12, 40], ["numpy.zeros", "numpy.linspace", "numpy.meshgrid", "range", "skimage.measure.label", "skimage.measure.regionprops", "set", "numpy.in1d().reshape", "len", "numpy.unique", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "set.add", "numpy.in1d", "numpy.multiply", "image[].astype", "list", "image[].astype"], "function", ["None"], ["def", "binarize_per_slice", "(", "image", ",", "spacing", ",", "intensity_th", "=", "-", "600", ",", "sigma", "=", "1", ",", "area_th", "=", "30", ",", "eccen_th", "=", "0.99", ",", "bg_patch_size", "=", "10", ")", ":", "\n", "    ", "bw", "=", "np", ".", "zeros", "(", "image", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "\n", "# prepare a mask, with all corner values set to nan", "\n", "image_size", "=", "image", ".", "shape", "[", "1", "]", "\n", "grid_axis", "=", "np", ".", "linspace", "(", "-", "image_size", "/", "2", "+", "0.5", ",", "image_size", "/", "2", "-", "0.5", ",", "image_size", ")", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "grid_axis", ",", "grid_axis", ")", "\n", "d", "=", "(", "x", "**", "2", "+", "y", "**", "2", ")", "**", "0.5", "\n", "nan_mask", "=", "(", "d", "<", "image_size", "/", "2", ")", ".", "astype", "(", "float", ")", "\n", "nan_mask", "[", "nan_mask", "==", "0", "]", "=", "np", ".", "nan", "\n", "for", "i", "in", "range", "(", "image", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Check if corner pixels are identical, if so the slice  before Gaussian filtering", "\n", "        ", "if", "len", "(", "np", ".", "unique", "(", "image", "[", "i", ",", "0", ":", "bg_patch_size", ",", "0", ":", "bg_patch_size", "]", ")", ")", "==", "1", ":", "\n", "            ", "current_bw", "=", "scipy", ".", "ndimage", ".", "filters", ".", "gaussian_filter", "(", "np", ".", "multiply", "(", "image", "[", "i", "]", ".", "astype", "(", "'float32'", ")", ",", "nan_mask", ")", ",", "sigma", ",", "truncate", "=", "2.0", ")", "<", "intensity_th", "\n", "", "else", ":", "\n", "            ", "current_bw", "=", "scipy", ".", "ndimage", ".", "filters", ".", "gaussian_filter", "(", "image", "[", "i", "]", ".", "astype", "(", "'float32'", ")", ",", "sigma", ",", "truncate", "=", "2.0", ")", "<", "intensity_th", "\n", "\n", "# select proper components", "\n", "", "label", "=", "measure", ".", "label", "(", "current_bw", ")", "\n", "properties", "=", "measure", ".", "regionprops", "(", "label", ")", "\n", "valid_label", "=", "set", "(", ")", "\n", "for", "prop", "in", "properties", ":", "\n", "            ", "if", "prop", ".", "area", "*", "spacing", "[", "1", "]", "*", "spacing", "[", "2", "]", ">", "area_th", "and", "prop", ".", "eccentricity", "<", "eccen_th", ":", "\n", "                ", "valid_label", ".", "add", "(", "prop", ".", "label", ")", "\n", "", "", "current_bw", "=", "np", ".", "in1d", "(", "label", ",", "list", "(", "valid_label", ")", ")", ".", "reshape", "(", "label", ".", "shape", ")", "\n", "bw", "[", "i", "]", "=", "current_bw", "\n", "\n", "", "return", "bw", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.step1.all_slice_analysis": [[41, 102], ["skimage.measure.label", "int", "set", "skimage.measure.regionprops", "numpy.meshgrid", "skimage.measure.regionprops", "set", "numpy.in1d().reshape", "numpy.copy", "numpy.linspace", "numpy.linspace", "numpy.zeros", "numpy.zeros", "range", "numpy.copy", "numpy.copy", "scipy.ndimage.binary_dilation", "skimage.measure.label", "skimage.measure.label", "list", "set", "numpy.in1d().reshape", "len", "numpy.min", "numpy.average", "set.add", "numpy.in1d", "numpy.nonzero", "numpy.sum", "numpy.prod", "list", "set", "set.add", "numpy.in1d", "spacing.prod", "spacing.prod", "numpy.unique", "list", "numpy.max", "range"], "function", ["None"], ["", "def", "all_slice_analysis", "(", "bw", ",", "spacing", ",", "cut_num", "=", "0", ",", "vol_limit", "=", "[", "0.68", ",", "8.2", "]", ",", "area_th", "=", "6e3", ",", "dist_th", "=", "62", ")", ":", "\n", "# in some cases, several top layers need to be removed first", "\n", "    ", "if", "cut_num", ">", "0", ":", "\n", "        ", "bw0", "=", "np", ".", "copy", "(", "bw", ")", "\n", "bw", "[", "-", "cut_num", ":", "]", "=", "False", "\n", "", "label", "=", "measure", ".", "label", "(", "bw", ",", "connectivity", "=", "1", ")", "\n", "# remove components access to corners", "\n", "mid", "=", "int", "(", "label", ".", "shape", "[", "2", "]", "/", "2", ")", "\n", "bg_label", "=", "set", "(", "[", "label", "[", "0", ",", "0", ",", "0", "]", ",", "label", "[", "0", ",", "0", ",", "-", "1", "]", ",", "label", "[", "0", ",", "-", "1", ",", "0", "]", ",", "label", "[", "0", ",", "-", "1", ",", "-", "1", "]", ",", "label", "[", "-", "1", "-", "cut_num", ",", "0", ",", "0", "]", ",", "label", "[", "-", "1", "-", "cut_num", ",", "0", ",", "-", "1", "]", ",", "label", "[", "-", "1", "-", "cut_num", ",", "-", "1", ",", "0", "]", ",", "label", "[", "-", "1", "-", "cut_num", ",", "-", "1", ",", "-", "1", "]", ",", "label", "[", "0", ",", "0", ",", "mid", "]", ",", "label", "[", "0", ",", "-", "1", ",", "mid", "]", ",", "label", "[", "-", "1", "-", "cut_num", ",", "0", ",", "mid", "]", ",", "label", "[", "-", "1", "-", "cut_num", ",", "-", "1", ",", "mid", "]", "]", ")", "\n", "for", "l", "in", "bg_label", ":", "\n", "        ", "label", "[", "label", "==", "l", "]", "=", "0", "\n", "\n", "# select components based on volume", "\n", "", "properties", "=", "measure", ".", "regionprops", "(", "label", ")", "\n", "for", "prop", "in", "properties", ":", "\n", "        ", "if", "prop", ".", "area", "*", "spacing", ".", "prod", "(", ")", "<", "vol_limit", "[", "0", "]", "*", "1e6", "or", "prop", ".", "area", "*", "spacing", ".", "prod", "(", ")", ">", "vol_limit", "[", "1", "]", "*", "1e6", ":", "\n", "            ", "label", "[", "label", "==", "prop", ".", "label", "]", "=", "0", "\n", "\n", "# prepare a distance map for further analysis", "\n", "", "", "x_axis", "=", "np", ".", "linspace", "(", "-", "label", ".", "shape", "[", "1", "]", "/", "2", "+", "0.5", ",", "label", ".", "shape", "[", "1", "]", "/", "2", "-", "0.5", ",", "label", ".", "shape", "[", "1", "]", ")", "*", "spacing", "[", "1", "]", "\n", "y_axis", "=", "np", ".", "linspace", "(", "-", "label", ".", "shape", "[", "2", "]", "/", "2", "+", "0.5", ",", "label", ".", "shape", "[", "2", "]", "/", "2", "-", "0.5", ",", "label", ".", "shape", "[", "2", "]", ")", "*", "spacing", "[", "2", "]", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "x_axis", ",", "y_axis", ")", "\n", "d", "=", "(", "x", "**", "2", "+", "y", "**", "2", ")", "**", "0.5", "\n", "vols", "=", "measure", ".", "regionprops", "(", "label", ")", "\n", "valid_label", "=", "set", "(", ")", "\n", "# select components based on their area and distance to center axis on all slices", "\n", "for", "vol", "in", "vols", ":", "\n", "        ", "single_vol", "=", "label", "==", "vol", ".", "label", "\n", "slice_area", "=", "np", ".", "zeros", "(", "label", ".", "shape", "[", "0", "]", ")", "\n", "min_distance", "=", "np", ".", "zeros", "(", "label", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "slice_area", "[", "i", "]", "=", "np", ".", "sum", "(", "single_vol", "[", "i", "]", ")", "*", "np", ".", "prod", "(", "spacing", "[", "1", ":", "3", "]", ")", "\n", "min_distance", "[", "i", "]", "=", "np", ".", "min", "(", "single_vol", "[", "i", "]", "*", "d", "+", "(", "1", "-", "single_vol", "[", "i", "]", ")", "*", "np", ".", "max", "(", "d", ")", ")", "\n", "\n", "", "if", "np", ".", "average", "(", "[", "min_distance", "[", "i", "]", "for", "i", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", "if", "slice_area", "[", "i", "]", ">", "area_th", "]", ")", "<", "dist_th", ":", "\n", "            ", "valid_label", ".", "add", "(", "vol", ".", "label", ")", "\n", "\n", "", "", "bw", "=", "np", ".", "in1d", "(", "label", ",", "list", "(", "valid_label", ")", ")", ".", "reshape", "(", "label", ".", "shape", ")", "\n", "\n", "# fill back the parts removed earlier", "\n", "if", "cut_num", ">", "0", ":", "\n", "# bw1 is bw with removed slices, bw2 is a dilated version of bw, part of their intersection is returned as final mask", "\n", "        ", "bw1", "=", "np", ".", "copy", "(", "bw", ")", "\n", "bw1", "[", "-", "cut_num", ":", "]", "=", "bw0", "[", "-", "cut_num", ":", "]", "\n", "bw2", "=", "np", ".", "copy", "(", "bw", ")", "\n", "bw2", "=", "scipy", ".", "ndimage", ".", "binary_dilation", "(", "bw2", ",", "iterations", "=", "cut_num", ")", "\n", "bw3", "=", "bw1", "&", "bw2", "\n", "label", "=", "measure", ".", "label", "(", "bw", ",", "connectivity", "=", "1", ")", "\n", "label3", "=", "measure", ".", "label", "(", "bw3", ",", "connectivity", "=", "1", ")", "\n", "l_list", "=", "list", "(", "set", "(", "np", ".", "unique", "(", "label", ")", ")", "-", "{", "0", "}", ")", "\n", "valid_l3", "=", "set", "(", ")", "\n", "for", "l", "in", "l_list", ":", "\n", "            ", "indices", "=", "np", ".", "nonzero", "(", "label", "==", "l", ")", "\n", "l3", "=", "label3", "[", "indices", "[", "0", "]", "[", "0", "]", ",", "indices", "[", "1", "]", "[", "0", "]", ",", "indices", "[", "2", "]", "[", "0", "]", "]", "\n", "if", "l3", ">", "0", ":", "\n", "                ", "valid_l3", ".", "add", "(", "l3", ")", "\n", "", "", "bw", "=", "np", ".", "in1d", "(", "label3", ",", "list", "(", "valid_l3", ")", ")", ".", "reshape", "(", "label3", ".", "shape", ")", "\n", "\n", "", "return", "bw", ",", "len", "(", "valid_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.step1.fill_hole": [[103, 112], ["skimage.measure.label", "set", "numpy.in1d().reshape", "numpy.in1d", "list"], "function", ["None"], ["", "def", "fill_hole", "(", "bw", ")", ":", "\n", "# fill 3d holes", "\n", "    ", "label", "=", "measure", ".", "label", "(", "~", "bw", ")", "\n", "# idendify corner components", "\n", "bg_label", "=", "set", "(", "[", "label", "[", "0", ",", "0", ",", "0", "]", ",", "label", "[", "0", ",", "0", ",", "-", "1", "]", ",", "label", "[", "0", ",", "-", "1", ",", "0", "]", ",", "label", "[", "0", ",", "-", "1", ",", "-", "1", "]", ",", "label", "[", "-", "1", ",", "0", ",", "0", "]", ",", "label", "[", "-", "1", ",", "0", ",", "-", "1", "]", ",", "label", "[", "-", "1", ",", "-", "1", ",", "0", "]", ",", "label", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "]", ")", "\n", "bw", "=", "~", "np", ".", "in1d", "(", "label", ",", "list", "(", "bg_label", ")", ")", ".", "reshape", "(", "label", ".", "shape", ")", "\n", "\n", "return", "bw", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.step1.two_lung_only": [[116, 187], ["numpy.copy", "step1.two_lung_only.fill_2d_hole"], "function", ["None"], ["", "def", "two_lung_only", "(", "bw", ",", "spacing", ",", "max_iter", "=", "22", ",", "max_ratio", "=", "4.8", ")", ":", "\n", "    ", "def", "extract_main", "(", "bw", ",", "cover", "=", "0.95", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "bw", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "current_slice", "=", "bw", "[", "i", "]", "\n", "label", "=", "measure", ".", "label", "(", "current_slice", ")", "\n", "properties", "=", "measure", ".", "regionprops", "(", "label", ")", "\n", "properties", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "area", ",", "reverse", "=", "True", ")", "\n", "area", "=", "[", "prop", ".", "area", "for", "prop", "in", "properties", "]", "\n", "count", "=", "0", "\n", "sum", "=", "0", "\n", "while", "sum", "<", "np", ".", "sum", "(", "area", ")", "*", "cover", ":", "\n", "                ", "sum", "=", "sum", "+", "area", "[", "count", "]", "\n", "count", "=", "count", "+", "1", "\n", "", "filter", "=", "np", ".", "zeros", "(", "current_slice", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "for", "j", "in", "range", "(", "count", ")", ":", "\n", "                ", "bb", "=", "properties", "[", "j", "]", ".", "bbox", "\n", "filter", "[", "bb", "[", "0", "]", ":", "bb", "[", "2", "]", ",", "bb", "[", "1", "]", ":", "bb", "[", "3", "]", "]", "=", "filter", "[", "bb", "[", "0", "]", ":", "bb", "[", "2", "]", ",", "bb", "[", "1", "]", ":", "bb", "[", "3", "]", "]", "|", "properties", "[", "j", "]", ".", "convex_image", "\n", "", "bw", "[", "i", "]", "=", "bw", "[", "i", "]", "&", "filter", "\n", "\n", "", "label", "=", "measure", ".", "label", "(", "bw", ")", "\n", "properties", "=", "measure", ".", "regionprops", "(", "label", ")", "\n", "properties", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "area", ",", "reverse", "=", "True", ")", "\n", "bw", "=", "label", "==", "properties", "[", "0", "]", ".", "label", "\n", "\n", "return", "bw", "\n", "\n", "", "def", "fill_2d_hole", "(", "bw", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "bw", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "current_slice", "=", "bw", "[", "i", "]", "\n", "label", "=", "measure", ".", "label", "(", "current_slice", ")", "\n", "properties", "=", "measure", ".", "regionprops", "(", "label", ")", "\n", "for", "prop", "in", "properties", ":", "\n", "                ", "bb", "=", "prop", ".", "bbox", "\n", "current_slice", "[", "bb", "[", "0", "]", ":", "bb", "[", "2", "]", ",", "bb", "[", "1", "]", ":", "bb", "[", "3", "]", "]", "=", "current_slice", "[", "bb", "[", "0", "]", ":", "bb", "[", "2", "]", ",", "bb", "[", "1", "]", ":", "bb", "[", "3", "]", "]", "|", "prop", ".", "filled_image", "\n", "", "bw", "[", "i", "]", "=", "current_slice", "\n", "\n", "", "return", "bw", "\n", "\n", "", "found_flag", "=", "False", "\n", "iter_count", "=", "0", "\n", "bw0", "=", "np", ".", "copy", "(", "bw", ")", "\n", "while", "not", "found_flag", "and", "iter_count", "<", "max_iter", ":", "\n", "        ", "label", "=", "measure", ".", "label", "(", "bw", ",", "connectivity", "=", "2", ")", "\n", "properties", "=", "measure", ".", "regionprops", "(", "label", ")", "\n", "properties", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "area", ",", "reverse", "=", "True", ")", "\n", "if", "len", "(", "properties", ")", ">", "1", "and", "properties", "[", "0", "]", ".", "area", "/", "properties", "[", "1", "]", ".", "area", "<", "max_ratio", ":", "\n", "            ", "found_flag", "=", "True", "\n", "bw1", "=", "label", "==", "properties", "[", "0", "]", ".", "label", "\n", "bw2", "=", "label", "==", "properties", "[", "1", "]", ".", "label", "\n", "", "else", ":", "\n", "            ", "bw", "=", "scipy", ".", "ndimage", ".", "binary_erosion", "(", "bw", ")", "\n", "iter_count", "=", "iter_count", "+", "1", "\n", "\n", "", "", "if", "found_flag", ":", "\n", "        ", "d1", "=", "scipy", ".", "ndimage", ".", "morphology", ".", "distance_transform_edt", "(", "bw1", "==", "False", ",", "sampling", "=", "spacing", ")", "\n", "d2", "=", "scipy", ".", "ndimage", ".", "morphology", ".", "distance_transform_edt", "(", "bw2", "==", "False", ",", "sampling", "=", "spacing", ")", "\n", "bw1", "=", "bw0", "&", "(", "d1", "<", "d2", ")", "\n", "bw2", "=", "bw0", "&", "(", "d1", ">", "d2", ")", "\n", "\n", "bw1", "=", "extract_main", "(", "bw1", ")", "\n", "bw2", "=", "extract_main", "(", "bw2", ")", "\n", "\n", "", "else", ":", "\n", "        ", "bw1", "=", "bw0", "\n", "bw2", "=", "np", ".", "zeros", "(", "bw", ".", "shape", ")", ".", "astype", "(", "'bool'", ")", "\n", "\n", "", "bw1", "=", "fill_2d_hole", "(", "bw1", ")", "\n", "bw2", "=", "fill_2d_hole", "(", "bw2", ")", "\n", "bw", "=", "bw1", "|", "bw2", "\n", "\n", "return", "bw1", ",", "bw2", ",", "bw", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.step1.step1_python": [[188, 208], ["SimpleITK.ReadImage", "SimpleITK.GetArrayFromImage", "numpy.array", "numpy.array", "step1.binarize_per_slice", "numpy.copy", "step1.fill_hole", "step1.two_lung_only", "list", "list", "numpy.copy", "step1.all_slice_analysis", "reversed", "reversed", "sitk.ReadImage.GetSpacing", "sitk.ReadImage.GetOrigin"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.step1.binarize_per_slice", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.step1.fill_hole", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.step1.two_lung_only", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.step1.all_slice_analysis"], ["", "def", "step1_python", "(", "case_path", ")", ":", "\n", "\n", "    ", "itkimage", "=", "sitk", ".", "ReadImage", "(", "case_path", ")", "\n", "case_pixels", "=", "sitk", ".", "GetArrayFromImage", "(", "itkimage", ")", "\n", "spacing", "=", "np", ".", "array", "(", "list", "(", "reversed", "(", "itkimage", ".", "GetSpacing", "(", ")", ")", ")", ")", "\n", "origin", "=", "np", ".", "array", "(", "list", "(", "reversed", "(", "itkimage", ".", "GetOrigin", "(", ")", ")", ")", ")", "\n", "\n", "bw", "=", "binarize_per_slice", "(", "case_pixels", ",", "spacing", ")", "\n", "flag", "=", "0", "\n", "cut_num", "=", "0", "\n", "cut_step", "=", "2", "\n", "bw0", "=", "np", ".", "copy", "(", "bw", ")", "\n", "while", "flag", "==", "0", "and", "cut_num", "<", "bw", ".", "shape", "[", "0", "]", ":", "\n", "        ", "bw", "=", "np", ".", "copy", "(", "bw0", ")", "\n", "bw", ",", "flag", "=", "all_slice_analysis", "(", "bw", ",", "spacing", ",", "cut_num", "=", "cut_num", ",", "vol_limit", "=", "[", "0.68", ",", "7.5", "]", ")", "\n", "cut_num", "=", "cut_num", "+", "cut_step", "\n", "\n", "", "bw", "=", "fill_hole", "(", "bw", ")", "\n", "bw1", ",", "bw2", ",", "bw", "=", "two_lung_only", "(", "bw", ",", "spacing", ")", "\n", "return", "case_pixels", ",", "bw1", ",", "bw2", ",", "spacing", ",", "origin", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepare.resample": [[24, 42], ["len", "numpy.round", "scipy.ndimage.interpolation.zoom", "len", "range", "numpy.transpose", "ValueError", "prepare.resample", "np.transpose.append", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.resample"], ["def", "resample", "(", "imgs", ",", "spacing", ",", "new_spacing", ",", "order", "=", "2", ")", ":", "\n", "    ", "if", "len", "(", "imgs", ".", "shape", ")", "==", "3", ":", "\n", "        ", "new_shape", "=", "np", ".", "round", "(", "imgs", ".", "shape", "*", "spacing", "/", "new_spacing", ")", "\n", "true_spacing", "=", "spacing", "*", "imgs", ".", "shape", "/", "new_shape", "\n", "resize_factor", "=", "new_shape", "/", "imgs", ".", "shape", "\n", "imgs", "=", "zoom", "(", "imgs", ",", "resize_factor", ",", "mode", "=", "'nearest'", ",", "order", "=", "order", ")", "\n", "return", "imgs", ",", "true_spacing", "\n", "", "elif", "len", "(", "imgs", ".", "shape", ")", "==", "4", ":", "\n", "        ", "n", "=", "imgs", ".", "shape", "[", "-", "1", "]", "\n", "newimg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "slice", "=", "imgs", "[", ":", ",", ":", ",", ":", ",", "i", "]", "\n", "newslice", ",", "true_spacing", "=", "resample", "(", "slice", ",", "spacing", ",", "new_spacing", ")", "\n", "newimg", ".", "append", "(", "newslice", ")", "\n", "", "newimg", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "newimg", ")", ",", "[", "1", ",", "2", ",", "3", ",", "0", "]", ")", "\n", "return", "newimg", ",", "true_spacing", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'wrong shape'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepare.worldToVoxelCoord": [[43, 48], ["numpy.absolute"], "function", ["None"], ["", "", "def", "worldToVoxelCoord", "(", "worldCoord", ",", "origin", ",", "spacing", ")", ":", "\n", "\n", "    ", "stretchedVoxelCoord", "=", "np", ".", "absolute", "(", "worldCoord", "-", "origin", ")", "\n", "voxelCoord", "=", "stretchedVoxelCoord", "/", "spacing", "\n", "return", "voxelCoord", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepare.load_itk_image": [[49, 67], ["SimpleITK.ReadImage", "SimpleITK.GetArrayFromImage", "numpy.array", "numpy.array", "open", "f.readlines", "numpy.array().astype", "numpy.round", "numpy.any", "list", "list", "reversed", "reversed", "numpy.array", "numpy.array", "sitk.ReadImage.GetOrigin", "sitk.ReadImage.GetSpacing", "k.startswith", "[].split", "line.split"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split"], ["", "def", "load_itk_image", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "contents", "=", "f", ".", "readlines", "(", ")", "\n", "line", "=", "[", "k", "for", "k", "in", "contents", "if", "k", ".", "startswith", "(", "'TransformMatrix'", ")", "]", "[", "0", "]", "\n", "transformM", "=", "np", ".", "array", "(", "line", ".", "split", "(", "' = '", ")", "[", "1", "]", ".", "split", "(", "' '", ")", ")", ".", "astype", "(", "'float'", ")", "\n", "transformM", "=", "np", ".", "round", "(", "transformM", ")", "\n", "if", "np", ".", "any", "(", "transformM", "!=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", ")", ":", "\n", "            ", "isflip", "=", "True", "\n", "", "else", ":", "\n", "            ", "isflip", "=", "False", "\n", "\n", "", "", "itkimage", "=", "sitk", ".", "ReadImage", "(", "filename", ")", "\n", "numpyImage", "=", "sitk", ".", "GetArrayFromImage", "(", "itkimage", ")", "\n", "\n", "numpyOrigin", "=", "np", ".", "array", "(", "list", "(", "reversed", "(", "itkimage", ".", "GetOrigin", "(", ")", ")", ")", ")", "\n", "numpySpacing", "=", "np", ".", "array", "(", "list", "(", "reversed", "(", "itkimage", ".", "GetSpacing", "(", ")", ")", ")", ")", "\n", "\n", "return", "numpyImage", ",", "numpyOrigin", ",", "numpySpacing", ",", "isflip", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepare.process_mask": [[69, 83], ["numpy.copy", "range", "scipy.ndimage.morphology.generate_binary_structure", "scipy.ndimage.morphology.binary_dilation", "numpy.ascontiguousarray", "numpy.sum", "skimage.morphology.convex_hull_image", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "process_mask", "(", "mask", ")", ":", "\n", "    ", "convex_mask", "=", "np", ".", "copy", "(", "mask", ")", "\n", "for", "i_layer", "in", "range", "(", "convex_mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "mask1", "=", "np", ".", "ascontiguousarray", "(", "mask", "[", "i_layer", "]", ")", "\n", "if", "np", ".", "sum", "(", "mask1", ")", ">", "0", ":", "\n", "            ", "mask2", "=", "convex_hull_image", "(", "mask1", ")", "\n", "if", "np", ".", "sum", "(", "mask2", ")", ">", "1.5", "*", "np", ".", "sum", "(", "mask1", ")", ":", "\n", "                ", "mask2", "=", "mask1", "\n", "", "", "else", ":", "\n", "            ", "mask2", "=", "mask1", "\n", "", "convex_mask", "[", "i_layer", "]", "=", "mask2", "\n", "", "struct", "=", "generate_binary_structure", "(", "3", ",", "1", ")", "\n", "dilatedMask", "=", "binary_dilation", "(", "convex_mask", ",", "structure", "=", "struct", ",", "iterations", "=", "10", ")", "\n", "return", "dilatedMask", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepare.lumTrans": [[85, 92], ["numpy.array"], "function", ["None"], ["", "def", "lumTrans", "(", "img", ")", ":", "\n", "    ", "lungwin", "=", "np", ".", "array", "(", "[", "-", "1200.", ",", "600.", "]", ")", "\n", "newimg", "=", "(", "img", "-", "lungwin", "[", "0", "]", ")", "/", "(", "lungwin", "[", "1", "]", "-", "lungwin", "[", "0", "]", ")", "\n", "newimg", "[", "newimg", "<", "0", "]", "=", "0", "\n", "newimg", "[", "newimg", ">", "1", "]", "=", "1", "\n", "newimg", "=", "(", "newimg", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "return", "newimg", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepare.savenpy_luna": [[94, 173], ["numpy.array", "prepare.load_itk_image", "prepare.load_itk_image", "numpy.round().astype", "numpy.where", "numpy.array", "numpy.floor().astype", "numpy.copy", "print", "os.path.join", "os.path.join", "numpy.expand_dims", "numpy.vstack", "prepare.process_mask", "prepare.process_mask", "prepare.lumTrans", "prepare.resample", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.copy", "numpy.array", "numpy.save", "numpy.round", "numpy.expand_dims", "numpy.floor", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len", "numpy.array", "os.path.join", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.max", "prepare.worldToVoxelCoord", "np.array.append", "numpy.copy", "numpy.expand_dims", "numpy.expand_dims", "numpy.min", "float", "numpy.concatenate", "numpy.expand_dims", "numpy.array", "float"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepare.load_itk_image", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepare.load_itk_image", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.process_mask", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.process_mask", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.lumTrans", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.resample", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepare.worldToVoxelCoord"], ["", "def", "savenpy_luna", "(", "id", ",", "annos", ",", "filelist", ",", "luna_segment", ",", "luna_data", ",", "savepath", ")", ":", "\n", "    ", "islabel", "=", "True", "\n", "isClean", "=", "True", "\n", "resolution", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "#     resolution = np.array([2,2,2])", "\n", "name", "=", "filelist", "[", "id", "]", "\n", "\n", "sliceim", ",", "origin", ",", "spacing", ",", "isflip", "=", "load_itk_image", "(", "os", ".", "path", ".", "join", "(", "luna_data", ",", "name", "+", "'.mhd'", ")", ")", "\n", "\n", "Mask", ",", "origin", ",", "spacing", ",", "isflip", "=", "load_itk_image", "(", "os", ".", "path", ".", "join", "(", "luna_segment", ",", "name", "+", "'.mhd'", ")", ")", "\n", "if", "isflip", ":", "\n", "        ", "Mask", "=", "Mask", "[", ":", ",", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", "\n", "", "newshape", "=", "np", ".", "round", "(", "np", ".", "array", "(", "Mask", ".", "shape", ")", "*", "spacing", "/", "resolution", ")", ".", "astype", "(", "'int'", ")", "\n", "m1", "=", "Mask", "==", "3", "\n", "m2", "=", "Mask", "==", "4", "\n", "Mask", "=", "m1", "+", "m2", "\n", "\n", "xx", ",", "yy", ",", "zz", "=", "np", ".", "where", "(", "Mask", ")", "\n", "box", "=", "np", ".", "array", "(", "[", "[", "np", ".", "min", "(", "xx", ")", ",", "np", ".", "max", "(", "xx", ")", "]", ",", "[", "np", ".", "min", "(", "yy", ")", ",", "np", ".", "max", "(", "yy", ")", "]", ",", "[", "np", ".", "min", "(", "zz", ")", ",", "np", ".", "max", "(", "zz", ")", "]", "]", ")", "\n", "box", "=", "box", "*", "np", ".", "expand_dims", "(", "spacing", ",", "1", ")", "/", "np", ".", "expand_dims", "(", "resolution", ",", "1", ")", "\n", "box", "=", "np", ".", "floor", "(", "box", ")", ".", "astype", "(", "'int'", ")", "\n", "margin", "=", "5", "\n", "extendbox", "=", "np", ".", "vstack", "(", "[", "np", ".", "max", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "box", "[", ":", ",", "0", "]", "-", "margin", "]", ",", "0", ")", ",", "np", ".", "min", "(", "[", "newshape", ",", "box", "[", ":", ",", "1", "]", "+", "2", "*", "margin", "]", ",", "axis", "=", "0", ")", ".", "T", "]", ")", ".", "T", "\n", "\n", "this_annos", "=", "np", ".", "copy", "(", "annos", "[", "annos", "[", ":", ",", "0", "]", "==", "float", "(", "name", ")", "]", ")", "\n", "\n", "if", "isClean", ":", "\n", "        ", "convex_mask", "=", "m1", "\n", "dm1", "=", "process_mask", "(", "m1", ")", "\n", "dm2", "=", "process_mask", "(", "m2", ")", "\n", "dilatedMask", "=", "dm1", "+", "dm2", "\n", "Mask", "=", "m1", "+", "m2", "\n", "\n", "extramask", "=", "dilatedMask", "^", "Mask", "\n", "bone_thresh", "=", "210", "\n", "pad_value", "=", "170", "\n", "\n", "if", "isflip", ":", "\n", "            ", "sliceim", "=", "sliceim", "[", ":", ",", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", "\n", "print", "(", "'flip!'", ")", "\n", "", "sliceim", "=", "lumTrans", "(", "sliceim", ")", "\n", "sliceim", "=", "sliceim", "*", "dilatedMask", "+", "pad_value", "*", "(", "1", "-", "dilatedMask", ")", ".", "astype", "(", "'uint8'", ")", "\n", "bones", "=", "(", "sliceim", "*", "extramask", ")", ">", "bone_thresh", "\n", "sliceim", "[", "bones", "]", "=", "pad_value", "\n", "\n", "sliceim1", ",", "_", "=", "resample", "(", "sliceim", ",", "spacing", ",", "resolution", ",", "order", "=", "1", ")", "\n", "sliceim2", "=", "sliceim1", "[", "extendbox", "[", "0", ",", "0", "]", ":", "extendbox", "[", "0", ",", "1", "]", ",", "\n", "extendbox", "[", "1", ",", "0", "]", ":", "extendbox", "[", "1", ",", "1", "]", ",", "\n", "extendbox", "[", "2", ",", "0", "]", ":", "extendbox", "[", "2", ",", "1", "]", "]", "\n", "sliceim", "=", "sliceim2", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "savepath", ",", "name", "+", "'_clean.npy'", ")", ",", "sliceim", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "savepath", ",", "name", "+", "'_spacing.npy'", ")", ",", "spacing", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "savepath", ",", "name", "+", "'_extendbox.npy'", ")", ",", "extendbox", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "savepath", ",", "name", "+", "'_origin.npy'", ")", ",", "origin", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "savepath", ",", "name", "+", "'_mask.npy'", ")", ",", "Mask", ")", "\n", "\n", "", "if", "islabel", ":", "\n", "        ", "this_annos", "=", "np", ".", "copy", "(", "annos", "[", "annos", "[", ":", ",", "0", "]", "==", "float", "(", "name", ")", "]", ")", "\n", "label", "=", "[", "]", "\n", "if", "len", "(", "this_annos", ")", ">", "0", ":", "\n", "\n", "            ", "for", "c", "in", "this_annos", ":", "\n", "                ", "pos", "=", "worldToVoxelCoord", "(", "c", "[", "1", ":", "4", "]", "[", ":", ":", "-", "1", "]", ",", "origin", "=", "origin", ",", "spacing", "=", "spacing", ")", "\n", "if", "isflip", ":", "\n", "                    ", "pos", "[", "1", ":", "]", "=", "Mask", ".", "shape", "[", "1", ":", "3", "]", "-", "pos", "[", "1", ":", "]", "\n", "", "label", ".", "append", "(", "np", ".", "concatenate", "(", "[", "pos", ",", "[", "c", "[", "4", "]", "/", "spacing", "[", "1", "]", "]", "]", ")", ")", "\n", "\n", "", "", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "            ", "label2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "label2", "=", "np", ".", "copy", "(", "label", ")", ".", "T", "\n", "label2", "[", ":", "3", "]", "=", "label2", "[", ":", "3", "]", "*", "np", ".", "expand_dims", "(", "spacing", ",", "1", ")", "/", "np", ".", "expand_dims", "(", "resolution", ",", "1", ")", "\n", "label2", "[", "3", "]", "=", "label2", "[", "3", "]", "*", "spacing", "[", "1", "]", "/", "resolution", "[", "1", "]", "\n", "label2", "[", ":", "3", "]", "=", "label2", "[", ":", "3", "]", "-", "np", ".", "expand_dims", "(", "extendbox", "[", ":", ",", "0", "]", ",", "1", ")", "\n", "label2", "=", "label2", "[", ":", "4", "]", ".", "T", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "savepath", ",", "name", "+", "'_label.npy'", ")", ",", "label2", ")", "\n", "\n", "", "print", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepare.preprocess_luna": [[175, 201], ["print", "print", "open", "os.path.exists", "numpy.array", "multiprocessing.Pool", "functools.partial", "len", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "pandas.read_csv", "pandas.read_csv", "os.path.exists", "os.mkdir", "range", "open.split", "os.listdir", "open.endswith"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split"], ["", "def", "preprocess_luna", "(", ")", ":", "\n", "    ", "luna_segment", "=", "config", "[", "'luna_segment'", "]", "\n", "savepath", "=", "config", "[", "'preprocess_result_path'", "]", "\n", "luna_data", "=", "config", "[", "'luna_data'", "]", "\n", "luna_label", "=", "config", "[", "'luna_label'", "]", "\n", "finished_flag", "=", "'.flag_preprocessluna'", "\n", "print", "(", "'starting preprocessing luna'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "finished_flag", ")", ":", "\n", "        ", "filelist", "=", "[", "f", ".", "split", "(", "'.mhd'", ")", "[", "0", "]", "for", "f", "in", "os", ".", "listdir", "(", "luna_data", ")", "if", "f", ".", "endswith", "(", "'.mhd'", ")", "]", "\n", "annos", "=", "np", ".", "array", "(", "pandas", ".", "read_csv", "(", "luna_label", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savepath", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "savepath", ")", "\n", "\n", "\n", "", "pool", "=", "Pool", "(", ")", "\n", "partial_savenpy_luna", "=", "partial", "(", "savenpy_luna", ",", "annos", "=", "annos", ",", "filelist", "=", "filelist", ",", "\n", "luna_segment", "=", "luna_segment", ",", "luna_data", "=", "luna_data", ",", "savepath", "=", "savepath", ")", "\n", "\n", "N", "=", "len", "(", "filelist", ")", "\n", "#savenpy(1)", "\n", "_", "=", "pool", ".", "map", "(", "partial_savenpy_luna", ",", "range", "(", "N", ")", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "", "print", "(", "'end preprocessing luna'", ")", "\n", "f", "=", "open", "(", "finished_flag", ",", "\"w+\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepare.prepare_luna": [[203, 285], ["print", "print", "open", "os.path.exists", "numpy.array", "list", "os.listdir", "os.path.join", "os.path.exists", "os.mkdir", "pandas.read_csv", "pandas.read_csv", "os.listdir", "os.listdir.sort", "open.endswith", "os.listdir", "shutil.move", "print", "os.listdir", "open.endswith", "open", "open.readlines", "print", "open", "open.writelines", "shutil.move", "print", "os.listdir", "open.endswith", "open", "open.readlines", "print", "open", "open.writelines", "open.startswith", "os.path.isdir", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "file.split", "str", "os.path.join", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "file.split", "str", "os.path.join", "os.path.join", "list.index", "list.index", "len", "str", "len", "len", "len", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split"], ["", "def", "prepare_luna", "(", ")", ":", "\n", "    ", "print", "(", "'start changing luna name'", ")", "\n", "luna_raw", "=", "config", "[", "'luna_raw'", "]", "\n", "luna_abbr", "=", "config", "[", "'luna_abbr'", "]", "\n", "luna_data", "=", "config", "[", "'luna_data'", "]", "\n", "luna_segment", "=", "config", "[", "'luna_segment'", "]", "\n", "finished_flag", "=", "'.flag_prepareluna'", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "finished_flag", ")", ":", "\n", "\n", "        ", "subsetdirs", "=", "[", "os", ".", "path", ".", "join", "(", "luna_raw", ",", "f", ")", "for", "f", "in", "os", ".", "listdir", "(", "luna_raw", ")", "if", "f", ".", "startswith", "(", "'subset'", ")", "and", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "luna_raw", ",", "f", ")", ")", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "luna_data", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "luna_data", ")", "\n", "\n", "#         allnames = []", "\n", "#         for d in subsetdirs:", "\n", "#             files = os.listdir(d)", "\n", "#             names = [f[:-4] for f in files if f.endswith('mhd')]", "\n", "#             allnames = allnames + names", "\n", "#         allnames = np.array(allnames)", "\n", "#         allnames = np.sort(allnames)", "\n", "\n", "#         ids = np.arange(len(allnames)).astype('str')", "\n", "#         ids = np.array(['0'*(3-len(n))+n for n in ids])", "\n", "#         pds = pandas.DataFrame(np.array([ids,allnames]).T)", "\n", "#         namelist = list(allnames)", "\n", "\n", "", "abbrevs", "=", "np", ".", "array", "(", "pandas", ".", "read_csv", "(", "config", "[", "'luna_abbr'", "]", ",", "header", "=", "None", ")", ")", "\n", "namelist", "=", "list", "(", "abbrevs", "[", ":", ",", "1", "]", ")", "\n", "ids", "=", "abbrevs", "[", ":", ",", "0", "]", "\n", "\n", "for", "d", "in", "subsetdirs", ":", "\n", "            ", "files", "=", "os", ".", "listdir", "(", "d", ")", "\n", "files", ".", "sort", "(", ")", "\n", "for", "f", "in", "files", ":", "\n", "                ", "name", "=", "f", "[", ":", "-", "4", "]", "\n", "id", "=", "ids", "[", "namelist", ".", "index", "(", "name", ")", "]", "\n", "filename", "=", "'0'", "*", "(", "3", "-", "len", "(", "str", "(", "id", ")", ")", ")", "+", "str", "(", "id", ")", "\n", "shutil", ".", "move", "(", "os", ".", "path", ".", "join", "(", "d", ",", "f", ")", ",", "os", ".", "path", ".", "join", "(", "luna_data", ",", "filename", "+", "f", "[", "-", "4", ":", "]", ")", ")", "\n", "print", "(", "os", ".", "path", ".", "join", "(", "luna_data", ",", "str", "(", "id", ")", "+", "f", "[", "-", "4", ":", "]", ")", ")", "\n", "\n", "", "", "files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "luna_data", ")", "if", "f", ".", "endswith", "(", "'mhd'", ")", "]", "\n", "for", "file", "in", "files", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "luna_data", ",", "file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "content", "=", "f", ".", "readlines", "(", ")", "\n", "id", "=", "file", ".", "split", "(", "'.mhd'", ")", "[", "0", "]", "\n", "filename", "=", "'0'", "*", "(", "3", "-", "len", "(", "str", "(", "id", ")", ")", ")", "+", "str", "(", "id", ")", "\n", "content", "[", "-", "1", "]", "=", "'ElementDataFile = '", "+", "filename", "+", "'.raw\\n'", "\n", "print", "(", "content", "[", "-", "1", "]", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "luna_data", ",", "file", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "writelines", "(", "content", ")", "\n", "\n", "\n", "", "", "seglist", "=", "os", ".", "listdir", "(", "luna_segment", ")", "\n", "for", "f", "in", "seglist", ":", "\n", "            ", "if", "f", ".", "endswith", "(", "'.mhd'", ")", ":", "\n", "\n", "                ", "name", "=", "f", "[", ":", "-", "4", "]", "\n", "lastfix", "=", "f", "[", "-", "4", ":", "]", "\n", "", "else", ":", "\n", "                ", "name", "=", "f", "[", ":", "-", "5", "]", "\n", "lastfix", "=", "f", "[", "-", "5", ":", "]", "\n", "", "if", "name", "in", "namelist", ":", "\n", "                ", "id", "=", "ids", "[", "namelist", ".", "index", "(", "name", ")", "]", "\n", "filename", "=", "'0'", "*", "(", "3", "-", "len", "(", "str", "(", "id", ")", ")", ")", "+", "str", "(", "id", ")", "\n", "\n", "shutil", ".", "move", "(", "os", ".", "path", ".", "join", "(", "luna_segment", ",", "f", ")", ",", "os", ".", "path", ".", "join", "(", "luna_segment", ",", "filename", "+", "lastfix", ")", ")", "\n", "print", "(", "os", ".", "path", ".", "join", "(", "luna_segment", ",", "filename", "+", "lastfix", ")", ")", "\n", "\n", "\n", "", "", "files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "luna_segment", ")", "if", "f", ".", "endswith", "(", "'mhd'", ")", "]", "\n", "for", "file", "in", "files", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "luna_segment", ",", "file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "content", "=", "f", ".", "readlines", "(", ")", "\n", "id", "=", "file", ".", "split", "(", "'.mhd'", ")", "[", "0", "]", "\n", "filename", "=", "'0'", "*", "(", "3", "-", "len", "(", "str", "(", "id", ")", ")", ")", "+", "str", "(", "id", ")", "\n", "content", "[", "-", "1", "]", "=", "'ElementDataFile = '", "+", "filename", "+", "'.zraw\\n'", "\n", "print", "(", "content", "[", "-", "1", "]", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "luna_segment", ",", "file", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "writelines", "(", "content", ")", "\n", "", "", "", "print", "(", "'end changing luna name'", ")", "\n", "f", "=", "open", "(", "finished_flag", ",", "\"w+\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.resample": [[30, 48], ["len", "numpy.round", "scipy.ndimage.interpolation.zoom", "len", "range", "numpy.transpose", "ValueError", "prepareLIDC.resample", "np.transpose.append", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.resample"], ["def", "resample", "(", "imgs", ",", "spacing", ",", "new_spacing", ",", "order", "=", "2", ")", ":", "\n", "    ", "if", "len", "(", "imgs", ".", "shape", ")", "==", "3", ":", "\n", "        ", "new_shape", "=", "np", ".", "round", "(", "imgs", ".", "shape", "*", "spacing", "/", "new_spacing", ")", "\n", "true_spacing", "=", "spacing", "*", "imgs", ".", "shape", "/", "new_shape", "\n", "resize_factor", "=", "new_shape", "/", "imgs", ".", "shape", "\n", "imgs", "=", "zoom", "(", "imgs", ",", "resize_factor", ",", "mode", "=", "'nearest'", ",", "order", "=", "order", ")", "\n", "return", "imgs", ",", "true_spacing", "\n", "", "elif", "len", "(", "imgs", ".", "shape", ")", "==", "4", ":", "\n", "        ", "n", "=", "imgs", ".", "shape", "[", "-", "1", "]", "\n", "newimg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "slice", "=", "imgs", "[", ":", ",", ":", ",", ":", ",", "i", "]", "\n", "newslice", ",", "true_spacing", "=", "resample", "(", "slice", ",", "spacing", ",", "new_spacing", ")", "\n", "newimg", ".", "append", "(", "newslice", ")", "\n", "", "newimg", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "newimg", ")", ",", "[", "1", ",", "2", ",", "3", ",", "0", "]", ")", "\n", "return", "newimg", ",", "true_spacing", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'wrong shape'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.lumTrans": [[50, 57], ["numpy.array"], "function", ["None"], ["", "", "def", "lumTrans", "(", "img", ")", ":", "\n", "    ", "lungwin", "=", "np", ".", "array", "(", "[", "-", "1200.", ",", "600.", "]", ")", "\n", "newimg", "=", "(", "img", "-", "lungwin", "[", "0", "]", ")", "/", "(", "lungwin", "[", "1", "]", "-", "lungwin", "[", "0", "]", ")", "\n", "newimg", "[", "newimg", "<", "0", "]", "=", "0", "\n", "newimg", "[", "newimg", ">", "1", "]", "=", "1", "\n", "newimg", "=", "(", "newimg", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "return", "newimg", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.process_mask": [[59, 73], ["numpy.copy", "range", "scipy.ndimage.morphology.generate_binary_structure", "scipy.ndimage.morphology.binary_dilation", "numpy.ascontiguousarray", "numpy.sum", "skimage.morphology.convex_hull_image", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "process_mask", "(", "mask", ")", ":", "\n", "    ", "convex_mask", "=", "np", ".", "copy", "(", "mask", ")", "\n", "for", "i_layer", "in", "range", "(", "convex_mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "mask1", "=", "np", ".", "ascontiguousarray", "(", "mask", "[", "i_layer", "]", ")", "\n", "if", "np", ".", "sum", "(", "mask1", ")", ">", "0", ":", "\n", "            ", "mask2", "=", "convex_hull_image", "(", "mask1", ")", "\n", "if", "np", ".", "sum", "(", "mask2", ")", ">", "1.5", "*", "np", ".", "sum", "(", "mask1", ")", ":", "\n", "                ", "mask2", "=", "mask1", "\n", "", "", "else", ":", "\n", "            ", "mask2", "=", "mask1", "\n", "", "convex_mask", "[", "i_layer", "]", "=", "mask2", "\n", "", "struct", "=", "generate_binary_structure", "(", "3", ",", "1", ")", "\n", "dilatedMask", "=", "binary_dilation", "(", "convex_mask", ",", "structure", "=", "struct", ",", "iterations", "=", "10", ")", "\n", "return", "dilatedMask", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.savenpy": [[75, 136], ["numpy.array", "label[].astype", "step1.step1_python", "numpy.round", "numpy.where", "numpy.array", "numpy.floor().astype", "extendbox.astype.astype", "prepareLIDC.process_mask", "prepareLIDC.process_mask", "prepareLIDC.lumTrans", "prepareLIDC.resample", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print", "os.path.join", "numpy.expand_dims", "numpy.vstack", "dilatedMask.astype", "Mask.astype", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "numpy.array", "os.path.join", "numpy.expand_dims", "numpy.floor", "numpy.isnan", "numpy.copy", "numpy.expand_dims", "numpy.expand_dims", "numpy.array", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.max", "numpy.expand_dims", "numpy.min"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.step1.step1_python", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.process_mask", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.process_mask", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.lumTrans", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.resample"], ["", "def", "savenpy", "(", "id", ",", "annos", ",", "filelist", ",", "data_path", ",", "prep_folder", ")", ":", "\n", "    ", "resolution", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "name", "=", "filelist", "[", "id", "]", "\n", "shortname", "=", "name", "[", ":", "-", "7", "]", "\n", "label", "=", "annos", "[", "annos", "[", ":", ",", "0", "]", "==", "shortname", "]", "\n", "label", "=", "label", "[", ":", ",", "[", "3", ",", "1", ",", "2", ",", "4", "]", "]", ".", "astype", "(", "'float'", ")", "\n", "\n", "im", ",", "m1", ",", "m2", ",", "spacing", ",", "origin", "=", "step1_python", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "name", ")", ")", "\n", "Mask", "=", "m1", "+", "m2", "\n", "\n", "newshape", "=", "np", ".", "round", "(", "np", ".", "array", "(", "Mask", ".", "shape", ")", "*", "spacing", "/", "resolution", ")", "\n", "xx", ",", "yy", ",", "zz", "=", "np", ".", "where", "(", "Mask", ")", "\n", "box", "=", "np", ".", "array", "(", "[", "[", "np", ".", "min", "(", "xx", ")", ",", "np", ".", "max", "(", "xx", ")", "]", ",", "[", "np", ".", "min", "(", "yy", ")", ",", "np", ".", "max", "(", "yy", ")", "]", ",", "[", "np", ".", "min", "(", "zz", ")", ",", "np", ".", "max", "(", "zz", ")", "]", "]", ")", "\n", "box", "=", "box", "*", "np", ".", "expand_dims", "(", "spacing", ",", "1", ")", "/", "np", ".", "expand_dims", "(", "resolution", ",", "1", ")", "\n", "box", "=", "np", ".", "floor", "(", "box", ")", ".", "astype", "(", "'int'", ")", "\n", "margin", "=", "5", "\n", "extendbox", "=", "np", ".", "vstack", "(", "[", "np", ".", "max", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "box", "[", ":", ",", "0", "]", "-", "margin", "]", ",", "0", ")", ",", "np", ".", "min", "(", "[", "newshape", ",", "box", "[", ":", ",", "1", "]", "+", "2", "*", "margin", "]", ",", "axis", "=", "0", ")", ".", "T", "]", ")", ".", "T", "\n", "extendbox", "=", "extendbox", ".", "astype", "(", "'int'", ")", "\n", "\n", "convex_mask", "=", "m1", "\n", "dm1", "=", "process_mask", "(", "m1", ")", "\n", "dm2", "=", "process_mask", "(", "m2", ")", "\n", "dilatedMask", "=", "dm1", "+", "dm2", "\n", "Mask", "=", "m1", "+", "m2", "\n", "extramask", "=", "dilatedMask", ".", "astype", "(", "np", ".", "int", ")", "-", "Mask", ".", "astype", "(", "np", ".", "int", ")", "\n", "bone_thresh", "=", "210", "\n", "pad_value", "=", "170", "\n", "im", "[", "np", ".", "isnan", "(", "im", ")", "]", "=", "-", "2000", "\n", "sliceim", "=", "lumTrans", "(", "im", ")", "\n", "sliceim", "=", "sliceim", "*", "dilatedMask", "+", "pad_value", "*", "(", "1", "-", "dilatedMask", ")", ".", "astype", "(", "'uint8'", ")", "\n", "bones", "=", "sliceim", "*", "extramask", ">", "bone_thresh", "\n", "sliceim", "[", "bones", "]", "=", "pad_value", "\n", "sliceim1", ",", "_", "=", "resample", "(", "sliceim", ",", "spacing", ",", "resolution", ",", "order", "=", "1", ")", "\n", "sliceim2", "=", "sliceim1", "[", "extendbox", "[", "0", ",", "0", "]", ":", "extendbox", "[", "0", ",", "1", "]", ",", "\n", "extendbox", "[", "1", ",", "0", "]", ":", "extendbox", "[", "1", ",", "1", "]", ",", "\n", "extendbox", "[", "2", ",", "0", "]", ":", "extendbox", "[", "2", ",", "1", "]", "]", "\n", "sliceim", "=", "sliceim2", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "\n", "#save image into nii.gz to check", "\n", "#    import nibabel as nib", "\n", "#    new_image = nib.Nifti1Image(np.squeeze(sliceim), affine=np.eye(4))", "\n", "#    nib.save(new_image, os.path.join('./','test4d.nii.gz'))", "\n", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "prep_folder", ",", "shortname", "+", "'_clean.npy'", ")", ",", "sliceim", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "prep_folder", ",", "shortname", "+", "'_spacing.npy'", ")", ",", "spacing", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "prep_folder", ",", "shortname", "+", "'_extendbox.npy'", ")", ",", "extendbox", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "prep_folder", ",", "shortname", "+", "'_origin.npy'", ")", ",", "origin", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "prep_folder", ",", "shortname", "+", "'_mask.npy'", ")", ",", "Mask", ")", "\n", "\n", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "        ", "label2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "label2", "=", "np", ".", "copy", "(", "label", ")", ".", "T", "\n", "label2", "[", ":", "3", "]", "=", "label2", "[", ":", "3", "]", "[", "[", "0", ",", "2", ",", "1", "]", "]", "\n", "label2", "[", ":", "3", "]", "=", "label2", "[", ":", "3", "]", "*", "np", ".", "expand_dims", "(", "spacing", ",", "1", ")", "/", "np", ".", "expand_dims", "(", "resolution", ",", "1", ")", "\n", "label2", "[", "3", "]", "=", "label2", "[", "3", "]", "*", "spacing", "[", "1", "]", "/", "resolution", "[", "1", "]", "\n", "label2", "[", ":", "3", "]", "=", "label2", "[", ":", "3", "]", "-", "np", ".", "expand_dims", "(", "extendbox", "[", ":", ",", "0", "]", ",", "1", ")", "\n", "label2", "=", "label2", "[", ":", "4", "]", ".", "T", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "prep_folder", ",", "shortname", "+", "'_label.npy'", ")", ",", "label2", ")", "\n", "print", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.None.prepareLIDC.full_prep": [[138, 161], ["warnings.filterwarnings", "numpy.array", "os.listdir", "print", "multiprocessing.Pool", "functools.partial", "len", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "pandas.read_csv", "os.path.exists", "os.mkdir", "range"], "function", ["None"], ["", "def", "full_prep", "(", ")", ":", "\n", "    ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "prep_folder", "=", "\"/data/LunaProj/LIDC/processed/\"", "\n", "data_path", "=", "\"/data/LunaProj/LIDC/merged/\"", "\n", "\n", "alllabelfiles", "=", "\"/LungNodule_DL/LIDC/labels/new_nodule.csv\"", "#this is the file contains all nodule locations for LIDC", "\n", "\n", "alllabel", "=", "np", ".", "array", "(", "pandas", ".", "read_csv", "(", "alllabelfiles", ")", ")", "\n", "filelist", "=", "os", ".", "listdir", "(", "data_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "prep_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "prep_folder", ")", "\n", "\n", "", "print", "(", "'starting preprocessing'", ")", "\n", "pool", "=", "Pool", "(", ")", "\n", "partial_savenpy", "=", "partial", "(", "savenpy", ",", "annos", "=", "alllabel", ",", "filelist", "=", "filelist", ",", "data_path", "=", "data_path", ",", "prep_folder", "=", "prep_folder", ")", "\n", "\n", "N", "=", "len", "(", "filelist", ")", "\n", "_", "=", "pool", ".", "map", "(", "partial_savenpy", ",", "range", "(", "N", ")", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "print", "(", "'end preprocessing'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.SELayer.__init__": [[7, 15], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool3d", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.SELayer.forward": [[17, 22], ["x.size", "layers_se.SELayer.avg_pool().view", "layers_se.SELayer.fc().view", "layers_se.SELayer.avg_pool", "layers_se.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.PostRes.__init__": [[25, 40], ["torch.nn.Module.__init__", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "layers_se.SELayer", "torch.nn.Sequential", "torch.nn.Conv3d", "torch.nn.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_out", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PostRes", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "n_in", ",", "n_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "n_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "n_out", ",", "n_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "n_out", ")", "\n", "self", ".", "se", "=", "SELayer", "(", "n_out", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "n_out", "!=", "n_in", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n_in", ",", "n_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n_out", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.PostRes.forward": [[41, 55], ["layers_se.PostRes.conv1", "layers_se.PostRes.bn1", "layers_se.PostRes.relu", "layers_se.PostRes.conv2", "layers_se.PostRes.bn2", "layers_se.PostRes.se", "layers_se.PostRes.relu", "layers_se.PostRes.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.Rec3.__init__": [[57, 119], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n0", ",", "n1", ",", "n2", ",", "n3", ",", "p", "=", "0.0", ",", "integrate", "=", "True", ")", ":", "\n", "        ", "super", "(", "Rec3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block01", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n0", ",", "n1", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ")", "\n", "\n", "self", ".", "block11", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ")", "\n", "\n", "self", ".", "block21", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "n2", ",", "n1", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ")", "\n", "\n", "self", ".", "block12", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ")", "\n", "\n", "self", ".", "block22", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ")", "\n", "\n", "self", ".", "block32", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "n3", ",", "n2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ")", "\n", "\n", "self", ".", "block23", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n3", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n3", ",", "n3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ")", "\n", "\n", "self", ".", "block33", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n3", ",", "n3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n3", ",", "n3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "integrate", "=", "integrate", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.Rec3.forward": [[120, 137], ["torch.bernoulli", "layers_se.Rec3.relu", "layers_se.Rec3.relu", "layers_se.Rec3.relu", "torch.ones", "layers_se.Rec3.block21", "layers_se.Rec3.block32", "layers_se.Rec3.block23", "layers_se.Rec3.block33", "layers_se.Rec3.block21", "layers_se.Rec3.block32", "layers_se.Rec3.block23", "layers_se.Rec3.block33", "layers_se.Rec3.block01", "layers_se.Rec3.block11", "layers_se.Rec3.block12", "layers_se.Rec3.block22", "layers_se.Rec3.block01", "layers_se.Rec3.block11", "layers_se.Rec3.block12", "layers_se.Rec3.block22"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ",", "x1", ",", "x2", ",", "x3", ")", ":", "\n", "        ", "if", "self", ".", "p", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "coef", "=", "torch", ".", "bernoulli", "(", "(", "1.0", "-", "self", ".", "p", ")", "*", "torch", ".", "ones", "(", "8", ")", ")", "\n", "out1", "=", "coef", "[", "0", "]", "*", "self", ".", "block01", "(", "x0", ")", "+", "coef", "[", "1", "]", "*", "self", ".", "block11", "(", "x1", ")", "+", "coef", "[", "2", "]", "*", "self", ".", "block21", "(", "x2", ")", "\n", "out2", "=", "coef", "[", "3", "]", "*", "self", ".", "block12", "(", "x1", ")", "+", "coef", "[", "4", "]", "*", "self", ".", "block22", "(", "x2", ")", "+", "coef", "[", "5", "]", "*", "self", ".", "block32", "(", "x3", ")", "\n", "out3", "=", "coef", "[", "6", "]", "*", "self", ".", "block23", "(", "x2", ")", "+", "coef", "[", "7", "]", "*", "self", ".", "block33", "(", "x3", ")", "\n", "", "else", ":", "\n", "            ", "out1", "=", "(", "1", "-", "self", ".", "p", ")", "*", "(", "self", ".", "block01", "(", "x0", ")", "+", "self", ".", "block11", "(", "x1", ")", "+", "self", ".", "block21", "(", "x2", ")", ")", "\n", "out2", "=", "(", "1", "-", "self", ".", "p", ")", "*", "(", "self", ".", "block12", "(", "x1", ")", "+", "self", ".", "block22", "(", "x2", ")", "+", "self", ".", "block32", "(", "x3", ")", ")", "\n", "out3", "=", "(", "1", "-", "self", ".", "p", ")", "*", "(", "self", ".", "block23", "(", "x2", ")", "+", "self", ".", "block33", "(", "x3", ")", ")", "\n", "\n", "", "if", "self", ".", "integrate", ":", "\n", "            ", "out1", "+=", "x1", "\n", "out2", "+=", "x2", "\n", "out3", "+=", "x3", "\n", "\n", "", "return", "x0", ",", "self", ".", "relu", "(", "out1", ")", ",", "self", ".", "relu", "(", "out2", ")", ",", "self", ".", "relu", "(", "out3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.Loss.__init__": [[145, 151], ["torch.nn.Module.__init__", "torch.nn.Sigmoid", "torch.nn.BCELoss", "torch.nn.SmoothL1Loss"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_hard", "=", "0", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "classify_loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "regress_loss", "=", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "num_hard", "=", "num_hard", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.Loss.forward": [[152, 207], ["labels.view.view.size", "output.view.view.view", "labels.view.view.view", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "output[].view", "labels[].view", "layers_se.Loss.sigmoid", "classify_loss.item", "len", "pos_idcs.unsqueeze().expand.unsqueeze().expand.size", "layers_se.hard_mining", "len", "layers_se.Loss.sigmoid", "len", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze", "layers_se.Loss.regress_loss", "layers_se.Loss.regress_loss", "layers_se.Loss.regress_loss", "layers_se.Loss.regress_loss", "l.item", "layers_se.Loss.classify_loss", "layers_se.Loss.classify_loss", "layers_se.Loss.classify_loss"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.hard_mining", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid"], ["", "def", "forward", "(", "self", ",", "output", ",", "labels", ",", "train", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "labels", ".", "size", "(", "0", ")", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "pos_idcs", "=", "labels", "[", ":", ",", "0", "]", ">", "0.5", "\n", "pos_idcs", "=", "pos_idcs", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "pos_idcs", ".", "size", "(", "0", ")", ",", "5", ")", "\n", "pos_output", "=", "output", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "pos_labels", "=", "labels", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "neg_idcs", "=", "labels", "[", ":", ",", "0", "]", "<", "-", "0.5", "\n", "neg_output", "=", "output", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "neg_labels", "=", "labels", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "\n", "if", "self", ".", "num_hard", ">", "0", "and", "train", ":", "\n", "            ", "neg_output", ",", "neg_labels", "=", "hard_mining", "(", "neg_output", ",", "neg_labels", ",", "self", ".", "num_hard", "*", "batch_size", ")", "\n", "", "neg_prob", "=", "self", ".", "sigmoid", "(", "neg_output", ")", "\n", "\n", "#classify_loss = self.classify_loss(", "\n", "#   torch.cat((pos_prob, neg_prob), 0),", "\n", "#  torch.cat((pos_labels[:, 0], neg_labels + 1), 0))", "\n", "if", "len", "(", "pos_output", ")", ">", "0", ":", "\n", "            ", "pos_prob", "=", "self", ".", "sigmoid", "(", "pos_output", "[", ":", ",", "0", "]", ")", "\n", "pz", ",", "ph", ",", "pw", ",", "pd", "=", "pos_output", "[", ":", ",", "1", "]", ",", "pos_output", "[", ":", ",", "2", "]", ",", "pos_output", "[", ":", ",", "3", "]", ",", "pos_output", "[", ":", ",", "4", "]", "\n", "lz", ",", "lh", ",", "lw", ",", "ld", "=", "pos_labels", "[", ":", ",", "1", "]", ",", "pos_labels", "[", ":", ",", "2", "]", ",", "pos_labels", "[", ":", ",", "3", "]", ",", "pos_labels", "[", ":", ",", "4", "]", "\n", "\n", "regress_losses", "=", "[", "\n", "self", ".", "regress_loss", "(", "pz", ",", "lz", ")", ",", "\n", "self", ".", "regress_loss", "(", "ph", ",", "lh", ")", ",", "\n", "self", ".", "regress_loss", "(", "pw", ",", "lw", ")", ",", "\n", "self", ".", "regress_loss", "(", "pd", ",", "ld", ")", "]", "\n", "regress_losses_data", "=", "[", "l", ".", "item", "(", ")", "for", "l", "in", "regress_losses", "]", "\n", "classify_loss", "=", "0.5", "*", "self", ".", "classify_loss", "(", "\n", "pos_prob", ",", "pos_labels", "[", ":", ",", "0", "]", ")", "+", "0.5", "*", "self", ".", "classify_loss", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "pos_correct", "=", "(", "pos_prob", ".", "data", ">=", "0.5", ")", ".", "sum", "(", ")", "\n", "pos_total", "=", "len", "(", "pos_prob", ")", "\n", "\n", "", "else", ":", "\n", "            ", "regress_losses", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "classify_loss", "=", "0.5", "*", "self", ".", "classify_loss", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "pos_correct", "=", "0", "\n", "pos_total", "=", "0", "\n", "regress_losses_data", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "classify_loss_data", "=", "classify_loss", ".", "item", "(", ")", "\n", "\n", "loss", "=", "classify_loss", "\n", "for", "regress_loss", "in", "regress_losses", ":", "\n", "            ", "loss", "+=", "regress_loss", "\n", "\n", "", "neg_correct", "=", "(", "neg_prob", ".", "data", "<", "0.5", ")", ".", "sum", "(", ")", "\n", "neg_total", "=", "len", "(", "neg_prob", ")", "\n", "\n", "return", "[", "loss", ",", "classify_loss_data", "]", "+", "regress_losses_data", "+", "[", "pos_correct", ",", "pos_total", ",", "neg_correct", ",", "neg_total", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.BinaryFocalLoss.__init__": [[210, 216], ["torch.nn.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "alpha", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "BinaryFocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "size_average", "=", "size_average", "\n", "print", "(", "\"FOCAL LOSS\"", ",", "gamma", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.BinaryFocalLoss.forward": [[217, 242], ["target.unsqueeze.unsqueeze.float", "target.unsqueeze.unsqueeze.float", "pt.log", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.unsqueeze", "target.unsqueeze.unsqueeze.dim", "target.unsqueeze.unsqueeze.unsqueeze", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "loss.mean", "loss.sum", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "target", "=", "target", ".", "float", "(", ")", "\n", "if", "input", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "input", "=", "input", ".", "unsqueeze", "(", "1", ")", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# N,C,H,W => N,C,H*W", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "\n", "#target = target.view(-1,1)", "\n", "", "target", "=", "target", ".", "float", "(", ")", "\n", "pt", "=", "input", "*", "target", "+", "(", "1", "-", "input", ")", "*", "(", "1", "-", "target", ")", "\n", "logpt", "=", "pt", ".", "log", "(", ")", "\n", "at", "=", "(", "1", "-", "self", ".", "alpha", ")", "*", "target", "+", "(", "self", ".", "alpha", ")", "*", "(", "1", "-", "target", ")", "\n", "logpt", "=", "logpt", "*", "at", "\n", "\n", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.FocalLoss.__init__": [[244, 250], ["torch.nn.Module.__init__", "torch.nn.Sigmoid", "layers_se.BinaryFocalLoss", "torch.nn.SmoothL1Loss"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_hard", "=", "0", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "classify_loss", "=", "BinaryFocalLoss", "(", "gamma", "=", "2", ",", "alpha", "=", "0.5", ",", "size_average", "=", "False", ")", "\n", "self", ".", "regress_loss", "=", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "num_hard", "=", "num_hard", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.FocalLoss.forward": [[251, 307], ["labels.view.view.size", "output.view.view.view", "labels.view.view.view", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "output[].view", "labels[].view", "layers_se.FocalLoss.sigmoid", "layers_se.FocalLoss.item", "len", "pos_idcs.unsqueeze().expand.unsqueeze().expand.size", "layers_se.hard_mining", "len", "layers_se.FocalLoss.sigmoid", "len", "layers_se.FocalLoss.classify_loss.forward", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze", "layers_se.FocalLoss.regress_loss", "layers_se.FocalLoss.regress_loss", "layers_se.FocalLoss.regress_loss", "layers_se.FocalLoss.regress_loss", "l.item", "layers_se.FocalLoss.classify_loss.forward", "layers_se.FocalLoss.classify_loss.forward", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.hard_mining", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.Net.forward", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.Net.forward", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.Net.forward"], ["", "def", "forward", "(", "self", ",", "output", ",", "labels", ",", "train", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "labels", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "pos_idcs", "=", "labels", "[", ":", ",", "0", "]", ">", "0.5", "\n", "\n", "pos_idcs", "=", "pos_idcs", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "pos_idcs", ".", "size", "(", "0", ")", ",", "5", ")", "\n", "pos_output", "=", "output", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "pos_labels", "=", "labels", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "neg_idcs", "=", "labels", "[", ":", ",", "0", "]", "<", "-", "0.5", "\n", "neg_output", "=", "output", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "neg_labels", "=", "labels", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "\n", "if", "self", ".", "num_hard", ">", "0", "and", "train", ":", "\n", "            ", "neg_output", ",", "neg_labels", "=", "hard_mining", "(", "neg_output", ",", "neg_labels", ",", "self", ".", "num_hard", "*", "batch_size", ")", "\n", "", "neg_prob", "=", "self", ".", "sigmoid", "(", "neg_output", ")", "\n", "\n", "if", "len", "(", "pos_output", ")", ">", "0", ":", "\n", "            ", "pos_prob", "=", "self", ".", "sigmoid", "(", "pos_output", "[", ":", ",", "0", "]", ")", "\n", "pz", ",", "ph", ",", "pw", ",", "pd", "=", "pos_output", "[", ":", ",", "1", "]", ",", "pos_output", "[", ":", ",", "2", "]", ",", "pos_output", "[", ":", ",", "3", "]", ",", "pos_output", "[", ":", ",", "4", "]", "\n", "lz", ",", "lh", ",", "lw", ",", "ld", "=", "pos_labels", "[", ":", ",", "1", "]", ",", "pos_labels", "[", ":", ",", "2", "]", ",", "pos_labels", "[", ":", ",", "3", "]", ",", "pos_labels", "[", ":", ",", "4", "]", "\n", "\n", "regress_losses", "=", "[", "\n", "self", ".", "regress_loss", "(", "pz", ",", "lz", ")", ",", "\n", "self", ".", "regress_loss", "(", "ph", ",", "lh", ")", ",", "\n", "self", ".", "regress_loss", "(", "pw", ",", "lw", ")", ",", "\n", "self", ".", "regress_loss", "(", "pd", ",", "ld", ")", "]", "\n", "regress_losses_data", "=", "[", "l", ".", "item", "(", ")", "for", "l", "in", "regress_losses", "]", "\n", "classify_loss", "=", "self", ".", "classify_loss", ".", "forward", "(", "\n", "pos_prob", ",", "pos_labels", "[", ":", ",", "0", "]", ")", "+", "self", ".", "classify_loss", ".", "forward", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "classify_loss", "=", "classify_loss", "/", "(", "len", "(", "pos_prob", ")", "+", "len", "(", "neg_prob", ")", ")", "\n", "pos_correct", "=", "(", "pos_prob", ".", "data", ">=", "0.5", ")", ".", "sum", "(", ")", "\n", "pos_total", "=", "len", "(", "pos_prob", ")", "\n", "\n", "", "else", ":", "\n", "            ", "regress_losses", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "classify_loss", "=", "self", ".", "classify_loss", ".", "forward", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "classify_loss", "=", "classify_loss", "/", "len", "(", "neg_prob", ")", "\n", "pos_correct", "=", "0", "\n", "pos_total", "=", "0", "\n", "regress_losses_data", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "classify_loss_data", "=", "classify_loss", ".", "item", "(", ")", "\n", "\n", "loss", "=", "classify_loss", "\n", "for", "regress_loss", "in", "regress_losses", ":", "\n", "            ", "loss", "+=", "regress_loss", "\n", "\n", "", "neg_correct", "=", "(", "neg_prob", ".", "data", "<", "0.5", ")", ".", "sum", "(", ")", "\n", "neg_total", "=", "len", "(", "neg_prob", ")", "\n", "\n", "return", "[", "loss", ",", "classify_loss_data", "]", "+", "regress_losses_data", "+", "[", "pos_correct", ",", "pos_total", ",", "neg_correct", ",", "neg_total", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.GetPBB.__init__": [[309, 312], ["numpy.asarray"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "stride", "=", "config", "[", "'stride'", "]", "\n", "self", ".", "anchors", "=", "np", ".", "asarray", "(", "config", "[", "'anchors'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.GetPBB.__call__": [[313, 335], ["numpy.copy", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.where", "numpy.arange.reshape", "numpy.arange.reshape", "numpy.arange.reshape", "numpy.exp", "anchors.reshape", "float", "anchors.reshape", "anchors.reshape", "anchors.reshape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "output", ",", "thresh", "=", "-", "3", ",", "ismask", "=", "False", ")", ":", "\n", "        ", "stride", "=", "self", ".", "stride", "\n", "anchors", "=", "self", ".", "anchors", "\n", "output", "=", "np", ".", "copy", "(", "output", ")", "\n", "offset", "=", "(", "float", "(", "stride", ")", "-", "1", ")", "/", "2", "\n", "output_size", "=", "output", ".", "shape", "\n", "oz", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "0", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "oh", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "1", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "ow", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "2", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "=", "oz", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "+", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "=", "oh", ".", "reshape", "(", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "+", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "3", "]", "=", "ow", ".", "reshape", "(", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", ")", "+", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "3", "]", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "4", "]", "=", "np", ".", "exp", "(", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "4", "]", ")", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "mask", "=", "output", "[", "...", ",", "0", "]", ">", "thresh", "\n", "xx", ",", "yy", ",", "zz", ",", "aa", "=", "np", ".", "where", "(", "mask", ")", "\n", "\n", "output", "=", "output", "[", "xx", ",", "yy", ",", "zz", ",", "aa", "]", "\n", "if", "ismask", ":", "\n", "            ", "return", "output", ",", "[", "xx", ",", "yy", ",", "zz", ",", "aa", "]", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.hard_mining": [[138, 143], ["torch.topk", "torch.index_select", "torch.index_select", "min", "len"], "function", ["None"], ["", "", "def", "hard_mining", "(", "neg_output", ",", "neg_labels", ",", "num_hard", ")", ":", "\n", "    ", "_", ",", "idcs", "=", "torch", ".", "topk", "(", "neg_output", ",", "min", "(", "num_hard", ",", "len", "(", "neg_output", ")", ")", ")", "\n", "neg_output", "=", "torch", ".", "index_select", "(", "neg_output", ",", "0", ",", "idcs", ")", "\n", "neg_labels", "=", "torch", ".", "index_select", "(", "neg_labels", ",", "0", ",", "idcs", ")", "\n", "return", "neg_output", ",", "neg_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.nms": [[338, 357], ["numpy.arange", "numpy.asarray", "len", "len", "range", "numpy.argsort", "len", "np.asarray.append", "layers_se.iou"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.iou"], ["", "", "", "def", "nms", "(", "output", ",", "nms_th", ")", ":", "\n", "    ", "if", "len", "(", "output", ")", "==", "0", ":", "\n", "        ", "return", "output", "\n", "\n", "", "output", "=", "output", "[", "np", ".", "argsort", "(", "-", "output", "[", ":", ",", "0", "]", ")", "]", "\n", "bboxes", "=", "[", "output", "[", "0", "]", "]", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "1", ",", "len", "(", "output", ")", ")", ":", "\n", "        ", "bbox", "=", "output", "[", "i", "]", "\n", "flag", "=", "1", "\n", "for", "j", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "            ", "if", "iou", "(", "bbox", "[", "1", ":", "5", "]", ",", "bboxes", "[", "j", "]", "[", "1", ":", "5", "]", ")", ">=", "nms_th", ":", "\n", "                ", "flag", "=", "-", "1", "\n", "break", "\n", "", "", "if", "flag", "==", "1", ":", "\n", "            ", "bboxes", ".", "append", "(", "bbox", ")", "\n", "\n", "", "", "bboxes", "=", "np", ".", "asarray", "(", "bboxes", ",", "np", ".", "float32", ")", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.iou": [[358, 375], ["range", "len", "overlap.append", "max", "min", "max"], "function", ["None"], ["", "def", "iou", "(", "box0", ",", "box1", ")", ":", "\n", "\n", "    ", "r0", "=", "box0", "[", "3", "]", "/", "2", "\n", "s0", "=", "box0", "[", ":", "3", "]", "-", "r0", "\n", "e0", "=", "box0", "[", ":", "3", "]", "+", "r0", "\n", "\n", "r1", "=", "box1", "[", "3", "]", "/", "2", "\n", "s1", "=", "box1", "[", ":", "3", "]", "-", "r1", "\n", "e1", "=", "box1", "[", ":", "3", "]", "+", "r1", "\n", "\n", "overlap", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "s0", ")", ")", ":", "\n", "        ", "overlap", ".", "append", "(", "max", "(", "0", ",", "min", "(", "e0", "[", "i", "]", ",", "e1", "[", "i", "]", ")", "-", "max", "(", "s0", "[", "i", "]", ",", "s1", "[", "i", "]", ")", ")", ")", "\n", "\n", "", "intersection", "=", "overlap", "[", "0", "]", "*", "overlap", "[", "1", "]", "*", "overlap", "[", "2", "]", "\n", "union", "=", "box0", "[", "3", "]", "*", "box0", "[", "3", "]", "*", "box0", "[", "3", "]", "+", "box1", "[", "3", "]", "*", "box1", "[", "3", "]", "*", "box1", "[", "3", "]", "-", "intersection", "\n", "return", "intersection", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.acc": [[376, 414], ["layers_se.nms", "numpy.zeros", "enumerate", "enumerate", "len", "len", "layers_se.iou", "fp.append", "tp.append", "fp.append", "numpy.concatenate", "iou.append", "len", "numpy.max", "fn.append", "numpy.concatenate", "numpy.concatenate", "layers_se.iou", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.nms", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.iou", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.iou"], ["", "def", "acc", "(", "pbb", ",", "lbb", ",", "conf_th", ",", "nms_th", ",", "detect_th", ")", ":", "\n", "    ", "pbb", "=", "pbb", "[", "pbb", "[", ":", ",", "0", "]", ">=", "conf_th", "]", "\n", "pbb", "=", "nms", "(", "pbb", ",", "nms_th", ")", "\n", "\n", "tp", "=", "[", "]", "\n", "fp", "=", "[", "]", "\n", "fn", "=", "[", "]", "\n", "l_flag", "=", "np", ".", "zeros", "(", "(", "len", "(", "lbb", ")", ",", ")", ",", "np", ".", "int32", ")", "\n", "for", "p", "in", "pbb", ":", "\n", "        ", "flag", "=", "0", "\n", "bestscore", "=", "0", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lbb", ")", ":", "\n", "            ", "score", "=", "iou", "(", "p", "[", "1", ":", "5", "]", ",", "l", ")", "\n", "if", "score", ">", "bestscore", ":", "\n", "                ", "bestscore", "=", "score", "\n", "besti", "=", "i", "\n", "", "", "if", "bestscore", ">", "detect_th", ":", "\n", "            ", "flag", "=", "1", "\n", "if", "l_flag", "[", "besti", "]", "==", "0", ":", "\n", "                ", "l_flag", "[", "besti", "]", "=", "1", "\n", "tp", ".", "append", "(", "np", ".", "concatenate", "(", "[", "p", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "fp", ".", "append", "(", "np", ".", "concatenate", "(", "[", "p", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "", "", "if", "flag", "==", "0", ":", "\n", "            ", "fp", ".", "append", "(", "np", ".", "concatenate", "(", "[", "p", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "", "", "for", "i", ",", "l", "in", "enumerate", "(", "lbb", ")", ":", "\n", "        ", "if", "l_flag", "[", "i", "]", "==", "0", ":", "\n", "            ", "score", "=", "[", "]", "\n", "for", "p", "in", "pbb", ":", "\n", "                ", "score", ".", "append", "(", "iou", "(", "p", "[", "1", ":", "5", "]", ",", "l", ")", ")", "\n", "", "if", "len", "(", "score", ")", "!=", "0", ":", "\n", "                ", "bestscore", "=", "np", ".", "max", "(", "score", ")", "\n", "", "else", ":", "\n", "                ", "bestscore", "=", "0", "\n", "", "if", "bestscore", "<", "detect_th", ":", "\n", "                ", "fn", ".", "append", "(", "np", ".", "concatenate", "(", "[", "l", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "\n", "", "", "", "return", "tp", ",", "fp", ",", "fn", ",", "len", "(", "lbb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.layers_se.topkpbb": [[415, 449], ["numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.concatenate", "len", "numpy.min", "numpy.array", "numpy.array", "numpy.array", "layers_se.acc", "numpy.argsort", "len", "numpy.concatenate", "len", "len", "len", "len", "numpy.array", "len", "numpy.array", "len", "numpy.array", "len", "len", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.acc"], ["", "def", "topkpbb", "(", "pbb", ",", "lbb", ",", "nms_th", ",", "detect_th", ",", "topk", "=", "30", ")", ":", "\n", "    ", "conf_th", "=", "0", "\n", "fp", "=", "[", "]", "\n", "tp", "=", "[", "]", "\n", "while", "len", "(", "tp", ")", "+", "len", "(", "fp", ")", "<", "topk", ":", "\n", "        ", "conf_th", "=", "conf_th", "-", "0.2", "\n", "tp", ",", "fp", ",", "fn", ",", "_", "=", "acc", "(", "pbb", ",", "lbb", ",", "conf_th", ",", "nms_th", ",", "detect_th", ")", "\n", "if", "conf_th", "<", "-", "3", ":", "\n", "            ", "break", "\n", "", "", "tp", "=", "np", ".", "array", "(", "tp", ")", ".", "reshape", "(", "[", "len", "(", "tp", ")", ",", "6", "]", ")", "\n", "fp", "=", "np", ".", "array", "(", "fp", ")", ".", "reshape", "(", "[", "len", "(", "fp", ")", ",", "6", "]", ")", "\n", "fn", "=", "np", ".", "array", "(", "fn", ")", ".", "reshape", "(", "[", "len", "(", "fn", ")", ",", "5", "]", ")", "\n", "allp", "=", "np", ".", "concatenate", "(", "[", "tp", ",", "fp", "]", ",", "0", ")", "\n", "sorting", "=", "np", ".", "argsort", "(", "allp", "[", ":", ",", "0", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "n_tp", "=", "len", "(", "tp", ")", "\n", "topk", "=", "np", ".", "min", "(", "[", "topk", ",", "len", "(", "allp", ")", "]", ")", "\n", "tp_in_topk", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "n_tp", ")", "if", "i", "in", "sorting", "[", ":", "topk", "]", "]", ")", "\n", "fp_in_topk", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "topk", ")", "if", "sorting", "[", "i", "]", "not", "in", "range", "(", "n_tp", ")", "]", ")", "\n", "#     print(fp_in_topk)", "\n", "fn_i", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "n_tp", ")", "if", "i", "not", "in", "sorting", "[", ":", "topk", "]", "]", ")", "\n", "newallp", "=", "allp", "[", ":", "topk", "]", "\n", "if", "len", "(", "fn_i", ")", ">", "0", ":", "\n", "        ", "fn", "=", "np", ".", "concatenate", "(", "[", "fn", ",", "tp", "[", "fn_i", ",", ":", "5", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "fn", "=", "fn", "\n", "", "if", "len", "(", "tp_in_topk", ")", ">", "0", ":", "\n", "        ", "tp", "=", "tp", "[", "tp_in_topk", "]", "\n", "", "else", ":", "\n", "        ", "tp", "=", "[", "]", "\n", "", "if", "len", "(", "fp_in_topk", ")", ">", "0", ":", "\n", "        ", "fp", "=", "newallp", "[", "fp_in_topk", "]", "\n", "", "else", ":", "\n", "        ", "fp", "=", "[", "]", "\n", "", "return", "tp", ",", "fp", ",", "fn", "\n", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.split_combine.SplitComb.__init__": [[4, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "side_len", ",", "max_stride", ",", "stride", ",", "margin", ",", "pad_value", ")", ":", "\n", "        ", "self", ".", "side_len", "=", "side_len", "\n", "self", ".", "max_stride", "=", "max_stride", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "pad_value", "=", "pad_value", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.split_combine.SplitComb.split": [[11, 54], ["int", "int", "int", "numpy.pad", "range", "numpy.concatenate", "numpy.ceil", "numpy.ceil", "numpy.ceil", "range", "range", "float", "float", "float", "numpy.concatenate.append"], "methods", ["None"], ["", "def", "split", "(", "self", ",", "data", ",", "side_len", "=", "None", ",", "max_stride", "=", "None", ",", "margin", "=", "None", ")", ":", "\n", "        ", "if", "side_len", "==", "None", ":", "\n", "            ", "side_len", "=", "self", ".", "side_len", "\n", "", "if", "max_stride", "==", "None", ":", "\n", "            ", "max_stride", "=", "self", ".", "max_stride", "\n", "", "if", "margin", "==", "None", ":", "\n", "            ", "margin", "=", "self", ".", "margin", "\n", "\n", "", "assert", "(", "side_len", ">", "margin", ")", "\n", "assert", "(", "side_len", "%", "max_stride", "==", "0", ")", "\n", "assert", "(", "margin", "%", "max_stride", "==", "0", ")", "\n", "\n", "splits", "=", "[", "]", "\n", "_", ",", "z", ",", "h", ",", "w", "=", "data", ".", "shape", "\n", "\n", "nz", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "z", ")", "/", "side_len", ")", ")", "\n", "nh", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "h", ")", "/", "side_len", ")", ")", "\n", "nw", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "w", ")", "/", "side_len", ")", ")", "\n", "\n", "nzhw", "=", "[", "nz", ",", "nh", ",", "nw", "]", "\n", "self", ".", "nzhw", "=", "nzhw", "\n", "\n", "pad", "=", "[", "[", "0", ",", "0", "]", ",", "\n", "[", "margin", ",", "nz", "*", "side_len", "-", "z", "+", "margin", "]", ",", "\n", "[", "margin", ",", "nh", "*", "side_len", "-", "h", "+", "margin", "]", ",", "\n", "[", "margin", ",", "nw", "*", "side_len", "-", "w", "+", "margin", "]", "]", "\n", "data", "=", "np", ".", "pad", "(", "data", ",", "pad", ",", "'edge'", ")", "\n", "\n", "for", "iz", "in", "range", "(", "nz", ")", ":", "\n", "            ", "for", "ih", "in", "range", "(", "nh", ")", ":", "\n", "                ", "for", "iw", "in", "range", "(", "nw", ")", ":", "\n", "                    ", "sz", "=", "iz", "*", "side_len", "\n", "ez", "=", "(", "iz", "+", "1", ")", "*", "side_len", "+", "2", "*", "margin", "\n", "sh", "=", "ih", "*", "side_len", "\n", "eh", "=", "(", "ih", "+", "1", ")", "*", "side_len", "+", "2", "*", "margin", "\n", "sw", "=", "iw", "*", "side_len", "\n", "ew", "=", "(", "iw", "+", "1", ")", "*", "side_len", "+", "2", "*", "margin", "\n", "\n", "split", "=", "data", "[", "np", ".", "newaxis", ",", ":", ",", "sz", ":", "ez", ",", "sh", ":", "eh", ",", "sw", ":", "ew", "]", "\n", "splits", ".", "append", "(", "split", ")", "\n", "\n", "", "", "", "splits", "=", "np", ".", "concatenate", "(", "splits", ",", "0", ")", "\n", "return", "splits", ",", "nzhw", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.split_combine.SplitComb.combine": [[55, 103], ["int", "int", "range", "range", "len", "splits.append", "numpy.ones", "range", "range"], "methods", ["None"], ["", "def", "combine", "(", "self", ",", "output", ",", "nzhw", "=", "None", ",", "side_len", "=", "None", ",", "stride", "=", "None", ",", "margin", "=", "None", ")", ":", "\n", "\n", "        ", "if", "side_len", "==", "None", ":", "\n", "            ", "side_len", "=", "self", ".", "side_len", "\n", "", "if", "stride", "==", "None", ":", "\n", "            ", "stride", "=", "self", ".", "stride", "\n", "", "if", "margin", "==", "None", ":", "\n", "            ", "margin", "=", "self", ".", "margin", "\n", "", "if", "nzhw", "is", "None", ":", "\n", "            ", "nz", "=", "self", ".", "nz", "\n", "nh", "=", "self", ".", "nh", "\n", "nw", "=", "self", ".", "nw", "\n", "", "else", ":", "\n", "            ", "nz", ",", "nh", ",", "nw", "=", "nzhw", "\n", "", "assert", "(", "side_len", "%", "stride", "==", "0", ")", "\n", "assert", "(", "margin", "%", "stride", "==", "0", ")", "\n", "side_len", "=", "int", "(", "side_len", "/", "stride", ")", "\n", "margin", "=", "int", "(", "margin", "/", "stride", ")", "\n", "\n", "splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "            ", "splits", ".", "append", "(", "output", "[", "i", "]", ")", "\n", "\n", "\n", "\n", "", "output", "=", "-", "1000000", "*", "np", ".", "ones", "(", "(", "\n", "nz", "*", "side_len", ",", "\n", "nh", "*", "side_len", ",", "\n", "nw", "*", "side_len", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "idx", "=", "0", "\n", "for", "iz", "in", "range", "(", "nz", ")", ":", "\n", "            ", "for", "ih", "in", "range", "(", "nh", ")", ":", "\n", "                ", "for", "iw", "in", "range", "(", "nw", ")", ":", "\n", "                    ", "sz", "=", "iz", "*", "side_len", "\n", "ez", "=", "(", "iz", "+", "1", ")", "*", "side_len", "\n", "sh", "=", "ih", "*", "side_len", "\n", "eh", "=", "(", "ih", "+", "1", ")", "*", "side_len", "\n", "sw", "=", "iw", "*", "side_len", "\n", "ew", "=", "(", "iw", "+", "1", ")", "*", "side_len", "\n", "\n", "split", "=", "splits", "[", "idx", "]", "[", "margin", ":", "margin", "+", "side_len", ",", "margin", ":", "margin", "+", "side_len", ",", "margin", ":", "margin", "+", "side_len", "]", "\n", "output", "[", "sz", ":", "ez", ",", "sh", ":", "eh", ",", "sw", ":", "ew", "]", "=", "split", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.data_loader.LungNodule3Ddetector.__init__": [[25, 72], ["data_loader.Crop", "data_loader.LabelMapping", "os.path.join", "numpy.load", "numpy.all", "labels.append", "enumerate", "numpy.concatenate", "os.path.join", "numpy.array", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "split_path", ",", "config", ",", "phase", "=", "'train'", ",", "split_comber", "=", "None", ")", ":", "\n", "        ", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'val'", "or", "phase", "==", "'test'", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "max_stride", "=", "config", "[", "'max_stride'", "]", "\n", "self", ".", "stride", "=", "config", "[", "'stride'", "]", "\n", "sizelim", "=", "config", "[", "'sizelim'", "]", "/", "config", "[", "'reso'", "]", "\n", "sizelim2", "=", "config", "[", "'sizelim2'", "]", "/", "config", "[", "'reso'", "]", "\n", "sizelim3", "=", "config", "[", "'sizelim3'", "]", "/", "config", "[", "'reso'", "]", "\n", "self", ".", "blacklist", "=", "config", "[", "'blacklist'", "]", "\n", "self", ".", "isScale", "=", "config", "[", "'aug_scale'", "]", "\n", "self", ".", "r_rand", "=", "config", "[", "'r_rand_crop'", "]", "\n", "self", ".", "augtype", "=", "config", "[", "'augtype'", "]", "\n", "self", ".", "pad_value", "=", "config", "[", "'pad_value'", "]", "\n", "self", ".", "split_comber", "=", "split_comber", "\n", "#idcs = np.load(split_path)", "\n", "idcs", "=", "split_path", "\n", "\n", "if", "phase", "!=", "'test'", ":", "\n", "            ", "idcs", "=", "[", "f", "for", "f", "in", "idcs", "if", "(", "f", "not", "in", "self", ".", "blacklist", ")", "]", "\n", "\n", "", "self", ".", "filenames", "=", "[", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'%s_clean.npy'", "%", "idx", ")", "for", "idx", "in", "idcs", "]", "\n", "\n", "labels", "=", "[", "]", "\n", "\n", "for", "idx", "in", "idcs", ":", "\n", "            ", "l", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'%s_label.npy'", "%", "idx", ")", ")", "\n", "if", "np", ".", "all", "(", "l", "==", "0", ")", ":", "\n", "                ", "l", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "labels", ".", "append", "(", "l", ")", "\n", "\n", "", "self", ".", "sample_bboxes", "=", "labels", "\n", "if", "self", ".", "phase", "!=", "'test'", ":", "\n", "            ", "self", ".", "bboxes", "=", "[", "]", "\n", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "labels", ")", ":", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "for", "t", "in", "l", ":", "\n", "                        ", "if", "t", "[", "3", "]", ">", "sizelim", ":", "\n", "                            ", "self", ".", "bboxes", "+=", "[", "[", "np", ".", "concatenate", "(", "[", "[", "i", "]", ",", "t", "]", ")", "]", "]", "\n", "", "if", "t", "[", "3", "]", ">", "sizelim2", ":", "\n", "                            ", "self", ".", "bboxes", "+=", "[", "[", "np", ".", "concatenate", "(", "[", "[", "i", "]", ",", "t", "]", ")", "]", "]", "*", "2", "\n", "", "if", "t", "[", "3", "]", ">", "sizelim3", ":", "\n", "                            ", "self", ".", "bboxes", "+=", "[", "[", "np", ".", "concatenate", "(", "[", "[", "i", "]", ",", "t", "]", ")", "]", "]", "*", "4", "\n", "", "", "", "", "self", ".", "bboxes", "=", "np", ".", "concatenate", "(", "self", ".", "bboxes", ",", "axis", "=", "0", ")", "\n", "\n", "", "self", ".", "crop", "=", "Crop", "(", "config", ")", "\n", "self", ".", "label_mapping", "=", "LabelMapping", "(", "config", ",", "self", ".", "phase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.data_loader.LungNodule3Ddetector.__getitem__": [[73, 130], ["time.time", "numpy.random.seed", "int", "data_loader.LungNodule3Ddetector.label_mapping", "numpy.load", "numpy.pad", "numpy.meshgrid", "numpy.concatenate().astype", "data_loader.LungNodule3Ddetector.split_comber.split", "data_loader.LungNodule3Ddetector.split_comber.split", "numpy.all", "len", "numpy.random.randint", "numpy.load", "data_loader.LungNodule3Ddetector.crop", "numpy.random.randint", "numpy.load", "data_loader.LungNodule3Ddetector.crop", "torch.from_numpy", "torch.from_numpy", "int", "int", "int", "numpy.linspace", "numpy.linspace", "numpy.linspace", "torch.from_numpy", "torch.from_numpy", "numpy.array", "str", "len", "data_loader.augment", "len", "sample.astype", "numpy.ceil", "numpy.ceil", "numpy.ceil", "numpy.concatenate", "int", "int", "int", "numpy.load.astype", "int", "int", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.augment"], ["", "def", "__getitem__", "(", "self", ",", "idx", ",", "split", "=", "None", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "int", "(", "str", "(", "t", "%", "1", ")", "[", "2", ":", "7", "]", ")", ")", "#seed according to time", "\n", "\n", "isRandomImg", "=", "False", "\n", "if", "self", ".", "phase", "!=", "'test'", ":", "\n", "            ", "if", "idx", ">=", "len", "(", "self", ".", "bboxes", ")", ":", "\n", "                ", "isRandom", "=", "True", "\n", "idx", "=", "idx", "%", "len", "(", "self", ".", "bboxes", ")", "\n", "isRandomImg", "=", "np", ".", "random", ".", "randint", "(", "2", ")", "\n", "", "else", ":", "\n", "                ", "isRandom", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "isRandom", "=", "False", "\n", "\n", "", "if", "self", ".", "phase", "!=", "'test'", ":", "\n", "            ", "if", "not", "isRandomImg", ":", "\n", "                ", "bbox", "=", "self", ".", "bboxes", "[", "idx", "]", "\n", "filename", "=", "self", ".", "filenames", "[", "int", "(", "bbox", "[", "0", "]", ")", "]", "\n", "imgs", "=", "np", ".", "load", "(", "filename", ")", "\n", "bboxes", "=", "self", ".", "sample_bboxes", "[", "int", "(", "bbox", "[", "0", "]", ")", "]", "\n", "isScale", "=", "self", ".", "augtype", "[", "'scale'", "]", "and", "(", "self", ".", "phase", "==", "'train'", ")", "\n", "sample", ",", "target", ",", "bboxes", ",", "coord", "=", "self", ".", "crop", "(", "imgs", ",", "bbox", "[", "1", ":", "]", ",", "bboxes", ",", "isScale", ",", "isRandom", ")", "\n", "if", "self", ".", "phase", "==", "'train'", "and", "not", "isRandom", ":", "\n", "                     ", "sample", ",", "target", ",", "bboxes", ",", "coord", "=", "augment", "(", "sample", ",", "target", ",", "bboxes", ",", "coord", ",", "\n", "ifflip", "=", "self", ".", "augtype", "[", "'flip'", "]", ",", "ifrotate", "=", "self", ".", "augtype", "[", "'rotate'", "]", ",", "ifswap", "=", "self", ".", "augtype", "[", "'swap'", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "randimid", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "filenames", ")", ")", "\n", "filename", "=", "self", ".", "filenames", "[", "randimid", "]", "\n", "imgs", "=", "np", ".", "load", "(", "filename", ")", "\n", "bboxes", "=", "self", ".", "sample_bboxes", "[", "randimid", "]", "\n", "isScale", "=", "self", ".", "augtype", "[", "'scale'", "]", "and", "(", "self", ".", "phase", "==", "'train'", ")", "\n", "sample", ",", "target", ",", "bboxes", ",", "coord", "=", "self", ".", "crop", "(", "imgs", ",", "[", "]", ",", "bboxes", ",", "isScale", "=", "False", ",", "isRand", "=", "True", ")", "\n", "", "label", "=", "self", ".", "label_mapping", "(", "sample", ".", "shape", "[", "1", ":", "]", ",", "target", ",", "bboxes", ")", "\n", "sample", "=", "(", "sample", ".", "astype", "(", "np", ".", "float32", ")", "-", "128", ")", "/", "128", "\n", "return", "torch", ".", "from_numpy", "(", "sample", ")", ",", "torch", ".", "from_numpy", "(", "label", ")", ",", "coord", "\n", "", "else", ":", "\n", "            ", "imgs", "=", "np", ".", "load", "(", "self", ".", "filenames", "[", "idx", "]", ")", "\n", "bboxes", "=", "self", ".", "sample_bboxes", "[", "idx", "]", "\n", "nz", ",", "nh", ",", "nw", "=", "imgs", ".", "shape", "[", "1", ":", "]", "\n", "pz", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "nz", ")", "/", "self", ".", "stride", ")", ")", "*", "self", ".", "stride", "\n", "ph", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "nh", ")", "/", "self", ".", "stride", ")", ")", "*", "self", ".", "stride", "\n", "pw", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "nw", ")", "/", "self", ".", "stride", ")", ")", "*", "self", ".", "stride", "\n", "imgs", "=", "np", ".", "pad", "(", "imgs", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "pz", "-", "nz", "]", ",", "[", "0", ",", "ph", "-", "nh", "]", ",", "[", "0", ",", "pw", "-", "nw", "]", "]", ",", "'constant'", ",", "constant_values", "=", "self", ".", "pad_value", ")", "\n", "\n", "xx", ",", "yy", ",", "zz", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "0.5", ",", "0.5", ",", "imgs", ".", "shape", "[", "1", "]", "/", "self", ".", "stride", ")", ",", "\n", "np", ".", "linspace", "(", "-", "0.5", ",", "0.5", ",", "imgs", ".", "shape", "[", "2", "]", "/", "self", ".", "stride", ")", ",", "\n", "np", ".", "linspace", "(", "-", "0.5", ",", "0.5", ",", "imgs", ".", "shape", "[", "3", "]", "/", "self", ".", "stride", ")", ",", "indexing", "=", "'ij'", ")", "\n", "coord", "=", "np", ".", "concatenate", "(", "[", "xx", "[", "np", ".", "newaxis", ",", "...", "]", ",", "yy", "[", "np", ".", "newaxis", ",", "...", "]", ",", "zz", "[", "np", ".", "newaxis", ",", ":", "]", "]", ",", "0", ")", ".", "astype", "(", "'float32'", ")", "\n", "imgs", ",", "nzhw", "=", "self", ".", "split_comber", ".", "split", "(", "imgs", ")", "\n", "coord2", ",", "nzhw2", "=", "self", ".", "split_comber", ".", "split", "(", "coord", ",", "\n", "side_len", "=", "int", "(", "self", ".", "split_comber", ".", "side_len", "/", "self", ".", "stride", ")", ",", "\n", "max_stride", "=", "int", "(", "self", ".", "split_comber", ".", "max_stride", "/", "self", ".", "stride", ")", ",", "\n", "margin", "=", "int", "(", "self", ".", "split_comber", ".", "margin", "/", "self", ".", "stride", ")", ")", "\n", "assert", "np", ".", "all", "(", "nzhw", "==", "nzhw2", ")", "\n", "imgs", "=", "(", "imgs", ".", "astype", "(", "np", ".", "float32", ")", "-", "128", ")", "/", "128", "\n", "return", "torch", ".", "from_numpy", "(", "imgs", ")", ",", "bboxes", ",", "torch", ".", "from_numpy", "(", "coord2", ")", ",", "np", ".", "array", "(", "nzhw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.data_loader.LungNodule3Ddetector.__len__": [[131, 138], ["int", "len", "len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "return", "int", "(", "len", "(", "self", ".", "bboxes", ")", "/", "(", "1", "-", "self", ".", "r_rand", ")", ")", "\n", "", "elif", "self", ".", "phase", "==", "'val'", ":", "\n", "            ", "return", "len", "(", "self", ".", "bboxes", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "sample_bboxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.data_loader.Crop.__init__": [[184, 189], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "config", "[", "'crop_size'", "]", "\n", "self", ".", "bound_size", "=", "config", "[", "'bound_size'", "]", "\n", "self", ".", "stride", "=", "config", "[", "'stride'", "]", "\n", "self", ".", "pad_value", "=", "config", "[", "'pad_value'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.data_loader.Crop.__call__": [[190, 260], ["numpy.copy", "numpy.copy", "range", "numpy.meshgrid", "numpy.concatenate().astype", "pad.append", "range", "numpy.pad", "range", "range", "numpy.array().astype", "numpy.array", "numpy.linspace", "numpy.linspace", "numpy.linspace", "max", "max", "pad.append", "len", "range", "range", "range", "numpy.min", "numpy.max", "numpy.max", "numpy.min", "numpy.array", "start.append", "start.append", "numpy.array().astype", "numpy.array", "numpy.concatenate", "warnings.catch_warnings", "warnings.simplefilter", "scipy.ndimage.zoom", "len", "range", "numpy.random.rand", "int", "int", "numpy.array", "max", "min", "max", "min", "max", "min", "numpy.pad", "numpy.max", "numpy.min", "numpy.array().astype", "numpy.floor", "numpy.random.randint", "numpy.array", "numpy.ceil", "numpy.random.randint", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgs", ",", "target", ",", "bboxes", ",", "isScale", "=", "False", ",", "isRand", "=", "False", ")", ":", "\n", "        ", "if", "isScale", ":", "\n", "            ", "radiusLim", "=", "[", "8.", ",", "100.", "]", "\n", "scaleLim", "=", "[", "0.75", ",", "1.25", "]", "\n", "scaleRange", "=", "[", "np", ".", "min", "(", "[", "np", ".", "max", "(", "[", "(", "radiusLim", "[", "0", "]", "/", "target", "[", "3", "]", ")", ",", "scaleLim", "[", "0", "]", "]", ")", ",", "1", "]", ")", "\n", ",", "np", ".", "max", "(", "[", "np", ".", "min", "(", "[", "(", "radiusLim", "[", "1", "]", "/", "target", "[", "3", "]", ")", ",", "scaleLim", "[", "1", "]", "]", ")", ",", "1", "]", ")", "]", "\n", "scale", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "scaleRange", "[", "1", "]", "-", "scaleRange", "[", "0", "]", ")", "+", "scaleRange", "[", "0", "]", "\n", "crop_size", "=", "(", "np", ".", "array", "(", "self", ".", "crop_size", ")", ".", "astype", "(", "'float'", ")", "/", "scale", ")", ".", "astype", "(", "'int'", ")", "\n", "", "else", ":", "\n", "            ", "crop_size", "=", "self", ".", "crop_size", "\n", "", "bound_size", "=", "self", ".", "bound_size", "\n", "target", "=", "np", ".", "copy", "(", "target", ")", "\n", "bboxes", "=", "np", ".", "copy", "(", "bboxes", ")", "\n", "\n", "start", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "if", "not", "isRand", ":", "\n", "                ", "r", "=", "target", "[", "3", "]", "/", "2", "\n", "s", "=", "np", ".", "floor", "(", "target", "[", "i", "]", "-", "r", ")", "+", "1", "-", "bound_size", "\n", "e", "=", "np", ".", "ceil", "(", "target", "[", "i", "]", "+", "r", ")", "+", "1", "+", "bound_size", "-", "crop_size", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "s", "=", "np", ".", "max", "(", "[", "imgs", ".", "shape", "[", "i", "+", "1", "]", "-", "crop_size", "[", "i", "]", "/", "2", ",", "imgs", ".", "shape", "[", "i", "+", "1", "]", "/", "2", "+", "bound_size", "]", ")", "\n", "e", "=", "np", ".", "min", "(", "[", "crop_size", "[", "i", "]", "/", "2", ",", "imgs", ".", "shape", "[", "i", "+", "1", "]", "/", "2", "-", "bound_size", "]", ")", "\n", "target", "=", "np", ".", "array", "(", "[", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", "]", ")", "\n", "", "if", "s", ">", "e", ":", "\n", "                ", "start", ".", "append", "(", "int", "(", "np", ".", "random", ".", "randint", "(", "e", ",", "s", ")", ")", ")", "# !", "\n", "", "else", ":", "\n", "                ", "start", ".", "append", "(", "int", "(", "target", "[", "i", "]", "-", "crop_size", "[", "i", "]", "/", "2", "+", "np", ".", "random", ".", "randint", "(", "-", "bound_size", "/", "2", ",", "bound_size", "/", "2", ")", ")", ")", "\n", "\n", "", "", "normstart", "=", "np", ".", "array", "(", "start", ")", ".", "astype", "(", "'float32'", ")", "/", "np", ".", "array", "(", "imgs", ".", "shape", "[", "1", ":", "]", ")", "-", "0.5", "\n", "normsize", "=", "np", ".", "array", "(", "crop_size", ")", ".", "astype", "(", "'float32'", ")", "/", "np", ".", "array", "(", "imgs", ".", "shape", "[", "1", ":", "]", ")", "\n", "xx", ",", "yy", ",", "zz", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "normstart", "[", "0", "]", ",", "normstart", "[", "0", "]", "+", "normsize", "[", "0", "]", ",", "self", ".", "crop_size", "[", "0", "]", "/", "self", ".", "stride", ")", ",", "\n", "np", ".", "linspace", "(", "normstart", "[", "1", "]", ",", "normstart", "[", "1", "]", "+", "normsize", "[", "1", "]", ",", "self", ".", "crop_size", "[", "1", "]", "/", "self", ".", "stride", ")", ",", "\n", "np", ".", "linspace", "(", "normstart", "[", "2", "]", ",", "normstart", "[", "2", "]", "+", "normsize", "[", "2", "]", ",", "self", ".", "crop_size", "[", "2", "]", "/", "self", ".", "stride", ")", ",", "\n", "indexing", "=", "'ij'", ")", "\n", "coord", "=", "np", ".", "concatenate", "(", "[", "xx", "[", "np", ".", "newaxis", ",", "...", "]", ",", "yy", "[", "np", ".", "newaxis", ",", "...", "]", ",", "zz", "[", "np", ".", "newaxis", ",", ":", "]", "]", ",", "0", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "pad", "=", "[", "]", "\n", "pad", ".", "append", "(", "[", "0", ",", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "leftpad", "=", "max", "(", "0", ",", "-", "start", "[", "i", "]", ")", "\n", "rightpad", "=", "max", "(", "0", ",", "start", "[", "i", "]", "+", "crop_size", "[", "i", "]", "-", "imgs", ".", "shape", "[", "i", "+", "1", "]", ")", "\n", "pad", ".", "append", "(", "[", "leftpad", ",", "rightpad", "]", ")", "\n", "", "crop", "=", "imgs", "[", ":", ",", "\n", "max", "(", "start", "[", "0", "]", ",", "0", ")", ":", "min", "(", "start", "[", "0", "]", "+", "crop_size", "[", "0", "]", ",", "imgs", ".", "shape", "[", "1", "]", ")", ",", "\n", "max", "(", "start", "[", "1", "]", ",", "0", ")", ":", "min", "(", "start", "[", "1", "]", "+", "crop_size", "[", "1", "]", ",", "imgs", ".", "shape", "[", "2", "]", ")", ",", "\n", "max", "(", "start", "[", "2", "]", ",", "0", ")", ":", "min", "(", "start", "[", "2", "]", "+", "crop_size", "[", "2", "]", ",", "imgs", ".", "shape", "[", "3", "]", ")", "]", "\n", "crop", "=", "np", ".", "pad", "(", "crop", ",", "pad", ",", "'constant'", ",", "constant_values", "=", "self", ".", "pad_value", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "target", "[", "i", "]", "=", "target", "[", "i", "]", "-", "start", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "bboxes", "[", "i", "]", "[", "j", "]", "=", "bboxes", "[", "i", "]", "[", "j", "]", "-", "start", "[", "j", "]", "\n", "\n", "", "", "if", "isScale", ":", "\n", "            ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "crop", "=", "zoom", "(", "crop", ",", "[", "1", ",", "scale", ",", "scale", ",", "scale", "]", ",", "order", "=", "1", ")", "\n", "", "newpad", "=", "self", ".", "crop_size", "[", "0", "]", "-", "crop", ".", "shape", "[", "1", ":", "]", "[", "0", "]", "\n", "if", "newpad", "<", "0", ":", "\n", "                ", "crop", "=", "crop", "[", ":", ",", ":", "-", "newpad", ",", ":", "-", "newpad", ",", ":", "-", "newpad", "]", "\n", "", "elif", "newpad", ">", "0", ":", "\n", "                ", "pad2", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "newpad", "]", ",", "[", "0", ",", "newpad", "]", ",", "[", "0", ",", "newpad", "]", "]", "\n", "crop", "=", "np", ".", "pad", "(", "crop", ",", "pad2", ",", "'constant'", ",", "constant_values", "=", "self", ".", "pad_value", ")", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "target", "[", "i", "]", "=", "target", "[", "i", "]", "*", "scale", "\n", "", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                    ", "bboxes", "[", "i", "]", "[", "j", "]", "=", "bboxes", "[", "i", "]", "[", "j", "]", "*", "scale", "\n", "", "", "", "return", "crop", ",", "target", ",", "bboxes", ",", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.data_loader.LabelMapping.__init__": [[263, 273], ["numpy.array", "int", "numpy.asarray"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "phase", ")", ":", "\n", "        ", "self", ".", "stride", "=", "np", ".", "array", "(", "config", "[", "'stride'", "]", ")", "\n", "self", ".", "num_neg", "=", "int", "(", "config", "[", "'num_neg'", "]", ")", "\n", "self", ".", "th_neg", "=", "config", "[", "'th_neg'", "]", "\n", "self", ".", "anchors", "=", "np", ".", "asarray", "(", "config", "[", "'anchors'", "]", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "if", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "th_pos", "=", "config", "[", "'th_pos_train'", "]", "\n", "", "elif", "phase", "==", "'val'", ":", "\n", "            ", "self", ".", "th_pos", "=", "config", "[", "'th_pos_val'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.data_loader.LabelMapping.__call__": [[274, 339], ["scipy.ndimage.morphology.generate_binary_structure", "range", "numpy.zeros", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.isnan", "enumerate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.log", "output_size.append", "enumerate", "numpy.where", "random.sample", "data_loader.select_samples", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "len", "range", "numpy.argmin", "pos.append", "int", "stride.astype", "data_loader.select_samples", "scipy.ndimage.morphology.binary_dilation().astype", "range", "min", "pos.append", "numpy.abs", "random.sample", "len", "len", "len", "numpy.ones", "max", "numpy.log", "range", "scipy.ndimage.morphology.binary_dilation", "int", "len", "label[].astype", "len", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.select_samples", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.select_samples"], ["", "", "def", "__call__", "(", "self", ",", "input_size", ",", "target", ",", "bboxes", ")", ":", "\n", "        ", "stride", "=", "self", ".", "stride", "\n", "num_neg", "=", "self", ".", "num_neg", "\n", "th_neg", "=", "self", ".", "th_neg", "\n", "anchors", "=", "self", ".", "anchors", "\n", "th_pos", "=", "self", ".", "th_pos", "\n", "struct", "=", "generate_binary_structure", "(", "3", ",", "1", ")", "\n", "\n", "output_size", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "assert", "(", "input_size", "[", "i", "]", "%", "stride", "==", "0", ")", "\n", "output_size", ".", "append", "(", "int", "(", "input_size", "[", "i", "]", "/", "stride", ")", ")", "\n", "\n", "", "label", "=", "np", ".", "zeros", "(", "output_size", "+", "[", "len", "(", "anchors", ")", ",", "5", "]", ",", "np", ".", "float32", ")", "\n", "offset", "=", "(", "(", "stride", ".", "astype", "(", "'float'", ")", ")", "-", "1", ")", "/", "2", "\n", "oz", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "0", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "oh", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "1", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "ow", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "2", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "\n", "for", "bbox", "in", "bboxes", ":", "\n", "            ", "for", "i", ",", "anchor", "in", "enumerate", "(", "anchors", ")", ":", "\n", "                ", "iz", ",", "ih", ",", "iw", "=", "select_samples", "(", "bbox", ",", "anchor", ",", "th_neg", ",", "oz", ",", "oh", ",", "ow", ")", "\n", "label", "[", "iz", ",", "ih", ",", "iw", ",", "i", ",", "0", "]", "=", "1", "\n", "label", "[", ":", ",", ":", ",", ":", ",", "i", ",", "0", "]", "=", "binary_dilation", "(", "label", "[", ":", ",", ":", ",", ":", ",", "i", ",", "0", "]", ".", "astype", "(", "'bool'", ")", ",", "structure", "=", "struct", ",", "\n", "iterations", "=", "1", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "", "label", "=", "label", "-", "1", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", "and", "self", ".", "num_neg", ">", "0", ":", "\n", "            ", "neg_z", ",", "neg_h", ",", "neg_w", ",", "neg_a", "=", "np", ".", "where", "(", "label", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "==", "-", "1", ")", "\n", "neg_idcs", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "neg_z", ")", ")", ",", "min", "(", "num_neg", ",", "len", "(", "neg_z", ")", ")", ")", "\n", "neg_z", ",", "neg_h", ",", "neg_w", ",", "neg_a", "=", "neg_z", "[", "neg_idcs", "]", ",", "neg_h", "[", "neg_idcs", "]", ",", "neg_w", "[", "neg_idcs", "]", ",", "neg_a", "[", "neg_idcs", "]", "\n", "label", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "label", "[", "neg_z", ",", "neg_h", ",", "neg_w", ",", "neg_a", ",", "0", "]", "=", "-", "1", "\n", "\n", "", "if", "np", ".", "isnan", "(", "target", "[", "0", "]", ")", ":", "\n", "            ", "return", "label", "\n", "", "iz", ",", "ih", ",", "iw", ",", "ia", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "anchor", "in", "enumerate", "(", "anchors", ")", ":", "\n", "            ", "iiz", ",", "iih", ",", "iiw", "=", "select_samples", "(", "target", ",", "anchor", ",", "th_pos", ",", "oz", ",", "oh", ",", "ow", ")", "\n", "iz", ".", "append", "(", "iiz", ")", "\n", "ih", ".", "append", "(", "iih", ")", "\n", "iw", ".", "append", "(", "iiw", ")", "\n", "ia", ".", "append", "(", "i", "*", "np", ".", "ones", "(", "(", "len", "(", "iiz", ")", ",", ")", ",", "np", ".", "int64", ")", ")", "\n", "", "iz", "=", "np", ".", "concatenate", "(", "iz", ",", "0", ")", "\n", "ih", "=", "np", ".", "concatenate", "(", "ih", ",", "0", ")", "\n", "iw", "=", "np", ".", "concatenate", "(", "iw", ",", "0", ")", "\n", "ia", "=", "np", ".", "concatenate", "(", "ia", ",", "0", ")", "\n", "flag", "=", "True", "\n", "if", "len", "(", "iz", ")", "==", "0", ":", "\n", "            ", "pos", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "pos", ".", "append", "(", "max", "(", "0", ",", "int", "(", "np", ".", "round", "(", "(", "target", "[", "i", "]", "-", "offset", ")", "/", "stride", ")", ")", ")", ")", "\n", "", "idx", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "np", ".", "log", "(", "target", "[", "3", "]", "/", "anchors", ")", ")", ")", "\n", "pos", ".", "append", "(", "idx", ")", "\n", "flag", "=", "False", "\n", "", "else", ":", "\n", "            ", "idx", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "iz", ")", ")", ",", "1", ")", "[", "0", "]", "\n", "pos", "=", "[", "iz", "[", "idx", "]", ",", "ih", "[", "idx", "]", ",", "iw", "[", "idx", "]", ",", "ia", "[", "idx", "]", "]", "\n", "", "dz", "=", "(", "target", "[", "0", "]", "-", "oz", "[", "pos", "[", "0", "]", "]", ")", "/", "anchors", "[", "pos", "[", "3", "]", "]", "\n", "dh", "=", "(", "target", "[", "1", "]", "-", "oh", "[", "pos", "[", "1", "]", "]", ")", "/", "anchors", "[", "pos", "[", "3", "]", "]", "\n", "dw", "=", "(", "target", "[", "2", "]", "-", "ow", "[", "pos", "[", "2", "]", "]", ")", "/", "anchors", "[", "pos", "[", "3", "]", "]", "\n", "dd", "=", "np", ".", "log", "(", "target", "[", "3", "]", "/", "anchors", "[", "pos", "[", "3", "]", "]", ")", "\n", "label", "[", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", ",", "pos", "[", "2", "]", ",", "pos", "[", "3", "]", ",", ":", "]", "=", "[", "1", ",", "dz", ",", "dh", ",", "dw", ",", "dd", "]", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.data_loader.augment": [[140, 181], ["numpy.ascontiguousarray", "numpy.ascontiguousarray", "range", "numpy.copy", "numpy.array().astype", "numpy.array", "numpy.random.permutation", "numpy.transpose", "numpy.transpose", "numpy.dot", "numpy.all", "numpy.all", "scipy.ndimage.interpolation.rotate", "scipy.ndimage.interpolation.rotate", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.random.rand", "numpy.array", "numpy.array", "numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.dot", "numpy.random.randint", "numpy.random.randint", "numpy.sin", "numpy.array"], "function", ["None"], ["", "", "", "def", "augment", "(", "sample", ",", "target", ",", "bboxes", ",", "coord", ",", "ifflip", "=", "True", ",", "ifrotate", "=", "True", ",", "ifswap", "=", "True", ")", ":", "\n", "#                     angle1 = np.random.rand()*180", "\n", "    ", "if", "ifrotate", ":", "\n", "        ", "validrot", "=", "False", "\n", "counter", "=", "0", "\n", "while", "not", "validrot", ":", "\n", "            ", "newtarget", "=", "np", ".", "copy", "(", "target", ")", "\n", "angle1", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "-", "0.5", ")", "*", "20", "\n", "size", "=", "np", ".", "array", "(", "sample", ".", "shape", "[", "2", ":", "4", "]", ")", ".", "astype", "(", "'float'", ")", "\n", "rotmat", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angle1", "/", "180", "*", "np", ".", "pi", ")", ",", "-", "np", ".", "sin", "(", "angle1", "/", "180", "*", "np", ".", "pi", ")", "]", ",", "\n", "[", "np", ".", "sin", "(", "angle1", "/", "180", "*", "np", ".", "pi", ")", ",", "np", ".", "cos", "(", "angle1", "/", "180", "*", "np", ".", "pi", ")", "]", "]", ")", "\n", "newtarget", "[", "1", ":", "3", "]", "=", "np", ".", "dot", "(", "rotmat", ",", "target", "[", "1", ":", "3", "]", "-", "size", "/", "2", ")", "+", "size", "/", "2", "\n", "if", "np", ".", "all", "(", "newtarget", "[", ":", "3", "]", ">", "target", "[", "3", "]", ")", "and", "np", ".", "all", "(", "newtarget", "[", ":", "3", "]", "<", "np", ".", "array", "(", "sample", ".", "shape", "[", "1", ":", "4", "]", ")", "-", "newtarget", "[", "3", "]", ")", ":", "\n", "                ", "validrot", "=", "True", "\n", "target", "=", "newtarget", "\n", "sample", "=", "rotate", "(", "sample", ",", "angle1", ",", "axes", "=", "(", "2", ",", "3", ")", ",", "reshape", "=", "False", ")", "\n", "coord", "=", "rotate", "(", "coord", ",", "angle1", ",", "axes", "=", "(", "2", ",", "3", ")", ",", "reshape", "=", "False", ")", "\n", "for", "box", "in", "bboxes", ":", "\n", "                    ", "box", "[", "1", ":", "3", "]", "=", "np", ".", "dot", "(", "rotmat", ",", "box", "[", "1", ":", "3", "]", "-", "size", "/", "2", ")", "+", "size", "/", "2", "\n", "", "", "else", ":", "\n", "                ", "counter", "+=", "1", "\n", "if", "counter", "==", "3", ":", "\n", "                    ", "break", "\n", "", "", "", "", "if", "ifswap", ":", "\n", "        ", "if", "sample", ".", "shape", "[", "1", "]", "==", "sample", ".", "shape", "[", "2", "]", "and", "sample", ".", "shape", "[", "1", "]", "==", "sample", ".", "shape", "[", "3", "]", ":", "\n", "            ", "axisorder", "=", "np", ".", "random", ".", "permutation", "(", "3", ")", "\n", "sample", "=", "np", ".", "transpose", "(", "sample", ",", "np", ".", "concatenate", "(", "[", "[", "0", "]", ",", "axisorder", "+", "1", "]", ")", ")", "\n", "coord", "=", "np", ".", "transpose", "(", "coord", ",", "np", ".", "concatenate", "(", "[", "[", "0", "]", ",", "axisorder", "+", "1", "]", ")", ")", "\n", "target", "[", ":", "3", "]", "=", "target", "[", ":", "3", "]", "[", "axisorder", "]", "\n", "bboxes", "[", ":", ",", ":", "3", "]", "=", "bboxes", "[", ":", ",", ":", "3", "]", "[", ":", ",", "axisorder", "]", "\n", "\n", "", "", "if", "ifflip", ":", "\n", "#         flipid = np.array([np.random.randint(2),np.random.randint(2),np.random.randint(2)])*2-1", "\n", "        ", "flipid", "=", "np", ".", "array", "(", "[", "1", ",", "np", ".", "random", ".", "randint", "(", "2", ")", ",", "np", ".", "random", ".", "randint", "(", "2", ")", "]", ")", "*", "2", "-", "1", "\n", "sample", "=", "np", ".", "ascontiguousarray", "(", "sample", "[", ":", ",", ":", ":", "flipid", "[", "0", "]", ",", ":", ":", "flipid", "[", "1", "]", ",", ":", ":", "flipid", "[", "2", "]", "]", ")", "\n", "coord", "=", "np", ".", "ascontiguousarray", "(", "coord", "[", ":", ",", ":", ":", "flipid", "[", "0", "]", ",", ":", ":", "flipid", "[", "1", "]", ",", ":", ":", "flipid", "[", "2", "]", "]", ")", "\n", "for", "ax", "in", "range", "(", "3", ")", ":", "\n", "            ", "if", "flipid", "[", "ax", "]", "==", "-", "1", ":", "\n", "                ", "target", "[", "ax", "]", "=", "np", ".", "array", "(", "sample", ".", "shape", "[", "ax", "+", "1", "]", ")", "-", "target", "[", "ax", "]", "\n", "bboxes", "[", ":", ",", "ax", "]", "=", "np", ".", "array", "(", "sample", ".", "shape", "[", "ax", "+", "1", "]", ")", "-", "bboxes", "[", ":", ",", "ax", "]", "\n", "", "", "", "return", "sample", ",", "target", ",", "bboxes", ",", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.data_loader.select_samples": [[341, 405], ["min", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "np.tile().reshape.reshape", "np.tile().reshape.reshape", "np.tile().reshape.reshape", "numpy.tile().reshape", "numpy.tile().reshape", "numpy.tile().reshape", "numpy.concatenate", "s1.reshape.reshape", "e1.reshape.reshape", "numpy.maximum", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.where", "numpy.where", "numpy.where", "len", "len", "len", "numpy.power", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.tile", "numpy.tile", "numpy.tile", "oz[].reshape", "oh[].reshape", "ow[].reshape", "numpy.minimum", "numpy.maximum", "max", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs"], "function", ["None"], ["", "", "def", "select_samples", "(", "bbox", ",", "anchor", ",", "th", ",", "oz", ",", "oh", ",", "ow", ")", ":", "\n", "    ", "z", ",", "h", ",", "w", ",", "d", "=", "bbox", "\n", "max_overlap", "=", "min", "(", "d", ",", "anchor", ")", "\n", "min_overlap", "=", "np", ".", "power", "(", "max", "(", "d", ",", "anchor", ")", ",", "3", ")", "*", "th", "/", "max_overlap", "/", "max_overlap", "\n", "if", "min_overlap", ">", "max_overlap", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "        ", "s", "=", "z", "-", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "-", "(", "max_overlap", "-", "min_overlap", ")", "\n", "e", "=", "z", "+", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "+", "(", "max_overlap", "-", "min_overlap", ")", "\n", "mz", "=", "np", ".", "logical_and", "(", "oz", ">=", "s", ",", "oz", "<=", "e", ")", "\n", "iz", "=", "np", ".", "where", "(", "mz", ")", "[", "0", "]", "\n", "\n", "s", "=", "h", "-", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "-", "(", "max_overlap", "-", "min_overlap", ")", "\n", "e", "=", "h", "+", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "+", "(", "max_overlap", "-", "min_overlap", ")", "\n", "mh", "=", "np", ".", "logical_and", "(", "oh", ">=", "s", ",", "oh", "<=", "e", ")", "\n", "ih", "=", "np", ".", "where", "(", "mh", ")", "[", "0", "]", "\n", "\n", "s", "=", "w", "-", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "-", "(", "max_overlap", "-", "min_overlap", ")", "\n", "e", "=", "w", "+", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "+", "(", "max_overlap", "-", "min_overlap", ")", "\n", "mw", "=", "np", ".", "logical_and", "(", "ow", ">=", "s", ",", "ow", "<=", "e", ")", "\n", "iw", "=", "np", ".", "where", "(", "mw", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "iz", ")", "==", "0", "or", "len", "(", "ih", ")", "==", "0", "or", "len", "(", "iw", ")", "==", "0", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", "\n", "\n", "", "lz", ",", "lh", ",", "lw", "=", "len", "(", "iz", ")", ",", "len", "(", "ih", ")", ",", "len", "(", "iw", ")", "\n", "iz", "=", "iz", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "ih", "=", "ih", ".", "reshape", "(", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "iw", "=", "iw", ".", "reshape", "(", "(", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "iz", "=", "np", ".", "tile", "(", "iz", ",", "(", "1", ",", "lh", ",", "lw", ")", ")", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "ih", "=", "np", ".", "tile", "(", "ih", ",", "(", "lz", ",", "1", ",", "lw", ")", ")", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "iw", "=", "np", ".", "tile", "(", "iw", ",", "(", "lz", ",", "lh", ",", "1", ")", ")", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "centers", "=", "np", ".", "concatenate", "(", "[", "\n", "oz", "[", "iz", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "\n", "oh", "[", "ih", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "\n", "ow", "[", "iw", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "r0", "=", "anchor", "/", "2", "\n", "s0", "=", "centers", "-", "r0", "\n", "e0", "=", "centers", "+", "r0", "\n", "\n", "r1", "=", "d", "/", "2", "\n", "s1", "=", "bbox", "[", ":", "3", "]", "-", "r1", "\n", "s1", "=", "s1", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "e1", "=", "bbox", "[", ":", "3", "]", "+", "r1", "\n", "e1", "=", "e1", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "overlap", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "minimum", "(", "e0", ",", "e1", ")", "-", "np", ".", "maximum", "(", "s0", ",", "s1", ")", ")", "\n", "\n", "intersection", "=", "overlap", "[", ":", ",", "0", "]", "*", "overlap", "[", ":", ",", "1", "]", "*", "overlap", "[", ":", ",", "2", "]", "\n", "union", "=", "anchor", "*", "anchor", "*", "anchor", "+", "d", "*", "d", "*", "d", "-", "intersection", "\n", "\n", "iou", "=", "intersection", "/", "union", "\n", "\n", "mask", "=", "iou", ">=", "th", "\n", "# if th > 0.4:", "\n", "#   if np.sum(mask) == 0:", "\n", "#      print(['iou not large', iou.max()])", "\n", "# else:", "\n", "#    print(['iou large', iou[mask]])", "\n", "iz", "=", "iz", "[", "mask", "]", "\n", "ih", "=", "ih", "[", "mask", "]", "\n", "iw", "=", "iw", "[", "mask", "]", "\n", "return", "iz", ",", "ih", ",", "iw", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.data_loader.collate": [[407, 417], ["torch.is_tensor", "isinstance", "b.unsqueeze", "isinstance", "torch.LongTensor", "isinstance", "zip", "data_loader.collate"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.collate"], ["", "", "def", "collate", "(", "batch", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "batch", "[", "0", "]", ")", ":", "\n", "        ", "return", "[", "b", ".", "unsqueeze", "(", "0", ")", "for", "b", "in", "batch", "]", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "batch", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Iterable", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "collate", "(", "samples", ")", "for", "samples", "in", "transposed", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.res18_se.Net.__init__": [[31, 104], ["torch.nn.Module.__init__", "torch.nn.Sequential", "range", "range", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxUnpool3d", "torch.nn.MaxUnpool3d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout3d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "[].bias.data.fill_", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "len", "range", "setattr", "len", "range", "setattr", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.ReLU", "torch.nn.Conv3d", "math.log", "torch.nn.Sequential", "torch.nn.Sequential", "len", "blocks.append", "blocks.append", "str", "blocks.append", "blocks.append", "str", "len", "len", "layers_se.PostRes", "layers_se.PostRes", "layers_se.PostRes", "layers_se.PostRes"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# The first few layers consumes the most memory, so use simple convolution to save memory.", "\n", "# Call these layers preBlock, i.e., before the residual blocks of later layers.", "\n", "self", ".", "preBlock", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "1", ",", "24", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "24", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "24", ",", "24", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "24", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "# 3 poolings, each pooling downsamples the feature map by a factor 2.", "\n", "# 3 groups of blocks. The first block of each group has one pooling.", "\n", "num_blocks_forw", "=", "[", "2", ",", "2", ",", "3", ",", "3", "]", "\n", "num_blocks_back", "=", "[", "3", ",", "3", "]", "\n", "self", ".", "featureNum_forw", "=", "[", "24", ",", "32", ",", "64", ",", "64", ",", "64", "]", "\n", "self", ".", "featureNum_back", "=", "[", "128", ",", "64", ",", "64", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_blocks_forw", ")", ")", ":", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_blocks_forw", "[", "i", "]", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_forw", "[", "i", "]", ",", "self", ".", "featureNum_forw", "[", "i", "+", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_forw", "[", "i", "+", "1", "]", ",", "self", ".", "featureNum_forw", "[", "i", "+", "1", "]", ")", ")", "\n", "", "", "setattr", "(", "self", ",", "'forw'", "+", "str", "(", "i", "+", "1", ")", ",", "nn", ".", "Sequential", "(", "*", "blocks", ")", ")", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "num_blocks_back", ")", ")", ":", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_blocks_back", "[", "i", "]", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "addition", "=", "3", "\n", "", "else", ":", "\n", "                        ", "addition", "=", "0", "\n", "", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_back", "[", "i", "+", "1", "]", "+", "self", ".", "featureNum_forw", "[", "i", "+", "2", "]", "+", "addition", ",", "self", ".", "featureNum_back", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_back", "[", "i", "]", ",", "self", ".", "featureNum_back", "[", "i", "]", ")", ")", "\n", "", "", "setattr", "(", "self", ",", "'back'", "+", "str", "(", "i", "+", "2", ")", ",", "nn", ".", "Sequential", "(", "*", "blocks", ")", ")", "\n", "\n", "", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool4", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "unmaxpool1", "=", "nn", ".", "MaxUnpool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "unmaxpool2", "=", "nn", ".", "MaxUnpool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "path1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "64", ",", "64", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "path2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "64", ",", "64", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout3d", "(", "p", "=", "0.5", ",", "inplace", "=", "False", ")", "\n", "self", ".", "output", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "self", ".", "featureNum_back", "[", "0", "]", ",", "64", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Dropout3d(p = 0.3),", "\n", "nn", ".", "Conv3d", "(", "64", ",", "5", "*", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "kernel_size", "=", "1", ")", ")", "\n", "\n", "self", ".", "nodule_output", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "self", ".", "featureNum_back", "[", "0", "]", ",", "64", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Dropout3d(p = 0.3),", "\n", "nn", ".", "Conv3d", "(", "64", ",", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "kernel_size", "=", "1", ")", ")", "\n", "\n", "self", ".", "regress_output", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "self", ".", "featureNum_back", "[", "0", "]", ",", "64", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Dropout3d(p = 0.3),", "\n", "nn", ".", "Conv3d", "(", "64", ",", "4", "*", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "kernel_size", "=", "1", ")", ")", "\n", "focal_bias", "=", "-", "math", ".", "log", "(", "(", "1.0", "-", "0.01", ")", "/", "0.01", ")", "\n", "self", ".", "_modules", "[", "'nodule_output'", "]", "[", "2", "]", ".", "bias", ".", "data", ".", "fill_", "(", "focal_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.res18_se.Net.forward": [[105, 139], ["res18_se.Net.preBlock", "res18_se.Net.maxpool1", "res18_se.Net.forw1", "res18_se.Net.maxpool2", "res18_se.Net.forw2", "res18_se.Net.maxpool3", "res18_se.Net.forw3", "res18_se.Net.maxpool4", "res18_se.Net.forw4", "res18_se.Net.path1", "res18_se.Net.back3", "res18_se.Net.path2", "res18_se.Net.back2", "res18_se.Net.drop", "res18_se.Net.nodule_output", "res18_se.Net.regress_output", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.size", "regress_out.transpose().contiguous().view.transpose().contiguous().view.size", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.view", "regress_out.transpose().contiguous().view.transpose().contiguous().view.view", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "regress_out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "torch.cat", "torch.cat", "torch.cat", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.size", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.size", "regress_out.transpose().contiguous().view.transpose().contiguous().view.size", "regress_out.transpose().contiguous().view.transpose().contiguous().view.size", "len", "len", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "regress_out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.transpose", "regress_out.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "coord", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "preBlock", "(", "x", ")", "#16", "\n", "out_pool", ",", "indices0", "=", "self", ".", "maxpool1", "(", "out", ")", "\n", "out1", "=", "self", ".", "forw1", "(", "out_pool", ")", "#32", "\n", "out1_pool", ",", "indices1", "=", "self", ".", "maxpool2", "(", "out1", ")", "\n", "out2", "=", "self", ".", "forw2", "(", "out1_pool", ")", "#64", "\n", "out2_pool", ",", "indices2", "=", "self", ".", "maxpool3", "(", "out2", ")", "\n", "out3", "=", "self", ".", "forw3", "(", "out2_pool", ")", "#96", "\n", "out3_pool", ",", "indices3", "=", "self", ".", "maxpool4", "(", "out3", ")", "\n", "out4", "=", "self", ".", "forw4", "(", "out3_pool", ")", "#96", "\n", "\n", "rev3", "=", "self", ".", "path1", "(", "out4", ")", "\n", "comb3", "=", "self", ".", "back3", "(", "torch", ".", "cat", "(", "(", "rev3", ",", "out3", ")", ",", "1", ")", ")", "#96+96", "\n", "rev2", "=", "self", ".", "path2", "(", "comb3", ")", "\n", "\n", "comb2", "=", "self", ".", "back2", "(", "torch", ".", "cat", "(", "(", "rev2", ",", "out2", ",", "coord", ")", ",", "1", ")", ")", "#64+64", "\n", "comb2", "=", "self", ".", "drop", "(", "comb2", ")", "\n", "\n", "nodule_out", "=", "self", ".", "nodule_output", "(", "comb2", ")", "\n", "regress_out", "=", "self", ".", "regress_output", "(", "comb2", ")", "\n", "nodule_size", "=", "nodule_out", ".", "size", "(", ")", "\n", "regress_size", "=", "regress_out", ".", "size", "(", ")", "\n", "\n", "nodule_out", "=", "nodule_out", ".", "view", "(", "nodule_out", ".", "size", "(", "0", ")", ",", "nodule_out", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "regress_out", "=", "regress_out", ".", "view", "(", "regress_out", ".", "size", "(", "0", ")", ",", "regress_out", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "nodule_out", "=", "nodule_out", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nodule_size", "[", "0", "]", ",", "nodule_size", "[", "2", "]", ",", "nodule_size", "[", "3", "]", ",", "\n", "nodule_size", "[", "4", "]", ",", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "1", ")", "\n", "regress_out", "=", "regress_out", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "regress_size", "[", "0", "]", ",", "regress_size", "[", "2", "]", ",", "regress_size", "[", "3", "]", ",", "\n", "regress_size", "[", "4", "]", ",", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "4", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "nodule_out", ",", "regress_out", ")", ",", "5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.res18_se.get_model": [[141, 146], ["res18_se.Net", "layers_se.FocalLoss", "layers_se.GetPBB"], "function", ["None"], ["", "", "def", "get_model", "(", ")", ":", "\n", "    ", "net", "=", "Net", "(", ")", "\n", "loss", "=", "FocalLoss", "(", "config", "[", "'num_hard'", "]", ")", "\n", "get_pbb", "=", "GetPBB", "(", "config", ")", "\n", "return", "config", ",", "net", ",", "loss", ",", "get_pbb", "\n", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.NoduleFinding.NoduleFinding.__init__": [[6, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "noduleid", "=", "None", ",", "coordX", "=", "None", ",", "coordY", "=", "None", ",", "coordZ", "=", "None", ",", "coordType", "=", "\"World\"", ",", "\n", "CADprobability", "=", "None", ",", "noduleType", "=", "None", ",", "diameter", "=", "None", ",", "state", "=", "None", ",", "seriesInstanceUID", "=", "None", ")", ":", "\n", "\n", "# set the variables and convert them to the correct type", "\n", "    ", "self", ".", "id", "=", "noduleid", "\n", "self", ".", "coordX", "=", "coordX", "\n", "self", ".", "coordY", "=", "coordY", "\n", "self", ".", "coordZ", "=", "coordZ", "\n", "self", ".", "coordType", "=", "coordType", "\n", "self", ".", "CADprobability", "=", "CADprobability", "\n", "self", ".", "noduleType", "=", "noduleType", "\n", "self", ".", "diameter_mm", "=", "diameter", "\n", "self", ".", "state", "=", "state", "\n", "self", ".", "candidateID", "=", "None", "\n", "self", ".", "seriesuid", "=", "seriesInstanceUID", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.noduleCADEvaluationLUNA16.generateBootstrapSet": [[39, 62], ["numpy.random.randint", "numpy.copy", "numpy.concatenate"], "function", ["None"], ["def", "generateBootstrapSet", "(", "scanToCandidatesDict", ",", "FROCImList", ")", ":", "\n", "    ", "'''\n    Generates bootstrapped version of set\n    '''", "\n", "imageLen", "=", "FROCImList", ".", "shape", "[", "0", "]", "\n", "\n", "# get a random list of images using sampling with replacement", "\n", "rand_index_im", "=", "np", ".", "random", ".", "randint", "(", "imageLen", ",", "size", "=", "imageLen", ")", "\n", "FROCImList_rand", "=", "FROCImList", "[", "rand_index_im", "]", "\n", "\n", "# get a new list of candidates", "\n", "candidatesExists", "=", "False", "\n", "for", "im", "in", "FROCImList_rand", ":", "\n", "        ", "if", "im", "not", "in", "scanToCandidatesDict", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "not", "candidatesExists", ":", "\n", "            ", "candidates", "=", "np", ".", "copy", "(", "scanToCandidatesDict", "[", "im", "]", ")", "\n", "candidatesExists", "=", "True", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "np", ".", "concatenate", "(", "(", "candidates", ",", "scanToCandidatesDict", "[", "im", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.noduleCADEvaluationLUNA16.compute_mean_ci": [[63, 80], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "print", "range", "vec.sort", "numpy.average", "int", "int", "math.floor", "math.floor", "len", "len"], "function", ["None"], ["", "def", "compute_mean_ci", "(", "interp_sens", ",", "confidence", "=", "0.95", ")", ":", "\n", "    ", "sens_mean", "=", "np", ".", "zeros", "(", "(", "interp_sens", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "sens_lb", "=", "np", ".", "zeros", "(", "(", "interp_sens", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "sens_up", "=", "np", ".", "zeros", "(", "(", "interp_sens", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "Pz", "=", "(", "1.0", "-", "confidence", ")", "/", "2.0", "\n", "print", "(", "interp_sens", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "interp_sens", ".", "shape", "[", "1", "]", ")", ":", "\n", "# get sorted vector", "\n", "        ", "vec", "=", "interp_sens", "[", ":", ",", "i", "]", "\n", "vec", ".", "sort", "(", ")", "\n", "\n", "sens_mean", "[", "i", "]", "=", "np", ".", "average", "(", "vec", ")", "\n", "sens_lb", "[", "i", "]", "=", "vec", "[", "int", "(", "math", ".", "floor", "(", "Pz", "*", "len", "(", "vec", ")", ")", ")", "]", "\n", "sens_up", "[", "i", "]", "=", "vec", "[", "int", "(", "math", ".", "floor", "(", "(", "1.0", "-", "Pz", ")", "*", "len", "(", "vec", ")", ")", ")", "]", "\n", "\n", "", "return", "sens_mean", ",", "sens_lb", ",", "sens_up", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.noduleCADEvaluationLUNA16.computeFROC_bootstrap": [[81, 125], ["numpy.concatenate", "numpy.asarray", "numpy.asarray", "range", "range", "numpy.linspace", "numpy.zeros", "range", "noduleCADEvaluationLUNA16.compute_mean_ci", "len", "noduleCADEvaluationLUNA16.generateBootstrapSet", "noduleCADEvaluationLUNA16.computeFROC", "fps_lists.append", "sens_lists.append", "thresholds_lists.append", "numpy.interp", "numpy.copy", "numpy.concatenate", "len", "len"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.compute_mean_ci", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.generateBootstrapSet", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.computeFROC"], ["", "def", "computeFROC_bootstrap", "(", "FROCGTList", ",", "FROCProbList", ",", "FPDivisorList", ",", "FROCImList", ",", "excludeList", ",", "numberOfBootstrapSamples", "=", "1000", ",", "confidence", "=", "0.95", ")", ":", "\n", "\n", "    ", "set1", "=", "np", ".", "concatenate", "(", "(", "[", "FROCGTList", "]", ",", "[", "FROCProbList", "]", ",", "[", "excludeList", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "fps_lists", "=", "[", "]", "\n", "sens_lists", "=", "[", "]", "\n", "thresholds_lists", "=", "[", "]", "\n", "\n", "FPDivisorList_np", "=", "np", ".", "asarray", "(", "FPDivisorList", ")", "\n", "FROCImList_np", "=", "np", ".", "asarray", "(", "FROCImList", ")", "\n", "\n", "# Make a dict with all candidates of all scans", "\n", "scanToCandidatesDict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "FPDivisorList_np", ")", ")", ":", "\n", "        ", "seriesuid", "=", "FPDivisorList_np", "[", "i", "]", "\n", "candidate", "=", "set1", "[", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "\n", "if", "seriesuid", "not", "in", "scanToCandidatesDict", ":", "\n", "            ", "scanToCandidatesDict", "[", "seriesuid", "]", "=", "np", ".", "copy", "(", "candidate", ")", "\n", "", "else", ":", "\n", "            ", "scanToCandidatesDict", "[", "seriesuid", "]", "=", "np", ".", "concatenate", "(", "(", "scanToCandidatesDict", "[", "seriesuid", "]", ",", "candidate", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "numberOfBootstrapSamples", ")", ":", "\n", "# print 'computing FROC: bootstrap %d/%d' % (i,numberOfBootstrapSamples)", "\n", "# Generate a bootstrapped set", "\n", "        ", "btpsamp", "=", "generateBootstrapSet", "(", "scanToCandidatesDict", ",", "FROCImList_np", ")", "\n", "fps", ",", "sens", ",", "thresholds", "=", "computeFROC", "(", "btpsamp", "[", "0", ",", ":", "]", ",", "btpsamp", "[", "1", ",", ":", "]", ",", "len", "(", "FROCImList_np", ")", ",", "btpsamp", "[", "2", ",", ":", "]", ")", "\n", "\n", "fps_lists", ".", "append", "(", "fps", ")", "\n", "sens_lists", ".", "append", "(", "sens", ")", "\n", "thresholds_lists", ".", "append", "(", "thresholds", ")", "\n", "\n", "# compute statistic", "\n", "", "all_fps", "=", "np", ".", "linspace", "(", "FROC_minX", ",", "FROC_maxX", ",", "num", "=", "10000", ")", "\n", "\n", "# Then interpolate all FROC curves at this points", "\n", "interp_sens", "=", "np", ".", "zeros", "(", "(", "numberOfBootstrapSamples", ",", "len", "(", "all_fps", ")", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "i", "in", "range", "(", "numberOfBootstrapSamples", ")", ":", "\n", "        ", "interp_sens", "[", "i", ",", ":", "]", "=", "np", ".", "interp", "(", "all_fps", ",", "fps_lists", "[", "i", "]", ",", "sens_lists", "[", "i", "]", ")", "\n", "\n", "# compute mean and CI", "\n", "", "sens_mean", ",", "sens_lb", ",", "sens_up", "=", "compute_mean_ci", "(", "interp_sens", ",", "confidence", "=", "confidence", ")", "\n", "\n", "return", "all_fps", ",", "sens_mean", ",", "sens_lb", ",", "sens_up", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.noduleCADEvaluationLUNA16.computeFROC": [[126, 146], ["range", "sum", "sum", "len", "sklearn.roc_curve", "len", "sum", "len", "print", "numpy.zeros", "FROCGTList_local.append", "FROCProbList_local.append", "len"], "function", ["None"], ["", "def", "computeFROC", "(", "FROCGTList", ",", "FROCProbList", ",", "totalNumberOfImages", ",", "excludeList", ")", ":", "\n", "# Remove excluded candidates", "\n", "    ", "FROCGTList_local", "=", "[", "]", "\n", "FROCProbList_local", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "excludeList", ")", ")", ":", "\n", "        ", "if", "excludeList", "[", "i", "]", "==", "False", ":", "\n", "            ", "FROCGTList_local", ".", "append", "(", "FROCGTList", "[", "i", "]", ")", "\n", "FROCProbList_local", ".", "append", "(", "FROCProbList", "[", "i", "]", ")", "\n", "\n", "", "", "numberOfDetectedLesions", "=", "sum", "(", "FROCGTList_local", ")", "\n", "totalNumberOfLesions", "=", "sum", "(", "FROCGTList", ")", "\n", "totalNumberOfCandidates", "=", "len", "(", "FROCProbList_local", ")", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "skl_metrics", ".", "roc_curve", "(", "FROCGTList_local", ",", "FROCProbList_local", ")", "\n", "if", "sum", "(", "FROCGTList", ")", "==", "len", "(", "FROCGTList", ")", ":", "# Handle border case when there are no false positives and ROC analysis give nan values.", "\n", "      ", "print", "(", "\"WARNING, this system has no false positives..\"", ")", "\n", "fps", "=", "np", ".", "zeros", "(", "len", "(", "fpr", ")", ")", "\n", "", "else", ":", "\n", "      ", "fps", "=", "fpr", "*", "(", "totalNumberOfCandidates", "-", "numberOfDetectedLesions", ")", "/", "totalNumberOfImages", "\n", "", "sens", "=", "(", "tpr", "*", "numberOfDetectedLesions", ")", "/", "totalNumberOfLesions", "\n", "return", "fps", ",", "sens", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.noduleCADEvaluationLUNA16.evaluateCAD": [[147, 445], ["open", "open.write", "open.write", "open.write", "open.write", "open.write", "tools.csvTools.readCSV", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "noduleCADEvaluationLUNA16.computeFROC", "print", "range", "print", "numpy.linspace", "numpy.interp", "zip", "print", "os.path.join", "os.path.join", "len", "candidates.copy", "candidates.copy.items", "open.write", "int", "open.write", "open.write", "len", "noduleCADEvaluationLUNA16.computeFROC_bootstrap", "len", "numpy.mean", "open", "range", "open", "range", "int", "str", "matplotlib.figure", "matplotlib.gca", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.title", "plt.gca.xaxis.set_ticks", "plt.gca.yaxis.set_ticks", "matplotlib.grid", "matplotlib.tight_layout", "matplotlib.savefig", "candidates.keys", "float", "float", "float", "float", "pow", "candidates.items", "FROCGTList.append", "FROCProbList.append", "FPDivisorList.append", "excludeList.append", "FROCtoNoduleMap.append", "round", "print", "sum_list.append", "numpy.array", "os.path.join", "len", "f.write", "os.path.join", "len", "f.write", "abs", "abs", "open", "f.write", "range", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "plt.gca.fill_between", "matplotlib.xscale", "plt.gca.xaxis.set_major_formatter", "numpy.arange", "os.path.join", "noduleCADEvaluationLUNA16.getNodule", "len", "nodules.items", "probs.sort", "nodules.items", "float", "float", "float", "len", "float", "len", "len", "len", "len", "len", "len", "len", "len", "float", "float", "round", "os.path.join", "len", "f.write", "matplotlib.ticker.FixedFormatter", "header.index", "nodules.keys", "probs.append", "math.pow", "len", "range", "FROCGTList.append", "FROCProbList.append", "FPDivisorList.append", "excludeList.append", "FROCtoNoduleMap.append", "FROCGTList.append", "FROCProbList.append", "FPDivisorList.append", "excludeList.append", "FROCtoNoduleMap.append", "open.write", "float", "float", "len", "float", "float", "math.pow", "math.pow", "noduleMatches.append", "len", "float", "str", "float", "candidates.copy.keys", "print", "float", "float", "float", "str", "float", "float", "int", "float", "str", "candidates.copy.keys", "ignoredCADMarksList.append", "str", "str", "str", "float"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.readCSV", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.computeFROC", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.computeFROC_bootstrap", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.getNodule", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write"], ["", "def", "evaluateCAD", "(", "seriesUIDs", ",", "results_filename", ",", "outputDir", ",", "allNodules", ",", "CADSystemName", ",", "maxNumberOfCADMarks", "=", "-", "1", ",", "\n", "performBootstrapping", "=", "False", ",", "numberOfBootstrapSamples", "=", "1000", ",", "confidence", "=", "0.95", ")", ":", "\n", "    ", "'''\n    function to evaluate a CAD algorithm\n    @param seriesUIDs: list of the seriesUIDs of the cases to be processed\n    @param results_filename: file with results\n    @param outputDir: output directory\n    @param allNodules: dictionary with all nodule annotations of all cases, keys of the dictionary are the seriesuids\n    @param CADSystemName: name of the CAD system, to be used in filenames and on FROC curve\n    '''", "\n", "\n", "nodOutputfile", "=", "open", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "'CADAnalysis.txt'", ")", ",", "'w'", ")", "\n", "nodOutputfile", ".", "write", "(", "\"\\n\"", ")", "\n", "nodOutputfile", ".", "write", "(", "(", "60", "*", "\"*\"", ")", "+", "\"\\n\"", ")", "\n", "nodOutputfile", ".", "write", "(", "\"CAD Analysis: %s\\n\"", "%", "CADSystemName", ")", "\n", "nodOutputfile", ".", "write", "(", "(", "60", "*", "\"*\"", ")", "+", "\"\\n\"", ")", "\n", "nodOutputfile", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "results", "=", "csvTools", ".", "readCSV", "(", "results_filename", ")", "\n", "\n", "allCandsCAD", "=", "{", "}", "\n", "\n", "for", "seriesuid", "in", "seriesUIDs", ":", "\n", "\n", "# collect candidates from result file", "\n", "        ", "nodules", "=", "{", "}", "\n", "header", "=", "results", "[", "0", "]", "\n", "\n", "i", "=", "0", "\n", "for", "result", "in", "results", "[", "1", ":", "]", ":", "\n", "            ", "nodule_seriesuid", "=", "result", "[", "header", ".", "index", "(", "seriesuid_label", ")", "]", "\n", "\n", "if", "seriesuid", "==", "nodule_seriesuid", ":", "\n", "                ", "nodule", "=", "getNodule", "(", "result", ",", "header", ")", "\n", "nodule", ".", "candidateID", "=", "i", "\n", "nodules", "[", "nodule", ".", "candidateID", "]", "=", "nodule", "\n", "i", "+=", "1", "\n", "\n", "", "", "if", "(", "maxNumberOfCADMarks", ">", "0", ")", ":", "\n", "# number of CAD marks, only keep must suspicous marks", "\n", "\n", "            ", "if", "len", "(", "nodules", ".", "keys", "(", ")", ")", ">", "maxNumberOfCADMarks", ":", "\n", "# make a list of all probabilities", "\n", "                ", "probs", "=", "[", "]", "\n", "for", "keytemp", ",", "noduletemp", "in", "nodules", ".", "items", "(", ")", ":", "\n", "                    ", "probs", ".", "append", "(", "float", "(", "noduletemp", ".", "CADprobability", ")", ")", "\n", "", "probs", ".", "sort", "(", "reverse", "=", "True", ")", "# sort from large to small", "\n", "probThreshold", "=", "probs", "[", "maxNumberOfCADMarks", "]", "\n", "nodules2", "=", "{", "}", "\n", "nrNodules2", "=", "0", "\n", "for", "keytemp", ",", "noduletemp", "in", "nodules", ".", "items", "(", ")", ":", "\n", "                    ", "if", "nrNodules2", ">=", "maxNumberOfCADMarks", ":", "\n", "                        ", "break", "\n", "", "if", "float", "(", "noduletemp", ".", "CADprobability", ")", ">", "probThreshold", ":", "\n", "                        ", "nodules2", "[", "keytemp", "]", "=", "noduletemp", "\n", "nrNodules2", "+=", "1", "\n", "\n", "", "", "nodules", "=", "nodules2", "\n", "\n", "# print 'adding candidates: ' + seriesuid", "\n", "", "", "allCandsCAD", "[", "seriesuid", "]", "=", "nodules", "\n", "\n", "# open output files", "\n", "", "nodNoCandFile", "=", "open", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "\"nodulesWithoutCandidate_%s.txt\"", "%", "CADSystemName", ")", ",", "'w'", ")", "\n", "\n", "# --- iterate over all cases (seriesUIDs) and determine how", "\n", "# often a nodule annotation is not covered by a candidate", "\n", "\n", "# initialize some variables to be used in the loop", "\n", "candTPs", "=", "0", "\n", "candFPs", "=", "0", "\n", "candFNs", "=", "0", "\n", "candTNs", "=", "0", "\n", "totalNumberOfCands", "=", "0", "\n", "totalNumberOfNodules", "=", "0", "\n", "doubleCandidatesIgnored", "=", "0", "\n", "irrelevantCandidates", "=", "0", "\n", "minProbValue", "=", "-", "1000000000.0", "# minimum value of a float", "\n", "FROCGTList", "=", "[", "]", "\n", "FROCProbList", "=", "[", "]", "\n", "FPDivisorList", "=", "[", "]", "\n", "excludeList", "=", "[", "]", "\n", "FROCtoNoduleMap", "=", "[", "]", "\n", "ignoredCADMarksList", "=", "[", "]", "\n", "\n", "# -- loop over the cases", "\n", "for", "seriesuid", "in", "seriesUIDs", ":", "\n", "# get the candidates for this case", "\n", "        ", "try", ":", "\n", "            ", "candidates", "=", "allCandsCAD", "[", "seriesuid", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "candidates", "=", "{", "}", "\n", "\n", "# add to the total number of candidates", "\n", "", "totalNumberOfCands", "+=", "len", "(", "candidates", ".", "keys", "(", ")", ")", "\n", "\n", "# make a copy in which items will be deleted", "\n", "candidates2", "=", "candidates", ".", "copy", "(", ")", "\n", "\n", "# get the nodule annotations on this case", "\n", "try", ":", "\n", "            ", "noduleAnnots", "=", "allNodules", "[", "seriesuid", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "noduleAnnots", "=", "[", "]", "\n", "\n", "# - loop over the nodule annotations", "\n", "", "for", "noduleAnnot", "in", "noduleAnnots", ":", "\n", "# increment the number of nodules", "\n", "            ", "if", "noduleAnnot", ".", "state", "==", "\"Included\"", ":", "\n", "                ", "totalNumberOfNodules", "+=", "1", "\n", "\n", "", "x", "=", "float", "(", "noduleAnnot", ".", "coordX", ")", "\n", "y", "=", "float", "(", "noduleAnnot", ".", "coordY", ")", "\n", "z", "=", "float", "(", "noduleAnnot", ".", "coordZ", ")", "\n", "\n", "# 2. Check if the nodule annotation is covered by a candidate", "\n", "# A nodule is marked as detected when the center of mass of the candidate is within a distance R of", "\n", "# the center of the nodule. In order to ensure that the CAD mark is displayed within the nodule on the", "\n", "# CT scan, we set R to be the radius of the nodule size.", "\n", "diameter", "=", "float", "(", "noduleAnnot", ".", "diameter_mm", ")", "\n", "if", "diameter", "<", "0.0", ":", "\n", "              ", "diameter", "=", "10.0", "\n", "", "radiusSquared", "=", "pow", "(", "(", "diameter", "/", "2.0", ")", ",", "2.0", ")", "\n", "\n", "found", "=", "False", "\n", "noduleMatches", "=", "[", "]", "\n", "for", "key", ",", "candidate", "in", "candidates", ".", "items", "(", ")", ":", "\n", "                ", "x2", "=", "float", "(", "candidate", ".", "coordX", ")", "\n", "y2", "=", "float", "(", "candidate", ".", "coordY", ")", "\n", "z2", "=", "float", "(", "candidate", ".", "coordZ", ")", "\n", "dist", "=", "math", ".", "pow", "(", "x", "-", "x2", ",", "2.", ")", "+", "math", ".", "pow", "(", "y", "-", "y2", ",", "2.", ")", "+", "math", ".", "pow", "(", "z", "-", "z2", ",", "2.", ")", "\n", "if", "dist", "<", "radiusSquared", ":", "\n", "                    ", "if", "(", "noduleAnnot", ".", "state", "==", "\"Included\"", ")", ":", "\n", "                        ", "found", "=", "True", "\n", "noduleMatches", ".", "append", "(", "candidate", ")", "\n", "if", "key", "not", "in", "candidates2", ".", "keys", "(", ")", ":", "\n", "                            ", "print", "(", "\"This is strange: CAD mark %s detected two nodules! Check for overlapping nodule annotations, SeriesUID: %s, nodule Annot ID: %s\"", "%", "(", "str", "(", "candidate", ".", "id", ")", ",", "seriesuid", ",", "str", "(", "noduleAnnot", ".", "id", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "del", "candidates2", "[", "key", "]", "\n", "", "", "elif", "(", "noduleAnnot", ".", "state", "==", "\"Excluded\"", ")", ":", "# an excluded nodule", "\n", "                        ", "if", "bOtherNodulesAsIrrelevant", ":", "#    delete marks on excluded nodules so they don't count as false positives", "\n", "                            ", "if", "key", "in", "candidates2", ".", "keys", "(", ")", ":", "\n", "                                ", "irrelevantCandidates", "+=", "1", "\n", "ignoredCADMarksList", ".", "append", "(", "\"%s,%s,%s,%s,%s,%s,%.9f\"", "%", "(", "seriesuid", ",", "-", "1", ",", "candidate", ".", "coordX", ",", "candidate", ".", "coordY", ",", "candidate", ".", "coordZ", ",", "str", "(", "candidate", ".", "id", ")", ",", "float", "(", "candidate", ".", "CADprobability", ")", ")", ")", "\n", "del", "candidates2", "[", "key", "]", "\n", "", "", "", "", "", "if", "len", "(", "noduleMatches", ")", ">", "1", ":", "# double detection", "\n", "                ", "doubleCandidatesIgnored", "+=", "(", "len", "(", "noduleMatches", ")", "-", "1", ")", "\n", "", "if", "noduleAnnot", ".", "state", "==", "\"Included\"", ":", "\n", "# only include it for FROC analysis if it is included", "\n", "# otherwise, the candidate will not be counted as FP, but ignored in the", "\n", "# analysis since it has been deleted from the nodules2 vector of candidates", "\n", "                ", "if", "found", "==", "True", ":", "\n", "# append the sample with the highest probability for the FROC analysis", "\n", "                    ", "maxProb", "=", "None", "\n", "for", "idx", "in", "range", "(", "len", "(", "noduleMatches", ")", ")", ":", "\n", "                        ", "candidate", "=", "noduleMatches", "[", "idx", "]", "\n", "if", "(", "maxProb", "is", "None", ")", "or", "(", "float", "(", "candidate", ".", "CADprobability", ")", ">", "maxProb", ")", ":", "\n", "                            ", "maxProb", "=", "float", "(", "candidate", ".", "CADprobability", ")", "\n", "\n", "", "", "FROCGTList", ".", "append", "(", "1.0", ")", "\n", "FROCProbList", ".", "append", "(", "float", "(", "maxProb", ")", ")", "\n", "FPDivisorList", ".", "append", "(", "seriesuid", ")", "\n", "excludeList", ".", "append", "(", "False", ")", "\n", "FROCtoNoduleMap", ".", "append", "(", "\"%s,%s,%s,%s,%s,%.9f,%s,%.9f\"", "%", "(", "seriesuid", ",", "noduleAnnot", ".", "id", ",", "noduleAnnot", ".", "coordX", ",", "noduleAnnot", ".", "coordY", ",", "noduleAnnot", ".", "coordZ", ",", "float", "(", "noduleAnnot", ".", "diameter_mm", ")", ",", "str", "(", "candidate", ".", "id", ")", ",", "float", "(", "candidate", ".", "CADprobability", ")", ")", ")", "\n", "candTPs", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "candFNs", "+=", "1", "\n", "# append a positive sample with the lowest probability, such that this is added in the FROC analysis", "\n", "FROCGTList", ".", "append", "(", "1.0", ")", "\n", "FROCProbList", ".", "append", "(", "minProbValue", ")", "\n", "FPDivisorList", ".", "append", "(", "seriesuid", ")", "\n", "excludeList", ".", "append", "(", "True", ")", "\n", "FROCtoNoduleMap", ".", "append", "(", "\"%s,%s,%s,%s,%s,%.9f,%s,%s\"", "%", "(", "seriesuid", ",", "noduleAnnot", ".", "id", ",", "noduleAnnot", ".", "coordX", ",", "noduleAnnot", ".", "coordY", ",", "noduleAnnot", ".", "coordZ", ",", "float", "(", "noduleAnnot", ".", "diameter_mm", ")", ",", "int", "(", "-", "1", ")", ",", "\"NA\"", ")", ")", "\n", "nodNoCandFile", ".", "write", "(", "\"%s,%s,%s,%s,%s,%.9f,%s\\n\"", "%", "(", "seriesuid", ",", "noduleAnnot", ".", "id", ",", "noduleAnnot", ".", "coordX", ",", "noduleAnnot", ".", "coordY", ",", "noduleAnnot", ".", "coordZ", ",", "float", "(", "noduleAnnot", ".", "diameter_mm", ")", ",", "str", "(", "-", "1", ")", ")", ")", "\n", "\n", "# add all false positives to the vectors", "\n", "", "", "", "for", "key", ",", "candidate3", "in", "candidates2", ".", "items", "(", ")", ":", "\n", "            ", "candFPs", "+=", "1", "\n", "FROCGTList", ".", "append", "(", "0.0", ")", "\n", "FROCProbList", ".", "append", "(", "float", "(", "candidate3", ".", "CADprobability", ")", ")", "\n", "FPDivisorList", ".", "append", "(", "seriesuid", ")", "\n", "excludeList", ".", "append", "(", "False", ")", "\n", "FROCtoNoduleMap", ".", "append", "(", "\"%s,%s,%s,%s,%s,%s,%.9f\"", "%", "(", "seriesuid", ",", "-", "1", ",", "candidate3", ".", "coordX", ",", "candidate3", ".", "coordY", ",", "candidate3", ".", "coordZ", ",", "str", "(", "candidate3", ".", "id", ")", ",", "float", "(", "candidate3", ".", "CADprobability", ")", ")", ")", "\n", "\n", "", "", "if", "not", "(", "len", "(", "FROCGTList", ")", "==", "len", "(", "FROCProbList", ")", "and", "len", "(", "FROCGTList", ")", "==", "len", "(", "FPDivisorList", ")", "and", "len", "(", "FROCGTList", ")", "==", "len", "(", "FROCtoNoduleMap", ")", "and", "len", "(", "FROCGTList", ")", "==", "len", "(", "excludeList", ")", ")", ":", "\n", "        ", "nodOutputfile", ".", "write", "(", "\"Length of FROC vectors not the same, this should never happen! Aborting..\\n\"", ")", "\n", "\n", "", "nodOutputfile", ".", "write", "(", "\"Candidate detection results:\\n\"", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    True positives: %d\\n\"", "%", "candTPs", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    False positives: %d\\n\"", "%", "candFPs", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    False negatives: %d\\n\"", "%", "candFNs", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    True negatives: %d\\n\"", "%", "candTNs", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    Total number of candidates: %d\\n\"", "%", "totalNumberOfCands", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    Total number of nodules: %d\\n\"", "%", "totalNumberOfNodules", ")", "\n", "\n", "nodOutputfile", ".", "write", "(", "\"    Ignored candidates on excluded nodules: %d\\n\"", "%", "irrelevantCandidates", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    Ignored candidates which were double detections on a nodule: %d\\n\"", "%", "doubleCandidatesIgnored", ")", "\n", "if", "int", "(", "totalNumberOfNodules", ")", "==", "0", ":", "\n", "        ", "nodOutputfile", ".", "write", "(", "\"    Sensitivity: 0.0\\n\"", ")", "\n", "", "else", ":", "\n", "        ", "nodOutputfile", ".", "write", "(", "\"    Sensitivity: %.9f\\n\"", "%", "(", "float", "(", "candTPs", ")", "/", "float", "(", "totalNumberOfNodules", ")", ")", ")", "\n", "", "nodOutputfile", ".", "write", "(", "\"    Average number of candidates per scan: %.9f\\n\"", "%", "(", "float", "(", "totalNumberOfCands", ")", "/", "float", "(", "len", "(", "seriesUIDs", ")", ")", ")", ")", "\n", "\n", "# compute FROC", "\n", "fps", ",", "sens", ",", "thresholds", "=", "computeFROC", "(", "FROCGTList", ",", "FROCProbList", ",", "len", "(", "seriesUIDs", ")", ",", "excludeList", ")", "\n", "\n", "\n", "if", "performBootstrapping", ":", "\n", "        ", "fps_bs_itp", ",", "sens_bs_mean", ",", "sens_bs_lb", ",", "sens_bs_up", "=", "computeFROC_bootstrap", "(", "FROCGTList", ",", "FROCProbList", ",", "FPDivisorList", ",", "seriesUIDs", ",", "excludeList", ",", "\n", "numberOfBootstrapSamples", "=", "numberOfBootstrapSamples", ",", "confidence", "=", "confidence", ")", "\n", "\n", "\n", "", "print", "(", "\"##########################\"", ")", "\n", "froc_list", "=", "[", "0.125", ",", "0.25", ",", "0.5", ",", "1", ",", "2", ",", "4", ",", "8", "]", "\n", "sum_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "fps_bs_itp", ")", ")", ":", "\n", "        ", "if", "round", "(", "fps_bs_itp", "[", "i", "]", ",", "3", ")", "in", "froc_list", ":", "\n", "            ", "print", "(", "sens_bs_mean", "[", "i", "]", ",", "round", "(", "fps_bs_itp", "[", "i", "]", ",", "3", ")", ")", "\n", "sum_list", ".", "append", "(", "sens_bs_mean", "[", "i", "]", ")", "\n", "\n", "", "", "print", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "sum_list", ")", ")", ")", "\n", "\n", "\n", "# Write FROC curve", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "\"froc_%s.txt\"", "%", "CADSystemName", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sens", ")", ")", ":", "\n", "            ", "f", ".", "write", "(", "\"%.9f,%.9f,%.9f\\n\"", "%", "(", "fps", "[", "i", "]", ",", "sens", "[", "i", "]", ",", "thresholds", "[", "i", "]", ")", ")", "\n", "\n", "# Write FROC vectors to disk as well", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "\"froc_gt_prob_vectors_%s.csv\"", "%", "CADSystemName", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "FROCGTList", ")", ")", ":", "\n", "            ", "f", ".", "write", "(", "\"%d,%.9f\\n\"", "%", "(", "FROCGTList", "[", "i", "]", ",", "FROCProbList", "[", "i", "]", ")", ")", "\n", "\n", "", "", "fps_itp", "=", "np", ".", "linspace", "(", "FROC_minX", ",", "FROC_maxX", ",", "num", "=", "10001", ")", "\n", "\n", "sens_itp", "=", "np", ".", "interp", "(", "fps_itp", ",", "fps", ",", "sens", ")", "\n", "\n", "frvvlu", "=", "0", "\n", "nxth", "=", "0.125", "\n", "for", "fp", ",", "ss", "in", "zip", "(", "fps_itp", ",", "sens_itp", ")", ":", "\n", "        ", "if", "abs", "(", "fp", "-", "nxth", ")", "<", "3e-4", ":", "\n", "            ", "frvvlu", "+=", "ss", "\n", "nxth", "*=", "2", "\n", "", "if", "abs", "(", "nxth", "-", "16", ")", "<", "1e-5", ":", "break", "\n", "", "print", "(", "frvvlu", "/", "7", ",", "nxth", ")", "\n", "#    print(sens_itp[fps_itp==0.125], sens_itp[fps_itp==0.25], sens_itp[fps_itp==0.5], sens_itp[fps_itp==1], sens_itp[fps_itp==2]\\", "\n", "#        ,sens_itp[fps_itp==4],sens_itp[fps_itp==8])", "\n", "\n", "if", "performBootstrapping", ":", "\n", "# Write mean, lower, and upper bound curves to disk", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "\"froc_%s_bootstrapping.csv\"", "%", "CADSystemName", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\"FPrate,Sensivity[Mean],Sensivity[Lower bound],Sensivity[Upper bound]\\n\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "fps_bs_itp", ")", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"%.9f,%.9f,%.9f,%.9f\\n\"", "%", "(", "fps_bs_itp", "[", "i", "]", ",", "sens_bs_mean", "[", "i", "]", ",", "sens_bs_lb", "[", "i", "]", ",", "sens_bs_up", "[", "i", "]", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "fps_bs_itp", "=", "None", "\n", "sens_bs_mean", "=", "None", "\n", "sens_bs_lb", "=", "None", "\n", "sens_bs_up", "=", "None", "\n", "\n", "# create FROC graphs", "\n", "", "if", "int", "(", "totalNumberOfNodules", ")", ">", "0", ":", "\n", "\n", "        ", "graphTitle", "=", "str", "(", "\"\"", ")", "\n", "fig1", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "clr", "=", "'b'", "\n", "plt", ".", "plot", "(", "fps_itp", ",", "sens_itp", ",", "color", "=", "clr", ",", "label", "=", "\"%s\"", "%", "CADSystemName", ",", "lw", "=", "2", ")", "\n", "\n", "if", "performBootstrapping", ":", "\n", "            ", "plt", ".", "plot", "(", "fps_bs_itp", ",", "sens_bs_mean", ",", "color", "=", "clr", ",", "ls", "=", "'--'", ")", "\n", "plt", ".", "plot", "(", "fps_bs_itp", ",", "sens_bs_lb", ",", "color", "=", "clr", ",", "ls", "=", "':'", ")", "# , label = \"lb\")", "\n", "plt", ".", "plot", "(", "fps_bs_itp", ",", "sens_bs_up", ",", "color", "=", "clr", ",", "ls", "=", "':'", ")", "# , label = \"ub\")", "\n", "ax", ".", "fill_between", "(", "fps_bs_itp", ",", "sens_bs_lb", ",", "sens_bs_up", ",", "facecolor", "=", "clr", ",", "alpha", "=", "0.05", ")", "\n", "\n", "", "xmin", "=", "FROC_minX", "\n", "xmax", "=", "FROC_maxX", "\n", "plt", ".", "xlim", "(", "xmin", ",", "xmax", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "1", ")", "\n", "plt", ".", "xlabel", "(", "'Average number of false positives per scan'", ")", "\n", "plt", ".", "ylabel", "(", "'Sensitivity'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "title", "(", "'FROC performance - %s'", "%", "(", "CADSystemName", ")", ")", "\n", "\n", "if", "bLogPlot", ":", "\n", "            ", "plt", ".", "xscale", "(", "'log'", ",", "basex", "=", "2", ")", "\n", "ax", ".", "xaxis", ".", "set_major_formatter", "(", "FixedFormatter", "(", "[", "0.125", ",", "0.25", ",", "0.5", ",", "1", ",", "2", ",", "4", ",", "8", "]", ")", ")", "\n", "\n", "# set your ticks manually", "\n", "", "ax", ".", "xaxis", ".", "set_ticks", "(", "[", "0.125", ",", "0.25", ",", "0.5", ",", "1", ",", "2", ",", "4", ",", "8", "]", ")", "\n", "#        ax.yaxis.set_ticks(np.arange(0.5, 1, 0.1))", "\n", "ax", ".", "yaxis", ".", "set_ticks", "(", "np", ".", "arange", "(", "0", ",", "1.1", ",", "0.1", ")", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'both'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "\"froc_%s.png\"", "%", "CADSystemName", ")", ",", "bbox_inches", "=", "0", ",", "dpi", "=", "300", ")", "\n", "\n", "", "return", "(", "fps", ",", "sens", ",", "thresholds", ",", "fps_bs_itp", ",", "sens_bs_mean", ",", "sens_bs_lb", ",", "sens_bs_up", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.noduleCADEvaluationLUNA16.getNodule": [[446, 462], ["NoduleFinding.NoduleFinding", "header.index", "header.index", "header.index", "header.index", "header.index"], "function", ["None"], ["", "def", "getNodule", "(", "annotation", ",", "header", ",", "state", "=", "\"\"", ")", ":", "\n", "    ", "nodule", "=", "NoduleFinding", "(", ")", "\n", "nodule", ".", "coordX", "=", "annotation", "[", "header", ".", "index", "(", "coordX_label", ")", "]", "\n", "nodule", ".", "coordY", "=", "annotation", "[", "header", ".", "index", "(", "coordY_label", ")", "]", "\n", "nodule", ".", "coordZ", "=", "annotation", "[", "header", ".", "index", "(", "coordZ_label", ")", "]", "\n", "\n", "if", "diameter_mm_label", "in", "header", ":", "\n", "        ", "nodule", ".", "diameter_mm", "=", "annotation", "[", "header", ".", "index", "(", "diameter_mm_label", ")", "]", "\n", "\n", "", "if", "CADProbability_label", "in", "header", ":", "\n", "        ", "nodule", ".", "CADprobability", "=", "annotation", "[", "header", ".", "index", "(", "CADProbability_label", ")", "]", "\n", "\n", "", "if", "not", "state", "==", "\"\"", ":", "\n", "        ", "nodule", ".", "state", "=", "state", "\n", "\n", "", "return", "nodule", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.noduleCADEvaluationLUNA16.collectNoduleAnnotations": [[463, 500], ["print", "print", "len", "str", "str", "noduleCADEvaluationLUNA16.getNodule", "nodules.append", "noduleCADEvaluationLUNA16.getNodule", "nodules.append", "header.index", "header.index"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.getNodule", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.getNodule"], ["", "def", "collectNoduleAnnotations", "(", "annotations", ",", "annotations_excluded", ",", "seriesUIDs", ")", ":", "\n", "    ", "allNodules", "=", "{", "}", "\n", "noduleCount", "=", "0", "\n", "noduleCountTotal", "=", "0", "\n", "\n", "for", "seriesuid", "in", "seriesUIDs", ":", "\n", "# print 'adding nodule annotations: ' + seriesuid", "\n", "\n", "        ", "nodules", "=", "[", "]", "\n", "numberOfIncludedNodules", "=", "0", "\n", "\n", "# add included findings", "\n", "header", "=", "annotations", "[", "0", "]", "\n", "for", "annotation", "in", "annotations", "[", "1", ":", "]", ":", "\n", "            ", "nodule_seriesuid", "=", "annotation", "[", "header", ".", "index", "(", "seriesuid_label", ")", "]", "\n", "\n", "if", "seriesuid", "==", "nodule_seriesuid", ":", "\n", "                ", "nodule", "=", "getNodule", "(", "annotation", ",", "header", ",", "state", "=", "\"Included\"", ")", "\n", "nodules", ".", "append", "(", "nodule", ")", "\n", "numberOfIncludedNodules", "+=", "1", "\n", "\n", "# add excluded findings", "\n", "", "", "header", "=", "annotations_excluded", "[", "0", "]", "\n", "for", "annotation", "in", "annotations_excluded", "[", "1", ":", "]", ":", "\n", "            ", "nodule_seriesuid", "=", "annotation", "[", "header", ".", "index", "(", "seriesuid_label", ")", "]", "\n", "\n", "if", "seriesuid", "==", "nodule_seriesuid", ":", "\n", "                ", "nodule", "=", "getNodule", "(", "annotation", ",", "header", ",", "state", "=", "\"Excluded\"", ")", "\n", "nodules", ".", "append", "(", "nodule", ")", "\n", "\n", "", "", "allNodules", "[", "seriesuid", "]", "=", "nodules", "\n", "noduleCount", "+=", "numberOfIncludedNodules", "\n", "noduleCountTotal", "+=", "len", "(", "nodules", ")", "\n", "\n", "", "print", "(", "'Total number of included nodule annotations: '", "+", "str", "(", "noduleCount", ")", ")", "\n", "print", "(", "'Total number of nodule annotations: '", "+", "str", "(", "noduleCountTotal", ")", ")", "\n", "return", "allNodules", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.noduleCADEvaluationLUNA16.collect": [[502, 514], ["tools.csvTools.readCSV", "tools.csvTools.readCSV", "tools.csvTools.readCSV", "noduleCADEvaluationLUNA16.collectNoduleAnnotations", "seriesUIDs.append"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.readCSV", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.readCSV", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.readCSV", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.collectNoduleAnnotations"], ["", "def", "collect", "(", "annotations_filename", ",", "annotations_excluded_filename", ",", "seriesuids_filename", ")", ":", "\n", "    ", "annotations", "=", "csvTools", ".", "readCSV", "(", "annotations_filename", ")", "\n", "annotations_excluded", "=", "csvTools", ".", "readCSV", "(", "annotations_excluded_filename", ")", "\n", "seriesUIDs_csv", "=", "csvTools", ".", "readCSV", "(", "seriesuids_filename", ")", "\n", "\n", "seriesUIDs", "=", "[", "]", "\n", "for", "seriesUID", "in", "seriesUIDs_csv", ":", "\n", "        ", "seriesUIDs", ".", "append", "(", "seriesUID", "[", "0", "]", ")", "\n", "\n", "", "allNodules", "=", "collectNoduleAnnotations", "(", "annotations", ",", "annotations_excluded", ",", "seriesUIDs", ")", "\n", "\n", "return", "(", "allNodules", ",", "seriesUIDs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.noduleCADEvaluationLUNA16.noduleCADEvaluation": [[516, 534], ["print", "noduleCADEvaluationLUNA16.collect", "noduleCADEvaluationLUNA16.evaluateCAD", "os.path.splitext", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.collect", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.evaluateCAD"], ["", "def", "noduleCADEvaluation", "(", "annotations_filename", ",", "annotations_excluded_filename", ",", "seriesuids_filename", ",", "results_filename", ",", "outputDir", ")", ":", "\n", "    ", "'''\n    function to load annotations and evaluate a CAD algorithm\n    @param annotations_filename: list of annotations\n    @param annotations_excluded_filename: list of annotations that are excluded from analysis\n    @param seriesuids_filename: list of CT images in seriesuids\n    @param results_filename: list of CAD marks with probabilities\n    @param outputDir: output directory\n    '''", "\n", "\n", "print", "(", "annotations_filename", ")", "\n", "\n", "(", "allNodules", ",", "seriesUIDs", ")", "=", "collect", "(", "annotations_filename", ",", "annotations_excluded_filename", ",", "seriesuids_filename", ")", "\n", "\n", "return", "evaluateCAD", "(", "seriesUIDs", ",", "results_filename", ",", "outputDir", ",", "allNodules", ",", "\n", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "results_filename", ")", ")", "[", "0", "]", ",", "\n", "maxNumberOfCADMarks", "=", "100", ",", "performBootstrapping", "=", "bPerformBootstrapping", ",", "\n", "numberOfBootstrapSamples", "=", "bNumberOfBootstrapSamples", ",", "confidence", "=", "bConfidence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.Logger.__init__": [[44, 47], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logfile", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "self", ".", "log", "=", "open", "(", "logfile", ",", "\"a\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.Logger.write": [[48, 51], ["utils.Logger.terminal.write", "utils.Logger.log.write"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.Logger.flush": [[52, 57], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "#this flush method is needed for python 3 compatibility.", "\n", "#this handles the flush command by doing nothing.", "\n", "#you might want to specify some extra behavior here.", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.getFreeId": [[10, 30], ["pynvml.nvmlInit", "pynvml.nvmlDeviceGetCount", "range", "pynvml.nvmlDeviceGetHandleByIndex", "pynvml.nvmlDeviceGetUtilizationRates", "float", "utils.getFreeId.getFreeRatio"], "function", ["None"], ["def", "getFreeId", "(", ")", ":", "\n", "    ", "import", "pynvml", "\n", "\n", "pynvml", ".", "nvmlInit", "(", ")", "\n", "def", "getFreeRatio", "(", "id", ")", ":", "\n", "        ", "handle", "=", "pynvml", ".", "nvmlDeviceGetHandleByIndex", "(", "id", ")", "\n", "use", "=", "pynvml", ".", "nvmlDeviceGetUtilizationRates", "(", "handle", ")", "\n", "ratio", "=", "0.5", "*", "(", "float", "(", "use", ".", "gpu", "+", "float", "(", "use", ".", "memory", ")", ")", ")", "\n", "return", "ratio", "\n", "\n", "", "deviceCount", "=", "pynvml", ".", "nvmlDeviceGetCount", "(", ")", "\n", "available", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "deviceCount", ")", ":", "\n", "        ", "if", "getFreeRatio", "(", "i", ")", "<", "70", ":", "\n", "            ", "available", ".", "append", "(", "i", ")", "\n", "", "", "gpus", "=", "''", "\n", "for", "g", "in", "available", ":", "\n", "        ", "gpus", "=", "gpus", "+", "str", "(", "g", ")", "+", "','", "\n", "", "gpus", "=", "gpus", "[", ":", "-", "1", "]", "\n", "return", "gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.setgpu": [[31, 42], ["utils.getFreeId", "print", "len", "any", "gpus.split", "ValueError", "gpus.split"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.getFreeId", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split"], ["", "def", "setgpu", "(", "gpuinput", ")", ":", "\n", "    ", "freeids", "=", "getFreeId", "(", ")", "\n", "if", "gpuinput", "==", "'all'", ":", "\n", "        ", "gpus", "=", "freeids", "\n", "", "else", ":", "\n", "        ", "gpus", "=", "gpuinput", "\n", "if", "any", "(", "[", "g", "not", "in", "freeids", "for", "g", "in", "gpus", ".", "split", "(", "','", ")", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'gpu'", "+", "g", "+", "'is being used'", ")", "\n", "", "", "print", "(", "'using gpu '", "+", "gpus", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "gpus", "\n", "return", "len", "(", "gpus", ".", "split", "(", "','", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.split4": [[59, 77], ["torch.Tensor.numpy", "numpy.pad", "torch.from_numpy", "splits.append", "splits.append", "splits.append", "splits.append", "torch.cat", "numpy.ceil().astype", "numpy.ceil().astype", "int", "numpy.ceil", "numpy.ceil", "numpy.ceil", "float", "float", "float"], "function", ["None"], ["", "", "def", "split4", "(", "data", ",", "max_stride", ",", "margin", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "data", "=", "torch", ".", "Tensor", ".", "numpy", "(", "data", ")", "\n", "_", ",", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "shape", "\n", "\n", "w_width", "=", "np", ".", "ceil", "(", "float", "(", "w", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "h_width", "=", "np", ".", "ceil", "(", "float", "(", "h", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "pad", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "z", ")", "/", "max_stride", ")", "*", "max_stride", ")", "-", "z", "\n", "leftpad", "=", "pad", "/", "2", "\n", "pad", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "leftpad", ",", "pad", "-", "leftpad", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "data", "=", "np", ".", "pad", "(", "data", ",", "pad", ",", "'constant'", ",", "constant_values", "=", "-", "1", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "data", ")", "\n", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", ":", ",", ":", "h_width", ",", ":", "w_width", "]", ")", "\n", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", ":", ",", ":", "h_width", ",", "-", "w_width", ":", "]", ")", "\n", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", ":", ",", "-", "h_width", ":", ",", ":", "w_width", "]", ")", "\n", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", ":", ",", "-", "h_width", ":", ",", "-", "w_width", ":", "]", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "splits", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.combine4": [[78, 108], ["range", "numpy.zeros", "len", "splits.append"], "function", ["None"], ["", "def", "combine4", "(", "output", ",", "h", ",", "w", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "        ", "splits", ".", "append", "(", "output", "[", "i", "]", ")", "\n", "\n", "", "output", "=", "np", ".", "zeros", "(", "(", "\n", "splits", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "\n", "h", ",", "\n", "w", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "h0", "=", "output", ".", "shape", "[", "1", "]", "/", "2", "\n", "h1", "=", "output", ".", "shape", "[", "1", "]", "-", "h0", "\n", "w0", "=", "output", ".", "shape", "[", "2", "]", "/", "2", "\n", "w1", "=", "output", ".", "shape", "[", "2", "]", "-", "w0", "\n", "\n", "splits", "[", "0", "]", "=", "splits", "[", "0", "]", "[", ":", ",", ":", "h0", ",", ":", "w0", ",", ":", ",", ":", "]", "\n", "output", "[", ":", ",", ":", "h0", ",", ":", "w0", ",", ":", ",", ":", "]", "=", "splits", "[", "0", "]", "\n", "\n", "splits", "[", "1", "]", "=", "splits", "[", "1", "]", "[", ":", ",", ":", "h0", ",", "-", "w1", ":", ",", ":", ",", ":", "]", "\n", "output", "[", ":", ",", ":", "h0", ",", "-", "w1", ":", ",", ":", ",", ":", "]", "=", "splits", "[", "1", "]", "\n", "\n", "splits", "[", "2", "]", "=", "splits", "[", "2", "]", "[", ":", ",", "-", "h1", ":", ",", ":", "w0", ",", ":", ",", ":", "]", "\n", "output", "[", ":", ",", "-", "h1", ":", ",", ":", "w0", ",", ":", ",", ":", "]", "=", "splits", "[", "2", "]", "\n", "\n", "splits", "[", "3", "]", "=", "splits", "[", "3", "]", "[", ":", ",", "-", "h1", ":", ",", "-", "w1", ":", ",", ":", ",", ":", "]", "\n", "output", "[", ":", ",", "-", "h1", ":", ",", "-", "w1", ":", ",", ":", ",", ":", "]", "=", "splits", "[", "3", "]", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.split8": [[109, 132], ["isinstance", "isinstance", "data.size", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.concatenate", "torch.cat", "numpy.ceil", "numpy.ceil", "numpy.ceil", "isinstance", "splits.append", "splits.append", "float", "float", "float"], "function", ["None"], ["", "def", "split8", "(", "data", ",", "max_stride", ",", "margin", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "if", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "shape", "\n", "", "else", ":", "\n", "        ", "_", ",", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "size", "(", ")", "\n", "\n", "", "z_width", "=", "np", ".", "ceil", "(", "float", "(", "z", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "w_width", "=", "np", ".", "ceil", "(", "float", "(", "w", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "h_width", "=", "np", ".", "ceil", "(", "float", "(", "h", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "-", "z_width", ",", "None", "]", "]", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "-", "h_width", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "-", "w_width", ",", "None", "]", "]", ":", "\n", "                ", "if", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "splits", ".", "append", "(", "data", "[", "np", ".", "newaxis", ",", ":", ",", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", "]", ")", "\n", "\n", "\n", "", "", "", "", "if", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "splits", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "splits", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.combine8": [[135, 158], ["range", "numpy.zeros", "len", "splits.append"], "function", ["None"], ["", "", "def", "combine8", "(", "output", ",", "z", ",", "h", ",", "w", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "        ", "splits", ".", "append", "(", "output", "[", "i", "]", ")", "\n", "\n", "", "output", "=", "np", ".", "zeros", "(", "(", "\n", "z", ",", "\n", "h", ",", "\n", "w", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "\n", "z_width", "=", "z", "/", "2", "\n", "h_width", "=", "h", "/", "2", "\n", "w_width", "=", "w", "/", "2", "\n", "i", "=", "0", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_width", "-", "z", ",", "None", "]", "]", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_width", "-", "h", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_width", "-", "w", ",", "None", "]", "]", ":", "\n", "                ", "output", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "=", "splits", "[", "i", "]", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "i", "=", "i", "+", "1", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.split16": [[160, 175], ["data.size", "torch.cat", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil", "numpy.ceil", "numpy.ceil", "splits.append", "float", "float", "float"], "function", ["None"], ["", "def", "split16", "(", "data", ",", "max_stride", ",", "margin", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "_", ",", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "size", "(", ")", "\n", "\n", "z_width", "=", "np", ".", "ceil", "(", "float", "(", "z", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "z_pos", "=", "[", "z", "*", "3", "/", "8", "-", "z_width", "/", "2", ",", "\n", "z", "*", "5", "/", "8", "-", "z_width", "/", "2", "]", "\n", "h_width", "=", "np", ".", "ceil", "(", "float", "(", "h", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "w_width", "=", "np", ".", "ceil", "(", "float", "(", "w", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_pos", "[", "0", "]", ",", "z_pos", "[", "0", "]", "+", "z_width", "]", ",", "[", "z_pos", "[", "1", "]", ",", "z_pos", "[", "1", "]", "+", "z_width", "]", ",", "[", "-", "z_width", ",", "None", "]", "]", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "-", "h_width", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "-", "w_width", ",", "None", "]", "]", ":", "\n", "                ", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", "]", ")", "\n", "\n", "", "", "", "return", "torch", ".", "cat", "(", "splits", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.combine16": [[176, 204], ["range", "numpy.zeros", "zip", "len", "splits.append"], "function", ["None"], ["", "def", "combine16", "(", "output", ",", "z", ",", "h", ",", "w", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "        ", "splits", ".", "append", "(", "output", "[", "i", "]", ")", "\n", "\n", "", "output", "=", "np", ".", "zeros", "(", "(", "\n", "z", ",", "\n", "h", ",", "\n", "w", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "\n", "z_width", "=", "z", "/", "4", "\n", "h_width", "=", "h", "/", "2", "\n", "w_width", "=", "w", "/", "2", "\n", "splitzstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "0", "]", "/", "2", "-", "z_width", "/", "2", "\n", "z_pos", "=", "[", "z", "*", "3", "/", "8", "-", "z_width", "/", "2", ",", "\n", "z", "*", "5", "/", "8", "-", "z_width", "/", "2", "]", "\n", "i", "=", "0", "\n", "for", "zz", ",", "zz2", "in", "zip", "(", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_width", ",", "z_width", "*", "2", "]", ",", "[", "z_width", "*", "2", ",", "z_width", "*", "3", "]", ",", "[", "z_width", "*", "3", "-", "z", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "z_width", "]", ",", "[", "splitzstart", ",", "z_width", "+", "splitzstart", "]", ",", "[", "splitzstart", ",", "z_width", "+", "splitzstart", "]", ",", "[", "z_width", "*", "3", "-", "z", ",", "None", "]", "]", ")", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_width", "-", "h", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_width", "-", "w", ",", "None", "]", "]", ":", "\n", "                ", "output", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "=", "splits", "[", "i", "]", "[", "zz2", "[", "0", "]", ":", "zz2", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "i", "=", "i", "+", "1", "\n", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.split32": [[205, 224], ["data.size", "torch.cat", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil", "numpy.ceil", "numpy.ceil", "splits.append", "float", "float", "float"], "function", ["None"], ["", "def", "split32", "(", "data", ",", "max_stride", ",", "margin", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "_", ",", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "size", "(", ")", "\n", "\n", "z_width", "=", "np", ".", "ceil", "(", "float", "(", "z", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "w_width", "=", "np", ".", "ceil", "(", "float", "(", "w", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "h_width", "=", "np", ".", "ceil", "(", "float", "(", "h", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "\n", "w_pos", "=", "[", "w", "*", "3", "/", "8", "-", "w_width", "/", "2", ",", "\n", "w", "*", "5", "/", "8", "-", "w_width", "/", "2", "]", "\n", "h_pos", "=", "[", "h", "*", "3", "/", "8", "-", "h_width", "/", "2", ",", "\n", "h", "*", "5", "/", "8", "-", "h_width", "/", "2", "]", "\n", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "-", "z_width", ",", "None", "]", "]", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_pos", "[", "0", "]", ",", "h_pos", "[", "0", "]", "+", "h_width", "]", ",", "[", "h_pos", "[", "1", "]", ",", "h_pos", "[", "1", "]", "+", "h_width", "]", ",", "[", "-", "h_width", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_pos", "[", "0", "]", ",", "w_pos", "[", "0", "]", "+", "w_width", "]", ",", "[", "w_pos", "[", "1", "]", ",", "w_pos", "[", "1", "]", "+", "w_width", "]", ",", "[", "-", "w_width", ",", "None", "]", "]", ":", "\n", "                ", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", "]", ")", "\n", "\n", "", "", "", "return", "torch", ".", "cat", "(", "splits", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.combine32": [[225, 254], ["numpy.zeros", "int", "int", "int", "numpy.ceil", "numpy.ceil", "numpy.ceil", "zip", "zip", "float", "float", "float"], "function", ["None"], ["", "def", "combine32", "(", "splits", ",", "z", ",", "h", ",", "w", ")", ":", "\n", "\n", "    ", "output", "=", "np", ".", "zeros", "(", "(", "\n", "z", ",", "\n", "h", ",", "\n", "w", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "\n", "z_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "z", ")", "/", "2", ")", ")", "\n", "h_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "h", ")", "/", "4", ")", ")", "\n", "w_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "w", ")", "/", "4", ")", ")", "\n", "splithstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "1", "]", "/", "2", "-", "h_width", "/", "2", "\n", "splitwstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "2", "]", "/", "2", "-", "w_width", "/", "2", "\n", "\n", "i", "=", "0", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_width", "-", "z", ",", "None", "]", "]", ":", "\n", "\n", "        ", "for", "hh", ",", "hh2", "in", "zip", "(", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_width", ",", "h_width", "*", "2", "]", ",", "[", "h_width", "*", "2", ",", "h_width", "*", "3", "]", ",", "[", "h_width", "*", "3", "-", "h", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "h_width", "]", ",", "[", "splithstart", ",", "h_width", "+", "splithstart", "]", ",", "[", "splithstart", ",", "h_width", "+", "splithstart", "]", ",", "[", "h_width", "*", "3", "-", "h", ",", "None", "]", "]", ")", ":", "\n", "\n", "            ", "for", "ww", ",", "ww2", "in", "zip", "(", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_width", ",", "w_width", "*", "2", "]", ",", "[", "w_width", "*", "2", ",", "w_width", "*", "3", "]", ",", "[", "w_width", "*", "3", "-", "w", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "w_width", "]", ",", "[", "splitwstart", ",", "w_width", "+", "splitwstart", "]", ",", "[", "splitwstart", ",", "w_width", "+", "splitwstart", "]", ",", "[", "w_width", "*", "3", "-", "w", ",", "None", "]", "]", ")", ":", "\n", "\n", "                ", "output", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "=", "splits", "[", "i", "]", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh2", "[", "0", "]", ":", "hh2", "[", "1", "]", ",", "ww2", "[", "0", "]", ":", "ww2", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "i", "=", "i", "+", "1", "\n", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.split64": [[257, 278], ["data.size", "torch.cat", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil", "numpy.ceil", "numpy.ceil", "splits.append", "float", "float", "float"], "function", ["None"], ["", "def", "split64", "(", "data", ",", "max_stride", ",", "margin", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "_", ",", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "size", "(", ")", "\n", "\n", "z_width", "=", "np", ".", "ceil", "(", "float", "(", "z", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "w_width", "=", "np", ".", "ceil", "(", "float", "(", "w", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "h_width", "=", "np", ".", "ceil", "(", "float", "(", "h", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "\n", "z_pos", "=", "[", "z", "*", "3", "/", "8", "-", "z_width", "/", "2", ",", "\n", "z", "*", "5", "/", "8", "-", "z_width", "/", "2", "]", "\n", "w_pos", "=", "[", "w", "*", "3", "/", "8", "-", "w_width", "/", "2", ",", "\n", "w", "*", "5", "/", "8", "-", "w_width", "/", "2", "]", "\n", "h_pos", "=", "[", "h", "*", "3", "/", "8", "-", "h_width", "/", "2", ",", "\n", "h", "*", "5", "/", "8", "-", "h_width", "/", "2", "]", "\n", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_pos", "[", "0", "]", ",", "z_pos", "[", "0", "]", "+", "z_width", "]", ",", "[", "z_pos", "[", "1", "]", ",", "z_pos", "[", "1", "]", "+", "z_width", "]", ",", "[", "-", "z_width", ",", "None", "]", "]", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_pos", "[", "0", "]", ",", "h_pos", "[", "0", "]", "+", "h_width", "]", ",", "[", "h_pos", "[", "1", "]", ",", "h_pos", "[", "1", "]", "+", "h_width", "]", ",", "[", "-", "h_width", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_pos", "[", "0", "]", ",", "w_pos", "[", "0", "]", "+", "w_width", "]", ",", "[", "w_pos", "[", "1", "]", ",", "w_pos", "[", "1", "]", "+", "w_width", "]", ",", "[", "-", "w_width", ",", "None", "]", "]", ":", "\n", "                ", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", "]", ")", "\n", "\n", "", "", "", "return", "torch", ".", "cat", "(", "splits", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.combine64": [[279, 313], ["range", "numpy.zeros", "int", "int", "int", "zip", "len", "splits.append", "numpy.ceil", "numpy.ceil", "numpy.ceil", "zip", "zip", "float", "float", "float"], "function", ["None"], ["", "def", "combine64", "(", "output", ",", "z", ",", "h", ",", "w", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "        ", "splits", ".", "append", "(", "output", "[", "i", "]", ")", "\n", "\n", "", "output", "=", "np", ".", "zeros", "(", "(", "\n", "z", ",", "\n", "h", ",", "\n", "w", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "\n", "z_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "z", ")", "/", "4", ")", ")", "\n", "h_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "h", ")", "/", "4", ")", ")", "\n", "w_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "w", ")", "/", "4", ")", ")", "\n", "splitzstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "0", "]", "/", "2", "-", "z_width", "/", "2", "\n", "splithstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "1", "]", "/", "2", "-", "h_width", "/", "2", "\n", "splitwstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "2", "]", "/", "2", "-", "w_width", "/", "2", "\n", "\n", "i", "=", "0", "\n", "for", "zz", ",", "zz2", "in", "zip", "(", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_width", ",", "z_width", "*", "2", "]", ",", "[", "z_width", "*", "2", ",", "z_width", "*", "3", "]", ",", "[", "z_width", "*", "3", "-", "z", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "z_width", "]", ",", "[", "splitzstart", ",", "z_width", "+", "splitzstart", "]", ",", "[", "splitzstart", ",", "z_width", "+", "splitzstart", "]", ",", "[", "z_width", "*", "3", "-", "z", ",", "None", "]", "]", ")", ":", "\n", "\n", "        ", "for", "hh", ",", "hh2", "in", "zip", "(", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_width", ",", "h_width", "*", "2", "]", ",", "[", "h_width", "*", "2", ",", "h_width", "*", "3", "]", ",", "[", "h_width", "*", "3", "-", "h", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "h_width", "]", ",", "[", "splithstart", ",", "h_width", "+", "splithstart", "]", ",", "[", "splithstart", ",", "h_width", "+", "splithstart", "]", ",", "[", "h_width", "*", "3", "-", "h", ",", "None", "]", "]", ")", ":", "\n", "\n", "            ", "for", "ww", ",", "ww2", "in", "zip", "(", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_width", ",", "w_width", "*", "2", "]", ",", "[", "w_width", "*", "2", ",", "w_width", "*", "3", "]", ",", "[", "w_width", "*", "3", "-", "w", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "w_width", "]", ",", "[", "splitwstart", ",", "w_width", "+", "splitwstart", "]", ",", "[", "splitwstart", ",", "w_width", "+", "splitwstart", "]", ",", "[", "w_width", "*", "3", "-", "w", ",", "None", "]", "]", ")", ":", "\n", "\n", "                ", "output", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "=", "splits", "[", "i", "]", "[", "zz2", "[", "0", "]", ":", "zz2", "[", "1", "]", ",", "hh2", "[", "0", "]", ":", "hh2", "[", "1", "]", ",", "ww2", "[", "0", "]", ":", "ww2", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "i", "=", "i", "+", "1", "\n", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.luna_detector.utils.assignKmeans": [[315, 352], ["numpy.load", "numpy.load", "open", "csv.reader", "csv.reader", "open", "csv.writer", "csv.writer", "range", "open", "csv.writer", "csv.writer", "range", "numpy.sum", "numpy.sum", "len", "csv.writer.writerow", "len", "csv.writer.writerow", "numpy.abs", "numpy.abs", "newimagelist1.append", "newimagelist2.append"], "function", ["None"], ["", "def", "assignKmeans", "(", ")", ":", "\n", "    ", "csvdir", "=", "'./imageInfo_luna.csv'", "\n", "centers", "=", "np", ".", "load", "(", "'centers_luna.npy'", ")", "\n", "c1", "=", "centers", "[", "0", "]", "\n", "c2", "=", "centers", "[", "1", "]", "\n", "\n", "kmeans", "=", "np", ".", "load", "(", "'kmean_luna_raw.npy'", ")", "\n", "\n", "newcsvdir1", "=", "'imagesortInfo_luna1.csv'", "\n", "newcsvdir2", "=", "'imagesortInfo_luna2.csv'", "\n", "\n", "newimagelist1", "=", "[", "]", "\n", "newimagelist2", "=", "[", "]", "\n", "idx", "=", "0", "\n", "with", "open", "(", "csvdir", ",", "'r'", ")", "as", "readfile", ":", "\n", "        ", "csvreader", "=", "csv", ".", "reader", "(", "readfile", ")", "\n", "for", "row", "in", "csvreader", ":", "\n", "            ", "curk", "=", "kmeans", "[", "idx", "]", "\n", "diff1", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "curk", "-", "c1", ")", ")", "\n", "diff2", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "curk", "-", "c2", ")", ")", "\n", "\n", "if", "(", "diff1", "<", "diff2", ")", ":", "\n", "                ", "newimagelist1", ".", "append", "(", "row", "+", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "newimagelist2", ".", "append", "(", "row", "+", "[", "1", "]", ")", "\n", "", "idx", "+=", "1", "\n", "\n", "", "", "with", "open", "(", "newcsvdir1", ",", "'w'", ")", "as", "writefile1", ":", "\n", "        ", "csvwriter1", "=", "csv", ".", "writer", "(", "writefile1", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "newimagelist1", ")", ")", ":", "\n", "            ", "csvwriter1", ".", "writerow", "(", "newimagelist1", "[", "idx", "]", ")", "\n", "\n", "\n", "", "", "with", "open", "(", "newcsvdir2", ",", "'w'", ")", "as", "writefile2", ":", "\n", "        ", "csvwriter2", "=", "csv", ".", "writer", "(", "writefile2", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "newimagelist2", ")", ")", ":", "\n", "            ", "csvwriter2", ".", "writerow", "(", "newimagelist2", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.writeCSV": [[3, 7], ["open", "csv.writer", "csv.writer.writerows"], "function", ["None"], ["def", "writeCSV", "(", "filename", ",", "lines", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "f", ")", "\n", "csvwriter", ".", "writerows", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.readCSV": [[8, 15], ["open", "csv.reader", "lines.append"], "function", ["None"], ["", "", "def", "readCSV", "(", "filename", ")", ":", "\n", "    ", "lines", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "csvreader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "line", "in", "csvreader", ":", "\n", "            ", "lines", ".", "append", "(", "line", ")", "\n", "", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.tryFloat": [[16, 23], ["float"], "function", ["None"], ["", "def", "tryFloat", "(", "value", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "value", "=", "float", "(", "value", ")", "\n", "", "except", ":", "\n", "        ", "value", "=", "value", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.getColumn": [[24, 37], ["column.append", "csvTools.tryFloat"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.tryFloat"], ["", "def", "getColumn", "(", "lines", ",", "columnid", ",", "elementType", "=", "''", ")", ":", "\n", "    ", "column", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "try", ":", "\n", "            ", "value", "=", "line", "[", "columnid", "]", "\n", "", "except", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "elementType", "==", "'float'", ":", "\n", "            ", "value", "=", "tryFloat", "(", "value", ")", "\n", "\n", "", "column", ".", "append", "(", "value", ")", "\n", "", "return", "column", "\n", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.SELayer.__init__": [[7, 15], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool3d", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.SELayer.forward": [[17, 22], ["x.size", "layers_se.SELayer.avg_pool().view", "layers_se.SELayer.fc().view", "layers_se.SELayer.avg_pool", "layers_se.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.PostRes.__init__": [[25, 40], ["torch.nn.Module.__init__", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "layers_se.SELayer", "torch.nn.Sequential", "torch.nn.Conv3d", "torch.nn.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_out", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PostRes", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "n_in", ",", "n_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "n_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "n_out", ",", "n_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "n_out", ")", "\n", "self", ".", "se", "=", "SELayer", "(", "n_out", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "n_out", "!=", "n_in", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n_in", ",", "n_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n_out", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.PostRes.forward": [[41, 55], ["layers_se.PostRes.conv1", "layers_se.PostRes.bn1", "layers_se.PostRes.relu", "layers_se.PostRes.conv2", "layers_se.PostRes.bn2", "layers_se.PostRes.se", "layers_se.PostRes.relu", "layers_se.PostRes.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.Rec3.__init__": [[57, 119], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n0", ",", "n1", ",", "n2", ",", "n3", ",", "p", "=", "0.0", ",", "integrate", "=", "True", ")", ":", "\n", "        ", "super", "(", "Rec3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block01", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n0", ",", "n1", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ")", "\n", "\n", "self", ".", "block11", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ")", "\n", "\n", "self", ".", "block21", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "n2", ",", "n1", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ")", "\n", "\n", "self", ".", "block12", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ")", "\n", "\n", "self", ".", "block22", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ")", "\n", "\n", "self", ".", "block32", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "n3", ",", "n2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ")", "\n", "\n", "self", ".", "block23", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n3", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n3", ",", "n3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ")", "\n", "\n", "self", ".", "block33", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n3", ",", "n3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n3", ",", "n3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "integrate", "=", "integrate", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.Rec3.forward": [[120, 137], ["torch.bernoulli", "layers_se.Rec3.relu", "layers_se.Rec3.relu", "layers_se.Rec3.relu", "torch.ones", "layers_se.Rec3.block21", "layers_se.Rec3.block32", "layers_se.Rec3.block23", "layers_se.Rec3.block33", "layers_se.Rec3.block21", "layers_se.Rec3.block32", "layers_se.Rec3.block23", "layers_se.Rec3.block33", "layers_se.Rec3.block01", "layers_se.Rec3.block11", "layers_se.Rec3.block12", "layers_se.Rec3.block22", "layers_se.Rec3.block01", "layers_se.Rec3.block11", "layers_se.Rec3.block12", "layers_se.Rec3.block22"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ",", "x1", ",", "x2", ",", "x3", ")", ":", "\n", "        ", "if", "self", ".", "p", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "coef", "=", "torch", ".", "bernoulli", "(", "(", "1.0", "-", "self", ".", "p", ")", "*", "torch", ".", "ones", "(", "8", ")", ")", "\n", "out1", "=", "coef", "[", "0", "]", "*", "self", ".", "block01", "(", "x0", ")", "+", "coef", "[", "1", "]", "*", "self", ".", "block11", "(", "x1", ")", "+", "coef", "[", "2", "]", "*", "self", ".", "block21", "(", "x2", ")", "\n", "out2", "=", "coef", "[", "3", "]", "*", "self", ".", "block12", "(", "x1", ")", "+", "coef", "[", "4", "]", "*", "self", ".", "block22", "(", "x2", ")", "+", "coef", "[", "5", "]", "*", "self", ".", "block32", "(", "x3", ")", "\n", "out3", "=", "coef", "[", "6", "]", "*", "self", ".", "block23", "(", "x2", ")", "+", "coef", "[", "7", "]", "*", "self", ".", "block33", "(", "x3", ")", "\n", "", "else", ":", "\n", "            ", "out1", "=", "(", "1", "-", "self", ".", "p", ")", "*", "(", "self", ".", "block01", "(", "x0", ")", "+", "self", ".", "block11", "(", "x1", ")", "+", "self", ".", "block21", "(", "x2", ")", ")", "\n", "out2", "=", "(", "1", "-", "self", ".", "p", ")", "*", "(", "self", ".", "block12", "(", "x1", ")", "+", "self", ".", "block22", "(", "x2", ")", "+", "self", ".", "block32", "(", "x3", ")", ")", "\n", "out3", "=", "(", "1", "-", "self", ".", "p", ")", "*", "(", "self", ".", "block23", "(", "x2", ")", "+", "self", ".", "block33", "(", "x3", ")", ")", "\n", "\n", "", "if", "self", ".", "integrate", ":", "\n", "            ", "out1", "+=", "x1", "\n", "out2", "+=", "x2", "\n", "out3", "+=", "x3", "\n", "\n", "", "return", "x0", ",", "self", ".", "relu", "(", "out1", ")", ",", "self", ".", "relu", "(", "out2", ")", ",", "self", ".", "relu", "(", "out3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.Loss.__init__": [[145, 151], ["torch.nn.Module.__init__", "torch.nn.Sigmoid", "torch.nn.BCELoss", "torch.nn.SmoothL1Loss"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_hard", "=", "0", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "classify_loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "regress_loss", "=", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "num_hard", "=", "num_hard", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.Loss.forward": [[152, 207], ["labels.view.view.size", "output.view.view.view", "labels.view.view.view", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "output[].view", "labels[].view", "layers_se.Loss.sigmoid", "classify_loss.item", "len", "pos_idcs.unsqueeze().expand.unsqueeze().expand.size", "layers_se.hard_mining", "len", "layers_se.Loss.sigmoid", "len", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze", "layers_se.Loss.regress_loss", "layers_se.Loss.regress_loss", "layers_se.Loss.regress_loss", "layers_se.Loss.regress_loss", "l.item", "layers_se.Loss.classify_loss", "layers_se.Loss.classify_loss", "layers_se.Loss.classify_loss"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.hard_mining", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid"], ["", "def", "forward", "(", "self", ",", "output", ",", "labels", ",", "train", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "labels", ".", "size", "(", "0", ")", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "pos_idcs", "=", "labels", "[", ":", ",", "0", "]", ">", "0.5", "\n", "pos_idcs", "=", "pos_idcs", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "pos_idcs", ".", "size", "(", "0", ")", ",", "5", ")", "\n", "pos_output", "=", "output", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "pos_labels", "=", "labels", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "neg_idcs", "=", "labels", "[", ":", ",", "0", "]", "<", "-", "0.5", "\n", "neg_output", "=", "output", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "neg_labels", "=", "labels", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "\n", "if", "self", ".", "num_hard", ">", "0", "and", "train", ":", "\n", "            ", "neg_output", ",", "neg_labels", "=", "hard_mining", "(", "neg_output", ",", "neg_labels", ",", "self", ".", "num_hard", "*", "batch_size", ")", "\n", "", "neg_prob", "=", "self", ".", "sigmoid", "(", "neg_output", ")", "\n", "\n", "#classify_loss = self.classify_loss(", "\n", "#   torch.cat((pos_prob, neg_prob), 0),", "\n", "#  torch.cat((pos_labels[:, 0], neg_labels + 1), 0))", "\n", "if", "len", "(", "pos_output", ")", ">", "0", ":", "\n", "            ", "pos_prob", "=", "self", ".", "sigmoid", "(", "pos_output", "[", ":", ",", "0", "]", ")", "\n", "pz", ",", "ph", ",", "pw", ",", "pd", "=", "pos_output", "[", ":", ",", "1", "]", ",", "pos_output", "[", ":", ",", "2", "]", ",", "pos_output", "[", ":", ",", "3", "]", ",", "pos_output", "[", ":", ",", "4", "]", "\n", "lz", ",", "lh", ",", "lw", ",", "ld", "=", "pos_labels", "[", ":", ",", "1", "]", ",", "pos_labels", "[", ":", ",", "2", "]", ",", "pos_labels", "[", ":", ",", "3", "]", ",", "pos_labels", "[", ":", ",", "4", "]", "\n", "\n", "regress_losses", "=", "[", "\n", "self", ".", "regress_loss", "(", "pz", ",", "lz", ")", ",", "\n", "self", ".", "regress_loss", "(", "ph", ",", "lh", ")", ",", "\n", "self", ".", "regress_loss", "(", "pw", ",", "lw", ")", ",", "\n", "self", ".", "regress_loss", "(", "pd", ",", "ld", ")", "]", "\n", "regress_losses_data", "=", "[", "l", ".", "item", "(", ")", "for", "l", "in", "regress_losses", "]", "\n", "classify_loss", "=", "0.5", "*", "self", ".", "classify_loss", "(", "\n", "pos_prob", ",", "pos_labels", "[", ":", ",", "0", "]", ")", "+", "0.5", "*", "self", ".", "classify_loss", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "pos_correct", "=", "(", "pos_prob", ".", "data", ">=", "0.5", ")", ".", "sum", "(", ")", "\n", "pos_total", "=", "len", "(", "pos_prob", ")", "\n", "\n", "", "else", ":", "\n", "            ", "regress_losses", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "classify_loss", "=", "0.5", "*", "self", ".", "classify_loss", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "pos_correct", "=", "0", "\n", "pos_total", "=", "0", "\n", "regress_losses_data", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "classify_loss_data", "=", "classify_loss", ".", "item", "(", ")", "\n", "\n", "loss", "=", "classify_loss", "\n", "for", "regress_loss", "in", "regress_losses", ":", "\n", "            ", "loss", "+=", "regress_loss", "\n", "\n", "", "neg_correct", "=", "(", "neg_prob", ".", "data", "<", "0.5", ")", ".", "sum", "(", ")", "\n", "neg_total", "=", "len", "(", "neg_prob", ")", "\n", "\n", "return", "[", "loss", ",", "classify_loss_data", "]", "+", "regress_losses_data", "+", "[", "pos_correct", ",", "pos_total", ",", "neg_correct", ",", "neg_total", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.BinaryFocalLoss.__init__": [[210, 216], ["torch.nn.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "alpha", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "BinaryFocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "size_average", "=", "size_average", "\n", "print", "(", "\"FOCAL LOSS\"", ",", "gamma", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.BinaryFocalLoss.forward": [[217, 242], ["target.unsqueeze.unsqueeze.float", "target.unsqueeze.unsqueeze.float", "pt.log", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.unsqueeze", "target.unsqueeze.unsqueeze.dim", "target.unsqueeze.unsqueeze.unsqueeze", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "loss.mean", "loss.sum", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "target", "=", "target", ".", "float", "(", ")", "\n", "if", "input", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "input", "=", "input", ".", "unsqueeze", "(", "1", ")", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# N,C,H,W => N,C,H*W", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "\n", "#target = target.view(-1,1)", "\n", "", "target", "=", "target", ".", "float", "(", ")", "\n", "pt", "=", "input", "*", "target", "+", "(", "1", "-", "input", ")", "*", "(", "1", "-", "target", ")", "\n", "logpt", "=", "pt", ".", "log", "(", ")", "\n", "at", "=", "(", "1", "-", "self", ".", "alpha", ")", "*", "target", "+", "(", "self", ".", "alpha", ")", "*", "(", "1", "-", "target", ")", "\n", "logpt", "=", "logpt", "*", "at", "\n", "\n", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.FocalLoss.__init__": [[244, 250], ["torch.nn.Module.__init__", "torch.nn.Sigmoid", "layers_se.BinaryFocalLoss", "torch.nn.SmoothL1Loss"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_hard", "=", "0", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "classify_loss", "=", "BinaryFocalLoss", "(", "gamma", "=", "2", ",", "alpha", "=", "0.5", ",", "size_average", "=", "False", ")", "\n", "self", ".", "regress_loss", "=", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "num_hard", "=", "num_hard", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.FocalLoss.forward": [[251, 307], ["labels.view.view.size", "output.view.view.view", "labels.view.view.view", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "output[].view", "labels[].view", "layers_se.FocalLoss.sigmoid", "layers_se.FocalLoss.item", "len", "pos_idcs.unsqueeze().expand.unsqueeze().expand.size", "layers_se.hard_mining", "len", "layers_se.FocalLoss.sigmoid", "len", "layers_se.FocalLoss.classify_loss.forward", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze", "layers_se.FocalLoss.regress_loss", "layers_se.FocalLoss.regress_loss", "layers_se.FocalLoss.regress_loss", "layers_se.FocalLoss.regress_loss", "l.item", "layers_se.FocalLoss.classify_loss.forward", "layers_se.FocalLoss.classify_loss.forward", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.hard_mining", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.Net.forward", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.Net.forward", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.Net.forward"], ["", "def", "forward", "(", "self", ",", "output", ",", "labels", ",", "train", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "labels", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "pos_idcs", "=", "labels", "[", ":", ",", "0", "]", ">", "0.5", "\n", "\n", "pos_idcs", "=", "pos_idcs", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "pos_idcs", ".", "size", "(", "0", ")", ",", "5", ")", "\n", "pos_output", "=", "output", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "pos_labels", "=", "labels", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "neg_idcs", "=", "labels", "[", ":", ",", "0", "]", "<", "-", "0.5", "\n", "neg_output", "=", "output", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "neg_labels", "=", "labels", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "\n", "if", "self", ".", "num_hard", ">", "0", "and", "train", ":", "\n", "            ", "neg_output", ",", "neg_labels", "=", "hard_mining", "(", "neg_output", ",", "neg_labels", ",", "self", ".", "num_hard", "*", "batch_size", ")", "\n", "", "neg_prob", "=", "self", ".", "sigmoid", "(", "neg_output", ")", "\n", "\n", "if", "len", "(", "pos_output", ")", ">", "0", ":", "\n", "            ", "pos_prob", "=", "self", ".", "sigmoid", "(", "pos_output", "[", ":", ",", "0", "]", ")", "\n", "pz", ",", "ph", ",", "pw", ",", "pd", "=", "pos_output", "[", ":", ",", "1", "]", ",", "pos_output", "[", ":", ",", "2", "]", ",", "pos_output", "[", ":", ",", "3", "]", ",", "pos_output", "[", ":", ",", "4", "]", "\n", "lz", ",", "lh", ",", "lw", ",", "ld", "=", "pos_labels", "[", ":", ",", "1", "]", ",", "pos_labels", "[", ":", ",", "2", "]", ",", "pos_labels", "[", ":", ",", "3", "]", ",", "pos_labels", "[", ":", ",", "4", "]", "\n", "\n", "regress_losses", "=", "[", "\n", "self", ".", "regress_loss", "(", "pz", ",", "lz", ")", ",", "\n", "self", ".", "regress_loss", "(", "ph", ",", "lh", ")", ",", "\n", "self", ".", "regress_loss", "(", "pw", ",", "lw", ")", ",", "\n", "self", ".", "regress_loss", "(", "pd", ",", "ld", ")", "]", "\n", "regress_losses_data", "=", "[", "l", ".", "item", "(", ")", "for", "l", "in", "regress_losses", "]", "\n", "classify_loss", "=", "self", ".", "classify_loss", ".", "forward", "(", "\n", "pos_prob", ",", "pos_labels", "[", ":", ",", "0", "]", ")", "+", "self", ".", "classify_loss", ".", "forward", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "classify_loss", "=", "classify_loss", "/", "(", "len", "(", "pos_prob", ")", "+", "len", "(", "neg_prob", ")", ")", "\n", "pos_correct", "=", "(", "pos_prob", ".", "data", ">=", "0.5", ")", ".", "sum", "(", ")", "\n", "pos_total", "=", "len", "(", "pos_prob", ")", "\n", "\n", "", "else", ":", "\n", "            ", "regress_losses", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "classify_loss", "=", "self", ".", "classify_loss", ".", "forward", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "classify_loss", "=", "classify_loss", "/", "len", "(", "neg_prob", ")", "\n", "pos_correct", "=", "0", "\n", "pos_total", "=", "0", "\n", "regress_losses_data", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "classify_loss_data", "=", "classify_loss", ".", "item", "(", ")", "\n", "\n", "loss", "=", "classify_loss", "\n", "for", "regress_loss", "in", "regress_losses", ":", "\n", "            ", "loss", "+=", "regress_loss", "\n", "\n", "", "neg_correct", "=", "(", "neg_prob", ".", "data", "<", "0.5", ")", ".", "sum", "(", ")", "\n", "neg_total", "=", "len", "(", "neg_prob", ")", "\n", "\n", "return", "[", "loss", ",", "classify_loss_data", "]", "+", "regress_losses_data", "+", "[", "pos_correct", ",", "pos_total", ",", "neg_correct", ",", "neg_total", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.GetPBB.__init__": [[309, 312], ["numpy.asarray"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "stride", "=", "config", "[", "'stride'", "]", "\n", "self", ".", "anchors", "=", "np", ".", "asarray", "(", "config", "[", "'anchors'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.GetPBB.__call__": [[313, 335], ["numpy.copy", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.where", "numpy.arange.reshape", "numpy.arange.reshape", "numpy.arange.reshape", "numpy.exp", "anchors.reshape", "float", "anchors.reshape", "anchors.reshape", "anchors.reshape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "output", ",", "thresh", "=", "-", "3", ",", "ismask", "=", "False", ")", ":", "\n", "        ", "stride", "=", "self", ".", "stride", "\n", "anchors", "=", "self", ".", "anchors", "\n", "output", "=", "np", ".", "copy", "(", "output", ")", "\n", "offset", "=", "(", "float", "(", "stride", ")", "-", "1", ")", "/", "2", "\n", "output_size", "=", "output", ".", "shape", "\n", "oz", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "0", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "oh", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "1", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "ow", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "2", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "=", "oz", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "+", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "=", "oh", ".", "reshape", "(", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "+", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "3", "]", "=", "ow", ".", "reshape", "(", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", ")", "+", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "3", "]", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "4", "]", "=", "np", ".", "exp", "(", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "4", "]", ")", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "mask", "=", "output", "[", "...", ",", "0", "]", ">", "thresh", "\n", "xx", ",", "yy", ",", "zz", ",", "aa", "=", "np", ".", "where", "(", "mask", ")", "\n", "\n", "output", "=", "output", "[", "xx", ",", "yy", ",", "zz", ",", "aa", "]", "\n", "if", "ismask", ":", "\n", "            ", "return", "output", ",", "[", "xx", ",", "yy", ",", "zz", ",", "aa", "]", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.hard_mining": [[138, 143], ["torch.topk", "torch.index_select", "torch.index_select", "min", "len"], "function", ["None"], ["", "", "def", "hard_mining", "(", "neg_output", ",", "neg_labels", ",", "num_hard", ")", ":", "\n", "    ", "_", ",", "idcs", "=", "torch", ".", "topk", "(", "neg_output", ",", "min", "(", "num_hard", ",", "len", "(", "neg_output", ")", ")", ")", "\n", "neg_output", "=", "torch", ".", "index_select", "(", "neg_output", ",", "0", ",", "idcs", ")", "\n", "neg_labels", "=", "torch", ".", "index_select", "(", "neg_labels", ",", "0", ",", "idcs", ")", "\n", "return", "neg_output", ",", "neg_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.nms": [[338, 357], ["numpy.arange", "numpy.asarray", "len", "len", "range", "numpy.argsort", "len", "np.asarray.append", "layers_se.iou"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.iou"], ["", "", "", "def", "nms", "(", "output", ",", "nms_th", ")", ":", "\n", "    ", "if", "len", "(", "output", ")", "==", "0", ":", "\n", "        ", "return", "output", "\n", "\n", "", "output", "=", "output", "[", "np", ".", "argsort", "(", "-", "output", "[", ":", ",", "0", "]", ")", "]", "\n", "bboxes", "=", "[", "output", "[", "0", "]", "]", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "1", ",", "len", "(", "output", ")", ")", ":", "\n", "        ", "bbox", "=", "output", "[", "i", "]", "\n", "flag", "=", "1", "\n", "for", "j", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "            ", "if", "iou", "(", "bbox", "[", "1", ":", "5", "]", ",", "bboxes", "[", "j", "]", "[", "1", ":", "5", "]", ")", ">=", "nms_th", ":", "\n", "                ", "flag", "=", "-", "1", "\n", "break", "\n", "", "", "if", "flag", "==", "1", ":", "\n", "            ", "bboxes", ".", "append", "(", "bbox", ")", "\n", "\n", "", "", "bboxes", "=", "np", ".", "asarray", "(", "bboxes", ",", "np", ".", "float32", ")", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.iou": [[358, 375], ["range", "len", "overlap.append", "max", "min", "max"], "function", ["None"], ["", "def", "iou", "(", "box0", ",", "box1", ")", ":", "\n", "\n", "    ", "r0", "=", "box0", "[", "3", "]", "/", "2", "\n", "s0", "=", "box0", "[", ":", "3", "]", "-", "r0", "\n", "e0", "=", "box0", "[", ":", "3", "]", "+", "r0", "\n", "\n", "r1", "=", "box1", "[", "3", "]", "/", "2", "\n", "s1", "=", "box1", "[", ":", "3", "]", "-", "r1", "\n", "e1", "=", "box1", "[", ":", "3", "]", "+", "r1", "\n", "\n", "overlap", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "s0", ")", ")", ":", "\n", "        ", "overlap", ".", "append", "(", "max", "(", "0", ",", "min", "(", "e0", "[", "i", "]", ",", "e1", "[", "i", "]", ")", "-", "max", "(", "s0", "[", "i", "]", ",", "s1", "[", "i", "]", ")", ")", ")", "\n", "\n", "", "intersection", "=", "overlap", "[", "0", "]", "*", "overlap", "[", "1", "]", "*", "overlap", "[", "2", "]", "\n", "union", "=", "box0", "[", "3", "]", "*", "box0", "[", "3", "]", "*", "box0", "[", "3", "]", "+", "box1", "[", "3", "]", "*", "box1", "[", "3", "]", "*", "box1", "[", "3", "]", "-", "intersection", "\n", "return", "intersection", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.acc": [[376, 414], ["layers_se.nms", "numpy.zeros", "enumerate", "enumerate", "len", "len", "layers_se.iou", "fp.append", "tp.append", "fp.append", "numpy.concatenate", "iou.append", "len", "numpy.max", "fn.append", "numpy.concatenate", "numpy.concatenate", "layers_se.iou", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.nms", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.iou", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.iou"], ["", "def", "acc", "(", "pbb", ",", "lbb", ",", "conf_th", ",", "nms_th", ",", "detect_th", ")", ":", "\n", "    ", "pbb", "=", "pbb", "[", "pbb", "[", ":", ",", "0", "]", ">=", "conf_th", "]", "\n", "pbb", "=", "nms", "(", "pbb", ",", "nms_th", ")", "\n", "\n", "tp", "=", "[", "]", "\n", "fp", "=", "[", "]", "\n", "fn", "=", "[", "]", "\n", "l_flag", "=", "np", ".", "zeros", "(", "(", "len", "(", "lbb", ")", ",", ")", ",", "np", ".", "int32", ")", "\n", "for", "p", "in", "pbb", ":", "\n", "        ", "flag", "=", "0", "\n", "bestscore", "=", "0", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lbb", ")", ":", "\n", "            ", "score", "=", "iou", "(", "p", "[", "1", ":", "5", "]", ",", "l", ")", "\n", "if", "score", ">", "bestscore", ":", "\n", "                ", "bestscore", "=", "score", "\n", "besti", "=", "i", "\n", "", "", "if", "bestscore", ">", "detect_th", ":", "\n", "            ", "flag", "=", "1", "\n", "if", "l_flag", "[", "besti", "]", "==", "0", ":", "\n", "                ", "l_flag", "[", "besti", "]", "=", "1", "\n", "tp", ".", "append", "(", "np", ".", "concatenate", "(", "[", "p", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "fp", ".", "append", "(", "np", ".", "concatenate", "(", "[", "p", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "", "", "if", "flag", "==", "0", ":", "\n", "            ", "fp", ".", "append", "(", "np", ".", "concatenate", "(", "[", "p", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "", "", "for", "i", ",", "l", "in", "enumerate", "(", "lbb", ")", ":", "\n", "        ", "if", "l_flag", "[", "i", "]", "==", "0", ":", "\n", "            ", "score", "=", "[", "]", "\n", "for", "p", "in", "pbb", ":", "\n", "                ", "score", ".", "append", "(", "iou", "(", "p", "[", "1", ":", "5", "]", ",", "l", ")", ")", "\n", "", "if", "len", "(", "score", ")", "!=", "0", ":", "\n", "                ", "bestscore", "=", "np", ".", "max", "(", "score", ")", "\n", "", "else", ":", "\n", "                ", "bestscore", "=", "0", "\n", "", "if", "bestscore", "<", "detect_th", ":", "\n", "                ", "fn", ".", "append", "(", "np", ".", "concatenate", "(", "[", "l", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "\n", "", "", "", "return", "tp", ",", "fp", ",", "fn", ",", "len", "(", "lbb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers_se.topkpbb": [[415, 449], ["numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.concatenate", "len", "numpy.min", "numpy.array", "numpy.array", "numpy.array", "layers_se.acc", "numpy.argsort", "len", "numpy.concatenate", "len", "len", "len", "len", "numpy.array", "len", "numpy.array", "len", "numpy.array", "len", "len", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.acc"], ["", "def", "topkpbb", "(", "pbb", ",", "lbb", ",", "nms_th", ",", "detect_th", ",", "topk", "=", "30", ")", ":", "\n", "    ", "conf_th", "=", "0", "\n", "fp", "=", "[", "]", "\n", "tp", "=", "[", "]", "\n", "while", "len", "(", "tp", ")", "+", "len", "(", "fp", ")", "<", "topk", ":", "\n", "        ", "conf_th", "=", "conf_th", "-", "0.2", "\n", "tp", ",", "fp", ",", "fn", ",", "_", "=", "acc", "(", "pbb", ",", "lbb", ",", "conf_th", ",", "nms_th", ",", "detect_th", ")", "\n", "if", "conf_th", "<", "-", "3", ":", "\n", "            ", "break", "\n", "", "", "tp", "=", "np", ".", "array", "(", "tp", ")", ".", "reshape", "(", "[", "len", "(", "tp", ")", ",", "6", "]", ")", "\n", "fp", "=", "np", ".", "array", "(", "fp", ")", ".", "reshape", "(", "[", "len", "(", "fp", ")", ",", "6", "]", ")", "\n", "fn", "=", "np", ".", "array", "(", "fn", ")", ".", "reshape", "(", "[", "len", "(", "fn", ")", ",", "5", "]", ")", "\n", "allp", "=", "np", ".", "concatenate", "(", "[", "tp", ",", "fp", "]", ",", "0", ")", "\n", "sorting", "=", "np", ".", "argsort", "(", "allp", "[", ":", ",", "0", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "n_tp", "=", "len", "(", "tp", ")", "\n", "topk", "=", "np", ".", "min", "(", "[", "topk", ",", "len", "(", "allp", ")", "]", ")", "\n", "tp_in_topk", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "n_tp", ")", "if", "i", "in", "sorting", "[", ":", "topk", "]", "]", ")", "\n", "fp_in_topk", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "topk", ")", "if", "sorting", "[", "i", "]", "not", "in", "range", "(", "n_tp", ")", "]", ")", "\n", "#     print(fp_in_topk)", "\n", "fn_i", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "n_tp", ")", "if", "i", "not", "in", "sorting", "[", ":", "topk", "]", "]", ")", "\n", "newallp", "=", "allp", "[", ":", "topk", "]", "\n", "if", "len", "(", "fn_i", ")", ">", "0", ":", "\n", "        ", "fn", "=", "np", ".", "concatenate", "(", "[", "fn", ",", "tp", "[", "fn_i", ",", ":", "5", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "fn", "=", "fn", "\n", "", "if", "len", "(", "tp_in_topk", ")", ">", "0", ":", "\n", "        ", "tp", "=", "tp", "[", "tp_in_topk", "]", "\n", "", "else", ":", "\n", "        ", "tp", "=", "[", "]", "\n", "", "if", "len", "(", "fp_in_topk", ")", ">", "0", ":", "\n", "        ", "fp", "=", "newallp", "[", "fp_in_topk", "]", "\n", "", "else", ":", "\n", "        ", "fp", "=", "[", "]", "\n", "", "return", "tp", ",", "fp", ",", "fn", "\n", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18.Net.__init__": [[32, 93], ["torch.nn.Module.__init__", "torch.nn.Sequential", "range", "range", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxUnpool3d", "torch.nn.MaxUnpool3d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout3d", "torch.nn.Sequential", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "len", "range", "setattr", "len", "range", "setattr", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Sequential", "torch.nn.Sequential", "blocks.append", "blocks.append", "str", "blocks.append", "blocks.append", "str", "len", "layers.PostRes", "layers.PostRes", "layers.PostRes", "layers.PostRes"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# The first few layers consumes the most memory, so use simple convolution to save memory.", "\n", "# Call these layers preBlock, i.e., before the residual blocks of later layers.", "\n", "self", ".", "preBlock", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "1", ",", "24", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "24", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "24", ",", "24", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "24", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "# 3 poolings, each pooling downsamples the feature map by a factor 2.", "\n", "# 3 groups of blocks. The first block of each group has one pooling.", "\n", "num_blocks_forw", "=", "[", "2", ",", "2", ",", "3", ",", "3", "]", "\n", "num_blocks_back", "=", "[", "3", ",", "3", "]", "\n", "self", ".", "featureNum_forw", "=", "[", "24", ",", "32", ",", "64", ",", "64", ",", "64", "]", "\n", "self", ".", "featureNum_back", "=", "[", "128", ",", "64", ",", "64", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_blocks_forw", ")", ")", ":", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_blocks_forw", "[", "i", "]", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_forw", "[", "i", "]", ",", "self", ".", "featureNum_forw", "[", "i", "+", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_forw", "[", "i", "+", "1", "]", ",", "self", ".", "featureNum_forw", "[", "i", "+", "1", "]", ")", ")", "\n", "", "", "setattr", "(", "self", ",", "'forw'", "+", "str", "(", "i", "+", "1", ")", ",", "nn", ".", "Sequential", "(", "*", "blocks", ")", ")", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "num_blocks_back", ")", ")", ":", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_blocks_back", "[", "i", "]", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "addition", "=", "3", "\n", "", "else", ":", "\n", "                        ", "addition", "=", "0", "\n", "", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_back", "[", "i", "+", "1", "]", "+", "self", ".", "featureNum_forw", "[", "i", "+", "2", "]", "+", "addition", ",", "self", ".", "featureNum_back", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_back", "[", "i", "]", ",", "self", ".", "featureNum_back", "[", "i", "]", ")", ")", "\n", "", "", "setattr", "(", "self", ",", "'back'", "+", "str", "(", "i", "+", "2", ")", ",", "nn", ".", "Sequential", "(", "*", "blocks", ")", ")", "\n", "\n", "", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool4", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "unmaxpool1", "=", "nn", ".", "MaxUnpool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "unmaxpool2", "=", "nn", ".", "MaxUnpool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "path1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "64", ",", "64", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "path2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "64", ",", "64", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout3d", "(", "p", "=", "0.5", ",", "inplace", "=", "False", ")", "\n", "self", ".", "output", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "self", ".", "featureNum_back", "[", "0", "]", ",", "64", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Dropout3d(p = 0.3),", "\n", "nn", ".", "Conv3d", "(", "64", ",", "5", "*", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "kernel_size", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18.Net.forward": [[94, 119], ["res18.Net.preBlock", "res18.Net.maxpool1", "res18.Net.forw1", "res18.Net.maxpool2", "res18.Net.forw2", "res18.Net.maxpool3", "res18.Net.forw3", "res18.Net.maxpool4", "res18.Net.forw4", "res18.Net.path1", "res18.Net.back3", "res18.Net.path2", "res18.Net.back2", "res18.Net.drop", "res18.Net.output", "out.transpose().contiguous().view.transpose().contiguous().view.size", "out.transpose().contiguous().view.transpose().contiguous().view.view", "out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "torch.cat", "torch.cat", "out.transpose().contiguous().view.transpose().contiguous().view.size", "out.transpose().contiguous().view.transpose().contiguous().view.size", "len", "out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "out.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "coord", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "preBlock", "(", "x", ")", "#24", "\n", "out_pool", ",", "indices0", "=", "self", ".", "maxpool1", "(", "out", ")", "\n", "out1", "=", "self", ".", "forw1", "(", "out_pool", ")", "#32", "\n", "out1_pool", ",", "indices1", "=", "self", ".", "maxpool2", "(", "out1", ")", "\n", "out2", "=", "self", ".", "forw2", "(", "out1_pool", ")", "#64", "\n", "out2_pool", ",", "indices2", "=", "self", ".", "maxpool3", "(", "out2", ")", "\n", "out3", "=", "self", ".", "forw3", "(", "out2_pool", ")", "#64", "\n", "out3_pool", ",", "indices3", "=", "self", ".", "maxpool4", "(", "out3", ")", "\n", "out4", "=", "self", ".", "forw4", "(", "out3_pool", ")", "#64", "\n", "\n", "rev3", "=", "self", ".", "path1", "(", "out4", ")", "\n", "comb3", "=", "self", ".", "back3", "(", "torch", ".", "cat", "(", "(", "rev3", ",", "out3", ")", ",", "1", ")", ")", "#96+96", "\n", "rev2", "=", "self", ".", "path2", "(", "comb3", ")", "\n", "\n", "comb2", "=", "self", ".", "back2", "(", "torch", ".", "cat", "(", "(", "rev2", ",", "out2", ",", "coord", ")", ",", "1", ")", ")", "#64+64", "\n", "comb2", "=", "self", ".", "drop", "(", "comb2", ")", "\n", "out", "=", "self", ".", "output", "(", "comb2", ")", "\n", "size", "=", "out", ".", "size", "(", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "out", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "#out = out.transpose(1, 4).transpose(1, 2).transpose(2, 3).contiguous()", "\n", "out", "=", "out", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ",", "size", "[", "4", "]", ",", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "5", ")", "\n", "#out = out.view(-1, 5)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18.get_model": [[121, 126], ["res18.Net", "layers.Loss", "layers.GetPBB"], "function", ["None"], ["", "", "def", "get_model", "(", ")", ":", "\n", "    ", "net", "=", "Net", "(", ")", "\n", "loss", "=", "Loss", "(", "config", "[", "'num_hard'", "]", ")", "\n", "get_pbb", "=", "GetPBB", "(", "config", ")", "\n", "return", "config", ",", "net", ",", "loss", ",", "get_pbb", "\n", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.__init__": [[4, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "side_len", ",", "max_stride", ",", "stride", ",", "margin", ",", "pad_value", ")", ":", "\n", "        ", "self", ".", "side_len", "=", "side_len", "\n", "self", ".", "max_stride", "=", "max_stride", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "pad_value", "=", "pad_value", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split": [[11, 54], ["int", "int", "int", "numpy.pad", "range", "numpy.concatenate", "numpy.ceil", "numpy.ceil", "numpy.ceil", "range", "range", "float", "float", "float", "numpy.concatenate.append"], "methods", ["None"], ["", "def", "split", "(", "self", ",", "data", ",", "side_len", "=", "None", ",", "max_stride", "=", "None", ",", "margin", "=", "None", ")", ":", "\n", "        ", "if", "side_len", "==", "None", ":", "\n", "            ", "side_len", "=", "self", ".", "side_len", "\n", "", "if", "max_stride", "==", "None", ":", "\n", "            ", "max_stride", "=", "self", ".", "max_stride", "\n", "", "if", "margin", "==", "None", ":", "\n", "            ", "margin", "=", "self", ".", "margin", "\n", "\n", "", "assert", "(", "side_len", ">", "margin", ")", "\n", "assert", "(", "side_len", "%", "max_stride", "==", "0", ")", "\n", "assert", "(", "margin", "%", "max_stride", "==", "0", ")", "\n", "\n", "splits", "=", "[", "]", "\n", "_", ",", "z", ",", "h", ",", "w", "=", "data", ".", "shape", "\n", "\n", "nz", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "z", ")", "/", "side_len", ")", ")", "\n", "nh", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "h", ")", "/", "side_len", ")", ")", "\n", "nw", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "w", ")", "/", "side_len", ")", ")", "\n", "\n", "nzhw", "=", "[", "nz", ",", "nh", ",", "nw", "]", "\n", "self", ".", "nzhw", "=", "nzhw", "\n", "\n", "pad", "=", "[", "[", "0", ",", "0", "]", ",", "\n", "[", "margin", ",", "nz", "*", "side_len", "-", "z", "+", "margin", "]", ",", "\n", "[", "margin", ",", "nh", "*", "side_len", "-", "h", "+", "margin", "]", ",", "\n", "[", "margin", ",", "nw", "*", "side_len", "-", "w", "+", "margin", "]", "]", "\n", "data", "=", "np", ".", "pad", "(", "data", ",", "pad", ",", "'edge'", ")", "\n", "\n", "for", "iz", "in", "range", "(", "nz", ")", ":", "\n", "            ", "for", "ih", "in", "range", "(", "nh", ")", ":", "\n", "                ", "for", "iw", "in", "range", "(", "nw", ")", ":", "\n", "                    ", "sz", "=", "iz", "*", "side_len", "\n", "ez", "=", "(", "iz", "+", "1", ")", "*", "side_len", "+", "2", "*", "margin", "\n", "sh", "=", "ih", "*", "side_len", "\n", "eh", "=", "(", "ih", "+", "1", ")", "*", "side_len", "+", "2", "*", "margin", "\n", "sw", "=", "iw", "*", "side_len", "\n", "ew", "=", "(", "iw", "+", "1", ")", "*", "side_len", "+", "2", "*", "margin", "\n", "\n", "split", "=", "data", "[", "np", ".", "newaxis", ",", ":", ",", "sz", ":", "ez", ",", "sh", ":", "eh", ",", "sw", ":", "ew", "]", "\n", "splits", ".", "append", "(", "split", ")", "\n", "\n", "", "", "", "splits", "=", "np", ".", "concatenate", "(", "splits", ",", "0", ")", "\n", "return", "splits", ",", "nzhw", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.combine": [[55, 103], ["int", "int", "range", "range", "len", "splits.append", "numpy.ones", "range", "range"], "methods", ["None"], ["", "def", "combine", "(", "self", ",", "output", ",", "nzhw", "=", "None", ",", "side_len", "=", "None", ",", "stride", "=", "None", ",", "margin", "=", "None", ")", ":", "\n", "\n", "        ", "if", "side_len", "==", "None", ":", "\n", "            ", "side_len", "=", "self", ".", "side_len", "\n", "", "if", "stride", "==", "None", ":", "\n", "            ", "stride", "=", "self", ".", "stride", "\n", "", "if", "margin", "==", "None", ":", "\n", "            ", "margin", "=", "self", ".", "margin", "\n", "", "if", "nzhw", "is", "None", ":", "\n", "            ", "nz", "=", "self", ".", "nz", "\n", "nh", "=", "self", ".", "nh", "\n", "nw", "=", "self", ".", "nw", "\n", "", "else", ":", "\n", "            ", "nz", ",", "nh", ",", "nw", "=", "nzhw", "\n", "", "assert", "(", "side_len", "%", "stride", "==", "0", ")", "\n", "assert", "(", "margin", "%", "stride", "==", "0", ")", "\n", "side_len", "=", "int", "(", "side_len", "/", "stride", ")", "\n", "margin", "=", "int", "(", "margin", "/", "stride", ")", "\n", "\n", "splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "            ", "splits", ".", "append", "(", "output", "[", "i", "]", ")", "\n", "\n", "\n", "\n", "", "output", "=", "-", "1000000", "*", "np", ".", "ones", "(", "(", "\n", "nz", "*", "side_len", ",", "\n", "nh", "*", "side_len", ",", "\n", "nw", "*", "side_len", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "idx", "=", "0", "\n", "for", "iz", "in", "range", "(", "nz", ")", ":", "\n", "            ", "for", "ih", "in", "range", "(", "nh", ")", ":", "\n", "                ", "for", "iw", "in", "range", "(", "nw", ")", ":", "\n", "                    ", "sz", "=", "iz", "*", "side_len", "\n", "ez", "=", "(", "iz", "+", "1", ")", "*", "side_len", "\n", "sh", "=", "ih", "*", "side_len", "\n", "eh", "=", "(", "ih", "+", "1", ")", "*", "side_len", "\n", "sw", "=", "iw", "*", "side_len", "\n", "ew", "=", "(", "iw", "+", "1", ")", "*", "side_len", "\n", "\n", "split", "=", "splits", "[", "idx", "]", "[", "margin", ":", "margin", "+", "side_len", ",", "margin", ":", "margin", "+", "side_len", ",", "margin", ":", "margin", "+", "side_len", "]", "\n", "output", "[", "sz", ":", "ez", ",", "sh", ":", "eh", ",", "sw", ":", "ew", "]", "=", "split", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.VoxelToWorldCoord": [[30, 34], ["None"], "function", ["None"], ["def", "VoxelToWorldCoord", "(", "voxelCoord", ",", "origin", ",", "spacing", ")", ":", "\n", "    ", "strechedVocelCoord", "=", "voxelCoord", "*", "spacing", "\n", "worldCoord", "=", "strechedVocelCoord", "+", "origin", "\n", "return", "worldCoord", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid": [[35, 37], ["numpy.exp"], "function", ["None"], ["", "def", "sigmoid", "(", "x", ")", ":", "\n", "  ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.convertcsv": [[39, 66], ["numpy.array", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.array", "numpy.array", "layers.nms", "numpy.array", "numpy.array", "numpy.array", "FROCeval.VoxelToWorldCoord", "range", "FROCeval.sigmoid", "rowlist.append", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.nms", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.VoxelToWorldCoord", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid"], ["", "def", "convertcsv", "(", "bboxfname", ",", "bboxpath", ",", "detp", ")", ":", "\n", "    ", "resolution", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "origin", "=", "np", ".", "load", "(", "sideinfopath", "+", "bboxfname", "[", ":", "-", "8", "]", "+", "'_origin.npy'", ",", "mmap_mode", "=", "'r'", ")", "\n", "spacing", "=", "np", ".", "load", "(", "sideinfopath", "+", "bboxfname", "[", ":", "-", "8", "]", "+", "'_spacing.npy'", ",", "mmap_mode", "=", "'r'", ")", "\n", "extendbox", "=", "np", ".", "load", "(", "sideinfopath", "+", "bboxfname", "[", ":", "-", "8", "]", "+", "'_extendbox.npy'", ",", "mmap_mode", "=", "'r'", ")", "\n", "\n", "pbb", "=", "np", ".", "load", "(", "bboxpath", "+", "bboxfname", ",", "mmap_mode", "=", "'r'", ")", "\n", "diam", "=", "pbb", "[", ":", ",", "-", "1", "]", "\n", "\n", "check", "=", "sigmoid", "(", "pbb", "[", ":", ",", "0", "]", ")", ">", "detp", "\n", "pbbold", "=", "np", ".", "array", "(", "pbb", "[", "check", "]", ")", "\n", "#    pbbold = np.array(pbb[pbb[:,0] > detp])", "\n", "pbbold", "=", "np", ".", "array", "(", "pbbold", "[", "pbbold", "[", ":", ",", "-", "1", "]", ">", "3", "]", ")", "# add new 9 15", "\n", "\n", "pbb", "=", "nms", "(", "pbbold", ",", "nmsthresh", ")", "\n", "pbb", "=", "np", ".", "array", "(", "pbb", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "pbb", "[", ":", ",", "1", ":", "]", "=", "np", ".", "array", "(", "pbb", "[", ":", ",", "1", ":", "]", "+", "np", ".", "expand_dims", "(", "extendbox", "[", ":", ",", "0", "]", ",", "1", ")", ".", "T", ")", "\n", "pbb", "[", ":", ",", "1", ":", "]", "=", "np", ".", "array", "(", "pbb", "[", ":", ",", "1", ":", "]", "*", "np", ".", "expand_dims", "(", "resolution", ",", "1", ")", ".", "T", "/", "np", ".", "expand_dims", "(", "spacing", ",", "1", ")", ".", "T", ")", "\n", "\n", "pos", "=", "VoxelToWorldCoord", "(", "pbb", "[", ":", ",", "1", ":", "]", ",", "origin", ",", "spacing", ")", "\n", "rowlist", "=", "[", "]", "\n", "\n", "for", "nk", "in", "range", "(", "pos", ".", "shape", "[", "0", "]", ")", ":", "# pos[nk, 2], pos[nk, 1], pos[nk, 0]", "\n", "        ", "rowlist", ".", "append", "(", "[", "bboxfname", "[", ":", "-", "8", "]", ",", "pos", "[", "nk", ",", "2", "]", ",", "pos", "[", "nk", ",", "1", "]", ",", "pos", "[", "nk", ",", "0", "]", ",", "diam", "[", "nk", "]", ",", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "pbb", "[", "nk", ",", "0", "]", ")", ")", "]", ")", "\n", "\n", "", "return", "rowlist", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.getfrocvalue": [[67, 69], ["noduleCADEvaluationLUNA16.noduleCADEvaluation"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.noduleCADEvaluation"], ["", "def", "getfrocvalue", "(", "results_filename", ",", "outputdir", ")", ":", "\n", "    ", "return", "noduleCADEvaluation", "(", "annotations_filename", ",", "annotations_excluded_filename", ",", "seriesuids_filename", ",", "results_filename", ",", "outputdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.getcsv": [[70, 96], ["os.path.exists", "os.makedirs", "print", "open", "csv.writer", "csv.writer.writerow", "os.listdir", "print", "p.map", "open.close", "fname.endswith", "len", "functools.partial", "fnamelist.append", "csv.writer.writerow", "str"], "function", ["None"], ["", "def", "getcsv", "(", "detp", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "frocpath", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "frocpath", ")", "\n", "\n", "", "for", "detpthresh", "in", "detp", ":", "\n", "        ", "print", "(", "'detp'", ",", "detpthresh", ")", "\n", "f", "=", "open", "(", "frocpath", "+", "'predanno'", "+", "str", "(", "detpthresh", ")", "+", "'.csv'", ",", "'w'", ")", "\n", "fwriter", "=", "csv", ".", "writer", "(", "f", ")", "\n", "fwriter", ".", "writerow", "(", "firstline", ")", "\n", "fnamelist", "=", "[", "]", "\n", "for", "fname", "in", "os", ".", "listdir", "(", "bboxpath", ")", ":", "\n", "            ", "if", "fname", ".", "endswith", "(", "'_pbb.npy'", ")", ":", "\n", "                ", "fnamelist", ".", "append", "(", "fname", ")", "\n", "# print fname", "\n", "# for row in convertcsv(fname, bboxpath, k):", "\n", "# fwriter.writerow(row)", "\n", "# # return", "\n", "", "", "print", "(", "len", "(", "fnamelist", ")", ")", "\n", "predannolist", "=", "p", ".", "map", "(", "functools", ".", "partial", "(", "convertcsv", ",", "bboxpath", "=", "bboxpath", ",", "detp", "=", "detpthresh", ")", ",", "fnamelist", ")", "\n", "# print len(predannolist), len(predannolist[0])", "\n", "for", "predanno", "in", "predannolist", ":", "\n", "# print predanno", "\n", "            ", "for", "row", "in", "predanno", ":", "\n", "# print row", "\n", "                ", "fwriter", ".", "writerow", "(", "row", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.getfroc": [[97, 115], ["range", "numpy.save", "predannofnamalist.append", "outputdirlist.append", "len", "froclist.append", "os.path.exists", "os.makedirs", "FROCeval.getfrocvalue", "str", "str"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.getfrocvalue"], ["", "", "def", "getfroc", "(", "detp", ")", ":", "\n", "\n", "    ", "predannofnamalist", "=", "[", "]", "\n", "outputdirlist", "=", "[", "]", "\n", "for", "detpthresh", "in", "detp", ":", "\n", "        ", "predannofnamalist", ".", "append", "(", "outputdir", "+", "'predanno'", "+", "str", "(", "detpthresh", ")", "+", "'.csv'", ")", "\n", "outputpath", "=", "outputdir", "+", "'predanno'", "+", "str", "(", "detpthresh", ")", "+", "'/'", "\n", "outputdirlist", ".", "append", "(", "outputpath", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outputpath", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "outputpath", ")", "\n", "#    froclist = p.map(getfrocvalue, predannofnamalist, outputdirlist)", "\n", "\n", "", "", "froclist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "predannofnamalist", ")", ")", ":", "\n", "        ", "froclist", ".", "append", "(", "getfrocvalue", "(", "predannofnamalist", "[", "i", "]", ",", "outputdirlist", "[", "i", "]", ")", ")", "\n", "\n", "", "np", ".", "save", "(", "outputdir", "+", "'froclist.npy'", ",", "froclist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.PostRes2d.__init__": [[8, 22], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_out", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PostRes2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "n_in", ",", "n_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "n_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "n_out", ",", "n_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "n_out", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "n_out", "!=", "n_in", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "n_in", ",", "n_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_out", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.PostRes2d.forward": [[23, 36], ["layers.PostRes2d.conv1", "layers.PostRes2d.bn1", "layers.PostRes2d.relu", "layers.PostRes2d.conv2", "layers.PostRes2d.bn2", "layers.PostRes2d.relu", "layers.PostRes2d.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.PostRes.__init__": [[38, 52], ["torch.nn.Module.__init__", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Sequential", "torch.nn.Conv3d", "torch.nn.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_out", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PostRes", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "n_in", ",", "n_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "n_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "n_out", ",", "n_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "n_out", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "n_out", "!=", "n_in", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n_in", ",", "n_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n_out", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.PostRes.forward": [[53, 66], ["layers.PostRes.conv1", "layers.PostRes.bn1", "layers.PostRes.relu", "layers.PostRes.conv2", "layers.PostRes.bn2", "layers.PostRes.relu", "layers.PostRes.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.Rec3.__init__": [[68, 130], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n0", ",", "n1", ",", "n2", ",", "n3", ",", "p", "=", "0.0", ",", "integrate", "=", "True", ")", ":", "\n", "        ", "super", "(", "Rec3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block01", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n0", ",", "n1", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ")", "\n", "\n", "self", ".", "block11", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ")", "\n", "\n", "self", ".", "block21", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "n2", ",", "n1", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n1", ")", ")", "\n", "\n", "self", ".", "block12", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n1", ",", "n2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ")", "\n", "\n", "self", ".", "block22", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ")", "\n", "\n", "self", ".", "block32", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "n3", ",", "n2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n2", ")", ")", "\n", "\n", "self", ".", "block23", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n2", ",", "n3", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n3", ",", "n3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ")", "\n", "\n", "self", ".", "block33", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n3", ",", "n3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n3", ",", "n3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "n3", ")", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "integrate", "=", "integrate", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.Rec3.forward": [[131, 148], ["torch.bernoulli", "layers.Rec3.relu", "layers.Rec3.relu", "layers.Rec3.relu", "torch.ones", "layers.Rec3.block21", "layers.Rec3.block32", "layers.Rec3.block23", "layers.Rec3.block33", "layers.Rec3.block21", "layers.Rec3.block32", "layers.Rec3.block23", "layers.Rec3.block33", "layers.Rec3.block01", "layers.Rec3.block11", "layers.Rec3.block12", "layers.Rec3.block22", "layers.Rec3.block01", "layers.Rec3.block11", "layers.Rec3.block12", "layers.Rec3.block22"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ",", "x1", ",", "x2", ",", "x3", ")", ":", "\n", "        ", "if", "self", ".", "p", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "coef", "=", "torch", ".", "bernoulli", "(", "(", "1.0", "-", "self", ".", "p", ")", "*", "torch", ".", "ones", "(", "8", ")", ")", "\n", "out1", "=", "coef", "[", "0", "]", "*", "self", ".", "block01", "(", "x0", ")", "+", "coef", "[", "1", "]", "*", "self", ".", "block11", "(", "x1", ")", "+", "coef", "[", "2", "]", "*", "self", ".", "block21", "(", "x2", ")", "\n", "out2", "=", "coef", "[", "3", "]", "*", "self", ".", "block12", "(", "x1", ")", "+", "coef", "[", "4", "]", "*", "self", ".", "block22", "(", "x2", ")", "+", "coef", "[", "5", "]", "*", "self", ".", "block32", "(", "x3", ")", "\n", "out3", "=", "coef", "[", "6", "]", "*", "self", ".", "block23", "(", "x2", ")", "+", "coef", "[", "7", "]", "*", "self", ".", "block33", "(", "x3", ")", "\n", "", "else", ":", "\n", "            ", "out1", "=", "(", "1", "-", "self", ".", "p", ")", "*", "(", "self", ".", "block01", "(", "x0", ")", "+", "self", ".", "block11", "(", "x1", ")", "+", "self", ".", "block21", "(", "x2", ")", ")", "\n", "out2", "=", "(", "1", "-", "self", ".", "p", ")", "*", "(", "self", ".", "block12", "(", "x1", ")", "+", "self", ".", "block22", "(", "x2", ")", "+", "self", ".", "block32", "(", "x3", ")", ")", "\n", "out3", "=", "(", "1", "-", "self", ".", "p", ")", "*", "(", "self", ".", "block23", "(", "x2", ")", "+", "self", ".", "block33", "(", "x3", ")", ")", "\n", "\n", "", "if", "self", ".", "integrate", ":", "\n", "            ", "out1", "+=", "x1", "\n", "out2", "+=", "x2", "\n", "out3", "+=", "x3", "\n", "\n", "", "return", "x0", ",", "self", ".", "relu", "(", "out1", ")", ",", "self", ".", "relu", "(", "out2", ")", ",", "self", ".", "relu", "(", "out3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.Loss.__init__": [[156, 162], ["torch.nn.Module.__init__", "torch.nn.Sigmoid", "torch.nn.BCELoss", "torch.nn.SmoothL1Loss"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_hard", "=", "0", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "classify_loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "regress_loss", "=", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "num_hard", "=", "num_hard", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.Loss.forward": [[163, 218], ["labels.view.view.size", "output.view.view.view", "labels.view.view.view", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "output[].view", "labels[].view", "layers.Loss.sigmoid", "classify_loss.item", "len", "pos_idcs.unsqueeze().expand.unsqueeze().expand.size", "layers.hard_mining", "len", "layers.Loss.sigmoid", "len", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze", "layers.Loss.regress_loss", "layers.Loss.regress_loss", "layers.Loss.regress_loss", "layers.Loss.regress_loss", "l.item", "layers.Loss.classify_loss", "layers.Loss.classify_loss", "layers.Loss.classify_loss"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.hard_mining", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid"], ["", "def", "forward", "(", "self", ",", "output", ",", "labels", ",", "train", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "labels", ".", "size", "(", "0", ")", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "pos_idcs", "=", "labels", "[", ":", ",", "0", "]", ">", "0.5", "\n", "pos_idcs", "=", "pos_idcs", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "pos_idcs", ".", "size", "(", "0", ")", ",", "5", ")", "\n", "pos_output", "=", "output", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "pos_labels", "=", "labels", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "neg_idcs", "=", "labels", "[", ":", ",", "0", "]", "<", "-", "0.5", "\n", "neg_output", "=", "output", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "neg_labels", "=", "labels", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "\n", "if", "self", ".", "num_hard", ">", "0", "and", "train", ":", "\n", "            ", "neg_output", ",", "neg_labels", "=", "hard_mining", "(", "neg_output", ",", "neg_labels", ",", "self", ".", "num_hard", "*", "batch_size", ")", "\n", "", "neg_prob", "=", "self", ".", "sigmoid", "(", "neg_output", ")", "\n", "\n", "#classify_loss = self.classify_loss(", "\n", "#   torch.cat((pos_prob, neg_prob), 0),", "\n", "#  torch.cat((pos_labels[:, 0], neg_labels + 1), 0))", "\n", "if", "len", "(", "pos_output", ")", ">", "0", ":", "\n", "            ", "pos_prob", "=", "self", ".", "sigmoid", "(", "pos_output", "[", ":", ",", "0", "]", ")", "\n", "pz", ",", "ph", ",", "pw", ",", "pd", "=", "pos_output", "[", ":", ",", "1", "]", ",", "pos_output", "[", ":", ",", "2", "]", ",", "pos_output", "[", ":", ",", "3", "]", ",", "pos_output", "[", ":", ",", "4", "]", "\n", "lz", ",", "lh", ",", "lw", ",", "ld", "=", "pos_labels", "[", ":", ",", "1", "]", ",", "pos_labels", "[", ":", ",", "2", "]", ",", "pos_labels", "[", ":", ",", "3", "]", ",", "pos_labels", "[", ":", ",", "4", "]", "\n", "\n", "regress_losses", "=", "[", "\n", "self", ".", "regress_loss", "(", "pz", ",", "lz", ")", ",", "\n", "self", ".", "regress_loss", "(", "ph", ",", "lh", ")", ",", "\n", "self", ".", "regress_loss", "(", "pw", ",", "lw", ")", ",", "\n", "self", ".", "regress_loss", "(", "pd", ",", "ld", ")", "]", "\n", "regress_losses_data", "=", "[", "l", ".", "item", "(", ")", "for", "l", "in", "regress_losses", "]", "\n", "classify_loss", "=", "0.5", "*", "self", ".", "classify_loss", "(", "\n", "pos_prob", ",", "pos_labels", "[", ":", ",", "0", "]", ")", "+", "0.5", "*", "self", ".", "classify_loss", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "pos_correct", "=", "(", "pos_prob", ".", "data", ">=", "0.5", ")", ".", "sum", "(", ")", "\n", "pos_total", "=", "len", "(", "pos_prob", ")", "\n", "\n", "", "else", ":", "\n", "            ", "regress_losses", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "classify_loss", "=", "0.5", "*", "self", ".", "classify_loss", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "pos_correct", "=", "0", "\n", "pos_total", "=", "0", "\n", "regress_losses_data", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "classify_loss_data", "=", "classify_loss", ".", "item", "(", ")", "\n", "\n", "loss", "=", "classify_loss", "\n", "for", "regress_loss", "in", "regress_losses", ":", "\n", "            ", "loss", "+=", "regress_loss", "\n", "\n", "", "neg_correct", "=", "(", "neg_prob", ".", "data", "<", "0.5", ")", ".", "sum", "(", ")", "\n", "neg_total", "=", "len", "(", "neg_prob", ")", "\n", "\n", "return", "[", "loss", ",", "classify_loss_data", "]", "+", "regress_losses_data", "+", "[", "pos_correct", ",", "pos_total", ",", "neg_correct", ",", "neg_total", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.BinaryFocalLoss.__init__": [[221, 227], ["torch.nn.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "alpha", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "BinaryFocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "size_average", "=", "size_average", "\n", "print", "(", "\"FOCAL LOSS\"", ",", "gamma", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.BinaryFocalLoss.forward": [[228, 253], ["target.unsqueeze.unsqueeze.float", "target.unsqueeze.unsqueeze.float", "pt.log", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.unsqueeze", "target.unsqueeze.unsqueeze.dim", "target.unsqueeze.unsqueeze.unsqueeze", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "loss.mean", "loss.sum", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "target", "=", "target", ".", "float", "(", ")", "\n", "if", "input", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "input", "=", "input", ".", "unsqueeze", "(", "1", ")", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# N,C,H,W => N,C,H*W", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "\n", "#target = target.view(-1,1)", "\n", "", "target", "=", "target", ".", "float", "(", ")", "\n", "pt", "=", "input", "*", "target", "+", "(", "1", "-", "input", ")", "*", "(", "1", "-", "target", ")", "\n", "logpt", "=", "pt", ".", "log", "(", ")", "\n", "at", "=", "(", "1", "-", "self", ".", "alpha", ")", "*", "target", "+", "(", "self", ".", "alpha", ")", "*", "(", "1", "-", "target", ")", "\n", "logpt", "=", "logpt", "*", "at", "\n", "\n", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.FocalLoss.__init__": [[255, 261], ["torch.nn.Module.__init__", "torch.nn.Sigmoid", "layers.BinaryFocalLoss", "torch.nn.SmoothL1Loss"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_hard", "=", "0", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "classify_loss", "=", "BinaryFocalLoss", "(", "gamma", "=", "2", ",", "alpha", "=", "0.5", ",", "size_average", "=", "False", ")", "\n", "self", ".", "regress_loss", "=", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "num_hard", "=", "num_hard", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.FocalLoss.forward": [[262, 318], ["labels.view.view.size", "output.view.view.view", "labels.view.view.view", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "output[].view", "labels[].view", "layers.FocalLoss.sigmoid", "layers.FocalLoss.item", "len", "pos_idcs.unsqueeze().expand.unsqueeze().expand.size", "layers.hard_mining", "len", "layers.FocalLoss.sigmoid", "len", "layers.FocalLoss.classify_loss.forward", "pos_idcs.unsqueeze().expand.unsqueeze().expand.unsqueeze", "layers.FocalLoss.regress_loss", "layers.FocalLoss.regress_loss", "layers.FocalLoss.regress_loss", "layers.FocalLoss.regress_loss", "l.item", "layers.FocalLoss.classify_loss.forward", "layers.FocalLoss.classify_loss.forward", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.hard_mining", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.FROCeval.sigmoid", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.Net.forward", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.Net.forward", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.Net.forward"], ["", "def", "forward", "(", "self", ",", "output", ",", "labels", ",", "train", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "labels", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "pos_idcs", "=", "labels", "[", ":", ",", "0", "]", ">", "0.5", "\n", "\n", "pos_idcs", "=", "pos_idcs", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "pos_idcs", ".", "size", "(", "0", ")", ",", "5", ")", "\n", "pos_output", "=", "output", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "pos_labels", "=", "labels", "[", "pos_idcs", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "\n", "neg_idcs", "=", "labels", "[", ":", ",", "0", "]", "<", "-", "0.5", "\n", "neg_output", "=", "output", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "neg_labels", "=", "labels", "[", ":", ",", "0", "]", "[", "neg_idcs", "]", "\n", "\n", "if", "self", ".", "num_hard", ">", "0", "and", "train", ":", "\n", "            ", "neg_output", ",", "neg_labels", "=", "hard_mining", "(", "neg_output", ",", "neg_labels", ",", "self", ".", "num_hard", "*", "batch_size", ")", "\n", "", "neg_prob", "=", "self", ".", "sigmoid", "(", "neg_output", ")", "\n", "\n", "if", "len", "(", "pos_output", ")", ">", "0", ":", "\n", "            ", "pos_prob", "=", "self", ".", "sigmoid", "(", "pos_output", "[", ":", ",", "0", "]", ")", "\n", "pz", ",", "ph", ",", "pw", ",", "pd", "=", "pos_output", "[", ":", ",", "1", "]", ",", "pos_output", "[", ":", ",", "2", "]", ",", "pos_output", "[", ":", ",", "3", "]", ",", "pos_output", "[", ":", ",", "4", "]", "\n", "lz", ",", "lh", ",", "lw", ",", "ld", "=", "pos_labels", "[", ":", ",", "1", "]", ",", "pos_labels", "[", ":", ",", "2", "]", ",", "pos_labels", "[", ":", ",", "3", "]", ",", "pos_labels", "[", ":", ",", "4", "]", "\n", "\n", "regress_losses", "=", "[", "\n", "self", ".", "regress_loss", "(", "pz", ",", "lz", ")", ",", "\n", "self", ".", "regress_loss", "(", "ph", ",", "lh", ")", ",", "\n", "self", ".", "regress_loss", "(", "pw", ",", "lw", ")", ",", "\n", "self", ".", "regress_loss", "(", "pd", ",", "ld", ")", "]", "\n", "regress_losses_data", "=", "[", "l", ".", "item", "(", ")", "for", "l", "in", "regress_losses", "]", "\n", "classify_loss", "=", "self", ".", "classify_loss", ".", "forward", "(", "\n", "pos_prob", ",", "pos_labels", "[", ":", ",", "0", "]", ")", "+", "self", ".", "classify_loss", ".", "forward", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "classify_loss", "=", "classify_loss", "/", "(", "len", "(", "pos_prob", ")", "+", "len", "(", "neg_prob", ")", ")", "\n", "pos_correct", "=", "(", "pos_prob", ".", "data", ">=", "0.5", ")", ".", "sum", "(", ")", "\n", "pos_total", "=", "len", "(", "pos_prob", ")", "\n", "\n", "", "else", ":", "\n", "            ", "regress_losses", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "classify_loss", "=", "self", ".", "classify_loss", ".", "forward", "(", "\n", "neg_prob", ",", "neg_labels", "+", "1", ")", "\n", "classify_loss", "=", "classify_loss", "/", "len", "(", "neg_prob", ")", "\n", "pos_correct", "=", "0", "\n", "pos_total", "=", "0", "\n", "regress_losses_data", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "classify_loss_data", "=", "classify_loss", ".", "item", "(", ")", "\n", "\n", "loss", "=", "classify_loss", "\n", "for", "regress_loss", "in", "regress_losses", ":", "\n", "            ", "loss", "+=", "regress_loss", "\n", "\n", "", "neg_correct", "=", "(", "neg_prob", ".", "data", "<", "0.5", ")", ".", "sum", "(", ")", "\n", "neg_total", "=", "len", "(", "neg_prob", ")", "\n", "\n", "return", "[", "loss", ",", "classify_loss_data", "]", "+", "regress_losses_data", "+", "[", "pos_correct", ",", "pos_total", ",", "neg_correct", ",", "neg_total", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.GetPBB.__init__": [[320, 323], ["numpy.asarray"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "stride", "=", "config", "[", "'stride'", "]", "\n", "self", ".", "anchors", "=", "np", ".", "asarray", "(", "config", "[", "'anchors'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.GetPBB.__call__": [[324, 346], ["numpy.copy", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.where", "numpy.arange.reshape", "numpy.arange.reshape", "numpy.arange.reshape", "numpy.exp", "anchors.reshape", "float", "anchors.reshape", "anchors.reshape", "anchors.reshape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "output", ",", "thresh", "=", "-", "3", ",", "ismask", "=", "False", ")", ":", "\n", "        ", "stride", "=", "self", ".", "stride", "\n", "anchors", "=", "self", ".", "anchors", "\n", "output", "=", "np", ".", "copy", "(", "output", ")", "\n", "offset", "=", "(", "float", "(", "stride", ")", "-", "1", ")", "/", "2", "\n", "output_size", "=", "output", ".", "shape", "\n", "oz", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "0", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "oh", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "1", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "ow", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "2", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "=", "oz", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "+", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "=", "oh", ".", "reshape", "(", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "+", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "3", "]", "=", "ow", ".", "reshape", "(", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", ")", "+", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "3", "]", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "4", "]", "=", "np", ".", "exp", "(", "output", "[", ":", ",", ":", ",", ":", ",", ":", ",", "4", "]", ")", "*", "anchors", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "mask", "=", "output", "[", "...", ",", "0", "]", ">", "thresh", "\n", "xx", ",", "yy", ",", "zz", ",", "aa", "=", "np", ".", "where", "(", "mask", ")", "\n", "\n", "output", "=", "output", "[", "xx", ",", "yy", ",", "zz", ",", "aa", "]", "\n", "if", "ismask", ":", "\n", "            ", "return", "output", ",", "[", "xx", ",", "yy", ",", "zz", ",", "aa", "]", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.hard_mining": [[149, 154], ["torch.topk", "torch.index_select", "torch.index_select", "min", "len"], "function", ["None"], ["", "", "def", "hard_mining", "(", "neg_output", ",", "neg_labels", ",", "num_hard", ")", ":", "\n", "    ", "_", ",", "idcs", "=", "torch", ".", "topk", "(", "neg_output", ",", "min", "(", "num_hard", ",", "len", "(", "neg_output", ")", ")", ")", "\n", "neg_output", "=", "torch", ".", "index_select", "(", "neg_output", ",", "0", ",", "idcs", ")", "\n", "neg_labels", "=", "torch", ".", "index_select", "(", "neg_labels", ",", "0", ",", "idcs", ")", "\n", "return", "neg_output", ",", "neg_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.nms": [[349, 368], ["numpy.arange", "numpy.asarray", "len", "len", "range", "numpy.argsort", "len", "np.asarray.append", "layers.iou"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.iou"], ["", "", "", "def", "nms", "(", "output", ",", "nms_th", ")", ":", "\n", "    ", "if", "len", "(", "output", ")", "==", "0", ":", "\n", "        ", "return", "output", "\n", "\n", "", "output", "=", "output", "[", "np", ".", "argsort", "(", "-", "output", "[", ":", ",", "0", "]", ")", "]", "\n", "bboxes", "=", "[", "output", "[", "0", "]", "]", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "1", ",", "len", "(", "output", ")", ")", ":", "\n", "        ", "bbox", "=", "output", "[", "i", "]", "\n", "flag", "=", "1", "\n", "for", "j", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "            ", "if", "iou", "(", "bbox", "[", "1", ":", "5", "]", ",", "bboxes", "[", "j", "]", "[", "1", ":", "5", "]", ")", ">=", "nms_th", ":", "\n", "                ", "flag", "=", "-", "1", "\n", "break", "\n", "", "", "if", "flag", "==", "1", ":", "\n", "            ", "bboxes", ".", "append", "(", "bbox", ")", "\n", "\n", "", "", "bboxes", "=", "np", ".", "asarray", "(", "bboxes", ",", "np", ".", "float32", ")", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.iou": [[369, 386], ["range", "len", "overlap.append", "max", "min", "max"], "function", ["None"], ["", "def", "iou", "(", "box0", ",", "box1", ")", ":", "\n", "\n", "    ", "r0", "=", "box0", "[", "3", "]", "/", "2", "\n", "s0", "=", "box0", "[", ":", "3", "]", "-", "r0", "\n", "e0", "=", "box0", "[", ":", "3", "]", "+", "r0", "\n", "\n", "r1", "=", "box1", "[", "3", "]", "/", "2", "\n", "s1", "=", "box1", "[", ":", "3", "]", "-", "r1", "\n", "e1", "=", "box1", "[", ":", "3", "]", "+", "r1", "\n", "\n", "overlap", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "s0", ")", ")", ":", "\n", "        ", "overlap", ".", "append", "(", "max", "(", "0", ",", "min", "(", "e0", "[", "i", "]", ",", "e1", "[", "i", "]", ")", "-", "max", "(", "s0", "[", "i", "]", ",", "s1", "[", "i", "]", ")", ")", ")", "\n", "\n", "", "intersection", "=", "overlap", "[", "0", "]", "*", "overlap", "[", "1", "]", "*", "overlap", "[", "2", "]", "\n", "union", "=", "box0", "[", "3", "]", "*", "box0", "[", "3", "]", "*", "box0", "[", "3", "]", "+", "box1", "[", "3", "]", "*", "box1", "[", "3", "]", "*", "box1", "[", "3", "]", "-", "intersection", "\n", "return", "intersection", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.acc": [[387, 425], ["layers.nms", "numpy.zeros", "enumerate", "enumerate", "len", "len", "layers.iou", "fp.append", "tp.append", "fp.append", "numpy.concatenate", "iou.append", "len", "numpy.max", "fn.append", "numpy.concatenate", "numpy.concatenate", "layers.iou", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.nms", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.iou", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.iou"], ["", "def", "acc", "(", "pbb", ",", "lbb", ",", "conf_th", ",", "nms_th", ",", "detect_th", ")", ":", "\n", "    ", "pbb", "=", "pbb", "[", "pbb", "[", ":", ",", "0", "]", ">=", "conf_th", "]", "\n", "pbb", "=", "nms", "(", "pbb", ",", "nms_th", ")", "\n", "\n", "tp", "=", "[", "]", "\n", "fp", "=", "[", "]", "\n", "fn", "=", "[", "]", "\n", "l_flag", "=", "np", ".", "zeros", "(", "(", "len", "(", "lbb", ")", ",", ")", ",", "np", ".", "int32", ")", "\n", "for", "p", "in", "pbb", ":", "\n", "        ", "flag", "=", "0", "\n", "bestscore", "=", "0", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lbb", ")", ":", "\n", "            ", "score", "=", "iou", "(", "p", "[", "1", ":", "5", "]", ",", "l", ")", "\n", "if", "score", ">", "bestscore", ":", "\n", "                ", "bestscore", "=", "score", "\n", "besti", "=", "i", "\n", "", "", "if", "bestscore", ">", "detect_th", ":", "\n", "            ", "flag", "=", "1", "\n", "if", "l_flag", "[", "besti", "]", "==", "0", ":", "\n", "                ", "l_flag", "[", "besti", "]", "=", "1", "\n", "tp", ".", "append", "(", "np", ".", "concatenate", "(", "[", "p", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "fp", ".", "append", "(", "np", ".", "concatenate", "(", "[", "p", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "", "", "if", "flag", "==", "0", ":", "\n", "            ", "fp", ".", "append", "(", "np", ".", "concatenate", "(", "[", "p", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "", "", "for", "i", ",", "l", "in", "enumerate", "(", "lbb", ")", ":", "\n", "        ", "if", "l_flag", "[", "i", "]", "==", "0", ":", "\n", "            ", "score", "=", "[", "]", "\n", "for", "p", "in", "pbb", ":", "\n", "                ", "score", ".", "append", "(", "iou", "(", "p", "[", "1", ":", "5", "]", ",", "l", ")", ")", "\n", "", "if", "len", "(", "score", ")", "!=", "0", ":", "\n", "                ", "bestscore", "=", "np", ".", "max", "(", "score", ")", "\n", "", "else", ":", "\n", "                ", "bestscore", "=", "0", "\n", "", "if", "bestscore", "<", "detect_th", ":", "\n", "                ", "fn", ".", "append", "(", "np", ".", "concatenate", "(", "[", "l", ",", "[", "bestscore", "]", "]", ",", "0", ")", ")", "\n", "\n", "", "", "", "return", "tp", ",", "fp", ",", "fn", ",", "len", "(", "lbb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.topkpbb": [[426, 460], ["numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.concatenate", "len", "numpy.min", "numpy.array", "numpy.array", "numpy.array", "layers.acc", "numpy.argsort", "len", "numpy.concatenate", "len", "len", "len", "len", "numpy.array", "len", "numpy.array", "len", "numpy.array", "len", "len", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.layers.acc"], ["", "def", "topkpbb", "(", "pbb", ",", "lbb", ",", "nms_th", ",", "detect_th", ",", "topk", "=", "30", ")", ":", "\n", "    ", "conf_th", "=", "0", "\n", "fp", "=", "[", "]", "\n", "tp", "=", "[", "]", "\n", "while", "len", "(", "tp", ")", "+", "len", "(", "fp", ")", "<", "topk", ":", "\n", "        ", "conf_th", "=", "conf_th", "-", "0.2", "\n", "tp", ",", "fp", ",", "fn", ",", "_", "=", "acc", "(", "pbb", ",", "lbb", ",", "conf_th", ",", "nms_th", ",", "detect_th", ")", "\n", "if", "conf_th", "<", "-", "3", ":", "\n", "            ", "break", "\n", "", "", "tp", "=", "np", ".", "array", "(", "tp", ")", ".", "reshape", "(", "[", "len", "(", "tp", ")", ",", "6", "]", ")", "\n", "fp", "=", "np", ".", "array", "(", "fp", ")", ".", "reshape", "(", "[", "len", "(", "fp", ")", ",", "6", "]", ")", "\n", "fn", "=", "np", ".", "array", "(", "fn", ")", ".", "reshape", "(", "[", "len", "(", "fn", ")", ",", "5", "]", ")", "\n", "allp", "=", "np", ".", "concatenate", "(", "[", "tp", ",", "fp", "]", ",", "0", ")", "\n", "sorting", "=", "np", ".", "argsort", "(", "allp", "[", ":", ",", "0", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "n_tp", "=", "len", "(", "tp", ")", "\n", "topk", "=", "np", ".", "min", "(", "[", "topk", ",", "len", "(", "allp", ")", "]", ")", "\n", "tp_in_topk", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "n_tp", ")", "if", "i", "in", "sorting", "[", ":", "topk", "]", "]", ")", "\n", "fp_in_topk", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "topk", ")", "if", "sorting", "[", "i", "]", "not", "in", "range", "(", "n_tp", ")", "]", ")", "\n", "#     print(fp_in_topk)", "\n", "fn_i", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "n_tp", ")", "if", "i", "not", "in", "sorting", "[", ":", "topk", "]", "]", ")", "\n", "newallp", "=", "allp", "[", ":", "topk", "]", "\n", "if", "len", "(", "fn_i", ")", ">", "0", ":", "\n", "        ", "fn", "=", "np", ".", "concatenate", "(", "[", "fn", ",", "tp", "[", "fn_i", ",", ":", "5", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "fn", "=", "fn", "\n", "", "if", "len", "(", "tp_in_topk", ")", ">", "0", ":", "\n", "        ", "tp", "=", "tp", "[", "tp_in_topk", "]", "\n", "", "else", ":", "\n", "        ", "tp", "=", "[", "]", "\n", "", "if", "len", "(", "fp_in_topk", ")", ">", "0", ":", "\n", "        ", "fp", "=", "newallp", "[", "fp_in_topk", "]", "\n", "", "else", ":", "\n", "        ", "fp", "=", "[", "]", "\n", "", "return", "tp", ",", "fp", ",", "fn", "\n", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.Net.__init__": [[31, 104], ["torch.nn.Module.__init__", "torch.nn.Sequential", "range", "range", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxUnpool3d", "torch.nn.MaxUnpool3d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout3d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "[].bias.data.fill_", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "len", "range", "setattr", "len", "range", "setattr", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ConvTranspose3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.ReLU", "torch.nn.Conv3d", "math.log", "torch.nn.Sequential", "torch.nn.Sequential", "len", "blocks.append", "blocks.append", "str", "blocks.append", "blocks.append", "str", "len", "len", "layers_se.PostRes", "layers_se.PostRes", "layers_se.PostRes", "layers_se.PostRes"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# The first few layers consumes the most memory, so use simple convolution to save memory.", "\n", "# Call these layers preBlock, i.e., before the residual blocks of later layers.", "\n", "self", ".", "preBlock", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "1", ",", "24", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "24", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "24", ",", "24", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "24", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "# 3 poolings, each pooling downsamples the feature map by a factor 2.", "\n", "# 3 groups of blocks. The first block of each group has one pooling.", "\n", "num_blocks_forw", "=", "[", "2", ",", "2", ",", "3", ",", "3", "]", "\n", "num_blocks_back", "=", "[", "3", ",", "3", "]", "\n", "self", ".", "featureNum_forw", "=", "[", "24", ",", "32", ",", "64", ",", "64", ",", "64", "]", "\n", "self", ".", "featureNum_back", "=", "[", "128", ",", "64", ",", "64", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_blocks_forw", ")", ")", ":", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_blocks_forw", "[", "i", "]", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_forw", "[", "i", "]", ",", "self", ".", "featureNum_forw", "[", "i", "+", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_forw", "[", "i", "+", "1", "]", ",", "self", ".", "featureNum_forw", "[", "i", "+", "1", "]", ")", ")", "\n", "", "", "setattr", "(", "self", ",", "'forw'", "+", "str", "(", "i", "+", "1", ")", ",", "nn", ".", "Sequential", "(", "*", "blocks", ")", ")", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "num_blocks_back", ")", ")", ":", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_blocks_back", "[", "i", "]", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "addition", "=", "3", "\n", "", "else", ":", "\n", "                        ", "addition", "=", "0", "\n", "", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_back", "[", "i", "+", "1", "]", "+", "self", ".", "featureNum_forw", "[", "i", "+", "2", "]", "+", "addition", ",", "self", ".", "featureNum_back", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "blocks", ".", "append", "(", "PostRes", "(", "self", ".", "featureNum_back", "[", "i", "]", ",", "self", ".", "featureNum_back", "[", "i", "]", ")", ")", "\n", "", "", "setattr", "(", "self", ",", "'back'", "+", "str", "(", "i", "+", "2", ")", ",", "nn", ".", "Sequential", "(", "*", "blocks", ")", ")", "\n", "\n", "", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool4", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "unmaxpool1", "=", "nn", ".", "MaxUnpool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "unmaxpool2", "=", "nn", ".", "MaxUnpool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "path1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "64", ",", "64", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "path2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "64", ",", "64", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout3d", "(", "p", "=", "0.5", ",", "inplace", "=", "False", ")", "\n", "self", ".", "output", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "self", ".", "featureNum_back", "[", "0", "]", ",", "64", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Dropout3d(p = 0.3),", "\n", "nn", ".", "Conv3d", "(", "64", ",", "5", "*", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "kernel_size", "=", "1", ")", ")", "\n", "\n", "self", ".", "nodule_output", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "self", ".", "featureNum_back", "[", "0", "]", ",", "64", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Dropout3d(p = 0.3),", "\n", "nn", ".", "Conv3d", "(", "64", ",", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "kernel_size", "=", "1", ")", ")", "\n", "\n", "self", ".", "regress_output", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "self", ".", "featureNum_back", "[", "0", "]", ",", "64", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Dropout3d(p = 0.3),", "\n", "nn", ".", "Conv3d", "(", "64", ",", "4", "*", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "kernel_size", "=", "1", ")", ")", "\n", "focal_bias", "=", "-", "math", ".", "log", "(", "(", "1.0", "-", "0.01", ")", "/", "0.01", ")", "\n", "self", ".", "_modules", "[", "'nodule_output'", "]", "[", "2", "]", ".", "bias", ".", "data", ".", "fill_", "(", "focal_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.Net.forward": [[105, 139], ["res18_se.Net.preBlock", "res18_se.Net.maxpool1", "res18_se.Net.forw1", "res18_se.Net.maxpool2", "res18_se.Net.forw2", "res18_se.Net.maxpool3", "res18_se.Net.forw3", "res18_se.Net.maxpool4", "res18_se.Net.forw4", "res18_se.Net.path1", "res18_se.Net.back3", "res18_se.Net.path2", "res18_se.Net.back2", "res18_se.Net.drop", "res18_se.Net.nodule_output", "res18_se.Net.regress_output", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.size", "regress_out.transpose().contiguous().view.transpose().contiguous().view.size", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.view", "regress_out.transpose().contiguous().view.transpose().contiguous().view.view", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "regress_out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "torch.cat", "torch.cat", "torch.cat", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.size", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.size", "regress_out.transpose().contiguous().view.transpose().contiguous().view.size", "regress_out.transpose().contiguous().view.transpose().contiguous().view.size", "len", "len", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "regress_out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "nodule_out.transpose().contiguous().view.transpose().contiguous().view.transpose", "regress_out.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "coord", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "preBlock", "(", "x", ")", "#16", "\n", "out_pool", ",", "indices0", "=", "self", ".", "maxpool1", "(", "out", ")", "\n", "out1", "=", "self", ".", "forw1", "(", "out_pool", ")", "#32", "\n", "out1_pool", ",", "indices1", "=", "self", ".", "maxpool2", "(", "out1", ")", "\n", "out2", "=", "self", ".", "forw2", "(", "out1_pool", ")", "#64", "\n", "out2_pool", ",", "indices2", "=", "self", ".", "maxpool3", "(", "out2", ")", "\n", "out3", "=", "self", ".", "forw3", "(", "out2_pool", ")", "#96", "\n", "out3_pool", ",", "indices3", "=", "self", ".", "maxpool4", "(", "out3", ")", "\n", "out4", "=", "self", ".", "forw4", "(", "out3_pool", ")", "#96", "\n", "\n", "rev3", "=", "self", ".", "path1", "(", "out4", ")", "\n", "comb3", "=", "self", ".", "back3", "(", "torch", ".", "cat", "(", "(", "rev3", ",", "out3", ")", ",", "1", ")", ")", "#96+96", "\n", "rev2", "=", "self", ".", "path2", "(", "comb3", ")", "\n", "\n", "comb2", "=", "self", ".", "back2", "(", "torch", ".", "cat", "(", "(", "rev2", ",", "out2", ",", "coord", ")", ",", "1", ")", ")", "#64+64", "\n", "comb2", "=", "self", ".", "drop", "(", "comb2", ")", "\n", "\n", "nodule_out", "=", "self", ".", "nodule_output", "(", "comb2", ")", "\n", "regress_out", "=", "self", ".", "regress_output", "(", "comb2", ")", "\n", "nodule_size", "=", "nodule_out", ".", "size", "(", ")", "\n", "regress_size", "=", "regress_out", ".", "size", "(", ")", "\n", "\n", "nodule_out", "=", "nodule_out", ".", "view", "(", "nodule_out", ".", "size", "(", "0", ")", ",", "nodule_out", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "regress_out", "=", "regress_out", ".", "view", "(", "regress_out", ".", "size", "(", "0", ")", ",", "regress_out", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "nodule_out", "=", "nodule_out", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nodule_size", "[", "0", "]", ",", "nodule_size", "[", "2", "]", ",", "nodule_size", "[", "3", "]", ",", "\n", "nodule_size", "[", "4", "]", ",", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "1", ")", "\n", "regress_out", "=", "regress_out", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "regress_size", "[", "0", "]", ",", "regress_size", "[", "2", "]", ",", "regress_size", "[", "3", "]", ",", "\n", "regress_size", "[", "4", "]", ",", "len", "(", "config", "[", "'anchors'", "]", ")", ",", "4", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "nodule_out", ",", "regress_out", ")", ",", "5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.res18_se.get_model": [[141, 146], ["res18_se.Net", "layers_se.FocalLoss", "layers_se.GetPBB"], "function", ["None"], ["", "", "def", "get_model", "(", ")", ":", "\n", "    ", "net", "=", "Net", "(", ")", "\n", "loss", "=", "FocalLoss", "(", "config", "[", "'num_hard'", "]", ")", "\n", "get_pbb", "=", "GetPBB", "(", "config", ")", "\n", "return", "config", ",", "net", ",", "loss", ",", "get_pbb", "\n", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.NoduleFinding.NoduleFinding.__init__": [[6, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "noduleid", "=", "None", ",", "coordX", "=", "None", ",", "coordY", "=", "None", ",", "coordZ", "=", "None", ",", "coordType", "=", "\"World\"", ",", "\n", "CADprobability", "=", "None", ",", "noduleType", "=", "None", ",", "diameter", "=", "None", ",", "state", "=", "None", ",", "seriesInstanceUID", "=", "None", ")", ":", "\n", "\n", "# set the variables and convert them to the correct type", "\n", "    ", "self", ".", "id", "=", "noduleid", "\n", "self", ".", "coordX", "=", "coordX", "\n", "self", ".", "coordY", "=", "coordY", "\n", "self", ".", "coordZ", "=", "coordZ", "\n", "self", ".", "coordType", "=", "coordType", "\n", "self", ".", "CADprobability", "=", "CADprobability", "\n", "self", ".", "noduleType", "=", "noduleType", "\n", "self", ".", "diameter_mm", "=", "diameter", "\n", "self", ".", "state", "=", "state", "\n", "self", ".", "candidateID", "=", "None", "\n", "self", ".", "seriesuid", "=", "seriesInstanceUID", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.LungNodule3Ddetector.__init__": [[25, 55], ["numpy.load", "test_loader.Crop", "test_loader.LabelMapping", "os.path.join", "numpy.load", "numpy.all", "labels.append", "os.path.join", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "split_path", ",", "config", ",", "phase", "=", "'train'", ",", "split_comber", "=", "None", ")", ":", "\n", "        ", "assert", "(", "phase", "==", "'test'", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "max_stride", "=", "config", "[", "'max_stride'", "]", "\n", "self", ".", "stride", "=", "config", "[", "'stride'", "]", "\n", "self", ".", "blacklist", "=", "config", "[", "'blacklist'", "]", "\n", "self", ".", "isScale", "=", "config", "[", "'aug_scale'", "]", "\n", "self", ".", "r_rand", "=", "config", "[", "'r_rand_crop'", "]", "\n", "self", ".", "augtype", "=", "config", "[", "'augtype'", "]", "\n", "self", ".", "pad_value", "=", "config", "[", "'pad_value'", "]", "\n", "self", ".", "split_comber", "=", "split_comber", "\n", "idcs", "=", "np", ".", "load", "(", "split_path", ")", "\n", "\n", "if", "phase", "!=", "'test'", ":", "\n", "            ", "idcs", "=", "[", "f", "for", "f", "in", "idcs", "if", "(", "f", "not", "in", "self", ".", "blacklist", ")", "]", "\n", "\n", "", "self", ".", "filenames", "=", "[", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'%s_clean.npy'", "%", "idx", ")", "for", "idx", "in", "idcs", "]", "\n", "\n", "labels", "=", "[", "]", "\n", "\n", "for", "idx", "in", "idcs", ":", "\n", "            ", "l", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'%s_label.npy'", "%", "idx", ")", ")", "\n", "if", "np", ".", "all", "(", "l", "==", "0", ")", ":", "\n", "                ", "l", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "labels", ".", "append", "(", "l", ")", "\n", "\n", "", "self", ".", "sample_bboxes", "=", "labels", "\n", "\n", "self", ".", "crop", "=", "Crop", "(", "config", ")", "\n", "self", ".", "label_mapping", "=", "LabelMapping", "(", "config", ",", "self", ".", "phase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.LungNodule3Ddetector.__getitem__": [[56, 80], ["time.time", "numpy.random.seed", "numpy.load", "numpy.pad", "numpy.meshgrid", "numpy.concatenate().astype", "test_loader.LungNodule3Ddetector.split_comber.split", "test_loader.LungNodule3Ddetector.split_comber.split", "numpy.all", "int", "int", "int", "int", "numpy.linspace", "numpy.linspace", "numpy.linspace", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.ceil", "numpy.ceil", "numpy.ceil", "numpy.concatenate", "int", "int", "int", "numpy.pad.astype", "str", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split"], ["", "def", "__getitem__", "(", "self", ",", "idx", ",", "split", "=", "None", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "int", "(", "str", "(", "t", "%", "1", ")", "[", "2", ":", "7", "]", ")", ")", "#seed according to time", "\n", "\n", "imgs", "=", "np", ".", "load", "(", "self", ".", "filenames", "[", "idx", "]", ")", "\n", "bboxes", "=", "self", ".", "sample_bboxes", "[", "idx", "]", "\n", "nz", ",", "nh", ",", "nw", "=", "imgs", ".", "shape", "[", "1", ":", "]", "\n", "pz", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "nz", ")", "/", "self", ".", "stride", ")", ")", "*", "self", ".", "stride", "\n", "ph", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "nh", ")", "/", "self", ".", "stride", ")", ")", "*", "self", ".", "stride", "\n", "pw", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "nw", ")", "/", "self", ".", "stride", ")", ")", "*", "self", ".", "stride", "\n", "imgs", "=", "np", ".", "pad", "(", "imgs", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "pz", "-", "nz", "]", ",", "[", "0", ",", "ph", "-", "nh", "]", ",", "[", "0", ",", "pw", "-", "nw", "]", "]", ",", "'constant'", ",", "constant_values", "=", "self", ".", "pad_value", ")", "\n", "\n", "xx", ",", "yy", ",", "zz", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "0.5", ",", "0.5", ",", "imgs", ".", "shape", "[", "1", "]", "/", "self", ".", "stride", ")", ",", "\n", "np", ".", "linspace", "(", "-", "0.5", ",", "0.5", ",", "imgs", ".", "shape", "[", "2", "]", "/", "self", ".", "stride", ")", ",", "\n", "np", ".", "linspace", "(", "-", "0.5", ",", "0.5", ",", "imgs", ".", "shape", "[", "3", "]", "/", "self", ".", "stride", ")", ",", "indexing", "=", "'ij'", ")", "\n", "coord", "=", "np", ".", "concatenate", "(", "[", "xx", "[", "np", ".", "newaxis", ",", "...", "]", ",", "yy", "[", "np", ".", "newaxis", ",", "...", "]", ",", "zz", "[", "np", ".", "newaxis", ",", ":", "]", "]", ",", "0", ")", ".", "astype", "(", "'float32'", ")", "\n", "imgs", ",", "nzhw", "=", "self", ".", "split_comber", ".", "split", "(", "imgs", ")", "\n", "coord2", ",", "nzhw2", "=", "self", ".", "split_comber", ".", "split", "(", "coord", ",", "\n", "side_len", "=", "int", "(", "self", ".", "split_comber", ".", "side_len", "/", "self", ".", "stride", ")", ",", "\n", "max_stride", "=", "int", "(", "self", ".", "split_comber", ".", "max_stride", "/", "self", ".", "stride", ")", ",", "\n", "margin", "=", "int", "(", "self", ".", "split_comber", ".", "margin", "/", "self", ".", "stride", ")", ")", "\n", "assert", "np", ".", "all", "(", "nzhw", "==", "nzhw2", ")", "\n", "imgs", "=", "(", "imgs", ".", "astype", "(", "np", ".", "float32", ")", "-", "128", ")", "/", "128", "\n", "return", "torch", ".", "from_numpy", "(", "imgs", ")", ",", "bboxes", ",", "torch", ".", "from_numpy", "(", "coord2", ")", ",", "np", ".", "array", "(", "nzhw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.LungNodule3Ddetector.__len__": [[81, 83], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sample_bboxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.Crop.__init__": [[129, 134], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "config", "[", "'crop_size'", "]", "\n", "self", ".", "bound_size", "=", "config", "[", "'bound_size'", "]", "\n", "self", ".", "stride", "=", "config", "[", "'stride'", "]", "\n", "self", ".", "pad_value", "=", "config", "[", "'pad_value'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.Crop.__call__": [[135, 205], ["numpy.copy", "numpy.copy", "range", "numpy.meshgrid", "numpy.concatenate().astype", "pad.append", "range", "numpy.pad", "range", "range", "numpy.array().astype", "numpy.array", "numpy.linspace", "numpy.linspace", "numpy.linspace", "max", "max", "pad.append", "len", "range", "range", "range", "numpy.min", "numpy.max", "numpy.max", "numpy.min", "numpy.array", "start.append", "start.append", "numpy.array().astype", "numpy.array", "numpy.concatenate", "warnings.catch_warnings", "warnings.simplefilter", "scipy.ndimage.zoom", "len", "range", "numpy.random.rand", "int", "int", "numpy.array", "max", "min", "max", "min", "max", "min", "numpy.pad", "numpy.max", "numpy.min", "numpy.array().astype", "numpy.floor", "numpy.random.randint", "numpy.array", "numpy.ceil", "numpy.random.randint", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgs", ",", "target", ",", "bboxes", ",", "isScale", "=", "False", ",", "isRand", "=", "False", ")", ":", "\n", "        ", "if", "isScale", ":", "\n", "            ", "radiusLim", "=", "[", "8.", ",", "100.", "]", "\n", "scaleLim", "=", "[", "0.75", ",", "1.25", "]", "\n", "scaleRange", "=", "[", "np", ".", "min", "(", "[", "np", ".", "max", "(", "[", "(", "radiusLim", "[", "0", "]", "/", "target", "[", "3", "]", ")", ",", "scaleLim", "[", "0", "]", "]", ")", ",", "1", "]", ")", "\n", ",", "np", ".", "max", "(", "[", "np", ".", "min", "(", "[", "(", "radiusLim", "[", "1", "]", "/", "target", "[", "3", "]", ")", ",", "scaleLim", "[", "1", "]", "]", ")", ",", "1", "]", ")", "]", "\n", "scale", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "scaleRange", "[", "1", "]", "-", "scaleRange", "[", "0", "]", ")", "+", "scaleRange", "[", "0", "]", "\n", "crop_size", "=", "(", "np", ".", "array", "(", "self", ".", "crop_size", ")", ".", "astype", "(", "'float'", ")", "/", "scale", ")", ".", "astype", "(", "'int'", ")", "\n", "", "else", ":", "\n", "            ", "crop_size", "=", "self", ".", "crop_size", "\n", "", "bound_size", "=", "self", ".", "bound_size", "\n", "target", "=", "np", ".", "copy", "(", "target", ")", "\n", "bboxes", "=", "np", ".", "copy", "(", "bboxes", ")", "\n", "\n", "start", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "if", "not", "isRand", ":", "\n", "                ", "r", "=", "target", "[", "3", "]", "/", "2", "\n", "s", "=", "np", ".", "floor", "(", "target", "[", "i", "]", "-", "r", ")", "+", "1", "-", "bound_size", "\n", "e", "=", "np", ".", "ceil", "(", "target", "[", "i", "]", "+", "r", ")", "+", "1", "+", "bound_size", "-", "crop_size", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "s", "=", "np", ".", "max", "(", "[", "imgs", ".", "shape", "[", "i", "+", "1", "]", "-", "crop_size", "[", "i", "]", "/", "2", ",", "imgs", ".", "shape", "[", "i", "+", "1", "]", "/", "2", "+", "bound_size", "]", ")", "\n", "e", "=", "np", ".", "min", "(", "[", "crop_size", "[", "i", "]", "/", "2", ",", "imgs", ".", "shape", "[", "i", "+", "1", "]", "/", "2", "-", "bound_size", "]", ")", "\n", "target", "=", "np", ".", "array", "(", "[", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", "]", ")", "\n", "", "if", "s", ">", "e", ":", "\n", "                ", "start", ".", "append", "(", "int", "(", "np", ".", "random", ".", "randint", "(", "e", ",", "s", ")", ")", ")", "# !", "\n", "", "else", ":", "\n", "                ", "start", ".", "append", "(", "int", "(", "target", "[", "i", "]", "-", "crop_size", "[", "i", "]", "/", "2", "+", "np", ".", "random", ".", "randint", "(", "-", "bound_size", "/", "2", ",", "bound_size", "/", "2", ")", ")", ")", "\n", "\n", "", "", "normstart", "=", "np", ".", "array", "(", "start", ")", ".", "astype", "(", "'float32'", ")", "/", "np", ".", "array", "(", "imgs", ".", "shape", "[", "1", ":", "]", ")", "-", "0.5", "\n", "normsize", "=", "np", ".", "array", "(", "crop_size", ")", ".", "astype", "(", "'float32'", ")", "/", "np", ".", "array", "(", "imgs", ".", "shape", "[", "1", ":", "]", ")", "\n", "xx", ",", "yy", ",", "zz", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "normstart", "[", "0", "]", ",", "normstart", "[", "0", "]", "+", "normsize", "[", "0", "]", ",", "self", ".", "crop_size", "[", "0", "]", "/", "self", ".", "stride", ")", ",", "\n", "np", ".", "linspace", "(", "normstart", "[", "1", "]", ",", "normstart", "[", "1", "]", "+", "normsize", "[", "1", "]", ",", "self", ".", "crop_size", "[", "1", "]", "/", "self", ".", "stride", ")", ",", "\n", "np", ".", "linspace", "(", "normstart", "[", "2", "]", ",", "normstart", "[", "2", "]", "+", "normsize", "[", "2", "]", ",", "self", ".", "crop_size", "[", "2", "]", "/", "self", ".", "stride", ")", ",", "\n", "indexing", "=", "'ij'", ")", "\n", "coord", "=", "np", ".", "concatenate", "(", "[", "xx", "[", "np", ".", "newaxis", ",", "...", "]", ",", "yy", "[", "np", ".", "newaxis", ",", "...", "]", ",", "zz", "[", "np", ".", "newaxis", ",", ":", "]", "]", ",", "0", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "pad", "=", "[", "]", "\n", "pad", ".", "append", "(", "[", "0", ",", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "leftpad", "=", "max", "(", "0", ",", "-", "start", "[", "i", "]", ")", "\n", "rightpad", "=", "max", "(", "0", ",", "start", "[", "i", "]", "+", "crop_size", "[", "i", "]", "-", "imgs", ".", "shape", "[", "i", "+", "1", "]", ")", "\n", "pad", ".", "append", "(", "[", "leftpad", ",", "rightpad", "]", ")", "\n", "", "crop", "=", "imgs", "[", ":", ",", "\n", "max", "(", "start", "[", "0", "]", ",", "0", ")", ":", "min", "(", "start", "[", "0", "]", "+", "crop_size", "[", "0", "]", ",", "imgs", ".", "shape", "[", "1", "]", ")", ",", "\n", "max", "(", "start", "[", "1", "]", ",", "0", ")", ":", "min", "(", "start", "[", "1", "]", "+", "crop_size", "[", "1", "]", ",", "imgs", ".", "shape", "[", "2", "]", ")", ",", "\n", "max", "(", "start", "[", "2", "]", ",", "0", ")", ":", "min", "(", "start", "[", "2", "]", "+", "crop_size", "[", "2", "]", ",", "imgs", ".", "shape", "[", "3", "]", ")", "]", "\n", "crop", "=", "np", ".", "pad", "(", "crop", ",", "pad", ",", "'constant'", ",", "constant_values", "=", "self", ".", "pad_value", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "target", "[", "i", "]", "=", "target", "[", "i", "]", "-", "start", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "bboxes", "[", "i", "]", "[", "j", "]", "=", "bboxes", "[", "i", "]", "[", "j", "]", "-", "start", "[", "j", "]", "\n", "\n", "", "", "if", "isScale", ":", "\n", "            ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "crop", "=", "zoom", "(", "crop", ",", "[", "1", ",", "scale", ",", "scale", ",", "scale", "]", ",", "order", "=", "1", ")", "\n", "", "newpad", "=", "self", ".", "crop_size", "[", "0", "]", "-", "crop", ".", "shape", "[", "1", ":", "]", "[", "0", "]", "\n", "if", "newpad", "<", "0", ":", "\n", "                ", "crop", "=", "crop", "[", ":", ",", ":", "-", "newpad", ",", ":", "-", "newpad", ",", ":", "-", "newpad", "]", "\n", "", "elif", "newpad", ">", "0", ":", "\n", "                ", "pad2", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "newpad", "]", ",", "[", "0", ",", "newpad", "]", ",", "[", "0", ",", "newpad", "]", "]", "\n", "crop", "=", "np", ".", "pad", "(", "crop", ",", "pad2", ",", "'constant'", ",", "constant_values", "=", "self", ".", "pad_value", ")", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "target", "[", "i", "]", "=", "target", "[", "i", "]", "*", "scale", "\n", "", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                    ", "bboxes", "[", "i", "]", "[", "j", "]", "=", "bboxes", "[", "i", "]", "[", "j", "]", "*", "scale", "\n", "", "", "", "return", "crop", ",", "target", ",", "bboxes", ",", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.LabelMapping.__init__": [[208, 218], ["numpy.array", "int", "numpy.asarray"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "phase", ")", ":", "\n", "        ", "self", ".", "stride", "=", "np", ".", "array", "(", "config", "[", "'stride'", "]", ")", "\n", "self", ".", "num_neg", "=", "int", "(", "config", "[", "'num_neg'", "]", ")", "\n", "self", ".", "th_neg", "=", "config", "[", "'th_neg'", "]", "\n", "self", ".", "anchors", "=", "np", ".", "asarray", "(", "config", "[", "'anchors'", "]", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "if", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "th_pos", "=", "config", "[", "'th_pos_train'", "]", "\n", "", "elif", "phase", "==", "'val'", ":", "\n", "            ", "self", ".", "th_pos", "=", "config", "[", "'th_pos_val'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.LabelMapping.__call__": [[219, 284], ["scipy.ndimage.morphology.generate_binary_structure", "range", "numpy.zeros", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.isnan", "enumerate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.log", "output_size.append", "enumerate", "numpy.where", "random.sample", "test_loader.select_samples", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "len", "range", "numpy.argmin", "pos.append", "int", "stride.astype", "test_loader.select_samples", "scipy.ndimage.morphology.binary_dilation().astype", "range", "min", "pos.append", "numpy.abs", "random.sample", "len", "len", "len", "numpy.ones", "max", "numpy.log", "range", "scipy.ndimage.morphology.binary_dilation", "int", "len", "label[].astype", "len", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.select_samples", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.select_samples"], ["", "", "def", "__call__", "(", "self", ",", "input_size", ",", "target", ",", "bboxes", ")", ":", "\n", "        ", "stride", "=", "self", ".", "stride", "\n", "num_neg", "=", "self", ".", "num_neg", "\n", "th_neg", "=", "self", ".", "th_neg", "\n", "anchors", "=", "self", ".", "anchors", "\n", "th_pos", "=", "self", ".", "th_pos", "\n", "struct", "=", "generate_binary_structure", "(", "3", ",", "1", ")", "\n", "\n", "output_size", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "assert", "(", "input_size", "[", "i", "]", "%", "stride", "==", "0", ")", "\n", "output_size", ".", "append", "(", "int", "(", "input_size", "[", "i", "]", "/", "stride", ")", ")", "\n", "\n", "", "label", "=", "np", ".", "zeros", "(", "output_size", "+", "[", "len", "(", "anchors", ")", ",", "5", "]", ",", "np", ".", "float32", ")", "\n", "offset", "=", "(", "(", "stride", ".", "astype", "(", "'float'", ")", ")", "-", "1", ")", "/", "2", "\n", "oz", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "0", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "oh", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "1", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "ow", "=", "np", ".", "arange", "(", "offset", ",", "offset", "+", "stride", "*", "(", "output_size", "[", "2", "]", "-", "1", ")", "+", "1", ",", "stride", ")", "\n", "\n", "for", "bbox", "in", "bboxes", ":", "\n", "            ", "for", "i", ",", "anchor", "in", "enumerate", "(", "anchors", ")", ":", "\n", "                ", "iz", ",", "ih", ",", "iw", "=", "select_samples", "(", "bbox", ",", "anchor", ",", "th_neg", ",", "oz", ",", "oh", ",", "ow", ")", "\n", "label", "[", "iz", ",", "ih", ",", "iw", ",", "i", ",", "0", "]", "=", "1", "\n", "label", "[", ":", ",", ":", ",", ":", ",", "i", ",", "0", "]", "=", "binary_dilation", "(", "label", "[", ":", ",", ":", ",", ":", ",", "i", ",", "0", "]", ".", "astype", "(", "'bool'", ")", ",", "structure", "=", "struct", ",", "\n", "iterations", "=", "1", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "", "label", "=", "label", "-", "1", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", "and", "self", ".", "num_neg", ">", "0", ":", "\n", "            ", "neg_z", ",", "neg_h", ",", "neg_w", ",", "neg_a", "=", "np", ".", "where", "(", "label", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "==", "-", "1", ")", "\n", "neg_idcs", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "neg_z", ")", ")", ",", "min", "(", "num_neg", ",", "len", "(", "neg_z", ")", ")", ")", "\n", "neg_z", ",", "neg_h", ",", "neg_w", ",", "neg_a", "=", "neg_z", "[", "neg_idcs", "]", ",", "neg_h", "[", "neg_idcs", "]", ",", "neg_w", "[", "neg_idcs", "]", ",", "neg_a", "[", "neg_idcs", "]", "\n", "label", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "label", "[", "neg_z", ",", "neg_h", ",", "neg_w", ",", "neg_a", ",", "0", "]", "=", "-", "1", "\n", "\n", "", "if", "np", ".", "isnan", "(", "target", "[", "0", "]", ")", ":", "\n", "            ", "return", "label", "\n", "", "iz", ",", "ih", ",", "iw", ",", "ia", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "anchor", "in", "enumerate", "(", "anchors", ")", ":", "\n", "            ", "iiz", ",", "iih", ",", "iiw", "=", "select_samples", "(", "target", ",", "anchor", ",", "th_pos", ",", "oz", ",", "oh", ",", "ow", ")", "\n", "iz", ".", "append", "(", "iiz", ")", "\n", "ih", ".", "append", "(", "iih", ")", "\n", "iw", ".", "append", "(", "iiw", ")", "\n", "ia", ".", "append", "(", "i", "*", "np", ".", "ones", "(", "(", "len", "(", "iiz", ")", ",", ")", ",", "np", ".", "int64", ")", ")", "\n", "", "iz", "=", "np", ".", "concatenate", "(", "iz", ",", "0", ")", "\n", "ih", "=", "np", ".", "concatenate", "(", "ih", ",", "0", ")", "\n", "iw", "=", "np", ".", "concatenate", "(", "iw", ",", "0", ")", "\n", "ia", "=", "np", ".", "concatenate", "(", "ia", ",", "0", ")", "\n", "flag", "=", "True", "\n", "if", "len", "(", "iz", ")", "==", "0", ":", "\n", "            ", "pos", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "pos", ".", "append", "(", "max", "(", "0", ",", "int", "(", "np", ".", "round", "(", "(", "target", "[", "i", "]", "-", "offset", ")", "/", "stride", ")", ")", ")", ")", "\n", "", "idx", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "np", ".", "log", "(", "target", "[", "3", "]", "/", "anchors", ")", ")", ")", "\n", "pos", ".", "append", "(", "idx", ")", "\n", "flag", "=", "False", "\n", "", "else", ":", "\n", "            ", "idx", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "iz", ")", ")", ",", "1", ")", "[", "0", "]", "\n", "pos", "=", "[", "iz", "[", "idx", "]", ",", "ih", "[", "idx", "]", ",", "iw", "[", "idx", "]", ",", "ia", "[", "idx", "]", "]", "\n", "", "dz", "=", "(", "target", "[", "0", "]", "-", "oz", "[", "pos", "[", "0", "]", "]", ")", "/", "anchors", "[", "pos", "[", "3", "]", "]", "\n", "dh", "=", "(", "target", "[", "1", "]", "-", "oh", "[", "pos", "[", "1", "]", "]", ")", "/", "anchors", "[", "pos", "[", "3", "]", "]", "\n", "dw", "=", "(", "target", "[", "2", "]", "-", "ow", "[", "pos", "[", "2", "]", "]", ")", "/", "anchors", "[", "pos", "[", "3", "]", "]", "\n", "dd", "=", "np", ".", "log", "(", "target", "[", "3", "]", "/", "anchors", "[", "pos", "[", "3", "]", "]", ")", "\n", "label", "[", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", ",", "pos", "[", "2", "]", ",", "pos", "[", "3", "]", ",", ":", "]", "=", "[", "1", ",", "dz", ",", "dh", ",", "dw", ",", "dd", "]", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.augment": [[85, 126], ["numpy.ascontiguousarray", "numpy.ascontiguousarray", "range", "numpy.copy", "numpy.array().astype", "numpy.array", "numpy.random.permutation", "numpy.transpose", "numpy.transpose", "numpy.dot", "numpy.all", "numpy.all", "scipy.ndimage.interpolation.rotate", "scipy.ndimage.interpolation.rotate", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.random.rand", "numpy.array", "numpy.array", "numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.dot", "numpy.random.randint", "numpy.random.randint", "numpy.sin", "numpy.array"], "function", ["None"], ["", "", "def", "augment", "(", "sample", ",", "target", ",", "bboxes", ",", "coord", ",", "ifflip", "=", "True", ",", "ifrotate", "=", "True", ",", "ifswap", "=", "True", ")", ":", "\n", "#                     angle1 = np.random.rand()*180", "\n", "    ", "if", "ifrotate", ":", "\n", "        ", "validrot", "=", "False", "\n", "counter", "=", "0", "\n", "while", "not", "validrot", ":", "\n", "            ", "newtarget", "=", "np", ".", "copy", "(", "target", ")", "\n", "angle1", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "-", "0.5", ")", "*", "20", "\n", "size", "=", "np", ".", "array", "(", "sample", ".", "shape", "[", "2", ":", "4", "]", ")", ".", "astype", "(", "'float'", ")", "\n", "rotmat", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angle1", "/", "180", "*", "np", ".", "pi", ")", ",", "-", "np", ".", "sin", "(", "angle1", "/", "180", "*", "np", ".", "pi", ")", "]", ",", "\n", "[", "np", ".", "sin", "(", "angle1", "/", "180", "*", "np", ".", "pi", ")", ",", "np", ".", "cos", "(", "angle1", "/", "180", "*", "np", ".", "pi", ")", "]", "]", ")", "\n", "newtarget", "[", "1", ":", "3", "]", "=", "np", ".", "dot", "(", "rotmat", ",", "target", "[", "1", ":", "3", "]", "-", "size", "/", "2", ")", "+", "size", "/", "2", "\n", "if", "np", ".", "all", "(", "newtarget", "[", ":", "3", "]", ">", "target", "[", "3", "]", ")", "and", "np", ".", "all", "(", "newtarget", "[", ":", "3", "]", "<", "np", ".", "array", "(", "sample", ".", "shape", "[", "1", ":", "4", "]", ")", "-", "newtarget", "[", "3", "]", ")", ":", "\n", "                ", "validrot", "=", "True", "\n", "target", "=", "newtarget", "\n", "sample", "=", "rotate", "(", "sample", ",", "angle1", ",", "axes", "=", "(", "2", ",", "3", ")", ",", "reshape", "=", "False", ")", "\n", "coord", "=", "rotate", "(", "coord", ",", "angle1", ",", "axes", "=", "(", "2", ",", "3", ")", ",", "reshape", "=", "False", ")", "\n", "for", "box", "in", "bboxes", ":", "\n", "                    ", "box", "[", "1", ":", "3", "]", "=", "np", ".", "dot", "(", "rotmat", ",", "box", "[", "1", ":", "3", "]", "-", "size", "/", "2", ")", "+", "size", "/", "2", "\n", "", "", "else", ":", "\n", "                ", "counter", "+=", "1", "\n", "if", "counter", "==", "3", ":", "\n", "                    ", "break", "\n", "", "", "", "", "if", "ifswap", ":", "\n", "        ", "if", "sample", ".", "shape", "[", "1", "]", "==", "sample", ".", "shape", "[", "2", "]", "and", "sample", ".", "shape", "[", "1", "]", "==", "sample", ".", "shape", "[", "3", "]", ":", "\n", "            ", "axisorder", "=", "np", ".", "random", ".", "permutation", "(", "3", ")", "\n", "sample", "=", "np", ".", "transpose", "(", "sample", ",", "np", ".", "concatenate", "(", "[", "[", "0", "]", ",", "axisorder", "+", "1", "]", ")", ")", "\n", "coord", "=", "np", ".", "transpose", "(", "coord", ",", "np", ".", "concatenate", "(", "[", "[", "0", "]", ",", "axisorder", "+", "1", "]", ")", ")", "\n", "target", "[", ":", "3", "]", "=", "target", "[", ":", "3", "]", "[", "axisorder", "]", "\n", "bboxes", "[", ":", ",", ":", "3", "]", "=", "bboxes", "[", ":", ",", ":", "3", "]", "[", ":", ",", "axisorder", "]", "\n", "\n", "", "", "if", "ifflip", ":", "\n", "#         flipid = np.array([np.random.randint(2),np.random.randint(2),np.random.randint(2)])*2-1", "\n", "        ", "flipid", "=", "np", ".", "array", "(", "[", "1", ",", "np", ".", "random", ".", "randint", "(", "2", ")", ",", "np", ".", "random", ".", "randint", "(", "2", ")", "]", ")", "*", "2", "-", "1", "\n", "sample", "=", "np", ".", "ascontiguousarray", "(", "sample", "[", ":", ",", ":", ":", "flipid", "[", "0", "]", ",", ":", ":", "flipid", "[", "1", "]", ",", ":", ":", "flipid", "[", "2", "]", "]", ")", "\n", "coord", "=", "np", ".", "ascontiguousarray", "(", "coord", "[", ":", ",", ":", ":", "flipid", "[", "0", "]", ",", ":", ":", "flipid", "[", "1", "]", ",", ":", ":", "flipid", "[", "2", "]", "]", ")", "\n", "for", "ax", "in", "range", "(", "3", ")", ":", "\n", "            ", "if", "flipid", "[", "ax", "]", "==", "-", "1", ":", "\n", "                ", "target", "[", "ax", "]", "=", "np", ".", "array", "(", "sample", ".", "shape", "[", "ax", "+", "1", "]", ")", "-", "target", "[", "ax", "]", "\n", "bboxes", "[", ":", ",", "ax", "]", "=", "np", ".", "array", "(", "sample", ".", "shape", "[", "ax", "+", "1", "]", ")", "-", "bboxes", "[", ":", ",", "ax", "]", "\n", "", "", "", "return", "sample", ",", "target", ",", "bboxes", ",", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.select_samples": [[286, 350], ["min", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "np.tile().reshape.reshape", "np.tile().reshape.reshape", "np.tile().reshape.reshape", "numpy.tile().reshape", "numpy.tile().reshape", "numpy.tile().reshape", "numpy.concatenate", "s1.reshape.reshape", "e1.reshape.reshape", "numpy.maximum", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.where", "numpy.where", "numpy.where", "len", "len", "len", "numpy.power", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.tile", "numpy.tile", "numpy.tile", "oz[].reshape", "oh[].reshape", "ow[].reshape", "numpy.minimum", "numpy.maximum", "max", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs"], "function", ["None"], ["", "", "def", "select_samples", "(", "bbox", ",", "anchor", ",", "th", ",", "oz", ",", "oh", ",", "ow", ")", ":", "\n", "    ", "z", ",", "h", ",", "w", ",", "d", "=", "bbox", "\n", "max_overlap", "=", "min", "(", "d", ",", "anchor", ")", "\n", "min_overlap", "=", "np", ".", "power", "(", "max", "(", "d", ",", "anchor", ")", ",", "3", ")", "*", "th", "/", "max_overlap", "/", "max_overlap", "\n", "if", "min_overlap", ">", "max_overlap", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "        ", "s", "=", "z", "-", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "-", "(", "max_overlap", "-", "min_overlap", ")", "\n", "e", "=", "z", "+", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "+", "(", "max_overlap", "-", "min_overlap", ")", "\n", "mz", "=", "np", ".", "logical_and", "(", "oz", ">=", "s", ",", "oz", "<=", "e", ")", "\n", "iz", "=", "np", ".", "where", "(", "mz", ")", "[", "0", "]", "\n", "\n", "s", "=", "h", "-", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "-", "(", "max_overlap", "-", "min_overlap", ")", "\n", "e", "=", "h", "+", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "+", "(", "max_overlap", "-", "min_overlap", ")", "\n", "mh", "=", "np", ".", "logical_and", "(", "oh", ">=", "s", ",", "oh", "<=", "e", ")", "\n", "ih", "=", "np", ".", "where", "(", "mh", ")", "[", "0", "]", "\n", "\n", "s", "=", "w", "-", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "-", "(", "max_overlap", "-", "min_overlap", ")", "\n", "e", "=", "w", "+", "0.5", "*", "np", ".", "abs", "(", "d", "-", "anchor", ")", "+", "(", "max_overlap", "-", "min_overlap", ")", "\n", "mw", "=", "np", ".", "logical_and", "(", "ow", ">=", "s", ",", "ow", "<=", "e", ")", "\n", "iw", "=", "np", ".", "where", "(", "mw", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "iz", ")", "==", "0", "or", "len", "(", "ih", ")", "==", "0", "or", "len", "(", "iw", ")", "==", "0", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "np", ".", "int64", ")", "\n", "\n", "", "lz", ",", "lh", ",", "lw", "=", "len", "(", "iz", ")", ",", "len", "(", "ih", ")", ",", "len", "(", "iw", ")", "\n", "iz", "=", "iz", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "ih", "=", "ih", ".", "reshape", "(", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "iw", "=", "iw", ".", "reshape", "(", "(", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "iz", "=", "np", ".", "tile", "(", "iz", ",", "(", "1", ",", "lh", ",", "lw", ")", ")", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "ih", "=", "np", ".", "tile", "(", "ih", ",", "(", "lz", ",", "1", ",", "lw", ")", ")", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "iw", "=", "np", ".", "tile", "(", "iw", ",", "(", "lz", ",", "lh", ",", "1", ")", ")", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "centers", "=", "np", ".", "concatenate", "(", "[", "\n", "oz", "[", "iz", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "\n", "oh", "[", "ih", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "\n", "ow", "[", "iw", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "r0", "=", "anchor", "/", "2", "\n", "s0", "=", "centers", "-", "r0", "\n", "e0", "=", "centers", "+", "r0", "\n", "\n", "r1", "=", "d", "/", "2", "\n", "s1", "=", "bbox", "[", ":", "3", "]", "-", "r1", "\n", "s1", "=", "s1", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "e1", "=", "bbox", "[", ":", "3", "]", "+", "r1", "\n", "e1", "=", "e1", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "overlap", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "minimum", "(", "e0", ",", "e1", ")", "-", "np", ".", "maximum", "(", "s0", ",", "s1", ")", ")", "\n", "\n", "intersection", "=", "overlap", "[", ":", ",", "0", "]", "*", "overlap", "[", ":", ",", "1", "]", "*", "overlap", "[", ":", ",", "2", "]", "\n", "union", "=", "anchor", "*", "anchor", "*", "anchor", "+", "d", "*", "d", "*", "d", "-", "intersection", "\n", "\n", "iou", "=", "intersection", "/", "union", "\n", "\n", "mask", "=", "iou", ">=", "th", "\n", "# if th > 0.4:", "\n", "#   if np.sum(mask) == 0:", "\n", "#      print(['iou not large', iou.max()])", "\n", "# else:", "\n", "#    print(['iou large', iou[mask]])", "\n", "iz", "=", "iz", "[", "mask", "]", "\n", "ih", "=", "ih", "[", "mask", "]", "\n", "iw", "=", "iw", "[", "mask", "]", "\n", "return", "iz", ",", "ih", ",", "iw", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.collate": [[352, 362], ["torch.is_tensor", "isinstance", "b.unsqueeze", "isinstance", "torch.LongTensor", "isinstance", "zip", "test_loader.collate"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.test_loader.collate"], ["", "", "def", "collate", "(", "batch", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "batch", "[", "0", "]", ")", ":", "\n", "        ", "return", "[", "b", ".", "unsqueeze", "(", "0", ")", "for", "b", "in", "batch", "]", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "batch", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Iterable", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "collate", "(", "samples", ")", "for", "samples", "in", "transposed", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.generateBootstrapSet": [[39, 62], ["numpy.random.randint", "numpy.copy", "numpy.concatenate"], "function", ["None"], ["def", "generateBootstrapSet", "(", "scanToCandidatesDict", ",", "FROCImList", ")", ":", "\n", "    ", "'''\n    Generates bootstrapped version of set\n    '''", "\n", "imageLen", "=", "FROCImList", ".", "shape", "[", "0", "]", "\n", "\n", "# get a random list of images using sampling with replacement", "\n", "rand_index_im", "=", "np", ".", "random", ".", "randint", "(", "imageLen", ",", "size", "=", "imageLen", ")", "\n", "FROCImList_rand", "=", "FROCImList", "[", "rand_index_im", "]", "\n", "\n", "# get a new list of candidates", "\n", "candidatesExists", "=", "False", "\n", "for", "im", "in", "FROCImList_rand", ":", "\n", "        ", "if", "im", "not", "in", "scanToCandidatesDict", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "not", "candidatesExists", ":", "\n", "            ", "candidates", "=", "np", ".", "copy", "(", "scanToCandidatesDict", "[", "im", "]", ")", "\n", "candidatesExists", "=", "True", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "np", ".", "concatenate", "(", "(", "candidates", ",", "scanToCandidatesDict", "[", "im", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.compute_mean_ci": [[63, 80], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "print", "range", "vec.sort", "numpy.average", "int", "int", "math.floor", "math.floor", "len", "len"], "function", ["None"], ["", "def", "compute_mean_ci", "(", "interp_sens", ",", "confidence", "=", "0.95", ")", ":", "\n", "    ", "sens_mean", "=", "np", ".", "zeros", "(", "(", "interp_sens", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "sens_lb", "=", "np", ".", "zeros", "(", "(", "interp_sens", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "sens_up", "=", "np", ".", "zeros", "(", "(", "interp_sens", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "Pz", "=", "(", "1.0", "-", "confidence", ")", "/", "2.0", "\n", "print", "(", "interp_sens", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "interp_sens", ".", "shape", "[", "1", "]", ")", ":", "\n", "# get sorted vector", "\n", "        ", "vec", "=", "interp_sens", "[", ":", ",", "i", "]", "\n", "vec", ".", "sort", "(", ")", "\n", "\n", "sens_mean", "[", "i", "]", "=", "np", ".", "average", "(", "vec", ")", "\n", "sens_lb", "[", "i", "]", "=", "vec", "[", "int", "(", "math", ".", "floor", "(", "Pz", "*", "len", "(", "vec", ")", ")", ")", "]", "\n", "sens_up", "[", "i", "]", "=", "vec", "[", "int", "(", "math", ".", "floor", "(", "(", "1.0", "-", "Pz", ")", "*", "len", "(", "vec", ")", ")", ")", "]", "\n", "\n", "", "return", "sens_mean", ",", "sens_lb", ",", "sens_up", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.computeFROC_bootstrap": [[81, 125], ["numpy.concatenate", "numpy.asarray", "numpy.asarray", "range", "range", "numpy.linspace", "numpy.zeros", "range", "noduleCADEvaluationLUNA16.compute_mean_ci", "len", "noduleCADEvaluationLUNA16.generateBootstrapSet", "noduleCADEvaluationLUNA16.computeFROC", "fps_lists.append", "sens_lists.append", "thresholds_lists.append", "numpy.interp", "numpy.copy", "numpy.concatenate", "len", "len"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.compute_mean_ci", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.generateBootstrapSet", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.computeFROC"], ["", "def", "computeFROC_bootstrap", "(", "FROCGTList", ",", "FROCProbList", ",", "FPDivisorList", ",", "FROCImList", ",", "excludeList", ",", "numberOfBootstrapSamples", "=", "1000", ",", "confidence", "=", "0.95", ")", ":", "\n", "\n", "    ", "set1", "=", "np", ".", "concatenate", "(", "(", "[", "FROCGTList", "]", ",", "[", "FROCProbList", "]", ",", "[", "excludeList", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "fps_lists", "=", "[", "]", "\n", "sens_lists", "=", "[", "]", "\n", "thresholds_lists", "=", "[", "]", "\n", "\n", "FPDivisorList_np", "=", "np", ".", "asarray", "(", "FPDivisorList", ")", "\n", "FROCImList_np", "=", "np", ".", "asarray", "(", "FROCImList", ")", "\n", "\n", "# Make a dict with all candidates of all scans", "\n", "scanToCandidatesDict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "FPDivisorList_np", ")", ")", ":", "\n", "        ", "seriesuid", "=", "FPDivisorList_np", "[", "i", "]", "\n", "candidate", "=", "set1", "[", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "\n", "if", "seriesuid", "not", "in", "scanToCandidatesDict", ":", "\n", "            ", "scanToCandidatesDict", "[", "seriesuid", "]", "=", "np", ".", "copy", "(", "candidate", ")", "\n", "", "else", ":", "\n", "            ", "scanToCandidatesDict", "[", "seriesuid", "]", "=", "np", ".", "concatenate", "(", "(", "scanToCandidatesDict", "[", "seriesuid", "]", ",", "candidate", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "numberOfBootstrapSamples", ")", ":", "\n", "# print 'computing FROC: bootstrap %d/%d' % (i,numberOfBootstrapSamples)", "\n", "# Generate a bootstrapped set", "\n", "        ", "btpsamp", "=", "generateBootstrapSet", "(", "scanToCandidatesDict", ",", "FROCImList_np", ")", "\n", "fps", ",", "sens", ",", "thresholds", "=", "computeFROC", "(", "btpsamp", "[", "0", ",", ":", "]", ",", "btpsamp", "[", "1", ",", ":", "]", ",", "len", "(", "FROCImList_np", ")", ",", "btpsamp", "[", "2", ",", ":", "]", ")", "\n", "\n", "fps_lists", ".", "append", "(", "fps", ")", "\n", "sens_lists", ".", "append", "(", "sens", ")", "\n", "thresholds_lists", ".", "append", "(", "thresholds", ")", "\n", "\n", "# compute statistic", "\n", "", "all_fps", "=", "np", ".", "linspace", "(", "FROC_minX", ",", "FROC_maxX", ",", "num", "=", "10000", ")", "\n", "\n", "# Then interpolate all FROC curves at this points", "\n", "interp_sens", "=", "np", ".", "zeros", "(", "(", "numberOfBootstrapSamples", ",", "len", "(", "all_fps", ")", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "i", "in", "range", "(", "numberOfBootstrapSamples", ")", ":", "\n", "        ", "interp_sens", "[", "i", ",", ":", "]", "=", "np", ".", "interp", "(", "all_fps", ",", "fps_lists", "[", "i", "]", ",", "sens_lists", "[", "i", "]", ")", "\n", "\n", "# compute mean and CI", "\n", "", "sens_mean", ",", "sens_lb", ",", "sens_up", "=", "compute_mean_ci", "(", "interp_sens", ",", "confidence", "=", "confidence", ")", "\n", "\n", "return", "all_fps", ",", "sens_mean", ",", "sens_lb", ",", "sens_up", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.computeFROC": [[126, 146], ["range", "sum", "sum", "len", "sklearn.roc_curve", "len", "sum", "len", "print", "numpy.zeros", "FROCGTList_local.append", "FROCProbList_local.append", "len"], "function", ["None"], ["", "def", "computeFROC", "(", "FROCGTList", ",", "FROCProbList", ",", "totalNumberOfImages", ",", "excludeList", ")", ":", "\n", "# Remove excluded candidates", "\n", "    ", "FROCGTList_local", "=", "[", "]", "\n", "FROCProbList_local", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "excludeList", ")", ")", ":", "\n", "        ", "if", "excludeList", "[", "i", "]", "==", "False", ":", "\n", "            ", "FROCGTList_local", ".", "append", "(", "FROCGTList", "[", "i", "]", ")", "\n", "FROCProbList_local", ".", "append", "(", "FROCProbList", "[", "i", "]", ")", "\n", "\n", "", "", "numberOfDetectedLesions", "=", "sum", "(", "FROCGTList_local", ")", "\n", "totalNumberOfLesions", "=", "sum", "(", "FROCGTList", ")", "\n", "totalNumberOfCandidates", "=", "len", "(", "FROCProbList_local", ")", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "skl_metrics", ".", "roc_curve", "(", "FROCGTList_local", ",", "FROCProbList_local", ")", "\n", "if", "sum", "(", "FROCGTList", ")", "==", "len", "(", "FROCGTList", ")", ":", "# Handle border case when there are no false positives and ROC analysis give nan values.", "\n", "      ", "print", "(", "\"WARNING, this system has no false positives..\"", ")", "\n", "fps", "=", "np", ".", "zeros", "(", "len", "(", "fpr", ")", ")", "\n", "", "else", ":", "\n", "      ", "fps", "=", "fpr", "*", "(", "totalNumberOfCandidates", "-", "numberOfDetectedLesions", ")", "/", "totalNumberOfImages", "\n", "", "sens", "=", "(", "tpr", "*", "numberOfDetectedLesions", ")", "/", "totalNumberOfLesions", "\n", "return", "fps", ",", "sens", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.evaluateCAD": [[147, 452], ["open", "open.write", "open.write", "open.write", "open.write", "open.write", "tools.csvTools.readCSV", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "noduleCADEvaluationLUNA16.computeFROC", "print", "range", "print", "numpy.linspace", "numpy.interp", "zip", "print", "os.path.join", "os.path.join", "len", "candidates.copy", "candidates.copy.items", "open.write", "int", "open.write", "open.write", "len", "noduleCADEvaluationLUNA16.computeFROC_bootstrap", "len", "numpy.mean", "open", "range", "open", "range", "int", "str", "matplotlib.figure", "matplotlib.gca", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.title", "plt.gca.xaxis.set_ticks", "plt.gca.yaxis.set_ticks", "matplotlib.grid", "matplotlib.tight_layout", "matplotlib.savefig", "candidates.keys", "float", "float", "float", "float", "pow", "candidates.items", "FROCGTList.append", "FROCProbList.append", "FPDivisorList.append", "excludeList.append", "FROCtoNoduleMap.append", "round", "print", "sum_list.append", "numpy.array", "os.path.join", "len", "f.write", "os.path.join", "len", "f.write", "abs", "abs", "open", "f.write", "range", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "plt.gca.fill_between", "matplotlib.xscale", "plt.gca.xaxis.set_major_formatter", "numpy.arange", "os.path.join", "noduleCADEvaluationLUNA16.getNodule", "len", "nodules.items", "probs.sort", "nodules.items", "float", "float", "float", "len", "float", "len", "len", "len", "len", "len", "len", "len", "len", "float", "float", "round", "os.path.join", "len", "f.write", "matplotlib.ticker.FixedFormatter", "header.index", "nodules.keys", "probs.append", "math.pow", "len", "range", "FROCGTList.append", "FROCProbList.append", "FPDivisorList.append", "excludeList.append", "FROCtoNoduleMap.append", "FROCGTList.append", "FROCProbList.append", "FPDivisorList.append", "excludeList.append", "FROCtoNoduleMap.append", "open.write", "float", "float", "len", "float", "float", "math.pow", "math.pow", "noduleMatches.append", "len", "float", "str", "float", "candidates.copy.keys", "print", "float", "float", "float", "str", "float", "float", "int", "float", "str", "candidates.copy.keys", "ignoredCADMarksList.append", "str", "str", "str", "float"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.readCSV", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.computeFROC", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.computeFROC_bootstrap", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.getNodule", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write"], ["", "def", "evaluateCAD", "(", "seriesUIDs", ",", "results_filename", ",", "outputDir", ",", "allNodules", ",", "CADSystemName", ",", "maxNumberOfCADMarks", "=", "-", "1", ",", "\n", "performBootstrapping", "=", "False", ",", "numberOfBootstrapSamples", "=", "1000", ",", "confidence", "=", "0.95", ")", ":", "\n", "    ", "'''\n    function to evaluate a CAD algorithm\n    @param seriesUIDs: list of the seriesUIDs of the cases to be processed\n    @param results_filename: file with results\n    @param outputDir: output directory\n    @param allNodules: dictionary with all nodule annotations of all cases, keys of the dictionary are the seriesuids\n    @param CADSystemName: name of the CAD system, to be used in filenames and on FROC curve\n    '''", "\n", "\n", "nodOutputfile", "=", "open", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "'CADAnalysis.txt'", ")", ",", "'w'", ")", "\n", "nodOutputfile", ".", "write", "(", "\"\\n\"", ")", "\n", "nodOutputfile", ".", "write", "(", "(", "60", "*", "\"*\"", ")", "+", "\"\\n\"", ")", "\n", "nodOutputfile", ".", "write", "(", "\"CAD Analysis: %s\\n\"", "%", "CADSystemName", ")", "\n", "nodOutputfile", ".", "write", "(", "(", "60", "*", "\"*\"", ")", "+", "\"\\n\"", ")", "\n", "nodOutputfile", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "results", "=", "csvTools", ".", "readCSV", "(", "results_filename", ")", "\n", "\n", "allCandsCAD", "=", "{", "}", "\n", "\n", "for", "seriesuid", "in", "seriesUIDs", ":", "\n", "\n", "# collect candidates from result file", "\n", "        ", "nodules", "=", "{", "}", "\n", "header", "=", "results", "[", "0", "]", "\n", "\n", "i", "=", "0", "\n", "for", "result", "in", "results", "[", "1", ":", "]", ":", "\n", "            ", "nodule_seriesuid", "=", "result", "[", "header", ".", "index", "(", "seriesuid_label", ")", "]", "\n", "\n", "if", "seriesuid", "==", "nodule_seriesuid", ":", "\n", "                ", "nodule", "=", "getNodule", "(", "result", ",", "header", ")", "\n", "nodule", ".", "candidateID", "=", "i", "\n", "nodules", "[", "nodule", ".", "candidateID", "]", "=", "nodule", "\n", "i", "+=", "1", "\n", "\n", "", "", "if", "(", "maxNumberOfCADMarks", ">", "0", ")", ":", "\n", "# number of CAD marks, only keep must suspicous marks", "\n", "\n", "            ", "if", "len", "(", "nodules", ".", "keys", "(", ")", ")", ">", "maxNumberOfCADMarks", ":", "\n", "# make a list of all probabilities", "\n", "                ", "probs", "=", "[", "]", "\n", "for", "keytemp", ",", "noduletemp", "in", "nodules", ".", "items", "(", ")", ":", "\n", "                    ", "probs", ".", "append", "(", "float", "(", "noduletemp", ".", "CADprobability", ")", ")", "\n", "", "probs", ".", "sort", "(", "reverse", "=", "True", ")", "# sort from large to small", "\n", "probThreshold", "=", "probs", "[", "maxNumberOfCADMarks", "]", "\n", "nodules2", "=", "{", "}", "\n", "nrNodules2", "=", "0", "\n", "for", "keytemp", ",", "noduletemp", "in", "nodules", ".", "items", "(", ")", ":", "\n", "                    ", "if", "nrNodules2", ">=", "maxNumberOfCADMarks", ":", "\n", "                        ", "break", "\n", "", "if", "float", "(", "noduletemp", ".", "CADprobability", ")", ">", "probThreshold", ":", "\n", "                        ", "nodules2", "[", "keytemp", "]", "=", "noduletemp", "\n", "nrNodules2", "+=", "1", "\n", "\n", "", "", "nodules", "=", "nodules2", "\n", "\n", "# print 'adding candidates: ' + seriesuid", "\n", "", "", "allCandsCAD", "[", "seriesuid", "]", "=", "nodules", "\n", "\n", "# open output files", "\n", "", "nodNoCandFile", "=", "open", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "\"nodulesWithoutCandidate_%s.txt\"", "%", "CADSystemName", ")", ",", "'w'", ")", "\n", "\n", "# --- iterate over all cases (seriesUIDs) and determine how", "\n", "# often a nodule annotation is not covered by a candidate", "\n", "\n", "# initialize some variables to be used in the loop", "\n", "candTPs", "=", "0", "\n", "candFPs", "=", "0", "\n", "candFNs", "=", "0", "\n", "candTNs", "=", "0", "\n", "totalNumberOfCands", "=", "0", "\n", "totalNumberOfNodules", "=", "0", "\n", "doubleCandidatesIgnored", "=", "0", "\n", "irrelevantCandidates", "=", "0", "\n", "minProbValue", "=", "-", "1000000000.0", "# minimum value of a float", "\n", "FROCGTList", "=", "[", "]", "\n", "FROCProbList", "=", "[", "]", "\n", "FPDivisorList", "=", "[", "]", "\n", "excludeList", "=", "[", "]", "\n", "FROCtoNoduleMap", "=", "[", "]", "\n", "ignoredCADMarksList", "=", "[", "]", "\n", "\n", "# -- loop over the cases", "\n", "for", "seriesuid", "in", "seriesUIDs", ":", "\n", "# get the candidates for this case", "\n", "        ", "try", ":", "\n", "            ", "candidates", "=", "allCandsCAD", "[", "seriesuid", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "candidates", "=", "{", "}", "\n", "\n", "# add to the total number of candidates", "\n", "", "totalNumberOfCands", "+=", "len", "(", "candidates", ".", "keys", "(", ")", ")", "\n", "\n", "# make a copy in which items will be deleted", "\n", "candidates2", "=", "candidates", ".", "copy", "(", ")", "\n", "\n", "# get the nodule annotations on this case", "\n", "try", ":", "\n", "            ", "noduleAnnots", "=", "allNodules", "[", "seriesuid", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "noduleAnnots", "=", "[", "]", "\n", "\n", "# - loop over the nodule annotations", "\n", "", "for", "noduleAnnot", "in", "noduleAnnots", ":", "\n", "# increment the number of nodules", "\n", "            ", "if", "noduleAnnot", ".", "state", "==", "\"Included\"", ":", "\n", "                ", "totalNumberOfNodules", "+=", "1", "\n", "\n", "", "x", "=", "float", "(", "noduleAnnot", ".", "coordX", ")", "\n", "y", "=", "float", "(", "noduleAnnot", ".", "coordY", ")", "\n", "z", "=", "float", "(", "noduleAnnot", ".", "coordZ", ")", "\n", "\n", "# 2. Check if the nodule annotation is covered by a candidate", "\n", "# A nodule is marked as detected when the center of mass of the candidate is within a distance R of", "\n", "# the center of the nodule. In order to ensure that the CAD mark is displayed within the nodule on the", "\n", "# CT scan, we set R to be the radius of the nodule size.", "\n", "diameter", "=", "float", "(", "noduleAnnot", ".", "diameter_mm", ")", "\n", "if", "diameter", "<", "0.0", ":", "\n", "              ", "diameter", "=", "10.0", "\n", "", "radiusSquared", "=", "pow", "(", "(", "diameter", "/", "2.0", ")", ",", "2.0", ")", "\n", "\n", "found", "=", "False", "\n", "noduleMatches", "=", "[", "]", "\n", "for", "key", ",", "candidate", "in", "candidates", ".", "items", "(", ")", ":", "\n", "                ", "x2", "=", "float", "(", "candidate", ".", "coordX", ")", "\n", "y2", "=", "float", "(", "candidate", ".", "coordY", ")", "\n", "z2", "=", "float", "(", "candidate", ".", "coordZ", ")", "\n", "dist", "=", "math", ".", "pow", "(", "x", "-", "x2", ",", "2.", ")", "+", "math", ".", "pow", "(", "y", "-", "y2", ",", "2.", ")", "+", "math", ".", "pow", "(", "z", "-", "z2", ",", "2.", ")", "\n", "if", "dist", "<", "radiusSquared", ":", "\n", "                    ", "if", "(", "noduleAnnot", ".", "state", "==", "\"Included\"", ")", ":", "\n", "                        ", "found", "=", "True", "\n", "noduleMatches", ".", "append", "(", "candidate", ")", "\n", "if", "key", "not", "in", "candidates2", ".", "keys", "(", ")", ":", "\n", "                            ", "print", "(", "\"This is strange: CAD mark %s detected two nodules! Check for overlapping nodule annotations, SeriesUID: %s, nodule Annot ID: %s\"", "%", "(", "str", "(", "candidate", ".", "id", ")", ",", "seriesuid", ",", "str", "(", "noduleAnnot", ".", "id", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "del", "candidates2", "[", "key", "]", "\n", "", "", "elif", "(", "noduleAnnot", ".", "state", "==", "\"Excluded\"", ")", ":", "# an excluded nodule", "\n", "                        ", "if", "bOtherNodulesAsIrrelevant", ":", "#    delete marks on excluded nodules so they don't count as false positives", "\n", "                            ", "if", "key", "in", "candidates2", ".", "keys", "(", ")", ":", "\n", "                                ", "irrelevantCandidates", "+=", "1", "\n", "ignoredCADMarksList", ".", "append", "(", "\"%s,%s,%s,%s,%s,%s,%.9f\"", "%", "(", "seriesuid", ",", "-", "1", ",", "candidate", ".", "coordX", ",", "candidate", ".", "coordY", ",", "candidate", ".", "coordZ", ",", "str", "(", "candidate", ".", "id", ")", ",", "float", "(", "candidate", ".", "CADprobability", ")", ")", ")", "\n", "del", "candidates2", "[", "key", "]", "\n", "", "", "", "", "", "if", "len", "(", "noduleMatches", ")", ">", "1", ":", "# double detection", "\n", "                ", "doubleCandidatesIgnored", "+=", "(", "len", "(", "noduleMatches", ")", "-", "1", ")", "\n", "", "if", "noduleAnnot", ".", "state", "==", "\"Included\"", ":", "\n", "# only include it for FROC analysis if it is included", "\n", "# otherwise, the candidate will not be counted as FP, but ignored in the", "\n", "# analysis since it has been deleted from the nodules2 vector of candidates", "\n", "                ", "if", "found", "==", "True", ":", "\n", "# append the sample with the highest probability for the FROC analysis", "\n", "                    ", "maxProb", "=", "None", "\n", "for", "idx", "in", "range", "(", "len", "(", "noduleMatches", ")", ")", ":", "\n", "                        ", "candidate", "=", "noduleMatches", "[", "idx", "]", "\n", "if", "(", "maxProb", "is", "None", ")", "or", "(", "float", "(", "candidate", ".", "CADprobability", ")", ">", "maxProb", ")", ":", "\n", "                            ", "maxProb", "=", "float", "(", "candidate", ".", "CADprobability", ")", "\n", "\n", "", "", "FROCGTList", ".", "append", "(", "1.0", ")", "\n", "FROCProbList", ".", "append", "(", "float", "(", "maxProb", ")", ")", "\n", "FPDivisorList", ".", "append", "(", "seriesuid", ")", "\n", "excludeList", ".", "append", "(", "False", ")", "\n", "FROCtoNoduleMap", ".", "append", "(", "\"%s,%s,%s,%s,%s,%.9f,%s,%.9f\"", "%", "(", "seriesuid", ",", "noduleAnnot", ".", "id", ",", "noduleAnnot", ".", "coordX", ",", "noduleAnnot", ".", "coordY", ",", "noduleAnnot", ".", "coordZ", ",", "float", "(", "noduleAnnot", ".", "diameter_mm", ")", ",", "str", "(", "candidate", ".", "id", ")", ",", "float", "(", "candidate", ".", "CADprobability", ")", ")", ")", "\n", "candTPs", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "candFNs", "+=", "1", "\n", "# append a positive sample with the lowest probability, such that this is added in the FROC analysis", "\n", "FROCGTList", ".", "append", "(", "1.0", ")", "\n", "FROCProbList", ".", "append", "(", "minProbValue", ")", "\n", "FPDivisorList", ".", "append", "(", "seriesuid", ")", "\n", "excludeList", ".", "append", "(", "True", ")", "\n", "FROCtoNoduleMap", ".", "append", "(", "\"%s,%s,%s,%s,%s,%.9f,%s,%s\"", "%", "(", "seriesuid", ",", "noduleAnnot", ".", "id", ",", "noduleAnnot", ".", "coordX", ",", "noduleAnnot", ".", "coordY", ",", "noduleAnnot", ".", "coordZ", ",", "float", "(", "noduleAnnot", ".", "diameter_mm", ")", ",", "int", "(", "-", "1", ")", ",", "\"NA\"", ")", ")", "\n", "nodNoCandFile", ".", "write", "(", "\"%s,%s,%s,%s,%s,%.9f,%s\\n\"", "%", "(", "seriesuid", ",", "noduleAnnot", ".", "id", ",", "noduleAnnot", ".", "coordX", ",", "noduleAnnot", ".", "coordY", ",", "noduleAnnot", ".", "coordZ", ",", "float", "(", "noduleAnnot", ".", "diameter_mm", ")", ",", "str", "(", "-", "1", ")", ")", ")", "\n", "\n", "# add all false positives to the vectors", "\n", "", "", "", "for", "key", ",", "candidate3", "in", "candidates2", ".", "items", "(", ")", ":", "\n", "            ", "candFPs", "+=", "1", "\n", "FROCGTList", ".", "append", "(", "0.0", ")", "\n", "FROCProbList", ".", "append", "(", "float", "(", "candidate3", ".", "CADprobability", ")", ")", "\n", "FPDivisorList", ".", "append", "(", "seriesuid", ")", "\n", "excludeList", ".", "append", "(", "False", ")", "\n", "FROCtoNoduleMap", ".", "append", "(", "\"%s,%s,%s,%s,%s,%s,%.9f\"", "%", "(", "seriesuid", ",", "-", "1", ",", "candidate3", ".", "coordX", ",", "candidate3", ".", "coordY", ",", "candidate3", ".", "coordZ", ",", "str", "(", "candidate3", ".", "id", ")", ",", "float", "(", "candidate3", ".", "CADprobability", ")", ")", ")", "\n", "\n", "", "", "if", "not", "(", "len", "(", "FROCGTList", ")", "==", "len", "(", "FROCProbList", ")", "and", "len", "(", "FROCGTList", ")", "==", "len", "(", "FPDivisorList", ")", "and", "len", "(", "FROCGTList", ")", "==", "len", "(", "FROCtoNoduleMap", ")", "and", "len", "(", "FROCGTList", ")", "==", "len", "(", "excludeList", ")", ")", ":", "\n", "        ", "nodOutputfile", ".", "write", "(", "\"Length of FROC vectors not the same, this should never happen! Aborting..\\n\"", ")", "\n", "\n", "", "nodOutputfile", ".", "write", "(", "\"Candidate detection results:\\n\"", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    True positives: %d\\n\"", "%", "candTPs", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    False positives: %d\\n\"", "%", "candFPs", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    False negatives: %d\\n\"", "%", "candFNs", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    True negatives: %d\\n\"", "%", "candTNs", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    Total number of candidates: %d\\n\"", "%", "totalNumberOfCands", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    Total number of nodules: %d\\n\"", "%", "totalNumberOfNodules", ")", "\n", "\n", "nodOutputfile", ".", "write", "(", "\"    Ignored candidates on excluded nodules: %d\\n\"", "%", "irrelevantCandidates", ")", "\n", "nodOutputfile", ".", "write", "(", "\"    Ignored candidates which were double detections on a nodule: %d\\n\"", "%", "doubleCandidatesIgnored", ")", "\n", "if", "int", "(", "totalNumberOfNodules", ")", "==", "0", ":", "\n", "        ", "nodOutputfile", ".", "write", "(", "\"    Sensitivity: 0.0\\n\"", ")", "\n", "", "else", ":", "\n", "        ", "nodOutputfile", ".", "write", "(", "\"    Sensitivity: %.9f\\n\"", "%", "(", "float", "(", "candTPs", ")", "/", "float", "(", "totalNumberOfNodules", ")", ")", ")", "\n", "", "nodOutputfile", ".", "write", "(", "\"    Average number of candidates per scan: %.9f\\n\"", "%", "(", "float", "(", "totalNumberOfCands", ")", "/", "float", "(", "len", "(", "seriesUIDs", ")", ")", ")", ")", "\n", "\n", "# compute FROC", "\n", "fps", ",", "sens", ",", "thresholds", "=", "computeFROC", "(", "FROCGTList", ",", "FROCProbList", ",", "len", "(", "seriesUIDs", ")", ",", "excludeList", ")", "\n", "\n", "\n", "if", "performBootstrapping", ":", "\n", "        ", "fps_bs_itp", ",", "sens_bs_mean", ",", "sens_bs_lb", ",", "sens_bs_up", "=", "computeFROC_bootstrap", "(", "FROCGTList", ",", "FROCProbList", ",", "FPDivisorList", ",", "seriesUIDs", ",", "excludeList", ",", "\n", "numberOfBootstrapSamples", "=", "numberOfBootstrapSamples", ",", "confidence", "=", "confidence", ")", "\n", "\n", "\n", "", "print", "(", "\"##########################\"", ")", "\n", "froc_list", "=", "[", "0.125", ",", "0.25", ",", "0.5", ",", "1", ",", "2", ",", "4", ",", "8", "]", "\n", "sum_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "fps_bs_itp", ")", ")", ":", "\n", "        ", "if", "round", "(", "fps_bs_itp", "[", "i", "]", ",", "3", ")", "in", "froc_list", ":", "\n", "            ", "print", "(", "sens_bs_mean", "[", "i", "]", ",", "round", "(", "fps_bs_itp", "[", "i", "]", ",", "3", ")", ")", "\n", "sum_list", ".", "append", "(", "sens_bs_mean", "[", "i", "]", ")", "\n", "\n", "", "", "print", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "sum_list", ")", ")", ")", "\n", "\n", "\n", "# Write FROC curve", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "\"froc_%s.txt\"", "%", "CADSystemName", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sens", ")", ")", ":", "\n", "            ", "f", ".", "write", "(", "\"%.9f,%.9f,%.9f\\n\"", "%", "(", "fps", "[", "i", "]", ",", "sens", "[", "i", "]", ",", "thresholds", "[", "i", "]", ")", ")", "\n", "\n", "# Write FROC vectors to disk as well", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "\"froc_gt_prob_vectors_%s.csv\"", "%", "CADSystemName", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "FROCGTList", ")", ")", ":", "\n", "            ", "f", ".", "write", "(", "\"%d,%.9f\\n\"", "%", "(", "FROCGTList", "[", "i", "]", ",", "FROCProbList", "[", "i", "]", ")", ")", "\n", "\n", "", "", "fps_itp", "=", "np", ".", "linspace", "(", "FROC_minX", ",", "FROC_maxX", ",", "num", "=", "10001", ")", "\n", "\n", "sens_itp", "=", "np", ".", "interp", "(", "fps_itp", ",", "fps", ",", "sens", ")", "\n", "\n", "frvvlu", "=", "0", "\n", "nxth", "=", "0.125", "\n", "for", "fp", ",", "ss", "in", "zip", "(", "fps_itp", ",", "sens_itp", ")", ":", "\n", "        ", "if", "abs", "(", "fp", "-", "nxth", ")", "<", "3e-4", ":", "\n", "            ", "frvvlu", "+=", "ss", "\n", "nxth", "*=", "2", "\n", "", "if", "abs", "(", "nxth", "-", "16", ")", "<", "1e-5", ":", "break", "\n", "", "print", "(", "frvvlu", "/", "7", ",", "nxth", ")", "\n", "#    print(sens_itp[fps_itp==0.125], sens_itp[fps_itp==0.25], sens_itp[fps_itp==0.5], sens_itp[fps_itp==1], sens_itp[fps_itp==2]\\", "\n", "#        ,sens_itp[fps_itp==4],sens_itp[fps_itp==8])", "\n", "\n", "if", "performBootstrapping", ":", "\n", "# Write mean, lower, and upper bound curves to disk", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "\"froc_%s_bootstrapping.csv\"", "%", "CADSystemName", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\"FPrate,Sensivity[Mean],Sensivity[Lower bound],Sensivity[Upper bound]\\n\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "fps_bs_itp", ")", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"%.9f,%.9f,%.9f,%.9f\\n\"", "%", "(", "fps_bs_itp", "[", "i", "]", ",", "sens_bs_mean", "[", "i", "]", ",", "sens_bs_lb", "[", "i", "]", ",", "sens_bs_up", "[", "i", "]", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "fps_bs_itp", "=", "None", "\n", "sens_bs_mean", "=", "None", "\n", "sens_bs_lb", "=", "None", "\n", "sens_bs_up", "=", "None", "\n", "\n", "# create FROC graphs", "\n", "", "if", "int", "(", "totalNumberOfNodules", ")", ">", "0", ":", "\n", "\n", "        ", "graphTitle", "=", "str", "(", "\"\"", ")", "\n", "fig1", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "clr", "=", "'b'", "\n", "plt", ".", "plot", "(", "fps_itp", ",", "sens_itp", ",", "color", "=", "clr", ",", "label", "=", "\"%s\"", "%", "CADSystemName", ",", "lw", "=", "2", ")", "\n", "\n", "if", "performBootstrapping", ":", "\n", "            ", "plt", ".", "plot", "(", "fps_bs_itp", ",", "sens_bs_mean", ",", "color", "=", "clr", ",", "ls", "=", "'--'", ")", "\n", "plt", ".", "plot", "(", "fps_bs_itp", ",", "sens_bs_lb", ",", "color", "=", "clr", ",", "ls", "=", "':'", ")", "# , label = \"lb\")", "\n", "plt", ".", "plot", "(", "fps_bs_itp", ",", "sens_bs_up", ",", "color", "=", "clr", ",", "ls", "=", "':'", ")", "# , label = \"ub\")", "\n", "ax", ".", "fill_between", "(", "fps_bs_itp", ",", "sens_bs_lb", ",", "sens_bs_up", ",", "facecolor", "=", "clr", ",", "alpha", "=", "0.05", ")", "\n", "\n", "", "xmin", "=", "FROC_minX", "\n", "xmax", "=", "FROC_maxX", "\n", "plt", ".", "xlim", "(", "xmin", ",", "xmax", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "1", ")", "\n", "plt", ".", "xlabel", "(", "'Average number of false positives per scan'", ")", "\n", "plt", ".", "ylabel", "(", "'Sensitivity'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "title", "(", "'FROC performance - %s'", "%", "(", "CADSystemName", ")", ")", "\n", "\n", "if", "bLogPlot", ":", "\n", "            ", "plt", ".", "xscale", "(", "'log'", ",", "basex", "=", "2", ")", "\n", "ax", ".", "xaxis", ".", "set_major_formatter", "(", "FixedFormatter", "(", "[", "0.125", ",", "0.25", ",", "0.5", ",", "1", ",", "2", ",", "4", ",", "8", "]", ")", ")", "\n", "\n", "# set your ticks manually", "\n", "", "ax", ".", "xaxis", ".", "set_ticks", "(", "[", "0.125", ",", "0.25", ",", "0.5", ",", "1", ",", "2", ",", "4", ",", "8", "]", ")", "\n", "#        ax.yaxis.set_ticks(np.arange(0.5, 1, 0.1))", "\n", "ax", ".", "yaxis", ".", "set_ticks", "(", "np", ".", "arange", "(", "0", ",", "1.1", ",", "0.1", ")", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'both'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "outputDir", ",", "\"froc_%s.png\"", "%", "CADSystemName", ")", ",", "bbox_inches", "=", "0", ",", "dpi", "=", "300", ")", "\n", "\n", "", "return", "(", "fps", ",", "sens", ",", "thresholds", ",", "fps_bs_itp", ",", "sens_bs_mean", ",", "sens_bs_lb", ",", "sens_bs_up", ")", "\n", "\n", "", "def", "getNodule", "(", "annotation", ",", "header", ",", "state", "=", "\"\"", ")", ":", "\n", "    ", "nodule", "=", "NoduleFinding", "(", ")", "\n", "nodule", ".", "coordX", "=", "annotation", "[", "header", ".", "index", "(", "coordX_label", ")", "]", "\n", "nodule", ".", "coordY", "=", "annotation", "[", "header", ".", "index", "(", "coordY_label", ")", "]", "\n", "nodule", ".", "coordZ", "=", "annotation", "[", "header", ".", "index", "(", "coordZ_label", ")", "]", "\n", "\n", "if", "diameter_mm_label", "in", "header", ":", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.getNodule": [[453, 469], ["NoduleFinding.NoduleFinding", "header.index", "header.index", "header.index", "header.index", "header.index"], "function", ["None"], ["        ", "nodule", ".", "diameter_mm", "=", "annotation", "[", "header", ".", "index", "(", "diameter_mm_label", ")", "]", "\n", "\n", "", "if", "CADProbability_label", "in", "header", ":", "\n", "        ", "nodule", ".", "CADprobability", "=", "annotation", "[", "header", ".", "index", "(", "CADProbability_label", ")", "]", "\n", "\n", "", "if", "not", "state", "==", "\"\"", ":", "\n", "        ", "nodule", ".", "state", "=", "state", "\n", "\n", "", "return", "nodule", "\n", "\n", "", "def", "collectNoduleAnnotations", "(", "annotations", ",", "annotations_excluded", ",", "seriesUIDs", ")", ":", "\n", "    ", "allNodules", "=", "{", "}", "\n", "noduleCount", "=", "0", "\n", "noduleCountTotal", "=", "0", "\n", "\n", "for", "seriesuid", "in", "seriesUIDs", ":", "\n", "# print 'adding nodule annotations: ' + seriesuid", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.collectNoduleAnnotations": [[470, 507], ["print", "print", "len", "str", "str", "noduleCADEvaluationLUNA16.getNodule", "nodules.append", "noduleCADEvaluationLUNA16.getNodule", "nodules.append", "header.index", "header.index"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.getNodule", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.getNodule"], ["\n", "        ", "nodules", "=", "[", "]", "\n", "numberOfIncludedNodules", "=", "0", "\n", "\n", "# add included findings", "\n", "header", "=", "annotations", "[", "0", "]", "\n", "for", "annotation", "in", "annotations", "[", "1", ":", "]", ":", "\n", "            ", "nodule_seriesuid", "=", "annotation", "[", "header", ".", "index", "(", "seriesuid_label", ")", "]", "\n", "\n", "if", "seriesuid", "==", "nodule_seriesuid", ":", "\n", "                ", "nodule", "=", "getNodule", "(", "annotation", ",", "header", ",", "state", "=", "\"Included\"", ")", "\n", "nodules", ".", "append", "(", "nodule", ")", "\n", "numberOfIncludedNodules", "+=", "1", "\n", "\n", "# add excluded findings", "\n", "", "", "header", "=", "annotations_excluded", "[", "0", "]", "\n", "for", "annotation", "in", "annotations_excluded", "[", "1", ":", "]", ":", "\n", "            ", "nodule_seriesuid", "=", "annotation", "[", "header", ".", "index", "(", "seriesuid_label", ")", "]", "\n", "\n", "if", "seriesuid", "==", "nodule_seriesuid", ":", "\n", "                ", "nodule", "=", "getNodule", "(", "annotation", ",", "header", ",", "state", "=", "\"Excluded\"", ")", "\n", "nodules", ".", "append", "(", "nodule", ")", "\n", "\n", "", "", "allNodules", "[", "seriesuid", "]", "=", "nodules", "\n", "noduleCount", "+=", "numberOfIncludedNodules", "\n", "noduleCountTotal", "+=", "len", "(", "nodules", ")", "\n", "\n", "", "print", "(", "'Total number of included nodule annotations: '", "+", "str", "(", "noduleCount", ")", ")", "\n", "print", "(", "'Total number of nodule annotations: '", "+", "str", "(", "noduleCountTotal", ")", ")", "\n", "return", "allNodules", "\n", "\n", "\n", "", "def", "collect", "(", "annotations_filename", ",", "annotations_excluded_filename", ",", "seriesuids_filename", ")", ":", "\n", "    ", "annotations", "=", "csvTools", ".", "readCSV", "(", "annotations_filename", ")", "\n", "annotations_excluded", "=", "csvTools", ".", "readCSV", "(", "annotations_excluded_filename", ")", "\n", "seriesUIDs_csv", "=", "csvTools", ".", "readCSV", "(", "seriesuids_filename", ")", "\n", "\n", "seriesUIDs", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.collect": [[509, 521], ["tools.csvTools.readCSV", "tools.csvTools.readCSV", "tools.csvTools.readCSV", "noduleCADEvaluationLUNA16.collectNoduleAnnotations", "seriesUIDs.append"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.readCSV", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.readCSV", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.tools.csvTools.readCSV", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.collectNoduleAnnotations"], ["        ", "seriesUIDs", ".", "append", "(", "seriesUID", "[", "0", "]", ")", "\n", "\n", "", "allNodules", "=", "collectNoduleAnnotations", "(", "annotations", ",", "annotations_excluded", ",", "seriesUIDs", ")", "\n", "\n", "return", "(", "allNodules", ",", "seriesUIDs", ")", "\n", "\n", "\n", "", "def", "noduleCADEvaluation", "(", "annotations_filename", ",", "annotations_excluded_filename", ",", "seriesuids_filename", ",", "results_filename", ",", "outputDir", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.noduleCADEvaluation": [[523, 541], ["print", "noduleCADEvaluationLUNA16.collect", "noduleCADEvaluationLUNA16.evaluateCAD", "os.path.splitext", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.collect", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.noduleCADEvaluationLUNA16.evaluateCAD"], ["\n", "\n", "print", "(", "annotations_filename", ")", "\n", "\n", "(", "allNodules", ",", "seriesUIDs", ")", "=", "collect", "(", "annotations_filename", ",", "annotations_excluded_filename", ",", "seriesuids_filename", ")", "\n", "\n", "return", "evaluateCAD", "(", "seriesUIDs", ",", "results_filename", ",", "outputDir", ",", "allNodules", ",", "\n", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "results_filename", ")", ")", "[", "0", "]", ",", "\n", "maxNumberOfCADMarks", "=", "100", ",", "performBootstrapping", "=", "bPerformBootstrapping", ",", "\n", "numberOfBootstrapSamples", "=", "bNumberOfBootstrapSamples", ",", "confidence", "=", "bConfidence", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "################################Need to change this part#######################################################", "\n", "    ", "annotations_filename", "=", "'./labels/annos.csv'", "\n", "annotations_excluded_filename", "=", "'./labels/excluded.csv'", "\n", "seriesuids_filename", "=", "'./labels/lunaTestID.csv'", "\n", "results_filename", "=", "'./DL/predanno-1.5.csv'", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.__init__": [[44, 47], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logfile", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "self", ".", "log", "=", "open", "(", "logfile", ",", "\"a\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write": [[48, 51], ["utils.Logger.terminal.write", "utils.Logger.log.write"], "methods", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.Logger.flush": [[52, 57], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "#this flush method is needed for python 3 compatibility.", "\n", "#this handles the flush command by doing nothing.", "\n", "#you might want to specify some extra behavior here.", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.getFreeId": [[10, 30], ["pynvml.nvmlInit", "pynvml.nvmlDeviceGetCount", "range", "pynvml.nvmlDeviceGetHandleByIndex", "pynvml.nvmlDeviceGetUtilizationRates", "float", "utils.getFreeId.getFreeRatio"], "function", ["None"], ["def", "getFreeId", "(", ")", ":", "\n", "    ", "import", "pynvml", "\n", "\n", "pynvml", ".", "nvmlInit", "(", ")", "\n", "def", "getFreeRatio", "(", "id", ")", ":", "\n", "        ", "handle", "=", "pynvml", ".", "nvmlDeviceGetHandleByIndex", "(", "id", ")", "\n", "use", "=", "pynvml", ".", "nvmlDeviceGetUtilizationRates", "(", "handle", ")", "\n", "ratio", "=", "0.5", "*", "(", "float", "(", "use", ".", "gpu", "+", "float", "(", "use", ".", "memory", ")", ")", ")", "\n", "return", "ratio", "\n", "\n", "", "deviceCount", "=", "pynvml", ".", "nvmlDeviceGetCount", "(", ")", "\n", "available", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "deviceCount", ")", ":", "\n", "        ", "if", "getFreeRatio", "(", "i", ")", "<", "70", ":", "\n", "            ", "available", ".", "append", "(", "i", ")", "\n", "", "", "gpus", "=", "''", "\n", "for", "g", "in", "available", ":", "\n", "        ", "gpus", "=", "gpus", "+", "str", "(", "g", ")", "+", "','", "\n", "", "gpus", "=", "gpus", "[", ":", "-", "1", "]", "\n", "return", "gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.setgpu": [[31, 42], ["utils.getFreeId", "print", "len", "any", "gpus.split", "ValueError", "gpus.split"], "function", ["home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.getFreeId", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split", "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.split_combine.SplitComb.split"], ["", "def", "setgpu", "(", "gpuinput", ")", ":", "\n", "    ", "freeids", "=", "getFreeId", "(", ")", "\n", "if", "gpuinput", "==", "'all'", ":", "\n", "        ", "gpus", "=", "freeids", "\n", "", "else", ":", "\n", "        ", "gpus", "=", "gpuinput", "\n", "if", "any", "(", "[", "g", "not", "in", "freeids", "for", "g", "in", "gpus", ".", "split", "(", "','", ")", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'gpu'", "+", "g", "+", "'is being used'", ")", "\n", "", "", "print", "(", "'using gpu '", "+", "gpus", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "gpus", "\n", "return", "len", "(", "gpus", ".", "split", "(", "','", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.split4": [[59, 77], ["torch.Tensor.numpy", "numpy.pad", "torch.from_numpy", "splits.append", "splits.append", "splits.append", "splits.append", "torch.cat", "numpy.ceil().astype", "numpy.ceil().astype", "int", "numpy.ceil", "numpy.ceil", "numpy.ceil", "float", "float", "float"], "function", ["None"], ["", "", "def", "split4", "(", "data", ",", "max_stride", ",", "margin", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "data", "=", "torch", ".", "Tensor", ".", "numpy", "(", "data", ")", "\n", "_", ",", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "shape", "\n", "\n", "w_width", "=", "np", ".", "ceil", "(", "float", "(", "w", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "h_width", "=", "np", ".", "ceil", "(", "float", "(", "h", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "pad", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "z", ")", "/", "max_stride", ")", "*", "max_stride", ")", "-", "z", "\n", "leftpad", "=", "pad", "/", "2", "\n", "pad", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "leftpad", ",", "pad", "-", "leftpad", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "data", "=", "np", ".", "pad", "(", "data", ",", "pad", ",", "'constant'", ",", "constant_values", "=", "-", "1", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "data", ")", "\n", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", ":", ",", ":", "h_width", ",", ":", "w_width", "]", ")", "\n", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", ":", ",", ":", "h_width", ",", "-", "w_width", ":", "]", ")", "\n", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", ":", ",", "-", "h_width", ":", ",", ":", "w_width", "]", ")", "\n", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", ":", ",", "-", "h_width", ":", ",", "-", "w_width", ":", "]", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "splits", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.combine4": [[78, 108], ["range", "numpy.zeros", "len", "splits.append"], "function", ["None"], ["", "def", "combine4", "(", "output", ",", "h", ",", "w", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "        ", "splits", ".", "append", "(", "output", "[", "i", "]", ")", "\n", "\n", "", "output", "=", "np", ".", "zeros", "(", "(", "\n", "splits", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "\n", "h", ",", "\n", "w", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "h0", "=", "output", ".", "shape", "[", "1", "]", "/", "2", "\n", "h1", "=", "output", ".", "shape", "[", "1", "]", "-", "h0", "\n", "w0", "=", "output", ".", "shape", "[", "2", "]", "/", "2", "\n", "w1", "=", "output", ".", "shape", "[", "2", "]", "-", "w0", "\n", "\n", "splits", "[", "0", "]", "=", "splits", "[", "0", "]", "[", ":", ",", ":", "h0", ",", ":", "w0", ",", ":", ",", ":", "]", "\n", "output", "[", ":", ",", ":", "h0", ",", ":", "w0", ",", ":", ",", ":", "]", "=", "splits", "[", "0", "]", "\n", "\n", "splits", "[", "1", "]", "=", "splits", "[", "1", "]", "[", ":", ",", ":", "h0", ",", "-", "w1", ":", ",", ":", ",", ":", "]", "\n", "output", "[", ":", ",", ":", "h0", ",", "-", "w1", ":", ",", ":", ",", ":", "]", "=", "splits", "[", "1", "]", "\n", "\n", "splits", "[", "2", "]", "=", "splits", "[", "2", "]", "[", ":", ",", "-", "h1", ":", ",", ":", "w0", ",", ":", ",", ":", "]", "\n", "output", "[", ":", ",", "-", "h1", ":", ",", ":", "w0", ",", ":", ",", ":", "]", "=", "splits", "[", "2", "]", "\n", "\n", "splits", "[", "3", "]", "=", "splits", "[", "3", "]", "[", ":", ",", "-", "h1", ":", ",", "-", "w1", ":", ",", ":", ",", ":", "]", "\n", "output", "[", ":", ",", "-", "h1", ":", ",", "-", "w1", ":", ",", ":", ",", ":", "]", "=", "splits", "[", "3", "]", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.split8": [[109, 132], ["isinstance", "isinstance", "data.size", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.concatenate", "torch.cat", "numpy.ceil", "numpy.ceil", "numpy.ceil", "isinstance", "splits.append", "splits.append", "float", "float", "float"], "function", ["None"], ["", "def", "split8", "(", "data", ",", "max_stride", ",", "margin", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "if", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "shape", "\n", "", "else", ":", "\n", "        ", "_", ",", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "size", "(", ")", "\n", "\n", "", "z_width", "=", "np", ".", "ceil", "(", "float", "(", "z", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "w_width", "=", "np", ".", "ceil", "(", "float", "(", "w", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "h_width", "=", "np", ".", "ceil", "(", "float", "(", "h", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "-", "z_width", ",", "None", "]", "]", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "-", "h_width", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "-", "w_width", ",", "None", "]", "]", ":", "\n", "                ", "if", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "splits", ".", "append", "(", "data", "[", "np", ".", "newaxis", ",", ":", ",", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", "]", ")", "\n", "\n", "\n", "", "", "", "", "if", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "splits", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "splits", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.combine8": [[135, 158], ["range", "numpy.zeros", "len", "splits.append"], "function", ["None"], ["", "", "def", "combine8", "(", "output", ",", "z", ",", "h", ",", "w", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "        ", "splits", ".", "append", "(", "output", "[", "i", "]", ")", "\n", "\n", "", "output", "=", "np", ".", "zeros", "(", "(", "\n", "z", ",", "\n", "h", ",", "\n", "w", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "\n", "z_width", "=", "z", "/", "2", "\n", "h_width", "=", "h", "/", "2", "\n", "w_width", "=", "w", "/", "2", "\n", "i", "=", "0", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_width", "-", "z", ",", "None", "]", "]", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_width", "-", "h", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_width", "-", "w", ",", "None", "]", "]", ":", "\n", "                ", "output", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "=", "splits", "[", "i", "]", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "i", "=", "i", "+", "1", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.split16": [[160, 175], ["data.size", "torch.cat", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil", "numpy.ceil", "numpy.ceil", "splits.append", "float", "float", "float"], "function", ["None"], ["", "def", "split16", "(", "data", ",", "max_stride", ",", "margin", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "_", ",", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "size", "(", ")", "\n", "\n", "z_width", "=", "np", ".", "ceil", "(", "float", "(", "z", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "z_pos", "=", "[", "z", "*", "3", "/", "8", "-", "z_width", "/", "2", ",", "\n", "z", "*", "5", "/", "8", "-", "z_width", "/", "2", "]", "\n", "h_width", "=", "np", ".", "ceil", "(", "float", "(", "h", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "w_width", "=", "np", ".", "ceil", "(", "float", "(", "w", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_pos", "[", "0", "]", ",", "z_pos", "[", "0", "]", "+", "z_width", "]", ",", "[", "z_pos", "[", "1", "]", ",", "z_pos", "[", "1", "]", "+", "z_width", "]", ",", "[", "-", "z_width", ",", "None", "]", "]", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "-", "h_width", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "-", "w_width", ",", "None", "]", "]", ":", "\n", "                ", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", "]", ")", "\n", "\n", "", "", "", "return", "torch", ".", "cat", "(", "splits", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.combine16": [[176, 204], ["range", "numpy.zeros", "zip", "len", "splits.append"], "function", ["None"], ["", "def", "combine16", "(", "output", ",", "z", ",", "h", ",", "w", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "        ", "splits", ".", "append", "(", "output", "[", "i", "]", ")", "\n", "\n", "", "output", "=", "np", ".", "zeros", "(", "(", "\n", "z", ",", "\n", "h", ",", "\n", "w", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "\n", "z_width", "=", "z", "/", "4", "\n", "h_width", "=", "h", "/", "2", "\n", "w_width", "=", "w", "/", "2", "\n", "splitzstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "0", "]", "/", "2", "-", "z_width", "/", "2", "\n", "z_pos", "=", "[", "z", "*", "3", "/", "8", "-", "z_width", "/", "2", ",", "\n", "z", "*", "5", "/", "8", "-", "z_width", "/", "2", "]", "\n", "i", "=", "0", "\n", "for", "zz", ",", "zz2", "in", "zip", "(", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_width", ",", "z_width", "*", "2", "]", ",", "[", "z_width", "*", "2", ",", "z_width", "*", "3", "]", ",", "[", "z_width", "*", "3", "-", "z", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "z_width", "]", ",", "[", "splitzstart", ",", "z_width", "+", "splitzstart", "]", ",", "[", "splitzstart", ",", "z_width", "+", "splitzstart", "]", ",", "[", "z_width", "*", "3", "-", "z", ",", "None", "]", "]", ")", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_width", "-", "h", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_width", "-", "w", ",", "None", "]", "]", ":", "\n", "                ", "output", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "=", "splits", "[", "i", "]", "[", "zz2", "[", "0", "]", ":", "zz2", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "i", "=", "i", "+", "1", "\n", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.split32": [[205, 224], ["data.size", "torch.cat", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil", "numpy.ceil", "numpy.ceil", "splits.append", "float", "float", "float"], "function", ["None"], ["", "def", "split32", "(", "data", ",", "max_stride", ",", "margin", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "_", ",", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "size", "(", ")", "\n", "\n", "z_width", "=", "np", ".", "ceil", "(", "float", "(", "z", "/", "2", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "w_width", "=", "np", ".", "ceil", "(", "float", "(", "w", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "h_width", "=", "np", ".", "ceil", "(", "float", "(", "h", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "\n", "w_pos", "=", "[", "w", "*", "3", "/", "8", "-", "w_width", "/", "2", ",", "\n", "w", "*", "5", "/", "8", "-", "w_width", "/", "2", "]", "\n", "h_pos", "=", "[", "h", "*", "3", "/", "8", "-", "h_width", "/", "2", ",", "\n", "h", "*", "5", "/", "8", "-", "h_width", "/", "2", "]", "\n", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "-", "z_width", ",", "None", "]", "]", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_pos", "[", "0", "]", ",", "h_pos", "[", "0", "]", "+", "h_width", "]", ",", "[", "h_pos", "[", "1", "]", ",", "h_pos", "[", "1", "]", "+", "h_width", "]", ",", "[", "-", "h_width", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_pos", "[", "0", "]", ",", "w_pos", "[", "0", "]", "+", "w_width", "]", ",", "[", "w_pos", "[", "1", "]", ",", "w_pos", "[", "1", "]", "+", "w_width", "]", ",", "[", "-", "w_width", ",", "None", "]", "]", ":", "\n", "                ", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", "]", ")", "\n", "\n", "", "", "", "return", "torch", ".", "cat", "(", "splits", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.combine32": [[225, 254], ["numpy.zeros", "int", "int", "int", "numpy.ceil", "numpy.ceil", "numpy.ceil", "zip", "zip", "float", "float", "float"], "function", ["None"], ["", "def", "combine32", "(", "splits", ",", "z", ",", "h", ",", "w", ")", ":", "\n", "\n", "    ", "output", "=", "np", ".", "zeros", "(", "(", "\n", "z", ",", "\n", "h", ",", "\n", "w", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "\n", "z_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "z", ")", "/", "2", ")", ")", "\n", "h_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "h", ")", "/", "4", ")", ")", "\n", "w_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "w", ")", "/", "4", ")", ")", "\n", "splithstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "1", "]", "/", "2", "-", "h_width", "/", "2", "\n", "splitwstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "2", "]", "/", "2", "-", "w_width", "/", "2", "\n", "\n", "i", "=", "0", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_width", "-", "z", ",", "None", "]", "]", ":", "\n", "\n", "        ", "for", "hh", ",", "hh2", "in", "zip", "(", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_width", ",", "h_width", "*", "2", "]", ",", "[", "h_width", "*", "2", ",", "h_width", "*", "3", "]", ",", "[", "h_width", "*", "3", "-", "h", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "h_width", "]", ",", "[", "splithstart", ",", "h_width", "+", "splithstart", "]", ",", "[", "splithstart", ",", "h_width", "+", "splithstart", "]", ",", "[", "h_width", "*", "3", "-", "h", ",", "None", "]", "]", ")", ":", "\n", "\n", "            ", "for", "ww", ",", "ww2", "in", "zip", "(", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_width", ",", "w_width", "*", "2", "]", ",", "[", "w_width", "*", "2", ",", "w_width", "*", "3", "]", ",", "[", "w_width", "*", "3", "-", "w", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "w_width", "]", ",", "[", "splitwstart", ",", "w_width", "+", "splitwstart", "]", ",", "[", "splitwstart", ",", "w_width", "+", "splitwstart", "]", ",", "[", "w_width", "*", "3", "-", "w", ",", "None", "]", "]", ")", ":", "\n", "\n", "                ", "output", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "=", "splits", "[", "i", "]", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh2", "[", "0", "]", ":", "hh2", "[", "1", "]", ",", "ww2", "[", "0", "]", ":", "ww2", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "i", "=", "i", "+", "1", "\n", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.split64": [[257, 278], ["data.size", "torch.cat", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil", "numpy.ceil", "numpy.ceil", "splits.append", "float", "float", "float"], "function", ["None"], ["", "def", "split64", "(", "data", ",", "max_stride", ",", "margin", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "_", ",", "c", ",", "z", ",", "h", ",", "w", "=", "data", ".", "size", "(", ")", "\n", "\n", "z_width", "=", "np", ".", "ceil", "(", "float", "(", "z", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "w_width", "=", "np", ".", "ceil", "(", "float", "(", "w", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "h_width", "=", "np", ".", "ceil", "(", "float", "(", "h", "/", "4", "+", "margin", ")", "/", "max_stride", ")", ".", "astype", "(", "'int'", ")", "*", "max_stride", "\n", "\n", "z_pos", "=", "[", "z", "*", "3", "/", "8", "-", "z_width", "/", "2", ",", "\n", "z", "*", "5", "/", "8", "-", "z_width", "/", "2", "]", "\n", "w_pos", "=", "[", "w", "*", "3", "/", "8", "-", "w_width", "/", "2", ",", "\n", "w", "*", "5", "/", "8", "-", "w_width", "/", "2", "]", "\n", "h_pos", "=", "[", "h", "*", "3", "/", "8", "-", "h_width", "/", "2", ",", "\n", "h", "*", "5", "/", "8", "-", "h_width", "/", "2", "]", "\n", "\n", "for", "zz", "in", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_pos", "[", "0", "]", ",", "z_pos", "[", "0", "]", "+", "z_width", "]", ",", "[", "z_pos", "[", "1", "]", ",", "z_pos", "[", "1", "]", "+", "z_width", "]", ",", "[", "-", "z_width", ",", "None", "]", "]", ":", "\n", "        ", "for", "hh", "in", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_pos", "[", "0", "]", ",", "h_pos", "[", "0", "]", "+", "h_width", "]", ",", "[", "h_pos", "[", "1", "]", ",", "h_pos", "[", "1", "]", "+", "h_width", "]", ",", "[", "-", "h_width", ",", "None", "]", "]", ":", "\n", "            ", "for", "ww", "in", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_pos", "[", "0", "]", ",", "w_pos", "[", "0", "]", "+", "w_width", "]", ",", "[", "w_pos", "[", "1", "]", ",", "w_pos", "[", "1", "]", "+", "w_width", "]", ",", "[", "-", "w_width", ",", "None", "]", "]", ":", "\n", "                ", "splits", ".", "append", "(", "data", "[", ":", ",", ":", ",", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", "]", ")", "\n", "\n", "", "", "", "return", "torch", ".", "cat", "(", "splits", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.combine64": [[279, 313], ["range", "numpy.zeros", "int", "int", "int", "zip", "len", "splits.append", "numpy.ceil", "numpy.ceil", "numpy.ceil", "zip", "zip", "float", "float", "float"], "function", ["None"], ["", "def", "combine64", "(", "output", ",", "z", ",", "h", ",", "w", ")", ":", "\n", "    ", "splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "        ", "splits", ".", "append", "(", "output", "[", "i", "]", ")", "\n", "\n", "", "output", "=", "np", ".", "zeros", "(", "(", "\n", "z", ",", "\n", "h", ",", "\n", "w", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "\n", "splits", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "\n", "\n", "z_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "z", ")", "/", "4", ")", ")", "\n", "h_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "h", ")", "/", "4", ")", ")", "\n", "w_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "w", ")", "/", "4", ")", ")", "\n", "splitzstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "0", "]", "/", "2", "-", "z_width", "/", "2", "\n", "splithstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "1", "]", "/", "2", "-", "h_width", "/", "2", "\n", "splitwstart", "=", "splits", "[", "0", "]", ".", "shape", "[", "2", "]", "/", "2", "-", "w_width", "/", "2", "\n", "\n", "i", "=", "0", "\n", "for", "zz", ",", "zz2", "in", "zip", "(", "[", "[", "0", ",", "z_width", "]", ",", "[", "z_width", ",", "z_width", "*", "2", "]", ",", "[", "z_width", "*", "2", ",", "z_width", "*", "3", "]", ",", "[", "z_width", "*", "3", "-", "z", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "z_width", "]", ",", "[", "splitzstart", ",", "z_width", "+", "splitzstart", "]", ",", "[", "splitzstart", ",", "z_width", "+", "splitzstart", "]", ",", "[", "z_width", "*", "3", "-", "z", ",", "None", "]", "]", ")", ":", "\n", "\n", "        ", "for", "hh", ",", "hh2", "in", "zip", "(", "[", "[", "0", ",", "h_width", "]", ",", "[", "h_width", ",", "h_width", "*", "2", "]", ",", "[", "h_width", "*", "2", ",", "h_width", "*", "3", "]", ",", "[", "h_width", "*", "3", "-", "h", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "h_width", "]", ",", "[", "splithstart", ",", "h_width", "+", "splithstart", "]", ",", "[", "splithstart", ",", "h_width", "+", "splithstart", "]", ",", "[", "h_width", "*", "3", "-", "h", ",", "None", "]", "]", ")", ":", "\n", "\n", "            ", "for", "ww", ",", "ww2", "in", "zip", "(", "[", "[", "0", ",", "w_width", "]", ",", "[", "w_width", ",", "w_width", "*", "2", "]", ",", "[", "w_width", "*", "2", ",", "w_width", "*", "3", "]", ",", "[", "w_width", "*", "3", "-", "w", ",", "None", "]", "]", ",", "\n", "[", "[", "0", ",", "w_width", "]", ",", "[", "splitwstart", ",", "w_width", "+", "splitwstart", "]", ",", "[", "splitwstart", ",", "w_width", "+", "splitwstart", "]", ",", "[", "w_width", "*", "3", "-", "w", ",", "None", "]", "]", ")", ":", "\n", "\n", "                ", "output", "[", "zz", "[", "0", "]", ":", "zz", "[", "1", "]", ",", "hh", "[", "0", "]", ":", "hh", "[", "1", "]", ",", "ww", "[", "0", "]", ":", "ww", "[", "1", "]", ",", ":", ",", ":", "]", "=", "splits", "[", "i", "]", "[", "zz2", "[", "0", "]", ":", "zz2", "[", "1", "]", ",", "hh2", "[", "0", "]", ":", "hh2", "[", "1", "]", ",", "ww2", "[", "0", "]", ":", "ww2", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "i", "=", "i", "+", "1", "\n", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.assignKmeans": [[315, 352], ["numpy.load", "numpy.load", "open", "csv.reader", "csv.reader", "open", "csv.writer", "csv.writer", "range", "open", "csv.writer", "csv.writer", "range", "numpy.sum", "numpy.sum", "len", "csv.writer.writerow", "len", "csv.writer.writerow", "numpy.abs", "numpy.abs", "newimagelist1.append", "newimagelist2.append"], "function", ["None"], ["", "def", "assignKmeans", "(", ")", ":", "\n", "    ", "csvdir", "=", "'./imageInfo_luna.csv'", "\n", "centers", "=", "np", ".", "load", "(", "'centers_luna.npy'", ")", "\n", "c1", "=", "centers", "[", "0", "]", "\n", "c2", "=", "centers", "[", "1", "]", "\n", "\n", "kmeans", "=", "np", ".", "load", "(", "'kmean_luna_raw.npy'", ")", "\n", "\n", "newcsvdir1", "=", "'imagesortInfo_luna1.csv'", "\n", "newcsvdir2", "=", "'imagesortInfo_luna2.csv'", "\n", "\n", "newimagelist1", "=", "[", "]", "\n", "newimagelist2", "=", "[", "]", "\n", "idx", "=", "0", "\n", "with", "open", "(", "csvdir", ",", "'r'", ")", "as", "readfile", ":", "\n", "        ", "csvreader", "=", "csv", ".", "reader", "(", "readfile", ")", "\n", "for", "row", "in", "csvreader", ":", "\n", "            ", "curk", "=", "kmeans", "[", "idx", "]", "\n", "diff1", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "curk", "-", "c1", ")", ")", "\n", "diff2", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "curk", "-", "c2", ")", ")", "\n", "\n", "if", "(", "diff1", "<", "diff2", ")", ":", "\n", "                ", "newimagelist1", ".", "append", "(", "row", "+", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "newimagelist2", ".", "append", "(", "row", "+", "[", "1", "]", ")", "\n", "", "idx", "+=", "1", "\n", "\n", "", "", "with", "open", "(", "newcsvdir1", ",", "'w'", ")", "as", "writefile1", ":", "\n", "        ", "csvwriter1", "=", "csv", ".", "writer", "(", "writefile1", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "newimagelist1", ")", ")", ":", "\n", "            ", "csvwriter1", ".", "writerow", "(", "newimagelist1", "[", "idx", "]", ")", "\n", "\n", "\n", "", "", "with", "open", "(", "newcsvdir2", ",", "'w'", ")", "as", "writefile2", ":", "\n", "        ", "csvwriter2", "=", "csv", ".", "writer", "(", "writefile2", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "newimagelist2", ")", ")", ":", "\n", "            ", "csvwriter2", ".", "writerow", "(", "newimagelist2", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ymli39_DeepSEED-3D-ConvNets-for-Pulmonary-Nodule-Detection.LIDC_detector.utils.processExcludedID": [[355, 390], ["range", "open", "csv.reader", "csv.reader", "open", "csv.reader", "csv.reader", "next", "len", "fullname.index", "int", "open", "csv.writer", "csv.writer", "fullname.append", "shortname.append", "excludelist.append", "csv.writer.writerow"], "function", ["None"], ["    ", "lunafull", "=", "np", ".", "load", "(", "'./detector/lunafull.npy'", ")", "\n", "lunavali", "=", "np", ".", "load", "(", "'./detector/luna_test.npy'", ")", "\n", "\n", "fullset", "=", "set", "(", "lunafull", ")", "\n", "valiset", "=", "set", "(", "lunavali", ")", "\n", "\n", "trainset", "=", "fullset", "-", "valiset", "\n", "len", "(", "trainset", ")", "\n", "lunatrain", "=", "np", ".", "array", "(", "list", "(", "trainset", ")", ")", "\n", "np", ".", "save", "(", "'./detector/luna_train.npy'", ",", "lunatrain", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", ""]]}