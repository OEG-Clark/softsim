{"home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.TTS.__init__": [[341, 344], ["pyttsx3.init", "demo.TTS.tts_engine.setProperty"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tts_engine", "=", "pyttsx3", ".", "init", "(", ")", "\n", "self", ".", "tts_engine", ".", "setProperty", "(", "'volume'", ",", "0.2", ")", "\n", "", "def", "run", "(", "self", ",", "text", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.TTS.run": [[344, 347], ["demo.TTS.tts_engine.say", "demo.TTS.tts_engine.runAndWait"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "text", ")", ":", "\n", "        ", "self", ".", "tts_engine", ".", "say", "(", "text", ")", "\n", "self", ".", "tts_engine", ".", "runAndWait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.convert_z16_to_bgr": [[260, 281], ["numpy.cumsum", "numpy.empty", "numpy.histogram"], "function", ["None"], ["def", "convert_z16_to_bgr", "(", "frame", ")", ":", "\n", "    ", "'''Performs depth histogram normalization\n    This raw Python implementation is slow. See here for a fast implementation using Cython:\n    https://github.com/pupil-labs/pupil/blob/master/pupil_src/shared_modules/cython_methods/methods.pyx\n    '''", "\n", "hist", "=", "np", ".", "histogram", "(", "frame", ",", "bins", "=", "0x10000", ")", "[", "0", "]", "\n", "hist", "=", "np", ".", "cumsum", "(", "hist", ")", "\n", "hist", "-=", "hist", "[", "0", "]", "\n", "rgb_frame", "=", "np", ".", "empty", "(", "frame", ".", "shape", "[", ":", "2", "]", "+", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "zeros", "=", "frame", "==", "0", "\n", "non_zeros", "=", "frame", "!=", "0", "\n", "\n", "f", "=", "hist", "[", "frame", "[", "non_zeros", "]", "]", "*", "255", "/", "hist", "[", "0xFFFF", "]", "\n", "rgb_frame", "[", "non_zeros", ",", "0", "]", "=", "255", "-", "f", "\n", "rgb_frame", "[", "non_zeros", ",", "1", "]", "=", "0", "\n", "rgb_frame", "[", "non_zeros", ",", "2", "]", "=", "f", "\n", "rgb_frame", "[", "zeros", ",", "0", "]", "=", "20", "\n", "rgb_frame", "[", "zeros", ",", "1", "]", "=", "5", "\n", "rgb_frame", "[", "zeros", ",", "2", "]", "=", "0", "\n", "return", "rgb_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.demo": [[282, 320], ["segmentron.utils.options.parse_args", "segmentron.config.cfg.update_from_file", "segmentron.config.cfg.check_and_freeze", "segmentron.utils.default_setup.default_setup", "os.path.join", "torchvision.transforms.Compose", "segmentron.models.model_zoo.get_segmentation_model().to", "get_segmentation_model().to.eval", "os.path.isdir", "os.path.exists", "os.makedirs", "PIL.Image.open().convert", "image.resize.resize", "transforms.Compose.unsqueeze().to", "torch.argmax().squeeze().cpu().data.numpy", "segmentron.utils.visualize.get_color_pallete().resize", "get_color_pallete().resize.save", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "segmentron.models.model_zoo.get_segmentation_model", "os.path.join", "torch.no_grad", "get_segmentation_model().to.", "os.path.join", "os.listdir", "PIL.Image.open", "transforms.Compose.unsqueeze", "segmentron.utils.visualize.get_color_pallete", "os.path.splitext", "torch.argmax().squeeze().cpu", "transforms.Compose.", "os.path.split", "torch.argmax().squeeze", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.options.parse_args", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.update_from_file", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.check_and_freeze", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.default_setup.default_setup", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.eval", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.model_zoo.get_segmentation_model", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.get_color_pallete"], ["", "def", "demo", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "cfg", ".", "update_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "PHASE", "=", "'test'", "\n", "cfg", ".", "ROOT_PATH", "=", "root_path", "\n", "cfg", ".", "check_and_freeze", "(", ")", "\n", "default_setup", "(", "args", ")", "\n", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "VISUAL", ".", "OUTPUT_DIR", ",", "'vis_result_{}_{}_{}_{}'", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "MODEL_NAME", ",", "cfg", ".", "MODEL", ".", "BACKBONE", ",", "cfg", ".", "DATASET", ".", "NAME", ",", "cfg", ".", "TIME_STAMP", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cfg", ".", "DATASET", ".", "MEAN", ",", "cfg", ".", "DATASET", ".", "STD", ")", ",", "\n", "]", ")", "\n", "\n", "model", "=", "get_segmentation_model", "(", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "input_img", ")", ":", "\n", "        ", "img_paths", "=", "[", "os", ".", "path", ".", "join", "(", "args", ".", "input_img", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "args", ".", "input_img", ")", "]", "\n", "", "else", ":", "\n", "        ", "img_paths", "=", "[", "args", ".", "input_img", "]", "\n", "", "for", "img_path", "in", "img_paths", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "size", "=", "image", ".", "size", "\n", "image", "=", "image", ".", "resize", "(", "(", "512", ",", "512", ")", ")", "\n", "images", "=", "transform", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "images", ")", "\n", "\n", "", "pred", "=", "torch", ".", "argmax", "(", "output", "[", "0", "]", ",", "1", ")", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "mask", "=", "get_color_pallete", "(", "pred", ",", "cfg", ".", "DATASET", ".", "NAME", ")", ".", "resize", "(", "size", ")", "\n", "outname", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "img_path", ")", "[", "-", "1", "]", ")", "[", "0", "]", "+", "'.png'", "\n", "mask", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "outname", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.second_model": [[324, 339], ["torch.load", "model.load_state_dict", "logging.info", "torch.device", "model.to", "segmentron.models.model_zoo.MODEL_REGISTRY.get", "torch.load.keys", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get"], ["def", "second_model", "(", ")", ":", "\n", "    ", "from", "segmentron", ".", "models", ".", "pvt_fpt", "import", "PVT_FPT", "\n", "model_name", "=", "cfg", ".", "MODEL", ".", "MODEL_NAME", "\n", "datasets", "[", "cfg", ".", "DATASET", ".", "NAME", "]", ".", "NUM_CLASS", "=", "172", "\n", "cfg", ".", "MODEL", ".", "EMB_CHANNELS", "=", "128", "\n", "model", "=", "MODEL_REGISTRY", ".", "get", "(", "model_name", ")", "(", ")", "\n", "path", "=", "'workdirs/cocostuff/pvt_tiny_FPT128/model_cocostuff.pth'", "\n", "model_dic", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cuda:0'", ")", "\n", "if", "'state_dict'", "in", "model_dic", ".", "keys", "(", ")", ":", "\n", "        ", "model_dic", "=", "model_dic", "[", "'state_dict'", "]", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "model_dic", ",", "strict", "=", "False", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.saying": [[348, 352], ["demo.TTS", "demo.TTS.run"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.TTS.run"], ["", "", "def", "saying", "(", "text", ")", ":", "\n", "    ", "tts", "=", "TTS", "(", ")", "\n", "tts", ".", "run", "(", "text", ")", "\n", "del", "(", "tts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.playfile": [[353, 357], ["pydub.AudioSegment.from_wav", "pydub.playback.play"], "function", ["None"], ["", "def", "playfile", "(", "file", ",", "dB", ")", ":", "\n", "    ", "sound", "=", "AudioSegment", ".", "from_wav", "(", "file", ")", "\n", "sound", "+=", "dB", "\n", "play", "(", "sound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.beep": [[358, 365], ["range", "sys.stdout.write", "sys.stdout.flush", "time.sleep"], "function", ["None"], ["", "def", "beep", "(", "n", "=", "2", ")", ":", "\n", "    ", "'''play the ascii bell for n times.'''", "\n", "# os.system()", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\a'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "time", ".", "sleep", "(", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.segment_cam": [[374, 557], ["segmentron.utils.options.parse_args", "segmentron.config.cfg.update_from_file", "segmentron.config.cfg.check_and_freeze", "segmentron.utils.default_setup.default_setup", "torchvision.transforms.Compose", "os.makedirs", "os.makedirs", "torch.no_grad", "segmentron.models.model_zoo.get_segmentation_model().to", "get_segmentation_model().to.eval", "demo.second_model", "second_model.eval", "pyrealsense.stream.DepthStream", "pyrealsense.stream.DACStream", "pyrealsense.stream.InfraredStream", "pyrealsense.stream.ColorStream", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "pyrealsense.Service", "segmentron.models.model_zoo.get_segmentation_model", "serv.Device", "dev.apply_ivcam_preset", "time.time", "time.time", "dev.set_device_options", "time.sleep", "dev.wait_for_frames", "PIL.Image.fromarray", "image.resize.resize", "transforms.Compose.unsqueeze().to", "torch.argmax().squeeze().cpu().data.numpy", "torch.argmax().squeeze().cpu().data.numpy", "segmentron.utils.visualize.get_color_pallete().resize", "cv2.cvtColor", "demo.postprocess", "cv2.resize", "cv2.cvtColor", "time.time", "demo.orientation", "max", "demo.obstacle_detect", "left_obstacles.append", "middle_obstacles.append", "right_obstacles.append", "demo.interest_detect", "cv2.resize", "center_objs.append", "numpy.concatenate", "cv2.resize", "time.time", "torch.no_grad", "get_segmentation_model().to.", "second_model.", "numpy.asarray", "demo.is_transparent_2", "time.strftime", "os.path.join", "numpy.concatenate", "cv2.resize", "cv2.imwrite", "os.path.join", "PIL.Image.fromarray", "Image.fromarray.save", "ord", "zip", "transforms.Compose.unsqueeze", "segmentron.utils.visualize.get_color_pallete", "cv2.cvtColor.convert", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "threading.Thread().start", "cv2.waitKey", "torch.argmax().squeeze().cpu", "torch.argmax().squeeze().cpu", "threading.Thread().start", "transforms.Compose.", "threading.Thread", "threading.Thread().start", "print", "torch.argmax().squeeze", "torch.argmax().squeeze", "threading.Thread", "threading.Thread().start", "print", "threading.Thread", "print", "torch.argmax", "torch.argmax", "threading.Thread", "threading.Thread().start", "threading.Thread().start", "print", "threading.Thread().start", "threading.Thread().start", "threading.Thread().start", "threading.Thread", "threading.Thread", "threading.Thread", "threading.Thread", "threading.Thread"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.options.parse_args", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.update_from_file", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.check_and_freeze", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.default_setup.default_setup", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.eval", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.second_model", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.eval", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.model_zoo.get_segmentation_model", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.postprocess", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.orientation", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.obstacle_detect", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.interest_detect", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.is_transparent_2", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.get_color_pallete", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean"], ["def", "segment_cam", "(", "fps", ",", "sleep_sec", ")", ":", "\n", "    ", "global", "n_left", ",", "n_middle", ",", "n_right", ",", "obstacles", ",", "count_frame", "\n", "args", "=", "parse_args", "(", ")", "\n", "cfg", ".", "update_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "PHASE", "=", "'test'", "\n", "cfg", ".", "ROOT_PATH", "=", "root_path", "\n", "cfg", ".", "check_and_freeze", "(", ")", "\n", "default_setup", "(", "args", ")", "\n", "\n", "if", "is_save", ":", "\n", "        ", "output_dir_rgb", "=", "'vis_trans_coco/r200_demo_{}/rgb'", ".", "format", "(", "cfg", ".", "TIME_STAMP", ")", "\n", "os", ".", "makedirs", "(", "output_dir_rgb", ",", "exist_ok", "=", "True", ")", "\n", "output_dir_depth", "=", "'vis_trans_coco/r200_demo_{}/depth'", ".", "format", "(", "cfg", ".", "TIME_STAMP", ")", "\n", "os", ".", "makedirs", "(", "output_dir_depth", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cfg", ".", "DATASET", ".", "MEAN", ",", "cfg", ".", "DATASET", ".", "STD", ")", ",", "\n", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "model", "=", "get_segmentation_model", "(", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "model_coco", "=", "second_model", "(", ")", "\n", "model_coco", ".", "eval", "(", ")", "\n", "\n", "\n", "w", ",", "h", "=", "320", ",", "240", "\n", "depth_stream", "=", "pyrs", ".", "stream", ".", "DepthStream", "(", "width", "=", "w", ",", "height", "=", "h", ",", "fps", "=", "fps", ")", "\n", "dac_stream", "=", "pyrs", ".", "stream", ".", "DACStream", "(", "width", "=", "w", ",", "height", "=", "h", ",", "fps", "=", "fps", ")", "\n", "ir_stream", "=", "pyrs", ".", "stream", ".", "InfraredStream", "(", "width", "=", "w", ",", "height", "=", "h", ",", "fps", "=", "fps", ")", "\n", "color_stream", "=", "pyrs", ".", "stream", ".", "ColorStream", "(", "width", "=", "w", ",", "height", "=", "h", ",", "fps", "=", "fps", ")", "\n", "with", "pyrs", ".", "Service", "(", ")", "as", "serv", ":", "\n", "            ", "with", "serv", ".", "Device", "(", "streams", "=", "(", "depth_stream", ",", "dac_stream", ",", "ir_stream", ",", "color_stream", ")", ")", "as", "dev", ":", "\n", "                ", "dev", ".", "apply_ivcam_preset", "(", "0", ")", "\n", "try", ":", "\n", "                    ", "custom_options", "=", "[", "\n", "(", "rs_option", ".", "RS_OPTION_R200_LR_AUTO_EXPOSURE_ENABLED", ",", "1", ")", ",", "\n", "(", "rs_option", ".", "RS_OPTION_R200_DEPTH_CONTROL_LR_THRESHOLD", ",", "30", ")", ",", "\n", "(", "rs_option", ".", "RS_OPTION_R200_DEPTH_CONTROL_SCORE_MAXIMUM_THRESHOLD", ",", "1023", ")", ",", "\n", "(", "rs_option", ".", "RS_OPTION_R200_DEPTH_CONTROL_MEDIAN_THRESHOLD", ",", "0", ")", ",", "\n", "(", "rs_option", ".", "RS_OPTION_R200_DEPTH_CONTROL_SCORE_MINIMUM_THRESHOLD", ",", "0", ")", ",", "\n", "(", "rs_option", ".", "RS_OPTION_R200_DEPTH_CONTROL_SECOND_PEAK_THRESHOLD", ",", "0", ")", ",", "\n", "(", "rs_option", ".", "RS_OPTION_R200_DEPTH_CONTROL_TEXTURE_COUNT_THRESHOLD", ",", "0", ")", ",", "\n", "(", "rs_option", ".", "RS_OPTION_R200_DEPTH_CONTROL_TEXTURE_DIFFERENCE_THRESHOLD", ",", "0", ")", ",", "\n", "(", "rs_option", ".", "RS_OPTION_R200_DEPTH_CONTROL_NEIGHBOR_THRESHOLD", ",", "0", ")", ",", "\n", "(", "rs_option", ".", "RS_OPTION_R200_LR_GAIN", ",", "100.0", ")", "]", "\n", "dev", ".", "set_device_options", "(", "*", "zip", "(", "*", "custom_options", ")", ")", "\n", "", "except", "pyrs", ".", "RealsenseError", ":", "\n", "                    ", "pass", "\n", "", "cnt", "=", "0", "\n", "last", "=", "time", ".", "time", "(", ")", "\n", "smoothing", "=", "0.9", "\n", "fps_smooth", "=", "30", "\n", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "orientation_interval", "=", "2", "\n", "left_obstacles", ",", "middle_obstacles", ",", "right_obstacles", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "center_objs", "=", "[", "]", "\n", "while", "True", ":", "\n", "\n", "                    ", "time", ".", "sleep", "(", "sleep_sec", ")", "\n", "cnt", "+=", "1", "\n", "if", "(", "cnt", "%", "10", ")", "==", "0", ":", "\n", "                        ", "now", "=", "time", ".", "time", "(", ")", "\n", "dt", "=", "now", "-", "last", "\n", "fps", "=", "10", "/", "dt", "\n", "fps_smooth", "=", "(", "fps_smooth", "*", "smoothing", ")", "+", "(", "fps", "*", "(", "1.0", "-", "smoothing", ")", ")", "\n", "last", "=", "now", "\n", "", "dev", ".", "wait_for_frames", "(", ")", "\n", "frame", "=", "dev", ".", "color", "\n", "d", "=", "dev", ".", "dac", "\n", "image", "=", "Image", ".", "fromarray", "(", "frame", ")", "\n", "size", "=", "image", ".", "size", "\n", "image", "=", "image", ".", "resize", "(", "(", "512", ",", "512", ")", ")", "\n", "images", "=", "transform", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "output", "=", "model", "(", "images", ")", "\n", "output_coco", "=", "model_coco", "(", "images", ")", "\n", "\n", "", "pred_trans", "=", "torch", ".", "argmax", "(", "output", "[", "0", "]", ",", "1", ")", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "pred_coco", "=", "torch", ".", "argmax", "(", "output_coco", "[", "0", "]", ",", "1", ")", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "pred_coco", "=", "pred_coco", "+", "1", "\n", "\n", "mask_trans", "=", "get_color_pallete", "(", "pred_trans", ",", "cfg", ".", "DATASET", ".", "NAME", ")", ".", "resize", "(", "size", ")", "\n", "mask_trans", "=", "cv2", ".", "cvtColor", "(", "np", ".", "asarray", "(", "mask_trans", ".", "convert", "(", "'RGB'", ")", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "mask_coco", "=", "postprocess", "(", "pred_coco", ",", "pred_trans", ")", "\n", "mask_coco", "=", "cv2", ".", "resize", "(", "mask_coco", ",", "size", ")", "\n", "\n", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "# --- orientation", "\n", "t3", "=", "time", ".", "time", "(", ")", "\n", "orientation", "(", "pred_coco", ")", "\n", "max_orient", "=", "max", "(", "[", "n_left", ",", "n_middle", ",", "n_right", "]", ")", "\n", "\n", "# --- obstacle", "\n", "obstacle_mask", ",", "left_obstacle", ",", "middle_obstacle", ",", "right_obstacle", "=", "obstacle_detect", "(", "pred_coco", ",", "d", ")", "\n", "left_obstacles", ".", "append", "(", "left_obstacle", ")", "\n", "middle_obstacles", ".", "append", "(", "middle_obstacle", ")", "\n", "right_obstacles", ".", "append", "(", "right_obstacle", ")", "\n", "\n", "# --- interesting object", "\n", "pred_coco_rgb", ",", "center_obj", ",", "distance_obj", "=", "interest_detect", "(", "pred_coco", ",", "pred_trans", ",", "d", ")", "\n", "pred_coco_rgb", "=", "cv2", ".", "resize", "(", "pred_coco_rgb", ",", "size", ")", "\n", "center_objs", ".", "append", "(", "center_obj", ")", "\n", "\n", "# obstacles.append(obstacle)", "\n", "if", "t3", "-", "t1", ">", "orientation_interval", ":", "\n", "                        ", "trans_mask", ",", "trans_obj", "=", "is_transparent_2", "(", "pred_trans", ")", "\n", "\n", "is_left_obstacle", "=", "np", ".", "mean", "(", "left_obstacles", ")", "<", "obstacle_distance", "\n", "is_middle_obstacle", "=", "np", ".", "mean", "(", "middle_obstacles", ")", "<", "obstacle_distance", "\n", "is_right_obstacle", "=", "np", ".", "mean", "(", "right_obstacles", ")", "<", "obstacle_distance", "\n", "\n", "# --- close_obstacle", "\n", "close_obstacle", "=", "1000", "\n", "is_left_close_obstacle", "=", "np", ".", "mean", "(", "left_obstacles", ")", "<", "close_obstacle", "\n", "is_middle_close_obstacle", "=", "np", ".", "mean", "(", "middle_obstacles", ")", "<", "close_obstacle", "\n", "is_right_close_obstacle", "=", "np", ".", "mean", "(", "right_obstacles", ")", "<", "close_obstacle", "\n", "\n", "# ---- close depth, obstacle", "\n", "if", "is_left_close_obstacle", "or", "is_middle_close_obstacle", "or", "is_right_close_obstacle", ":", "\n", "                            ", "Thread", "(", "target", "=", "playfile", ",", "args", "=", "(", "'sounds/both_1.wav'", ",", "-", "20", ",", ")", ")", ".", "start", "(", ")", "\n", "", "elif", "center_obj", "==", "'stair'", ":", "\n", "                            ", "Thread", "(", "target", "=", "saying", ",", "args", "=", "(", "center_obj", ",", ")", ")", ".", "start", "(", ")", "\n", "", "elif", "distance_obj", "<", "2000", "and", "center_obj", ":", "\n", "                            ", "Thread", "(", "target", "=", "saying", ",", "args", "=", "(", "center_obj", ",", ")", ")", ".", "start", "(", ")", "\n", "print", "(", "'too closed object: '", ",", "center_obj", ")", "\n", "", "elif", "trans_obj", ":", "\n", "                            ", "Thread", "(", "target", "=", "saying", ",", "args", "=", "(", "trans_obj", ",", ")", ")", ".", "start", "(", ")", "\n", "print", "(", "'transparent object:'", ",", "trans_obj", ")", "\n", "# ---- walkable path", "\n", "", "elif", "max_orient", "/", "cnt", ">", "0.4", ":", "\n", "                            ", "text", "=", "None", "\n", "left_str", "=", "'left'", "\n", "right_str", "=", "'right'", "\n", "middle_str", "=", "'forward'", "\n", "if", "max_orient", "==", "n_left", ":", "\n", "                                ", "text", "=", "left_str", "\n", "Thread", "(", "target", "=", "saying", ",", "args", "=", "(", "text", ",", ")", ")", ".", "start", "(", ")", "\n", "\n", "", "elif", "max_orient", "==", "n_right", ":", "\n", "                                ", "text", "=", "right_str", "\n", "Thread", "(", "target", "=", "saying", ",", "args", "=", "(", "text", ",", ")", ")", ".", "start", "(", ")", "\n", "", "else", ":", "\n", "                                ", "text", "=", "middle_str", "\n", "Thread", "(", "target", "=", "saying", ",", "args", "=", "(", "text", ",", ")", ")", ".", "start", "(", ")", "\n", "", "print", "(", "'walkable: '", ",", "text", ",", "n_left", "/", "cnt", ",", "n_middle", "/", "cnt", ",", "n_right", "/", "cnt", ")", "\n", "# ---- interesting obj", "\n", "", "elif", "center_obj", ":", "\n", "                            ", "Thread", "(", "target", "=", "saying", ",", "args", "=", "(", "center_obj", ",", ")", ")", ".", "start", "(", ")", "\n", "print", "(", "'interesting object: '", ",", "center_obj", ")", "\n", "# ---- depth, obstacle", "\n", "", "elif", "is_left_obstacle", "or", "is_middle_obstacle", "or", "is_right_obstacle", ":", "\n", "                            ", "Thread", "(", "target", "=", "playfile", ",", "args", "=", "(", "'sounds/both_1.wav'", ",", "-", "20", ",", ")", ")", ".", "start", "(", ")", "\n", "\n", "", "n_left", ",", "n_middle", ",", "n_right", "=", "0", ",", "0", ",", "0", "\n", "left_obstacles", ",", "middle_obstacles", ",", "right_obstacles", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "t1", "=", "t3", "\n", "obstacles", "=", "[", "]", "\n", "center_objs", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "count_frame", "=", "0", "\n", "\n", "", "img_numpy", "=", "np", ".", "concatenate", "(", "(", "frame", ",", "obstacle_mask", ",", "mask_trans", ",", "pred_coco_rgb", ",", "mask_coco", ")", ",", "axis", "=", "1", ")", "\n", "img_numpy", "=", "cv2", ".", "resize", "(", "img_numpy", ",", "(", "320", "*", "5", ",", "240", ")", ")", "\n", "\n", "if", "is_save", ":", "\n", "                        ", "timestr", "=", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "\n", "outname", "=", "os", ".", "path", ".", "join", "(", "output_dir_rgb", ",", "'{}.png'", ".", "format", "(", "timestr", ")", ")", "\n", "img_numpy", "=", "np", ".", "concatenate", "(", "(", "frame", ",", "pred_coco_rgb", ")", ",", "axis", "=", "1", ")", "\n", "img_numpy", "=", "cv2", ".", "resize", "(", "img_numpy", ",", "(", "640", "*", "2", ",", "480", ")", ")", "\n", "cv2", ".", "imwrite", "(", "outname", ",", "img_numpy", ")", "\n", "\n", "outname", "=", "os", ".", "path", ".", "join", "(", "output_dir_depth", ",", "'{}.png'", ".", "format", "(", "timestr", ")", ")", "\n", "depth_img", "=", "Image", ".", "fromarray", "(", "d", ")", "\n", "depth_img", ".", "save", "(", "outname", ")", "\n", "\n", "", "if", "cv2", ".", "waitKey", "(", "1", ")", "&", "0xFF", "==", "ord", "(", "'q'", ")", ":", "\n", "                        ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.draw_pallete": [[558, 577], ["numpy.zeros", "enumerate", "segmentron.utils.visualize.get_color_pallete", "cv2.cvtColor", "enumerate", "cv2.imwrite", "numpy.asarray", "cv2.putText", "segmentron.utils.visualize.get_color_pallete.convert"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.get_color_pallete"], ["", "", "", "", "", "", "def", "draw_pallete", "(", ")", ":", "\n", "    ", "from", "segmentron", ".", "utils", ".", "visualize", "import", "stanford2d3dpallete", ",", "trans10kv2pallete", "\n", "trans_cls", "=", "[", "'Background'", ",", "'Shelf'", ",", "'Jar or Tank'", ",", "'Freezer'", ",", "'Window'", ",", "\n", "'Glass Door'", ",", "'Eyeglass'", ",", "'Cup'", ",", "'Floor Glass'", ",", "'Glass Bow'", ",", "\n", "'Water Bottle'", ",", "'Storage Box'", "]", "\n", "\n", "cell_width", "=", "180", "\n", "zeros", "=", "np", ".", "zeros", "(", "(", "150", ",", "cell_width", "*", "10", ")", ")", "\n", "for", "id", ",", "cls", "in", "enumerate", "(", "trans_cls", ")", ":", "\n", "        ", "zeros", "[", ":", ",", "id", "*", "cell_width", ":", "(", "(", "id", "+", "1", ")", "*", "cell_width", ")", "]", "=", "id", "\n", "", "p", "=", "get_color_pallete", "(", "zeros", ",", "'transparent11'", ")", "\n", "rgb", "=", "cv2", ".", "cvtColor", "(", "np", ".", "asarray", "(", "p", ".", "convert", "(", "'RGB'", ")", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "rgb", "[", "100", ":", "150", ",", ":", ",", ":", "]", "=", "(", "255", ",", "255", ",", "255", ")", "\n", "for", "id", ",", "cls", "in", "enumerate", "(", "trans_cls", ")", ":", "\n", "        ", "c", "=", "trans10kv2pallete", "[", "id", "*", "3", ":", "(", "(", "id", "+", "1", ")", "*", "3", ")", "]", "\n", "c", "=", "c", "[", ":", ":", "-", "1", "]", "\n", "cv2", ".", "putText", "(", "rgb", ",", "cls", ",", "(", "id", "*", "cell_width", ",", "120", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.5", ",", "c", ",", "2", ")", "\n", "\n", "", "cv2", ".", "imwrite", "(", "'pallete.png'", ",", "rgb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.obstacle_detect": [[578, 607], ["pred_coco.astype", "numpy.isin", "numpy.where", "numpy.where", "left_obstacle.mean.flatten", "left_obstacle.mean.mean", "middle_obstacle.mean.flatten", "middle_obstacle.mean.mean", "right_obstacle.mean.flatten", "right_obstacle.mean.mean", "numpy.zeros", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean"], ["", "def", "obstacle_detect", "(", "pred_coco", ",", "d", ")", ":", "\n", "    ", "global", "n_obstacle", "\n", "pred_coco_img", "=", "pred_coco", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "m", "=", "np", ".", "isin", "(", "cv2", ".", "resize", "(", "pred_coco_img", ",", "(", "d", ".", "shape", "[", "1", "]", ",", "d", ".", "shape", "[", "0", "]", ")", ")", ",", "walkable", ")", "\n", "depth", "=", "np", ".", "where", "(", "~", "m", ",", "d", ",", "5000", ")", "\n", "depth", "=", "np", ".", "where", "(", "depth", ">", "1", ",", "depth", ",", "5000", ")", "\n", "w", "=", "320", "#640", "\n", "region_obstacle", "=", "depth", "[", ":", ",", ":", "]", "# all region", "\n", "left_obstacle", "=", "region_obstacle", "[", ":", ",", ":", "w", "//", "3", "]", "\n", "left_obstacle", "=", "left_obstacle", ".", "flatten", "(", ")", "\n", "left_obstacle", "=", "left_obstacle", "[", "left_obstacle", "!=", "5000", "]", "\n", "left_obstacle", "=", "left_obstacle", ".", "mean", "(", ")", "\n", "middle_obstacle", "=", "region_obstacle", "[", ":", ",", "w", "//", "3", ":", "w", "-", "w", "//", "3", "]", "\n", "middle_obstacle", "=", "middle_obstacle", ".", "flatten", "(", ")", "\n", "middle_obstacle", "=", "middle_obstacle", "[", "middle_obstacle", "!=", "5000", "]", "\n", "middle_obstacle", "=", "middle_obstacle", ".", "mean", "(", ")", "\n", "right_obstacle", "=", "region_obstacle", "[", ":", ",", "w", "-", "w", "//", "3", ":", "]", "\n", "right_obstacle", "=", "right_obstacle", ".", "flatten", "(", ")", "\n", "right_obstacle", "=", "right_obstacle", "[", "right_obstacle", "!=", "5000", "]", "\n", "right_obstacle", "=", "right_obstacle", ".", "mean", "(", ")", "\n", "obstacle_mask", "=", "np", ".", "zeros", "(", "(", "depth", ".", "shape", "[", "0", "]", ",", "depth", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "obstacle_mask", "[", ":", ",", ":", ",", ":", "3", "]", "[", "depth", "<", "obstacle_distance", "]", "=", "(", "128", ",", "128", ",", "128", ")", "\n", "obstacle_mask", "[", ":", ",", ":", ",", ":", "3", "]", "[", "depth", "<", "1", "]", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "\n", "\n", "obstacle_mask", "[", ":", ",", "w", "//", "3", ":", "w", "//", "3", "+", "3", ",", ":", "3", "]", "=", "(", "0", ",", "0", ",", "255", ")", "\n", "obstacle_mask", "[", ":", ",", "w", "-", "w", "//", "3", ":", "w", "-", "w", "//", "3", "+", "3", ",", ":", "3", "]", "=", "(", "0", ",", "0", ",", "255", ")", "\n", "return", "obstacle_mask", ",", "left_obstacle", ",", "middle_obstacle", ",", "right_obstacle", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.is_transparent": [[608, 633], ["numpy.logical_or", "print", "round", "round", "round", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.count_nonzero", "max", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.count_nonzero"], "function", ["None"], ["", "def", "is_transparent", "(", "pred_trans", ")", ":", "\n", "    ", "ratio_transparent", "=", "0.5", "\n", "mask", "=", "np", ".", "logical_or", "(", "pred_trans", "==", "4", ",", "pred_trans", "==", "5", ",", "pred_trans", "==", "8", ")", "\n", "left", ",", "middle", ",", "right", "=", "mask", "[", ":", ",", ":", "170", "]", ",", "mask", "[", ":", ",", "170", ":", "342", "]", ",", "mask", "[", ":", ",", "342", ":", "]", "\n", "lw", ",", "mw", ",", "rw", "=", "np", ".", "count_nonzero", "(", "left", ")", "/", "left", ".", "size", ",", "np", ".", "count_nonzero", "(", "middle", ")", "/", "middle", ".", "size", ",", "np", ".", "count_nonzero", "(", "right", ")", "/", "right", ".", "size", "\n", "lw", ",", "mw", ",", "rw", "=", "round", "(", "lw", ",", "2", ")", ",", "round", "(", "mw", ",", "2", ")", ",", "round", "(", "rw", ",", "2", ")", "\n", "l", "=", "lw", ">", "ratio_transparent", "\n", "m", "=", "mw", ">", "ratio_transparent", "\n", "r", "=", "rw", ">", "ratio_transparent", "\n", "# --- object", "\n", "print", "(", "\"transparent ratio (l, m, r):\"", ",", "lw", ",", "mw", ",", "rw", ")", "\n", "text", "=", "None", "\n", "if", "l", "or", "m", "or", "r", ":", "\n", "        ", "windows", "=", "np", ".", "count_nonzero", "(", "pred_trans", "==", "4", ")", "\n", "doors", "=", "np", ".", "count_nonzero", "(", "pred_trans", "==", "5", ")", "\n", "walls", "=", "np", ".", "count_nonzero", "(", "pred_trans", "==", "8", ")", "\n", "max_trans", "=", "max", "(", "windows", ",", "doors", ",", "walls", ")", "\n", "if", "windows", "==", "max_trans", ":", "\n", "            ", "text", "=", "'window'", "\n", "", "elif", "doors", "==", "max_trans", ":", "\n", "            ", "text", "=", "'door'", "\n", "", "else", ":", "\n", "            ", "text", "=", "'wall'", "\n", "\n", "", "", "return", "mask", ",", "l", ",", "m", ",", "r", ",", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.is_transparent_2": [[634, 651], ["numpy.logical_or", "max", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.count_nonzero"], "function", ["None"], ["", "def", "is_transparent_2", "(", "pred_trans", ")", ":", "\n", "    ", "ratio_transparent", "=", "0.5", "\n", "mask", "=", "np", ".", "logical_or", "(", "pred_trans", "==", "4", ",", "pred_trans", "==", "5", ",", "pred_trans", "==", "8", ")", "\n", "text", "=", "None", "\n", "windows", "=", "np", ".", "count_nonzero", "(", "pred_trans", "==", "4", ")", "/", "pred_trans", ".", "size", "\n", "doors", "=", "np", ".", "count_nonzero", "(", "pred_trans", "==", "5", ")", "/", "pred_trans", ".", "size", "\n", "walls", "=", "np", ".", "count_nonzero", "(", "pred_trans", "==", "8", ")", "/", "pred_trans", ".", "size", "\n", "max_trans", "=", "max", "(", "windows", ",", "doors", ",", "walls", ")", "\n", "if", "max_trans", ">", "ratio_transparent", ":", "\n", "        ", "if", "windows", "==", "max_trans", ":", "\n", "            ", "text", "=", "'glass window'", "\n", "", "elif", "doors", "==", "max_trans", ":", "\n", "            ", "text", "=", "'glass door'", "\n", "", "else", ":", "\n", "            ", "text", "=", "'glass wall'", "\n", "\n", "", "", "return", "mask", ",", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.interest_detect": [[653, 689], ["cv2.resize", "numpy.zeros", "max", "enumerate", "numpy.unique", "numpy.zeros_like", "cv2.findContours", "max", "numpy.zeros_like", "cv2.drawContours", "cv2.boundingRect", "numpy.mean", "cv2.rectangle", "cv2.putText", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean"], ["", "def", "interest_detect", "(", "pred_coco", ",", "pred_trans", ",", "depth", ")", ":", "\n", "    ", "masks", "=", "{", "}", "\n", "h", ",", "w", "=", "pred_coco", ".", "shape", "\n", "d", "=", "cv2", ".", "resize", "(", "depth", ",", "pred_coco", ".", "shape", "[", ":", "2", "]", ")", "\n", "pred_coco_rgb", "=", "np", ".", "zeros", "(", "(", "pred_coco", ".", "shape", "[", "0", "]", ",", "pred_coco", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "init_distance", "=", "max", "(", "pred_coco", ".", "shape", ")", "\n", "fx", ",", "fy", "=", "h", "//", "2", ",", "w", "//", "2", "\n", "center_obj", "=", "None", "\n", "distance_obj", "=", "6000", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "interest", ")", ":", "\n", "        ", "if", "idx", "in", "np", ".", "unique", "(", "pred_coco", ")", ":", "\n", "            ", "key", "=", "coco_id_name", "[", "idx", "]", "\n", "mask", "=", "np", ".", "zeros_like", "(", "pred_coco", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mask", "[", "pred_coco", "==", "idx", "]", "=", "255", "\n", "contours", ",", "_", "=", "cv2", ".", "findContours", "(", "mask", ",", "cv2", ".", "RETR_LIST", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "max_c", "=", "max", "(", "contours", ",", "key", "=", "cv2", ".", "contourArea", ")", "\n", "max_mask", "=", "np", ".", "zeros_like", "(", "pred_coco", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cv2", ".", "drawContours", "(", "max_mask", ",", "[", "max_c", "]", ",", "-", "1", ",", "1", ",", "-", "1", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "cv2", ".", "boundingRect", "(", "max_c", ")", "\n", "cx", ",", "cy", "=", "x", "+", "w", "//", "2", ",", "y", "+", "h", "//", "2", "\n", "# --- depth < 2m", "\n", "dist_obj", "=", "np", ".", "mean", "(", "d", "[", "max_mask", "==", "1", "]", ")", "\n", "if", "dist_obj", ">", "3000", "or", "cx", "<", "h", "//", "4", "or", "cx", ">", "h", "//", "4", "*", "3", ":", "\n", "                ", "continue", "\n", "", "masks", "[", "key", "]", "=", "max_mask", "\n", "rgb", "=", "coco_plattet172", "[", "idx", "]", "\n", "pred_coco_rgb", "[", ":", ",", ":", ",", ":", "3", "]", "[", "pred_coco", "==", "idx", "]", "=", "rgb", "\n", "pred_coco_rgb", "=", "cv2", ".", "rectangle", "(", "pred_coco_rgb", ",", "(", "x", ",", "y", ")", ",", "(", "x", "+", "w", ",", "y", "+", "h", ")", ",", "rgb", ",", "2", ")", "\n", "cv2", ".", "putText", "(", "pred_coco_rgb", ",", "key", ",", "(", "x", "+", "10", ",", "y", "+", "20", ")", ",", "cv2", ".", "FONT_HERSHEY_DUPLEX", ",", "0.9", ",", "rgb", ",", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n", "d2c", "=", "math", ".", "sqrt", "(", "(", "fx", "-", "cx", ")", "**", "2", "+", "(", "fy", "-", "cy", ")", "**", "2", ")", "\n", "if", "d2c", "<", "init_distance", ":", "\n", "                ", "init_distance", "=", "d2c", "\n", "center_obj", "=", "key", "\n", "distance_obj", "=", "dist_obj", "\n", "", "", "", "return", "pred_coco_rgb", ",", "center_obj", ",", "distance_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.orientation": [[690, 711], ["numpy.isin", "max", "round", "round", "round", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.count_nonzero"], "function", ["None"], ["", "def", "orientation", "(", "pred_coco", ")", ":", "\n", "    ", "text", "=", "None", "\n", "left_str", "=", "'left'", "\n", "right_str", "=", "'right'", "\n", "middle_str", "=", "'forward'", "\n", "global", "n_left", ",", "n_middle", ",", "n_right", "\n", "m", "=", "np", ".", "isin", "(", "pred_coco", ",", "walkable", ")", "\n", "left", ",", "middle", ",", "right", "=", "m", "[", ":", ",", ":", "170", "]", ",", "m", "[", ":", ",", "170", ":", "342", "]", ",", "m", "[", ":", ",", "342", ":", "]", "\n", "lw", ",", "mw", ",", "rw", "=", "np", ".", "count_nonzero", "(", "left", ")", "/", "left", ".", "size", ",", "np", ".", "count_nonzero", "(", "middle", ")", "/", "middle", ".", "size", ",", "np", ".", "count_nonzero", "(", "right", ")", "/", "right", ".", "size", "\n", "lw", ",", "mw", ",", "rw", "=", "round", "(", "lw", ",", "2", ")", ",", "round", "(", "mw", ",", "2", ")", ",", "round", "(", "rw", ",", "2", ")", "\n", "max_walkable", "=", "max", "(", "[", "lw", ",", "mw", ",", "rw", "]", ")", "\n", "if", "max_walkable", ">", "0.2", ":", "\n", "        ", "if", "lw", "==", "max_walkable", ":", "\n", "            ", "n_left", "+=", "1", "\n", "text", "=", "left_str", "\n", "", "elif", "rw", "==", "max_walkable", ":", "\n", "            ", "n_right", "+=", "1", "\n", "text", "=", "right_str", "\n", "", "else", ":", "\n", "            ", "n_middle", "+=", "1", "\n", "text", "=", "middle_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.demo.postprocess": [[712, 719], ["numpy.zeros", "numpy.isin"], "function", ["None"], ["", "", "", "def", "postprocess", "(", "pred_coco", ",", "pred_trans", ")", ":", "\n", "    ", "mask_floor", "=", "np", ".", "zeros", "(", "(", "512", ",", "512", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "m", "=", "np", ".", "isin", "(", "pred_coco", ",", "walkable", ")", "\n", "mask_floor", "[", ":", ",", ":", ",", ":", "3", "]", "[", "m", "]", "=", "(", "152", ",", "251", ",", "152", ")", "\n", "mask_floor", "[", ":", ",", "168", ":", "170", ",", ":", "3", "]", "=", "(", "0", ",", "0", ",", "255", ")", "\n", "mask_floor", "[", ":", ",", "342", ":", "344", ",", ":", "3", "]", "=", "(", "0", ",", "0", ",", "255", ")", "\n", "return", "mask_floor", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.None.setup.get_extensions": [[13, 61], ["os.path.dirname", "os.path.join", "os.path.join", "glob.glob", "os.path.abspath", "os.path.join", "glob.glob", "glob.glob", "os.environ.get", "os.path.join", "extension", "os.path.join", "os.path.join", "torch.cuda.is_available", "os.getenv", "extra_compile_args[].append"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get"], ["def", "get_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "extensions_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"segmentron\"", ",", "\"modules\"", ",", "\"csrc\"", ")", "\n", "\n", "main_source", "=", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"vision.cpp\"", ")", "\n", "sources", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"**\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"**\"", ",", "\"*.cu\"", ")", ")", "+", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"*.cu\"", ")", "\n", ")", "\n", "\n", "sources", "=", "[", "main_source", "]", "+", "sources", "\n", "\n", "extension", "=", "CppExtension", "\n", "\n", "extra_compile_args", "=", "{", "\"cxx\"", ":", "[", "]", "}", "\n", "define_macros", "=", "[", "]", "\n", "\n", "if", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ")", "or", "os", ".", "getenv", "(", "\"FORCE_CUDA\"", ",", "\"0\"", ")", "==", "\"1\"", ":", "\n", "        ", "extension", "=", "CUDAExtension", "\n", "sources", "+=", "source_cuda", "\n", "define_macros", "+=", "[", "(", "\"WITH_CUDA\"", ",", "None", ")", "]", "\n", "extra_compile_args", "[", "\"nvcc\"", "]", "=", "[", "\n", "\"-DCUDA_HAS_FP16=1\"", ",", "\n", "\"-D__CUDA_NO_HALF_OPERATORS__\"", ",", "\n", "\"-D__CUDA_NO_HALF_CONVERSIONS__\"", ",", "\n", "\"-D__CUDA_NO_HALF2_OPERATORS__\"", ",", "\n", "]", "\n", "\n", "# It's better if pytorch can do this by default ..", "\n", "CC", "=", "os", ".", "environ", ".", "get", "(", "\"CC\"", ",", "None", ")", "\n", "if", "CC", "is", "not", "None", ":", "\n", "            ", "extra_compile_args", "[", "\"nvcc\"", "]", ".", "append", "(", "\"-ccbin={}\"", ".", "format", "(", "CC", ")", ")", "\n", "\n", "", "", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "\n", "include_dirs", "=", "[", "extensions_dir", "]", "\n", "\n", "ext_modules", "=", "[", "\n", "extension", "(", "\n", "\"segmentron._C\"", ",", "\n", "sources", ",", "\n", "include_dirs", "=", "include_dirs", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ",", "\n", ")", "\n", "]", "\n", "\n", "return", "ext_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.demo.demo": [[18, 57], ["segmentron.utils.options.parse_args", "segmentron.config.cfg.update_from_file", "segmentron.config.cfg.check_and_freeze", "segmentron.utils.default_setup.default_setup", "os.path.join", "torchvision.transforms.Compose", "segmentron.models.model_zoo.get_segmentation_model().to", "get_segmentation_model().to.eval", "os.path.isdir", "os.path.exists", "os.makedirs", "PIL.Image.open().convert", "image.resize.resize", "transforms.Compose.unsqueeze().to", "torch.argmax().squeeze().cpu().data.numpy", "segmentron.utils.visualize.get_color_pallete().resize", "get_color_pallete().resize.save", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "segmentron.models.model_zoo.get_segmentation_model", "os.path.join", "torch.no_grad", "get_segmentation_model().to.", "os.path.join", "os.listdir", "PIL.Image.open", "transforms.Compose.unsqueeze", "segmentron.utils.visualize.get_color_pallete", "os.path.splitext", "torch.argmax().squeeze().cpu", "transforms.Compose.", "os.path.split", "torch.argmax().squeeze", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.options.parse_args", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.update_from_file", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.check_and_freeze", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.default_setup.default_setup", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.eval", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.model_zoo.get_segmentation_model", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.get_color_pallete"], ["cur_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", "\n", "root_path", "=", "os", ".", "path", ".", "split", "(", "cur_path", ")", "[", "0", "]", "\n", "sys", ".", "path", ".", "append", "(", "root_path", ")", "\n", "\n", "from", "torchvision", "import", "transforms", "\n", "from", "PIL", "import", "Image", "\n", "from", "segmentron", ".", "utils", ".", "visualize", "import", "get_color_pallete", "\n", "from", "segmentron", ".", "models", ".", "model_zoo", "import", "get_segmentation_model", "\n", "from", "segmentron", ".", "utils", ".", "options", "import", "parse_args", "\n", "from", "segmentron", ".", "utils", ".", "default_setup", "import", "default_setup", "\n", "from", "segmentron", ".", "config", "import", "cfg", "\n", "from", "segmentron", ".", "data", ".", "dataloader", ".", "cocostuff", "import", "IDNAME", ",", "MAPPING", "\n", "\n", "coco_plattet182", "=", "[", "\n", "[", "167", ",", "200", ",", "7", "]", ",", "\n", "[", "127", ",", "228", ",", "215", "]", ",", "\n", "[", "26", ",", "135", ",", "248", "]", ",", "\n", "[", "238", ",", "73", ",", "166", "]", ",", "\n", "[", "91", ",", "210", ",", "215", "]", ",", "\n", "[", "122", ",", "20", ",", "236", "]", ",", "\n", "[", "234", ",", "173", ",", "35", "]", ",", "\n", "[", "34", ",", "98", ",", "46", "]", ",", "\n", "[", "115", ",", "11", ",", "206", "]", ",", "\n", "[", "52", ",", "251", ",", "238", "]", ",", "\n", "[", "209", ",", "156", ",", "236", "]", ",", "\n", "[", "239", ",", "10", ",", "0", "]", ",", "\n", "[", "26", ",", "122", ",", "36", "]", ",", "\n", "[", "162", ",", "181", ",", "66", "]", ",", "\n", "[", "26", ",", "64", ",", "22", "]", ",", "\n", "[", "46", ",", "226", ",", "200", "]", ",", "\n", "[", "89", ",", "176", ",", "6", "]", ",", "\n", "[", "103", ",", "36", ",", "32", "]", ",", "\n", "[", "74", ",", "89", ",", "159", "]", ",", "\n", "[", "250", ",", "215", ",", "25", "]", ",", "\n", "[", "57", ",", "246", ",", "82", "]", ",", "\n", "[", "51", ",", "156", ",", "111", "]", ",", "\n", "[", "139", ",", "114", ",", "219", "]", ",", "\n", "[", "65", ",", "208", ",", "253", "]", ",", "\n", "[", "33", ",", "184", ",", "119", "]", ",", "\n", "[", "230", ",", "239", ",", "58", "]", ",", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train_joint.Trainer.__init__": [[39, 180], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.transforms.Compose", "segmentron.data.dataloader.get_segmentation_dataset", "segmentron.data.dataloader.get_segmentation_dataset", "segmentron.data.dataloader.get_segmentation_dataset", "make_data_sampler", "make_batch_data_sampler", "make_data_sampler", "make_batch_data_sampler", "make_data_sampler", "make_batch_data_sampler", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "segmentron.data.dataloader.get_segmentation_dataset", "segmentron.data.dataloader.get_segmentation_dataset", "segmentron.data.dataloader.get_segmentation_dataset", "make_data_sampler", "make_batch_data_sampler", "make_data_sampler", "make_batch_data_sampler", "make_data_sampler", "make_batch_data_sampler", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "segmentron.models.model_zoo.get_segmentation_model().to", "segmentron.solver.loss.get_segmentation_loss().to", "segmentron.solver.loss.get_segmentation_loss().to", "segmentron.solver.optimizer.get_optimizer", "segmentron.solver.lr_scheduler.get_scheduler", "segmentron.utils.score.SegmentationMetric", "len", "len", "get_rank", "logging.info", "apex.amp.initialize", "logging.info", "os.path.isfile", "os.path.splitext", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train_joint.Trainer.model.load_state_dict", "logging.info", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "segmentron.models.model_zoo.get_segmentation_model", "segmentron.utils.visualize.show_flops_params", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "logging.info", "logging.info", "segmentron.solver.loss.get_segmentation_loss", "segmentron.solver.loss.get_segmentation_loss", "train_joint.Trainer.model.cuda", "logging.info", "train_joint.Trainer.optimizer.load_state_dict", "train_joint.Trainer.lr_scheduler.load_state_dict", "copy.deepcopy", "logging.warning"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.optimizer.get_optimizer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.get_scheduler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.model_zoo.get_segmentation_model", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.show_flops_params", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.get_segmentation_loss", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.get_segmentation_loss"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "self", ".", "use_fp16", "=", "cfg", ".", "TRAIN", ".", "APEX", "\n", "\n", "# image transform", "\n", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cfg", ".", "DATASET", ".", "MEAN", ",", "cfg", ".", "DATASET", ".", "STD", ")", ",", "\n", "]", ")", "\n", "# dataset and dataloader", "\n", "data_kwargs", "=", "{", "'transform'", ":", "input_transform", ",", "\n", "'base_size'", ":", "cfg", ".", "TRAIN", ".", "BASE_SIZE", ",", "\n", "'crop_size'", ":", "cfg", ".", "TRAIN", ".", "CROP_SIZE", "}", "\n", "\n", "data_kwargs_testval", "=", "{", "'transform'", ":", "input_transform", ",", "\n", "'base_size'", ":", "cfg", ".", "TRAIN", ".", "BASE_SIZE", ",", "\n", "'crop_size'", ":", "cfg", ".", "TEST", ".", "CROP_SIZE", "}", "\n", "\n", "# ------------- dataset 1", "\n", "train_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ",", "split", "=", "'train'", ",", "mode", "=", "'train'", ",", "**", "data_kwargs", ")", "\n", "val_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ",", "split", "=", "'val'", ",", "mode", "=", "'testval'", ",", "**", "data_kwargs_testval", ")", "\n", "test_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ",", "split", "=", "'test'", ",", "mode", "=", "'testval'", ",", "**", "data_kwargs_testval", ")", "\n", "self", ".", "classes_1", "=", "test_dataset", ".", "classes", "\n", "\n", "self", ".", "iters_per_epoch_1", "=", "len", "(", "train_dataset", ")", "//", "(", "args", ".", "num_gpus", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ")", "\n", "self", ".", "max_iters_1", "=", "cfg", ".", "TRAIN", ".", "EPOCHS", "*", "self", ".", "iters_per_epoch_1", "\n", "\n", "train_sampler", "=", "make_data_sampler", "(", "train_dataset", ",", "shuffle", "=", "True", ",", "distributed", "=", "args", ".", "distributed", ")", "\n", "train_batch_sampler", "=", "make_batch_data_sampler", "(", "train_sampler", ",", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "self", ".", "max_iters_1", ",", "drop_last", "=", "True", ")", "\n", "\n", "val_sampler", "=", "make_data_sampler", "(", "val_dataset", ",", "False", ",", "args", ".", "distributed", ")", "\n", "val_batch_sampler", "=", "make_batch_data_sampler", "(", "val_sampler", ",", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_sampler", "=", "make_data_sampler", "(", "test_dataset", ",", "False", ",", "args", ".", "distributed", ")", "\n", "test_batch_sampler", "=", "make_batch_data_sampler", "(", "test_sampler", ",", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "drop_last", "=", "False", ")", "\n", "\n", "self", ".", "train_loader_1", "=", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_sampler", "=", "train_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "self", ".", "val_loader_1", "=", "data", ".", "DataLoader", "(", "dataset", "=", "val_dataset", ",", "\n", "batch_sampler", "=", "val_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "self", ".", "test_loader_1", "=", "data", ".", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "\n", "batch_sampler", "=", "test_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "# ------------- dataset 2", "\n", "train_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET_2", ".", "NAME", ",", "split", "=", "'train'", ",", "mode", "=", "'train'", ",", "**", "data_kwargs", ")", "\n", "val_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET_2", ".", "NAME", ",", "split", "=", "'val'", ",", "mode", "=", "'testval'", ",", "**", "data_kwargs_testval", ")", "\n", "test_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET_2", ".", "NAME", ",", "split", "=", "'test'", ",", "mode", "=", "'testval'", ",", "**", "data_kwargs_testval", ")", "\n", "self", ".", "classes_2", "=", "test_dataset", ".", "classes", "\n", "\n", "self", ".", "iters_per_epoch_2", "=", "len", "(", "train_dataset", ")", "//", "(", "args", ".", "num_gpus", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ")", "\n", "self", ".", "max_iters_2", "=", "cfg", ".", "TRAIN", ".", "EPOCHS", "*", "self", ".", "iters_per_epoch_2", "\n", "\n", "train_sampler", "=", "make_data_sampler", "(", "train_dataset", ",", "shuffle", "=", "True", ",", "distributed", "=", "args", ".", "distributed", ")", "\n", "train_batch_sampler", "=", "make_batch_data_sampler", "(", "train_sampler", ",", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "self", ".", "max_iters_2", ",", "drop_last", "=", "True", ")", "\n", "\n", "val_sampler", "=", "make_data_sampler", "(", "val_dataset", ",", "False", ",", "args", ".", "distributed", ")", "\n", "val_batch_sampler", "=", "make_batch_data_sampler", "(", "val_sampler", ",", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_sampler", "=", "make_data_sampler", "(", "test_dataset", ",", "False", ",", "args", ".", "distributed", ")", "\n", "test_batch_sampler", "=", "make_batch_data_sampler", "(", "test_sampler", ",", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "drop_last", "=", "False", ")", "\n", "\n", "self", ".", "train_loader_2", "=", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_sampler", "=", "train_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "self", ".", "val_loader_2", "=", "data", ".", "DataLoader", "(", "dataset", "=", "val_dataset", ",", "\n", "batch_sampler", "=", "val_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "self", ".", "test_loader_2", "=", "data", ".", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "\n", "batch_sampler", "=", "test_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "# create network", "\n", "self", ".", "model", "=", "get_segmentation_model", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# print params and flops", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "show_flops_params", "(", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", ",", "args", ".", "device", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logging", ".", "warning", "(", "'get flops and params error: {}'", ".", "format", "(", "e", ")", ")", "\n", "", "", "if", "cfg", ".", "MODEL", ".", "BN_TYPE", "not", "in", "[", "'BN'", "]", ":", "\n", "            ", "logging", ".", "info", "(", "'Batch norm type is {}, convert_sync_batchnorm is not effective'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_TYPE", ")", ")", "\n", "", "elif", "args", ".", "distributed", "and", "cfg", ".", "TRAIN", ".", "SYNC_BATCH_NORM", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "self", ".", "model", ")", "\n", "logging", ".", "info", "(", "'SyncBatchNorm is effective!'", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'Not use SyncBatchNorm!'", ")", "\n", "# create criterion", "\n", "", "self", ".", "criterion", "=", "get_segmentation_loss", "(", "cfg", ".", "MODEL", ".", "MODEL_NAME", ",", "use_ohem", "=", "cfg", ".", "SOLVER", ".", "OHEM", ",", "\n", "aux", "=", "cfg", ".", "SOLVER", ".", "AUX", ",", "aux_weight", "=", "cfg", ".", "SOLVER", ".", "AUX_WEIGHT", ",", "\n", "ignore_index", "=", "cfg", ".", "DATASET", ".", "IGNORE_INDEX", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# for transparent dataset", "\n", "self", ".", "criterion_2", "=", "get_segmentation_loss", "(", "cfg", ".", "MODEL", ".", "MODEL_NAME", ",", "use_ohem", "=", "cfg", ".", "SOLVER", ".", "OHEM", ",", "\n", "aux", "=", "cfg", ".", "SOLVER", ".", "AUX", ",", "aux_weight", "=", "cfg", ".", "SOLVER", ".", "AUX_WEIGHT", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# optimizer, for model just includes encoder, decoder(head and auxlayer).", "\n", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "model", ")", "\n", "# apex", "\n", "if", "self", ".", "use_fp16", ":", "\n", "            ", "self", ".", "model", ",", "self", ".", "optimizer", "=", "apex", ".", "amp", ".", "initialize", "(", "self", ".", "model", ".", "cuda", "(", ")", ",", "self", ".", "optimizer", ",", "opt_level", "=", "\"O1\"", ")", "\n", "logging", ".", "info", "(", "'**** Initializing mixed precision done. ****'", ")", "\n", "\n", "# lr scheduling", "\n", "", "self", ".", "lr_scheduler", "=", "get_scheduler", "(", "self", ".", "optimizer", ",", "max_iters", "=", "self", ".", "max_iters_1", ",", "iters_per_epoch", "=", "self", ".", "iters_per_epoch_1", ")", "\n", "# resume checkpoint if needed", "\n", "self", ".", "start_epoch", "=", "0", "\n", "if", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "args", ".", "resume", ")", "\n", "assert", "ext", "==", "'.pkl'", "or", "'.pth'", ",", "'Sorry only .pth and .pkl files supported.'", "\n", "logging", ".", "info", "(", "'Resuming training, loading {}...'", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "resume_sate", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "resume_sate", "[", "'state_dict'", "]", ")", "\n", "self", ".", "start_epoch", "=", "resume_sate", "[", "'epoch'", "]", "\n", "logging", ".", "info", "(", "'resume train from epoch: {}'", ".", "format", "(", "self", ".", "start_epoch", ")", ")", "\n", "if", "resume_sate", "[", "'optimizer'", "]", "is", "not", "None", "and", "resume_sate", "[", "'lr_scheduler'", "]", "is", "not", "None", ":", "\n", "                ", "logging", ".", "info", "(", "'resume optimizer and lr scheduler from resume state..'", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "resume_sate", "[", "'optimizer'", "]", ")", "\n", "self", ".", "lr_scheduler", ".", "load_state_dict", "(", "resume_sate", "[", "'lr_scheduler'", "]", ")", "\n", "\n", "", "", "if", "args", ".", "distributed", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "# evaluation metrics", "\n", "", "self", ".", "metric", "=", "SegmentationMetric", "(", "train_dataset", ".", "num_class", ",", "args", ".", "distributed", ")", "\n", "\n", "self", ".", "best_val_mIoU", "=", "0.", "\n", "self", ".", "best_test_mIoU", "=", "0.", "\n", "self", ".", "cur_val_mIoU", "=", "0.", "\n", "self", ".", "cur_test_mIoU", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train_joint.Trainer.train": [[181, 242], ["time.time", "logging.info", "train_joint.Trainer.model.train", "str", "logging.info", "get_rank", "images.to.to.to", "targets.to.to.to", "train_joint.Trainer.model", "train_joint.Trainer.criterion", "sum", "reduce_loss_dict", "sum", "train_joint.Trainer.optimizer.zero_grad", "train_joint.Trainer.optimizer.step", "train_joint.Trainer.lr_scheduler.step", "str", "time.time", "datetime.timedelta", "sum.backward", "datetime.timedelta", "logging.info", "segmentron.utils.filesystem.save_checkpoint", "train_joint.Trainer.validation", "train_joint.Trainer.test", "train_joint.Trainer.model.train", "segmentron.utils.filesystem.save_checkpoint", "apex.amp.scale_loss", "scaled_loss.backward", "train_joint.Trainer.values", "reduce_loss_dict.values", "time.time", "int", "sum.item", "str", "datetime.timedelta", "int", "time.time"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.train", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.reduce_loss_dict", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.AllReduce.backward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.save_checkpoint", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.validation", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.test", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.train", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.save_checkpoint", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.AllReduce.backward"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "save_to_disk", "=", "get_rank", "(", ")", "==", "0", "\n", "epochs", ",", "max_iters", ",", "iters_per_epoch", "=", "cfg", ".", "TRAIN", ".", "EPOCHS", ",", "self", ".", "max_iters_1", ",", "self", ".", "iters_per_epoch_1", "\n", "log_per_iters", ",", "val_per_iters", "=", "self", ".", "args", ".", "log_iter", ",", "self", ".", "args", ".", "val_epoch", "*", "self", ".", "iters_per_epoch_1", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "'Start training, Total Epochs: {:d} = Total Iterations {:d}'", ".", "format", "(", "epochs", ",", "max_iters", ")", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "iteration", "=", "self", ".", "start_epoch", "*", "iters_per_epoch", "if", "self", ".", "start_epoch", ">", "0", "else", "0", "\n", "for", "(", "images", ",", "targets", ",", "_", ")", "in", "self", ".", "train_loader_1", ":", "\n", "            ", "epoch", "=", "iteration", "//", "iters_per_epoch", "+", "1", "\n", "iteration", "+=", "1", "\n", "\n", "images", "=", "images", ".", "to", "(", "self", ".", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "outputs", "=", "self", ".", "model", "(", "images", ")", "\n", "loss_dict", "=", "self", ".", "criterion", "(", "outputs", ",", "targets", ")", "\n", "losses", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "use_fp16", ":", "\n", "                ", "with", "apex", ".", "amp", ".", "scale_loss", "(", "losses", ",", "self", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "losses", ".", "backward", "(", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "eta_seconds", "=", "(", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "iteration", ")", "*", "(", "max_iters", "-", "iteration", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "iteration", "%", "log_per_iters", "==", "0", "and", "self", ".", "save_to_disk", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "\"Epoch: {:d}/{:d} || Iters: {:d}/{:d} || Lr: {:.6f} || \"", "\n", "\"Loss: {:.4f} || Cost Time: {} || Estimated Time: {}\"", ".", "format", "(", "\n", "epoch", ",", "epochs", ",", "iteration", "%", "iters_per_epoch", ",", "iters_per_epoch", ",", "\n", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "losses_reduced", ".", "item", "(", ")", ",", "\n", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", ",", "\n", "eta_string", ")", ")", "\n", "\n", "", "if", "iteration", "%", "self", ".", "iters_per_epoch_1", "==", "0", "and", "self", ".", "save_to_disk", ":", "\n", "                ", "save_checkpoint", "(", "self", ".", "model", ",", "epoch", ",", "self", ".", "optimizer", ",", "self", ".", "lr_scheduler", ",", "is_best", "=", "False", ")", "\n", "\n", "", "if", "not", "self", ".", "args", ".", "skip_val", "and", "iteration", "%", "val_per_iters", "==", "0", ":", "\n", "                ", "self", ".", "validation", "(", "epoch", ")", "\n", "self", ".", "test", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "", "if", "self", ".", "cur_test_mIoU", ">", "self", ".", "best_test_mIoU", ":", "\n", "                ", "self", ".", "best_test_mIoU", "=", "self", ".", "cur_test_mIoU", "\n", "save_checkpoint", "(", "self", ".", "model", ",", "epoch", ",", "is_best", "=", "True", ")", "\n", "\n", "\n", "", "", "total_training_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_training_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_training_time", ")", ")", "\n", "logging", ".", "info", "(", "\"Total training time: {} ({:.4f}s / it)\"", ".", "format", "(", "total_training_str", ",", "\n", "total_training_time", "/", "max_iters", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train_joint.Trainer.validation": [[243, 271], ["train_joint.Trainer.metric.reset", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model.eval", "enumerate", "train_joint.Trainer.metric.get", "logging.info", "synchronize", "image.to.to.to", "target.to.to.to", "train_joint.Trainer.metric.update", "train_joint.Trainer.metric.get", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "image.to.to.size", "model"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.reset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.eval", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.synchronize", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.update", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get"], ["", "def", "validation", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "metric", ".", "reset", "(", ")", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "            ", "model", "=", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "i", ",", "(", "image", ",", "target", ",", "filename", ")", "in", "enumerate", "(", "self", ".", "val_loader_1", ")", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "cfg", ".", "DATASET", ".", "MODE", "==", "'val'", "or", "cfg", ".", "TEST", ".", "CROP_SIZE", "is", "None", ":", "\n", "                    ", "output", "=", "model", "(", "image", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "size", "=", "image", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "assert", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "0", "]", "==", "size", "[", "0", "]", "\n", "assert", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "1", "]", "==", "size", "[", "1", "]", "\n", "output", "=", "model", "(", "image", ")", "[", "0", "]", "\n", "\n", "", "", "self", ".", "metric", ".", "update", "(", "output", ",", "target", ")", "\n", "pixAcc", ",", "mIoU", ",", "category_iou", "=", "self", ".", "metric", ".", "get", "(", "return_category_iou", "=", "True", ")", "\n", "logging", ".", "info", "(", "\"[EVAL] Sample: {:d}, pixAcc: {:.3f}, mIoU: {:.3f}\"", ".", "format", "(", "i", "+", "1", ",", "pixAcc", "*", "100", ",", "mIoU", "*", "100", ")", ")", "\n", "", "pixAcc", ",", "mIoU", "=", "self", ".", "metric", ".", "get", "(", ")", "\n", "logging", ".", "info", "(", "\"[EVAL END] Epoch: {:d}, pixAcc: {:.3f}, mIoU: {:.3f}\"", ".", "format", "(", "epoch", ",", "pixAcc", "*", "100", ",", "mIoU", "*", "100", ")", ")", "\n", "synchronize", "(", ")", "\n", "self", ".", "cur_val_mIoU", "=", "mIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train_joint.Trainer.test": [[272, 334], ["train_joint.Trainer.metric.reset", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model.eval", "enumerate", "synchronize", "train_joint.Trainer.metric.get", "logging.info", "enumerate", "logging.info", "image.to.to.to", "target.to.to.to", "train_joint.Trainer.metric.update", "train_joint.Trainer.metric.get", "logging.info", "table.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "tabulate.tabulate.tabulate", "PIL.Image.open().resize", "PIL.Image.open().resize.save", "target[].data.cpu().numpy", "segmentron.utils.visualize.get_color_pallete", "segmentron.utils.visualize.get_color_pallete.save", "output[].permute().argmax().data.cpu().numpy", "segmentron.utils.visualize.get_color_pallete", "os.path.join", "segmentron.utils.visualize.get_color_pallete.save", "model", "image.to.to.size", "model", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "PIL.Image.open", "target[].data.cpu", "output[].permute().argmax().data.cpu", "os.path.join", "str", "str", "str", "output[].permute().argmax", "output[].permute"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.reset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.eval", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.synchronize", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.update", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.get_color_pallete", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.get_color_pallete", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs"], ["", "def", "test", "(", "self", ",", "vis", "=", "False", ")", ":", "\n", "        ", "self", ".", "metric", ".", "reset", "(", ")", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "            ", "model", "=", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "i", ",", "(", "image", ",", "target", ",", "filename", ")", "in", "enumerate", "(", "self", ".", "test_loader_1", ")", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "cfg", ".", "DATASET", ".", "MODE", "==", "'test'", "or", "cfg", ".", "TEST", ".", "CROP_SIZE", "is", "None", ":", "\n", "                    ", "output", "=", "model", "(", "image", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "size", "=", "image", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "assert", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "0", "]", "==", "size", "[", "0", "]", "\n", "assert", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "1", "]", "==", "size", "[", "1", "]", "\n", "output", "=", "model", "(", "image", ")", "[", "0", "]", "\n", "\n", "", "", "if", "vis", ":", "\n", "                ", "save_gt", "=", "False", "\n", "if", "save_gt", ":", "\n", "                    ", "test_path", "=", "'/mnt/lustre/xieenze/xez_space/TransparentSeg/datasets/transparent/Trans10K_cls12/test/images'", "\n", "save_path", "=", "'workdirs/trans10kv2/gt_img'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "gt_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "test_path", ",", "filename", "[", "0", "]", ")", ")", ".", "resize", "(", "(", "512", ",", "512", ")", ")", "\n", "gt_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "str", "(", "i", ")", "+", "'.png'", ")", ")", "\n", "\n", "gt_mask", "=", "target", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vis_gt", "=", "get_color_pallete", "(", "gt_mask", ",", "dataset", "=", "'trans10kv2'", ")", "\n", "save_path", "=", "'workdirs/trans10kv2/gt_mask'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "vis_gt", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "str", "(", "i", ")", "+", "'.png'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "vis_pred", "=", "output", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "argmax", "(", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vis_pred", "=", "get_color_pallete", "(", "vis_pred", ",", "dataset", "=", "'trans10kv2'", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "TRAIN", ".", "MODEL_SAVE_DIR", ",", "'vis'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "vis_pred", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "str", "(", "i", ")", "+", "'.png'", ")", ")", "\n", "", "print", "(", "\"[VIS TEST] Sample: {:d}\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "continue", "\n", "\n", "", "self", ".", "metric", ".", "update", "(", "output", ",", "target", ")", "\n", "pixAcc", ",", "mIoU", ",", "category_iou", "=", "self", ".", "metric", ".", "get", "(", "return_category_iou", "=", "True", ")", "\n", "logging", ".", "info", "(", "\"[TEST] Sample: {:d}, pixAcc: {:.3f}, mIoU: {:.3f}\"", ".", "format", "(", "i", "+", "1", ",", "pixAcc", "*", "100", ",", "mIoU", "*", "100", ")", ")", "\n", "\n", "", "synchronize", "(", ")", "\n", "pixAcc", ",", "mIoU", ",", "category_iou", "=", "self", ".", "metric", ".", "get", "(", "return_category_iou", "=", "True", ")", "\n", "logging", ".", "info", "(", "\"[TEST END]  pixAcc: {:.3f}, mIoU: {:.3f}\"", ".", "format", "(", "pixAcc", "*", "100", ",", "mIoU", "*", "100", ")", ")", "\n", "self", ".", "cur_test_mIoU", "=", "mIoU", "\n", "\n", "headers", "=", "[", "'class id'", ",", "'class name'", ",", "'iou'", "]", "\n", "table", "=", "[", "]", "\n", "for", "i", ",", "cls_name", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "table", ".", "append", "(", "[", "cls_name", ",", "category_iou", "[", "i", "]", "]", ")", "\n", "", "logging", ".", "info", "(", "'Category iou: \\n {}'", ".", "format", "(", "tabulate", "(", "table", ",", "headers", ",", "tablefmt", "=", "'grid'", ",", "\n", "showindex", "=", "\"always\"", ",", "numalign", "=", "'center'", ",", "stralign", "=", "'center'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.__init__": [[28, 61], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.transforms.Compose", "segmentron.data.dataloader.get_segmentation_dataset", "segmentron.utils.distributed.make_data_sampler", "segmentron.utils.distributed.make_batch_data_sampler", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "segmentron.models.model_zoo.get_segmentation_model().to", "eval.Evaluator.model.to", "segmentron.utils.score.SegmentationMetric", "hasattr", "hasattr", "logging.info", "eval.Evaluator.set_batch_norm_attr", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "segmentron.models.model_zoo.get_segmentation_model", "eval.Evaluator.model.encoder.named_modules"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.set_batch_norm_attr", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.model_zoo.get_segmentation_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "# image transform", "\n", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cfg", ".", "DATASET", ".", "MEAN", ",", "cfg", ".", "DATASET", ".", "STD", ")", ",", "\n", "]", ")", "\n", "\n", "# dataset and dataloader", "\n", "val_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ",", "split", "=", "'test'", ",", "mode", "=", "'testval'", ",", "transform", "=", "input_transform", ")", "\n", "val_sampler", "=", "make_data_sampler", "(", "val_dataset", ",", "False", ",", "args", ".", "distributed", ")", "\n", "val_batch_sampler", "=", "make_batch_data_sampler", "(", "val_sampler", ",", "images_per_batch", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "drop_last", "=", "False", ")", "\n", "self", ".", "val_loader", "=", "data", ".", "DataLoader", "(", "dataset", "=", "val_dataset", ",", "\n", "batch_sampler", "=", "val_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "self", ".", "classes", "=", "val_dataset", ".", "classes", "\n", "# create network", "\n", "self", ".", "model", "=", "get_segmentation_model", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'encoder'", ")", "and", "hasattr", "(", "self", ".", "model", ".", "encoder", ",", "'named_modules'", ")", "and", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ":", "\n", "            ", "logging", ".", "info", "(", "'set bn custom eps for bn in encoder: {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", ")", "\n", "self", ".", "set_batch_norm_attr", "(", "self", ".", "model", ".", "encoder", ".", "named_modules", "(", ")", ",", "'eps'", ",", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "output_device", "=", "args", ".", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "metric", "=", "SegmentationMetric", "(", "val_dataset", ".", "num_class", ",", "args", ".", "distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.set_batch_norm_attr": [[62, 66], ["isinstance", "isinstance", "setattr"], "methods", ["None"], ["", "def", "set_batch_norm_attr", "(", "self", ",", "named_modules", ",", "attr", ",", "value", ")", ":", "\n", "        ", "for", "m", "in", "named_modules", ":", "\n", "            ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "SyncBatchNorm", ")", ":", "\n", "                ", "setattr", "(", "m", "[", "1", "]", ",", "attr", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.eval": [[67, 102], ["eval.Evaluator.metric.reset", "eval.Evaluator.model.eval", "logging.info", "time.time", "enumerate", "segmentron.utils.distributed.synchronize", "eval.Evaluator.metric.get", "logging.info", "logging.info", "enumerate", "logging.info", "image.to.to.to", "target.to.to.to", "eval.Evaluator.metric.update", "eval.Evaluator.metric.get", "logging.info", "table.append", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.evaluate", "tabulate.tabulate.tabulate", "time.time"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.reset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.eval", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.synchronize", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.update", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase.SegBaseModel.evaluate"], ["", "", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "metric", ".", "reset", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "            ", "model", "=", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "\n", "", "logging", ".", "info", "(", "\"Start validation, Total sample: {:d}\"", ".", "format", "(", "len", "(", "self", ".", "val_loader", ")", ")", ")", "\n", "import", "time", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "image", ",", "target", ",", "filename", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "model", ".", "evaluate", "(", "image", ")", "\n", "\n", "", "self", ".", "metric", ".", "update", "(", "output", ",", "target", ")", "\n", "pixAcc", ",", "mIoU", "=", "self", ".", "metric", ".", "get", "(", ")", "\n", "logging", ".", "info", "(", "\"Sample: {:d}, validation pixAcc: {:.3f}, mIoU: {:.3f}\"", ".", "format", "(", "\n", "i", "+", "1", ",", "pixAcc", "*", "100", ",", "mIoU", "*", "100", ")", ")", "\n", "\n", "", "synchronize", "(", ")", "\n", "pixAcc", ",", "mIoU", ",", "category_iou", "=", "self", ".", "metric", ".", "get", "(", "return_category_iou", "=", "True", ")", "\n", "logging", ".", "info", "(", "'Eval use time: {:.3f} second'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "time_start", ")", ")", "\n", "logging", ".", "info", "(", "'End validation pixAcc: {:.3f}, mIoU: {:.3f}'", ".", "format", "(", "\n", "pixAcc", "*", "100", ",", "mIoU", "*", "100", ")", ")", "\n", "\n", "headers", "=", "[", "'class id'", ",", "'class name'", ",", "'iou'", "]", "\n", "table", "=", "[", "]", "\n", "for", "i", ",", "cls_name", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "table", ".", "append", "(", "[", "cls_name", ",", "category_iou", "[", "i", "]", "]", ")", "\n", "", "logging", ".", "info", "(", "'Category iou: \\n {}'", ".", "format", "(", "tabulate", "(", "table", ",", "headers", ",", "tablefmt", "=", "'grid'", ",", "showindex", "=", "\"always\"", ",", "\n", "numalign", "=", "'center'", ",", "stralign", "=", "'center'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.__init__": [[39, 140], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.transforms.Compose", "segmentron.data.dataloader.get_segmentation_dataset", "segmentron.data.dataloader.get_segmentation_dataset", "segmentron.data.dataloader.get_segmentation_dataset", "make_data_sampler", "make_batch_data_sampler", "make_data_sampler", "make_batch_data_sampler", "make_data_sampler", "make_batch_data_sampler", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "segmentron.models.model_zoo.get_segmentation_model().to", "segmentron.solver.loss.get_segmentation_loss().to", "segmentron.solver.optimizer.get_optimizer", "segmentron.solver.lr_scheduler.get_scheduler", "segmentron.utils.score.SegmentationMetric", "len", "get_rank", "logging.info", "apex.amp.initialize", "logging.info", "os.path.isfile", "os.path.splitext", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.Trainer.model.load_state_dict", "logging.info", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "segmentron.models.model_zoo.get_segmentation_model", "segmentron.utils.visualize.show_flops_params", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "logging.info", "logging.info", "segmentron.solver.loss.get_segmentation_loss", "train.Trainer.model.cuda", "logging.info", "train.Trainer.optimizer.load_state_dict", "train.Trainer.lr_scheduler.load_state_dict", "copy.deepcopy", "logging.warning"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.optimizer.get_optimizer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.get_scheduler", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.model_zoo.get_segmentation_model", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.show_flops_params", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.get_segmentation_loss"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "self", ".", "use_fp16", "=", "cfg", ".", "TRAIN", ".", "APEX", "\n", "\n", "# image transform", "\n", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cfg", ".", "DATASET", ".", "MEAN", ",", "cfg", ".", "DATASET", ".", "STD", ")", ",", "\n", "]", ")", "\n", "# dataset and dataloader", "\n", "data_kwargs", "=", "{", "'transform'", ":", "input_transform", ",", "\n", "'base_size'", ":", "cfg", ".", "TRAIN", ".", "BASE_SIZE", ",", "\n", "'crop_size'", ":", "cfg", ".", "TRAIN", ".", "CROP_SIZE", "}", "\n", "\n", "data_kwargs_testval", "=", "{", "'transform'", ":", "input_transform", ",", "\n", "'base_size'", ":", "cfg", ".", "TRAIN", ".", "BASE_SIZE", ",", "\n", "'crop_size'", ":", "cfg", ".", "TEST", ".", "CROP_SIZE", "}", "\n", "\n", "train_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ",", "split", "=", "'train'", ",", "mode", "=", "'train'", ",", "**", "data_kwargs", ")", "\n", "val_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ",", "split", "=", "'val'", ",", "mode", "=", "'testval'", ",", "**", "data_kwargs_testval", ")", "\n", "test_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ",", "split", "=", "'test'", ",", "mode", "=", "'testval'", ",", "**", "data_kwargs_testval", ")", "\n", "\n", "self", ".", "classes", "=", "test_dataset", ".", "classes", "\n", "\n", "self", ".", "iters_per_epoch", "=", "len", "(", "train_dataset", ")", "//", "(", "args", ".", "num_gpus", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ")", "\n", "self", ".", "max_iters", "=", "cfg", ".", "TRAIN", ".", "EPOCHS", "*", "self", ".", "iters_per_epoch", "\n", "\n", "train_sampler", "=", "make_data_sampler", "(", "train_dataset", ",", "shuffle", "=", "True", ",", "distributed", "=", "args", ".", "distributed", ")", "\n", "train_batch_sampler", "=", "make_batch_data_sampler", "(", "train_sampler", ",", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "self", ".", "max_iters", ",", "drop_last", "=", "True", ")", "\n", "\n", "val_sampler", "=", "make_data_sampler", "(", "val_dataset", ",", "False", ",", "args", ".", "distributed", ")", "\n", "val_batch_sampler", "=", "make_batch_data_sampler", "(", "val_sampler", ",", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_sampler", "=", "make_data_sampler", "(", "test_dataset", ",", "False", ",", "args", ".", "distributed", ")", "\n", "test_batch_sampler", "=", "make_batch_data_sampler", "(", "test_sampler", ",", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "drop_last", "=", "False", ")", "\n", "\n", "self", ".", "train_loader", "=", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_sampler", "=", "train_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "self", ".", "val_loader", "=", "data", ".", "DataLoader", "(", "dataset", "=", "val_dataset", ",", "\n", "batch_sampler", "=", "val_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "self", ".", "test_loader", "=", "data", ".", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "\n", "batch_sampler", "=", "test_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "# create network", "\n", "self", ".", "model", "=", "get_segmentation_model", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# print params and flops", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "show_flops_params", "(", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", ",", "args", ".", "device", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logging", ".", "warning", "(", "'get flops and params error: {}'", ".", "format", "(", "e", ")", ")", "\n", "", "", "if", "cfg", ".", "MODEL", ".", "BN_TYPE", "not", "in", "[", "'BN'", "]", ":", "\n", "            ", "logging", ".", "info", "(", "'Batch norm type is {}, convert_sync_batchnorm is not effective'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_TYPE", ")", ")", "\n", "", "elif", "args", ".", "distributed", "and", "cfg", ".", "TRAIN", ".", "SYNC_BATCH_NORM", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "self", ".", "model", ")", "\n", "logging", ".", "info", "(", "'SyncBatchNorm is effective!'", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'Not use SyncBatchNorm!'", ")", "\n", "# create criterion", "\n", "", "self", ".", "criterion", "=", "get_segmentation_loss", "(", "cfg", ".", "MODEL", ".", "MODEL_NAME", ",", "use_ohem", "=", "cfg", ".", "SOLVER", ".", "OHEM", ",", "\n", "aux", "=", "cfg", ".", "SOLVER", ".", "AUX", ",", "aux_weight", "=", "cfg", ".", "SOLVER", ".", "AUX_WEIGHT", ",", "\n", "ignore_index", "=", "cfg", ".", "DATASET", ".", "IGNORE_INDEX", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# optimizer, for model just includes encoder, decoder(head and auxlayer).", "\n", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "model", ")", "\n", "# apex", "\n", "if", "self", ".", "use_fp16", ":", "\n", "            ", "self", ".", "model", ",", "self", ".", "optimizer", "=", "apex", ".", "amp", ".", "initialize", "(", "self", ".", "model", ".", "cuda", "(", ")", ",", "self", ".", "optimizer", ",", "opt_level", "=", "\"O1\"", ")", "\n", "logging", ".", "info", "(", "'**** Initializing mixed precision done. ****'", ")", "\n", "\n", "# lr scheduling", "\n", "", "self", ".", "lr_scheduler", "=", "get_scheduler", "(", "self", ".", "optimizer", ",", "max_iters", "=", "self", ".", "max_iters", ",", "iters_per_epoch", "=", "self", ".", "iters_per_epoch", ")", "\n", "# resume checkpoint if needed", "\n", "self", ".", "start_epoch", "=", "0", "\n", "if", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "args", ".", "resume", ")", "\n", "assert", "ext", "==", "'.pkl'", "or", "'.pth'", ",", "'Sorry only .pth and .pkl files supported.'", "\n", "logging", ".", "info", "(", "'Resuming training, loading {}...'", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "resume_sate", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "resume_sate", "[", "'state_dict'", "]", ")", "\n", "self", ".", "start_epoch", "=", "resume_sate", "[", "'epoch'", "]", "\n", "logging", ".", "info", "(", "'resume train from epoch: {}'", ".", "format", "(", "self", ".", "start_epoch", ")", ")", "\n", "if", "resume_sate", "[", "'optimizer'", "]", "is", "not", "None", "and", "resume_sate", "[", "'lr_scheduler'", "]", "is", "not", "None", ":", "\n", "                ", "logging", ".", "info", "(", "'resume optimizer and lr scheduler from resume state..'", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "resume_sate", "[", "'optimizer'", "]", ")", "\n", "self", ".", "lr_scheduler", ".", "load_state_dict", "(", "resume_sate", "[", "'lr_scheduler'", "]", ")", "\n", "\n", "", "", "if", "args", ".", "distributed", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "# evaluation metrics", "\n", "", "self", ".", "metric", "=", "SegmentationMetric", "(", "train_dataset", ".", "num_class", ",", "args", ".", "distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.train": [[141, 196], ["time.time", "logging.info", "train.Trainer.model.train", "str", "logging.info", "get_rank", "images.to.to.to", "targets.to.to.to", "train.Trainer.model", "train.Trainer.criterion", "sum", "reduce_loss_dict", "sum", "train.Trainer.optimizer.zero_grad", "train.Trainer.optimizer.step", "train.Trainer.lr_scheduler.step", "str", "time.time", "datetime.timedelta", "sum.backward", "datetime.timedelta", "logging.info", "segmentron.utils.filesystem.save_checkpoint", "train.Trainer.validation", "train.Trainer.test", "train.Trainer.model.train", "apex.amp.scale_loss", "scaled_loss.backward", "train.Trainer.values", "reduce_loss_dict.values", "time.time", "int", "sum.item", "str", "datetime.timedelta", "int", "time.time"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.train", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.reduce_loss_dict", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.AllReduce.backward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.save_checkpoint", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.validation", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.test", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.train", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.AllReduce.backward"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "save_to_disk", "=", "get_rank", "(", ")", "==", "0", "\n", "epochs", ",", "max_iters", ",", "iters_per_epoch", "=", "cfg", ".", "TRAIN", ".", "EPOCHS", ",", "self", ".", "max_iters", ",", "self", ".", "iters_per_epoch", "\n", "log_per_iters", ",", "val_per_iters", "=", "self", ".", "args", ".", "log_iter", ",", "self", ".", "args", ".", "val_epoch", "*", "self", ".", "iters_per_epoch", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "'Start training, Total Epochs: {:d} = Total Iterations {:d}'", ".", "format", "(", "epochs", ",", "max_iters", ")", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "iteration", "=", "self", ".", "start_epoch", "*", "iters_per_epoch", "if", "self", ".", "start_epoch", ">", "0", "else", "0", "\n", "for", "(", "images", ",", "targets", ",", "_", ")", "in", "self", ".", "train_loader", ":", "\n", "            ", "epoch", "=", "iteration", "//", "iters_per_epoch", "+", "1", "\n", "iteration", "+=", "1", "\n", "\n", "images", "=", "images", ".", "to", "(", "self", ".", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "outputs", "=", "self", ".", "model", "(", "images", ")", "\n", "loss_dict", "=", "self", ".", "criterion", "(", "outputs", ",", "targets", ")", "\n", "losses", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "loss_dict_reduced", "=", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "use_fp16", ":", "\n", "                ", "with", "apex", ".", "amp", ".", "scale_loss", "(", "losses", ",", "self", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "losses", ".", "backward", "(", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "eta_seconds", "=", "(", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "iteration", ")", "*", "(", "max_iters", "-", "iteration", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "iteration", "%", "log_per_iters", "==", "0", "and", "self", ".", "save_to_disk", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "\"Epoch: {:d}/{:d} || Iters: {:d}/{:d} || Lr: {:.6f} || \"", "\n", "\"Loss: {:.4f} || Cost Time: {} || Estimated Time: {}\"", ".", "format", "(", "\n", "epoch", ",", "epochs", ",", "iteration", "%", "iters_per_epoch", ",", "iters_per_epoch", ",", "\n", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "losses_reduced", ".", "item", "(", ")", ",", "\n", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", ",", "\n", "eta_string", ")", ")", "\n", "\n", "", "if", "iteration", "%", "self", ".", "iters_per_epoch", "==", "0", "and", "self", ".", "save_to_disk", ":", "\n", "                ", "save_checkpoint", "(", "self", ".", "model", ",", "epoch", ",", "self", ".", "optimizer", ",", "self", ".", "lr_scheduler", ",", "is_best", "=", "False", ")", "\n", "\n", "", "if", "not", "self", ".", "args", ".", "skip_val", "and", "iteration", "%", "val_per_iters", "==", "0", ":", "\n", "                ", "self", ".", "validation", "(", "epoch", ")", "\n", "self", ".", "test", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "", "", "total_training_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_training_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_training_time", ")", ")", "\n", "logging", ".", "info", "(", "\"Total training time: {} ({:.4f}s / it)\"", ".", "format", "(", "total_training_str", ",", "\n", "total_training_time", "/", "max_iters", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.validation": [[197, 224], ["train.Trainer.metric.reset", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model.eval", "enumerate", "train.Trainer.metric.get", "logging.info", "synchronize", "image.to.to.to", "target.to.to.to", "train.Trainer.metric.update", "train.Trainer.metric.get", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "image.to.to.size", "model"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.reset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.eval", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.synchronize", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.update", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get"], ["", "def", "validation", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "metric", ".", "reset", "(", ")", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "            ", "model", "=", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "i", ",", "(", "image", ",", "target", ",", "filename", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "cfg", ".", "DATASET", ".", "MODE", "==", "'val'", "or", "cfg", ".", "TEST", ".", "CROP_SIZE", "is", "None", ":", "\n", "                    ", "output", "=", "model", "(", "image", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "size", "=", "image", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "assert", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "0", "]", "==", "size", "[", "0", "]", "\n", "assert", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "1", "]", "==", "size", "[", "1", "]", "\n", "output", "=", "model", "(", "image", ")", "[", "0", "]", "\n", "\n", "", "", "self", ".", "metric", ".", "update", "(", "output", ",", "target", ")", "\n", "pixAcc", ",", "mIoU", ",", "category_iou", "=", "self", ".", "metric", ".", "get", "(", "return_category_iou", "=", "True", ")", "\n", "logging", ".", "info", "(", "\"[EVAL] Sample: {:d}, pixAcc: {:.3f}, mIoU: {:.3f}\"", ".", "format", "(", "i", "+", "1", ",", "pixAcc", "*", "100", ",", "mIoU", "*", "100", ")", ")", "\n", "", "pixAcc", ",", "mIoU", "=", "self", ".", "metric", ".", "get", "(", ")", "\n", "logging", ".", "info", "(", "\"[EVAL END] Epoch: {:d}, pixAcc: {:.3f}, mIoU: {:.3f}\"", ".", "format", "(", "epoch", ",", "pixAcc", "*", "100", ",", "mIoU", "*", "100", ")", ")", "\n", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.train.Trainer.test": [[225, 286], ["train.Trainer.metric.reset", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model.eval", "enumerate", "synchronize", "train.Trainer.metric.get", "logging.info", "enumerate", "logging.info", "image.to.to.to", "target.to.to.to", "train.Trainer.metric.update", "train.Trainer.metric.get", "logging.info", "table.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "tabulate.tabulate.tabulate", "PIL.Image.open().resize", "PIL.Image.open().resize.save", "target[].data.cpu().numpy", "segmentron.utils.visualize.get_color_pallete", "segmentron.utils.visualize.get_color_pallete.save", "output[].permute().argmax().data.cpu().numpy", "segmentron.utils.visualize.get_color_pallete", "os.path.join", "segmentron.utils.visualize.get_color_pallete.save", "model", "image.to.to.size", "model", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "PIL.Image.open", "target[].data.cpu", "output[].permute().argmax().data.cpu", "os.path.join", "str", "str", "str", "output[].permute().argmax", "output[].permute"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.reset", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.tools.eval.Evaluator.eval", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.synchronize", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.update", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.get_color_pallete", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.get_color_pallete", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs"], ["", "def", "test", "(", "self", ",", "vis", "=", "False", ")", ":", "\n", "        ", "self", ".", "metric", ".", "reset", "(", ")", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "            ", "model", "=", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "i", ",", "(", "image", ",", "target", ",", "filename", ")", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "cfg", ".", "DATASET", ".", "MODE", "==", "'test'", "or", "cfg", ".", "TEST", ".", "CROP_SIZE", "is", "None", ":", "\n", "                    ", "output", "=", "model", "(", "image", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "size", "=", "image", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "assert", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "0", "]", "==", "size", "[", "0", "]", "\n", "assert", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "1", "]", "==", "size", "[", "1", "]", "\n", "output", "=", "model", "(", "image", ")", "[", "0", "]", "\n", "\n", "", "", "if", "vis", ":", "\n", "                ", "save_gt", "=", "False", "\n", "if", "save_gt", ":", "\n", "                    ", "test_path", "=", "'datasets/transparent/Trans10K_cls12/test/images'", "\n", "save_path", "=", "'workdirs/trans10kv2/gt_img'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "gt_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "test_path", ",", "filename", "[", "0", "]", ")", ")", ".", "resize", "(", "(", "512", ",", "512", ")", ")", "\n", "gt_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "str", "(", "i", ")", "+", "'.png'", ")", ")", "\n", "\n", "gt_mask", "=", "target", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vis_gt", "=", "get_color_pallete", "(", "gt_mask", ",", "dataset", "=", "'trans10kv2'", ")", "\n", "save_path", "=", "'workdirs/trans10kv2/gt_mask'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "vis_gt", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "str", "(", "i", ")", "+", "'.png'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "vis_pred", "=", "output", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "argmax", "(", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vis_pred", "=", "get_color_pallete", "(", "vis_pred", ",", "dataset", "=", "'trans10kv2'", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "TRAIN", ".", "MODEL_SAVE_DIR", ",", "'vis'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "vis_pred", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "str", "(", "i", ")", "+", "'.png'", ")", ")", "\n", "", "print", "(", "\"[VIS TEST] Sample: {:d}\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "continue", "\n", "\n", "", "self", ".", "metric", ".", "update", "(", "output", ",", "target", ")", "\n", "pixAcc", ",", "mIoU", ",", "category_iou", "=", "self", ".", "metric", ".", "get", "(", "return_category_iou", "=", "True", ")", "\n", "logging", ".", "info", "(", "\"[TEST] Sample: {:d}, pixAcc: {:.3f}, mIoU: {:.3f}\"", ".", "format", "(", "i", "+", "1", ",", "pixAcc", "*", "100", ",", "mIoU", "*", "100", ")", ")", "\n", "\n", "", "synchronize", "(", ")", "\n", "pixAcc", ",", "mIoU", ",", "category_iou", "=", "self", ".", "metric", ".", "get", "(", "return_category_iou", "=", "True", ")", "\n", "logging", ".", "info", "(", "\"[TEST END]  pixAcc: {:.3f}, mIoU: {:.3f}\"", ".", "format", "(", "pixAcc", "*", "100", ",", "mIoU", "*", "100", ")", ")", "\n", "\n", "headers", "=", "[", "'class id'", ",", "'class name'", ",", "'iou'", "]", "\n", "table", "=", "[", "]", "\n", "for", "i", ",", "cls_name", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "table", ".", "append", "(", "[", "cls_name", ",", "category_iou", "[", "i", "]", "]", ")", "\n", "", "logging", ".", "info", "(", "'Category iou: \\n {}'", ".", "format", "(", "tabulate", "(", "table", ",", "headers", ",", "tablefmt", "=", "'grid'", ",", "\n", "showindex", "=", "\"always\"", ",", "numalign", "=", "'center'", ",", "stralign", "=", "'center'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.data.resize_datasets.check_dir": [[11, 14], ["os.path.isdir", "os.path.isdir", "os.makedirs", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs"], ["def", "check_dir", "(", "dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.data.resize_datasets.random_size": [[16, 21], ["random.randint"], "function", ["None"], ["", "", "def", "random_size", "(", "shot_size", ")", ":", "\n", "    ", "if", "shot_size", ">", "1200", ":", "\n", "        ", "return", "random", ".", "randint", "(", "800", ",", "1200", ")", "\n", "", "else", ":", "\n", "        ", "return", "shot_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.data.resize_datasets.resize_dataset": [[23, 54], ["os.join", "os.join", "resize_datasets.check_dir", "resize_datasets.check_dir", "resize_datasets.check_dir", "os.join", "os.join", "os.listdir", "os.listdir", "PIL.Image.open", "os.path.splitext", "os.path.splitext", "PIL.Image.open", "Image.open.resize", "Image.open.resize", "img.resize.save", "mask.resize.save", "print", "os.join", "os.join", "resize_datasets.random_size", "int", "resize_datasets.random_size", "int", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.data.resize_datasets.check_dir", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.data.resize_datasets.check_dir", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.data.resize_datasets.check_dir", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.data.resize_datasets.random_size", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.data.resize_datasets.random_size"], ["", "", "def", "resize_dataset", "(", "i_root", ",", "o_root", ",", "mode", "=", "\"train\"", ")", ":", "\n", "\n", "    ", "out_images_path", "=", "osp", ".", "join", "(", "o_root", ",", "mode", ",", "\"images\"", ")", "\n", "out_masks_path", "=", "osp", ".", "join", "(", "o_root", ",", "mode", ",", "\"masks_12\"", ")", "\n", "\n", "check_dir", "(", "o_root", ")", "\n", "check_dir", "(", "out_images_path", ")", "\n", "check_dir", "(", "out_masks_path", ")", "\n", "\n", "image_path", "=", "osp", ".", "join", "(", "i_root", ",", "mode", ",", "\"images\"", ")", "\n", "mask_path", "=", "osp", ".", "join", "(", "i_root", ",", "mode", ",", "\"masks_12\"", ")", "\n", "for", "i", "in", "os", ".", "listdir", "(", "image_path", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "image_path", ",", "i", ")", ")", "\n", "basename", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "i", ")", "\n", "mask", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "mask_path", ",", "basename", "+", "\"_mask.png\"", ")", ")", "\n", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "if", "w", ">", "h", ":", "\n", "            ", "oh", "=", "random_size", "(", "h", ")", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "            ", "ow", "=", "random_size", "(", "w", ")", "\n", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "\n", "", "new_img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "new_mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "new_img", ".", "save", "(", "osp", ".", "join", "(", "out_images_path", ",", "i", ")", ")", "\n", "new_mask", ".", "save", "(", "osp", ".", "join", "(", "out_masks_path", ",", "basename", "+", "\"_mask.png\"", ")", ")", "\n", "print", "(", "\"process image\"", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.options.parse_args": [[3, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.options.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Segmentron'", ")", "\n", "parser", ".", "add_argument", "(", "'--config-file'", ",", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "'config file path'", ")", "\n", "# cuda setting", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "# checkpoint and log", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-iter'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'print log every log-iter'", ")", "\n", "# for evaluation", "\n", "parser", ".", "add_argument", "(", "'--val-epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'run validation every val-epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-val'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'skip validation during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'test model'", ")", "\n", "parser", ".", "add_argument", "(", "'--vis'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'visualize images'", ")", "\n", "# for visual", "\n", "parser", ".", "add_argument", "(", "'--input-img'", ",", "type", "=", "str", ",", "default", "=", "'tools/demo_vis.png'", ",", "\n", "help", "=", "'path to the input image or a directory of images'", ")", "\n", "# config options", "\n", "parser", ".", "add_argument", "(", "'opts'", ",", "help", "=", "'See config for all options'", ",", "\n", "default", "=", "None", ",", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.save_checkpoint": [[10, 40], ["os.path.expanduser", "os.path.join", "os.path.exists", "os.makedirs", "str", "hasattr", "model.module.state_dict", "model.state_dict", "os.path.join", "torch.save", "os.path.join", "optimizer.state_dict", "lr_scheduler.state_dict", "os.path.exists", "torch.save", "logging.info", "str", "os.path.exists", "os.remove", "logging.info"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs"], ["def", "save_checkpoint", "(", "model", ",", "epoch", ",", "optimizer", "=", "None", ",", "lr_scheduler", "=", "None", ",", "is_best", "=", "False", ")", ":", "\n", "    ", "\"\"\"Save Checkpoint\"\"\"", "\n", "directory", "=", "os", ".", "path", ".", "expanduser", "(", "cfg", ".", "TRAIN", ".", "MODEL_SAVE_DIR", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "filename", "=", "'{}.pth'", ".", "format", "(", "str", "(", "epoch", ")", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "filename", ")", "\n", "model_state_dict", "=", "model", ".", "module", ".", "state_dict", "(", ")", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", ".", "state_dict", "(", ")", "\n", "if", "is_best", ":", "\n", "        ", "best_filename", "=", "'best_model.pth'", "\n", "best_filename", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "best_filename", ")", "\n", "torch", ".", "save", "(", "model_state_dict", ",", "best_filename", ")", "\n", "", "else", ":", "\n", "        ", "save_state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model_state_dict", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ".", "state_dict", "(", ")", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "torch", ".", "save", "(", "save_state", ",", "filename", ")", "\n", "logging", ".", "info", "(", "'Epoch {} model saved in: {}'", ".", "format", "(", "epoch", ",", "filename", ")", ")", "\n", "\n", "", "pre_filename", "=", "'{}.pth'", ".", "format", "(", "str", "(", "epoch", "-", "1", ")", ")", "\n", "pre_filename", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "pre_filename", ")", "\n", "try", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "pre_filename", ")", ":", "\n", "                ", "os", ".", "remove", "(", "pre_filename", ")", "\n", "", "", "except", "OSError", "as", "e", ":", "\n", "            ", "logging", ".", "info", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs": [[41, 54], ["os.makedirs"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs"], ["", "", "", "def", "makedirs", "(", "path", ")", ":", "\n", "    ", "\"\"\"Create directory recursively if not exists.\n    Similar to `makedir -p`, you can skip checking existence before this function.\n    Parameters\n    ----------\n    path : str\n        Path of the desired dir\n    \"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "\n", "        ", "if", "exc", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.DistributedSampler.__init__": [[181, 197], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.DistributedSampler.__iter__": [[198, 217], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.DistributedSampler.__len__": [[218, 220], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.DistributedSampler.set_epoch": [[221, 223], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.IterationBasedBatchSampler.__init__": [[231, 235], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_sampler", ",", "num_iterations", ",", "start_iter", "=", "0", ")", ":", "\n", "        ", "self", ".", "batch_sampler", "=", "batch_sampler", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "self", ".", "start_iter", "=", "start_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.IterationBasedBatchSampler.__iter__": [[236, 249], ["hasattr", "distributed.IterationBasedBatchSampler.batch_sampler.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.DistributedSampler.set_epoch"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "iteration", "=", "self", ".", "start_iter", "\n", "while", "iteration", "<=", "self", ".", "num_iterations", ":", "\n", "# if the underlying sampler has a set_epoch method, like", "\n", "# DistributedSampler, used for making each process see", "\n", "# a different split of the dataset, then set it", "\n", "            ", "if", "hasattr", "(", "self", ".", "batch_sampler", ".", "sampler", ",", "\"set_epoch\"", ")", ":", "\n", "                ", "self", ".", "batch_sampler", ".", "sampler", ".", "set_epoch", "(", "iteration", ")", "\n", "", "for", "batch", "in", "self", ".", "batch_sampler", ":", "\n", "                ", "iteration", "+=", "1", "\n", "if", "iteration", ">", "self", ".", "num_iterations", ":", "\n", "                    ", "break", "\n", "", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.IterationBasedBatchSampler.__len__": [[250, 252], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_iterations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size": [[17, 23], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank": [[25, 31], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.is_main_process": [[33, 35], ["distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.synchronize": [[37, 50], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.all_gather": [[52, 93], ["distributed.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.all_gather", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.all_gather"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "IntTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.reduce_dict": [[95, 122], ["distributed.get_world_size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.reduce_loss_dict": [[124, 147], ["distributed.get_world_size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.stack", "torch.reduce", "loss_dict.keys", "loss_names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank"], ["", "def", "reduce_loss_dict", "(", "loss_dict", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the loss dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    loss_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "loss_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_names", "=", "[", "]", "\n", "all_losses", "=", "[", "]", "\n", "for", "k", "in", "sorted", "(", "loss_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "loss_names", ".", "append", "(", "k", ")", "\n", "all_losses", ".", "append", "(", "loss_dict", "[", "k", "]", ")", "\n", "", "all_losses", "=", "torch", ".", "stack", "(", "all_losses", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "all_losses", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "all_losses", "/=", "world_size", "\n", "", "reduced_losses", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "loss_names", ",", "all_losses", ")", "}", "\n", "", "return", "reduced_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_data_sampler": [[149, 157], ["distributed.DistributedSampler", "torch.sampler.RandomSampler", "torch.sampler.SequentialSampler"], "function", ["None"], ["", "def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "        ", "sampler", "=", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.make_batch_data_sampler": [[159, 164], ["torch.sampler.BatchSampler", "distributed.IterationBasedBatchSampler"], "function", ["None"], ["", "def", "make_batch_data_sampler", "(", "sampler", ",", "images_per_batch", ",", "num_iters", "=", "None", ",", "start_iter", "=", "0", ",", "drop_last", "=", "True", ")", ":", "\n", "    ", "batch_sampler", "=", "data", ".", "sampler", ".", "BatchSampler", "(", "sampler", ",", "images_per_batch", ",", "drop_last", "=", "drop_last", ")", "\n", "if", "num_iters", "is", "not", "None", ":", "\n", "        ", "batch_sampler", "=", "IterationBasedBatchSampler", "(", "batch_sampler", ",", "num_iters", ",", "start_iter", ")", "\n", "", "return", "batch_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.logger.setup_logger": [[8, 27], ["logging.root.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.root.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.root.addHandler", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "filename", "=", "\"log.txt\"", ",", "mode", "=", "'w'", ")", ":", "\n", "    ", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "\n", "\n", "", "logging", ".", "root", ".", "name", "=", "name", "\n", "logging", ".", "root", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "root", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ",", "mode", "=", "mode", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "root", ".", "addHandler", "(", "fh", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.__init__": [[33, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            name (str): the name of this registry\n        \"\"\"", "\n", "self", ".", "_name", "=", "name", "\n", "\n", "self", ".", "_obj_map", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry._do_register": [[42, 47], ["None"], "methods", ["None"], ["", "def", "_do_register", "(", "self", ",", "name", ",", "obj", ")", ":", "\n", "        ", "assert", "(", "\n", "name", "not", "in", "self", ".", "_obj_map", "\n", ")", ",", "\"An object named '{}' was already registered in '{}' registry!\"", ".", "format", "(", "name", ",", "self", ".", "_name", ")", "\n", "self", ".", "_obj_map", "[", "name", "]", "=", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register": [[48, 67], ["registry.Registry._do_register", "registry.Registry._do_register"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry._do_register", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry._do_register"], ["", "def", "register", "(", "self", ",", "obj", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Register the given object under the the name `obj.__name__`.\n        Can be used as either a decorator or not. See docstring of this class for usage.\n        \"\"\"", "\n", "if", "obj", "is", "None", ":", "\n", "# used as a decorator", "\n", "            ", "def", "deco", "(", "func_or_class", ",", "name", "=", "name", ")", ":", "\n", "                ", "if", "name", "is", "None", ":", "\n", "                    ", "name", "=", "func_or_class", ".", "__name__", "\n", "", "self", ".", "_do_register", "(", "name", ",", "func_or_class", ")", "\n", "return", "func_or_class", "\n", "\n", "", "return", "deco", "\n", "\n", "# used as a function call", "\n", "", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "obj", ".", "__name__", "\n", "", "self", ".", "_do_register", "(", "name", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.get": [[70, 76], ["registry.Registry._obj_map.get", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get"], ["", "def", "get", "(", "self", ",", "name", ")", ":", "\n", "        ", "ret", "=", "self", ".", "_obj_map", ".", "get", "(", "name", ")", "\n", "if", "ret", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "\"No object named '{}' found in '{}' registry!\"", ".", "format", "(", "name", ",", "self", ".", "_name", ")", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.get_list": [[77, 79], ["list", "registry.Registry._obj_map.keys"], "methods", ["None"], ["", "def", "get_list", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_obj_map", ".", "keys", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.parallel.Reduce.forward": [[13, 18], ["sorted", "torch.reduce_add", "torch.reduce_add", "inputs[].get_device", "range", "len", "i.get_device"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "inputs", ")", ":", "\n", "        ", "ctx", ".", "target_gpus", "=", "[", "inputs", "[", "i", "]", ".", "get_device", "(", ")", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", "]", "\n", "inputs", "=", "sorted", "(", "inputs", ",", "key", "=", "lambda", "i", ":", "i", ".", "get_device", "(", ")", ")", "\n", "return", "comm", ".", "reduce_add", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.parallel.Reduce.backward": [[19, 22], ["torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradOutputs", ")", ":", "\n", "        ", "return", "Broadcast", ".", "apply", "(", "ctx", ".", "target_gpus", ",", "gradOutputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.parallel.DataParallelModel.gather": [[49, 51], ["None"], "methods", ["None"], ["def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.parallel.DataParallelModel.replicate": [[52, 55], ["super().replicate"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.parallel.DataParallelModel.replicate"], ["", "def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelModel", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.parallel.DataParallelCriterion.forward": [[73, 83], ["parallel.DataParallelCriterion.scatter", "parallel.DataParallelCriterion.replicate", "parallel.criterion_parallel_apply", "parallel.DataParallelCriterion.module", "len", "parallel.DataParallelCriterion.module", "Reduce.apply", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.parallel.DataParallelModel.replicate", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.parallel.criterion_parallel_apply"], ["def", "forward", "(", "self", ",", "inputs", ",", "*", "targets", ",", "**", "kwargs", ")", ":", "\n", "# the inputs should be the outputs of DataParallelModel", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", ",", "*", "targets", ",", "**", "kwargs", ")", "\n", "", "targets", ",", "kwargs", "=", "self", ".", "scatter", "(", "targets", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", ",", "*", "targets", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "outputs", "=", "criterion_parallel_apply", "(", "replicas", ",", "inputs", ",", "targets", ",", "kwargs", ")", "\n", "return", "Reduce", ".", "apply", "(", "*", "outputs", ")", "/", "len", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.parallel.get_a_var": [[85, 99], ["isinstance", "isinstance", "isinstance", "isinstance", "map", "map", "isinstance", "obj.items", "isinstance"], "function", ["None"], ["", "", "def", "get_a_var", "(", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "obj", "\n", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", "or", "isinstance", "(", "obj", ",", "tuple", ")", ":", "\n", "        ", "for", "result", "in", "map", "(", "get_a_var", ",", "obj", ")", ":", "\n", "            ", "if", "isinstance", "(", "result", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "return", "result", "\n", "\n", "", "", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "for", "result", "in", "map", "(", "get_a_var", ",", "obj", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "result", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "return", "result", "\n", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.parallel.criterion_parallel_apply": [[101, 163], ["threading.Lock", "torch.is_grad_enabled", "torch.is_grad_enabled", "range", "len", "len", "len", "len", "torch.set_grad_enabled", "torch.set_grad_enabled", "len", "parallel.criterion_parallel_apply._worker"], "function", ["None"], ["", "def", "criterion_parallel_apply", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", "=", "None", ",", "devices", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Applies each `module` in :attr:`modules` in parallel on arguments\n    contained in :attr:`inputs` (positional), attr:'targets' (positional) and :attr:`kwargs_tup` (keyword)\n    on each of :attr:`devices`.\n\n    Args:\n        modules (Module): modules to be parallelized\n        inputs (tensor): inputs to the modules\n        targets (tensor): targets to the modules\n        devices (list of int or torch.device): CUDA devices\n    :attr:`modules`, :attr:`inputs`, :attr:'targets' :attr:`kwargs_tup` (if given), and\n    :attr:`devices` (if given) should all have same length. Moreover, each\n    element of :attr:`inputs` can either be a single object as the only argument\n    to a module, or a collection of positional arguments.\n    \"\"\"", "\n", "assert", "len", "(", "modules", ")", "==", "len", "(", "inputs", ")", "\n", "assert", "len", "(", "targets", ")", "==", "len", "(", "inputs", ")", "\n", "if", "kwargs_tup", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "kwargs_tup", ")", "\n", "", "else", ":", "\n", "        ", "kwargs_tup", "=", "(", "{", "}", ",", ")", "*", "len", "(", "modules", ")", "\n", "", "if", "devices", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "devices", ")", "\n", "", "else", ":", "\n", "        ", "devices", "=", "[", "None", "]", "*", "len", "(", "modules", ")", "\n", "", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "results", "=", "{", "}", "\n", "grad_enabled", "=", "torch", ".", "is_grad_enabled", "(", ")", "\n", "\n", "def", "_worker", "(", "i", ",", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", "=", "None", ")", ":", "\n", "        ", "torch", ".", "set_grad_enabled", "(", "grad_enabled", ")", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "get_a_var", "(", "input", ")", ".", "get_device", "(", ")", "\n", "", "try", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "device", ")", ":", "\n", "                ", "output", "=", "module", "(", "*", "(", "list", "(", "input", ")", "+", "target", ")", ",", "**", "kwargs", ")", "\n", "", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "output", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "e", "\n", "\n", "", "", "", "if", "len", "(", "modules", ")", ">", "1", ":", "\n", "        ", "threads", "=", "[", "threading", ".", "Thread", "(", "target", "=", "_worker", ",", "\n", "args", "=", "(", "i", ",", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", ")", ")", "\n", "for", "i", ",", "(", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", ")", "in", "\n", "enumerate", "(", "zip", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", ",", "devices", ")", ")", "]", "\n", "\n", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "start", "(", ")", "\n", "", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "join", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "_worker", "(", "0", ",", "modules", "[", "0", "]", ",", "inputs", "[", "0", "]", ",", "targets", "[", "0", "]", ",", "kwargs_tup", "[", "0", "]", ",", "devices", "[", "0", "]", ")", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "        ", "output", "=", "results", "[", "i", "]", "\n", "if", "isinstance", "(", "output", ",", "Exception", ")", ":", "\n", "            ", "raise", "output", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "", "return", "outputs", "\n", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.download.check_sha1": [[6, 30], ["hashlib.sha1", "hashlib.sha1.hexdigest", "min", "open", "len", "len", "f.read", "hashlib.sha1.update", "hashlib.sha1.hexdigest"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.update"], ["def", "check_sha1", "(", "filename", ",", "sha1_hash", ")", ":", "\n", "    ", "\"\"\"Check whether the sha1 hash of the file content matches the expected hash.\n    Parameters\n    ----------\n    filename : str\n        Path to the file.\n    sha1_hash : str\n        Expected sha1 hash in hexadecimal digits.\n    Returns\n    -------\n    bool\n        Whether the file content matches the expected hash.\n    \"\"\"", "\n", "sha1", "=", "hashlib", ".", "sha1", "(", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "data", "=", "f", ".", "read", "(", "1048576", ")", "\n", "if", "not", "data", ":", "\n", "                ", "break", "\n", "", "sha1", ".", "update", "(", "data", ")", "\n", "\n", "", "", "sha1_file", "=", "sha1", ".", "hexdigest", "(", ")", "\n", "l", "=", "min", "(", "len", "(", "sha1_file", ")", ",", "len", "(", "sha1_hash", ")", ")", "\n", "return", "sha1", ".", "hexdigest", "(", ")", "[", "0", ":", "l", "]", "==", "sha1_hash", "[", "0", ":", "l", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.download.download": [[31, 88], ["os.path.expanduser", "os.path.isdir", "os.path.dirname", "print", "requests.get", "requests.get.headers.get", "url.split", "os.path.join", "os.path.exists", "os.path.abspath", "os.path.exists", "os.makedirs", "RuntimeError", "open", "UserWarning", "download.check_sha1", "os.path.expanduser", "requests.get.iter_content", "int", "tqdm.tqdm", "download.check_sha1", "url.split", "requests.get.iter_content", "f.write", "f.write", "int"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.download.check_sha1", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.download.check_sha1"], ["", "def", "download", "(", "url", ",", "path", "=", "None", ",", "overwrite", "=", "False", ",", "sha1_hash", "=", "None", ")", ":", "\n", "    ", "\"\"\"Download an given URL\n    Parameters\n    ----------\n    url : str\n        URL to download\n    path : str, optional\n        Destination path to store downloaded file. By default stores to the\n        current directory with same name as in url.\n    overwrite : bool, optional\n        Whether to overwrite destination file if already exists.\n    sha1_hash : str, optional\n        Expected sha1 hash in hexadecimal digits. Will ignore existing file when hash is specified\n        but doesn't match.\n    Returns\n    -------\n    str\n        The file path of the downloaded file.\n    \"\"\"", "\n", "if", "path", "is", "None", ":", "\n", "        ", "fname", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "expanduser", "(", "path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "fname", "=", "path", "\n", "\n", "", "", "if", "overwrite", "or", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", "or", "(", "sha1_hash", "and", "not", "check_sha1", "(", "fname", ",", "sha1_hash", ")", ")", ":", "\n", "        ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "fname", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n", "", "print", "(", "'Downloading %s from %s...'", "%", "(", "fname", ",", "url", ")", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "if", "r", ".", "status_code", "!=", "200", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Failed downloading url %s\"", "%", "url", ")", "\n", "", "total_length", "=", "r", ".", "headers", ".", "get", "(", "'content-length'", ")", "\n", "with", "open", "(", "fname", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "if", "total_length", "is", "None", ":", "# no content length header", "\n", "                ", "for", "chunk", "in", "r", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "                    ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                        ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "else", ":", "\n", "                ", "total_length", "=", "int", "(", "total_length", ")", "\n", "for", "chunk", "in", "tqdm", "(", "r", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ",", "\n", "total", "=", "int", "(", "total_length", "/", "1024.", "+", "0.5", ")", ",", "\n", "unit", "=", "'KB'", ",", "unit_scale", "=", "False", ",", "dynamic_ncols", "=", "True", ")", ":", "\n", "                    ", "f", ".", "write", "(", "chunk", ")", "\n", "\n", "", "", "", "if", "sha1_hash", "and", "not", "check_sha1", "(", "fname", ",", "sha1_hash", ")", ":", "\n", "            ", "raise", "UserWarning", "(", "'File {} is downloaded but the content hash does not match. '", "'The repo may be outdated or download may be incomplete. '", "'If the \"repo_url\" is overridden, consider switching to '", "'the default repo.'", ".", "format", "(", "fname", ")", ")", "\n", "\n", "", "", "return", "fname", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.print_iou": [[14, 34], ["range", "numpy.nanmean", "numpy.nanmean", "lines.append", "print", "lines.append", "lines.append"], "function", ["None"], ["def", "print_iou", "(", "iu", ",", "mean_pixel_acc", ",", "class_names", "=", "None", ",", "show_no_back", "=", "False", ")", ":", "\n", "    ", "n", "=", "iu", ".", "size", "\n", "lines", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "if", "class_names", "is", "None", ":", "\n", "            ", "cls", "=", "'Class %d:'", "%", "(", "i", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "cls", "=", "'%d %s'", "%", "(", "i", "+", "1", ",", "class_names", "[", "i", "]", ")", "\n", "# lines.append('%-8s: %.3f%%' % (cls, iu[i] * 100))", "\n", "", "", "mean_IU", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "mean_IU_no_back", "=", "np", ".", "nanmean", "(", "iu", "[", "1", ":", "]", ")", "\n", "if", "show_no_back", ":", "\n", "        ", "lines", ".", "append", "(", "'mean_IU: %.3f%% || mean_IU_no_back: %.3f%% || mean_pixel_acc: %.3f%%'", "%", "(", "\n", "mean_IU", "*", "100", ",", "mean_IU_no_back", "*", "100", ",", "mean_pixel_acc", "*", "100", ")", ")", "\n", "", "else", ":", "\n", "        ", "lines", ".", "append", "(", "'mean_IU: %.3f%% || mean_pixel_acc: %.3f%%'", "%", "(", "mean_IU", "*", "100", ",", "mean_pixel_acc", "*", "100", ")", ")", "\n", "", "lines", ".", "append", "(", "'================================================='", ")", "\n", "line", "=", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "\n", "print", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.show_flops_params": [[36, 44], ["torch.no_grad", "torch.randn().to", "thop.profile", "logging.info", "torch.device", "torch.randn"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "show_flops_params", "(", "model", ",", "device", ",", "input_shape", "=", "[", "1", ",", "3", ",", "512", ",", "512", "]", ")", ":", "\n", "#summary(model, tuple(input_shape[1:]), device=device)", "\n", "    ", "input", "=", "torch", ".", "randn", "(", "*", "input_shape", ")", ".", "to", "(", "torch", ".", "device", "(", "device", ")", ")", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "input", ",", ")", ",", "verbose", "=", "False", ")", "\n", "\n", "logging", ".", "info", "(", "'{} flops: {:.3f}G input shape is {}, params: {:.3f}M'", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "flops", "/", "1000000000", ",", "input_shape", "[", "1", ":", "]", ",", "params", "/", "1000000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.set_img_color": [[46, 54], ["range", "len", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "set_img_color", "(", "img", ",", "label", ",", "colors", ",", "background", "=", "0", ",", "show255", "=", "False", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "colors", ")", ")", ":", "\n", "        ", "if", "i", "!=", "background", ":", "\n", "            ", "img", "[", "np", ".", "where", "(", "label", "==", "i", ")", "]", "=", "colors", "[", "i", "]", "\n", "", "", "if", "show255", ":", "\n", "        ", "img", "[", "np", ".", "where", "(", "label", "==", "255", ")", "]", "=", "255", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.show_prediction": [[56, 62], ["numpy.array", "visualize.set_img_color", "numpy.array"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.set_img_color"], ["", "def", "show_prediction", "(", "img", ",", "pred", ",", "colors", ",", "background", "=", "0", ")", ":", "\n", "    ", "im", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "set_img_color", "(", "im", ",", "pred", ",", "colors", ",", "background", ")", "\n", "out", "=", "np", ".", "array", "(", "im", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.show_colorful_images": [[64, 67], ["PIL.Image.fromarray", "Image.fromarray.show", "prediction.astype().squeeze", "prediction.astype"], "function", ["None"], ["", "def", "show_colorful_images", "(", "prediction", ",", "palettes", ")", ":", "\n", "    ", "im", "=", "Image", ".", "fromarray", "(", "palettes", "[", "prediction", ".", "astype", "(", "'uint8'", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "im", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.save_colorful_images": [[69, 79], ["PIL.Image.fromarray", "os.path.join", "Image.fromarray.save", "os.path.split", "os.path.exists", "os.mkdir", "prediction.astype().squeeze", "prediction.astype"], "function", ["None"], ["", "def", "save_colorful_images", "(", "prediction", ",", "filename", ",", "output_dir", ",", "palettes", ")", ":", "\n", "    ", "'''\n    :param prediction: [B, H, W, C]\n    '''", "\n", "im", "=", "Image", ".", "fromarray", "(", "palettes", "[", "prediction", ".", "astype", "(", "'uint8'", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "fn", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "out_dir", "=", "os", ".", "path", ".", "split", "(", "fn", ")", "[", "0", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "out_dir", ")", "\n", "", "im", ".", "save", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize.get_color_pallete": [[81, 125], ["PIL.Image.fromarray", "Image.fromarray.putpalette", "npimg.astype", "PIL.Image.fromarray", "Image.fromarray.putpalette", "npimg.astype", "PIL.Image.fromarray", "Image.fromarray.putpalette", "npimg.astype", "PIL.Image.fromarray", "Image.fromarray.putpalette", "npimg.astype", "PIL.Image.fromarray", "Image.fromarray.putpalette", "npimg.astype", "PIL.Image.fromarray", "Image.fromarray.putpalette", "npimg.astype"], "function", ["None"], ["", "def", "get_color_pallete", "(", "npimg", ",", "dataset", "=", "'cityscape'", ")", ":", "\n", "    ", "\"\"\"Visualize image.\n\n    Parameters\n    ----------\n    npimg : numpy.ndarray\n        Single channel image with shape `H, W, 1`.\n    dataset : str, default: 'pascal_voc'\n        The dataset that model pretrained on. ('pascal_voc', 'ade20k')\n    Returns\n    -------\n    out_img : PIL.Image\n        Image with color pallete\n    \"\"\"", "\n", "# recovery boundary", "\n", "if", "dataset", "in", "(", "'pascal_voc'", ",", "'pascal_aug'", ")", ":", "\n", "        ", "npimg", "[", "npimg", "==", "-", "1", "]", "=", "255", "\n", "\n", "# put colormap", "\n", "", "if", "dataset", "==", "'ade20k'", ":", "\n", "        ", "npimg", "=", "npimg", "+", "1", "\n", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "astype", "(", "'uint8'", ")", ")", "\n", "out_img", ".", "putpalette", "(", "adepallete", ")", "\n", "return", "out_img", "\n", "", "elif", "dataset", "==", "'cityscape'", ":", "\n", "        ", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "astype", "(", "'uint8'", ")", ")", "\n", "out_img", ".", "putpalette", "(", "cityscapepallete", ")", "\n", "return", "out_img", "\n", "", "elif", "dataset", "in", "[", "'trans10kv2'", ",", "'transparent11'", "]", ":", "\n", "        ", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "astype", "(", "'uint8'", ")", ")", "\n", "out_img", ".", "putpalette", "(", "trans10kv2pallete", ")", "\n", "return", "out_img", "\n", "", "elif", "dataset", "==", "'pascal_voc'", ":", "\n", "        ", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "astype", "(", "'uint8'", ")", ")", "\n", "out_img", ".", "putpalette", "(", "vocpallete", ")", "\n", "return", "out_img", "\n", "", "elif", "dataset", "==", "'stanford2d3d'", ":", "\n", "        ", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "astype", "(", "'uint8'", ")", ")", "\n", "out_img", ".", "putpalette", "(", "stanford2d3dpallete", ")", "\n", "return", "out_img", "\n", "", "elif", "dataset", "==", "'cocostuff'", ":", "\n", "        ", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "astype", "(", "'uint8'", ")", ")", "\n", "out_img", ".", "putpalette", "(", "cocostuffpallete", ")", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.visualize._getvocpallete": [[126, 142], ["range"], "function", ["None"], ["", "", "def", "_getvocpallete", "(", "num_cls", ")", ":", "\n", "    ", "n", "=", "num_cls", "\n", "pallete", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "lab", "=", "j", "\n", "pallete", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "(", "lab", ">", "0", ")", ":", "\n", "            ", "pallete", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "=", "i", "+", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "pallete", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.__init__": [[15, 20], ["object.__init__", "score.SegmentationMetric.reset"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.reset"], ["def", "__init__", "(", "self", ",", "nclass", ",", "distributed", ")", ":", "\n", "        ", "super", "(", "SegmentationMetric", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "distributed", "=", "distributed", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.update": [[21, 59], ["isinstance", "tensor.clone", "torch.distributed.all_reduce", "score.batch_pix_accuracy", "score.batch_intersection_union", "torch.cuda.synchronize", "reduce_tensor.item", "reduce_tensor.item", "score.SegmentationMetric.update.evaluate_worker"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.batch_pix_accuracy", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.batch_intersection_union", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.synchronize"], ["", "def", "update", "(", "self", ",", "preds", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Updates the internal evaluation result.\n\n        Parameters\n        ----------\n        labels : 'NumpyArray' or list of `NumpyArray`\n            The labels of the data.\n        preds : 'NumpyArray' or list of `NumpyArray`\n            Predicted values.\n        \"\"\"", "\n", "\n", "def", "reduce_tensor", "(", "tensor", ")", ":", "\n", "            ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "return", "rt", "\n", "\n", "", "def", "evaluate_worker", "(", "self", ",", "pred", ",", "label", ")", ":", "\n", "            ", "correct", ",", "labeled", "=", "batch_pix_accuracy", "(", "pred", ",", "label", ")", "\n", "inter", ",", "union", "=", "batch_intersection_union", "(", "pred", ",", "label", ",", "self", ".", "nclass", ")", "\n", "if", "self", ".", "distributed", ":", "\n", "                ", "correct", "=", "reduce_tensor", "(", "correct", ")", "\n", "labeled", "=", "reduce_tensor", "(", "labeled", ")", "\n", "inter", "=", "reduce_tensor", "(", "inter", ".", "cuda", "(", ")", ")", "\n", "union", "=", "reduce_tensor", "(", "union", ".", "cuda", "(", ")", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "self", ".", "total_correct", "+=", "correct", ".", "item", "(", ")", "\n", "self", ".", "total_label", "+=", "labeled", ".", "item", "(", ")", "\n", "if", "self", ".", "total_inter", ".", "device", "!=", "inter", ".", "device", ":", "\n", "                ", "self", ".", "total_inter", "=", "self", ".", "total_inter", ".", "to", "(", "inter", ".", "device", ")", "\n", "self", ".", "total_union", "=", "self", ".", "total_union", ".", "to", "(", "union", ".", "device", ")", "\n", "", "self", ".", "total_inter", "+=", "inter", "\n", "self", ".", "total_union", "+=", "union", "\n", "\n", "", "if", "isinstance", "(", "preds", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "evaluate_worker", "(", "self", ",", "preds", ",", "labels", ")", "\n", "", "elif", "isinstance", "(", "preds", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "for", "(", "pred", ",", "label", ")", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "                ", "evaluate_worker", "(", "self", ",", "pred", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get": [[60, 74], ["IoU.mean().item", "IoU.mean", "IoU.cpu().numpy", "IoU.cpu"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean"], ["", "", "", "def", "get", "(", "self", ",", "return_category_iou", "=", "False", ")", ":", "\n", "        ", "\"\"\"Gets the current evaluation result.\n\n        Returns\n        -------\n        metrics : tuple of float\n            pixAcc and mIoU\n        \"\"\"", "\n", "pixAcc", "=", "1.0", "*", "self", ".", "total_correct", "/", "(", "2.220446049250313e-16", "+", "self", ".", "total_label", ")", "# remove np.spacing(1)", "\n", "IoU", "=", "1.0", "*", "self", ".", "total_inter", "/", "(", "2.220446049250313e-16", "+", "self", ".", "total_union", ")", "\n", "mIoU", "=", "IoU", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "if", "return_category_iou", ":", "\n", "            ", "return", "pixAcc", ",", "mIoU", ",", "IoU", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "pixAcc", ",", "mIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.reset": [[75, 81], ["torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the internal evaluation result to initial state.\"\"\"", "\n", "self", ".", "total_inter", "=", "torch", ".", "zeros", "(", "self", ".", "nclass", ")", "\n", "self", ".", "total_union", "=", "torch", ".", "zeros", "(", "self", ".", "nclass", ")", "\n", "self", ".", "total_correct", "=", "0", "\n", "self", ".", "total_label", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.batch_pix_accuracy": [[83, 93], ["torch.sum", "torch.sum", "torch.argmax", "target.long", "output.long"], "function", ["None"], ["", "", "def", "batch_pix_accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "\"\"\"PixAcc\"\"\"", "\n", "# inputs are numpy array, output 4D, target 3D", "\n", "predict", "=", "torch", ".", "argmax", "(", "output", ".", "long", "(", ")", ",", "1", ")", "+", "1", "\n", "target", "=", "target", ".", "long", "(", ")", "+", "1", "\n", "\n", "pixel_labeled", "=", "torch", ".", "sum", "(", "target", ">", "0", ")", "#.item()", "\n", "pixel_correct", "=", "torch", ".", "sum", "(", "(", "predict", "==", "target", ")", "*", "(", "target", ">", "0", ")", ")", "#.item()", "\n", "assert", "pixel_correct", "<=", "pixel_labeled", ",", "\"Correct area should be smaller than Labeled\"", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.batch_intersection_union": [[95, 114], ["torch.histc", "torch.histc", "torch.histc", "torch.argmax", "target.float", "predict.float", "intersection.cpu", "predict.cpu", "target.cpu", "torch.sum().item", "torch.histc.float", "area_union.float", "torch.sum"], "function", ["None"], ["", "def", "batch_intersection_union", "(", "output", ",", "target", ",", "nclass", ")", ":", "\n", "    ", "\"\"\"mIoU\"\"\"", "\n", "# inputs are numpy array, output 4D, target 3D", "\n", "mini", "=", "1", "\n", "maxi", "=", "nclass", "\n", "nbins", "=", "nclass", "\n", "predict", "=", "torch", ".", "argmax", "(", "output", ",", "1", ")", "+", "1", "\n", "target", "=", "target", ".", "float", "(", ")", "+", "1", "\n", "\n", "predict", "=", "predict", ".", "float", "(", ")", "*", "(", "target", ">", "0", ")", ".", "float", "(", ")", "\n", "intersection", "=", "predict", "*", "(", "predict", "==", "target", ")", ".", "float", "(", ")", "\n", "# areas of intersection and union", "\n", "# element 0 in intersection occur the main difference from np.bincount. set boundary to -1 is necessary.", "\n", "area_inter", "=", "torch", ".", "histc", "(", "intersection", ".", "cpu", "(", ")", ",", "bins", "=", "nbins", ",", "min", "=", "mini", ",", "max", "=", "maxi", ")", "\n", "area_pred", "=", "torch", ".", "histc", "(", "predict", ".", "cpu", "(", ")", ",", "bins", "=", "nbins", ",", "min", "=", "mini", ",", "max", "=", "maxi", ")", "\n", "area_lab", "=", "torch", ".", "histc", "(", "target", ".", "cpu", "(", ")", ",", "bins", "=", "nbins", ",", "min", "=", "mini", ",", "max", "=", "maxi", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "\n", "assert", "torch", ".", "sum", "(", "area_inter", ">", "area_union", ")", ".", "item", "(", ")", "==", "0", ",", "\"Intersection area should be smaller than Union area\"", "\n", "return", "area_inter", ".", "float", "(", ")", ",", "area_union", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.pixelAccuracy": [[116, 131], ["numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "pixelAccuracy", "(", "imPred", ",", "imLab", ")", ":", "\n", "    ", "\"\"\"\n    This function takes the prediction and label of a single image, returns pixel-wise accuracy\n    To compute over many images do:\n    for i = range(Nimages):\n         (pixel_accuracy[i], pixel_correct[i], pixel_labeled[i]) = \\\n            pixelAccuracy(imPred[i], imLab[i])\n    mean_pixel_accuracy = 1.0 * np.sum(pixel_correct) / (np.spacing(1) + np.sum(pixel_labeled))\n    \"\"\"", "\n", "# Remove classes from unlabeled pixels in gt image.", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "imLab", ">=", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "imPred", "==", "imLab", ")", "*", "(", "imLab", ">=", "0", ")", ")", "\n", "pixel_accuracy", "=", "1.0", "*", "pixel_correct", "/", "pixel_labeled", "\n", "return", "(", "pixel_accuracy", ",", "pixel_correct", ",", "pixel_labeled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.intersectionAndUnion": [[133, 155], ["numpy.histogram", "numpy.histogram", "numpy.histogram"], "function", ["None"], ["", "def", "intersectionAndUnion", "(", "imPred", ",", "imLab", ",", "numClass", ")", ":", "\n", "    ", "\"\"\"\n    This function takes the prediction and label of a single image,\n    returns intersection and union areas for each class\n    To compute over many images do:\n    for i in range(Nimages):\n        (area_intersection[:,i], area_union[:,i]) = intersectionAndUnion(imPred[i], imLab[i])\n    IoU = 1.0 * np.sum(area_intersection, axis=1) / np.sum(np.spacing(1)+area_union, axis=1)\n    \"\"\"", "\n", "# Remove classes from unlabeled pixels in gt image.", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "imPred", "=", "imPred", "*", "(", "imLab", ">=", "0", ")", "\n", "\n", "# Compute area intersection:", "\n", "intersection", "=", "imPred", "*", "(", "imPred", "==", "imLab", ")", "\n", "(", "area_intersection", ",", "_", ")", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "\n", "# Compute area union:", "\n", "(", "area_pred", ",", "_", ")", "=", "np", ".", "histogram", "(", "imPred", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "(", "area_lab", ",", "_", ")", "=", "np", ".", "histogram", "(", "imLab", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_intersection", "\n", "return", "(", "area_intersection", ",", "area_union", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.hist_info": [[157, 165], ["numpy.sum", "numpy.sum", "numpy.bincount().reshape", "numpy.bincount", "label[].astype"], "function", ["None"], ["", "def", "hist_info", "(", "pred", ",", "label", ",", "num_cls", ")", ":", "\n", "    ", "assert", "pred", ".", "shape", "==", "label", ".", "shape", "\n", "k", "=", "(", "label", ">=", "0", ")", "&", "(", "label", "<", "num_cls", ")", "\n", "labeled", "=", "np", ".", "sum", "(", "k", ")", "\n", "correct", "=", "np", ".", "sum", "(", "(", "pred", "[", "k", "]", "==", "label", "[", "k", "]", ")", ")", "\n", "\n", "return", "np", ".", "bincount", "(", "num_cls", "*", "label", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "pred", "[", "k", "]", ",", "minlength", "=", "num_cls", "**", "2", ")", ".", "reshape", "(", "num_cls", ",", "\n", "num_cls", ")", ",", "labeled", ",", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.compute_score": [[167, 176], ["numpy.nanmean", "numpy.nanmean", "numpy.diag", "hist.sum", "hist.sum", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "compute_score", "(", "hist", ",", "correct", ",", "labeled", ")", ":", "\n", "    ", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "mean_IU", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "mean_IU_no_back", "=", "np", ".", "nanmean", "(", "iu", "[", "1", ":", "]", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "# freq_IU = (iu[freq > 0] * freq[freq > 0]).sum()", "\n", "mean_pixel_acc", "=", "correct", "/", "labeled", "\n", "\n", "return", "iu", ",", "mean_IU", ",", "mean_IU_no_back", ",", "mean_pixel_acc", "\n", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.default_setup.default_setup": [[11, 37], ["logger.setup_logger", "logging.info", "logging.info", "logging.info", "env.seed_all_rng", "int", "torch.cuda.is_available", "torch.cuda.set_device", "torch.distributed.init_process_group", "distributed.synchronize", "distributed.get_rank", "json.dumps", "distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.logger.setup_logger", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.env.seed_all_rng", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.synchronize", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_rank"], ["def", "default_setup", "(", "args", ")", ":", "\n", "    ", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "args", ".", "num_gpus", "=", "num_gpus", "\n", "args", ".", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "# cudnn.deterministic = True", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "args", ".", "device", "=", "\"cuda\"", "\n", "", "else", ":", "\n", "        ", "args", ".", "distributed", "=", "False", "\n", "args", ".", "device", "=", "\"cpu\"", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", ")", "\n", "synchronize", "(", ")", "\n", "\n", "", "save_dir", "=", "cfg", ".", "TRAIN", ".", "MODEL_SAVE_DIR", "if", "cfg", ".", "PHASE", "==", "'train'", "else", "None", "\n", "setup_logger", "(", "\"Segmentron\"", ",", "save_dir", ",", "get_rank", "(", ")", ",", "filename", "=", "'{}_{}_{}_{}_log.txt'", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "MODEL_NAME", ",", "cfg", ".", "MODEL", ".", "BACKBONE", ",", "cfg", ".", "DATASET", ".", "NAME", ",", "cfg", ".", "TIME_STAMP", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logging", ".", "info", "(", "args", ")", "\n", "logging", ".", "info", "(", "json", ".", "dumps", "(", "cfg", ",", "indent", "=", "8", ")", ")", "\n", "\n", "seed_all_rng", "(", "None", "if", "cfg", ".", "SEED", "<", "0", "else", "cfg", ".", "SEED", "+", "get_rank", "(", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.env.seed_all_rng": [[13, 31], ["numpy.random.seed", "torch.set_rng_state", "random.seed", "logging.getLogger", "logging.getLogger.info", "torch.manual_seed().get_state", "int.from_bytes", "os.getpid", "int", "os.urandom", "torch.manual_seed", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "seed_all_rng", "(", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Set the random seed for the RNG in torch, numpy and python.\n\n    Args:\n        seed (int): if None, will use a strong random seed.\n    \"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "(", "\n", "os", ".", "getpid", "(", ")", "\n", "+", "int", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%S%f\"", ")", ")", "\n", "+", "int", ".", "from_bytes", "(", "os", ".", "urandom", "(", "2", ")", ",", "\"big\"", ")", "\n", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "\"Using a generated random seed {}\"", ".", "format", "(", "seed", ")", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "set_rng_state", "(", "torch", ".", "manual_seed", "(", "seed", ")", ".", "get_state", "(", ")", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__init__": [[14, 17], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SegmentronConfig", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "immutable", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__setattr__": [[18, 30], ["key.split", "t.__getattr__.__getattr__.__getattr__", "t.__getattr__.__getattr__.__getattr__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__getattr__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__getattr__"], ["", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ",", "create_if_not_exist", "=", "True", ")", ":", "\n", "        ", "if", "key", "in", "[", "\"immutable\"", "]", ":", "\n", "            ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "return", "\n", "\n", "", "t", "=", "self", "\n", "keylist", "=", "key", ".", "split", "(", "\".\"", ")", "\n", "for", "k", "in", "keylist", "[", ":", "-", "1", "]", ":", "\n", "            ", "t", "=", "t", ".", "__getattr__", "(", "k", ",", "create_if_not_exist", ")", "\n", "\n", "", "t", ".", "__getattr__", "(", "keylist", "[", "-", "1", "]", ",", "create_if_not_exist", ")", "\n", "t", "[", "keylist", "[", "-", "1", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__getattr__": [[31, 42], ["config.SegmentronConfig"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "key", ",", "create_if_not_exist", "=", "True", ")", ":", "\n", "        ", "if", "key", "in", "[", "\"immutable\"", "]", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "__dict__", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "False", "\n", "", "return", "self", ".", "__dict__", "[", "key", "]", "\n", "\n", "", "if", "not", "key", "in", "self", ":", "\n", "            ", "if", "not", "create_if_not_exist", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", "[", "key", "]", "=", "SegmentronConfig", "(", ")", "\n", "", "return", "self", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__setitem__": [[43, 58], ["isinstance", "super().__setitem__", "AttributeError", "ast.literal_eval"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__setitem__"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "#", "\n", "        ", "if", "self", ".", "immutable", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "'Attempted to set \"{}\" to \"{}\", but SegConfig is immutable'", ".", "\n", "format", "(", "key", ",", "value", ")", ")", "\n", "#", "\n", "", "if", "isinstance", "(", "value", ",", "six", ".", "string_types", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "value", "=", "literal_eval", "(", "value", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "", "except", "SyntaxError", ":", "\n", "                ", "pass", "\n", "", "", "super", "(", "SegmentronConfig", ",", "self", ")", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.update_from_other_cfg": [[59, 76], ["isinstance", "isinstance", "len", "config.SegmentronConfig", "tdic.items", "isinstance", "cfg_list.append", "config.SegmentronConfig.__setattr__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__setattr__"], ["", "def", "update_from_other_cfg", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "dict", ")", ":", "\n", "            ", "other", "=", "SegmentronConfig", "(", "other", ")", "\n", "", "assert", "isinstance", "(", "other", ",", "SegmentronConfig", ")", "\n", "cfg_list", "=", "[", "(", "\"\"", ",", "other", ")", "]", "\n", "while", "len", "(", "cfg_list", ")", ":", "\n", "            ", "prefix", ",", "tdic", "=", "cfg_list", "[", "0", "]", "\n", "cfg_list", "=", "cfg_list", "[", "1", ":", "]", "\n", "for", "key", ",", "value", "in", "tdic", ".", "items", "(", ")", ":", "\n", "                ", "key", "=", "\"{}.{}\"", ".", "format", "(", "prefix", ",", "key", ")", "if", "prefix", "else", "key", "\n", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                    ", "cfg_list", ".", "append", "(", "(", "key", ",", "value", ")", ")", "\n", "continue", "\n", "", "try", ":", "\n", "                    ", "self", ".", "__setattr__", "(", "key", ",", "value", ",", "create_if_not_exist", "=", "False", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "raise", "KeyError", "(", "'Non-existent config key: {}'", ".", "format", "(", "key", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.remove_irrelevant_cfg": [[77, 97], ["MODEL_REGISTRY.get_list", "config.SegmentronConfig.MODEL.keys", "x.lower", "model_name.lower", "config.SegmentronConfig.MODEL.pop", "key.lower", "pop_keys.append", "key.lower", "key.lower", "model_name.lower", "model_name.lower", "model_name.lower", "key.lower", "config.SegmentronConfig.MODEL.POINTREND.BASEMODEL.lower"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.get_list"], ["", "", "", "", "def", "remove_irrelevant_cfg", "(", "self", ")", ":", "\n", "        ", "model_name", "=", "self", ".", "MODEL", ".", "MODEL_NAME", "\n", "\n", "from", ".", ".", "models", ".", "model_zoo", "import", "MODEL_REGISTRY", "\n", "model_list", "=", "MODEL_REGISTRY", ".", "get_list", "(", ")", "\n", "model_list_lower", "=", "[", "x", ".", "lower", "(", ")", "for", "x", "in", "model_list", "]", "\n", "\n", "assert", "model_name", ".", "lower", "(", ")", "in", "model_list_lower", ",", "\"Expected model name in {}, but received {}\"", ".", "format", "(", "model_list", ",", "model_name", ")", "\n", "pop_keys", "=", "[", "]", "\n", "for", "key", "in", "self", ".", "MODEL", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", ".", "lower", "(", ")", "in", "model_list_lower", ":", "\n", "                ", "if", "model_name", ".", "lower", "(", ")", "==", "'pointrend'", "and", "key", ".", "lower", "(", ")", "==", "self", ".", "MODEL", ".", "POINTREND", ".", "BASEMODEL", ".", "lower", "(", ")", ":", "\n", "                    ", "continue", "\n", "", "", "if", "key", ".", "lower", "(", ")", "in", "model_list_lower", "and", "key", ".", "lower", "(", ")", "!=", "model_name", ".", "lower", "(", ")", ":", "\n", "                ", "if", "model_name", ".", "lower", "(", ")", "in", "[", "'pvt_trans2seg'", ",", "'pvt_fpt'", "]", ":", "continue", "\n", "pop_keys", ".", "append", "(", "key", ")", "\n", "", "", "for", "key", "in", "pop_keys", ":", "\n", "            ", "self", ".", "MODEL", ".", "pop", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.check_and_freeze": [[100, 105], ["time.strftime", "config.SegmentronConfig.remove_irrelevant_cfg", "time.localtime"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.remove_irrelevant_cfg"], ["", "", "def", "check_and_freeze", "(", "self", ")", ":", "\n", "        ", "self", ".", "TIME_STAMP", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "# TODO: remove irrelevant config and then freeze", "\n", "self", ".", "remove_irrelevant_cfg", "(", ")", "\n", "self", ".", "immutable", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.update_from_list": [[106, 116], ["zip", "ValueError", "len", "config.SegmentronConfig.__setattr__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__setattr__"], ["", "def", "update_from_list", "(", "self", ",", "config_list", ")", ":", "\n", "        ", "if", "len", "(", "config_list", ")", "%", "2", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Command line options config format error! Please check it: {}\"", ".", "\n", "format", "(", "config_list", ")", ")", "\n", "", "for", "key", ",", "value", "in", "zip", "(", "config_list", "[", "0", ":", ":", "2", "]", ",", "config_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "__setattr__", "(", "key", ",", "value", ",", "create_if_not_exist", "=", "False", ")", "\n", "", "except", "KeyError", ":", "\n", "                ", "raise", "KeyError", "(", "'Non-existent config key: {}'", ".", "format", "(", "key", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.update_from_file": [[117, 121], ["config.SegmentronConfig.update_from_other_cfg", "codecs.open", "yaml.load"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.update_from_other_cfg"], ["", "", "", "def", "update_from_file", "(", "self", ",", "config_file", ")", ":", "\n", "        ", "with", "codecs", ".", "open", "(", "config_file", ",", "'r'", ",", "'utf-8'", ")", "as", "file", ":", "\n", "            ", "loaded_cfg", "=", "yaml", ".", "load", "(", "file", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "self", ".", "update_from_other_cfg", "(", "loaded_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.set_immutable": [[122, 127], ["config.SegmentronConfig.values", "isinstance", "value.set_immutable"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.set_immutable"], ["", "def", "set_immutable", "(", "self", ",", "immutable", ")", ":", "\n", "        ", "self", ".", "immutable", "=", "immutable", "\n", "for", "value", "in", "self", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "SegmentronConfig", ")", ":", "\n", "                ", "value", ".", "set_immutable", "(", "immutable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.is_immutable": [[128, 130], ["None"], "methods", ["None"], ["", "", "", "def", "is_immutable", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "immutable", "", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm._no_grad_trunc_normal_": [[6, 40], ["warnings.warn", "torch.no_grad", "norm._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_": [[42, 61], ["norm._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module._FCNHead.__init__": [[14, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "_FCNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_channels", "=", "in_channels", "//", "4", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "inter_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inter_channels", ",", "channels", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module._FCNHead.forward": [[25, 27], ["module._FCNHead.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module._ASPP.__init__": [[33, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "basic.SeparableConv2d", "basic.SeparableConv2d", "basic.SeparableConv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "collections.OrderedDict", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "2048", ",", "out_channels", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "output_stride", "=", "cfg", ".", "MODEL", ".", "OUTPUT_STRIDE", "\n", "if", "output_stride", "==", "16", ":", "\n", "            ", "dilations", "=", "[", "6", ",", "12", ",", "18", "]", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "dilations", "=", "[", "12", ",", "24", ",", "36", "]", "\n", "", "elif", "output_stride", "==", "32", ":", "\n", "            ", "dilations", "=", "[", "6", ",", "12", ",", "18", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "aspp0", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "self", ".", "aspp1", "=", "SeparableConv2d", "(", "in_channels", ",", "out_channels", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "relu_first", "=", "False", ")", "\n", "self", ".", "aspp2", "=", "SeparableConv2d", "(", "in_channels", ",", "out_channels", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "relu_first", "=", "False", ")", "\n", "self", ".", "aspp3", "=", "SeparableConv2d", "(", "in_channels", ",", "out_channels", ",", "dilation", "=", "dilations", "[", "2", "]", ",", "relu_first", "=", "False", ")", "\n", "\n", "self", ".", "image_pooling", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'gap'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ")", ",", "\n", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "out_channels", "*", "5", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module._ASPP.forward": [[62, 78], ["module._ASPP.image_pooling", "torch.interpolate", "torch.interpolate", "torch.interpolate", "module._ASPP.aspp0", "module._ASPP.aspp1", "module._ASPP.aspp2", "module._ASPP.aspp3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module._ASPP.conv", "module._ASPP.bn", "module._ASPP.relu", "module._ASPP.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "pool", "=", "self", ".", "image_pooling", "(", "x", ")", "\n", "pool", "=", "F", ".", "interpolate", "(", "pool", ",", "size", "=", "x", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "x0", "=", "self", ".", "aspp0", "(", "x", ")", "\n", "x1", "=", "self", ".", "aspp1", "(", "x", ")", "\n", "x2", "=", "self", ".", "aspp2", "(", "x", ")", "\n", "x3", "=", "self", ".", "aspp3", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "pool", ",", "x0", ",", "x1", ",", "x2", ",", "x3", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module.PyramidPooling.__init__": [[83, 91], ["torch.Module.__init__", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "module.PyramidPooling.avgpools.append", "module.PyramidPooling.convs.append", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "basic._ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "sizes", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PyramidPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "int", "(", "in_channels", "/", "4", ")", "\n", "self", ".", "avgpools", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "size", "in", "sizes", ":", "\n", "            ", "self", ".", "avgpools", ".", "append", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "size", ")", ")", "\n", "self", ".", "convs", ".", "append", "(", "_ConvBNReLU", "(", "in_channels", ",", "out_channels", ",", "1", ",", "norm_layer", "=", "norm_layer", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module.PyramidPooling.forward": [[92, 98], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size", "feats.append", "torch.interpolate", "torch.interpolate", "torch.interpolate", "conv", "avgpool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "feats", "=", "[", "x", "]", "\n", "for", "(", "avgpool", ",", "conv", ")", "in", "zip", "(", "self", ".", "avgpools", ",", "self", ".", "convs", ")", ":", "\n", "            ", "feats", ".", "append", "(", "F", ".", "interpolate", "(", "conv", "(", "avgpool", "(", "x", ")", ")", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "feats", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module.PAM_Module.__init__": [[102, 111], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "PAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "key_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "value_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module.PAM_Module.forward": [[112, 132], ["x.size", "module.PAM_Module.query_conv().view().permute", "module.PAM_Module.key_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "module.PAM_Module.softmax", "module.PAM_Module.value_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "module.PAM_Module.permute", "module.PAM_Module.query_conv().view", "module.PAM_Module.key_conv", "module.PAM_Module.value_conv", "module.PAM_Module.query_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X (HxW) X (HxW)\n        \"\"\"", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "self", ".", "query_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "proj_key", "=", "self", ".", "key_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "attention", "=", "self", ".", "softmax", "(", "energy", ")", "\n", "proj_value", "=", "self", ".", "value_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "proj_value", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module.CAM_Module.__init__": [[136, 141], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "CAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module.CAM_Module.forward": [[142, 163], ["x.size", "x.view", "x.view().permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "module.CAM_Module.softmax", "x.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "[].expand_as", "x.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X C X C\n        \"\"\"", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", "\n", "proj_key", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "energy_new", "=", "torch", ".", "max", "(", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "attention", "=", "self", ".", "softmax", "(", "energy_new", ")", "\n", "proj_value", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "attention", ",", "proj_value", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module.EESP.__init__": [[167, 191], ["torch.Module.__init__", "int", "basic._ConvBNPReLU", "list", "range", "module.EESP.k_sizes.sort", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "basic._ConvBN", "basic._BNPReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "int", "module.EESP.k_sizes.append", "module.EESP.spp_dw.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "k", "=", "4", ",", "r_lim", "=", "7", ",", "down_method", "=", "'esp'", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "EESP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "n", "=", "int", "(", "out_channels", "/", "k", ")", "\n", "n1", "=", "out_channels", "-", "(", "k", "-", "1", ")", "*", "n", "\n", "assert", "down_method", "in", "[", "'avg'", ",", "'esp'", "]", ",", "'One of these is suppported (avg or esp)'", "\n", "assert", "n", "==", "n1", ",", "\"n(={}) and n1(={}) should be equal for Depth-wise Convolution \"", ".", "format", "(", "n", ",", "n1", ")", "\n", "self", ".", "proj_1x1", "=", "_ConvBNPReLU", "(", "in_channels", ",", "n", ",", "1", ",", "stride", "=", "1", ",", "groups", "=", "k", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "map_receptive_ksize", "=", "{", "3", ":", "1", ",", "5", ":", "2", ",", "7", ":", "3", ",", "9", ":", "4", ",", "11", ":", "5", ",", "13", ":", "6", ",", "15", ":", "7", ",", "17", ":", "8", "}", "\n", "self", ".", "k_sizes", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "ksize", "=", "int", "(", "3", "+", "2", "*", "i", ")", "\n", "ksize", "=", "ksize", "if", "ksize", "<=", "r_lim", "else", "3", "\n", "self", ".", "k_sizes", ".", "append", "(", "ksize", ")", "\n", "", "self", ".", "k_sizes", ".", "sort", "(", ")", "\n", "self", ".", "spp_dw", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "dilation", "=", "map_receptive_ksize", "[", "self", ".", "k_sizes", "[", "i", "]", "]", "\n", "self", ".", "spp_dw", ".", "append", "(", "nn", ".", "Conv2d", "(", "n", ",", "n", ",", "3", ",", "stride", ",", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "n", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "conv_1x1_exp", "=", "_ConvBN", "(", "out_channels", ",", "out_channels", ",", "1", ",", "1", ",", "groups", "=", "k", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "br_after_cat", "=", "_BNPReLU", "(", "out_channels", ",", "norm_layer", ")", "\n", "self", ".", "module_act", "=", "nn", ".", "PReLU", "(", "out_channels", ")", "\n", "self", ".", "downAvg", "=", "True", "if", "down_method", "==", "'avg'", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.module.EESP.forward": [[192, 208], ["module.EESP.proj_1x1", "range", "module.EESP.conv_1x1_exp", "module.EESP.module_act", "len", "output.append", "module.EESP.br_after_cat", "module.EESP.size", "x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output1", "=", "self", ".", "proj_1x1", "(", "x", ")", "\n", "output", "=", "[", "self", ".", "spp_dw", "[", "0", "]", "(", "output1", ")", "]", "\n", "for", "k", "in", "range", "(", "1", ",", "len", "(", "self", ".", "spp_dw", ")", ")", ":", "\n", "            ", "out_k", "=", "self", ".", "spp_dw", "[", "k", "]", "(", "output1", ")", "\n", "out_k", "=", "out_k", "+", "output", "[", "k", "-", "1", "]", "\n", "output", ".", "append", "(", "out_k", ")", "\n", "", "expanded", "=", "self", ".", "conv_1x1_exp", "(", "self", ".", "br_after_cat", "(", "torch", ".", "cat", "(", "output", ",", "1", ")", ")", ")", "\n", "del", "output", "\n", "if", "self", ".", "stride", "==", "2", "and", "self", ".", "downAvg", ":", "\n", "            ", "return", "expanded", "\n", "\n", "", "if", "expanded", ".", "size", "(", ")", "==", "x", ".", "size", "(", ")", ":", "\n", "            ", "expanded", "=", "expanded", "+", "x", "\n", "\n", "", "return", "self", ".", "module_act", "(", "expanded", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.DropBlock2d.__init__": [[105, 121], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drop_prob", "=", "0.1", ",", "\n", "block_size", "=", "7", ",", "\n", "gamma_scale", "=", "1.0", ",", "\n", "with_noise", "=", "False", ",", "\n", "inplace", "=", "False", ",", "\n", "batchwise", "=", "False", ",", "\n", "fast", "=", "True", ")", ":", "\n", "        ", "super", "(", "DropBlock2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "gamma_scale", "=", "gamma_scale", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "with_noise", "=", "with_noise", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "batchwise", "=", "batchwise", "\n", "self", ".", "fast", "=", "fast", "# FIXME finish comparisons of fast vs not", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.DropBlock2d.forward": [[122, 131], ["drop.drop_block_fast_2d", "drop.drop_block_2d"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_block_fast_2d", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_block_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", "or", "not", "self", ".", "drop_prob", ":", "\n", "            ", "return", "x", "\n", "", "if", "self", ".", "fast", ":", "\n", "            ", "return", "drop_block_fast_2d", "(", "\n", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "block_size", ",", "self", ".", "gamma_scale", ",", "self", ".", "with_noise", ",", "self", ".", "inplace", ",", "self", ".", "batchwise", ")", "\n", "", "else", ":", "\n", "            ", "return", "drop_block_2d", "(", "\n", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "block_size", ",", "self", ".", "gamma_scale", ",", "self", ".", "with_noise", ",", "self", ".", "inplace", ",", "self", ".", "batchwise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.DropPath.__init__": [[154, 157], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.DropPath.forward": [[158, 160], ["drop.drop_path"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_block_2d": [[17, 62], ["min", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.reshape().to", "torch.reshape().to", "torch.reshape().to", "min", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.max_pool2d", "torch.reshape", "torch.reshape", "torch.reshape", "torch.randn", "torch.randn", "torch.randn", "torch.randn_like", "torch.randn_like", "torch.randn_like", "x.mul_().add_", "x.mul_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.mul_", "block_mask.numel", "block_mask.to().sum().add", "block_mask.to().sum", "block_mask.to"], "function", ["None"], ["def", "drop_block_2d", "(", "\n", "x", ",", "drop_prob", ":", "float", "=", "0.1", ",", "block_size", ":", "int", "=", "7", ",", "gamma_scale", ":", "float", "=", "1.0", ",", "\n", "with_noise", ":", "bool", "=", "False", ",", "inplace", ":", "bool", "=", "False", ",", "batchwise", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" DropBlock. See https://arxiv.org/pdf/1810.12890.pdf\n    DropBlock with an experimental gaussian noise option. This layer has been tested on a few training\n    runs with success, but needs further validation and possibly optimization for lower runtime impact.\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "total_size", "=", "W", "*", "H", "\n", "clipped_block_size", "=", "min", "(", "block_size", ",", "min", "(", "W", ",", "H", ")", ")", "\n", "# seed_drop_rate, the gamma parameter", "\n", "gamma", "=", "gamma_scale", "*", "drop_prob", "*", "total_size", "/", "clipped_block_size", "**", "2", "/", "(", "\n", "(", "W", "-", "block_size", "+", "1", ")", "*", "(", "H", "-", "block_size", "+", "1", ")", ")", "\n", "\n", "# Forces the block to be inside the feature map.", "\n", "w_i", ",", "h_i", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "W", ")", ".", "to", "(", "x", ".", "device", ")", ",", "torch", ".", "arange", "(", "H", ")", ".", "to", "(", "x", ".", "device", ")", ")", "\n", "valid_block", "=", "(", "(", "w_i", ">=", "clipped_block_size", "//", "2", ")", "&", "(", "w_i", "<", "W", "-", "(", "clipped_block_size", "-", "1", ")", "//", "2", ")", ")", "&", "(", "(", "h_i", ">=", "clipped_block_size", "//", "2", ")", "&", "(", "h_i", "<", "H", "-", "(", "clipped_block_size", "-", "1", ")", "//", "2", ")", ")", "\n", "valid_block", "=", "torch", ".", "reshape", "(", "valid_block", ",", "(", "1", ",", "1", ",", "H", ",", "W", ")", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "if", "batchwise", ":", "\n", "# one mask for whole batch, quite a bit faster", "\n", "        ", "uniform_noise", "=", "torch", ".", "rand", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "uniform_noise", "=", "torch", ".", "rand_like", "(", "x", ")", "\n", "", "block_mask", "=", "(", "(", "2", "-", "gamma", "-", "valid_block", "+", "uniform_noise", ")", ">=", "1", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "block_mask", "=", "-", "F", ".", "max_pool2d", "(", "\n", "-", "block_mask", ",", "\n", "kernel_size", "=", "clipped_block_size", ",", "# block_size,", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "clipped_block_size", "//", "2", ")", "\n", "\n", "if", "with_noise", ":", "\n", "        ", "normal_noise", "=", "torch", ".", "randn", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "batchwise", "else", "torch", ".", "randn_like", "(", "x", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", ")", ".", "add_", "(", "normal_noise", "*", "(", "1", "-", "block_mask", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "+", "normal_noise", "*", "(", "1", "-", "block_mask", ")", "\n", "", "", "else", ":", "\n", "        ", "normalize_scale", "=", "(", "block_mask", ".", "numel", "(", ")", "/", "block_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "sum", "(", ")", ".", "add", "(", "1e-7", ")", ")", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", "*", "normalize_scale", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "*", "normalize_scale", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_block_fast_2d": [[64, 100], ["min", "torch.max_pool2d", "min", "F.max_pool2d.to", "torch.rand", "torch.rand", "torch.rand", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.randn", "torch.randn", "torch.randn", "torch.randn_like", "torch.randn_like", "torch.randn_like", "x.mul_().add_", "x.mul_", "x.mul_", "F.max_pool2d.numel", "F.max_pool2d.to().sum().add", "F.max_pool2d.to().sum", "F.max_pool2d.to"], "function", ["None"], ["", "def", "drop_block_fast_2d", "(", "\n", "x", ":", "torch", ".", "Tensor", ",", "drop_prob", ":", "float", "=", "0.1", ",", "block_size", ":", "int", "=", "7", ",", "\n", "gamma_scale", ":", "float", "=", "1.0", ",", "with_noise", ":", "bool", "=", "False", ",", "inplace", ":", "bool", "=", "False", ",", "batchwise", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" DropBlock. See https://arxiv.org/pdf/1810.12890.pdf\n    DropBlock with an experimental gaussian noise option. Simplied from above without concern for valid\n    block mask at edges.\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "total_size", "=", "W", "*", "H", "\n", "clipped_block_size", "=", "min", "(", "block_size", ",", "min", "(", "W", ",", "H", ")", ")", "\n", "gamma", "=", "gamma_scale", "*", "drop_prob", "*", "total_size", "/", "clipped_block_size", "**", "2", "/", "(", "\n", "(", "W", "-", "block_size", "+", "1", ")", "*", "(", "H", "-", "block_size", "+", "1", ")", ")", "\n", "\n", "if", "batchwise", ":", "\n", "# one mask for whole batch, quite a bit faster", "\n", "        ", "block_mask", "=", "torch", ".", "rand", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "<", "gamma", "\n", "", "else", ":", "\n", "# mask per batch element", "\n", "        ", "block_mask", "=", "torch", ".", "rand_like", "(", "x", ")", "<", "gamma", "\n", "", "block_mask", "=", "F", ".", "max_pool2d", "(", "\n", "block_mask", ".", "to", "(", "x", ".", "dtype", ")", ",", "kernel_size", "=", "clipped_block_size", ",", "stride", "=", "1", ",", "padding", "=", "clipped_block_size", "//", "2", ")", "\n", "\n", "if", "with_noise", ":", "\n", "        ", "normal_noise", "=", "torch", ".", "randn", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "batchwise", "else", "torch", ".", "randn_like", "(", "x", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "1.", "-", "block_mask", ")", ".", "add_", "(", "normal_noise", "*", "block_mask", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "(", "1.", "-", "block_mask", ")", "+", "normal_noise", "*", "block_mask", "\n", "", "", "else", ":", "\n", "        ", "block_mask", "=", "1", "-", "block_mask", "\n", "normalize_scale", "=", "(", "block_mask", ".", "numel", "(", ")", "/", "block_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "sum", "(", ")", ".", "add", "(", "1e-7", ")", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", "*", "normalize_scale", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "*", "normalize_scale", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path": [[133, 149], ["random_tensor.floor_", "torch.rand", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["", "", "", "def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.FrozenBatchNorm2d.__init__": [[32, 40], ["torch.nn.Module.__init__", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "num_features", ")", "-", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.FrozenBatchNorm2d.forward": [[41, 47], ["scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "scale", "=", "self", ".", "weight", "*", "(", "self", ".", "running_var", "+", "self", ".", "eps", ")", ".", "rsqrt", "(", ")", "\n", "bias", "=", "self", ".", "bias", "-", "self", ".", "running_mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.FrozenBatchNorm2d._load_from_state_dict": [[48, 69], ["local_metadata.get", "super()._load_from_state_dict", "logging.info", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "prefix.rstrip"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.FrozenBatchNorm2d._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "\n", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", "\n", ")", ":", "\n", "        ", "version", "=", "local_metadata", ".", "get", "(", "\"version\"", ",", "None", ")", "\n", "\n", "if", "version", "is", "None", "or", "version", "<", "2", ":", "\n", "# No running_mean/var in early versions", "\n", "# This will silent the warnings", "\n", "            ", "if", "prefix", "+", "\"running_mean\"", "not", "in", "state_dict", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "\"running_mean\"", "]", "=", "torch", ".", "zeros_like", "(", "self", ".", "running_mean", ")", "\n", "", "if", "prefix", "+", "\"running_var\"", "not", "in", "state_dict", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "\"running_var\"", "]", "=", "torch", ".", "ones_like", "(", "self", ".", "running_var", ")", "\n", "\n", "", "", "if", "version", "is", "not", "None", "and", "version", "<", "3", ":", "\n", "# logger = logging.getLogger(__name__)", "\n", "            ", "logging", ".", "info", "(", "\"FrozenBatchNorm {} is upgraded to version 3.\"", ".", "format", "(", "prefix", ".", "rstrip", "(", "\".\"", ")", ")", ")", "\n", "# In version < 3, running_var are used without +eps.", "\n", "state_dict", "[", "prefix", "+", "\"running_var\"", "]", "-=", "self", ".", "eps", "\n", "\n", "", "super", "(", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.FrozenBatchNorm2d.__repr__": [[71, 73], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"FrozenBatchNorm2d(num_features={}, eps={})\"", ".", "format", "(", "self", ".", "num_features", ",", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.FrozenBatchNorm2d.convert_frozen_batchnorm": [[74, 105], ["isinstance", "cls", "module.named_children", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "cls.convert_frozen_batchnorm", "cls.add_module", "module.weight.data.clone", "module.bias.data.clone"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.FrozenBatchNorm2d.convert_frozen_batchnorm"], ["", "@", "classmethod", "\n", "def", "convert_frozen_batchnorm", "(", "cls", ",", "module", ")", ":", "\n", "        ", "\"\"\"\n        Convert BatchNorm/SyncBatchNorm in module into FrozenBatchNorm.\n\n        Args:\n            module (torch.nn.Module):\n\n        Returns:\n            If module is BatchNorm/SyncBatchNorm, returns a new module.\n            Otherwise, in-place convert module and return it.\n\n        Similar to convert_sync_batchnorm in\n        https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/batchnorm.py\n        \"\"\"", "\n", "bn_module", "=", "nn", ".", "modules", ".", "batchnorm", "\n", "bn_module", "=", "(", "bn_module", ".", "BatchNorm2d", ",", "bn_module", ".", "SyncBatchNorm", ")", "\n", "res", "=", "module", "\n", "if", "isinstance", "(", "module", ",", "bn_module", ")", ":", "\n", "            ", "res", "=", "cls", "(", "module", ".", "num_features", ")", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "res", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "res", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "res", ".", "running_mean", ".", "data", "=", "module", ".", "running_mean", ".", "data", "\n", "res", ".", "running_var", ".", "data", "=", "module", ".", "running_var", ".", "data", "+", "module", ".", "eps", "\n", "", "else", ":", "\n", "            ", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "                ", "new_child", "=", "cls", ".", "convert_frozen_batchnorm", "(", "child", ")", "\n", "if", "new_child", "is", "not", "child", ":", "\n", "                    ", "res", ".", "add_module", "(", "name", ",", "new_child", ")", "\n", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.AllReduce.forward": [[136, 143], ["torch.all_gather", "torch.all_gather", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.all_gather", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.all_gather", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "input_list", "=", "[", "torch", ".", "zeros_like", "(", "input", ")", "for", "k", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "# Use allgather instead of allreduce since I don't trust in-place operations ..", "\n", "dist", ".", "all_gather", "(", "input_list", ",", "input", ",", "async_op", "=", "False", ")", "\n", "inputs", "=", "torch", ".", "stack", "(", "input_list", ",", "dim", "=", "0", ")", "\n", "return", "torch", ".", "sum", "(", "inputs", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.AllReduce.backward": [[144, 148], ["torch.all_reduce", "torch.all_reduce"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "grad_output", ",", "async_op", "=", "False", ")", "\n", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.NaiveSyncBatchNorm.forward": [[161, 184], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.split", "torch.split", "torch.split", "torch.split", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape", "super().forward", "AllReduce.apply", "utils.distributed.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.mean.detach", "torch.mean.detach", "var.detach"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.distributed.get_world_size"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "get_world_size", "(", ")", "==", "1", "or", "not", "self", ".", "training", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "\n", "", "assert", "input", ".", "shape", "[", "0", "]", ">", "0", ",", "\"SyncBatchNorm does not support empty inputs\"", "\n", "C", "=", "input", ".", "shape", "[", "1", "]", "\n", "mean", "=", "torch", ".", "mean", "(", "input", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "meansqr", "=", "torch", ".", "mean", "(", "input", "*", "input", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "\n", "vec", "=", "torch", ".", "cat", "(", "[", "mean", ",", "meansqr", "]", ",", "dim", "=", "0", ")", "\n", "vec", "=", "AllReduce", ".", "apply", "(", "vec", ")", "*", "(", "1.0", "/", "dist", ".", "get_world_size", "(", ")", ")", "\n", "\n", "mean", ",", "meansqr", "=", "torch", ".", "split", "(", "vec", ",", "C", ")", "\n", "var", "=", "meansqr", "-", "mean", "*", "mean", "\n", "self", ".", "running_mean", "+=", "self", ".", "momentum", "*", "(", "mean", ".", "detach", "(", ")", "-", "self", ".", "running_mean", ")", "\n", "self", ".", "running_var", "+=", "self", ".", "momentum", "*", "(", "var", ".", "detach", "(", ")", "-", "self", ".", "running_var", ")", "\n", "\n", "invstd", "=", "torch", ".", "rsqrt", "(", "var", "+", "self", ".", "eps", ")", "\n", "scale", "=", "self", ".", "weight", "*", "invstd", "\n", "bias", "=", "self", ".", "bias", "-", "mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "input", "*", "scale", "+", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.groupNorm": [[107, 109], ["torch.nn.GroupNorm", "min"], "function", ["None"], ["", "", "def", "groupNorm", "(", "num_channels", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "GroupNorm", "(", "min", "(", "32", ",", "num_channels", ")", ",", "num_channels", ",", "eps", "=", "eps", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.get_norm": [[111, 133], ["isinstance", "len"], "function", ["None"], ["", "def", "get_norm", "(", "norm", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        norm (str or callable):\n\n    Returns:\n        nn.Module or None: the normalization layer\n    \"\"\"", "\n", "support_norm_type", "=", "[", "'BN'", ",", "'SyncBN'", ",", "'FrozenBN'", ",", "'GN'", ",", "'nnSyncBN'", "]", "\n", "assert", "norm", "in", "support_norm_type", ",", "'Unknown norm type {}, support norm types are {}'", ".", "format", "(", "\n", "norm", ",", "support_norm_type", ")", "\n", "if", "isinstance", "(", "norm", ",", "str", ")", ":", "\n", "        ", "if", "len", "(", "norm", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "norm", "=", "{", "\n", "\"BN\"", ":", "nn", ".", "BatchNorm2d", ",", "\n", "\"SyncBN\"", ":", "NaiveSyncBatchNorm", ",", "\n", "\"FrozenBN\"", ":", "FrozenBatchNorm2d", ",", "\n", "\"GN\"", ":", "groupNorm", ",", "\n", "\"nnSyncBN\"", ":", "nn", ".", "SyncBatchNorm", ",", "# keep for debugging", "\n", "}", "[", "norm", "]", "\n", "", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic.SeparableConv2d.__init__": [[35, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "relu_first", "=", "True", ",", "\n", "bias", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "depthwise", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "inplanes", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "inplanes", ",", "bias", "=", "bias", ")", "\n", "bn_depth", "=", "norm_layer", "(", "inplanes", ")", "\n", "pointwise", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "bias", "=", "bias", ")", "\n", "bn_point", "=", "norm_layer", "(", "planes", ")", "\n", "\n", "if", "relu_first", ":", "\n", "            ", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'relu'", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "'depthwise'", ",", "depthwise", ")", ",", "\n", "(", "'bn_depth'", ",", "bn_depth", ")", ",", "\n", "(", "'pointwise'", ",", "pointwise", ")", ",", "\n", "(", "'bn_point'", ",", "bn_point", ")", "\n", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'depthwise'", ",", "depthwise", ")", ",", "\n", "(", "'bn_depth'", ",", "bn_depth", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pointwise'", ",", "pointwise", ")", ",", "\n", "(", "'bn_point'", ",", "bn_point", ")", ",", "\n", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic.SeparableConv2d.forward": [[61, 63], ["basic.SeparableConv2d.block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._ConvBNReLU.__init__": [[66, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU6", "torch.ReLU6", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "groups", "=", "1", ",", "relu6", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "_ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "True", ")", "if", "relu6", "else", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._ConvBNReLU.forward": [[73, 78], ["basic._ConvBNReLU.conv", "basic._ConvBNReLU.bn", "basic._ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._ConvBNPReLU.__init__": [[81, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "groups", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "_ConvBNPReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "out_channels", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._ConvBNPReLU.forward": [[88, 93], ["basic._ConvBNPReLU.conv", "basic._ConvBNPReLU.bn", "basic._ConvBNPReLU.prelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._ConvBN.__init__": [[96, 101], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "groups", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "_ConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._ConvBN.forward": [[102, 106], ["basic._ConvBN.conv", "basic._ConvBN.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._BNPReLU.__init__": [[109, 113], ["torch.Module.__init__", "norm_layer", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "_BNPReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "out_channels", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._BNPReLU.forward": [[114, 118], ["basic._BNPReLU.bn", "basic._BNPReLU.prelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._DepthwiseConv.__init__": [[126, 131], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "basic._ConvBNReLU", "basic._ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "_DepthwiseConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "_ConvBNReLU", "(", "in_channels", ",", "in_channels", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "in_channels", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "_ConvBNReLU", "(", "in_channels", ",", "out_channels", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._DepthwiseConv.forward": [[132, 134], ["basic._DepthwiseConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic.InvertedResidual.__init__": [[140, 158], ["torch.Module.__init__", "list", "int", "list.extend", "torch.Sequential", "torch.Sequential", "round", "list.append", "basic._ConvBNReLU", "basic._ConvBNReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "expand_ratio", ",", "dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "use_res_connect", "=", "stride", "==", "1", "and", "in_channels", "==", "out_channels", "\n", "\n", "layers", "=", "list", "(", ")", "\n", "inter_channels", "=", "int", "(", "round", "(", "in_channels", "*", "expand_ratio", ")", ")", "\n", "if", "expand_ratio", "!=", "1", ":", "\n", "# pw", "\n", "            ", "layers", ".", "append", "(", "_ConvBNReLU", "(", "in_channels", ",", "inter_channels", ",", "1", ",", "relu6", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "layers", ".", "extend", "(", "[", "\n", "# dw", "\n", "_ConvBNReLU", "(", "inter_channels", ",", "inter_channels", ",", "3", ",", "stride", ",", "dilation", ",", "dilation", ",", "\n", "groups", "=", "inter_channels", ",", "relu6", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "inter_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic.InvertedResidual.forward": [[159, 164], ["basic.InvertedResidual.conv", "basic.InvertedResidual.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._pytorch_padding": [[13, 24], ["basic._fixed_padding", "all"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._fixed_padding"], ["def", "_pytorch_padding", "(", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "**", "_", ")", ":", "\n", "    ", "if", "_USE_FIXED_PAD", ":", "\n", "        ", "return", "0", "# FIXME remove once verified", "\n", "", "else", ":", "\n", "        ", "padding", "=", "(", "(", "stride", "-", "1", ")", "+", "dilation", "*", "(", "kernel_size", "-", "1", ")", ")", "//", "2", "\n", "\n", "# FIXME remove once verified", "\n", "fp", "=", "_fixed_padding", "(", "kernel_size", ",", "dilation", ")", "\n", "assert", "all", "(", "padding", "==", "p", "for", "p", "in", "fp", ")", "\n", "\n", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.basic._fixed_padding": [[26, 32], ["None"], "function", ["None"], ["", "", "def", "_fixed_padding", "(", "kernel_size", ",", "dilation", ")", ":", "\n", "    ", "kernel_size_effective", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "dilation", "-", "1", ")", "\n", "pad_total", "=", "kernel_size_effective", "-", "1", "\n", "pad_beg", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_beg", "\n", "return", "[", "pad_beg", ",", "pad_end", ",", "pad_beg", ",", "pad_end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.sync_bn.syncbn.SyncBatchNorm.__init__": [[52, 63], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "list", "queue.Queue", "range", "len", "queue.Queue", "torch.cuda.device_count", "len"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "sync", "=", "True", ",", "activation", "=", "'none'", ",", "slope", "=", "0.01", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "SyncBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "True", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "inplace", "=", "False", "if", "activation", "==", "'none'", "else", "inplace", "\n", "self", ".", "slope", "=", "slope", "\n", "self", ".", "devices", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "self", ".", "sync", "=", "sync", "if", "len", "(", "self", ".", "devices", ")", ">", "1", "else", "False", "\n", "# Initialize queues", "\n", "self", ".", "worker_ids", "=", "self", ".", "devices", "[", "1", ":", "]", "\n", "self", ".", "master_queue", "=", "Queue", "(", "len", "(", "self", ".", "worker_ids", ")", ")", "\n", "self", ".", "worker_queues", "=", "[", "Queue", "(", "1", ")", "for", "_", "in", "self", ".", "worker_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.sync_bn.syncbn.SyncBatchNorm.forward": [[64, 91], ["x.view.view.size", "x.view.view.view", "x.view.view.get_device", "inp_syncbatchnorm().view", "syncbatchnorm().view", "inp_syncbatchnorm", "syncbatchnorm", "syncbn.SyncBatchNorm.worker_ids.index", "x.view.view.get_device"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# resize the input to (B, C, -1)", "\n", "        ", "input_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "input_shape", "[", "0", "]", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "if", "x", ".", "get_device", "(", ")", "==", "self", ".", "devices", "[", "0", "]", ":", "\n", "# Master mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "True", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queues\"", ":", "self", ".", "worker_queues", ",", "\n", "\"worker_ids\"", ":", "self", ".", "worker_ids", "\n", "}", "\n", "", "else", ":", "\n", "# Worker mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "False", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queue\"", ":", "self", ".", "worker_queues", "[", "self", ".", "worker_ids", ".", "index", "(", "x", ".", "get_device", "(", ")", ")", "]", "\n", "}", "\n", "", "if", "self", ".", "inplace", ":", "\n", "            ", "return", "inp_syncbatchnorm", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "sync", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "\n", "self", ".", "activation", ",", "self", ".", "slope", ")", ".", "view", "(", "input_shape", ")", "\n", "", "else", ":", "\n", "            ", "return", "syncbatchnorm", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "sync", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "\n", "self", ".", "activation", ",", "self", ".", "slope", ")", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.sync_bn.syncbn.SyncBatchNorm.extra_repr": [[92, 98], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "activation", "==", "'none'", ":", "\n", "            ", "return", "'sync={}'", ".", "format", "(", "self", ".", "sync", ")", "\n", "", "else", ":", "\n", "            ", "return", "'sync={}, act={}, slope={}, inplace={}'", ".", "format", "(", "\n", "self", ".", "sync", ",", "self", ".", "activation", ",", "self", ".", "slope", ",", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.sync_bn.syncbn.BatchNorm1d.__init__": [[103, 107], ["warnings.warn", "syncbn.SyncBatchNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"core.nn.sync_bn.{} is now deprecated in favor of core.nn.sync_bn.{}.\"", "\n", ".", "format", "(", "'BatchNorm1d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "DeprecationWarning", ")", "\n", "super", "(", "BatchNorm1d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.sync_bn.syncbn.BatchNorm2d.__init__": [[112, 116], ["warnings.warn", "syncbn.SyncBatchNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"core.nn.sync_bn.{} is now deprecated in favor of core.nn.sync_bn.{}.\"", "\n", ".", "format", "(", "'BatchNorm2d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "DeprecationWarning", ")", "\n", "super", "(", "BatchNorm2d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.sync_bn.syncbn.BatchNorm3d.__init__": [[121, 125], ["warnings.warn", "syncbn.SyncBatchNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"core.nn.sync_bn.{} is now deprecated in favor of core.nn.sync_bn.{}.\"", "\n", ".", "format", "(", "'BatchNorm3d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "DeprecationWarning", ")", "\n", "super", "(", "BatchNorm3d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.__init__": [[22, 62], ["segbase.SegBaseModel.__init__", "pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.backbone.startswith", "pvt2_mit_fpt_joint.FPTHead", "pvt2_mit_fpt_joint.FPTHead", "pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.__setattr__", "pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.backbone.startswith", "modules._FCNHead", "decoders.append", "pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.backbone.startswith", "pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.backbone.startswith", "pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.backbone.startswith"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__setattr__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "self", ".", "backbone", ".", "startswith", "(", "'mobilenet'", ")", ":", "\n", "            ", "c1_channels", "=", "24", "\n", "c4_channels", "=", "320", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'resnet18'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'pvt'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'resnet34'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'hrnet_w18_small_v1'", ")", ":", "\n", "            ", "c1_channels", "=", "16", "\n", "c4_channels", "=", "128", "\n", "", "else", ":", "\n", "            ", "c1_channels", "=", "256", "\n", "c4_channels", "=", "2048", "\n", "\n", "", "vit_params", "=", "cfg", ".", "MODEL", ".", "TRANS4TRANS", "\n", "hid_dim", "=", "cfg", ".", "MODEL", ".", "TRANS4TRANS", ".", "hid_dim", "\n", "\n", "assert", "cfg", ".", "TRAIN", ".", "CROP_SIZE", "[", "0", "]", "==", "cfg", ".", "TRAIN", ".", "CROP_SIZE", "[", "1", "]", "==", "cfg", ".", "TRAIN", ".", "BASE_SIZE", "==", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "0", "]", "==", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "1", "]", "\n", "c4_HxW", "=", "(", "cfg", ".", "TRAIN", ".", "BASE_SIZE", "//", "32", ")", "**", "2", "\n", "\n", "vit_params", "[", "'decoder_feat_HxW'", "]", "=", "c4_HxW", "\n", "vit_params", "[", "'emb_chans'", "]", "=", "cfg", ".", "MODEL", ".", "EMB_CHANNELS", "\n", "\n", "vit_params", "[", "'nclass'", "]", "=", "self", ".", "nclass", "\n", "self", ".", "fpt_head_1", "=", "FPTHead", "(", "vit_params", ",", "c1_channels", "=", "c1_channels", ",", "c4_channels", "=", "c4_channels", ",", "hid_dim", "=", "hid_dim", ")", "\n", "vit_params", "[", "'nclass'", "]", "=", "datasets", "[", "cfg", ".", "DATASET2", ".", "NAME", "]", ".", "NUM_CLASS", "\n", "self", ".", "fpt_head_2", "=", "FPTHead", "(", "vit_params", ",", "c1_channels", "=", "c1_channels", ",", "c4_channels", "=", "c4_channels", ",", "hid_dim", "=", "hid_dim", ")", "\n", "decoders", "=", "[", "'fpt_head_1'", ",", "'fpt_head_2'", "]", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "self", ".", "auxlayer", "=", "_FCNHead", "(", "728", ",", "self", ".", "nclass", ")", "\n", "decoders", ".", "append", "(", "'auxlayer'", ")", "\n", "", "self", ".", "__setattr__", "(", "'decoder'", ",", "decoders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.forward": [[64, 82], ["pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.encoder", "list", "pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.fpt_head_1", "torch.interpolate", "torch.interpolate", "list.append", "pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.fpt_head_2", "torch.interpolate", "torch.interpolate", "list.append", "tuple", "x.size", "pvt2_mit_fpt_joint.PVTV2_FPT_JOINT.auxlayer", "torch.interpolate", "torch.interpolate", "list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "self", ".", "encoder", "(", "x", ")", "\n", "\n", "outputs", "=", "list", "(", ")", "\n", "x_1", "=", "self", ".", "fpt_head_1", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ")", "\n", "x_1", "=", "F", ".", "interpolate", "(", "x_1", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "outputs", ".", "append", "(", "x_1", ")", "\n", "\n", "x_2", "=", "self", ".", "fpt_head_2", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ")", "\n", "x_2", "=", "F", ".", "interpolate", "(", "x_2", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "outputs", ".", "append", "(", "x_2", ")", "\n", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "auxout", "=", "self", ".", "auxlayer", "(", "c3", ")", "\n", "auxout", "=", "F", ".", "interpolate", "(", "auxout", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "outputs", ".", "append", "(", "auxout", ")", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt2_mit_fpt_joint.ProjEmbed.__init__": [[86, 90], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", "=", "512", ",", "emb_chans", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "in_chans", ",", "emb_chans", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "emb_chans", ")", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt2_mit_fpt_joint.ProjEmbed._init_weights": [[90, 104], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt2_mit_fpt_joint.ProjEmbed.forward": [[104, 109], ["pvt2_mit_fpt_joint.ProjEmbed.proj", "pvt2_mit_fpt_joint.ProjEmbed.norm", "pvt2_mit_fpt_joint.ProjEmbed.flatten().transpose", "pvt2_mit_fpt_joint.ProjEmbed.flatten"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "# x = self.act1(self.bn1(self.fc1(x))).flatten(2).transpose(1, 2)", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt2_mit_fpt_joint.HeadBlock.__init__": [[111, 121], ["torch.Module.__init__", "pvt2_mit_fpt_joint.ProjEmbed", "backbones.pvtv2_mix_transformer.Attention", "torch.Identity", "torch.Identity", "int", "backbones.pvtv2_mix_transformer.Mlp", "functools.partial", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_chans", "=", "512", ",", "emb_chans", "=", "64", ",", "num_heads", "=", "2", ",", "sr_ratio", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "ProjEmbed", "(", "in_chans", "=", "in_chans", ",", "emb_chans", "=", "emb_chans", ")", "\n", "self", ".", "norm1", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "(", "emb_chans", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "emb_chans", ",", "num_heads", "=", "num_heads", ",", "sr_ratio", "=", "sr_ratio", ")", "\n", "self", ".", "drop_path", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "(", "emb_chans", ")", "\n", "mlp_ratio", "=", "2", "\n", "mlp_hidden_dim", "=", "int", "(", "emb_chans", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "emb_chans", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "nn", ".", "Hardswish", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt2_mit_fpt_joint.HeadBlock.forward": [[122, 131], ["pvt2_mit_fpt_joint.HeadBlock.proj", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute().contiguous", "pvt2_mit_fpt_joint.HeadBlock.drop_path", "pvt2_mit_fpt_joint.HeadBlock.drop_path", "pvt2_mit_fpt_joint.HeadBlock.attn", "pvt2_mit_fpt_joint.HeadBlock.mlp", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute", "pvt2_mit_fpt_joint.HeadBlock.norm1", "pvt2_mit_fpt_joint.HeadBlock.norm2", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt2_mit_fpt_joint.FPTHead.__init__": [[135, 145], ["torch.Module.__init__", "pvt2_mit_fpt_joint.HeadBlock", "pvt2_mit_fpt_joint.HeadBlock", "pvt2_mit_fpt_joint.HeadBlock", "pvt2_mit_fpt_joint.HeadBlock", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vit_params", ",", "c1_channels", "=", "256", ",", "c4_channels", "=", "2048", ",", "hid_dim", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "sr_ratio", "=", "[", "4", ",", "4", ",", "4", ",", "1", "]", "\n", "emb_chans", "=", "vit_params", "[", "'emb_chans'", "]", "\n", "self", ".", "head1", "=", "HeadBlock", "(", "in_chans", "=", "64", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "0", "]", ")", "\n", "self", ".", "head2", "=", "HeadBlock", "(", "in_chans", "=", "128", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "1", "]", ")", "\n", "self", ".", "head3", "=", "HeadBlock", "(", "in_chans", "=", "320", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "2", "]", ")", "\n", "self", ".", "head4", "=", "HeadBlock", "(", "in_chans", "=", "512", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "3", "]", ")", "\n", "\n", "self", ".", "pred", "=", "nn", ".", "Conv2d", "(", "emb_chans", ",", "vit_params", "[", "'nclass'", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt2_mit_fpt_joint.FPTHead.forward": [[147, 162], ["pvt2_mit_fpt_joint.FPTHead.head4", "torch.interpolate", "torch.interpolate", "pvt2_mit_fpt_joint.FPTHead.head3", "torch.interpolate", "torch.interpolate", "pvt2_mit_fpt_joint.FPTHead.head2", "torch.interpolate", "torch.interpolate", "pvt2_mit_fpt_joint.FPTHead.head1", "pvt2_mit_fpt_joint.FPTHead.pred", "c1.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c1", ",", "c2", ",", "c3", ",", "c4", ")", ":", "\n", "        ", "size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "c4", "=", "self", ".", "head4", "(", "c4", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "c4", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "c3", "=", "self", ".", "head3", "(", "c3", ")", "\n", "out", "+=", "F", ".", "interpolate", "(", "c3", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "c2", "=", "self", ".", "head2", "(", "c2", ")", "\n", "out", "+=", "F", ".", "interpolate", "(", "c2", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "out", "+=", "self", ".", "head1", "(", "c1", ")", "\n", "out", "=", "self", ".", "pred", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase.SegBaseModel.__init__": [[19, 28], ["torch.Module.__init__", "modules.get_norm", "segbase.SegBaseModel.get_backbone"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.batch_norm.get_norm", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase.SegBaseModel.get_backbone"], ["def", "__init__", "(", "self", ",", "need_backbone", "=", "True", ")", ":", "\n", "        ", "super", "(", "SegBaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nclass", "=", "datasets", "[", "cfg", ".", "DATASET", ".", "NAME", "]", ".", "NUM_CLASS", "\n", "self", ".", "aux", "=", "cfg", ".", "SOLVER", ".", "AUX", "\n", "self", ".", "norm_layer", "=", "get_norm", "(", "cfg", ".", "MODEL", ".", "BN_TYPE", ")", "\n", "self", ".", "backbone", "=", "None", "\n", "self", ".", "encoder", "=", "None", "\n", "if", "need_backbone", ":", "\n", "            ", "self", ".", "get_backbone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase.SegBaseModel.get_backbone": [[29, 32], ["config.cfg.MODEL.BACKBONE.lower", "backbones.get_segmentation_backbone"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.build.get_segmentation_backbone"], ["", "", "def", "get_backbone", "(", "self", ")", ":", "\n", "        ", "self", ".", "backbone", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "lower", "(", ")", "\n", "self", ".", "encoder", "=", "get_segmentation_backbone", "(", "self", ".", "backbone", ",", "self", ".", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase.SegBaseModel.base_forward": [[33, 37], ["segbase.SegBaseModel.encoder"], "methods", ["None"], ["", "def", "base_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"forwarding backbone network\"\"\"", "\n", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "c1", ",", "c2", ",", "c3", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase.SegBaseModel.demo": [[38, 43], ["segbase.SegBaseModel.forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "demo", "(", "self", ",", "x", ")", ":", "\n", "        ", "pred", "=", "self", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "pred", "=", "pred", "[", "0", "]", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase.SegBaseModel.evaluate": [[44, 80], ["max", "segbase._to_tuple", "int", "segbase._resize_image", "segbase._resize_image", "math.ceil", "int", "int", "segbase._pad_image", "int", "int", "segbase.SegBaseModel.forward", "segbase._flip_image", "math.ceil", "math.ceil", "segbase.SegBaseModel.forward", "segbase._flip_image"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase._to_tuple", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase._resize_image", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase._resize_image", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase._pad_image", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase._flip_image", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase._flip_image"], ["", "def", "evaluate", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"evaluating network with inputs and targets\"\"\"", "\n", "scales", "=", "cfg", ".", "TEST", ".", "SCALES", "\n", "flip", "=", "cfg", ".", "TEST", ".", "FLIP", "\n", "crop_size", "=", "_to_tuple", "(", "cfg", ".", "TEST", ".", "CROP_SIZE", ")", "if", "cfg", ".", "TEST", ".", "CROP_SIZE", "else", "None", "\n", "batch", ",", "_", ",", "h", ",", "w", "=", "image", ".", "shape", "\n", "base_size", "=", "max", "(", "h", ",", "w", ")", "\n", "# scores = torch.zeros((batch, self.nclass, h, w)).to(image.device)", "\n", "scores", "=", "None", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "long_size", "=", "int", "(", "math", ".", "ceil", "(", "base_size", "*", "scale", ")", ")", "\n", "if", "h", ">", "w", ":", "\n", "                ", "height", "=", "long_size", "\n", "width", "=", "int", "(", "1.0", "*", "w", "*", "long_size", "/", "h", "+", "0.5", ")", "\n", "", "else", ":", "\n", "                ", "width", "=", "long_size", "\n", "height", "=", "int", "(", "1.0", "*", "h", "*", "long_size", "/", "w", "+", "0.5", ")", "\n", "\n", "# resize image to current size", "\n", "", "cur_img", "=", "_resize_image", "(", "image", ",", "height", ",", "width", ")", "\n", "if", "crop_size", "is", "not", "None", ":", "\n", "                ", "assert", "crop_size", "[", "0", "]", ">=", "h", "and", "crop_size", "[", "1", "]", ">=", "w", "\n", "crop_size_scaled", "=", "(", "int", "(", "math", ".", "ceil", "(", "crop_size", "[", "0", "]", "*", "scale", ")", ")", ",", "\n", "int", "(", "math", ".", "ceil", "(", "crop_size", "[", "1", "]", "*", "scale", ")", ")", ")", "\n", "cur_img", "=", "_pad_image", "(", "cur_img", ",", "crop_size_scaled", ")", "\n", "", "outputs", "=", "self", ".", "forward", "(", "cur_img", ")", "[", "0", "]", "[", "...", ",", ":", "height", ",", ":", "width", "]", "\n", "if", "flip", ":", "\n", "                ", "outputs", "+=", "_flip_image", "(", "self", ".", "forward", "(", "_flip_image", "(", "cur_img", ")", ")", "[", "0", "]", ")", "[", "...", ",", ":", "height", ",", ":", "width", "]", "\n", "\n", "", "score", "=", "_resize_image", "(", "outputs", ",", "h", ",", "w", ")", "\n", "\n", "if", "scores", "is", "None", ":", "\n", "                ", "scores", "=", "score", "\n", "", "else", ":", "\n", "                ", "scores", "+=", "score", "\n", "", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase._resize_image": [[82, 84], ["torch.interpolate"], "function", ["None"], ["", "", "def", "_resize_image", "(", "img", ",", "h", ",", "w", ")", ":", "\n", "    ", "return", "F", ".", "interpolate", "(", "img", ",", "size", "=", "[", "h", ",", "w", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase._pad_image": [[86, 108], ["torch.pad"], "function", ["None"], ["", "def", "_pad_image", "(", "img", ",", "crop_size", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "assert", "(", "c", "==", "3", ")", "\n", "padh", "=", "crop_size", "[", "0", "]", "-", "h", "if", "h", "<", "crop_size", "[", "0", "]", "else", "0", "\n", "padw", "=", "crop_size", "[", "1", "]", "-", "w", "if", "w", "<", "crop_size", "[", "1", "]", "else", "0", "\n", "if", "padh", "==", "0", "and", "padw", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "img_pad", "=", "F", ".", "pad", "(", "img", ",", "(", "0", ",", "padh", ",", "0", ",", "padw", ")", ")", "\n", "\n", "# TODO clean this code", "\n", "# mean = cfg.DATASET.MEAN", "\n", "# std = cfg.DATASET.STD", "\n", "# pad_values = -np.array(mean) / np.array(std)", "\n", "# img_pad = torch.zeros((b, c, h + padh, w + padw)).to(img.device)", "\n", "# for i in range(c):", "\n", "#     # print(img[:, i, :, :].unsqueeze(1).shape)", "\n", "#     img_pad[:, i, :, :] = torch.squeeze(", "\n", "#         F.pad(img[:, i, :, :].unsqueeze(1), (0, padh, 0, padw),", "\n", "#               'constant', value=pad_values[i]), 1)", "\n", "# assert(img_pad.shape[2] >= crop_size[0] and img_pad.shape[3] >= crop_size[1])", "\n", "\n", "return", "img_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase._crop_image": [[110, 112], ["None"], "function", ["None"], ["", "def", "_crop_image", "(", "img", ",", "h0", ",", "h1", ",", "w0", ",", "w1", ")", ":", "\n", "    ", "return", "img", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase._flip_image": [[114, 117], ["img.flip"], "function", ["None"], ["", "def", "_flip_image", "(", "img", ")", ":", "\n", "    ", "assert", "(", "img", ".", "ndim", "==", "4", ")", "\n", "return", "img", ".", "flip", "(", "(", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.segbase._to_tuple": [[119, 128], ["isinstance", "len", "tuple", "isinstance", "len", "tuple", "ValueError", "type", "config.cfg.TEST.CROP_SIZE"], "function", ["None"], ["", "def", "_to_tuple", "(", "size", ")", ":", "\n", "    ", "if", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "assert", "len", "(", "size", ")", ",", "'Expect eval crop size contains two element, '", "'but received {}'", ".", "format", "(", "len", "(", "size", ")", ")", "\n", "return", "tuple", "(", "size", ")", "\n", "", "elif", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "return", "tuple", "(", "(", "size", ",", "size", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupport datatype: {}'", ".", "format", "(", "type", "(", "size", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt_joint.PVT_FPT_JOINT.__init__": [[20, 59], ["segbase.SegBaseModel.__init__", "pvt_fpt_joint.PVT_FPT_JOINT.backbone.startswith", "pvt_fpt_joint.FPTHead", "pvt_fpt_joint.FPTHead", "pvt_fpt_joint.PVT_FPT_JOINT.__setattr__", "pvt_fpt_joint.PVT_FPT_JOINT.backbone.startswith", "modules._FCNHead", "decoders.append", "pvt_fpt_joint.PVT_FPT_JOINT.backbone.startswith", "pvt_fpt_joint.PVT_FPT_JOINT.backbone.startswith", "pvt_fpt_joint.PVT_FPT_JOINT.backbone.startswith"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__setattr__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "self", ".", "backbone", ".", "startswith", "(", "'mobilenet'", ")", ":", "\n", "            ", "c1_channels", "=", "24", "\n", "c4_channels", "=", "320", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'resnet18'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'pvt'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'resnet34'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'hrnet_w18_small_v1'", ")", ":", "\n", "            ", "c1_channels", "=", "16", "\n", "c4_channels", "=", "128", "\n", "", "else", ":", "\n", "            ", "c1_channels", "=", "256", "\n", "c4_channels", "=", "2048", "\n", "\n", "", "vit_params", "=", "cfg", ".", "MODEL", ".", "TRANS4TRANS", "\n", "hid_dim", "=", "cfg", ".", "MODEL", ".", "TRANS4TRANS", ".", "hid_dim", "\n", "\n", "assert", "cfg", ".", "AUG", ".", "CROP", "==", "False", "and", "cfg", ".", "TRAIN", ".", "CROP_SIZE", "[", "0", "]", "==", "cfg", ".", "TRAIN", ".", "CROP_SIZE", "[", "1", "]", "==", "cfg", ".", "TRAIN", ".", "BASE_SIZE", "==", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "0", "]", "==", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "1", "]", "\n", "\n", "c4_HxW", "=", "(", "cfg", ".", "TRAIN", ".", "BASE_SIZE", "//", "32", ")", "**", "2", "\n", "\n", "vit_params", "[", "'decoder_feat_HxW'", "]", "=", "c4_HxW", "\n", "vit_params", "[", "'nclass'", "]", "=", "self", ".", "nclass", "\n", "\n", "self", ".", "fpt_head_1", "=", "FPTHead", "(", "vit_params", ",", "c1_channels", "=", "c1_channels", ",", "c4_channels", "=", "c4_channels", ",", "hid_dim", "=", "hid_dim", ")", "\n", "self", ".", "fpt_head_2", "=", "FPTHead", "(", "vit_params", ",", "c1_channels", "=", "c1_channels", ",", "c4_channels", "=", "c4_channels", ",", "hid_dim", "=", "hid_dim", ")", "\n", "decoders", "=", "[", "'fpt_head_1'", ",", "'fpt_head_2'", "]", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "self", ".", "auxlayer", "=", "_FCNHead", "(", "728", ",", "self", ".", "nclass", ")", "\n", "decoders", ".", "append", "(", "'auxlayer'", ")", "\n", "", "self", ".", "__setattr__", "(", "'decoder'", ",", "decoders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt_joint.PVT_FPT_JOINT.forward": [[61, 79], ["pvt_fpt_joint.PVT_FPT_JOINT.encoder", "list", "pvt_fpt_joint.PVT_FPT_JOINT.fpt_head_1", "torch.interpolate", "torch.interpolate", "list.append", "pvt_fpt_joint.PVT_FPT_JOINT.fpt_head_2", "torch.interpolate", "torch.interpolate", "list.append", "tuple", "x.size", "pvt_fpt_joint.PVT_FPT_JOINT.auxlayer", "torch.interpolate", "torch.interpolate", "list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "self", ".", "encoder", "(", "x", ")", "\n", "\n", "outputs", "=", "list", "(", ")", "\n", "x_1", "=", "self", ".", "fpt_head_1", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ")", "\n", "x_1", "=", "F", ".", "interpolate", "(", "x_1", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "outputs", ".", "append", "(", "x_1", ")", "\n", "\n", "x_2", "=", "self", ".", "fpt_head_2", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ")", "\n", "x_2", "=", "F", ".", "interpolate", "(", "x_2", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "outputs", ".", "append", "(", "x_2", ")", "\n", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "auxout", "=", "self", ".", "auxlayer", "(", "c3", ")", "\n", "auxout", "=", "F", ".", "interpolate", "(", "auxout", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "outputs", ".", "append", "(", "auxout", ")", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt_joint.ProjEmbed.__init__": [[83, 87], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", "=", "512", ",", "emb_chans", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "in_chans", ",", "emb_chans", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "emb_chans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt_joint.ProjEmbed.forward": [[88, 92], ["pvt_fpt_joint.ProjEmbed.proj", "pvt_fpt_joint.ProjEmbed.norm", "pvt_fpt_joint.ProjEmbed.flatten().transpose", "pvt_fpt_joint.ProjEmbed.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt_joint.HeadBlock.__init__": [[94, 104], ["torch.Module.__init__", "pvt_fpt_joint.ProjEmbed", "backbones.pvt.Attention", "torch.Identity", "torch.Identity", "int", "backbones.pvt.Mlp", "functools.partial", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_chans", "=", "512", ",", "emb_chans", "=", "64", ",", "num_heads", "=", "2", ",", "sr_ratio", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "ProjEmbed", "(", "in_chans", "=", "in_chans", ",", "emb_chans", "=", "emb_chans", ")", "\n", "self", ".", "norm1", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "(", "emb_chans", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "emb_chans", ",", "num_heads", "=", "num_heads", ",", "sr_ratio", "=", "sr_ratio", ")", "\n", "self", ".", "drop_path", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "(", "emb_chans", ")", "\n", "mlp_ratio", "=", "2", "\n", "mlp_hidden_dim", "=", "int", "(", "emb_chans", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "emb_chans", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "nn", ".", "Hardswish", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt_joint.HeadBlock.forward": [[105, 114], ["pvt_fpt_joint.HeadBlock.proj", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute().contiguous", "pvt_fpt_joint.HeadBlock.drop_path", "pvt_fpt_joint.HeadBlock.drop_path", "pvt_fpt_joint.HeadBlock.attn", "pvt_fpt_joint.HeadBlock.mlp", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute", "pvt_fpt_joint.HeadBlock.norm1", "pvt_fpt_joint.HeadBlock.norm2", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt_joint.FPTHead.__init__": [[118, 126], ["torch.Module.__init__", "pvt_fpt_joint.HeadBlock", "pvt_fpt_joint.HeadBlock", "pvt_fpt_joint.HeadBlock", "pvt_fpt_joint.HeadBlock"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vit_params", ",", "c1_channels", "=", "256", ",", "c4_channels", "=", "2048", ",", "hid_dim", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "sr_ratio", "=", "[", "4", ",", "4", ",", "4", ",", "1", "]", "\n", "emb_chans", "=", "64", "\n", "self", ".", "head1", "=", "HeadBlock", "(", "in_chans", "=", "64", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "0", "]", ")", "\n", "self", ".", "head2", "=", "HeadBlock", "(", "in_chans", "=", "128", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "1", "]", ")", "\n", "self", ".", "head3", "=", "HeadBlock", "(", "in_chans", "=", "320", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "2", "]", ")", "\n", "self", ".", "head4", "=", "HeadBlock", "(", "in_chans", "=", "512", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt_joint.FPTHead.forward": [[128, 142], ["pvt_fpt_joint.FPTHead.head4", "torch.interpolate", "torch.interpolate", "pvt_fpt_joint.FPTHead.head3", "torch.interpolate", "torch.interpolate", "pvt_fpt_joint.FPTHead.head2", "torch.interpolate", "torch.interpolate", "pvt_fpt_joint.FPTHead.head1", "c1.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c1", ",", "c2", ",", "c3", ",", "c4", ")", ":", "\n", "        ", "size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "c4", "=", "self", ".", "head4", "(", "c4", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "c4", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "c3", "=", "self", ".", "head3", "(", "c3", ")", "\n", "out", "+=", "F", ".", "interpolate", "(", "c3", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "c2", "=", "self", ".", "head2", "(", "c2", ")", "\n", "out", "+=", "F", ".", "interpolate", "(", "c2", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "out", "+=", "self", ".", "head1", "(", "c1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.model_zoo.get_segmentation_model": [[17, 25], ["model_zoo.load_model_pretrain", "MODEL_REGISTRY.get"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.model_zoo.load_model_pretrain", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get"], ["def", "get_segmentation_model", "(", ")", ":", "\n", "    ", "\"\"\"\n    Built the whole model, defined by `cfg.MODEL.META_ARCHITECTURE`.\n    \"\"\"", "\n", "model_name", "=", "cfg", ".", "MODEL", ".", "MODEL_NAME", "\n", "model", "=", "MODEL_REGISTRY", ".", "get", "(", "model_name", ")", "(", ")", "\n", "load_model_pretrain", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.model_zoo.load_model_pretrain": [[27, 52], ["logging.info", "torch.load", "collections.OrderedDict", "model.state_dict", "torch.load.items", "logging.info", "model.load_state_dict", "logging.info", "logging.info", "torch.load", "model.load_state_dict", "logging.info", "torch.load.keys", "keys_wrong_shape.append"], "function", ["None"], ["", "def", "load_model_pretrain", "(", "model", ")", ":", "\n", "    ", "if", "cfg", ".", "PHASE", "==", "'train'", ":", "\n", "        ", "if", "cfg", ".", "TRAIN", ".", "PRETRAINED_MODEL_PATH", ":", "\n", "            ", "logging", ".", "info", "(", "'load pretrained model from {}'", ".", "format", "(", "cfg", ".", "TRAIN", ".", "PRETRAINED_MODEL_PATH", ")", ")", "\n", "state_dict_to_load", "=", "torch", ".", "load", "(", "cfg", ".", "TRAIN", ".", "PRETRAINED_MODEL_PATH", ")", "\n", "keys_wrong_shape", "=", "[", "]", "\n", "state_dict_suitable", "=", "OrderedDict", "(", ")", "\n", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict_to_load", ".", "items", "(", ")", ":", "\n", "                ", "if", "v", ".", "shape", "==", "state_dict", "[", "k", "]", ".", "shape", ":", "\n", "                    ", "state_dict_suitable", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "keys_wrong_shape", ".", "append", "(", "k", ")", "\n", "", "", "logging", ".", "info", "(", "'Shape unmatched weights: {}'", ".", "format", "(", "keys_wrong_shape", ")", ")", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict_suitable", ",", "strict", "=", "False", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "cfg", ".", "TEST", ".", "TEST_MODEL_PATH", ":", "\n", "            ", "logging", ".", "info", "(", "'load test model from {}'", ".", "format", "(", "cfg", ".", "TEST", ".", "TEST_MODEL_PATH", ")", ")", "\n", "model_dic", "=", "torch", ".", "load", "(", "cfg", ".", "TEST", ".", "TEST_MODEL_PATH", ",", "map_location", "=", "'cuda:0'", ")", "\n", "if", "'state_dict'", "in", "model_dic", ".", "keys", "(", ")", ":", "\n", "# load the last checkpoint", "\n", "                ", "model_dic", "=", "model_dic", "[", "'state_dict'", "]", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "model_dic", ",", "strict", "=", "False", ")", "\n", "logging", ".", "info", "(", "msg", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvtv2_mit_fpt.PVTV2_MIT_FPT.__init__": [[19, 51], ["segbase.SegBaseModel.__init__", "pvtv2_mit_fpt.PVTV2_MIT_FPT.backbone.startswith", "pvtv2_mit_fpt.FPTHead", "pvtv2_mit_fpt.PVTV2_MIT_FPT.__setattr__", "pvtv2_mit_fpt.PVTV2_MIT_FPT.backbone.startswith", "modules._FCNHead", "pvtv2_mit_fpt.PVTV2_MIT_FPT.backbone.startswith", "pvtv2_mit_fpt.PVTV2_MIT_FPT.backbone.startswith", "pvtv2_mit_fpt.PVTV2_MIT_FPT.backbone.startswith"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__setattr__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "self", ".", "backbone", ".", "startswith", "(", "'mobilenet'", ")", ":", "\n", "            ", "c1_channels", "=", "24", "\n", "c4_channels", "=", "320", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'resnet18'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'mit'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'resnet34'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'hrnet_w18_small_v1'", ")", ":", "\n", "            ", "c1_channels", "=", "16", "\n", "c4_channels", "=", "128", "\n", "", "else", ":", "\n", "            ", "c1_channels", "=", "256", "\n", "c4_channels", "=", "2048", "\n", "\n", "", "vit_params", "=", "cfg", ".", "MODEL", ".", "TRANS4TRANS", "\n", "c4_HxW", "=", "(", "cfg", ".", "TRAIN", ".", "BASE_SIZE", "//", "32", ")", "**", "2", "\n", "\n", "vit_params", "[", "'decoder_feat_HxW'", "]", "=", "c4_HxW", "\n", "vit_params", "[", "'nclass'", "]", "=", "self", ".", "nclass", "\n", "vit_params", "[", "'emb_chans'", "]", "=", "cfg", ".", "MODEL", ".", "EMB_CHANNELS", "\n", "\n", "self", ".", "fpt_head", "=", "FPTHead", "(", "vit_params", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "self", ".", "auxlayer", "=", "_FCNHead", "(", "728", ",", "self", ".", "nclass", ")", "\n", "", "self", ".", "__setattr__", "(", "'decoder'", ",", "[", "'fpt_head'", ",", "'auxlayer'", "]", "if", "self", ".", "aux", "else", "[", "'fpt_head'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvtv2_mit_fpt.PVTV2_MIT_FPT.forward": [[53, 67], ["pvtv2_mit_fpt.PVTV2_MIT_FPT.encoder", "list", "pvtv2_mit_fpt.PVTV2_MIT_FPT.fpt_head", "torch.interpolate", "torch.interpolate", "list.append", "tuple", "torch.interpolate.size", "pvtv2_mit_fpt.PVTV2_MIT_FPT.auxlayer", "torch.interpolate", "torch.interpolate", "list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "self", ".", "encoder", "(", "x", ")", "\n", "\n", "outputs", "=", "list", "(", ")", "\n", "x", "=", "self", ".", "fpt_head", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "outputs", ".", "append", "(", "x", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "auxout", "=", "self", ".", "auxlayer", "(", "c3", ")", "\n", "auxout", "=", "F", ".", "interpolate", "(", "auxout", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "outputs", ".", "append", "(", "auxout", ")", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvtv2_mit_fpt.ProjEmbed.__init__": [[71, 76], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "pvtv2_mit_fpt.ProjEmbed.apply"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", "=", "512", ",", "emb_chans", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "in_chans", ",", "emb_chans", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "emb_chans", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvtv2_mit_fpt.ProjEmbed._init_weights": [[78, 92], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvtv2_mit_fpt.ProjEmbed.forward": [[92, 96], ["pvtv2_mit_fpt.ProjEmbed.proj", "pvtv2_mit_fpt.ProjEmbed.norm", "pvtv2_mit_fpt.ProjEmbed.flatten().transpose", "pvtv2_mit_fpt.ProjEmbed.flatten"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvtv2_mit_fpt.HeadBlock.__init__": [[98, 108], ["torch.Module.__init__", "pvtv2_mit_fpt.ProjEmbed", "backbones.pvtv2_mix_transformer.Attention", "torch.Identity", "torch.Identity", "int", "backbones.pvtv2_mix_transformer.Mlp", "functools.partial", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_chans", "=", "512", ",", "emb_chans", "=", "64", ",", "num_heads", "=", "2", ",", "sr_ratio", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "ProjEmbed", "(", "in_chans", "=", "in_chans", ",", "emb_chans", "=", "emb_chans", ")", "\n", "self", ".", "norm1", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "(", "emb_chans", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "emb_chans", ",", "num_heads", "=", "num_heads", ",", "sr_ratio", "=", "sr_ratio", ")", "\n", "self", ".", "drop_path", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "(", "emb_chans", ")", "\n", "mlp_ratio", "=", "2", "\n", "mlp_hidden_dim", "=", "int", "(", "emb_chans", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "emb_chans", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "nn", ".", "Hardswish", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvtv2_mit_fpt.HeadBlock.forward": [[109, 118], ["pvtv2_mit_fpt.HeadBlock.proj", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute().contiguous", "pvtv2_mit_fpt.HeadBlock.drop_path", "pvtv2_mit_fpt.HeadBlock.drop_path", "pvtv2_mit_fpt.HeadBlock.attn", "pvtv2_mit_fpt.HeadBlock.mlp", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute", "pvtv2_mit_fpt.HeadBlock.norm1", "pvtv2_mit_fpt.HeadBlock.norm2", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvtv2_mit_fpt.FPTHead.__init__": [[122, 132], ["torch.Module.__init__", "pvtv2_mit_fpt.HeadBlock", "pvtv2_mit_fpt.HeadBlock", "pvtv2_mit_fpt.HeadBlock", "pvtv2_mit_fpt.HeadBlock", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vit_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "sr_ratio", "=", "[", "4", ",", "4", ",", "4", ",", "1", "]", "\n", "emb_chans", "=", "vit_params", "[", "'emb_chans'", "]", "\n", "self", ".", "head1", "=", "HeadBlock", "(", "in_chans", "=", "64", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "0", "]", ")", "\n", "self", ".", "head2", "=", "HeadBlock", "(", "in_chans", "=", "128", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "1", "]", ")", "\n", "self", ".", "head3", "=", "HeadBlock", "(", "in_chans", "=", "320", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "2", "]", ")", "\n", "self", ".", "head4", "=", "HeadBlock", "(", "in_chans", "=", "512", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "3", "]", ")", "\n", "\n", "self", ".", "pred", "=", "nn", ".", "Conv2d", "(", "emb_chans", ",", "vit_params", "[", "'nclass'", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvtv2_mit_fpt.FPTHead.forward": [[134, 149], ["pvtv2_mit_fpt.FPTHead.head4", "torch.interpolate", "torch.interpolate", "pvtv2_mit_fpt.FPTHead.head3", "torch.interpolate", "torch.interpolate", "pvtv2_mit_fpt.FPTHead.head2", "torch.interpolate", "torch.interpolate", "pvtv2_mit_fpt.FPTHead.head1", "pvtv2_mit_fpt.FPTHead.pred", "c1.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c1", ",", "c2", ",", "c3", ",", "c4", ")", ":", "\n", "        ", "size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "c4", "=", "self", ".", "head4", "(", "c4", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "c4", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "c3", "=", "self", ".", "head3", "(", "c3", ")", "\n", "out", "+=", "F", ".", "interpolate", "(", "c3", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "c2", "=", "self", ".", "head2", "(", "c2", ")", "\n", "out", "+=", "F", ".", "interpolate", "(", "c2", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "out", "+=", "self", ".", "head1", "(", "c1", ")", "\n", "out", "=", "self", ".", "pred", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt.PVT_FPT.__init__": [[18, 54], ["segbase.SegBaseModel.__init__", "pvt_fpt.PVT_FPT.backbone.startswith", "pvt_fpt.FPTHead", "pvt_fpt.PVT_FPT.__setattr__", "pvt_fpt.PVT_FPT.backbone.startswith", "modules._FCNHead", "pvt_fpt.PVT_FPT.backbone.startswith", "pvt_fpt.PVT_FPT.backbone.startswith", "pvt_fpt.PVT_FPT.backbone.startswith"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.config.config.SegmentronConfig.__setattr__"], ["    ", "def", "__init__", "(", "self", ",", "ncls", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "self", ".", "backbone", ".", "startswith", "(", "'mobilenet'", ")", ":", "\n", "            ", "c1_channels", "=", "24", "\n", "c4_channels", "=", "320", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'resnet18'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'pvt'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'resnet34'", ")", ":", "\n", "            ", "c1_channels", "=", "64", "\n", "c4_channels", "=", "512", "\n", "", "elif", "self", ".", "backbone", ".", "startswith", "(", "'hrnet_w18_small_v1'", ")", ":", "\n", "            ", "c1_channels", "=", "16", "\n", "c4_channels", "=", "128", "\n", "", "else", ":", "\n", "            ", "c1_channels", "=", "256", "\n", "c4_channels", "=", "2048", "\n", "\n", "", "vit_params", "=", "cfg", ".", "MODEL", ".", "TRANS4TRANS", "\n", "hid_dim", "=", "cfg", ".", "MODEL", ".", "TRANS4TRANS", ".", "hid_dim", "\n", "\n", "assert", "cfg", ".", "AUG", ".", "CROP", "==", "False", "and", "cfg", ".", "TRAIN", ".", "CROP_SIZE", "[", "0", "]", "==", "cfg", ".", "TRAIN", ".", "CROP_SIZE", "[", "1", "]", "==", "cfg", ".", "TRAIN", ".", "BASE_SIZE", "==", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "0", "]", "==", "cfg", ".", "TEST", ".", "CROP_SIZE", "[", "1", "]", "\n", "c4_HxW", "=", "(", "cfg", ".", "TRAIN", ".", "BASE_SIZE", "//", "32", ")", "**", "2", "\n", "\n", "vit_params", "[", "'decoder_feat_HxW'", "]", "=", "c4_HxW", "\n", "vit_params", "[", "'nclass'", "]", "=", "self", ".", "nclass", "if", "ncls", "is", "None", "else", "ncls", "\n", "vit_params", "[", "'emb_chans'", "]", "=", "cfg", ".", "MODEL", ".", "EMB_CHANNELS", "\n", "\n", "self", ".", "fpt_head", "=", "FPTHead", "(", "vit_params", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "self", ".", "auxlayer", "=", "_FCNHead", "(", "728", ",", "self", ".", "nclass", ")", "\n", "", "self", ".", "__setattr__", "(", "'decoder'", ",", "[", "'fpt_head'", ",", "'auxlayer'", "]", "if", "self", ".", "aux", "else", "[", "'fpt_head'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt.PVT_FPT.forward": [[56, 70], ["pvt_fpt.PVT_FPT.encoder", "list", "pvt_fpt.PVT_FPT.fpt_head", "torch.interpolate", "torch.interpolate", "list.append", "tuple", "torch.interpolate.size", "pvt_fpt.PVT_FPT.auxlayer", "torch.interpolate", "torch.interpolate", "list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "self", ".", "encoder", "(", "x", ")", "\n", "\n", "outputs", "=", "list", "(", ")", "\n", "x", "=", "self", ".", "fpt_head", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "outputs", ".", "append", "(", "x", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "auxout", "=", "self", ".", "auxlayer", "(", "c3", ")", "\n", "auxout", "=", "F", ".", "interpolate", "(", "auxout", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "outputs", ".", "append", "(", "auxout", ")", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt.ProjEmbed.__init__": [[74, 78], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", "=", "512", ",", "emb_chans", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "in_chans", ",", "emb_chans", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "emb_chans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt.ProjEmbed.forward": [[79, 83], ["pvt_fpt.ProjEmbed.proj", "pvt_fpt.ProjEmbed.norm", "pvt_fpt.ProjEmbed.flatten().transpose", "pvt_fpt.ProjEmbed.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt.HeadBlock.__init__": [[85, 95], ["torch.Module.__init__", "pvt_fpt.ProjEmbed", "backbones.pvt.Attention", "torch.Identity", "torch.Identity", "int", "backbones.pvt.Mlp", "functools.partial", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_chans", "=", "512", ",", "emb_chans", "=", "64", ",", "num_heads", "=", "2", ",", "sr_ratio", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "ProjEmbed", "(", "in_chans", "=", "in_chans", ",", "emb_chans", "=", "emb_chans", ")", "\n", "self", ".", "norm1", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "(", "emb_chans", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "emb_chans", ",", "num_heads", "=", "num_heads", ",", "sr_ratio", "=", "sr_ratio", ")", "\n", "self", ".", "drop_path", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "(", "emb_chans", ")", "\n", "mlp_ratio", "=", "2", "\n", "mlp_hidden_dim", "=", "int", "(", "emb_chans", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "emb_chans", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "nn", ".", "Hardswish", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt.HeadBlock.forward": [[96, 105], ["pvt_fpt.HeadBlock.proj", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute().contiguous", "pvt_fpt.HeadBlock.drop_path", "pvt_fpt.HeadBlock.drop_path", "pvt_fpt.HeadBlock.attn", "pvt_fpt.HeadBlock.mlp", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute", "pvt_fpt.HeadBlock.norm1", "pvt_fpt.HeadBlock.norm2", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt.FPTHead.__init__": [[109, 119], ["torch.Module.__init__", "pvt_fpt.HeadBlock", "pvt_fpt.HeadBlock", "pvt_fpt.HeadBlock", "pvt_fpt.HeadBlock", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vit_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "sr_ratio", "=", "[", "4", ",", "4", ",", "4", ",", "1", "]", "\n", "emb_chans", "=", "vit_params", "[", "'emb_chans'", "]", "\n", "self", ".", "head1", "=", "HeadBlock", "(", "in_chans", "=", "64", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "0", "]", ")", "\n", "self", ".", "head2", "=", "HeadBlock", "(", "in_chans", "=", "128", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "1", "]", ")", "\n", "self", ".", "head3", "=", "HeadBlock", "(", "in_chans", "=", "320", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "2", "]", ")", "\n", "self", ".", "head4", "=", "HeadBlock", "(", "in_chans", "=", "512", ",", "emb_chans", "=", "emb_chans", ",", "sr_ratio", "=", "sr_ratio", "[", "3", "]", ")", "\n", "\n", "self", ".", "pred", "=", "nn", ".", "Conv2d", "(", "emb_chans", ",", "vit_params", "[", "'nclass'", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.models.pvt_fpt.FPTHead.forward": [[121, 136], ["pvt_fpt.FPTHead.head4", "torch.interpolate", "torch.interpolate", "pvt_fpt.FPTHead.head3", "torch.interpolate", "torch.interpolate", "pvt_fpt.FPTHead.head2", "torch.interpolate", "torch.interpolate", "pvt_fpt.FPTHead.head1", "pvt_fpt.FPTHead.pred", "c1.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c1", ",", "c2", ",", "c3", ",", "c4", ")", ":", "\n", "        ", "size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "c4", "=", "self", ".", "head4", "(", "c4", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "c4", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "c3", "=", "self", ".", "head3", "(", "c3", ")", "\n", "out", "+=", "F", ".", "interpolate", "(", "c3", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "c2", "=", "self", ".", "head2", "(", "c2", ")", "\n", "out", "+=", "F", ".", "interpolate", "(", "c2", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "out", "+=", "self", ".", "head1", "(", "c1", ")", "\n", "out", "=", "self", ".", "pred", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.Mlp.__init__": [[12, 20], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.Mlp.forward": [[21, 28], ["pvt.Mlp.fc1", "pvt.Mlp.act", "pvt.Mlp.drop", "pvt.Mlp.fc2", "pvt.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.Attention.__init__": [[31, 50], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "sr_ratio", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "f\"dim {dim} should be divided by num_heads {num_heads}.\"", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "kv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "2", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "self", ".", "sr_ratio", "=", "sr_ratio", "\n", "if", "sr_ratio", ">", "1", ":", "\n", "            ", "self", ".", "sr", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "sr_ratio", ",", "stride", "=", "sr_ratio", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.Attention.forward": [[51, 73], ["pvt.Attention.q().reshape().permute", "pvt.Attention.softmax", "pvt.Attention.attn_drop", "pvt.Attention.proj", "pvt.Attention.proj_drop", "pvt.Attention.permute().reshape", "pvt.Attention.sr().reshape().permute", "pvt.Attention.norm", "pvt.Attention.kv().reshape().permute", "pvt.Attention.kv().reshape().permute", "pvt.Attention.q().reshape", "k.transpose", "pvt.Attention.permute", "pvt.Attention.sr().reshape", "pvt.Attention.kv().reshape", "pvt.Attention.kv().reshape", "pvt.Attention.q", "pvt.Attention.sr", "pvt.Attention.kv", "pvt.Attention.kv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "if", "self", ".", "sr_ratio", ">", "1", ":", "\n", "            ", "x_", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x_", "=", "self", ".", "sr", "(", "x_", ")", ".", "reshape", "(", "B", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_", "=", "self", ".", "norm", "(", "x_", ")", "\n", "kv", "=", "self", ".", "kv", "(", "x_", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "kv", "=", "self", ".", "kv", "(", "x", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "k", ",", "v", "=", "kv", "[", "0", "]", ",", "kv", "[", "1", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.Block.__init__": [[77, 90], ["torch.Module.__init__", "norm_layer", "pvt.Attention", "norm_layer", "int", "pvt.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "sr_ratio", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "sr_ratio", "=", "sr_ratio", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.Block.forward": [[91, 96], ["pvt.Block.drop_path", "pvt.Block.drop_path", "pvt.Block.attn", "pvt.Block.mlp", "pvt.Block.norm1", "pvt.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PatchEmbed.__init__": [[102, 115], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "assert", "img_size", "[", "0", "]", "%", "patch_size", "[", "0", "]", "==", "0", "and", "img_size", "[", "1", "]", "%", "patch_size", "[", "1", "]", "==", "0", ",", "f\"img_size {img_size} should be divided by patch_size {patch_size}.\"", "\n", "self", ".", "H", ",", "self", ".", "W", "=", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", "\n", "self", ".", "num_patches", "=", "self", ".", "H", "*", "self", ".", "W", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PatchEmbed.forward": [[116, 124], ["pvt.PatchEmbed.proj().flatten().transpose", "pvt.PatchEmbed.norm", "pvt.PatchEmbed.proj().flatten", "pvt.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "H", ",", "W", "=", "H", "//", "self", ".", "patch_size", "[", "0", "]", ",", "W", "//", "self", ".", "patch_size", "[", "1", "]", "\n", "\n", "return", "x", ",", "(", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PyramidVisionTransformer.__init__": [[127, 191], ["torch.Module.__init__", "pvt.PatchEmbed", "pvt.PatchEmbed", "pvt.PatchEmbed", "pvt.PatchEmbed", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "timm.models.layers.trunc_normal_", "timm.models.layers.trunc_normal_", "timm.models.layers.trunc_normal_", "timm.models.layers.trunc_normal_", "pvt.PyramidVisionTransformer.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "pvt.Block", "pvt.Block", "pvt.Block", "pvt.Block", "sum", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "\n", "num_heads", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "\n", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "depths", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "F4", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "depths", "=", "depths", "\n", "self", ".", "F4", "=", "F4", "\n", "\n", "# patch_embed", "\n", "self", ".", "patch_embed1", "=", "PatchEmbed", "(", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "\n", "embed_dim", "=", "embed_dims", "[", "0", "]", ")", "\n", "self", ".", "patch_embed2", "=", "PatchEmbed", "(", "img_size", "=", "img_size", "//", "4", ",", "patch_size", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "0", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "1", "]", ")", "\n", "self", ".", "patch_embed3", "=", "PatchEmbed", "(", "img_size", "=", "img_size", "//", "8", ",", "patch_size", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "1", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "2", "]", ")", "\n", "self", ".", "patch_embed4", "=", "PatchEmbed", "(", "img_size", "=", "img_size", "//", "16", ",", "patch_size", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "2", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "3", "]", ")", "\n", "\n", "# pos_embed", "\n", "self", ".", "pos_embed1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "patch_embed1", ".", "num_patches", ",", "embed_dims", "[", "0", "]", ")", ")", "\n", "self", ".", "pos_drop1", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "self", ".", "pos_embed2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "patch_embed2", ".", "num_patches", ",", "embed_dims", "[", "1", "]", ")", ")", "\n", "self", ".", "pos_drop2", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "self", ".", "pos_embed3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "patch_embed3", ".", "num_patches", ",", "embed_dims", "[", "2", "]", ")", ")", "\n", "self", ".", "pos_drop3", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "self", ".", "pos_embed4", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "patch_embed4", ".", "num_patches", "+", "1", ",", "embed_dims", "[", "3", "]", ")", ")", "\n", "self", ".", "pos_drop4", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "# transformer encoder", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "\n", "cur", "=", "0", "\n", "self", ".", "block1", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "0", "]", ",", "num_heads", "=", "num_heads", "[", "0", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "0", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "0", "]", ")", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "0", "]", "\n", "self", ".", "block2", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "1", "]", ",", "num_heads", "=", "num_heads", "[", "1", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "1", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "1", "]", ")", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "1", "]", "\n", "self", ".", "block3", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "2", "]", ",", "num_heads", "=", "num_heads", "[", "2", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "2", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "2", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "2", "]", ")", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "2", "]", "\n", "self", ".", "block4", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "3", "]", ",", "num_heads", "=", "num_heads", "[", "3", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "3", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "3", "]", ")", "]", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed2", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed3", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed4", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PyramidVisionTransformer.init_weights": [[192, 195], ["isinstance", "mmcv.runner.load_checkpoint"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "load_checkpoint", "(", "self", ",", "pretrained", ",", "map_location", "=", "'cpu'", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PyramidVisionTransformer.reset_drop_path": [[196, 213], ["range", "range", "range", "range", "x.item", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum"], "methods", ["None"], ["", "", "def", "reset_drop_path", "(", "self", ",", "drop_path_rate", ")", ":", "\n", "        ", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "self", ".", "depths", ")", ")", "]", "\n", "cur", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "block1", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n", "", "cur", "+=", "self", ".", "depths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "1", "]", ")", ":", "\n", "            ", "self", ".", "block2", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n", "", "cur", "+=", "self", ".", "depths", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "2", "]", ")", ":", "\n", "            ", "self", ".", "block3", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n", "", "cur", "+=", "self", ".", "depths", "[", "2", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "3", "]", ")", ":", "\n", "            ", "self", ".", "block4", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PyramidVisionTransformer._init_weights": [[214, 222], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PyramidVisionTransformer._get_pos_embed": [[223, 230], ["torch.interpolate().reshape().permute", "torch.interpolate().reshape().permute", "torch.interpolate().reshape().permute", "torch.interpolate().reshape", "torch.interpolate().reshape", "torch.interpolate().reshape", "torch.interpolate", "torch.interpolate", "torch.interpolate", "pos_embed.reshape().permute", "pos_embed.reshape"], "methods", ["None"], ["", "", "def", "_get_pos_embed", "(", "self", ",", "pos_embed", ",", "patch_embed", ",", "H", ",", "W", ")", ":", "\n", "        ", "if", "H", "*", "W", "==", "self", ".", "patch_embed1", ".", "num_patches", ":", "\n", "            ", "return", "pos_embed", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "interpolate", "(", "\n", "pos_embed", ".", "reshape", "(", "1", ",", "patch_embed", ".", "H", ",", "patch_embed", ".", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "\"bilinear\"", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "H", "*", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PyramidVisionTransformer.forward_features": [[231, 277], ["pvt.PyramidVisionTransformer.patch_embed1", "pvt.PyramidVisionTransformer._get_pos_embed", "pvt.PyramidVisionTransformer.pos_drop1", "blk.reshape().permute().contiguous", "outs.append", "pvt.PyramidVisionTransformer.patch_embed2", "pvt.PyramidVisionTransformer._get_pos_embed", "pvt.PyramidVisionTransformer.pos_drop2", "blk.reshape().permute().contiguous", "outs.append", "pvt.PyramidVisionTransformer.patch_embed3", "pvt.PyramidVisionTransformer._get_pos_embed", "pvt.PyramidVisionTransformer.pos_drop3", "blk.reshape().permute().contiguous", "outs.append", "pvt.PyramidVisionTransformer.patch_embed4", "pvt.PyramidVisionTransformer._get_pos_embed", "pvt.PyramidVisionTransformer.pos_drop4", "blk.reshape().permute().contiguous", "outs.append", "blk", "blk", "blk", "blk", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape", "blk.reshape", "blk.reshape", "blk.reshape"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PyramidVisionTransformer._get_pos_embed", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PyramidVisionTransformer._get_pos_embed", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PyramidVisionTransformer._get_pos_embed", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PyramidVisionTransformer._get_pos_embed"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "# stage 1", "\n", "x", ",", "(", "H", ",", "W", ")", "=", "self", ".", "patch_embed1", "(", "x", ")", "\n", "pos_embed1", "=", "self", ".", "_get_pos_embed", "(", "self", ".", "pos_embed1", ",", "self", ".", "patch_embed1", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "pos_embed1", "\n", "x", "=", "self", ".", "pos_drop1", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "block1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "# stage 2", "\n", "x", ",", "(", "H", ",", "W", ")", "=", "self", ".", "patch_embed2", "(", "x", ")", "\n", "pos_embed2", "=", "self", ".", "_get_pos_embed", "(", "self", ".", "pos_embed2", ",", "self", ".", "patch_embed2", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "pos_embed2", "\n", "x", "=", "self", ".", "pos_drop2", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "block2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "# stage 3", "\n", "x", ",", "(", "H", ",", "W", ")", "=", "self", ".", "patch_embed3", "(", "x", ")", "\n", "pos_embed3", "=", "self", ".", "_get_pos_embed", "(", "self", ".", "pos_embed3", ",", "self", ".", "patch_embed3", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "pos_embed3", "\n", "x", "=", "self", ".", "pos_drop3", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "block3", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "# stage 4", "\n", "x", ",", "(", "H", ",", "W", ")", "=", "self", ".", "patch_embed4", "(", "x", ")", "\n", "pos_embed4", "=", "self", ".", "_get_pos_embed", "(", "self", ".", "pos_embed4", "[", ":", ",", "1", ":", "]", ",", "self", ".", "patch_embed4", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "pos_embed4", "\n", "x", "=", "self", ".", "pos_drop4", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "block4", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.PyramidVisionTransformer.forward": [[278, 285], ["pvt.PyramidVisionTransformer.forward_features"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "\n", "if", "self", ".", "F4", ":", "\n", "            ", "x", "=", "x", "[", "3", ":", "4", "]", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt._conv_filter": [[287, 296], ["state_dict.items", "v.reshape.reshape"], "function", ["None"], ["", "", "def", "_conv_filter", "(", "state_dict", ",", "patch_size", "=", "16", ")", ":", "\n", "    ", "\"\"\" convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'patch_embed.proj.weight'", "in", "k", ":", "\n", "            ", "v", "=", "v", ".", "reshape", "(", "(", "v", ".", "shape", "[", "0", "]", ",", "3", ",", "patch_size", ",", "patch_size", ")", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.pvt_tiny": [[299, 305], ["build.BACKBONE_REGISTRY.register", "pvt.PyramidVisionTransformer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "pvt_tiny", "(", "*", "args", ")", ":", "\n", "    ", "return", "PyramidVisionTransformer", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "sr_ratios", "=", "MLP_RATIOS", ",", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.pvt_small": [[307, 313], ["build.BACKBONE_REGISTRY.register", "pvt.PyramidVisionTransformer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "pvt_small", "(", "*", "args", ")", ":", "\n", "    ", "return", "PyramidVisionTransformer", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "sr_ratios", "=", "MLP_RATIOS", ",", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.pvt_medium": [[315, 321], ["build.BACKBONE_REGISTRY.register", "pvt.PyramidVisionTransformer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "pvt_medium", "(", "*", "args", ")", ":", "\n", "    ", "return", "PyramidVisionTransformer", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "4", ",", "18", ",", "3", "]", ",", "\n", "sr_ratios", "=", "MLP_RATIOS", ",", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvt.pvt_large": [[323, 329], ["build.BACKBONE_REGISTRY.register", "pvt.PyramidVisionTransformer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "pvt_large", "(", "*", "args", ")", ":", "\n", "    ", "return", "PyramidVisionTransformer", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "8", ",", "27", ",", "3", "]", ",", "\n", "sr_ratios", "=", "MLP_RATIOS", ",", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.mobilenet.MobileNet.__init__": [[12, 48], ["torch.Module.__init__", "int", "features.append", "torch.Sequential", "torch.Linear", "mobilenet.MobileNet.modules", "int", "modules._ConvBNReLU", "int", "range", "torch.AdaptiveAvgPool2d", "int", "isinstance", "features.append", "torch.init.kaiming_normal_", "isinstance", "modules._DepthwiseConv", "torch.init.zeros_", "torch.init.ones_", "torch.init.zeros_", "isinstance", "torch.init.normal_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "multiplier", "=", "cfg", ".", "MODEL", ".", "BACKBONE_SCALE", "\n", "conv_dw_setting", "=", "[", "\n", "[", "64", ",", "1", ",", "1", "]", ",", "\n", "[", "128", ",", "2", ",", "2", "]", ",", "\n", "[", "256", ",", "2", ",", "2", "]", ",", "\n", "[", "512", ",", "6", ",", "2", "]", ",", "\n", "[", "1024", ",", "2", ",", "2", "]", "]", "\n", "input_channels", "=", "int", "(", "32", "*", "multiplier", ")", "if", "multiplier", ">", "1.0", "else", "32", "\n", "features", "=", "[", "_ConvBNReLU", "(", "3", ",", "input_channels", ",", "3", ",", "2", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "for", "c", ",", "n", ",", "s", "in", "conv_dw_setting", ":", "\n", "            ", "out_channels", "=", "int", "(", "c", "*", "multiplier", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "features", ".", "append", "(", "_DepthwiseConv", "(", "input_channels", ",", "out_channels", ",", "stride", ",", "norm_layer", ")", ")", "\n", "input_channels", "=", "out_channels", "\n", "", "", "self", ".", "last_inp_channels", "=", "int", "(", "1024", "*", "multiplier", ")", "\n", "features", ".", "append", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "int", "(", "1024", "*", "multiplier", ")", ",", "num_classes", ")", "\n", "\n", "# weight initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.mobilenet.MobileNet.forward": [[49, 53], ["mobilenet.MobileNet.features", "mobilenet.MobileNet.classifier", "mobilenet.MobileNet.view", "mobilenet.MobileNet.size", "mobilenet.MobileNet.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.mobilenet.MobileNetV2.__init__": [[56, 119], ["torch.Module.__init__", "modules._ConvBNReLU", "mobilenet.MobileNetV2._make_layer", "mobilenet.MobileNetV2._make_layer", "mobilenet.MobileNetV2._make_layer", "mobilenet.MobileNetV2._make_layer", "mobilenet.MobileNetV2._make_layer", "mobilenet.MobileNetV2.modules", "int", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.zeros_", "torch.init.ones_", "torch.init.zeros_", "isinstance", "torch.init.normal_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "output_stride", "=", "cfg", ".", "MODEL", ".", "OUTPUT_STRIDE", "\n", "self", ".", "multiplier", "=", "cfg", ".", "MODEL", ".", "BACKBONE_SCALE", "\n", "if", "output_stride", "==", "32", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "1", "]", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "2", "]", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "dilations", "=", "[", "2", ",", "4", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "inverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", "]", "\n", "# building first layer", "\n", "input_channels", "=", "int", "(", "32", "*", "self", ".", "multiplier", ")", "if", "self", ".", "multiplier", ">", "1.0", "else", "32", "\n", "# last_channels = int(1280 * multiplier) if multiplier > 1.0 else 1280", "\n", "self", ".", "conv1", "=", "_ConvBNReLU", "(", "3", ",", "input_channels", ",", "3", ",", "2", ",", "1", ",", "relu6", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# building inverted residual blocks", "\n", "self", ".", "planes", "=", "input_channels", "\n", "self", ".", "block1", "=", "self", ".", "_make_layer", "(", "InvertedResidual", ",", "self", ".", "planes", ",", "inverted_residual_setting", "[", "0", ":", "1", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block2", "=", "self", ".", "_make_layer", "(", "InvertedResidual", ",", "self", ".", "planes", ",", "inverted_residual_setting", "[", "1", ":", "2", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block3", "=", "self", ".", "_make_layer", "(", "InvertedResidual", ",", "self", ".", "planes", ",", "inverted_residual_setting", "[", "2", ":", "3", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block4", "=", "self", ".", "_make_layer", "(", "InvertedResidual", ",", "self", ".", "planes", ",", "inverted_residual_setting", "[", "3", ":", "5", "]", ",", "\n", "dilations", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block5", "=", "self", ".", "_make_layer", "(", "InvertedResidual", ",", "self", ".", "planes", ",", "inverted_residual_setting", "[", "5", ":", "]", ",", "\n", "dilations", "[", "1", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "last_inp_channels", "=", "self", ".", "planes", "\n", "\n", "# building last several layers", "\n", "# features = list()", "\n", "# features.append(_ConvBNReLU(input_channels, last_channels, 1, relu6=True, norm_layer=norm_layer))", "\n", "# features.append(nn.AdaptiveAvgPool2d(1))", "\n", "# self.features = nn.Sequential(*features)", "\n", "#", "\n", "# self.classifier = nn.Sequential(", "\n", "#     nn.Dropout2d(0.2),", "\n", "#     nn.Linear(last_channels, num_classes))", "\n", "\n", "# weight initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.mobilenet.MobileNetV2._make_layer": [[120, 132], ["list", "torch.Sequential", "int", "list.append", "range", "block", "list.append", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "inverted_residual_setting", ",", "dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "features", "=", "list", "(", ")", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "inverted_residual_setting", ":", "\n", "            ", "out_channels", "=", "int", "(", "c", "*", "self", ".", "multiplier", ")", "\n", "stride", "=", "s", "if", "dilation", "==", "1", "else", "1", "\n", "features", ".", "append", "(", "block", "(", "planes", ",", "out_channels", ",", "stride", ",", "t", ",", "dilation", ",", "norm_layer", ")", ")", "\n", "planes", "=", "out_channels", "\n", "for", "i", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "                ", "features", ".", "append", "(", "block", "(", "planes", ",", "out_channels", ",", "1", ",", "t", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "planes", "=", "out_channels", "\n", "", "", "self", ".", "planes", "=", "planes", "\n", "return", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.mobilenet.MobileNetV2.forward": [[133, 144], ["mobilenet.MobileNetV2.conv1", "mobilenet.MobileNetV2.block1", "mobilenet.MobileNetV2.block2", "mobilenet.MobileNetV2.block3", "mobilenet.MobileNetV2.block4", "mobilenet.MobileNetV2.block5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "c1", "=", "self", ".", "block2", "(", "x", ")", "\n", "c2", "=", "self", ".", "block3", "(", "c1", ")", "\n", "c3", "=", "self", ".", "block4", "(", "c2", ")", "\n", "c4", "=", "self", ".", "block5", "(", "c3", ")", "\n", "\n", "# x = self.features(x)", "\n", "# x = self.classifier(x.view(x.size(0), x.size(1)))", "\n", "return", "c1", ",", "c2", ",", "c3", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.mobilenet.mobilenet_v1": [[146, 149], ["build.BACKBONE_REGISTRY.register", "mobilenet.MobileNet"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "mobilenet_v1", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "return", "MobileNet", "(", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.mobilenet.mobilenet_v2": [[151, 154], ["build.BACKBONE_REGISTRY.register", "mobilenet.MobileNetV2"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "mobilenet_v2", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "return", "MobileNetV2", "(", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.build.load_backbone_pretrained": [[33, 55], ["os.path.isfile", "logging.info", "model.load_state_dict", "logging.info", "torch.load", "torch.load", "logging.info", "logging.info", "logging.info", "model.load_state_dict", "torch.load_url", "logging.warning", "logging.info", "model.load_state_dict", "torch.load", "torch.load", "utils.download.download", "os.path.join", "torch.hub._get_torch_home", "torch.hub._get_torch_home"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.download.download"], ["def", "load_backbone_pretrained", "(", "model", ",", "backbone", ")", ":", "\n", "    ", "if", "cfg", ".", "PHASE", "==", "'train'", "and", "cfg", ".", "TRAIN", ".", "BACKBONE_PRETRAINED", "and", "(", "not", "cfg", ".", "TRAIN", ".", "PRETRAINED_MODEL_PATH", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "cfg", ".", "TRAIN", ".", "BACKBONE_PRETRAINED_PATH", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'Load backbone pretrained model from {}'", ".", "format", "(", "\n", "cfg", ".", "TRAIN", ".", "BACKBONE_PRETRAINED_PATH", "\n", ")", ")", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfg", ".", "TRAIN", ".", "BACKBONE_PRETRAINED_PATH", ")", ",", "strict", "=", "False", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "", "elif", "backbone", "not", "in", "model_urls", ":", "\n", "            ", "logging", ".", "info", "(", "'{} has no pretrained model'", ".", "format", "(", "backbone", ")", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'load backbone pretrained model from url..'", ")", "\n", "try", ":", "\n", "                ", "msg", "=", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "backbone", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logging", ".", "warning", "(", "e", ")", "\n", "logging", ".", "info", "(", "'Use torch download failed, try custom method!'", ")", "\n", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download", "(", "model_urls", "[", "backbone", "]", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "torch", ".", "hub", ".", "_get_torch_home", "(", ")", ",", "'checkpoints'", ")", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "logging", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.build.get_segmentation_backbone": [[58, 65], ["build.load_backbone_pretrained", "BACKBONE_REGISTRY.get"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.build.load_backbone_pretrained", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.get"], ["", "", "", "def", "get_segmentation_backbone", "(", "backbone", ",", "norm_layer", "=", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "\"\"\"\n    Built the backbone model, defined by `cfg.MODEL.BACKBONE`.\n    \"\"\"", "\n", "model", "=", "BACKBONE_REGISTRY", ".", "get", "(", "backbone", ")", "(", "norm_layer", ")", "\n", "load_backbone_pretrained", "(", "model", ",", "backbone", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "hrnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.conv3x3", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.BasicBlock.forward": [[38, 55], ["hrnet.BasicBlock.conv1", "hrnet.BasicBlock.bn1", "hrnet.BasicBlock.relu", "hrnet.BasicBlock.conv2", "hrnet.BasicBlock.bn2", "hrnet.BasicBlock.relu", "hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.Bottleneck.__init__": [[60, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.Bottleneck.forward": [[74, 95], ["hrnet.Bottleneck.conv1", "hrnet.Bottleneck.bn1", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.conv2", "hrnet.Bottleneck.bn2", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.conv3", "hrnet.Bottleneck.bn3", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule.__init__": [[98, 114], ["torch.Module.__init__", "hrnet.HighResolutionModule._check_branches", "hrnet.HighResolutionModule._make_branches", "hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule._check_branches": [[115, 134], ["len", "logging.error", "ValueError", "len", "logging.error", "ValueError", "len", "logging.error", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logging", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logging", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logging", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule._make_one_branch": [[135, 157], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule._make_branches": [[158, 166], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule._make_fuse_layers": [[167, 211], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", "**", "(", "j", "-", "i", ")", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "False", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule.get_num_inchannels": [[212, 214], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule.forward": [[215, 233], ["range", "range", "len", "range", "x_fuse.append", "hrnet.HighResolutionModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet.__init__": [[243, 292], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet.HighResolutionNet._make_layer", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "numpy.int", "numpy.sum", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "stage1_cfg", "=", "cfg", ".", "MODEL", ".", "HRNET", ".", "STAGE1", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'NUM_CHANNELS'", "]", "[", "0", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage1_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'NUM_BLOCKS'", "]", "[", "0", "]", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ",", "norm_layer", "=", "norm_layer", ")", "\n", "stage1_out_channel", "=", "block", ".", "expansion", "*", "num_channels", "\n", "\n", "self", ".", "stage2_cfg", "=", "cfg", ".", "MODEL", ".", "HRNET", ".", "STAGE2", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "\n", "[", "stage1_out_channel", "]", ",", "num_channels", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "cfg", ".", "MODEL", ".", "HRNET", ".", "STAGE3", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "cfg", ".", "MODEL", ".", "HRNET", ".", "STAGE4", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n", "self", ".", "last_inp_channels", "=", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", "\n", "# Classification Head", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet._make_head": [[298, 346], ["enumerate", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hrnet.HighResolutionNet._make_layer", "torch.ModuleList.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer"], ["", "def", "_make_head", "(", "self", ",", "pre_stage_channels", ")", ":", "\n", "        ", "head_block", "=", "Bottleneck", "\n", "head_channels", "=", "[", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "\n", "# Increasing the #channels on each resolution", "\n", "# from C, 2C, 4C, 8C to 128, 256, 512, 1024", "\n", "incre_modules", "=", "[", "]", "\n", "for", "i", ",", "channels", "in", "enumerate", "(", "pre_stage_channels", ")", ":", "\n", "            ", "incre_module", "=", "self", ".", "_make_layer", "(", "head_block", ",", "\n", "channels", ",", "\n", "head_channels", "[", "i", "]", ",", "\n", "1", ",", "\n", "stride", "=", "1", ")", "\n", "incre_modules", ".", "append", "(", "incre_module", ")", "\n", "", "incre_modules", "=", "nn", ".", "ModuleList", "(", "incre_modules", ")", "\n", "\n", "# downsampling modules", "\n", "downsamp_modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pre_stage_channels", ")", "-", "1", ")", ":", "\n", "            ", "in_channels", "=", "head_channels", "[", "i", "]", "*", "head_block", ".", "expansion", "\n", "out_channels", "=", "head_channels", "[", "i", "+", "1", "]", "*", "head_block", ".", "expansion", "\n", "\n", "downsamp_module", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "downsamp_modules", ".", "append", "(", "downsamp_module", ")", "\n", "", "downsamp_modules", "=", "nn", ".", "ModuleList", "(", "downsamp_modules", ")", "\n", "\n", "final_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "head_channels", "[", "3", "]", "*", "head_block", ".", "expansion", ",", "\n", "out_channels", "=", "2048", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2048", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "return", "incre_modules", ",", "downsamp_modules", ",", "final_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet._make_transition_layer": [[347, 382], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "outchannels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet._make_layer": [[383, 399], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet._make_stage": [[400, 429], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet.forward": [[430, 480], ["hrnet.HighResolutionNet.conv1", "hrnet.HighResolutionNet.bn1", "hrnet.HighResolutionNet.relu", "hrnet.HighResolutionNet.conv2", "hrnet.HighResolutionNet.bn2", "hrnet.HighResolutionNet.relu", "hrnet.HighResolutionNet.layer1", "range", "hrnet.HighResolutionNet.stage2", "range", "hrnet.HighResolutionNet.stage3", "range", "hrnet.HighResolutionNet.stage4", "tuple", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "# Classification Head", "\n", "# y = self.incre_modules[0](y_list[0])", "\n", "# for i in range(len(self.downsamp_modules)):", "\n", "#     y = self.incre_modules[i + 1](y_list[i + 1]) + \\", "\n", "#         self.downsamp_modules[i](y)", "\n", "#", "\n", "# y = self.final_layer(y)", "\n", "#", "\n", "# if torch._C._get_tracing_state():", "\n", "#     y = y.flatten(start_dim=2).mean(dim=2)", "\n", "# else:", "\n", "#     y = F.avg_pool2d(y, kernel_size=y.size()", "\n", "#     [2:]).view(y.size(0), -1)", "\n", "#", "\n", "# y = self.classifier(y)", "\n", "\n", "return", "tuple", "(", "y_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.HighResolutionNet.init_weights": [[481, 501], ["logging.info", "hrnet.HighResolutionNet.modules", "os.path.isfile", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logging.info", "hrnet.HighResolutionNet.state_dict", "torch.load.items", "torch.load.items", "torch.load.items", "hrnet.HighResolutionNet.update", "hrnet.HighResolutionNet.load_state_dict", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "logging.info", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.load.items", "torch.load.items", "torch.load.items", "hrnet.HighResolutionNet.keys"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.update"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ",", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "logging", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "for", "k", ",", "_", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "'=> loading {} pretrained model {}'", ".", "format", "(", "k", ",", "pretrained", ")", ")", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.hrnet.hrnet_w18_small_v1": [[503, 506], ["build.BACKBONE_REGISTRY.register", "hrnet.HighResolutionNet"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "hrnet_w18_small_v1", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "return", "HighResolutionNet", "(", "norm_layer", "=", "norm_layer", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.BasicBlockV1b.__init__": [[12, 24], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "\n", "previous_dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "BasicBlockV1b", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "\n", "dilation", ",", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "previous_dilation", ",", "\n", "dilation", "=", "previous_dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.BasicBlockV1b.forward": [[25, 42], ["resnet.BasicBlockV1b.conv1", "resnet.BasicBlockV1b.bn1", "resnet.BasicBlockV1b.relu", "resnet.BasicBlockV1b.conv2", "resnet.BasicBlockV1b.bn2", "resnet.BasicBlockV1b.relu", "resnet.BasicBlockV1b.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.BottleneckV1b.__init__": [[47, 60], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.Conv2d", "norm_layer", "torch.Conv2d", "norm_layer", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "\n", "previous_dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "BottleneckV1b", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "\n", "dilation", ",", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.BottleneckV1b.forward": [[61, 82], ["resnet.BottleneckV1b.conv1", "resnet.BottleneckV1b.bn1", "resnet.BottleneckV1b.relu", "resnet.BottleneckV1b.conv2", "resnet.BottleneckV1b.bn2", "resnet.BottleneckV1b.relu", "resnet.BottleneckV1b.conv3", "resnet.BottleneckV1b.bn3", "resnet.BottleneckV1b.relu", "resnet.BottleneckV1b.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1.__init__": [[86, 146], ["int", "torch.Module.__init__", "norm_layer", "torch.ReLU", "torch.MaxPool2d", "resnet.ResNetV1._make_layer", "resnet.ResNetV1._make_layer", "resnet.ResNetV1._make_layer", "resnet.ResNetV1._make_layer", "int", "torch.AdaptiveAvgPool2d", "torch.Linear", "resnet.ResNetV1.modules", "int", "torch.Sequential", "torch.Conv2d", "int", "int", "int", "int", "int", "isinstance", "resnet.ResNetV1.modules", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.Conv2d", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "deep_stem", "=", "False", ",", "\n", "zero_init_residual", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "output_stride", "=", "cfg", ".", "MODEL", ".", "OUTPUT_STRIDE", "\n", "scale", "=", "cfg", ".", "MODEL", ".", "BACKBONE_SCALE", "\n", "if", "output_stride", "==", "32", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "1", "]", "\n", "strides", "=", "[", "2", ",", "2", "]", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "2", "]", "\n", "strides", "=", "[", "2", ",", "1", "]", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "dilations", "=", "[", "2", ",", "4", "]", "\n", "strides", "=", "[", "1", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "inplanes", "=", "int", "(", "(", "128", "if", "deep_stem", "else", "64", ")", "*", "scale", ")", "\n", "super", "(", "ResNetV1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "deep_stem", ":", "\n", "# resnet vc", "\n", "            ", "mid_channel", "=", "int", "(", "64", "*", "scale", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "mid_channel", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "mid_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channel", ",", "mid_channel", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "mid_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channel", ",", "self", ".", "inplanes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "7", ",", "2", ",", "3", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "64", "*", "scale", ")", ",", "layers", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "128", "*", "scale", ")", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "256", "*", "scale", ")", ",", "layers", "[", "2", "]", ",", "stride", "=", "strides", "[", "0", "]", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "512", "*", "scale", ")", ",", "layers", "[", "3", "]", ",", "stride", "=", "strides", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "multi_grid", "=", "cfg", ".", "MODEL", ".", "DANET", ".", "MULTI_GRID", ",", "\n", "multi_dilation", "=", "cfg", ".", "MODEL", ".", "DANET", ".", "MULTI_DILATION", ")", "\n", "\n", "self", ".", "last_inp_channels", "=", "int", "(", "512", "*", "block", ".", "expansion", "*", "scale", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "int", "(", "512", "*", "block", ".", "expansion", "*", "scale", ")", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "BottleneckV1b", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlockV1b", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1._make_layer": [[147, 182], ["torch.Sequential", "torch.Sequential", "layers.append", "len", "range", "range", "torch.Conv2d", "norm_layer", "layers.append", "block", "layers.append", "layers.append", "block", "layers.append", "RuntimeError", "block", "block", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "multi_grid", "=", "False", ",", "multi_dilation", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "not", "multi_grid", ":", "\n", "            ", "if", "dilation", "in", "(", "1", ",", "2", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "1", ",", "downsample", "=", "downsample", ",", "\n", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "elif", "dilation", "==", "4", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "2", ",", "downsample", "=", "downsample", ",", "\n", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"=> unknown dilation size: {}\"", ".", "format", "(", "dilation", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "multi_dilation", "[", "0", "]", ",", "\n", "downsample", "=", "downsample", ",", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "if", "multi_grid", ":", "\n", "            ", "div", "=", "len", "(", "multi_dilation", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "multi_dilation", "[", "i", "%", "div", "]", ",", "\n", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "\n", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.ResNetV1.forward": [[183, 200], ["resnet.ResNetV1.conv1", "resnet.ResNetV1.bn1", "resnet.ResNetV1.relu", "resnet.ResNetV1.maxpool", "resnet.ResNetV1.layer1", "resnet.ResNetV1.layer2", "resnet.ResNetV1.layer3", "resnet.ResNetV1.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "c1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "c2", "=", "self", ".", "layer2", "(", "c1", ")", "\n", "c3", "=", "self", ".", "layer3", "(", "c2", ")", "\n", "c4", "=", "self", ".", "layer4", "(", "c3", ")", "\n", "\n", "# for classification", "\n", "# x = self.avgpool(c4)", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "c1", ",", "c2", ",", "c3", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.resnet18": [[202, 206], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet18", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "return", "ResNetV1", "(", "BasicBlockV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.resnet34": [[208, 212], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet34", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BasicBlockV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.resnet50": [[214, 218], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet50", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.resnet101": [[220, 224], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet101", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.resnet152": [[226, 230], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet152", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.resnet50c": [[232, 236], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet50c", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ",", "deep_stem", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.resnet101c": [[238, 242], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet101c", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ",", "deep_stem", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.resnet.resnet152c": [[244, 248], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet152c", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ",", "deep_stem", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.eespnet.DownSampler.__init__": [[15, 26], ["torch.Module.__init__", "modules.EESP", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules._ConvBNPReLU", "modules._ConvBN"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "k", "=", "4", ",", "r_lim", "=", "9", ",", "reinf", "=", "True", ",", "inp_reinf", "=", "3", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "DownSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "channels_diff", "=", "out_channels", "-", "in_channels", "\n", "self", ".", "eesp", "=", "EESP", "(", "in_channels", ",", "channels_diff", ",", "stride", "=", "2", ",", "k", "=", "k", ",", "\n", "r_lim", "=", "r_lim", ",", "down_method", "=", "'avg'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "if", "reinf", ":", "\n", "            ", "self", ".", "inp_reinf", "=", "nn", ".", "Sequential", "(", "\n", "_ConvBNPReLU", "(", "inp_reinf", ",", "inp_reinf", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "_ConvBN", "(", "inp_reinf", ",", "out_channels", ",", "1", ",", "1", ")", ")", "\n", "", "self", ".", "act", "=", "nn", ".", "PReLU", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.eespnet.DownSampler.forward": [[27, 41], ["eespnet.DownSampler.avg", "eespnet.DownSampler.eesp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "eespnet.DownSampler.act", "eespnet.DownSampler.size", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d.size", "eespnet.DownSampler.inp_reinf"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x2", "=", "None", ")", ":", "\n", "        ", "avg_out", "=", "self", ".", "avg", "(", "x", ")", "\n", "eesp_out", "=", "self", ".", "eesp", "(", "x", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "eesp_out", "]", ",", "1", ")", "\n", "if", "x2", "is", "not", "None", ":", "\n", "            ", "w1", "=", "avg_out", ".", "size", "(", "2", ")", "\n", "while", "True", ":", "\n", "                ", "x2", "=", "F", ".", "avg_pool2d", "(", "x2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "w2", "=", "x2", ".", "size", "(", "2", ")", "\n", "if", "w2", "==", "w1", ":", "\n", "                    ", "break", "\n", "", "", "output", "=", "output", "+", "self", ".", "inp_reinf", "(", "x2", ")", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.eespnet.EESPNet.__init__": [[44, 113], ["torch.Module.__init__", "range", "modules._ConvBNPReLU", "eespnet.DownSampler", "eespnet.DownSampler", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "eespnet.DownSampler", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "eespnet.DownSampler", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "eespnet.EESPNet.level5.append", "eespnet.EESPNet.level5.append", "torch.Linear", "torch.Linear", "torch.Linear", "eespnet.EESPNet.modules", "len", "out_channels.append", "eespnet.EESPNet.level3.append", "eespnet.EESPNet.level4.append", "eespnet.EESPNet.level5.append", "modules._ConvBNPReLU", "modules._ConvBNPReLU", "isinstance", "int", "out_channels.append", "ValueError", "modules.EESP", "modules.EESP", "modules.EESP", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "math.ceil", "pow", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "scale", "=", "1", ",", "reinf", "=", "True", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "EESPNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inp_reinf", "=", "3", "if", "reinf", "else", "None", "\n", "reps", "=", "[", "0", ",", "3", ",", "7", ",", "3", "]", "\n", "r_lim", "=", "[", "13", ",", "11", ",", "9", ",", "7", ",", "5", "]", "\n", "K", "=", "[", "4", "]", "*", "len", "(", "r_lim", ")", "\n", "\n", "# set out_channels", "\n", "base", ",", "levels", ",", "base_s", "=", "32", ",", "5", ",", "0", "\n", "out_channels", "=", "[", "base", "]", "*", "levels", "\n", "for", "i", "in", "range", "(", "levels", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "base_s", "=", "int", "(", "base", "*", "scale", ")", "\n", "base_s", "=", "math", ".", "ceil", "(", "base_s", "/", "K", "[", "0", "]", ")", "*", "K", "[", "0", "]", "\n", "out_channels", "[", "i", "]", "=", "base", "if", "base_s", ">", "base", "else", "base_s", "\n", "", "else", ":", "\n", "                ", "out_channels", "[", "i", "]", "=", "base_s", "*", "pow", "(", "2", ",", "i", ")", "\n", "", "", "if", "scale", "<=", "1.5", ":", "\n", "            ", "out_channels", ".", "append", "(", "1024", ")", "\n", "", "elif", "scale", "in", "[", "1.5", ",", "2", "]", ":", "\n", "            ", "out_channels", ".", "append", "(", "1280", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown scale value.\"", ")", "\n", "\n", "", "self", ".", "level1", "=", "_ConvBNPReLU", "(", "3", ",", "out_channels", "[", "0", "]", ",", "3", ",", "2", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "level2_0", "=", "DownSampler", "(", "out_channels", "[", "0", "]", ",", "out_channels", "[", "1", "]", ",", "k", "=", "K", "[", "0", "]", ",", "r_lim", "=", "r_lim", "[", "0", "]", ",", "\n", "reinf", "=", "reinf", ",", "inp_reinf", "=", "inp_reinf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "level3_0", "=", "DownSampler", "(", "out_channels", "[", "1", "]", ",", "out_channels", "[", "2", "]", ",", "k", "=", "K", "[", "1", "]", ",", "r_lim", "=", "r_lim", "[", "1", "]", ",", "\n", "reinf", "=", "reinf", ",", "inp_reinf", "=", "inp_reinf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "level3", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "reps", "[", "1", "]", ")", ":", "\n", "            ", "self", ".", "level3", ".", "append", "(", "EESP", "(", "out_channels", "[", "2", "]", ",", "out_channels", "[", "2", "]", ",", "k", "=", "K", "[", "2", "]", ",", "r_lim", "=", "r_lim", "[", "2", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "self", ".", "level4_0", "=", "DownSampler", "(", "out_channels", "[", "2", "]", ",", "out_channels", "[", "3", "]", ",", "k", "=", "K", "[", "2", "]", ",", "r_lim", "=", "r_lim", "[", "2", "]", ",", "\n", "reinf", "=", "reinf", ",", "inp_reinf", "=", "inp_reinf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "level4", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "reps", "[", "2", "]", ")", ":", "\n", "            ", "self", ".", "level4", ".", "append", "(", "EESP", "(", "out_channels", "[", "3", "]", ",", "out_channels", "[", "3", "]", ",", "k", "=", "K", "[", "3", "]", ",", "r_lim", "=", "r_lim", "[", "3", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "self", ".", "level5_0", "=", "DownSampler", "(", "out_channels", "[", "3", "]", ",", "out_channels", "[", "4", "]", ",", "k", "=", "K", "[", "3", "]", ",", "r_lim", "=", "r_lim", "[", "3", "]", ",", "\n", "reinf", "=", "reinf", ",", "inp_reinf", "=", "inp_reinf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "level5", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "reps", "[", "2", "]", ")", ":", "\n", "            ", "self", ".", "level5", ".", "append", "(", "EESP", "(", "out_channels", "[", "4", "]", ",", "out_channels", "[", "4", "]", ",", "k", "=", "K", "[", "4", "]", ",", "r_lim", "=", "r_lim", "[", "4", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "self", ".", "level5", ".", "append", "(", "_ConvBNPReLU", "(", "out_channels", "[", "4", "]", ",", "out_channels", "[", "4", "]", ",", "3", ",", "1", ",", "1", ",", "\n", "groups", "=", "out_channels", "[", "4", "]", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "self", ".", "level5", ".", "append", "(", "_ConvBNPReLU", "(", "out_channels", "[", "4", "]", ",", "out_channels", "[", "5", "]", ",", "1", ",", "1", ",", "0", ",", "\n", "groups", "=", "K", "[", "4", "]", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "out_channels", "[", "5", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.eespnet.EESPNet.forward": [[114, 147], ["eespnet.EESPNet.level1", "eespnet.EESPNet.level2_0", "eespnet.EESPNet.level3_0", "enumerate", "eespnet.EESPNet.level4_0", "enumerate", "eespnet.EESPNet.level5_0", "enumerate", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.view", "eespnet.EESPNet.fc", "layer", "layer", "layer", "layer", "torch.dropout.size", "layer", "layer"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "seg", "=", "True", ")", ":", "\n", "        ", "out_l1", "=", "self", ".", "level1", "(", "x", ")", "\n", "\n", "out_l2", "=", "self", ".", "level2_0", "(", "out_l1", ",", "x", ")", "\n", "\n", "out_l3_0", "=", "self", ".", "level3_0", "(", "out_l2", ",", "x", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "level3", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "out_l3", "=", "layer", "(", "out_l3_0", ")", "\n", "", "else", ":", "\n", "                ", "out_l3", "=", "layer", "(", "out_l3", ")", "\n", "\n", "", "", "out_l4_0", "=", "self", ".", "level4_0", "(", "out_l3", ",", "x", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "level4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "out_l4", "=", "layer", "(", "out_l4_0", ")", "\n", "", "else", ":", "\n", "                ", "out_l4", "=", "layer", "(", "out_l4", ")", "\n", "\n", "", "", "if", "not", "seg", ":", "\n", "            ", "out_l5_0", "=", "self", ".", "level5_0", "(", "out_l4", ")", "# down-sampled", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "level5", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "out_l5", "=", "layer", "(", "out_l5_0", ")", "\n", "", "else", ":", "\n", "                    ", "out_l5", "=", "layer", "(", "out_l5", ")", "\n", "\n", "", "", "output_g", "=", "F", ".", "adaptive_avg_pool2d", "(", "out_l5", ",", "output_size", "=", "1", ")", "\n", "output_g", "=", "F", ".", "dropout", "(", "output_g", ",", "p", "=", "0.2", ",", "training", "=", "self", ".", "training", ")", "\n", "output_1x1", "=", "output_g", ".", "view", "(", "output_g", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "self", ".", "fc", "(", "output_1x1", ")", "\n", "", "return", "out_l1", ",", "out_l2", ",", "out_l3", ",", "out_l4", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.eespnet.eespnet": [[149, 152], ["build.BACKBONE_REGISTRY.register", "eespnet.EESPNet"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "eespnet", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "return", "EESPNet", "(", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.XceptionBlock.__init__": [[11, 31], ["torch.Module.__init__", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "len", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_list", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "skip_connection_type", "=", "'conv'", ",", "relu_first", "=", "True", ",", "\n", "low_feat", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "channel_list", ")", "==", "4", "\n", "self", ".", "skip_connection_type", "=", "skip_connection_type", "\n", "self", ".", "relu_first", "=", "relu_first", "\n", "self", ".", "low_feat", "=", "low_feat", "\n", "\n", "if", "self", ".", "skip_connection_type", "==", "'conv'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "channel_list", "[", "0", "]", ",", "channel_list", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "channel_list", "[", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "sep_conv1", "=", "SeparableConv2d", "(", "channel_list", "[", "0", "]", ",", "channel_list", "[", "1", "]", ",", "dilation", "=", "dilation", ",", "\n", "relu_first", "=", "relu_first", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "sep_conv2", "=", "SeparableConv2d", "(", "channel_list", "[", "1", "]", ",", "channel_list", "[", "2", "]", ",", "dilation", "=", "dilation", ",", "\n", "relu_first", "=", "relu_first", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "sep_conv3", "=", "SeparableConv2d", "(", "channel_list", "[", "2", "]", ",", "channel_list", "[", "3", "]", ",", "dilation", "=", "dilation", ",", "\n", "relu_first", "=", "relu_first", ",", "stride", "=", "stride", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "last_inp_channels", "=", "channel_list", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.XceptionBlock.forward": [[32, 52], ["xception.XceptionBlock.sep_conv1", "xception.XceptionBlock.sep_conv2", "xception.XceptionBlock.sep_conv3", "xception.XceptionBlock.conv", "xception.XceptionBlock.bn", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "sc1", "=", "self", ".", "sep_conv1", "(", "inputs", ")", "\n", "sc2", "=", "self", ".", "sep_conv2", "(", "sc1", ")", "\n", "residual", "=", "self", ".", "sep_conv3", "(", "sc2", ")", "\n", "\n", "if", "self", ".", "skip_connection_type", "==", "'conv'", ":", "\n", "            ", "shortcut", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "shortcut", "=", "self", ".", "bn", "(", "shortcut", ")", "\n", "outputs", "=", "residual", "+", "shortcut", "\n", "", "elif", "self", ".", "skip_connection_type", "==", "'sum'", ":", "\n", "            ", "outputs", "=", "residual", "+", "inputs", "\n", "", "elif", "self", ".", "skip_connection_type", "==", "'none'", ":", "\n", "            ", "outputs", "=", "residual", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported skip connection type.'", ")", "\n", "\n", "", "if", "self", ".", "low_feat", ":", "\n", "            ", "return", "outputs", ",", "sc2", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.Xception65.__init__": [[55, 128], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.Conv2d", "norm_layer", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "output_stride", "=", "cfg", ".", "MODEL", ".", "OUTPUT_STRIDE", "\n", "if", "output_stride", "==", "32", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block_dilations", "=", "(", "1", ",", "1", ")", "\n", "exit_block_stride", "=", "2", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block_dilations", "=", "(", "1", ",", "2", ")", "\n", "exit_block_stride", "=", "1", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "entry_block3_stride", "=", "1", "\n", "middle_block_dilation", "=", "2", "\n", "exit_block_dilations", "=", "(", "2", ",", "4", ")", "\n", "exit_block_stride", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Entry flow", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "64", ")", "\n", "\n", "self", ".", "block1", "=", "XceptionBlock", "(", "[", "64", ",", "128", ",", "128", ",", "128", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block2", "=", "XceptionBlock", "(", "[", "128", ",", "256", ",", "256", ",", "256", "]", ",", "stride", "=", "2", ",", "low_feat", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block3", "=", "XceptionBlock", "(", "[", "256", ",", "728", ",", "728", ",", "728", "]", ",", "stride", "=", "entry_block3_stride", ",", "low_feat", "=", "True", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# Middle flow (16 units)", "\n", "self", ".", "block4", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block5", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block6", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block7", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block8", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block9", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block10", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block11", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block12", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block13", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block14", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block15", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block16", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block17", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block18", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block19", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# Exit flow", "\n", "self", ".", "block20", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "1024", ",", "1024", "]", ",", "stride", "=", "exit_block_stride", ",", "\n", "dilation", "=", "exit_block_dilations", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block21", "=", "XceptionBlock", "(", "[", "1024", ",", "1536", ",", "1536", ",", "2048", "]", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "\n", "skip_connection_type", "=", "'none'", ",", "relu_first", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.Xception65.forward": [[129, 166], ["xception.Xception65.conv1", "xception.Xception65.bn1", "xception.Xception65.relu", "xception.Xception65.conv2", "xception.Xception65.bn2", "xception.Xception65.relu", "xception.Xception65.block1", "xception.Xception65.block2", "xception.Xception65.block3", "xception.Xception65.block4", "xception.Xception65.block5", "xception.Xception65.block6", "xception.Xception65.block7", "xception.Xception65.block8", "xception.Xception65.block9", "xception.Xception65.block10", "xception.Xception65.block11", "xception.Xception65.block12", "xception.Xception65.block13", "xception.Xception65.block14", "xception.Xception65.block15", "xception.Xception65.block16", "xception.Xception65.block17", "xception.Xception65.block18", "xception.Xception65.block19", "xception.Xception65.block20", "xception.Xception65.block21"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Entry flow", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", ",", "c1", "=", "self", ".", "block2", "(", "x", ")", "# b, h//4, w//4, 256", "\n", "x", ",", "c2", "=", "self", ".", "block3", "(", "x", ")", "# b, h//8, w//8, 728", "\n", "\n", "# Middle flow", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "x", "=", "self", ".", "block13", "(", "x", ")", "\n", "x", "=", "self", ".", "block14", "(", "x", ")", "\n", "x", "=", "self", ".", "block15", "(", "x", ")", "\n", "x", "=", "self", ".", "block16", "(", "x", ")", "\n", "x", "=", "self", ".", "block17", "(", "x", ")", "\n", "x", "=", "self", ".", "block18", "(", "x", ")", "\n", "c3", "=", "self", ".", "block19", "(", "x", ")", "\n", "\n", "# Exit flow", "\n", "x", "=", "self", ".", "block20", "(", "c3", ")", "\n", "c4", "=", "self", ".", "block21", "(", "x", ")", "\n", "\n", "return", "c1", ",", "c2", ",", "c3", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.BlockA.__init__": [[172, 201], ["torch.Module.__init__", "torch.ReLU", "list", "list.append", "list.append", "list.append", "list.append", "list.append", "torch.Sequential", "torch.Conv2d", "norm_layer", "list.append", "modules.SeparableConv2d", "norm_layer", "modules.SeparableConv2d", "norm_layer", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "modules.SeparableConv2d", "norm_layer", "modules.SeparableConv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "start_with_relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "BlockA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "out_channels", "!=", "in_channels", "or", "stride", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "norm_layer", "(", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "rep", "=", "list", "(", ")", "\n", "inter_channels", "=", "out_channels", "//", "4", "\n", "\n", "if", "start_with_relu", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_channels", ",", "inter_channels", ",", "3", ",", "1", ",", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "inter_channels", ")", ")", "\n", "\n", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "inter_channels", ",", "inter_channels", ",", "3", ",", "1", ",", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "inter_channels", ")", ")", "\n", "\n", "if", "stride", "!=", "1", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "inter_channels", ",", "out_channels", ",", "3", ",", "stride", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "inter_channels", ",", "out_channels", ",", "3", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "out_channels", ")", ")", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.BlockA.forward": [[202, 210], ["xception.BlockA.rep", "xception.BlockA.skipbn", "xception.BlockA.skip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "rep", "(", "x", ")", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skipbn", "(", "self", ".", "skip", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "x", "\n", "", "out", "=", "out", "+", "skip", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.Enc.__init__": [[213, 220], ["torch.Module.__init__", "list", "list.append", "range", "torch.Sequential", "xception.BlockA", "list.append", "xception.BlockA"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "blocks", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Enc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "list", "(", ")", "\n", "block", ".", "append", "(", "BlockA", "(", "in_channels", ",", "out_channels", ",", "2", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "for", "i", "in", "range", "(", "blocks", "-", "1", ")", ":", "\n", "            ", "block", ".", "append", "(", "BlockA", "(", "out_channels", ",", "out_channels", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.Enc.forward": [[221, 223], ["xception.Enc.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.FCAttention.__init__": [[226, 234], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Sequential", "torch.Conv2d", "norm_layer", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "FCAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "1000", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1000", ",", "in_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.FCAttention.forward": [[235, 241], ["x.size", "xception.FCAttention.avgpool().view", "xception.FCAttention.fc().view", "xception.FCAttention.conv", "xception.FCAttention.expand_as", "xception.FCAttention.avgpool", "xception.FCAttention.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "att", "=", "self", ".", "avgpool", "(", "x", ")", ".", "view", "(", "n", ",", "c", ")", "\n", "att", "=", "self", ".", "fc", "(", "att", ")", ".", "view", "(", "n", ",", "1000", ",", "1", ",", "1", ")", "\n", "att", "=", "self", ".", "conv", "(", "att", ")", "\n", "return", "x", "*", "att", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.XceptionA.__init__": [[244, 257], ["torch.Module.__init__", "torch.Sequential", "xception.Enc", "xception.Enc", "xception.Enc", "xception.FCAttention", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "norm_layer", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "XceptionA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "3", ",", "8", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "enc2", "=", "Enc", "(", "8", ",", "48", ",", "4", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "enc3", "=", "Enc", "(", "48", ",", "96", ",", "6", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "enc4", "=", "Enc", "(", "96", ",", "192", ",", "4", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "fca", "=", "FCAttention", "(", "192", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "192", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.XceptionA.forward": [[258, 271], ["xception.XceptionA.conv1", "xception.XceptionA.enc2", "xception.XceptionA.enc3", "xception.XceptionA.enc4", "xception.XceptionA.fca", "xception.XceptionA.avgpool", "xception.XceptionA.view", "xception.XceptionA.fc", "xception.XceptionA.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "enc2", "(", "x", ")", "\n", "x", "=", "self", ".", "enc3", "(", "x", ")", "\n", "x", "=", "self", ".", "enc4", "(", "x", ")", "\n", "x", "=", "self", ".", "fca", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.xception_a": [[273, 277], ["build.BACKBONE_REGISTRY.register", "xception.XceptionA"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "xception_a", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "model", "=", "XceptionA", "(", "norm_layer", "=", "norm_layer", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.xception.xception65": [[279, 283], ["build.BACKBONE_REGISTRY.register", "xception.Xception65"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "xception65", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "model", "=", "Xception65", "(", "norm_layer", "=", "norm_layer", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.Mlp.__init__": [[12, 23], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "pvtv2_mix_transformer.DWConv", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "pvtv2_mix_transformer.Mlp.apply"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "dwconv", "=", "DWConv", "(", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.Mlp._init_weights": [[24, 38], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.Mlp.forward": [[39, 47], ["pvtv2_mix_transformer.Mlp.fc1", "pvtv2_mix_transformer.Mlp.dwconv", "pvtv2_mix_transformer.Mlp.act", "pvtv2_mix_transformer.Mlp.drop", "pvtv2_mix_transformer.Mlp.fc2", "pvtv2_mix_transformer.Mlp.drop"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "dwconv", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.Attention.__init__": [[50, 71], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "pvtv2_mix_transformer.Attention.apply", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "sr_ratio", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "f\"dim {dim} should be divided by num_heads {num_heads}.\"", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "kv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "2", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "self", ".", "sr_ratio", "=", "sr_ratio", "\n", "if", "sr_ratio", ">", "1", ":", "\n", "            ", "self", ".", "sr", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "sr_ratio", ",", "stride", "=", "sr_ratio", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.Attention._init_weights": [[72, 86], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.Attention.forward": [[87, 109], ["pvtv2_mix_transformer.Attention.q().reshape().permute", "pvtv2_mix_transformer.Attention.softmax", "pvtv2_mix_transformer.Attention.attn_drop", "pvtv2_mix_transformer.Attention.proj", "pvtv2_mix_transformer.Attention.proj_drop", "pvtv2_mix_transformer.Attention.permute().reshape", "pvtv2_mix_transformer.Attention.sr().reshape().permute", "pvtv2_mix_transformer.Attention.norm", "pvtv2_mix_transformer.Attention.kv().reshape().permute", "pvtv2_mix_transformer.Attention.kv().reshape().permute", "pvtv2_mix_transformer.Attention.q().reshape", "k.transpose", "pvtv2_mix_transformer.Attention.permute", "pvtv2_mix_transformer.Attention.sr().reshape", "pvtv2_mix_transformer.Attention.kv().reshape", "pvtv2_mix_transformer.Attention.kv().reshape", "pvtv2_mix_transformer.Attention.q", "pvtv2_mix_transformer.Attention.sr", "pvtv2_mix_transformer.Attention.kv", "pvtv2_mix_transformer.Attention.kv"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "if", "self", ".", "sr_ratio", ">", "1", ":", "\n", "            ", "x_", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x_", "=", "self", ".", "sr", "(", "x_", ")", ".", "reshape", "(", "B", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_", "=", "self", ".", "norm", "(", "x_", ")", "\n", "kv", "=", "self", ".", "kv", "(", "x_", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "kv", "=", "self", ".", "kv", "(", "x", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "k", ",", "v", "=", "kv", "[", "0", "]", ",", "kv", "[", "1", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.Block.__init__": [[113, 127], ["torch.Module.__init__", "norm_layer", "pvtv2_mix_transformer.Attention", "norm_layer", "int", "pvtv2_mix_transformer.Mlp", "pvtv2_mix_transformer.Block.apply", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "sr_ratio", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "sr_ratio", "=", "sr_ratio", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.Block._init_weights": [[128, 142], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.Block.forward": [[143, 148], ["pvtv2_mix_transformer.Block.drop_path", "pvtv2_mix_transformer.Block.drop_path", "pvtv2_mix_transformer.Block.attn", "pvtv2_mix_transformer.Block.mlp", "pvtv2_mix_transformer.Block.norm1", "pvtv2_mix_transformer.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.drop.drop_path"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.OverlapPatchEmbed.__init__": [[154, 168], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "pvtv2_mix_transformer.OverlapPatchEmbed.apply"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "7", ",", "stride", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "H", ",", "self", ".", "W", "=", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", "\n", "self", ".", "num_patches", "=", "self", ".", "H", "*", "self", ".", "W", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "patch_size", "[", "0", "]", "//", "2", ",", "patch_size", "[", "1", "]", "//", "2", ")", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.OverlapPatchEmbed._init_weights": [[169, 183], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.OverlapPatchEmbed.forward": [[184, 191], ["pvtv2_mix_transformer.OverlapPatchEmbed.proj", "pvtv2_mix_transformer.OverlapPatchEmbed.flatten().transpose", "pvtv2_mix_transformer.OverlapPatchEmbed.norm", "pvtv2_mix_transformer.OverlapPatchEmbed.flatten"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer.__init__": [[194, 245], ["torch.Module.__init__", "pvtv2_mix_transformer.OverlapPatchEmbed", "pvtv2_mix_transformer.OverlapPatchEmbed", "pvtv2_mix_transformer.OverlapPatchEmbed", "pvtv2_mix_transformer.OverlapPatchEmbed", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "pvtv2_mix_transformer.MixVisionTransformer.apply", "x.item", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "pvtv2_mix_transformer.Block", "pvtv2_mix_transformer.Block", "pvtv2_mix_transformer.Block", "pvtv2_mix_transformer.Block", "sum", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "\n", "num_heads", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "\n", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "depths", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "depths", "=", "depths", "\n", "\n", "self", ".", "patch_embed1", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", ",", "patch_size", "=", "7", ",", "stride", "=", "4", ",", "in_chans", "=", "in_chans", ",", "\n", "embed_dim", "=", "embed_dims", "[", "0", "]", ")", "\n", "self", ".", "patch_embed2", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", "//", "4", ",", "patch_size", "=", "3", ",", "stride", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "0", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "1", "]", ")", "\n", "self", ".", "patch_embed3", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", "//", "8", ",", "patch_size", "=", "3", ",", "stride", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "1", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "2", "]", ")", "\n", "self", ".", "patch_embed4", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", "//", "16", ",", "patch_size", "=", "3", ",", "stride", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "2", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "3", "]", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "\n", "cur", "=", "0", "\n", "self", ".", "block1", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "0", "]", ",", "num_heads", "=", "num_heads", "[", "0", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "0", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "0", "]", ")", "]", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "embed_dims", "[", "0", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "0", "]", "\n", "self", ".", "block2", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "1", "]", ",", "num_heads", "=", "num_heads", "[", "1", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "1", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "1", "]", ")", "]", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "embed_dims", "[", "1", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "1", "]", "\n", "self", ".", "block3", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "2", "]", ",", "num_heads", "=", "num_heads", "[", "2", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "2", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "2", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "2", "]", ")", "]", ")", "\n", "self", ".", "norm3", "=", "norm_layer", "(", "embed_dims", "[", "2", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "2", "]", "\n", "self", ".", "block4", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "3", "]", ",", "num_heads", "=", "num_heads", "[", "3", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "3", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "3", "]", ")", "]", ")", "\n", "self", ".", "norm4", "=", "norm_layer", "(", "embed_dims", "[", "3", "]", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer._init_weights": [[246, 260], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.modules.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer.init_weights": [[261, 265], ["isinstance", "mmcv.runner.load_checkpoint"], "methods", ["None"], ["", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "# logger = get_root_logger()", "\n", "            ", "load_checkpoint", "(", "self", ",", "pretrained", ",", "map_location", "=", "'cpu'", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer.reset_drop_path": [[266, 283], ["range", "range", "range", "range", "x.item", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum"], "methods", ["None"], ["", "", "def", "reset_drop_path", "(", "self", ",", "drop_path_rate", ")", ":", "\n", "        ", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "self", ".", "depths", ")", ")", "]", "\n", "cur", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "block1", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n", "", "cur", "+=", "self", ".", "depths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "1", "]", ")", ":", "\n", "            ", "self", ".", "block2", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n", "", "cur", "+=", "self", ".", "depths", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "2", "]", ")", ":", "\n", "            ", "self", ".", "block3", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n", "", "cur", "+=", "self", ".", "depths", "[", "2", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "3", "]", ")", ":", "\n", "            ", "self", ".", "block4", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer.freeze_patch_emb": [[284, 286], ["None"], "methods", ["None"], ["", "", "def", "freeze_patch_emb", "(", "self", ")", ":", "\n", "        ", "self", ".", "patch_embed1", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer.no_weight_decay": [[287, 290], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed1'", ",", "'pos_embed2'", ",", "'pos_embed3'", ",", "'pos_embed4'", ",", "'cls_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer.get_classifier": [[291, 293], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer.reset_classifier": [[294, 297], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer.forward_features": [[298, 335], ["pvtv2_mix_transformer.MixVisionTransformer.patch_embed1", "enumerate", "pvtv2_mix_transformer.MixVisionTransformer.norm1", "blk.reshape().permute().contiguous", "outs.append", "pvtv2_mix_transformer.MixVisionTransformer.patch_embed2", "enumerate", "pvtv2_mix_transformer.MixVisionTransformer.norm2", "blk.reshape().permute().contiguous", "outs.append", "pvtv2_mix_transformer.MixVisionTransformer.patch_embed3", "enumerate", "pvtv2_mix_transformer.MixVisionTransformer.norm3", "blk.reshape().permute().contiguous", "outs.append", "pvtv2_mix_transformer.MixVisionTransformer.patch_embed4", "enumerate", "pvtv2_mix_transformer.MixVisionTransformer.norm4", "blk.reshape().permute().contiguous", "outs.append", "blk", "blk", "blk", "blk", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape", "blk.reshape", "blk.reshape", "blk.reshape"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "outs", "=", "[", "]", "\n", "\n", "# stage 1", "\n", "x", ",", "H", ",", "W", "=", "self", ".", "patch_embed1", "(", "x", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "block1", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "# stage 2", "\n", "x", ",", "H", ",", "W", "=", "self", ".", "patch_embed2", "(", "x", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "block2", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "# stage 3", "\n", "x", ",", "H", ",", "W", "=", "self", ".", "patch_embed3", "(", "x", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "block3", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "self", ".", "norm3", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "# stage 4", "\n", "x", ",", "H", ",", "W", "=", "self", ".", "patch_embed4", "(", "x", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "block4", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "self", ".", "norm4", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer.forward": [[336, 341], ["pvtv2_mix_transformer.MixVisionTransformer.forward_features"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.MixVisionTransformer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "# x = self.head(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.DWConv.__init__": [[344, 347], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "768", ")", ":", "\n", "        ", "super", "(", "DWConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dwconv", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ",", "groups", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.DWConv.forward": [[348, 355], ["x.flatten().transpose.flatten().transpose.transpose().view", "pvtv2_mix_transformer.DWConv.dwconv", "x.flatten().transpose.flatten().transpose.flatten().transpose", "x.flatten().transpose.flatten().transpose.transpose", "x.flatten().transpose.flatten().transpose.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "self", ".", "dwconv", "(", "x", ")", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "return", "x", "\n", "", "", "MLP_RATIOS", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.mit_b1": [[357, 363], ["build.BACKBONE_REGISTRY.register", "pvtv2_mix_transformer.MixVisionTransformer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "mit_b1", "(", "*", "args", ")", ":", "\n", "    ", "return", "MixVisionTransformer", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "\n", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.mit_b2": [[365, 371], ["build.BACKBONE_REGISTRY.register", "pvtv2_mix_transformer.MixVisionTransformer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "mit_b2", "(", "*", "args", ")", ":", "\n", "    ", "return", "MixVisionTransformer", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "\n", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.backbones.pvtv2_mix_transformer.mit_b3": [[373, 379], ["build.BACKBONE_REGISTRY.register", "pvtv2_mix_transformer.MixVisionTransformer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "mit_b3", "(", "*", "args", ")", ":", "\n", "    ", "return", "MixVisionTransformer", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "4", ",", "18", ",", "3", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "\n", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.acdc.ACDCSegmentation.__init__": [[17, 33], ["seg_data_base.SegmentationDataset.__init__", "os.path.exists", "acdc._get_acdc_pairs", "numpy.array", "numpy.array().astype", "len", "len", "len", "RuntimeError", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.acdc._get_acdc_pairs"], ["def", "__init__", "(", "self", ",", "root", "=", "'datasets/acdc'", ",", "split", "=", "'train'", ",", "mode", "=", "None", ",", "transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ACDCSegmentation", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ",", "mode", ",", "transform", ",", "**", "kwargs", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "root", ")", ",", "\"Please put dataset in {SEG_ROOT}/datasets/acdc\"", "\n", "self", ".", "images", ",", "self", ".", "mask_paths", "=", "_get_acdc_pairs", "(", "self", ".", "root", ",", "self", ".", "split", ")", "\n", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "mask_paths", ")", ")", "\n", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Found 0 images in subfolders of:\"", "+", "root", "+", "\"\\n\"", ")", "\n", "", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "\n", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", "]", "\n", "self", ".", "_key", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "-", "1", ",", "-", "1", ",", "0", ",", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "2", ",", "3", ",", "4", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "5", ",", "-", "1", ",", "6", ",", "7", ",", "8", ",", "9", ",", "\n", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "\n", "-", "1", ",", "-", "1", ",", "16", ",", "17", ",", "18", "]", ")", "\n", "self", ".", "_mapping", "=", "np", ".", "array", "(", "range", "(", "-", "1", ",", "len", "(", "self", ".", "_key", ")", "-", "1", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.acdc.ACDCSegmentation._class_to_index": [[34, 40], ["numpy.unique", "numpy.digitize", "acdc.ACDCSegmentation._key[].reshape", "mask.ravel"], "methods", ["None"], ["", "def", "_class_to_index", "(", "self", ",", "mask", ")", ":", "\n", "        ", "values", "=", "np", ".", "unique", "(", "mask", ")", "\n", "for", "value", "in", "values", ":", "\n", "            ", "assert", "(", "value", "in", "self", ".", "_mapping", ")", "\n", "", "index", "=", "np", ".", "digitize", "(", "mask", ".", "ravel", "(", ")", ",", "self", ".", "_mapping", ",", "right", "=", "True", ")", "\n", "return", "self", ".", "_key", "[", "index", "]", ".", "reshape", "(", "mask", ".", "shape", ")", "\n", "", "def", "_val_sync_transform_resize", "(", "self", ",", "img", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.acdc.ACDCSegmentation._val_sync_transform_resize": [[40, 49], ["random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "acdc.ACDCSegmentation._img_transform", "acdc.ACDCSegmentation._mask_transform"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._mask_transform"], ["", "def", "_val_sync_transform_resize", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "crop_size", "[", "1", "]", ",", "y1", "+", "self", ".", "crop_size", "[", "0", "]", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "crop_size", "[", "1", "]", ",", "y1", "+", "self", ".", "crop_size", "[", "0", "]", ")", ")", "\n", "\n", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.acdc.ACDCSegmentation.__getitem__": [[50, 67], ["PIL.Image.open().convert", "PIL.Image.open", "acdc.ACDCSegmentation._sync_transform", "acdc.ACDCSegmentation.transform", "os.path.basename", "PIL.Image.open", "acdc.ACDCSegmentation.transform", "os.path.basename", "acdc.ACDCSegmentation._val_sync_transform_resize", "acdc.ACDCSegmentation._val_sync_transform_resize"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._sync_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._val_sync_transform_resize", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._val_sync_transform_resize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "", "mask", "=", "Image", ".", "open", "(", "self", ".", "mask_paths", "[", "index", "]", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ",", "resize", "=", "True", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform_resize", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "img", ",", "mask", "=", "self", ".", "_val_sync_transform_resize", "(", "img", ",", "mask", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "mask", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.acdc.ACDCSegmentation._mask_transform": [[68, 71], ["acdc.ACDCSegmentation._class_to_index", "torch.LongTensor", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._class_to_index"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "target", "=", "self", ".", "_class_to_index", "(", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "return", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "target", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.acdc.ACDCSegmentation.__len__": [[72, 74], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.acdc.ACDCSegmentation.pred_offset": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.acdc.ACDCSegmentation.classes": [[79, 85], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Category names.\"\"\"", "\n", "return", "(", "'road'", ",", "'sidewalk'", ",", "'building'", ",", "'wall'", ",", "'fence'", ",", "'pole'", ",", "'traffic light'", ",", "\n", "'traffic sign'", ",", "'vegetation'", ",", "'terrain'", ",", "'sky'", ",", "'person'", ",", "'rider'", ",", "'car'", ",", "\n", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "'bicycle'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.acdc._get_acdc_pairs": [[87, 102], ["glob.glob", "logging.info", "os.path.join", "imgpath.replace().replace", "os.path.isfile", "os.path.isfile", "img_paths.append", "mask_paths.append", "logging.info", "len", "imgpath.replace"], "function", ["None"], ["", "", "def", "_get_acdc_pairs", "(", "folder", ",", "split", "=", "'train'", ")", ":", "\n", "    ", "img_paths", "=", "[", "]", "\n", "mask_paths", "=", "[", "]", "\n", "if", "split", "==", "'test'", ":", "\n", "        ", "split", "=", "'val'", "\n", "", "img_paths_temp", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'rgb_anon/*/{}/*/*_rgb_anon.png'", ".", "format", "(", "split", ")", ")", ")", "\n", "for", "imgpath", "in", "img_paths_temp", ":", "\n", "        ", "maskpath", "=", "imgpath", ".", "replace", "(", "'/rgb_anon/'", ",", "'/gt/'", ")", ".", "replace", "(", "'rgb_anon.png'", ",", "'gt_labelIds.png'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "imgpath", ")", "and", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "            ", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "mask_paths", ".", "append", "(", "maskpath", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'cannot find the mask or image:'", ",", "imgpath", ",", "maskpath", ")", "\n", "", "", "logging", ".", "info", "(", "'Found {} images in the folder {}'", ".", "format", "(", "len", "(", "img_paths", ")", ",", "folder", ")", ")", "\n", "return", "img_paths", ",", "mask_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.transparent11.TransparentSegmentation.__init__": [[15, 24], ["seg_data_base.SegmentationDataset.__init__", "os.path.join", "os.path.exists", "transparent11._get_trans10k_pairs", "logging.info", "len", "len", "len", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.transparent11._get_trans10k_pairs"], ["def", "__init__", "(", "self", ",", "root", "=", "'datasets/transparent'", ",", "split", "=", "'test'", ",", "mode", "=", "None", ",", "transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TransparentSegmentation", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ",", "mode", ",", "transform", ",", "**", "kwargs", ")", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "BASE_DIR", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", ",", "\"Please put the data in {SEG_ROOT}/datasets/transparent\"", "\n", "self", ".", "images", ",", "self", ".", "masks", "=", "_get_trans10k_pairs", "(", "root", ",", "split", ")", "\n", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "masks", ")", ")", "\n", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Found 0 images in subfolders of:\"", "+", "root", "+", "\"\\n\"", ")", "\n", "", "logging", ".", "info", "(", "'Found {} images in the folder {}'", ".", "format", "(", "len", "(", "self", ".", "images", ")", ",", "root", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.transparent11.TransparentSegmentation._mask_transform": [[25, 27], ["torch.LongTensor", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.transparent11.TransparentSegmentation._val_sync_transform_resize": [[28, 36], ["img.resize.resize.resize", "mask.resize.resize.resize", "transparent11.TransparentSegmentation._img_transform", "transparent11.TransparentSegmentation._mask_transform"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._mask_transform"], ["", "def", "_val_sync_transform_resize", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "short_size", "=", "self", ".", "crop_size", "\n", "img", "=", "img", ".", "resize", "(", "short_size", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "short_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# final transform", "\n", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.transparent11.TransparentSegmentation.__getitem__": [[37, 57], ["PIL.Image.open().convert", "PIL.Image.open().convert", "transparent11.TransparentSegmentation._img_transform", "transparent11.TransparentSegmentation._sync_transform", "transparent11.TransparentSegmentation.transform", "os.path.basename", "PIL.Image.open", "transparent11.TransparentSegmentation.transform", "os.path.basename", "PIL.Image.open", "transparent11.TransparentSegmentation._val_sync_transform_resize", "transparent11.TransparentSegmentation._val_sync_transform_resize"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._sync_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._val_sync_transform_resize", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._val_sync_transform_resize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform", "(", "img", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "", "mask", "=", "Image", ".", "open", "(", "self", ".", "masks", "[", "index", "]", ")", ".", "convert", "(", "\"P\"", ")", "\n", "# synchrosized transform", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ",", "resize", "=", "True", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform_resize", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "img", ",", "mask", "=", "self", ".", "_val_sync_transform_resize", "(", "img", ",", "mask", ")", "\n", "# general resize, normalize and to Tensor", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "mask", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.transparent11.TransparentSegmentation.__len__": [[58, 60], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.transparent11.TransparentSegmentation.pred_offset": [[61, 64], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.transparent11.TransparentSegmentation.classes": [[65, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Category names.\"\"\"", "\n", "return", "(", "'Background'", ",", "'Shelf'", ",", "'Jar or Tank'", ",", "'Freezer'", ",", "'Window'", ",", "\n", "'Glass Door'", ",", "'Eyeglass'", ",", "'Cup'", ",", "'Floor Glass'", ",", "'Glass Bow'", ",", "\n", "'Water Bottle'", ",", "'Storage Box'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.transparent11._get_trans10k_pairs": [[73, 100], ["os.listdir", "os.path.join", "os.path.join", "os.path.splitext", "filename.endswith", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "img_paths.append", "mask_paths.append", "logging.info"], "function", ["None"], ["", "", "def", "_get_trans10k_pairs", "(", "folder", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "img_paths", "=", "[", "]", "\n", "mask_paths", "=", "[", "]", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'train/images'", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'train/masks_12'", ")", "\n", "", "elif", "mode", "==", "\"val\"", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'validation/images'", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'validation/masks_12'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "mode", "==", "\"test\"", "\n", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'test/images'", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'test/masks_12'", ")", "\n", "\n", "", "for", "filename", "in", "os", ".", "listdir", "(", "img_folder", ")", ":", "\n", "        ", "basename", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "if", "filename", ".", "endswith", "(", "\".jpg\"", ")", ":", "\n", "            ", "imgpath", "=", "os", ".", "path", ".", "join", "(", "img_folder", ",", "filename", ")", "\n", "maskname", "=", "basename", "+", "'_mask.png'", "\n", "maskpath", "=", "os", ".", "path", ".", "join", "(", "mask_folder", ",", "maskname", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "                ", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "mask_paths", ".", "append", "(", "maskpath", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "'cannot find the mask:'", ",", "maskpath", ")", "\n", "\n", "", "", "", "return", "img_paths", ",", "mask_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cocostuff.COCOStuffSegmentation.__init__": [[41, 65], ["segmentron.data.dataloader.seg_data_base.SegmentationDataset.__init__", "os.path.join", "os.path.exists", "cocostuff._get_cocostuff_pairs", "logging.info", "len", "len", "len", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cocostuff._get_cocostuff_pairs"], ["def", "__init__", "(", "self", ",", "root", "=", "'datasets/cocostuff'", ",", "split", "=", "'test'", ",", "mode", "=", "None", ",", "transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "COCOStuffSegmentation", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ",", "mode", ",", "transform", ",", "**", "kwargs", ")", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "BASE_DIR", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", ",", "\"Please put the data in {SEG_ROOT}/datasets/cocostuff\"", "\n", "self", ".", "images", ",", "self", ".", "masks", "=", "_get_cocostuff_pairs", "(", "root", ",", "split", ")", "\n", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "masks", ")", ")", "\n", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Found 0 images in subfolders of:\"", "+", "root", "+", "\"\\n\"", ")", "\n", "", "logging", ".", "info", "(", "'Found {} images in the folder {}'", ".", "format", "(", "len", "(", "self", ".", "images", ")", ",", "root", ")", ")", "\n", "\n", "'''\n        self.mapping = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, \n                    21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n                    40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, \n                    59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, \n                    78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, \n                    97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, \n                    113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, \n                    129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, \n                    145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, \n                    161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, \n                    177, 178, 179, 180, 181, 182]\n        self.idname = IDNAME\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cocostuff.COCOStuffSegmentation._mask_transform": [[67, 69], ["torch.LongTensor", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cocostuff.COCOStuffSegmentation._val_sync_transform_resize": [[70, 78], ["img.resize.resize.resize", "mask.resize.resize.resize", "cocostuff.COCOStuffSegmentation._img_transform", "cocostuff.COCOStuffSegmentation._mask_transform"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._mask_transform"], ["", "def", "_val_sync_transform_resize", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "short_size", "=", "self", ".", "crop_size", "\n", "img", "=", "img", ".", "resize", "(", "short_size", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "short_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# final transform", "\n", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cocostuff.COCOStuffSegmentation.__getitem__": [[79, 102], ["PIL.Image.open().convert", "PIL.Image.open().convert", "numpy.array", "cocostuff.encode_label", "PIL.Image.fromarray", "cocostuff.COCOStuffSegmentation._img_transform", "cocostuff.COCOStuffSegmentation._sync_transform", "cocostuff.COCOStuffSegmentation.transform", "os.path.basename", "PIL.Image.open", "cocostuff.COCOStuffSegmentation.transform", "os.path.basename", "PIL.Image.open", "cocostuff.COCOStuffSegmentation._val_sync_transform_resize", "cocostuff.COCOStuffSegmentation._val_sync_transform_resize"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cocostuff.encode_label", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._sync_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._val_sync_transform_resize", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._val_sync_transform_resize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform", "(", "img", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "", "mask", "=", "Image", ".", "open", "(", "self", ".", "masks", "[", "index", "]", ")", ".", "convert", "(", "\"P\"", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask", "=", "encode_label", "(", "mask", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ")", "\n", "# synchrosized transform", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ",", "resize", "=", "True", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform_resize", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "img", ",", "mask", "=", "self", ".", "_val_sync_transform_resize", "(", "img", ",", "mask", ")", "\n", "# general resize, normalize and to Tensor", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "mask", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cocostuff.COCOStuffSegmentation.__len__": [[103, 105], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cocostuff.COCOStuffSegmentation.pred_offset": [[106, 109], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cocostuff.COCOStuffSegmentation.classes": [[110, 118], ["IDNAME.items", "cls_names.append"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Category names.\"\"\"", "\n", "cls_names", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "IDNAME", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "MAPPING", ":", "\n", "                ", "cls_names", ".", "append", "(", "v", ")", "\n", "", "", "return", "cls_names", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cocostuff.encode_label": [[119, 125], ["numpy.zeros_like", "enumerate"], "function", ["None"], ["", "", "def", "encode_label", "(", "labelmap", ")", ":", "\n", "#ret = np.ones_like(labelmap) * 255", "\n", "    ", "ret", "=", "np", ".", "zeros_like", "(", "labelmap", ")", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "MAPPING", ")", ":", "\n", "        ", "ret", "[", "labelmap", "==", "label", "]", "=", "idx", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cocostuff._get_cocostuff_pairs": [[126, 154], ["os.listdir", "os.path.join", "os.path.join", "os.path.splitext", "filename.endswith", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join.replace", "os.path.isfile", "img_paths.append", "mask_paths.append", "logging.info"], "function", ["None"], ["", "def", "_get_cocostuff_pairs", "(", "folder", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "img_paths", "=", "[", "]", "\n", "mask_paths", "=", "[", "]", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'train/image'", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'train/label'", ")", "\n", "", "elif", "mode", "==", "\"val\"", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'val/image'", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'val/label'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "mode", "==", "\"test\"", "\n", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'val/image'", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'val/label'", ")", "\n", "\n", "", "for", "filename", "in", "os", ".", "listdir", "(", "img_folder", ")", ":", "\n", "        ", "basename", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "if", "filename", ".", "endswith", "(", "\".png\"", ")", ":", "\n", "            ", "imgpath", "=", "os", ".", "path", ".", "join", "(", "img_folder", ",", "filename", ")", "\n", "#maskname = basename + '_mask.png'", "\n", "#maskpath = os.path.join(mask_folder, maskname)", "\n", "maskpath", "=", "imgpath", ".", "replace", "(", "img_folder", ",", "mask_folder", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "                ", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "mask_paths", ".", "append", "(", "maskpath", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "'cannot find the mask:'", ",", "maskpath", ")", "\n", "\n", "", "", "", "return", "img_paths", ",", "mask_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cityscapes.CitySegmentation.__init__": [[15, 31], ["seg_data_base.SegmentationDataset.__init__", "os.path.exists", "cityscapes._get_city_pairs", "numpy.array", "numpy.array().astype", "len", "len", "len", "RuntimeError", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass._get_city_pairs"], ["def", "__init__", "(", "self", ",", "root", "=", "'datasets/cityscapes'", ",", "split", "=", "'train'", ",", "mode", "=", "None", ",", "transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CitySegmentation", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ",", "mode", ",", "transform", ",", "**", "kwargs", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "root", ")", ",", "\"Please put dataset in {SEG_ROOT}/datasets/cityscapes\"", "\n", "self", ".", "images", ",", "self", ".", "mask_paths", "=", "_get_city_pairs", "(", "self", ".", "root", ",", "self", ".", "split", ")", "\n", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "mask_paths", ")", ")", "\n", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Found 0 images in subfolders of:\"", "+", "root", "+", "\"\\n\"", ")", "\n", "", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "\n", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", "]", "\n", "self", ".", "_key", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "-", "1", ",", "-", "1", ",", "0", ",", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "2", ",", "3", ",", "4", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "5", ",", "-", "1", ",", "6", ",", "7", ",", "8", ",", "9", ",", "\n", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "\n", "-", "1", ",", "-", "1", ",", "16", ",", "17", ",", "18", "]", ")", "\n", "self", ".", "_mapping", "=", "np", ".", "array", "(", "range", "(", "-", "1", ",", "len", "(", "self", ".", "_key", ")", "-", "1", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cityscapes.CitySegmentation._class_to_index": [[32, 39], ["numpy.unique", "numpy.digitize", "cityscapes.CitySegmentation._key[].reshape", "mask.ravel"], "methods", ["None"], ["", "def", "_class_to_index", "(", "self", ",", "mask", ")", ":", "\n", "# assert the value", "\n", "        ", "values", "=", "np", ".", "unique", "(", "mask", ")", "\n", "for", "value", "in", "values", ":", "\n", "            ", "assert", "(", "value", "in", "self", ".", "_mapping", ")", "\n", "", "index", "=", "np", ".", "digitize", "(", "mask", ".", "ravel", "(", ")", ",", "self", ".", "_mapping", ",", "right", "=", "True", ")", "\n", "return", "self", ".", "_key", "[", "index", "]", ".", "reshape", "(", "mask", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cityscapes.CitySegmentation.__getitem__": [[40, 57], ["PIL.Image.open().convert", "PIL.Image.open", "cityscapes.CitySegmentation._sync_transform", "cityscapes.CitySegmentation.transform", "os.path.basename", "PIL.Image.open", "cityscapes.CitySegmentation.transform", "os.path.basename", "cityscapes.CitySegmentation._val_sync_transform", "cityscapes.CitySegmentation._img_transform", "cityscapes.CitySegmentation._mask_transform"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._sync_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._val_sync_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._mask_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "", "mask", "=", "Image", ".", "open", "(", "self", ".", "mask_paths", "[", "index", "]", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "mask", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cityscapes.CitySegmentation._mask_transform": [[58, 61], ["cityscapes.CitySegmentation._class_to_index", "torch.LongTensor", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._class_to_index"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "target", "=", "self", ".", "_class_to_index", "(", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "return", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "target", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cityscapes.CitySegmentation.__len__": [[62, 64], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cityscapes.CitySegmentation.pred_offset": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cityscapes.CitySegmentation.classes": [[69, 75], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Category names.\"\"\"", "\n", "return", "(", "'road'", ",", "'sidewalk'", ",", "'building'", ",", "'wall'", ",", "'fence'", ",", "'pole'", ",", "'traffic light'", ",", "\n", "'traffic sign'", ",", "'vegetation'", ",", "'terrain'", ",", "'sky'", ",", "'person'", ",", "'rider'", ",", "'car'", ",", "\n", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "'bicycle'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.cityscapes._get_city_pairs": [[77, 115], ["os.walk", "logging.info", "os.path.join", "os.path.join", "cityscapes._get_city_pairs.get_path_pairs"], "function", ["None"], ["", "", "def", "_get_city_pairs", "(", "folder", ",", "split", "=", "'train'", ")", ":", "\n", "    ", "def", "get_path_pairs", "(", "img_folder", ",", "mask_folder", ")", ":", "\n", "        ", "img_paths", "=", "[", "]", "\n", "mask_paths", "=", "[", "]", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "img_folder", ")", ":", "\n", "            ", "for", "filename", "in", "files", ":", "\n", "                ", "if", "filename", ".", "startswith", "(", "'._'", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "filename", ".", "endswith", "(", "'.png'", ")", ":", "\n", "                    ", "imgpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "foldername", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "imgpath", ")", ")", "\n", "maskname", "=", "filename", ".", "replace", "(", "'leftImg8bit'", ",", "'gtFine_labelIds'", ")", "\n", "maskpath", "=", "os", ".", "path", ".", "join", "(", "mask_folder", ",", "foldername", ",", "maskname", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "imgpath", ")", "and", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "                        ", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "mask_paths", ".", "append", "(", "maskpath", ")", "\n", "", "else", ":", "\n", "                        ", "logging", ".", "info", "(", "'cannot find the mask or image:'", ",", "imgpath", ",", "maskpath", ")", "\n", "", "", "", "", "logging", ".", "info", "(", "'Found {} images in the folder {}'", ".", "format", "(", "len", "(", "img_paths", ")", ",", "img_folder", ")", ")", "\n", "return", "img_paths", ",", "mask_paths", "\n", "\n", "", "if", "split", "in", "(", "'train'", ",", "'val'", ")", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'leftImg8bit/'", "+", "split", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'gtFine/'", "+", "split", ")", "\n", "img_paths", ",", "mask_paths", "=", "get_path_pairs", "(", "img_folder", ",", "mask_folder", ")", "\n", "return", "img_paths", ",", "mask_paths", "\n", "", "else", ":", "\n", "        ", "assert", "split", "==", "'trainval'", "\n", "logging", ".", "info", "(", "'trainval set'", ")", "\n", "train_img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'leftImg8bit/train'", ")", "\n", "train_mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'gtFine/train'", ")", "\n", "val_img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'leftImg8bit/val'", ")", "\n", "val_mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'gtFine/val'", ")", "\n", "train_img_paths", ",", "train_mask_paths", "=", "get_path_pairs", "(", "train_img_folder", ",", "train_mask_folder", ")", "\n", "val_img_paths", ",", "val_mask_paths", "=", "get_path_pairs", "(", "val_img_folder", ",", "val_mask_folder", ")", "\n", "img_paths", "=", "train_img_paths", "+", "val_img_paths", "\n", "mask_paths", "=", "train_mask_paths", "+", "val_mask_paths", "\n", "", "return", "img_paths", ",", "mask_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.stanford2d3d.Stanford2d3dSegmentation.__init__": [[26, 41], ["segmentron.data.dataloader.seg_data_base.SegmentationDataset.__init__", "os.path.join", "os.path.exists", "stanford2d3d._get_stanford2d3d_pairs", "logging.info", "numpy.load", "numpy.array", "len", "len", "len", "RuntimeError", "open", "open", "json.load", "len", "os.path.join", "os.path.join", "name.split", "json.load"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.stanford2d3d._get_stanford2d3d_pairs"], ["def", "__init__", "(", "self", ",", "root", "=", "'datasets/stanford2d3d'", ",", "split", "=", "'test'", ",", "mode", "=", "None", ",", "transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Stanford2d3dSegmentation", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ",", "mode", ",", "transform", ",", "**", "kwargs", ")", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "BASE_DIR", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", ",", "\"Please put the data in {SEG_ROOT}/datasets/\"", "\n", "self", ".", "images", ",", "self", ".", "masks", "=", "_get_stanford2d3d_pairs", "(", "root", ",", "self", ".", "fold", ",", "split", ")", "\n", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "masks", ")", ")", "\n", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Found 0 images in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "root", ",", "split", ")", ")", ")", "\n", "", "logging", ".", "info", "(", "'Found {} images in the folder {}'", ".", "format", "(", "len", "(", "self", ".", "images", ")", ",", "os", ".", "path", ".", "join", "(", "root", ",", "split", ")", ")", ")", "\n", "with", "open", "(", "'semantic_labels.json'", ")", "as", "f", ":", "\n", "            ", "id2name", "=", "[", "name", ".", "split", "(", "'_'", ")", "[", "0", "]", "for", "name", "in", "json", ".", "load", "(", "f", ")", "]", "+", "[", "'<UNK>'", "]", "\n", "", "with", "open", "(", "'name2label.json'", ")", "as", "f", ":", "\n", "            ", "name2id", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "colors", "=", "np", ".", "load", "(", "'colors.npy'", ")", "\n", "self", ".", "id2label", "=", "np", ".", "array", "(", "[", "name2id", "[", "name", "]", "for", "name", "in", "id2name", "]", ",", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.stanford2d3d.Stanford2d3dSegmentation._mask_transform": [[42, 44], ["torch.LongTensor", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.stanford2d3d.Stanford2d3dSegmentation._val_sync_transform_resize": [[45, 53], ["img.resize.resize.resize", "mask.resize.resize.resize", "stanford2d3d.Stanford2d3dSegmentation._img_transform", "stanford2d3d.Stanford2d3dSegmentation._mask_transform"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._mask_transform"], ["", "def", "_val_sync_transform_resize", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "short_size", "=", "self", ".", "crop_size", "\n", "img", "=", "img", ".", "resize", "(", "short_size", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "short_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# final transform", "\n", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.stanford2d3d.Stanford2d3dSegmentation.__getitem__": [[54, 75], ["PIL.Image.open().convert", "PIL.Image.open", "stanford2d3d._color2id", "stanford2d3d.Stanford2d3dSegmentation._img_transform", "stanford2d3d.Stanford2d3dSegmentation._sync_transform", "stanford2d3d.Stanford2d3dSegmentation.transform", "os.path.basename", "PIL.Image.open", "stanford2d3d.Stanford2d3dSegmentation.transform", "os.path.basename", "stanford2d3d.Stanford2d3dSegmentation._val_sync_transform_resize", "stanford2d3d.Stanford2d3dSegmentation._val_sync_transform_resize"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.stanford2d3d._color2id", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._sync_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._val_sync_transform_resize", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._val_sync_transform_resize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform", "(", "img", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "", "mask", "=", "Image", ".", "open", "(", "self", ".", "masks", "[", "index", "]", ")", "\n", "mask", "=", "_color2id", "(", "mask", ",", "img", ",", "self", ".", "id2label", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ",", "resize", "=", "True", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform_resize", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "img", ",", "mask", "=", "self", ".", "_val_sync_transform_resize", "(", "img", ",", "mask", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "mask", "[", "mask", "==", "255", "]", "=", "-", "1", "\n", "return", "img", ",", "mask", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.stanford2d3d.Stanford2d3dSegmentation.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.stanford2d3d.Stanford2d3dSegmentation.pred_offset": [[79, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.stanford2d3d.Stanford2d3dSegmentation.classes": [[83, 89], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Category names.\"\"\"", "\n", "return", "(", "'beam'", ",", "'board'", ",", "'bookcase'", ",", "'ceiling'", ",", "'chair'", ",", "\n", "'clutter'", ",", "'column'", ",", "'door'", ",", "'floor'", ",", "'sofa'", ",", "\n", "'table'", ",", "'wall'", ",", "'window'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.stanford2d3d._get_stanford2d3d_pairs": [[90, 104], ["sorted", "glob.glob", "imgpath.replace", "os.path.join"], "function", ["None"], ["", "", "def", "_get_stanford2d3d_pairs", "(", "folder", ",", "fold", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "'''image is jpg, label is png'''", "\n", "img_paths", "=", "[", "]", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "area_ids", "=", "__FOLD__", "[", "'{}_{}'", ".", "format", "(", "fold", ",", "mode", ")", "]", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "area_ids", "=", "__FOLD__", "[", "'{}_{}'", ".", "format", "(", "fold", ",", "mode", ")", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "for", "a", "in", "area_ids", ":", "\n", "        ", "img_paths", "+=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'{}/data/rgb/*_rgb.png'", ".", "format", "(", "a", ")", ")", ")", "\n", "", "img_paths", "=", "sorted", "(", "img_paths", ")", "\n", "mask_paths", "=", "[", "imgpath", ".", "replace", "(", "'rgb'", ",", "'semantic'", ")", "for", "imgpath", "in", "img_paths", "]", "\n", "return", "img_paths", ",", "mask_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.stanford2d3d._color2id": [[105, 113], ["numpy.array", "PIL.Image.fromarray", "numpy.array().sum", "numpy.array"], "function", ["None"], ["", "def", "_color2id", "(", "mask", ",", "img", ",", "id2label", ")", ":", "\n", "    ", "mask", "=", "np", ".", "array", "(", "mask", ",", "np", ".", "int32", ")", "\n", "unk", "=", "(", "mask", "[", "...", ",", "0", "]", "!=", "0", ")", "\n", "mask", "=", "id2label", "[", "mask", "[", "...", ",", "1", "]", "*", "256", "+", "mask", "[", "...", ",", "2", "]", "]", "\n", "mask", "[", "unk", "]", "=", "0", "\n", "mask", "[", "np", ".", "array", "(", "img", ",", "np", ".", "int8", ")", ".", "sum", "(", "2", ")", "==", "0", "]", "=", "0", "\n", "mask", "-=", "1", "\n", "return", "Image", ".", "fromarray", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation.__init__": [[18, 35], ["segmentron.data.dataloader.seg_data_base.SegmentationDataset.__init__", "os.path.exists", "densepass._get_city_pairs", "numpy.array", "numpy.array().astype", "len", "len", "len", "RuntimeError", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass._get_city_pairs"], ["def", "__init__", "(", "self", ",", "root", "=", "'datasets/DensePASS'", ",", "split", "=", "'val'", ",", "mode", "=", "None", ",", "transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DensePASSSegmentation", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ",", "mode", ",", "transform", ",", "**", "kwargs", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "root", ")", ",", "\"Please put dataset in {SEG_ROOT}/datasets/DensePASS_train_pseudo_val\"", "\n", "self", ".", "images", ",", "self", ".", "mask_paths", "=", "_get_city_pairs", "(", "self", ".", "root", ",", "self", ".", "split", ")", "\n", "self", ".", "crop_size", "=", "[", "400", ",", "2048", "]", "\n", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "mask_paths", ")", ")", "\n", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Found 0 images in subfolders of:\"", "+", "root", "+", "\"\\n\"", ")", "\n", "", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "\n", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", "]", "\n", "self", ".", "_key", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "-", "1", ",", "-", "1", ",", "0", ",", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "2", ",", "3", ",", "4", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "5", ",", "-", "1", ",", "6", ",", "7", ",", "8", ",", "9", ",", "\n", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "\n", "-", "1", ",", "-", "1", ",", "16", ",", "17", ",", "18", "]", ")", "\n", "self", ".", "_mapping", "=", "np", ".", "array", "(", "range", "(", "-", "1", ",", "len", "(", "self", ".", "_key", ")", "-", "1", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._class_to_index": [[36, 42], ["numpy.unique", "numpy.digitize", "densepass.DensePASSSegmentation._key[].reshape", "mask.ravel"], "methods", ["None"], ["", "def", "_class_to_index", "(", "self", ",", "mask", ")", ":", "\n", "        ", "values", "=", "np", ".", "unique", "(", "mask", ")", "\n", "for", "value", "in", "values", ":", "\n", "            ", "assert", "(", "value", "in", "self", ".", "_mapping", ")", "\n", "", "index", "=", "np", ".", "digitize", "(", "mask", ".", "ravel", "(", ")", ",", "self", ".", "_mapping", ",", "right", "=", "True", ")", "\n", "return", "self", ".", "_key", "[", "index", "]", ".", "reshape", "(", "mask", ".", "shape", ")", "\n", "", "def", "_val_sync_transform_resize", "(", "self", ",", "img", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._val_sync_transform_resize": [[42, 51], ["random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "densepass.DensePASSSegmentation._img_transform", "densepass.DensePASSSegmentation._mask_transform"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._mask_transform"], ["", "def", "_val_sync_transform_resize", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "crop_size", "[", "1", "]", ",", "y1", "+", "self", ".", "crop_size", "[", "0", "]", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "crop_size", "[", "1", "]", ",", "y1", "+", "self", ".", "crop_size", "[", "0", "]", ")", ")", "\n", "\n", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation.__getitem__": [[52, 70], ["PIL.Image.open().convert", "PIL.Image.open", "densepass.DensePASSSegmentation._sync_transform", "densepass.DensePASSSegmentation.transform", "os.path.basename", "PIL.Image.open", "densepass.DensePASSSegmentation.transform", "os.path.basename", "densepass.DensePASSSegmentation._val_sync_transform_resize", "densepass.DensePASSSegmentation._val_sync_transform_resize"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._sync_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._val_sync_transform_resize", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._val_sync_transform_resize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "", "mask", "=", "Image", ".", "open", "(", "self", ".", "mask_paths", "[", "index", "]", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ",", "resize", "=", "True", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform_resize", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "img", ",", "mask", "=", "self", ".", "_val_sync_transform_resize", "(", "img", ",", "mask", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "mask", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation._mask_transform": [[71, 73], ["torch.LongTensor", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation.__len__": [[74, 76], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation.pred_offset": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass.DensePASSSegmentation.classes": [[81, 87], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Category names.\"\"\"", "\n", "return", "(", "'road'", ",", "'sidewalk'", ",", "'building'", ",", "'wall'", ",", "'fence'", ",", "'pole'", ",", "'traffic light'", ",", "\n", "'traffic sign'", ",", "'vegetation'", ",", "'terrain'", ",", "'sky'", ",", "'person'", ",", "'rider'", ",", "'car'", ",", "\n", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "'bicycle'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.densepass._get_city_pairs": [[89, 123], ["os.walk", "logging.info", "os.path.join", "os.path.join", "densepass._get_city_pairs.get_path_pairs"], "function", ["None"], ["", "", "def", "_get_city_pairs", "(", "folder", ",", "split", "=", "'train'", ")", ":", "\n", "    ", "def", "get_path_pairs", "(", "img_folder", ",", "mask_folder", ")", ":", "\n", "        ", "img_paths", "=", "[", "]", "\n", "mask_paths", "=", "[", "]", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "img_folder", ")", ":", "\n", "            ", "for", "filename", "in", "files", ":", "\n", "                ", "if", "filename", ".", "startswith", "(", "'._'", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "filename", ".", "endswith", "(", "'.png'", ")", ":", "\n", "                    ", "imgpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "foldername", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "imgpath", ")", ")", "\n", "maskname", "=", "filename", ".", "replace", "(", "'_.png'", ",", "'_labelTrainIds.png'", ")", "\n", "maskpath", "=", "os", ".", "path", ".", "join", "(", "mask_folder", ",", "foldername", ",", "maskname", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "imgpath", ")", "and", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "                        ", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "mask_paths", ".", "append", "(", "maskpath", ")", "\n", "", "else", ":", "\n", "                        ", "logging", ".", "info", "(", "'cannot find the mask or image:'", ",", "imgpath", ",", "maskpath", ")", "\n", "", "", "", "", "logging", ".", "info", "(", "'Found {} images in the folder {}'", ".", "format", "(", "len", "(", "img_paths", ")", ",", "img_folder", ")", ")", "\n", "return", "img_paths", ",", "mask_paths", "\n", "\n", "", "if", "split", "in", "(", "'train'", ",", "'val'", ")", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'leftImg8bit/'", "+", "split", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'gtFine/'", "+", "split", ")", "\n", "img_paths", ",", "mask_paths", "=", "get_path_pairs", "(", "img_folder", ",", "mask_folder", ")", "\n", "return", "img_paths", ",", "mask_paths", "\n", "", "else", ":", "\n", "        ", "assert", "split", "==", "'test'", "\n", "logging", ".", "info", "(", "'test set, but only val set'", ")", "\n", "val_img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'leftImg8bit/val'", ")", "\n", "val_mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'gtFine/val'", ")", "\n", "img_paths", ",", "mask_paths", "=", "get_path_pairs", "(", "val_img_folder", ",", "val_mask_folder", ")", "\n", "\n", "", "return", "img_paths", ",", "mask_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset.__init__": [[17, 26], ["object.__init__", "os.path.join", "seg_data_base.SegmentationDataset.to_tuple", "seg_data_base.SegmentationDataset._get_color_jitter"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset.to_tuple", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._get_color_jitter"], ["def", "__init__", "(", "self", ",", "root", ",", "split", ",", "mode", ",", "transform", ",", "base_size", "=", "520", ",", "crop_size", "=", "480", ")", ":", "\n", "        ", "super", "(", "SegmentationDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_PATH", ",", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "mode", "=", "mode", "if", "mode", "is", "not", "None", "else", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "self", ".", "to_tuple", "(", "crop_size", ")", "\n", "self", ".", "color_jitter", "=", "self", ".", "_get_color_jitter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset.to_tuple": [[27, 34], ["isinstance", "tuple", "isinstance", "tuple", "ValueError", "type"], "methods", ["None"], ["", "def", "to_tuple", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "tuple", "(", "size", ")", "\n", "", "elif", "isinstance", "(", "size", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "return", "tuple", "(", "(", "size", ",", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupport datatype: {}'", ".", "format", "(", "type", "(", "size", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._get_color_jitter": [[35, 47], ["isinstance", "torchvision.transforms.ColorJitter", "len", "float"], "methods", ["None"], ["", "", "def", "_get_color_jitter", "(", "self", ")", ":", "\n", "        ", "color_jitter", "=", "cfg", ".", "AUG", ".", "COLOR_JITTER", "\n", "if", "color_jitter", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "isinstance", "(", "color_jitter", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# color jitter should be a 3-tuple/list if spec brightness/contrast/saturation", "\n", "# or 4 if also augmenting hue", "\n", "            ", "assert", "len", "(", "color_jitter", ")", "in", "(", "3", ",", "4", ")", "\n", "", "else", ":", "\n", "# if it's a scalar, duplicate for brightness, contrast, and saturation, no hue", "\n", "            ", "color_jitter", "=", "(", "float", "(", "color_jitter", ")", ",", ")", "*", "3", "\n", "", "return", "torchvision", ".", "transforms", ".", "ColorJitter", "(", "*", "color_jitter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._val_sync_transform": [[48, 70], ["min", "img.crop.crop.resize", "mask.crop.crop.resize", "int", "int", "img.crop.crop.crop", "mask.crop.crop.crop", "int", "int", "round", "round", "seg_data_base.SegmentationDataset._img_transform", "seg_data_base.SegmentationDataset._mask_transform"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._mask_transform"], ["", "def", "_val_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "outsize", "=", "self", ".", "crop_size", "\n", "short_size", "=", "min", "(", "outsize", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "w", ">", "h", ":", "\n", "            ", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "            ", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# center crop", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "outsize", "[", "1", "]", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "outsize", "[", "0", "]", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "outsize", "[", "1", "]", ",", "y1", "+", "outsize", "[", "0", "]", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "outsize", "[", "1", "]", ",", "y1", "+", "outsize", "[", "0", "]", ")", ")", "\n", "\n", "# final transform", "\n", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._sync_transform": [[71, 122], ["PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.transpose", "PIL.ImageOps.expand.transpose", "random.randint", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "random.randint", "random.randint", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.filter", "seg_data_base.SegmentationDataset.color_jitter", "seg_data_base.SegmentationDataset._img_transform", "seg_data_base.SegmentationDataset._mask_transform", "random.random", "int", "int", "int", "int", "min", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "random.random", "random.random", "PIL.ImageFilter.GaussianBlur"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._mask_transform"], ["", "def", "_sync_transform", "(", "self", ",", "img", ",", "mask", ",", "resize", "=", "False", ")", ":", "\n", "# first resize image to fix size", "\n", "        ", "if", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# random mirror", "\n", "", "if", "cfg", ".", "AUG", ".", "MIRROR", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "# random crop", "\n", "", "if", "cfg", ".", "AUG", ".", "CROP", ":", "\n", "            ", "crop_size", "=", "self", ".", "crop_size", "\n", "# random scale (short edge)", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "self", ".", "base_size", "*", "0.5", ")", ",", "int", "(", "self", ".", "base_size", "*", "2.0", ")", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "h", ">", "w", ":", "\n", "                ", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "short_size", "<", "min", "(", "crop_size", ")", ":", "\n", "                ", "padh", "=", "crop_size", "[", "0", "]", "-", "oh", "if", "oh", "<", "crop_size", "[", "0", "]", "else", "0", "\n", "padw", "=", "crop_size", "[", "1", "]", "-", "ow", "if", "ow", "<", "crop_size", "[", "1", "]", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "-", "1", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_size", "[", "1", "]", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_size", "[", "0", "]", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", "[", "1", "]", ",", "y1", "+", "crop_size", "[", "0", "]", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", "[", "1", "]", ",", "y1", "+", "crop_size", "[", "0", "]", ")", ")", "\n", "\n", "# gaussian blur as in PSP", "\n", "", "if", "cfg", ".", "AUG", ".", "BLUR_PROB", ">", "0", "and", "random", ".", "random", "(", ")", "<", "cfg", ".", "AUG", ".", "BLUR_PROB", ":", "\n", "            ", "radius", "=", "cfg", ".", "AUG", ".", "BLUR_RADIUS", "if", "cfg", ".", "AUG", ".", "BLUR_RADIUS", ">", "0", "else", "random", ".", "random", "(", ")", "\n", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "radius", ")", ")", "\n", "\n", "# color jitter", "\n", "", "if", "self", ".", "color_jitter", ":", "\n", "            ", "img", "=", "self", ".", "color_jitter", "(", "img", ")", "\n", "\n", "# final transform", "\n", "", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._img_transform": [[123, 125], ["numpy.array"], "methods", ["None"], ["", "def", "_img_transform", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset._mask_transform": [[126, 128], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset.num_class": [[129, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_class", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of categories.\"\"\"", "\n", "return", "self", ".", "NUM_CLASS", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.seg_data_base.SegmentationDataset.pred_offset": [[134, 137], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.__init__.get_segmentation_dataset": [[21, 24], ["name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.utils.gen_bar_updater": [[8, 18], ["torch.utils.model_zoo.tqdm", "torch.utils.model_zoo.tqdm.update"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.update"], ["def", "gen_bar_updater", "(", ")", ":", "\n", "    ", "pbar", "=", "tqdm", "(", "total", "=", "None", ")", "\n", "\n", "def", "bar_update", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "        ", "if", "pbar", ".", "total", "is", "None", "and", "total_size", ":", "\n", "            ", "pbar", ".", "total", "=", "total_size", "\n", "", "progress_bytes", "=", "count", "*", "block_size", "\n", "pbar", ".", "update", "(", "progress_bytes", "-", "pbar", ".", "n", ")", "\n", "\n", "", "return", "bar_update", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.utils.check_integrity": [[19, 33], ["hashlib.md5", "hashlib.md5.hexdigest", "os.path.isfile", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.score.SegmentationMetric.update"], ["", "def", "check_integrity", "(", "fpath", ",", "md5", "=", "None", ")", ":", "\n", "    ", "if", "md5", "is", "None", ":", "\n", "        ", "return", "True", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "        ", "return", "False", "\n", "", "md5o", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "# read in 1MB chunks", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "1024", "*", "1024", ")", ",", "b''", ")", ":", "\n", "            ", "md5o", ".", "update", "(", "chunk", ")", "\n", "", "", "md5c", "=", "md5o", ".", "hexdigest", "(", ")", "\n", "if", "md5c", "!=", "md5", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.utils.makedir_exist_ok": [[34, 42], ["os.makedirs"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.utils.filesystem.makedirs"], ["", "def", "makedir_exist_ok", "(", "dirpath", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.utils.download_url": [[43, 65], ["os.path.expanduser", "os.path.join", "utils.makedir_exist_ok", "os.path.basename", "os.path.isfile", "utils.check_integrity", "print", "print", "six.moves.urllib.request.urlretrieve", "utils.gen_bar_updater", "url.replace.replace", "print", "six.moves.urllib.request.urlretrieve", "utils.gen_bar_updater"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.utils.makedir_exist_ok", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.utils.check_integrity", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.utils.gen_bar_updater", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.utils.gen_bar_updater"], ["", "", "", "def", "download_url", "(", "url", ",", "root", ",", "filename", "=", "None", ",", "md5", "=", "None", ")", ":", "\n", "    ", "\"\"\"Download a file from a url and place it in root.\"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "if", "not", "filename", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "makedir_exist_ok", "(", "root", ")", "\n", "\n", "# downloads file", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fpath", ")", "and", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "print", "(", "'Using downloaded and verified file: '", "+", "fpath", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "'Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "fpath", ",", "reporthook", "=", "gen_bar_updater", "(", ")", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "if", "url", "[", ":", "5", "]", "==", "'https'", ":", "\n", "                ", "url", "=", "url", ".", "replace", "(", "'https:'", ",", "'http:'", ")", "\n", "print", "(", "'Failed download. Trying https -> http instead.'", "\n", "' Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "fpath", ",", "reporthook", "=", "gen_bar_updater", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.utils.download_extract": [[66, 70], ["utils.download_url", "tarfile.open", "tar.extractall", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.dataloader.utils.download_url"], ["", "", "", "", "def", "download_extract", "(", "url", ",", "root", ",", "filename", ",", "md5", ")", ":", "\n", "    ", "download_url", "(", "url", ",", "root", ",", "filename", ",", "md5", ")", "\n", "with", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ",", "\"r\"", ")", "as", "tar", ":", "\n", "        ", "tar", ".", "extractall", "(", "path", "=", "root", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.StableBCELoss.__init__": [[131, 133], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StableBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.StableBCELoss.forward": [[134, 138], ["loss.mean", "input.abs", "input.clamp", "neg_abs.exp"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "neg_abs", "=", "-", "input", ".", "abs", "(", ")", "\n", "loss", "=", "input", ".", "clamp", "(", "min", "=", "0", ")", "-", "input", "*", "target", "+", "(", "1", "+", "neg_abs", ".", "exp", "(", ")", ")", ".", "log", "(", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_grad": [[20, 33], ["len", "gt_sorted.sum", "gt_sorted.float().cumsum", "gt_sorted.float"], "function", ["None"], ["", "def", "lovasz_grad", "(", "gt_sorted", ")", ":", "\n", "    ", "\"\"\"\n    Computes gradient of the Lovasz extension w.r.t sorted errors\n    See Alg. 1 in paper\n    \"\"\"", "\n", "p", "=", "len", "(", "gt_sorted", ")", "\n", "gts", "=", "gt_sorted", ".", "sum", "(", ")", "\n", "intersection", "=", "gts", "-", "gt_sorted", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "union", "=", "gts", "+", "(", "1", "-", "gt_sorted", ")", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "jaccard", "=", "1.", "-", "intersection", "/", "union", "\n", "if", "p", ">", "1", ":", "# cover 1-pixel case", "\n", "        ", "jaccard", "[", "1", ":", "p", "]", "=", "jaccard", "[", "1", ":", "p", "]", "-", "jaccard", "[", "0", ":", "-", "1", "]", "\n", "", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.iou_binary": [[35, 53], ["zip", "lovasz_losses.mean", "ious.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean"], ["", "def", "iou_binary", "(", "preds", ",", "labels", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    IoU for foreground class\n    binary: 1 foreground, 0 background\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "intersection", "=", "(", "(", "label", "==", "1", ")", "&", "(", "pred", "==", "1", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "1", ")", "|", "(", "(", "pred", "==", "1", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "            ", "iou", "=", "EMPTY", "\n", "", "else", ":", "\n", "            ", "iou", "=", "float", "(", "intersection", ")", "/", "float", "(", "union", ")", "\n", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "iou", "=", "mean", "(", "ious", ")", "# mean accross images if per_image", "\n", "return", "100", "*", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.iou": [[55, 75], ["zip", "range", "ious.append", "lovasz_losses.mean", "numpy.array", "zip", "iou.append", "iou.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean"], ["", "def", "iou", "(", "preds", ",", "labels", ",", "C", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Array of IoU for each (non ignored) class\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "iou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "            ", "if", "i", "!=", "ignore", ":", "# The ignored label is sometimes among predicted classes (ENet - CityScapes)", "\n", "                ", "intersection", "=", "(", "(", "label", "==", "i", ")", "&", "(", "pred", "==", "i", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "i", ")", "|", "(", "(", "pred", "==", "i", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "                    ", "iou", ".", "append", "(", "EMPTY", ")", "\n", "", "else", ":", "\n", "                    ", "iou", ".", "append", "(", "float", "(", "intersection", ")", "/", "float", "(", "union", ")", ")", "\n", "", "", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "ious", "=", "[", "mean", "(", "iou", ")", "for", "iou", "in", "zip", "(", "*", "ious", ")", "]", "# mean accross images if per_image", "\n", "return", "100", "*", "np", ".", "array", "(", "ious", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_hinge": [[79, 93], ["lovasz_losses.mean", "lovasz_losses.lovasz_hinge_flat", "lovasz_losses.lovasz_hinge_flat", "lovasz_losses.flatten_binary_scores", "zip", "lovasz_losses.flatten_binary_scores", "log.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_hinge_flat", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_hinge_flat", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.flatten_binary_scores", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.flatten_binary_scores"], ["", "def", "lovasz_hinge", "(", "logits", ",", "labels", ",", "per_image", "=", "True", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      per_image: compute the loss per image instead of per batch\n      ignore: void class id\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "log", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ")", "\n", "for", "log", ",", "lab", "in", "zip", "(", "logits", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_hinge_flat": [[95, 113], ["torch.sort", "torch.sort", "lovasz_losses.lovasz_grad", "torch.dot", "torch.dot", "len", "torch.relu", "torch.autograd.Variable", "logits.sum", "labels.float", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_grad"], ["", "def", "lovasz_hinge_flat", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [P] Variable, logits at each prediction (between -\\infty and +\\infty)\n      labels: [P] Tensor, binary ground truth labels (0 or 1)\n      ignore: label to ignore\n    \"\"\"", "\n", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "logits", ".", "sum", "(", ")", "*", "0.", "\n", "", "signs", "=", "2.", "*", "labels", ".", "float", "(", ")", "-", "1.", "\n", "errors", "=", "(", "1.", "-", "logits", "*", "Variable", "(", "signs", ")", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "gt_sorted", "=", "labels", "[", "perm", "]", "\n", "grad", "=", "lovasz_grad", "(", "gt_sorted", ")", "\n", "loss", "=", "torch", ".", "dot", "(", "F", ".", "relu", "(", "errors_sorted", ")", ",", "Variable", "(", "grad", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.flatten_binary_scores": [[115, 128], ["scores.view.view", "labels.view.view"], "function", ["None"], ["", "def", "flatten_binary_scores", "(", "scores", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch (binary case)\n    Remove labels equal to 'ignore'\n    \"\"\"", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "scores", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vscores", "=", "scores", "[", "valid", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vscores", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.binary_xloss": [[140, 150], ["lovasz_losses.flatten_binary_scores", "lovasz_losses.StableBCELoss", "torch.autograd.Variable", "labels.float"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.flatten_binary_scores"], ["", "", "def", "binary_xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Cross entropy loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      ignore: void class id\n    \"\"\"", "\n", "logits", ",", "labels", "=", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", "\n", "loss", "=", "StableBCELoss", "(", ")", "(", "logits", ",", "Variable", "(", "labels", ".", "float", "(", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_softmax": [[155, 171], ["lovasz_losses.mean", "lovasz_losses.lovasz_softmax_flat", "lovasz_losses.lovasz_softmax_flat", "lovasz_losses.flatten_probas", "zip", "lovasz_losses.flatten_probas", "prob.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_softmax_flat", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_softmax_flat", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.flatten_probas", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.flatten_probas"], ["", "def", "lovasz_softmax", "(", "probas", ",", "labels", ",", "classes", "=", "'present'", ",", "per_image", "=", "False", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [B, C, H, W] Variable, class probabilities at each prediction (between 0 and 1).\n              Interpreted as binary (sigmoid) output with outputs of size [B, H, W].\n      labels: [B, H, W] Tensor, ground truth labels (between 0 and C - 1)\n      classes: 'all' for all, 'present' for classes present in labels, or a list of classes to average.\n      per_image: compute the loss per image instead of per batch\n      ignore: void class labels\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_softmax_flat", "(", "*", "flatten_probas", "(", "prob", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ",", "classes", "=", "classes", ")", "\n", "for", "prob", ",", "lab", "in", "zip", "(", "probas", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_softmax_flat", "(", "*", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", ")", ",", "classes", "=", "classes", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_softmax_flat": [[173, 202], ["probas.size", "lovasz_losses.mean", "probas.numel", "list", "torch.sort", "torch.sort", "losses.append", "range", "torch.dot", "torch.dot", "fg.sum", "len", "ValueError", "torch.autograd.Variable", "torch.autograd.Variable", "lovasz_losses.lovasz_grad"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_grad"], ["", "def", "lovasz_softmax_flat", "(", "probas", ",", "labels", ",", "classes", "=", "'present'", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [P, C] Variable, class probabilities at each prediction (between 0 and 1)\n      labels: [P] Tensor, ground truth labels (between 0 and C - 1)\n      classes: 'all' for all, 'present' for classes present in labels, or a list of classes to average.\n    \"\"\"", "\n", "if", "probas", ".", "numel", "(", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "probas", "*", "0.", "\n", "", "C", "=", "probas", ".", "size", "(", "1", ")", "\n", "losses", "=", "[", "]", "\n", "class_to_sum", "=", "list", "(", "range", "(", "C", ")", ")", "if", "classes", "in", "[", "'all'", ",", "'present'", "]", "else", "classes", "\n", "for", "c", "in", "class_to_sum", ":", "\n", "        ", "fg", "=", "(", "labels", "==", "c", ")", ".", "float", "(", ")", "# foreground for class c", "\n", "if", "classes", "==", "'present'", "and", "fg", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "C", "==", "1", ":", "\n", "            ", "if", "len", "(", "classes", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'Sigmoid output possible only with 1 class'", ")", "\n", "", "class_pred", "=", "probas", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "class_pred", "=", "probas", "[", ":", ",", "c", "]", "\n", "", "errors", "=", "(", "Variable", "(", "fg", ")", "-", "class_pred", ")", ".", "abs", "(", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "fg_sorted", "=", "fg", "[", "perm", "]", "\n", "losses", ".", "append", "(", "torch", ".", "dot", "(", "errors_sorted", ",", "Variable", "(", "lovasz_grad", "(", "fg_sorted", ")", ")", ")", ")", "\n", "", "return", "mean", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.flatten_probas": [[204, 221], ["probas.view.size", "probas.view.permute().contiguous().view", "labels.view.view", "probas.view.dim", "probas.view.size", "probas.view.view", "probas.view.permute().contiguous", "valid.nonzero().squeeze", "probas.view.permute", "valid.nonzero"], "function", ["None"], ["", "def", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch\n    \"\"\"", "\n", "if", "probas", ".", "dim", "(", ")", "==", "3", ":", "\n", "# assumes output of a sigmoid layer", "\n", "        ", "B", ",", "H", ",", "W", "=", "probas", ".", "size", "(", ")", "\n", "probas", "=", "probas", ".", "view", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "", "B", ",", "C", ",", "H", ",", "W", "=", "probas", ".", "size", "(", ")", "\n", "probas", "=", "probas", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "C", ")", "# B * H * W, C = P, C", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "probas", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vprobas", "=", "probas", "[", "valid", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vprobas", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.xloss": [[223, 228], ["torch.cross_entropy", "torch.autograd.Variable"], "function", ["None"], ["", "def", "xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Cross entropy loss\n    \"\"\"", "\n", "return", "F", ".", "cross_entropy", "(", "logits", ",", "Variable", "(", "labels", ")", ",", "ignore_index", "=", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.isnan": [[231, 233], ["None"], "function", ["None"], ["", "def", "isnan", "(", "x", ")", ":", "\n", "    ", "return", "x", "!=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean": [[235, 254], ["iter", "enumerate", "ifilterfalse", "next", "ValueError", "lovasz_losses.iou"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.iou"], ["", "def", "mean", "(", "l", ",", "ignore_nan", "=", "False", ",", "empty", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    nanmean compatible with generators.\n    \"\"\"", "\n", "l", "=", "iter", "(", "l", ")", "\n", "if", "ignore_nan", ":", "\n", "        ", "l", "=", "ifilterfalse", "(", "isnan", ",", "l", ")", "\n", "", "try", ":", "\n", "        ", "n", "=", "1", "\n", "acc", "=", "next", "(", "l", ")", "\n", "", "except", "StopIteration", ":", "\n", "        ", "if", "empty", "==", "'raise'", ":", "\n", "            ", "raise", "ValueError", "(", "'Empty mean'", ")", "\n", "", "return", "empty", "\n", "", "for", "n", ",", "v", "in", "enumerate", "(", "l", ",", "2", ")", ":", "\n", "        ", "acc", "+=", "v", "\n", "", "if", "n", "==", "1", ":", "\n", "        ", "return", "acc", "\n", "", "return", "acc", "/", "n", "\n", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.TranslabLoss.__init__": [[15, 19], ["torch.CrossEntropyLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aux", "=", "True", ",", "aux_weight", "=", "0.2", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TranslabLoss", ",", "self", ")", ".", "__init__", "(", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.TranslabLoss._aux_forward": [[20, 28], ["tuple", "super().forward", "range", "len", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "\n", "loss", "=", "super", "(", "TranslabLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "super", "(", "TranslabLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.TranslabLoss._multiple_forward": [[29, 35], ["tuple", "super().forward", "range", "len", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "_multiple_forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "loss", "=", "super", "(", "TranslabLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "loss", "+=", "super", "(", "TranslabLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.TranslabLoss.forward": [[36, 42], ["tuple", "tuple", "dict", "list", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "\n", "loss", "=", "dict", "(", "loss", "=", "super", "(", "TranslabLoss", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.MixSoftmaxCrossEntropyLoss.__init__": [[44, 48], ["torch.CrossEntropyLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aux", "=", "True", ",", "aux_weight", "=", "0.2", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.MixSoftmaxCrossEntropyLoss._aux_forward": [[49, 57], ["tuple", "super().forward", "range", "len", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "\n", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.MixSoftmaxCrossEntropyLoss._multiple_forward": [[58, 64], ["tuple", "super().forward", "range", "len", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "_multiple_forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "loss", "+=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.MixSoftmaxCrossEntropyLoss.forward": [[65, 74], ["tuple", "tuple", "dict", "list", "len", "dict", "dict", "loss.MixSoftmaxCrossEntropyLoss._aux_forward", "loss.MixSoftmaxCrossEntropyLoss._multiple_forward", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss._aux_forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.LovaszSoftmax._multiple_forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", ".", "_aux_forward", "(", "*", "inputs", ")", ")", "\n", "", "elif", "len", "(", "preds", ")", ">", "1", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", ".", "_multiple_forward", "(", "*", "inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.ICNetLoss.__init__": [[78, 81], ["torch.CrossEntropyLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "aux_weight", "=", "0.4", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ICNetLoss", ",", "self", ")", ".", "__init__", "(", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.ICNetLoss.forward": [[82, 96], ["tuple", "tuple", "tuple", "target.unsqueeze().float.unsqueeze().float.unsqueeze().float", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "super().forward", "super().forward", "super().forward", "dict", "list", "target.unsqueeze().float.unsqueeze().float.unsqueeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "pred_sub4.size", "pred_sub8.size", "pred_sub16.size"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "\n", "pred", ",", "pred_sub4", ",", "pred_sub8", ",", "pred_sub16", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "target_sub4", "=", "F", ".", "interpolate", "(", "target", ",", "pred_sub4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "target_sub8", "=", "F", ".", "interpolate", "(", "target", ",", "pred_sub8", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "target_sub16", "=", "F", ".", "interpolate", "(", "target", ",", "pred_sub16", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "\n", "1", ")", ".", "long", "(", ")", "\n", "loss1", "=", "super", "(", "ICNetLoss", ",", "self", ")", ".", "forward", "(", "pred_sub4", ",", "target_sub4", ")", "\n", "loss2", "=", "super", "(", "ICNetLoss", ",", "self", ")", ".", "forward", "(", "pred_sub8", ",", "target_sub8", ")", "\n", "loss3", "=", "super", "(", "ICNetLoss", ",", "self", ")", ".", "forward", "(", "pred_sub16", ",", "target_sub16", ")", "\n", "return", "dict", "(", "loss", "=", "loss1", "+", "loss2", "*", "self", ".", "aux_weight", "+", "loss3", "*", "self", ".", "aux_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.OhemCrossEntropy2d.__init__": [[99, 111], ["torch.Module.__init__", "float", "int", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_index", "=", "-", "1", ",", "thresh", "=", "0.7", ",", "min_kept", "=", "100000", ",", "use_weight", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OhemCrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "thresh", "=", "float", "(", "thresh", ")", "\n", "self", ".", "min_kept", "=", "int", "(", "min_kept", ")", "\n", "if", "use_weight", ":", "\n", "            ", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "0.8373", ",", "0.918", ",", "0.866", ",", "1.0345", ",", "1.0166", ",", "0.9969", ",", "0.9754", ",", "\n", "1.0489", ",", "0.8786", ",", "1.0023", ",", "0.9539", ",", "0.9843", ",", "1.1116", ",", "0.9037", ",", "1.0865", ",", "1.0955", ",", "\n", "1.0865", ",", "1.1529", ",", "1.0507", "]", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "ignore_index", "=", "ignore_index", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignore_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.OhemCrossEntropy2d.forward": [[112, 141], ["pred.size", "target.view.view.view", "target.view.view.ne", "target.view.ne.sum", "torch.softmax", "torch.softmax", "torch.softmax", "prob.masked_fill_.masked_fill_.transpose().reshape", "target.view.view.masked_fill_", "target.view.view.view", "loss.OhemCrossEntropy2d.criterion", "target.view.ne.long", "print", "prob.masked_fill_.masked_fill_.transpose", "prob.masked_fill_.masked_fill_.masked_fill_", "mask_prob.le", "mask_prob.argsort", "mask_prob.le.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "min", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "pred", ".", "size", "(", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "valid_mask", "=", "target", ".", "ne", "(", "self", ".", "ignore_index", ")", "\n", "target", "=", "target", "*", "valid_mask", ".", "long", "(", ")", "\n", "num_valid", "=", "valid_mask", ".", "sum", "(", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "prob", "=", "prob", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "c", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "min_kept", ">", "num_valid", ":", "\n", "            ", "print", "(", "\"Lables: {}\"", ".", "format", "(", "num_valid", ")", ")", "\n", "", "elif", "num_valid", ">", "0", ":", "\n", "            ", "prob", "=", "prob", ".", "masked_fill_", "(", "~", "valid_mask", ",", "1", ")", "\n", "mask_prob", "=", "prob", "[", "target", ",", "torch", ".", "arange", "(", "len", "(", "target", ")", ",", "dtype", "=", "torch", ".", "long", ")", "]", "\n", "threshold", "=", "self", ".", "thresh", "\n", "if", "self", ".", "min_kept", ">", "0", ":", "\n", "                ", "index", "=", "mask_prob", ".", "argsort", "(", ")", "\n", "threshold_index", "=", "index", "[", "min", "(", "len", "(", "index", ")", ",", "self", ".", "min_kept", ")", "-", "1", "]", "\n", "if", "mask_prob", "[", "threshold_index", "]", ">", "self", ".", "thresh", ":", "\n", "                    ", "threshold", "=", "mask_prob", "[", "threshold_index", "]", "\n", "", "", "kept_mask", "=", "mask_prob", ".", "le", "(", "threshold", ")", "\n", "valid_mask", "=", "valid_mask", "*", "kept_mask", "\n", "target", "=", "target", "*", "kept_mask", ".", "long", "(", ")", "\n", "\n", "", "target", "=", "target", ".", "masked_fill_", "(", "~", "valid_mask", ",", "self", ".", "ignore_index", ")", "\n", "target", "=", "target", ".", "view", "(", "n", ",", "h", ",", "w", ")", "\n", "\n", "return", "self", ".", "criterion", "(", "pred", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.EncNetLoss.__init__": [[146, 154], ["torch.CrossEntropyLoss.__init__", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "aux", "=", "False", ",", "aux_weight", "=", "0.4", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EncNetLoss", ",", "self", ")", ".", "__init__", "(", "weight", ",", "None", ",", "ignore_index", ")", "\n", "self", ".", "se_loss", "=", "cfg", ".", "MODEL", ".", "ENCNET", ".", "SE_LOSS", "\n", "self", ".", "se_weight", "=", "cfg", ".", "MODEL", ".", "ENCNET", ".", "SE_WEIGHT", "\n", "self", ".", "nclass", "=", "datasets", "[", "cfg", ".", "DATASET", ".", "NAME", "]", ".", "NUM_CLASS", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "self", ".", "bceloss", "=", "nn", ".", "BCELoss", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.EncNetLoss.forward": [[155, 178], ["tuple", "tuple", "super().forward", "list", "tuple", "super().forward", "super().forward", "dict", "tuple", "loss.EncNetLoss._get_batch_label_vector().type_as", "super().forward", "loss.EncNetLoss.bceloss", "dict", "tuple", "loss.EncNetLoss._get_batch_label_vector().type_as", "super().forward", "super().forward", "loss.EncNetLoss.bceloss", "dict", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "loss.EncNetLoss._get_batch_label_vector", "loss.EncNetLoss._get_batch_label_vector"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.EncNetLoss._get_batch_label_vector", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.EncNetLoss._get_batch_label_vector"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "if", "not", "self", ".", "se_loss", "and", "not", "self", ".", "aux", ":", "\n", "            ", "return", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", "\n", "", "elif", "not", "self", ".", "se_loss", ":", "\n", "            ", "pred1", ",", "pred2", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "loss1", "=", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "pred1", ",", "target", ")", "\n", "loss2", "=", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "pred2", ",", "target", ")", "\n", "return", "dict", "(", "loss", "=", "loss1", "+", "self", ".", "aux_weight", "*", "loss2", ")", "\n", "", "elif", "not", "self", ".", "aux", ":", "\n", "            ", "pred", ",", "se_pred", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "se_target", "=", "self", ".", "_get_batch_label_vector", "(", "target", ",", "nclass", "=", "self", ".", "nclass", ")", ".", "type_as", "(", "pred", ")", "\n", "loss1", "=", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "pred", ",", "target", ")", "\n", "loss2", "=", "self", ".", "bceloss", "(", "torch", ".", "sigmoid", "(", "se_pred", ")", ",", "se_target", ")", "\n", "return", "dict", "(", "loss", "=", "loss1", "+", "self", ".", "se_weight", "*", "loss2", ")", "\n", "", "else", ":", "\n", "            ", "pred1", ",", "se_pred", ",", "pred2", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "se_target", "=", "self", ".", "_get_batch_label_vector", "(", "target", ",", "nclass", "=", "self", ".", "nclass", ")", ".", "type_as", "(", "pred1", ")", "\n", "loss1", "=", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "pred1", ",", "target", ")", "\n", "loss2", "=", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "pred2", ",", "target", ")", "\n", "loss3", "=", "self", ".", "bceloss", "(", "torch", ".", "sigmoid", "(", "se_pred", ")", ",", "se_target", ")", "\n", "return", "dict", "(", "loss", "=", "loss1", "+", "self", ".", "aux_weight", "*", "loss2", "+", "self", ".", "se_weight", "*", "loss3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.EncNetLoss._get_batch_label_vector": [[179, 190], ["target.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "target[].cpu().data.float", "target[].cpu"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_batch_label_vector", "(", "target", ",", "nclass", ")", ":", "\n", "        ", "batch", "=", "target", ".", "size", "(", "0", ")", "\n", "tvect", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch", ",", "nclass", ")", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "hist", "=", "torch", ".", "histc", "(", "target", "[", "i", "]", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ",", "\n", "bins", "=", "nclass", ",", "min", "=", "0", ",", "\n", "max", "=", "nclass", "-", "1", ")", "\n", "vect", "=", "hist", ">", "0", "\n", "tvect", "[", "i", "]", "=", "vect", "\n", "", "return", "tvect", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.MixSoftmaxCrossEntropyOHEMLoss.__init__": [[193, 198], ["loss.OhemCrossEntropy2d.__init__", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aux", "=", "False", ",", "aux_weight", "=", "0.4", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MixSoftmaxCrossEntropyOHEMLoss", ",", "self", ")", ".", "__init__", "(", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "self", ".", "bceloss", "=", "nn", ".", "BCELoss", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.MixSoftmaxCrossEntropyOHEMLoss._aux_forward": [[199, 207], ["tuple", "super().forward.OhemCrossEntropy2d.forward", "range", "len", "super().forward.OhemCrossEntropy2d.forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "\n", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyOHEMLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "super", "(", "MixSoftmaxCrossEntropyOHEMLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.MixSoftmaxCrossEntropyOHEMLoss.forward": [[208, 215], ["tuple", "tuple", "dict", "dict", "list", "loss.MixSoftmaxCrossEntropyOHEMLoss._aux_forward", "loss.OhemCrossEntropy2d.forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss._aux_forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", ".", "_aux_forward", "(", "*", "inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyOHEMLoss", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.LovaszSoftmax.__init__": [[218, 223], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aux", "=", "True", ",", "aux_weight", "=", "0.2", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LovaszSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.LovaszSoftmax._aux_forward": [[224, 232], ["tuple", "lovasz_losses.lovasz_softmax", "range", "torch.softmax", "torch.softmax", "torch.softmax", "len", "lovasz_losses.lovasz_softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_softmax", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.lovasz_softmax"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "\n", "loss", "=", "lovasz_softmax", "(", "F", ".", "softmax", "(", "preds", "[", "0", "]", ",", "dim", "=", "1", ")", ",", "target", ",", "ignore", "=", "self", ".", "ignore_index", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "lovasz_softmax", "(", "F", ".", "softmax", "(", "preds", "[", "i", "]", ",", "dim", "=", "1", ")", ",", "target", ",", "ignore", "=", "self", ".", "ignore_index", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.LovaszSoftmax._multiple_forward": [[233, 239], ["tuple", "super().forward", "range", "len", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "_multiple_forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "loss", "+=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.LovaszSoftmax.forward": [[240, 249], ["tuple", "tuple", "dict", "list", "len", "dict", "dict", "loss.LovaszSoftmax._aux_forward", "loss.LovaszSoftmax._multiple_forward", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss._aux_forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.LovaszSoftmax._multiple_forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", ".", "_aux_forward", "(", "*", "inputs", ")", ")", "\n", "", "elif", "len", "(", "preds", ")", ">", "1", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", ".", "_multiple_forward", "(", "*", "inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.FocalLoss.__init__": [[252, 263], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.5", ",", "gamma", "=", "2", ",", "weight", "=", "None", ",", "aux", "=", "True", ",", "aux_weight", "=", "0.2", ",", "ignore_index", "=", "-", "1", ",", "\n", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ce_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "weight", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.FocalLoss._aux_forward": [[264, 272], ["tuple", "loss.FocalLoss.FocalLoss._base_forward", "range", "len", "loss.FocalLoss.FocalLoss._base_forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss._base_forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss._base_forward"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "\n", "loss", "=", "self", ".", "_base_forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "self", ".", "_base_forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.FocalLoss._base_forward": [[273, 295], ["loss.FocalLoss.ce_fn", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "output.contiguous().view().squeeze.contiguous().view().squeeze.dim", "output.contiguous().view().squeeze.contiguous().view().squeeze.contiguous().view", "output.contiguous().view().squeeze.contiguous().view().squeeze.transpose", "output.contiguous().view().squeeze.contiguous().view().squeeze.contiguous().view().squeeze", "target.view.view.dim", "target.view.view.contiguous().view", "target.view.view.transpose", "target.view.view.contiguous().view().squeeze", "loss.mean", "loss.sum", "output.contiguous().view().squeeze.contiguous().view().squeeze.size", "output.contiguous().view().squeeze.contiguous().view().squeeze.size", "target.view.view.size", "target.view.view.size", "target.view.view.dim", "target.view.view.view", "target.view.view.view", "output.contiguous().view().squeeze.contiguous().view().squeeze.contiguous", "output.contiguous().view().squeeze.contiguous().view().squeeze.contiguous().view", "target.view.view.contiguous", "target.view.view.contiguous().view", "output.contiguous().view().squeeze.contiguous().view().squeeze.size", "target.view.view.size", "output.contiguous().view().squeeze.contiguous().view().squeeze.contiguous", "target.view.view.contiguous"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean"], ["", "def", "_base_forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "\n", "        ", "if", "output", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "output", "=", "output", ".", "contiguous", "(", ")", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "output", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "target", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "transpose", "(", "1", ",", "2", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "target", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "", "elif", "target", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "logpt", "=", "self", ".", "ce_fn", "(", "output", ",", "target", ")", "\n", "pt", "=", "torch", ".", "exp", "(", "-", "logpt", ")", "\n", "loss", "=", "(", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", ")", "*", "self", ".", "alpha", "*", "logpt", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.FocalLoss.forward": [[296, 300], ["tuple", "tuple", "dict", "list", "loss.FocalLoss._aux_forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss._aux_forward"], ["", "", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "return", "dict", "(", "loss", "=", "self", ".", "_aux_forward", "(", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.BinaryDiceLoss.__init__": [[316, 321], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "smooth", "=", "1", ",", "p", "=", "2", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "BinaryDiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smooth", "=", "smooth", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.BinaryDiceLoss.forward": [[322, 341], ["predict.contiguous().view.contiguous().view.contiguous().view", "target.contiguous().view.contiguous().view.contiguous().view", "valid_mask.contiguous().view.contiguous().view.contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "loss.mean", "predict.contiguous().view.contiguous().view.contiguous", "target.contiguous().view.contiguous().view.contiguous", "valid_mask.contiguous().view.contiguous().view.contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "loss.sum", "Exception", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "predict.contiguous().view.contiguous().view.pow", "target.contiguous().view.contiguous().view.pow"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lovasz_losses.mean"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "valid_mask", ")", ":", "\n", "        ", "assert", "predict", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", ",", "\"predict & target batch size don't match\"", "\n", "predict", "=", "predict", ".", "contiguous", "(", ")", ".", "view", "(", "predict", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "target", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "valid_mask", "=", "valid_mask", ".", "contiguous", "(", ")", ".", "view", "(", "valid_mask", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "num", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "predict", ",", "target", ")", "*", "valid_mask", ",", "dim", "=", "1", ")", "*", "2", "+", "self", ".", "smooth", "\n", "den", "=", "torch", ".", "sum", "(", "(", "predict", ".", "pow", "(", "self", ".", "p", ")", "+", "target", ".", "pow", "(", "self", ".", "p", ")", ")", "*", "valid_mask", ",", "dim", "=", "1", ")", "+", "self", ".", "smooth", "\n", "\n", "loss", "=", "1", "-", "num", "/", "den", "\n", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'none'", ":", "\n", "            ", "return", "loss", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unexpected reduction {}'", ".", "format", "(", "self", ".", "reduction", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss.__init__": [[346, 353], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "aux", "=", "True", ",", "aux_weight", "=", "0.4", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss._base_forward": [[354, 370], ["loss.BinaryDiceLoss", "torch.softmax", "torch.softmax", "torch.softmax", "range", "BinaryDiceLoss."], "methods", ["None"], ["", "def", "_base_forward", "(", "self", ",", "predict", ",", "target", ",", "valid_mask", ")", ":", "\n", "\n", "        ", "dice", "=", "BinaryDiceLoss", "(", "**", "self", ".", "kwargs", ")", "\n", "total_loss", "=", "0", "\n", "predict", "=", "F", ".", "softmax", "(", "predict", ",", "dim", "=", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "target", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "if", "i", "!=", "self", ".", "ignore_index", ":", "\n", "                ", "dice_loss", "=", "dice", "(", "predict", "[", ":", ",", "i", "]", ",", "target", "[", "...", ",", "i", "]", ",", "valid_mask", ")", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "assert", "self", ".", "weight", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "1", "]", ",", "'Expect weight shape [{}], get[{}]'", ".", "format", "(", "target", ".", "shape", "[", "1", "]", ",", "self", ".", "weight", ".", "shape", "[", "0", "]", ")", "\n", "dice_loss", "*=", "self", ".", "weights", "[", "i", "]", "\n", "", "total_loss", "+=", "dice_loss", "\n", "\n", "", "", "return", "total_loss", "/", "target", ".", "shape", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss._aux_forward": [[371, 380], ["tuple", "torch.one_hot", "torch.one_hot", "torch.one_hot", "loss.DiceLoss.DiceLoss._base_forward", "range", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "len", "loss.DiceLoss.DiceLoss._base_forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss._base_forward", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss._base_forward"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "valid_mask", "=", "(", "target", "!=", "self", ".", "ignore_index", ")", ".", "long", "(", ")", "\n", "target_one_hot", "=", "F", ".", "one_hot", "(", "torch", ".", "clamp_min", "(", "target", ",", "0", ")", ")", "\n", "loss", "=", "self", ".", "_base_forward", "(", "preds", "[", "0", "]", ",", "target_one_hot", ",", "valid_mask", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "self", ".", "_base_forward", "(", "preds", "[", "i", "]", ",", "target_one_hot", ",", "valid_mask", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss.forward": [[381, 385], ["tuple", "tuple", "dict", "list", "loss.DiceLoss._aux_forward"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.DiceLoss._aux_forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "return", "dict", "(", "loss", "=", "self", ".", "_aux_forward", "(", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.__init__": [[388, 393], ["torch.CrossEntropyLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aux", "=", "True", ",", "aux_weight", "=", "0.2", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PointRendLoss", ",", "self", ")", ".", "__init__", "(", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.PointRendLoss.forward": [[394, 411], ["tuple", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "point_sample().squeeze_().long", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "dict", "point_sample().squeeze_", "point_sample", "gt.float().unsqueeze", "gt.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "result", ",", "gt", "=", "tuple", "(", "inputs", ")", "\n", "\n", "pred", "=", "F", ".", "interpolate", "(", "result", "[", "\"coarse\"", "]", ",", "gt", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "seg_loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "gt", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "\n", "gt_points", "=", "point_sample", "(", "\n", "gt", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "result", "[", "\"points\"", "]", ",", "\n", "mode", "=", "\"nearest\"", ",", "\n", "align_corners", "=", "False", "\n", ")", ".", "squeeze_", "(", "1", ")", ".", "long", "(", ")", "\n", "points_loss", "=", "F", ".", "cross_entropy", "(", "result", "[", "\"rend\"", "]", ",", "gt_points", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "\n", "loss", "=", "seg_loss", "+", "points_loss", "\n", "\n", "return", "dict", "(", "loss", "=", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.loss.get_segmentation_loss": [[413, 441], ["model.lower.lower", "loss.MixSoftmaxCrossEntropyOHEMLoss", "loss.ICNetLoss", "logging.info", "loss.LovaszSoftmax", "loss.EncNetLoss", "logging.info", "loss.FocalLoss", "logging.info", "loss.PointRendLoss", "logging.info", "loss.DiceLoss", "loss.TranslabLoss", "loss.MixSoftmaxCrossEntropyLoss", "logging.info", "loss.BinaryDiceLoss"], "function", ["None"], ["", "", "def", "get_segmentation_loss", "(", "model", ",", "use_ohem", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "use_ohem", ":", "\n", "        ", "return", "MixSoftmaxCrossEntropyOHEMLoss", "(", "**", "kwargs", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "LOSS_NAME", "==", "'lovasz'", ":", "\n", "        ", "logging", ".", "info", "(", "'Use lovasz loss!'", ")", "\n", "return", "LovaszSoftmax", "(", "**", "kwargs", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "LOSS_NAME", "==", "'focal'", ":", "\n", "        ", "logging", ".", "info", "(", "'Use focal loss!'", ")", "\n", "return", "FocalLoss", "(", "**", "kwargs", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "LOSS_NAME", "==", "'dice'", ":", "\n", "        ", "logging", ".", "info", "(", "'Use dice loss!'", ")", "\n", "return", "DiceLoss", "(", "**", "kwargs", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "LOSS_NAME", "==", "'binary_dice'", ":", "\n", "        ", "logging", ".", "info", "(", "'Use binary_dice loss!'", ")", "\n", "return", "BinaryDiceLoss", "(", "**", "kwargs", ")", "\n", "\n", "", "model", "=", "model", ".", "lower", "(", ")", "\n", "if", "model", "==", "'icnet'", ":", "\n", "        ", "return", "ICNetLoss", "(", "**", "kwargs", ")", "\n", "", "elif", "model", "==", "'encnet'", ":", "\n", "        ", "return", "EncNetLoss", "(", "**", "kwargs", ")", "\n", "", "elif", "model", "==", "'pointrend'", ":", "\n", "        ", "logging", ".", "info", "(", "'Use pointrend loss!'", ")", "\n", "return", "PointRendLoss", "(", "**", "kwargs", ")", "\n", "", "elif", "model", "==", "'translab'", ":", "\n", "        ", "return", "TranslabLoss", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "return", "MixSoftmaxCrossEntropyLoss", "(", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupPolyLR.__init__": [[14, 29], ["super().__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "target_lr", "=", "0", ",", "max_iters", "=", "0", ",", "power", "=", "0.9", ",", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "warmup_method", "=", "'linear'", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted \"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", ")", "\n", "\n", "", "self", ".", "target_lr", "=", "target_lr", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "power", "=", "power", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "\n", "super", "(", "WarmupPolyLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupPolyLR.get_lr": [[30, 44], ["pow", "ValueError", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "N", "=", "self", ".", "max_iters", "-", "self", ".", "warmup_iters", "\n", "T", "=", "self", ".", "last_epoch", "-", "self", ".", "warmup_iters", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "'constant'", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "'linear'", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown warmup type.\"", ")", "\n", "", "return", "[", "self", ".", "target_lr", "+", "(", "base_lr", "-", "self", ".", "target_lr", ")", "*", "warmup_factor", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "factor", "=", "pow", "(", "1", "-", "T", "/", "N", ",", "self", ".", "power", ")", "\n", "return", "[", "self", ".", "target_lr", "+", "(", "base_lr", "-", "self", ".", "target_lr", ")", "*", "factor", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[47, 67], ["super().__init__", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "milestones", ":", "List", "[", "int", "]", ",", "\n", "gamma", ":", "float", "=", "0.1", ",", "\n", "warmup_factor", ":", "float", "=", "0.001", ",", "\n", "warmup_iters", ":", "int", "=", "1000", ",", "\n", "warmup_method", ":", "str", "=", "\"linear\"", ",", "\n", "last_epoch", ":", "int", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "milestones", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[68, 75], ["lr_scheduler._get_warmup_factor_at_iter", "bisect.bisect_right"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler._get_warmup_factor_at_iter"], ["", "def", "get_lr", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "warmup_factor", "=", "_get_warmup_factor_at_iter", "(", "\n", "self", ".", "warmup_method", ",", "self", ".", "last_epoch", ",", "self", ".", "warmup_iters", ",", "self", ".", "warmup_factor", "\n", ")", "\n", "return", "[", "\n", "base_lr", "*", "warmup_factor", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupMultiStepLR._compute_values": [[77, 80], ["lr_scheduler.WarmupMultiStepLR.get_lr"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.get_lr"], ["", "def", "_compute_values", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "# The new interface", "\n", "        ", "return", "self", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__": [[83, 97], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "max_iters", ":", "int", ",", "\n", "warmup_factor", ":", "float", "=", "0.001", ",", "\n", "warmup_iters", ":", "int", "=", "1000", ",", "\n", "warmup_method", ":", "str", "=", "\"linear\"", ",", "\n", "last_epoch", ":", "int", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.get_lr": [[98, 113], ["lr_scheduler._get_warmup_factor_at_iter", "math.cos"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler._get_warmup_factor_at_iter"], ["", "def", "get_lr", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "warmup_factor", "=", "_get_warmup_factor_at_iter", "(", "\n", "self", ".", "warmup_method", ",", "self", ".", "last_epoch", ",", "self", ".", "warmup_iters", ",", "self", ".", "warmup_factor", "\n", ")", "\n", "# Different definitions of half-cosine with warmup are possible. For", "\n", "# simplicity we multiply the standard half-cosine schedule by the warmup", "\n", "# factor. An alternative is to start the period of the cosine at warmup_iters", "\n", "# instead of at 0. In the case that warmup_iters << max_iters the two are", "\n", "# very close to each other.", "\n", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "0.5", "\n", "*", "(", "1.0", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_epoch", "/", "self", ".", "max_iters", ")", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR._compute_values": [[115, 118], ["lr_scheduler.WarmupCosineLR.get_lr"], "methods", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.WarmupCosineLR.get_lr"], ["", "def", "_compute_values", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "# The new interface", "\n", "        ", "return", "self", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler._get_warmup_factor_at_iter": [[120, 147], ["ValueError"], "function", ["None"], ["", "", "def", "_get_warmup_factor_at_iter", "(", "\n", "method", ":", "str", ",", "iter", ":", "int", ",", "warmup_iters", ":", "int", ",", "warmup_factor", ":", "float", "\n", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Return the learning rate warmup factor at a specific iteration.\n    See https://arxiv.org/abs/1706.02677 for more details.\n\n    Args:\n        method (str): warmup method; either \"constant\" or \"linear\".\n        iter (int): iteration at which to calculate the warmup factor.\n        warmup_iters (int): the number of warmup iterations.\n        warmup_factor (float): the base warmup factor (the meaning changes according\n            to the method used).\n\n    Returns:\n        float: the effective warmup factor at the given iteration.\n    \"\"\"", "\n", "if", "iter", ">=", "warmup_iters", ":", "\n", "        ", "return", "1.0", "\n", "\n", "", "if", "method", "==", "\"constant\"", ":", "\n", "        ", "return", "warmup_factor", "\n", "", "elif", "method", "==", "\"linear\"", ":", "\n", "        ", "alpha", "=", "iter", "/", "warmup_iters", "\n", "return", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown warmup method: {}\"", ".", "format", "(", "method", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.lr_scheduler.get_scheduler": [[149, 166], ["segmentron.config.cfg.SOLVER.LR_SCHEDULER.lower", "lr_scheduler.WarmupPolyLR", "lr_scheduler.WarmupCosineLR", "lr_scheduler.WarmupMultiStepLR", "ValueError"], "function", ["None"], ["", "", "def", "get_scheduler", "(", "optimizer", ",", "max_iters", ",", "iters_per_epoch", ")", ":", "\n", "    ", "mode", "=", "cfg", ".", "SOLVER", ".", "LR_SCHEDULER", ".", "lower", "(", ")", "\n", "warm_up_iters", "=", "iters_per_epoch", "*", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "EPOCHS", "\n", "if", "mode", "==", "'poly'", ":", "\n", "        ", "return", "WarmupPolyLR", "(", "optimizer", ",", "max_iters", "=", "max_iters", ",", "power", "=", "cfg", ".", "SOLVER", ".", "POLY", ".", "POWER", ",", "\n", "warmup_factor", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "FACTOR", ",", "warmup_iters", "=", "warm_up_iters", ",", "\n", "warmup_method", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "METHOD", ")", "\n", "", "elif", "mode", "==", "'cosine'", ":", "\n", "        ", "return", "WarmupCosineLR", "(", "optimizer", ",", "max_iters", "=", "max_iters", ",", "warmup_factor", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "FACTOR", ",", "\n", "warmup_iters", "=", "warm_up_iters", ",", "warmup_method", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "METHOD", ")", "\n", "", "elif", "mode", "==", "'step'", ":", "\n", "        ", "milestones", "=", "[", "x", "*", "iters_per_epoch", "for", "x", "in", "cfg", ".", "SOLVER", ".", "STEP", ".", "DECAY_EPOCH", "]", "\n", "return", "WarmupMultiStepLR", "(", "optimizer", ",", "milestones", "=", "milestones", ",", "gamma", "=", "cfg", ".", "SOLVER", ".", "STEP", ".", "GAMMA", ",", "\n", "warmup_factor", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "FACTOR", ",", "warmup_iters", "=", "warm_up_iters", ",", "\n", "warmup_method", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "METHOD", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"not support lr scheduler method!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.optimizer._set_batch_norm_attr": [[8, 12], ["isinstance", "setattr", "segmentron.config.cfg.MODEL.BN_MOMENTUM", "segmentron.config.cfg.MODEL.BN_EPS_FOR_ENCODER", "segmentron.config.cfg.MODEL.BN_EPS_FOR_DECODER"], "function", ["None"], ["def", "_set_batch_norm_attr", "(", "named_modules", ",", "attr", ",", "value", ")", ":", "\n", "    ", "for", "m", "in", "named_modules", ":", "\n", "        ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "SyncBatchNorm", ")", ")", ":", "\n", "            ", "setattr", "(", "m", "[", "1", "]", ",", "attr", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.optimizer._get_paramters": [[14, 43], ["list", "hasattr", "hasattr", "model.parameters.append", "logging.info", "model.parameters", "logging.info", "optimizer._set_batch_norm_attr", "logging.info", "optimizer._set_batch_norm_attr", "model.parameters.append", "logging.info", "model.named_modules", "logging.info", "model.encoder.parameters", "model.encoder.named_modules", "optimizer._set_batch_norm_attr", "getattr().parameters", "getattr().named_modules", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.optimizer._set_batch_norm_attr", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.optimizer._set_batch_norm_attr", "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.optimizer._set_batch_norm_attr"], ["", "", "", "def", "_get_paramters", "(", "model", ")", ":", "\n", "    ", "params_list", "=", "list", "(", ")", "\n", "if", "hasattr", "(", "model", ",", "'encoder'", ")", "and", "model", ".", "encoder", "is", "not", "None", "and", "hasattr", "(", "model", ",", "'decoder'", ")", ":", "\n", "        ", "params_list", ".", "append", "(", "{", "'params'", ":", "model", ".", "encoder", ".", "parameters", "(", ")", ",", "'lr'", ":", "cfg", ".", "SOLVER", ".", "LR", "}", ")", "\n", "if", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ":", "\n", "            ", "logging", ".", "info", "(", "'Set bn custom eps for bn in encoder: {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", ")", "\n", "_set_batch_norm_attr", "(", "model", ".", "encoder", ".", "named_modules", "(", ")", ",", "'eps'", ",", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", "\n", "\n", "", "for", "module", "in", "model", ".", "decoder", ":", "\n", "            ", "params_list", ".", "append", "(", "{", "'params'", ":", "getattr", "(", "model", ",", "module", ")", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "cfg", ".", "SOLVER", ".", "LR", "*", "cfg", ".", "SOLVER", ".", "DECODER_LR_FACTOR", "}", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_DECODER", ":", "\n", "            ", "logging", ".", "info", "(", "'Set bn custom eps for bn in decoder: {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_DECODER", ")", ")", "\n", "for", "module", "in", "model", ".", "decoder", ":", "\n", "                ", "_set_batch_norm_attr", "(", "getattr", "(", "model", ",", "module", ")", ".", "named_modules", "(", ")", ",", "'eps'", ",", "\n", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_DECODER", ")", "\n", "", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'Model do not have encoder or decoder, params list was from model.parameters(), '", "\n", "'and arguments BN_EPS_FOR_ENCODER, BN_EPS_FOR_DECODER, DECODER_LR_FACTOR not used!'", ")", "\n", "params_list", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "BN_MOMENTUM", "and", "cfg", ".", "MODEL", ".", "BN_TYPE", "in", "[", "'BN'", "]", ":", "\n", "        ", "logging", ".", "info", "(", "'Set bn custom momentum: {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_MOMENTUM", ")", ")", "\n", "_set_batch_norm_attr", "(", "model", ".", "named_modules", "(", ")", ",", "'momentum'", ",", "cfg", ".", "MODEL", ".", "BN_MOMENTUM", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BN_MOMENTUM", "and", "cfg", ".", "MODEL", ".", "BN_TYPE", "not", "in", "[", "'BN'", "]", ":", "\n", "        ", "logging", ".", "info", "(", "'Batch norm type is {}, custom bn momentum is not effective!'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_TYPE", ")", ")", "\n", "\n", "", "return", "params_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.optimizer.get_optimizer": [[45, 70], ["optimizer._get_paramters", "segmentron.config.cfg.SOLVER.OPTIMIZER.lower", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.AdamW", "torch.optim.Adadelta", "torch.optim.RMSprop", "ValueError"], "function", ["home.repos.pwc.inspect_result.jamycheung_Trans4Trans.solver.optimizer._get_paramters"], ["", "def", "get_optimizer", "(", "model", ")", ":", "\n", "    ", "parameters", "=", "_get_paramters", "(", "model", ")", "\n", "opt_lower", "=", "cfg", ".", "SOLVER", ".", "OPTIMIZER", ".", "lower", "(", ")", "\n", "\n", "if", "opt_lower", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "parameters", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "LR", ",", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "", "elif", "opt_lower", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "parameters", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "LR", ",", "eps", "=", "cfg", ".", "SOLVER", ".", "EPSILON", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "", "elif", "opt_lower", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "AdamW", "(", "\n", "parameters", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "LR", ",", "eps", "=", "cfg", ".", "SOLVER", ".", "EPSILON", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "", "elif", "opt_lower", "==", "'adadelta'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adadelta", "(", "\n", "parameters", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "LR", ",", "eps", "=", "cfg", ".", "SOLVER", ".", "EPSILON", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "", "elif", "opt_lower", "==", "'rmsprop'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "RMSprop", "(", "\n", "parameters", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "LR", ",", "alpha", "=", "0.9", ",", "eps", "=", "cfg", ".", "SOLVER", ".", "EPSILON", ",", "\n", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Expected optimizer method in [sgd, adam, adadelta, rmsprop], but received \"", "\n", "\"{}\"", ".", "format", "(", "opt_lower", ")", ")", "\n", "\n", "", "return", "optimizer", "\n", "", ""]]}