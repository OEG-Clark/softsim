{"home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_multitask.fix_seed": [[22, 31], ["torch.cuda.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "str"], "function", ["None"], ["def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_multitask.parse_args": [[33, 55], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'cq'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "1e-3", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--weight'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "default", "=", "30000", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--face_size'", ",", "default", "=", "256", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_size'", ",", "default", "=", "256", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "12", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_step'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_root'", ",", "default", "=", "'./Training_results/Cross_df/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"Multitask/\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--temp_name'", ",", "default", "=", "\"training_multitask_cross\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_multitask.val": [[57, 101], ["print", "ENCODER.eval", "DECODER.eval", "numpy.array", "numpy.array", "numpy.array", "enumerate", "sklearn.metrics.accuracy_score", "tqdm.tqdm", "torch.no_grad", "data[].to", "data[].to", "ENCODER().reshape", "torch.abs().view", "torch.abs().view.mean", "torch.abs().view", "torch.abs().view.mean", "torch.eye", "y.index_select.to", "y.index_select.index_select", "DECODER", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "torch.softmax", "numpy.concatenate", "torch.cat", "ENCODER", "torch.abs", "torch.abs", "data[].to.data.long", "data[].to.cpu().numpy", "pred_prob[].data.cpu().numpy", "zero_abs.mean.reshape", "one_abs.mean.reshape", "data[].to.cpu", "pred_prob[].data.cpu"], "function", ["None"], ["", "def", "val", "(", "ENCODER", ",", "DECODER", ",", "dataloader", ",", "num_imgs", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "ENCODER", ".", "eval", "(", ")", "\n", "DECODER", ".", "eval", "(", ")", "\n", "tol_label", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "tol_pred", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "tol_pred_prob", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "for", "num", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "label_cls", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "\n", "latent", "=", "ENCODER", "(", "faces", ")", ".", "reshape", "(", "-", "1", ",", "2", ",", "64", ",", "16", ",", "16", ")", "\n", "zero_abs", "=", "torch", ".", "abs", "(", "latent", "[", ":", ",", "0", "]", ")", ".", "view", "(", "latent", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "zero", "=", "zero_abs", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "one_abs", "=", "torch", ".", "abs", "(", "latent", "[", ":", ",", "1", "]", ")", ".", "view", "(", "latent", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "one", "=", "one_abs", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "y", "=", "torch", ".", "eye", "(", "2", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "\n", "y", "=", "y", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "label_cls", ".", "data", ".", "long", "(", ")", ")", "\n", "latent", "=", "(", "latent", "*", "y", "[", ":", ",", ":", ",", "None", ",", "None", ",", "None", "]", ")", ".", "reshape", "(", "-", "1", ",", "128", ",", "16", ",", "16", ")", "\n", "seg", ",", "rect", "=", "DECODER", "(", "latent", ")", "\n", "output_pred", "=", "np", ".", "zeros", "(", "(", "faces", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", "in", "range", "(", "faces", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "one", "[", "i", "]", ">=", "zero", "[", "i", "]", ":", "\n", "                    ", "output_pred", "[", "i", "]", "=", "1.0", "\n", "", "else", ":", "\n", "                    ", "output_pred", "[", "i", "]", "=", "0.0", "\n", "\n", "", "", "tol_label", "=", "np", ".", "concatenate", "(", "(", "tol_label", ",", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "tol_pred", "=", "np", ".", "concatenate", "(", "(", "tol_pred", ",", "output_pred", ")", ")", "\n", "\n", "pred_prob", "=", "torch", ".", "softmax", "(", "torch", ".", "cat", "(", "(", "zero", ".", "reshape", "(", "zero", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "one", ".", "reshape", "(", "one", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "dim", "=", "1", ")", ",", "\n", "dim", "=", "1", ")", "\n", "tol_pred_prob", "=", "np", ".", "concatenate", "(", "(", "tol_pred_prob", ",", "pred_prob", "[", ":", ",", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "", "", "acc_test", "=", "metrics", ".", "accuracy_score", "(", "tol_label", ",", "tol_pred", ")", "\n", "val_loss", "=", "0", "\n", "\n", "return", "val_loss", ",", "tol_pred_prob", ",", "tol_label", ",", "acc_test", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_multitask.combine_csv": [[103, 109], ["range", "os.system", "len"], "function", ["None"], ["", "def", "combine_csv", "(", "file_array", ",", "result_name", ")", ":", "\n", "    ", "combine_cmd", "=", "\"cat \"", "\n", "for", "i", "in", "range", "(", "len", "(", "file_array", ")", ")", ":", "\n", "        ", "combine_cmd", "+=", "(", "file_array", "[", "i", "]", "+", "\" \"", ")", "\n", "", "combine_cmd", "+=", "\" > \"", "+", "result_name", "\n", "os", ".", "system", "(", "combine_cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_multitask.train": [[111, 267], ["ENCODER.to", "DECODER.to", "arch.multitask.ActivationLoss", "arch.multitask.ReconstructionLoss", "arch.multitask.SegmentationLoss", "numpy.array", "TRAIN_cross_multitask.combine_csv", "TRAIN_cross_multitask.combine_csv", "opt.dataloader_multitask_cross.face_Dataset", "torch.utils.data.DataLoader", "opt.dataloader_multitask_cross.face_Dataset", "torch.utils.data.DataLoader", "len", "len", "len", "len", "torch.optim.Adam", "torch.optim.Adam", "print", "torch.utils.tensorboard.SummaryWriter", "open", "len", "range", "open.close", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "ENCODER.parameters", "DECODER.parameters", "os.path.exists", "os.makedirs", "os.mkdir", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "opt.dataloader_multitask_cross.my_transforms", "opt.dataloader_multitask_cross.my_transforms", "tqdm.tqdm", "ENCODER.train", "DECODER.train", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "data[].to", "data[].to", "data[].to", "ENCODER().reshape", "torch.abs().view", "torch.abs().view.mean", "torch.abs().view", "torch.abs().view.mean", "arch.multitask.ActivationLoss.", "act_loss_fn.item", "torch.eye", "y.index_select.to", "y.index_select.index_select", "DECODER", "criterion", "criterion.item", "arch.multitask.ReconstructionLoss.", "rect_loss_fn.item", "loss_total.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "datetime.datetime.now().strftime", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "datetime.datetime.now().strftime", "numpy.mean", "numpy.append", "print", "open.write", "open.write", "TRAIN_cross_multitask.val", "utils.metrics_cross.get_metrics", "print", "open.write", "open.write", "ENCODER", "torch.abs", "torch.abs", "data[].to.data.long", "torch.save", "torch.save", "numpy.save", "open.write", "open.write", "datetime.datetime.now", "datetime.datetime.now", "ENCODER.state_dict", "DECODER.state_dict"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.val", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "train", "(", "args", ",", "ENCODER", ",", "DECODER", ")", ":", "\n", "    ", "ENCODER", ".", "to", "(", "device", ")", "\n", "DECODER", ".", "to", "(", "device", ")", "\n", "act_loss_fn", "=", "ActivationLoss", "(", ")", "\n", "rect_loss_fn", "=", "ReconstructionLoss", "(", ")", "\n", "seg_loss_fn", "=", "SegmentationLoss", "(", ")", "\n", "\n", "avg_train_loss_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "train_csv_file_df_c23", "=", "'./misc_cross/Train/c23_df_train.csv'", "\n", "train_csv_file_or_c23", "=", "'./misc_cross/Train/c23_or_train.csv'", "\n", "train_csv_file_df_c40", "=", "'./misc_cross/Train/c40_df_train.csv'", "\n", "train_csv_file_or_c40", "=", "'./misc_cross/Train/c40_or_train.csv'", "\n", "\n", "val_csv_file_df_c23", "=", "'./misc_cross/Val100/c23_df_val.csv'", "\n", "val_csv_file_or_c23", "=", "'./misc_cross/Val100/c23_or_val.csv'", "\n", "val_csv_file_df_c40", "=", "'./misc_cross/Val100/c40_df_val.csv'", "\n", "val_csv_file_or_c40", "=", "'./misc_cross/Val100/c40_or_val.csv'", "\n", "\n", "training_csv_files", "=", "[", "train_csv_file_df_c23", ",", "train_csv_file_or_c23", ",", "train_csv_file_df_c40", ",", "train_csv_file_or_c40", "]", "\n", "val_csv_files", "=", "[", "val_csv_file_df_c23", ",", "val_csv_file_or_c23", ",", "val_csv_file_df_c40", ",", "val_csv_file_or_c40", "]", "\n", "\n", "tem_train_file_name", "=", "'training_xcep_cross_train'", "\n", "tem_val_file_name", "=", "'training_xcep_cross_val'", "\n", "combine_csv", "(", "training_csv_files", ",", "tem_train_file_name", ")", "\n", "combine_csv", "(", "val_csv_files", ",", "tem_val_file_name", ")", "\n", "tem_train_file_path", "=", "args", ".", "root_path", "+", "tem_train_file_name", "\n", "tem_val_file_path", "=", "args", ".", "root_path", "+", "tem_val_file_name", "\n", "\n", "training_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_train_file_path", ",", "\n", "transform", "=", "my_transforms", "(", "256", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "training_dataloader", "=", "DataLoader", "(", "training_dataset", ",", "batch_size", "=", "args", ".", "batch_size_train", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_val_file_path", ",", "transform", "=", "my_transforms", "(", "256", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size_val", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "Num_val_imgs_1", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_2", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_3", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_4", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_all", "=", "Num_val_imgs_1", "+", "Num_val_imgs_2", "+", "Num_val_imgs_3", "+", "Num_val_imgs_4", "\n", "\n", "optimizer_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "ENCODER", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "optimizer_decoder", "=", "torch", ".", "optim", ".", "Adam", "(", "DECODER", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# result folder", "\n", "res_folder_name", "=", "args", ".", "save_root", "+", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "res_folder_name", ")", "\n", "os", ".", "mkdir", "(", "res_folder_name", "+", "'/ckpt/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: RESULT PATH ALREADY EXISTED -> \"", "+", "res_folder_name", ")", "\n", "", "print", "(", "'find models here: '", ",", "res_folder_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "res_folder_name", ")", "\n", "f1", "=", "open", "(", "res_folder_name", "+", "\"/training_log.csv\"", ",", "'a+'", ")", "\n", "\n", "# training", "\n", "steps_per_epoch", "=", "len", "(", "training_dataloader", ")", "\n", "Best_AUC", "=", "0.0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "warm_start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "        ", "step_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "step_cls_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "step_msk_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "step_rect_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "tqdm", "(", "training_dataloader", ")", ")", ":", "\n", "            ", "ENCODER", ".", "train", "(", ")", "\n", "DECODER", ".", "train", "(", ")", "\n", "optimizer_encoder", ".", "zero_grad", "(", ")", "\n", "optimizer_decoder", ".", "zero_grad", "(", ")", "\n", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "masks", "=", "data", "[", "'masks'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "\n", "latent", "=", "ENCODER", "(", "faces", ")", ".", "reshape", "(", "-", "1", ",", "2", ",", "64", ",", "16", ",", "16", ")", "\n", "\n", "zero_abs", "=", "torch", ".", "abs", "(", "latent", "[", ":", ",", "0", "]", ")", ".", "view", "(", "latent", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "zero", "=", "zero_abs", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "one_abs", "=", "torch", ".", "abs", "(", "latent", "[", ":", ",", "1", "]", ")", ".", "view", "(", "latent", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "one", "=", "one_abs", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "loss_act", "=", "act_loss_fn", "(", "zero", ",", "one", ",", "labels", ")", "\n", "loss_act_data", "=", "loss_act", ".", "item", "(", ")", "\n", "\n", "y", "=", "torch", ".", "eye", "(", "2", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "\n", "y", "=", "y", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "labels", ".", "data", ".", "long", "(", ")", ")", "\n", "latent", "=", "(", "latent", "*", "y", "[", ":", ",", ":", ",", "None", ",", "None", ",", "None", "]", ")", ".", "reshape", "(", "-", "1", ",", "128", ",", "16", ",", "16", ")", "\n", "\n", "seg", ",", "rect", "=", "DECODER", "(", "latent", ")", "\n", "\n", "loss_seg", "=", "criterion", "(", "seg", ",", "masks", ")", "\n", "loss_seg_data", "=", "loss_seg", ".", "item", "(", ")", "\n", "\n", "loss_rect", "=", "rect_loss_fn", "(", "rect", ",", "faces", ")", "\n", "loss_rect_data", "=", "loss_rect", ".", "item", "(", ")", "\n", "\n", "loss_total", "=", "loss_act", "+", "loss_seg", "+", "loss_rect", "\n", "loss_total", ".", "backward", "(", ")", "\n", "\n", "step_loss", "[", "step", "]", "=", "loss_total", "\n", "step_cls_loss", "[", "step", "]", "=", "loss_act", "\n", "step_msk_loss", "[", "step", "]", "=", "loss_seg", "\n", "step_rect_loss", "[", "step", "]", "=", "loss_rect", "\n", "\n", "optimizer_decoder", ".", "step", "(", ")", "\n", "optimizer_encoder", ".", "step", "(", ")", "\n", "\n", "Global_step", "=", "epoch", "*", "steps_per_epoch", "+", "(", "step", "+", "1", ")", "\n", "\n", "if", "Global_step", "%", "args", ".", "disp_step", "==", "0", ":", "\n", "                ", "avg_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_cls_loss", "=", "np", ".", "mean", "(", "step_cls_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_msk_loss", "=", "np", ".", "mean", "(", "step_msk_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_rect_loss", "=", "np", ".", "mean", "(", "step_rect_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "step_log_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d |average loss: %f |average class loss: %f |average mask loss: %f |average rect loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "avg_loss", ",", "avg_cls_loss", ",", "avg_msk_loss", ",", "avg_rect_loss", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "Global_step", ")", "\n", "print", "(", "'\\n'", ",", "step_log_msg", ")", "\n", "\n", "", "if", "Global_step", "%", "args", ".", "save_model", "==", "0", "or", "Global_step", "%", "steps_per_epoch", "==", "0", ":", "\n", "                ", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "avg_train_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_train_loss_list", "=", "np", ".", "append", "(", "avg_train_loss_list", ",", "avg_train_loss", ")", "\n", "log_msg", "=", "'[%s] Epoch: %d/%d | 1/10 average epoch loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "avg_train_loss", ")", "\n", "print", "(", "'\\n'", ",", "log_msg", ")", "\n", "f1", ".", "write", "(", "log_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# validation", "\n", "val_loss", ",", "pred", ",", "y", ",", "ACC", "=", "val", "(", "ENCODER", ",", "DECODER", ",", "val_dataloader", ",", "Num_val_all", ")", "\n", "threshold", "=", "0.5", "\n", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", "=", "get_metrics", "(", "pred", ",", "y", ",", "threshold", ")", "\n", "val_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d | average df validation loss: %f | AUC: %f | ACC: %f| FPR: %f| FNR: %f| EER: %f| AP: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "val_loss", ",", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", ")", "\n", "print", "(", "'\\n'", ",", "val_msg", ")", "\n", "f1", ".", "write", "(", "val_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# save model", "\n", "if", "AUC", ">", "Best_AUC", "and", "Global_step", ">", "50000", ":", "\n", "                    ", "Best_AUC", "=", "AUC", "\n", "torch", ".", "save", "(", "ENCODER", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'encoder_best.pth'", ")", "\n", "torch", ".", "save", "(", "DECODER", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'decoder_best.pth'", ")", "\n", "np", ".", "save", "(", "res_folder_name", "+", "'/avg_train_loss_list.np'", ",", "avg_train_loss_list", ")", "\n", "f1", ".", "write", "(", "'Saved model.'", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "", "", "f1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_multitask.main": [[269, 275], ["arch.multitask.Encoder", "arch.multitask.Decoder", "print", "print", "TRAIN_cross_multitask.train", "sum", "sum", "numpy.prod", "numpy.prod", "p.size", "arch.multitask.Encoder.parameters", "p.size", "arch.multitask.Decoder.parameters"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "encoder", "=", "Encoder", "(", "3", ")", "\n", "decoder", "=", "Decoder", "(", "3", ")", "\n", "print", "(", "\"number of encoder parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "encoder", ".", "parameters", "(", ")", "]", ")", ")", "\n", "print", "(", "\"number of decoder parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "decoder", ".", "parameters", "(", ")", "]", ")", ")", "\n", "train", "(", "args", ",", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_xcep.parse_args": [[20, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'cq'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "2e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "default", "=", "999999999", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "12", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_step'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--save_root'", ",", "default", "=", "'./Training_results/Cross_df/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"Xception/\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_xcep.fix_seed": [[39, 48], ["torch.cuda.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "str"], "function", ["None"], ["", "def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_xcep.val": [[49, 69], ["print", "model.eval", "numpy.zeros", "numpy.zeros", "enumerate", "round", "tqdm.tqdm", "torch.no_grad", "data[].to", "data[].to", "model", "torch.squeeze", "criterion", "batch_val_losses.append", "torch.squeeze.cpu().numpy", "data[].to.cpu().numpy", "sum", "len", "torch.sigmoid", "torch.squeeze", "criterion.item", "torch.squeeze.cpu", "data[].to.cpu"], "function", ["None"], ["", "def", "val", "(", "model", ",", "dataloader", ",", "num_imgs", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_val_losses", "=", "[", "]", "\n", "SCORE", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "LABEL", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "for", "num", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "label_cls", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "x", "=", "model", "(", "faces", ")", "\n", "pred_score", "=", "torch", ".", "squeeze", "(", "torch", ".", "sigmoid", "(", "x", ")", ",", "1", ")", "\n", "val_loss", "=", "criterion", "(", "torch", ".", "squeeze", "(", "x", ",", "1", ")", ",", "label_cls", ")", "\n", "batch_val_losses", ".", "append", "(", "val_loss", ".", "item", "(", ")", ")", "\n", "SCORE", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "pred_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "LABEL", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "avg_val_loss", "=", "round", "(", "sum", "(", "batch_val_losses", ")", "/", "(", "len", "(", "batch_val_losses", ")", ")", ",", "5", ")", "\n", "pred", "=", "SCORE", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "y_true", "=", "LABEL", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "avg_val_loss", ",", "pred", ",", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_xcep.combine_csv": [[71, 77], ["range", "os.system", "len"], "function", ["None"], ["", "def", "combine_csv", "(", "file_array", ",", "result_name", ")", ":", "\n", "    ", "combine_cmd", "=", "\"cat \"", "\n", "for", "i", "in", "range", "(", "len", "(", "file_array", ")", ")", ":", "\n", "        ", "combine_cmd", "+=", "(", "file_array", "[", "i", "]", "+", "\" \"", ")", "\n", "", "combine_cmd", "+=", "\" > \"", "+", "result_name", "\n", "os", ".", "system", "(", "combine_cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_xcep.train": [[79, 191], ["numpy.array", "TRAIN_cross_xcep.combine_csv", "TRAIN_cross_xcep.combine_csv", "opt.dataloader.face_Dataset", "torch.utils.data.DataLoader", "opt.dataloader.face_Dataset", "torch.utils.data.DataLoader", "len", "len", "len", "len", "torch.optim.Adam", "print", "torch.utils.tensorboard.SummaryWriter", "open", "len", "range", "open.close", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "model.parameters", "os.path.exists", "os.makedirs", "os.mkdir", "print", "numpy.zeros", "enumerate", "opt.dataloader.my_transforms", "opt.dataloader.my_transforms", "tqdm.tqdm", "model.train", "torch.optim.Adam.zero_grad", "data[].to", "data[].to", "torch.squeeze", "criterion", "batch_train_losses.append", "criterion.backward", "torch.optim.Adam.step", "model", "criterion.item", "numpy.mean", "datetime.datetime.now().strftime", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "datetime.datetime.now().strftime", "numpy.mean", "numpy.append", "print", "open.write", "open.write", "TRAIN_cross_xcep.val", "utils.metrics_cross.get_metrics", "print", "open.write", "open.write", "torch.optim.Adam", "torch.save", "numpy.save", "print", "open.write", "open.write", "model.parameters", "datetime.datetime.now", "datetime.datetime.now", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.val", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "train", "(", "args", ",", "model", ")", ":", "\n", "    ", "avg_train_loss_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "train_csv_file_df_c23", "=", "'./misc_cross/Train/c23_df_train.csv'", "\n", "train_csv_file_or_c23", "=", "'./misc_cross/Train/c23_or_train.csv'", "\n", "train_csv_file_df_c40", "=", "'./misc_cross/Train/c40_df_train.csv'", "\n", "train_csv_file_or_c40", "=", "'./misc_cross/Train/c40_or_train.csv'", "\n", "\n", "val_csv_file_df_c23", "=", "'./misc_cross/Val100/c23_df_val.csv'", "\n", "val_csv_file_or_c23", "=", "'./misc_cross/Val100/c23_or_val.csv'", "\n", "val_csv_file_df_c40", "=", "'./misc_cross/Val100/c40_df_val.csv'", "\n", "val_csv_file_or_c40", "=", "'./misc_cross/Val100/c40_or_val.csv'", "\n", "\n", "training_csv_files", "=", "[", "train_csv_file_df_c23", ",", "train_csv_file_or_c23", ",", "train_csv_file_df_c40", ",", "train_csv_file_or_c40", "]", "\n", "val_csv_files", "=", "[", "val_csv_file_df_c23", ",", "val_csv_file_or_c23", ",", "val_csv_file_df_c40", ",", "val_csv_file_or_c40", "]", "\n", "\n", "tem_train_file_name", "=", "'training_xcep_cross_train'", "\n", "tem_val_file_name", "=", "'training_xcep_cross_val'", "\n", "combine_csv", "(", "training_csv_files", ",", "tem_train_file_name", ")", "\n", "combine_csv", "(", "val_csv_files", ",", "tem_val_file_name", ")", "\n", "tem_train_file_path", "=", "args", ".", "root_path", "+", "tem_train_file_name", "\n", "tem_val_file_path", "=", "args", ".", "root_path", "+", "tem_val_file_name", "\n", "\n", "training_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_train_file_path", ",", "\n", "transform", "=", "my_transforms", "(", "299", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "training_dataloader", "=", "DataLoader", "(", "training_dataset", ",", "batch_size", "=", "args", ".", "batch_size_train", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_val_file_path", ",", "transform", "=", "my_transforms", "(", "299", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size_val", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "Num_val_imgs_1", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_2", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_3", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_4", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_all", "=", "Num_val_imgs_1", "+", "Num_val_imgs_2", "+", "Num_val_imgs_3", "+", "Num_val_imgs_4", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# result folder", "\n", "res_folder_name", "=", "args", ".", "save_root", "+", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "res_folder_name", ")", "\n", "os", ".", "mkdir", "(", "res_folder_name", "+", "'/ckpt/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: RESULT PATH ALREADY EXISTED -> \"", "+", "res_folder_name", ")", "\n", "", "print", "(", "'find models here: '", ",", "res_folder_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "res_folder_name", ")", "\n", "f1", "=", "open", "(", "res_folder_name", "+", "\"/training_log.csv\"", ",", "'a+'", ")", "\n", "\n", "Best_AUC", "=", "0", "\n", "# training", "\n", "steps_per_epoch", "=", "len", "(", "training_dataloader", ")", "\n", "Learning_Rate", "=", "args", ".", "lr", "\n", "for", "epoch", "in", "range", "(", "args", ".", "warm_start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "batch_train_losses", "=", "[", "]", "\n", "step_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "tqdm", "(", "training_dataloader", ")", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "frames", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "predicted_label", "=", "torch", ".", "squeeze", "(", "model", "(", "frames", ")", ",", "1", ")", "\n", "loss", "=", "criterion", "(", "predicted_label", ",", "labels", ")", "\n", "step_loss", "[", "step", "]", "=", "loss", "\n", "batch_train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "Global_step", "=", "epoch", "*", "steps_per_epoch", "+", "(", "step", "+", "1", ")", "\n", "\n", "if", "Global_step", "%", "args", ".", "disp_step", "==", "0", ":", "\n", "                ", "avg_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "step_log_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d |average loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "avg_loss", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "Global_step", ")", "\n", "print", "(", "'\\n'", ",", "step_log_msg", ")", "\n", "\n", "", "if", "Global_step", "%", "args", ".", "save_model", "==", "0", ":", "\n", "                ", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "avg_train_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_train_loss_list", "=", "np", ".", "append", "(", "avg_train_loss_list", ",", "avg_train_loss", ")", "\n", "log_msg", "=", "'[%s] Epoch: %d/%d | 1/10 average epoch loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "avg_train_loss", ")", "\n", "print", "(", "'\\n'", ",", "log_msg", ")", "\n", "f1", ".", "write", "(", "log_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# validation", "\n", "val_loss", ",", "pred", ",", "y", "=", "val", "(", "model", ",", "val_dataloader", ",", "Num_val_all", ")", "\n", "threshold", "=", "0.5", "\n", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", "=", "get_metrics", "(", "pred", ",", "y", ",", "threshold", ")", "\n", "\n", "val_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d | average df validation loss: %f | AUC: %f | ACC: %f| FPR: %f| FTR: %f| EER: %f| AP: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "val_loss", ",", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", ")", "\n", "print", "(", "'\\n'", ",", "val_msg", ")", "\n", "f1", ".", "write", "(", "val_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# save model", "\n", "if", "AUC", ">", "Best_AUC", "and", "Global_step", ">", "50000", ":", "\n", "                    ", "Best_AUC", "=", "AUC", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'best.pth'", ")", "\n", "np", ".", "save", "(", "res_folder_name", "+", "'/avg_train_loss_list.np'", ",", "avg_train_loss_list", ")", "\n", "cur_learning_rate", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "print", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "if", "Global_step", "%", "args", ".", "lr_decay_step", "==", "0", ":", "\n", "                ", "Learning_Rate", "=", "Learning_Rate", "*", "args", ".", "lr_decay_rate", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "Learning_Rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "", "", "f1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_xcep.main": [[193, 199], ["arch.xception.xception", "model.to.to", "print", "print", "TRAIN_cross_xcep.train", "sum", "numpy.prod", "p.size", "model.to.parameters"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception.xception", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "model", "=", "xception", "(", "pretrained", "=", "True", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "\"number of model parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "train", "(", "args", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_mesoincep4.parse_args": [[21, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'cq'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "2e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "12", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_step'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--save_root'", ",", "default", "=", "'./Training_results/Cross_df/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"MesoIncep4/\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_mesoincep4.fix_seed": [[39, 48], ["torch.cuda.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "str"], "function", ["None"], ["", "def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_mesoincep4.val": [[50, 72], ["print", "model.eval", "numpy.zeros", "numpy.zeros", "enumerate", "round", "tqdm.tqdm", "torch.no_grad", "data[].to", "data[].to", "model", "torch.squeeze", "criterion", "batch_val_losses.append", "torch.squeeze.cpu().numpy", "data[].to.cpu().numpy", "sum", "len", "torch.sigmoid", "torch.squeeze", "criterion.item", "torch.squeeze.cpu", "data[].to.cpu"], "function", ["None"], ["", "def", "val", "(", "model", ",", "dataloader", ",", "num_imgs", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_val_losses", "=", "[", "]", "\n", "SCORE", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "LABEL", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "for", "num", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "label_cls", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "x", "=", "model", "(", "faces", ")", "\n", "pred_score", "=", "torch", ".", "squeeze", "(", "torch", ".", "sigmoid", "(", "x", ")", ",", "1", ")", "\n", "val_loss", "=", "criterion", "(", "torch", ".", "squeeze", "(", "x", ",", "1", ")", ",", "label_cls", ")", "\n", "batch_val_losses", ".", "append", "(", "val_loss", ".", "item", "(", ")", ")", "\n", "SCORE", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "pred_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "LABEL", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "avg_val_loss", "=", "round", "(", "sum", "(", "batch_val_losses", ")", "/", "(", "len", "(", "batch_val_losses", ")", ")", ",", "5", ")", "\n", "pred", "=", "SCORE", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "y_true", "=", "LABEL", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "return", "avg_val_loss", ",", "pred", ",", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_mesoincep4.combine_csv": [[74, 80], ["range", "os.system", "len"], "function", ["None"], ["", "def", "combine_csv", "(", "file_array", ",", "result_name", ")", ":", "\n", "    ", "combine_cmd", "=", "\"cat \"", "\n", "for", "i", "in", "range", "(", "len", "(", "file_array", ")", ")", ":", "\n", "        ", "combine_cmd", "+=", "(", "file_array", "[", "i", "]", "+", "\" \"", ")", "\n", "", "combine_cmd", "+=", "\" > \"", "+", "result_name", "\n", "os", ".", "system", "(", "combine_cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_mesoincep4.train": [[82, 190], ["numpy.array", "TRAIN_cross_mesoincep4.combine_csv", "TRAIN_cross_mesoincep4.combine_csv", "opt.dataloader.face_Dataset", "torch.utils.data.DataLoader", "opt.dataloader.face_Dataset", "torch.utils.data.DataLoader", "len", "len", "len", "len", "torch.optim.Adam", "print", "torch.utils.tensorboard.SummaryWriter", "open", "len", "range", "open.close", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "model.parameters", "os.path.exists", "os.makedirs", "os.mkdir", "print", "numpy.zeros", "enumerate", "opt.dataloader.my_transforms", "opt.dataloader.my_transforms", "tqdm.tqdm", "model.train", "torch.optim.Adam.zero_grad", "data[].to", "data[].to", "torch.squeeze", "criterion", "batch_train_losses.append", "criterion.backward", "torch.optim.Adam.step", "model", "criterion.item", "numpy.mean", "datetime.datetime.now().strftime", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "datetime.datetime.now().strftime", "numpy.mean", "numpy.append", "print", "open.write", "open.write", "TRAIN_cross_mesoincep4.val", "utils.metrics_cross.get_metrics", "print", "open.write", "open.write", "torch.save", "numpy.save", "print", "open.write", "open.write", "datetime.datetime.now", "datetime.datetime.now", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.val", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "train", "(", "args", ",", "model", ")", ":", "\n", "    ", "avg_train_loss_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "train_csv_file_df_c23", "=", "'./misc_cross/Train/c23_df_train.csv'", "\n", "train_csv_file_or_c23", "=", "'./misc_cross/Train/c23_or_train.csv'", "\n", "train_csv_file_df_c40", "=", "'./misc_cross/Train/c40_df_train.csv'", "\n", "train_csv_file_or_c40", "=", "'./misc_cross/Train/c40_or_train.csv'", "\n", "\n", "val_csv_file_df_c23", "=", "'./misc_cross/Val100/c23_df_val.csv'", "\n", "val_csv_file_or_c23", "=", "'./misc_cross/Val100/c23_or_val.csv'", "\n", "val_csv_file_df_c40", "=", "'./misc_cross/Val100/c40_df_val.csv'", "\n", "val_csv_file_or_c40", "=", "'./misc_cross/Val100/c40_or_val.csv'", "\n", "\n", "training_csv_files", "=", "[", "train_csv_file_df_c23", ",", "train_csv_file_or_c23", ",", "train_csv_file_df_c40", ",", "train_csv_file_or_c40", "]", "\n", "val_csv_files", "=", "[", "val_csv_file_df_c23", ",", "val_csv_file_or_c23", ",", "val_csv_file_df_c40", ",", "val_csv_file_or_c40", "]", "\n", "\n", "tem_train_file_name", "=", "'training_mesoincep4_cross_train'", "\n", "tem_val_file_name", "=", "'training_mesoincep4_cross_val'", "\n", "combine_csv", "(", "training_csv_files", ",", "tem_train_file_name", ")", "\n", "combine_csv", "(", "val_csv_files", ",", "tem_val_file_name", ")", "\n", "tem_train_file_path", "=", "args", ".", "root_path", "+", "tem_train_file_name", "\n", "tem_val_file_path", "=", "args", ".", "root_path", "+", "tem_val_file_name", "\n", "\n", "training_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_train_file_path", ",", "\n", "transform", "=", "my_transforms", "(", "256", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "training_dataloader", "=", "DataLoader", "(", "training_dataset", ",", "batch_size", "=", "args", ".", "batch_size_train", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_val_file_path", ",", "transform", "=", "my_transforms", "(", "256", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size_val", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "Num_val_imgs_1", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_2", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_3", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_4", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_all", "=", "Num_val_imgs_1", "+", "Num_val_imgs_2", "+", "Num_val_imgs_3", "+", "Num_val_imgs_4", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# result folder", "\n", "res_folder_name", "=", "args", ".", "save_root", "+", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "res_folder_name", ")", "\n", "os", ".", "mkdir", "(", "res_folder_name", "+", "'/ckpt/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: RESULT PATH ALREADY EXISTED -> \"", "+", "res_folder_name", ")", "\n", "", "print", "(", "'find models here: '", ",", "res_folder_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "res_folder_name", ")", "\n", "f1", "=", "open", "(", "res_folder_name", "+", "\"/training_log.csv\"", ",", "'a+'", ")", "\n", "\n", "# training", "\n", "steps_per_epoch", "=", "len", "(", "training_dataloader", ")", "\n", "Learning_Rate", "=", "args", ".", "lr", "\n", "Best_AUC", "=", "0.0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "warm_start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "batch_train_losses", "=", "[", "]", "\n", "step_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "tqdm", "(", "training_dataloader", ")", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "frames", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "predicted_label", "=", "torch", ".", "squeeze", "(", "model", "(", "frames", ")", ",", "1", ")", "\n", "loss", "=", "criterion", "(", "predicted_label", ",", "labels", ")", "\n", "step_loss", "[", "step", "]", "=", "loss", "\n", "batch_train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "Global_step", "=", "epoch", "*", "steps_per_epoch", "+", "(", "step", "+", "1", ")", "\n", "\n", "if", "Global_step", "%", "args", ".", "disp_step", "==", "0", ":", "\n", "                ", "avg_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "step_log_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d |average loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "avg_loss", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "Global_step", ")", "\n", "print", "(", "'\\n'", ",", "step_log_msg", ")", "\n", "\n", "", "if", "Global_step", "%", "args", ".", "save_model", "==", "0", ":", "\n", "                ", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "avg_train_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_train_loss_list", "=", "np", ".", "append", "(", "avg_train_loss_list", ",", "avg_train_loss", ")", "\n", "log_msg", "=", "'[%s] Epoch: %d/%d | 1/10 average epoch loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "avg_train_loss", ")", "\n", "print", "(", "'\\n'", ",", "log_msg", ")", "\n", "f1", ".", "write", "(", "log_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# validation", "\n", "val_loss", ",", "pred", ",", "y", "=", "val", "(", "model", ",", "val_dataloader", ",", "Num_val_all", ")", "\n", "threshold", "=", "0.5", "\n", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", "=", "get_metrics", "(", "pred", ",", "y", ",", "threshold", ")", "\n", "\n", "val_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d | average df validation loss: %f | AUC: %f | ACC: %f| FPR: %f| FTR: %f| EER: %f| AP: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "val_loss", ",", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", ")", "\n", "print", "(", "'\\n'", ",", "val_msg", ")", "\n", "f1", ".", "write", "(", "val_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# save model", "\n", "if", "AUC", ">", "Best_AUC", "and", "Global_step", ">", "50000", ":", "\n", "                    ", "Best_AUC", "=", "AUC", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'best.pth'", ")", "\n", "np", ".", "save", "(", "res_folder_name", "+", "'/avg_train_loss_list.np'", ",", "avg_train_loss_list", ")", "\n", "cur_learning_rate", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "print", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "", "", "", "", "f1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_mesoincep4.main": [[192, 198], ["arch.Meso.MesoInception4", "model.to.to", "print", "print", "TRAIN_cross_mesoincep4.train", "sum", "numpy.prod", "p.size", "model.to.parameters"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "model", "=", "MesoInception4", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "\"number of model parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "train", "(", "args", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_xcep.parse_args": [[20, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'cq'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "2e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "12", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_step'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--save_root'", ",", "default", "=", "'./Training_results/Xception_baseline/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--train_csv'", ",", "default", "=", "'./misc_intra/Train/train.csv'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--val_csv'", ",", "default", "=", "'./misc_intra/Val100/val.csv'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"Xcepbaseline/\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_xcep.fix_seed": [[39, 48], ["torch.cuda.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "str"], "function", ["None"], ["", "def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_xcep.validation": [[49, 70], ["print", "model.eval", "numpy.zeros", "numpy.zeros", "enumerate", "round", "utils.metrics_intra.get_metrics", "tqdm.tqdm", "torch.no_grad", "data[].to", "data[].to", "model", "criterion", "torch.squeeze", "batch_val_losses.append", "torch.squeeze.cpu().numpy", "data[].to.cpu().numpy", "sum", "len", "torch.squeeze", "torch.sigmoid", "criterion.item", "torch.squeeze.cpu", "data[].to.cpu"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics"], ["", "def", "validation", "(", "model", ",", "dataloader", ",", "num_imgs", ",", "thre", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_val_losses", "=", "[", "]", "\n", "SCORE", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "LABEL", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "for", "num", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "label_cls", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "x", "=", "model", "(", "faces", ")", "\n", "val_loss", "=", "criterion", "(", "torch", ".", "squeeze", "(", "x", ",", "1", ")", ",", "label_cls", ")", "\n", "pred_score", "=", "torch", ".", "squeeze", "(", "torch", ".", "sigmoid", "(", "x", ")", ",", "1", ")", "\n", "batch_val_losses", ".", "append", "(", "val_loss", ".", "item", "(", ")", ")", "\n", "SCORE", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "pred_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "LABEL", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "avg_val_loss", "=", "round", "(", "sum", "(", "batch_val_losses", ")", "/", "(", "len", "(", "batch_val_losses", ")", ")", ",", "5", ")", "\n", "pred", "=", "SCORE", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "y_true", "=", "LABEL", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "AUC", ",", "ACC", "=", "get_metrics", "(", "pred", ",", "y_true", ",", "thre", ")", "\n", "return", "avg_val_loss", ",", "AUC", ",", "ACC", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_xcep.train": [[72, 147], ["numpy.array", "opt.dataloader2.face_Dataset", "torch.utils.data.DataLoader", "opt.dataloader2.face_Dataset", "torch.utils.data.DataLoader", "len", "torch.optim.Adam", "print", "torch.utils.tensorboard.SummaryWriter", "open", "len", "range", "open.close", "pandas.read_csv", "model.parameters", "os.path.exists", "os.makedirs", "os.mkdir", "print", "numpy.zeros", "enumerate", "opt.dataloader2.my_transforms", "opt.dataloader2.my_transforms", "tqdm.tqdm", "model.train", "torch.optim.Adam.zero_grad", "data[].to", "data[].to", "torch.squeeze", "criterion", "batch_train_losses.append", "criterion.backward", "torch.optim.Adam.step", "model", "criterion.item", "numpy.mean", "datetime.datetime.now().strftime", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "datetime.datetime.now().strftime", "numpy.mean", "numpy.append", "print", "open.write", "open.write", "TRAIN_xcep.validation", "print", "open.write", "open.write", "torch.save", "numpy.save", "print", "open.write", "open.write", "datetime.datetime.now", "datetime.datetime.now", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.validation", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "train", "(", "args", ",", "model", ")", ":", "\n", "    ", "avg_train_loss_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "training_dataset", "=", "face_Dataset", "(", "csv_file", "=", "args", ".", "train_csv", ",", "transform", "=", "my_transforms", "(", "299", ",", "RandomHorizontalFlip", "=", "True", ")", ")", "\n", "training_dataloader", "=", "DataLoader", "(", "training_dataset", ",", "batch_size", "=", "args", ".", "batch_size_train", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "face_Dataset", "(", "csv_file", "=", "args", ".", "val_csv", ",", "transform", "=", "my_transforms", "(", "299", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size_val", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "Num_val_imgs", "=", "len", "(", "pd", ".", "read_csv", "(", "args", ".", "val_csv", ",", "header", "=", "None", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# result folder", "\n", "res_folder_name", "=", "args", ".", "save_root", "+", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "res_folder_name", ")", "\n", "os", ".", "mkdir", "(", "res_folder_name", "+", "'/ckpt/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: RESULT PATH ALREADY EXISTED -> \"", "+", "res_folder_name", ")", "\n", "", "print", "(", "'find models here: '", ",", "res_folder_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "res_folder_name", ")", "\n", "f1", "=", "open", "(", "res_folder_name", "+", "\"/training_log.csv\"", ",", "'a+'", ")", "\n", "Best_AUC", "=", "0", "\n", "# training", "\n", "steps_per_epoch", "=", "len", "(", "training_dataloader", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "warm_start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "batch_train_losses", "=", "[", "]", "\n", "step_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "tqdm", "(", "training_dataloader", ")", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "frames", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "predicted_label", "=", "torch", ".", "squeeze", "(", "model", "(", "frames", ")", ",", "1", ")", "\n", "loss", "=", "criterion", "(", "predicted_label", ",", "labels", ")", "\n", "step_loss", "[", "step", "]", "=", "loss", "\n", "batch_train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "Global_step", "=", "epoch", "*", "steps_per_epoch", "+", "(", "step", "+", "1", ")", "\n", "\n", "if", "Global_step", "%", "args", ".", "disp_step", "==", "0", ":", "\n", "                ", "avg_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "step_log_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d |average loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "avg_loss", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "Global_step", ")", "\n", "print", "(", "'\\n'", ",", "step_log_msg", ")", "\n", "\n", "", "if", "Global_step", "%", "args", ".", "save_model", "==", "0", ":", "\n", "                ", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "avg_train_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_train_loss_list", "=", "np", ".", "append", "(", "avg_train_loss_list", ",", "avg_train_loss", ")", "\n", "log_msg", "=", "'[%s] Epoch: %d/%d | 1/10 average epoch loss: %f'", "%", "(", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "avg_train_loss", ")", "\n", "print", "(", "'\\n'", ",", "log_msg", ")", "\n", "f1", ".", "write", "(", "log_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# validation", "\n", "val_loss", ",", "AUC", ",", "ACC", "=", "validation", "(", "model", ",", "val_dataloader", ",", "Num_val_imgs", ",", "0.5", ")", "\n", "val_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d | average validation loss: %f | ACC: %f| AUC: %f'", "%", "(", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "val_loss", ",", "ACC", ",", "AUC", ")", "\n", "print", "(", "'\\n'", ",", "val_msg", ")", "\n", "f1", ".", "write", "(", "val_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# save model", "\n", "if", "AUC", ">", "Best_AUC", "and", "Global_step", ">", "30000", ":", "\n", "                    ", "Best_AUC", "=", "AUC", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'best.pth'", ")", "\n", "np", ".", "save", "(", "res_folder_name", "+", "'/avg_train_loss_list.np'", ",", "avg_train_loss_list", ")", "\n", "cur_learning_rate", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "print", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "", "", "", "", "f1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_xcep.main": [[149, 155], ["arch.xception.xception", "model.to.to", "print", "print", "TRAIN_xcep.train", "sum", "numpy.prod", "p.size", "model.to.parameters"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception.xception", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "model", "=", "xception", "(", "pretrained", "=", "True", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "\"number of model parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "train", "(", "args", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_Facexray.parse_args": [[20, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'cq'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "2e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "default", "=", "999999999", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "24", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "default", "=", "48", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "12", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_step'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--save_root'", ",", "default", "=", "'./Training_results/Cross_df/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"FaceXrayUnet/\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_Facexray.fix_seed": [[39, 48], ["torch.cuda.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "str"], "function", ["None"], ["", "def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_Facexray.val": [[50, 71], ["print", "model.eval", "numpy.zeros", "numpy.zeros", "enumerate", "round", "tqdm.tqdm", "torch.no_grad", "data[].to", "data[].to", "model", "torch.squeeze", "criterion", "batch_val_losses.append", "torch.squeeze.cpu().numpy", "data[].to.cpu().numpy", "sum", "len", "torch.sigmoid", "torch.squeeze", "criterion.item", "torch.squeeze.cpu", "data[].to.cpu"], "function", ["None"], ["", "def", "val", "(", "model", ",", "dataloader", ",", "num_imgs", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_val_losses", "=", "[", "]", "\n", "SCORE", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "LABEL", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "for", "num", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "label_cls", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "_", ",", "x", "=", "model", "(", "faces", ")", "\n", "pred_score", "=", "torch", ".", "squeeze", "(", "torch", ".", "sigmoid", "(", "x", ")", ",", "1", ")", "\n", "val_loss", "=", "criterion", "(", "torch", ".", "squeeze", "(", "x", ",", "1", ")", ",", "label_cls", ")", "\n", "batch_val_losses", ".", "append", "(", "val_loss", ".", "item", "(", ")", ")", "\n", "SCORE", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "pred_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "LABEL", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "avg_val_loss", "=", "round", "(", "sum", "(", "batch_val_losses", ")", "/", "(", "len", "(", "batch_val_losses", ")", ")", ",", "5", ")", "\n", "pred", "=", "SCORE", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "y_true", "=", "LABEL", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "avg_val_loss", ",", "pred", ",", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_Facexray.combine_csv": [[73, 79], ["range", "os.system", "len"], "function", ["None"], ["", "def", "combine_csv", "(", "file_array", ",", "result_name", ")", ":", "\n", "    ", "combine_cmd", "=", "\"cat \"", "\n", "for", "i", "in", "range", "(", "len", "(", "file_array", ")", ")", ":", "\n", "        ", "combine_cmd", "+=", "(", "file_array", "[", "i", "]", "+", "\" \"", ")", "\n", "", "combine_cmd", "+=", "\" > \"", "+", "result_name", "\n", "os", ".", "system", "(", "combine_cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_Facexray.train": [[81, 196], ["numpy.array", "TRAIN_cross_Facexray.combine_csv", "TRAIN_cross_Facexray.combine_csv", "opt.dataloader_facexray.face_Dataset", "torch.utils.data.DataLoader", "opt.dataloader_facexray.face_Dataset", "torch.utils.data.DataLoader", "len", "len", "len", "len", "torch.optim.Adam", "print", "torch.utils.tensorboard.SummaryWriter", "open", "len", "range", "open.close", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "model.parameters", "os.path.exists", "os.makedirs", "os.mkdir", "print", "numpy.zeros", "enumerate", "opt.dataloader_facexray.my_transforms", "opt.dataloader_facexray.my_transforms", "tqdm.tqdm", "model.train", "torch.optim.Adam.zero_grad", "data[].to", "data[].to", "data[].to", "model", "torch.squeeze", "criterion", "criterion", "batch_train_losses.append", "loss.backward", "torch.optim.Adam.step", "loss.item", "numpy.mean", "datetime.datetime.now().strftime", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "datetime.datetime.now().strftime", "numpy.mean", "numpy.append", "print", "open.write", "open.write", "TRAIN_cross_Facexray.val", "utils.metrics_cross.get_metrics", "print", "open.write", "open.write", "torch.optim.Adam", "torch.save", "numpy.save", "print", "open.write", "open.write", "model.parameters", "datetime.datetime.now", "datetime.datetime.now", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.val", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "train", "(", "args", ",", "model", ")", ":", "\n", "    ", "avg_train_loss_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "train_csv_file_df_c23", "=", "'./misc_cross/Train/c23_df_train.csv'", "\n", "train_csv_file_or_c23", "=", "'./misc_cross/Train/c23_or_train.csv'", "\n", "train_csv_file_df_c40", "=", "'./misc_cross/Train/c40_df_train.csv'", "\n", "train_csv_file_or_c40", "=", "'./misc_cross/Train/c40_or_train.csv'", "\n", "\n", "val_csv_file_df_c23", "=", "'./misc_cross/Val100/c23_df_val.csv'", "\n", "val_csv_file_or_c23", "=", "'./misc_cross/Val100/c23_or_val.csv'", "\n", "val_csv_file_df_c40", "=", "'./misc_cross/Val100/c40_df_val.csv'", "\n", "val_csv_file_or_c40", "=", "'./misc_cross/Val100/c40_or_val.csv'", "\n", "\n", "training_csv_files", "=", "[", "train_csv_file_df_c23", ",", "train_csv_file_or_c23", ",", "train_csv_file_df_c40", ",", "train_csv_file_or_c40", "]", "\n", "val_csv_files", "=", "[", "val_csv_file_df_c23", ",", "val_csv_file_or_c23", ",", "val_csv_file_df_c40", ",", "val_csv_file_or_c40", "]", "\n", "\n", "tem_train_file_name", "=", "'training_facexrayu_cross_train'", "\n", "tem_val_file_name", "=", "'training_facexrayu_cross_val'", "\n", "combine_csv", "(", "training_csv_files", ",", "tem_train_file_name", ")", "\n", "combine_csv", "(", "val_csv_files", ",", "tem_val_file_name", ")", "\n", "tem_train_file_path", "=", "args", ".", "root_path", "+", "tem_train_file_name", "\n", "tem_val_file_path", "=", "args", ".", "root_path", "+", "tem_val_file_name", "\n", "\n", "training_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_train_file_path", ",", "\n", "transform", "=", "my_transforms", "(", "256", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "training_dataloader", "=", "DataLoader", "(", "training_dataset", ",", "batch_size", "=", "args", ".", "batch_size_train", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_val_file_path", ",", "transform", "=", "my_transforms", "(", "256", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size_val", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "Num_val_imgs_1", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_2", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_3", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_4", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_all", "=", "Num_val_imgs_1", "+", "Num_val_imgs_2", "+", "Num_val_imgs_3", "+", "Num_val_imgs_4", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# result folder", "\n", "res_folder_name", "=", "args", ".", "save_root", "+", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "res_folder_name", ")", "\n", "os", ".", "mkdir", "(", "res_folder_name", "+", "'/ckpt/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: RESULT PATH ALREADY EXISTED -> \"", "+", "res_folder_name", ")", "\n", "", "print", "(", "'find models here: '", ",", "res_folder_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "res_folder_name", ")", "\n", "f1", "=", "open", "(", "res_folder_name", "+", "\"/training_log.csv\"", ",", "'a+'", ")", "\n", "\n", "Best_AUC", "=", "0", "\n", "# training", "\n", "steps_per_epoch", "=", "len", "(", "training_dataloader", ")", "\n", "Learning_Rate", "=", "args", ".", "lr", "\n", "for", "epoch", "in", "range", "(", "args", ".", "warm_start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "batch_train_losses", "=", "[", "]", "\n", "step_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "tqdm", "(", "training_dataloader", ")", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "frames", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "mask_labels", "=", "data", "[", "'masks'", "]", ".", "to", "(", "device", ")", "\n", "pred_mask", ",", "pred", "=", "model", "(", "frames", ")", "\n", "predicted_label", "=", "torch", ".", "squeeze", "(", "pred", ",", "1", ")", "\n", "loss_cls", "=", "criterion", "(", "predicted_label", ",", "labels", ")", "\n", "loss_msk", "=", "criterion", "(", "pred_mask", ",", "mask_labels", ")", "\n", "loss", "=", "loss_cls", "+", "loss_msk", "\n", "step_loss", "[", "step", "]", "=", "loss", "\n", "batch_train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "Global_step", "=", "epoch", "*", "steps_per_epoch", "+", "(", "step", "+", "1", ")", "\n", "\n", "if", "Global_step", "%", "args", ".", "disp_step", "==", "0", ":", "\n", "                ", "avg_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "step_log_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d |average loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "avg_loss", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "Global_step", ")", "\n", "print", "(", "'\\n'", ",", "step_log_msg", ")", "\n", "\n", "", "if", "Global_step", "%", "args", ".", "save_model", "==", "0", ":", "\n", "                ", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "avg_train_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_train_loss_list", "=", "np", ".", "append", "(", "avg_train_loss_list", ",", "avg_train_loss", ")", "\n", "log_msg", "=", "'[%s] Epoch: %d/%d | 1/10 average epoch loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "avg_train_loss", ")", "\n", "print", "(", "'\\n'", ",", "log_msg", ")", "\n", "f1", ".", "write", "(", "log_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# validation", "\n", "val_loss", ",", "pred", ",", "y", "=", "val", "(", "model", ",", "val_dataloader", ",", "Num_val_all", ")", "\n", "threshold", "=", "0.5", "\n", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", "=", "get_metrics", "(", "pred", ",", "y", ",", "threshold", ")", "\n", "val_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d | average df validation loss: %f | AUC: %f | ACC: %f| FPR: %f| FTR: %f| EER: %f| AP: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "val_loss", ",", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", ")", "\n", "print", "(", "'\\n'", ",", "val_msg", ")", "\n", "f1", ".", "write", "(", "val_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# save model", "\n", "if", "AUC", ">", "Best_AUC", "and", "Global_step", ">", "50000", ":", "\n", "                    ", "Best_AUC", "=", "AUC", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'best.pth'", ")", "\n", "np", ".", "save", "(", "res_folder_name", "+", "'/avg_train_loss_list.np'", ",", "avg_train_loss_list", ")", "\n", "cur_learning_rate", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "print", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "if", "Global_step", "%", "args", ".", "lr_decay_step", "==", "0", ":", "\n", "                ", "Learning_Rate", "=", "Learning_Rate", "*", "args", ".", "lr_decay_rate", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "Learning_Rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "", "", "f1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_Facexray.main": [[198, 204], ["arch.FaceXray.FaceXrayNet", "model.to.to", "print", "print", "TRAIN_cross_Facexray.train", "sum", "numpy.prod", "p.size", "model.to.parameters"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "model", "=", "FaceXrayNet", "(", "n_channels", "=", "3", ",", "n_classes", "=", "1", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "\"number of model parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "train", "(", "args", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_F3NET.parse_args": [[20, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'cq'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "2e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "default", "=", "999999999", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "12", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_step'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--save_root'", ",", "default", "=", "'./Training_results/Cross_df/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"F3NET/\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_F3NET.fix_seed": [[39, 48], ["torch.cuda.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "str"], "function", ["None"], ["", "def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_F3NET.val": [[49, 69], ["print", "model.eval", "numpy.zeros", "numpy.zeros", "enumerate", "round", "tqdm.tqdm", "torch.no_grad", "data[].to", "data[].to", "model", "torch.squeeze", "criterion", "batch_val_losses.append", "torch.squeeze.cpu().numpy", "data[].to.cpu().numpy", "sum", "len", "torch.sigmoid", "torch.squeeze", "criterion.item", "torch.squeeze.cpu", "data[].to.cpu"], "function", ["None"], ["", "def", "val", "(", "model", ",", "dataloader", ",", "num_imgs", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_val_losses", "=", "[", "]", "\n", "SCORE", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "LABEL", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "for", "num", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "label_cls", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "_", ",", "x", "=", "model", "(", "faces", ")", "\n", "pred_score", "=", "torch", ".", "squeeze", "(", "torch", ".", "sigmoid", "(", "x", ")", ",", "1", ")", "\n", "val_loss", "=", "criterion", "(", "torch", ".", "squeeze", "(", "x", ",", "1", ")", ",", "label_cls", ")", "\n", "batch_val_losses", ".", "append", "(", "val_loss", ".", "item", "(", ")", ")", "\n", "SCORE", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "pred_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "LABEL", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "avg_val_loss", "=", "round", "(", "sum", "(", "batch_val_losses", ")", "/", "(", "len", "(", "batch_val_losses", ")", ")", ",", "5", ")", "\n", "pred", "=", "SCORE", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "y_true", "=", "LABEL", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "avg_val_loss", ",", "pred", ",", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_F3NET.combine_csv": [[70, 76], ["range", "os.system", "len"], "function", ["None"], ["", "def", "combine_csv", "(", "file_array", ",", "result_name", ")", ":", "\n", "    ", "combine_cmd", "=", "\"cat \"", "\n", "for", "i", "in", "range", "(", "len", "(", "file_array", ")", ")", ":", "\n", "        ", "combine_cmd", "+=", "(", "file_array", "[", "i", "]", "+", "\" \"", ")", "\n", "", "combine_cmd", "+=", "\" > \"", "+", "result_name", "\n", "os", ".", "system", "(", "combine_cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_F3NET.train": [[77, 190], ["numpy.array", "TRAIN_cross_F3NET.combine_csv", "TRAIN_cross_F3NET.combine_csv", "opt.dataloader.face_Dataset", "torch.utils.data.DataLoader", "opt.dataloader.face_Dataset", "torch.utils.data.DataLoader", "len", "len", "len", "len", "torch.optim.Adam", "print", "torch.utils.tensorboard.SummaryWriter", "open", "len", "range", "open.close", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "model.parameters", "os.path.exists", "os.makedirs", "os.mkdir", "print", "numpy.zeros", "enumerate", "opt.dataloader.my_transforms", "opt.dataloader.my_transforms", "tqdm.tqdm", "model.train", "torch.optim.Adam.zero_grad", "data[].to", "data[].to", "model", "torch.squeeze", "criterion", "batch_train_losses.append", "criterion.backward", "torch.optim.Adam.step", "criterion.item", "numpy.mean", "datetime.datetime.now().strftime", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "datetime.datetime.now().strftime", "numpy.mean", "numpy.append", "print", "open.write", "open.write", "TRAIN_cross_F3NET.val", "utils.metrics_cross.get_metrics", "print", "open.write", "open.write", "torch.optim.Adam", "torch.save", "numpy.save", "print", "open.write", "open.write", "model.parameters", "datetime.datetime.now", "datetime.datetime.now", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.val", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "train", "(", "args", ",", "model", ")", ":", "\n", "    ", "avg_train_loss_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "train_csv_file_df_c23", "=", "'./misc_cross/Train/c23_df_train.csv'", "\n", "train_csv_file_or_c23", "=", "'./misc_cross/Train/c23_or_train.csv'", "\n", "train_csv_file_df_c40", "=", "'./misc_cross/Train/c40_df_train.csv'", "\n", "train_csv_file_or_c40", "=", "'./misc_cross/Train/c40_or_train.csv'", "\n", "\n", "val_csv_file_df_c23", "=", "'./misc_cross/Val100/c23_df_val.csv'", "\n", "val_csv_file_or_c23", "=", "'./misc_cross/Val100/c23_or_val.csv'", "\n", "val_csv_file_df_c40", "=", "'./misc_cross/Val100/c40_df_val.csv'", "\n", "val_csv_file_or_c40", "=", "'./misc_cross/Val100/c40_or_val.csv'", "\n", "\n", "training_csv_files", "=", "[", "train_csv_file_df_c23", ",", "train_csv_file_or_c23", ",", "train_csv_file_df_c40", ",", "train_csv_file_or_c40", "]", "\n", "val_csv_files", "=", "[", "val_csv_file_df_c23", ",", "val_csv_file_or_c23", ",", "val_csv_file_df_c40", ",", "val_csv_file_or_c40", "]", "\n", "\n", "tem_train_file_name", "=", "'training_f3net_cross_train'", "\n", "tem_val_file_name", "=", "'training_f3net_cross_val'", "\n", "combine_csv", "(", "training_csv_files", ",", "tem_train_file_name", ")", "\n", "combine_csv", "(", "val_csv_files", ",", "tem_val_file_name", ")", "\n", "tem_train_file_path", "=", "args", ".", "root_path", "+", "tem_train_file_name", "\n", "tem_val_file_path", "=", "args", ".", "root_path", "+", "tem_val_file_name", "\n", "\n", "training_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_train_file_path", ",", "\n", "transform", "=", "my_transforms", "(", "299", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "training_dataloader", "=", "DataLoader", "(", "training_dataset", ",", "batch_size", "=", "args", ".", "batch_size_train", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_val_file_path", ",", "transform", "=", "my_transforms", "(", "299", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size_val", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "Num_val_imgs_1", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_2", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_3", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_4", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_all", "=", "Num_val_imgs_1", "+", "Num_val_imgs_2", "+", "Num_val_imgs_3", "+", "Num_val_imgs_4", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# result folder", "\n", "res_folder_name", "=", "args", ".", "save_root", "+", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "res_folder_name", ")", "\n", "os", ".", "mkdir", "(", "res_folder_name", "+", "'/ckpt/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: RESULT PATH ALREADY EXISTED -> \"", "+", "res_folder_name", ")", "\n", "", "print", "(", "'find models here: '", ",", "res_folder_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "res_folder_name", ")", "\n", "f1", "=", "open", "(", "res_folder_name", "+", "\"/training_log.csv\"", ",", "'a+'", ")", "\n", "\n", "Best_AUC", "=", "0", "\n", "# training", "\n", "steps_per_epoch", "=", "len", "(", "training_dataloader", ")", "\n", "Learning_Rate", "=", "args", ".", "lr", "\n", "for", "epoch", "in", "range", "(", "args", ".", "warm_start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "batch_train_losses", "=", "[", "]", "\n", "step_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "tqdm", "(", "training_dataloader", ")", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "frames", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "_", ",", "pred", "=", "model", "(", "frames", ")", "\n", "predicted_label", "=", "torch", ".", "squeeze", "(", "pred", ",", "1", ")", "\n", "loss", "=", "criterion", "(", "predicted_label", ",", "labels", ")", "\n", "step_loss", "[", "step", "]", "=", "loss", "\n", "batch_train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "Global_step", "=", "epoch", "*", "steps_per_epoch", "+", "(", "step", "+", "1", ")", "\n", "\n", "if", "Global_step", "%", "args", ".", "disp_step", "==", "0", ":", "\n", "                ", "avg_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "step_log_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d |average loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "avg_loss", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "Global_step", ")", "\n", "print", "(", "'\\n'", ",", "step_log_msg", ")", "\n", "\n", "", "if", "Global_step", "%", "args", ".", "save_model", "==", "0", ":", "\n", "                ", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "avg_train_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_train_loss_list", "=", "np", ".", "append", "(", "avg_train_loss_list", ",", "avg_train_loss", ")", "\n", "log_msg", "=", "'[%s] Epoch: %d/%d | 1/10 average epoch loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "avg_train_loss", ")", "\n", "print", "(", "'\\n'", ",", "log_msg", ")", "\n", "f1", ".", "write", "(", "log_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# validation", "\n", "val_loss", ",", "pred", ",", "y", "=", "val", "(", "model", ",", "val_dataloader", ",", "Num_val_all", ")", "\n", "threshold", "=", "0.5", "\n", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", "=", "get_metrics", "(", "pred", ",", "y", ",", "threshold", ")", "\n", "\n", "val_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d | average df validation loss: %f | AUC: %f | ACC: %f| FPR: %f| FTR: %f| EER: %f| AP: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "val_loss", ",", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", ")", "\n", "print", "(", "'\\n'", ",", "val_msg", ")", "\n", "f1", ".", "write", "(", "val_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# save model", "\n", "if", "AUC", ">", "Best_AUC", "and", "Global_step", ">", "50000", ":", "\n", "                    ", "Best_AUC", "=", "AUC", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'best.pth'", ")", "\n", "np", ".", "save", "(", "res_folder_name", "+", "'/avg_train_loss_list.np'", ",", "avg_train_loss_list", ")", "\n", "cur_learning_rate", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "print", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "if", "Global_step", "%", "args", ".", "lr_decay_step", "==", "0", ":", "\n", "                ", "Learning_Rate", "=", "Learning_Rate", "*", "args", ".", "lr_decay_rate", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "Learning_Rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "", "", "f1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_F3NET.main": [[192, 199], ["arch.F3NET.F3Net", "torch.nn.DataParallel", "model.to.to", "print", "print", "TRAIN_cross_F3NET.train", "sum", "numpy.prod", "p.size", "model.to.parameters"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "model", "=", "F3Net", "(", "num_classes", "=", "1", ",", "img_width", "=", "299", ",", "img_height", "=", "299", ",", "LFS_window_size", "=", "10", ",", "LFS_stride", "=", "2", ",", "LFS_M", "=", "6", ",", "mode", "=", "'Both'", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "[", "0", ",", "1", "]", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "\"number of model parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "train", "(", "args", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_meso.parse_args": [[21, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'cq'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "2e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "12", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_step'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--save_root'", ",", "default", "=", "'./Training_results/Cross_df/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"Meso4/\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_meso.fix_seed": [[39, 48], ["torch.cuda.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "str"], "function", ["None"], ["", "def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_meso.val": [[50, 72], ["print", "model.eval", "numpy.zeros", "numpy.zeros", "enumerate", "round", "tqdm.tqdm", "torch.no_grad", "data[].to", "data[].to", "model", "torch.squeeze", "criterion", "batch_val_losses.append", "torch.squeeze.cpu().numpy", "data[].to.cpu().numpy", "sum", "len", "torch.sigmoid", "torch.squeeze", "criterion.item", "torch.squeeze.cpu", "data[].to.cpu"], "function", ["None"], ["", "def", "val", "(", "model", ",", "dataloader", ",", "num_imgs", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_val_losses", "=", "[", "]", "\n", "SCORE", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "LABEL", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "for", "num", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "label_cls", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "x", "=", "model", "(", "faces", ")", "\n", "pred_score", "=", "torch", ".", "squeeze", "(", "torch", ".", "sigmoid", "(", "x", ")", ",", "1", ")", "\n", "val_loss", "=", "criterion", "(", "torch", ".", "squeeze", "(", "x", ",", "1", ")", ",", "label_cls", ")", "\n", "batch_val_losses", ".", "append", "(", "val_loss", ".", "item", "(", ")", ")", "\n", "SCORE", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "pred_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "LABEL", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "avg_val_loss", "=", "round", "(", "sum", "(", "batch_val_losses", ")", "/", "(", "len", "(", "batch_val_losses", ")", ")", ",", "5", ")", "\n", "pred", "=", "SCORE", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "y_true", "=", "LABEL", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "return", "avg_val_loss", ",", "pred", ",", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_meso.combine_csv": [[74, 80], ["range", "os.system", "len"], "function", ["None"], ["", "def", "combine_csv", "(", "file_array", ",", "result_name", ")", ":", "\n", "    ", "combine_cmd", "=", "\"cat \"", "\n", "for", "i", "in", "range", "(", "len", "(", "file_array", ")", ")", ":", "\n", "        ", "combine_cmd", "+=", "(", "file_array", "[", "i", "]", "+", "\" \"", ")", "\n", "", "combine_cmd", "+=", "\" > \"", "+", "result_name", "\n", "os", ".", "system", "(", "combine_cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_meso.train": [[82, 190], ["numpy.array", "TRAIN_cross_meso.combine_csv", "TRAIN_cross_meso.combine_csv", "opt.dataloader.face_Dataset", "torch.utils.data.DataLoader", "opt.dataloader.face_Dataset", "torch.utils.data.DataLoader", "len", "len", "len", "len", "torch.optim.Adam", "print", "torch.utils.tensorboard.SummaryWriter", "open", "len", "range", "open.close", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "model.parameters", "os.path.exists", "os.makedirs", "os.mkdir", "print", "numpy.zeros", "enumerate", "opt.dataloader.my_transforms", "opt.dataloader.my_transforms", "tqdm.tqdm", "model.train", "torch.optim.Adam.zero_grad", "data[].to", "data[].to", "torch.squeeze", "criterion", "batch_train_losses.append", "criterion.backward", "torch.optim.Adam.step", "model", "criterion.item", "numpy.mean", "datetime.datetime.now().strftime", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "datetime.datetime.now().strftime", "numpy.mean", "numpy.append", "print", "open.write", "open.write", "TRAIN_cross_meso.val", "utils.metrics_cross.get_metrics", "print", "open.write", "open.write", "torch.save", "numpy.save", "print", "open.write", "open.write", "datetime.datetime.now", "datetime.datetime.now", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.val", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "train", "(", "args", ",", "model", ")", ":", "\n", "    ", "avg_train_loss_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "train_csv_file_df_c23", "=", "'./misc_cross/Train/c23_df_train.csv'", "\n", "train_csv_file_or_c23", "=", "'./misc_cross/Train/c23_or_train.csv'", "\n", "train_csv_file_df_c40", "=", "'./misc_cross/Train/c40_df_train.csv'", "\n", "train_csv_file_or_c40", "=", "'./misc_cross/Train/c40_or_train.csv'", "\n", "\n", "val_csv_file_df_c23", "=", "'./misc_cross/Val100/c23_df_val.csv'", "\n", "val_csv_file_or_c23", "=", "'./misc_cross/Val100/c23_or_val.csv'", "\n", "val_csv_file_df_c40", "=", "'./misc_cross/Val100/c40_df_val.csv'", "\n", "val_csv_file_or_c40", "=", "'./misc_cross/Val100/c40_or_val.csv'", "\n", "\n", "training_csv_files", "=", "[", "train_csv_file_df_c23", ",", "train_csv_file_or_c23", ",", "train_csv_file_df_c40", ",", "train_csv_file_or_c40", "]", "\n", "val_csv_files", "=", "[", "val_csv_file_df_c23", ",", "val_csv_file_or_c23", ",", "val_csv_file_df_c40", ",", "val_csv_file_or_c40", "]", "\n", "\n", "tem_train_file_name", "=", "'training_meso_cross_train'", "\n", "tem_val_file_name", "=", "'training_meso_cross_val'", "\n", "combine_csv", "(", "training_csv_files", ",", "tem_train_file_name", ")", "\n", "combine_csv", "(", "val_csv_files", ",", "tem_val_file_name", ")", "\n", "tem_train_file_path", "=", "args", ".", "root_path", "+", "tem_train_file_name", "\n", "tem_val_file_path", "=", "args", ".", "root_path", "+", "tem_val_file_name", "\n", "\n", "training_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_train_file_path", ",", "\n", "transform", "=", "my_transforms", "(", "256", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "training_dataloader", "=", "DataLoader", "(", "training_dataset", ",", "batch_size", "=", "args", ".", "batch_size_train", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_val_file_path", ",", "transform", "=", "my_transforms", "(", "256", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size_val", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "Num_val_imgs_1", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_2", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_3", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_4", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_all", "=", "Num_val_imgs_1", "+", "Num_val_imgs_2", "+", "Num_val_imgs_3", "+", "Num_val_imgs_4", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# result folder", "\n", "res_folder_name", "=", "args", ".", "save_root", "+", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "res_folder_name", ")", "\n", "os", ".", "mkdir", "(", "res_folder_name", "+", "'/ckpt/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: RESULT PATH ALREADY EXISTED -> \"", "+", "res_folder_name", ")", "\n", "", "print", "(", "'find models here: '", ",", "res_folder_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "res_folder_name", ")", "\n", "f1", "=", "open", "(", "res_folder_name", "+", "\"/training_log.csv\"", ",", "'a+'", ")", "\n", "\n", "# training", "\n", "steps_per_epoch", "=", "len", "(", "training_dataloader", ")", "\n", "Learning_Rate", "=", "args", ".", "lr", "\n", "Best_AUC", "=", "0.0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "warm_start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "batch_train_losses", "=", "[", "]", "\n", "step_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "tqdm", "(", "training_dataloader", ")", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "frames", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "predicted_label", "=", "torch", ".", "squeeze", "(", "model", "(", "frames", ")", ",", "1", ")", "\n", "loss", "=", "criterion", "(", "predicted_label", ",", "labels", ")", "\n", "step_loss", "[", "step", "]", "=", "loss", "\n", "batch_train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "Global_step", "=", "epoch", "*", "steps_per_epoch", "+", "(", "step", "+", "1", ")", "\n", "\n", "if", "Global_step", "%", "args", ".", "disp_step", "==", "0", ":", "\n", "                ", "avg_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "step_log_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d |average loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "avg_loss", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "Global_step", ")", "\n", "print", "(", "'\\n'", ",", "step_log_msg", ")", "\n", "\n", "", "if", "Global_step", "%", "args", ".", "save_model", "==", "0", ":", "\n", "                ", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "avg_train_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_train_loss_list", "=", "np", ".", "append", "(", "avg_train_loss_list", ",", "avg_train_loss", ")", "\n", "log_msg", "=", "'[%s] Epoch: %d/%d | 1/10 average epoch loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "avg_train_loss", ")", "\n", "print", "(", "'\\n'", ",", "log_msg", ")", "\n", "f1", ".", "write", "(", "log_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# validation", "\n", "val_loss", ",", "pred", ",", "y", "=", "val", "(", "model", ",", "val_dataloader", ",", "Num_val_all", ")", "\n", "threshold", "=", "0.5", "\n", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", "=", "get_metrics", "(", "pred", ",", "y", ",", "threshold", ")", "\n", "\n", "val_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d | average df validation loss: %f | AUC: %f | ACC: %f| FPR: %f| FTR: %f| EER: %f| AP: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "val_loss", ",", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", ")", "\n", "print", "(", "'\\n'", ",", "val_msg", ")", "\n", "f1", ".", "write", "(", "val_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# save model", "\n", "if", "AUC", ">", "Best_AUC", "and", "Global_step", ">", "50000", ":", "\n", "                    ", "Best_AUC", "=", "AUC", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'best.pth'", ")", "\n", "np", ".", "save", "(", "res_folder_name", "+", "'/avg_train_loss_list.np'", ",", "avg_train_loss_list", ")", "\n", "cur_learning_rate", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "print", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "", "", "", "", "f1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_meso.main": [[192, 198], ["arch.Meso.Meso4", "model.to.to", "print", "print", "TRAIN_cross_meso.train", "sum", "numpy.prod", "p.size", "model.to.parameters"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "model", "=", "Meso4", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "\"number of model parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "train", "(", "args", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_dffd_reg.parse_args": [[20, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'cq'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "2e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--weight'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "default", "=", "30000", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--face_size'", ",", "default", "=", "299", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_size'", ",", "default", "=", "19", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_step'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_root'", ",", "default", "=", "'./Training_results/Cross_df/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"dffd_reg/\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--temp_name'", ",", "default", "=", "\"dffd_reg\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_dffd_reg.fix_seed": [[43, 52], ["torch.cuda.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "str"], "function", ["None"], ["", "def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_dffd_reg.val": [[53, 77], ["print", "MODEL.model.eval", "numpy.zeros", "numpy.zeros", "enumerate", "round", "tqdm.tqdm", "torch.no_grad", "data[].to", "data[].to", "MODEL.model", "torch.squeeze", "criterion", "batch_val_losses.append", "sum", "len", "torch.sigmoid", "torch.squeeze", "criterion.item", "torch.squeeze.cpu().numpy", "data[].to.cpu().numpy", "torch.squeeze.cpu().numpy", "data[].to.cpu().numpy", "len", "torch.squeeze.cpu", "data[].to.cpu", "torch.squeeze.cpu", "data[].to.cpu", "len", "len"], "function", ["None"], ["", "def", "val", "(", "MODEL", ",", "dataloader", ",", "num_imgs", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "MODEL", ".", "model", ".", "eval", "(", ")", "\n", "batch_val_losses", "=", "[", "]", "\n", "SCORE", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "LABEL", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "for", "num", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "label_cls", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "x", ",", "_", ",", "_", "=", "MODEL", ".", "model", "(", "faces", ")", "\n", "pred_score", "=", "torch", ".", "squeeze", "(", "torch", ".", "sigmoid", "(", "x", ")", ",", "1", ")", "\n", "val_loss", "=", "criterion", "(", "torch", ".", "squeeze", "(", "x", ",", "1", ")", ",", "label_cls", ")", "\n", "batch_val_losses", ".", "append", "(", "val_loss", ".", "item", "(", ")", ")", "\n", "if", "num", "!=", "len", "(", "dataloader", ")", "-", "1", ":", "\n", "                ", "SCORE", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "pred_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "LABEL", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "SCORE", "[", "(", "len", "(", "dataloader", ")", "-", "1", ")", "*", "args", ".", "batch_size_val", ":", "]", "=", "pred_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "LABEL", "[", "(", "len", "(", "dataloader", ")", "-", "1", ")", "*", "args", ".", "batch_size_val", ":", "]", "=", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "", "avg_val_loss", "=", "round", "(", "sum", "(", "batch_val_losses", ")", "/", "(", "len", "(", "batch_val_losses", ")", ")", ",", "5", ")", "\n", "pred", "=", "SCORE", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "y_true", "=", "LABEL", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "avg_val_loss", ",", "pred", ",", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_dffd_reg.combine_csv": [[78, 84], ["range", "os.system", "len"], "function", ["None"], ["", "def", "combine_csv", "(", "file_array", ",", "result_name", ")", ":", "\n", "    ", "combine_cmd", "=", "\"cat \"", "\n", "for", "i", "in", "range", "(", "len", "(", "file_array", ")", ")", ":", "\n", "        ", "combine_cmd", "+=", "(", "file_array", "[", "i", "]", "+", "\" \"", ")", "\n", "", "combine_cmd", "+=", "\" > \"", "+", "result_name", "\n", "os", ".", "system", "(", "combine_cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_dffd_reg.train": [[86, 205], ["MODEL.model.to", "numpy.array", "TRAIN_cross_dffd_reg.combine_csv", "TRAIN_cross_dffd_reg.combine_csv", "opt.dataloader_seg_ce.face_Dataset", "torch.utils.data.DataLoader", "opt.dataloader_seg_ce.face_Dataset", "torch.utils.data.DataLoader", "len", "len", "len", "len", "torch.optim.Adam", "print", "torch.utils.tensorboard.SummaryWriter", "open", "len", "range", "open.close", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "MODEL.model.parameters", "os.path.exists", "os.makedirs", "os.mkdir", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "opt.dataloader_seg_ce.my_transforms", "opt.dataloader_seg_ce.my_transforms", "tqdm.tqdm", "MODEL.model.train", "torch.optim.Adam.zero_grad", "data[].to", "data[].to", "data[].to", "MODEL.model", "torch.squeeze", "criterion", "criterion", "loss.backward", "torch.optim.Adam.step", "numpy.mean", "numpy.mean", "numpy.mean", "datetime.datetime.now().strftime", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "datetime.datetime.now().strftime", "numpy.mean", "numpy.append", "print", "open.write", "open.write", "TRAIN_cross_dffd_reg.val", "utils.metrics_cross.get_metrics", "print", "open.write", "open.write", "torch.save", "numpy.save", "print", "open.write", "open.write", "datetime.datetime.now", "datetime.datetime.now", "MODEL.model.state_dict"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.val", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "train", "(", "args", ",", "MODEL", ")", ":", "\n", "    ", "MODEL", ".", "model", ".", "to", "(", "device", ")", "\n", "avg_train_loss_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "train_csv_file_df_c23", "=", "'./misc_cross/Train/c23_df_train.csv'", "\n", "train_csv_file_or_c23", "=", "'./misc_cross/Train/c23_or_train.csv'", "\n", "train_csv_file_df_c40", "=", "'./misc_cross/Train/c40_df_train.csv'", "\n", "train_csv_file_or_c40", "=", "'./misc_cross/Train/c40_or_train.csv'", "\n", "\n", "val_csv_file_df_c23", "=", "'./misc_cross/Val100/c23_df_val.csv'", "\n", "val_csv_file_or_c23", "=", "'./misc_cross/Val100/c23_or_val.csv'", "\n", "val_csv_file_df_c40", "=", "'./misc_cross/Val100/c40_df_val.csv'", "\n", "val_csv_file_or_c40", "=", "'./misc_cross/Val100/c40_or_val.csv'", "\n", "\n", "training_csv_files", "=", "[", "train_csv_file_df_c23", ",", "train_csv_file_or_c23", ",", "train_csv_file_df_c40", ",", "train_csv_file_or_c40", "]", "\n", "val_csv_files", "=", "[", "val_csv_file_df_c23", ",", "val_csv_file_or_c23", ",", "val_csv_file_df_c40", ",", "val_csv_file_or_c40", "]", "\n", "\n", "tem_train_file_name", "=", "'training_dffd_cross_train'", "\n", "tem_val_file_name", "=", "'training_dffd_cross_val'", "\n", "combine_csv", "(", "training_csv_files", ",", "tem_train_file_name", ")", "\n", "combine_csv", "(", "val_csv_files", ",", "tem_val_file_name", ")", "\n", "tem_train_file_path", "=", "args", ".", "root_path", "+", "tem_train_file_name", "\n", "tem_val_file_path", "=", "args", ".", "root_path", "+", "tem_val_file_name", "\n", "\n", "training_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_train_file_path", ",", "\n", "transform", "=", "my_transforms", "(", "299", ",", "19", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "training_dataloader", "=", "DataLoader", "(", "training_dataset", ",", "batch_size", "=", "args", ".", "batch_size_train", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_val_file_path", ",", "transform", "=", "my_transforms", "(", "299", ",", "19", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size_val", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "Num_val_imgs_1", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_2", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_3", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_4", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_all", "=", "Num_val_imgs_1", "+", "Num_val_imgs_2", "+", "Num_val_imgs_3", "+", "Num_val_imgs_4", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "MODEL", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "# result folder", "\n", "res_folder_name", "=", "args", ".", "save_root", "+", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "res_folder_name", ")", "\n", "os", ".", "mkdir", "(", "res_folder_name", "+", "'/ckpt/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: RESULT PATH ALREADY EXISTED -> \"", "+", "res_folder_name", ")", "\n", "", "print", "(", "'find models here: '", ",", "res_folder_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "res_folder_name", ")", "\n", "f1", "=", "open", "(", "res_folder_name", "+", "\"/training_log.csv\"", ",", "'a+'", ")", "\n", "\n", "# training", "\n", "steps_per_epoch", "=", "len", "(", "training_dataloader", ")", "\n", "Learning_Rate", "=", "args", ".", "lr", "\n", "Best_AUC", "=", "0.0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "warm_start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "step_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "step_cls_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "step_msk_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "# scheduler.step()", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "tqdm", "(", "training_dataloader", ")", ")", ":", "\n", "            ", "MODEL", ".", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "masks", "=", "data", "[", "'masks'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "preds", ",", "pred_msks", ",", "_", "=", "MODEL", ".", "model", "(", "faces", ")", "\n", "predicted_label", "=", "torch", ".", "squeeze", "(", "preds", ",", "1", ")", "\n", "\n", "loss_cls", "=", "criterion", "(", "predicted_label", ",", "labels", ")", "\n", "loss_msk", "=", "criterion", "(", "pred_msks", ",", "masks", ")", "\n", "loss", "=", "loss_cls", "+", "args", ".", "weight", "*", "loss_msk", "\n", "step_loss", "[", "step", "]", "=", "loss", "\n", "step_cls_loss", "[", "step", "]", "=", "loss_cls", "\n", "step_msk_loss", "[", "step", "]", "=", "loss_msk", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "Global_step", "=", "epoch", "*", "steps_per_epoch", "+", "(", "step", "+", "1", ")", "\n", "\n", "if", "Global_step", "%", "args", ".", "disp_step", "==", "0", ":", "\n", "                ", "avg_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_cls_loss", "=", "np", ".", "mean", "(", "step_cls_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_msk_loss", "=", "np", ".", "mean", "(", "step_msk_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "step_log_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d |average loss: %f |average class loss: %f |average mask loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "avg_loss", ",", "avg_cls_loss", ",", "avg_msk_loss", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "Global_step", ")", "\n", "print", "(", "'\\n'", ",", "step_log_msg", ")", "\n", "\n", "", "if", "Global_step", "%", "args", ".", "save_model", "==", "0", "or", "Global_step", "%", "steps_per_epoch", "==", "0", ":", "\n", "                ", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "avg_train_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_train_loss_list", "=", "np", ".", "append", "(", "avg_train_loss_list", ",", "avg_train_loss", ")", "\n", "log_msg", "=", "'[%s] Epoch: %d/%d | 1/10 average epoch loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "avg_train_loss", ")", "\n", "print", "(", "'\\n'", ",", "log_msg", ")", "\n", "f1", ".", "write", "(", "log_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# validation", "\n", "val_loss", ",", "pred", ",", "y", "=", "val", "(", "MODEL", ",", "val_dataloader", ",", "Num_val_all", ")", "\n", "threshold", "=", "0.5", "\n", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", "=", "get_metrics", "(", "pred", ",", "y", ",", "threshold", ")", "\n", "\n", "val_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d | average df validation loss: %f | AUC: %f | ACC: %f| FPR: %f| FTR: %f| EER: %f| AP: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "val_loss", ",", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", ")", "\n", "print", "(", "'\\n'", ",", "val_msg", ")", "\n", "f1", ".", "write", "(", "val_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# save model", "\n", "if", "AUC", ">", "Best_AUC", "and", "Global_step", ">", "50000", ":", "\n", "                    ", "Best_AUC", "=", "AUC", "\n", "torch", ".", "save", "(", "MODEL", ".", "model", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'best.pth'", ")", "\n", "np", ".", "save", "(", "res_folder_name", "+", "'/avg_train_loss_list.np'", ",", "avg_train_loss_list", ")", "\n", "cur_learning_rate", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "print", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "", "", "", "", "f1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_dffd_reg.main": [[207, 212], ["arch.xcep_dffd_ce.Model", "print", "print", "TRAIN_cross_dffd_reg.train", "sum", "numpy.prod", "p.size", "arch.xcep_dffd_ce.Model.model.parameters"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "MODEL", "=", "Model", "(", "maptype", "=", "'reg'", ",", "templates", "=", "'tmp'", ",", "num_classes", "=", "1", ",", "load_pretrain", "=", "True", ")", "\n", "print", "(", "MODEL", ".", "model", ")", "\n", "print", "(", "\"number of model parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "MODEL", ".", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "train", "(", "args", ",", "MODEL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_resnet50.parse_args": [[21, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'cq'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "2e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "default", "=", "999999999", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "12", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_step'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--save_root'", ",", "default", "=", "'./Training_results/Cross_df/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"resnet50/\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_resnet50.fix_seed": [[41, 50], ["torch.cuda.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "str"], "function", ["None"], ["", "def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_resnet50.val": [[52, 72], ["print", "model.eval", "numpy.zeros", "numpy.zeros", "enumerate", "round", "tqdm.tqdm", "torch.no_grad", "data[].to", "data[].to", "model", "torch.squeeze", "criterion", "batch_val_losses.append", "torch.squeeze.cpu().numpy", "data[].to.cpu().numpy", "sum", "len", "torch.sigmoid", "torch.squeeze", "criterion.item", "torch.squeeze.cpu", "data[].to.cpu"], "function", ["None"], ["", "def", "val", "(", "model", ",", "dataloader", ",", "num_imgs", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_val_losses", "=", "[", "]", "\n", "SCORE", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "LABEL", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "for", "num", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "label_cls", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "x", "=", "model", "(", "faces", ")", "\n", "pred_score", "=", "torch", ".", "squeeze", "(", "torch", ".", "sigmoid", "(", "x", ")", ",", "1", ")", "\n", "val_loss", "=", "criterion", "(", "torch", ".", "squeeze", "(", "x", ",", "1", ")", ",", "label_cls", ")", "\n", "batch_val_losses", ".", "append", "(", "val_loss", ".", "item", "(", ")", ")", "\n", "SCORE", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "pred_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "LABEL", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "avg_val_loss", "=", "round", "(", "sum", "(", "batch_val_losses", ")", "/", "(", "len", "(", "batch_val_losses", ")", ")", ",", "5", ")", "\n", "pred", "=", "SCORE", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "y_true", "=", "LABEL", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "avg_val_loss", ",", "pred", ",", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_resnet50.combine_csv": [[74, 80], ["range", "os.system", "len"], "function", ["None"], ["", "def", "combine_csv", "(", "file_array", ",", "result_name", ")", ":", "\n", "    ", "combine_cmd", "=", "\"cat \"", "\n", "for", "i", "in", "range", "(", "len", "(", "file_array", ")", ")", ":", "\n", "        ", "combine_cmd", "+=", "(", "file_array", "[", "i", "]", "+", "\" \"", ")", "\n", "", "combine_cmd", "+=", "\" > \"", "+", "result_name", "\n", "os", ".", "system", "(", "combine_cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_resnet50.train": [[82, 194], ["numpy.array", "TRAIN_cross_resnet50.combine_csv", "TRAIN_cross_resnet50.combine_csv", "opt.dataloader.face_Dataset", "torch.utils.data.DataLoader", "opt.dataloader.face_Dataset", "torch.utils.data.DataLoader", "len", "len", "len", "len", "torch.optim.Adam", "print", "torch.utils.tensorboard.SummaryWriter", "open", "len", "range", "open.close", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "model.parameters", "os.path.exists", "os.makedirs", "os.mkdir", "print", "numpy.zeros", "enumerate", "opt.dataloader.my_transforms", "opt.dataloader.my_transforms", "tqdm.tqdm", "model.train", "torch.optim.Adam.zero_grad", "data[].to", "data[].to", "torch.squeeze", "criterion", "batch_train_losses.append", "criterion.backward", "torch.optim.Adam.step", "model", "criterion.item", "numpy.mean", "datetime.datetime.now().strftime", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "datetime.datetime.now().strftime", "numpy.mean", "numpy.append", "print", "open.write", "open.write", "TRAIN_cross_resnet50.val", "utils.metrics_cross.get_metrics", "print", "open.write", "open.write", "torch.optim.Adam", "torch.save", "numpy.save", "print", "open.write", "open.write", "model.parameters", "datetime.datetime.now", "datetime.datetime.now", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.val", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "train", "(", "args", ",", "model", ")", ":", "\n", "    ", "avg_train_loss_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "train_csv_file_df_c23", "=", "'./misc_cross/Train/c23_df_train.csv'", "\n", "train_csv_file_or_c23", "=", "'./misc_cross/Train/c23_or_train.csv'", "\n", "train_csv_file_df_c40", "=", "'./misc_cross/Train/c40_df_train.csv'", "\n", "train_csv_file_or_c40", "=", "'./misc_cross/Train/c40_or_train.csv'", "\n", "\n", "val_csv_file_df_c23", "=", "'./misc_cross/Val100/c23_df_val.csv'", "\n", "val_csv_file_or_c23", "=", "'./misc_cross/Val100/c23_or_val.csv'", "\n", "val_csv_file_df_c40", "=", "'./misc_cross/Val100/c40_df_val.csv'", "\n", "val_csv_file_or_c40", "=", "'./misc_cross/Val100/c40_or_val.csv'", "\n", "\n", "training_csv_files", "=", "[", "train_csv_file_df_c23", ",", "train_csv_file_or_c23", ",", "train_csv_file_df_c40", ",", "train_csv_file_or_c40", "]", "\n", "val_csv_files", "=", "[", "val_csv_file_df_c23", ",", "val_csv_file_or_c23", ",", "val_csv_file_df_c40", ",", "val_csv_file_or_c40", "]", "\n", "\n", "tem_train_file_name", "=", "'training_resnet50_cross_train'", "\n", "tem_val_file_name", "=", "'training_resnet50_cross_val'", "\n", "combine_csv", "(", "training_csv_files", ",", "tem_train_file_name", ")", "\n", "combine_csv", "(", "val_csv_files", ",", "tem_val_file_name", ")", "\n", "tem_train_file_path", "=", "args", ".", "root_path", "+", "tem_train_file_name", "\n", "tem_val_file_path", "=", "args", ".", "root_path", "+", "tem_val_file_name", "\n", "\n", "training_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_train_file_path", ",", "\n", "transform", "=", "my_transforms", "(", "224", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "training_dataloader", "=", "DataLoader", "(", "training_dataset", ",", "batch_size", "=", "args", ".", "batch_size_train", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_val_file_path", ",", "transform", "=", "my_transforms", "(", "224", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size_val", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "Num_val_imgs_1", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_2", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_3", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_4", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_all", "=", "Num_val_imgs_1", "+", "Num_val_imgs_2", "+", "Num_val_imgs_3", "+", "Num_val_imgs_4", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# result folder", "\n", "res_folder_name", "=", "args", ".", "save_root", "+", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "res_folder_name", ")", "\n", "os", ".", "mkdir", "(", "res_folder_name", "+", "'/ckpt/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: RESULT PATH ALREADY EXISTED -> \"", "+", "res_folder_name", ")", "\n", "", "print", "(", "'find models here: '", ",", "res_folder_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "res_folder_name", ")", "\n", "f1", "=", "open", "(", "res_folder_name", "+", "\"/training_log.csv\"", ",", "'a+'", ")", "\n", "\n", "Best_AUC", "=", "0", "\n", "# training", "\n", "steps_per_epoch", "=", "len", "(", "training_dataloader", ")", "\n", "Learning_Rate", "=", "args", ".", "lr", "\n", "for", "epoch", "in", "range", "(", "args", ".", "warm_start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "batch_train_losses", "=", "[", "]", "\n", "step_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "tqdm", "(", "training_dataloader", ")", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "frames", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "predicted_label", "=", "torch", ".", "squeeze", "(", "model", "(", "frames", ")", ",", "1", ")", "\n", "loss", "=", "criterion", "(", "predicted_label", ",", "labels", ")", "\n", "step_loss", "[", "step", "]", "=", "loss", "\n", "batch_train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "Global_step", "=", "epoch", "*", "steps_per_epoch", "+", "(", "step", "+", "1", ")", "\n", "\n", "if", "Global_step", "%", "args", ".", "disp_step", "==", "0", ":", "\n", "                ", "avg_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "step_log_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d |average loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "avg_loss", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "Global_step", ")", "\n", "print", "(", "'\\n'", ",", "step_log_msg", ")", "\n", "\n", "", "if", "Global_step", "%", "args", ".", "save_model", "==", "0", ":", "\n", "                ", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "avg_train_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_train_loss_list", "=", "np", ".", "append", "(", "avg_train_loss_list", ",", "avg_train_loss", ")", "\n", "log_msg", "=", "'[%s] Epoch: %d/%d | 1/10 average epoch loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "avg_train_loss", ")", "\n", "print", "(", "'\\n'", ",", "log_msg", ")", "\n", "f1", ".", "write", "(", "log_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# validation", "\n", "val_loss", ",", "pred", ",", "y", "=", "val", "(", "model", ",", "val_dataloader", ",", "Num_val_all", ")", "\n", "threshold", "=", "0.5", "\n", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", "=", "get_metrics", "(", "pred", ",", "y", ",", "threshold", ")", "\n", "\n", "val_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d | average df validation loss: %f | AUC: %f | ACC: %f| FPR: %f| FTR: %f| EER: %f| AP: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "val_loss", ",", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", ")", "\n", "print", "(", "'\\n'", ",", "val_msg", ")", "\n", "f1", ".", "write", "(", "val_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# save model", "\n", "if", "AUC", ">", "Best_AUC", "and", "Global_step", ">", "50000", ":", "\n", "                    ", "Best_AUC", "=", "AUC", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'best.pth'", ")", "\n", "np", ".", "save", "(", "res_folder_name", "+", "'/avg_train_loss_list.np'", ",", "avg_train_loss_list", ")", "\n", "cur_learning_rate", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "print", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "if", "Global_step", "%", "args", ".", "lr_decay_step", "==", "0", ":", "\n", "                ", "Learning_Rate", "=", "Learning_Rate", "*", "args", ".", "lr_decay_rate", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "Learning_Rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "", "", "f1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross_resnet50.main": [[196, 202], ["arch.resnet50.resnet50", "model.to.to", "print", "print", "TRAIN_cross_resnet50.train", "sum", "numpy.prod", "p.size", "model.to.parameters"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.resnet50", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "model", "=", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "\"number of model parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "train", "(", "args", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.parse_args": [[21, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'cq'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "2e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "default", "=", "999999999", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "24", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "12", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_step'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--save_root'", ",", "default", "=", "'./Training_results/Cross_df/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"Xception_fusion/\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.fix_seed": [[41, 50], ["torch.cuda.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "str"], "function", ["None"], ["", "def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.val": [[51, 72], ["print", "model.eval", "numpy.zeros", "numpy.zeros", "enumerate", "round", "tqdm.tqdm", "torch.no_grad", "data[].to", "data[].to", "model", "torch.squeeze", "criterion", "batch_val_losses.append", "torch.squeeze.cpu().numpy", "data[].to.cpu().numpy", "sum", "len", "torch.sigmoid", "torch.squeeze", "criterion.item", "torch.squeeze.cpu", "data[].to.cpu"], "function", ["None"], ["", "def", "val", "(", "model", ",", "dataloader", ",", "num_imgs", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_val_losses", "=", "[", "]", "\n", "SCORE", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "LABEL", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "for", "num", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "label_cls", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "x", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "faces", ")", "\n", "pred_score", "=", "torch", ".", "squeeze", "(", "torch", ".", "sigmoid", "(", "x", ")", ",", "1", ")", "\n", "val_loss", "=", "criterion", "(", "torch", ".", "squeeze", "(", "x", ",", "1", ")", ",", "label_cls", ")", "\n", "batch_val_losses", ".", "append", "(", "val_loss", ".", "item", "(", ")", ")", "\n", "SCORE", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "pred_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "LABEL", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "avg_val_loss", "=", "round", "(", "sum", "(", "batch_val_losses", ")", "/", "(", "len", "(", "batch_val_losses", ")", ")", ",", "5", ")", "\n", "pred", "=", "SCORE", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "y_true", "=", "LABEL", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "avg_val_loss", ",", "pred", ",", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv": [[74, 80], ["range", "os.system", "len"], "function", ["None"], ["", "def", "combine_csv", "(", "file_array", ",", "result_name", ")", ":", "\n", "    ", "combine_cmd", "=", "\"cat \"", "\n", "for", "i", "in", "range", "(", "len", "(", "file_array", ")", ")", ":", "\n", "        ", "combine_cmd", "+=", "(", "file_array", "[", "i", "]", "+", "\" \"", ")", "\n", "", "combine_cmd", "+=", "\" > \"", "+", "result_name", "\n", "os", ".", "system", "(", "combine_cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.train": [[82, 204], ["numpy.array", "TRAIN_cross.combine_csv", "TRAIN_cross.combine_csv", "opt.data_fusion.face_Dataset", "torch.utils.data.DataLoader", "opt.data_fusion.face_Dataset", "torch.utils.data.DataLoader", "len", "len", "len", "len", "torch.optim.Adam", "print", "torch.utils.tensorboard.SummaryWriter", "open", "len", "range", "open.close", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "model.parameters", "os.path.exists", "os.makedirs", "os.mkdir", "print", "numpy.zeros", "enumerate", "opt.data_fusion.my_transforms", "opt.data_fusion.my_transforms", "tqdm.tqdm", "model.train", "torch.optim.Adam.zero_grad", "data[].to", "data[].to", "data[].to", "data[].to", "data[].to", "data[].to", "data[].to", "data[].to", "model", "torch.squeeze", "criterion", "batch_train_losses.append", "loss.backward", "torch.optim.Adam.step", "criterion", "torch.mean", "loss.item", "numpy.mean", "datetime.datetime.now().strftime", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "datetime.datetime.now().strftime", "numpy.mean", "numpy.append", "print", "open.write", "open.write", "TRAIN_cross.val", "utils.metrics_cross.get_metrics", "print", "open.write", "open.write", "torch.optim.Adam", "criterion", "criterion", "torch.mean", "torch.mean", "torch.abs", "torch.save", "numpy.save", "print", "open.write", "open.write", "model.parameters", "torch.abs", "torch.abs", "datetime.datetime.now", "datetime.datetime.now", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.combine_csv", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.val", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "train", "(", "args", ",", "model", ")", ":", "\n", "    ", "avg_train_loss_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "train_csv_file_df_c23", "=", "'./misc_cross/Train/c23_df_train.csv'", "\n", "train_csv_file_or_c23", "=", "'./misc_cross/Train/c23_or_train.csv'", "\n", "train_csv_file_df_c40", "=", "'./misc_cross/Train/c40_df_train.csv'", "\n", "train_csv_file_or_c40", "=", "'./misc_cross/Train/c40_or_train.csv'", "\n", "\n", "val_csv_file_df_c23", "=", "'./misc_cross/Val100/c23_df_val.csv'", "\n", "val_csv_file_or_c23", "=", "'./misc_cross/Val100/c23_or_val.csv'", "\n", "val_csv_file_df_c40", "=", "'./misc_cross/Val100/c40_df_val.csv'", "\n", "val_csv_file_or_c40", "=", "'./misc_cross/Val100/c40_or_val.csv'", "\n", "\n", "training_csv_files", "=", "[", "train_csv_file_df_c23", ",", "train_csv_file_or_c23", ",", "train_csv_file_df_c40", ",", "train_csv_file_or_c40", "]", "\n", "val_csv_files", "=", "[", "val_csv_file_df_c23", ",", "val_csv_file_or_c23", ",", "val_csv_file_df_c40", ",", "val_csv_file_or_c40", "]", "\n", "\n", "tem_train_file_name", "=", "'training_xcepfusion_cross_train'", "\n", "tem_val_file_name", "=", "'training_xcepfusion_cross_val'", "\n", "combine_csv", "(", "training_csv_files", ",", "tem_train_file_name", ")", "\n", "combine_csv", "(", "val_csv_files", ",", "tem_val_file_name", ")", "\n", "tem_train_file_path", "=", "args", ".", "root_path", "+", "tem_train_file_name", "\n", "tem_val_file_path", "=", "args", ".", "root_path", "+", "tem_val_file_name", "\n", "\n", "training_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_train_file_path", ",", "\n", "transform", "=", "my_transforms", "(", "299", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "training_dataloader", "=", "DataLoader", "(", "training_dataset", ",", "batch_size", "=", "args", ".", "batch_size_train", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "face_Dataset", "(", "csv_file", "=", "tem_val_file_path", ",", "transform", "=", "my_transforms", "(", "299", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size_val", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "Num_val_imgs_1", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_2", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c23", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_3", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_df_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_imgs_4", "=", "len", "(", "pd", ".", "read_csv", "(", "val_csv_file_or_c40", ",", "header", "=", "None", ")", ")", "\n", "Num_val_all", "=", "Num_val_imgs_1", "+", "Num_val_imgs_2", "+", "Num_val_imgs_3", "+", "Num_val_imgs_4", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# result folder", "\n", "res_folder_name", "=", "args", ".", "save_root", "+", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "res_folder_name", ")", "\n", "os", ".", "mkdir", "(", "res_folder_name", "+", "'/ckpt/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: RESULT PATH ALREADY EXISTED -> \"", "+", "res_folder_name", ")", "\n", "", "print", "(", "'find models here: '", ",", "res_folder_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "res_folder_name", ")", "\n", "f1", "=", "open", "(", "res_folder_name", "+", "\"/training_log.csv\"", ",", "'a+'", ")", "\n", "\n", "Best_AUC", "=", "0", "\n", "# training", "\n", "steps_per_epoch", "=", "len", "(", "training_dataloader", ")", "\n", "Learning_Rate", "=", "args", ".", "lr", "\n", "for", "epoch", "in", "range", "(", "args", ".", "warm_start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "batch_train_losses", "=", "[", "]", "\n", "step_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "tqdm", "(", "training_dataloader", ")", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "frames", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "seg_label1", "=", "data", "[", "'label_mask_seg1'", "]", ".", "to", "(", "device", ")", "\n", "seg_label2", "=", "data", "[", "'label_mask_seg2'", "]", ".", "to", "(", "device", ")", "\n", "seg_label3", "=", "data", "[", "'label_mask_seg3'", "]", ".", "to", "(", "device", ")", "\n", "noise_label1", "=", "data", "[", "'label_noise_seg1'", "]", ".", "to", "(", "device", ")", "\n", "noise_label2", "=", "data", "[", "'label_noise_seg2'", "]", ".", "to", "(", "device", ")", "\n", "noise_label3", "=", "data", "[", "'label_noise_seg3'", "]", ".", "to", "(", "device", ")", "\n", "x", ",", "seg1", ",", "seg2", ",", "seg3", ",", "noise1", ",", "noise2", ",", "noise3", "=", "model", "(", "frames", ")", "\n", "predicted_label", "=", "torch", ".", "squeeze", "(", "x", ",", "1", ")", "\n", "loss1", "=", "criterion", "(", "predicted_label", ",", "labels", ")", "\n", "loss2", "=", "criterion", "(", "seg1", ",", "seg_label1", ")", "+", "criterion", "(", "seg2", ",", "seg_label2", ")", "+", "criterion", "(", "seg3", ",", "seg_label3", ")", "\n", "loss3", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "noise1", "-", "noise_label1", ")", ")", "+", "torch", ".", "mean", "(", "\n", "torch", ".", "abs", "(", "noise2", "-", "noise_label2", ")", ")", "+", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "noise3", "-", "noise_label3", ")", ")", "\n", "loss", "=", "loss1", "+", "loss2", "+", "loss3", "\n", "step_loss", "[", "step", "]", "=", "loss", "\n", "batch_train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "Global_step", "=", "epoch", "*", "steps_per_epoch", "+", "(", "step", "+", "1", ")", "\n", "\n", "if", "Global_step", "%", "args", ".", "disp_step", "==", "0", ":", "\n", "                ", "avg_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "step_log_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d |average loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "avg_loss", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "Global_step", ")", "\n", "print", "(", "'\\n'", ",", "step_log_msg", ")", "\n", "\n", "", "if", "Global_step", "%", "args", ".", "save_model", "==", "0", ":", "\n", "                ", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "avg_train_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_train_loss_list", "=", "np", ".", "append", "(", "avg_train_loss_list", ",", "avg_train_loss", ")", "\n", "log_msg", "=", "'[%s] Epoch: %d/%d | 1/10 average epoch loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "avg_train_loss", ")", "\n", "print", "(", "'\\n'", ",", "log_msg", ")", "\n", "f1", ".", "write", "(", "log_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# validation", "\n", "val_loss", ",", "pred", ",", "y", "=", "val", "(", "model", ",", "val_dataloader", ",", "Num_val_all", ")", "\n", "threshold", "=", "0.5", "\n", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", "=", "get_metrics", "(", "pred", ",", "y", ",", "threshold", ")", "\n", "val_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d | average df validation loss: %f | AUC: %f | ACC: %f| FPR: %f| FTR: %f| EER: %f| AP: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "val_loss", ",", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "AP", ")", "\n", "print", "(", "'\\n'", ",", "val_msg", ")", "\n", "f1", ".", "write", "(", "val_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# save model", "\n", "if", "AUC", ">", "Best_AUC", ":", "\n", "                    ", "Best_AUC", "=", "AUC", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'best.pth'", ")", "\n", "np", ".", "save", "(", "res_folder_name", "+", "'/avg_train_loss_list.np'", ",", "avg_train_loss_list", ")", "\n", "cur_learning_rate", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "print", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "if", "Global_step", "%", "args", ".", "lr_decay_step", "==", "0", ":", "\n", "                ", "Learning_Rate", "=", "Learning_Rate", "*", "args", ".", "lr_decay_rate", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "Learning_Rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "", "", "f1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN_cross.main": [[206, 212], ["arch.xcep_fusion.xception", "model.to.to", "print", "print", "TRAIN_cross.train", "sum", "numpy.prod", "p.size", "model.to.parameters"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception.xception", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "model", "=", "xception", "(", "pretrained", "=", "True", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "\"number of model parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "train", "(", "args", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args": [[20, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'cq'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "2e-5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "12", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_step'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_weight1'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_weight2'", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--save_root'", ",", "default", "=", "'./Training_results/Xception_fusion/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--train_csv'", ",", "default", "=", "'./misc_intra/Train/train.csv'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--val_csv'", ",", "default", "=", "'./misc_intra/Val100/val.csv'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"xcep_fusion/\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.fix_seed": [[41, 50], ["torch.cuda.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "str"], "function", ["None"], ["", "def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.validation": [[51, 72], ["print", "model.eval", "numpy.zeros", "numpy.zeros", "enumerate", "round", "utils.metrics_intra.get_metrics", "tqdm.tqdm", "torch.no_grad", "data[].to", "data[].to", "model", "criterion", "torch.squeeze", "batch_val_losses.append", "torch.squeeze.cpu().numpy", "data[].to.cpu().numpy", "sum", "len", "torch.squeeze", "torch.sigmoid", "criterion.item", "torch.squeeze.cpu", "data[].to.cpu"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics"], ["", "def", "validation", "(", "model", ",", "dataloader", ",", "num_imgs", ",", "thre", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_val_losses", "=", "[", "]", "\n", "SCORE", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "LABEL", "=", "np", ".", "zeros", "(", "num_imgs", ")", "\n", "for", "num", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "faces", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "label_cls", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "x", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "faces", ")", "\n", "val_loss", "=", "criterion", "(", "torch", ".", "squeeze", "(", "x", ")", ",", "label_cls", ")", "\n", "pred_score", "=", "torch", ".", "squeeze", "(", "torch", ".", "sigmoid", "(", "x", ")", ",", "1", ")", "\n", "batch_val_losses", ".", "append", "(", "val_loss", ".", "item", "(", ")", ")", "\n", "SCORE", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "pred_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "LABEL", "[", "num", "*", "args", ".", "batch_size_val", ":", "(", "num", "+", "1", ")", "*", "args", ".", "batch_size_val", "]", "=", "label_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "avg_val_loss", "=", "round", "(", "sum", "(", "batch_val_losses", ")", "/", "(", "len", "(", "batch_val_losses", ")", ")", ",", "5", ")", "\n", "pred", "=", "SCORE", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "y_true", "=", "LABEL", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "AUC", ",", "ACC", "=", "get_metrics", "(", "pred", ",", "y_true", ",", "thre", ")", "\n", "return", "avg_val_loss", ",", "AUC", ",", "ACC", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train": [[74, 159], ["numpy.array", "opt.dataloader_fusion.face_Dataset", "torch.utils.data.DataLoader", "opt.dataloader_fusion.face_Dataset", "torch.utils.data.DataLoader", "len", "torch.optim.Adam", "print", "torch.utils.tensorboard.SummaryWriter", "open", "len", "range", "open.close", "pandas.read_csv", "model.parameters", "os.path.exists", "os.makedirs", "os.mkdir", "print", "numpy.zeros", "enumerate", "opt.dataloader_fusion.my_transforms", "opt.dataloader_fusion.my_transforms", "tqdm.tqdm", "model.train", "torch.optim.Adam.zero_grad", "data[].to", "data[].to", "data[].to", "data[].to", "data[].to", "data[].to", "data[].to", "data[].to", "model", "torch.squeeze", "criterion", "batch_train_losses.append", "loss.backward", "torch.optim.Adam.step", "criterion", "torch.mean", "loss.item", "numpy.mean", "datetime.datetime.now().strftime", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "datetime.datetime.now().strftime", "numpy.mean", "numpy.append", "print", "open.write", "open.write", "TRAIN.validation", "print", "open.write", "open.write", "criterion", "criterion", "torch.mean", "torch.mean", "torch.abs", "torch.save", "numpy.save", "print", "open.write", "open.write", "torch.abs", "torch.abs", "datetime.datetime.now", "datetime.datetime.now", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.validation", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "train", "(", "args", ",", "model", ")", ":", "\n", "    ", "avg_train_loss_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "training_dataset", "=", "face_Dataset", "(", "csv_file", "=", "args", ".", "train_csv", ",", "transform", "=", "my_transforms", "(", "299", ",", "RandomHorizontalFlip", "=", "True", ")", ")", "\n", "training_dataloader", "=", "DataLoader", "(", "training_dataset", ",", "batch_size", "=", "args", ".", "batch_size_train", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "face_Dataset", "(", "csv_file", "=", "args", ".", "val_csv", ",", "transform", "=", "my_transforms", "(", "299", ",", "RandomHorizontalFlip", "=", "False", ")", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size_val", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "Num_val_imgs", "=", "len", "(", "pd", ".", "read_csv", "(", "args", ".", "val_csv", ",", "header", "=", "None", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# result folder", "\n", "res_folder_name", "=", "args", ".", "save_root", "+", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "res_folder_name", ")", "\n", "os", ".", "mkdir", "(", "res_folder_name", "+", "'/ckpt/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: RESULT PATH ALREADY EXISTED -> \"", "+", "res_folder_name", ")", "\n", "", "print", "(", "'find models here: '", ",", "res_folder_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "res_folder_name", ")", "\n", "f1", "=", "open", "(", "res_folder_name", "+", "\"/training_log.csv\"", ",", "'a+'", ")", "\n", "Best_AUC", "=", "0", "\n", "# training", "\n", "steps_per_epoch", "=", "len", "(", "training_dataloader", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "warm_start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "batch_train_losses", "=", "[", "]", "\n", "step_loss", "=", "np", ".", "zeros", "(", "steps_per_epoch", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "tqdm", "(", "training_dataloader", ")", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "frames", "=", "data", "[", "'faces'", "]", ".", "to", "(", "device", ")", "\n", "masks1", "=", "data", "[", "'masks1'", "]", ".", "to", "(", "device", ")", "\n", "masks2", "=", "data", "[", "'masks2'", "]", ".", "to", "(", "device", ")", "\n", "masks3", "=", "data", "[", "'masks3'", "]", ".", "to", "(", "device", ")", "\n", "noises1", "=", "data", "[", "'noises1'", "]", ".", "to", "(", "device", ")", "\n", "noises2", "=", "data", "[", "'noises2'", "]", ".", "to", "(", "device", ")", "\n", "noises3", "=", "data", "[", "'noises3'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "pred", ",", "msk1", ",", "msk2", ",", "msk3", ",", "nis1", ",", "nis2", ",", "nis3", "=", "model", "(", "frames", ")", "\n", "predicted_label", "=", "torch", ".", "squeeze", "(", "pred", ",", "1", ")", "\n", "loss_cls", "=", "criterion", "(", "predicted_label", ",", "labels", ")", "\n", "loss_seg", "=", "criterion", "(", "msk1", ",", "masks1", ")", "+", "criterion", "(", "msk2", ",", "masks2", ")", "+", "criterion", "(", "msk3", ",", "masks3", ")", "\n", "loss_nis", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "noises1", "-", "nis1", ")", ")", "+", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "noises2", "-", "nis2", ")", ")", "+", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "noises3", "-", "nis3", ")", ")", "\n", "\n", "loss", "=", "loss_cls", "+", "args", ".", "loss_weight1", "*", "loss_seg", "+", "args", ".", "loss_weight2", "*", "loss_nis", "\n", "step_loss", "[", "step", "]", "=", "loss", "\n", "batch_train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "Global_step", "=", "epoch", "*", "steps_per_epoch", "+", "(", "step", "+", "1", ")", "\n", "\n", "if", "Global_step", "%", "args", ".", "disp_step", "==", "0", ":", "\n", "                ", "avg_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "step_log_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d |average loss: %f'", "%", "(", "\n", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "avg_loss", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "Global_step", ")", "\n", "print", "(", "'\\n'", ",", "step_log_msg", ")", "\n", "\n", "", "if", "Global_step", "%", "args", ".", "save_model", "==", "0", ":", "\n", "                ", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "avg_train_loss", "=", "np", ".", "mean", "(", "step_loss", "[", "(", "step", "+", "1", ")", "-", "args", ".", "disp_step", ":", "(", "step", "+", "1", ")", "]", ")", "\n", "avg_train_loss_list", "=", "np", ".", "append", "(", "avg_train_loss_list", ",", "avg_train_loss", ")", "\n", "log_msg", "=", "'[%s] Epoch: %d/%d | 1/10 average epoch loss: %f'", "%", "(", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "avg_train_loss", ")", "\n", "print", "(", "'\\n'", ",", "log_msg", ")", "\n", "f1", ".", "write", "(", "log_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# validation", "\n", "val_loss", ",", "AUC", ",", "ACC", "=", "validation", "(", "model", ",", "val_dataloader", ",", "Num_val_imgs", ",", "0.5", ")", "\n", "val_msg", "=", "'[%s] Epoch: %d/%d | Global_step: %d | average validation loss: %f | ACC: %f| AUC: %f'", "%", "(", "now_time", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "Global_step", ",", "val_loss", ",", "ACC", ",", "AUC", ")", "\n", "print", "(", "'\\n'", ",", "val_msg", ")", "\n", "f1", ".", "write", "(", "val_msg", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# save model", "\n", "if", "AUC", ">", "Best_AUC", ":", "\n", "                    ", "Best_AUC", "=", "AUC", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "res_folder_name", "+", "'/ckpt/'", "+", "'epoch-%d_step-%d.pth'", "%", "(", "epoch", "+", "args", ".", "warm_start_epoch", ",", "Global_step", ")", ")", "\n", "np", ".", "save", "(", "res_folder_name", "+", "'/avg_train_loss_list.np'", ",", "avg_train_loss_list", ")", "\n", "cur_learning_rate", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "print", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'Saved model. lr %f'", "%", "cur_learning_rate", "[", "0", "]", ")", "\n", "f1", ".", "write", "(", "'\\n'", ")", "\n", "", "", "", "", "f1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.main": [[161, 168], ["arch.xcep_fusion.xception", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "print", "print", "TRAIN.train", "sum", "numpy.prod", "p.size", "torch.nn.DataParallel.parameters"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception.xception", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.None.TRAIN.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "model", "=", "xception", "(", "pretrained", "=", "True", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "[", "0", ",", "1", "]", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "\"number of model parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "train", "(", "args", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.calculate": [[65, 72], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not"], "function", ["None"], ["", "def", "calculate", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "1", "-", "dist", ",", "1", "-", "threshold", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "tn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "actual_issame", ")", ")", "\n", "return", "tp", ",", "fp", ",", "tn", ",", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.pbca": [[14, 19], ["metrics_cross.calculate"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.calculate"], ["", "def", "pbca", "(", "msk_pred", ",", "msk_gt", ",", "thre", ")", ":", "\n", "    ", "gt_bool", "=", "(", "msk_gt", ">", "0.5", ")", "\n", "tp", ",", "fp", ",", "tn", ",", "fn", "=", "calculate", "(", "thre", ",", "msk_pred", ",", "gt_bool", ")", "\n", "PBCA", "=", "(", "tp", "+", "tn", ")", "/", "(", "(", "tp", "+", "fp", "+", "tn", "+", "fn", ")", "*", "1.0", ")", "\n", "return", "PBCA", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.I_U": [[20, 24], ["pred.sum", "gt.sum"], "function", ["None"], ["", "def", "I_U", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "intersection", "=", "(", "pred", "*", "gt", ")", ".", "sum", "(", ")", "\n", "union", "=", "pred", ".", "sum", "(", ")", "+", "gt", ".", "sum", "(", ")", "-", "intersection", "\n", "return", "intersection", ",", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.iinc": [[25, 48], ["numpy.prod", "numpy.less", "numpy.mean", "numpy.mean", "numpy.sum", "numpy.sum", "metrics_cross.I_U", "metrics_cross.I_U", "metrics_cross.I_U"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.I_U", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.I_U", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.I_U"], ["", "def", "iinc", "(", "msk_pred", ",", "msk_gt", ",", "thre", ")", ":", "\n", "    ", "pixel_num", "=", "np", ".", "prod", "(", "msk_pred", ".", "shape", ")", "\n", "gt_bool", "=", "(", "msk_gt", ">", "thre", ")", "\n", "pred_bool", "=", "np", ".", "less", "(", "1", "-", "msk_pred", ",", "1", "-", "thre", ")", "\n", "Mgt_mean", "=", "np", ".", "mean", "(", "gt_bool", ")", "\n", "Mgt_l1", "=", "np", ".", "sum", "(", "gt_bool", ")", "*", "1.0", "\n", "Mpred_mean", "=", "np", ".", "mean", "(", "pred_bool", ")", "\n", "Mpred_l1", "=", "np", ".", "sum", "(", "pred_bool", ")", "*", "1.0", "\n", "if", "Mgt_mean", "==", "0", "and", "Mpred_mean", "==", "0", ":", "\n", "        ", "IINC", "=", "0", "\n", "", "elif", "Mgt_mean", "==", "0", "and", "Mpred_mean", "!=", "0", ":", "\n", "        ", "_", ",", "U", "=", "I_U", "(", "pred_bool", ",", "gt_bool", ")", "\n", "U_norm", "=", "U", "/", "pixel_num", "\n", "IINC", "=", "1", "/", "(", "3", "-", "U_norm", ")", "\n", "", "elif", "Mgt_mean", "!=", "0", "and", "Mpred_mean", "==", "0", ":", "\n", "        ", "_", ",", "U", "=", "I_U", "(", "pred_bool", ",", "gt_bool", ")", "\n", "U_norm", "=", "U", "/", "pixel_num", "\n", "IINC", "=", "1", "/", "(", "3", "-", "U_norm", ")", "\n", "", "else", ":", "\n", "        ", "I", ",", "U", "=", "I_U", "(", "pred_bool", ",", "gt_bool", ")", "\n", "U_norm", "=", "U", "/", "pixel_num", "\n", "IINC", "=", "(", "2", "-", "I", "/", "Mpred_l1", "-", "I", "/", "Mgt_l1", ")", "*", "(", "1", "/", "(", "3", "-", "U_norm", ")", ")", "\n", "", "return", "IINC", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.get_loc_metrics": [[49, 53], ["metrics_cross.pbca", "metrics_cross.iinc"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.pbca", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.iinc"], ["", "def", "get_loc_metrics", "(", "pred", ",", "gt", ",", "thre", ")", ":", "\n", "    ", "PBCA", "=", "pbca", "(", "pred", ",", "gt", ",", "thre", ")", "\n", "IINC", "=", "iinc", "(", "pred", ",", "gt", ",", "thre", ")", "\n", "return", "PBCA", ",", "IINC", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.calculate_accuracy": [[54, 64], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "float", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "float", "float", "float", "float"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "1", "-", "dist", ",", "1", "-", "threshold", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "tn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "actual_issame", ")", ")", "\n", "tpr", "=", "0", "if", "(", "tp", "+", "fn", "==", "0", ")", "else", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fn", ")", "\n", "fpr", "=", "0", "if", "(", "fp", "+", "tn", "==", "0", ")", "else", "float", "(", "fp", ")", "/", "float", "(", "fp", "+", "tn", ")", "\n", "acc", "=", "float", "(", "tp", "+", "tn", ")", "/", "dist", ".", "shape", "[", "0", "]", "\n", "return", "tpr", ",", "fpr", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.FPR_FNR": [[73, 78], ["metrics_cross.calculate"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.calculate"], ["", "def", "FPR_FNR", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "tp", ",", "fp", ",", "tn", ",", "fn", "=", "calculate", "(", "threshold", ",", "dist", ",", "actual_issame", ")", "\n", "FPR", "=", "fp", "/", "(", "tn", "*", "1.0", "+", "fp", "*", "1.0", ")", "\n", "FNR", "=", "fn", "/", "(", "fn", "*", "1.0", "+", "tp", "*", "1.0", ")", "\n", "return", "FPR", ",", "FNR", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.eer_auc": [[79, 84], ["sklearn.metrics.roc_curve", "scipy.optimize.brentq", "sklearn.metrics.auc", "scipy.interpolate.interp1d"], "function", ["None"], ["", "def", "eer_auc", "(", "y", ",", "y_score", ")", ":", "\n", "    ", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "y", ",", "y_score", ",", "pos_label", "=", "1", ")", "\n", "eer", "=", "brentq", "(", "lambda", "x", ":", "1.", "-", "x", "-", "interp1d", "(", "fpr", ",", "tpr", ")", "(", "x", ")", ",", "0.", ",", "1.", ")", "\n", "AUC", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "return", "eer", ",", "AUC", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.compute_mAP": [[85, 87], ["sklearn.metrics.average_precision_score"], "function", ["None"], ["", "def", "compute_mAP", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "average_precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.get_metrics": [[88, 95], ["metrics_cross.compute_mAP", "metrics_cross.calculate_accuracy", "metrics_cross.FPR_FNR", "metrics_cross.eer_auc"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.compute_mAP", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.calculate_accuracy", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_cross.FPR_FNR", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.eer_auc"], ["", "def", "get_metrics", "(", "pred", ",", "gt", ",", "thre", ")", ":", "\n", "    ", "mAP", "=", "compute_mAP", "(", "gt", ",", "pred", ")", "\n", "gt_bool", "=", "(", "gt", ">", "0.5", ")", "\n", "_", ",", "_", ",", "ACC", "=", "calculate_accuracy", "(", "thre", ",", "pred", ",", "gt_bool", ")", "\n", "FPR", ",", "FNR", "=", "FPR_FNR", "(", "thre", ",", "pred", ",", "gt_bool", ")", "\n", "EER", ",", "AUC", "=", "eer_auc", "(", "gt", ",", "pred", ")", "\n", "return", "AUC", ",", "ACC", ",", "FPR", ",", "FNR", ",", "EER", ",", "mAP", "", "", ""]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.calculate_accuracy": [[6, 16], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "float", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "float", "float", "float", "float"], "function", ["None"], ["def", "calculate_accuracy", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "1", "-", "dist", ",", "1", "-", "threshold", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "tn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "actual_issame", ")", ")", "\n", "tpr", "=", "0", "if", "(", "tp", "+", "fn", "==", "0", ")", "else", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fn", ")", "\n", "fpr", "=", "0", "if", "(", "fp", "+", "tn", "==", "0", ")", "else", "float", "(", "fp", ")", "/", "float", "(", "fp", "+", "tn", ")", "\n", "acc", "=", "float", "(", "tp", "+", "tn", ")", "/", "dist", ".", "shape", "[", "0", "]", "\n", "return", "tpr", ",", "fpr", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.eer_auc": [[17, 22], ["sklearn.metrics.roc_curve", "scipy.optimize.brentq", "sklearn.metrics.auc", "scipy.interpolate.interp1d"], "function", ["None"], ["", "def", "eer_auc", "(", "y", ",", "y_score", ")", ":", "\n", "    ", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y", ",", "y_score", ",", "pos_label", "=", "1", ")", "\n", "eer", "=", "brentq", "(", "lambda", "x", ":", "1.", "-", "x", "-", "interp1d", "(", "fpr", ",", "tpr", ")", "(", "x", ")", ",", "0.", ",", "1.", ")", "\n", "AUC", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "return", "eer", ",", "AUC", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.get_metrics": [[23, 28], ["metrics_intra.calculate_accuracy", "metrics_intra.eer_auc"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.calculate_accuracy", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.utils.metrics_intra.eer_auc"], ["", "def", "get_metrics", "(", "pred", ",", "gt", ",", "thre", ")", ":", "\n", "    ", "gt_bool", "=", "(", "gt", ">", "0.5", ")", "\n", "_", ",", "_", ",", "ACC", "=", "calculate_accuracy", "(", "thre", ",", "pred", ",", "gt_bool", ")", "\n", "_", ",", "AUC", "=", "eer_auc", "(", "gt", ",", "pred", ")", "\n", "return", "AUC", ",", "ACC", "", "", ""]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.SeparableConv2d.__init__": [[10, 14], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "c_out", ",", "ks", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "ks", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "c_in", ",", "bias", "=", "bias", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.SeparableConv2d.forward": [[15, 19], ["xcep_dffd_ce.SeparableConv2d.c", "xcep_dffd_ce.SeparableConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "c", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Block.__init__": [[22, 59], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "rep.append", "xcep_dffd_ce.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xcep_dffd_ce.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xcep_dffd_ce.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "c_out", ",", "reps", ",", "stride", "=", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "skip", "=", "None", "\n", "self", ".", "skip_bn", "=", "None", "\n", "if", "c_out", "!=", "c_in", "or", "stride", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "skip_bn", "=", "nn", ".", "BatchNorm2d", "(", "c_out", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "rep", "=", "[", "]", "\n", "c", "=", "c_in", "\n", "if", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "c_in", ",", "c_out", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "c_out", ")", ")", "\n", "c", "=", "c_out", "\n", "\n", "", "for", "i", "in", "range", "(", "reps", "-", "1", ")", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "c", ",", "c", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "c", ")", ")", "\n", "\n", "", "if", "not", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "c_in", ",", "c_out", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "c_out", ")", ")", "\n", "\n", "", "if", "not", "start_with_relu", ":", "\n", "            ", "rep", "=", "rep", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "rep", "[", "0", "]", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "", "if", "stride", "!=", "1", ":", "\n", "            ", "rep", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", ",", "1", ")", ")", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Block.forward": [[60, 71], ["xcep_dffd_ce.Block.rep", "xcep_dffd_ce.Block.skip", "xcep_dffd_ce.Block.skip_bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "self", ".", "rep", "(", "inp", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "y", "=", "self", ".", "skip", "(", "inp", ")", "\n", "y", "=", "self", ".", "skip_bn", "(", "y", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "inp", "\n", "\n", "", "x", "+=", "y", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.RegressionMap.__init__": [[74, 78], ["torch.Module.__init__", "xcep_dffd_ce.SeparableConv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ")", ":", "\n", "        ", "super", "(", "RegressionMap", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c", "=", "SeparableConv2d", "(", "c_in", ",", "2", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "s", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.RegressionMap.forward": [[79, 83], ["xcep_dffd_ce.RegressionMap.c"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mask", "=", "self", ".", "c", "(", "x", ")", "\n", "# mask = self.s(mask)", "\n", "return", "mask", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.TemplateMap.__init__": [[86, 93], ["torch.Module.__init__", "xcep_dffd_ce.Block", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "templates", ",", "mean_template", ")", ":", "\n", "        ", "super", "(", "TemplateMap", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c", "=", "Block", "(", "c_in", ",", "364", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ")", "\n", "self", ".", "l", "=", "nn", ".", "Linear", "(", "364", ",", "10", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "templates", "=", "templates", "\n", "self", ".", "mean_template", "=", "mean_template", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.TemplateMap.forward": [[94, 105], ["xcep_dffd_ce.TemplateMap.c", "xcep_dffd_ce.TemplateMap.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "xcep_dffd_ce.TemplateMap.view", "xcep_dffd_ce.TemplateMap.l", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "mask.reshape.reshape.reshape", "xcep_dffd_ce.TemplateMap.size", "xcep_dffd_ce.TemplateMap.templates.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "v", "=", "self", ".", "c", "(", "x", ")", "\n", "v", "=", "self", ".", "relu", "(", "v", ")", "\n", "v", "=", "F", ".", "adaptive_avg_pool2d", "(", "v", ",", "(", "1", ",", "1", ")", ")", "\n", "v", "=", "v", ".", "view", "(", "v", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "v", "=", "self", ".", "l", "(", "v", ")", "\n", "mask", "=", "torch", ".", "mm", "(", "v", ",", "self", ".", "templates", ".", "reshape", "(", "10", ",", "361", ")", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "19", ",", "19", ")", "\n", "mask", "=", "mask", "+", "self", ".", "mean_template", "\n", "\n", "return", "mask", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.PCATemplateMap.__init__": [[108, 111], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "templates", ")", ":", "\n", "        ", "super", "(", "PCATemplateMap", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "templates", "=", "templates", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.PCATemplateMap.forward": [[112, 129], ["x.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "xcep_dffd_ce.PCATemplateMap.templates.reshape().repeat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.symeig", "torch.bmm.symeig", "torch.bmm.symeig", "torch.bmm.symeig", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select.squeeze", "torch.index_select.squeeze", "torch.index_select.squeeze", "torch.index_select.squeeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "mask.reshape.reshape.reshape", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "xcep_dffd_ce.PCATemplateMap.templates.reshape", "xcep_dffd_ce.PCATemplateMap.templates.reshape", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fe", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", "\n", "fe", "=", "torch", ".", "transpose", "(", "fe", ",", "1", ",", "2", ")", "\n", "mu", "=", "torch", ".", "mean", "(", "fe", ",", "2", ",", "keepdim", "=", "True", ")", "\n", "fea_diff", "=", "fe", "-", "mu", "\n", "\n", "cov_fea", "=", "torch", ".", "bmm", "(", "fea_diff", ",", "torch", ".", "transpose", "(", "fea_diff", ",", "1", ",", "2", ")", ")", "\n", "B", "=", "self", ".", "templates", ".", "reshape", "(", "1", ",", "10", ",", "361", ")", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "D", "=", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "B", ",", "cov_fea", ")", ",", "torch", ".", "transpose", "(", "B", ",", "1", ",", "2", ")", ")", "\n", "eigen_value", ",", "eigen_vector", "=", "D", ".", "symeig", "(", "eigenvectors", "=", "True", ")", "\n", "index", "=", "torch", ".", "tensor", "(", "[", "9", "]", ")", ".", "cuda", "(", ")", "\n", "eigen", "=", "torch", ".", "index_select", "(", "eigen_vector", ",", "2", ",", "index", ")", "\n", "\n", "v", "=", "eigen", ".", "squeeze", "(", "-", "1", ")", "\n", "mask", "=", "torch", ".", "mm", "(", "v", ",", "self", ".", "templates", ".", "reshape", "(", "10", ",", "361", ")", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "19", ",", "19", ")", "\n", "return", "mask", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Xception.__init__": [[137, 180], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xcep_dffd_ce.Block", "xcep_dffd_ce.Block", "xcep_dffd_ce.Block", "xcep_dffd_ce.Block", "xcep_dffd_ce.Block", "xcep_dffd_ce.Block", "xcep_dffd_ce.Block", "xcep_dffd_ce.Block", "xcep_dffd_ce.Block", "xcep_dffd_ce.Block", "xcep_dffd_ce.Block", "xcep_dffd_ce.Block", "xcep_dffd_ce.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xcep_dffd_ce.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "xcep_dffd_ce.RegressionMap", "xcep_dffd_ce.TemplateMap", "xcep_dffd_ce.PCATemplateMap", "print", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["def", "__init__", "(", "self", ",", "maptype", ",", "templates", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "Xception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "2", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "64", ",", "128", ",", "2", ",", "2", ",", "start_with_relu", "=", "False", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block2", "=", "Block", "(", "128", ",", "256", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "256", ",", "728", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block4", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block7", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block8", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block12", "=", "Block", "(", "728", ",", "1024", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ")", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "1536", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "1536", ")", "\n", "\n", "self", ".", "conv4", "=", "SeparableConv2d", "(", "1536", ",", "2048", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "2048", ")", "\n", "\n", "self", ".", "last_linear", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "\n", "if", "maptype", "==", "'none'", ":", "\n", "            ", "self", ".", "map", "=", "[", "1", ",", "None", "]", "\n", "", "elif", "maptype", "==", "'reg'", ":", "\n", "            ", "self", ".", "map", "=", "RegressionMap", "(", "728", ")", "\n", "", "elif", "maptype", "==", "'tmp'", ":", "\n", "            ", "self", ".", "map", "=", "TemplateMap", "(", "728", ",", "templates", ",", "mean_template", ")", "\n", "", "elif", "maptype", "==", "'pca_tmp'", ":", "\n", "            ", "self", ".", "map", "=", "PCATemplateMap", "(", "728", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Unknown map type: `{0}`'", ".", "format", "(", "maptype", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Xception.features": [[181, 211], ["xcep_dffd_ce.Xception.conv1", "xcep_dffd_ce.Xception.bn1", "xcep_dffd_ce.Xception.relu", "xcep_dffd_ce.Xception.conv2", "xcep_dffd_ce.Xception.bn2", "xcep_dffd_ce.Xception.relu", "xcep_dffd_ce.Xception.block1", "xcep_dffd_ce.Xception.block2", "xcep_dffd_ce.Xception.block3", "xcep_dffd_ce.Xception.block4", "xcep_dffd_ce.Xception.block5", "xcep_dffd_ce.Xception.block6", "xcep_dffd_ce.Xception.block7", "xcep_dffd_ce.Xception.map", "xcep_dffd_ce.Xception.block8", "xcep_dffd_ce.Xception.block9", "xcep_dffd_ce.Xception.block10", "xcep_dffd_ce.Xception.block11", "xcep_dffd_ce.Xception.block12", "xcep_dffd_ce.Xception.conv3", "xcep_dffd_ce.Xception.bn3", "xcep_dffd_ce.Xception.relu", "xcep_dffd_ce.Xception.conv4", "xcep_dffd_ce.Xception.bn4", "mask[].unsqueeze"], "methods", ["None"], ["", "", "def", "features", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "mask", ",", "vec", "=", "self", ".", "map", "(", "x", ")", "\n", "x", "=", "x", "*", "mask", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "return", "x", ",", "mask", ",", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Xception.logits": [[212, 218], ["xcep_dffd_ce.Xception.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "xcep_dffd_ce.Xception.view", "xcep_dffd_ce.Xception.last_linear", "xcep_dffd_ce.Xception.size"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "features", ")", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "last_linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Xception.forward": [[219, 223], ["xcep_dffd_ce.Xception.features", "xcep_dffd_ce.Xception.logits"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.features", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.logits"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", ",", "mask", ",", "vec", "=", "self", ".", "features", "(", "input", ")", "\n", "x", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "x", ",", "mask", ",", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.__init__": [[250, 271], ["xcep_dffd_ce.Xception", "torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "Xception.state_dict", "Xception.state_dict.update", "Xception.load_state_dict", "Xception.apply", "torch.load_url.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "maptype", "=", "'None'", ",", "templates", "=", "None", ",", "num_classes", "=", "2", ",", "load_pretrain", "=", "True", ")", ":", "\n", "        ", "model", "=", "Xception", "(", "maptype", ",", "templates", ",", "num_classes", "=", "num_classes", ")", "\n", "if", "load_pretrain", ":", "\n", "            ", "model_urls", "=", "{", "\n", "'xception'", ":", "'https://www.dropbox.com/s/1hplpzet9d7dv29/xception-c0a72b38.pth.tar?dl=1'", "\n", "}", "\n", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'xception'", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "# state_dict = torch.load('./xception-b5690688.pth')", "\n", "# for name, weights in state_dict:", "\n", "# if 'pointwise' in name:", "\n", "#     state_dict[name] = weights.unsqueeze(-1).unsqueeze(-1)", "\n", "# del state_dict['fc.weight']", "\n", "# del state_dict['fc.bias']", "\n", "# model.load_state_dict(state_dict, False)", "\n", "", "else", ":", "\n", "            ", "model", ".", "apply", "(", "init_weights", ")", "\n", "", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save": [[272, 276], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "xcep_dffd_ce.Model.model.state_dict", "optim.state_dict"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.save"], ["", "def", "save", "(", "self", ",", "epoch", ",", "optim", ",", "model_dir", ")", ":", "\n", "        ", "state", "=", "{", "'net'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "'optim'", ":", "optim", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "state", ",", "'{0}/{1:06d}.tar'", ".", "format", "(", "model_dir", ",", "epoch", ")", ")", "\n", "print", "(", "'Saved model `{0}`'", ".", "format", "(", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load": [[277, 285], ["print", "os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "xcep_dffd_ce.Model.model.load_state_dict", "print"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load"], ["", "def", "load", "(", "self", ",", "epoch", ",", "model_dir", ")", ":", "\n", "        ", "filename", "=", "'{0}{1:06d}.tar'", ".", "format", "(", "model_dir", ",", "epoch", ")", "\n", "print", "(", "'Loading model from {0}'", ".", "format", "(", "filename", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "state", "=", "torch", ".", "load", "(", "filename", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "state", "[", "'net'", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Failed to load model from {0}'", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.init_weights": [[225, 247], ["classname.find", "m.c.weight.data.normal_", "m.pointwise.weight.data.normal_", "m.c.bias.data.fill_", "m.pointwise.bias.data.fill_", "m.weight.data.normal_", "classname.find", "classname.find", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "i.__class__.__name__.find", "i.data.normal_", "i.__class__.__name__.find", "i.bias.data.fill_"], "function", ["None"], ["", "", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'SeparableConv2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "c", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.01", ")", "\n", "if", "m", ".", "c", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "c", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "m", ".", "pointwise", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.01", ")", "\n", "if", "m", ".", "pointwise", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "pointwise", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'LSTM'", ")", "!=", "-", "1", ":", "\n", "        ", "for", "i", "in", "m", ".", "_parameters", ":", "\n", "            ", "if", "i", ".", "__class__", ".", "__name__", ".", "find", "(", "'weight'", ")", "!=", "-", "1", ":", "\n", "                ", "i", ".", "data", ".", "normal_", "(", "0.0", ",", "0.01", ")", "\n", "", "elif", "i", ".", "__class__", ".", "__name__", ".", "find", "(", "'bias'", ")", "!=", "-", "1", ":", "\n", "                ", "i", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.Filter.__init__": [[15, 30], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "F3NET.Filter.learnable.data.normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "F3NET.generate_filter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "F3NET.generate_filter"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.generate_filter", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.generate_filter"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "band_start", ",", "band_end", ",", "use_learnable", "=", "True", ",", "norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "Filter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_learnable", "=", "use_learnable", "\n", "\n", "self", ".", "base", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "generate_filter", "(", "band_start", ",", "band_end", ",", "size", ")", ")", ",", "requires_grad", "=", "False", ")", "\n", "if", "self", ".", "use_learnable", ":", "\n", "            ", "self", ".", "learnable", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "size", ",", "size", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "learnable", ".", "data", ".", "normal_", "(", "0.", ",", "0.1", ")", "\n", "# Todo", "\n", "# self.learnable = nn.Parameter(torch.rand((size, size)) * 0.2 - 0.1, requires_grad=True)", "\n", "\n", "", "self", ".", "norm", "=", "norm", "\n", "if", "norm", ":", "\n", "            ", "self", ".", "ft_num", "=", "nn", ".", "Parameter", "(", "torch", ".", "sum", "(", "torch", ".", "tensor", "(", "generate_filter", "(", "band_start", ",", "band_end", ",", "size", ")", ")", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.Filter.forward": [[31, 42], ["F3NET.norm_sigma"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.norm_sigma"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_learnable", ":", "\n", "            ", "filt", "=", "self", ".", "base", "+", "norm_sigma", "(", "self", ".", "learnable", ")", "\n", "", "else", ":", "\n", "            ", "filt", "=", "self", ".", "base", "\n", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "y", "=", "x", "*", "filt", "/", "self", ".", "ft_num", "\n", "", "else", ":", "\n", "            ", "y", "=", "x", "*", "filt", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.FAD_Head.__init__": [[46, 61], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "F3NET.Filter", "F3NET.Filter", "F3NET.Filter", "F3NET.Filter", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "F3NET.DCT_mat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "F3NET.DCT_mat"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.DCT_mat", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.DCT_mat"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "super", "(", "FAD_Head", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# init DCT matrix", "\n", "self", ".", "_DCT_all", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "DCT_mat", "(", "size", ")", ")", ".", "float", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_DCT_all_T", "=", "nn", ".", "Parameter", "(", "torch", ".", "transpose", "(", "torch", ".", "tensor", "(", "DCT_mat", "(", "size", ")", ")", ".", "float", "(", ")", ",", "0", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# define base filters and learnable", "\n", "# 0 - 1/16 || 1/16 - 1/8 || 1/8 - 1", "\n", "low_filter", "=", "Filter", "(", "size", ",", "0", ",", "size", "//", "16", ")", "\n", "middle_filter", "=", "Filter", "(", "size", ",", "size", "//", "16", ",", "size", "//", "8", ")", "\n", "high_filter", "=", "Filter", "(", "size", ",", "size", "//", "8", ",", "size", ")", "\n", "all_filter", "=", "Filter", "(", "size", ",", "0", ",", "size", "*", "2", ")", "\n", "\n", "self", ".", "filters", "=", "nn", ".", "ModuleList", "(", "[", "low_filter", ",", "middle_filter", ",", "high_filter", ",", "all_filter", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.FAD_Head.forward": [[62, 74], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "y_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# DCT", "\n", "        ", "x_freq", "=", "self", ".", "_DCT_all", "@", "x", "@", "self", ".", "_DCT_all_T", "# [N, 3, 299, 299]", "\n", "\n", "# 4 kernel", "\n", "y_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "x_pass", "=", "self", ".", "filters", "[", "i", "]", "(", "x_freq", ")", "# [N, 3, 299, 299]", "\n", "y", "=", "self", ".", "_DCT_all_T", "@", "x_pass", "@", "self", ".", "_DCT_all", "# [N, 3, 299, 299]", "\n", "y_list", ".", "append", "(", "y", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "1", ")", "# [N, 12, 299, 299]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.LFS_Head.__init__": [[78, 95], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "F3NET.Filter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "F3NET.DCT_mat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "F3NET.DCT_mat"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.DCT_mat", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.DCT_mat"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "window_size", ",", "M", ")", ":", "\n", "        ", "super", "(", "LFS_Head", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "_M", "=", "M", "\n", "\n", "# init DCT matrix", "\n", "self", ".", "_DCT_patch", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "DCT_mat", "(", "window_size", ")", ")", ".", "float", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_DCT_patch_T", "=", "nn", ".", "Parameter", "(", "torch", ".", "transpose", "(", "torch", ".", "tensor", "(", "DCT_mat", "(", "window_size", ")", ")", ".", "float", "(", ")", ",", "0", ",", "1", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "unfold", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "(", "window_size", ",", "window_size", ")", ",", "stride", "=", "2", ",", "padding", "=", "4", ")", "\n", "\n", "# init filters", "\n", "self", ".", "filters", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Filter", "(", "window_size", ",", "window_size", "*", "2.", "/", "M", "*", "i", ",", "window_size", "*", "2.", "/", "M", "*", "(", "i", "+", "1", ")", ",", "norm", "=", "True", ")", "for", "i", "in", "\n", "range", "(", "M", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.LFS_Head.forward": [[96, 131], ["x_gray.unsqueeze", "x_gray.unsqueeze.size", "F3NET.LFS_Head.unfold", "x_unfold.transpose().reshape.transpose().reshape.transpose().reshape", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "x_unfold.transpose().reshape.transpose().reshape.size", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "y.reshape().unsqueeze.reshape().unsqueeze.reshape().unsqueeze", "y_list.append", "x_unfold.transpose().reshape.transpose().reshape.transpose", "y.reshape().unsqueeze.reshape().unsqueeze.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# turn RGB into Gray", "\n", "        ", "x_gray", "=", "0.299", "*", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "+", "0.587", "*", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "+", "0.114", "*", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "x", "=", "x_gray", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# rescale to 0 - 255", "\n", "x", "=", "(", "x", "+", "1.", ")", "*", "122.5", "\n", "\n", "# calculate size", "\n", "N", ",", "C", ",", "W", ",", "H", "=", "x", ".", "size", "(", ")", "\n", "S", "=", "self", ".", "window_size", "\n", "size_after", "=", "int", "(", "(", "W", "-", "S", "+", "8", ")", "/", "2", ")", "+", "1", "\n", "assert", "size_after", "==", "149", "\n", "\n", "# sliding window unfold and DCT", "\n", "x_unfold", "=", "self", ".", "unfold", "(", "x", ")", "# [N, C * S * S, L]   L:block num", "\n", "L", "=", "x_unfold", ".", "size", "(", ")", "[", "2", "]", "\n", "x_unfold", "=", "x_unfold", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "N", ",", "L", ",", "C", ",", "S", ",", "S", ")", "# [N, L, C, S, S]", "\n", "x_dct", "=", "self", ".", "_DCT_patch", "@", "x_unfold", "@", "self", ".", "_DCT_patch_T", "\n", "\n", "# M kernels filtering", "\n", "y_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_M", ")", ":", "\n", "# y = self.filters[i](x_dct)    # [N, L, C, S, S]", "\n", "# y = torch.abs(y)", "\n", "# y = torch.sum(y, dim=[2,3,4])   # [N, L]", "\n", "# y = torch.log10(y + 1e-15)", "\n", "            ", "y", "=", "torch", ".", "abs", "(", "x_dct", ")", "\n", "y", "=", "torch", ".", "log10", "(", "y", "+", "1e-15", ")", "\n", "y", "=", "self", ".", "filters", "[", "i", "]", "(", "y", ")", "\n", "y", "=", "torch", ".", "sum", "(", "y", ",", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "y", "=", "y", ".", "reshape", "(", "N", ",", "size_after", ",", "size_after", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "# [N, 1, 149, 149]", "\n", "y_list", ".", "append", "(", "y", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "1", ")", "# [N, M, 149, 149]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net.__init__": [[134, 160], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "F3NET.FAD_Head", "F3NET.F3Net.init_xcep_FAD", "F3NET.LFS_Head", "F3NET.F3Net.init_xcep_LFS", "F3NET.F3Net.init_xcep"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net.init_xcep_FAD", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net.init_xcep_LFS", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net.init_xcep"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1", ",", "img_width", "=", "299", ",", "img_height", "=", "299", ",", "LFS_window_size", "=", "10", ",", "LFS_stride", "=", "2", ",", "LFS_M", "=", "6", ",", "\n", "mode", "=", "'FAD'", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", "F3Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "img_width", "==", "img_height", "\n", "img_size", "=", "img_width", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "window_size", "=", "LFS_window_size", "\n", "self", ".", "_LFS_M", "=", "LFS_M", "\n", "\n", "# init branches", "\n", "if", "mode", "==", "'FAD'", "or", "mode", "==", "'Both'", ":", "\n", "            ", "self", ".", "FAD_head", "=", "FAD_Head", "(", "img_size", ")", "\n", "self", ".", "init_xcep_FAD", "(", ")", "\n", "\n", "", "if", "mode", "==", "'LFS'", "or", "mode", "==", "'Both'", ":", "\n", "            ", "self", ".", "LFS_head", "=", "LFS_Head", "(", "img_size", ",", "LFS_window_size", ",", "LFS_M", ")", "\n", "self", ".", "init_xcep_LFS", "(", ")", "\n", "\n", "", "if", "mode", "==", "'Original'", ":", "\n", "            ", "self", ".", "init_xcep", "(", ")", "\n", "\n", "# classifier", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "4096", "if", "self", ".", "mode", "==", "'Both'", "or", "self", ".", "mode", "==", "'Mix'", "else", "2048", ",", "num_classes", ")", "\n", "self", ".", "dp", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net.init_xcep_FAD": [[161, 175], ["arch.xception_f3net.Xception", "F3NET.get_xcep_state_dict", "F3NET.F3Net.FAD_xcep.load_state_dict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.get_xcep_state_dict"], ["", "def", "init_xcep_FAD", "(", "self", ")", ":", "\n", "        ", "self", ".", "FAD_xcep", "=", "Xception", "(", "self", ".", "num_classes", ")", "\n", "\n", "# To get a good performance, using ImageNet-pretrained Xception model is recommended", "\n", "state_dict", "=", "get_xcep_state_dict", "(", ")", "\n", "conv1_data", "=", "state_dict", "[", "'conv1.weight'", "]", ".", "data", "\n", "\n", "self", ".", "FAD_xcep", ".", "load_state_dict", "(", "state_dict", ",", "False", ")", "\n", "\n", "# copy on conv1", "\n", "# let new conv1 use old param to balance the network", "\n", "self", ".", "FAD_xcep", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "12", ",", "32", ",", "3", ",", "2", ",", "0", ",", "bias", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "FAD_xcep", ".", "conv1", ".", "weight", ".", "data", "[", ":", ",", "i", "*", "3", ":", "(", "i", "+", "1", ")", "*", "3", ",", ":", ",", ":", "]", "=", "conv1_data", "/", "4.0", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net.init_xcep_LFS": [[176, 190], ["arch.xception_f3net.Xception", "F3NET.get_xcep_state_dict", "F3NET.F3Net.LFS_xcep.load_state_dict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range", "int", "float"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.get_xcep_state_dict"], ["", "", "def", "init_xcep_LFS", "(", "self", ")", ":", "\n", "        ", "self", ".", "LFS_xcep", "=", "Xception", "(", "self", ".", "num_classes", ")", "\n", "\n", "# To get a good performance, using ImageNet-pretrained Xception model is recommended", "\n", "state_dict", "=", "get_xcep_state_dict", "(", ")", "\n", "conv1_data", "=", "state_dict", "[", "'conv1.weight'", "]", ".", "data", "\n", "\n", "self", ".", "LFS_xcep", ".", "load_state_dict", "(", "state_dict", ",", "False", ")", "\n", "\n", "# copy on conv1", "\n", "# let new conv1 use old param to balance the network", "\n", "self", ".", "LFS_xcep", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "_LFS_M", ",", "32", ",", "3", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "self", ".", "_LFS_M", "/", "3", ")", ")", ":", "\n", "            ", "self", ".", "LFS_xcep", ".", "conv1", ".", "weight", ".", "data", "[", ":", ",", "i", "*", "3", ":", "(", "i", "+", "1", ")", "*", "3", ",", ":", ",", ":", "]", "=", "conv1_data", "/", "float", "(", "self", ".", "_LFS_M", "/", "3.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net.init_xcep": [[191, 197], ["arch.xception_f3net.Xception", "F3NET.get_xcep_state_dict", "F3NET.F3Net.xcep.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.get_xcep_state_dict"], ["", "", "def", "init_xcep", "(", "self", ")", ":", "\n", "        ", "self", ".", "xcep", "=", "Xception", "(", "self", ".", "num_classes", ")", "\n", "\n", "# To get a good performance, using ImageNet-pretrained Xception model is recommended", "\n", "state_dict", "=", "get_xcep_state_dict", "(", ")", "\n", "self", ".", "xcep", ".", "load_state_dict", "(", "state_dict", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net.forward": [[198, 228], ["F3NET.F3Net.dp", "F3NET.F3Net.fc", "F3NET.F3Net.FAD_head", "F3NET.F3Net.FAD_xcep.features", "F3NET.F3Net._norm_fea", "F3NET.F3Net.LFS_head", "F3NET.F3Net.LFS_xcep.features", "F3NET.F3Net._norm_fea", "F3NET.F3Net.xcep.features", "F3NET.F3Net._norm_fea", "F3NET.F3Net.FAD_head", "F3NET.F3Net.FAD_xcep.features", "F3NET.F3Net._norm_fea", "F3NET.F3Net.LFS_head", "F3NET.F3Net.LFS_xcep.features", "F3NET.F3Net._norm_fea", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.features", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net._norm_fea", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.features", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net._norm_fea", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.features", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net._norm_fea", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.features", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net._norm_fea", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.features", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net._norm_fea"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'FAD'", ":", "\n", "            ", "fea_FAD", "=", "self", ".", "FAD_head", "(", "x", ")", "\n", "fea_FAD", "=", "self", ".", "FAD_xcep", ".", "features", "(", "fea_FAD", ")", "\n", "fea_FAD", "=", "self", ".", "_norm_fea", "(", "fea_FAD", ")", "\n", "y", "=", "fea_FAD", "\n", "\n", "", "if", "self", ".", "mode", "==", "'LFS'", ":", "\n", "            ", "fea_LFS", "=", "self", ".", "LFS_head", "(", "x", ")", "\n", "fea_LFS", "=", "self", ".", "LFS_xcep", ".", "features", "(", "fea_LFS", ")", "\n", "fea_LFS", "=", "self", ".", "_norm_fea", "(", "fea_LFS", ")", "\n", "y", "=", "fea_LFS", "\n", "\n", "", "if", "self", ".", "mode", "==", "'Original'", ":", "\n", "            ", "fea", "=", "self", ".", "xcep", ".", "features", "(", "x", ")", "\n", "fea", "=", "self", ".", "_norm_fea", "(", "fea", ")", "\n", "y", "=", "fea", "\n", "\n", "", "if", "self", ".", "mode", "==", "'Both'", ":", "\n", "            ", "fea_FAD", "=", "self", ".", "FAD_head", "(", "x", ")", "\n", "fea_FAD", "=", "self", ".", "FAD_xcep", ".", "features", "(", "fea_FAD", ")", "\n", "fea_FAD", "=", "self", ".", "_norm_fea", "(", "fea_FAD", ")", "\n", "fea_LFS", "=", "self", ".", "LFS_head", "(", "x", ")", "\n", "fea_LFS", "=", "self", ".", "LFS_xcep", ".", "features", "(", "fea_LFS", ")", "\n", "fea_LFS", "=", "self", ".", "_norm_fea", "(", "fea_LFS", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "fea_FAD", ",", "fea_LFS", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "f", "=", "self", ".", "dp", "(", "y", ")", "\n", "f", "=", "self", ".", "fc", "(", "f", ")", "\n", "return", "y", ",", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.F3Net._norm_fea": [[229, 234], ["F3NET.F3Net.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "f.view.view.view", "f.view.view.size"], "methods", ["None"], ["", "def", "_norm_fea", "(", "self", ",", "fea", ")", ":", "\n", "        ", "f", "=", "self", ".", "relu", "(", "fea", ")", "\n", "f", "=", "F", ".", "adaptive_avg_pool2d", "(", "f", ",", "(", "1", ",", "1", ")", ")", "\n", "f", "=", "f", ".", "view", "(", "f", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.MixBlock.__init__": [[336, 354], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", "MixBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "FAD_query", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "LFS_query", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "FAD_key", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "LFS_key", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "FAD_gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "LFS_gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "self", ".", "FAD_conv", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "(", "1", ",", "1", ")", ",", "groups", "=", "c_in", ")", "\n", "self", ".", "FAD_bn", "=", "nn", ".", "BatchNorm2d", "(", "c_in", ")", "\n", "self", ".", "LFS_conv", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "(", "1", ",", "1", ")", ",", "groups", "=", "c_in", ")", "\n", "self", ".", "LFS_bn", "=", "nn", ".", "BatchNorm2d", "(", "c_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.MixBlock.forward": [[355, 376], ["x_FAD.size", "F3NET.MixBlock.FAD_query().view", "F3NET.MixBlock.LFS_query().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "F3NET.MixBlock.FAD_key().view().transpose", "F3NET.MixBlock.LFS_key().view().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "F3NET.MixBlock.softmax().view", "F3NET.MixBlock.FAD_bn", "F3NET.MixBlock.LFS_bn", "F3NET.MixBlock.FAD_query", "F3NET.MixBlock.LFS_query", "F3NET.MixBlock.FAD_key().view", "F3NET.MixBlock.LFS_key().view", "F3NET.MixBlock.softmax", "F3NET.MixBlock.FAD_conv", "F3NET.MixBlock.LFS_conv", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "F3NET.MixBlock.FAD_key", "F3NET.MixBlock.LFS_key"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_FAD", ",", "x_LFS", ")", ":", "\n", "        ", "B", ",", "C", ",", "W", ",", "H", "=", "x_FAD", ".", "size", "(", ")", "\n", "assert", "W", "==", "H", "\n", "\n", "q_FAD", "=", "self", ".", "FAD_query", "(", "x_FAD", ")", ".", "view", "(", "-", "1", ",", "W", ",", "H", ")", "# [BC, W, H]", "\n", "q_LFS", "=", "self", ".", "LFS_query", "(", "x_LFS", ")", ".", "view", "(", "-", "1", ",", "W", ",", "H", ")", "\n", "M_query", "=", "torch", ".", "cat", "(", "[", "q_FAD", ",", "q_LFS", "]", ",", "dim", "=", "2", ")", "# [BC, W, 2H]", "\n", "\n", "k_FAD", "=", "self", ".", "FAD_key", "(", "x_FAD", ")", ".", "view", "(", "-", "1", ",", "W", ",", "H", ")", ".", "transpose", "(", "1", ",", "2", ")", "# [BC, H, W]", "\n", "k_LFS", "=", "self", ".", "LFS_key", "(", "x_LFS", ")", ".", "view", "(", "-", "1", ",", "W", ",", "H", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "M_key", "=", "torch", ".", "cat", "(", "[", "k_FAD", ",", "k_LFS", "]", ",", "dim", "=", "1", ")", "# [BC, 2H, W]", "\n", "\n", "energy", "=", "torch", ".", "bmm", "(", "M_query", ",", "M_key", ")", "# [BC, W, W]", "\n", "attention", "=", "self", ".", "softmax", "(", "energy", ")", ".", "view", "(", "B", ",", "C", ",", "W", ",", "W", ")", "\n", "\n", "att_LFS", "=", "x_LFS", "*", "attention", "*", "(", "torch", ".", "sigmoid", "(", "self", ".", "LFS_gamma", ")", "*", "2.0", "-", "1.0", ")", "\n", "y_FAD", "=", "x_FAD", "+", "self", ".", "FAD_bn", "(", "self", ".", "FAD_conv", "(", "att_LFS", ")", ")", "\n", "\n", "att_FAD", "=", "x_FAD", "*", "attention", "*", "(", "torch", ".", "sigmoid", "(", "self", ".", "FAD_gamma", ")", "*", "2.0", "-", "1.0", ")", "\n", "y_LFS", "=", "x_LFS", "+", "self", ".", "LFS_bn", "(", "self", ".", "LFS_conv", "(", "att_FAD", ")", ")", "\n", "return", "y_FAD", ",", "y_LFS", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.DCT_mat": [[237, 241], ["range", "numpy.cos", "range", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "", "def", "DCT_mat", "(", "size", ")", ":", "\n", "    ", "m", "=", "[", "[", "(", "np", ".", "sqrt", "(", "1.", "/", "size", ")", "if", "i", "==", "0", "else", "np", ".", "sqrt", "(", "2.", "/", "size", ")", ")", "*", "np", ".", "cos", "(", "(", "j", "+", "0.5", ")", "*", "np", ".", "pi", "*", "i", "/", "size", ")", "for", "j", "in", "\n", "range", "(", "size", ")", "]", "for", "i", "in", "range", "(", "size", ")", "]", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.generate_filter": [[243, 245], ["range", "range"], "function", ["None"], ["", "def", "generate_filter", "(", "start", ",", "end", ",", "size", ")", ":", "\n", "    ", "return", "[", "[", "0.", "if", "i", "+", "j", ">", "end", "or", "i", "+", "j", "<=", "start", "else", "1.", "for", "j", "in", "range", "(", "size", ")", "]", "for", "i", "in", "range", "(", "size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.norm_sigma": [[247, 249], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "norm_sigma", "(", "x", ")", ":", "\n", "    ", "return", "2.", "*", "torch", ".", "sigmoid", "(", "x", ")", "-", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.get_xcep_state_dict": [[251, 260], ["torch.load_url", "model_zoo.load_url.items", "model_zoo.load_url.items"], "function", ["None"], ["", "def", "get_xcep_state_dict", "(", "pretrained_path", "=", "'pretrained/xception-b5690688.pth'", ")", ":", "\n", "# load Xception", "\n", "    ", "state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'xception'", "]", ")", "\n", "# state_dict = torch.load(pretrained_path)", "\n", "for", "name", ",", "weights", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'pointwise'", "in", "name", ":", "\n", "            ", "state_dict", "[", "name", "]", "=", "weights", "\n", "", "", "state_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "'fc'", "not", "in", "k", "}", "\n", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.new_xcep_features": [[265, 294], ["F3NET..conv2", "F3NET..bn2", "F3NET..relu", "F3NET..block1", "F3NET..block2", "F3NET..block3", "F3NET..block4", "F3NET..block5", "F3NET..block6", "F3NET..block7", "F3NET..block8", "F3NET..block9", "F3NET..block10", "F3NET..block11", "F3NET..block12", "F3NET..conv3", "F3NET..bn3", "F3NET..relu", "F3NET..conv4", "F3NET..bn4"], "function", ["None"], ["", "def", "new_xcep_features", "(", "self", ",", "input", ")", ":", "\n", "# x = self.conv1(input)", "\n", "# x = self.bn1(x)", "\n", "# x = self.relu(x)", "\n", "\n", "    ", "x", "=", "self", ".", "conv2", "(", "input", ")", "# input :[149, 149, 6]  conv2:[in_filter:32]", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.fea_0_7": [[298, 315], ["F3NET..conv1", "F3NET..bn1", "F3NET..relu", "F3NET..conv2", "F3NET..bn2", "F3NET..relu", "F3NET..block1", "F3NET..block2", "F3NET..block3", "F3NET..block4", "F3NET..block5", "F3NET..block6", "F3NET..block7"], "function", ["None"], ["", "def", "fea_0_7", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.F3NET.fea_8_12": [[317, 331], ["F3NET..block8", "F3NET..block9", "F3NET..block10", "F3NET..block11", "F3NET..block12", "F3NET..conv3", "F3NET..bn3", "F3NET..relu", "F3NET..conv4", "F3NET..bn4"], "function", ["None"], ["", "def", "fea_8_12", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_fusion.SeparableConv2d.__init__": [[34, 40], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "in_channels", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_fusion.SeparableConv2d.forward": [[41, 45], ["xcep_fusion.SeparableConv2d.conv1", "xcep_fusion.SeparableConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_fusion.Block.__init__": [[48, 85], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "torch.ReLU", "torch.ReLU", "rep.append", "xcep_fusion.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xcep_fusion.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xcep_fusion.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_filters", ",", "out_filters", ",", "reps", ",", "strides", "=", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "out_filters", "!=", "in_filters", "or", "strides", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "in_filters", ",", "out_filters", ",", "1", ",", "stride", "=", "strides", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "rep", "=", "[", "]", "\n", "\n", "filters", "=", "in_filters", "\n", "if", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "filters", "=", "out_filters", "\n", "\n", "", "for", "i", "in", "range", "(", "reps", "-", "1", ")", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "filters", ",", "filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "\n", "", "if", "not", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "\n", "", "if", "not", "start_with_relu", ":", "\n", "            ", "rep", "=", "rep", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "rep", "[", "0", "]", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "", "if", "strides", "!=", "1", ":", "\n", "            ", "rep", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "3", ",", "strides", ",", "1", ")", ")", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_fusion.Block.forward": [[86, 97], ["xcep_fusion.Block.rep", "xcep_fusion.Block.skip", "xcep_fusion.Block.skipbn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "self", ".", "rep", "(", "inp", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "inp", ")", "\n", "skip", "=", "self", ".", "skipbn", "(", "skip", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "inp", "\n", "\n", "", "x", "+=", "skip", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_fusion.Xception.__init__": [[105, 210], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xcep_fusion.Block", "xcep_fusion.Block", "xcep_fusion.Block", "xcep_fusion.Block", "xcep_fusion.Block", "xcep_fusion.Block", "xcep_fusion.Block", "xcep_fusion.Block", "xcep_fusion.Block", "xcep_fusion.Block", "xcep_fusion.Block", "xcep_fusion.Block", "torch.Sequential", "torch.Sequential", "xcep_fusion.Xception.modules", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            num_classes: number of classes\n        \"\"\"", "\n", "super", "(", "Xception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "seg1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "seg2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "noise1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "noise2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "seg3_in", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "728", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", ")", "\n", "\n", "self", ".", "seg3_out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", ")", "\n", "\n", "self", ".", "noise3_in", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "728", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", ")", "\n", "self", ".", "noise3_out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", ")", "\n", "\n", "self", ".", "conv_cls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "728", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "728", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "2", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "64", ",", "128", ",", "2", ",", "2", ",", "start_with_relu", "=", "False", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block2", "=", "Block", "(", "128", ",", "256", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "256", ",", "728", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block4", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block7", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block8", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "blockcq_fusion", "=", "Block", "(", "128", ",", "128", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "728", "*", "4", ",", "100", ")", ",", "\n", "nn", ".", "Linear", "(", "100", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# ------- init weights --------", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# -----------------------------", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_fusion.Xception.forward": [[212, 247], ["xcep_fusion.Xception.conv1", "xcep_fusion.Xception.bn1", "xcep_fusion.Xception.relu", "xcep_fusion.Xception.conv2", "xcep_fusion.Xception.bn2", "xcep_fusion.Xception.relu", "xcep_fusion.Xception.seg1", "xcep_fusion.Xception.noise1", "xcep_fusion.Xception.block1", "xcep_fusion.Xception.block2", "xcep_fusion.Xception.seg2", "xcep_fusion.Xception.noise2", "xcep_fusion.Xception.block3", "xcep_fusion.Xception.block4", "xcep_fusion.Xception.block5", "xcep_fusion.Xception.block6", "xcep_fusion.Xception.block7", "xcep_fusion.Xception.block8", "xcep_fusion.Xception.block9", "xcep_fusion.Xception.block10", "xcep_fusion.Xception.block11", "xcep_fusion.Xception.seg3_in", "xcep_fusion.Xception.noise3_in", "xcep_fusion.Xception.seg3_out", "xcep_fusion.Xception.noise3_out", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xcep_fusion.Xception.blockcq_fusion", "xcep_fusion.Xception.conv_cls", "xcep_fusion.Xception.view", "xcep_fusion.Xception.fc", "x_seg3[].unsqueeze", "xcep_fusion.Xception.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x_seg1", "=", "self", ".", "seg1", "(", "x", ")", "\n", "x_noise1", "=", "self", ".", "noise1", "(", "x", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x_seg2", "=", "self", ".", "seg2", "(", "x", ")", "\n", "x_noise2", "=", "self", ".", "noise2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "\n", "feature_seg", "=", "self", ".", "seg3_in", "(", "x", ")", "\n", "feature_noise", "=", "self", ".", "noise3_in", "(", "x", ")", "\n", "x_seg3", "=", "self", ".", "seg3_out", "(", "feature_seg", ")", "\n", "x_noise3", "=", "self", ".", "noise3_out", "(", "feature_noise", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "feature_seg", ",", "feature_noise", ")", ",", "1", ")", "\n", "feature_atten", "=", "x_seg3", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "*", "feature", "\n", "x", "=", "self", ".", "blockcq_fusion", "(", "feature_atten", ")", "\n", "x", "=", "self", ".", "conv_cls", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", ",", "x_seg1", ",", "x_seg2", ",", "x_seg3", ",", "x_noise1", ",", "x_noise2", ",", "x_noise3", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_fusion.xception": [[249, 264], ["xcep_fusion.Xception", "torch.load", "torch.load", "Xception.state_dict", "torch.load.items", "model.state_dict.update", "Xception.load_state_dict", "print", "print", "torch.load.items"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load"], ["", "", "def", "xception", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "model", "=", "Xception", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "torch", ".", "load", "(", "'best.pth'", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cuda:1'", "}", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "'load successfully!'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.Encoder.__init__": [[6, 48], ["torch.nn.Module.__init__", "torch.nn.Sequential", "multitask.Encoder.encoder.apply", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "3", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "depth", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "8", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "encoder", ".", "apply", "(", "self", ".", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.Encoder.weights_init": [[49, 56], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.5", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.Encoder.forward": [[57, 59], ["multitask.Encoder.encoder"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.Decoder.__init__": [[62, 129], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "multitask.Decoder.segmenter.apply", "multitask.Decoder.decoder.apply", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Softmax", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "3", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "segmenter", "=", "nn", ".", "Sequential", "(", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "16", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "8", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "16", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "8", ",", "depth", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "segmenter", ".", "apply", "(", "self", ".", "weights_init", ")", "\n", "self", ".", "decoder", ".", "apply", "(", "self", ".", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.Decoder.weights_init": [[130, 137], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.5", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.Decoder.forward": [[138, 144], ["multitask.Decoder.shared", "multitask.Decoder.segmenter", "multitask.Decoder.decoder"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "latent", "=", "self", ".", "shared", "(", "x", ")", "\n", "seg", "=", "self", ".", "segmenter", "(", "latent", ")", "\n", "rect", "=", "self", ".", "decoder", "(", "latent", ")", "\n", "\n", "return", "seg", ",", "rect", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.ActivationLoss.__init__": [[147, 149], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ActivationLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.ActivationLoss.forward": [[150, 153], ["torch.abs", "torch.abs", "loss_act.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "zero", ",", "one", ",", "labels", ")", ":", "\n", "        ", "loss_act", "=", "torch", ".", "abs", "(", "one", "-", "labels", ".", "data", ")", "+", "torch", ".", "abs", "(", "zero", "-", "(", "1.0", "-", "labels", ".", "data", ")", ")", "\n", "return", "1", "/", "labels", ".", "shape", "[", "0", "]", "*", "loss_act", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.ReconstructionLoss.__init__": [[156, 159], ["torch.nn.Module.__init__", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ReconstructionLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.ReconstructionLoss.forward": [[160, 162], ["multitask.ReconstructionLoss.loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "reconstruction", ",", "groundtruth", ")", ":", "\n", "        ", "return", "self", ".", "loss", "(", "reconstruction", ",", "groundtruth", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.SegmentationLoss.__init__": [[165, 168], ["torch.nn.Module.__init__", "torch.nn.BCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SegmentationLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.multitask.SegmentationLoss.forward": [[169, 172], ["multitask.SegmentationLoss.loss", "segment.view", "groundtruth.data.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "segment", ",", "groundtruth", ")", ":", "\n", "        ", "return", "self", ".", "loss", "(", "segment", ".", "view", "(", "segment", ".", "shape", "[", "0", "]", ",", "segment", ".", "shape", "[", "1", "]", ",", "segment", ".", "shape", "[", "2", "]", "*", "segment", ".", "shape", "[", "3", "]", ")", ",", "\n", "groundtruth", ".", "data", ".", "view", "(", "groundtruth", ".", "shape", "[", "0", "]", ",", "groundtruth", ".", "shape", "[", "1", "]", "*", "groundtruth", ".", "shape", "[", "2", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.SeparableConv2d.__init__": [[37, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "in_channels", ",", "bias", "=", "bias", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.SeparableConv2d.forward": [[43, 48], ["xception_f3net.SeparableConv2d.conv1", "xception_f3net.SeparableConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# torch.cuda.empty_cache()", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Block.__init__": [[51, 88], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "rep.append", "xception_f3net.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_f3net.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_f3net.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_filters", ",", "out_filters", ",", "reps", ",", "strides", "=", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "out_filters", "!=", "in_filters", "or", "strides", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "in_filters", ",", "out_filters", ",", "1", ",", "stride", "=", "strides", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "rep", "=", "[", "]", "\n", "\n", "filters", "=", "in_filters", "\n", "if", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "filters", "=", "out_filters", "\n", "\n", "", "for", "i", "in", "range", "(", "reps", "-", "1", ")", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "filters", ",", "filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "\n", "", "if", "not", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "\n", "", "if", "not", "start_with_relu", ":", "\n", "            ", "rep", "=", "rep", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "rep", "[", "0", "]", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "", "if", "strides", "!=", "1", ":", "\n", "            ", "rep", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "3", ",", "strides", ",", "1", ")", ")", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Block.forward": [[89, 100], ["xception_f3net.Block.rep", "xception_f3net.Block.skip", "xception_f3net.Block.skipbn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "self", ".", "rep", "(", "inp", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "inp", ")", "\n", "skip", "=", "self", ".", "skipbn", "(", "skip", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "inp", "\n", "\n", "", "x", "+=", "skip", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.ClassBlock.__init__": [[102, 118], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c0", "=", "nn", ".", "Linear", "(", "2048", ",", "1024", ")", "\n", "self", ".", "dp0", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "c1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "dp1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "\n", "self", ".", "c2", "=", "nn", ".", "Linear", "(", "512", ",", "512", ")", "\n", "self", ".", "dp2", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "leakyrelu2", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "leakyrelu3", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "\n", "self", ".", "c3", "=", "nn", ".", "Linear", "(", "512", ",", "1", ")", "\n", "self", ".", "re2", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.ClassBlock.forward": [[119, 135], ["xception_f3net.ClassBlock.dp0", "xception_f3net.ClassBlock.c0", "xception_f3net.ClassBlock.leakyrelu", "xception_f3net.ClassBlock.dp1", "xception_f3net.ClassBlock.c1", "xception_f3net.ClassBlock.leakyrelu2", "xception_f3net.ClassBlock.dp2", "xception_f3net.ClassBlock.c2", "xception_f3net.ClassBlock.leakyrelu3", "xception_f3net.ClassBlock.c3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# print(x.shape)", "\n", "        ", "h", "=", "self", ".", "dp0", "(", "x", ")", "\n", "h", "=", "self", ".", "c0", "(", "h", ")", "\n", "h", "=", "self", ".", "leakyrelu", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "dp1", "(", "h", ")", "\n", "h", "=", "self", ".", "c1", "(", "h", ")", "\n", "h", "=", "self", ".", "leakyrelu2", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "dp2", "(", "h", ")", "\n", "h", "=", "self", ".", "c2", "(", "h", ")", "\n", "h", "=", "self", ".", "leakyrelu3", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "c3", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.__init__": [[161, 202], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_f3net.Block", "xception_f3net.Block", "xception_f3net.Block", "xception_f3net.Block", "xception_f3net.Block", "xception_f3net.Block", "xception_f3net.Block", "xception_f3net.Block", "xception_f3net.Block", "xception_f3net.Block", "xception_f3net.Block", "xception_f3net.Block", "xception_f3net.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_f3net.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "1", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            num_classes: number of classes\n        \"\"\"", "\n", "super", "(", "Xception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "2", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "#do relu here", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "64", ",", "128", ",", "2", ",", "2", ",", "start_with_relu", "=", "False", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block2", "=", "Block", "(", "128", ",", "256", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "256", ",", "728", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block4", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block7", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block8", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block12", "=", "Block", "(", "728", ",", "1024", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ")", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "1536", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "1536", ")", "\n", "\n", "#do relu here", "\n", "self", ".", "conv4", "=", "SeparableConv2d", "(", "1536", ",", "2048", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "2048", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "self", ".", "dp", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "# #------- init weights --------", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.features": [[212, 241], ["xception_f3net.Xception.conv1", "xception_f3net.Xception.bn1", "xception_f3net.Xception.relu", "xception_f3net.Xception.conv2", "xception_f3net.Xception.bn2", "xception_f3net.Xception.relu", "xception_f3net.Xception.block1", "xception_f3net.Xception.block2", "xception_f3net.Xception.block3", "xception_f3net.Xception.block4", "xception_f3net.Xception.block5", "xception_f3net.Xception.block6", "xception_f3net.Xception.block7", "xception_f3net.Xception.block8", "xception_f3net.Xception.block9", "xception_f3net.Xception.block10", "xception_f3net.Xception.block11", "xception_f3net.Xception.block12", "xception_f3net.Xception.conv3", "xception_f3net.Xception.bn3", "xception_f3net.Xception.relu", "xception_f3net.Xception.conv4", "xception_f3net.Xception.bn4"], "methods", ["None"], ["", "def", "features", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.logits": [[242, 250], ["xception_f3net.Xception.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "xception_f3net.Xception.view", "xception_f3net.Xception.dp", "xception_f3net.Xception.last_linear", "xception_f3net.Xception.size"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "features", ")", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "x", "\n", "x", "=", "self", ".", "dp", "(", "x", ")", "\n", "x", "=", "self", ".", "last_linear", "(", "x", ")", "\n", "return", "y", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.forward": [[251, 255], ["xception_f3net.Xception.features", "xception_f3net.Xception.logits"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.features", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.Xception.logits"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "input", ")", "\n", "y", ",", "x", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "y", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.return_pytorch04_xception": [[136, 154], ["xception_f3net.Xception", "torch.load", "torch.load", "torch.load", "torch.load.items", "Xception.load_state_dict", "xception_f3net.ClassBlock", "weights.unsqueeze().unsqueeze", "weights.unsqueeze"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load"], ["", "", "def", "return_pytorch04_xception", "(", "pretrained", "=", "True", ")", ":", "\n", "# Raises warning \"src not broadcastable to dst\" but thats fine", "\n", "    ", "model", "=", "Xception", "(", "num_classes", "=", "1000", ")", "\n", "# model = Meso4()", "\n", "if", "pretrained", ":", "\n", "# Load model in torch 0.4+", "\n", "# model.fc = model.last_linear", "\n", "# del model.last_linear", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "\n", "'/4T/shengming/shengming/FaceForensics/weights/Xception/xception-b5690688.pth'", ")", "\n", "for", "name", ",", "weights", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'pointwise'", "in", "name", ":", "\n", "                ", "state_dict", "[", "name", "]", "=", "weights", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "# model.last_linear = model.fc", "\n", "# del model.fc", "\n", "model", ".", "fc", "=", "ClassBlock", "(", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception_f3net.get_xception": [[257, 285], ["xception_f3net.Xception", "xception_f3net.Xception", "torch.load", "torch.load", "torch.load", "torch.load.items", "Xception.load_state_dict", "weights.unsqueeze().unsqueeze", "torch.load.items", "weights.unsqueeze"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xcep_dffd_ce.Model.load"], ["", "", "def", "get_xception", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", ":", "\n", "    ", "model", "=", "Xception", "(", "num_classes", "=", "num_classes", ")", "\n", "if", "pretrained", ":", "\n", "        ", "settings", "=", "pretrained_settings", "[", "'xception'", "]", "[", "pretrained", "]", "\n", "'''\n        assert num_classes == settings['num_classes'], \\\n            \"num_classes should be {}, but is {}\".format(settings['num_classes'], num_classes)\n        '''", "\n", "\n", "model", "=", "Xception", "(", "num_classes", "=", "num_classes", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "'/4T/shengming/shengming/FaceForensics/weights/Xception/xception-b5690688.pth'", ")", "\n", "for", "name", ",", "weights", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'pointwise'", "in", "name", ":", "\n", "                ", "state_dict", "[", "name", "]", "=", "weights", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "", "state_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "'fc'", "not", "in", "k", "}", "\n", "# print(state_dict)", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "False", ")", "\n", "\n", "model", ".", "input_space", "=", "settings", "[", "'input_space'", "]", "\n", "model", ".", "input_size", "=", "settings", "[", "'input_size'", "]", "\n", "model", ".", "input_range", "=", "settings", "[", "'input_range'", "]", "\n", "model", ".", "mean", "=", "settings", "[", "'mean'", "]", "\n", "model", ".", "std", "=", "settings", "[", "'std'", "]", "\n", "\n", "# TODO: ugly", "\n", "", "model", ".", "last_linear", "=", "model", ".", "fc", "\n", "del", "model", ".", "fc", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.Meso.Meso4.__init__": [[11, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "1", ")", ":", "\n", "\t\t", "super", "(", "Meso4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "8", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "8", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "8", ",", "8", ",", "5", ",", "padding", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "8", ",", "16", ",", "5", ",", "padding", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "5", ",", "padding", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "maxpooling1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "maxpooling2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "4", ",", "4", ")", ")", "\n", "#flatten: x = x.view(x.size(0), -1)", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "8", "*", "8", ",", "16", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "16", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.Meso.Meso4.forward": [[30, 59], ["Meso.Meso4.conv1", "Meso.Meso4.relu", "Meso.Meso4.bn1", "Meso.Meso4.maxpooling1", "Meso.Meso4.conv2", "Meso.Meso4.relu", "Meso.Meso4.bn1", "Meso.Meso4.maxpooling1", "Meso.Meso4.conv3", "Meso.Meso4.relu", "Meso.Meso4.bn2", "Meso.Meso4.maxpooling1", "Meso.Meso4.conv4", "Meso.Meso4.relu", "Meso.Meso4.bn2", "Meso.Meso4.maxpooling2", "Meso.Meso4.view", "Meso.Meso4.dropout", "Meso.Meso4.fc1", "Meso.Meso4.leakyrelu", "Meso.Meso4.dropout", "Meso.Meso4.fc2", "Meso.Meso4.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "conv1", "(", "input", ")", "#(8, 256, 256)", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpooling1", "(", "x", ")", "#(8, 128, 128)", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "#(8, 128, 128)", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpooling1", "(", "x", ")", "#(8, 64, 64)", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "#(16, 64, 64)", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpooling1", "(", "x", ")", "#(16, 32, 32)", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "#(16, 32, 32)", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpooling2", "(", "x", ")", "#(16, 8, 8)", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "#(Batch, 16*8*8)", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "#(Batch, 16)", "\n", "x", "=", "self", ".", "leakyrelu", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.Meso.MesoInception4.__init__": [[67, 103], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "1", ")", ":", "\n", "\t\t", "super", "(", "MesoInception4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "#InceptionLayer1", "\n", "self", ".", "Incption1_conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption1_conv2_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "4", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption1_conv2_2", "=", "nn", ".", "Conv2d", "(", "4", ",", "4", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption1_conv3_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "4", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption1_conv3_2", "=", "nn", ".", "Conv2d", "(", "4", ",", "4", ",", "3", ",", "padding", "=", "2", ",", "dilation", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption1_conv4_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "2", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption1_conv4_2", "=", "nn", ".", "Conv2d", "(", "2", ",", "2", ",", "3", ",", "padding", "=", "3", ",", "dilation", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption1_bn", "=", "nn", ".", "BatchNorm2d", "(", "11", ")", "\n", "\n", "#InceptionLayer2", "\n", "self", ".", "Incption2_conv1", "=", "nn", ".", "Conv2d", "(", "11", ",", "2", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption2_conv2_1", "=", "nn", ".", "Conv2d", "(", "11", ",", "4", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption2_conv2_2", "=", "nn", ".", "Conv2d", "(", "4", ",", "4", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption2_conv3_1", "=", "nn", ".", "Conv2d", "(", "11", ",", "4", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption2_conv3_2", "=", "nn", ".", "Conv2d", "(", "4", ",", "4", ",", "3", ",", "padding", "=", "2", ",", "dilation", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption2_conv4_1", "=", "nn", ".", "Conv2d", "(", "11", ",", "2", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption2_conv4_2", "=", "nn", ".", "Conv2d", "(", "2", ",", "2", ",", "3", ",", "padding", "=", "3", ",", "dilation", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "Incption2_bn", "=", "nn", ".", "BatchNorm2d", "(", "12", ")", "\n", "\n", "#Normal Layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "12", ",", "16", ",", "5", ",", "padding", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "maxpooling1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "5", ",", "padding", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "maxpooling2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "4", ",", "4", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "8", "*", "8", ",", "16", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "16", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.Meso.MesoInception4.InceptionLayer1": [[106, 119], ["Meso.MesoInception4.Incption1_conv1", "Meso.MesoInception4.Incption1_conv2_1", "Meso.MesoInception4.Incption1_conv2_2", "Meso.MesoInception4.Incption1_conv3_1", "Meso.MesoInception4.Incption1_conv3_2", "Meso.MesoInception4.Incption1_conv4_1", "Meso.MesoInception4.Incption1_conv4_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Meso.MesoInception4.Incption1_bn", "Meso.MesoInception4.maxpooling1"], "methods", ["None"], ["", "def", "InceptionLayer1", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "x1", "=", "self", ".", "Incption1_conv1", "(", "input", ")", "\n", "x2", "=", "self", ".", "Incption1_conv2_1", "(", "input", ")", "\n", "x2", "=", "self", ".", "Incption1_conv2_2", "(", "x2", ")", "\n", "x3", "=", "self", ".", "Incption1_conv3_1", "(", "input", ")", "\n", "x3", "=", "self", ".", "Incption1_conv3_2", "(", "x3", ")", "\n", "x4", "=", "self", ".", "Incption1_conv4_1", "(", "input", ")", "\n", "x4", "=", "self", ".", "Incption1_conv4_2", "(", "x4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", "\n", "y", "=", "self", ".", "Incption1_bn", "(", "y", ")", "\n", "y", "=", "self", ".", "maxpooling1", "(", "y", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.Meso.MesoInception4.InceptionLayer2": [[120, 133], ["Meso.MesoInception4.Incption2_conv1", "Meso.MesoInception4.Incption2_conv2_1", "Meso.MesoInception4.Incption2_conv2_2", "Meso.MesoInception4.Incption2_conv3_1", "Meso.MesoInception4.Incption2_conv3_2", "Meso.MesoInception4.Incption2_conv4_1", "Meso.MesoInception4.Incption2_conv4_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Meso.MesoInception4.Incption2_bn", "Meso.MesoInception4.maxpooling1"], "methods", ["None"], ["", "def", "InceptionLayer2", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "x1", "=", "self", ".", "Incption2_conv1", "(", "input", ")", "\n", "x2", "=", "self", ".", "Incption2_conv2_1", "(", "input", ")", "\n", "x2", "=", "self", ".", "Incption2_conv2_2", "(", "x2", ")", "\n", "x3", "=", "self", ".", "Incption2_conv3_1", "(", "input", ")", "\n", "x3", "=", "self", ".", "Incption2_conv3_2", "(", "x3", ")", "\n", "x4", "=", "self", ".", "Incption2_conv4_1", "(", "input", ")", "\n", "x4", "=", "self", ".", "Incption2_conv4_2", "(", "x4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", "\n", "y", "=", "self", ".", "Incption2_bn", "(", "y", ")", "\n", "y", "=", "self", ".", "maxpooling1", "(", "y", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.Meso.MesoInception4.forward": [[134, 156], ["Meso.MesoInception4.InceptionLayer1", "Meso.MesoInception4.InceptionLayer2", "Meso.MesoInception4.conv1", "Meso.MesoInception4.relu", "Meso.MesoInception4.bn1", "Meso.MesoInception4.maxpooling1", "Meso.MesoInception4.conv2", "Meso.MesoInception4.relu", "Meso.MesoInception4.bn1", "Meso.MesoInception4.maxpooling2", "Meso.MesoInception4.view", "Meso.MesoInception4.dropout", "Meso.MesoInception4.fc1", "Meso.MesoInception4.leakyrelu", "Meso.MesoInception4.dropout", "Meso.MesoInception4.fc2", "Meso.MesoInception4.size"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.Meso.MesoInception4.InceptionLayer1", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.Meso.MesoInception4.InceptionLayer2"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "InceptionLayer1", "(", "input", ")", "#(Batch, 11, 128, 128)", "\n", "x", "=", "self", ".", "InceptionLayer2", "(", "x", ")", "#(Batch, 12, 64, 64)", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "#(Batch, 16, 64 ,64)", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpooling1", "(", "x", ")", "#(Batch, 16, 32, 32)", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "#(Batch, 16, 32, 32)", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpooling2", "(", "x", ")", "#(Batch, 16, 8, 8)", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "#(Batch, 16*8*8)", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "#(Batch, 16)", "\n", "x", "=", "self", ".", "leakyrelu", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.Bottleneck.__init__": [[20, 42], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_places", ",", "places", ",", "stride", "=", "1", ",", "downsampling", "=", "False", ",", "expansion", "=", "4", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "expansion", "=", "expansion", "\n", "self", ".", "downsampling", "=", "downsampling", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_places", ",", "out_channels", "=", "places", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "places", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "places", ",", "out_channels", "=", "places", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "places", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "places", ",", "out_channels", "=", "places", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "places", "*", "self", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "if", "self", ".", "downsampling", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_places", ",", "out_channels", "=", "places", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "places", "*", "self", ".", "expansion", ")", "\n", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.Bottleneck.forward": [[42, 52], ["resnet50.Bottleneck.bottleneck", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "\n", "if", "self", ".", "downsampling", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.ResNet.__init__": [[54, 74], ["torch.Module.__init__", "resnet50.Conv1", "resnet50.ResNet.make_layer", "resnet50.ResNet.make_layer", "resnet50.ResNet.make_layer", "resnet50.ResNet.make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet50.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.Conv1", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.ResNet.make_layer", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.ResNet.make_layer", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.ResNet.make_layer", "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.ResNet.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "blocks", ",", "num_classes", "=", "1000", ",", "expansion", "=", "4", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "expansion", "=", "expansion", "\n", "\n", "self", ".", "conv1", "=", "Conv1", "(", "in_planes", "=", "3", ",", "places", "=", "64", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "make_layer", "(", "in_places", "=", "64", ",", "places", "=", "64", ",", "block", "=", "blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "make_layer", "(", "in_places", "=", "256", ",", "places", "=", "128", ",", "block", "=", "blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "make_layer", "(", "in_places", "=", "512", ",", "places", "=", "256", ",", "block", "=", "blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "make_layer", "(", "in_places", "=", "1024", ",", "places", "=", "512", ",", "block", "=", "blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc_cq", "=", "nn", ".", "Linear", "(", "2048", ",", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.ResNet.make_layer": [[75, 82], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "resnet50.Bottleneck", "layers.append", "resnet50.Bottleneck"], "methods", ["None"], ["", "", "", "def", "make_layer", "(", "self", ",", "in_places", ",", "places", ",", "block", ",", "stride", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "in_places", ",", "places", ",", "stride", ",", "downsampling", "=", "True", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "block", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "places", "*", "self", ".", "expansion", ",", "places", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.ResNet.forward": [[84, 96], ["resnet50.ResNet.conv1", "resnet50.ResNet.layer1", "resnet50.ResNet.layer2", "resnet50.ResNet.layer3", "resnet50.ResNet.layer4", "resnet50.ResNet.avgpool", "resnet50.ResNet.view", "resnet50.ResNet.fc_cq", "resnet50.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_cq", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.Conv1": [[11, 17], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d"], "function", ["None"], ["def", "Conv1", "(", "in_planes", ",", "places", ",", "stride", "=", "2", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_planes", ",", "out_channels", "=", "places", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "places", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.ResNet50": [[97, 99], ["resnet50.ResNet"], "function", ["None"], ["", "", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.ResNet101": [[100, 102], ["resnet50.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.ResNet152": [[103, 105], ["resnet50.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.resnet50": [[106, 130], ["resnet50.ResNet50", "torch.utils.model_zoo.load_url", "ResNet50.state_dict", "torch.utils.model_zoo.load_url.items", "model.state_dict.update", "ResNet50.load_state_dict", "print", "torch.utils.model_zoo.load_url.items", "v.size"], "function", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.resnet50.ResNet50"], ["", "def", "resnet50", "(", "pretrained", "=", "True", ")", ":", "\n", "    ", "model_urls", "=", "{", "\n", "'resnet18'", ":", "'https://download.pytorch.org/models/resnet18-5c106cde.pth'", ",", "\n", "'resnet34'", ":", "'https://download.pytorch.org/models/resnet34-333f7ec4.pth'", ",", "\n", "'resnet50'", ":", "'https://download.pytorch.org/models/resnet50-19c8e357.pth'", ",", "\n", "'resnet101'", ":", "'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'", ",", "\n", "'resnet152'", ":", "'https://download.pytorch.org/models/resnet152-b121ed2d.pth'", ",", "\n", "}", "\n", "\n", "model", "=", "ResNet50", "(", ")", "\n", "if", "pretrained", ":", "\n", "# state_dict = load_state_dict_from_url(model_urls[arch],", "\n", "#                                       progress=progress)", "\n", "# model.load_state_dict(state_dict)", "\n", "        ", "pretrained_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'resnet50'", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ",", "v", ".", "size", "(", ")", ")", "\n", "# 2. overwrite entries in the existing state dict", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception.SeparableConv2d.__init__": [[35, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "in_channels", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception.SeparableConv2d.forward": [[42, 46], ["xception.SeparableConv2d.conv1", "xception.SeparableConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception.Block.__init__": [[49, 86], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "rep.append", "xception.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_filters", ",", "out_filters", ",", "reps", ",", "strides", "=", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "out_filters", "!=", "in_filters", "or", "strides", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "in_filters", ",", "out_filters", ",", "1", ",", "stride", "=", "strides", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "rep", "=", "[", "]", "\n", "\n", "filters", "=", "in_filters", "\n", "if", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "filters", "=", "out_filters", "\n", "\n", "", "for", "i", "in", "range", "(", "reps", "-", "1", ")", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "filters", ",", "filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "\n", "", "if", "not", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "\n", "", "if", "not", "start_with_relu", ":", "\n", "            ", "rep", "=", "rep", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "rep", "[", "0", "]", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "", "if", "strides", "!=", "1", ":", "\n", "            ", "rep", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "3", ",", "strides", ",", "1", ")", ")", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception.Block.forward": [[87, 98], ["xception.Block.rep", "xception.Block.skip", "xception.Block.skipbn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "self", ".", "rep", "(", "inp", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "inp", ")", "\n", "skip", "=", "self", ".", "skipbn", "(", "skip", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "inp", "\n", "\n", "", "x", "+=", "skip", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception.Xception.__init__": [[106, 161], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "xception.Xception.modules", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            num_classes: number of classes\n        \"\"\"", "\n", "super", "(", "Xception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "2", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# self.sigmoid = nn.Sigmoid()", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "# do relu here", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "64", ",", "128", ",", "2", ",", "2", ",", "start_with_relu", "=", "False", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block2", "=", "Block", "(", "128", ",", "256", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "256", ",", "728", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block4", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block7", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block8", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block12", "=", "Block", "(", "728", ",", "1024", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ")", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "1536", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "1536", ")", "\n", "\n", "# do relu here", "\n", "self", ".", "conv4", "=", "SeparableConv2d", "(", "1536", ",", "2048", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "2048", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2048", ",", "1000", ")", ",", "\n", "nn", ".", "Linear", "(", "1000", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "1000", ")", "\n", "\n", "# ------- init weights --------", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# -----------------------------", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception.Xception.forward": [[163, 199], ["xception.Xception.conv1", "xception.Xception.bn1", "xception.Xception.relu", "xception.Xception.conv2", "xception.Xception.bn2", "xception.Xception.relu", "xception.Xception.block1", "xception.Xception.block2", "xception.Xception.block3", "xception.Xception.block4", "xception.Xception.block5", "xception.Xception.block6", "xception.Xception.block7", "xception.Xception.block8", "xception.Xception.block9", "xception.Xception.block10", "xception.Xception.block11", "xception.Xception.block12", "xception.Xception.conv3", "xception.Xception.bn3", "xception.Xception.relu", "xception.Xception.conv4", "xception.Xception.bn4", "xception.Xception.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "xception.Xception.view", "xception.Xception.fc", "xception.Xception.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "# x = self.sigmoid(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.xception.xception": [[201, 214], ["xception.Xception", "torch.load_url", "Xception.state_dict", "model.state_dict.update", "Xception.load_state_dict", "model_zoo.load_url.items"], "function", ["None"], ["", "", "def", "xception", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "model", "=", "Xception", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'xception'", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.FaceXray.DoubleConv.__init__": [[9, 20], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.FaceXray.DoubleConv.forward": [[22, 24], ["FaceXray.DoubleConv.double_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "double_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.FaceXray.Down.__init__": [[29, 34], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "FaceXray.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxpool_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.FaceXray.Down.forward": [[36, 38], ["FaceXray.Down.maxpool_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "maxpool_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.FaceXray.Up.__init__": [[43, 53], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "FaceXray.DoubleConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "FaceXray.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# if bilinear, use the normal convolutions to reduce the number of channels", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ",", "in_channels", "//", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.FaceXray.Up.forward": [[54, 67], ["FaceXray.Up.up", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "FaceXray.Up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "# if you have padding issues, see", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.FaceXray.OutConv.__init__": [[70, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OutConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.FaceXray.OutConv.forward": [[74, 76], ["FaceXray.OutConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.FaceXray.FaceXrayNet.__init__": [[79, 98], ["torch.Module.__init__", "FaceXray.DoubleConv", "FaceXray.Down", "FaceXray.Down", "FaceXray.Down", "FaceXray.Down", "FaceXray.Up", "FaceXray.Up", "FaceXray.Up", "FaceXray.Up", "FaceXray.OutConv", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "n_classes", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", "FaceXrayNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "\n", "self", ".", "inc", "=", "DoubleConv", "(", "n_channels", ",", "64", ")", "\n", "self", ".", "down1", "=", "Down", "(", "64", ",", "128", ")", "\n", "self", ".", "down2", "=", "Down", "(", "128", ",", "256", ")", "\n", "self", ".", "down3", "=", "Down", "(", "256", ",", "512", ")", "\n", "factor", "=", "2", "if", "bilinear", "else", "1", "\n", "self", ".", "down4", "=", "Down", "(", "512", ",", "1024", "//", "factor", ")", "\n", "self", ".", "up1", "=", "Up", "(", "1024", ",", "512", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up2", "=", "Up", "(", "512", ",", "256", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up3", "=", "Up", "(", "256", ",", "128", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up4", "=", "Up", "(", "128", ",", "64", ",", "bilinear", ")", "\n", "self", ".", "outc", "=", "OutConv", "(", "64", ",", "n_classes", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "n_classes", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.arch.FaceXray.FaceXrayNet.forward": [[99, 114], ["FaceXray.FaceXrayNet.inc", "FaceXray.FaceXrayNet.down1", "FaceXray.FaceXrayNet.down2", "FaceXray.FaceXrayNet.down3", "FaceXray.FaceXrayNet.down4", "FaceXray.FaceXrayNet.up1", "FaceXray.FaceXrayNet.up2", "FaceXray.FaceXrayNet.up3", "FaceXray.FaceXrayNet.up4", "FaceXray.FaceXrayNet.outc", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "y.view.view.view", "FaceXray.FaceXrayNet.classifier", "FaceXray.FaceXrayNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x", ")", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "\n", "logits", "=", "self", ".", "outc", "(", "x", ")", "\n", "y", "=", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "logits", ",", "(", "1", ",", "1", ")", ")", "\n", "y", "=", "y", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "pred", "=", "self", ".", "classifier", "(", "y", ")", "\n", "return", "logits", ",", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_fusion.face_Dataset.__init__": [[9, 12], ["pandas.read_csv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_path_details", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "header", "=", "None", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_fusion.face_Dataset.__len__": [[13, 15], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_path_details", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_fusion.face_Dataset.__getitem__": [[16, 38], ["torch.is_tensor", "skimage.io.imread", "skimage.io.imread", "skimage.io.imread", "idx.tolist.tolist.tolist", "dataloader_fusion.face_Dataset.transform", "[].split", "[].split", "[].split", "img_path.split", "[].split", "img_path.split", "[].split", "[].split", "img_path.split", "img_path.split", "[].split", "img_path.split", "img_path.split", "img_path.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "img_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "0", "]", "\n", "msk_path", "=", "img_path", ".", "split", "(", "'faces_224'", ")", "[", "0", "]", "+", "'masks_224'", "+", "img_path", ".", "split", "(", "'faces_224'", ")", "[", "1", "]", ".", "split", "(", "'face'", ")", "[", "0", "]", "+", "img_path", ".", "split", "(", "'faces_224'", ")", "[", "1", "]", ".", "split", "(", "'face'", ")", "[", "1", "]", "\n", "nis_path", "=", "img_path", ".", "split", "(", "'FF++_faces_masks_labels'", ")", "[", "0", "]", "+", "'FF++_faces_masks_labels_noise'", "+", "img_path", ".", "split", "(", "'FF++_faces_masks_labels'", ")", "[", "1", "]", ".", "split", "(", "'faces_224'", ")", "[", "0", "]", "+", "img_path", ".", "split", "(", "'FF++_faces_masks_labels'", ")", "[", "1", "]", ".", "split", "(", "'faces_224'", ")", "[", "1", "]", ".", "split", "(", "'c23'", ")", "[", "0", "]", "+", "'c23/Sigma5'", "+", "img_path", ".", "split", "(", "'FF++_faces_masks_labels'", ")", "[", "1", "]", ".", "split", "(", "'faces_224'", ")", "[", "1", "]", ".", "split", "(", "'c23'", ")", "[", "1", "]", "\n", "img", "=", "io", ".", "imread", "(", "img_path", ")", "\n", "msk", "=", "io", ".", "imread", "(", "msk_path", ")", "\n", "nis", "=", "io", ".", "imread", "(", "nis_path", ")", "\n", "label", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "1", "]", "\n", "\n", "sample", "=", "{", "'face'", ":", "img", ",", "\n", "'mask'", ":", "msk", ",", "\n", "'noise'", ":", "nis", ",", "\n", "'label'", ":", "label", "}", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_fusion.my_transforms.__init__": [[45, 60], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", "=", "299", ",", "msk_size1", "=", "147", ",", "msk_size2", "=", "37", ",", "msk_size3", "=", "19", ",", "RandomHorizontalFlip", "=", "False", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "self", ".", "mask_size1", "=", "(", "msk_size1", ",", "msk_size1", ")", "\n", "self", ".", "mask_size2", "=", "(", "msk_size2", ",", "msk_size2", ")", "\n", "self", ".", "mask_size3", "=", "(", "msk_size3", ",", "msk_size3", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "", "self", ".", "RandomHorizontalFlip", "=", "RandomHorizontalFlip", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_fusion.my_transforms.__call__": [[61, 120], ["skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "numpy.mean", "numpy.mean", "numpy.mean", "skimage.transform.resize.transpose", "skimage.transform.resize.transpose", "skimage.transform.resize.transpose", "torch.from_numpy().float.transpose", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "len", "numpy.mean.transpose", "numpy.mean.transpose", "numpy.mean.transpose", "random.random", "torch.from_numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.from_numpy().float.copy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img_ori", "=", "sample", "[", "'face'", "]", "\n", "msk_ori", "=", "sample", "[", "'mask'", "]", "\n", "nis_ori_", "=", "sample", "[", "'noise'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "nis_ori", "=", "nis_ori_", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "if", "len", "(", "msk_ori", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "msk_ori", "=", "msk_ori", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "### resize", "\n", "", "img", "=", "transform", ".", "resize", "(", "img_ori", ",", "self", ".", "output_size", ")", "\n", "msk1", "=", "transform", ".", "resize", "(", "msk_ori", ",", "self", ".", "mask_size1", ")", "\n", "msk2", "=", "transform", ".", "resize", "(", "msk_ori", ",", "self", ".", "mask_size2", ")", "\n", "msk3", "=", "transform", ".", "resize", "(", "msk_ori", ",", "self", ".", "mask_size3", ")", "\n", "nis1", "=", "transform", ".", "resize", "(", "nis_ori", ",", "self", ".", "mask_size1", ")", "\n", "nis2", "=", "transform", ".", "resize", "(", "nis_ori", ",", "self", ".", "mask_size2", ")", "\n", "nis3", "=", "transform", ".", "resize", "(", "nis_ori", ",", "self", ".", "mask_size3", ")", "\n", "\n", "msk1", "=", "np", ".", "mean", "(", "msk1", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "axis", "=", "0", ")", "\n", "msk2", "=", "np", ".", "mean", "(", "msk2", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "axis", "=", "0", ")", "\n", "msk3", "=", "np", ".", "mean", "(", "msk3", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n", "nis_1", "=", "nis1", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "nis_2", "=", "nis2", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "nis_3", "=", "nis3", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "### random horizontal flip", "\n", "if", "self", ".", "RandomHorizontalFlip", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "\n", "### (h, w, c) -> (c, h, w)", "\n", "", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "msk_1", "=", "np", ".", "concatenate", "(", "(", "msk1", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "(", "1.0", "-", "msk1", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "msk_2", "=", "np", ".", "concatenate", "(", "(", "msk2", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "(", "1.0", "-", "msk2", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "msk_3", "=", "np", ".", "concatenate", "(", "(", "msk3", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "(", "1.0", "-", "msk3", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "### to pytorch tensor", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "label_msk1", "=", "torch", ".", "tensor", "(", "msk_1", ")", ".", "float", "(", ")", "\n", "label_msk2", "=", "torch", ".", "tensor", "(", "msk_2", ")", ".", "float", "(", ")", "\n", "label_msk3", "=", "torch", ".", "tensor", "(", "msk_3", ")", ".", "float", "(", ")", "\n", "label_nis1", "=", "torch", ".", "tensor", "(", "nis_1", ")", ".", "float", "(", ")", "\n", "label_nis2", "=", "torch", ".", "tensor", "(", "nis_2", ")", ".", "float", "(", ")", "\n", "label_nis3", "=", "torch", ".", "tensor", "(", "nis_3", ")", ".", "float", "(", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "float", "(", ")", "\n", "\n", "### normalize", "\n", "img", "=", "(", "img", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n", "### output", "\n", "sample", "=", "{", "'faces'", ":", "img", ",", "\n", "'masks1'", ":", "label_msk1", ",", "\n", "'masks2'", ":", "label_msk2", ",", "\n", "'masks3'", ":", "label_msk3", ",", "\n", "'noises1'", ":", "label_nis1", ",", "\n", "'noises2'", ":", "label_nis2", ",", "\n", "'noises3'", ":", "label_nis3", ",", "\n", "'labels'", ":", "label", "}", "\n", "return", "sample", "", "", "", ""]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader2.face_Dataset.__init__": [[9, 12], ["pandas.read_csv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_path_details", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "header", "=", "None", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader2.face_Dataset.__len__": [[13, 15], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_path_details", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader2.face_Dataset.__getitem__": [[16, 33], ["torch.is_tensor", "skimage.io.imread", "idx.tolist.tolist.tolist", "dataloader2.face_Dataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "img_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "0", "]", "\n", "img", "=", "io", ".", "imread", "(", "img_path", ")", "\n", "\n", "label", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "1", "]", "\n", "\n", "sample", "=", "{", "'face'", ":", "img", ",", "\n", "'label'", ":", "label", "}", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader2.my_transforms.__init__": [[41, 53], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", "=", "299", ",", "RandomHorizontalFlip", "=", "False", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "", "self", ".", "RandomHorizontalFlip", "=", "RandomHorizontalFlip", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader2.my_transforms.__call__": [[54, 78], ["skimage.transform.resize", "torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.tensor().float", "random.random", "torch.from_numpy", "torch.tensor", "torch.from_numpy().float.copy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img_ori", "=", "sample", "[", "'face'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "### resize", "\n", "img", "=", "transform", ".", "resize", "(", "img_ori", ",", "self", ".", "output_size", ")", "\n", "\n", "### random horizontal flip", "\n", "if", "self", ".", "RandomHorizontalFlip", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "\n", "### (h, w, c) -> (c, h, w)", "\n", "", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "### to pytorch tensor", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "float", "(", ")", "\n", "\n", "### normalize", "\n", "img", "=", "(", "img", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n", "### output", "\n", "sample", "=", "{", "'faces'", ":", "img", ",", "\n", "'labels'", ":", "label", "}", "\n", "return", "sample", "", "", "", ""]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.data_fusion.face_Dataset.__init__": [[8, 11], ["pandas.read_csv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_path_details", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "header", "=", "None", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.data_fusion.face_Dataset.__len__": [[12, 14], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_path_details", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.data_fusion.face_Dataset.__getitem__": [[15, 40], ["torch.is_tensor", "skimage.io.imread", "skimage.io.imread", "skimage.io.imread", "idx.tolist.tolist.tolist", "data_fusion.face_Dataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "img_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "0", "]", "\n", "input_img", "=", "io", ".", "imread", "(", "img_path", ")", "\n", "\n", "noise_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "1", "]", "\n", "noise", "=", "io", ".", "imread", "(", "noise_path", ")", "\n", "\n", "mask_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "2", "]", "\n", "mask", "=", "io", ".", "imread", "(", "mask_path", ")", "\n", "\n", "label", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "3", "]", "\n", "\n", "sample", "=", "{", "'img'", ":", "input_img", ",", "\n", "'noise'", ":", "noise", ",", "\n", "'mask'", ":", "mask", ",", "\n", "'label'", ":", "label", "}", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.data_fusion.my_transforms.__init__": [[48, 60], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size1", "=", "299", ",", "size2", "=", "147", ",", "size3", "=", "37", ",", "size4", "=", "19", ",", "RandomHorizontalFlip", "=", "False", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "size1", ",", "int", ")", ":", "\n", "            ", "self", ".", "size1", "=", "(", "size1", ",", "size1", ")", "\n", "self", ".", "size2", "=", "(", "size2", ",", "size2", ")", "\n", "self", ".", "size3", "=", "(", "size3", ",", "size3", ")", "\n", "self", ".", "size4", "=", "(", "size4", ",", "size4", ")", "\n", "\n", "", "self", ".", "RandomHorizontalFlip", "=", "RandomHorizontalFlip", "\n", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.data_fusion.my_transforms.__call__": [[61, 116], ["skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "torch.from_numpy().float.transpose", "noise_seg1.transpose.transpose.transpose", "noise_seg2.transpose.transpose.transpose", "noise_seg3.transpose.transpose.transpose", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "len", "numpy.mean.transpose", "numpy.mean.transpose", "numpy.mean.transpose", "torch.from_numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.from_numpy().float.copy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img_ori", "=", "sample", "[", "'img'", "]", "\n", "label_noise", "=", "sample", "[", "'noise'", "]", "\n", "label_mask", "=", "sample", "[", "'mask'", "]", "\n", "label_fake", "=", "sample", "[", "'label'", "]", "\n", "label_noise", "=", "label_noise", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "if", "len", "(", "label_mask", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "label_mask", "=", "label_mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "face", "=", "transform", ".", "resize", "(", "img_ori", ",", "self", ".", "size1", ")", "\n", "noise_seg1", "=", "transform", ".", "resize", "(", "label_noise", ",", "self", ".", "size2", ")", "\n", "noise_seg2", "=", "transform", ".", "resize", "(", "label_noise", ",", "self", ".", "size3", ")", "\n", "noise_seg3", "=", "transform", ".", "resize", "(", "label_noise", ",", "self", ".", "size4", ")", "\n", "mask_seg1", "=", "transform", ".", "resize", "(", "label_mask", ",", "self", ".", "size2", ")", "\n", "mask_seg2", "=", "transform", ".", "resize", "(", "label_mask", ",", "self", ".", "size3", ")", "\n", "mask_seg3", "=", "transform", ".", "resize", "(", "label_mask", ",", "self", ".", "size4", ")", "\n", "\n", "### (h, w, c) -> (c, h, w)", "\n", "face", "=", "face", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "noise_seg1", "=", "noise_seg1", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "noise_seg2", "=", "noise_seg2", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "noise_seg3", "=", "noise_seg3", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "mask_seg1", "=", "np", ".", "mean", "(", "mask_seg1", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "axis", "=", "0", ")", "\n", "mask_seg2", "=", "np", ".", "mean", "(", "mask_seg2", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "axis", "=", "0", ")", "\n", "mask_seg3", "=", "np", ".", "mean", "(", "mask_seg3", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n", "mask_seg_1", "=", "np", ".", "concatenate", "(", "(", "mask_seg1", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "(", "1.0", "-", "mask_seg1", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "mask_seg_2", "=", "np", ".", "concatenate", "(", "(", "mask_seg2", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "(", "1.0", "-", "mask_seg2", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "mask_seg_3", "=", "np", ".", "concatenate", "(", "(", "mask_seg3", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "(", "1.0", "-", "mask_seg3", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "### to pytorch tensor", "\n", "face", "=", "torch", ".", "from_numpy", "(", "face", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "label_noise_seg1", "=", "torch", ".", "tensor", "(", "noise_seg1", ")", ".", "float", "(", ")", "\n", "label_noise_seg2", "=", "torch", ".", "tensor", "(", "noise_seg2", ")", ".", "float", "(", ")", "\n", "label_noise_seg3", "=", "torch", ".", "tensor", "(", "noise_seg3", ")", ".", "float", "(", ")", "\n", "label_mask_seg1", "=", "torch", ".", "tensor", "(", "mask_seg_1", ")", ".", "float", "(", ")", "\n", "label_mask_seg2", "=", "torch", ".", "tensor", "(", "mask_seg_2", ")", ".", "float", "(", ")", "\n", "label_mask_seg3", "=", "torch", ".", "tensor", "(", "mask_seg_3", ")", ".", "float", "(", ")", "\n", "label_fake", "=", "torch", ".", "tensor", "(", "label_fake", ")", ".", "float", "(", ")", "\n", "\n", "### normalize", "\n", "face", "=", "(", "face", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n", "### output", "\n", "sample_tran", "=", "{", "'faces'", ":", "face", ",", "\n", "'label_noise_seg1'", ":", "label_noise_seg1", ",", "\n", "'label_noise_seg2'", ":", "label_noise_seg2", ",", "\n", "'label_noise_seg3'", ":", "label_noise_seg3", ",", "\n", "'label_mask_seg1'", ":", "label_mask_seg1", ",", "\n", "'label_mask_seg2'", ":", "label_mask_seg2", ",", "\n", "'label_mask_seg3'", ":", "label_mask_seg3", ",", "\n", "'labels'", ":", "label_fake", "}", "\n", "\n", "return", "sample_tran", "", "", "", ""]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_facexray.face_Dataset.__init__": [[9, 12], ["pandas.read_csv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_path_details", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "header", "=", "None", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_facexray.face_Dataset.__len__": [[13, 15], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_path_details", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_facexray.face_Dataset.__getitem__": [[16, 33], ["torch.is_tensor", "skimage.io.imread", "skimage.io.imread", "idx.tolist.tolist.tolist", "dataloader_facexray.face_Dataset.transform", "mask_path.split", "mask_path.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "", "img_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "0", "]", "\n", "mask_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "2", "]", "\n", "xray_path", "=", "mask_path", ".", "split", "(", "'masks_224'", ")", "[", "0", "]", "+", "'xrays_224'", "+", "mask_path", ".", "split", "(", "'masks_224'", ")", "[", "1", "]", "\n", "\n", "img", "=", "io", ".", "imread", "(", "img_path", ")", "\n", "mask", "=", "io", ".", "imread", "(", "xray_path", ")", "\n", "label", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "3", "]", "\n", "sample", "=", "{", "'face'", ":", "img", ",", "\n", "'mask'", ":", "mask", ",", "\n", "'label'", ":", "label", "}", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_facexray.my_transforms.__init__": [[40, 52], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", "=", "256", ",", "RandomHorizontalFlip", "=", "False", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "", "self", ".", "RandomHorizontalFlip", "=", "RandomHorizontalFlip", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_facexray.my_transforms.__call__": [[53, 84], ["skimage.transform.resize", "skimage.transform.resize", "torch.from_numpy().float.transpose", "numpy.mean", "torch.from_numpy().float", "torch.from_numpy().float", "torch.tensor().float", "len", "torch.from_numpy().float.transpose", "random.random", "torch.from_numpy", "torch.from_numpy", "torch.tensor", "torch.from_numpy().float.copy", "torch.from_numpy().float.copy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img_ori", "=", "sample", "[", "'face'", "]", "\n", "mask_ori", "=", "sample", "[", "'mask'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "### resize", "\n", "img", "=", "transform", ".", "resize", "(", "img_ori", ",", "self", ".", "output_size", ")", "\n", "mask", "=", "transform", ".", "resize", "(", "mask_ori", ",", "self", ".", "output_size", ")", "\n", "if", "len", "(", "mask", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "mask", "=", "mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "### random horizontal flip", "\n", "", "if", "self", ".", "RandomHorizontalFlip", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "\n", "### (h, w, c) -> (c, h, w)", "\n", "", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "mask", "=", "np", ".", "mean", "(", "mask", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "### to pytorch tensor", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "float", "(", ")", "\n", "\n", "### normalize", "\n", "img", "=", "(", "img", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n", "### output", "\n", "sample", "=", "{", "'faces'", ":", "img", ",", "\n", "'masks'", ":", "mask", ",", "\n", "'labels'", ":", "label", "}", "\n", "return", "sample", "", "", "", ""]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_multitask_cross.face_Dataset.__init__": [[9, 12], ["pandas.read_csv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_path_details", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "header", "=", "None", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_multitask_cross.face_Dataset.__len__": [[13, 15], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_path_details", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_multitask_cross.face_Dataset.__getitem__": [[16, 37], ["torch.is_tensor", "skimage.io.imread", "skimage.io.imread", "idx.tolist.tolist.tolist", "dataloader_multitask_cross.face_Dataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "img_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "0", "]", "\n", "mask_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "2", "]", "\n", "\n", "img", "=", "io", ".", "imread", "(", "img_path", ")", "\n", "mask", "=", "io", ".", "imread", "(", "mask_path", ")", "\n", "\n", "label", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "3", "]", "\n", "\n", "sample", "=", "{", "'face'", ":", "img", ",", "\n", "'mask'", ":", "mask", ",", "\n", "'label'", ":", "label", "}", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_multitask_cross.my_transforms.__init__": [[44, 57], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", "=", "256", ",", "mask_size", "=", "256", ",", "RandomHorizontalFlip", "=", "False", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "self", ".", "mask_size", "=", "(", "mask_size", ",", "mask_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "", "self", ".", "RandomHorizontalFlip", "=", "RandomHorizontalFlip", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_multitask_cross.my_transforms.__call__": [[58, 93], ["skimage.transform.resize", "skimage.transform.resize", "torch.from_numpy().float.transpose", "numpy.mean", "numpy.concatenate", "torch.from_numpy().float", "torch.from_numpy().float", "torch.tensor().float", "len", "torch.from_numpy().float.transpose", "random.random", "torch.from_numpy", "torch.from_numpy", "torch.tensor", "torch.from_numpy().float.copy", "torch.from_numpy().float.copy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img_ori", "=", "sample", "[", "'face'", "]", "\n", "mask_ori", "=", "sample", "[", "'mask'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "\n", "### resize", "\n", "img", "=", "transform", ".", "resize", "(", "img_ori", ",", "self", ".", "output_size", ")", "\n", "if", "len", "(", "mask_ori", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "mask_ori", "=", "mask_ori", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "mask", "=", "transform", ".", "resize", "(", "mask_ori", ",", "self", ".", "mask_size", ")", "\n", "\n", "### random horizontal flip", "\n", "if", "self", ".", "RandomHorizontalFlip", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "\n", "### (h, w, c) -> (c, h, w)", "\n", "", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "mask", "=", "np", ".", "mean", "(", "mask", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "axis", "=", "0", ")", "\n", "mask", "=", "np", ".", "concatenate", "(", "(", "mask", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "(", "1.0", "-", "mask", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "### to pytorch tensor", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "float", "(", ")", "\n", "\n", "### normalize", "\n", "img", "=", "(", "img", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n", "### output", "\n", "sample", "=", "{", "'faces'", ":", "img", ",", "\n", "'masks'", ":", "mask", ",", "\n", "'labels'", ":", "label", "}", "\n", "return", "sample", "", "", "", ""]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_seg_ce.face_Dataset.__init__": [[9, 12], ["pandas.read_csv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_path_details", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "header", "=", "None", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_seg_ce.face_Dataset.__len__": [[13, 15], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_path_details", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_seg_ce.face_Dataset.__getitem__": [[16, 38], ["torch.is_tensor", "skimage.io.imread", "skimage.io.imread", "idx.tolist.tolist.tolist", "dataloader_seg_ce.face_Dataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "img_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "0", "]", "\n", "\n", "mask_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "2", "]", "\n", "\n", "img", "=", "io", ".", "imread", "(", "img_path", ")", "\n", "mask", "=", "io", ".", "imread", "(", "mask_path", ")", "\n", "\n", "label", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "3", "]", "\n", "\n", "sample", "=", "{", "'face'", ":", "img", ",", "\n", "'mask'", ":", "mask", ",", "\n", "'label'", ":", "label", "}", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_seg_ce.my_transforms.__init__": [[46, 59], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", "=", "299", ",", "mask_size", "=", "19", ",", "RandomHorizontalFlip", "=", "False", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "self", ".", "mask_size", "=", "(", "mask_size", ",", "mask_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "", "self", ".", "RandomHorizontalFlip", "=", "RandomHorizontalFlip", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader_seg_ce.my_transforms.__call__": [[60, 93], ["skimage.transform.resize", "skimage.transform.resize", "torch.from_numpy().float.transpose", "numpy.mean", "numpy.concatenate", "torch.from_numpy().float", "torch.from_numpy().float", "torch.tensor().float", "len", "torch.from_numpy().float.transpose", "random.random", "torch.from_numpy", "torch.from_numpy", "torch.tensor", "torch.from_numpy().float.copy", "torch.from_numpy().float.copy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img_ori", "=", "sample", "[", "'face'", "]", "\n", "mask_ori", "=", "sample", "[", "'mask'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "### resize", "\n", "img", "=", "transform", ".", "resize", "(", "img_ori", ",", "self", ".", "output_size", ")", "\n", "mask", "=", "transform", ".", "resize", "(", "mask_ori", ",", "self", ".", "mask_size", ")", "\n", "if", "len", "(", "mask", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "mask", "=", "mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "### random horizontal flip", "\n", "", "if", "self", ".", "RandomHorizontalFlip", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "\n", "### (h, w, c) -> (c, h, w)", "\n", "", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "mask", "=", "np", ".", "mean", "(", "mask", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "axis", "=", "0", ")", "\n", "mask", "=", "np", ".", "concatenate", "(", "(", "mask", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "(", "1.0", "-", "mask", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "### to pytorch tensor", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "float", "(", ")", "\n", "\n", "### normalize", "\n", "img", "=", "(", "img", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n", "### output", "\n", "sample", "=", "{", "'faces'", ":", "img", ",", "\n", "'masks'", ":", "mask", ",", "\n", "'labels'", ":", "label", "}", "\n", "return", "sample", "", "", "", ""]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.face_Dataset.__init__": [[8, 11], ["pandas.read_csv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_path_details", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "header", "=", "None", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.face_Dataset.__len__": [[12, 14], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_path_details", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.face_Dataset.__getitem__": [[15, 31], ["torch.is_tensor", "skimage.io.imread", "idx.tolist.tolist.tolist", "dataloader.face_Dataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "img_path", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "0", "]", "\n", "img", "=", "io", ".", "imread", "(", "img_path", ")", "\n", "label", "=", "self", ".", "data_path_details", ".", "iloc", "[", "idx", ",", "3", "]", "\n", "\n", "sample", "=", "{", "'face'", ":", "img", ",", "\n", "'label'", ":", "label", "}", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__init__": [[39, 51], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", "=", "299", ",", "RandomHorizontalFlip", "=", "False", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "", "self", ".", "RandomHorizontalFlip", "=", "RandomHorizontalFlip", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.chenqikong_detect_and_locate.opt.dataloader.my_transforms.__call__": [[52, 76], ["skimage.transform.resize", "torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.tensor().float", "random.random", "torch.from_numpy", "torch.tensor", "torch.from_numpy().float.copy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img_ori", "=", "sample", "[", "'face'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "### resize", "\n", "img", "=", "transform", ".", "resize", "(", "img_ori", ",", "self", ".", "output_size", ")", "\n", "\n", "### random horizontal flip", "\n", "if", "self", ".", "RandomHorizontalFlip", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "\n", "### (h, w, c) -> (c, h, w)", "\n", "", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "### to pytorch tensor", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "float", "(", ")", "\n", "\n", "### normalize", "\n", "img", "=", "(", "img", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n", "### output", "\n", "sample", "=", "{", "'faces'", ":", "img", ",", "\n", "'labels'", ":", "label", "}", "\n", "return", "sample", "", "", "", ""]]}