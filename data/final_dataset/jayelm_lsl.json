{"home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.ExWrapper.__init__": [[20, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "ExWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.ExWrapper.forward": [[24, 40], ["models.ExWrapper.model", "len", "x.view", "len", "x_enc.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "5", ":", "\n", "            ", "n_ex", "=", "x", ".", "shape", "[", "1", "]", "\n", "img_dim", "=", "x", ".", "shape", "[", "2", ":", "]", "\n", "# Flatten out examples first", "\n", "x_flat", "=", "x", ".", "view", "(", "batch_size", "*", "n_ex", ",", "*", "img_dim", ")", "\n", "", "else", ":", "\n", "            ", "x_flat", "=", "x", "\n", "\n", "", "x_enc", "=", "self", ".", "model", "(", "x_flat", ")", "\n", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "5", ":", "\n", "            ", "x_enc", "=", "x_enc", ".", "view", "(", "batch_size", ",", "n_ex", ",", "-", "1", ")", "\n", "\n", "", "return", "x_enc", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.Identity.forward": [[43, 45], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.ImageRep.__init__": [[56, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["def", "__init__", "(", "self", ",", "backbone", "=", "None", ",", "hidden_size", "=", "512", ")", ":", "\n", "        ", "super", "(", "ImageRep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "backbone", "is", "None", ":", "\n", "            ", "self", ".", "backbone", "=", "Identity", "(", ")", "\n", "self", ".", "backbone", ".", "final_feat_dim", "=", "4608", "\n", "", "else", ":", "\n", "            ", "self", ".", "backbone", "=", "backbone", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "backbone", ".", "final_feat_dim", ",", "hidden_size", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.ImageRep.forward": [[67, 70], ["models.ImageRep.backbone", "models.ImageRep.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_enc", "=", "self", ".", "backbone", "(", "x", ")", "\n", "return", "self", ".", "model", "(", "x_enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.TextRep.__init__": [[79, 84], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["def", "__init__", "(", "self", ",", "embedding_module", ")", ":", "\n", "        ", "super", "(", "TextRep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "embedding_module", "\n", "self", ".", "embedding_dim", "=", "embedding_module", ".", "embedding_dim", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "self", ".", "embedding_dim", ",", "512", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.TextRep.forward": [[85, 111], ["seq.transpose.transpose.size", "seq.transpose.transpose.transpose", "models.TextRep.embedding", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "models.TextRep.gru", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_lengths.data.cpu().tolist", "length.data.tolist", "sorted_lengths.data.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "seq", ",", "length", ")", ":", "\n", "        ", "batch_size", "=", "seq", ".", "size", "(", "0", ")", "\n", "\n", "if", "batch_size", ">", "1", ":", "\n", "            ", "sorted_lengths", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "length", ",", "descending", "=", "True", ")", "\n", "seq", "=", "seq", "[", "sorted_idx", "]", "\n", "\n", "# reorder from (B,L,D) to (L,B,D)", "\n", "", "seq", "=", "seq", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# embed your sequences", "\n", "embed_seq", "=", "self", ".", "embedding", "(", "seq", ")", "\n", "\n", "packed", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "\n", "embed_seq", ",", "\n", "sorted_lengths", ".", "data", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "if", "batch_size", ">", "1", "else", "length", ".", "data", ".", "tolist", "(", ")", ")", "\n", "\n", "_", ",", "hidden", "=", "self", ".", "gru", "(", "packed", ")", "\n", "hidden", "=", "hidden", "[", "-", "1", ",", "...", "]", "\n", "\n", "if", "batch_size", ">", "1", ":", "\n", "            ", "_", ",", "reversed_idx", "=", "torch", ".", "sort", "(", "sorted_idx", ")", "\n", "hidden", "=", "hidden", "[", "reversed_idx", "]", "\n", "\n", "", "return", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.MultimodalDeepRep.__init__": [[114, 119], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MultimodalDeepRep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", "*", "2", ",", "512", "*", "2", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", "*", "2", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.MultimodalDeepRep.forward": [[120, 123], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.MultimodalDeepRep.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "xy", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "model", "(", "xy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.MultimodalRep.__init__": [[128, 132], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MultimodalRep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", "*", "2", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.MultimodalRep.forward": [[133, 136], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.MultimodalRep.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "xy", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "model", "(", "xy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.MultimodalSumExp.forward": [[139, 141], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "x", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.MultimodalLinearRep.__init__": [[144, 147], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MultimodalLinearRep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Linear", "(", "512", "*", "2", ",", "512", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.MultimodalLinearRep.forward": [[148, 151], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.MultimodalLinearRep.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "xy", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "model", "(", "xy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.MultimodalWeightedRep.__init__": [[154, 158], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MultimodalWeightedRep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", "*", "2", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.MultimodalWeightedRep.forward": [[159, 164], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.MultimodalWeightedRep.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "xy", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "w", "=", "self", ".", "model", "(", "xy", ")", "\n", "out", "=", "w", "*", "x", "+", "(", "1.", "-", "w", ")", "*", "y", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.MultimodalSingleWeightRep.__init__": [[167, 170], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MultimodalSingleWeightRep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "normal", "(", "torch", ".", "zeros", "(", "1", ")", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.MultimodalSingleWeightRep.forward": [[171, 175], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "w", "=", "torch", ".", "sigmoid", "(", "self", ".", "w", ")", "\n", "out", "=", "w", "*", "x", "+", "(", "1.", "-", "w", ")", "*", "y", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.TextProposal.__init__": [[191, 198], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["def", "__init__", "(", "self", ",", "embedding_module", ")", ":", "\n", "        ", "super", "(", "TextProposal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "embedding_module", "\n", "self", ".", "embedding_dim", "=", "embedding_module", ".", "embedding_dim", "\n", "self", ".", "vocab_size", "=", "embedding_module", ".", "num_embeddings", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "self", ".", "embedding_dim", ",", "512", ")", "\n", "self", ".", "outputs2vocab", "=", "nn", ".", "Linear", "(", "512", ",", "self", ".", "vocab_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.TextProposal.forward": [[199, 237], ["seq.transpose.transpose.size", "feats.unsqueeze.unsqueeze.unsqueeze", "seq.transpose.transpose.transpose", "models.TextProposal.embedding", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "models.TextProposal.gru", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "output[].contiguous", "output.transpose.transpose.transpose", "output.transpose.transpose.size", "output.transpose.transpose.view", "models.TextProposal.outputs2vocab", "models.TextProposal.view", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_lengths.cpu", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "seq", ",", "length", ")", ":", "\n", "# feats is from example images", "\n", "        ", "batch_size", "=", "seq", ".", "size", "(", "0", ")", "\n", "\n", "if", "batch_size", ">", "1", ":", "\n", "# BUGFIX? dont we need to sort feats too?", "\n", "            ", "sorted_lengths", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "length", ",", "descending", "=", "True", ")", "\n", "seq", "=", "seq", "[", "sorted_idx", "]", "\n", "feats", "=", "feats", "[", "sorted_idx", "]", "\n", "\n", "", "feats", "=", "feats", ".", "unsqueeze", "(", "0", ")", "\n", "# reorder from (B,L,D) to (L,B,D)", "\n", "seq", "=", "seq", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# embed your sequences", "\n", "embed_seq", "=", "self", ".", "embedding", "(", "seq", ")", "\n", "\n", "packed_input", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "embed_seq", ",", "\n", "sorted_lengths", ".", "cpu", "(", ")", ")", "\n", "\n", "# shape = (seq_len, batch, hidden_dim)", "\n", "packed_output", ",", "_", "=", "self", ".", "gru", "(", "packed_input", ",", "feats", ")", "\n", "output", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_output", ")", "\n", "output", "=", "output", "[", "0", "]", ".", "contiguous", "(", ")", "\n", "\n", "# reorder from (L,B,D) to (B,L,D)", "\n", "output", "=", "output", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "batch_size", ">", "1", ":", "\n", "            ", "_", ",", "reversed_idx", "=", "torch", ".", "sort", "(", "sorted_idx", ")", "\n", "output", "=", "output", "[", "reversed_idx", "]", "\n", "\n", "", "max_length", "=", "output", ".", "size", "(", "1", ")", "\n", "output_2d", "=", "output", ".", "view", "(", "batch_size", "*", "max_length", ",", "512", ")", "\n", "outputs_2d", "=", "self", ".", "outputs2vocab", "(", "output_2d", ")", "\n", "outputs", "=", "outputs_2d", ".", "view", "(", "batch_size", ",", "max_length", ",", "self", ".", "vocab_size", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.TextProposal.sample": [[238, 298], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "feats.size", "feats.unsqueeze", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "models.TextProposal.unsqueeze", "models.TextProposal.to", "models.TextProposal.squeeze().cpu().numpy", "models.TextProposal.transpose", "models.TextProposal.embedding", "range", "numpy.array", "max", "range", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "models.TextProposal.gru", "torch.nn.functional.softmax.squeeze", "models.TextProposal.outputs2vocab", "torch.multinomial.squeeze().cpu().numpy", "torch.multinomial.squeeze().cpu().numpy", "torch.multinomial.squeeze().cpu().numpy", "torch.multinomial.squeeze().cpu().numpy.tolist", "zip", "torch.multinomial.transpose", "torch.multinomial.transpose", "torch.multinomial.transpose", "models.TextProposal.embedding", "len", "numpy.ones", "models.TextProposal.squeeze().cpu", "torch.multinomial.unsqueeze", "torch.multinomial.unsqueeze", "torch.multinomial.unsqueeze", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "torch.nn.functional.softmax.max", "torch.multinomial.squeeze().cpu", "torch.multinomial.squeeze().cpu", "torch.multinomial.squeeze().cpu", "so_far.append", "models.TextProposal.squeeze", "torch.multinomial.squeeze", "torch.multinomial.squeeze", "torch.multinomial.squeeze"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "feats", ",", "sos_index", ",", "eos_index", ",", "pad_index", ",", "greedy", "=", "False", ")", ":", "\n", "        ", "\"\"\"Generate from image features using greedy search.\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_size", "=", "feats", ".", "size", "(", "0", ")", "\n", "\n", "# initialize hidden states using image features", "\n", "states", "=", "feats", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# first input is SOS token", "\n", "inputs", "=", "np", ".", "array", "(", "[", "sos_index", "for", "_", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "inputs", "=", "torch", ".", "from_numpy", "(", "inputs", ")", "\n", "inputs", "=", "inputs", ".", "unsqueeze", "(", "1", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "feats", ".", "device", ")", "\n", "\n", "# save SOS as first generated token", "\n", "inputs_npy", "=", "inputs", ".", "squeeze", "(", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sampled_ids", "=", "[", "[", "w", "]", "for", "w", "in", "inputs_npy", "]", "\n", "\n", "# (B,L,D) to (L,B,D)", "\n", "inputs", "=", "inputs", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# compute embeddings", "\n", "inputs", "=", "self", ".", "embedding", "(", "inputs", ")", "\n", "\n", "for", "i", "in", "range", "(", "20", ")", ":", "# like in jacobs repo", "\n", "                ", "outputs", ",", "states", "=", "self", ".", "gru", "(", "inputs", ",", "\n", "states", ")", "# outputs: (L=1,B,H)", "\n", "outputs", "=", "outputs", ".", "squeeze", "(", "0", ")", "# outputs: (B,H)", "\n", "outputs", "=", "self", ".", "outputs2vocab", "(", "outputs", ")", "# outputs: (B,V)", "\n", "\n", "if", "greedy", ":", "\n", "                    ", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "predicted", "=", "predicted", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "outputs", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "predicted", "=", "torch", ".", "multinomial", "(", "outputs", ",", "1", ")", "\n", "\n", "", "predicted_npy", "=", "predicted", ".", "squeeze", "(", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predicted_lst", "=", "predicted_npy", ".", "tolist", "(", ")", "\n", "\n", "for", "w", ",", "so_far", "in", "zip", "(", "predicted_lst", ",", "sampled_ids", ")", ":", "\n", "                    ", "if", "so_far", "[", "-", "1", "]", "!=", "eos_index", ":", "\n", "                        ", "so_far", ".", "append", "(", "w", ")", "\n", "\n", "", "", "inputs", "=", "predicted", ".", "transpose", "(", "0", ",", "1", ")", "# inputs: (L=1,B)", "\n", "inputs", "=", "self", ".", "embedding", "(", "inputs", ")", "# inputs: (L=1,B,E)", "\n", "\n", "", "sampled_lengths", "=", "[", "len", "(", "text", ")", "for", "text", "in", "sampled_ids", "]", "\n", "sampled_lengths", "=", "np", ".", "array", "(", "sampled_lengths", ")", "\n", "\n", "max_length", "=", "max", "(", "sampled_lengths", ")", "\n", "padded_ids", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "max_length", ")", ")", "*", "pad_index", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "padded_ids", "[", "i", ",", ":", "sampled_lengths", "[", "i", "]", "]", "=", "sampled_ids", "[", "i", "]", "\n", "\n", "", "sampled_lengths", "=", "torch", ".", "from_numpy", "(", "sampled_lengths", ")", ".", "long", "(", ")", "\n", "sampled_ids", "=", "torch", ".", "from_numpy", "(", "padded_ids", ")", ".", "long", "(", ")", "\n", "\n", "", "return", "sampled_ids", ",", "sampled_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.EmbedImageRep.__init__": [[301, 306], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", "EmbedImageRep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.EmbedImageRep.forward": [[307, 309], ["models.EmbedImageRep.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.EmbedTextRep.__init__": [[312, 317], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", "EmbedTextRep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.EmbedTextRep.forward": [[318, 320], ["models.EmbedTextRep.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.Scorer.__init__": [[323, 325], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Scorer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.Scorer.forward": [[326, 328], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.Scorer.score": [[329, 331], ["None"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.Scorer.batchwise_score": [[332, 334], ["None"], "methods", ["None"], ["", "def", "batchwise_score", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.DotPScorer.__init__": [[337, 339], ["models.Scorer.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DotPScorer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.DotPScorer.score": [[340, 342], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "x", "*", "y", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.DotPScorer.batchwise_score": [[343, 347], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "batchwise_score", "(", "self", ",", "y", ",", "x", ")", ":", "\n", "# REVERSED", "\n", "        ", "bw_scores", "=", "torch", ".", "einsum", "(", "'ijk,ik->ij'", ",", "(", "x", ",", "y", ")", ")", "\n", "return", "torch", ".", "sum", "(", "bw_scores", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.BilinearScorer.__init__": [[350, 364], ["models.DotPScorer.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "dropout", "=", "0.0", ",", "identity_debug", "=", "False", ")", ":", "\n", "        ", "super", "(", "BilinearScorer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bilinear", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "dropout_p", "=", "dropout", "\n", "if", "self", ".", "dropout_p", ">", "0.0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_p", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "lambda", "x", ":", "x", "\n", "", "if", "identity_debug", ":", "\n", "# Set this as identity matrix to make sure we get the same output", "\n", "# as DotPScorer", "\n", "            ", "self", ".", "bilinear", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "eye", "(", "hidden_size", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "bilinear", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.BilinearScorer.score": [[365, 369], ["models.BilinearScorer.bilinear", "models.BilinearScorer.dropout", "models.DotPScorer.score"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.score"], ["", "", "def", "score", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "wy", "=", "self", ".", "bilinear", "(", "y", ")", "\n", "wy", "=", "self", ".", "dropout", "(", "wy", ")", "\n", "return", "super", "(", "BilinearScorer", ",", "self", ")", ".", "score", "(", "x", ",", "wy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.models.BilinearScorer.batchwise_score": [[370, 381], ["models.BilinearScorer.bilinear().unsqueeze().view_as", "models.BilinearScorer.dropout", "models.DotPScorer.batchwise_score", "models.BilinearScorer.bilinear().unsqueeze", "models.BilinearScorer.bilinear", "y.view"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.batchwise_score"], ["", "def", "batchwise_score", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        x: (batch_size, h)\n        y: (batch_size, n_examples, h)\n        \"\"\"", "\n", "batch_size", ",", "n_examples", ",", "h", "=", "y", ".", "shape", "\n", "wy", "=", "self", ".", "bilinear", "(", "y", ".", "view", "(", "batch_size", "*", "n_examples", ",", "\n", "-", "1", ")", ")", ".", "unsqueeze", "(", "1", ")", ".", "view_as", "(", "y", ")", "\n", "wy", "=", "self", ".", "dropout", "(", "wy", ")", "\n", "# wy: (batch_size, n_examples, h)", "\n", "return", "super", "(", "BilinearScorer", ",", "self", ")", ".", "batchwise_score", "(", "x", ",", "wy", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Identity.__init__": [[18, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Identity.forward": [[21, 23], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.distLinear.__init__": [[37, 44], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.weight_norm.WeightNorm.apply", "torch.nn.utils.weight_norm.WeightNorm.apply", "torch.nn.utils.weight_norm.WeightNorm.apply", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ")", ":", "\n", "        ", "super", "(", "distLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "L", "=", "nn", ".", "Linear", "(", "indim", ",", "outdim", ",", "bias", "=", "False", ")", "\n", "WeightNorm", ".", "apply", "(", "\n", "self", ".", "L", ",", "'weight'", ",", "\n", "dim", "=", "0", ")", "# split the weight update component to direction and norm", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.distLinear.forward": [[45, 57], ["torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "x.div", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "vision.distLinear.L.weight.data.div", "vision.distLinear.L", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "x_normalized", "=", "x", ".", "div", "(", "x_norm", "+", "0.00001", ")", "\n", "L_norm", "=", "torch", ".", "norm", "(", "self", ".", "L", ".", "weight", ".", "data", ",", "p", "=", "2", ",", "\n", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "self", ".", "L", ".", "weight", ".", "data", ")", "\n", "self", ".", "L", ".", "weight", ".", "data", "=", "self", ".", "L", ".", "weight", ".", "data", ".", "div", "(", "L_norm", "+", "0.00001", ")", "\n", "cos_dist", "=", "self", ".", "L", "(", "x_normalized", ")", "# matrix product by forward function", "\n", "# a fixed scale factor to scale the output of cos value into a", "\n", "# reasonably large input for softmax", "\n", "scores", "=", "10", "*", "cos_dist", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Flatten.__init__": [[60, 62], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Flatten.forward": [[63, 65], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Linear_fw.__init__": [[68, 72], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "Linear_fw", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "# Lazy hack to add fast weight link", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Linear_fw.forward": [[73, 79], ["torch.linear", "torch.linear", "torch.linear", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "super", "(", "Linear_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Conv2d_fw.__init__": [[82, 98], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Conv2d_fw.forward": [[99, 120], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward", "torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.forward", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "\n", "self", ".", "weight", ".", "fast", ",", "\n", "None", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "\n", "self", ".", "weight", ".", "fast", ",", "\n", "self", ".", "bias", ".", "fast", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.BatchNorm2d_fw.__init__": [[124, 128], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "super", "(", "BatchNorm2d_fw", ",", "self", ")", ".", "__init__", "(", "num_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.BatchNorm2d_fw.forward": [[129, 151], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.data.size", "x.data.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "running_mean", "=", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "running_var", "=", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "\n", "running_mean", ",", "\n", "running_var", ",", "\n", "self", ".", "weight", ".", "fast", ",", "\n", "self", ".", "bias", ".", "fast", ",", "\n", "training", "=", "True", ",", "\n", "momentum", "=", "1", ")", "\n", "# batch_norm momentum hack: follow hack of Kate Rakelly in", "\n", "# pytorch-maml/src/layers.py", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "\n", "running_mean", ",", "\n", "running_var", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "bias", ",", "\n", "training", "=", "True", ",", "\n", "momentum", "=", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ConvBlock.__init__": [[157, 178], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vision.Conv2d_fw", "vision.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "vision.ConvBlock.parametrized_layers.append", "vision.init_layer"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__", "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "pool", "=", "True", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C", ",", "self", ".", "BN", ",", "self", ".", "relu", "]", "\n", "if", "pool", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "pool", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "parametrized_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ConvBlock.forward": [[179, 182], ["vision.ConvBlock.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.SimpleBlock.__init__": [[188, 253], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "vision.Conv2d_fw", "vision.BatchNorm2d_fw", "vision.Conv2d_fw", "vision.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "vision.SimpleBlock.parametrized_layers.append", "vision.SimpleBlock.parametrized_layers.append", "vision.init_layer", "vision.Conv2d_fw", "vision.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__", "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "\n", "outdim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", "if", "half_res", "else", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "outdim", ",", "\n", "outdim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "\n", "outdim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", "if", "half_res", "else", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "outdim", ",", "\n", "outdim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "C2", ",", "self", ".", "BN1", ",", "self", ".", "BN2", "]", "\n", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "# if the input number of channels is not equal to the output, then need", "\n", "# a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "indim", ",", "\n", "outdim", ",", "\n", "1", ",", "\n", "2", "if", "half_res", "else", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "\n", "outdim", ",", "\n", "1", ",", "\n", "2", "if", "half_res", "else", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "BNshortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.SimpleBlock.forward": [[254, 265], ["vision.SimpleBlock.C1", "vision.SimpleBlock.BN1", "vision.SimpleBlock.relu1", "vision.SimpleBlock.C2", "vision.SimpleBlock.BN2", "vision.SimpleBlock.relu2", "vision.SimpleBlock.BNshortcut", "vision.SimpleBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "BNshortcut", "(", "\n", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.BottleneckBlock.__init__": [[271, 340], ["torch.Module.__init__", "int", "torch.ReLU", "torch.ReLU", "torch.ReLU", "vision.Conv2d_fw", "vision.BatchNorm2d_fw", "vision.Conv2d_fw", "vision.BatchNorm2d_fw", "vision.Conv2d_fw", "vision.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "vision.BottleneckBlock.parametrized_layers.append", "vision.init_layer", "vision.Conv2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__", "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bottleneckdim", "=", "int", "(", "outdim", "/", "4", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "\n", "bottleneckdim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "bottleneckdim", ",", "\n", "bottleneckdim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", "if", "half_res", "else", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "Conv2d_fw", "(", "bottleneckdim", ",", "\n", "outdim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "\n", "bottleneckdim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "\n", "bottleneckdim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", "if", "half_res", "else", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "\n", "outdim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "parametrized_layers", "=", "[", "\n", "self", ".", "C1", ",", "self", ".", "BN1", ",", "self", ".", "C2", ",", "self", ".", "BN2", ",", "self", ".", "C3", ",", "self", ".", "BN3", "\n", "]", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "# if the input number of channels is not equal to the output, then need", "\n", "# a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "indim", ",", "\n", "outdim", ",", "\n", "1", ",", "\n", "stride", "=", "2", "if", "half_res", "else", "1", ",", "\n", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "\n", "outdim", ",", "\n", "1", ",", "\n", "stride", "=", "2", "if", "half_res", "else", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.BottleneckBlock.forward": [[341, 356], ["vision.BottleneckBlock.C1", "vision.BottleneckBlock.BN1", "vision.BottleneckBlock.relu", "vision.BottleneckBlock.C2", "vision.BottleneckBlock.BN2", "vision.BottleneckBlock.relu", "vision.BottleneckBlock.C3", "vision.BottleneckBlock.BN3", "vision.BottleneckBlock.relu", "vision.BottleneckBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C3", "(", "out", ")", "\n", "out", "=", "self", ".", "BN3", "(", "out", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ConvNet.__init__": [[359, 375], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vision.ConvBlock", "trunk.append", "trunk.append", "vision.Flatten"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "3", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "# only pooling for fist 4 layers", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "\n", "pool", "=", "(", "i", "<", "4", ")", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "1600", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ConvNet.forward": [[376, 379], ["vision.ConvNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ConvNetNopool.__init__": [[384, 406], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vision.ConvBlock", "trunk.append", "trunk.append", "vision.Flatten"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "flatten", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvNetNopool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "3", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "# Only first two layer has pooling and no padding", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "\n", "outdim", ",", "\n", "pool", "=", "(", "i", "in", "[", "0", ",", "1", "]", ")", ",", "\n", "padding", "=", "0", "if", "i", "in", "[", "0", ",", "1", "]", "else", "1", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "if", "flatten", ":", "\n", "# FIXME: This dimension is for conv4 only", "\n", "            ", "self", ".", "final_feat_dim", "=", "12544", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "[", "64", ",", "19", ",", "19", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ConvNetNopool.forward": [[407, 410], ["vision.ConvNetNopool.trunk"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ConvNetS.__init__": [[414, 429], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vision.ConvBlock", "trunk.append", "trunk.append", "vision.Flatten"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvNetS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "1", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "# Only pooling for first 4 layers", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "<", "4", ")", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "64", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ConvNetS.forward": [[430, 435], ["vision.ConvNetS.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Only use the first dimension", "\n", "        ", "out", "=", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "out", "=", "self", ".", "trunk", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ConvNetSNopool.__init__": [[441, 456], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vision.ConvBlock", "trunk.append"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ")", ":", "\n", "        ", "super", "(", "ConvNetSNopool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "1", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "# Only first two layer has pooling and no padding", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "\n", "outdim", ",", "\n", "pool", "=", "(", "i", "in", "[", "0", ",", "1", "]", ")", ",", "\n", "padding", "=", "0", "if", "i", "in", "[", "0", ",", "1", "]", "else", "1", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "[", "64", ",", "5", ",", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ConvNetSNopool.forward": [[457, 461], ["vision.ConvNetSNopool.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "# Only use the first dimension", "\n", "out", "=", "self", ".", "trunk", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ResNet.__init__": [[466, 518], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "vision.init_layer", "vision.init_layer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "vision.Conv2d_fw", "vision.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "trunk.append", "trunk.append", "block", "trunk.append", "vision.Flatten"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__", "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.init_layer", "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "list_of_num_layers", ",", "\n", "list_of_out_dims", ",", "\n", "flatten", "=", "True", ")", ":", "\n", "# list_of_num_layers specifies number of layers in each stage", "\n", "# list_of_out_dims specifies number of output channel for each stage", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "list_of_num_layers", ")", "==", "4", ",", "'Can have only four stages'", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "conv1", "=", "Conv2d_fw", "(", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "bn1", "=", "BatchNorm2d_fw", "(", "64", ")", "\n", "", "else", ":", "\n", "            ", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "init_layer", "(", "conv1", ")", "\n", "init_layer", "(", "bn1", ")", "\n", "\n", "trunk", "=", "[", "conv1", ",", "bn1", ",", "relu", ",", "pool1", "]", "\n", "\n", "indim", "=", "64", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "\n", "            ", "for", "j", "in", "range", "(", "list_of_num_layers", "[", "i", "]", ")", ":", "\n", "                ", "half_res", "=", "(", "i", ">=", "1", ")", "and", "(", "j", "==", "0", ")", "\n", "B", "=", "block", "(", "indim", ",", "list_of_out_dims", "[", "i", "]", ",", "half_res", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "indim", "=", "list_of_out_dims", "[", "i", "]", "\n", "\n", "", "", "if", "flatten", ":", "\n", "            ", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "trunk", ".", "append", "(", "avgpool", ")", "\n", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "self", ".", "final_feat_dim", "=", "indim", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "[", "indim", ",", "7", ",", "7", "]", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ResNet.forward": [[519, 522], ["vision.ResNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.init_layer": [[26, 34], ["isinstance", "L.weight.data.normal_", "isinstance", "math.sqrt", "L.weight.data.fill_", "L.bias.data.fill_", "float"], "function", ["None"], ["", "", "def", "init_layer", "(", "L", ")", ":", "\n", "# Initialization using fan-in", "\n", "    ", "if", "isinstance", "(", "L", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "L", ".", "kernel_size", "[", "0", "]", "*", "L", ".", "kernel_size", "[", "1", "]", "*", "L", ".", "out_channels", "\n", "L", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "n", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "L", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "L", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "L", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Conv4": [[524, 526], ["vision.ConvNet"], "function", ["None"], ["", "", "def", "Conv4", "(", ")", ":", "\n", "    ", "return", "ConvNet", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Conv6": [[528, 530], ["vision.ConvNet"], "function", ["None"], ["", "def", "Conv6", "(", ")", ":", "\n", "    ", "return", "ConvNet", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Conv4NP": [[532, 534], ["vision.ConvNetNopool"], "function", ["None"], ["", "def", "Conv4NP", "(", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "4", ",", "flatten", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Conv6NP": [[536, 538], ["vision.ConvNetNopool"], "function", ["None"], ["", "def", "Conv6NP", "(", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Conv4S": [[540, 542], ["vision.ConvNetS"], "function", ["None"], ["", "def", "Conv4S", "(", ")", ":", "\n", "    ", "return", "ConvNetS", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.Conv4SNP": [[544, 546], ["vision.ConvNetSNopool"], "function", ["None"], ["", "def", "Conv4SNP", "(", ")", ":", "\n", "    ", "return", "ConvNetSNopool", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ResNet10": [[548, 550], ["vision.ResNet"], "function", ["None"], ["", "def", "ResNet10", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ResNet18": [[552, 554], ["vision.ResNet"], "function", ["None"], ["", "def", "ResNet18", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.PretrainedResNet18": [[556, 561], ["torchvision.resnet18", "vision.Identity"], "function", ["None"], ["", "def", "PretrainedResNet18", "(", ")", ":", "\n", "    ", "rn18", "=", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "rn18", ".", "final_feat_dim", "=", "512", "\n", "rn18", ".", "fc", "=", "Identity", "(", ")", "# We don't use final fc", "\n", "return", "rn18", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ResNet34": [[563, 565], ["vision.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ResNet50": [[567, 570], ["vision.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "\n", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.vision.ResNet101": [[572, 575], ["vision.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "\n", "flatten", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.L1Dist.forward": [[19, 21], ["torch.norm"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "torch", ".", "norm", "(", "pred", "-", "target", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.L2Dist.forward": [[24, 26], ["torch.norm"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "torch", ".", "norm", "(", "pred", "-", "target", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.CosDist.__init__": [[29, 32], ["torch.nn.Module.__init__", "torch.nn.modules.distance.CosineSimilarity"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cossim", "=", "CosineSimilarity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.CosDist.forward": [[33, 35], ["tre.CosDist.cossim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "1", "-", "self", ".", "cossim", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.AddComp.forward": [[38, 47], ["embs_mask.float().unsqueeze().expand_as", "embs_zeroed.sum", "embs_mask.float().unsqueeze", "embs_mask.float"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "embs", ",", "embs_mask", ")", ":", "\n", "        ", "\"\"\"\n        embs: (batch_size, max_feats, h)\n        embs_mask: (batch_size, max_feats)\n        \"\"\"", "\n", "embs_mask_exp", "=", "embs_mask", ".", "float", "(", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "embs", ")", "\n", "embs_zeroed", "=", "embs", "*", "embs_mask_exp", "\n", "composed", "=", "embs_zeroed", ".", "sum", "(", "1", ")", "\n", "return", "composed", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.MulComp.forward": [[50, 56], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "embs", ",", "embs_mask", ")", ":", "\n", "        ", "\"\"\"\n        embs: (batch_size, max_feats, h)\n        embs_mask: (batch_size, max_feats)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.Objective.__init__": [[59, 66], ["torch.nn.Module.__init__", "torch.nn.Embedding", "len", "tre.Objective.emb.weight.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "repr_size", ",", "comp_fn", ",", "err_fn", ",", "zero_init", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb", "=", "nn", ".", "Embedding", "(", "len", "(", "vocab", ")", ",", "repr_size", ")", "\n", "if", "zero_init", ":", "\n", "            ", "self", ".", "emb", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "", "self", ".", "comp", "=", "comp_fn", "\n", "self", ".", "err", "=", "err_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.Objective.compose": [[67, 78], ["tre.Objective.emb", "tre.Objective.comp"], "methods", ["None"], ["", "def", "compose", "(", "self", ",", "feats", ",", "feats_mask", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n        batch_size, max_feats\n        Output:\n        batch_size, h\n        \"\"\"", "\n", "embs", "=", "self", ".", "emb", "(", "feats", ")", "\n", "# Compose embeddings", "\n", "composed", "=", "self", ".", "comp", "(", "embs", ",", "feats_mask", ")", "\n", "return", "composed", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.Objective.forward": [[79, 81], ["tre.Objective.err", "tre.Objective.compose"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.Objective.compose"], ["", "def", "forward", "(", "self", ",", "rep", ",", "feats", ",", "feats_mask", ")", ":", "\n", "        ", "return", "self", ".", "err", "(", "self", ".", "compose", "(", "feats", ",", "feats_mask", ")", ",", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.flatten": [[8, 16], ["isinstance", "tre.flatten"], "function", ["home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.flatten"], ["def", "flatten", "(", "l", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "l", ",", "tuple", ")", ":", "\n", "        ", "return", "(", "l", ",", ")", "\n", "\n", "", "out", "=", "(", ")", "\n", "for", "ll", "in", "l", ":", "\n", "        ", "out", "=", "out", "+", "flatten", "(", "ll", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.tre": [[83, 121], ["tre.Objective", "obj.to.to", "torch.optim.Adam", "obj.to.parameters", "tqdm.trange", "range", "optim.Adam.zero_grad", "obj.to.", "obj.sum", "loss.sum.backward", "optim.Adam.step", "l.item", "print", "obj.to.emb().data.cpu().numpy", "obj.to.compose", "loss.sum.item", "vocab.items", "zip", "obj.to.emb().data.cpu", "obj.to.emb", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.jayelm_lsl.lsl.tre.Objective.compose"], ["", "", "def", "tre", "(", "reps", ",", "\n", "feats", ",", "\n", "feats_mask", ",", "\n", "vocab", ",", "\n", "comp_fn", ",", "\n", "err_fn", ",", "\n", "quiet", "=", "False", ",", "\n", "steps", "=", "400", ",", "\n", "include_pred", "=", "False", ",", "\n", "zero_init", "=", "True", ")", ":", "\n", "\n", "    ", "obj", "=", "Objective", "(", "vocab", ",", "reps", ".", "shape", "[", "1", "]", ",", "comp_fn", ",", "err_fn", ",", "zero_init", ")", "\n", "obj", "=", "obj", ".", "to", "(", "reps", ".", "device", ")", "\n", "opt", "=", "optim", ".", "Adam", "(", "obj", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "\n", "if", "not", "quiet", ":", "\n", "        ", "ranger", "=", "trange", "(", "steps", ",", "desc", "=", "'TRE'", ")", "\n", "", "else", ":", "\n", "        ", "ranger", "=", "range", "(", "steps", ")", "\n", "", "for", "t", "in", "ranger", ":", "\n", "        ", "opt", ".", "zero_grad", "(", ")", "\n", "loss", "=", "obj", "(", "reps", ",", "feats", ",", "feats_mask", ")", "\n", "total_loss", "=", "loss", ".", "sum", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "if", "not", "quiet", "and", "t", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "total_loss", ".", "item", "(", ")", ")", "\n", "", "opt", ".", "step", "(", ")", "\n", "\n", "", "final_losses", "=", "[", "l", ".", "item", "(", ")", "for", "l", "in", "loss", "]", "\n", "if", "include_pred", ":", "\n", "        ", "lexicon", "=", "{", "\n", "k", ":", "obj", ".", "emb", "(", "torch", ".", "LongTensor", "(", "[", "v", "]", ")", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "k", ",", "v", "in", "vocab", ".", "items", "(", ")", "\n", "}", "\n", "composed", "=", "[", "obj", ".", "compose", "(", "f", ",", "fm", ")", "for", "f", ",", "fm", "in", "zip", "(", "feats", ",", "feats_mask", ")", "]", "\n", "return", "final_losses", ",", "lexicon", ",", "composed", "\n", "", "else", ":", "\n", "        ", "return", "final_losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.train.combine_feats": [[40, 56], ["max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "len", "enumerate", "len", "len"], "function", ["None"], ["def", "combine_feats", "(", "all_feats", ")", ":", "\n", "    ", "\"\"\"\n    Combine feats like language, mask them, and get vocab\n    \"\"\"", "\n", "vocab", "=", "{", "}", "\n", "max_feat_len", "=", "max", "(", "len", "(", "f", ")", "for", "f", "in", "all_feats", ")", "\n", "feats_t", "=", "torch", ".", "zeros", "(", "len", "(", "all_feats", ")", ",", "max_feat_len", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "feats_mask", "=", "torch", ".", "zeros", "(", "len", "(", "all_feats", ")", ",", "max_feat_len", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "for", "feat_i", ",", "feat", "in", "enumerate", "(", "all_feats", ")", ":", "\n", "        ", "for", "j", ",", "f", "in", "enumerate", "(", "feat", ")", ":", "\n", "            ", "if", "f", "not", "in", "vocab", ":", "\n", "                ", "vocab", "[", "f", "]", "=", "len", "(", "vocab", ")", "\n", "", "i_f", "=", "vocab", "[", "f", "]", "\n", "feats_t", "[", "feat_i", ",", "j", "]", "=", "i_f", "\n", "feats_mask", "[", "feat_i", ",", "j", "]", "=", "1", "\n", "", "", "return", "feats_t", ",", "feats_mask", ",", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.OrderedCounter.__repr__": [[25, 27], ["collections.OrderedDict"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'%s(%r)'", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "OrderedDict", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.OrderedCounter.__reduce__": [[28, 30], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "__reduce__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ",", "(", "OrderedDict", "(", "self", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.AverageMeter.__init__": [[35, 38], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "raw", "=", "False", ")", ":", "\n", "        ", "self", ".", "raw", "=", "raw", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.AverageMeter.reset": [[39, 46], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "if", "self", ".", "raw", ":", "\n", "            ", "self", ".", "raw_scores", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.AverageMeter.update": [[47, 54], ["utils.AverageMeter.raw_scores.extend", "list"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ",", "raw_scores", "=", "None", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "if", "self", ".", "raw", ":", "\n", "            ", "self", ".", "raw_scores", ".", "extend", "(", "list", "(", "raw_scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.next_random": [[16, 20], ["numpy.random.RandomState"], "function", ["None"], ["def", "next_random", "(", ")", ":", "\n", "    ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "random_counter", "[", "0", "]", ")", "\n", "random_counter", "[", "0", "]", "+=", "1", "\n", "return", "random", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.save_checkpoint": [[56, 64], ["torch.save", "os.path.isdir", "os.mkdir", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "folder", "=", "'./'", ",", "\n", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "folder", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "folder", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.merge_args_with_dict": [[66, 69], ["list", "dic.items", "setattr"], "function", ["None"], ["", "", "def", "merge_args_with_dict", "(", "args", ",", "dic", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "list", "(", "dic", ".", "items", "(", ")", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.make_output_and_sample_dir": [[71, 80], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "make_output_and_sample_dir", "(", "out_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "\n", "", "sample_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'samples'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sample_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "sample_dir", ")", "\n", "\n", "", "return", "out_dir", ",", "sample_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.save_defaultdict_to_fs": [[82, 87], ["dict", "open", "json.dumps", "fp.write"], "function", ["None"], ["", "def", "save_defaultdict_to_fs", "(", "d", ",", "out_path", ")", ":", "\n", "    ", "d", "=", "dict", "(", "d", ")", "\n", "with", "open", "(", "out_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "d_str", "=", "json", ".", "dumps", "(", "d", ",", "ensure_ascii", "=", "True", ")", "\n", "fp", ".", "write", "(", "d_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.idx2word": [[89, 97], ["enumerate", "len", "sent_str[].strip", "str", "str", "word_id.item"], "function", ["None"], ["", "", "def", "idx2word", "(", "idx", ",", "i2w", ")", ":", "\n", "    ", "sent_str", "=", "[", "str", "(", ")", "]", "*", "len", "(", "idx", ")", "\n", "for", "i", ",", "sent", "in", "enumerate", "(", "idx", ")", ":", "\n", "        ", "for", "word_id", "in", "sent", ":", "\n", "            ", "sent_str", "[", "i", "]", "+=", "str", "(", "i2w", "[", "word_id", ".", "item", "(", ")", "]", ")", "+", "\" \"", "\n", "", "sent_str", "[", "i", "]", "=", "sent_str", "[", "i", "]", ".", "strip", "(", ")", "\n", "\n", "", "return", "sent_str", "\n", "", ""]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.datasets.ShapeWorld.__init__": [[94, 293], ["torch.Dataset.__init__", "os.path.join", "os.path.join", "os.path.exists", "len", "len", "datasets.get_max_hint_length", "numpy.array", "numpy.array", "range", "ValueError", "os.path.exists", "RuntimeError", "torchvision.transforms.Compose", "numpy.load", "numpy.load", "numpy.load", "open", "json.load", "os.path.exists", "zip", "numpy.transpose", "numpy.transpose", "datasets.ShapeWorld.create_vocab", "hint.split", "len", "hint.extend", "json.load.append", "numpy.array.append", "numpy.array", "numpy.array", "torch.append", "torch.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "json.load", "random.shuffle", "datasets.ShapeWorld.w2i.get", "test_hint.split", "len", "test_hint.extend", "json.load.append", "numpy.array.append", "random.randint", "random.randint", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "random.shuffle", "datasets.ShapeWorld.w2i.get", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__", "home.repos.pwc.inspect_result.jayelm_lsl.lsl.datasets.get_max_hint_length", "home.repos.pwc.inspect_result.jayelm_lsl.lsl.datasets.ShapeWorld.create_vocab"], ["def", "__init__", "(", "self", ",", "\n", "split", "=", "'train'", ",", "\n", "vocab", "=", "None", ",", "\n", "augment", "=", "False", ",", "\n", "max_size", "=", "None", ",", "\n", "precomputed_features", "=", "True", ",", "\n", "preprocess", "=", "False", ",", "\n", "noise", "=", "0.0", ",", "\n", "class_noise_weight", "=", "0.5", ",", "\n", "fixed_noise_colors", "=", "None", ",", "\n", "fixed_noise_colors_max_rgb", "=", "0.2", ",", "\n", "noise_type", "=", "'gaussian'", ",", "\n", "data_dir", "=", "None", ",", "\n", "language_filter", "=", "None", ",", "\n", "shuffle_words", "=", "False", ",", "\n", "shuffle_captions", "=", "False", ")", ":", "\n", "        ", "super", "(", "ShapeWorld", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "split", "=", "split", "\n", "assert", "self", ".", "split", "in", "SPLIT_OPTIONS", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n", "assert", "noise_type", "in", "(", "'gaussian'", ",", "'normal'", ")", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "\n", "# Positive class noise", "\n", "if", "precomputed_features", ":", "\n", "            ", "self", ".", "image_dim", "=", "(", "4608", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "image_dim", "=", "(", "3", ",", "64", ",", "64", ")", "\n", "\n", "", "self", ".", "noise", "=", "noise", "\n", "self", ".", "fixed_noise_colors", "=", "fixed_noise_colors", "\n", "self", ".", "fixed_noise_colors_max_rgb", "=", "fixed_noise_colors_max_rgb", "\n", "if", "not", "class_noise_weight", ">=", "0.0", "and", "class_noise_weight", "<=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Class noise weight must be between 0 and 1, got {}\"", ".", "format", "(", "\n", "class_noise_weight", ")", ")", "\n", "", "self", ".", "class_noise_weight", "=", "class_noise_weight", "\n", "\n", "if", "data_dir", "is", "None", ":", "\n", "            ", "data_dir", "=", "DATA_DIR", "\n", "", "self", ".", "data_dir", "=", "data_dir", "\n", "split_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'shapeworld'", ",", "split", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "split_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Can't find {}\"", ".", "format", "(", "split_dir", ")", ")", "\n", "\n", "", "self", ".", "precomputed_features", "=", "precomputed_features", "\n", "if", "self", ".", "precomputed_features", ":", "\n", "            ", "in_features_name", "=", "'inputs.feats.npz'", "\n", "ex_features_name", "=", "'examples.feats.npz'", "\n", "", "else", ":", "\n", "            ", "in_features_name", "=", "'inputs.npz'", "\n", "ex_features_name", "=", "'examples.npz'", "\n", "\n", "", "self", ".", "preprocess", "=", "None", "\n", "if", "preprocess", ":", "\n", "            ", "self", ".", "preprocess", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "# hints = language", "\n", "# examples = images with positive labels (pre-training)", "\n", "# input = test time input", "\n", "# label = test time label", "\n", "", "labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "'labels.npz'", ")", ")", "[", "'arr_0'", "]", "\n", "in_features", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "in_features_name", ")", ")", "[", "'arr_0'", "]", "\n", "ex_features", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "ex_features_name", ")", ")", "[", "'arr_0'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "'hints.json'", ")", ")", "as", "fp", ":", "\n", "            ", "hints", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "test_hints", "=", "os", ".", "path", ".", "join", "(", "split_dir", ",", "'test_hints.json'", ")", "\n", "if", "self", ".", "fixed_noise_colors", "is", "not", "None", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "test_hints", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "test_hints", ")", ":", "\n", "            ", "with", "open", "(", "test_hints", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "test_hints", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "self", ".", "test_hints", "=", "test_hints", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_hints", "=", "None", "\n", "\n", "", "if", "self", ".", "test_hints", "is", "not", "None", ":", "\n", "            ", "for", "a", ",", "b", ",", "label", "in", "zip", "(", "hints", ",", "test_hints", ",", "labels", ")", ":", "\n", "                ", "if", "label", ":", "\n", "                    ", "assert", "a", "==", "b", ",", "(", "a", ",", "b", ",", "label", ")", "\n", "#  else:  # XXX: What?/", "\n", "#  assert a != b, (a, b, label)", "\n", "\n", "", "", "", "if", "not", "self", ".", "precomputed_features", ":", "\n", "# Bring channel to first dim", "\n", "            ", "in_features", "=", "np", ".", "transpose", "(", "in_features", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "ex_features", "=", "np", ".", "transpose", "(", "ex_features", ",", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ")", "\n", "\n", "", "if", "self", ".", "max_size", "is", "not", "None", ":", "\n", "            ", "labels", "=", "labels", "[", ":", "self", ".", "max_size", "]", "\n", "in_features", "=", "in_features", "[", ":", "self", ".", "max_size", "]", "\n", "ex_features", "=", "ex_features", "[", ":", "self", ".", "max_size", "]", "\n", "hints", "=", "hints", "[", ":", "self", ".", "max_size", "]", "\n", "\n", "", "n_data", "=", "len", "(", "hints", ")", "\n", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "ex_features", "=", "ex_features", "\n", "self", ".", "hints", "=", "hints", "\n", "\n", "if", "self", ".", "vocab", "is", "None", ":", "\n", "            ", "self", ".", "create_vocab", "(", "hints", ",", "test_hints", ")", "\n", "\n", "", "self", ".", "w2i", ",", "self", ".", "i2w", "=", "self", ".", "vocab", "[", "'w2i'", "]", ",", "self", ".", "vocab", "[", "'i2w'", "]", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "w2i", ")", "\n", "\n", "# Language processing", "\n", "self", ".", "language_filter", "=", "language_filter", "\n", "if", "self", ".", "language_filter", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "language_filter", "in", "[", "'color'", ",", "'nocolor'", "]", "\n", "", "self", ".", "shuffle_words", "=", "shuffle_words", "\n", "self", ".", "shuffle_captions", "=", "shuffle_captions", "\n", "\n", "# this is the maximum number of tokens in a sentence", "\n", "max_length", "=", "get_max_hint_length", "(", "data_dir", ")", "\n", "\n", "hints", ",", "hint_lengths", "=", "[", "]", ",", "[", "]", "\n", "for", "hint", "in", "self", ".", "hints", ":", "\n", "            ", "hint_tokens", "=", "hint", ".", "split", "(", ")", "\n", "# Hint processing", "\n", "if", "self", ".", "language_filter", "==", "'color'", ":", "\n", "                ", "hint_tokens", "=", "[", "t", "for", "t", "in", "hint_tokens", "if", "t", "in", "COLORS", "]", "\n", "", "elif", "self", ".", "language_filter", "==", "'nocolor'", ":", "\n", "                ", "hint_tokens", "=", "[", "t", "for", "t", "in", "hint_tokens", "if", "t", "not", "in", "COLORS", "]", "\n", "", "if", "self", ".", "shuffle_words", ":", "\n", "                ", "random", ".", "shuffle", "(", "hint_tokens", ")", "\n", "\n", "", "hint", "=", "[", "SOS_TOKEN", ",", "*", "hint_tokens", ",", "EOS_TOKEN", "]", "\n", "hint_length", "=", "len", "(", "hint", ")", "\n", "\n", "hint", ".", "extend", "(", "[", "PAD_TOKEN", "]", "*", "(", "max_length", "+", "2", "-", "hint_length", ")", ")", "\n", "hint", "=", "[", "self", ".", "w2i", ".", "get", "(", "w", ",", "self", ".", "w2i", "[", "UNK_TOKEN", "]", ")", "for", "w", "in", "hint", "]", "\n", "\n", "hints", ".", "append", "(", "hint", ")", "\n", "hint_lengths", ".", "append", "(", "hint_length", ")", "\n", "\n", "", "hints", "=", "np", ".", "array", "(", "hints", ")", "\n", "hint_lengths", "=", "np", ".", "array", "(", "hint_lengths", ")", "\n", "\n", "if", "self", ".", "test_hints", "is", "not", "None", ":", "\n", "            ", "test_hints", ",", "test_hint_lengths", "=", "[", "]", ",", "[", "]", "\n", "for", "test_hint", "in", "self", ".", "test_hints", ":", "\n", "                ", "test_hint_tokens", "=", "test_hint", ".", "split", "(", ")", "\n", "\n", "if", "self", ".", "language_filter", "==", "'color'", ":", "\n", "                    ", "test_hint_tokens", "=", "[", "\n", "t", "for", "t", "in", "test_hint_tokens", "if", "t", "in", "COLORS", "\n", "]", "\n", "", "elif", "self", ".", "language_filter", "==", "'nocolor'", ":", "\n", "                    ", "test_hint_tokens", "=", "[", "\n", "t", "for", "t", "in", "test_hint_tokens", "if", "t", "not", "in", "COLORS", "\n", "]", "\n", "", "if", "self", ".", "shuffle_words", ":", "\n", "                    ", "random", ".", "shuffle", "(", "test_hint_tokens", ")", "\n", "\n", "", "test_hint", "=", "[", "SOS_TOKEN", ",", "*", "test_hint_tokens", ",", "EOS_TOKEN", "]", "\n", "test_hint_length", "=", "len", "(", "test_hint", ")", "\n", "\n", "test_hint", ".", "extend", "(", "[", "PAD_TOKEN", "]", "*", "(", "max_length", "+", "2", "-", "test_hint_length", ")", ")", "\n", "\n", "test_hint", "=", "[", "\n", "self", ".", "w2i", ".", "get", "(", "w", ",", "self", ".", "w2i", "[", "UNK_TOKEN", "]", ")", "for", "w", "in", "test_hint", "\n", "]", "\n", "\n", "test_hints", ".", "append", "(", "test_hint", ")", "\n", "test_hint_lengths", ".", "append", "(", "test_hint_length", ")", "\n", "\n", "", "test_hints", "=", "np", ".", "array", "(", "test_hints", ")", "\n", "test_hint_lengths", "=", "np", ".", "array", "(", "test_hint_lengths", ")", "\n", "\n", "", "data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_data", ")", ":", "\n", "            ", "if", "self", ".", "shuffle_captions", ":", "\n", "                ", "hint_i", "=", "random", ".", "randint", "(", "len", "(", "hints", ")", ")", "\n", "test_hint_i", "=", "random", ".", "randint", "(", "len", "(", "test_hints", ")", ")", "\n", "", "else", ":", "\n", "                ", "hint_i", "=", "i", "\n", "test_hint_i", "=", "i", "\n", "", "if", "self", ".", "test_hints", "is", "not", "None", ":", "\n", "                ", "th", "=", "test_hints", "[", "test_hint_i", "]", "\n", "thl", "=", "test_hint_lengths", "[", "test_hint_i", "]", "\n", "", "else", ":", "\n", "                ", "th", "=", "hints", "[", "test_hint_i", "]", "\n", "thl", "=", "hint_lengths", "[", "test_hint_i", "]", "\n", "", "data_i", "=", "(", "ex_features", "[", "i", "]", ",", "in_features", "[", "i", "]", ",", "labels", "[", "i", "]", ",", "hints", "[", "hint_i", "]", ",", "\n", "hint_lengths", "[", "hint_i", "]", ",", "th", ",", "thl", ")", "\n", "data", ".", "append", "(", "data_i", ")", "\n", "\n", "", "self", ".", "data", "=", "data", "\n", "self", ".", "max_length", "=", "max_length", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.datasets.ShapeWorld.create_vocab": [[294, 322], ["dict", "dict", "utils.OrderedCounter", "list", "dict", "logging.info", "len", "hint.split", "utils.OrderedCounter.update", "utils.OrderedCounter.items", "len", "len", "len", "hint.split", "utils.OrderedCounter.update", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.AverageMeter.update"], ["", "def", "create_vocab", "(", "self", ",", "hints", ",", "test_hints", ")", ":", "\n", "        ", "w2i", "=", "dict", "(", ")", "\n", "i2w", "=", "dict", "(", ")", "\n", "w2c", "=", "OrderedCounter", "(", ")", "\n", "\n", "special_tokens", "=", "[", "PAD_TOKEN", ",", "SOS_TOKEN", ",", "EOS_TOKEN", ",", "UNK_TOKEN", "]", "\n", "for", "st", "in", "special_tokens", ":", "\n", "            ", "i2w", "[", "len", "(", "w2i", ")", "]", "=", "st", "\n", "w2i", "[", "st", "]", "=", "len", "(", "w2i", ")", "\n", "\n", "", "for", "hint", "in", "hints", ":", "\n", "            ", "hint_tokens", "=", "hint", ".", "split", "(", ")", "\n", "w2c", ".", "update", "(", "hint_tokens", ")", "\n", "\n", "", "if", "test_hints", "is", "not", "None", ":", "\n", "            ", "for", "hint", "in", "test_hints", ":", "\n", "                ", "hint_tokens", "=", "hint", ".", "split", "(", ")", "\n", "w2c", ".", "update", "(", "hint_tokens", ")", "\n", "\n", "", "", "for", "w", ",", "c", "in", "list", "(", "w2c", ".", "items", "(", ")", ")", ":", "\n", "            ", "i2w", "[", "len", "(", "w2i", ")", "]", "=", "w", "\n", "w2i", "[", "w", "]", "=", "len", "(", "w2i", ")", "\n", "\n", "", "assert", "len", "(", "w2i", ")", "==", "len", "(", "i2w", ")", "\n", "vocab", "=", "dict", "(", "w2i", "=", "w2i", ",", "i2w", "=", "i2w", ")", "\n", "self", ".", "vocab", "=", "vocab", "\n", "\n", "logging", ".", "info", "(", "'Created vocab with %d words.'", "%", "len", "(", "w2c", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.datasets.ShapeWorld.__len__": [[323, 325], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.datasets.ShapeWorld.sample_train": [[326, 369], ["len", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "random.randint", "datasets.ShapeWorld.__getitem__", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.from_numpy().long.append", "torch.from_numpy().long.append", "torch.stack.append", "torch.stack.append", "torch.from_numpy().long.append", "torch.from_numpy().long.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.stack.append", "torch.stack.append", "torch.from_numpy().long.append", "torch.from_numpy().long.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.SubDataset.__getitem__"], ["", "def", "sample_train", "(", "self", ",", "n_batch", ")", ":", "\n", "        ", "assert", "self", ".", "split", "==", "'train'", "\n", "n_train", "=", "len", "(", "self", ".", "data", ")", "\n", "batch_examples", "=", "[", "]", "\n", "batch_image", "=", "[", "]", "\n", "batch_label", "=", "[", "]", "\n", "batch_hint", "=", "[", "]", "\n", "batch_hint_length", "=", "[", "]", "\n", "if", "self", ".", "test_hints", "is", "not", "None", ":", "\n", "            ", "batch_test_hint", "=", "[", "]", "\n", "batch_test_hint_length", "=", "[", "]", "\n", "\n", "", "for", "_", "in", "range", "(", "n_batch", ")", ":", "\n", "            ", "index", "=", "random", ".", "randint", "(", "n_train", ")", "\n", "examples", ",", "image", ",", "label", ",", "hint", ",", "hint_length", ",", "test_hint", ",", "test_hint_length", "=", "self", ".", "__getitem__", "(", "index", ")", "\n", "\n", "batch_examples", ".", "append", "(", "examples", ")", "\n", "batch_image", ".", "append", "(", "image", ")", "\n", "batch_label", ".", "append", "(", "label", ")", "\n", "batch_hint", ".", "append", "(", "hint", ")", "\n", "batch_hint_length", ".", "append", "(", "hint_length", ")", "\n", "if", "self", ".", "test_hints", "is", "not", "None", ":", "\n", "                ", "batch_test_hint", ".", "append", "(", "test_hint", ")", "\n", "batch_test_hint_length", ".", "append", "(", "test_hint_length", ")", "\n", "\n", "", "", "batch_examples", "=", "torch", ".", "stack", "(", "batch_examples", ")", "\n", "batch_image", "=", "torch", ".", "stack", "(", "batch_image", ")", "\n", "batch_label", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "batch_label", ")", ")", ".", "long", "(", ")", "\n", "batch_hint", "=", "torch", ".", "stack", "(", "batch_hint", ")", "\n", "batch_hint_length", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "batch_hint_length", ")", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "test_hints", "is", "not", "None", ":", "\n", "            ", "batch_test_hint", "=", "torch", ".", "stack", "(", "batch_test_hint", ")", "\n", "batch_test_hint_length", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "batch_test_hint_length", ")", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "batch_test_hint", "=", "None", "\n", "batch_test_hint_length", "=", "None", "\n", "\n", "", "return", "(", "\n", "batch_examples", ",", "batch_image", ",", "batch_label", ",", "batch_hint", ",", "\n", "batch_hint_length", ",", "batch_test_hint", ",", "batch_test_hint_length", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.datasets.ShapeWorld.__getitem__": [[371, 458], ["torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "random.randint", "len", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "random.randint", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "random.randint", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "datasets.ShapeWorld.preprocess", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "datasets.ShapeWorld.preprocess", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "datasets.ShapeWorld.preprocess", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "random.randint", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "datasets.ShapeWorld.preprocess", "datasets.ShapeWorld.preprocess", "datasets.ShapeWorld.preprocess", "random.randint"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'train'", "and", "self", ".", "augment", ":", "\n", "            ", "examples", ",", "image", ",", "label", ",", "hint", ",", "hint_length", ",", "test_hint", ",", "test_hint_length", "=", "self", ".", "data", "[", "\n", "index", "]", "\n", "\n", "# tie a language to a concept; convert to pytorch.", "\n", "hint", "=", "torch", ".", "from_numpy", "(", "hint", ")", ".", "long", "(", ")", "\n", "test_hint", "=", "torch", ".", "from_numpy", "(", "test_hint", ")", ".", "long", "(", ")", "\n", "\n", "# in training, pick whether to show positive or negative example.", "\n", "sample_label", "=", "random", ".", "randint", "(", "2", ")", "\n", "n_train", "=", "len", "(", "self", ".", "data", ")", "\n", "\n", "if", "sample_label", "==", "0", ":", "\n", "# if we are training, we need to negatively sample data and", "\n", "# return a tuple (example_z, hint_z, 1) or...", "\n", "# return a tuple (example_z, hint_other_z, 0).", "\n", "# Sample a new test hint as well.", "\n", "                ", "examples2", ",", "image2", ",", "_", ",", "support_hint2", ",", "support_hint_length2", ",", "query_hint2", ",", "query_hint_length2", "=", "self", ".", "data", "[", "\n", "random", ".", "randint", "(", "n_train", ")", "]", "\n", "\n", "# pick either an example or an image.", "\n", "swap", "=", "random", ".", "randint", "(", "N_EX", "+", "1", ")", "\n", "if", "swap", "==", "N_EX", ":", "\n", "                    ", "feats", "=", "image2", "\n", "# Use the QUERY hint of the new example", "\n", "test_hint", "=", "query_hint2", "\n", "test_hint_length", "=", "query_hint_length2", "\n", "", "else", ":", "\n", "                    ", "feats", "=", "examples2", "[", "swap", ",", "...", "]", "\n", "# Use the SUPPORT hint of the new example", "\n", "test_hint", "=", "support_hint2", "\n", "test_hint_length", "=", "support_hint_length2", "\n", "\n", "", "test_hint", "=", "torch", ".", "from_numpy", "(", "test_hint", ")", ".", "long", "(", ")", "\n", "\n", "feats", "=", "torch", ".", "from_numpy", "(", "feats", ")", ".", "float", "(", ")", "\n", "examples", "=", "torch", ".", "from_numpy", "(", "examples", ")", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "preprocess", "is", "not", "None", ":", "\n", "                    ", "feats", "=", "self", ".", "preprocess", "(", "feats", ")", "\n", "examples", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "preprocess", "(", "e", ")", "for", "e", "in", "examples", "]", ")", "\n", "", "return", "examples", ",", "feats", ",", "0", ",", "hint", ",", "hint_length", ",", "test_hint", ",", "test_hint_length", "\n", "", "else", ":", "# sample_label == 1", "\n", "                ", "swap", "=", "random", ".", "randint", "(", "(", "N_EX", "+", "1", "if", "label", "==", "1", "else", "N_EX", ")", ")", "\n", "# pick either an example or an image.", "\n", "if", "swap", "==", "N_EX", ":", "\n", "                    ", "feats", "=", "image", "\n", "", "else", ":", "\n", "                    ", "feats", "=", "examples", "[", "swap", ",", "...", "]", "\n", "if", "label", "==", "1", ":", "\n", "                        ", "examples", "[", "swap", ",", "...", "]", "=", "image", "\n", "", "else", ":", "\n", "                        ", "examples", "[", "swap", ",", "...", "]", "=", "examples", "[", "random", ".", "randint", "(", "N_EX", "\n", ")", ",", "...", "]", "\n", "\n", "# This is a positive example, so whatever example we've chosen,", "\n", "# assume the query hint matches the support hint.", "\n", "", "", "test_hint", "=", "hint", "\n", "test_hint_length", "=", "hint_length", "\n", "\n", "feats", "=", "torch", ".", "from_numpy", "(", "feats", ")", ".", "float", "(", ")", "\n", "examples", "=", "torch", ".", "from_numpy", "(", "examples", ")", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "preprocess", "is", "not", "None", ":", "\n", "                    ", "feats", "=", "self", ".", "preprocess", "(", "feats", ")", "\n", "examples", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "preprocess", "(", "e", ")", "for", "e", "in", "examples", "]", ")", "\n", "", "return", "examples", ",", "feats", ",", "1", ",", "hint", ",", "hint_length", ",", "test_hint", ",", "test_hint_length", "\n", "\n", "", "", "else", ":", "# val, val_same, test, test_same", "\n", "            ", "examples", ",", "image", ",", "label", ",", "hint", ",", "hint_length", ",", "test_hint", ",", "test_hint_length", "=", "self", ".", "data", "[", "\n", "index", "]", "\n", "\n", "# no fancy stuff. just return image.", "\n", "image", "=", "torch", ".", "from_numpy", "(", "image", ")", ".", "float", "(", ")", "\n", "\n", "# NOTE: we provide the oracle text.", "\n", "hint", "=", "torch", ".", "from_numpy", "(", "hint", ")", ".", "long", "(", ")", "\n", "test_hint", "=", "torch", ".", "from_numpy", "(", "test_hint", ")", ".", "long", "(", ")", "\n", "examples", "=", "torch", ".", "from_numpy", "(", "examples", ")", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "preprocess", "is", "not", "None", ":", "\n", "                ", "image", "=", "self", ".", "preprocess", "(", "image", ")", "\n", "examples", "=", "torch", ".", "stack", "(", "[", "self", ".", "preprocess", "(", "e", ")", "for", "e", "in", "examples", "]", ")", "\n", "", "return", "examples", ",", "image", ",", "label", ",", "hint", ",", "hint_length", ",", "test_hint", ",", "test_hint_length", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.datasets.ShapeWorld.to_text": [[459, 472], ["texts.append", "tok.item", "datasets.ShapeWorld.vocab[].get", "text.append"], "methods", ["None"], ["", "", "def", "to_text", "(", "self", ",", "hints", ")", ":", "\n", "        ", "texts", "=", "[", "]", "\n", "for", "hint", "in", "hints", ":", "\n", "            ", "text", "=", "[", "]", "\n", "for", "tok", "in", "hint", ":", "\n", "                ", "i", "=", "tok", ".", "item", "(", ")", "\n", "w", "=", "self", ".", "vocab", "[", "'i2w'", "]", ".", "get", "(", "i", ",", "UNK_TOKEN", ")", "\n", "if", "w", "==", "PAD_TOKEN", ":", "\n", "                    ", "break", "\n", "", "text", ".", "append", "(", "w", ")", "\n", "", "texts", ".", "append", "(", "text", ")", "\n", "\n", "", "return", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.datasets.get_max_hint_length": [[38, 57], ["RuntimeError", "os.path.join", "os.path.exists", "max", "open", "json.load", "len", "hint.split"], "function", ["None"], ["def", "get_max_hint_length", "(", "data_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Get the maximum number of words in a sentence across all splits\n    \"\"\"", "\n", "if", "data_dir", "is", "None", ":", "\n", "        ", "data_dir", "=", "DATA_DIR", "\n", "", "max_len", "=", "0", "\n", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", ",", "'val_same'", ",", "'test_same'", "]", ":", "\n", "        ", "for", "tf", "in", "[", "'hints.json'", ",", "'test_hints.json'", "]", ":", "\n", "            ", "hints_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'shapeworld'", ",", "split", ",", "tf", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "hints_file", ")", ":", "\n", "                ", "with", "open", "(", "hints_file", ")", "as", "fp", ":", "\n", "                    ", "hints", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "split_max_len", "=", "max", "(", "[", "len", "(", "hint", ".", "split", "(", ")", ")", "for", "hint", "in", "hints", "]", ")", "\n", "if", "split_max_len", ">", "max_len", ":", "\n", "                    ", "max_len", "=", "split_max_len", "\n", "", "", "", "", "if", "max_len", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Can't find any splits in {}\"", ".", "format", "(", "data_dir", ")", ")", "\n", "", "return", "max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.datasets.get_black_mask": [[59, 72], ["imgs.sum", "is_black.unsqueeze().expand_as.unsqueeze().expand_as", "len", "is_black.unsqueeze().expand_as.unsqueeze"], "function", ["None"], ["", "def", "get_black_mask", "(", "imgs", ")", ":", "\n", "    ", "if", "len", "(", "imgs", ".", "shape", ")", "==", "4", ":", "\n", "# Then color is 1st dim", "\n", "        ", "col_dim", "=", "1", "\n", "", "else", ":", "\n", "        ", "col_dim", "=", "0", "\n", "", "total", "=", "imgs", ".", "sum", "(", "dim", "=", "col_dim", ")", "\n", "\n", "# Put dim back in", "\n", "is_black", "=", "total", "==", "0.0", "\n", "is_black", "=", "is_black", ".", "unsqueeze", "(", "col_dim", ")", ".", "expand_as", "(", "imgs", ")", "\n", "\n", "return", "is_black", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.lsl.datasets.extract_features": [[474, 510], ["feats.append", "all_feats.append", "RuntimeError", "hint.index", "fst.index", "snd.index", "feats.append", "feats.append", "snd.index"], "function", ["None"], ["", "", "def", "extract_features", "(", "hints", ")", ":", "\n", "    ", "\"\"\"\n    Extract features from hints\n    \"\"\"", "\n", "all_feats", "=", "[", "]", "\n", "for", "hint", "in", "hints", ":", "\n", "        ", "feats", "=", "[", "]", "\n", "for", "maybe_rel", "in", "[", "'above'", ",", "'below'", ",", "'left'", ",", "'right'", "]", ":", "\n", "            ", "if", "maybe_rel", "in", "hint", ":", "\n", "                ", "rel", "=", "maybe_rel", "\n", "rel_idx", "=", "hint", ".", "index", "(", "rel", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Didn't find relation: {}\"", ".", "format", "(", "hint", ")", ")", "\n", "# Add relation", "\n", "", "feats", ".", "append", "(", "'rel:{}'", ".", "format", "(", "rel", ")", ")", "\n", "fst", ",", "snd", "=", "hint", "[", ":", "rel_idx", "]", ",", "hint", "[", "rel_idx", ":", "]", "\n", "# fst: [<sos>, a, ..., is]", "\n", "fst_shape", "=", "fst", "[", "2", ":", "fst", ".", "index", "(", "'is'", ")", "]", "\n", "# snd: [..., a, ..., ., <eos>]", "\n", "try", ":", "\n", "            ", "snd_shape", "=", "snd", "[", "snd", ".", "index", "(", "'a'", ")", "+", "1", ":", "-", "2", "]", "\n", "", "except", "ValueError", ":", "\n", "# Use \"an\"", "\n", "            ", "snd_shape", "=", "snd", "[", "snd", ".", "index", "(", "'an'", ")", "+", "1", ":", "-", "2", "]", "\n", "\n", "", "for", "name", ",", "fragment", "in", "[", "(", "'fst'", ",", "fst_shape", ")", ",", "(", "'snd'", ",", "snd_shape", ")", "]", ":", "\n", "            ", "for", "feat", "in", "fragment", ":", "\n", "                ", "if", "feat", "!=", "'shape'", ":", "\n", "                    ", "if", "feat", "in", "COLORS", ":", "\n", "                        ", "feats", ".", "append", "(", "'{}:color:{}'", ".", "format", "(", "name", ",", "feat", ")", ")", "\n", "", "else", ":", "\n", "                        ", "assert", "feat", "in", "SHAPES", ",", "hint", "\n", "feats", ".", "append", "(", "'{}:shape:{}'", ".", "format", "(", "name", ",", "feat", ")", ")", "\n", "", "", "", "", "all_feats", ".", "append", "(", "feats", ")", "\n", "", "return", "all_feats", "\n", "", ""]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.train.get_optimizer": [[22, 58], ["model.named_parameters", "name.startswith", "print", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "rnn_params[].append", "main_params[].append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "NotImplementedError"], "function", ["None"], ["from", "models", "import", "ImageRep", ",", "TextRep", ",", "TextProposal", ",", "ExWrapper", "\n", "from", "models", "import", "MultimodalRep", "\n", "from", "models", "import", "DotPScorer", ",", "BilinearScorer", "\n", "from", "vision", "import", "Conv4NP", ",", "ResNet18", "\n", "from", "tre", "import", "AddComp", ",", "MulComp", ",", "CosDist", ",", "L1Dist", ",", "L2Dist", ",", "tre", "\n", "\n", "TRE_COMP_FNS", "=", "{", "\n", "'add'", ":", "AddComp", ",", "\n", "'mul'", ":", "MulComp", ",", "\n", "}", "\n", "\n", "TRE_ERR_FNS", "=", "{", "\n", "'cos'", ":", "CosDist", ",", "\n", "'l1'", ":", "L1Dist", ",", "\n", "'l2'", ":", "L2Dist", ",", "\n", "}", "\n", "\n", "\n", "def", "combine_feats", "(", "all_feats", ")", ":", "\n", "    ", "\"\"\"\n    Combine feats like language, mask them, and get vocab\n    \"\"\"", "\n", "vocab", "=", "{", "}", "\n", "max_feat_len", "=", "max", "(", "len", "(", "f", ")", "for", "f", "in", "all_feats", ")", "\n", "feats_t", "=", "torch", ".", "zeros", "(", "len", "(", "all_feats", ")", ",", "max_feat_len", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "feats_mask", "=", "torch", ".", "zeros", "(", "len", "(", "all_feats", ")", ",", "max_feat_len", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "for", "feat_i", ",", "feat", "in", "enumerate", "(", "all_feats", ")", ":", "\n", "        ", "for", "j", ",", "f", "in", "enumerate", "(", "feat", ")", ":", "\n", "            ", "if", "f", "not", "in", "vocab", ":", "\n", "                ", "vocab", "[", "f", "]", "=", "len", "(", "vocab", ")", "\n", "", "i_f", "=", "vocab", "[", "f", "]", "\n", "feats_t", "[", "feat_i", ",", "j", "]", "=", "i_f", "\n", "feats_mask", "[", "feat_i", ",", "j", "]", "=", "1", "\n", "", "", "return", "feats_t", ",", "feats_mask", ",", "vocab", "\n", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.train.train": [[60, 153], ["train.get_optimizer", "collections.defaultdict", "tqdm.tqdm", "range", "model.train", "model.train_loop", "model.train_loop.items", "model.eval", "os.makedirs", "model.test_loop", "val_accs.append", "val_losses.append", "tqdm.tqdm.write", "os.path.join", "torch.save", "torch.save", "torch.save", "all_metrics[].append", "tqdm.tqdm.write", "os.path.join", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "open", "json.dump", "metrics_fname.startswith", "metrics_fname.endswith", "int", "os.path.join", "open", "json.dump", "model.state_dict", "model.state_dict", "model.state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jayelm_lsl.fewshot.train.get_optimizer", "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.train.train", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.train_loop", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.test_loop"], ["parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'exp_dir'", ",", "type", "=", "str", ",", "help", "=", "'Output directory'", ")", "\n", "hyp_prediction", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "hyp_prediction", ".", "add_argument", "(", "\n", "'--predict_concept_hyp'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Predict concept hypotheses during training'", ")", "\n", "hyp_prediction", ".", "add_argument", "(", "\n", "'--predict_image_hyp'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Predict image hypotheses during training'", ")", "\n", "hyp_prediction", ".", "add_argument", "(", "'--infer_hyp'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use hypotheses for prediction'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "\n", "choices", "=", "[", "'vgg16_fixed'", ",", "'conv4'", ",", "'resnet18'", "]", ",", "\n", "default", "=", "'vgg16_fixed'", ",", "\n", "help", "=", "'Image model'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--multimodal_concept'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Concept is a combination of hypothesis + image rep'", ")", "\n", "parser", ".", "add_argument", "(", "'--comparison'", ",", "\n", "choices", "=", "[", "'dotp'", ",", "'bilinear'", "]", ",", "\n", "default", "=", "'dotp'", ",", "\n", "help", "=", "'How to compare support to query reps'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "\n", "default", "=", "0.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'Apply dropout to comparison layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug_bilinear'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If using bilinear term, use identity matrix'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--poe'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Product of experts: support lang -> query img '", "\n", "'x support img -> query img'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--predict_hyp_task'", ",", "\n", "default", "=", "'generate'", ",", "\n", "choices", "=", "[", "'generate'", ",", "'embed'", "]", ",", "\n", "help", "=", "'hyp prediction task'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_infer'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "'Number of hypotheses to infer'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--oracle'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use oracle hypotheses for prediction (requires --infer_hyp)'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_train'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Max number of training examples'", ")", "\n", "parser", ".", "add_argument", "(", "'--noise'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "'Amount of noise to add to each example'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--class_noise_weight'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "'How much of that noise should be class diagnostic?'", ")", "\n", "parser", ".", "add_argument", "(", "'--noise_at_test'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Add instance-level noise at test time'", ")", "\n", "parser", ".", "add_argument", "(", "'--noise_type'", ",", "\n", "default", "=", "'gaussian'", ",", "\n", "choices", "=", "[", "'gaussian'", ",", "'uniform'", "]", ",", "\n", "help", "=", "'Type of noise'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fixed_noise_colors'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Fix noise based on class, with a max of this many'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fixed_noise_colors_max_rgb'", ",", "\n", "default", "=", "0.2", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'Maximum color value a single color channel '", "\n", "'can have for noise background'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'Train batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'Train epochs'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_dir'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Specify custom data directory (must have shapeworld folder)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "\n", "type", "=", "float", ",", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Identity.__init__": [[18, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Identity.forward": [[21, 23], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Flatten.__init__": [[37, 39], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Flatten.forward": [[40, 42], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Linear_fw.__init__": [[45, 49], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "Linear_fw", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "# Lazy hack to add fast weight link", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Linear_fw.forward": [[50, 56], ["torch.linear", "torch.linear", "torch.linear", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "super", "(", "Linear_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Conv2d_fw.__init__": [[59, 73], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Conv2d_fw.forward": [[74, 95], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward", "torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.forward", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "self", ".", "weight", ".", "fast", ",", "None", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", "\n", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "\n", "self", ".", "weight", ".", "fast", ",", "\n", "self", ".", "bias", ".", "fast", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.BatchNorm2d_fw.__init__": [[98, 102], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "super", "(", "BatchNorm2d_fw", ",", "self", ")", ".", "__init__", "(", "num_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.BatchNorm2d_fw.forward": [[103, 128], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.data.size", "x.data.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "running_mean", "=", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "running_var", "=", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "\n", "x", ",", "\n", "running_mean", ",", "\n", "running_var", ",", "\n", "self", ".", "weight", ".", "fast", ",", "\n", "self", ".", "bias", ".", "fast", ",", "\n", "training", "=", "True", ",", "\n", "momentum", "=", "1", ",", "\n", ")", "\n", "# batch_norm momentum hack: follow hack of Kate Rakelly in pytorch-maml/src/layers.py", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "\n", "x", ",", "\n", "running_mean", ",", "\n", "running_var", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "bias", ",", "\n", "training", "=", "True", ",", "\n", "momentum", "=", "1", ",", "\n", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ConvBlock.__init__": [[134, 155], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "backbone.ConvBlock.parametrized_layers.append", "backbone.init_layer"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__", "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "pool", "=", "True", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C", ",", "self", ".", "BN", ",", "self", ".", "relu", "]", "\n", "if", "pool", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "pool", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "parametrized_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ConvBlock.forward": [[156, 159], ["backbone.ConvBlock.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.SimpleBlock.__init__": [[165, 221], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "backbone.SimpleBlock.parametrized_layers.append", "backbone.SimpleBlock.parametrized_layers.append", "backbone.init_layer", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__", "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "\n", "indim", ",", "\n", "outdim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", "if", "half_res", "else", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "\n", "indim", ",", "\n", "outdim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", "if", "half_res", "else", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "C2", ",", "self", ".", "BN1", ",", "self", ".", "BN2", "]", "\n", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "\n", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "BNshortcut", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "\n", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "BNshortcut", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "BNshortcut", ")", "\n", "self", ".", "shortcut_type", "=", "\"1x1\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "\"identity\"", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.SimpleBlock.forward": [[222, 234], ["backbone.SimpleBlock.C1", "backbone.SimpleBlock.BN1", "backbone.SimpleBlock.relu1", "backbone.SimpleBlock.C2", "backbone.SimpleBlock.BN2", "backbone.SimpleBlock.relu2", "backbone.SimpleBlock.BNshortcut", "backbone.SimpleBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "short_out", "=", "(", "\n", "x", "if", "self", ".", "shortcut_type", "==", "\"identity\"", "else", "self", ".", "BNshortcut", "(", "self", ".", "shortcut", "(", "x", ")", ")", "\n", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.BottleneckBlock.__init__": [[240, 301], ["torch.Module.__init__", "int", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "backbone.BottleneckBlock.parametrized_layers.append", "backbone.init_layer", "backbone.Conv2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__", "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bottleneckdim", "=", "int", "(", "outdim", "/", "4", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "\n", "bottleneckdim", ",", "\n", "bottleneckdim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", "if", "half_res", "else", "1", ",", "\n", "padding", "=", "1", ",", "\n", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "Conv2d_fw", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "\n", "bottleneckdim", ",", "\n", "bottleneckdim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", "if", "half_res", "else", "1", ",", "\n", "padding", "=", "1", ",", "\n", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "parametrized_layers", "=", "[", "\n", "self", ".", "C1", ",", "\n", "self", ".", "BN1", ",", "\n", "self", ".", "C2", ",", "\n", "self", ".", "BN2", ",", "\n", "self", ".", "C3", ",", "\n", "self", ".", "BN3", ",", "\n", "]", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "\n", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "\n", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "shortcut_type", "=", "\"1x1\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "\"identity\"", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.BottleneckBlock.forward": [[302, 317], ["backbone.BottleneckBlock.C1", "backbone.BottleneckBlock.BN1", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.C2", "backbone.BottleneckBlock.BN2", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.C3", "backbone.BottleneckBlock.BN3", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "\"identity\"", "else", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C3", "(", "out", ")", "\n", "out", "=", "self", ".", "BN3", "(", "out", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ConvNet.__init__": [[320, 335], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "3", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "<", "4", ")", ")", "# only pooling for fist 4 layers", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "self", ".", "flatten", "=", "flatten", "\n", "if", "self", ".", "flatten", ":", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "1600", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ConvNet.forward": [[336, 339], ["backbone.ConvNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ConvNet.forward_seq": [[340, 350], ["layer", "hiddens.append"], "methods", ["None"], ["", "def", "forward_seq", "(", "self", ",", "x", ")", ":", "\n", "        ", "hiddens", "=", "[", "]", "\n", "if", "self", ".", "flatten", ":", "\n", "            ", "seq", "=", "self", ".", "trunk", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "seq", "=", "self", ".", "trunk", "[", ":", "-", "1", "]", "\n", "", "for", "layer", "in", "seq", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "hiddens", ".", "append", "(", "x", ")", "\n", "", "return", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ConvNetNopool.__init__": [[355, 368], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ")", ":", "\n", "        ", "super", "(", "ConvNetNopool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "3", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "\n", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "in", "[", "0", ",", "1", "]", ")", ",", "padding", "=", "0", "if", "i", "in", "[", "0", ",", "1", "]", "else", "1", "\n", ")", "# only first two layer has pooling and no padding", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "[", "64", ",", "19", ",", "19", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ConvNetNopool.forward": [[369, 372], ["backbone.ConvNetNopool.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ConvNetS.__init__": [[375, 389], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvNetS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "1", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "<", "4", ")", ")", "# only pooling for fist 4 layers", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "64", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ConvNetS.forward": [[390, 394], ["backbone.ConvNetS.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "# only use the first dimension", "\n", "out", "=", "self", ".", "trunk", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ConvNetSNopool.__init__": [[397, 410], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ")", ":", "\n", "        ", "super", "(", "ConvNetSNopool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "1", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "\n", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "in", "[", "0", ",", "1", "]", ")", ",", "padding", "=", "0", "if", "i", "in", "[", "0", ",", "1", "]", "else", "1", "\n", ")", "# only first two layer has pooling and no padding", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "[", "64", ",", "5", ",", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ConvNetSNopool.forward": [[411, 415], ["backbone.ConvNetSNopool.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "# only use the first dimension", "\n", "out", "=", "self", ".", "trunk", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ResNet.__init__": [[420, 458], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "backbone.init_layer", "backbone.init_layer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "trunk.append", "trunk.append", "block", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__", "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.init_layer", "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "list_of_num_layers", ",", "list_of_out_dims", ",", "flatten", "=", "True", ")", ":", "\n", "# list_of_num_layers specifies number of layers in each stage", "\n", "# list_of_out_dims specifies number of output channel for each stage", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "list_of_num_layers", ")", "==", "4", ",", "\"Can have only four stages\"", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "conv1", "=", "Conv2d_fw", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "bn1", "=", "BatchNorm2d_fw", "(", "64", ")", "\n", "", "else", ":", "\n", "            ", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "init_layer", "(", "conv1", ")", "\n", "init_layer", "(", "bn1", ")", "\n", "\n", "trunk", "=", "[", "conv1", ",", "bn1", ",", "relu", ",", "pool1", "]", "\n", "\n", "indim", "=", "64", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "\n", "            ", "for", "j", "in", "range", "(", "list_of_num_layers", "[", "i", "]", ")", ":", "\n", "                ", "half_res", "=", "(", "i", ">=", "1", ")", "and", "(", "j", "==", "0", ")", "\n", "B", "=", "block", "(", "indim", ",", "list_of_out_dims", "[", "i", "]", ",", "half_res", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "indim", "=", "list_of_out_dims", "[", "i", "]", "\n", "\n", "", "", "if", "flatten", ":", "\n", "            ", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "trunk", ".", "append", "(", "avgpool", ")", "\n", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "self", ".", "final_feat_dim", "=", "indim", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "[", "indim", ",", "7", ",", "7", "]", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ResNet.forward": [[459, 462], ["backbone.ResNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.init_layer": [[26, 34], ["isinstance", "L.weight.data.normal_", "isinstance", "math.sqrt", "L.weight.data.fill_", "L.bias.data.fill_", "float"], "function", ["None"], ["", "", "def", "init_layer", "(", "L", ")", ":", "\n", "# Initialization using fan-in", "\n", "    ", "if", "isinstance", "(", "L", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "L", ".", "kernel_size", "[", "0", "]", "*", "L", ".", "kernel_size", "[", "1", "]", "*", "L", ".", "out_channels", "\n", "L", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "n", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "L", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "L", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "L", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Conv4": [[464, 466], ["backbone.ConvNet"], "function", ["None"], ["", "", "def", "Conv4", "(", ")", ":", "\n", "    ", "return", "ConvNet", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Conv6": [[468, 470], ["backbone.ConvNet"], "function", ["None"], ["", "def", "Conv6", "(", ")", ":", "\n", "    ", "return", "ConvNet", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Conv4NP": [[472, 474], ["backbone.ConvNetNopool"], "function", ["None"], ["", "def", "Conv4NP", "(", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Conv6NP": [[476, 478], ["backbone.ConvNetNopool"], "function", ["None"], ["", "def", "Conv6NP", "(", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Conv4S": [[480, 482], ["backbone.ConvNetS"], "function", ["None"], ["", "def", "Conv4S", "(", ")", ":", "\n", "    ", "return", "ConvNetS", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.Conv4SNP": [[484, 486], ["backbone.ConvNetSNopool"], "function", ["None"], ["", "def", "Conv4SNP", "(", ")", ":", "\n", "    ", "return", "ConvNetSNopool", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ResNet10": [[488, 490], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet10", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ResNet18": [[492, 494], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet18", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.PretrainedResNet18": [[496, 501], ["torchvision.resnet18", "backbone.Identity"], "function", ["None"], ["", "def", "PretrainedResNet18", "(", ")", ":", "\n", "    ", "rn18", "=", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "rn18", ".", "final_feat_dim", "=", "512", "\n", "rn18", ".", "fc", "=", "Identity", "(", ")", "# We don't use final fc", "\n", "return", "rn18", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ResNet34": [[503, 505], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ResNet50": [[507, 509], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.backbone.ResNet101": [[511, 513], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "flatten", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.io_utils.parse_args": [[29, 228], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.error", "argparse.ArgumentParser.error", "list", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "ValueError", "range"], "function", ["home.repos.pwc.inspect_result.jayelm_lsl.fewshot.io_utils.parse_args"], ["def", "parse_args", "(", "script", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"few-shot script %s\"", "%", "(", "script", ")", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint_dir\"", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"Specify checkpoint dir (if none, automatically generate)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "default", "=", "\"Conv4\"", ",", "help", "=", "\"Choice of backbone\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lsl\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--l3\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use l3 (do not need to --lsl)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--l3_n_infer\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"Number to sample\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--rnn_type\"", ",", "choices", "=", "[", "\"gru\"", ",", "\"lstm\"", "]", ",", "default", "=", "\"gru\"", ",", "help", "=", "\"Language RNN type\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--rnn_num_layers\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"Language RNN num layers\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--rnn_dropout\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "help", "=", "\"Language RNN dropout\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lang_supervision\"", ",", "\n", "default", "=", "\"class\"", ",", "\n", "choices", "=", "[", "\"instance\"", ",", "\"class\"", "]", ",", "\n", "help", "=", "\"At what level to supervise with language?\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--glove_init\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--freeze_emb\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Freeze LM word embedding layer\"", "\n", ")", "\n", "\n", "langparser", "=", "parser", ".", "add_argument_group", "(", "\"language settings\"", ")", "\n", "langparser", ".", "add_argument", "(", "\n", "\"--shuffle_lang\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Shuffle words in caption\"", "\n", ")", "\n", "langparser", ".", "add_argument", "(", "\n", "\"--scramble_lang\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Scramble captions -> images mapping in a class\"", ",", "\n", ")", "\n", "langparser", ".", "add_argument", "(", "\n", "\"--sample_class_lang\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Sample language randomly from class, rather than getting lang assoc. w/ img\"", ",", "\n", ")", "\n", "langparser", ".", "add_argument", "(", "\n", "\"--scramble_all\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Scramble captions -> images mapping across all classes\"", ",", "\n", ")", "\n", "langparser", ".", "add_argument", "(", "\n", "\"--scramble_lang_class\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Scramble captions -> images mapping across all classes, but keep classes consistent\"", ",", "\n", ")", "\n", "langparser", ".", "add_argument", "(", "\n", "\"--language_filter\"", ",", "\n", "default", "=", "\"all\"", ",", "\n", "choices", "=", "[", "\"all\"", ",", "\"color\"", ",", "\"nocolor\"", "]", ",", "\n", "help", "=", "\"What language to use\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lang_hidden_size\"", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "\"Language decoder hidden size\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lang_emb_size\"", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "\"Language embedding hidden size\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lang_lambda\"", ",", "type", "=", "float", ",", "default", "=", "5", ",", "help", "=", "\"Weight on language loss\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_caption\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "choices", "=", "list", "(", "range", "(", "1", ",", "11", ")", ")", ",", "\n", "help", "=", "\"How many captions to use for pretraining\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_class\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"Max number of training classes\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_img_per_class\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Max number of images per training class\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_lang_per_class\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Max number of language per training class (recycled among images)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train_n_way\"", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "\"class num to classify for training\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--test_n_way\"", ",", "\n", "default", "=", "5", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"class num to classify for testing (validation) \"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_shot\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"number of labeled data in each class, same as n_support\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_workers\"", ",", "\n", "default", "=", "4", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Use this many workers for loading data\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Inspect generated language\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"random seed (torch only; not numpy)\"", "\n", ")", "\n", "\n", "if", "script", "==", "\"train\"", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "\"--n\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"Train run number (used for metrics)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--optimizer\"", ",", "\n", "default", "=", "\"adam\"", ",", "\n", "choices", "=", "[", "\"adam\"", ",", "\"amsgrad\"", ",", "\"rmsprop\"", "]", ",", "\n", "help", "=", "\"Optimizer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "default", "=", "1e-3", ",", "type", "=", "float", ",", "help", "=", "\"Learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--rnn_lr_scale\"", ",", "\n", "default", "=", "1.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Scale the RNN lr by this amount of the original lr\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_freq\"", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "\"Save frequency\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--start_epoch\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"Starting epoch\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--stop_epoch\"", ",", "default", "=", "600", ",", "type", "=", "int", ",", "help", "=", "\"Stopping epoch\"", "\n", ")", "# for meta-learning methods, each epoch contains 100 episodes", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resume\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"continue from previous trained model with largest epoch\"", ",", "\n", ")", "\n", "", "elif", "script", "==", "\"test\"", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "\"--split\"", ",", "\n", "default", "=", "\"novel\"", ",", "\n", "choices", "=", "[", "\"base\"", ",", "\"val\"", ",", "\"novel\"", "]", ",", "\n", "help", "=", "\"which split to evaluate on\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_iter\"", ",", "\n", "default", "=", "-", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"saved feature from the model trained in x epoch, use the best model if x is -1\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_embeddings\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Save embeddings from language model, then exit (requires --lsl)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--embeddings_file\"", ",", "\n", "default", "=", "\"./embeddings.txt\"", ",", "\n", "help", "=", "\"File to save embeddings to\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--embeddings_metadata\"", ",", "\n", "default", "=", "\"./embeddings_metadata.txt\"", ",", "\n", "help", "=", "\"File to save embedding metadata to (currently just words)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--record_file\"", ",", "\n", "default", "=", "\"./record/results.txt\"", ",", "\n", "help", "=", "\"Where to write results to\"", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown script\"", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "\"save_embeddings\"", "in", "args", "and", "(", "args", ".", "save_embeddings", "and", "not", "args", ".", "lsl", ")", ":", "\n", "        ", "parser", ".", "error", "(", "\"Must set --lsl to save embeddings\"", ")", "\n", "\n", "", "if", "args", ".", "glove_init", "and", "not", "(", "args", ".", "lsl", "or", "args", ".", "l3", ")", ":", "\n", "        ", "parser", ".", "error", "(", "\"Must set --lsl to init with glove\"", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.io_utils.get_assigned_file": [[230, 233], ["os.path.join"], "function", ["None"], ["", "def", "get_assigned_file", "(", "checkpoint_dir", ",", "num", ")", ":", "\n", "    ", "assign_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "\"{:d}.tar\"", ".", "format", "(", "num", ")", ")", "\n", "return", "assign_file", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.io_utils.get_resume_file": [[235, 245], ["glob.glob", "numpy.array", "numpy.max", "os.path.join", "os.path.join", "len", "int", "os.path.basename", "os.path.splitext", "os.path.basename"], "function", ["None"], ["", "def", "get_resume_file", "(", "checkpoint_dir", ")", ":", "\n", "    ", "filelist", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "\"*.tar\"", ")", ")", "\n", "if", "len", "(", "filelist", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "", "filelist", "=", "[", "x", "for", "x", "in", "filelist", "if", "os", ".", "path", ".", "basename", "(", "x", ")", "!=", "\"best_model.tar\"", "]", "\n", "epochs", "=", "np", ".", "array", "(", "[", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ")", "for", "x", "in", "filelist", "]", ")", "\n", "max_epoch", "=", "np", ".", "max", "(", "epochs", ")", "\n", "resume_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "\"{:d}.tar\"", ".", "format", "(", "max_epoch", ")", ")", "\n", "return", "resume_file", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.fewshot.io_utils.get_best_file": [[247, 253], ["os.path.join", "os.path.isfile", "io_utils.get_resume_file"], "function", ["home.repos.pwc.inspect_result.jayelm_lsl.fewshot.io_utils.get_resume_file"], ["", "def", "get_best_file", "(", "checkpoint_dir", ")", ":", "\n", "    ", "best_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "\"best_model.tar\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "best_file", ")", ":", "\n", "        ", "return", "best_file", "\n", "", "else", ":", "\n", "        ", "return", "get_resume_file", "(", "checkpoint_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jayelm_lsl.models.language.TextProposal.__init__": [[21, 75], ["torch.Module.__init__", "RNN", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "ValueError", "vocab.items"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "embedding_module", ",", "\n", "input_size", "=", "1600", ",", "\n", "hidden_size", "=", "512", ",", "\n", "project_input", "=", "False", ",", "\n", "rnn", "=", "\"gru\"", ",", "\n", "num_layers", "=", "1", ",", "\n", "dropout", "=", "0.2", ",", "\n", "vocab", "=", "None", ",", "\n", "sos_index", "=", "0", ",", "\n", "eos_index", "=", "0", ",", "\n", "pad_index", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", "TextProposal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "embedding_module", "\n", "self", ".", "embedding_dim", "=", "embedding_module", ".", "embedding_dim", "\n", "self", ".", "vocab_size", "=", "embedding_module", ".", "num_embeddings", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "project_input", "=", "project_input", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "rnn_type", "=", "rnn", "\n", "if", "self", ".", "project_input", ":", "\n", "            ", "self", ".", "proj_h", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "hidden_size", ")", "\n", "if", "self", ".", "rnn_type", "==", "\"lstm\"", ":", "\n", "                ", "self", ".", "proj_c", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "hidden_size", ")", "\n", "\n", "", "", "if", "rnn", "==", "\"gru\"", ":", "\n", "            ", "RNN", "=", "nn", ".", "GRU", "\n", "", "elif", "rnn", "==", "\"lstm\"", ":", "\n", "            ", "RNN", "=", "nn", ".", "LSTM", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown RNN model {}\"", ".", "format", "(", "rnn", ")", ")", "\n", "\n", "# Init the RNN", "\n", "", "self", ".", "rnn", "=", "None", "\n", "self", ".", "rnn", "=", "RNN", "(", "\n", "self", ".", "embedding_dim", ",", "\n", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "dropout", "=", "dropout", "if", "num_layers", ">", "1", "else", "0.0", ",", "\n", "batch_first", "=", "True", ",", "\n", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "# Projection from RNN hidden size to output vocab", "\n", "self", ".", "outputs2vocab", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "self", ".", "vocab_size", ")", "\n", "self", ".", "vocab", "=", "vocab", "\n", "# Get sos/eos/pad indices", "\n", "self", ".", "sos_index", "=", "sos_index", "\n", "self", ".", "eos_index", "=", "eos_index", "\n", "self", ".", "pad_index", "=", "pad_index", "\n", "self", ".", "rev_vocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "vocab", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.language.TextProposal.forward": [[76, 125], ["seq.size", "language.TextProposal.unsqueeze().expand().contiguous", "language.TextProposal.embedding", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "language.TextProposal.rnn", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "output[].contiguous", "output[].contiguous.size", "output[].contiguous.view", "language.TextProposal.dropout", "language.TextProposal.outputs2vocab", "language.TextProposal.view", "language.TextProposal.proj_h", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "language.TextProposal.unsqueeze().expand().contiguous", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "language.TextProposal.proj_c", "language.TextProposal.unsqueeze().expand", "language.TextProposal.unsqueeze().expand", "language.TextProposal.unsqueeze", "language.TextProposal.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "seq", ",", "length", ")", ":", "\n", "# feats is from example images", "\n", "        ", "batch_size", "=", "seq", ".", "size", "(", "0", ")", "\n", "\n", "if", "self", ".", "project_input", ":", "\n", "            ", "feats_h", "=", "self", ".", "proj_h", "(", "feats", ")", "\n", "if", "self", ".", "rnn_type", "==", "\"lstm\"", ":", "\n", "                ", "feats_c", "=", "self", ".", "proj_c", "(", "feats", ")", "\n", "", "", "else", ":", "\n", "            ", "feats_h", "=", "feats", "\n", "feats_c", "=", "feats", "\n", "\n", "", "if", "batch_size", ">", "1", ":", "\n", "            ", "sorted_lengths", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "length", ",", "descending", "=", "True", ")", "\n", "seq", "=", "seq", "[", "sorted_idx", "]", "\n", "feats_h", "=", "feats_h", "[", "sorted_idx", "]", "\n", "if", "self", ".", "rnn_type", "==", "\"lstm\"", ":", "\n", "                ", "feats_c", "=", "feats_c", "[", "sorted_idx", "]", "\n", "\n", "# Construct hidden states by expanding to number of layers", "\n", "", "", "feats_h", "=", "feats_h", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "self", ".", "num_layers", ",", "-", "1", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "if", "self", ".", "rnn_type", "==", "\"lstm\"", ":", "\n", "            ", "feats_c", "=", "feats_c", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "self", ".", "num_layers", ",", "-", "1", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "hidden", "=", "(", "feats_h", ",", "feats_c", ")", "\n", "", "else", ":", "\n", "            ", "hidden", "=", "feats_h", "\n", "\n", "# embed your sequences", "\n", "", "embed_seq", "=", "self", ".", "embedding", "(", "seq", ")", "\n", "\n", "# shape = (seq_len, batch, hidden_dim)", "\n", "packed_input", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "\n", "embed_seq", ",", "sorted_lengths", ",", "batch_first", "=", "True", "\n", ")", "\n", "packed_output", ",", "_", "=", "self", ".", "rnn", "(", "packed_input", ",", "hidden", ")", "\n", "output", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_output", ",", "batch_first", "=", "True", ")", "\n", "output", "=", "output", "[", "0", "]", ".", "contiguous", "(", ")", "\n", "\n", "if", "batch_size", ">", "1", ":", "\n", "            ", "_", ",", "reversed_idx", "=", "torch", ".", "sort", "(", "sorted_idx", ")", "\n", "output", "=", "output", "[", "reversed_idx", "]", "\n", "\n", "", "max_length", "=", "output", ".", "size", "(", "1", ")", "\n", "output_2d", "=", "output", ".", "view", "(", "batch_size", "*", "max_length", ",", "self", ".", "hidden_size", ")", "\n", "output_2d_dropout", "=", "self", ".", "dropout", "(", "output_2d", ")", "\n", "outputs_2d", "=", "self", ".", "outputs2vocab", "(", "output_2d_dropout", ")", "\n", "outputs", "=", "outputs_2d", ".", "view", "(", "batch_size", ",", "max_length", ",", "self", ".", "vocab_size", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.language.TextProposal.sample": [[126, 195], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "states.unsqueeze.unsqueeze.size", "states.unsqueeze.unsqueeze.unsqueeze", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "language.TextProposal.unsqueeze", "language.TextProposal.to", "language.TextProposal.squeeze().cpu().numpy", "language.TextProposal.embedding", "range", "numpy.array", "max", "range", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "language.TextProposal.to_text", "language.TextProposal.proj_h", "language.TextProposal.rnn", "torch.softmax.squeeze", "language.TextProposal.outputs2vocab", "torch.multinomial.squeeze().cpu().numpy", "torch.multinomial.squeeze().cpu().numpy", "torch.multinomial.squeeze().cpu().numpy", "torch.multinomial.squeeze().cpu().numpy", "torch.multinomial.squeeze().cpu().numpy.tolist", "zip", "language.TextProposal.embedding", "len", "numpy.ones", "language.TextProposal.proj_c", "language.TextProposal.squeeze().cpu", "torch.multinomial.unsqueeze", "torch.multinomial.unsqueeze", "torch.multinomial.unsqueeze", "torch.multinomial.unsqueeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "torch.softmax.max", "torch.multinomial.squeeze().cpu", "torch.multinomial.squeeze().cpu", "torch.multinomial.squeeze().cpu", "torch.multinomial.squeeze().cpu", "so_far.append", "language.TextProposal.squeeze", "torch.multinomial.squeeze", "torch.multinomial.squeeze", "torch.multinomial.squeeze", "torch.multinomial.squeeze"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.language.TextProposal.to_text"], ["", "def", "sample", "(", "self", ",", "feats", ",", "greedy", "=", "False", ",", "to_text", "=", "False", ")", ":", "\n", "        ", "\"\"\"Generate from image features using greedy search.\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "project_input", ":", "\n", "                ", "feats_h", "=", "self", ".", "proj_h", "(", "feats", ")", "\n", "states", "=", "feats_h", "\n", "if", "self", ".", "rnn_type", "==", "\"lstm\"", ":", "\n", "                    ", "feats_c", "=", "self", ".", "proj_c", "(", "feats", ")", "\n", "states", "=", "(", "feats_h", ",", "feats_c", ")", "\n", "", "", "else", ":", "\n", "                ", "states", "=", "feats", "\n", "\n", "", "batch_size", "=", "states", ".", "size", "(", "0", ")", "\n", "\n", "# initialize hidden states using image features", "\n", "states", "=", "states", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# first input is SOS token", "\n", "inputs", "=", "np", ".", "array", "(", "[", "self", ".", "sos_index", "for", "_", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "inputs", "=", "torch", ".", "from_numpy", "(", "inputs", ")", "\n", "inputs", "=", "inputs", ".", "unsqueeze", "(", "1", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "feats", ".", "device", ")", "\n", "\n", "# save SOS as first generated token", "\n", "inputs_npy", "=", "inputs", ".", "squeeze", "(", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sampled_ids", "=", "[", "[", "w", "]", "for", "w", "in", "inputs_npy", "]", "\n", "\n", "# compute embeddings", "\n", "inputs", "=", "self", ".", "embedding", "(", "inputs", ")", "\n", "\n", "# Here, we use the same as max caption length", "\n", "for", "i", "in", "range", "(", "32", ")", ":", "# like in jacobs repo", "\n", "                ", "outputs", ",", "states", "=", "self", ".", "rnn", "(", "inputs", ",", "states", ")", "# outputs: (L=1,B,H)", "\n", "outputs", "=", "outputs", ".", "squeeze", "(", "1", ")", "# outputs: (B,H)", "\n", "outputs", "=", "self", ".", "outputs2vocab", "(", "outputs", ")", "# outputs: (B,V)", "\n", "\n", "if", "greedy", ":", "\n", "                    ", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "predicted", "=", "predicted", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "outputs", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "predicted", "=", "torch", ".", "multinomial", "(", "outputs", ",", "1", ")", "\n", "\n", "", "predicted_npy", "=", "predicted", ".", "squeeze", "(", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predicted_lst", "=", "predicted_npy", ".", "tolist", "(", ")", "\n", "\n", "for", "w", ",", "so_far", "in", "zip", "(", "predicted_lst", ",", "sampled_ids", ")", ":", "\n", "                    ", "if", "so_far", "[", "-", "1", "]", "!=", "self", ".", "eos_index", ":", "\n", "                        ", "so_far", ".", "append", "(", "w", ")", "\n", "\n", "", "", "inputs", "=", "predicted", "\n", "inputs", "=", "self", ".", "embedding", "(", "inputs", ")", "# inputs: (L=1,B,E)", "\n", "\n", "", "sampled_lengths", "=", "[", "len", "(", "text", ")", "for", "text", "in", "sampled_ids", "]", "\n", "sampled_lengths", "=", "np", ".", "array", "(", "sampled_lengths", ")", "\n", "\n", "max_length", "=", "max", "(", "sampled_lengths", ")", "\n", "padded_ids", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "max_length", ")", ")", "*", "self", ".", "pad_index", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "padded_ids", "[", "i", ",", ":", "sampled_lengths", "[", "i", "]", "]", "=", "sampled_ids", "[", "i", "]", "\n", "\n", "", "sampled_lengths", "=", "torch", ".", "from_numpy", "(", "sampled_lengths", ")", ".", "long", "(", ")", "\n", "sampled_ids", "=", "torch", ".", "from_numpy", "(", "padded_ids", ")", ".", "long", "(", ")", "\n", "\n", "", "if", "to_text", ":", "\n", "            ", "sampled_text", "=", "self", ".", "to_text", "(", "sampled_ids", ")", "\n", "return", "sampled_text", ",", "sampled_lengths", "\n", "", "return", "sampled_ids", ",", "sampled_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.language.TextProposal.to_text": [[196, 201], ["sampled_ids.numpy", "numpy.array", "texts.append"], "methods", ["None"], ["", "def", "to_text", "(", "self", ",", "sampled_ids", ")", ":", "\n", "        ", "texts", "=", "[", "]", "\n", "for", "sample", "in", "sampled_ids", ".", "numpy", "(", ")", ":", "\n", "            ", "texts", ".", "append", "(", "\" \"", ".", "join", "(", "[", "self", ".", "rev_vocab", "[", "v", "]", "for", "v", "in", "sample", "if", "v", "!=", "0", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "texts", ",", "dtype", "=", "np", ".", "unicode_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.language.TextRep.__init__": [[210, 229], ["torch.Module.__init__", "RNN", "ValueError"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["def", "__init__", "(", "\n", "self", ",", "embedding_module", ",", "hidden_size", "=", "512", ",", "rnn", "=", "\"gru\"", ",", "num_layers", "=", "1", ",", "dropout", "=", "0.2", "\n", ")", ":", "\n", "        ", "super", "(", "TextRep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "embedding_module", "\n", "self", ".", "embedding_dim", "=", "embedding_module", ".", "embedding_dim", "\n", "if", "rnn", "==", "\"gru\"", ":", "\n", "            ", "RNN", "=", "nn", ".", "GRU", "\n", "", "elif", "rnn", "==", "\"lstm\"", ":", "\n", "            ", "RNN", "=", "nn", ".", "LSTM", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown RNN model {}\"", ".", "format", "(", "rnn", ")", ")", "\n", "", "self", ".", "rnn", "=", "RNN", "(", "\n", "self", ".", "embedding_dim", ",", "\n", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "dropout", "=", "dropout", "if", "num_layers", ">", "1", "else", "0.0", ",", "\n", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.language.TextRep.forward": [[230, 256], ["seq.transpose.transpose.size", "seq.transpose.transpose.transpose", "language.TextRep.embedding", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "language.TextRep.rnn", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_lengths.data.tolist", "length.data.tolist"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "seq", ",", "length", ")", ":", "\n", "        ", "batch_size", "=", "seq", ".", "size", "(", "0", ")", "\n", "\n", "if", "batch_size", ">", "1", ":", "\n", "            ", "sorted_lengths", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "length", ",", "descending", "=", "True", ")", "\n", "seq", "=", "seq", "[", "sorted_idx", "]", "\n", "\n", "# reorder from (B,L,D) to (L,B,D)", "\n", "", "seq", "=", "seq", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# embed your sequences", "\n", "embed_seq", "=", "self", ".", "embedding", "(", "seq", ")", "\n", "\n", "packed", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "\n", "embed_seq", ",", "\n", "sorted_lengths", ".", "data", ".", "tolist", "(", ")", "if", "batch_size", ">", "1", "else", "length", ".", "data", ".", "tolist", "(", ")", ",", "\n", ")", "\n", "\n", "_", ",", "hidden", "=", "self", ".", "rnn", "(", "packed", ")", "\n", "hidden", "=", "hidden", "[", "-", "1", ",", "...", "]", "\n", "\n", "if", "batch_size", ">", "1", ":", "\n", "            ", "_", ",", "reversed_idx", "=", "torch", ".", "sort", "(", "sorted_idx", ")", "\n", "hidden", "=", "hidden", "[", "reversed_idx", "]", "\n", "\n", "", "return", "hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.__init__": [[23, 80], ["torch.Module.__init__", "model_func", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model_func", ",", "\n", "n_way", ",", "\n", "n_support", ",", "\n", "lsl", "=", "False", ",", "\n", "l3", "=", "False", ",", "\n", "language_model", "=", "None", ",", "\n", "l3_model", "=", "None", ",", "\n", "l3_n_infer", "=", "False", ",", "\n", "lang_supervision", "=", "\"class\"", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"\n        Initialize a ProtoNet Model.\n\n        :param model_func: thunk that when called returns a vision backbone\n        :param n_way: how many classes per episode (i.e. the n in n-way)\n        :param n_support: how many images per support set (i.e. the k in k-shot)\n        :param lsl: enable langauge-shaped learning (must specifiy language_model)\n        :param l3: enable L3 (must specify language_model and l3_model)\n        :param language_model: the RNN decoder g_\\phi, used in both LSL and L3.\n        :param l3_model: the RNN encoder h_\\eta, used in L3 only.\n        :param l3_n_infer: how many samples to take per image during L3\n            test-time inference. Can be overridden dynamically in self.correct_l3\n        :param lang_supervision: supervise at class or instance level? if class\n            level, average image reprs before decoding\n        \"\"\"", "\n", "super", "(", "ProtoNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_support", "=", "n_support", "\n", "self", ".", "n_query", "=", "-", "1", "# (change depends on input)", "\n", "self", ".", "feature", "=", "model_func", "(", ")", "\n", "self", ".", "feat_dim", "=", "self", ".", "feature", ".", "final_feat_dim", "\n", "\n", "if", "lsl", ":", "\n", "            ", "assert", "language_model", "is", "not", "None", "\n", "\n", "", "self", ".", "xent_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "nll_loss", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "\n", "# Language settings", "\n", "self", ".", "lsl", "=", "lsl", "\n", "self", ".", "language_model", "=", "language_model", "\n", "self", ".", "lang_supervision", "=", "lang_supervision", "\n", "\n", "# L3 settings", "\n", "self", ".", "l3", "=", "l3", "\n", "self", ".", "l3_model", "=", "l3_model", "\n", "self", ".", "l3_n_infer", "=", "l3_n_infer", "\n", "\n", "# Bilinear terms", "\n", "if", "self", ".", "l3", ":", "\n", "            ", "self", ".", "img2lang", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "l3_model", ".", "hidden_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "img2lang", "=", "None", "\n", "\n", "", "self", ".", "img2img", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "feat_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.forward": [[81, 84], ["protonet.ProtoNet.feature.forward"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.parse_feature": [[85, 113], ["x.contiguous().view.contiguous().view.cuda", "x.contiguous().view.contiguous().view.contiguous().view", "protonet.ProtoNet.feature.forward", "z_all.view.view.view", "x.contiguous().view.contiguous().view.contiguous", "x.contiguous().view.contiguous().view.size"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.forward"], ["", "def", "parse_feature", "(", "self", ",", "x", ",", "is_feature", ")", ":", "\n", "        ", "\"\"\"\n        Using the vision backbone, convert input to features.\n\n        :param x: torch.Tensor of shape (n_way, n_support + n_query, *img_size)\n            where the first `n_support` images along dim 1 are support images,\n            and the rest are query images\n        :param is_feature: if True, x is already a feature, so just pass it\n            through (separating into support and query)\n\n        :returns: (z_support, z_query); tensors of shape (n_way,\n            {n_support,n_query}, feat_size) after passing the images through\n            the feature backbone (unless is_feature=True)\n        \"\"\"", "\n", "x", "=", "x", ".", "cuda", "(", ")", "\n", "if", "is_feature", ":", "\n", "            ", "z_all", "=", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "self", ".", "n_way", "*", "(", "self", ".", "n_support", "+", "self", ".", "n_query", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", ")", "\n", "z_all", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "z_all", "=", "z_all", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", "+", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "", "z_support", "=", "z_all", "[", ":", ",", ":", "self", ".", "n_support", "]", "\n", "z_query", "=", "z_all", "[", ":", ",", "self", ".", "n_support", ":", "]", "\n", "\n", "return", "z_support", ",", "z_query", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.correct": [[114, 128], ["protonet.ProtoNet.set_forward", "numpy.repeat", "protonet.ProtoNet.data.topk", "topk_labels.cpu().numpy", "numpy.sum", "range", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "float", "len", "topk_labels.cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "float", "len"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.set_forward"], ["", "def", "correct", "(", "self", ",", "x", ",", "return_loss", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Compute actual predictions for the query examples and return accuracy/n_query\n        \"\"\"", "\n", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "y_query", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", "\n", "\n", "topk_scores", ",", "topk_labels", "=", "scores", ".", "data", ".", "topk", "(", "1", ",", "1", ",", "True", ",", "True", ")", "\n", "topk_ind", "=", "topk_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "top1_correct", "=", "np", ".", "sum", "(", "topk_ind", "[", ":", ",", "0", "]", "==", "y_query", ")", "\n", "if", "return_loss", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "scores", ",", "torch", ".", "tensor", "(", "y_query", ",", "device", "=", "scores", ".", "device", ")", ")", "\n", "return", "float", "(", "top1_correct", ")", ",", "len", "(", "y_query", ")", ",", "loss", "\n", "", "return", "float", "(", "top1_correct", ")", ",", "len", "(", "y_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.correct_l3": [[129, 240], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "protonet.ProtoNet.parse_feature", "z_support.contiguous().view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "z_query.contiguous().view", "range", "torch.where.unsqueeze().view", "torch.where.unsqueeze().view", "torch.where.unsqueeze().view", "support_protos.mean.mean.mean", "protonet.ProtoNet.score", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.argmax().cpu().numpy", "numpy.repeat", "numpy.empty", "protonet.ProtoNet.language_model.sample", "lang_samp.cuda.cuda.cuda", "lang_length_samp.cuda.cuda.cuda", "protonet.ProtoNet.l3_model", "protonet.ProtoNet.batchwise_score", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "updates.unsqueeze().expand_as", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "protonet.ProtoNet.save_debug", "range", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "float", "len", "z_support.contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "z_query.contiguous", "protonet.ProtoNet.langauge_model.to_text", "numpy.where", "torch.where.unsqueeze", "torch.where.unsqueeze", "torch.where.unsqueeze", "torch.log_softmax.argmax().cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "float", "len", "updates.cpu().numpy", "updates.unsqueeze", "float", "torch.log_softmax.argmax", "updates.cpu"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.parse_feature", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.score", "home.repos.pwc.inspect_result.jayelm_lsl.models.language.TextProposal.sample", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.batchwise_score", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.save_debug", "home.repos.pwc.inspect_result.jayelm_lsl.models.language.TextProposal.to_text"], ["", "def", "correct_l3", "(", "\n", "self", ",", "\n", "x", ",", "\n", "n_infer", "=", "None", ",", "\n", "return_loss", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "index", "=", "None", ",", "\n", "x_orig", "=", "None", ",", "\n", "debug_dir", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Make predictions for L3 using test-time inference (i.e. not assuming\n        the presence of language)\n\n        :param x: torch.Tensor of inputs (n_way, n_query, *image_shape)\n        :param return_loss: return the loss along with the accuracy\n        :param debug: save predictions to file\n        :param index: index of task (for debug)\n        :param x_orig: if debug, the original, unnormalized images\n        :param debug_dir: where to save debug predictions to\n\n        :returns: (accuracy, n_query, optional loss if return_loss=True)\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Embed support images, then decode from them", "\n", "            ", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", "=", "False", ")", "\n", "\n", "# Decode 1 language for each image, keep based on individual agreement;", "\n", "# then average for your final prototype", "\n", "n_support_lang", "=", "self", ".", "n_way", "*", "self", ".", "n_support", "\n", "z_support_flat", "=", "z_support", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "z_support", ".", "shape", "[", "0", "]", "*", "z_support", ".", "shape", "[", "1", "]", ",", "-", "1", "\n", ")", "\n", "\n", "best_support_lang", "=", "torch", ".", "zeros", "(", "\n", "n_support_lang", ",", "self", ".", "l3_model", ".", "hidden_size", "\n", ")", ".", "cuda", "(", ")", "\n", "best_support_scores", "=", "torch", ".", "full", "(", "(", "n_support_lang", ",", ")", ",", "-", "float", "(", "\"inf\"", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "z_query_flat", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "z_query", ".", "shape", "[", "0", "]", "*", "z_query", ".", "shape", "[", "1", "]", ",", "-", "1", "\n", ")", "\n", "\n", "if", "debug", ":", "\n", "                ", "best_text", "=", "np", ".", "empty", "(", "self", ".", "n_way", ",", "dtype", "=", "np", ".", "unicode_", ")", "\n", "\n", "# Sample captions for each prototype. Keep the best (highest", "\n", "# scoring) caption (proto) reprs", "\n", "", "if", "n_infer", "is", "None", ":", "\n", "                ", "n_infer", "=", "self", ".", "l3_n_infer", "\n", "\n", "", "for", "j", "in", "range", "(", "n_infer", ")", ":", "\n", "# Sample from query examples. Pick the query example that best matches", "\n", "# Flatten tasks", "\n", "                ", "lang_samp", ",", "lang_length_samp", "=", "self", ".", "language_model", ".", "sample", "(", "\n", "z_support_flat", ",", "greedy", "=", "j", "==", "0", "\n", ")", "\n", "\n", "lang_samp", "=", "lang_samp", ".", "cuda", "(", ")", "\n", "lang_length_samp", "=", "lang_length_samp", ".", "cuda", "(", ")", "\n", "\n", "lang_rep_samp", "=", "self", ".", "l3_model", "(", "lang_samp", ",", "lang_length_samp", ")", "\n", "\n", "# Compute image-caption agreement scores (only keep best", "\n", "# language for each support image)", "\n", "support_scores", "=", "self", ".", "batchwise_score", "(", "\n", "lang_rep_samp", ",", "z_support_flat", ",", "support_type", "=", "\"lang\"", ",", "query_type", "=", "\"img\"", "\n", ")", "\n", "\n", "updates", "=", "support_scores", ">", "best_support_scores", "\n", "\n", "if", "debug", ":", "\n", "                    ", "text_samp", "=", "self", ".", "langauge_model", ".", "to_text", "(", "lang_samp", ")", "\n", "best_text", "=", "np", ".", "where", "(", "updates", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "text_samp", ",", "best_text", ")", "\n", "\n", "", "best_support_scores", "=", "torch", ".", "where", "(", "\n", "updates", ",", "support_scores", ",", "best_support_scores", "\n", ")", "\n", "\n", "lang_updates", "=", "updates", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "best_support_lang", ")", "\n", "best_support_lang", "=", "torch", ".", "where", "(", "\n", "lang_updates", ",", "lang_rep_samp", ",", "best_support_lang", "\n", ")", "\n", "\n", "# Average best language for each support class to form prototype", "\n", "", "support_protos", "=", "best_support_lang", ".", "unsqueeze", "(", "1", ")", ".", "view", "(", "\n", "self", ".", "n_way", ",", "self", ".", "n_support", ",", "-", "1", "\n", ")", "\n", "support_protos", "=", "support_protos", ".", "mean", "(", "1", ")", "\n", "\n", "# Compute scores, best protos vs query", "\n", "query_scores", "=", "self", ".", "score", "(", "\n", "support_protos", ",", "z_query_flat", ",", "support_type", "=", "\"lang\"", ",", "query_type", "=", "\"img\"", "\n", ")", "\n", "query_scores", "=", "F", ".", "log_softmax", "(", "query_scores", ",", "1", ")", "\n", "\n", "label_hat", "=", "query_scores", ".", "argmax", "(", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "debug", "and", "index", "<", "10", ":", "# Save 10 example tasks in debug loop", "\n", "                ", "self", ".", "save_debug", "(", "index", ",", "x_orig", ",", "query_scores", ",", "best_text", ",", "debug_dir", ")", "\n", "\n", "", "y_query", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", "\n", "\n", "top1_correct", "=", "(", "label_hat", "==", "y_query", ")", ".", "sum", "(", ")", "\n", "\n", "if", "return_loss", ":", "\n", "                ", "loss", "=", "F", ".", "nll_loss", "(", "\n", "query_scores", ",", "torch", ".", "tensor", "(", "y_query", ",", "device", "=", "query_scores", ".", "device", ")", ",", "\n", ")", "\n", "return", "float", "(", "top1_correct", ")", ",", "len", "(", "y_query", ")", ",", "loss", "\n", "", "return", "float", "(", "top1_correct", ")", ",", "len", "(", "y_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.train_loop": [[241, 324], ["enumerate", "tqdm.tqdm.tqdm.write", "numpy.mean", "tqdm.tqdm.tqdm.write", "optimizer.zero_grad", "loss.backward", "optimizer.step", "acc_all.append", "tqdm.tqdm.tqdm.write", "x.size", "lang_length.cuda.cuda.max", "lang.cuda.cuda.cuda", "lang_length.cuda.cuda.cuda", "lang_mask.cuda.cuda.cuda", "protonet.ProtoNet.set_forward_loss_l3", "protonet.ProtoNet.set_forward_loss", "protonet.ProtoNet.set_lang_loss", "loss.item", "cls_loss.item", "protonet.ProtoNet.correct_l3", "protonet.ProtoNet.correct", "protonet.ProtoNet.item"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.set_forward_loss_l3", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.set_forward_loss", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.set_lang_loss", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.correct_l3", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.correct"], ["", "", "def", "train_loop", "(", "self", ",", "epoch", ",", "train_loader", ",", "optimizer", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Run a train loop.\n\n        :param epoch: the epoch # (used for logging)\n        :param train_loader: a torch.utils.data.DataLoader generated from\n            data.datamgr.SetDataManager\n        :param optimizer: a torch.optim.Optimzer\n        :param args: other args passed to the script\n\n        :returns: a dictionary of metrics: train_acc, train_loss, cls_loss, and\n            lang_loss if applicable\n        \"\"\"", "\n", "avg_loss", "=", "0", "\n", "avg_cls_loss", "=", "0", "\n", "avg_lang_loss", "=", "0", "\n", "acc_all", "=", "[", "]", "\n", "for", "i", ",", "(", "x", ",", "target", ",", "(", "lang", ",", "lang_length", ",", "lang_mask", ")", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "self", ".", "lsl", "or", "self", ".", "l3", ":", "# Load language", "\n", "# Trim padding to max length in batch", "\n", "                ", "max_lang_length", "=", "lang_length", ".", "max", "(", ")", "\n", "lang", "=", "lang", "[", ":", ",", ":", ",", ":", "max_lang_length", "]", "\n", "lang_mask", "=", "lang_mask", "[", ":", ",", ":", ",", ":", "max_lang_length", "]", "\n", "lang", "=", "lang", ".", "cuda", "(", ")", "\n", "lang_length", "=", "lang_length", ".", "cuda", "(", ")", "\n", "lang_mask", "=", "lang_mask", ".", "cuda", "(", ")", "\n", "\n", "# ==== CLASSIFICATION LOSS ===-", "\n", "", "if", "self", ".", "l3", ":", "\n", "                ", "cls_loss", ",", "z_support", ",", "z_query", "=", "self", ".", "set_forward_loss_l3", "(", "\n", "x", ",", "(", "lang", ",", "lang_length", ")", ",", "return_z", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "                ", "cls_loss", ",", "z_support", ",", "z_query", "=", "self", ".", "set_forward_loss", "(", "x", ",", "return_z", "=", "True", ")", "\n", "", "loss", "=", "cls_loss", "\n", "\n", "# ==== LANGUAGE LOSS ====", "\n", "if", "self", ".", "lsl", "or", "self", ".", "l3", ":", "\n", "                ", "lang_loss", "=", "self", ".", "set_lang_loss", "(", "\n", "z_support", ",", "z_query", ",", "lang", ",", "lang_length", ",", "lang_mask", "\n", ")", "\n", "lang_loss", "=", "args", ".", "lang_lambda", "*", "lang_loss", "\n", "loss", "=", "loss", "+", "lang_loss", "\n", "avg_lang_loss", "=", "avg_lang_loss", "+", "lang_loss", ".", "item", "(", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "item", "(", ")", "\n", "avg_cls_loss", "=", "avg_cls_loss", "+", "cls_loss", ".", "item", "(", ")", "\n", "\n", "if", "self", ".", "l3", ":", "\n", "# Stick to just 1 inference at train time since evaluating", "\n", "# accuracy is expensive", "\n", "                ", "correct_this", ",", "count_this", "=", "self", ".", "correct_l3", "(", "x", ",", "n_infer", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "correct_this", ",", "count_this", "=", "self", ".", "correct", "(", "x", ")", "\n", "\n", "", "acc_all", ".", "append", "(", "correct_this", "/", "count_this", "*", "100", ")", "\n", "\n", "", "metrics", "=", "{", "\n", "\"train_acc\"", ":", "None", ",", "\n", "\"train_loss\"", ":", "None", ",", "\n", "\"cls_loss\"", ":", "None", ",", "\n", "\"lang_loss\"", ":", "None", ",", "\n", "}", "\n", "metrics", "[", "\"train_loss\"", "]", "=", "avg_loss", "/", "(", "i", "+", "1", ")", "\n", "metrics", "[", "\"cls_loss\"", "]", "=", "avg_cls_loss", "/", "(", "i", "+", "1", ")", "\n", "tqdm", ".", "write", "(", "\"Epoch {:d} | Loss {:f}\"", ".", "format", "(", "epoch", ",", "metrics", "[", "\"train_loss\"", "]", ")", ")", "\n", "\n", "if", "self", ".", "lsl", ":", "\n", "            ", "metrics", "[", "\"lang_loss\"", "]", "=", "avg_lang_loss", "/", "(", "i", "+", "1", ")", "\n", "tqdm", ".", "write", "(", "\n", "\"Epoch {:d} | Lang Loss {:f}\"", ".", "format", "(", "epoch", ",", "metrics", "[", "\"lang_loss\"", "]", ")", "\n", ")", "\n", "\n", "", "metrics", "[", "\"train_acc\"", "]", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "tqdm", ".", "write", "(", "\"Epoch {:d} | Train Acc {:.2f}\"", ".", "format", "(", "epoch", ",", "metrics", "[", "\"train_acc\"", "]", ")", ")", "\n", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.test_loop": [[325, 399], ["len", "numpy.asarray", "numpy.asarray", "numpy.mean", "numpy.mean", "numpy.std", "tqdm.tqdm.tqdm.write", "tqdm.tqdm.tqdm", "enumerate", "numpy.asarray.append", "numpy.asarray.append", "enumerate", "x.clone().view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "xnorm.view.view.view", "x.size", "protonet.ProtoNet.correct_l3", "protonet.ProtoNet.correct", "loss_this.item", "len", "x.clone", "normalizer", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.correct_l3", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.correct"], ["", "def", "test_loop", "(", "\n", "self", ",", "\n", "test_loader", ",", "\n", "verbose", "=", "False", ",", "\n", "normalizer", "=", "None", ",", "\n", "return_all", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "debug_dir", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Run a model test loop\n\n        :param test_loader: torch.utils.data.DataLoader for testing, generated\n            by data.datamgr.SetDataManager\n        :param verbose: if verbose, use tqdm to display progress\n        :param normalizer: a torchvision.transforms.Transform object used to\n            normalize the image before evaluation. Used if debug is set, and we\n            want the original image to save to img file\n        :param return_all: return an np.array of hits (1s or 0s), instead of\n            summary loss/acc statistics\n        :param debug: don't actually evaluate test loop; evaluate a few\n            episodes then save their results in `debug_dir`\n        :param debug_dir: if debug is set, save to this directory\n\n        :returns: either an (acc, loss) tuple, or an np.array of 1s and 0s,\n            where 1 indicates a correct prediction, for the entire dataset\n        \"\"\"", "\n", "acc_all", "=", "[", "]", "\n", "loss_all", "=", "[", "]", "\n", "\n", "iter_num", "=", "len", "(", "test_loader", ")", "\n", "if", "verbose", ":", "\n", "            ", "ranger", "=", "tqdm", "(", "enumerate", "(", "test_loader", ")", ",", "desc", "=", "\"test\"", ",", "total", "=", "len", "(", "test_loader", ")", ")", "\n", "", "else", ":", "\n", "            ", "ranger", "=", "enumerate", "(", "test_loader", ")", "\n", "", "for", "i", ",", "(", "x", ",", "target", ",", "lang", ")", "in", "ranger", ":", "\n", "\n", "            ", "if", "normalizer", "is", "not", "None", ":", "\n", "                ", "xdim", "=", "x", ".", "shape", "\n", "xflat", "=", "x", ".", "clone", "(", ")", ".", "view", "(", "xdim", "[", "0", "]", "*", "xdim", "[", "1", "]", ",", "*", "xdim", "[", "2", ":", "]", ")", "\n", "xnorm", "=", "torch", ".", "stack", "(", "[", "normalizer", "(", "x", ")", "for", "x", "in", "xflat", "]", ")", "\n", "xnorm", "=", "xnorm", ".", "view", "(", "*", "xdim", ")", "\n", "", "else", ":", "\n", "                ", "xnorm", "=", "x", "\n", "", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "if", "self", ".", "l3", ":", "\n", "                ", "correct_this", ",", "count_this", ",", "loss_this", "=", "self", ".", "correct_l3", "(", "\n", "xnorm", ",", "\n", "return_loss", "=", "True", ",", "\n", "debug", "=", "debug", ",", "\n", "index", "=", "i", ",", "\n", "x_orig", "=", "x", ",", "\n", "debug_dir", "=", "debug_dir", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "correct_this", ",", "count_this", ",", "loss_this", "=", "self", ".", "correct", "(", "\n", "xnorm", ",", "return_loss", "=", "True", "\n", ")", "\n", "", "acc_all", ".", "append", "(", "correct_this", "/", "count_this", "*", "100", ")", "\n", "loss_all", ".", "append", "(", "loss_this", ".", "item", "(", ")", ")", "\n", "\n", "", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "loss_all", "=", "np", ".", "asarray", "(", "loss_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "loss_mean", "=", "np", ".", "mean", "(", "loss_all", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "acc_all", ")", "\n", "tqdm", ".", "write", "(", "\n", "\"%d Test Loss %f Acc = %4.2f%% +- %4.2f%%\"", "\n", "%", "(", "iter_num", ",", "loss_mean", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", "\n", ")", "\n", "\n", "if", "return_all", ":", "\n", "            ", "return", "acc_all", "\n", "", "return", "acc_mean", ",", "loss_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.get_scorer": [[400, 413], ["ValueError"], "methods", ["None"], ["", "def", "get_scorer", "(", "self", ",", "support_type", ",", "query_type", ")", ":", "\n", "        ", "\"\"\"\n        Get the bilinear term corresponding to the support and query types.\n        Note bilinear term maps query embedding space into support embedding\n        space, hence the reversed names.\n        \"\"\"", "\n", "if", "support_type", "==", "\"lang\"", "and", "query_type", "==", "\"img\"", ":", "\n", "            ", "return", "self", ".", "img2lang", "\n", "", "elif", "support_type", "==", "\"img\"", "and", "query_type", "==", "\"img\"", ":", "\n", "            ", "return", "self", ".", "img2img", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"support_type = {support_type}, query_type = {query_type}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.score": [[415, 424], ["protonet.ProtoNet.get_scorer", "protonet.ProtoNet.", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "protonet.ProtoNet.transpose"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.get_scorer"], ["", "", "def", "score", "(", "self", ",", "support_proto", ",", "query", ",", "support_type", "=", "\"img\"", ",", "query_type", "=", "\"img\"", ")", ":", "\n", "        ", "\"\"\"\n        Score two representations, depending on their type (img <-> img as done\n        in Meta/LSL, or lang <-> img as done in L3)\n        \"\"\"", "\n", "bilinear_term", "=", "self", ".", "get_scorer", "(", "support_type", ",", "query_type", ")", "\n", "W_query", "=", "bilinear_term", "(", "query", ")", "\n", "query_scores", "=", "torch", ".", "mm", "(", "support_proto", ",", "W_query", ".", "transpose", "(", "1", ",", "0", ")", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "return", "query_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.batchwise_score": [[425, 442], ["protonet.ProtoNet.get_scorer", "protonet.ProtoNet.", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "support_proto.unsqueeze", "protonet.ProtoNet.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.get_scorer"], ["", "def", "batchwise_score", "(", "\n", "self", ",", "support_proto", ",", "query", ",", "support_type", "=", "\"img\"", ",", "query_type", "=", "\"img\"", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Do a batchwise 1-1 scoring of support and query images.\n\n        If support proto S has dim (B, H) and query Q has dim (B, H), compute\n        only distances between each s_i, b_i for i in [1, B]. So output has dim\n        (B, ).\n        \"\"\"", "\n", "bilinear_term", "=", "self", ".", "get_scorer", "(", "support_type", ",", "query_type", ")", "\n", "W_query", "=", "bilinear_term", "(", "query", ")", "\n", "query_scores", "=", "torch", ".", "bmm", "(", "\n", "support_proto", ".", "unsqueeze", "(", "1", ")", ",", "W_query", ".", "unsqueeze", "(", "2", ")", "\n", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "query_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.set_forward": [[443, 460], ["protonet.ProtoNet.parse_feature", "z_support.contiguous.contiguous.contiguous", "z_support.contiguous.contiguous.mean", "z_query.contiguous().view.contiguous().view.contiguous().view", "protonet.ProtoNet.score", "z_query.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.parse_feature", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.score"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ",", "return_z", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Compute reps for support and query images and score the query images\n        \"\"\"", "\n", "z_support_orig", ",", "z_query_orig", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ",", ")", "\n", "\n", "z_support", "=", "z_support_orig", "\n", "z_query", "=", "z_query_orig", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", "\n", "z_proto", "=", "z_support", ".", "mean", "(", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "scores", "=", "self", ".", "score", "(", "z_proto", ",", "z_query", ",", "support_type", "=", "\"img\"", ",", "query_type", "=", "\"img\"", ")", "\n", "if", "return_z", ":", "\n", "            ", "return", "scores", ",", "z_support_orig", ",", "z_query_orig", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.set_forward_loss": [[461, 478], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "y_query.cuda.cuda.cuda", "protonet.ProtoNet.xent_loss", "numpy.repeat", "protonet.ProtoNet.set_forward", "protonet.ProtoNet.set_forward", "range"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.set_forward", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.set_forward"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ",", "return_z", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Get the classification loss for Meta/LSL, where we compare prototypes\n        to query images.\n        \"\"\"", "\n", "y_query", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "y_query", "=", "y_query", ".", "cuda", "(", ")", "\n", "\n", "if", "return_z", ":", "\n", "            ", "scores", ",", "z_support", ",", "z_query", "=", "self", ".", "set_forward", "(", "x", ",", "return_z", "=", "True", ",", ")", "\n", "", "else", ":", "\n", "            ", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "\n", "", "loss", "=", "self", ".", "xent_loss", "(", "scores", ",", "y_query", ")", "\n", "if", "return_z", ":", "\n", "            ", "return", "loss", ",", "z_support", ",", "z_query", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.set_forward_loss_l3": [[479, 517], ["torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "protonet.ProtoNet.parse_feature", "z_query.contiguous().view", "lang[].contiguous().view", "lang_length[].contiguous().view", "protonet.ProtoNet.l3_model", "z_support_lang.unsqueeze().view.unsqueeze().view.unsqueeze().view", "z_support_lang.unsqueeze().view.unsqueeze().view.mean", "protonet.ProtoNet.score", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "protonet.ProtoNet.nll_loss", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "z_query.contiguous", "lang[].contiguous", "lang_length[].contiguous", "z_support_lang.unsqueeze().view.unsqueeze().view.unsqueeze", "numpy.repeat", "range"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.parse_feature", "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.score"], ["", "def", "set_forward_loss_l3", "(", "self", ",", "x", ",", "lang_all", ",", "return_z", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Get the classification loss for L3, where we compare queries to\n        groundtruth language.\n        \"\"\"", "\n", "y_query", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# Embed images", "\n", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", "=", "False", ")", "\n", "z_query_img", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "# Embed support lang", "\n", "lang", ",", "lang_length", "=", "lang_all", "\n", "lang_support", "=", "(", "\n", "lang", "[", ":", ",", ":", "self", ".", "n_support", "]", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "lang", ".", "shape", "[", "0", "]", "*", "self", ".", "n_support", ",", "-", "1", ")", "\n", ")", "\n", "lang_length_support", "=", "lang_length", "[", ":", ",", ":", "self", ".", "n_support", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "z_support_lang", "=", "self", ".", "l3_model", "(", "lang_support", ",", "lang_length_support", ")", "\n", "z_support_lang", "=", "z_support_lang", ".", "unsqueeze", "(", "1", ")", ".", "view", "(", "\n", "lang", ".", "shape", "[", "0", "]", ",", "self", ".", "n_support", ",", "-", "1", "\n", ")", "\n", "# Proto repr is the mean of the language associated with the support set", "\n", "z_proto_lang", "=", "z_support_lang", ".", "mean", "(", "1", ")", "\n", "\n", "# lang <-> img comparison", "\n", "scores", "=", "self", ".", "score", "(", "\n", "z_proto_lang", ",", "z_query_img", ",", "support_type", "=", "\"lang\"", ",", "query_type", "=", "\"img\"", "\n", ")", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "1", ")", "\n", "\n", "loss", "=", "self", ".", "nll_loss", "(", "scores", ",", "y_query", ")", "\n", "\n", "if", "return_z", ":", "\n", "            ", "return", "loss", ",", "z_support", ",", "z_query", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.set_lang_loss": [[518, 561], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "protonet.ProtoNet.view", "lang.view.view.view", "lang_mask.view.view.view", "lang_length.view.view.view", "protonet.ProtoNet.language_model", "hypo[].contiguous", "lang[].contiguous", "lang_mask[].contiguous", "hypo[].contiguous.view", "lang[].contiguous.long().view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.div.mean.view", "torch.div.mean.masked_fill_", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div.mean", "torch.div.mean", "torch.div.mean", "protonet.ProtoNet.class_average", "torch.div.mean.sum", "lang[].contiguous.long"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.class_average"], ["", "def", "set_lang_loss", "(", "\n", "self", ",", "z_support", ",", "z_query", ",", "lang", ",", "lang_length", ",", "lang_mask", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Compute the language decoding loss, used in both L3 and LSL.\n        \"\"\"", "\n", "assert", "self", ".", "language_model", ".", "proj_h", ".", "in_features", "==", "z_support", ".", "shape", "[", "2", "]", "\n", "\n", "z", "=", "torch", ".", "cat", "(", "(", "z_support", ",", "z_query", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "lang_supervision", "==", "\"class\"", ":", "\n", "            ", "z", "=", "self", ".", "class_average", "(", "z", ")", "\n", "\n", "# Flatten out meta classes", "\n", "", "n_way", "=", "z", ".", "shape", "[", "0", "]", "\n", "n_total", "=", "z", ".", "shape", "[", "1", "]", "\n", "z", "=", "z", ".", "view", "(", "n_way", "*", "n_total", ",", "-", "1", ")", "\n", "lang", "=", "lang", ".", "view", "(", "n_way", "*", "n_total", ",", "-", "1", ")", "\n", "lang_mask", "=", "lang_mask", ".", "view", "(", "n_way", "*", "n_total", ",", "-", "1", ")", "\n", "lang_length", "=", "lang_length", ".", "view", "(", "n_way", "*", "n_total", ")", "\n", "\n", "hyp_batch_size", "=", "z", ".", "shape", "[", "0", "]", "\n", "seq_len", "=", "lang", ".", "shape", "[", "1", "]", "\n", "\n", "hypo", "=", "self", ".", "language_model", "(", "z", ",", "lang", ",", "lang_length", ")", "\n", "\n", "# Predict all tokens besides start of sentence (which is already given)", "\n", "hypo_nofinal", "=", "hypo", "[", ":", ",", ":", "-", "1", "]", ".", "contiguous", "(", ")", "\n", "lang_nostart", "=", "lang", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "mask_nostart", "=", "lang_mask", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "hypo_nofinal_2d", "=", "hypo_nofinal", ".", "view", "(", "hyp_batch_size", "*", "(", "seq_len", "-", "1", ")", ",", "-", "1", ")", "\n", "lang_nostart_2d", "=", "lang_nostart", ".", "long", "(", ")", ".", "view", "(", "hyp_batch_size", "*", "(", "seq_len", "-", "1", ")", ")", "\n", "hypo_loss", "=", "F", ".", "cross_entropy", "(", "hypo_nofinal_2d", ",", "lang_nostart_2d", ",", "reduction", "=", "\"none\"", ")", "\n", "hypo_loss", "=", "hypo_loss", ".", "view", "(", "hyp_batch_size", ",", "(", "seq_len", "-", "1", ")", ")", "\n", "# Mask out sequences based on length", "\n", "hypo_loss", ".", "masked_fill_", "(", "mask_nostart", ",", "0.0", ")", "\n", "# Sum over timesteps / divide by length", "\n", "hypo_loss_per_sentence", "=", "torch", ".", "div", "(", "\n", "hypo_loss", ".", "sum", "(", "dim", "=", "1", ")", ",", "(", "lang_length", "-", "1", ")", ".", "float", "(", ")", "\n", ")", "\n", "hypo_loss", "=", "hypo_loss_per_sentence", ".", "mean", "(", ")", "\n", "\n", "return", "hypo_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.class_average": [[562, 570], ["z.mean", "z.mean.unsqueeze().expand", "z.mean.unsqueeze().expand.contiguous", "z.mean.unsqueeze"], "methods", ["None"], ["", "def", "class_average", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        Average representations for each class...then retile to make it the\n        same shape as z\n        \"\"\"", "\n", "z_class_mean", "=", "z", ".", "mean", "(", "dim", "=", "1", ")", "\n", "z_class_tiled", "=", "z_class_mean", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "*", "z", ".", "shape", ")", "\n", "return", "z_class_tiled", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.models.protonet.ProtoNet.save_debug": [[571, 624], ["os.path.join", "os.makedirs", "torch.softmax().cpu().numpy", "torch.softmax().cpu().numpy", "torch.softmax().cpu().numpy", "numpy.argmax", "numpy.repeat", "numpy.tile", "pandas.DataFrame.update", "pandas.DataFrame", "pandas.DataFrame.to_csv", "range", "str", "open", "f.write", "f.write", "range", "range", "os.path.join", "range", "range", "os.path.join", "torch.softmax().cpu", "torch.softmax().cpu", "torch.softmax().cpu", "range", "numpy.arange", "x_support[].cpu().numpy", "numpy.moveaxis", "PIL.Image.fromarray().save", "x_query[].cpu().numpy", "numpy.moveaxis", "PIL.Image.fromarray().save", "list", "os.path.join", "os.path.join", "torch.softmax", "torch.softmax", "torch.softmax", "x_support[].cpu", "PIL.Image.fromarray", "x_query[].cpu", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.lsl.utils.AverageMeter.update"], ["", "def", "save_debug", "(", "self", ",", "index", ",", "x", ",", "query_scores", ",", "text", ",", "debug_dir", ")", ":", "\n", "        ", "\"\"\"\n        For debugging, save support and 5 query images for the task into a\n        directory\n        \"\"\"", "\n", "task_dir", "=", "os", ".", "path", ".", "join", "(", "debug_dir", ",", "str", "(", "index", ")", ")", "\n", "os", ".", "makedirs", "(", "task_dir", ",", "exist_ok", "=", "True", ")", "\n", "# Save sampled text", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "task_dir", ",", "'samples.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\"\\n\"", ".", "join", "(", "list", "(", "text", ")", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "# Save original support images", "\n", "", "query_scores_normalized", "=", "F", ".", "softmax", "(", "query_scores", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "yhat", "=", "np", ".", "argmax", "(", "query_scores_normalized", ",", "axis", "=", "1", ")", "\n", "gt_class", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", "\n", "gt_index", "=", "np", ".", "tile", "(", "range", "(", "self", ".", "n_query", ")", ",", "self", ".", "n_way", ")", "\n", "query_scores_df", "=", "{", "\n", "\"p_{}\"", ".", "format", "(", "i", ")", ":", "query_scores_normalized", "[", ":", ",", "i", "]", "\n", "for", "i", "in", "range", "(", "query_scores_normalized", ".", "shape", "[", "1", "]", ")", "\n", "}", "\n", "query_scores_df", ".", "update", "(", "\n", "{", "\n", "\"y\"", ":", "gt_class", ",", "\n", "\"ny\"", ":", "gt_index", ",", "\n", "\"n\"", ":", "np", ".", "arange", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ")", ",", "\n", "\"yhat\"", ":", "yhat", ",", "\n", "}", "\n", ")", "\n", "# Check y_query and assign", "\n", "query_scores_df", "=", "pd", ".", "DataFrame", "(", "query_scores_df", ")", "\n", "query_scores_df", ".", "to_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "task_dir", ",", "\"query_predictions.csv\"", ")", ",", "index", "=", "False", "\n", ")", "\n", "# Save images", "\n", "x_support", "=", "x", "[", ":", ",", ":", "self", ".", "n_support", "]", "\n", "x_query", "=", "x", "[", ":", ",", "self", ".", "n_support", ":", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_way", ")", ":", "\n", "# Save support image", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "n_support", ")", ":", "\n", "                ", "xij_orig", "=", "x_support", "[", "i", ",", "j", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "xij_orig", "=", "(", "255", "*", "xij_orig", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "xij_orig", "=", "np", ".", "moveaxis", "(", "xij_orig", ",", "0", ",", "2", ")", "\n", "Image", ".", "fromarray", "(", "xij_orig", ",", "mode", "=", "\"RGB\"", ")", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "task_dir", ",", "\"support_{}_{}.png\"", ".", "format", "(", "i", ",", "j", ")", ")", "\n", ")", "\n", "# Save 5 query images each", "\n", "", "for", "qj", "in", "range", "(", "5", ")", ":", "\n", "                ", "qij_orig", "=", "x_query", "[", "i", ",", "qj", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "qij_orig", "=", "(", "255", "*", "qij_orig", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "qij_orig", "=", "np", ".", "moveaxis", "(", "qij_orig", ",", "0", ",", "2", ")", "\n", "Image", ".", "fromarray", "(", "qij_orig", ",", "mode", "=", "\"RGB\"", ")", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "task_dir", ",", "\"query_{}_{}.png\"", ".", "format", "(", "i", ",", "qj", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.additional_transforms.ImageJitter.__init__": [[19, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transformdict", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "\n", "(", "transformtypedict", "[", "k", "]", ",", "transformdict", "[", "k", "]", ")", "for", "k", "in", "transformdict", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.additional_transforms.ImageJitter.__call__": [[24, 33], ["torch.rand", "enumerate", "len", "transformer().enhance().convert", "transformer().enhance", "transformer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "img", "\n", "randtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "\n", "for", "i", ",", "(", "transformer", ",", "alpha", ")", "in", "enumerate", "(", "self", ".", "transforms", ")", ":", "\n", "            ", "r", "=", "alpha", "*", "(", "randtensor", "[", "i", "]", "*", "2.0", "-", "1.0", ")", "+", "1", "\n", "out", "=", "transformer", "(", "out", ")", ".", "enhance", "(", "r", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.filter_language": [[124, 163], ["set", "torch.ones_like", "range", "torch.ones_like", "range", "torch.ones_like", "new_bird_cap[].item", "w.item"], "function", ["None"], ["def", "filter_language", "(", "lang_tensor", ",", "language_filter", ",", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    Filter language, keeping or discarding color words\n\n    :param lang_tensor: torch.Tensor of shape (n_imgs, lang_per_img,\n        max_lang_len); language to be filtered\n    :param language_filter: either 'color' or 'nocolor'; what language to\n        filter out\n    :param vocab: the vocabulary (so we know what indexes to remove)\n\n    :returns: torch.Tensor of same shape as `lang_tensor` with either color or\n        non-color words removed\n    \"\"\"", "\n", "assert", "language_filter", "in", "[", "\"color\"", ",", "\"nocolor\"", "]", "\n", "\n", "cw", "=", "set", "(", "vocab", "[", "cw", "]", "for", "cw", "in", "COLOR_WORDS", "if", "cw", "in", "vocab", ")", "\n", "\n", "new_lang_tensor", "=", "torch", ".", "ones_like", "(", "lang_tensor", ")", "\n", "for", "bird_caps_i", "in", "range", "(", "lang_tensor", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "bird_caps", "=", "lang_tensor", "[", "bird_caps_i", "]", "\n", "new_bird_caps", "=", "torch", ".", "ones_like", "(", "bird_caps", ")", "\n", "for", "bird_cap_i", "in", "range", "(", "bird_caps", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "bird_cap", "=", "bird_caps", "[", "bird_cap_i", "]", "\n", "new_bird_cap", "=", "torch", ".", "ones_like", "(", "bird_cap", ")", "\n", "new_w_i", "=", "0", "\n", "for", "w", "in", "bird_cap", ":", "\n", "                ", "is_cw", "=", "w", ".", "item", "(", ")", "in", "cw", "\n", "if", "(", "language_filter", "==", "\"color\"", "and", "is_cw", ")", "or", "(", "\n", "language_filter", "==", "\"nocolor\"", "and", "not", "is_cw", "\n", ")", ":", "\n", "                    ", "new_bird_cap", "[", "new_w_i", "]", "=", "w", "\n", "new_w_i", "+=", "1", "\n", "", "", "if", "new_bird_cap", "[", "0", "]", ".", "item", "(", ")", "==", "1", ":", "\n", "# FIXME: Here we're just choosing an arbitrary randomly", "\n", "# mispelled token; make a proper UNK token.", "\n", "                ", "new_bird_cap", "[", "0", "]", "=", "5724", "\n", "", "new_bird_caps", "[", "bird_cap_i", "]", "=", "new_bird_cap", "\n", "", "new_lang_tensor", "[", "bird_caps_i", "]", "=", "new_bird_caps", "\n", "", "return", "new_lang_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.shuffle_language": [[165, 194], ["torch.ones_like", "range", "torch.ones_like", "range", "torch.ones_like", "bird_cap.numpy", "numpy.random.shuffle", "torch.tensor", "bird_cap_list.append", "len"], "function", ["None"], ["", "def", "shuffle_language", "(", "lang_tensor", ")", ":", "\n", "    ", "\"\"\"\n    Scramble words in language\n\n    :param lang_tensor: torch.Tensor of shape (n_img, lang_per_img, max_lang_len)\n\n    :returns: torch.Tensor of same shape, but with words randomly scrambled\n    \"\"\"", "\n", "new_lang_tensor", "=", "torch", ".", "ones_like", "(", "lang_tensor", ")", "\n", "for", "bird_caps_i", "in", "range", "(", "lang_tensor", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "bird_caps", "=", "lang_tensor", "[", "bird_caps_i", "]", "\n", "new_bird_caps", "=", "torch", ".", "ones_like", "(", "bird_caps", ")", "\n", "for", "bird_cap_i", "in", "range", "(", "bird_caps", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "bird_cap", "=", "bird_caps", "[", "bird_cap_i", "]", "\n", "new_bird_cap", "=", "torch", ".", "ones_like", "(", "bird_cap", ")", "\n", "bird_cap_list", "=", "[", "]", "\n", "for", "w", "in", "bird_cap", ".", "numpy", "(", ")", ":", "\n", "                ", "if", "w", "!=", "1", ":", "\n", "                    ", "bird_cap_list", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "", "", "random", ".", "shuffle", "(", "bird_cap_list", ")", "\n", "bird_cap_shuf", "=", "torch", ".", "tensor", "(", "\n", "bird_cap_list", ",", "dtype", "=", "new_bird_cap", ".", "dtype", ",", "requires_grad", "=", "False", "\n", ")", "\n", "new_bird_cap", "[", ":", "len", "(", "bird_cap_list", ")", "]", "=", "bird_cap_shuf", "\n", "new_bird_caps", "[", "bird_cap_i", "]", "=", "new_bird_cap", "\n", "", "new_lang_tensor", "[", "bird_caps_i", "]", "=", "new_bird_caps", "\n", "", "return", "new_lang_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.get_lang_lengths": [[196, 207], ["torch.sum"], "function", ["None"], ["", "def", "get_lang_lengths", "(", "lang_tensor", ")", ":", "\n", "    ", "\"\"\"\n    Get lengths of each caption\n\n    :param lang_tensor: torch.Tensor of shape (n_img, lang_per_img, max_len)\n    :returns: torch.Tensor of shape (n_img, lang_per_img)\n    \"\"\"", "\n", "max_lang_len", "=", "lang_tensor", ".", "shape", "[", "2", "]", "\n", "n_pad", "=", "torch", ".", "sum", "(", "lang_tensor", "==", "0", ",", "dim", "=", "2", ")", "\n", "lang_lengths", "=", "max_lang_len", "-", "n_pad", "\n", "return", "lang_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.get_lang_masks": [[209, 224], ["torch.ones", "range", "range"], "function", ["None"], ["", "def", "get_lang_masks", "(", "lang_lengths", ",", "max_len", "=", "32", ")", ":", "\n", "    ", "\"\"\"\n    Given lang lengths, convert to masks\n\n    :param lang_lengths: torch.tensor of shape (n_imgs, lang_per_img)\n\n    returns: torch.BoolTensor of shape (n_imgs, lang_per_img, max_len), binary\n        mask with 0s in token spots and 1s in padding spots\n    \"\"\"", "\n", "mask", "=", "torch", ".", "ones", "(", "lang_lengths", ".", "shape", "+", "(", "max_len", ",", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "for", "i", "in", "range", "(", "lang_lengths", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "lang_lengths", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "this_ll", "=", "lang_lengths", "[", "i", ",", "j", "]", "\n", "mask", "[", "i", ",", "j", ",", ":", "this_ll", "]", "=", "0", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.add_sos_eos": [[226, 254], ["torch.zeros", "range", "range"], "function", ["None"], ["", "def", "add_sos_eos", "(", "lang_tensor", ",", "lang_lengths", ",", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    Pad language tensors\n\n    :param lang: torch.Tensor of shape (n_imgs, n_lang_per_img, max_len)\n    :param lang_lengths: torch.Tensor of shape (n_imgs, n_lang_per_img)\n    :param vocab: dictionary from words -> idxs\n\n    :returns: (lang, lang_lengths) where lang has SOS and EOS tokens added, and\n        lang_lengths have all been increased by 2 (to account for SOS/EOS)\n    \"\"\"", "\n", "sos_idx", "=", "vocab", "[", "SOS_TOKEN", "]", "\n", "eos_idx", "=", "vocab", "[", "EOS_TOKEN", "]", "\n", "lang_tensor_padded", "=", "torch", ".", "zeros", "(", "\n", "lang_tensor", ".", "shape", "[", "0", "]", ",", "\n", "lang_tensor", ".", "shape", "[", "1", "]", ",", "\n", "lang_tensor", ".", "shape", "[", "2", "]", "+", "2", ",", "\n", "dtype", "=", "torch", ".", "int64", ",", "\n", ")", "\n", "lang_tensor_padded", "[", ":", ",", ":", ",", "0", "]", "=", "sos_idx", "\n", "lang_tensor_padded", "[", ":", ",", ":", ",", "1", ":", "-", "1", "]", "=", "lang_tensor", "\n", "for", "i", "in", "range", "(", "lang_tensor_padded", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "lang_tensor_padded", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "ll", "=", "lang_lengths", "[", "i", ",", "j", "]", "\n", "lang_tensor_padded", "[", "\n", "i", ",", "j", ",", "ll", "+", "1", "\n", "]", "=", "eos_idx", "# + 1 accounts for sos token already there", "\n", "", "", "return", "lang_tensor_padded", ",", "lang_lengths", "+", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.shuffle_lang_class": [[256, 285], ["numpy.arange", "numpy.random.shuffle", "len", "nlang.append", "nlang_length.append", "nlang_mask.append"], "function", ["None"], ["", "def", "shuffle_lang_class", "(", "lang", ",", "lang_length", ",", "lang_mask", ")", ":", "\n", "    ", "\"\"\"\n    For each class, shuffle captions across images\n\n    :param lang: dict from class -> list of languages for that class\n    :param lang_length: dict from class -> list of language lengths for that class\n    :param lang_mask: list of language masks\n\n    :returns: (new_lang, new_lang_length, new_lang_mask): tuple of new language\n        dictionaries representing the modified language\n    \"\"\"", "\n", "new_lang", "=", "{", "}", "\n", "new_lang_length", "=", "{", "}", "\n", "new_lang_mask", "=", "{", "}", "\n", "for", "y", "in", "lang", ":", "\n", "# FIXME: Make this seedable", "\n", "        ", "img_range", "=", "np", ".", "arange", "(", "len", "(", "lang", "[", "y", "]", ")", ")", "\n", "random", ".", "shuffle", "(", "img_range", ")", "\n", "nlang", "=", "[", "]", "\n", "nlang_length", "=", "[", "]", "\n", "nlang_mask", "=", "[", "]", "\n", "for", "lang_i", "in", "img_range", ":", "\n", "            ", "nlang", ".", "append", "(", "lang", "[", "y", "]", "[", "lang_i", "]", ")", "\n", "nlang_length", ".", "append", "(", "lang_length", "[", "y", "]", "[", "lang_i", "]", ")", "\n", "nlang_mask", ".", "append", "(", "lang_mask", "[", "y", "]", "[", "lang_i", "]", ")", "\n", "", "new_lang", "[", "y", "]", "=", "nlang", "\n", "new_lang_length", "[", "y", "]", "=", "nlang_length", "\n", "new_lang_mask", "[", "y", "]", "=", "nlang_mask", "\n", "", "return", "new_lang", ",", "new_lang_length", ",", "new_lang_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.shuffle_all_class": [[287, 311], ["numpy.random.shuffle", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "zip", "all", "new_lang[].append", "new_lang_length[].append", "new_lang_mask[].append", "dict", "dict", "dict", "lang.keys", "range", "len", "len", "lang.keys", "len"], "function", ["None"], ["", "def", "shuffle_all_class", "(", "lang", ",", "lang_length", ",", "lang_mask", ")", ":", "\n", "    ", "\"\"\"\n    Shuffle captions completely randomly across all images and classes\n\n    :param lang: dict from class -> list of languages for that class\n    :param lang_length: dict from class -> list of language lengths for that class\n    :param lang_mask: list of language masks\n\n    :returns: (new_lang, new_lang_length, new_lang_mask): tuple of new language\n        dictionaries representing the modified language\n    \"\"\"", "\n", "lens", "=", "[", "[", "(", "m", ",", "j", ")", "for", "j", "in", "range", "(", "len", "(", "lang", "[", "m", "]", ")", ")", "]", "for", "m", "in", "lang", ".", "keys", "(", ")", "]", "\n", "lens", "=", "[", "item", "for", "sublist", "in", "lens", "for", "item", "in", "sublist", "]", "\n", "shuffled_lens", "=", "lens", "[", ":", "]", "\n", "random", ".", "shuffle", "(", "shuffled_lens", ")", "\n", "new_lang", "=", "defaultdict", "(", "list", ")", "\n", "new_lang_length", "=", "defaultdict", "(", "list", ")", "\n", "new_lang_mask", "=", "defaultdict", "(", "list", ")", "\n", "for", "(", "m", ",", "_", ")", ",", "(", "new_m", ",", "new_i", ")", "in", "zip", "(", "lens", ",", "shuffled_lens", ")", ":", "\n", "        ", "new_lang", "[", "m", "]", ".", "append", "(", "lang", "[", "new_m", "]", "[", "new_i", "]", ")", "\n", "new_lang_length", "[", "m", "]", ".", "append", "(", "lang_length", "[", "new_m", "]", "[", "new_i", "]", ")", "\n", "new_lang_mask", "[", "m", "]", ".", "append", "(", "lang_mask", "[", "new_m", "]", "[", "new_i", "]", ")", "\n", "", "assert", "all", "(", "len", "(", "new_lang", "[", "m", "]", ")", "==", "len", "(", "lang", "[", "m", "]", ")", "for", "m", "in", "lang", ".", "keys", "(", ")", ")", "\n", "return", "dict", "(", "new_lang", ")", ",", "dict", "(", "new_lang_length", ")", ",", "dict", "(", "new_lang_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.load_vocab": [[313, 329], ["torchfile.load", "len", "len", "os.path.join", "k.decode", "torchfile.load.items", "torchfile.load.items"], "function", ["None"], ["", "def", "load_vocab", "(", "lang_dir", ")", ":", "\n", "    ", "\"\"\"\n    Load torch-serialized vocabulary from the lang dir\n\n    :param: lang_dir: str, path to language directory\n    :returns: dictionary from words -> idxs\n    \"\"\"", "\n", "vocab", "=", "torchfile", ".", "load", "(", "os", ".", "path", ".", "join", "(", "lang_dir", ",", "\"vocab_c10.t7\"", ")", ")", "\n", "vocab", "=", "{", "k", ":", "v", "-", "1", "for", "k", ",", "v", "in", "vocab", ".", "items", "(", ")", "}", "# Decrement vocab", "\n", "vocab", "=", "{", "k", ".", "decode", "(", "\"utf-8\"", ")", ":", "v", "for", "k", ",", "v", "in", "vocab", ".", "items", "(", ")", "}", "# Unicode", "\n", "# Add SOS/EOS tokens", "\n", "sos_idx", "=", "len", "(", "vocab", ")", "\n", "vocab", "[", "SOS_TOKEN", "]", "=", "sos_idx", "\n", "eos_idx", "=", "len", "(", "vocab", ")", "\n", "vocab", "[", "EOS_TOKEN", "]", "=", "eos_idx", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.glove_init": [[331, 367], ["numpy.zeros", "sorted", "torch.as_tensor", "spacy.load", "vocab.items", "spacy.load", "len", "numpy.zeros", "spacy.load."], "function", ["None"], ["", "def", "glove_init", "(", "vocab", ",", "emb_size", "=", "300", ")", ":", "\n", "    ", "\"\"\"\n    Initialize vocab with glove vectors. Requires spacy and en_vectors_web_lg\n    spacy model\n\n    :param vocab: dict from words -> idxs\n    :param emb_size: int, size of embeddings (should be 300 for spacy glove\n        vectors)\n\n    :returns: torch.FloatTensor of size (len(vocab), emb_size), with glove\n        embedding if exists, else zeros\n    \"\"\"", "\n", "import", "spacy", "\n", "\n", "try", ":", "\n", "        ", "nlp", "=", "spacy", ".", "load", "(", "\"en_vectors_web_lg\"", ",", "disable", "=", "[", "\"tagger\"", ",", "\"parser\"", ",", "\"ner\"", "]", ")", "\n", "", "except", "OSError", ":", "\n", "# Try loading for current directory (codalab)", "\n", "        ", "nlp", "=", "spacy", ".", "load", "(", "\n", "\"./en_vectors_web_lg/en_vectors_web_lg-2.1.0/\"", ",", "\n", "disable", "=", "[", "\"tagger\"", ",", "\"parser\"", ",", "\"ner\"", "]", ",", "\n", ")", "\n", "\n", "", "vecs", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "emb_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vec_ids_sort", "=", "sorted", "(", "vocab", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "sos_idx", "=", "vocab", "[", "SOS_TOKEN", "]", "\n", "eos_idx", "=", "vocab", "[", "EOS_TOKEN", "]", "\n", "pad_idx", "=", "vocab", "[", "PAD_TOKEN", "]", "\n", "for", "vec", ",", "vecid", "in", "vec_ids_sort", ":", "\n", "        ", "if", "vecid", "in", "(", "pad_idx", ",", "sos_idx", ",", "eos_idx", ")", ":", "\n", "            ", "v", "=", "np", ".", "zeros", "(", "emb_size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "v", "=", "nlp", "(", "vec", ")", "[", "0", "]", ".", "vector", "\n", "", "vecs", "[", "vecid", "]", "=", "v", "\n", "", "vecs", "=", "torch", ".", "as_tensor", "(", "vecs", ")", "\n", "return", "vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.get_special_indices": [[369, 381], ["None"], "function", ["None"], ["", "def", "get_special_indices", "(", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    Get indices of special items from vocab.\n    :param vocab: dictionary from words -> idxs\n    :returns: dictionary from {sos_index, eos_index, pad_index} -> tokens\n    \"\"\"", "\n", "return", "{", "\n", "name", ":", "vocab", "[", "token", "]", "\n", "for", "name", ",", "token", "in", "[", "\n", "(", "\"sos_index\"", ",", "SOS_TOKEN", ")", ",", "\n", "(", "\"eos_index\"", ",", "EOS_TOKEN", ")", ",", "\n", "(", "\"pad_index\"", ",", "PAD_TOKEN", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.recycle_lang": [[385, 398], ["range", "len", "new_langs.append"], "function", ["None"], ["", "def", "recycle_lang", "(", "langs", ",", "max_lang", ")", ":", "\n", "    ", "\"\"\"\n    Given a limited amount of language, reuse `max_lang` times\n    :param langs: list of languages\n    :param max_lang: how long the full language tensor should be\n\n    :returns: new_langs, a list of length `max_lang` created by cycling through\n        `langs`\n    \"\"\"", "\n", "new_langs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "langs", ")", ")", ":", "\n", "        ", "new_langs", ".", "append", "(", "langs", "[", "i", "%", "max_lang", "]", ")", "\n", "", "return", "new_langs", "\n", "", ""]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.SimpleDataset.__init__": [[31, 36], ["open", "json.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_file", ",", "transform", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "with", "open", "(", "data_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.SimpleDataset.__getitem__": [[37, 43], ["os.path.join", "dataset.load_image", "dataset.SimpleDataset.transform", "dataset.SimpleDataset.target_transform"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.load_image"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "meta", "[", "\"image_names\"", "]", "[", "i", "]", ")", "\n", "img", "=", "load_image", "(", "image_path", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "meta", "[", "\"image_labels\"", "]", "[", "i", "]", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.SimpleDataset.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "meta", "[", "\"image_names\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.SetDataset.__init__": [[49, 252], ["numpy.unique().tolist", "enumerate", "zip", "dict", "enumerate", "open", "json.load", "ValueError", "NotImplementedError", "os.path.join", "torch.from_numpy().long", "lang_utils.shuffle_language.transpose", "lang_utils.get_lang_lengths", "lang_utils.add_sos_eos", "lang_utils.get_lang_masks", "lang_utils.shuffle_lang_class", "lang_utils.shuffle_all_class", "dataset.SetDataset.sub_meta.keys", "dataset.SetDataset.sub_meta.keys", "dataset.SubDataset", "dataset.SetDataset.sub_dataloader.append", "numpy.unique", "len", "ValueError", "label_name.split", "len", "lang_utils.filter_language", "lang_utils.shuffle_language", "os.path.join", "sorted", "enumerate", "dataset.SetDataset.sub_meta[].append", "dataset.SetDataset.sub_meta_lang[].append", "dataset.SetDataset.sub_meta_lang_length[].append", "dataset.SetDataset.sub_meta_lang_mask[].append", "lang_utils.recycle_lang", "lang_utils.recycle_lang", "lang_utils.recycle_lang", "torch.utils.data.DataLoader", "os.listdir", "x.startswith", "torch.from_numpy", "os.path.splitext", "int", "len", "os.path.join", "torchfile.load", "os.path.basename", "os.path.splitext", "glob.glob", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.get_lang_lengths", "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.add_sos_eos", "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.get_lang_masks", "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.shuffle_lang_class", "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.shuffle_all_class", "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.filter_language", "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.shuffle_language", "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.recycle_lang", "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.recycle_lang", "home.repos.pwc.inspect_result.jayelm_lsl.data.lang_utils.recycle_lang"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "name", ",", "\n", "data_file", ",", "\n", "batch_size", ",", "\n", "transform", ",", "\n", "args", "=", "None", ",", "\n", "lang_dir", "=", "None", ",", "\n", "vocab", "=", "None", ",", "\n", "max_class", "=", "None", ",", "\n", "max_img_per_class", "=", "None", ",", "\n", "max_lang_per_class", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "with", "open", "(", "data_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "args", "=", "args", "\n", "self", ".", "max_class", "=", "max_class", "\n", "self", ".", "max_img_per_class", "=", "max_img_per_class", "\n", "self", ".", "max_lang_per_class", "=", "max_lang_per_class", "\n", "\n", "if", "not", "(", "1", "<=", "args", ".", "n_caption", "<=", "10", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid # captions {}\"", ".", "format", "(", "args", ".", "n_caption", ")", ")", "\n", "\n", "", "self", ".", "cl_list", "=", "np", ".", "unique", "(", "self", ".", "meta", "[", "\"image_labels\"", "]", ")", ".", "tolist", "(", ")", "\n", "\n", "if", "self", ".", "max_class", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "max_class", ">", "len", "(", "self", ".", "cl_list", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"max_class set to {} but only {} classes in {}\"", ".", "format", "(", "\n", "self", ".", "max_class", ",", "len", "(", "self", ".", "cl_list", ")", ",", "data_file", "\n", ")", "\n", ")", "\n", "", "self", ".", "cl_list", "=", "self", ".", "cl_list", "[", ":", "self", ".", "max_class", "]", "\n", "\n", "", "if", "args", ".", "language_filter", "not", "in", "[", "\"all\"", ",", "\"color\"", ",", "\"nocolor\"", "]", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"language_filter = {}\"", ".", "format", "(", "args", ".", "language_filter", ")", "\n", ")", "\n", "\n", "", "self", ".", "sub_meta_lang", "=", "{", "}", "\n", "self", ".", "sub_meta_lang_length", "=", "{", "}", "\n", "self", ".", "sub_meta_lang_mask", "=", "{", "}", "\n", "self", ".", "sub_meta", "=", "{", "}", "\n", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "self", ".", "sub_meta", "[", "cl", "]", "=", "[", "]", "\n", "self", ".", "sub_meta_lang", "[", "cl", "]", "=", "[", "]", "\n", "self", ".", "sub_meta_lang_length", "[", "cl", "]", "=", "[", "]", "\n", "self", ".", "sub_meta_lang_mask", "[", "cl", "]", "=", "[", "]", "\n", "\n", "# Load language and mapping from image names -> lang idx", "\n", "", "self", ".", "lang", "=", "{", "}", "\n", "self", ".", "lang_lengths", "=", "{", "}", "\n", "self", ".", "lang_masks", "=", "{", "}", "\n", "self", ".", "image_name_idx", "=", "{", "}", "\n", "for", "cln", ",", "label_name", "in", "enumerate", "(", "self", ".", "meta", "[", "\"label_names\"", "]", ")", ":", "\n", "# Use the numeric class id instead of label name due to", "\n", "# inconsistencies", "\n", "            ", "digits", "=", "label_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "matching_names", "=", "[", "\n", "x", "\n", "for", "x", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "lang_dir", ",", "\"word_c10\"", ")", ")", "\n", "if", "x", ".", "startswith", "(", "digits", ")", "\n", "]", "\n", "assert", "len", "(", "matching_names", ")", "==", "1", ",", "matching_names", "\n", "label_file", "=", "os", ".", "path", ".", "join", "(", "lang_dir", ",", "\"word_c10\"", ",", "matching_names", "[", "0", "]", ")", "\n", "lang_tensor", "=", "torch", ".", "from_numpy", "(", "torchfile", ".", "load", "(", "label_file", ")", ")", ".", "long", "(", ")", "\n", "# Make words last dim", "\n", "lang_tensor", "=", "lang_tensor", ".", "transpose", "(", "2", ",", "1", ")", "\n", "lang_tensor", "=", "lang_tensor", "-", "1", "# XXX: Decrement language by 1 upon load", "\n", "\n", "if", "(", "\n", "self", ".", "args", ".", "language_filter", "==", "\"color\"", "\n", "or", "self", ".", "args", ".", "language_filter", "==", "\"nocolor\"", "\n", ")", ":", "\n", "                ", "lang_tensor", "=", "lang_utils", ".", "filter_language", "(", "\n", "lang_tensor", ",", "self", ".", "args", ".", "language_filter", ",", "vocab", "\n", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "shuffle_lang", ":", "\n", "                ", "lang_tensor", "=", "lang_utils", ".", "shuffle_language", "(", "lang_tensor", ")", "\n", "\n", "", "lang_lengths", "=", "lang_utils", ".", "get_lang_lengths", "(", "lang_tensor", ")", "\n", "\n", "# Add start and end of sentence tokens to language", "\n", "lang_tensor", ",", "lang_lengths", "=", "lang_utils", ".", "add_sos_eos", "(", "\n", "lang_tensor", ",", "lang_lengths", ",", "vocab", "\n", ")", "\n", "lang_masks", "=", "lang_utils", ".", "get_lang_masks", "(", "\n", "lang_lengths", ",", "max_len", "=", "lang_tensor", ".", "shape", "[", "2", "]", "\n", ")", "\n", "\n", "self", ".", "lang", "[", "label_name", "]", "=", "lang_tensor", "\n", "self", ".", "lang_lengths", "[", "label_name", "]", "=", "lang_lengths", "\n", "self", ".", "lang_masks", "[", "label_name", "]", "=", "lang_masks", "\n", "\n", "# Give images their numeric ids according to alphabetical order", "\n", "if", "self", ".", "name", "==", "\"CUB\"", ":", "\n", "                ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "lang_dir", ",", "\"text_c10\"", ",", "label_name", ",", "\"*.txt\"", ")", "\n", "sorted_imgs", "=", "sorted", "(", "\n", "[", "\n", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "i", ")", ")", "[", "0", "]", "\n", "for", "i", "in", "glob", ".", "glob", "(", "img_dir", ")", "\n", "]", "\n", ")", "\n", "for", "i", ",", "img_fname", "in", "enumerate", "(", "sorted_imgs", ")", ":", "\n", "                    ", "self", ".", "image_name_idx", "[", "img_fname", "]", "=", "i", "\n", "\n", "", "", "", "for", "x", ",", "y", "in", "zip", "(", "self", ".", "meta", "[", "\"image_names\"", "]", ",", "self", ".", "meta", "[", "\"image_labels\"", "]", ")", ":", "\n", "            ", "if", "y", "in", "self", ".", "sub_meta", ":", "\n", "                ", "self", ".", "sub_meta", "[", "y", "]", ".", "append", "(", "x", ")", "\n", "label_name", "=", "self", ".", "meta", "[", "\"label_names\"", "]", "[", "y", "]", "\n", "\n", "image_basename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", "\n", "if", "self", ".", "name", "==", "\"CUB\"", ":", "\n", "                    ", "image_lang_idx", "=", "self", ".", "image_name_idx", "[", "image_basename", "]", "\n", "", "else", ":", "\n", "                    ", "image_lang_idx", "=", "int", "(", "image_basename", "[", "-", "1", "]", ")", "\n", "\n", "", "captions", "=", "self", ".", "lang", "[", "label_name", "]", "[", "image_lang_idx", "]", "\n", "lengths", "=", "self", ".", "lang_lengths", "[", "label_name", "]", "[", "image_lang_idx", "]", "\n", "masks", "=", "self", ".", "lang_masks", "[", "label_name", "]", "[", "image_lang_idx", "]", "\n", "\n", "self", ".", "sub_meta_lang", "[", "y", "]", ".", "append", "(", "captions", ")", "\n", "self", ".", "sub_meta_lang_length", "[", "y", "]", ".", "append", "(", "lengths", ")", "\n", "self", ".", "sub_meta_lang_mask", "[", "y", "]", ".", "append", "(", "masks", ")", "\n", "", "else", ":", "\n", "                ", "assert", "self", ".", "max_class", "is", "not", "None", "\n", "\n", "", "", "if", "self", ".", "args", ".", "scramble_lang", ":", "\n", "# For each class, shuffle captions for each image", "\n", "            ", "(", "\n", "self", ".", "sub_meta_lang", ",", "\n", "self", ".", "sub_meta_lang_length", ",", "\n", "self", ".", "sub_meta_lang_mask", ",", "\n", ")", "=", "lang_utils", ".", "shuffle_lang_class", "(", "\n", "self", ".", "sub_meta_lang", ",", "self", ".", "sub_meta_lang_length", ",", "self", ".", "sub_meta_lang_mask", "\n", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "scramble_lang_class", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "self", ".", "args", ".", "scramble_all", ":", "\n", "# Shuffle captions completely randomly", "\n", "            ", "(", "\n", "self", ".", "sub_meta_lang", ",", "\n", "self", ".", "sub_meta_lang_length", ",", "\n", "self", ".", "sub_meta_lang_mask", ",", "\n", ")", "=", "lang_utils", ".", "shuffle_all_class", "(", "\n", "self", ".", "sub_meta_lang", ",", "self", ".", "sub_meta_lang_length", ",", "self", ".", "sub_meta_lang_mask", "\n", ")", "\n", "\n", "", "if", "self", ".", "max_img_per_class", "is", "not", "None", ":", "\n", "# Trim number of images available per class", "\n", "            ", "for", "cl", "in", "self", ".", "sub_meta", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "sub_meta", "[", "cl", "]", "=", "self", ".", "sub_meta", "[", "cl", "]", "[", ":", "self", ".", "max_img_per_class", "]", "\n", "self", ".", "sub_meta_lang", "[", "cl", "]", "=", "self", ".", "sub_meta_lang", "[", "cl", "]", "[", "\n", ":", "self", ".", "max_img_per_class", "\n", "]", "\n", "self", ".", "sub_meta_lang_length", "[", "cl", "]", "=", "self", ".", "sub_meta_lang_length", "[", "cl", "]", "[", "\n", ":", "self", ".", "max_img_per_class", "\n", "]", "\n", "self", ".", "sub_meta_lang_mask", "[", "cl", "]", "=", "self", ".", "sub_meta_lang_mask", "[", "cl", "]", "[", "\n", ":", "self", ".", "max_img_per_class", "\n", "]", "\n", "\n", "", "", "if", "self", ".", "max_lang_per_class", "is", "not", "None", ":", "\n", "# Trim language available for each class; recycle language if not enough", "\n", "            ", "for", "cl", "in", "self", ".", "sub_meta", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "sub_meta_lang", "[", "cl", "]", "=", "lang_utils", ".", "recycle_lang", "(", "\n", "self", ".", "sub_meta_lang", "[", "cl", "]", ",", "self", ".", "max_lang_per_class", "\n", ")", "\n", "self", ".", "sub_meta_lang_length", "[", "cl", "]", "=", "lang_utils", ".", "recycle_lang", "(", "\n", "self", ".", "sub_meta_lang_length", "[", "cl", "]", ",", "self", ".", "max_lang_per_class", "\n", ")", "\n", "self", ".", "sub_meta_lang_mask", "[", "cl", "]", "=", "lang_utils", ".", "recycle_lang", "(", "\n", "self", ".", "sub_meta_lang_mask", "[", "cl", "]", ",", "self", ".", "max_lang_per_class", "\n", ")", "\n", "\n", "", "", "self", ".", "sub_dataloader", "=", "[", "]", "\n", "sub_data_loader_params", "=", "dict", "(", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "# use main thread only or may receive multiple batches", "\n", "pin_memory", "=", "False", ",", "\n", ")", "\n", "for", "i", ",", "cl", "in", "enumerate", "(", "self", ".", "cl_list", ")", ":", "\n", "            ", "sub_dataset", "=", "SubDataset", "(", "\n", "self", ".", "name", ",", "\n", "self", ".", "sub_meta", "[", "cl", "]", ",", "\n", "cl", ",", "\n", "sub_meta_lang", "=", "self", ".", "sub_meta_lang", "[", "cl", "]", ",", "\n", "sub_meta_lang_length", "=", "self", ".", "sub_meta_lang_length", "[", "cl", "]", ",", "\n", "sub_meta_lang_mask", "=", "self", ".", "sub_meta_lang_mask", "[", "cl", "]", ",", "\n", "transform", "=", "transform", ",", "\n", "n_caption", "=", "self", ".", "args", ".", "n_caption", ",", "\n", "args", "=", "self", ".", "args", ",", "\n", "max_lang_per_class", "=", "self", ".", "max_lang_per_class", ",", "\n", ")", "\n", "self", ".", "sub_dataloader", ".", "append", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sub_dataset", ",", "**", "sub_data_loader_params", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.SetDataset.__getitem__": [[254, 256], ["next", "iter"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "next", "(", "iter", "(", "self", ".", "sub_dataloader", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.SetDataset.__len__": [[257, 259], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.SubDataset.__init__": [[262, 293], ["torchvision.ToTensor", "dict", "ValueError", "os.path.split", "numpy.load", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "name", ",", "\n", "sub_meta", ",", "\n", "cl", ",", "\n", "sub_meta_lang", "=", "None", ",", "\n", "sub_meta_lang_length", "=", "None", ",", "\n", "sub_meta_lang_mask", "=", "None", ",", "\n", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "target_transform", "=", "identity", ",", "\n", "n_caption", "=", "10", ",", "\n", "args", "=", "None", ",", "\n", "max_lang_per_class", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "sub_meta", "=", "sub_meta", "\n", "self", ".", "sub_meta_lang", "=", "sub_meta_lang", "\n", "self", ".", "sub_meta_lang_length", "=", "sub_meta_lang_length", "\n", "self", ".", "sub_meta_lang_mask", "=", "sub_meta_lang_mask", "\n", "self", ".", "cl", "=", "cl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "if", "not", "(", "1", "<=", "n_caption", "<=", "10", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid # captions {}\"", ".", "format", "(", "n_caption", ")", ")", "\n", "", "self", ".", "n_caption", "=", "n_caption", "\n", "cl_path", "=", "os", ".", "path", ".", "split", "(", "self", ".", "sub_meta", "[", "0", "]", ")", "[", "0", "]", "\n", "self", ".", "img", "=", "dict", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "cl_path", ",", "\"img.npz\"", ")", ")", ")", "\n", "\n", "# Used if sampling from class", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "max_lang_per_class", "=", "max_lang_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.SubDataset.__getitem__": [[294, 320], ["dataset.SubDataset.transform", "dataset.SubDataset.target_transform", "numpy.random.randint", "numpy.random.randint", "min", "len", "min", "len", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "image_path", "=", "self", ".", "sub_meta", "[", "i", "]", "\n", "img", "=", "self", ".", "img", "[", "image_path", "]", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "cl", ")", "\n", "\n", "if", "self", ".", "n_caption", "==", "1", ":", "\n", "            ", "lang_idx", "=", "0", "\n", "", "else", ":", "\n", "            ", "lang_idx", "=", "random", ".", "randint", "(", "min", "(", "self", ".", "n_caption", ",", "len", "(", "self", ".", "sub_meta_lang", "[", "i", "]", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "sample_class_lang", ":", "\n", "# Sample from all language, rather than the ith image", "\n", "            ", "if", "self", ".", "max_lang_per_class", "is", "None", ":", "\n", "                ", "max_i", "=", "len", "(", "self", ".", "sub_meta_lang", ")", "\n", "", "else", ":", "\n", "                ", "max_i", "=", "min", "(", "self", ".", "max_lang_per_class", ",", "len", "(", "self", ".", "sub_meta_lang", ")", ")", "\n", "", "which_img_lang_i", "=", "random", ".", "randint", "(", "0", ",", "max_i", ")", "\n", "", "else", ":", "\n", "            ", "which_img_lang_i", "=", "i", "\n", "\n", "", "lang", "=", "self", ".", "sub_meta_lang", "[", "which_img_lang_i", "]", "[", "lang_idx", "]", "\n", "lang_length", "=", "self", ".", "sub_meta_lang_length", "[", "which_img_lang_i", "]", "[", "lang_idx", "]", "\n", "lang_mask", "=", "self", ".", "sub_meta_lang_mask", "[", "which_img_lang_i", "]", "[", "lang_idx", "]", "\n", "\n", "return", "img", ",", "target", ",", "(", "lang", ",", "lang_length", ",", "lang_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.SubDataset.__len__": [[321, 323], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.EpisodicBatchSampler.__init__": [[326, 330], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_way", ",", "n_episodes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.EpisodicBatchSampler.__len__": [[331, 333], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.EpisodicBatchSampler.__iter__": [[334, 337], ["range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "            ", "yield", "torch", ".", "randperm", "(", "self", ".", "n_classes", ")", "[", ":", "self", ".", "n_way", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.identity": [[21, 23], ["None"], "function", ["None"], ["def", "identity", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.dataset.load_image": [[25, 28], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "load_image", "(", "image_path", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.TransformLoader.__init__": [[14, 23], ["dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "image_size", ",", "\n", "normalize_param", "=", "dict", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "jitter_param", "=", "dict", "(", "Brightness", "=", "0.4", ",", "Contrast", "=", "0.4", ",", "Color", "=", "0.4", ")", ",", "\n", ")", ":", "\n", "        ", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "normalize_param", "=", "normalize_param", "\n", "self", ".", "jitter_param", "=", "jitter_param", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.TransformLoader.parse_transform": [[24, 39], ["getattr", "data.ImageJitter", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "int", "int"], "methods", ["None"], ["", "def", "parse_transform", "(", "self", ",", "transform_type", ")", ":", "\n", "        ", "if", "transform_type", "==", "\"ImageJitter\"", ":", "\n", "            ", "method", "=", "add_transforms", ".", "ImageJitter", "(", "self", ".", "jitter_param", ")", "\n", "return", "method", "\n", "", "method", "=", "getattr", "(", "transforms", ",", "transform_type", ")", "\n", "if", "transform_type", "==", "\"RandomResizedCrop\"", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "\"CenterCrop\"", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "\"Resize\"", ":", "\n", "            ", "return", "method", "(", "[", "int", "(", "self", ".", "image_size", "*", "1.15", ")", ",", "int", "(", "self", ".", "image_size", "*", "1.15", ")", "]", ")", "\n", "", "elif", "transform_type", "==", "\"Normalize\"", ":", "\n", "            ", "return", "method", "(", "**", "self", ".", "normalize_param", ")", "\n", "", "else", ":", "\n", "            ", "return", "method", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.TransformLoader.get_composed_transform": [[40, 72], ["torchvision.Compose", "transform_list.append", "transform_list.append", "datamgr.TransformLoader.parse_transform"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.TransformLoader.parse_transform"], ["", "", "def", "get_composed_transform", "(", "\n", "self", ",", "\n", "aug", "=", "False", ",", "\n", "normalize", "=", "True", ",", "\n", "to_pil", "=", "True", ",", "\n", "confound_noise", "=", "0.0", ",", "\n", "confound_noise_class_weight", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "if", "aug", ":", "\n", "            ", "transform_list", "=", "[", "\n", "\"RandomResizedCrop\"", ",", "\n", "\"ImageJitter\"", ",", "\n", "\"RandomHorizontalFlip\"", ",", "\n", "\"ToTensor\"", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "transform_list", "=", "[", "\"Resize\"", ",", "\"CenterCrop\"", ",", "\"ToTensor\"", "]", "\n", "\n", "", "if", "confound_noise", "!=", "0.0", ":", "\n", "            ", "transform_list", ".", "append", "(", "\n", "(", "\"Noise\"", ",", "confound_noise", ",", "confound_noise_class_weight", ")", "\n", ")", "\n", "\n", "", "if", "normalize", ":", "\n", "            ", "transform_list", ".", "append", "(", "\"Normalize\"", ")", "\n", "\n", "", "if", "to_pil", ":", "\n", "            ", "transform_list", "=", "[", "\"ToPILImage\"", "]", "+", "transform_list", "\n", "\n", "", "transform_funcs", "=", "[", "self", ".", "parse_transform", "(", "x", ")", "for", "x", "in", "transform_list", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_funcs", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.TransformLoader.get_normalize": [[73, 75], ["datamgr.TransformLoader.parse_transform"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.TransformLoader.parse_transform"], ["", "def", "get_normalize", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "parse_transform", "(", "\"Normalize\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.DataManager.get_data_loader": [[78, 81], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SimpleDataManager.__init__": [[84, 89], ["super().__init__", "datamgr.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "batch_size", ",", "num_workers", "=", "12", ")", ":", "\n", "        ", "super", "(", "SimpleDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SimpleDataManager.get_data_loader": [[90, 108], ["datamgr.SimpleDataManager.trans_loader.get_composed_transform", "data.dataset.SimpleDataset", "dict", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "\n", "self", ",", "data_file", ",", "aug", ",", "lang_dir", "=", "None", ",", "normalize", "=", "True", ",", "to_pil", "=", "False", "\n", ")", ":", "# parameters that would change on train/val set", "\n", "        ", "if", "lang_dir", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "\n", "aug", ",", "normalize", "=", "normalize", ",", "to_pil", "=", "to_pil", "\n", ")", "\n", "dataset", "=", "SimpleDataset", "(", "data_file", ",", "transform", ")", "\n", "data_loader_params", "=", "dict", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__": [[111, 123], ["super().__init__", "datamgr.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "name", ",", "image_size", ",", "n_way", ",", "n_support", ",", "n_query", ",", "n_episode", "=", "100", ",", "args", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "SetDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "batch_size", "=", "n_support", "+", "n_query", "\n", "self", ".", "n_episode", "=", "n_episode", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.SetDataManager.get_data_loader": [[124, 155], ["datamgr.SetDataManager.trans_loader.get_composed_transform", "data.dataset.SetDataset", "data.dataset.EpisodicBatchSampler", "dict", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.jayelm_lsl.data.datamgr.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "\n", "self", ",", "\n", "data_file", ",", "\n", "aug", ",", "\n", "lang_dir", "=", "None", ",", "\n", "normalize", "=", "True", ",", "\n", "vocab", "=", "None", ",", "\n", "max_class", "=", "None", ",", "\n", "max_img_per_class", "=", "None", ",", "\n", "max_lang_per_class", "=", "None", ",", "\n", ")", ":", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ",", "normalize", "=", "normalize", ")", "\n", "\n", "dataset", "=", "SetDataset", "(", "\n", "self", ".", "name", ",", "\n", "data_file", ",", "\n", "self", ".", "batch_size", ",", "\n", "transform", ",", "\n", "args", "=", "self", ".", "args", ",", "\n", "lang_dir", "=", "lang_dir", ",", "\n", "vocab", "=", "vocab", ",", "\n", "max_class", "=", "max_class", ",", "\n", "max_img_per_class", "=", "max_img_per_class", ",", "\n", "max_lang_per_class", "=", "max_lang_per_class", ",", "\n", ")", "\n", "sampler", "=", "EpisodicBatchSampler", "(", "len", "(", "dataset", ")", ",", "self", ".", "n_way", ",", "self", ".", "n_episode", ")", "\n", "data_loader_params", "=", "dict", "(", "\n", "batch_sampler", "=", "sampler", ",", "num_workers", "=", "self", ".", "args", ".", "n_workers", ",", "pin_memory", "=", "True", ",", "\n", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "return", "data_loader", "\n", "", "", ""]]}