{"home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.None.evaluate.evaluate_reid": [[44, 145], ["print", "tensorflow.get_default_graph", "list", "tensorflow.Session", "tensorflow.train.import_meta_graph", "tf.train.import_meta_graph.restore", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "utils.process_i.gen_train_data", "rank_acc.keys", "utils.process_i.cal_nAUC", "numpy.argmax", "numpy.argmax", "print", "print", "print", "print", "print", "exit", "range", "list", "X_input_J.reshape.reshape", "X_input_P.reshape.reshape", "X_input_B.reshape.reshape", "X_input_I.reshape.reshape", "sess.run", "range", "logits_all.extend", "labels_all.extend", "round", "numpy.array", "numpy.array", "sklearn.metrics.confusion_matrix", "round", "round", "round", "range", "list", "range", "pred.tolist", "y_input.tolist", "numpy.array", "numpy.array", "range", "len", "rank_acc.keys", "numpy.argpartition", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.gen_train_data", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.cal_nAUC"], ["def", "evaluate_reid", "(", "model_dir", ",", "dataset", ")", ":", "\n", "\t", "if", "dataset", "==", "'IAS'", ":", "\n", "\t\t", "classes", "=", "list", "(", "range", "(", "11", ")", ")", "\n", "", "elif", "dataset", "==", "'KS20'", ":", "\n", "\t\t", "classes", "=", "list", "(", "range", "(", "20", ")", ")", "\n", "", "elif", "dataset", "==", "'KGBD'", ":", "\n", "\t\t", "classes", "=", "list", "(", "range", "(", "164", ")", ")", "\n", "", "checkpoint", "=", "model_dir", "+", "\".ckpt\"", "\n", "print", "(", "'Evaluating the model saved in '", "+", "model_dir", ")", "\n", "loaded_graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", "graph", "=", "loaded_graph", ",", "config", "=", "config", ")", "as", "sess", ":", "\n", "\t\t", "loader", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "checkpoint", "+", "'.meta'", ")", "\n", "loader", ".", "restore", "(", "sess", ",", "checkpoint", ")", "\n", "# loader = tf.train.import_meta_graph(checkpt_file + '.meta')", "\n", "# loader.restore(sess, checkpt_file)", "\n", "J_in", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder_1:0\"", ")", "\n", "P_in", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder_2:0\"", ")", "\n", "B_in", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder_3:0\"", ")", "\n", "I_in", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder_4:0\"", ")", "\n", "J_bias_in", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder_5:0\"", ")", "\n", "P_bias_in", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder_6:0\"", ")", "\n", "B_bias_in", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder_7:0\"", ")", "\n", "I_bias_in", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder_8:0\"", ")", "\n", "lbl_in", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder:0\"", ")", "\n", "is_train", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder_11:0\"", ")", "\n", "attn_drop", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder_9:0\"", ")", "\n", "ffd_drop", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Input/Placeholder_10:0\"", ")", "\n", "aver_pre", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "'Recognition/Recognition/add_30:0'", ")", "\n", "accuracy", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "'Recognition/Recognition/Mean_4:0'", ")", "\n", "loss", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "'Recognition/Recognition/Mean_5:0'", ")", "\n", "rank_acc", "=", "{", "}", "\n", "en_to_pred", "=", "loaded_graph", ".", "get_tensor_by_name", "(", "\"Recognition/Recognition/StopGradient:0\"", ")", "\n", "\n", "X_train_J", ",", "X_train_P", ",", "X_train_B", ",", "X_train_I", ",", "y_train", ",", "X_test_J", ",", "X_test_P", ",", "X_test_B", ",", "X_test_I", ",", "y_test", ",", "adj_J", ",", "biases_J", ",", "adj_P", ",", "biases_P", ",", "adj_B", ",", "biases_B", ",", "adj_I", ",", "biases_I", ",", "nb_classes", "=", "process", ".", "gen_train_data", "(", "dataset", "=", "dataset", ",", "split", "=", "split", ",", "time_step", "=", "time_step", ",", "\n", "nb_nodes", "=", "nb_nodes", ",", "nhood", "=", "nhood", ",", "global_att", "=", "False", ",", "batch_size", "=", "batch_size", ",", "view", "=", "''", ",", "\n", "reverse", "=", "'0'", ")", "\n", "# print(batch_size)", "\n", "X_train", "=", "X_train_J", "\n", "X_test", "=", "X_test_J", "\n", "vl_step", "=", "0", "\n", "vl_size", "=", "X_test", ".", "shape", "[", "0", "]", "\n", "logits_all", "=", "[", "]", "\n", "labels_all", "=", "[", "]", "\n", "\n", "vl_step", "=", "0", "\n", "vl_loss", "=", "0.0", "\n", "vl_acc", "=", "0.0", "\n", "while", "vl_step", "*", "batch_size", "<", "vl_size", ":", "\n", "\t\t\t", "if", "(", "vl_step", "+", "1", ")", "*", "batch_size", ">", "vl_size", ":", "\n", "\t\t\t\t", "break", "\n", "", "X_input_J", "=", "X_test_J", "[", "vl_step", "*", "batch_size", ":", "(", "vl_step", "+", "1", ")", "*", "batch_size", "]", "\n", "X_input_J", "=", "X_input_J", ".", "reshape", "(", "[", "-", "1", ",", "nb_nodes", ",", "3", "]", ")", "\n", "X_input_P", "=", "X_test_P", "[", "vl_step", "*", "batch_size", ":", "(", "vl_step", "+", "1", ")", "*", "batch_size", "]", "\n", "X_input_P", "=", "X_input_P", ".", "reshape", "(", "[", "-", "1", ",", "10", ",", "3", "]", ")", "\n", "X_input_B", "=", "X_test_B", "[", "vl_step", "*", "batch_size", ":", "(", "vl_step", "+", "1", ")", "*", "batch_size", "]", "\n", "X_input_B", "=", "X_input_B", ".", "reshape", "(", "[", "-", "1", ",", "5", ",", "3", "]", ")", "\n", "X_input_I", "=", "X_test_I", "[", "vl_step", "*", "batch_size", ":", "(", "vl_step", "+", "1", ")", "*", "batch_size", "]", "\n", "X_input_I", "=", "X_input_I", ".", "reshape", "(", "[", "-", "1", ",", "I_nodes", ",", "3", "]", ")", "\n", "y_input", "=", "y_test", "[", "vl_step", "*", "batch_size", ":", "(", "vl_step", "+", "1", ")", "*", "batch_size", "]", "\n", "loss_value_vl", ",", "acc_vl", ",", "pred", "=", "sess", ".", "run", "(", "[", "loss", ",", "accuracy", ",", "aver_pre", "]", ",", "\n", "feed_dict", "=", "{", "\n", "J_in", ":", "X_input_J", ",", "\n", "P_in", ":", "X_input_P", ",", "\n", "B_in", ":", "X_input_B", ",", "\n", "I_in", ":", "X_input_I", ",", "\n", "J_bias_in", ":", "biases_J", ",", "\n", "P_bias_in", ":", "biases_P", ",", "\n", "B_bias_in", ":", "biases_B", ",", "\n", "I_bias_in", ":", "biases_I", ",", "\n", "lbl_in", ":", "y_test", "[", "vl_step", "*", "batch_size", ":", "(", "vl_step", "+", "1", ")", "*", "batch_size", "]", ",", "\n", "is_train", ":", "False", ",", "\n", "attn_drop", ":", "0.0", ",", "ffd_drop", ":", "0.0", "}", ")", "\n", "for", "i", "in", "range", "(", "y_input", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t", "for", "K", "in", "range", "(", "1", ",", "len", "(", "classes", ")", "+", "1", ")", ":", "\n", "\t\t\t\t\t", "if", "K", "not", "in", "rank_acc", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t\t\t", "rank_acc", "[", "K", "]", "=", "0", "\n", "", "t", "=", "np", ".", "argpartition", "(", "pred", "[", "i", "]", ",", "-", "K", ")", "[", "-", "K", ":", "]", "\n", "if", "np", ".", "argmax", "(", "y_input", "[", "i", "]", ")", "in", "t", ":", "\n", "\t\t\t\t\t\t", "rank_acc", "[", "K", "]", "+=", "1", "\n", "", "", "", "logits_all", ".", "extend", "(", "pred", ".", "tolist", "(", ")", ")", "\n", "labels_all", ".", "extend", "(", "y_input", ".", "tolist", "(", ")", ")", "\n", "vl_loss", "+=", "loss_value_vl", "\n", "vl_acc", "+=", "acc_vl", "\n", "vl_step", "+=", "1", "\n", "", "for", "K", "in", "rank_acc", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "rank_acc", "[", "K", "]", "/=", "(", "vl_step", "*", "batch_size", ")", "\n", "rank_acc", "[", "K", "]", "=", "round", "(", "rank_acc", "[", "K", "]", ",", "4", ")", "\n", "", "val_nAUC", "=", "process", ".", "cal_nAUC", "(", "scores", "=", "np", ".", "array", "(", "logits_all", ")", ",", "labels", "=", "np", ".", "array", "(", "labels_all", ")", ")", "\n", "from", "sklearn", ".", "metrics", "import", "roc_curve", ",", "auc", ",", "confusion_matrix", "\n", "y_true", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "labels_all", ")", ",", "axis", "=", "-", "1", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "logits_all", ")", ",", "axis", "=", "-", "1", ")", "\n", "print", "(", "'\\n### Re-ID Confusion Matrix: '", ")", "\n", "print", "(", "confusion_matrix", "(", "y_true", ",", "y_pred", ")", ")", "\n", "print", "(", "'### Rank-N Accuracy: '", ")", "\n", "print", "(", "rank_acc", ")", "\n", "print", "(", "'### Test loss:'", ",", "round", "(", "vl_loss", "/", "vl_step", ",", "4", ")", ",", "'; Test accuracy:'", ",", "round", "(", "vl_acc", "/", "vl_step", ",", "4", ")", ",", "\n", "'; Test nAUC:'", ",", "round", "(", "val_nAUC", ",", "4", ")", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.layers.attn_head": [[6, 39], ["tensorflow.name_scope", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.contrib.layers.bias_add", "activation", "tensorflow.nn.dropout", "tensorflow.transpose", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.leaky_relu", "conv1d"], "function", ["None"], ["def", "attn_head", "(", "seq", ",", "out_sz", ",", "bias_mat", ",", "activation", ",", "in_drop", "=", "0.0", ",", "coef_drop", "=", "0.0", ",", "residual", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'my_attn'", ")", ":", "\n", "        ", "if", "in_drop", "!=", "0.0", ":", "\n", "            ", "seq", "=", "tf", ".", "nn", ".", "dropout", "(", "seq", ",", "1.0", "-", "in_drop", ")", "\n", "\n", "", "seq_fts", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq", ",", "out_sz", ",", "1", ",", "use_bias", "=", "False", ")", "\n", "\n", "# simplest self-attention possible", "\n", "f_1", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq_fts", ",", "1", ",", "1", ")", "\n", "f_2", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq_fts", ",", "1", ",", "1", ")", "\n", "logits", "=", "f_1", "+", "tf", ".", "transpose", "(", "f_2", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "coefs", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "nn", ".", "leaky_relu", "(", "logits", ")", "+", "bias_mat", ")", "\n", "# coefs = tf.nn.softmax(tf.nn.leaky_relu(logits) / 0.1 + bias_mat)", "\n", "# print(coefs)", "\n", "# exit(1)", "\n", "\n", "if", "coef_drop", "!=", "0.0", ":", "\n", "            ", "coefs", "=", "tf", ".", "nn", ".", "dropout", "(", "coefs", ",", "1.0", "-", "coef_drop", ")", "\n", "", "if", "in_drop", "!=", "0.0", ":", "\n", "            ", "seq_fts", "=", "tf", ".", "nn", ".", "dropout", "(", "seq_fts", ",", "1.0", "-", "in_drop", ")", "\n", "\n", "", "vals", "=", "tf", ".", "matmul", "(", "coefs", ",", "seq_fts", ")", "\n", "ret", "=", "tf", ".", "contrib", ".", "layers", ".", "bias_add", "(", "vals", ")", "\n", "\n", "# residual connection", "\n", "if", "residual", ":", "\n", "            ", "if", "seq", ".", "shape", "[", "-", "1", "]", "!=", "ret", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "ret", "=", "ret", "+", "conv1d", "(", "seq", ",", "ret", ".", "shape", "[", "-", "1", "]", ",", "1", ")", "# activation", "\n", "", "else", ":", "\n", "                ", "ret", "=", "ret", "+", "seq", "\n", "\n", "", "", "return", "activation", "(", "ret", ")", "# activation", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.layers.sp_attn_head": [[42, 90], ["tensorflow.name_scope", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.sparse_add", "tensorflow.SparseTensor", "tensorflow.sparse_softmax", "tensorflow.sparse_reshape", "tensorflow.squeeze", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.expand_dims", "tf.expand_dims.set_shape", "tensorflow.contrib.layers.bias_add", "activation", "tensorflow.nn.dropout", "tensorflow.transpose", "tensorflow.SparseTensor", "tensorflow.nn.dropout", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "conv1d"], "function", ["None"], ["", "", "def", "sp_attn_head", "(", "seq", ",", "out_sz", ",", "adj_mat", ",", "activation", ",", "nb_nodes", ",", "in_drop", "=", "0.0", ",", "coef_drop", "=", "0.0", ",", "residual", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'sp_attn'", ")", ":", "\n", "        ", "if", "in_drop", "!=", "0.0", ":", "\n", "            ", "seq", "=", "tf", ".", "nn", ".", "dropout", "(", "seq", ",", "1.0", "-", "in_drop", ")", "\n", "\n", "", "seq_fts", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq", ",", "out_sz", ",", "1", ",", "use_bias", "=", "False", ")", "\n", "\n", "# simplest self-attention possible", "\n", "f_1", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq_fts", ",", "1", ",", "1", ")", "\n", "f_2", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq_fts", ",", "1", ",", "1", ")", "\n", "\n", "f_1", "=", "tf", ".", "reshape", "(", "f_1", ",", "(", "nb_nodes", ",", "1", ")", ")", "\n", "f_2", "=", "tf", ".", "reshape", "(", "f_2", ",", "(", "nb_nodes", ",", "1", ")", ")", "\n", "\n", "f_1", "=", "adj_mat", "*", "f_1", "\n", "f_2", "=", "adj_mat", "*", "tf", ".", "transpose", "(", "f_2", ",", "[", "1", ",", "0", "]", ")", "\n", "\n", "logits", "=", "tf", ".", "sparse_add", "(", "f_1", ",", "f_2", ")", "\n", "lrelu", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "logits", ".", "indices", ",", "\n", "values", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "logits", ".", "values", ")", ",", "\n", "dense_shape", "=", "logits", ".", "dense_shape", ")", "\n", "coefs", "=", "tf", ".", "sparse_softmax", "(", "lrelu", ")", "\n", "\n", "if", "coef_drop", "!=", "0.0", ":", "\n", "            ", "coefs", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "coefs", ".", "indices", ",", "\n", "values", "=", "tf", ".", "nn", ".", "dropout", "(", "coefs", ".", "values", ",", "1.0", "-", "coef_drop", ")", ",", "\n", "dense_shape", "=", "coefs", ".", "dense_shape", ")", "\n", "", "if", "in_drop", "!=", "0.0", ":", "\n", "            ", "seq_fts", "=", "tf", ".", "nn", ".", "dropout", "(", "seq_fts", ",", "1.0", "-", "in_drop", ")", "\n", "\n", "# As tf.sparse_tensor_dense_matmul expects its arguments to have rank-2,", "\n", "# here we make an assumption that our input is of batch size 1, and reshape appropriately.", "\n", "# The method will fail in all other cases!", "\n", "", "coefs", "=", "tf", ".", "sparse_reshape", "(", "coefs", ",", "[", "nb_nodes", ",", "nb_nodes", "]", ")", "\n", "seq_fts", "=", "tf", ".", "squeeze", "(", "seq_fts", ")", "\n", "vals", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "coefs", ",", "seq_fts", ")", "\n", "vals", "=", "tf", ".", "expand_dims", "(", "vals", ",", "axis", "=", "0", ")", "\n", "vals", ".", "set_shape", "(", "[", "1", ",", "nb_nodes", ",", "out_sz", "]", ")", "\n", "ret", "=", "tf", ".", "contrib", ".", "layers", ".", "bias_add", "(", "vals", ")", "\n", "\n", "# residual connection", "\n", "if", "residual", ":", "\n", "            ", "if", "seq", ".", "shape", "[", "-", "1", "]", "!=", "ret", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "ret", "=", "ret", "+", "conv1d", "(", "seq", ",", "ret", ".", "shape", "[", "-", "1", "]", ",", "1", ")", "# activation", "\n", "", "else", ":", "\n", "                ", "ret", "=", "ret", "+", "seq", "\n", "\n", "", "", "return", "activation", "(", "ret", ")", "# activation", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.gen_train_data": [[15, 224], ["process_cme.gen_train_data.get_data"], "function", ["None"], ["def", "gen_train_data", "(", "dataset", ",", "split", ",", "time_step", ",", "nb_nodes", ",", "nhood", ",", "global_att", ",", "batch_size", ",", "reverse", ",", "PG_type", ")", ":", "\n", "\t", "def", "get_data", "(", "dimension", ",", "fr", ")", ":", "\n", "\t\t", "if", "reverse", "==", "'1'", ":", "\n", "\t\t\t", "used_data", "=", "'target'", "\n", "", "else", ":", "\n", "\t\t\t", "used_data", "=", "'source'", "\n", "", "input_data", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_train_npy_data/'", "+", "used_data", "+", "'_'", "+", "dimension", "+", "'_'", "+", "dataset", "+", "'_'", "+", "str", "(", "\n", "fr", ")", "+", "'.npy'", ")", "\n", "input_data", "=", "input_data", ".", "reshape", "(", "[", "-", "1", ",", "time_step", ",", "nb_nodes", "]", ")", "\n", "spine_pos", "=", "input_data", "[", ":", ",", ":", ",", "0", "]", "\n", "spine_pos", "=", "np", ".", "expand_dims", "(", "spine_pos", ",", "-", "1", ")", "\n", "input_data", "=", "input_data", "-", "spine_pos", "\n", "if", "dataset", "==", "'IAS'", ":", "\n", "\t\t\t", "t_input_data", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_test_npy_data/t_'", "+", "used_data", "+", "'_'", "+", "dimension", "+", "'_IAS-'", "+", "split", "+", "'_'", "+", "str", "(", "\n", "fr", ")", "+", "'.npy'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "t_input_data", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_test_npy_data/'", "+", "PG_type", "+", "'/t_'", "+", "used_data", "+", "'_'", "+", "dimension", "+", "'_'", "+", "dataset", "+", "'_'", "+", "str", "(", "\n", "fr", ")", "+", "'.npy'", ")", "\n", "", "t_input_data", "=", "t_input_data", ".", "reshape", "(", "[", "-", "1", ",", "time_step", ",", "nb_nodes", "]", ")", "\n", "# Normalize", "\n", "t_spine_pos", "=", "t_input_data", "[", ":", ",", ":", ",", "0", "]", "\n", "t_spine_pos", "=", "np", ".", "expand_dims", "(", "t_spine_pos", ",", "-", "1", ")", "\n", "t_input_data", "=", "t_input_data", "-", "t_spine_pos", "\n", "\n", "return", "input_data", ",", "t_input_data", "\n", "\n", "# For CASIA B CME", "\n", "", "frames_ps", "=", "dataset", "+", "'_match/'", "+", "str", "(", "time_step", ")", "+", "'/'", "\n", "input_data_x", ",", "t_input_data_x", "=", "get_data", "(", "'x'", ",", "fr", "=", "time_step", ")", "\n", "input_data_y", ",", "t_input_data_y", "=", "get_data", "(", "'y'", ",", "fr", "=", "time_step", ")", "\n", "input_data_z", ",", "t_input_data_z", "=", "get_data", "(", "'z'", ",", "fr", "=", "time_step", ")", "\n", "\n", "X_train", "=", "np", ".", "concatenate", "(", "[", "input_data_x", ",", "input_data_y", ",", "input_data_z", "]", ",", "axis", "=", "-", "1", ")", "\n", "X_test", "=", "np", ".", "concatenate", "(", "[", "t_input_data_x", ",", "t_input_data_y", ",", "t_input_data_z", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "ids", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_train_npy_data/ids_'", "+", "dataset", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "ids", "=", "ids", ".", "item", "(", ")", "\n", "if", "dataset", "==", "'IAS'", ":", "\n", "\t\t", "t_ids", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "'IAS_test_npy_data/ids_IAS-'", "+", "split", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "", "else", ":", "\n", "\t\t", "t_ids", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_test_npy_data/'", "+", "PG_type", "+", "'/ids_'", "+", "dataset", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "", "t_ids", "=", "t_ids", ".", "item", "(", ")", "\n", "\n", "y_train", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_train_npy_data/frame_id_'", "+", "dataset", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "if", "dataset", "==", "'IAS'", ":", "\n", "\t\t", "y_test", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "'IAS_test_npy_data/frame_id_IAS-'", "+", "split", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "", "else", ":", "\n", "\t\t", "y_test", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_test_npy_data/'", "+", "PG_type", "+", "'/frame_id_'", "+", "dataset", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "\n", "", "X_train", ",", "y_train", "=", "class_samp_gen", "(", "X_train", ",", "y_train", ",", "ids", ",", "batch_size", ")", "\n", "# print(X_train.shape, y_train.shape)", "\n", "\n", "ids_keys", "=", "sorted", "(", "list", "(", "ids", ".", "keys", "(", ")", ")", ")", "\n", "classes", "=", "[", "i", "for", "i", "in", "ids_keys", "]", "\n", "y_train", "=", "label_binarize", "(", "y_train", ",", "classes", "=", "classes", ")", "\n", "t_ids_keys", "=", "sorted", "(", "list", "(", "t_ids", ".", "keys", "(", ")", ")", ")", "\n", "classes", "=", "[", "i", "for", "i", "in", "t_ids_keys", "]", "\n", "y_test", "=", "label_binarize", "(", "y_test", ",", "classes", "=", "classes", ")", "\n", "\n", "X_train_J", "=", "X_train", ".", "reshape", "(", "[", "-", "1", ",", "time_step", ",", "3", ",", "nb_nodes", "]", ")", "\n", "X_train_J", "=", "np", ".", "transpose", "(", "X_train_J", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "\n", "X_train_P", "=", "reduce2part", "(", "X_train_J", ",", "nb_nodes", ")", "\n", "X_train_B", "=", "reduce2body", "(", "X_train_J", ",", "nb_nodes", ")", "\n", "# if dataset == 'KS20':", "\n", "# \tX_train_In = interpolation(X_train_J, nb_nodes)", "\n", "\n", "X_test_J", "=", "X_test", ".", "reshape", "(", "[", "-", "1", ",", "time_step", ",", "3", ",", "nb_nodes", "]", ")", "\n", "X_test_J", "=", "np", ".", "transpose", "(", "X_test_J", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "\n", "X_test_P", "=", "reduce2part", "(", "X_test_J", ",", "nb_nodes", ")", "\n", "X_test_B", "=", "reduce2body", "(", "X_test_J", ",", "nb_nodes", ")", "\n", "# if dataset == 'KS20':", "\n", "# \tX_test_In = interpolation(X_test_J, nb_nodes)", "\n", "\n", "def", "generate_denser_adj", "(", "adj", ")", ":", "\n", "\t\t", "adj_temp", "=", "copy", ".", "deepcopy", "(", "adj", ")", ".", "tolist", "(", ")", "\n", "node_num", "=", "len", "(", "adj_temp", ")", "\n", "new_adj", "=", "np", ".", "zeros", "(", "[", "node_num", "*", "2", "-", "1", ",", "node_num", "*", "2", "-", "1", "]", ")", "\n", "cnt", "=", "node_num", "\n", "for", "i", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t\t\t", "if", "adj_temp", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "\t\t\t\t\t", "new_adj", "[", "i", ",", "cnt", "]", "=", "new_adj", "[", "cnt", ",", "i", "]", "=", "new_adj", "[", "j", ",", "cnt", "]", "=", "new_adj", "[", "cnt", ",", "j", "]", "=", "1", "\n", "adj_temp", "[", "i", "]", "[", "j", "]", "=", "adj_temp", "[", "j", "]", "[", "i", "]", "=", "0", "\n", "# print(i, j, cnt)", "\n", "cnt", "+=", "1", "\n", "", "", "", "for", "i", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t\t\t", "if", "adj_temp", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "\t\t\t\t\t", "assert", "new_adj", "[", "i", ",", "j", "]", "==", "new_adj", "[", "j", ",", "i", "]", "==", "0", "\n", "", "", "", "if", "global_att", ":", "\n", "\t\t\t", "new_adj", "=", "np", ".", "ones", "(", "[", "node_num", "*", "2", "-", "1", ",", "node_num", "*", "2", "-", "1", "]", ")", "\n", "# print(cnt)", "\n", "# print(new_adj)", "\n", "", "return", "new_adj", "\n", "", "import", "scipy", ".", "sparse", "\n", "if", "dataset", "==", "'KS20'", ":", "\n", "# Joint-Level adjacent matrix", "\n", "\t\t", "j_pair_1", "=", "np", ".", "array", "(", "[", "3", ",", "2", ",", "20", ",", "8", ",", "8", ",", "9", ",", "10", ",", "9", ",", "11", ",", "10", ",", "4", ",", "20", ",", "4", ",", "5", ",", "5", ",", "6", ",", "6", ",", "7", ",", "1", ",", "20", ",", "1", ",", "0", ",", "16", ",", "0", ",", "\n", "12", ",", "0", ",", "16", ",", "17", ",", "12", ",", "13", ",", "17", ",", "18", ",", "19", ",", "18", ",", "13", ",", "14", ",", "14", ",", "15", ",", "2", ",", "20", ",", "11", ",", "23", ",", "10", ",", "24", ",", "7", ",", "21", ",", "6", ",", "22", "]", ")", "\n", "j_pair_2", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "8", ",", "20", ",", "9", ",", "8", ",", "9", ",", "10", ",", "10", ",", "11", ",", "20", ",", "4", ",", "5", ",", "4", ",", "6", ",", "5", ",", "7", ",", "6", ",", "20", ",", "1", ",", "0", ",", "1", ",", "0", ",", "16", ",", "\n", "0", ",", "12", ",", "17", ",", "16", ",", "13", ",", "12", ",", "18", ",", "17", ",", "18", ",", "19", ",", "14", ",", "13", ",", "15", ",", "14", ",", "20", ",", "2", ",", "23", ",", "11", ",", "24", ",", "10", ",", "21", ",", "7", ",", "22", ",", "6", "]", ")", "\n", "con_matrix", "=", "np", ".", "ones", "(", "[", "48", "]", ")", "\n", "adj_joint", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "con_matrix", ",", "(", "j_pair_1", ",", "j_pair_2", ")", ")", ",", "shape", "=", "(", "nb_nodes", ",", "nb_nodes", ")", ")", ".", "toarray", "(", ")", "\n", "if", "global_att", ":", "\n", "\t\t\t", "adj_joint", "=", "np", ".", "ones", "(", "[", "25", ",", "25", "]", ")", "\n", "# hyper-Level (interpolation) adjacent matrix, NOT used, replaced by generate_denser_adj", "\n", "# i_pair_1 = np.array(", "\n", "# \t[3, 31, 31, 2, 2, 32, 32, 20, 20, 42, 42, 8, 8, 37, 37, 9, 9, 44, 44, 10, 10, 38, 38, 11, 11,", "\n", "# \t 39, 39, 23, 10, 40, 40, 24, 20, 41, 41, 4, 4, 33, 33, 5, 5, 43, 43, 6, 6, 34, 34, 7, 7, 35,", "\n", "# \t 35, 21, 6, 36, 36, 22,", "\n", "# \t 20, 45, 45, 1, 1, 30, 30, 0, 0, 46, 46, 12, 12, 26, 26, 13, 13, 48, 48, 14, 14, 27, 27, 15,", "\n", "# \t 0, 47, 47, 16, 16, 28, 28, 17, 17, 49, 49, 18, 18, 29, 29, 19])", "\n", "# # miss 25", "\n", "# i_pair_1 = i_pair_1.tolist()", "\n", "# for i in range(len(i_pair_1)):", "\n", "# \tif i_pair_1[i] > 24:", "\n", "# \t\ti_pair_1[i] -= 1", "\n", "# i_pair_1 = np.array(i_pair_1)", "\n", "# i_pair_2 = np.array(", "\n", "# \t[31, 3, 2, 31, 32, 2, 20, 32, 42, 20, 8, 42, 37, 8, 9, 37, 44, 9, 10, 44, 38, 10, 11, 38, 39,", "\n", "# \t 11, 23, 39, 40, 10, 24, 40, 41, 20, 4, 41, 33, 4, 5, 33, 43, 5, 6, 43, 34, 6, 7, 34, 35, 7,", "\n", "# \t 21, 35, 36, 6, 22, 36,", "\n", "# \t 45, 20, 1, 45, 30, 1, 0, 30, 46, 0, 12, 46, 26, 12, 13, 26, 48, 13, 14, 48, 27, 14, 15, 27,", "\n", "# \t 47, 0, 16, 47, 28, 16, 17, 28, 49, 17, 18, 49, 29, 18, 19, 29])", "\n", "# i_pair_2 = i_pair_2.tolist()", "\n", "# for i in range(len(i_pair_2)):", "\n", "# \tif i_pair_2[i] > 24:", "\n", "# \t\ti_pair_2[i] -= 1", "\n", "# i_pair_2 = np.array(i_pair_2)", "\n", "# # print(i_pair_1.shape, i_pair_2.shape)", "\n", "# con_matrix = np.ones([96])", "\n", "# adj_interp = scipy.sparse.coo_matrix((con_matrix, (i_pair_1, i_pair_2)),", "\n", "#                                     shape=(49, 49)).toarray()", "\n", "", "adj_interp", "=", "generate_denser_adj", "(", "adj_joint", ")", "\n", "", "elif", "dataset", "==", "'CASIA_B'", ":", "\n", "# Joint-Level adjacent matrix", "\n", "\t\t", "j_pair_1", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "1", ",", "5", ",", "5", ",", "6", ",", "6", ",", "7", ",", "1", ",", "8", ",", "8", ",", "9", ",", "9", ",", "10", ",", "1", ",", "11", ",", "11", ",", "12", ",", "12", ",", "13", "]", ")", "\n", "j_pair_2", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "2", ",", "1", ",", "3", ",", "2", ",", "4", ",", "3", ",", "5", ",", "1", ",", "6", ",", "5", ",", "7", ",", "6", ",", "8", ",", "1", ",", "9", ",", "8", ",", "10", ",", "9", ",", "11", ",", "1", ",", "12", ",", "11", ",", "13", ",", "12", "]", ")", "\n", "con_matrix", "=", "np", ".", "ones", "(", "[", "26", "]", ")", "\n", "adj_joint", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "con_matrix", ",", "(", "j_pair_1", ",", "j_pair_2", ")", ")", ",", "shape", "=", "(", "nb_nodes", ",", "nb_nodes", ")", ")", ".", "toarray", "(", ")", "\n", "if", "global_att", ":", "\n", "\t\t\t", "adj_joint", "=", "np", ".", "ones", "(", "[", "14", ",", "14", "]", ")", "\n", "", "adj_interp", "=", "generate_denser_adj", "(", "adj_joint", ")", "\n", "", "else", ":", "\n", "# Joint-Level adjacent matrix", "\n", "\t\t", "j_pair_1", "=", "np", ".", "array", "(", "[", "3", ",", "2", ",", "2", ",", "8", ",", "8", ",", "9", ",", "10", ",", "9", ",", "11", ",", "10", ",", "4", ",", "2", ",", "4", ",", "5", ",", "5", ",", "6", ",", "6", ",", "7", ",", "1", ",", "2", ",", "1", ",", "0", ",", "16", ",", "0", ",", "\n", "12", ",", "0", ",", "16", ",", "17", ",", "12", ",", "13", ",", "17", ",", "18", ",", "19", ",", "18", ",", "13", ",", "14", ",", "14", ",", "15", "]", ")", "\n", "j_pair_2", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "8", ",", "2", ",", "9", ",", "8", ",", "9", ",", "10", ",", "10", ",", "11", ",", "2", ",", "4", ",", "5", ",", "4", ",", "6", ",", "5", ",", "7", ",", "6", ",", "2", ",", "1", ",", "0", ",", "1", ",", "0", ",", "16", ",", "\n", "0", ",", "12", ",", "17", ",", "16", ",", "13", ",", "12", ",", "18", ",", "17", ",", "18", ",", "19", ",", "14", ",", "13", ",", "15", ",", "14", "]", ")", "\n", "con_matrix", "=", "np", ".", "ones", "(", "[", "38", "]", ")", "\n", "adj_joint", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "con_matrix", ",", "(", "j_pair_1", ",", "j_pair_2", ")", ")", ",", "shape", "=", "(", "nb_nodes", ",", "nb_nodes", ")", ")", ".", "toarray", "(", ")", "\n", "if", "global_att", ":", "\n", "\t\t\t", "adj_joint", "=", "np", ".", "ones", "(", "[", "20", ",", "20", "]", ")", "\n", "", "adj_interp", "=", "generate_denser_adj", "(", "adj_joint", ")", "\n", "\n", "# Part-Level adjacent matrix", "\n", "", "p_pair_1", "=", "np", ".", "array", "(", "[", "5", ",", "6", ",", "5", ",", "8", ",", "6", ",", "7", ",", "8", ",", "9", ",", "5", ",", "4", ",", "4", ",", "2", ",", "4", ",", "0", ",", "2", ",", "3", ",", "1", ",", "0", "]", ")", "\n", "p_pair_2", "=", "np", ".", "array", "(", "[", "6", ",", "5", ",", "8", ",", "5", ",", "7", ",", "6", ",", "9", ",", "8", ",", "4", ",", "5", ",", "2", ",", "4", ",", "0", ",", "4", ",", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "con_matrix", "=", "np", ".", "ones", "(", "[", "18", "]", ")", "\n", "adj_part", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "con_matrix", ",", "(", "p_pair_1", ",", "p_pair_2", ")", ")", ",", "shape", "=", "(", "10", ",", "10", ")", ")", ".", "toarray", "(", ")", "\n", "\n", "# Body-Level adjacent matrix", "\n", "b_pair_1", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "2", ",", "4", ",", "2", ",", "1", ",", "2", ",", "0", "]", ")", "\n", "b_pair_2", "=", "np", ".", "array", "(", "[", "3", ",", "2", ",", "4", ",", "2", ",", "1", ",", "2", ",", "0", ",", "2", "]", ")", "\n", "con_matrix", "=", "np", ".", "ones", "(", "[", "8", "]", ")", "\n", "adj_body", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "con_matrix", ",", "(", "b_pair_1", ",", "b_pair_2", ")", ")", ",", "shape", "=", "(", "5", ",", "5", ")", ")", ".", "toarray", "(", ")", "\n", "\n", "if", "global_att", ":", "\n", "\t\t", "adj_part", "=", "np", ".", "ones", "(", "[", "10", ",", "10", "]", ")", "\n", "adj_body", "=", "np", ".", "ones", "(", "[", "5", ",", "5", "]", ")", "\n", "\n", "# if dataset != 'KS20':", "\n", "", "X_train_In", "=", "generate_denser_graph_data", "(", "X_train_J", ",", "adj_joint", ",", "nb_nodes", ")", "\n", "X_test_In", "=", "generate_denser_graph_data", "(", "X_test_J", ",", "adj_joint", ",", "nb_nodes", ")", "\n", "\n", "if", "dataset", "==", "'IAS'", ":", "\n", "\t\t", "nb_classes", "=", "11", "\n", "", "elif", "dataset", "==", "'KGBD'", ":", "\n", "\t\t", "nb_classes", "=", "164", "\n", "", "elif", "dataset", "==", "'BIWI'", ":", "\n", "\t\t", "nb_classes", "=", "28", "\n", "", "elif", "dataset", "==", "'KS20'", ":", "\n", "\t\t", "nb_classes", "=", "20", "\n", "", "elif", "dataset", "==", "'CASIA_B'", ":", "\n", "\t\t", "nb_classes", "=", "62", "\n", "\n", "", "adj_joint", "=", "adj_joint", "[", "np", ".", "newaxis", "]", "\n", "biases_joint", "=", "adj_to_bias", "(", "adj_joint", ",", "[", "nb_nodes", "]", ",", "nhood", "=", "nhood", ")", "\n", "\n", "adj_part", "=", "adj_part", "[", "np", ".", "newaxis", "]", "\n", "biases_part", "=", "adj_to_bias", "(", "adj_part", ",", "[", "10", "]", ",", "nhood", "=", "1", ")", "\n", "\n", "adj_body", "=", "adj_body", "[", "np", ".", "newaxis", "]", "\n", "biases_body", "=", "adj_to_bias", "(", "adj_body", ",", "[", "5", "]", ",", "nhood", "=", "1", ")", "\n", "\n", "adj_interp", "=", "adj_interp", "[", "np", ".", "newaxis", "]", "\n", "biases_interp", "=", "adj_to_bias", "(", "adj_interp", ",", "[", "nb_nodes", "*", "2", "-", "1", "]", ",", "nhood", "=", "1", ")", "\n", "\n", "return", "X_train_J", ",", "X_train_P", ",", "X_train_B", ",", "X_train_In", ",", "y_train", ",", "X_test_J", ",", "X_test_P", ",", "X_test_B", ",", "X_test_In", ",", "y_test", ",", "adj_joint", ",", "biases_joint", ",", "adj_part", ",", "biases_part", ",", "adj_body", ",", "biases_body", ",", "adj_interp", ",", "biases_interp", ",", "nb_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.reduce2part": [[229, 278], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate().reshape", "numpy.concatenate"], "function", ["None"], ["def", "reduce2part", "(", "X", ",", "joint_num", "=", "20", ")", ":", "\n", "\t", "if", "joint_num", "==", "25", ":", "\n", "\t\t", "left_leg_up", "=", "[", "12", ",", "13", "]", "\n", "left_leg_down", "=", "[", "14", ",", "15", "]", "\n", "right_leg_up", "=", "[", "16", ",", "17", "]", "\n", "right_leg_down", "=", "[", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", "]", "\n", "head", "=", "[", "2", ",", "3", ",", "20", "]", "\n", "left_arm_up", "=", "[", "4", ",", "5", "]", "\n", "left_arm_down", "=", "[", "6", ",", "7", ",", "21", ",", "22", "]", "\n", "right_arm_up", "=", "[", "8", ",", "9", "]", "\n", "right_arm_down", "=", "[", "10", ",", "11", ",", "23", ",", "24", "]", "\n", "", "elif", "joint_num", "==", "20", ":", "\n", "\t\t", "left_leg_up", "=", "[", "12", ",", "13", "]", "\n", "left_leg_down", "=", "[", "14", ",", "15", "]", "\n", "right_leg_up", "=", "[", "16", ",", "17", "]", "\n", "right_leg_down", "=", "[", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", "]", "\n", "head", "=", "[", "2", ",", "3", "]", "\n", "left_arm_up", "=", "[", "4", ",", "5", "]", "\n", "left_arm_down", "=", "[", "6", ",", "7", "]", "\n", "right_arm_up", "=", "[", "8", ",", "9", "]", "\n", "right_arm_down", "=", "[", "10", ",", "11", "]", "\n", "", "elif", "joint_num", "==", "14", ":", "\n", "\t\t", "left_leg_up", "=", "[", "11", "]", "\n", "left_leg_down", "=", "[", "12", ",", "13", "]", "\n", "right_leg_up", "=", "[", "8", "]", "\n", "right_leg_down", "=", "[", "9", ",", "10", "]", "\n", "torso", "=", "[", "1", "]", "\n", "head", "=", "[", "0", "]", "\n", "left_arm_up", "=", "[", "5", "]", "\n", "left_arm_down", "=", "[", "6", ",", "7", "]", "\n", "right_arm_up", "=", "[", "2", "]", "\n", "right_arm_down", "=", "[", "3", ",", "4", "]", "\n", "\n", "", "x_torso", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "torso", ",", ":", "]", ",", "axis", "=", "2", ")", "# [N * T, V=1]", "\n", "x_leftlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_head", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "head", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "X_part", "=", "np", ".", "concatenate", "(", "(", "x_leftlegup", ",", "x_leftlegdown", ",", "x_rightlegup", ",", "x_rightlegdown", ",", "x_torso", ",", "x_head", ",", "x_leftarmup", ",", "\n", "x_leftarmdown", ",", "x_rightarmup", ",", "x_rightarmdown", ")", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "10", ",", "3", "]", ")", "\n", "return", "X_part", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.reduce2body": [[283, 311], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate().reshape", "numpy.concatenate"], "function", ["None"], ["def", "reduce2body", "(", "X", ",", "joint_num", "=", "20", ")", ":", "\n", "\t", "if", "joint_num", "==", "25", ":", "\n", "\t\t", "left_leg", "=", "[", "12", ",", "13", ",", "14", ",", "15", "]", "\n", "right_leg", "=", "[", "16", ",", "17", ",", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "20", "]", "\n", "left_arm", "=", "[", "4", ",", "5", ",", "6", ",", "7", ",", "21", ",", "22", "]", "\n", "right_arm", "=", "[", "8", ",", "9", ",", "10", ",", "11", ",", "23", ",", "24", "]", "\n", "", "elif", "joint_num", "==", "20", ":", "\n", "\t\t", "left_leg", "=", "[", "12", ",", "13", ",", "14", ",", "15", "]", "\n", "right_leg", "=", "[", "16", ",", "17", ",", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", "left_arm", "=", "[", "4", ",", "5", ",", "6", ",", "7", "]", "\n", "right_arm", "=", "[", "8", ",", "9", ",", "10", ",", "11", "]", "\n", "", "elif", "joint_num", "==", "14", ":", "\n", "\t\t", "left_leg", "=", "[", "11", ",", "12", ",", "13", "]", "\n", "right_leg", "=", "[", "8", ",", "9", ",", "10", "]", "\n", "torso", "=", "[", "0", ",", "1", "]", "\n", "left_arm", "=", "[", "5", ",", "6", ",", "7", "]", "\n", "right_arm", "=", "[", "2", ",", "3", ",", "4", "]", "\n", "\n", "", "x_torso", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "torso", ",", ":", "]", ",", "axis", "=", "2", ")", "# [N * T, V=1]", "\n", "x_leftleg", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightleg", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarm", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarm", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "X_body", "=", "np", ".", "concatenate", "(", "(", "x_leftleg", ",", "x_rightleg", ",", "x_torso", ",", "x_leftarm", ",", "x_rightarm", ")", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "5", ",", "3", "]", ")", "\n", "return", "X_body", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.interpolation": [[316, 450], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate().reshape", "numpy.concatenate", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate().reshape", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["def", "interpolation", "(", "X", ",", "joint_num", "=", "20", ")", ":", "\n", "\t", "if", "joint_num", "==", "25", ":", "\n", "\t\t", "left_leg_up", "=", "[", "12", ",", "13", "]", "\n", "left_leg_down", "=", "[", "14", ",", "15", "]", "\n", "right_leg_up", "=", "[", "16", ",", "17", "]", "\n", "right_leg_down", "=", "[", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", "]", "\n", "head_1", "=", "[", "2", ",", "3", "]", "\n", "head_2", "=", "[", "2", ",", "20", "]", "\n", "left_arm_up", "=", "[", "4", ",", "5", "]", "\n", "left_arm_down_1", "=", "[", "6", ",", "7", "]", "\n", "left_arm_down_2", "=", "[", "7", ",", "21", "]", "\n", "left_arm_down_3", "=", "[", "6", ",", "22", "]", "\n", "right_arm_up", "=", "[", "8", ",", "9", "]", "\n", "right_arm_down_1", "=", "[", "10", ",", "11", "]", "\n", "right_arm_down_2", "=", "[", "11", ",", "23", "]", "\n", "right_arm_down_3", "=", "[", "10", ",", "24", "]", "\n", "shoulder_1", "=", "[", "4", ",", "20", "]", "\n", "shoulder_2", "=", "[", "8", ",", "20", "]", "\n", "elbow_1", "=", "[", "5", ",", "6", "]", "\n", "elbow_2", "=", "[", "9", ",", "10", "]", "\n", "spine_mm", "=", "[", "20", ",", "1", "]", "\n", "hip_1", "=", "[", "0", ",", "12", "]", "\n", "hip_2", "=", "[", "0", ",", "16", "]", "\n", "knee_1", "=", "[", "13", ",", "14", "]", "\n", "knee_2", "=", "[", "17", ",", "18", "]", "\n", "x_torso", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "torso", ",", ":", "]", ",", "axis", "=", "2", ")", "# [N * T, V=1]", "\n", "x_leftlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_head_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "head_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_head_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "head_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmdown_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_down_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmdown_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_down_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmdown_3", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_down_3", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmdown_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_down_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmdown_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_down_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmdown_3", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_down_3", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "shoulder_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "shoulder_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "shoulder_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "shoulder_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "elbow_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "elbow_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "elbow_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "elbow_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "spine_mm", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "spine_mm", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "hip_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "hip_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "hip_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "hip_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "knee_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "knee_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "knee_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "knee_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "X_part", "=", "np", ".", "concatenate", "(", "(", "x_leftlegup", ",", "x_leftlegdown", ",", "x_rightlegup", ",", "\n", "x_rightlegdown", ",", "x_torso", ",", "x_head_1", ",", "x_head_2", ",", "x_leftarmup", ",", "\n", "x_leftarmdown_1", ",", "x_leftarmdown_2", ",", "x_leftarmdown_3", ",", "\n", "x_rightarmup", ",", "x_rightarmdown_1", ",", "x_rightarmdown_2", ",", "x_rightarmdown_3", ",", "\n", "shoulder_1", ",", "shoulder_2", ",", "elbow_1", ",", "elbow_2", ",", "spine_mm", ",", "\n", "hip_1", ",", "hip_2", ",", "knee_1", ",", "knee_2", ")", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "24", ",", "3", "]", ")", "\n", "# 25+24", "\n", "X_interp", "=", "np", ".", "concatenate", "(", "(", "X", ",", "X_part", ")", ",", "axis", "=", "-", "2", ")", "\n", "# Changed", "\n", "", "elif", "joint_num", "==", "20", ":", "\n", "# left_leg_up = [12, 13]", "\n", "# left_leg_down = [14, 15]", "\n", "# right_leg_up = [16, 17]", "\n", "# right_leg_down = [18, 19]", "\n", "# torso = [0, 1]", "\n", "# head = [2, 3]", "\n", "# left_arm_up = [4, 5]", "\n", "# left_arm_down = [6, 7]", "\n", "# right_arm_up = [8, 9]", "\n", "# right_arm_down = [10, 11]", "\n", "#", "\n", "\t\t", "left_leg_up", "=", "[", "12", ",", "13", "]", "\n", "left_leg_down", "=", "[", "14", ",", "15", "]", "\n", "right_leg_up", "=", "[", "16", ",", "17", "]", "\n", "right_leg_down", "=", "[", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", "]", "\n", "head_1", "=", "[", "2", ",", "3", "]", "\n", "# head_2 = [2, 20]", "\n", "left_arm_up", "=", "[", "4", ",", "5", "]", "\n", "left_arm_down_1", "=", "[", "6", ",", "7", "]", "\n", "# left_arm_down_2 = [7, 21]", "\n", "# left_arm_down_3 = [6, 22]", "\n", "right_arm_up", "=", "[", "8", ",", "9", "]", "\n", "right_arm_down_1", "=", "[", "10", ",", "11", "]", "\n", "# right_arm_down_2 = [11, 23]", "\n", "# right_arm_down_3 = [10, 24]", "\n", "# shoulder_1 = [4, 20]", "\n", "# shoulder_2 = [8, 20]", "\n", "shoulder_1", "=", "[", "4", ",", "2", "]", "\n", "shoulder_2", "=", "[", "8", ",", "2", "]", "\n", "elbow_1", "=", "[", "5", ",", "6", "]", "\n", "elbow_2", "=", "[", "9", ",", "10", "]", "\n", "# spine_mm = [20, 1]", "\n", "spine_mm", "=", "[", "2", ",", "1", "]", "\n", "hip_1", "=", "[", "0", ",", "12", "]", "\n", "hip_2", "=", "[", "0", ",", "16", "]", "\n", "knee_1", "=", "[", "13", ",", "14", "]", "\n", "knee_2", "=", "[", "17", ",", "18", "]", "\n", "\n", "x_torso", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "torso", ",", ":", "]", ",", "axis", "=", "2", ")", "# [N * T, V=1]", "\n", "x_leftlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_head_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "head_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "# x_head_2 = np.mean(X[:, :, head_2, :], axis=2)", "\n", "x_leftarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmdown_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_down_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "# x_leftarmdown_2 = np.mean(X[:, :, left_arm_down_2, :], axis=2)", "\n", "# x_leftarmdown_3 = np.mean(X[:, :, left_arm_down_3, :], axis=2)", "\n", "x_rightarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmdown_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_down_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "# x_rightarmdown_2 = np.mean(X[:, :, right_arm_down_2, :], axis=2)", "\n", "# x_rightarmdown_3 = np.mean(X[:, :, right_arm_down_3, :], axis=2)", "\n", "shoulder_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "shoulder_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "shoulder_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "shoulder_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "elbow_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "elbow_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "elbow_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "elbow_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "spine_mm", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "spine_mm", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "hip_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "hip_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "hip_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "hip_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "knee_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "knee_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "knee_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "knee_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "X_part", "=", "np", ".", "concatenate", "(", "(", "x_leftlegup", ",", "x_leftlegdown", ",", "x_rightlegup", ",", "\n", "x_rightlegdown", ",", "x_torso", ",", "x_head_1", ",", "x_leftarmup", ",", "\n", "x_leftarmdown_1", ",", "\n", "x_rightarmup", ",", "x_rightarmdown_1", ",", "\n", "shoulder_1", ",", "shoulder_2", ",", "elbow_1", ",", "elbow_2", ",", "spine_mm", ",", "\n", "hip_1", ",", "hip_2", ",", "knee_1", ",", "knee_2", ")", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "19", ",", "3", "]", ")", "\n", "# 25+24", "\n", "X_interp", "=", "np", ".", "concatenate", "(", "(", "X", ",", "X_part", ")", ",", "axis", "=", "-", "2", ")", "\n", "", "return", "X_interp", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.generate_denser_graph_data": [[451, 474], ["copy.deepcopy", "adj_temp.tolist.tolist", "len", "range", "numpy.reshape", "numpy.concatenate", "range", "numpy.mean", "numpy.concatenate"], "function", ["None"], ["", "def", "generate_denser_graph_data", "(", "X", ",", "adj", ",", "joint_num", "=", "20", ")", ":", "\n", "\t", "adj_temp", "=", "copy", ".", "deepcopy", "(", "adj", ")", "\n", "adj_temp", "=", "adj_temp", ".", "tolist", "(", ")", "\n", "node_num", "=", "len", "(", "adj_temp", ")", "\n", "cnt", "=", "node_num", "\n", "for", "i", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t\t", "if", "adj_temp", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "\t\t\t\t", "adj_temp", "[", "i", "]", "[", "j", "]", "=", "adj_temp", "[", "j", "]", "[", "i", "]", "=", "0", "\n", "new_node", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "[", "i", ",", "j", "]", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "# print(new_node.shape)", "\n", "if", "cnt", "==", "node_num", ":", "\n", "\t\t\t\t\t", "X_interp", "=", "new_node", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "X_interp", "=", "np", ".", "concatenate", "(", "(", "X_interp", ",", "new_node", ")", ",", "axis", "=", "-", "1", ")", "\n", "# print(X_interp.shape)", "\n", "# print(i, j)", "\n", "# print(i, j, cnt)", "\n", "", "cnt", "+=", "1", "\n", "# print(X_interp.shape)", "\n", "", "", "", "X_interp", "=", "np", ".", "reshape", "(", "X_interp", ",", "[", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "node_num", "-", "1", ",", "3", "]", ")", "\n", "X_interp", "=", "np", ".", "concatenate", "(", "(", "X", ",", "X_interp", ")", ",", "axis", "=", "-", "2", ")", "\n", "return", "X_interp", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.cal_nAUC": [[478, 485], ["numpy.array", "numpy.array", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "np.array.ravel", "np.array.ravel"], "function", ["None"], ["def", "cal_nAUC", "(", "scores", ",", "labels", ")", ":", "\n", "\t", "scores", "=", "np", ".", "array", "(", "scores", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "# Compute micro-average ROC curve and ROC area", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "labels", ".", "ravel", "(", ")", ",", "scores", ".", "ravel", "(", ")", ")", "\n", "roc_auc", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "return", "roc_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.class_samp_gen": [[489, 526], ["len", "sorted", "range", "numpy.array", "sorted.keys", "sorted.items", "all_batch_X.extend", "all_batch_y.extend", "batch_y.extend", "len", "numpy.random.choice", "numpy.array", "v_array[].tolist", "batch_X.extend", "batch_X.extend", "len"], "function", ["None"], ["def", "class_samp_gen", "(", "X", ",", "y", ",", "ids_", ",", "batch_size", ")", ":", "\n", "\t", "class_num", "=", "len", "(", "ids_", ".", "keys", "(", ")", ")", "\n", "ids_", "=", "sorted", "(", "ids_", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ")", "\n", "cnt", "=", "0", "\n", "all_batch_X", "=", "[", "]", "\n", "all_batch_y", "=", "[", "]", "\n", "total", "=", "y", ".", "shape", "[", "0", "]", "\n", "batch_num", "=", "total", "//", "batch_size", "*", "2", "\n", "batch_num", "=", "total", "//", "batch_size", "*", "2", "\n", "class_in_bacth", "=", "class_num", "\n", "batch_per_class", "=", "batch_size", "//", "class_in_bacth", "\n", "class_cnt", "=", "class_in_bacth", "\n", "# print(total, batch_num, batch_per_class)", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "\t\t", "batch_X", "=", "[", "]", "\n", "batch_y", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "ids_", "[", "class_cnt", "-", "class_in_bacth", ":", "class_cnt", "]", ":", "\n", "# print(k, len(v))", "\n", "# cnt += len(v)", "\n", "\t\t\t", "if", "len", "(", "v", "[", "batch_per_class", "*", "i", ":", "batch_per_class", "*", "(", "i", "+", "1", ")", "]", ")", "<", "batch_per_class", ":", "\n", "\t\t\t\t", "rand_ind", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "v", ")", ",", "batch_per_class", ")", "\n", "v_array", "=", "np", ".", "array", "(", "v", ")", "\n", "samp_per_class", "=", "v_array", "[", "rand_ind", "]", ".", "tolist", "(", ")", "\n", "batch_X", ".", "extend", "(", "samp_per_class", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "batch_X", ".", "extend", "(", "v", "[", "batch_per_class", "*", "i", ":", "batch_per_class", "*", "(", "i", "+", "1", ")", "]", ")", "\n", "", "batch_y", ".", "extend", "(", "batch_per_class", "*", "[", "k", "]", ")", "\n", "", "if", "class_cnt", "+", "class_in_bacth", ">", "class_num", "and", "class_cnt", "<=", "class_num", ":", "\n", "\t\t\t", "class_cnt", "=", "class_num", "\n", "", "else", ":", "\n", "\t\t\t", "class_cnt", "=", "class_cnt", "+", "class_in_bacth", "\n", "", "all_batch_X", ".", "extend", "(", "batch_X", ")", "\n", "all_batch_y", ".", "extend", "(", "batch_y", ")", "\n", "# print(len(all_batch_X), len(all_batch_y))", "\n", "", "X_train", "=", "X", "[", "all_batch_X", "]", "\n", "y_train", "=", "np", ".", "array", "(", "all_batch_y", ")", "\n", "return", "X_train", ",", "y_train", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.adj_to_bias": [[535, 547], ["numpy.empty", "range", "numpy.eye", "range", "range", "numpy.matmul", "range", "numpy.eye"], "function", ["None"], ["def", "adj_to_bias", "(", "adj", ",", "sizes", ",", "nhood", "=", "1", ")", ":", "\n", "\t", "nb_graphs", "=", "adj", ".", "shape", "[", "0", "]", "\n", "mt", "=", "np", ".", "empty", "(", "adj", ".", "shape", ")", "\n", "for", "g", "in", "range", "(", "nb_graphs", ")", ":", "\n", "\t\t", "mt", "[", "g", "]", "=", "np", ".", "eye", "(", "adj", ".", "shape", "[", "1", "]", ")", "\n", "for", "_", "in", "range", "(", "nhood", ")", ":", "\n", "\t\t\t", "mt", "[", "g", "]", "=", "np", ".", "matmul", "(", "mt", "[", "g", "]", ",", "(", "adj", "[", "g", "]", "+", "np", ".", "eye", "(", "adj", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "", "for", "i", "in", "range", "(", "sizes", "[", "g", "]", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "sizes", "[", "g", "]", ")", ":", "\n", "\t\t\t\t", "if", "mt", "[", "g", "]", "[", "i", "]", "[", "j", "]", ">", "0.0", ":", "\n", "\t\t\t\t\t", "mt", "[", "g", "]", "[", "i", "]", "[", "j", "]", "=", "1.0", "\n", "", "", "", "", "return", "-", "1e9", "*", "(", "1.0", "-", "mt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.parse_index_file": [[553, 559], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["", "def", "parse_index_file", "(", "filename", ")", ":", "\n", "\t", "\"\"\"Parse index file.\"\"\"", "\n", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "\t\t", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.sample_mask": [[561, 566], ["numpy.zeros", "numpy.array"], "function", ["None"], ["", "def", "sample_mask", "(", "idx", ",", "l", ")", ":", "\n", "\t", "\"\"\"Create mask.\"\"\"", "\n", "mask", "=", "np", ".", "zeros", "(", "l", ")", "\n", "mask", "[", "idx", "]", "=", "1", "\n", "return", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.load_data": [[568, 620], ["range", "tuple", "process_cme.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "networkx.adjacency_matrix", "numpy.vstack", "np.sort.tolist", "range", "range", "process_cme.sample_mask", "process_cme.sample_mask", "process_cme.sample_mask", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "len", "len", "open", "min", "scipy.vstack", "len", "objects.append", "objects.append", "max", "len", "len", "pickle.load", "pickle.load", "min", "min"], "function", ["home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.parse_index_file", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sample_mask", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sample_mask", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sample_mask"], ["", "def", "load_data", "(", "dataset_str", ")", ":", "# {'pubmed', 'citeseer', 'cora'}", "\n", "\t", "\"\"\"Load data.\"\"\"", "\n", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "\t\t", "with", "open", "(", "\"data/ind.{}.{}\"", ".", "format", "(", "dataset_str", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t\t", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "\t\t\t\t", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"data/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "\t\t", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "\n", "idx_test", "=", "test_idx_range", ".", "tolist", "(", ")", "\n", "idx_train", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "idx_val", "=", "range", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", "+", "500", ")", "\n", "\n", "train_mask", "=", "sample_mask", "(", "idx_train", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "val_mask", "=", "sample_mask", "(", "idx_val", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "test_mask", "=", "sample_mask", "(", "idx_test", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y_train", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_val", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_test", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_train", "[", "train_mask", ",", ":", "]", "=", "labels", "[", "train_mask", ",", ":", "]", "\n", "y_val", "[", "val_mask", ",", ":", "]", "=", "labels", "[", "val_mask", ",", ":", "]", "\n", "y_test", "[", "test_mask", ",", ":", "]", "=", "labels", "[", "test_mask", ",", ":", "]", "\n", "\n", "# print(adj.shape)", "\n", "# print(features.shape)", "\n", "\n", "return", "adj", ",", "features", ",", "y_train", ",", "y_val", ",", "y_test", ",", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.load_random_data": [[622, 647], ["scipy.random", "scipy.random", "numpy.random.randint", "numpy.zeros", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "int", "int", "int"], "function", ["None"], ["", "def", "load_random_data", "(", "size", ")", ":", "\n", "\t", "adj", "=", "sp", ".", "random", "(", "size", ",", "size", ",", "density", "=", "0.002", ")", "# density similar to cora", "\n", "features", "=", "sp", ".", "random", "(", "size", ",", "1000", ",", "density", "=", "0.015", ")", "\n", "int_labels", "=", "np", ".", "random", ".", "randint", "(", "7", ",", "size", "=", "(", "size", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "size", ",", "7", ")", ")", "# Nx7", "\n", "labels", "[", "np", ".", "arange", "(", "size", ")", ",", "int_labels", "]", "=", "1", "\n", "\n", "train_mask", "=", "np", ".", "zeros", "(", "(", "size", ",", ")", ")", ".", "astype", "(", "bool", ")", "\n", "train_mask", "[", "np", ".", "arange", "(", "size", ")", "[", "0", ":", "int", "(", "size", "/", "2", ")", "]", "]", "=", "1", "\n", "\n", "val_mask", "=", "np", ".", "zeros", "(", "(", "size", ",", ")", ")", ".", "astype", "(", "bool", ")", "\n", "val_mask", "[", "np", ".", "arange", "(", "size", ")", "[", "int", "(", "size", "/", "2", ")", ":", "]", "]", "=", "1", "\n", "\n", "test_mask", "=", "np", ".", "zeros", "(", "(", "size", ",", ")", ")", ".", "astype", "(", "bool", ")", "\n", "test_mask", "[", "np", ".", "arange", "(", "size", ")", "[", "int", "(", "size", "/", "2", ")", ":", "]", "]", "=", "1", "\n", "\n", "y_train", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_val", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_test", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_train", "[", "train_mask", ",", ":", "]", "=", "labels", "[", "train_mask", ",", ":", "]", "\n", "y_val", "[", "val_mask", ",", ":", "]", "=", "labels", "[", "val_mask", ",", ":", "]", "\n", "y_test", "[", "test_mask", ",", ":", "]", "=", "labels", "[", "test_mask", ",", ":", "]", "\n", "\n", "# sparse NxN, sparse NxF, norm NxC, ..., norm Nx1, ...", "\n", "return", "adj", ",", "features", ",", "y_train", ",", "y_val", ",", "y_test", ",", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.sparse_to_tuple": [[649, 667], ["isinstance", "numpy.vstack().transpose", "range", "process_cme.sparse_to_tuple.to_tuple"], "function", ["None"], ["", "def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "\t", "\"\"\"Convert sparse matrix to tuple representation.\"\"\"", "\n", "\n", "def", "to_tuple", "(", "mx", ")", ":", "\n", "\t\t", "if", "not", "sp", ".", "isspmatrix_coo", "(", "mx", ")", ":", "\n", "\t\t\t", "mx", "=", "mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "mx", ".", "row", ",", "mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "mx", ".", "data", "\n", "shape", "=", "mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n", "", "if", "isinstance", "(", "sparse_mx", ",", "list", ")", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "len", "(", "sparse_mx", ")", ")", ":", "\n", "\t\t\t", "sparse_mx", "[", "i", "]", "=", "to_tuple", "(", "sparse_mx", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "\t\t", "sparse_mx", "=", "to_tuple", "(", "sparse_mx", ")", "\n", "\n", "", "return", "sparse_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.standardize_data": [[669, 680], ["f.todense.todense", "f[].mean", "f[].std", "f[].mean", "f[].std", "numpy.squeeze", "numpy.array"], "function", ["None"], ["", "def", "standardize_data", "(", "f", ",", "train_mask", ")", ":", "\n", "\t", "\"\"\"Standardize feature matrix and convert to tuple representation\"\"\"", "\n", "# standardize data", "\n", "f", "=", "f", ".", "todense", "(", ")", "\n", "mu", "=", "f", "[", "train_mask", "==", "True", ",", ":", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "sigma", "=", "f", "[", "train_mask", "==", "True", ",", ":", "]", ".", "std", "(", "axis", "=", "0", ")", "\n", "f", "=", "f", "[", ":", ",", "np", ".", "squeeze", "(", "np", ".", "array", "(", "sigma", ">", "0", ")", ")", "]", "\n", "mu", "=", "f", "[", "train_mask", "==", "True", ",", ":", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "sigma", "=", "f", "[", "train_mask", "==", "True", ",", ":", "]", ".", "std", "(", "axis", "=", "0", ")", "\n", "f", "=", "(", "f", "-", "mu", ")", "/", "sigma", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.preprocess_features": [[682, 690], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "r_mat_inv.dot.todense", "process_cme.sparse_to_tuple", "numpy.power", "numpy.isinf"], "function", ["home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sparse_to_tuple"], ["", "def", "preprocess_features", "(", "features", ")", ":", "\n", "\t", "\"\"\"Row-normalize feature matrix and convert to tuple representation\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "features", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "features", "=", "r_mat_inv", ".", "dot", "(", "features", ")", "\n", "return", "features", ".", "todense", "(", ")", ",", "sparse_to_tuple", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.normalize_adj": [[692, 700], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.dot().transpose().dot().tocoo", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["None"], ["", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "\t", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.preprocess_adj": [[702, 706], ["process_cme.normalize_adj", "process_cme.sparse_to_tuple", "scipy.eye"], "function", ["home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.normalize_adj", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sparse_to_tuple"], ["", "def", "preprocess_adj", "(", "adj", ")", ":", "\n", "\t", "\"\"\"Preprocessing of adjacency matrix for simple GCN model and conversion to tuple representation.\"\"\"", "\n", "adj_normalized", "=", "normalize_adj", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "sparse_to_tuple", "(", "adj_normalized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_cme.preprocess_adj_bias": [[708, 719], ["adj.tocoo.astype", "numpy.vstack().transpose", "scipy.eye", "scipy.isspmatrix_coo", "adj.tocoo.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "preprocess_adj_bias", "(", "adj", ")", ":", "\n", "\t", "num_nodes", "=", "adj", ".", "shape", "[", "0", "]", "\n", "adj", "=", "adj", "+", "sp", ".", "eye", "(", "num_nodes", ")", "# self-loop", "\n", "adj", "[", "adj", ">", "0.0", "]", "=", "1.0", "\n", "if", "not", "sp", ".", "isspmatrix_coo", "(", "adj", ")", ":", "\n", "\t\t", "adj", "=", "adj", ".", "tocoo", "(", ")", "\n", "", "adj", "=", "adj", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "vstack", "(", "\n", "(", "adj", ".", "col", ",", "adj", ".", "row", ")", ")", ".", "transpose", "(", ")", "# This is where I made a mistake, I used (adj.row, adj.col) instead", "\n", "# return tf.SparseTensor(indices=indices, values=adj.data, dense_shape=adj.shape)", "\n", "return", "indices", ",", "adj", ".", "data", ",", "adj", ".", "shape", "\n", "", ""]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.gen_train_data": [[15, 235], ["process_i.gen_train_data.get_data"], "function", ["None"], ["def", "gen_train_data", "(", "dataset", ",", "split", ",", "time_step", ",", "nb_nodes", ",", "nhood", ",", "global_att", ",", "batch_size", ",", "view", ",", "reverse", ")", ":", "\n", "\t", "def", "get_data", "(", "dimension", ",", "fr", ")", ":", "\n", "\t\t", "if", "reverse", "==", "'1'", ":", "\n", "\t\t\t", "used_data", "=", "'target'", "\n", "", "else", ":", "\n", "\t\t\t", "used_data", "=", "'source'", "\n", "", "input_data", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_train_npy_data/'", "+", "used_data", "+", "'_'", "+", "dimension", "+", "'_'", "+", "dataset", "+", "'_'", "+", "str", "(", "\n", "fr", ")", "+", "'.npy'", ")", "\n", "input_data", "=", "input_data", ".", "reshape", "(", "[", "-", "1", ",", "time_step", ",", "nb_nodes", "]", ")", "\n", "spine_pos", "=", "input_data", "[", ":", ",", ":", ",", "0", "]", "\n", "spine_pos", "=", "np", ".", "expand_dims", "(", "spine_pos", ",", "-", "1", ")", "\n", "input_data", "=", "input_data", "-", "spine_pos", "\n", "if", "dataset", "==", "'IAS'", ":", "\n", "\t\t\t", "t_input_data", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_test_npy_data/t_'", "+", "used_data", "+", "'_'", "+", "dimension", "+", "'_IAS-'", "+", "split", "+", "'_'", "+", "str", "(", "\n", "fr", ")", "+", "'.npy'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "t_input_data", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_test_npy_data/t_'", "+", "used_data", "+", "'_'", "+", "dimension", "+", "'_'", "+", "dataset", "+", "'_'", "+", "str", "(", "\n", "fr", ")", "+", "'.npy'", ")", "\n", "", "t_input_data", "=", "t_input_data", ".", "reshape", "(", "[", "-", "1", ",", "time_step", ",", "nb_nodes", "]", ")", "\n", "# Normalize", "\n", "t_spine_pos", "=", "t_input_data", "[", ":", ",", ":", ",", "0", "]", "\n", "t_spine_pos", "=", "np", ".", "expand_dims", "(", "t_spine_pos", ",", "-", "1", ")", "\n", "t_input_data", "=", "t_input_data", "-", "t_spine_pos", "\n", "\n", "return", "input_data", ",", "t_input_data", "\n", "", "if", "view", "==", "''", ":", "\n", "\t\t", "frames_ps", "=", "dataset", "+", "'/'", "+", "str", "(", "time_step", ")", "+", "'/'", "\n", "", "else", ":", "\n", "\t\t", "frames_ps", "=", "dataset", "+", "'/'", "+", "str", "(", "time_step", ")", "+", "'/view_'", "+", "str", "(", "view", ")", "+", "'/'", "\n", "", "input_data_x", ",", "t_input_data_x", "=", "get_data", "(", "'x'", ",", "fr", "=", "time_step", ")", "\n", "input_data_y", ",", "t_input_data_y", "=", "get_data", "(", "'y'", ",", "fr", "=", "time_step", ")", "\n", "input_data_z", ",", "t_input_data_z", "=", "get_data", "(", "'z'", ",", "fr", "=", "time_step", ")", "\n", "\n", "X_train", "=", "np", ".", "concatenate", "(", "[", "input_data_x", ",", "input_data_y", ",", "input_data_z", "]", ",", "axis", "=", "-", "1", ")", "\n", "X_test", "=", "np", ".", "concatenate", "(", "[", "t_input_data_x", ",", "t_input_data_y", ",", "t_input_data_z", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "ids", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_train_npy_data/ids_'", "+", "dataset", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "ids", "=", "ids", ".", "item", "(", ")", "\n", "if", "dataset", "==", "'IAS'", ":", "\n", "\t\t", "t_ids", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "'IAS_test_npy_data/ids_IAS-'", "+", "split", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "", "else", ":", "\n", "\t\t", "t_ids", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_test_npy_data/ids_'", "+", "dataset", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "", "t_ids", "=", "t_ids", ".", "item", "(", ")", "\n", "\n", "y_train", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_train_npy_data/frame_id_'", "+", "dataset", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "if", "dataset", "==", "'IAS'", ":", "\n", "\t\t", "y_test", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "'IAS_test_npy_data/frame_id_IAS-'", "+", "split", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "", "else", ":", "\n", "\t\t", "y_test", "=", "np", ".", "load", "(", "\n", "'Datasets/'", "+", "frames_ps", "+", "dataset", "+", "'_test_npy_data/frame_id_'", "+", "dataset", "+", "'_'", "+", "str", "(", "time_step", ")", "+", "'.npy'", ")", "\n", "\n", "# if dataset != 'CASIA_B':", "\n", "", "X_train", ",", "y_train", "=", "class_samp_gen", "(", "X_train", ",", "y_train", ",", "ids", ",", "batch_size", ")", "\n", "# print(X_train.shape, y_train.shape)", "\n", "\n", "ids_keys", "=", "sorted", "(", "list", "(", "ids", ".", "keys", "(", ")", ")", ")", "\n", "classes", "=", "[", "i", "for", "i", "in", "ids_keys", "]", "\n", "y_train", "=", "label_binarize", "(", "y_train", ",", "classes", "=", "classes", ")", "\n", "t_ids_keys", "=", "sorted", "(", "list", "(", "t_ids", ".", "keys", "(", ")", ")", ")", "\n", "classes", "=", "[", "i", "for", "i", "in", "t_ids_keys", "]", "\n", "y_test", "=", "label_binarize", "(", "y_test", ",", "classes", "=", "classes", ")", "\n", "\n", "X_train_J", "=", "X_train", ".", "reshape", "(", "[", "-", "1", ",", "time_step", ",", "3", ",", "nb_nodes", "]", ")", "\n", "X_train_J", "=", "np", ".", "transpose", "(", "X_train_J", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "\n", "X_train_P", "=", "reduce2part", "(", "X_train_J", ",", "nb_nodes", ")", "\n", "X_train_B", "=", "reduce2body", "(", "X_train_J", ",", "nb_nodes", ")", "\n", "# if dataset == 'KS20':", "\n", "# \tX_train_In = interpolation(X_train_J, nb_nodes)", "\n", "\n", "X_test_J", "=", "X_test", ".", "reshape", "(", "[", "-", "1", ",", "time_step", ",", "3", ",", "nb_nodes", "]", ")", "\n", "X_test_J", "=", "np", ".", "transpose", "(", "X_test_J", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "\n", "X_test_P", "=", "reduce2part", "(", "X_test_J", ",", "nb_nodes", ")", "\n", "X_test_B", "=", "reduce2body", "(", "X_test_J", ",", "nb_nodes", ")", "\n", "# if dataset == 'KS20':", "\n", "# \tX_test_In = interpolation(X_test_J, nb_nodes)", "\n", "\n", "def", "generate_denser_adj", "(", "adj", ")", ":", "\n", "\t\t", "adj_temp", "=", "copy", ".", "deepcopy", "(", "adj", ")", ".", "tolist", "(", ")", "\n", "node_num", "=", "len", "(", "adj_temp", ")", "\n", "# if global_att:", "\n", "# \tnew_adj = np.ones([node_num * 2 - 1, node_num * 2 - 1])", "\n", "# \treturn new_adj", "\n", "new_adj", "=", "np", ".", "zeros", "(", "[", "node_num", "*", "2", "-", "1", ",", "node_num", "*", "2", "-", "1", "]", ")", "\n", "cnt", "=", "node_num", "\n", "for", "i", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t\t\t", "if", "adj_temp", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "\t\t\t\t\t", "new_adj", "[", "i", ",", "cnt", "]", "=", "new_adj", "[", "cnt", ",", "i", "]", "=", "new_adj", "[", "j", ",", "cnt", "]", "=", "new_adj", "[", "cnt", ",", "j", "]", "=", "1", "\n", "adj_temp", "[", "i", "]", "[", "j", "]", "=", "adj_temp", "[", "j", "]", "[", "i", "]", "=", "0", "\n", "# print(i, j, cnt)", "\n", "cnt", "+=", "1", "\n", "", "", "", "for", "i", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t\t\t", "if", "adj_temp", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "\t\t\t\t\t", "assert", "new_adj", "[", "i", ",", "j", "]", "==", "new_adj", "[", "j", ",", "i", "]", "==", "0", "\n", "# print(cnt)", "\n", "# np.save('interp_graph_adj.npy', new_adj)", "\n", "", "", "", "return", "new_adj", "\n", "", "import", "scipy", ".", "sparse", "\n", "if", "dataset", "==", "'KS20'", ":", "\n", "# Joint-Level adjacent matrix", "\n", "\t\t", "j_pair_1", "=", "np", ".", "array", "(", "[", "3", ",", "2", ",", "20", ",", "8", ",", "8", ",", "9", ",", "10", ",", "9", ",", "11", ",", "10", ",", "4", ",", "20", ",", "4", ",", "5", ",", "5", ",", "6", ",", "6", ",", "7", ",", "1", ",", "20", ",", "1", ",", "0", ",", "16", ",", "0", ",", "\n", "12", ",", "0", ",", "16", ",", "17", ",", "12", ",", "13", ",", "17", ",", "18", ",", "19", ",", "18", ",", "13", ",", "14", ",", "14", ",", "15", ",", "2", ",", "20", ",", "11", ",", "23", ",", "10", ",", "24", ",", "7", ",", "21", ",", "6", ",", "22", "]", ")", "\n", "j_pair_2", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "8", ",", "20", ",", "9", ",", "8", ",", "9", ",", "10", ",", "10", ",", "11", ",", "20", ",", "4", ",", "5", ",", "4", ",", "6", ",", "5", ",", "7", ",", "6", ",", "20", ",", "1", ",", "0", ",", "1", ",", "0", ",", "16", ",", "\n", "0", ",", "12", ",", "17", ",", "16", ",", "13", ",", "12", ",", "18", ",", "17", ",", "18", ",", "19", ",", "14", ",", "13", ",", "15", ",", "14", ",", "20", ",", "2", ",", "23", ",", "11", ",", "24", ",", "10", ",", "21", ",", "7", ",", "22", ",", "6", "]", ")", "\n", "con_matrix", "=", "np", ".", "ones", "(", "[", "48", "]", ")", "\n", "adj_joint", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "con_matrix", ",", "(", "j_pair_1", ",", "j_pair_2", ")", ")", ",", "shape", "=", "(", "nb_nodes", ",", "nb_nodes", ")", ")", ".", "toarray", "(", ")", "\n", "# if global_att:", "\n", "# \tadj_joint = np.ones([25, 25])", "\n", "# hyper-Level (interpolation) adjacent matrix, NOT used, replaced by generate_denser_adj", "\n", "# i_pair_1 = np.array(", "\n", "# \t[3, 31, 31, 2, 2, 32, 32, 20, 20, 42, 42, 8, 8, 37, 37, 9, 9, 44, 44, 10, 10, 38, 38, 11, 11,", "\n", "# \t 39, 39, 23, 10, 40, 40, 24, 20, 41, 41, 4, 4, 33, 33, 5, 5, 43, 43, 6, 6, 34, 34, 7, 7, 35,", "\n", "# \t 35, 21, 6, 36, 36, 22,", "\n", "# \t 20, 45, 45, 1, 1, 30, 30, 0, 0, 46, 46, 12, 12, 26, 26, 13, 13, 48, 48, 14, 14, 27, 27, 15,", "\n", "# \t 0, 47, 47, 16, 16, 28, 28, 17, 17, 49, 49, 18, 18, 29, 29, 19])", "\n", "# # miss 25", "\n", "# i_pair_1 = i_pair_1.tolist()", "\n", "# for i in range(len(i_pair_1)):", "\n", "# \tif i_pair_1[i] > 24:", "\n", "# \t\ti_pair_1[i] -= 1", "\n", "# i_pair_1 = np.array(i_pair_1)", "\n", "# i_pair_2 = np.array(", "\n", "# \t[31, 3, 2, 31, 32, 2, 20, 32, 42, 20, 8, 42, 37, 8, 9, 37, 44, 9, 10, 44, 38, 10, 11, 38, 39,", "\n", "# \t 11, 23, 39, 40, 10, 24, 40, 41, 20, 4, 41, 33, 4, 5, 33, 43, 5, 6, 43, 34, 6, 7, 34, 35, 7,", "\n", "# \t 21, 35, 36, 6, 22, 36,", "\n", "# \t 45, 20, 1, 45, 30, 1, 0, 30, 46, 0, 12, 46, 26, 12, 13, 26, 48, 13, 14, 48, 27, 14, 15, 27,", "\n", "# \t 47, 0, 16, 47, 28, 16, 17, 28, 49, 17, 18, 49, 29, 18, 19, 29])", "\n", "# i_pair_2 = i_pair_2.tolist()", "\n", "# for i in range(len(i_pair_2)):", "\n", "# \tif i_pair_2[i] > 24:", "\n", "# \t\ti_pair_2[i] -= 1", "\n", "# i_pair_2 = np.array(i_pair_2)", "\n", "# # print(i_pair_1.shape, i_pair_2.shape)", "\n", "# con_matrix = np.ones([96])", "\n", "# adj_interp = scipy.sparse.coo_matrix((con_matrix, (i_pair_1, i_pair_2)),", "\n", "#                                     shape=(49, 49)).toarray()", "\n", "adj_interp", "=", "generate_denser_adj", "(", "adj_joint", ")", "\n", "", "elif", "dataset", "==", "'CASIA_B'", ":", "\n", "# Joint-Level adjacent matrix", "\n", "\t\t", "j_pair_1", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "1", ",", "5", ",", "5", ",", "6", ",", "6", ",", "7", ",", "1", ",", "8", ",", "8", ",", "9", ",", "9", ",", "10", ",", "1", ",", "11", ",", "11", ",", "12", ",", "12", ",", "13", "]", ")", "\n", "j_pair_2", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "2", ",", "1", ",", "3", ",", "2", ",", "4", ",", "3", ",", "5", ",", "1", ",", "6", ",", "5", ",", "7", ",", "6", ",", "8", ",", "1", ",", "9", ",", "8", ",", "10", ",", "9", ",", "11", ",", "1", ",", "12", ",", "11", ",", "13", ",", "12", "]", ")", "\n", "con_matrix", "=", "np", ".", "ones", "(", "[", "26", "]", ")", "\n", "adj_joint", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "con_matrix", ",", "(", "j_pair_1", ",", "j_pair_2", ")", ")", ",", "shape", "=", "(", "nb_nodes", ",", "nb_nodes", ")", ")", ".", "toarray", "(", ")", "\n", "# if global_att:", "\n", "# \tadj_joint = np.ones([14, 14])", "\n", "adj_interp", "=", "generate_denser_adj", "(", "adj_joint", ")", "\n", "", "else", ":", "\n", "# Joint-Level adjacent matrix", "\n", "\t\t", "j_pair_1", "=", "np", ".", "array", "(", "[", "3", ",", "2", ",", "2", ",", "8", ",", "8", ",", "9", ",", "10", ",", "9", ",", "11", ",", "10", ",", "4", ",", "2", ",", "4", ",", "5", ",", "5", ",", "6", ",", "6", ",", "7", ",", "1", ",", "2", ",", "1", ",", "0", ",", "16", ",", "0", ",", "\n", "12", ",", "0", ",", "16", ",", "17", ",", "12", ",", "13", ",", "17", ",", "18", ",", "19", ",", "18", ",", "13", ",", "14", ",", "14", ",", "15", "]", ")", "\n", "j_pair_2", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "8", ",", "2", ",", "9", ",", "8", ",", "9", ",", "10", ",", "10", ",", "11", ",", "2", ",", "4", ",", "5", ",", "4", ",", "6", ",", "5", ",", "7", ",", "6", ",", "2", ",", "1", ",", "0", ",", "1", ",", "0", ",", "16", ",", "\n", "0", ",", "12", ",", "17", ",", "16", ",", "13", ",", "12", ",", "18", ",", "17", ",", "18", ",", "19", ",", "14", ",", "13", ",", "15", ",", "14", "]", ")", "\n", "con_matrix", "=", "np", ".", "ones", "(", "[", "38", "]", ")", "\n", "adj_joint", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "con_matrix", ",", "(", "j_pair_1", ",", "j_pair_2", ")", ")", ",", "shape", "=", "(", "nb_nodes", ",", "nb_nodes", ")", ")", ".", "toarray", "(", ")", "\n", "# if global_att:", "\n", "# \tadj_joint = np.ones([20, 20])", "\n", "adj_interp", "=", "generate_denser_adj", "(", "adj_joint", ")", "\n", "\n", "# Part-Level adjacent matrix", "\n", "", "p_pair_1", "=", "np", ".", "array", "(", "[", "5", ",", "6", ",", "5", ",", "8", ",", "6", ",", "7", ",", "8", ",", "9", ",", "5", ",", "4", ",", "4", ",", "2", ",", "4", ",", "0", ",", "2", ",", "3", ",", "1", ",", "0", "]", ")", "\n", "p_pair_2", "=", "np", ".", "array", "(", "[", "6", ",", "5", ",", "8", ",", "5", ",", "7", ",", "6", ",", "9", ",", "8", ",", "4", ",", "5", ",", "2", ",", "4", ",", "0", ",", "4", ",", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "con_matrix", "=", "np", ".", "ones", "(", "[", "18", "]", ")", "\n", "adj_part", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "con_matrix", ",", "(", "p_pair_1", ",", "p_pair_2", ")", ")", ",", "shape", "=", "(", "10", ",", "10", ")", ")", ".", "toarray", "(", ")", "\n", "\n", "# Body-Level adjacent matrix", "\n", "b_pair_1", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "2", ",", "4", ",", "2", ",", "1", ",", "2", ",", "0", "]", ")", "\n", "b_pair_2", "=", "np", ".", "array", "(", "[", "3", ",", "2", ",", "4", ",", "2", ",", "1", ",", "2", ",", "0", ",", "2", "]", ")", "\n", "con_matrix", "=", "np", ".", "ones", "(", "[", "8", "]", ")", "\n", "adj_body", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "con_matrix", ",", "(", "b_pair_1", ",", "b_pair_2", ")", ")", ",", "shape", "=", "(", "5", ",", "5", ")", ")", ".", "toarray", "(", ")", "\n", "\n", "# if dataset != 'KS20':", "\n", "X_train_In", "=", "generate_denser_graph_data", "(", "X_train_J", ",", "adj_joint", ",", "nb_nodes", ")", "\n", "X_test_In", "=", "generate_denser_graph_data", "(", "X_test_J", ",", "adj_joint", ",", "nb_nodes", ")", "\n", "\n", "if", "global_att", ":", "\n", "\t\t", "if", "dataset", "==", "'KS20'", ":", "\n", "\t\t\t", "node_num", "=", "25", "\n", "", "elif", "dataset", "==", "'CASIA_B'", ":", "\n", "\t\t\t", "node_num", "=", "14", "\n", "", "else", ":", "\n", "\t\t\t", "node_num", "=", "20", "\n", "", "adj_joint", "=", "np", ".", "ones", "(", "[", "node_num", ",", "node_num", "]", ")", "\n", "adj_interp", "=", "np", ".", "ones", "(", "[", "node_num", "*", "2", "-", "1", ",", "node_num", "*", "2", "-", "1", "]", ")", "\n", "adj_part", "=", "np", ".", "ones", "(", "[", "10", ",", "10", "]", ")", "\n", "adj_body", "=", "np", ".", "ones", "(", "[", "5", ",", "5", "]", ")", "\n", "\n", "", "if", "dataset", "==", "'IAS'", ":", "\n", "\t\t", "nb_classes", "=", "11", "\n", "", "elif", "dataset", "==", "'KGBD'", ":", "\n", "\t\t", "nb_classes", "=", "164", "\n", "", "elif", "dataset", "==", "'BIWI'", ":", "\n", "\t\t", "nb_classes", "=", "28", "\n", "", "elif", "dataset", "==", "'KS20'", ":", "\n", "\t\t", "nb_classes", "=", "20", "\n", "", "elif", "dataset", "==", "'CASIA_B'", ":", "\n", "\t\t", "nb_classes", "=", "124", "\n", "\n", "", "adj_joint", "=", "adj_joint", "[", "np", ".", "newaxis", "]", "\n", "biases_joint", "=", "adj_to_bias", "(", "adj_joint", ",", "[", "nb_nodes", "]", ",", "nhood", "=", "nhood", ")", "\n", "\n", "adj_part", "=", "adj_part", "[", "np", ".", "newaxis", "]", "\n", "biases_part", "=", "adj_to_bias", "(", "adj_part", ",", "[", "10", "]", ",", "nhood", "=", "1", ")", "\n", "\n", "adj_body", "=", "adj_body", "[", "np", ".", "newaxis", "]", "\n", "biases_body", "=", "adj_to_bias", "(", "adj_body", ",", "[", "5", "]", ",", "nhood", "=", "1", ")", "\n", "\n", "adj_interp", "=", "adj_interp", "[", "np", ".", "newaxis", "]", "\n", "biases_interp", "=", "adj_to_bias", "(", "adj_interp", ",", "[", "nb_nodes", "*", "2", "-", "1", "]", ",", "nhood", "=", "1", ")", "\n", "\n", "return", "X_train_J", ",", "X_train_P", ",", "X_train_B", ",", "X_train_In", ",", "y_train", ",", "X_test_J", ",", "X_test_P", ",", "X_test_B", ",", "X_test_In", ",", "y_test", ",", "adj_joint", ",", "biases_joint", ",", "adj_part", ",", "biases_part", ",", "adj_body", ",", "biases_body", ",", "adj_interp", ",", "biases_interp", ",", "nb_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.reduce2part": [[240, 289], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate().reshape", "numpy.concatenate"], "function", ["None"], ["def", "reduce2part", "(", "X", ",", "joint_num", "=", "20", ")", ":", "\n", "\t", "if", "joint_num", "==", "25", ":", "\n", "\t\t", "left_leg_up", "=", "[", "12", ",", "13", "]", "\n", "left_leg_down", "=", "[", "14", ",", "15", "]", "\n", "right_leg_up", "=", "[", "16", ",", "17", "]", "\n", "right_leg_down", "=", "[", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", "]", "\n", "head", "=", "[", "2", ",", "3", ",", "20", "]", "\n", "left_arm_up", "=", "[", "4", ",", "5", "]", "\n", "left_arm_down", "=", "[", "6", ",", "7", ",", "21", ",", "22", "]", "\n", "right_arm_up", "=", "[", "8", ",", "9", "]", "\n", "right_arm_down", "=", "[", "10", ",", "11", ",", "23", ",", "24", "]", "\n", "", "elif", "joint_num", "==", "20", ":", "\n", "\t\t", "left_leg_up", "=", "[", "12", ",", "13", "]", "\n", "left_leg_down", "=", "[", "14", ",", "15", "]", "\n", "right_leg_up", "=", "[", "16", ",", "17", "]", "\n", "right_leg_down", "=", "[", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", "]", "\n", "head", "=", "[", "2", ",", "3", "]", "\n", "left_arm_up", "=", "[", "4", ",", "5", "]", "\n", "left_arm_down", "=", "[", "6", ",", "7", "]", "\n", "right_arm_up", "=", "[", "8", ",", "9", "]", "\n", "right_arm_down", "=", "[", "10", ",", "11", "]", "\n", "", "elif", "joint_num", "==", "14", ":", "\n", "\t\t", "left_leg_up", "=", "[", "11", "]", "\n", "left_leg_down", "=", "[", "12", ",", "13", "]", "\n", "right_leg_up", "=", "[", "8", "]", "\n", "right_leg_down", "=", "[", "9", ",", "10", "]", "\n", "torso", "=", "[", "1", "]", "\n", "head", "=", "[", "0", "]", "\n", "left_arm_up", "=", "[", "5", "]", "\n", "left_arm_down", "=", "[", "6", ",", "7", "]", "\n", "right_arm_up", "=", "[", "2", "]", "\n", "right_arm_down", "=", "[", "3", ",", "4", "]", "\n", "\n", "", "x_torso", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "torso", ",", ":", "]", ",", "axis", "=", "2", ")", "# [N * T, V=1]", "\n", "x_leftlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_head", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "head", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "X_part", "=", "np", ".", "concatenate", "(", "(", "x_leftlegup", ",", "x_leftlegdown", ",", "x_rightlegup", ",", "x_rightlegdown", ",", "x_torso", ",", "x_head", ",", "x_leftarmup", ",", "\n", "x_leftarmdown", ",", "x_rightarmup", ",", "x_rightarmdown", ")", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "10", ",", "3", "]", ")", "\n", "return", "X_part", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.reduce2body": [[294, 322], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate().reshape", "numpy.concatenate"], "function", ["None"], ["def", "reduce2body", "(", "X", ",", "joint_num", "=", "20", ")", ":", "\n", "\t", "if", "joint_num", "==", "25", ":", "\n", "\t\t", "left_leg", "=", "[", "12", ",", "13", ",", "14", ",", "15", "]", "\n", "right_leg", "=", "[", "16", ",", "17", ",", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "20", "]", "\n", "left_arm", "=", "[", "4", ",", "5", ",", "6", ",", "7", ",", "21", ",", "22", "]", "\n", "right_arm", "=", "[", "8", ",", "9", ",", "10", ",", "11", ",", "23", ",", "24", "]", "\n", "", "elif", "joint_num", "==", "20", ":", "\n", "\t\t", "left_leg", "=", "[", "12", ",", "13", ",", "14", ",", "15", "]", "\n", "right_leg", "=", "[", "16", ",", "17", ",", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", "left_arm", "=", "[", "4", ",", "5", ",", "6", ",", "7", "]", "\n", "right_arm", "=", "[", "8", ",", "9", ",", "10", ",", "11", "]", "\n", "", "elif", "joint_num", "==", "14", ":", "\n", "\t\t", "left_leg", "=", "[", "11", ",", "12", ",", "13", "]", "\n", "right_leg", "=", "[", "8", ",", "9", ",", "10", "]", "\n", "torso", "=", "[", "0", ",", "1", "]", "\n", "left_arm", "=", "[", "5", ",", "6", ",", "7", "]", "\n", "right_arm", "=", "[", "2", ",", "3", ",", "4", "]", "\n", "\n", "", "x_torso", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "torso", ",", ":", "]", ",", "axis", "=", "2", ")", "# [N * T, V=1]", "\n", "x_leftleg", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightleg", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarm", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarm", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "X_body", "=", "np", ".", "concatenate", "(", "(", "x_leftleg", ",", "x_rightleg", ",", "x_torso", ",", "x_leftarm", ",", "x_rightarm", ")", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "5", ",", "3", "]", ")", "\n", "return", "X_body", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.interpolation": [[327, 461], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate().reshape", "numpy.concatenate", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate().reshape", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["def", "interpolation", "(", "X", ",", "joint_num", "=", "20", ")", ":", "\n", "\t", "if", "joint_num", "==", "25", ":", "\n", "\t\t", "left_leg_up", "=", "[", "12", ",", "13", "]", "\n", "left_leg_down", "=", "[", "14", ",", "15", "]", "\n", "right_leg_up", "=", "[", "16", ",", "17", "]", "\n", "right_leg_down", "=", "[", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", "]", "\n", "head_1", "=", "[", "2", ",", "3", "]", "\n", "head_2", "=", "[", "2", ",", "20", "]", "\n", "left_arm_up", "=", "[", "4", ",", "5", "]", "\n", "left_arm_down_1", "=", "[", "6", ",", "7", "]", "\n", "left_arm_down_2", "=", "[", "7", ",", "21", "]", "\n", "left_arm_down_3", "=", "[", "6", ",", "22", "]", "\n", "right_arm_up", "=", "[", "8", ",", "9", "]", "\n", "right_arm_down_1", "=", "[", "10", ",", "11", "]", "\n", "right_arm_down_2", "=", "[", "11", ",", "23", "]", "\n", "right_arm_down_3", "=", "[", "10", ",", "24", "]", "\n", "shoulder_1", "=", "[", "4", ",", "20", "]", "\n", "shoulder_2", "=", "[", "8", ",", "20", "]", "\n", "elbow_1", "=", "[", "5", ",", "6", "]", "\n", "elbow_2", "=", "[", "9", ",", "10", "]", "\n", "spine_mm", "=", "[", "20", ",", "1", "]", "\n", "hip_1", "=", "[", "0", ",", "12", "]", "\n", "hip_2", "=", "[", "0", ",", "16", "]", "\n", "knee_1", "=", "[", "13", ",", "14", "]", "\n", "knee_2", "=", "[", "17", ",", "18", "]", "\n", "x_torso", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "torso", ",", ":", "]", ",", "axis", "=", "2", ")", "# [N * T, V=1]", "\n", "x_leftlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_head_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "head_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_head_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "head_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmdown_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_down_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmdown_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_down_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmdown_3", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_down_3", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmdown_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_down_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmdown_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_down_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmdown_3", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_down_3", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "shoulder_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "shoulder_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "shoulder_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "shoulder_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "elbow_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "elbow_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "elbow_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "elbow_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "spine_mm", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "spine_mm", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "hip_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "hip_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "hip_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "hip_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "knee_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "knee_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "knee_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "knee_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "X_part", "=", "np", ".", "concatenate", "(", "(", "x_leftlegup", ",", "x_leftlegdown", ",", "x_rightlegup", ",", "\n", "x_rightlegdown", ",", "x_torso", ",", "x_head_1", ",", "x_head_2", ",", "x_leftarmup", ",", "\n", "x_leftarmdown_1", ",", "x_leftarmdown_2", ",", "x_leftarmdown_3", ",", "\n", "x_rightarmup", ",", "x_rightarmdown_1", ",", "x_rightarmdown_2", ",", "x_rightarmdown_3", ",", "\n", "shoulder_1", ",", "shoulder_2", ",", "elbow_1", ",", "elbow_2", ",", "spine_mm", ",", "\n", "hip_1", ",", "hip_2", ",", "knee_1", ",", "knee_2", ")", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "24", ",", "3", "]", ")", "\n", "# 25+24", "\n", "X_interp", "=", "np", ".", "concatenate", "(", "(", "X", ",", "X_part", ")", ",", "axis", "=", "-", "2", ")", "\n", "# Changed", "\n", "", "elif", "joint_num", "==", "20", ":", "\n", "# left_leg_up = [12, 13]", "\n", "# left_leg_down = [14, 15]", "\n", "# right_leg_up = [16, 17]", "\n", "# right_leg_down = [18, 19]", "\n", "# torso = [0, 1]", "\n", "# head = [2, 3]", "\n", "# left_arm_up = [4, 5]", "\n", "# left_arm_down = [6, 7]", "\n", "# right_arm_up = [8, 9]", "\n", "# right_arm_down = [10, 11]", "\n", "#", "\n", "\t\t", "left_leg_up", "=", "[", "12", ",", "13", "]", "\n", "left_leg_down", "=", "[", "14", ",", "15", "]", "\n", "right_leg_up", "=", "[", "16", ",", "17", "]", "\n", "right_leg_down", "=", "[", "18", ",", "19", "]", "\n", "torso", "=", "[", "0", ",", "1", "]", "\n", "head_1", "=", "[", "2", ",", "3", "]", "\n", "# head_2 = [2, 20]", "\n", "left_arm_up", "=", "[", "4", ",", "5", "]", "\n", "left_arm_down_1", "=", "[", "6", ",", "7", "]", "\n", "# left_arm_down_2 = [7, 21]", "\n", "# left_arm_down_3 = [6, 22]", "\n", "right_arm_up", "=", "[", "8", ",", "9", "]", "\n", "right_arm_down_1", "=", "[", "10", ",", "11", "]", "\n", "# right_arm_down_2 = [11, 23]", "\n", "# right_arm_down_3 = [10, 24]", "\n", "# shoulder_1 = [4, 20]", "\n", "# shoulder_2 = [8, 20]", "\n", "shoulder_1", "=", "[", "4", ",", "2", "]", "\n", "shoulder_2", "=", "[", "8", ",", "2", "]", "\n", "elbow_1", "=", "[", "5", ",", "6", "]", "\n", "elbow_2", "=", "[", "9", ",", "10", "]", "\n", "# spine_mm = [20, 1]", "\n", "spine_mm", "=", "[", "2", ",", "1", "]", "\n", "hip_1", "=", "[", "0", ",", "12", "]", "\n", "hip_2", "=", "[", "0", ",", "16", "]", "\n", "knee_1", "=", "[", "13", ",", "14", "]", "\n", "knee_2", "=", "[", "17", ",", "18", "]", "\n", "\n", "x_torso", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "torso", ",", ":", "]", ",", "axis", "=", "2", ")", "# [N * T, V=1]", "\n", "x_leftlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightlegdown", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_leg_down", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_head_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "head_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "# x_head_2 = np.mean(X[:, :, head_2, :], axis=2)", "\n", "x_leftarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_leftarmdown_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "left_arm_down_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "# x_leftarmdown_2 = np.mean(X[:, :, left_arm_down_2, :], axis=2)", "\n", "# x_leftarmdown_3 = np.mean(X[:, :, left_arm_down_3, :], axis=2)", "\n", "x_rightarmup", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_up", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "x_rightarmdown_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "right_arm_down_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "# x_rightarmdown_2 = np.mean(X[:, :, right_arm_down_2, :], axis=2)", "\n", "# x_rightarmdown_3 = np.mean(X[:, :, right_arm_down_3, :], axis=2)", "\n", "shoulder_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "shoulder_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "shoulder_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "shoulder_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "elbow_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "elbow_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "elbow_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "elbow_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "spine_mm", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "spine_mm", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "hip_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "hip_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "hip_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "hip_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "knee_1", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "knee_1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "knee_2", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "knee_2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "X_part", "=", "np", ".", "concatenate", "(", "(", "x_leftlegup", ",", "x_leftlegdown", ",", "x_rightlegup", ",", "\n", "x_rightlegdown", ",", "x_torso", ",", "x_head_1", ",", "x_leftarmup", ",", "\n", "x_leftarmdown_1", ",", "\n", "x_rightarmup", ",", "x_rightarmdown_1", ",", "\n", "shoulder_1", ",", "shoulder_2", ",", "elbow_1", ",", "elbow_2", ",", "spine_mm", ",", "\n", "hip_1", ",", "hip_2", ",", "knee_1", ",", "knee_2", ")", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "19", ",", "3", "]", ")", "\n", "# 25+24", "\n", "X_interp", "=", "np", ".", "concatenate", "(", "(", "X", ",", "X_part", ")", ",", "axis", "=", "-", "2", ")", "\n", "", "return", "X_interp", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.generate_denser_graph_data": [[462, 485], ["copy.deepcopy", "adj_temp.tolist.tolist", "len", "range", "numpy.reshape", "numpy.concatenate", "range", "numpy.mean", "numpy.concatenate"], "function", ["None"], ["", "def", "generate_denser_graph_data", "(", "X", ",", "adj", ",", "joint_num", "=", "20", ")", ":", "\n", "\t", "adj_temp", "=", "copy", ".", "deepcopy", "(", "adj", ")", "\n", "adj_temp", "=", "adj_temp", ".", "tolist", "(", ")", "\n", "node_num", "=", "len", "(", "adj_temp", ")", "\n", "cnt", "=", "node_num", "\n", "for", "i", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "node_num", ")", ":", "\n", "\t\t\t", "if", "adj_temp", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "\t\t\t\t", "adj_temp", "[", "i", "]", "[", "j", "]", "=", "adj_temp", "[", "j", "]", "[", "i", "]", "=", "0", "\n", "new_node", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "[", "i", ",", "j", "]", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "# print(new_node.shape)", "\n", "if", "cnt", "==", "node_num", ":", "\n", "\t\t\t\t\t", "X_interp", "=", "new_node", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "X_interp", "=", "np", ".", "concatenate", "(", "(", "X_interp", ",", "new_node", ")", ",", "axis", "=", "-", "1", ")", "\n", "# print(X_interp.shape)", "\n", "# print(i, j)", "\n", "# print(i, j, cnt)", "\n", "", "cnt", "+=", "1", "\n", "# print(X_interp.shape)", "\n", "", "", "", "X_interp", "=", "np", ".", "reshape", "(", "X_interp", ",", "[", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "node_num", "-", "1", ",", "3", "]", ")", "\n", "X_interp", "=", "np", ".", "concatenate", "(", "(", "X", ",", "X_interp", ")", ",", "axis", "=", "-", "2", ")", "\n", "return", "X_interp", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.cal_nAUC": [[489, 496], ["numpy.array", "numpy.array", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "np.array.ravel", "np.array.ravel"], "function", ["None"], ["def", "cal_nAUC", "(", "scores", ",", "labels", ")", ":", "\n", "\t", "scores", "=", "np", ".", "array", "(", "scores", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "# Compute micro-average ROC curve and ROC area", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "labels", ".", "ravel", "(", ")", ",", "scores", ".", "ravel", "(", ")", ")", "\n", "roc_auc", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "return", "roc_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.class_samp_gen": [[500, 536], ["len", "sorted", "range", "numpy.array", "sorted.keys", "sorted.items", "all_batch_X.extend", "all_batch_y.extend", "batch_y.extend", "len", "numpy.random.choice", "numpy.array", "v_array[].tolist", "batch_X.extend", "batch_X.extend", "len"], "function", ["None"], ["def", "class_samp_gen", "(", "X", ",", "y", ",", "ids_", ",", "batch_size", ")", ":", "\n", "\t", "class_num", "=", "len", "(", "ids_", ".", "keys", "(", ")", ")", "\n", "ids_", "=", "sorted", "(", "ids_", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ")", "\n", "cnt", "=", "0", "\n", "all_batch_X", "=", "[", "]", "\n", "all_batch_y", "=", "[", "]", "\n", "total", "=", "y", ".", "shape", "[", "0", "]", "\n", "batch_num", "=", "total", "//", "batch_size", "*", "2", "\n", "class_in_bacth", "=", "class_num", "\n", "batch_per_class", "=", "batch_size", "//", "class_in_bacth", "\n", "class_cnt", "=", "class_in_bacth", "\n", "# print(total, batch_num, batch_per_class)", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "\t\t", "batch_X", "=", "[", "]", "\n", "batch_y", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "ids_", "[", "class_cnt", "-", "class_in_bacth", ":", "class_cnt", "]", ":", "\n", "# print(k, len(v))", "\n", "# cnt += len(v)", "\n", "\t\t\t", "if", "len", "(", "v", "[", "batch_per_class", "*", "i", ":", "batch_per_class", "*", "(", "i", "+", "1", ")", "]", ")", "<", "batch_per_class", ":", "\n", "\t\t\t\t", "rand_ind", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "v", ")", ",", "batch_per_class", ")", "\n", "v_array", "=", "np", ".", "array", "(", "v", ")", "\n", "samp_per_class", "=", "v_array", "[", "rand_ind", "]", ".", "tolist", "(", ")", "\n", "batch_X", ".", "extend", "(", "samp_per_class", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "batch_X", ".", "extend", "(", "v", "[", "batch_per_class", "*", "i", ":", "batch_per_class", "*", "(", "i", "+", "1", ")", "]", ")", "\n", "", "batch_y", ".", "extend", "(", "batch_per_class", "*", "[", "k", "]", ")", "\n", "", "if", "class_cnt", "+", "class_in_bacth", ">", "class_num", "and", "class_cnt", "<=", "class_num", ":", "\n", "\t\t\t", "class_cnt", "=", "class_num", "\n", "", "else", ":", "\n", "\t\t\t", "class_cnt", "=", "class_cnt", "+", "class_in_bacth", "\n", "", "all_batch_X", ".", "extend", "(", "batch_X", ")", "\n", "all_batch_y", ".", "extend", "(", "batch_y", ")", "\n", "# print(len(all_batch_X), len(all_batch_y))", "\n", "", "X_train", "=", "X", "[", "all_batch_X", "]", "\n", "y_train", "=", "np", ".", "array", "(", "all_batch_y", ")", "\n", "return", "X_train", ",", "y_train", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.adj_to_bias": [[545, 557], ["numpy.empty", "range", "numpy.eye", "range", "range", "numpy.matmul", "range", "numpy.eye"], "function", ["None"], ["def", "adj_to_bias", "(", "adj", ",", "sizes", ",", "nhood", "=", "1", ")", ":", "\n", "\t", "nb_graphs", "=", "adj", ".", "shape", "[", "0", "]", "\n", "mt", "=", "np", ".", "empty", "(", "adj", ".", "shape", ")", "\n", "for", "g", "in", "range", "(", "nb_graphs", ")", ":", "\n", "\t\t", "mt", "[", "g", "]", "=", "np", ".", "eye", "(", "adj", ".", "shape", "[", "1", "]", ")", "\n", "for", "_", "in", "range", "(", "nhood", ")", ":", "\n", "\t\t\t", "mt", "[", "g", "]", "=", "np", ".", "matmul", "(", "mt", "[", "g", "]", ",", "(", "adj", "[", "g", "]", "+", "np", ".", "eye", "(", "adj", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "", "for", "i", "in", "range", "(", "sizes", "[", "g", "]", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "sizes", "[", "g", "]", ")", ":", "\n", "\t\t\t\t", "if", "mt", "[", "g", "]", "[", "i", "]", "[", "j", "]", ">", "0.0", ":", "\n", "\t\t\t\t\t", "mt", "[", "g", "]", "[", "i", "]", "[", "j", "]", "=", "1.0", "\n", "", "", "", "", "return", "-", "1e9", "*", "(", "1.0", "-", "mt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.parse_index_file": [[563, 569], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["", "def", "parse_index_file", "(", "filename", ")", ":", "\n", "\t", "\"\"\"Parse index file.\"\"\"", "\n", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "\t\t", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sample_mask": [[571, 576], ["numpy.zeros", "numpy.array"], "function", ["None"], ["", "def", "sample_mask", "(", "idx", ",", "l", ")", ":", "\n", "\t", "\"\"\"Create mask.\"\"\"", "\n", "mask", "=", "np", ".", "zeros", "(", "l", ")", "\n", "mask", "[", "idx", "]", "=", "1", "\n", "return", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.load_data": [[578, 630], ["range", "tuple", "process_i.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "networkx.adjacency_matrix", "numpy.vstack", "np.sort.tolist", "range", "range", "process_i.sample_mask", "process_i.sample_mask", "process_i.sample_mask", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "len", "len", "open", "min", "scipy.vstack", "len", "objects.append", "objects.append", "max", "len", "len", "pickle.load", "pickle.load", "min", "min"], "function", ["home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.parse_index_file", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sample_mask", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sample_mask", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sample_mask"], ["", "def", "load_data", "(", "dataset_str", ")", ":", "# {'pubmed', 'citeseer', 'cora'}", "\n", "\t", "\"\"\"Load data.\"\"\"", "\n", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "\t\t", "with", "open", "(", "\"data/ind.{}.{}\"", ".", "format", "(", "dataset_str", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t\t", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "\t\t\t\t", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"data/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "\t\t", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "\n", "idx_test", "=", "test_idx_range", ".", "tolist", "(", ")", "\n", "idx_train", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "idx_val", "=", "range", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", "+", "500", ")", "\n", "\n", "train_mask", "=", "sample_mask", "(", "idx_train", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "val_mask", "=", "sample_mask", "(", "idx_val", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "test_mask", "=", "sample_mask", "(", "idx_test", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y_train", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_val", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_test", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_train", "[", "train_mask", ",", ":", "]", "=", "labels", "[", "train_mask", ",", ":", "]", "\n", "y_val", "[", "val_mask", ",", ":", "]", "=", "labels", "[", "val_mask", ",", ":", "]", "\n", "y_test", "[", "test_mask", ",", ":", "]", "=", "labels", "[", "test_mask", ",", ":", "]", "\n", "\n", "# print(adj.shape)", "\n", "# print(features.shape)", "\n", "\n", "return", "adj", ",", "features", ",", "y_train", ",", "y_val", ",", "y_test", ",", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.load_random_data": [[632, 657], ["scipy.random", "scipy.random", "numpy.random.randint", "numpy.zeros", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "int", "int", "int"], "function", ["None"], ["", "def", "load_random_data", "(", "size", ")", ":", "\n", "\t", "adj", "=", "sp", ".", "random", "(", "size", ",", "size", ",", "density", "=", "0.002", ")", "# density similar to cora", "\n", "features", "=", "sp", ".", "random", "(", "size", ",", "1000", ",", "density", "=", "0.015", ")", "\n", "int_labels", "=", "np", ".", "random", ".", "randint", "(", "7", ",", "size", "=", "(", "size", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "size", ",", "7", ")", ")", "# Nx7", "\n", "labels", "[", "np", ".", "arange", "(", "size", ")", ",", "int_labels", "]", "=", "1", "\n", "\n", "train_mask", "=", "np", ".", "zeros", "(", "(", "size", ",", ")", ")", ".", "astype", "(", "bool", ")", "\n", "train_mask", "[", "np", ".", "arange", "(", "size", ")", "[", "0", ":", "int", "(", "size", "/", "2", ")", "]", "]", "=", "1", "\n", "\n", "val_mask", "=", "np", ".", "zeros", "(", "(", "size", ",", ")", ")", ".", "astype", "(", "bool", ")", "\n", "val_mask", "[", "np", ".", "arange", "(", "size", ")", "[", "int", "(", "size", "/", "2", ")", ":", "]", "]", "=", "1", "\n", "\n", "test_mask", "=", "np", ".", "zeros", "(", "(", "size", ",", ")", ")", ".", "astype", "(", "bool", ")", "\n", "test_mask", "[", "np", ".", "arange", "(", "size", ")", "[", "int", "(", "size", "/", "2", ")", ":", "]", "]", "=", "1", "\n", "\n", "y_train", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_val", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_test", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_train", "[", "train_mask", ",", ":", "]", "=", "labels", "[", "train_mask", ",", ":", "]", "\n", "y_val", "[", "val_mask", ",", ":", "]", "=", "labels", "[", "val_mask", ",", ":", "]", "\n", "y_test", "[", "test_mask", ",", ":", "]", "=", "labels", "[", "test_mask", ",", ":", "]", "\n", "\n", "# sparse NxN, sparse NxF, norm NxC, ..., norm Nx1, ...", "\n", "return", "adj", ",", "features", ",", "y_train", ",", "y_val", ",", "y_test", ",", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sparse_to_tuple": [[659, 677], ["isinstance", "numpy.vstack().transpose", "range", "process_i.sparse_to_tuple.to_tuple"], "function", ["None"], ["", "def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "\t", "\"\"\"Convert sparse matrix to tuple representation.\"\"\"", "\n", "\n", "def", "to_tuple", "(", "mx", ")", ":", "\n", "\t\t", "if", "not", "sp", ".", "isspmatrix_coo", "(", "mx", ")", ":", "\n", "\t\t\t", "mx", "=", "mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "mx", ".", "row", ",", "mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "mx", ".", "data", "\n", "shape", "=", "mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n", "", "if", "isinstance", "(", "sparse_mx", ",", "list", ")", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "len", "(", "sparse_mx", ")", ")", ":", "\n", "\t\t\t", "sparse_mx", "[", "i", "]", "=", "to_tuple", "(", "sparse_mx", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "\t\t", "sparse_mx", "=", "to_tuple", "(", "sparse_mx", ")", "\n", "\n", "", "return", "sparse_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.standardize_data": [[679, 690], ["f.todense.todense", "f[].mean", "f[].std", "f[].mean", "f[].std", "numpy.squeeze", "numpy.array"], "function", ["None"], ["", "def", "standardize_data", "(", "f", ",", "train_mask", ")", ":", "\n", "\t", "\"\"\"Standardize feature matrix and convert to tuple representation\"\"\"", "\n", "# standardize data", "\n", "f", "=", "f", ".", "todense", "(", ")", "\n", "mu", "=", "f", "[", "train_mask", "==", "True", ",", ":", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "sigma", "=", "f", "[", "train_mask", "==", "True", ",", ":", "]", ".", "std", "(", "axis", "=", "0", ")", "\n", "f", "=", "f", "[", ":", ",", "np", ".", "squeeze", "(", "np", ".", "array", "(", "sigma", ">", "0", ")", ")", "]", "\n", "mu", "=", "f", "[", "train_mask", "==", "True", ",", ":", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "sigma", "=", "f", "[", "train_mask", "==", "True", ",", ":", "]", ".", "std", "(", "axis", "=", "0", ")", "\n", "f", "=", "(", "f", "-", "mu", ")", "/", "sigma", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.preprocess_features": [[692, 700], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "r_mat_inv.dot.todense", "process_i.sparse_to_tuple", "numpy.power", "numpy.isinf"], "function", ["home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sparse_to_tuple"], ["", "def", "preprocess_features", "(", "features", ")", ":", "\n", "\t", "\"\"\"Row-normalize feature matrix and convert to tuple representation\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "features", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "features", "=", "r_mat_inv", ".", "dot", "(", "features", ")", "\n", "return", "features", ".", "todense", "(", ")", ",", "sparse_to_tuple", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.normalize_adj": [[702, 710], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.dot().transpose().dot().tocoo", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["None"], ["", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "\t", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.preprocess_adj": [[712, 716], ["process_i.normalize_adj", "process_i.sparse_to_tuple", "scipy.eye"], "function", ["home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.normalize_adj", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.sparse_to_tuple"], ["", "def", "preprocess_adj", "(", "adj", ")", ":", "\n", "\t", "\"\"\"Preprocessing of adjacency matrix for simple GCN model and conversion to tuple representation.\"\"\"", "\n", "adj_normalized", "=", "normalize_adj", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "sparse_to_tuple", "(", "adj_normalized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.process_i.preprocess_adj_bias": [[718, 729], ["adj.tocoo.astype", "numpy.vstack().transpose", "scipy.eye", "scipy.isspmatrix_coo", "adj.tocoo.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "preprocess_adj_bias", "(", "adj", ")", ":", "\n", "\t", "num_nodes", "=", "adj", ".", "shape", "[", "0", "]", "\n", "adj", "=", "adj", "+", "sp", ".", "eye", "(", "num_nodes", ")", "# self-loop", "\n", "adj", "[", "adj", ">", "0.0", "]", "=", "1.0", "\n", "if", "not", "sp", ".", "isspmatrix_coo", "(", "adj", ")", ":", "\n", "\t\t", "adj", "=", "adj", ".", "tocoo", "(", ")", "\n", "", "adj", "=", "adj", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "vstack", "(", "\n", "(", "adj", ".", "col", ",", "adj", ".", "row", ")", ")", ".", "transpose", "(", ")", "# This is where I made a mistake, I used (adj.row, adj.col) instead", "\n", "# return tf.SparseTensor(indices=indices, values=adj.data, dense_shape=adj.shape)", "\n", "return", "indices", ",", "adj", ".", "data", ",", "adj", ".", "shape", "\n", "", ""]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.models.gat.MGRN_S.inference": [[8, 37], ["range", "tensorflow.concat", "range", "range", "attns.append", "len", "range", "tensorflow.concat", "out.append", "tensorflow.add_n", "utils.layers.attn_head", "attns.append", "utils.layers.attn_head", "utils.layers.attn_head", "tensorflow.add_n"], "methods", ["home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.layers.attn_head", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.layers.attn_head", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.layers.attn_head"], ["    ", "def", "inference", "(", "inputs", ",", "nb_classes", ",", "nb_nodes", ",", "training", ",", "attn_drop", ",", "ffd_drop", ",", "\n", "bias_mat", ",", "hid_units", ",", "n_heads", ",", "activation", "=", "tf", ".", "nn", ".", "elu", ",", "residual", "=", "False", ",", "r_pool", "=", "True", ")", ":", "\n", "        ", "attns", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_heads", "[", "0", "]", ")", ":", "\n", "            ", "attns", ".", "append", "(", "layers", ".", "attn_head", "(", "inputs", ",", "bias_mat", "=", "bias_mat", ",", "\n", "out_sz", "=", "hid_units", "[", "0", "]", ",", "activation", "=", "activation", ",", "\n", "in_drop", "=", "ffd_drop", ",", "coef_drop", "=", "attn_drop", ",", "residual", "=", "False", ")", ")", "\n", "", "h_1", "=", "tf", ".", "concat", "(", "attns", ",", "axis", "=", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hid_units", ")", ")", ":", "\n", "            ", "h_old", "=", "h_1", "\n", "attns", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_heads", "[", "i", "]", ")", ":", "\n", "                ", "attns", ".", "append", "(", "layers", ".", "attn_head", "(", "h_1", ",", "bias_mat", "=", "bias_mat", ",", "\n", "out_sz", "=", "hid_units", "[", "i", "]", ",", "activation", "=", "activation", ",", "\n", "in_drop", "=", "ffd_drop", ",", "coef_drop", "=", "attn_drop", ",", "residual", "=", "residual", ")", ")", "\n", "", "h_1", "=", "tf", ".", "concat", "(", "attns", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "nb_classes", "==", "0", ":", "\n", "            ", "if", "r_pool", ":", "\n", "                ", "return", "tf", ".", "add_n", "(", "attns", ")", "/", "n_heads", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "return", "h_1", "\n", "", "", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_heads", "[", "-", "1", "]", ")", ":", "\n", "            ", "out", ".", "append", "(", "layers", ".", "attn_head", "(", "h_1", ",", "bias_mat", "=", "bias_mat", ",", "\n", "out_sz", "=", "nb_classes", ",", "activation", "=", "lambda", "x", ":", "x", ",", "\n", "in_drop", "=", "ffd_drop", ",", "coef_drop", "=", "attn_drop", ",", "residual", "=", "False", ")", ")", "\n", "", "logits", "=", "tf", ".", "add_n", "(", "out", ")", "/", "n_heads", "[", "-", "1", "]", "\n", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.models.sp_gat.SpGAT.inference": [[8, 35], ["range", "tensorflow.concat", "range", "range", "attns.append", "len", "range", "tensorflow.concat", "out.append", "tensorflow.add_n", "utils.layers.sp_attn_head", "attns.append", "utils.layers.sp_attn_head", "utils.layers.sp_attn_head"], "methods", ["home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.layers.sp_attn_head", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.layers.sp_attn_head", "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.utils.layers.sp_attn_head"], ["    ", "def", "inference", "(", "inputs", ",", "nb_classes", ",", "nb_nodes", ",", "training", ",", "attn_drop", ",", "ffd_drop", ",", "\n", "bias_mat", ",", "hid_units", ",", "n_heads", ",", "activation", "=", "tf", ".", "nn", ".", "elu", ",", "\n", "residual", "=", "False", ")", ":", "\n", "        ", "attns", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_heads", "[", "0", "]", ")", ":", "\n", "            ", "attns", ".", "append", "(", "layers", ".", "sp_attn_head", "(", "inputs", ",", "\n", "adj_mat", "=", "bias_mat", ",", "\n", "out_sz", "=", "hid_units", "[", "0", "]", ",", "activation", "=", "activation", ",", "nb_nodes", "=", "nb_nodes", ",", "\n", "in_drop", "=", "ffd_drop", ",", "coef_drop", "=", "attn_drop", ",", "residual", "=", "False", ")", ")", "\n", "", "h_1", "=", "tf", ".", "concat", "(", "attns", ",", "axis", "=", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hid_units", ")", ")", ":", "\n", "            ", "h_old", "=", "h_1", "\n", "attns", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_heads", "[", "i", "]", ")", ":", "\n", "                ", "attns", ".", "append", "(", "layers", ".", "sp_attn_head", "(", "h_1", ",", "\n", "adj_mat", "=", "bias_mat", ",", "\n", "out_sz", "=", "hid_units", "[", "i", "]", ",", "activation", "=", "activation", ",", "nb_nodes", "=", "nb_nodes", ",", "\n", "in_drop", "=", "ffd_drop", ",", "coef_drop", "=", "attn_drop", ",", "residual", "=", "residual", ")", ")", "\n", "", "h_1", "=", "tf", ".", "concat", "(", "attns", ",", "axis", "=", "-", "1", ")", "\n", "", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_heads", "[", "-", "1", "]", ")", ":", "\n", "            ", "out", ".", "append", "(", "layers", ".", "sp_attn_head", "(", "h_1", ",", "adj_mat", "=", "bias_mat", ",", "\n", "out_sz", "=", "nb_classes", ",", "activation", "=", "lambda", "x", ":", "x", ",", "nb_nodes", "=", "nb_nodes", ",", "\n", "in_drop", "=", "ffd_drop", ",", "coef_drop", "=", "attn_drop", ",", "residual", "=", "False", ")", ")", "\n", "", "logits", "=", "tf", ".", "add_n", "(", "out", ")", "/", "n_heads", "[", "-", "1", "]", "\n", "\n", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.models.base_gattn.BaseGAttN.loss": [[4, 9], ["tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.one_hot"], "methods", ["None"], ["    ", "def", "loss", "(", "logits", ",", "labels", ",", "nb_classes", ",", "class_weights", ")", ":", "\n", "        ", "sample_wts", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "tf", ".", "one_hot", "(", "labels", ",", "nb_classes", ")", ",", "class_weights", ")", ",", "axis", "=", "-", "1", ")", "\n", "xentropy", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "labels", "=", "labels", ",", "logits", "=", "logits", ")", ",", "sample_wts", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "xentropy", ",", "name", "=", "'xentropy_mean'", ")", "\n", "", "def", "training", "(", "loss", ",", "lr", ",", "l2_coef", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.models.base_gattn.BaseGAttN.training": [[9, 22], ["tensorflow.trainable_variables", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.add_n", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "training", "(", "loss", ",", "lr", ",", "l2_coef", ")", ":", "\n", "# weight decay", "\n", "        ", "vars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "lossL2", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "vars", "if", "v", ".", "name", "not", "\n", "in", "[", "'bias'", ",", "'gamma'", ",", "'b'", ",", "'g'", ",", "'beta'", "]", "]", ")", "*", "l2_coef", "\n", "\n", "# optimizer", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", "\n", "# train_op = opt.minimize(loss)", "\n", "# training op", "\n", "train_op", "=", "opt", ".", "minimize", "(", "loss", "+", "lossL2", ")", "\n", "\n", "return", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.models.base_gattn.BaseGAttN.preshape": [[23, 29], ["tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "def", "preshape", "(", "logits", ",", "labels", ",", "nb_classes", ")", ":", "\n", "        ", "new_sh_lab", "=", "[", "-", "1", "]", "\n", "new_sh_log", "=", "[", "-", "1", ",", "nb_classes", "]", "\n", "log_resh", "=", "tf", ".", "reshape", "(", "logits", ",", "new_sh_log", ")", "\n", "lab_resh", "=", "tf", ".", "reshape", "(", "labels", ",", "new_sh_lab", ")", "\n", "return", "log_resh", ",", "lab_resh", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.models.base_gattn.BaseGAttN.confmat": [[30, 33], ["tensorflow.argmax", "tensorflow.confusion_matrix"], "methods", ["None"], ["", "def", "confmat", "(", "logits", ",", "labels", ")", ":", "\n", "        ", "preds", "=", "tf", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "return", "tf", ".", "confusion_matrix", "(", "labels", ",", "preds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.models.base_gattn.BaseGAttN.masked_softmax_cross_entropy": [[38, 45], ["tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "masked_softmax_cross_entropy", "(", "logits", ",", "labels", ",", "mask", ")", ":", "\n", "        ", "\"\"\"Softmax cross-entropy loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.models.base_gattn.BaseGAttN.masked_sigmoid_cross_entropy": [[46, 55], ["tensorflow.cast", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "masked_sigmoid_cross_entropy", "(", "logits", ",", "labels", ",", "mask", ")", ":", "\n", "        ", "\"\"\"Softmax cross-entropy loss with masking.\"\"\"", "\n", "labels", "=", "tf", ".", "cast", "(", "labels", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ",", "axis", "=", "1", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.models.base_gattn.BaseGAttN.masked_accuracy": [[56, 64], ["tensorflow.equal", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.argmax"], "methods", ["None"], ["", "def", "masked_accuracy", "(", "logits", ",", "labels", ",", "mask", ")", ":", "\n", "        ", "\"\"\"Accuracy with masking.\"\"\"", "\n", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "logits", ",", "1", ")", ",", "tf", ".", "argmax", "(", "labels", ",", "1", ")", ")", "\n", "accuracy_all", "=", "tf", ".", "cast", "(", "correct_prediction", ",", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "accuracy_all", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "accuracy_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kali-Hac_SM-SGE.models.base_gattn.BaseGAttN.micro_f1": [[65, 89], ["tensorflow.round", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.count_nonzero", "tensorflow.count_nonzero", "tensorflow.count_nonzero", "tensorflow.count_nonzero", "tensorflow.cast", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "micro_f1", "(", "logits", ",", "labels", ",", "mask", ")", ":", "\n", "        ", "\"\"\"Accuracy with masking.\"\"\"", "\n", "predicted", "=", "tf", ".", "round", "(", "tf", ".", "nn", ".", "sigmoid", "(", "logits", ")", ")", "\n", "\n", "# Use integers to avoid any nasty FP behaviour", "\n", "predicted", "=", "tf", ".", "cast", "(", "predicted", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "labels", "=", "tf", ".", "cast", "(", "labels", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "# expand the mask so that broadcasting works ([nb_nodes, 1])", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "mask", ",", "-", "1", ")", "\n", "\n", "# Count true positives, true negatives, false positives and false negatives.", "\n", "tp", "=", "tf", ".", "count_nonzero", "(", "predicted", "*", "labels", "*", "mask", ")", "\n", "tn", "=", "tf", ".", "count_nonzero", "(", "(", "predicted", "-", "1", ")", "*", "(", "labels", "-", "1", ")", "*", "mask", ")", "\n", "fp", "=", "tf", ".", "count_nonzero", "(", "predicted", "*", "(", "labels", "-", "1", ")", "*", "mask", ")", "\n", "fn", "=", "tf", ".", "count_nonzero", "(", "(", "predicted", "-", "1", ")", "*", "labels", "*", "mask", ")", "\n", "\n", "# Calculate accuracy, precision, recall and F1 score.", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "fmeasure", "=", "(", "2", "*", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "fmeasure", "=", "tf", ".", "cast", "(", "fmeasure", ",", "tf", ".", "float32", ")", "\n", "return", "fmeasure", "\n", "", "", ""]]}