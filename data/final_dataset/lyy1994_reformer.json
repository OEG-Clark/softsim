{"home.repos.pwc.inspect_result.lyy1994_reformer.None.generate.main": [[21, 199], ["print", "eval", "fairseq.tasks.setup_task", "tasks.setup_task.load_dataset", "print", "print", "fairseq.utils.load_ensemble_for_inference", "fairseq.utils.load_align_dict", "tasks.setup_task.get_batch_iterator().next_epoch_itr", "fairseq.meters.StopwatchMeter", "fairseq.bleu.Scorer", "print", "torch.cuda.is_available", "args.path.split", "model.make_generation_fast_", "fairseq.sequence_scorer.SequenceScorer", "fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.cuda", "tgt_dict.pad", "tgt_dict.eos", "tgt_dict.unk", "fairseq.progress_bar.build_progress_bar", "fairseq.meters.TimeMeter", "isinstance", "print", "len", "model.half", "tasks.setup_task.get_batch_iterator", "fairseq.sequence_generator.SequenceGenerator.score_batched_itr", "fairseq.sequence_generator.SequenceGenerator.generate_batched_itr", "enumerate", "fairseq.meters.TimeMeter.update", "t.log", "open", "sorted", "open", "sorted", "tasks.setup_task.dataset", "tokenizer.Tokenizer.tokenize.int().cpu", "tasks.setup_task.dataset().src.get_original_text", "tasks.setup_task.dataset().tgt.get_original_text", "src_dict.string", "print", "fairseq.utils.post_process_prediction", "isinstance", "src_tokens.size", "hypos_dict.keys", "same_dict.keys", "f.write", "bleu.Scorer.result_string", "tasks.setup_task.dataset", "fairseq.utils.resolve_max_positions", "tgt_dict.string", "print", "print", "print", "bleu.Scorer.add", "hypos_dict.keys", "hypos_dict[].append", "round", "f.write", "tasks.setup_task.max_positions", "tokenizer.Tokenizer.tokenize.int", "min", "hypo[].int().cpu", "print", "fairseq.tokenizer.Tokenizer.tokenize", "tasks.setup_task.dataset", "tasks.setup_task.dataset", "len", "hypo[].int().cpu", "str", "model.max_positions", "hypo[].int", "map", "hypo[].int().tolist", "hypo[].int", "hypo[].tolist", "map", "hypo[].int", "str", "fairseq.utils.item"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.__init__.setup_task", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.language_modeling.LanguageModelingTask.load_dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_ensemble_for_inference", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_align_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.make_generation_fast_", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.build_progress_bar", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_scorer.SequenceScorer.score_batched_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate_batched_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.get_original_text", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.get_original_text", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.post_process_prediction", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.result_string", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.add", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.tokenize", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "path", "is", "not", "None", ",", "'--path required for generation!'", "\n", "assert", "not", "args", ".", "sampling", "or", "args", ".", "nbest", "==", "args", ".", "beam", ",", "'--sampling requires --nbest to be equal to --beam'", "\n", "assert", "args", ".", "replace_unk", "is", "None", "or", "args", ".", "raw_text", ",", "'--replace-unk requires a raw text dataset (--raw-text)'", "\n", "\n", "if", "args", ".", "max_tokens", "is", "None", "and", "args", ".", "max_sentences", "is", "None", ":", "\n", "        ", "args", ".", "max_tokens", "=", "12000", "\n", "", "print", "(", "args", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "cpu", "\n", "\n", "# override model parallelism settings for each model", "\n", "model_overrides", "=", "eval", "(", "args", ".", "model_overrides", ")", "\n", "model_overrides", "[", "'debug'", "]", "=", "args", ".", "debug", "\n", "model_overrides", "[", "'model_parallelism_world_size'", "]", "=", "args", ".", "model_parallelism_world_size", "\n", "model_overrides", "[", "'pseudo_sublayers'", "]", "=", "args", ".", "pseudo_sublayers", "\n", "\n", "# Load dataset splits", "\n", "task", "=", "tasks", ".", "setup_task", "(", "args", ")", "\n", "task", ".", "load_dataset", "(", "args", ".", "gen_subset", ")", "\n", "print", "(", "'| {} {} {} examples'", ".", "format", "(", "args", ".", "data", ",", "args", ".", "gen_subset", ",", "len", "(", "task", ".", "dataset", "(", "args", ".", "gen_subset", ")", ")", ")", ")", "\n", "\n", "# Set dictionaries", "\n", "src_dict", "=", "task", ".", "source_dictionary", "\n", "tgt_dict", "=", "task", ".", "target_dictionary", "\n", "\n", "# Load ensemble", "\n", "print", "(", "'| loading model(s) from {}'", ".", "format", "(", "args", ".", "path", ")", ")", "\n", "models", ",", "_", "=", "utils", ".", "load_ensemble_for_inference", "(", "args", ".", "path", ".", "split", "(", "':'", ")", ",", "task", ",", "model_arg_overrides", "=", "model_overrides", ")", "\n", "\n", "# Optimize ensemble for generation", "\n", "for", "model", "in", "models", ":", "\n", "        ", "model", ".", "make_generation_fast_", "(", "\n", "beamable_mm_beam_size", "=", "None", "if", "args", ".", "no_beamable_mm", "else", "args", ".", "beam", ",", "\n", "need_attn", "=", "args", ".", "print_alignment", ",", "\n", ")", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "model", ".", "half", "(", ")", "\n", "\n", "# Load alignment dictionary for unknown word replacement", "\n", "# (None if no unknown word replacement, empty if no path to align dictionary)", "\n", "", "", "align_dict", "=", "utils", ".", "load_align_dict", "(", "args", ".", "replace_unk", ")", "\n", "\n", "# Load dataset (possibly sharded)", "\n", "itr", "=", "task", ".", "get_batch_iterator", "(", "\n", "dataset", "=", "task", ".", "dataset", "(", "args", ".", "gen_subset", ")", ",", "\n", "max_tokens", "=", "args", ".", "max_tokens", ",", "\n", "max_sentences", "=", "args", ".", "max_sentences", ",", "\n", "max_positions", "=", "utils", ".", "resolve_max_positions", "(", "\n", "task", ".", "max_positions", "(", ")", ",", "\n", "*", "[", "model", ".", "max_positions", "(", ")", "for", "model", "in", "models", "]", "\n", ")", ",", "\n", "ignore_invalid_inputs", "=", "args", ".", "skip_invalid_size_inputs_valid_test", ",", "\n", "required_batch_size_multiple", "=", "8", ",", "\n", "num_shards", "=", "args", ".", "num_shards", ",", "\n", "shard_id", "=", "args", ".", "shard_id", ",", "\n", ")", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "\n", "# Initialize generator", "\n", "gen_timer", "=", "StopwatchMeter", "(", ")", "\n", "if", "args", ".", "score_reference", ":", "\n", "        ", "translator", "=", "SequenceScorer", "(", "models", ",", "task", ".", "target_dictionary", ",", "args", ".", "top_k", ")", "\n", "", "else", ":", "\n", "        ", "translator", "=", "SequenceGenerator", "(", "\n", "models", ",", "task", ".", "target_dictionary", ",", "beam_size", "=", "args", ".", "beam", ",", "minlen", "=", "args", ".", "min_len", ",", "\n", "stop_early", "=", "(", "not", "args", ".", "no_early_stop", ")", ",", "normalize_scores", "=", "(", "not", "args", ".", "unnormalized", ")", ",", "\n", "len_penalty", "=", "args", ".", "lenpen", ",", "unk_penalty", "=", "args", ".", "unkpen", ",", "\n", "sampling", "=", "args", ".", "sampling", ",", "sampling_topk", "=", "args", ".", "sampling_topk", ",", "sampling_temperature", "=", "args", ".", "sampling_temperature", ",", "\n", "diverse_beam_groups", "=", "args", ".", "diverse_beam_groups", ",", "diverse_beam_strength", "=", "args", ".", "diverse_beam_strength", ",", "\n", ")", "\n", "\n", "", "if", "use_cuda", "and", "args", ".", "model_parallelism_world_size", "==", "1", ":", "\n", "        ", "translator", ".", "cuda", "(", ")", "\n", "\n", "# Generate and compute BLEU score", "\n", "", "scorer", "=", "bleu", ".", "Scorer", "(", "tgt_dict", ".", "pad", "(", ")", ",", "tgt_dict", ".", "eos", "(", ")", ",", "tgt_dict", ".", "unk", "(", ")", ")", "\n", "num_sentences", "=", "0", "\n", "has_target", "=", "True", "\n", "hypos_dict", "=", "{", "}", "\n", "same_dict", "=", "{", "}", "\n", "with", "progress_bar", ".", "build_progress_bar", "(", "args", ",", "itr", ")", "as", "t", ":", "\n", "        ", "if", "args", ".", "score_reference", ":", "\n", "            ", "translations", "=", "translator", ".", "score_batched_itr", "(", "t", ",", "cuda", "=", "use_cuda", ",", "timer", "=", "gen_timer", ")", "\n", "", "else", ":", "\n", "            ", "translations", "=", "translator", ".", "generate_batched_itr", "(", "\n", "t", ",", "maxlen_a", "=", "args", ".", "max_len_a", ",", "maxlen_b", "=", "args", ".", "max_len_b", ",", "\n", "cuda", "=", "use_cuda", ",", "timer", "=", "gen_timer", ",", "prefix_size", "=", "args", ".", "prefix_size", ",", "\n", ")", "\n", "\n", "", "wps_meter", "=", "TimeMeter", "(", ")", "\n", "for", "sample_id", ",", "src_tokens", ",", "target_tokens", ",", "hypos", "in", "translations", ":", "\n", "# Process input and ground truth", "\n", "            ", "has_target", "=", "target_tokens", "is", "not", "None", "\n", "target_tokens", "=", "target_tokens", ".", "int", "(", ")", ".", "cpu", "(", ")", "if", "has_target", "else", "None", "\n", "\n", "# Either retrieve the original sentences or regenerate them from tokens.", "\n", "if", "align_dict", "is", "not", "None", ":", "\n", "                ", "src_str", "=", "task", ".", "dataset", "(", "args", ".", "gen_subset", ")", ".", "src", ".", "get_original_text", "(", "sample_id", ")", "\n", "target_str", "=", "task", ".", "dataset", "(", "args", ".", "gen_subset", ")", ".", "tgt", ".", "get_original_text", "(", "sample_id", ")", "\n", "", "else", ":", "\n", "                ", "src_str", "=", "src_dict", ".", "string", "(", "src_tokens", ",", "args", ".", "remove_bpe", ")", "\n", "if", "has_target", ":", "\n", "                    ", "target_str", "=", "tgt_dict", ".", "string", "(", "target_tokens", ",", "args", ".", "remove_bpe", ",", "escape_unk", "=", "True", ")", "\n", "\n", "", "", "if", "not", "args", ".", "quiet", ":", "\n", "                ", "print", "(", "'S-{}\\t{}'", ".", "format", "(", "sample_id", ",", "src_str", ")", ")", "\n", "if", "has_target", ":", "\n", "                    ", "print", "(", "'T-{}\\t{}'", ".", "format", "(", "sample_id", ",", "target_str", ")", ")", "\n", "\n", "# Process top predictions", "\n", "", "", "for", "i", ",", "hypo", "in", "enumerate", "(", "hypos", "[", ":", "min", "(", "len", "(", "hypos", ")", ",", "args", ".", "nbest", ")", "]", ")", ":", "\n", "                ", "hypo_tokens", ",", "hypo_str", ",", "alignment", "=", "utils", ".", "post_process_prediction", "(", "\n", "hypo_tokens", "=", "hypo", "[", "'tokens'", "]", ".", "int", "(", ")", ".", "cpu", "(", ")", ",", "\n", "src_str", "=", "src_str", ",", "\n", "alignment", "=", "hypo", "[", "'alignment'", "]", ".", "int", "(", ")", ".", "cpu", "(", ")", "if", "hypo", "[", "'alignment'", "]", "is", "not", "None", "else", "None", ",", "\n", "align_dict", "=", "align_dict", ",", "\n", "tgt_dict", "=", "tgt_dict", ",", "\n", "remove_bpe", "=", "args", ".", "remove_bpe", ",", "\n", ")", "\n", "\n", "if", "not", "args", ".", "quiet", ":", "\n", "                    ", "print", "(", "'H-{}\\t{}\\t{}'", ".", "format", "(", "sample_id", ",", "hypo", "[", "'score'", "]", ",", "hypo_str", ")", ")", "\n", "print", "(", "'P-{}\\t{}'", ".", "format", "(", "\n", "sample_id", ",", "\n", "' '", ".", "join", "(", "map", "(", "\n", "lambda", "x", ":", "'{:.4f}'", ".", "format", "(", "x", ")", ",", "\n", "hypo", "[", "'positional_scores'", "]", ".", "tolist", "(", ")", ",", "\n", ")", ")", "\n", ")", ")", "\n", "\n", "if", "args", ".", "print_alignment", ":", "\n", "                        ", "print", "(", "'A-{}\\t{}'", ".", "format", "(", "\n", "sample_id", ",", "\n", "' '", ".", "join", "(", "map", "(", "lambda", "x", ":", "str", "(", "utils", ".", "item", "(", "x", ")", ")", ",", "alignment", ")", ")", "\n", ")", ")", "\n", "\n", "# Score only the top hypothesis", "\n", "", "", "if", "has_target", "and", "i", "==", "0", ":", "\n", "                    ", "if", "align_dict", "is", "not", "None", "or", "args", ".", "remove_bpe", "is", "not", "None", ":", "\n", "# Convert back to tokens for evaluation with unk replacement and/or without BPE", "\n", "                        ", "target_tokens", "=", "tokenizer", ".", "Tokenizer", ".", "tokenize", "(", "\n", "target_str", ",", "tgt_dict", ",", "add_if_not_exist", "=", "True", ")", "\n", "", "scorer", ".", "add", "(", "target_tokens", ",", "hypo_tokens", ")", "\n", "\n", "# Save the nbest hypotheses to the dictionary", "\n", "", "if", "sample_id", "in", "hypos_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "hypos_dict", "[", "sample_id", "]", ".", "append", "(", "hypo_str", ")", "\n", "", "else", ":", "\n", "                    ", "hypos_dict", "[", "sample_id", "]", "=", "[", "hypo_str", "]", "\n", "\n", "# Save the 0-1 string to the dictionary", "\n", "", "if", "isinstance", "(", "translator", ",", "SequenceScorer", ")", ":", "\n", "                    ", "same_str", "=", "' '", ".", "join", "(", "[", "str", "(", "e", ")", "for", "e", "in", "hypo", "[", "'same'", "]", ".", "int", "(", ")", ".", "tolist", "(", ")", "]", ")", "\n", "same_dict", "[", "sample_id", "]", "=", "same_str", "\n", "\n", "", "", "wps_meter", ".", "update", "(", "src_tokens", ".", "size", "(", "0", ")", ")", "\n", "t", ".", "log", "(", "{", "'wps'", ":", "round", "(", "wps_meter", ".", "avg", ")", "}", ")", "\n", "num_sentences", "+=", "1", "\n", "\n", "# Save the nbest hypotheses to the file", "\n", "", "", "if", "args", ".", "output_file", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "output_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "key", "in", "sorted", "(", "hypos_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "for", "value", "in", "hypos_dict", "[", "key", "]", ":", "\n", "                    ", "f", ".", "write", "(", "value", "+", "'\\n'", ")", "\n", "\n", "# Save the 0-1 strings to the file", "\n", "", "", "", "", "if", "args", ".", "same_file", "is", "not", "None", "and", "isinstance", "(", "translator", ",", "SequenceScorer", ")", ":", "\n", "        ", "with", "open", "(", "args", ".", "same_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "key", "in", "sorted", "(", "same_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "f", ".", "write", "(", "same_dict", "[", "key", "]", "+", "'\\n'", ")", "\n", "\n", "", "", "", "print", "(", "'| Translated {} sentences ({} tokens) in {:.1f}s ({:.2f} sentences/s, {:.2f} tokens/s)'", ".", "format", "(", "\n", "num_sentences", ",", "gen_timer", ".", "n", ",", "gen_timer", ".", "sum", ",", "num_sentences", "/", "gen_timer", ".", "sum", ",", "1.", "/", "gen_timer", ".", "avg", ")", ")", "\n", "if", "has_target", ":", "\n", "        ", "print", "(", "'| Generate {} with beam={}: {}'", ".", "format", "(", "args", ".", "gen_subset", ",", "args", ".", "beam", ",", "scorer", ".", "result_string", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.interactive.buffered_read": [[26, 36], ["buffer.append", "len", "src_str.strip", "len"], "function", ["None"], ["def", "buffered_read", "(", "buffer_size", ")", ":", "\n", "    ", "buffer", "=", "[", "]", "\n", "for", "src_str", "in", "sys", ".", "stdin", ":", "\n", "        ", "buffer", ".", "append", "(", "src_str", ".", "strip", "(", ")", ")", "\n", "if", "len", "(", "buffer", ")", ">=", "buffer_size", ":", "\n", "            ", "yield", "buffer", "\n", "buffer", "=", "[", "]", "\n", "\n", "", "", "if", "len", "(", "buffer", ")", ">", "0", ":", "\n", "        ", "yield", "buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.interactive.make_batches": [[38, 56], ["numpy.array", "task.get_batch_iterator().next_epoch_itr", "fairseq.tokenizer.Tokenizer.tokenize().long", "t.numel", "task.get_batch_iterator", "fairseq.tokenizer.Tokenizer.tokenize", "Batch", "fairseq.data.LanguagePairDataset"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.tokenize"], ["", "", "def", "make_batches", "(", "lines", ",", "args", ",", "task", ",", "max_positions", ")", ":", "\n", "    ", "tokens", "=", "[", "\n", "tokenizer", ".", "Tokenizer", ".", "tokenize", "(", "src_str", ",", "task", ".", "source_dictionary", ",", "add_if_not_exist", "=", "False", ")", ".", "long", "(", ")", "\n", "for", "src_str", "in", "lines", "\n", "]", "\n", "lengths", "=", "np", ".", "array", "(", "[", "t", ".", "numel", "(", ")", "for", "t", "in", "tokens", "]", ")", "\n", "itr", "=", "task", ".", "get_batch_iterator", "(", "\n", "dataset", "=", "data", ".", "LanguagePairDataset", "(", "tokens", ",", "lengths", ",", "task", ".", "source_dictionary", ")", ",", "\n", "max_tokens", "=", "args", ".", "max_tokens", ",", "\n", "max_sentences", "=", "args", ".", "max_sentences", ",", "\n", "max_positions", "=", "max_positions", ",", "\n", ")", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "for", "batch", "in", "itr", ":", "\n", "        ", "yield", "Batch", "(", "\n", "srcs", "=", "[", "lines", "[", "i", "]", "for", "i", "in", "batch", "[", "'id'", "]", "]", ",", "\n", "tokens", "=", "batch", "[", "'net_input'", "]", "[", "'src_tokens'", "]", ",", "\n", "lengths", "=", "batch", "[", "'net_input'", "]", "[", "'src_lengths'", "]", ",", "\n", ")", ",", "batch", "[", "'id'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.interactive.main": [[58, 179], ["print", "fairseq.tasks.setup_task", "print", "args.path.split", "fairseq.utils.load_ensemble_for_inference", "fairseq.sequence_generator.SequenceGenerator", "fairseq.utils.load_align_dict", "fairseq.utils.resolve_max_positions", "print", "interactive.buffered_read", "torch.cuda.is_available", "model.make_generation_fast_", "fairseq.sequence_generator.SequenceGenerator.cuda", "Translation", "fairseq.sequence_generator.SequenceGenerator.generate", "tasks.setup_task.max_positions", "print", "interactive.make_batches", "numpy.argsort", "eval", "model.half", "fairseq.utils.post_process_prediction", "Translation.hypos.append", "Translation.pos_scores.append", "Translation.alignments.append", "tokens.cuda.cuda", "lengths.cuda.cuda", "interactive.main.make_result"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.__init__.setup_task", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_ensemble_for_inference", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_align_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.None.interactive.buffered_read", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.make_generation_fast_", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.None.interactive.make_batches", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.post_process_prediction", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "buffer_size", "<", "1", ":", "\n", "        ", "args", ".", "buffer_size", "=", "1", "\n", "", "if", "args", ".", "max_tokens", "is", "None", "and", "args", ".", "max_sentences", "is", "None", ":", "\n", "        ", "args", ".", "max_sentences", "=", "1", "\n", "\n", "", "assert", "not", "args", ".", "sampling", "or", "args", ".", "nbest", "==", "args", ".", "beam", ",", "'--sampling requires --nbest to be equal to --beam'", "\n", "assert", "not", "args", ".", "max_sentences", "or", "args", ".", "max_sentences", "<=", "args", ".", "buffer_size", ",", "'--max-sentences/--batch-size cannot be larger than --buffer-size'", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "cpu", "\n", "\n", "# Setup task, e.g., translation", "\n", "task", "=", "tasks", ".", "setup_task", "(", "args", ")", "\n", "\n", "# Load ensemble", "\n", "print", "(", "'| loading model(s) from {}'", ".", "format", "(", "args", ".", "path", ")", ")", "\n", "model_paths", "=", "args", ".", "path", ".", "split", "(", "':'", ")", "\n", "models", ",", "model_args", "=", "utils", ".", "load_ensemble_for_inference", "(", "model_paths", ",", "task", ",", "model_arg_overrides", "=", "eval", "(", "args", ".", "model_overrides", ")", ")", "\n", "\n", "# Set dictionaries", "\n", "tgt_dict", "=", "task", ".", "target_dictionary", "\n", "\n", "# Optimize ensemble for generation", "\n", "for", "model", "in", "models", ":", "\n", "        ", "model", ".", "make_generation_fast_", "(", "\n", "beamable_mm_beam_size", "=", "None", "if", "args", ".", "no_beamable_mm", "else", "args", ".", "beam", ",", "\n", "need_attn", "=", "args", ".", "print_alignment", ",", "\n", ")", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "model", ".", "half", "(", ")", "\n", "\n", "# Initialize generator", "\n", "", "", "translator", "=", "SequenceGenerator", "(", "\n", "models", ",", "tgt_dict", ",", "beam_size", "=", "args", ".", "beam", ",", "minlen", "=", "args", ".", "min_len", ",", "\n", "stop_early", "=", "(", "not", "args", ".", "no_early_stop", ")", ",", "normalize_scores", "=", "(", "not", "args", ".", "unnormalized", ")", ",", "\n", "len_penalty", "=", "args", ".", "lenpen", ",", "unk_penalty", "=", "args", ".", "unkpen", ",", "\n", "sampling", "=", "args", ".", "sampling", ",", "sampling_topk", "=", "args", ".", "sampling_topk", ",", "sampling_temperature", "=", "args", ".", "sampling_temperature", ",", "\n", "diverse_beam_groups", "=", "args", ".", "diverse_beam_groups", ",", "diverse_beam_strength", "=", "args", ".", "diverse_beam_strength", ",", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "translator", ".", "cuda", "(", ")", "\n", "\n", "# Load alignment dictionary for unknown word replacement", "\n", "# (None if no unknown word replacement, empty if no path to align dictionary)", "\n", "", "align_dict", "=", "utils", ".", "load_align_dict", "(", "args", ".", "replace_unk", ")", "\n", "\n", "def", "make_result", "(", "src_str", ",", "hypos", ")", ":", "\n", "        ", "result", "=", "Translation", "(", "\n", "src_str", "=", "'O\\t{}'", ".", "format", "(", "src_str", ")", ",", "\n", "hypos", "=", "[", "]", ",", "\n", "pos_scores", "=", "[", "]", ",", "\n", "alignments", "=", "[", "]", ",", "\n", ")", "\n", "\n", "# Process top predictions", "\n", "for", "hypo", "in", "hypos", "[", ":", "min", "(", "len", "(", "hypos", ")", ",", "args", ".", "nbest", ")", "]", ":", "\n", "            ", "hypo_tokens", ",", "hypo_str", ",", "alignment", "=", "utils", ".", "post_process_prediction", "(", "\n", "hypo_tokens", "=", "hypo", "[", "'tokens'", "]", ".", "int", "(", ")", ".", "cpu", "(", ")", ",", "\n", "src_str", "=", "src_str", ",", "\n", "alignment", "=", "hypo", "[", "'alignment'", "]", ".", "int", "(", ")", ".", "cpu", "(", ")", "if", "hypo", "[", "'alignment'", "]", "is", "not", "None", "else", "None", ",", "\n", "align_dict", "=", "align_dict", ",", "\n", "tgt_dict", "=", "tgt_dict", ",", "\n", "remove_bpe", "=", "args", ".", "remove_bpe", ",", "\n", ")", "\n", "result", ".", "hypos", ".", "append", "(", "'H\\t{}\\t{}'", ".", "format", "(", "hypo", "[", "'score'", "]", ",", "hypo_str", ")", ")", "\n", "result", ".", "pos_scores", ".", "append", "(", "'P\\t{}'", ".", "format", "(", "\n", "' '", ".", "join", "(", "map", "(", "\n", "lambda", "x", ":", "'{:.4f}'", ".", "format", "(", "x", ")", ",", "\n", "hypo", "[", "'positional_scores'", "]", ".", "tolist", "(", ")", ",", "\n", ")", ")", "\n", ")", ")", "\n", "result", ".", "alignments", ".", "append", "(", "\n", "'A\\t{}'", ".", "format", "(", "' '", ".", "join", "(", "map", "(", "lambda", "x", ":", "str", "(", "utils", ".", "item", "(", "x", ")", ")", ",", "alignment", ")", ")", ")", "\n", "if", "args", ".", "print_alignment", "else", "None", "\n", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "process_batch", "(", "batch", ")", ":", "\n", "        ", "tokens", "=", "batch", ".", "tokens", "\n", "lengths", "=", "batch", ".", "lengths", "\n", "\n", "if", "use_cuda", ":", "\n", "            ", "tokens", "=", "tokens", ".", "cuda", "(", ")", "\n", "lengths", "=", "lengths", ".", "cuda", "(", ")", "\n", "\n", "", "encoder_input", "=", "{", "'src_tokens'", ":", "tokens", ",", "'src_lengths'", ":", "lengths", "}", "\n", "translations", "=", "translator", ".", "generate", "(", "\n", "encoder_input", ",", "\n", "maxlen", "=", "int", "(", "args", ".", "max_len_a", "*", "tokens", ".", "size", "(", "1", ")", "+", "args", ".", "max_len_b", ")", ",", "\n", ")", "\n", "\n", "return", "[", "make_result", "(", "batch", ".", "srcs", "[", "i", "]", ",", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "translations", ")", "]", "\n", "\n", "", "max_positions", "=", "utils", ".", "resolve_max_positions", "(", "\n", "task", ".", "max_positions", "(", ")", ",", "\n", "*", "[", "model", ".", "max_positions", "(", ")", "for", "model", "in", "models", "]", "\n", ")", "\n", "\n", "if", "args", ".", "buffer_size", ">", "1", ":", "\n", "        ", "print", "(", "'| Sentence buffer size:'", ",", "args", ".", "buffer_size", ")", "\n", "", "print", "(", "'| Type the input sentence and press return:'", ")", "\n", "for", "inputs", "in", "buffered_read", "(", "args", ".", "buffer_size", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "results", "=", "[", "]", "\n", "for", "batch", ",", "batch_indices", "in", "make_batches", "(", "inputs", ",", "args", ",", "task", ",", "max_positions", ")", ":", "\n", "            ", "indices", ".", "extend", "(", "batch_indices", ")", "\n", "results", "+=", "process_batch", "(", "batch", ")", "\n", "\n", "", "for", "i", "in", "np", ".", "argsort", "(", "indices", ")", ":", "\n", "            ", "result", "=", "results", "[", "i", "]", "\n", "print", "(", "result", ".", "src_str", ")", "\n", "for", "hypo", ",", "pos_scores", ",", "align", "in", "zip", "(", "result", ".", "hypos", ",", "result", ".", "pos_scores", ",", "result", ".", "alignments", ")", ":", "\n", "                ", "print", "(", "hypo", ")", "\n", "print", "(", "pos_scores", ")", "\n", "if", "align", "is", "not", "None", ":", "\n", "                    ", "print", "(", "align", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.write_tensorboard": [[26, 33], ["content.items", "tensor_board.add_scalar", "float"], "function", ["None"], ["def", "write_tensorboard", "(", "args", ",", "step", ",", "content", ",", "is_training", "=", "True", ")", ":", "\n", "    ", "interval", "=", "args", ".", "tb_log_interval", "if", "is_training", "else", "1", "\n", "label", "=", "'train'", "if", "is_training", "else", "'valid'", "\n", "if", "tensor_board", "is", "not", "None", "and", "step", "%", "interval", "==", "0", ":", "\n", "        ", "for", "k", ",", "v", "in", "content", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "[", "'num_updates'", ",", "'wall'", ",", "'clip'", "]", ":", "\n", "                ", "tensor_board", ".", "add_scalar", "(", "'{}/{}'", ".", "format", "(", "label", ",", "k", ")", ",", "float", "(", "v", ")", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.main": [[35, 151], ["max", "sorted", "torch.cuda.set_device", "torch.manual_seed", "fairseq.tasks.setup_task", "train.load_dataset_splits", "tasks.setup_task.build_model", "tasks.setup_task.build_criterion", "print", "print", "print", "fairseq.utils.resolve_max_positions", "tasks.setup_task.dataset().get_dummy_batch", "fairseq.trainer.Trainer", "print", "print", "tasks.setup_task.get_batch_iterator", "fairseq.trainer.Trainer.get_lr", "fairseq.meters.StopwatchMeter", "fairseq.meters.StopwatchMeter.start", "args.valid_subset.split", "fairseq.meters.StopwatchMeter.stop", "print", "map", "args.__dict__.items", "print", "SummaryWriter", "torch.cuda.is_available", "NotImplementedError", "tasks.setup_task.max_positions", "task.build_model.max_positions", "sum", "task.build_model.named_parameters", "max", "max", "max", "max", "print", "enumerate", "print", "train.load_checkpoint", "fairseq.trainer.Trainer.dummy_train_step", "train.train", "fairseq.trainer.Trainer.lr_step", "args.__dict__.keys", "print", "sum", "tasks.setup_task.dataset", "names.append", "shapes.append", "sizes.append", "percents.append", "zip", "tasks.setup_task.dataset", "fairseq.trainer.Trainer.get_num_updates", "train.validate", "train.save_checkpoint", "len", "p.numel", "str", "str", "len", "len", "len", "len", "print", "print", "print", "p.numel", "task.build_model.parameters", "list", "param.numel", "task.build_model.parameters", "param.size", "param.numel", "float"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.__init__.setup_task", "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.load_dataset_splits", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.build_model", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.__init__.build_criterion", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.get_dummy_batch", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.stop", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.load_checkpoint", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.dummy_train_step", "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.train", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.lr_step", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_num_updates", "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.validate", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.save_checkpoint", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "max_tokens", "is", "None", ":", "\n", "        ", "args", ".", "max_tokens", "=", "6000", "\n", "", "width", "=", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "args", ".", "__dict__", ".", "keys", "(", ")", ")", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "__dict__", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ":", "\n", "        ", "print", "(", "f'{k: <{width}} = {v}'", ")", "\n", "# use tensor board", "\n", "", "try", ":", "\n", "        ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "global", "tensor_board", "\n", "tensor_board", "=", "SummaryWriter", "(", "args", ".", "save_dir", ")", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "print", "(", "'Can not use TensorBoard'", ")", "\n", "raise", "e", "\n", "\n", "", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Training on CPU is not supported'", ")", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "device_id", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Setup task, e.g., translation, language modeling, etc.", "\n", "task", "=", "tasks", ".", "setup_task", "(", "args", ")", "\n", "\n", "# Load dataset splits", "\n", "load_dataset_splits", "(", "task", ",", "[", "'train'", ",", "'valid'", "]", ")", "\n", "\n", "# Build model and criterion", "\n", "model", "=", "task", ".", "build_model", "(", "args", ")", "\n", "criterion", "=", "task", ".", "build_criterion", "(", "args", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "'| model {}, criterion {}'", ".", "format", "(", "args", ".", "arch", ",", "criterion", ".", "__class__", ".", "__name__", ")", ")", "\n", "print", "(", "'| num. model params: {:,}'", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", ")", "\n", "\n", "# Make a dummy batch to (i) warm the caching allocator and (ii) as a", "\n", "# placeholder DistributedDataParallel when there's an uneven number of", "\n", "# batches per worker.", "\n", "max_positions", "=", "utils", ".", "resolve_max_positions", "(", "\n", "task", ".", "max_positions", "(", ")", ",", "\n", "model", ".", "max_positions", "(", ")", ",", "\n", ")", "\n", "dummy_batch", "=", "task", ".", "dataset", "(", "'train'", ")", ".", "get_dummy_batch", "(", "args", ".", "max_tokens", ",", "max_positions", ")", "\n", "\n", "# Build trainer", "\n", "trainer", "=", "Trainer", "(", "args", ",", "task", ",", "model", ",", "criterion", ",", "dummy_batch", ")", "\n", "print", "(", "'| training on {} GPUs'", ".", "format", "(", "args", ".", "distributed_world_size", ")", ")", "\n", "print", "(", "'| max tokens per GPU = {} and max sentences per GPU = {}'", ".", "format", "(", "\n", "args", ".", "max_tokens", ",", "\n", "args", ".", "max_sentences", ",", "\n", ")", ")", "\n", "\n", "if", "args", ".", "debug", ":", "\n", "# Print parameters' name, shape and size", "\n", "        ", "total", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "\n", "names", ",", "shapes", ",", "sizes", ",", "percents", "=", "[", "\"parameter name\"", "]", ",", "[", "\"shape\"", "]", ",", "[", "\"size\"", "]", ",", "[", "\"percent\"", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "names", ".", "append", "(", "name", ")", "\n", "shapes", ".", "append", "(", "str", "(", "list", "(", "param", ".", "size", "(", ")", ")", ")", ")", "\n", "sizes", ".", "append", "(", "str", "(", "param", ".", "numel", "(", ")", ")", ")", "\n", "percents", ".", "append", "(", "\"%.2f%%\"", "%", "(", "param", ".", "numel", "(", ")", "/", "float", "(", "total", ")", "*", "100", ")", ")", "\n", "", "name_width", "=", "max", "(", "[", "len", "(", "e", ")", "for", "e", "in", "names", "]", ")", "\n", "shape_width", "=", "max", "(", "[", "len", "(", "e", ")", "for", "e", "in", "shapes", "]", ")", "\n", "size_width", "=", "max", "(", "[", "len", "(", "e", ")", "for", "e", "in", "sizes", "]", ")", "\n", "percent_width", "=", "max", "(", "[", "len", "(", "e", ")", "for", "e", "in", "percents", "]", ")", "\n", "separate_line", "=", "'|'", "+", "'-'", "*", "(", "name_width", "+", "2", ")", "+", "'|'", "+", "'-'", "*", "(", "shape_width", "+", "2", ")", "+", "'|'", "+", "'-'", "*", "(", "size_width", "+", "2", ")", "+", "'|'", "+", "'-'", "*", "(", "percent_width", "+", "2", ")", "+", "'|'", "\n", "print", "(", "separate_line", ")", "\n", "for", "i", ",", "(", "name", ",", "shape", ",", "size", ",", "percent", ")", "in", "enumerate", "(", "zip", "(", "names", ",", "shapes", ",", "sizes", ",", "percents", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "print", "(", "f\"| {name: ^{name_width}} | {shape: ^{shape_width}} \"", "\n", "f\"| {size: ^{size_width}} | {percent: ^{percent_width}} |\"", ")", "\n", "print", "(", "separate_line", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f\"| {name: <{name_width}} | {shape: <{shape_width}} \"", "\n", "f\"| {size: <{size_width}} | {percent: >{percent_width}} |\"", ")", "\n", "", "", "print", "(", "separate_line", ")", "\n", "\n", "# Initialize dataloader", "\n", "", "epoch_itr", "=", "task", ".", "get_batch_iterator", "(", "\n", "dataset", "=", "task", ".", "dataset", "(", "args", ".", "train_subset", ")", ",", "\n", "max_tokens", "=", "args", ".", "max_tokens", ",", "\n", "max_sentences", "=", "args", ".", "max_sentences", ",", "\n", "max_positions", "=", "max_positions", ",", "\n", "ignore_invalid_inputs", "=", "True", ",", "\n", "required_batch_size_multiple", "=", "8", ",", "\n", "seed", "=", "args", ".", "seed", ",", "\n", "num_shards", "=", "args", ".", "distributed_world_size", ",", "\n", "shard_id", "=", "args", ".", "distributed_rank", ",", "\n", ")", "\n", "\n", "# Load the latest checkpoint if one is available", "\n", "if", "not", "load_checkpoint", "(", "args", ",", "trainer", ",", "epoch_itr", ")", ":", "\n", "        ", "trainer", ".", "dummy_train_step", "(", "[", "dummy_batch", "]", ")", "\n", "\n", "# Train until the learning rate gets too small", "\n", "", "max_epoch", "=", "args", ".", "max_epoch", "or", "math", ".", "inf", "\n", "max_update", "=", "args", ".", "max_update", "or", "math", ".", "inf", "\n", "lr", "=", "trainer", ".", "get_lr", "(", ")", "\n", "train_meter", "=", "StopwatchMeter", "(", ")", "\n", "train_meter", ".", "start", "(", ")", "\n", "valid_losses", "=", "[", "None", "]", "\n", "valid_subsets", "=", "args", ".", "valid_subset", ".", "split", "(", "','", ")", "\n", "while", "lr", ">", "args", ".", "min_lr", "and", "epoch_itr", ".", "epoch", "<", "max_epoch", "and", "trainer", ".", "get_num_updates", "(", ")", "<", "max_update", ":", "\n", "# train for one epoch", "\n", "        ", "train", "(", "args", ",", "trainer", ",", "task", ",", "epoch_itr", ")", "\n", "\n", "if", "epoch_itr", ".", "epoch", "%", "args", ".", "validate_interval", "==", "0", ":", "\n", "            ", "valid_losses", "=", "validate", "(", "args", ",", "trainer", ",", "task", ",", "epoch_itr", ",", "valid_subsets", ")", "\n", "\n", "# only use first validation loss to update the learning rate", "\n", "", "lr", "=", "trainer", ".", "lr_step", "(", "epoch_itr", ".", "epoch", ",", "valid_losses", "[", "0", "]", ")", "\n", "\n", "# save checkpoint", "\n", "if", "epoch_itr", ".", "epoch", "%", "args", ".", "save_interval", "==", "0", ":", "\n", "            ", "save_checkpoint", "(", "args", ",", "trainer", ",", "epoch_itr", ",", "valid_losses", "[", "0", "]", ")", "\n", "", "", "train_meter", ".", "stop", "(", ")", "\n", "print", "(", "'| done training in {:.1f} seconds'", ".", "format", "(", "train_meter", ".", "sum", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.train": [[153, 216], ["epoch_itr.next_epoch_itr", "fairseq.data.iterators.GroupedIterator", "fairseq.progress_bar.build_progress_bar", "collections.defaultdict", "len", "enumerate", "train.get_training_stats", "collections.defaultdict.items", "progress_bar.build_progress_bar.print", "len", "args.valid_subset.split", "trainer.train_step", "train.get_training_stats", "trainer.train_step.items", "progress_bar.build_progress_bar.log", "train.write_tensorboard", "trainer.get_num_updates", "trainer.get_meter", "fairseq.meters.AverageMeter", "trainer.get_meter().reset", "train.validate", "train.save_checkpoint", "trainer.get_meter.reset", "extra_meters[].update", "extra_meters[].update", "trainer.get_meter"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.build_progress_bar", "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.get_training_stats", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.train_step", "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.get_training_stats", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.write_tensorboard", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_num_updates", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.reset", "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.validate", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.save_checkpoint", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.reset", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter"], ["", "def", "train", "(", "args", ",", "trainer", ",", "task", ",", "epoch_itr", ")", ":", "\n", "    ", "\"\"\"Train the model for one epoch.\"\"\"", "\n", "\n", "# Update parameters every N batches", "\n", "if", "epoch_itr", ".", "epoch", "<=", "len", "(", "args", ".", "update_freq", ")", ":", "\n", "        ", "update_freq", "=", "args", ".", "update_freq", "[", "epoch_itr", ".", "epoch", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "update_freq", "=", "args", ".", "update_freq", "[", "-", "1", "]", "\n", "\n", "# Initialize data iterator", "\n", "", "itr", "=", "epoch_itr", ".", "next_epoch_itr", "(", ")", "\n", "itr", "=", "iterators", ".", "GroupedIterator", "(", "itr", ",", "update_freq", ")", "\n", "progress", "=", "progress_bar", ".", "build_progress_bar", "(", "\n", "args", ",", "itr", ",", "epoch_itr", ".", "epoch", ",", "no_progress_bar", "=", "'simple'", ",", "\n", ")", "\n", "\n", "extra_meters", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "AverageMeter", "(", ")", ")", "\n", "first_valid", "=", "args", ".", "valid_subset", ".", "split", "(", "','", ")", "[", "0", "]", "\n", "max_update", "=", "args", ".", "max_update", "or", "math", ".", "inf", "\n", "num_batches", "=", "len", "(", "epoch_itr", ")", "\n", "for", "i", ",", "samples", "in", "enumerate", "(", "progress", ",", "start", "=", "epoch_itr", ".", "iterations_in_epoch", ")", ":", "\n", "        ", "log_output", "=", "trainer", ".", "train_step", "(", "samples", ")", "\n", "if", "log_output", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "# log mid-epoch stats", "\n", "", "stats", "=", "get_training_stats", "(", "trainer", ")", "\n", "for", "k", ",", "v", "in", "log_output", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "[", "'loss'", ",", "'nll_loss'", ",", "'ntokens'", ",", "'nsentences'", ",", "'sample_size'", "]", ":", "\n", "                ", "continue", "# these are already logged above", "\n", "", "if", "'loss'", "in", "k", ":", "\n", "                ", "extra_meters", "[", "k", "]", ".", "update", "(", "v", ",", "log_output", "[", "'sample_size'", "]", ")", "\n", "", "else", ":", "\n", "                ", "extra_meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "", "stats", "[", "k", "]", "=", "extra_meters", "[", "k", "]", ".", "avg", "\n", "", "progress", ".", "log", "(", "stats", ")", "\n", "write_tensorboard", "(", "args", ",", "stats", "[", "'num_updates'", "]", ",", "stats", ")", "\n", "\n", "# ignore the first mini-batch in words-per-second calculation", "\n", "if", "i", "==", "0", ":", "\n", "            ", "trainer", ".", "get_meter", "(", "'wps'", ")", ".", "reset", "(", ")", "\n", "\n", "", "num_updates", "=", "trainer", ".", "get_num_updates", "(", ")", "\n", "if", "args", ".", "save_interval_updates", ">", "0", "and", "num_updates", "%", "args", ".", "save_interval_updates", "==", "0", "and", "num_updates", ">", "0", ":", "\n", "            ", "valid_losses", "=", "validate", "(", "args", ",", "trainer", ",", "task", ",", "epoch_itr", ",", "[", "first_valid", "]", ")", "\n", "save_checkpoint", "(", "args", ",", "trainer", ",", "epoch_itr", ",", "valid_losses", "[", "0", "]", ")", "\n", "\n", "", "if", "num_updates", ">=", "max_update", ":", "\n", "            ", "break", "\n", "\n", "# log end-of-epoch stats", "\n", "", "", "stats", "=", "get_training_stats", "(", "trainer", ")", "\n", "for", "k", ",", "meter", "in", "extra_meters", ".", "items", "(", ")", ":", "\n", "        ", "stats", "[", "k", "]", "=", "meter", ".", "avg", "\n", "", "progress", ".", "print", "(", "stats", ")", "\n", "\n", "# reset training meters", "\n", "for", "k", "in", "[", "\n", "'train_loss'", ",", "'train_nll_loss'", ",", "'wps'", ",", "'ups'", ",", "'wpb'", ",", "'bsz'", ",", "'gnorm'", ",", "'clip'", ",", "\n", "]", ":", "\n", "        ", "meter", "=", "trainer", ".", "get_meter", "(", "k", ")", "\n", "if", "meter", "is", "not", "None", ":", "\n", "            ", "meter", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.get_training_stats": [[218, 241], ["collections.OrderedDict", "train.get_perplexity", "round", "round", "round", "trainer.get_num_updates", "trainer.get_lr", "round", "round", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.None.train.get_perplexity", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_num_updates", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter"], ["", "", "", "def", "get_training_stats", "(", "trainer", ")", ":", "\n", "    ", "stats", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "stats", "[", "'loss'", "]", "=", "'{:.3f}'", ".", "format", "(", "trainer", ".", "get_meter", "(", "'train_loss'", ")", ".", "avg", ")", "\n", "if", "trainer", ".", "get_meter", "(", "'train_nll_loss'", ")", ".", "count", ">", "0", ":", "\n", "        ", "nll_loss", "=", "trainer", ".", "get_meter", "(", "'train_nll_loss'", ")", ".", "avg", "\n", "stats", "[", "'nll_loss'", "]", "=", "'{:.3f}'", ".", "format", "(", "nll_loss", ")", "\n", "", "else", ":", "\n", "        ", "nll_loss", "=", "trainer", ".", "get_meter", "(", "'train_loss'", ")", ".", "avg", "\n", "", "stats", "[", "'ppl'", "]", "=", "get_perplexity", "(", "nll_loss", ")", "\n", "stats", "[", "'wps'", "]", "=", "round", "(", "trainer", ".", "get_meter", "(", "'wps'", ")", ".", "avg", ")", "\n", "stats", "[", "'ups'", "]", "=", "'{:.1f}'", ".", "format", "(", "trainer", ".", "get_meter", "(", "'ups'", ")", ".", "avg", ")", "\n", "stats", "[", "'wpb'", "]", "=", "round", "(", "trainer", ".", "get_meter", "(", "'wpb'", ")", ".", "avg", ")", "\n", "stats", "[", "'bsz'", "]", "=", "round", "(", "trainer", ".", "get_meter", "(", "'bsz'", ")", ".", "avg", ")", "\n", "stats", "[", "'num_updates'", "]", "=", "trainer", ".", "get_num_updates", "(", ")", "\n", "stats", "[", "'lr'", "]", "=", "trainer", ".", "get_lr", "(", ")", "\n", "stats", "[", "'gnorm'", "]", "=", "'{:.3f}'", ".", "format", "(", "trainer", ".", "get_meter", "(", "'gnorm'", ")", ".", "avg", ")", "\n", "stats", "[", "'clip'", "]", "=", "'{:.0%}'", ".", "format", "(", "trainer", ".", "get_meter", "(", "'clip'", ")", ".", "avg", ")", "\n", "stats", "[", "'oom'", "]", "=", "trainer", ".", "get_meter", "(", "'oom'", ")", ".", "avg", "\n", "if", "trainer", ".", "get_meter", "(", "'loss_scale'", ")", "is", "not", "None", ":", "\n", "        ", "stats", "[", "'loss_scale'", "]", "=", "'{:.3f}'", ".", "format", "(", "trainer", ".", "get_meter", "(", "'loss_scale'", ")", ".", "avg", ")", "\n", "", "stats", "[", "'wall'", "]", "=", "round", "(", "trainer", ".", "get_meter", "(", "'wall'", ")", ".", "elapsed_time", ")", "\n", "stats", "[", "'train_wall'", "]", "=", "round", "(", "trainer", ".", "get_meter", "(", "'train_wall'", ")", ".", "sum", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.validate": [[243, 296], ["train.get_training_stats", "enumerate", "task.get_batch_iterator().next_epoch_itr", "fairseq.progress_bar.build_progress_bar", "collections.defaultdict", "train.get_valid_stats", "collections.defaultdict.items", "progress_bar.build_progress_bar.print", "train.write_tensorboard", "valid_losses.append", "trainer.get_meter", "trainer.valid_step", "trainer.valid_step.items", "task.get_batch_iterator", "trainer.get_meter.reset", "fairseq.meters.AverageMeter", "extra_meters[].update", "str", "get_valid_stats.items", "task.dataset", "fairseq.utils.resolve_max_positions", "task.max_positions", "trainer.get_model().max_positions", "trainer.get_model"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.None.train.get_training_stats", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.build_progress_bar", "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.get_valid_stats", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.write_tensorboard", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.valid_step", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.reset", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_model"], ["", "def", "validate", "(", "args", ",", "trainer", ",", "task", ",", "epoch_itr", ",", "subsets", ")", ":", "\n", "    ", "\"\"\"Evaluate the model on the validation set(s) and return the losses.\"\"\"", "\n", "train_stats", "=", "get_training_stats", "(", "trainer", ")", "\n", "valid_losses", "=", "[", "]", "\n", "for", "i", ",", "subset", "in", "enumerate", "(", "subsets", ")", ":", "\n", "# Initialize data iterator", "\n", "        ", "itr", "=", "task", ".", "get_batch_iterator", "(", "\n", "dataset", "=", "task", ".", "dataset", "(", "subset", ")", ",", "\n", "max_tokens", "=", "args", ".", "max_tokens", ",", "\n", "max_sentences", "=", "args", ".", "max_sentences_valid", ",", "\n", "max_positions", "=", "utils", ".", "resolve_max_positions", "(", "\n", "task", ".", "max_positions", "(", ")", ",", "\n", "trainer", ".", "get_model", "(", ")", ".", "max_positions", "(", ")", ",", "\n", ")", ",", "\n", "ignore_invalid_inputs", "=", "args", ".", "skip_invalid_size_inputs_valid_test", ",", "\n", "required_batch_size_multiple", "=", "8", ",", "\n", "seed", "=", "args", ".", "seed", ",", "\n", "num_shards", "=", "args", ".", "distributed_world_size", ",", "\n", "shard_id", "=", "args", ".", "distributed_rank", ",", "\n", ")", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "progress", "=", "progress_bar", ".", "build_progress_bar", "(", "\n", "args", ",", "itr", ",", "epoch_itr", ".", "epoch", ",", "\n", "prefix", "=", "'valid on \\'{}\\' subset'", ".", "format", "(", "subset", ")", ",", "\n", "no_progress_bar", "=", "'simple'", "\n", ")", "\n", "\n", "# reset validation loss meters", "\n", "for", "k", "in", "[", "'valid_loss'", ",", "'valid_nll_loss'", "]", ":", "\n", "            ", "meter", "=", "trainer", ".", "get_meter", "(", "k", ")", "\n", "if", "meter", "is", "not", "None", ":", "\n", "                ", "meter", ".", "reset", "(", ")", "\n", "", "", "extra_meters", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "AverageMeter", "(", ")", ")", "\n", "\n", "for", "sample", "in", "progress", ":", "\n", "            ", "log_output", "=", "trainer", ".", "valid_step", "(", "sample", ")", "\n", "\n", "for", "k", ",", "v", "in", "log_output", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "in", "[", "'loss'", ",", "'nll_loss'", ",", "'ntokens'", ",", "'nsentences'", ",", "'sample_size'", "]", ":", "\n", "                    ", "continue", "\n", "", "extra_meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n", "# log validation stats", "\n", "", "", "stats", "=", "get_valid_stats", "(", "trainer", ")", "\n", "for", "k", ",", "meter", "in", "extra_meters", ".", "items", "(", ")", ":", "\n", "            ", "stats", "[", "k", "]", "=", "meter", ".", "avg", "\n", "", "progress", ".", "print", "(", "stats", ")", "\n", "\n", "excluded", "=", "[", "'num_updates'", ",", "'best'", "]", "\n", "content", "=", "{", "key", "+", "\"_\"", "+", "str", "(", "i", "+", "1", ")", ":", "value", "for", "key", ",", "value", "in", "stats", ".", "items", "(", ")", "if", "key", "not", "in", "excluded", "}", "\n", "write_tensorboard", "(", "args", ",", "train_stats", "[", "'num_updates'", "]", ",", "content", ",", "is_training", "=", "False", ")", "\n", "\n", "valid_losses", ".", "append", "(", "stats", "[", "'valid_loss'", "]", ")", "\n", "", "return", "valid_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.get_valid_stats": [[298, 311], ["collections.OrderedDict", "train.get_perplexity", "trainer.get_num_updates", "hasattr", "trainer.get_meter", "min", "trainer.get_meter", "trainer.get_meter", "trainer.get_meter"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.None.train.get_perplexity", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_num_updates", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter"], ["", "def", "get_valid_stats", "(", "trainer", ")", ":", "\n", "    ", "stats", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "stats", "[", "'valid_loss'", "]", "=", "trainer", ".", "get_meter", "(", "'valid_loss'", ")", ".", "avg", "\n", "if", "trainer", ".", "get_meter", "(", "'valid_nll_loss'", ")", ".", "count", ">", "0", ":", "\n", "        ", "nll_loss", "=", "trainer", ".", "get_meter", "(", "'valid_nll_loss'", ")", ".", "avg", "\n", "stats", "[", "'valid_nll_loss'", "]", "=", "nll_loss", "\n", "", "else", ":", "\n", "        ", "nll_loss", "=", "trainer", ".", "get_meter", "(", "'valid_loss'", ")", ".", "avg", "\n", "", "stats", "[", "'valid_ppl'", "]", "=", "get_perplexity", "(", "nll_loss", ")", "\n", "stats", "[", "'num_updates'", "]", "=", "trainer", ".", "get_num_updates", "(", ")", "\n", "if", "hasattr", "(", "save_checkpoint", ",", "'best'", ")", ":", "\n", "        ", "stats", "[", "'best'", "]", "=", "min", "(", "save_checkpoint", ".", "best", ",", "stats", "[", "'valid_loss'", "]", ")", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.get_perplexity": [[313, 318], ["math.pow", "float"], "function", ["None"], ["", "def", "get_perplexity", "(", "loss", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "'{:.2f}'", ".", "format", "(", "math", ".", "pow", "(", "2", ",", "loss", ")", ")", "\n", "", "except", "OverflowError", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.save_checkpoint": [[320, 361], ["epoch_itr.end_of_epoch", "trainer.get_num_updates", "collections.OrderedDict", "getattr", "min", "epoch_itr.state_dict", "os.path.join", "len", "fairseq.utils.checkpoint_paths", "fairseq.distributed_utils.is_master", "collections.OrderedDict.items", "trainer.save_checkpoint", "os.remove", "hasattr"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.end_of_epoch", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_num_updates", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.checkpoint_paths", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.is_master", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.save_checkpoint"], ["", "", "def", "save_checkpoint", "(", "args", ",", "trainer", ",", "epoch_itr", ",", "val_loss", ")", ":", "\n", "    ", "if", "args", ".", "no_save", "or", "not", "distributed_utils", ".", "is_master", "(", "args", ")", ":", "\n", "        ", "return", "\n", "", "epoch", "=", "epoch_itr", ".", "epoch", "\n", "end_of_epoch", "=", "epoch_itr", ".", "end_of_epoch", "(", ")", "\n", "updates", "=", "trainer", ".", "get_num_updates", "(", ")", "\n", "\n", "checkpoint_conds", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "checkpoint_conds", "[", "'checkpoint{}.pt'", ".", "format", "(", "epoch", ")", "]", "=", "(", "\n", "end_of_epoch", "and", "not", "args", ".", "no_epoch_checkpoints", "and", "\n", "epoch", "%", "args", ".", "save_interval", "==", "0", "\n", ")", "\n", "checkpoint_conds", "[", "'checkpoint_{}_{}.pt'", ".", "format", "(", "epoch", ",", "updates", ")", "]", "=", "(", "\n", "not", "end_of_epoch", "and", "args", ".", "save_interval_updates", ">", "0", "and", "\n", "updates", "%", "args", ".", "save_interval_updates", "==", "0", "\n", ")", "\n", "checkpoint_conds", "[", "'checkpoint_best.pt'", "]", "=", "(", "\n", "val_loss", "is", "not", "None", "and", "\n", "(", "not", "hasattr", "(", "save_checkpoint", ",", "'best'", ")", "or", "val_loss", "<", "save_checkpoint", ".", "best", ")", "\n", ")", "\n", "checkpoint_conds", "[", "'checkpoint_last.pt'", "]", "=", "True", "# keep this last so that it's a symlink", "\n", "\n", "prev_best", "=", "getattr", "(", "save_checkpoint", ",", "'best'", ",", "val_loss", ")", "\n", "if", "val_loss", "is", "not", "None", ":", "\n", "        ", "save_checkpoint", ".", "best", "=", "min", "(", "val_loss", ",", "prev_best", ")", "\n", "", "extra_state", "=", "{", "\n", "'best'", ":", "save_checkpoint", ".", "best", ",", "\n", "'train_iterator'", ":", "epoch_itr", ".", "state_dict", "(", ")", ",", "\n", "'val_loss'", ":", "val_loss", ",", "\n", "}", "\n", "\n", "checkpoints", "=", "[", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "fn", ")", "for", "fn", ",", "cond", "in", "checkpoint_conds", ".", "items", "(", ")", "if", "cond", "]", "\n", "if", "len", "(", "checkpoints", ")", ">", "0", ":", "\n", "        ", "for", "cp", "in", "checkpoints", ":", "\n", "            ", "trainer", ".", "save_checkpoint", "(", "cp", ",", "extra_state", ")", "\n", "\n", "", "", "if", "not", "end_of_epoch", "and", "args", ".", "keep_interval_updates", ">", "0", ":", "\n", "# remove old checkpoints; checkpoints are sorted in descending order", "\n", "        ", "checkpoints", "=", "utils", ".", "checkpoint_paths", "(", "args", ".", "save_dir", ",", "pattern", "=", "r'checkpoint_\\d+_(\\d+)\\.pt'", ")", "\n", "for", "old_chk", "in", "checkpoints", "[", "args", ".", "keep_interval_updates", ":", "]", ":", "\n", "            ", "os", ".", "remove", "(", "old_chk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.load_checkpoint": [[363, 383], ["os.makedirs", "os.path.join", "os.path.isfile", "trainer.load_checkpoint", "eval", "epoch_itr.load_state_dict", "print", "trainer.lr_step", "trainer.lr_step_update", "trainer.get_num_updates", "trainer.get_num_updates"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.load_checkpoint", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.load_state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.lr_step", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.lr_step_update", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_num_updates", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_num_updates"], ["", "", "", "def", "load_checkpoint", "(", "args", ",", "trainer", ",", "epoch_itr", ")", ":", "\n", "    ", "\"\"\"Load a checkpoint and replay dataloader to match.\"\"\"", "\n", "os", ".", "makedirs", "(", "args", ".", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "restore_file", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "checkpoint_path", ")", ":", "\n", "        ", "extra_state", "=", "trainer", ".", "load_checkpoint", "(", "checkpoint_path", ",", "args", ".", "reset_optimizer", ",", "args", ".", "reset_lr_scheduler", ",", "\n", "eval", "(", "args", ".", "optimizer_overrides", ")", ")", "\n", "if", "extra_state", "is", "not", "None", ":", "\n", "# replay train iterator to match checkpoint", "\n", "            ", "epoch_itr", ".", "load_state_dict", "(", "extra_state", "[", "'train_iterator'", "]", ")", "\n", "\n", "print", "(", "'| loaded checkpoint {} (epoch {} @ {} updates)'", ".", "format", "(", "\n", "checkpoint_path", ",", "epoch_itr", ".", "epoch", ",", "trainer", ".", "get_num_updates", "(", ")", ")", ")", "\n", "\n", "trainer", ".", "lr_step", "(", "epoch_itr", ".", "epoch", ")", "\n", "trainer", ".", "lr_step_update", "(", "trainer", ".", "get_num_updates", "(", ")", ")", "\n", "if", "'best'", "in", "extra_state", ":", "\n", "                ", "save_checkpoint", ".", "best", "=", "extra_state", "[", "'best'", "]", "\n", "", "", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.train.load_dataset_splits": [[385, 398], ["task.load_dataset", "itertools.count", "task.load_dataset", "str"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.tasks.language_modeling.LanguageModelingTask.load_dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.language_modeling.LanguageModelingTask.load_dataset"], ["", "def", "load_dataset_splits", "(", "task", ",", "splits", ")", ":", "\n", "    ", "for", "split", "in", "splits", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "task", ".", "load_dataset", "(", "split", ",", "combine", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "for", "k", "in", "itertools", ".", "count", "(", ")", ":", "\n", "                ", "split_k", "=", "split", "+", "(", "str", "(", "k", ")", "if", "k", ">", "0", "else", "''", ")", "\n", "try", ":", "\n", "                    ", "task", ".", "load_dataset", "(", "split_k", ",", "combine", "=", "False", ")", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "                    ", "if", "k", ">", "0", ":", "\n", "                        ", "break", "\n", "", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.multiprocessing_train.ErrorHandler.__init__": [[61, 69], ["threading.Thread", "multiprocessing_train.ErrorHandler.error_thread.start", "signal.signal"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.start"], ["def", "__init__", "(", "self", ",", "error_queue", ")", ":", "\n", "        ", "import", "signal", "\n", "import", "threading", "\n", "self", ".", "error_queue", "=", "error_queue", "\n", "self", ".", "children_pids", "=", "[", "]", "\n", "self", ".", "error_thread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "error_listener", ",", "daemon", "=", "True", ")", "\n", "self", ".", "error_thread", ".", "start", "(", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGUSR1", ",", "self", ".", "signal_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.multiprocessing_train.ErrorHandler.add_child": [[70, 72], ["multiprocessing_train.ErrorHandler.children_pids.append"], "methods", ["None"], ["", "def", "add_child", "(", "self", ",", "pid", ")", ":", "\n", "        ", "self", ".", "children_pids", ".", "append", "(", "pid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.multiprocessing_train.ErrorHandler.error_listener": [[73, 77], ["multiprocessing_train.ErrorHandler.error_queue.get", "multiprocessing_train.ErrorHandler.error_queue.put", "os.kill", "os.getpid"], "methods", ["None"], ["", "def", "error_listener", "(", "self", ")", ":", "\n", "        ", "(", "rank", ",", "original_trace", ")", "=", "self", ".", "error_queue", ".", "get", "(", ")", "\n", "self", ".", "error_queue", ".", "put", "(", "(", "rank", ",", "original_trace", ")", ")", "\n", "os", ".", "kill", "(", "os", ".", "getpid", "(", ")", ",", "signal", ".", "SIGUSR1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.multiprocessing_train.ErrorHandler.signal_handler": [[78, 85], ["multiprocessing_train.ErrorHandler.error_queue.get", "Exception", "os.kill"], "methods", ["None"], ["", "def", "signal_handler", "(", "self", ",", "signalnum", ",", "stackframe", ")", ":", "\n", "        ", "for", "pid", "in", "self", ".", "children_pids", ":", "\n", "            ", "os", ".", "kill", "(", "pid", ",", "signal", ".", "SIGINT", ")", "# kill children processes", "\n", "", "(", "rank", ",", "original_trace", ")", "=", "self", ".", "error_queue", ".", "get", "(", ")", "\n", "msg", "=", "\"\\n\\n-- Tracebacks above this line can probably be ignored --\\n\\n\"", "\n", "msg", "+=", "original_trace", "\n", "raise", "Exception", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.multiprocessing_train.main": [[19, 43], ["torch.cuda.device_count", "random.randint", "torch.multiprocessing.get_context", "torch.multiprocessing.get_context.SimpleQueue", "multiprocessing_train.ErrorHandler", "range", "procs.append", "procs[].start", "multiprocessing_train.ErrorHandler.add_child", "p.join", "torch.multiprocessing.get_context.Process"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.lyy1994_reformer.None.multiprocessing_train.ErrorHandler.add_child"], ["def", "main", "(", "args", ")", ":", "\n", "# Set distributed training parameters for a single node.", "\n", "    ", "args", ".", "distributed_world_size", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "port", "=", "random", ".", "randint", "(", "10000", ",", "20000", ")", "\n", "args", ".", "distributed_init_method", "=", "'tcp://localhost:{port}'", ".", "format", "(", "port", "=", "port", ")", "\n", "args", ".", "distributed_init_host", "=", "'localhost'", "\n", "args", ".", "distributed_port", "=", "port", "+", "1", "\n", "\n", "mp", "=", "torch", ".", "multiprocessing", ".", "get_context", "(", "'spawn'", ")", "\n", "\n", "# Create a thread to listen for errors in the child processes.", "\n", "error_queue", "=", "mp", ".", "SimpleQueue", "(", ")", "\n", "error_handler", "=", "ErrorHandler", "(", "error_queue", ")", "\n", "\n", "# Train with multiprocessing.", "\n", "procs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "distributed_world_size", ")", ":", "\n", "        ", "args", ".", "distributed_rank", "=", "i", "\n", "args", ".", "device_id", "=", "i", "\n", "procs", ".", "append", "(", "mp", ".", "Process", "(", "target", "=", "run", ",", "args", "=", "(", "args", ",", "error_queue", ",", ")", ",", "daemon", "=", "True", ")", ")", "\n", "procs", "[", "i", "]", ".", "start", "(", ")", "\n", "error_handler", ".", "add_child", "(", "procs", "[", "i", "]", ".", "pid", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.multiprocessing_train.run": [[45, 55], ["fairseq.distributed_utils.distributed_init", "train.main", "error_queue.put", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.distributed_init", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.main"], ["", "", "def", "run", "(", "args", ",", "error_queue", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "args", ".", "distributed_rank", "=", "distributed_utils", ".", "distributed_init", "(", "args", ")", "\n", "single_process_main", "(", "args", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "pass", "# killed by parent, do nothing", "\n", "", "except", "Exception", ":", "\n", "# propagate exception to parent process, keeping original traceback", "\n", "        ", "import", "traceback", "\n", "error_queue", ".", "put", "(", "(", "args", ".", "distributed_rank", ",", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.preprocess.get_parser": [[23, 48], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--source-lang'", ",", "default", "=", "None", ",", "metavar", "=", "'SRC'", ",", "help", "=", "'source language'", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--target-lang'", ",", "default", "=", "None", ",", "metavar", "=", "'TARGET'", ",", "help", "=", "'target language'", ")", "\n", "parser", ".", "add_argument", "(", "'--trainpref'", ",", "metavar", "=", "'FP'", ",", "default", "=", "None", ",", "help", "=", "'train file prefix'", ")", "\n", "parser", ".", "add_argument", "(", "'--validpref'", ",", "metavar", "=", "'FP'", ",", "default", "=", "None", ",", "help", "=", "'comma separated, valid file prefixes'", ")", "\n", "parser", ".", "add_argument", "(", "'--testpref'", ",", "metavar", "=", "'FP'", ",", "default", "=", "None", ",", "help", "=", "'comma separated, test file prefixes'", ")", "\n", "parser", ".", "add_argument", "(", "'--destdir'", ",", "metavar", "=", "'DIR'", ",", "default", "=", "'data-bin'", ",", "help", "=", "'destination dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--thresholdtgt'", ",", "metavar", "=", "'N'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'map words appearing less than threshold times to unknown'", ")", "\n", "parser", ".", "add_argument", "(", "'--thresholdsrc'", ",", "metavar", "=", "'N'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'map words appearing less than threshold times to unknown'", ")", "\n", "parser", ".", "add_argument", "(", "'--tgtdict'", ",", "metavar", "=", "'FP'", ",", "help", "=", "'reuse given target dictionary'", ")", "\n", "parser", ".", "add_argument", "(", "'--srcdict'", ",", "metavar", "=", "'FP'", ",", "help", "=", "'reuse given source dictionary'", ")", "\n", "parser", ".", "add_argument", "(", "'--nwordstgt'", ",", "metavar", "=", "'N'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'number of target words to retain'", ")", "\n", "parser", ".", "add_argument", "(", "'--nwordssrc'", ",", "metavar", "=", "'N'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'number of source words to retain'", ")", "\n", "parser", ".", "add_argument", "(", "'--alignfile'", ",", "metavar", "=", "'ALIGN'", ",", "default", "=", "None", ",", "help", "=", "'an alignment file (optional)'", ")", "\n", "parser", ".", "add_argument", "(", "'--output-format'", ",", "metavar", "=", "'FORMAT'", ",", "default", "=", "'binary'", ",", "choices", "=", "[", "'binary'", ",", "'raw'", "]", ",", "\n", "help", "=", "'output format (optional)'", ")", "\n", "parser", ".", "add_argument", "(", "'--joined-dictionary'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Generate joined dictionary'", ")", "\n", "parser", ".", "add_argument", "(", "'--only-source'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Only process the source language'", ")", "\n", "parser", ".", "add_argument", "(", "'--padding-factor'", ",", "metavar", "=", "'N'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "\n", "help", "=", "'Pad dictionary size to be multiple of N'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "metavar", "=", "'N'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of parallel workers'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.preprocess.main": [[50, 220], ["print", "os.makedirs", "build_dictionary.finalize", "build_dictionary.save", "preprocess.main.make_all"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDatasetBuilder.finalize", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.save"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "args", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "destdir", ",", "exist_ok", "=", "True", ")", "\n", "target", "=", "not", "args", ".", "only_source", "\n", "\n", "def", "build_dictionary", "(", "filenames", ")", ":", "\n", "        ", "d", "=", "dictionary", ".", "Dictionary", "(", ")", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "Tokenizer", ".", "add_file_to_dictionary", "(", "filename", ",", "d", ",", "tokenize_line", ",", "args", ".", "workers", ")", "\n", "", "return", "d", "\n", "\n", "", "def", "train_path", "(", "lang", ")", ":", "\n", "        ", "return", "'{}{}'", ".", "format", "(", "args", ".", "trainpref", ",", "(", "'.'", "+", "lang", ")", "if", "lang", "else", "''", ")", "\n", "\n", "", "def", "file_name", "(", "prefix", ",", "lang", ")", ":", "\n", "        ", "fname", "=", "prefix", "\n", "if", "lang", "is", "not", "None", ":", "\n", "            ", "fname", "+=", "f'.{lang}'", "\n", "", "return", "fname", "\n", "\n", "", "def", "dest_path", "(", "prefix", ",", "lang", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "args", ".", "destdir", ",", "file_name", "(", "prefix", ",", "lang", ")", ")", "\n", "\n", "", "def", "dict_path", "(", "lang", ")", ":", "\n", "        ", "return", "dest_path", "(", "'dict'", ",", "lang", ")", "+", "'.txt'", "\n", "\n", "", "if", "args", ".", "joined_dictionary", ":", "\n", "        ", "assert", "not", "args", ".", "srcdict", ",", "'cannot combine --srcdict and --joined-dictionary'", "\n", "assert", "not", "args", ".", "tgtdict", ",", "'cannot combine --tgtdict and --joined-dictionary'", "\n", "src_dict", "=", "build_dictionary", "(", "set", "(", "[", "\n", "train_path", "(", "lang", ")", "\n", "for", "lang", "in", "[", "args", ".", "source_lang", ",", "args", ".", "target_lang", "]", "\n", "]", ")", ")", "\n", "tgt_dict", "=", "src_dict", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "srcdict", ":", "\n", "            ", "src_dict", "=", "dictionary", ".", "Dictionary", ".", "load", "(", "args", ".", "srcdict", ")", "\n", "", "else", ":", "\n", "            ", "assert", "args", ".", "trainpref", ",", "\"--trainpref must be set if --srcdict is not specified\"", "\n", "src_dict", "=", "build_dictionary", "(", "[", "train_path", "(", "args", ".", "source_lang", ")", "]", ")", "\n", "", "if", "target", ":", "\n", "            ", "if", "args", ".", "tgtdict", ":", "\n", "                ", "tgt_dict", "=", "dictionary", ".", "Dictionary", ".", "load", "(", "args", ".", "tgtdict", ")", "\n", "", "else", ":", "\n", "                ", "assert", "args", ".", "trainpref", ",", "\"--trainpref must be set if --tgtdict is not specified\"", "\n", "tgt_dict", "=", "build_dictionary", "(", "[", "train_path", "(", "args", ".", "target_lang", ")", "]", ")", "\n", "\n", "", "", "", "src_dict", ".", "finalize", "(", "\n", "threshold", "=", "args", ".", "thresholdsrc", ",", "\n", "nwords", "=", "args", ".", "nwordssrc", ",", "\n", "padding_factor", "=", "args", ".", "padding_factor", ",", "\n", ")", "\n", "src_dict", ".", "save", "(", "dict_path", "(", "args", ".", "source_lang", ")", ")", "\n", "if", "target", ":", "\n", "        ", "if", "not", "args", ".", "joined_dictionary", ":", "\n", "            ", "tgt_dict", ".", "finalize", "(", "\n", "threshold", "=", "args", ".", "thresholdtgt", ",", "\n", "nwords", "=", "args", ".", "nwordstgt", ",", "\n", "padding_factor", "=", "args", ".", "padding_factor", ",", "\n", ")", "\n", "", "tgt_dict", ".", "save", "(", "dict_path", "(", "args", ".", "target_lang", ")", ")", "\n", "\n", "", "def", "make_binary_dataset", "(", "input_prefix", ",", "output_prefix", ",", "lang", ",", "num_workers", ")", ":", "\n", "        ", "dict", "=", "dictionary", ".", "Dictionary", ".", "load", "(", "dict_path", "(", "lang", ")", ")", "\n", "print", "(", "'| [{}] Dictionary: {} types'", ".", "format", "(", "lang", ",", "len", "(", "dict", ")", "-", "1", ")", ")", "\n", "n_seq_tok", "=", "[", "0", ",", "0", "]", "\n", "replaced", "=", "Counter", "(", ")", "\n", "\n", "def", "merge_result", "(", "worker_result", ")", ":", "\n", "            ", "replaced", ".", "update", "(", "worker_result", "[", "'replaced'", "]", ")", "\n", "n_seq_tok", "[", "0", "]", "+=", "worker_result", "[", "'nseq'", "]", "\n", "n_seq_tok", "[", "1", "]", "+=", "worker_result", "[", "'ntok'", "]", "\n", "\n", "", "input_file", "=", "'{}{}'", ".", "format", "(", "input_prefix", ",", "(", "'.'", "+", "lang", ")", "if", "lang", "is", "not", "None", "else", "''", ")", "\n", "offsets", "=", "Tokenizer", ".", "find_offsets", "(", "input_file", ",", "num_workers", ")", "\n", "pool", "=", "None", "\n", "if", "num_workers", ">", "1", ":", "\n", "            ", "pool", "=", "Pool", "(", "processes", "=", "num_workers", "-", "1", ")", "\n", "for", "worker_id", "in", "range", "(", "1", ",", "num_workers", ")", ":", "\n", "                ", "prefix", "=", "\"{}{}\"", ".", "format", "(", "output_prefix", ",", "worker_id", ")", "\n", "pool", ".", "apply_async", "(", "binarize", ",", "(", "args", ",", "input_file", ",", "dict", ",", "prefix", ",", "lang", ",", "\n", "offsets", "[", "worker_id", "]", ",", "\n", "offsets", "[", "worker_id", "+", "1", "]", ")", ",", "callback", "=", "merge_result", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "\n", "", "ds", "=", "indexed_dataset", ".", "IndexedDatasetBuilder", "(", "dataset_dest_file", "(", "args", ",", "output_prefix", ",", "lang", ",", "'bin'", ")", ")", "\n", "merge_result", "(", "Tokenizer", ".", "binarize", "(", "input_file", ",", "dict", ",", "lambda", "t", ":", "ds", ".", "add_item", "(", "t", ")", ",", "\n", "offset", "=", "0", ",", "end", "=", "offsets", "[", "1", "]", ")", ")", "\n", "if", "num_workers", ">", "1", ":", "\n", "            ", "pool", ".", "join", "(", ")", "\n", "for", "worker_id", "in", "range", "(", "1", ",", "num_workers", ")", ":", "\n", "                ", "prefix", "=", "\"{}{}\"", ".", "format", "(", "output_prefix", ",", "worker_id", ")", "\n", "temp_file_path", "=", "dataset_dest_prefix", "(", "args", ",", "prefix", ",", "lang", ")", "\n", "ds", ".", "merge_file_", "(", "temp_file_path", ")", "\n", "os", ".", "remove", "(", "indexed_dataset", ".", "data_file_path", "(", "temp_file_path", ")", ")", "\n", "os", ".", "remove", "(", "indexed_dataset", ".", "index_file_path", "(", "temp_file_path", ")", ")", "\n", "\n", "", "", "ds", ".", "finalize", "(", "dataset_dest_file", "(", "args", ",", "output_prefix", ",", "lang", ",", "'idx'", ")", ")", "\n", "\n", "print", "(", "'| [{}] {}: {} sents, {} tokens, {:.3}% replaced by {}'", ".", "format", "(", "\n", "lang", ",", "input_file", ",", "n_seq_tok", "[", "0", "]", ",", "n_seq_tok", "[", "1", "]", ",", "\n", "100", "*", "sum", "(", "replaced", ".", "values", "(", ")", ")", "/", "n_seq_tok", "[", "1", "]", ",", "dict", ".", "unk_word", ")", ")", "\n", "\n", "", "def", "make_dataset", "(", "input_prefix", ",", "output_prefix", ",", "lang", ",", "num_workers", "=", "1", ")", ":", "\n", "        ", "if", "args", ".", "output_format", "==", "'binary'", ":", "\n", "            ", "make_binary_dataset", "(", "input_prefix", ",", "output_prefix", ",", "lang", ",", "num_workers", ")", "\n", "", "elif", "args", ".", "output_format", "==", "'raw'", ":", "\n", "# Copy original text file to destination folder", "\n", "            ", "output_text_file", "=", "dest_path", "(", "\n", "output_prefix", "+", "'.{}-{}'", ".", "format", "(", "args", ".", "source_lang", ",", "args", ".", "target_lang", ")", ",", "\n", "lang", ",", "\n", ")", "\n", "shutil", ".", "copyfile", "(", "file_name", "(", "input_prefix", ",", "lang", ")", ",", "output_text_file", ")", "\n", "\n", "", "", "def", "make_all", "(", "lang", ")", ":", "\n", "        ", "if", "args", ".", "trainpref", ":", "\n", "            ", "make_dataset", "(", "args", ".", "trainpref", ",", "'train'", ",", "lang", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "", "if", "args", ".", "validpref", ":", "\n", "            ", "for", "k", ",", "validpref", "in", "enumerate", "(", "args", ".", "validpref", ".", "split", "(", "','", ")", ")", ":", "\n", "                ", "outprefix", "=", "'valid{}'", ".", "format", "(", "k", ")", "if", "k", ">", "0", "else", "'valid'", "\n", "make_dataset", "(", "validpref", ",", "outprefix", ",", "lang", ")", "\n", "", "", "if", "args", ".", "testpref", ":", "\n", "            ", "for", "k", ",", "testpref", "in", "enumerate", "(", "args", ".", "testpref", ".", "split", "(", "','", ")", ")", ":", "\n", "                ", "outprefix", "=", "'test{}'", ".", "format", "(", "k", ")", "if", "k", ">", "0", "else", "'test'", "\n", "make_dataset", "(", "testpref", ",", "outprefix", ",", "lang", ")", "\n", "\n", "", "", "", "make_all", "(", "args", ".", "source_lang", ")", "\n", "if", "target", ":", "\n", "        ", "make_all", "(", "args", ".", "target_lang", ")", "\n", "\n", "", "print", "(", "'| Wrote preprocessed data to {}'", ".", "format", "(", "args", ".", "destdir", ")", ")", "\n", "\n", "if", "args", ".", "alignfile", ":", "\n", "        ", "assert", "args", ".", "trainpref", ",", "\"--trainpref must be set if --alignfile is specified\"", "\n", "src_file_name", "=", "train_path", "(", "args", ".", "source_lang", ")", "\n", "tgt_file_name", "=", "train_path", "(", "args", ".", "target_lang", ")", "\n", "src_dict", "=", "dictionary", ".", "Dictionary", ".", "load", "(", "dict_path", "(", "args", ".", "source_lang", ")", ")", "\n", "tgt_dict", "=", "dictionary", ".", "Dictionary", ".", "load", "(", "dict_path", "(", "args", ".", "target_lang", ")", ")", "\n", "freq_map", "=", "{", "}", "\n", "with", "open", "(", "args", ".", "alignfile", ",", "'r'", ")", "as", "align_file", ":", "\n", "            ", "with", "open", "(", "src_file_name", ",", "'r'", ")", "as", "src_file", ":", "\n", "                ", "with", "open", "(", "tgt_file_name", ",", "'r'", ")", "as", "tgt_file", ":", "\n", "                    ", "for", "a", ",", "s", ",", "t", "in", "zip_longest", "(", "align_file", ",", "src_file", ",", "tgt_file", ")", ":", "\n", "                        ", "si", "=", "Tokenizer", ".", "tokenize", "(", "s", ",", "src_dict", ",", "add_if_not_exist", "=", "False", ")", "\n", "ti", "=", "Tokenizer", ".", "tokenize", "(", "t", ",", "tgt_dict", ",", "add_if_not_exist", "=", "False", ")", "\n", "ai", "=", "list", "(", "map", "(", "lambda", "x", ":", "tuple", "(", "x", ".", "split", "(", "'-'", ")", ")", ",", "a", ".", "split", "(", ")", ")", ")", "\n", "for", "sai", ",", "tai", "in", "ai", ":", "\n", "                            ", "srcidx", "=", "si", "[", "int", "(", "sai", ")", "]", "\n", "tgtidx", "=", "ti", "[", "int", "(", "tai", ")", "]", "\n", "if", "srcidx", "!=", "src_dict", ".", "unk", "(", ")", "and", "tgtidx", "!=", "tgt_dict", ".", "unk", "(", ")", ":", "\n", "                                ", "assert", "srcidx", "!=", "src_dict", ".", "pad", "(", ")", "\n", "assert", "srcidx", "!=", "src_dict", ".", "eos", "(", ")", "\n", "assert", "tgtidx", "!=", "tgt_dict", ".", "pad", "(", ")", "\n", "assert", "tgtidx", "!=", "tgt_dict", ".", "eos", "(", ")", "\n", "\n", "if", "srcidx", "not", "in", "freq_map", ":", "\n", "                                    ", "freq_map", "[", "srcidx", "]", "=", "{", "}", "\n", "", "if", "tgtidx", "not", "in", "freq_map", "[", "srcidx", "]", ":", "\n", "                                    ", "freq_map", "[", "srcidx", "]", "[", "tgtidx", "]", "=", "1", "\n", "", "else", ":", "\n", "                                    ", "freq_map", "[", "srcidx", "]", "[", "tgtidx", "]", "+=", "1", "\n", "\n", "", "", "", "", "", "", "", "align_dict", "=", "{", "}", "\n", "for", "srcidx", "in", "freq_map", ".", "keys", "(", ")", ":", "\n", "            ", "align_dict", "[", "srcidx", "]", "=", "max", "(", "freq_map", "[", "srcidx", "]", ",", "key", "=", "freq_map", "[", "srcidx", "]", ".", "get", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "destdir", ",", "'alignment.{}-{}.txt'", ".", "format", "(", "\n", "args", ".", "source_lang", ",", "args", ".", "target_lang", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "k", ",", "v", "in", "align_dict", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "'{} {}'", ".", "format", "(", "src_dict", "[", "k", "]", ",", "tgt_dict", "[", "v", "]", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.preprocess.binarize": [[222, 231], ["fairseq.data.indexed_dataset.IndexedDatasetBuilder", "fairseq.tokenizer.Tokenizer.binarize", "indexed_dataset.IndexedDatasetBuilder.finalize", "preprocess.dataset_dest_file", "indexed_dataset.IndexedDatasetBuilder.add_item", "preprocess.dataset_dest_file"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.binarize", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDatasetBuilder.finalize", "home.repos.pwc.inspect_result.lyy1994_reformer.None.preprocess.dataset_dest_file", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDatasetBuilder.add_item", "home.repos.pwc.inspect_result.lyy1994_reformer.None.preprocess.dataset_dest_file"], ["", "", "", "", "def", "binarize", "(", "args", ",", "filename", ",", "dict", ",", "output_prefix", ",", "lang", ",", "offset", ",", "end", ")", ":", "\n", "    ", "ds", "=", "indexed_dataset", ".", "IndexedDatasetBuilder", "(", "dataset_dest_file", "(", "args", ",", "output_prefix", ",", "lang", ",", "'bin'", ")", ")", "\n", "\n", "def", "consumer", "(", "tensor", ")", ":", "\n", "        ", "ds", ".", "add_item", "(", "tensor", ")", "\n", "\n", "", "res", "=", "Tokenizer", ".", "binarize", "(", "filename", ",", "dict", ",", "consumer", ",", "offset", "=", "offset", ",", "end", "=", "end", ")", "\n", "ds", ".", "finalize", "(", "dataset_dest_file", "(", "args", ",", "output_prefix", ",", "lang", ",", "'idx'", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.preprocess.dataset_dest_prefix": [[233, 237], ["None"], "function", ["None"], ["", "def", "dataset_dest_prefix", "(", "args", ",", "output_prefix", ",", "lang", ")", ":", "\n", "    ", "base", "=", "f'{args.destdir}/{output_prefix}'", "\n", "lang_part", "=", "f'.{args.source_lang}-{args.target_lang}.{lang}'", "if", "lang", "is", "not", "None", "else", "''", "\n", "return", "f'{base}{lang_part}'", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.preprocess.dataset_dest_file": [[239, 242], ["preprocess.dataset_dest_prefix"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.None.preprocess.dataset_dest_prefix"], ["", "def", "dataset_dest_file", "(", "args", ",", "output_prefix", ",", "lang", ",", "extension", ")", ":", "\n", "    ", "base", "=", "dataset_dest_prefix", "(", "args", ",", "output_prefix", ",", "lang", ")", "\n", "return", "f'{base}.{extension}'", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.distributed_train.main": [[17, 40], ["fairseq.distributed_utils.distributed_init", "print", "train.main", "os.environ.get", "ValueError", "socket.gethostname", "subprocess.check_output", "int", "int", "os.environ.get", "os.environ.get", "[].decode", "subprocess.check_output.split"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.distributed_init", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.main"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "distributed_init_method", "is", "None", "and", "args", ".", "distributed_port", ">", "0", ":", "\n", "# We can determine the init method automatically for Slurm.", "\n", "        ", "node_list", "=", "os", ".", "environ", ".", "get", "(", "'SLURM_JOB_NODELIST'", ")", "\n", "if", "node_list", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "hostnames", "=", "subprocess", ".", "check_output", "(", "[", "'scontrol'", ",", "'show'", ",", "'hostnames'", ",", "node_list", "]", ")", "\n", "args", ".", "distributed_init_method", "=", "'tcp://{host}:{port}'", ".", "format", "(", "\n", "host", "=", "hostnames", ".", "split", "(", ")", "[", "0", "]", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "port", "=", "args", ".", "distributed_port", ")", "\n", "args", ".", "distributed_rank", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'SLURM_PROCID'", ")", ")", "\n", "args", ".", "device_id", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'SLURM_LOCALID'", ")", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", "as", "e", ":", "# scontrol failed", "\n", "                ", "raise", "e", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "# Slurm is not installed", "\n", "                ", "pass", "\n", "", "", "", "if", "args", ".", "distributed_init_method", "is", "None", "and", "args", ".", "distributed_port", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'--distributed-init-method or --distributed-port '", "\n", "'must be specified for distributed training'", ")", "\n", "\n", "", "args", ".", "distributed_rank", "=", "distributed_utils", ".", "distributed_init", "(", "args", ")", "\n", "print", "(", "'| initialized host {} as rank {}'", ".", "format", "(", "socket", ".", "gethostname", "(", ")", ",", "args", ".", "distributed_rank", ")", ")", "\n", "single_process_main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.score.get_parser": [[20, 29], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Command-line script for BLEU scoring.'", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--sys'", ",", "default", "=", "'-'", ",", "help", "=", "'system output'", ")", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--ref'", ",", "required", "=", "True", ",", "help", "=", "'references'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--order'", ",", "default", "=", "4", ",", "metavar", "=", "'N'", ",", "\n", "type", "=", "int", ",", "help", "=", "'consider ngrams up to this order'", ")", "\n", "parser", ".", "add_argument", "(", "'--ignore-case'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'case-insensitive scoring'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.score.main": [[31, 63], ["score.get_parser", "get_parser.parse_args", "print", "os.path.exists", "fairseq.data.dictionary.Dictionary", "os.path.exists", "fd.readlines", "score.main.score"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_parser", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.score"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "assert", "args", ".", "sys", "==", "'-'", "or", "os", ".", "path", ".", "exists", "(", "args", ".", "sys", ")", ",", "\"System output file {} does not exist\"", ".", "format", "(", "args", ".", "sys", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "ref", ")", ",", "\"Reference file {} does not exist\"", ".", "format", "(", "args", ".", "ref", ")", "\n", "\n", "dict", "=", "dictionary", ".", "Dictionary", "(", ")", "\n", "\n", "def", "readlines", "(", "fd", ")", ":", "\n", "        ", "for", "line", "in", "fd", ".", "readlines", "(", ")", ":", "\n", "            ", "if", "args", ".", "ignore_case", ":", "\n", "                ", "yield", "line", ".", "lower", "(", ")", "\n", "", "yield", "line", "\n", "\n", "", "", "def", "score", "(", "fdsys", ")", ":", "\n", "        ", "with", "open", "(", "args", ".", "ref", ")", "as", "fdref", ":", "\n", "            ", "scorer", "=", "bleu", ".", "Scorer", "(", "dict", ".", "pad", "(", ")", ",", "dict", ".", "eos", "(", ")", ",", "dict", ".", "unk", "(", ")", ")", "\n", "for", "sys_tok", ",", "ref_tok", "in", "zip", "(", "readlines", "(", "fdsys", ")", ",", "readlines", "(", "fdref", ")", ")", ":", "\n", "                ", "sys_tok", "=", "tokenizer", ".", "Tokenizer", ".", "tokenize", "(", "sys_tok", ",", "dict", ")", "\n", "ref_tok", "=", "tokenizer", ".", "Tokenizer", ".", "tokenize", "(", "ref_tok", ",", "dict", ")", "\n", "scorer", ".", "add", "(", "ref_tok", ",", "sys_tok", ")", "\n", "", "print", "(", "scorer", ".", "result_string", "(", "args", ".", "order", ")", ")", "\n", "\n", "", "", "if", "args", ".", "sys", "==", "'-'", ":", "\n", "        ", "score", "(", "sys", ".", "stdin", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "args", ".", "sys", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "score", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.eval_lm.WordStat.__init__": [[21, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "word", ",", "is_bpe", ")", ":", "\n", "        ", "self", ".", "word", "=", "word", "\n", "self", ".", "is_bpe", "=", "is_bpe", "\n", "self", ".", "log_prob", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.eval_lm.WordStat.add": [[27, 30], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "log_prob", ")", ":", "\n", "        ", "self", ".", "log_prob", "+=", "log_prob", "\n", "self", ".", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.eval_lm.WordStat.__str__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'{}\\t{}\\t{}\\t{}'", ".", "format", "(", "self", ".", "word", ",", "self", ".", "count", ",", "self", ".", "log_prob", "/", "self", ".", "count", ",", "self", ".", "is_bpe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.None.eval_lm.main": [[35, 146], ["print", "fairseq.tasks.setup_task", "print", "fairseq.utils.load_ensemble_for_inference", "args.__dict__.update", "print", "tasks.setup_task.load_dataset", "print", "tasks.setup_task.get_batch_iterator().next_epoch_itr", "fairseq.meters.StopwatchMeter", "fairseq.sequence_scorer.SequenceScorer", "dict", "print", "print", "torch.cuda.is_available", "parsed_args.path.split", "model.make_generation_fast_", "len", "fairseq.sequence_scorer.SequenceScorer.cuda", "args.remove_bpe.rstrip", "set", "len", "fairseq.progress_bar.build_progress_bar", "fairseq.sequence_scorer.SequenceScorer.score_batched_itr", "fairseq.meters.TimeMeter", "sorted", "len", "model.half", "tasks.setup_task.get_batch_iterator", "fairseq.meters.TimeMeter.update", "t.log", "numpy.exp", "dict.values", "print", "tasks.setup_task.dataset", "inf_scores.any", "fairseq.utils.item", "src_tokens.size", "tasks.setup_task.dataset", "fairseq.utils.resolve_max_positions", "range", "tasks.setup_task.dictionary[].endswith", "range", "pos_scores.eq", "pos_scores.eq", "print", "pos_scores.sum", "pos_scores.numel", "range", "round", "len", "float", "float", "tasks.setup_task.target_dictionary.string", "len", "[].item", "print", "len", "[].item", "word_prob.append", "dict.setdefault().add", "model.max_positions", "pos_scores[].item", "inf_scores.nonzero", "pos_scores[].item", "dict.setdefault", "eval_lm.WordStat"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.__init__.setup_task", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_ensemble_for_inference", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.language_modeling.LanguageModelingTask.load_dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.make_generation_fast_", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.build_progress_bar", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_scorer.SequenceScorer.score_batched_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.add", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["", "", "def", "main", "(", "parsed_args", ")", ":", "\n", "    ", "assert", "parsed_args", ".", "path", "is", "not", "None", ",", "'--path required for evaluation!'", "\n", "\n", "print", "(", "parsed_args", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "parsed_args", ".", "cpu", "\n", "\n", "task", "=", "tasks", ".", "setup_task", "(", "parsed_args", ")", "\n", "\n", "# Load ensemble", "\n", "print", "(", "'| loading model(s) from {}'", ".", "format", "(", "parsed_args", ".", "path", ")", ")", "\n", "models", ",", "args", "=", "utils", ".", "load_ensemble_for_inference", "(", "parsed_args", ".", "path", ".", "split", "(", "':'", ")", ",", "task", ")", "\n", "\n", "args", ".", "__dict__", ".", "update", "(", "parsed_args", ".", "__dict__", ")", "\n", "print", "(", "args", ")", "\n", "\n", "task", ".", "args", "=", "args", "\n", "\n", "# Load dataset splits", "\n", "task", ".", "load_dataset", "(", "args", ".", "gen_subset", ")", "\n", "print", "(", "'| {} {} {} examples'", ".", "format", "(", "args", ".", "data", ",", "args", ".", "gen_subset", ",", "len", "(", "task", ".", "dataset", "(", "args", ".", "gen_subset", ")", ")", ")", ")", "\n", "\n", "# Optimize ensemble for generation and set the source and dest dicts on the model (required by scorer)", "\n", "for", "model", "in", "models", ":", "\n", "        ", "model", ".", "make_generation_fast_", "(", ")", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "model", ".", "half", "(", ")", "\n", "\n", "", "", "assert", "len", "(", "models", ")", ">", "0", "\n", "\n", "itr", "=", "task", ".", "get_batch_iterator", "(", "\n", "dataset", "=", "task", ".", "dataset", "(", "args", ".", "gen_subset", ")", ",", "\n", "max_tokens", "=", "args", ".", "max_tokens", "or", "36000", ",", "\n", "max_sentences", "=", "args", ".", "max_sentences", ",", "\n", "max_positions", "=", "utils", ".", "resolve_max_positions", "(", "*", "[", "\n", "model", ".", "max_positions", "(", ")", "for", "model", "in", "models", "\n", "]", ")", ",", "\n", "num_shards", "=", "args", ".", "num_shards", ",", "\n", "shard_id", "=", "args", ".", "shard_id", ",", "\n", "ignore_invalid_inputs", "=", "True", ",", "\n", ")", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "\n", "gen_timer", "=", "StopwatchMeter", "(", ")", "\n", "scorer", "=", "SequenceScorer", "(", "models", ",", "task", ".", "target_dictionary", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "scorer", ".", "cuda", "(", ")", "\n", "\n", "", "score_sum", "=", "0.", "\n", "count", "=", "0", "\n", "\n", "if", "args", ".", "remove_bpe", "is", "not", "None", ":", "\n", "        ", "bpe_cont", "=", "args", ".", "remove_bpe", ".", "rstrip", "(", ")", "\n", "bpe_toks", "=", "set", "(", "i", "for", "i", "in", "range", "(", "len", "(", "task", ".", "dictionary", ")", ")", "if", "task", ".", "dictionary", "[", "i", "]", ".", "endswith", "(", "bpe_cont", ")", ")", "\n", "bpe_len", "=", "len", "(", "bpe_cont", ")", "\n", "", "else", ":", "\n", "        ", "bpe_toks", "=", "None", "\n", "bpe_len", "=", "0", "\n", "\n", "", "word_stats", "=", "dict", "(", ")", "\n", "\n", "with", "progress_bar", ".", "build_progress_bar", "(", "args", ",", "itr", ")", "as", "t", ":", "\n", "        ", "results", "=", "scorer", ".", "score_batched_itr", "(", "t", ",", "cuda", "=", "use_cuda", ",", "timer", "=", "gen_timer", ")", "\n", "wps_meter", "=", "TimeMeter", "(", ")", "\n", "for", "_", ",", "src_tokens", ",", "__", ",", "hypos", "in", "results", ":", "\n", "            ", "for", "hypo", "in", "hypos", ":", "\n", "                ", "pos_scores", "=", "hypo", "[", "'positional_scores'", "]", "\n", "\n", "skipped_toks", "=", "0", "\n", "if", "bpe_toks", "is", "not", "None", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "hypo", "[", "'tokens'", "]", ")", "-", "1", ")", ":", "\n", "                        ", "if", "hypo", "[", "'tokens'", "]", "[", "i", "]", ".", "item", "(", ")", "in", "bpe_toks", ":", "\n", "                            ", "skipped_toks", "+=", "1", "\n", "pos_scores", "[", "i", "+", "1", "]", "+=", "pos_scores", "[", "i", "]", "\n", "pos_scores", "[", "i", "]", "=", "0", "\n", "\n", "", "", "", "inf_scores", "=", "pos_scores", ".", "eq", "(", "float", "(", "'inf'", ")", ")", "|", "pos_scores", ".", "eq", "(", "float", "(", "'-inf'", ")", ")", "\n", "if", "inf_scores", ".", "any", "(", ")", ":", "\n", "                    ", "print", "(", "'| Skipping tokens with inf scores:'", ",", "\n", "task", ".", "target_dictionary", ".", "string", "(", "hypo", "[", "'tokens'", "]", "[", "inf_scores", ".", "nonzero", "(", ")", "]", ")", ")", "\n", "pos_scores", "=", "pos_scores", "[", "(", "~", "inf_scores", ")", ".", "nonzero", "(", ")", "]", "\n", "", "score_sum", "+=", "utils", ".", "item", "(", "pos_scores", ".", "sum", "(", ")", ")", "\n", "count", "+=", "pos_scores", ".", "numel", "(", ")", "-", "skipped_toks", "\n", "\n", "if", "args", ".", "output_word_probs", "or", "args", ".", "output_word_stats", ":", "\n", "                    ", "w", "=", "''", "\n", "word_prob", "=", "[", "]", "\n", "is_bpe", "=", "False", "\n", "for", "i", "in", "range", "(", "len", "(", "hypo", "[", "'tokens'", "]", ")", ")", ":", "\n", "                        ", "w_ind", "=", "hypo", "[", "'tokens'", "]", "[", "i", "]", ".", "item", "(", ")", "\n", "w", "+=", "task", ".", "dictionary", "[", "w_ind", "]", "\n", "if", "bpe_toks", "is", "not", "None", "and", "w_ind", "in", "bpe_toks", ":", "\n", "                            ", "w", "=", "w", "[", ":", "-", "bpe_len", "]", "\n", "is_bpe", "=", "True", "\n", "", "else", ":", "\n", "                            ", "word_prob", ".", "append", "(", "(", "w", ",", "pos_scores", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "word_stats", ".", "setdefault", "(", "w", ",", "WordStat", "(", "w", ",", "is_bpe", ")", ")", ".", "add", "(", "pos_scores", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "is_bpe", "=", "False", "\n", "w", "=", "''", "\n", "", "", "if", "args", ".", "output_word_probs", ":", "\n", "                        ", "print", "(", "'\\t'", ".", "join", "(", "'{} [{:2f}]'", ".", "format", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "word_prob", ")", ")", "\n", "\n", "", "", "", "wps_meter", ".", "update", "(", "src_tokens", ".", "size", "(", "0", ")", ")", "\n", "t", ".", "log", "(", "{", "'wps'", ":", "round", "(", "wps_meter", ".", "avg", ")", "}", ")", "\n", "\n", "", "", "avg_nll_loss", "=", "-", "score_sum", "/", "count", "\n", "print", "(", "'| Evaluated {} tokens in {:.1f}s ({:.2f} tokens/s)'", ".", "format", "(", "gen_timer", ".", "n", ",", "gen_timer", ".", "sum", ",", "1.", "/", "gen_timer", ".", "avg", ")", ")", "\n", "print", "(", "'| Loss: {:.4f}, Perplexity: {:.2f}'", ".", "format", "(", "avg_nll_loss", ",", "np", ".", "exp", "(", "avg_nll_loss", ")", ")", ")", "\n", "\n", "if", "args", ".", "output_word_stats", ":", "\n", "        ", "for", "ws", "in", "sorted", "(", "word_stats", ".", "values", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", ".", "count", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "print", "(", "ws", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.read_binarized.get_parser": [[16, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'writes text from binarized file to stdout'", ")", "\n", "parser", ".", "add_argument", "(", "'--dict'", ",", "metavar", "=", "'FP'", ",", "required", "=", "True", ",", "help", "=", "'dictionary containing known words'", ")", "\n", "parser", ".", "add_argument", "(", "'--input'", ",", "metavar", "=", "'FP'", ",", "required", "=", "True", ",", "help", "=", "'binarized file to read'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.read_binarized.main": [[25, 30], ["fairseq.data.dictionary.Dictionary.load", "fairseq.data.IndexedDataset", "print", "dictionary.Dictionary.load.string"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.string"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "dict", "=", "dictionary", ".", "Dictionary", ".", "load", "(", "args", ".", "dict", ")", "\n", "ds", "=", "IndexedDataset", "(", "args", ".", "input", ",", "fix_lua_indexing", "=", "True", ")", "\n", "for", "tensor_line", "in", "ds", ":", "\n", "        ", "print", "(", "dict", ".", "string", "(", "tensor_line", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.build_sym_alignment.main": [[33, 96], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "open", "os.system", "os.system", "os.system", "open", "itertools.zip_longest", "print", "s.strip", "t.strip"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'symmetric alignment builer'", ")", "\n", "parser", ".", "add_argument", "(", "'--fast_align_dir'", ",", "\n", "help", "=", "'path to fast_align build directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--mosesdecoder_dir'", ",", "\n", "help", "=", "'path to mosesdecoder root directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--sym_heuristic'", ",", "\n", "help", "=", "'heuristic to use for symmetrization'", ",", "\n", "default", "=", "'grow-diag-final-and'", ")", "\n", "parser", ".", "add_argument", "(", "'--source_file'", ",", "\n", "help", "=", "'path to a file with sentences '", "\n", "'in the source language'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_file'", ",", "\n", "help", "=", "'path to a file with sentences '", "\n", "'in the target language'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "\n", "help", "=", "'output directory'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "fast_align_bin", "=", "os", ".", "path", ".", "join", "(", "args", ".", "fast_align_dir", ",", "'fast_align'", ")", "\n", "symal_bin", "=", "os", ".", "path", ".", "join", "(", "args", ".", "mosesdecoder_dir", ",", "'bin'", ",", "'symal'", ")", "\n", "sym_fast_align_bin", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "mosesdecoder_dir", ",", "'scripts'", ",", "'ems'", ",", "\n", "'support'", ",", "'symmetrize-fast-align.perl'", ")", "\n", "\n", "# create joined file", "\n", "joined_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'text.joined'", ")", "\n", "with", "open", "(", "args", ".", "source_file", ",", "'r'", ")", "as", "src", ",", "open", "(", "args", ".", "target_file", ",", "'r'", ")", "as", "tgt", ":", "\n", "        ", "with", "open", "(", "joined_file", ",", "'w'", ")", "as", "joined", ":", "\n", "            ", "for", "s", ",", "t", "in", "zip_longest", "(", "src", ",", "tgt", ")", ":", "\n", "                ", "print", "(", "'{} ||| {}'", ".", "format", "(", "s", ".", "strip", "(", ")", ",", "t", ".", "strip", "(", ")", ")", ",", "file", "=", "joined", ")", "\n", "\n", "", "", "", "bwd_align_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'align.backward'", ")", "\n", "\n", "# run forward alignment", "\n", "fwd_align_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'align.forward'", ")", "\n", "fwd_fast_align_cmd", "=", "'{FASTALIGN} -i {JOINED} -d -o -v > {FWD}'", ".", "format", "(", "\n", "FASTALIGN", "=", "fast_align_bin", ",", "\n", "JOINED", "=", "joined_file", ",", "\n", "FWD", "=", "fwd_align_file", ")", "\n", "assert", "os", ".", "system", "(", "fwd_fast_align_cmd", ")", "==", "0", "\n", "\n", "# run backward alignment", "\n", "bwd_align_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'align.backward'", ")", "\n", "bwd_fast_align_cmd", "=", "'{FASTALIGN} -i {JOINED} -d -o -v -r > {BWD}'", ".", "format", "(", "\n", "FASTALIGN", "=", "fast_align_bin", ",", "\n", "JOINED", "=", "joined_file", ",", "\n", "BWD", "=", "bwd_align_file", ")", "\n", "assert", "os", ".", "system", "(", "bwd_fast_align_cmd", ")", "==", "0", "\n", "\n", "# run symmetrization", "\n", "sym_out_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'aligned'", ")", "\n", "sym_cmd", "=", "'{SYMFASTALIGN} {FWD} {BWD} {SRC} {TGT} {OUT} {HEURISTIC} {SYMAL}'", ".", "format", "(", "\n", "SYMFASTALIGN", "=", "sym_fast_align_bin", ",", "\n", "FWD", "=", "fwd_align_file", ",", "\n", "BWD", "=", "bwd_align_file", ",", "\n", "SRC", "=", "args", ".", "source_file", ",", "\n", "TGT", "=", "args", ".", "target_file", ",", "\n", "OUT", "=", "sym_out_file", ",", "\n", "HEURISTIC", "=", "args", ".", "sym_heuristic", ",", "\n", "SYMAL", "=", "symal_bin", "\n", ")", "\n", "assert", "os", ".", "system", "(", "sym_cmd", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.average_checkpoints": [[10, 63], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict.items", "torch.load", "list", "model_params.keys", "isinstance", "params_dict[].append", "len", "KeyError", "p.float.float", "torch.serialization.default_restore_location"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.load"], ["def", "average_checkpoints", "(", "inputs", ")", ":", "\n", "    ", "\"\"\"Loads checkpoints from inputs and returns a model with averaged weights.\n\n    Args:\n      inputs: An iterable of string paths of checkpoints to load from.\n\n    Returns:\n      A dict of string keys mapping to various values. The 'model' key\n      from the returned dict should correspond to an OrderedDict mapping\n      string parameter names to torch Tensors.\n    \"\"\"", "\n", "params_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "params_keys", "=", "None", "\n", "new_state", "=", "None", "\n", "for", "f", "in", "inputs", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "\n", "f", ",", "\n", "map_location", "=", "(", "\n", "lambda", "s", ",", "_", ":", "torch", ".", "serialization", ".", "default_restore_location", "(", "s", ",", "'cpu'", ")", "\n", ")", ",", "\n", ")", "\n", "# Copies over the settings from the first checkpoint", "\n", "if", "new_state", "is", "None", ":", "\n", "            ", "new_state", "=", "state", "\n", "\n", "", "model_params", "=", "state", "[", "'model'", "]", "\n", "\n", "model_params_keys", "=", "list", "(", "model_params", ".", "keys", "(", ")", ")", "\n", "if", "params_keys", "is", "None", ":", "\n", "            ", "params_keys", "=", "model_params_keys", "\n", "", "elif", "params_keys", "!=", "model_params_keys", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "'For checkpoint {}, expected list of params: {}, '", "\n", "'but found: {}'", ".", "format", "(", "f", ",", "params_keys", ",", "model_params_keys", ")", "\n", ")", "\n", "\n", "", "for", "k", "in", "params_keys", ":", "\n", "            ", "if", "k", "not", "in", "params_dict", ":", "\n", "                ", "params_dict", "[", "k", "]", "=", "[", "]", "\n", "", "p", "=", "model_params", "[", "k", "]", "\n", "if", "isinstance", "(", "p", ",", "torch", ".", "HalfTensor", ")", ":", "\n", "                ", "p", "=", "p", ".", "float", "(", ")", "\n", "", "params_dict", "[", "k", "]", ".", "append", "(", "p", ")", "\n", "\n", "", "", "averaged_params", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "# v should be a list of torch Tensor.", "\n", "for", "k", ",", "v", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "        ", "summed_v", "=", "None", "\n", "for", "x", "in", "v", ":", "\n", "            ", "summed_v", "=", "summed_v", "+", "x", "if", "summed_v", "is", "not", "None", "else", "x", "\n", "", "averaged_params", "[", "k", "]", "=", "summed_v", "/", "len", "(", "v", ")", "\n", "", "new_state", "[", "'model'", "]", "=", "averaged_params", "\n", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.last_n_checkpoints": [[65, 82], ["os.listdir", "len", "re.compile", "re.compile", "re.compile.fullmatch", "len", "Exception", "os.path.join", "entries.append", "len", "sorted", "int", "pt_regexp.fullmatch.group", "pt_regexp.fullmatch.group"], "function", ["None"], ["", "def", "last_n_checkpoints", "(", "paths", ",", "n", ",", "update_based", ")", ":", "\n", "    ", "assert", "len", "(", "paths", ")", "==", "1", "\n", "path", "=", "paths", "[", "0", "]", "\n", "if", "update_based", ":", "\n", "        ", "pt_regexp", "=", "re", ".", "compile", "(", "r'checkpoint_\\d+_(\\d+)\\.pt'", ")", "\n", "", "else", ":", "\n", "        ", "pt_regexp", "=", "re", ".", "compile", "(", "r'checkpoint(\\d+)\\.pt'", ")", "\n", "", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "\n", "entries", "=", "[", "]", "\n", "for", "f", "in", "files", ":", "\n", "        ", "m", "=", "pt_regexp", ".", "fullmatch", "(", "f", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "entries", ".", "append", "(", "(", "int", "(", "m", ".", "group", "(", "1", ")", ")", ",", "m", ".", "group", "(", "0", ")", ")", ")", "\n", "", "", "if", "len", "(", "entries", ")", "<", "n", ":", "\n", "        ", "raise", "Exception", "(", "'Found {} checkpoint files but need at least {}'", ",", "len", "(", "entries", ")", ",", "n", ")", "\n", "", "return", "[", "os", ".", "path", ".", "join", "(", "path", ",", "x", "[", "1", "]", ")", "for", "x", "in", "sorted", "(", "entries", ",", "reverse", "=", "True", ")", "[", ":", "n", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.main": [[84, 134], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.parse_args", "print", "average_checkpoints.average_checkpoints", "torch.save", "print", "average_checkpoints.last_n_checkpoints", "print"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.average_checkpoints", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.save", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.last_n_checkpoints", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Tool to average the params of input checkpoints to '", "\n", "'produce a new checkpoint'", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--inputs'", ",", "\n", "required", "=", "True", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'Input checkpoint file paths.'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output'", ",", "\n", "required", "=", "True", ",", "\n", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'Write the new checkpoint containing the averaged weights to this '", "\n", "'path.'", ",", "\n", ")", "\n", "num_group", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "num_group", ".", "add_argument", "(", "\n", "'--num-epoch-checkpoints'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'if set, will try to find checkpoints with names checkpoint_xx.pt in the path specified by input, '", "\n", "'and average last this many of them.'", ",", "\n", ")", "\n", "num_group", ".", "add_argument", "(", "\n", "'--num-update-checkpoints'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'if set, will try to find checkpoints with names checkpoint_ee_xx.pt in the path specified by input, '", "\n", "'and average last this many of them.'", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "num", "=", "None", "\n", "is_update_based", "=", "False", "\n", "if", "args", ".", "num_update_checkpoints", "is", "not", "None", ":", "\n", "        ", "num", "=", "args", ".", "num_update_checkpoints", "\n", "is_update_based", "=", "True", "\n", "", "elif", "args", ".", "num_epoch_checkpoints", "is", "not", "None", ":", "\n", "        ", "num", "=", "args", ".", "num_epoch_checkpoints", "\n", "\n", "", "if", "num", "is", "not", "None", ":", "\n", "        ", "args", ".", "inputs", "=", "last_n_checkpoints", "(", "args", ".", "inputs", ",", "num", ",", "is_update_based", ")", "\n", "print", "(", "'averaging checkpoints: '", ",", "args", ".", "inputs", ")", "\n", "\n", "", "new_state", "=", "average_checkpoints", "(", "args", ".", "inputs", ")", "\n", "torch", ".", "save", "(", "new_state", ",", "args", ".", "output", ")", "\n", "print", "(", "'Finished writing averaged checkpoint to {}.'", ".", "format", "(", "args", ".", "output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_separable_attention.TestSeparableAttention.test_dec_self_attn": [[9, 107], ["print", "torch.manual_seed", "fairseq.modules.separable_attention.SeparableAttention", "torch.randn", "torch.Tensor().byte", "torch.Tensor", "fairseq.modules.separable_attention.SeparableAttention.", "res.masked_fill().type_as.masked_fill().type_as.masked_fill().type_as", "fairseq.modules.separable_attention.SeparableAttention.", "res2.squeeze.squeeze.masked_fill().type_as", "res2.squeeze.squeeze.squeeze", "range", "res3.squeeze.squeeze.masked_fill().type_as", "res3.squeeze.squeeze.squeeze", "part.transpose.transpose.transpose", "fairseq.modules.separable_attention.SeparableAttention.in_proj_q", "fairseq.modules.separable_attention.SeparableAttention.in_proj_kv", "torch.bmm", "torch.nn.functional.softmax().type_as", "torch.bmm", "fairseq.modules.separable_attention.SeparableAttention.out_proj", "ans.masked_fill().type_as.masked_fill().type_as.transpose", "ans.masked_fill().type_as.masked_fill().type_as.masked_fill().type_as", "enumerate", "test_separable_attention.TestSeparableAttention.assertTrue", "print", "enumerate", "test_separable_attention.TestSeparableAttention.assertTrue", "print", "enumerate", "test_separable_attention.TestSeparableAttention.assertTrue", "print", "query[].clone", "fairseq.modules.separable_attention.SeparableAttention.", "k.transpose", "zip", "test_separable_attention.TestSeparableAttention.assertEqual", "torch.all", "zip", "test_separable_attention.TestSeparableAttention.assertEqual", "torch.all", "zip", "test_separable_attention.TestSeparableAttention.assertEqual", "torch.all", "torch.Tensor", "res.masked_fill().type_as.masked_fill().type_as.masked_fill", "res2.squeeze.squeeze.masked_fill", "res3.squeeze.squeeze.masked_fill", "torch.nn.functional.softmax", "ans.masked_fill().type_as.masked_fill().type_as.masked_fill", "res.masked_fill().type_as.masked_fill().type_as.size", "torch.randn.size", "torch.le", "res2.squeeze.squeeze.size", "query[].size", "torch.le", "res3.squeeze.squeeze.size", "query[].size", "torch.le", "float", "float", "float", "torch.Tensor().byte.transpose().unsqueeze().unsqueeze", "key_padding_mask[].transpose().unsqueeze().unsqueeze", "key_padding_mask[].transpose().unsqueeze().unsqueeze", "key_padding_mask[].unsqueeze().unsqueeze", "torch.abs", "torch.abs", "torch.abs", "torch.Tensor().byte.transpose().unsqueeze", "key_padding_mask[].transpose().unsqueeze", "key_padding_mask[].transpose().unsqueeze", "key_padding_mask[].unsqueeze", "torch.Tensor().byte.transpose", "key_padding_mask[].transpose", "key_padding_mask[].transpose"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_q", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_kv", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["    ", "def", "test_dec_self_attn", "(", "self", ")", ":", "\n", "        ", "print", "(", "f\"{self.test_dec_self_attn.__name__} is testing......\"", ")", "\n", "# fix random seed since attention contains randomly initialized parameters", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "head", "=", "1", "\n", "time", "=", "1", "\n", "batch", "=", "1", "\n", "\n", "attn", "=", "SeparableAttention", "(", "8", ",", "head", ")", "\n", "# Time x Source x Batch x Channel", "\n", "# 3 x 5 x 2 x 8", "\n", "query", "=", "torch", ".", "randn", "(", "3", ",", "5", ",", "2", ",", "8", ")", "\n", "# Batch x Source", "\n", "# 2 x 5", "\n", "key_padding_mask", "=", "torch", ".", "Tensor", "(", "\n", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", "\n", ")", ".", "byte", "(", ")", "\n", "# (output) Time x (input) Time", "\n", "# 3 x 3", "\n", "attn_mask", "=", "torch", ".", "Tensor", "(", "\n", "[", "[", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "float", "(", "'-inf'", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", "\n", ")", "\n", "\n", "# in parallel training", "\n", "res", ",", "_", "=", "attn", "(", "query", ",", "query", ",", "query", ",", "\n", "key_padding_mask", "=", "None", ",", "attn_mask", "=", "attn_mask", ")", "\n", "res", "=", "res", ".", "masked_fill", "(", "\n", "key_padding_mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "0", "\n", ")", ".", "type_as", "(", "res", ")", "\n", "# in one step decoding (without cache)", "\n", "res2", ",", "_", "=", "attn", "(", "query", "[", "time", ":", "time", "+", "1", ",", ":", ",", "batch", ":", "batch", "+", "1", ",", ":", "]", ".", "clone", "(", ")", ",", "\n", "query", "[", ":", "time", "+", "1", ",", ":", ",", "batch", ":", "batch", "+", "1", ",", ":", "]", ",", "\n", "query", "[", ":", "time", "+", "1", ",", ":", ",", "batch", ":", "batch", "+", "1", ",", ":", "]", ",", "\n", "key_padding_mask", "=", "None", ",", "attn_mask", "=", "None", ")", "\n", "res2", "=", "res2", ".", "masked_fill", "(", "\n", "key_padding_mask", "[", "batch", ":", "batch", "+", "1", ",", ":", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "0", "\n", ")", ".", "type_as", "(", "res2", ")", "\n", "res2", "=", "res2", ".", "squeeze", "(", "2", ")", "\n", "# in one step decoding (with cache)", "\n", "incremental_state", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "time", "+", "1", ")", ":", "\n", "            ", "res3", ",", "_", "=", "attn", "(", "query", "[", "i", ":", "i", "+", "1", ",", ":", ",", "batch", ":", "batch", "+", "1", ",", ":", "]", ",", "\n", "query", "[", "i", ":", "i", "+", "1", ",", ":", ",", "batch", ":", "batch", "+", "1", ",", ":", "]", ",", "\n", "query", "[", "i", ":", "i", "+", "1", ",", ":", ",", "batch", ":", "batch", "+", "1", ",", ":", "]", ",", "\n", "key_padding_mask", "=", "None", ",", "attn_mask", "=", "None", ",", "\n", "incremental_state", "=", "incremental_state", ")", "\n", "", "res3", "=", "res3", ".", "masked_fill", "(", "\n", "key_padding_mask", "[", "batch", ":", "batch", "+", "1", ",", ":", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "0", "\n", ")", ".", "type_as", "(", "res3", ")", "\n", "res3", "=", "res3", ".", "squeeze", "(", "2", ")", "\n", "\n", "# correct answer, verified in 2D cases (num_heads=1)", "\n", "part", "=", "query", "[", ":", "time", "+", "1", ",", ":", ",", "batch", ",", ":", "]", "\n", "# Source x Time x Channel, 5 x 3 x 8", "\n", "part", "=", "part", ".", "transpose", "(", "0", ",", "1", ")", "\n", "# 5 x 1 x 8", "\n", "q", "=", "attn", ".", "in_proj_q", "(", "part", "[", ":", ",", "time", ":", "time", "+", "1", ",", ":", "]", ")", "\n", "k", ",", "v", "=", "attn", ".", "in_proj_kv", "(", "part", ")", "\n", "q", "*=", "attn", ".", "scaling", "\n", "weight", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "weight", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "-", "1", ")", ".", "type_as", "(", "weight", ")", "\n", "# 5 x 1 x 8", "\n", "ans", "=", "torch", ".", "bmm", "(", "weight", ",", "v", ")", "\n", "ans", "=", "attn", ".", "out_proj", "(", "ans", ")", "\n", "ans", "=", "ans", ".", "transpose", "(", "0", ",", "1", ")", "\n", "ans", "=", "ans", ".", "masked_fill", "(", "\n", "key_padding_mask", "[", "batch", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "0", "\n", ")", ".", "type_as", "(", "ans", ")", "\n", "\n", "# check input output dims", "\n", "for", "i", ",", "(", "in_dim", ",", "out_dim", ")", "in", "enumerate", "(", "zip", "(", "res", ".", "size", "(", ")", ",", "query", ".", "size", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "in_dim", ",", "out_dim", ",", "\n", "msg", "=", "f\"{i}th dim of result ({in_dim}) and q ({out_dim}) is not compatible\"", ")", "\n", "# check output data", "\n", "", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "torch", ".", "le", "(", "torch", ".", "abs", "(", "res", "[", "time", ":", "time", "+", "1", ",", ":", ",", "batch", ",", ":", "]", "-", "ans", ")", ",", "1e-4", ")", ")", ",", "\n", "msg", "=", "f\"result and q are not equal in time={time}, batch={batch} when num_heads={head}\"", ")", "\n", "print", "(", "\"| parallel training passed\"", ")", "\n", "\n", "for", "i", ",", "(", "in_dim", ",", "out_dim", ")", "in", "enumerate", "(", "zip", "(", "res2", ".", "size", "(", ")", ",", "query", "[", "time", ":", "time", "+", "1", ",", ":", ",", "batch", ",", ":", "]", ".", "size", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "in_dim", ",", "out_dim", ",", "\n", "msg", "=", "f\"{i}th dim of result ({in_dim}) and q ({out_dim}) is not compatible\"", ")", "\n", "", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "torch", ".", "le", "(", "torch", ".", "abs", "(", "res2", "-", "ans", ")", ",", "1e-4", ")", ")", ",", "\n", "msg", "=", "f\"result and q are not equal in time={time}, batch={batch} when num_heads={head}\"", ")", "\n", "print", "(", "\"| one step decoding (without cache) passed\"", ")", "\n", "\n", "for", "i", ",", "(", "in_dim", ",", "out_dim", ")", "in", "enumerate", "(", "zip", "(", "res3", ".", "size", "(", ")", ",", "query", "[", "time", ":", "time", "+", "1", ",", ":", ",", "batch", ",", ":", "]", ".", "size", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "in_dim", ",", "out_dim", ",", "\n", "msg", "=", "f\"{i}th dim of result ({in_dim}) and q ({out_dim}) is not compatible\"", ")", "\n", "", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "torch", ".", "le", "(", "torch", ".", "abs", "(", "res3", "-", "ans", ")", ",", "1e-4", ")", ")", ",", "\n", "msg", "=", "f\"result and q are not equal in time={time}, batch={batch} when num_heads={head}\"", ")", "\n", "print", "(", "\"| one step decoding (with cache) passed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_separable_attention.TestSeparableAttention.test_enc_self_attn": [[108, 177], ["print", "torch.manual_seed", "fairseq.modules.separable_attention.SeparableAttention", "torch.randn", "torch.Tensor().byte", "torch.Tensor", "fairseq.modules.separable_attention.SeparableAttention.", "fairseq.modules.separable_attention.SeparableAttention.", "res2.squeeze.squeeze.squeeze", "fairseq.modules.separable_attention.SeparableAttention.in_proj_q", "fairseq.modules.separable_attention.SeparableAttention.in_proj_kv", "torch.bmm", "torch.nn.functional.softmax().type_as.float().masked_fill().type_as", "torch.nn.functional.softmax().type_as", "torch.bmm", "fairseq.modules.separable_attention.SeparableAttention.out_proj", "enumerate", "test_separable_attention.TestSeparableAttention.assertTrue", "print", "enumerate", "test_separable_attention.TestSeparableAttention.assertTrue", "print", "k.transpose", "zip", "test_separable_attention.TestSeparableAttention.assertEqual", "torch.all", "zip", "test_separable_attention.TestSeparableAttention.assertEqual", "torch.all", "torch.Tensor", "torch.nn.functional.softmax().type_as.float().masked_fill", "torch.nn.functional.softmax", "res.size", "torch.randn.size", "torch.le", "res2.squeeze.squeeze.size", "query[].size", "torch.le", "float", "float", "float", "key_padding_mask[].unsqueeze().unsqueeze", "float", "torch.abs", "torch.abs", "torch.nn.functional.softmax().type_as.float", "key_padding_mask[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_q", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_kv", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "test_enc_self_attn", "(", "self", ")", ":", "\n", "        ", "print", "(", "f\"{self.test_enc_self_attn.__name__} is testing......\"", ")", "\n", "# fix random seed since attention contains randomly initialized parameters", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "head", "=", "1", "\n", "time", "=", "1", "\n", "batch", "=", "1", "\n", "\n", "attn", "=", "SeparableAttention", "(", "8", ",", "head", ",", "tgt_attn", "=", "False", ")", "\n", "# Time x Source x Batch x Channel", "\n", "# 3 x 5 x 2 x 8", "\n", "query", "=", "torch", ".", "randn", "(", "3", ",", "5", ",", "2", ",", "8", ")", "\n", "# Batch x Source", "\n", "# 2 x 5", "\n", "key_padding_mask", "=", "torch", ".", "Tensor", "(", "\n", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", "\n", ")", ".", "byte", "(", ")", "\n", "# (output) Time x (input) Time", "\n", "# 3 x 3", "\n", "attn_mask", "=", "torch", ".", "Tensor", "(", "\n", "[", "[", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "float", "(", "'-inf'", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", "\n", ")", "\n", "\n", "# in parallel training", "\n", "res", ",", "_", "=", "attn", "(", "query", ",", "query", ",", "query", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "attn_mask", "=", "None", ")", "\n", "# in one step training / decoding (without cache)", "\n", "res2", ",", "_", "=", "attn", "(", "query", "[", "time", ":", "time", "+", "1", ",", ":", ",", "batch", ":", "batch", "+", "1", ",", ":", "]", ",", "\n", "query", "[", "time", ":", "time", "+", "1", ",", ":", ",", "batch", ":", "batch", "+", "1", ",", ":", "]", ",", "\n", "query", "[", "time", ":", "time", "+", "1", ",", ":", ",", "batch", ":", "batch", "+", "1", ",", ":", "]", ",", "\n", "key_padding_mask", "=", "key_padding_mask", "[", "batch", ":", "batch", "+", "1", ",", ":", "]", ",", "attn_mask", "=", "None", ")", "\n", "res2", "=", "res2", ".", "squeeze", "(", "2", ")", "\n", "\n", "# correct answer, verified in 2D cases (num_heads=1)", "\n", "# Time x Source x Channel, 3 x 5 x 8", "\n", "part", "=", "query", "[", "time", ":", "time", "+", "1", ",", ":", ",", "batch", ",", ":", "]", "\n", "# 3 x 5 x 8", "\n", "q", "=", "attn", ".", "in_proj_q", "(", "part", ")", "\n", "k", ",", "v", "=", "attn", ".", "in_proj_kv", "(", "part", ")", "\n", "q", "*=", "attn", ".", "scaling", "\n", "# 3 x 5 x 5", "\n", "weight", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "weight", "=", "weight", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "key_padding_mask", "[", "batch", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "float", "(", "'-inf'", ")", ",", "\n", ")", ".", "type_as", "(", "weight", ")", "\n", "weight", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "-", "1", ")", ".", "type_as", "(", "weight", ")", "\n", "# 3 x 5 x 8", "\n", "ans", "=", "torch", ".", "bmm", "(", "weight", ",", "v", ")", "\n", "ans", "=", "attn", ".", "out_proj", "(", "ans", ")", "\n", "\n", "# check input output dims", "\n", "for", "i", ",", "(", "in_dim", ",", "out_dim", ")", "in", "enumerate", "(", "zip", "(", "res", ".", "size", "(", ")", ",", "query", ".", "size", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "in_dim", ",", "out_dim", ",", "\n", "msg", "=", "f\"{i}th dim of result ({in_dim}) and q ({out_dim}) is not compatible\"", ")", "\n", "# check output data", "\n", "", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "torch", ".", "le", "(", "torch", ".", "abs", "(", "res", "[", "time", ":", "time", "+", "1", ",", ":", ",", "batch", ",", ":", "]", "-", "ans", ")", ",", "1e-4", ")", ")", ",", "\n", "msg", "=", "f\"result and q are not equal in time={time}, batch={batch} when num_heads={head}\"", ")", "\n", "print", "(", "\"| parallel training passed\"", ")", "\n", "\n", "for", "i", ",", "(", "in_dim", ",", "out_dim", ")", "in", "enumerate", "(", "zip", "(", "res2", ".", "size", "(", ")", ",", "query", "[", "time", ":", "time", "+", "1", ",", ":", ",", "batch", ",", ":", "]", ".", "size", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "in_dim", ",", "out_dim", ",", "\n", "msg", "=", "f\"{i}th dim of result ({in_dim}) and q ({out_dim}) is not compatible\"", ")", "\n", "", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "torch", ".", "le", "(", "torch", ".", "abs", "(", "res2", "-", "ans", ")", ",", "1e-4", ")", ")", ",", "\n", "msg", "=", "f\"result and q are not equal in time={time}, batch={batch} when num_heads={head}\"", ")", "\n", "print", "(", "\"| one step training / decoding passed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_reproducibility.TestReproducibility._test_reproducibility": [[24, 72], ["tempfile.TemporaryDirectory", "io.StringIO", "stdout.getvalue.getvalue.getvalue", "map", "os.rename", "io.StringIO", "stdout.getvalue.getvalue.getvalue", "map", "contextlib.redirect_stdout", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "contextlib.redirect_stdout", "test_binaries.train_translation_model", "os.path.join", "os.path.join", "contextlib.redirect_stdout", "test_binaries.train_translation_model", "round", "test_reproducibility.TestReproducibility.assertEqual", "test_reproducibility.TestReproducibility.assertEqual", "io.StringIO", "stdout.getvalue.getvalue.split", "stdout.getvalue.getvalue.split", "float", "test_reproducibility.TestReproducibility._test_reproducibility.cast"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model"], ["    ", "def", "_test_reproducibility", "(", "self", ",", "name", ",", "extra_flags", "=", "None", ")", ":", "\n", "        ", "if", "extra_flags", "is", "None", ":", "\n", "            ", "extra_flags", "=", "[", "]", "\n", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", "name", ")", "as", "data_dir", ":", "\n", "            ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "                ", "test_binaries", ".", "create_dummy_data", "(", "data_dir", ")", "\n", "test_binaries", ".", "preprocess_translation_data", "(", "data_dir", ")", "\n", "\n", "# train epochs 1 and 2 together", "\n", "", "stdout", "=", "StringIO", "(", ")", "\n", "with", "contextlib", ".", "redirect_stdout", "(", "stdout", ")", ":", "\n", "                ", "test_binaries", ".", "train_translation_model", "(", "\n", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "\n", "'--dropout'", ",", "'0.0'", ",", "\n", "'--log-format'", ",", "'json'", ",", "\n", "'--log-interval'", ",", "'1'", ",", "\n", "'--max-epoch'", ",", "'3'", ",", "\n", "]", "+", "extra_flags", ",", "\n", ")", "\n", "", "stdout", "=", "stdout", ".", "getvalue", "(", ")", "\n", "train_log", ",", "valid_log", "=", "map", "(", "json", ".", "loads", ",", "stdout", ".", "split", "(", "'\\n'", ")", "[", "-", "4", ":", "-", "2", "]", ")", "\n", "\n", "# train epoch 2, resuming from previous checkpoint 1", "\n", "os", ".", "rename", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint1.pt'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint_last.pt'", ")", ",", "\n", ")", "\n", "stdout", "=", "StringIO", "(", ")", "\n", "with", "contextlib", ".", "redirect_stdout", "(", "stdout", ")", ":", "\n", "                ", "test_binaries", ".", "train_translation_model", "(", "\n", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "\n", "'--dropout'", ",", "'0.0'", ",", "\n", "'--log-format'", ",", "'json'", ",", "\n", "'--log-interval'", ",", "'1'", ",", "\n", "'--max-epoch'", ",", "'3'", ",", "\n", "]", "+", "extra_flags", ",", "\n", ")", "\n", "", "stdout", "=", "stdout", ".", "getvalue", "(", ")", "\n", "train_res_log", ",", "valid_res_log", "=", "map", "(", "json", ".", "loads", ",", "stdout", ".", "split", "(", "'\\n'", ")", "[", "-", "4", ":", "-", "2", "]", ")", "\n", "\n", "def", "cast", "(", "s", ")", ":", "\n", "                ", "return", "round", "(", "float", "(", "s", ")", ",", "3", ")", "\n", "\n", "", "for", "k", "in", "[", "'loss'", ",", "'ppl'", ",", "'num_updates'", ",", "'gnorm'", "]", ":", "\n", "                ", "self", ".", "assertEqual", "(", "cast", "(", "train_log", "[", "k", "]", ")", ",", "cast", "(", "train_res_log", "[", "k", "]", ")", ")", "\n", "", "for", "k", "in", "[", "'valid_loss'", ",", "'valid_ppl'", ",", "'num_updates'", ",", "'best'", "]", ":", "\n", "                ", "self", ".", "assertEqual", "(", "cast", "(", "valid_log", "[", "k", "]", ")", ",", "cast", "(", "valid_res_log", "[", "k", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_reproducibility.TestReproducibility.test_reproducibility": [[73, 75], ["test_reproducibility.TestReproducibility._test_reproducibility"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_reproducibility.TestReproducibility._test_reproducibility"], ["", "", "", "def", "test_reproducibility", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_reproducibility", "(", "'test_reproducibility'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_reproducibility.TestReproducibility.test_reproducibility_fp16": [[76, 80], ["test_reproducibility.TestReproducibility._test_reproducibility"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_reproducibility.TestReproducibility._test_reproducibility"], ["", "def", "test_reproducibility_fp16", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_reproducibility", "(", "'test_reproducibility_fp16'", ",", "[", "\n", "'--fp16'", ",", "\n", "'--fp16-init-scale'", ",", "'4096'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_character_token_embedder.TestCharacterTokenEmbedder.test_character_token_embedder": [[16, 41], ["fairseq.data.Dictionary", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.modules.CharacterTokenEmbedder", "max", "torch.LongTensor().fill_", "range", "fairseq.modules.CharacterTokenEmbedder.", "test_character_token_embedder.TestCharacterTokenEmbedder.assertAlmostEqual", "test_character_token_embedder.TestCharacterTokenEmbedder.assertAlmostEqual", "test_character_token_embedder.TestCharacterTokenEmbedder.assertAlmostEqual", "test_character_token_embedder.TestCharacterTokenEmbedder.assertAlmostEqual", "fairseq.modules.CharacterTokenEmbedder.sum().backward", "fairseq.data.Dictionary.pad", "len", "fairseq.data.Dictionary.eos", "range", "fairseq.data.Dictionary.eos", "fairseq.modules.CharacterTokenEmbedder.size", "len", "torch.LongTensor", "len", "fairseq.data.Dictionary.index", "len", "fairseq.modules.CharacterTokenEmbedder.sum", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.scalar_bias.ScalarBias.backward", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.index"], ["    ", "def", "test_character_token_embedder", "(", "self", ")", ":", "\n", "        ", "vocab", "=", "Dictionary", "(", ")", "\n", "vocab", ".", "add_symbol", "(", "'hello'", ")", "\n", "vocab", ".", "add_symbol", "(", "'there'", ")", "\n", "\n", "embedder", "=", "CharacterTokenEmbedder", "(", "vocab", ",", "[", "(", "2", ",", "16", ")", ",", "(", "4", ",", "32", ")", ",", "(", "8", ",", "64", ")", ",", "(", "16", ",", "2", ")", "]", ",", "64", ",", "5", ",", "2", ")", "\n", "\n", "test_sents", "=", "[", "[", "'hello'", ",", "'unk'", ",", "'there'", "]", ",", "[", "'there'", "]", ",", "[", "'hello'", ",", "'there'", "]", "]", "\n", "max_len", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "test_sents", ")", "\n", "input", "=", "torch", ".", "LongTensor", "(", "len", "(", "test_sents", ")", ",", "max_len", "+", "2", ")", ".", "fill_", "(", "vocab", ".", "pad", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "test_sents", ")", ")", ":", "\n", "            ", "input", "[", "i", "]", "[", "0", "]", "=", "vocab", ".", "eos", "(", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "test_sents", "[", "i", "]", ")", ")", ":", "\n", "                ", "input", "[", "i", "]", "[", "j", "+", "1", "]", "=", "vocab", ".", "index", "(", "test_sents", "[", "i", "]", "[", "j", "]", ")", "\n", "", "input", "[", "i", "]", "[", "j", "+", "2", "]", "=", "vocab", ".", "eos", "(", ")", "\n", "", "embs", "=", "embedder", "(", "input", ")", "\n", "\n", "assert", "embs", ".", "size", "(", ")", "==", "(", "len", "(", "test_sents", ")", ",", "max_len", "+", "2", ",", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "embs", "[", "0", "]", "[", "0", "]", ",", "embs", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "embs", "[", "0", "]", "[", "0", "]", ",", "embs", "[", "0", "]", "[", "-", "1", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "embs", "[", "0", "]", "[", "1", "]", ",", "embs", "[", "2", "]", "[", "1", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "embs", "[", "0", "]", "[", "3", "]", ",", "embs", "[", "1", "]", "[", "1", "]", ")", "\n", "\n", "embs", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "assert", "embedder", ".", "char_embeddings", ".", "weight", ".", "grad", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_character_token_embedder.TestCharacterTokenEmbedder.assertAlmostEqual": [[42, 45], ["test_character_token_embedder.TestCharacterTokenEmbedder.assertEqual", "test_character_token_embedder.TestCharacterTokenEmbedder.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_label_smoothing.TestLabelSmoothing.setUp": [[22, 51], ["tests.dummy_dictionary", "len", "test_label_smoothing.TestLabelSmoothing.assertEqual", "test_label_smoothing.TestLabelSmoothing.assertEqual", "test_label_smoothing.TestLabelSmoothing.assertEqual", "test_label_smoothing.TestLabelSmoothing.assertEqual", "next", "argparse.Namespace", "torch.FloatTensor().unsqueeze().expand", "tests.TestTranslationTask.setup_task", "test_label_smoothing.TestLabelSmoothing.task.build_model", "test_label_smoothing.TestLabelSmoothing.d.pad", "test_label_smoothing.TestLabelSmoothing.d.eos", "test_label_smoothing.TestLabelSmoothing.d.unk", "tests.dummy_dataloader", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor().unsqueeze", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.dummy_dictionary", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.__init__.setup_task", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.build_model", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.dummy_dataloader"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# build dictionary", "\n", "        ", "self", ".", "d", "=", "test_utils", ".", "dummy_dictionary", "(", "3", ")", "\n", "vocab", "=", "len", "(", "self", ".", "d", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ",", "4", "+", "3", ")", "# 4 special + 3 tokens", "\n", "self", ".", "assertEqual", "(", "self", ".", "d", ".", "pad", "(", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "d", ".", "eos", "(", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "d", ".", "unk", "(", ")", ",", "3", ")", "\n", "pad", ",", "eos", ",", "unk", ",", "w1", ",", "w2", ",", "w3", "=", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "# noqa: F841", "\n", "\n", "# build dataset", "\n", "self", ".", "data", "=", "[", "\n", "# the first batch item has padding", "\n", "{", "'source'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "eos", "]", ")", ",", "'target'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "eos", "]", ")", "}", ",", "\n", "{", "'source'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "eos", "]", ")", ",", "'target'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "w1", ",", "eos", "]", ")", "}", ",", "\n", "]", "\n", "self", ".", "sample", "=", "next", "(", "test_utils", ".", "dummy_dataloader", "(", "self", ".", "data", ")", ")", "\n", "\n", "# build model", "\n", "self", ".", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "self", ".", "args", ".", "sentence_avg", "=", "False", "\n", "self", ".", "args", ".", "probs", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "#      pad   eos  unk   w1   w2   w3", "\n", "[", "0.05", ",", "0.05", ",", "0.1", ",", "0.05", ",", "0.3", ",", "0.4", ",", "0.05", "]", ",", "\n", "[", "0.05", ",", "0.10", ",", "0.2", ",", "0.05", ",", "0.2", ",", "0.3", ",", "0.10", "]", ",", "\n", "[", "0.05", ",", "0.15", ",", "0.3", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.15", "]", ",", "\n", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "2", ",", "3", ",", "7", ")", "# add batch dimension", "\n", "self", ".", "task", "=", "test_utils", ".", "TestTranslationTask", ".", "setup_task", "(", "self", ".", "args", ",", "self", ".", "d", ",", "self", ".", "d", ")", "\n", "self", ".", "model", "=", "self", ".", "task", ".", "build_model", "(", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_label_smoothing.TestLabelSmoothing.test_nll_loss": [[52, 60], ["fairseq.criterions.cross_entropy.CrossEntropyCriterion", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion", "fairseq.criterions.cross_entropy.CrossEntropyCriterion.", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.", "test_label_smoothing.TestLabelSmoothing.assertLess", "test_label_smoothing.TestLabelSmoothing.assertLess", "abs", "abs"], "methods", ["None"], ["", "def", "test_nll_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", ".", "label_smoothing", "=", "0.1", "\n", "nll_crit", "=", "CrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "smooth_crit", "=", "LabelSmoothedCrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "nll_loss", ",", "nll_sample_size", ",", "nll_logging_output", "=", "nll_crit", "(", "self", ".", "model", ",", "self", ".", "sample", ")", "\n", "smooth_loss", ",", "smooth_sample_size", ",", "smooth_logging_output", "=", "smooth_crit", "(", "self", ".", "model", ",", "self", ".", "sample", ")", "\n", "self", ".", "assertLess", "(", "abs", "(", "nll_loss", "-", "nll_logging_output", "[", "'loss'", "]", ")", ",", "1e-6", ")", "\n", "self", ".", "assertLess", "(", "abs", "(", "nll_loss", "-", "smooth_logging_output", "[", "'nll_loss'", "]", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_label_smoothing.TestLabelSmoothing.test_padding": [[61, 79], ["fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.", "test_label_smoothing.TestLabelSmoothing.test_padding.get_one_no_padding"], "methods", ["None"], ["", "def", "test_padding", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", ".", "label_smoothing", "=", "0.1", "\n", "crit", "=", "LabelSmoothedCrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "loss", ",", "_", ",", "logging_output", "=", "crit", "(", "self", ".", "model", ",", "self", ".", "sample", ")", "\n", "\n", "def", "get_one_no_padding", "(", "idx", ")", ":", "\n", "# create a new sample with just a single batch item so that there's", "\n", "# no padding", "\n", "            ", "sample1", "=", "next", "(", "test_utils", ".", "dummy_dataloader", "(", "[", "self", ".", "data", "[", "idx", "]", "]", ")", ")", "\n", "args1", "=", "copy", ".", "copy", "(", "self", ".", "args", ")", "\n", "args1", ".", "probs", "=", "args1", ".", "probs", "[", "idx", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "model1", "=", "self", ".", "task", ".", "build_model", "(", "args1", ")", "\n", "loss1", ",", "_", ",", "_", "=", "crit", "(", "model1", ",", "sample1", ")", "\n", "return", "loss1", "\n", "\n", "", "loss1", "=", "get_one_no_padding", "(", "0", ")", "\n", "loss2", "=", "get_one_no_padding", "(", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "loss", ",", "loss1", "+", "loss2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_label_smoothing.TestLabelSmoothing.test_reduction": [[80, 86], ["fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.", "test_label_smoothing.TestLabelSmoothing.assertAlmostEqual", "unreduced_loss.sum"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual"], ["", "def", "test_reduction", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", ".", "label_smoothing", "=", "0.1", "\n", "crit", "=", "LabelSmoothedCrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "loss", ",", "_", ",", "logging_output", "=", "crit", "(", "self", ".", "model", ",", "self", ".", "sample", ",", "reduce", "=", "True", ")", "\n", "unreduced_loss", ",", "_", ",", "_", "=", "crit", "(", "self", ".", "model", ",", "self", ".", "sample", ",", "reduce", "=", "False", ")", "\n", "self", ".", "assertAlmostEqual", "(", "loss", ",", "unreduced_loss", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_label_smoothing.TestLabelSmoothing.test_zero_eps": [[87, 94], ["fairseq.criterions.cross_entropy.CrossEntropyCriterion", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion", "fairseq.criterions.cross_entropy.CrossEntropyCriterion.", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.", "test_label_smoothing.TestLabelSmoothing.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual"], ["", "def", "test_zero_eps", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", ".", "label_smoothing", "=", "0.0", "\n", "nll_crit", "=", "CrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "smooth_crit", "=", "LabelSmoothedCrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "nll_loss", ",", "nll_sample_size", ",", "nll_logging_output", "=", "nll_crit", "(", "self", ".", "model", ",", "self", ".", "sample", ")", "\n", "smooth_loss", ",", "smooth_sample_size", ",", "smooth_logging_output", "=", "smooth_crit", "(", "self", ".", "model", ",", "self", ".", "sample", ")", "\n", "self", ".", "assertAlmostEqual", "(", "nll_loss", ",", "smooth_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_label_smoothing.TestLabelSmoothing.assertAlmostEqual": [[95, 98], ["test_label_smoothing.TestLabelSmoothing.assertEqual", "test_label_smoothing.TestLabelSmoothing.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_iterators.TestIterators.test_counting_iterator": [[15, 26], ["list", "fairseq.data.iterators.CountingIterator", "test_iterators.TestIterators.assertTrue", "test_iterators.TestIterators.assertEqual", "test_iterators.TestIterators.assertEqual", "fairseq.data.iterators.CountingIterator.skip", "test_iterators.TestIterators.assertEqual", "fairseq.data.iterators.CountingIterator.skip", "test_iterators.TestIterators.assertEqual", "test_iterators.TestIterators.assertFalse", "range", "fairseq.data.iterators.CountingIterator.has_next", "next", "next", "next", "next", "fairseq.data.iterators.CountingIterator.has_next"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.skip", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.skip", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.has_next", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.has_next"], ["    ", "def", "test_counting_iterator", "(", "self", ")", ":", "\n", "        ", "x", "=", "list", "(", "range", "(", "10", ")", ")", "\n", "itr", "=", "iterators", ".", "CountingIterator", "(", "x", ")", "\n", "self", ".", "assertTrue", "(", "itr", ".", "has_next", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", ",", "1", ")", "\n", "itr", ".", "skip", "(", "3", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", ",", "5", ")", "\n", "itr", ".", "skip", "(", "3", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", ",", "9", ")", "\n", "self", ".", "assertFalse", "(", "itr", ".", "has_next", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_dictionary.TestDictionary.test_finalize": [[19, 70], ["list", "list", "fairseq.data.Dictionary", "test_dictionary.TestDictionary.test_finalize.get_ids"], "methods", ["None"], ["    ", "def", "test_finalize", "(", "self", ")", ":", "\n", "        ", "txt", "=", "[", "\n", "'A B C D'", ",", "\n", "'B C D'", ",", "\n", "'C D'", ",", "\n", "'D'", ",", "\n", "]", "\n", "ref_ids1", "=", "list", "(", "map", "(", "torch", ".", "IntTensor", ",", "[", "\n", "[", "4", ",", "5", ",", "6", ",", "7", ",", "2", "]", ",", "\n", "[", "5", ",", "6", ",", "7", ",", "2", "]", ",", "\n", "[", "6", ",", "7", ",", "2", "]", ",", "\n", "[", "7", ",", "2", "]", ",", "\n", "]", ")", ")", "\n", "ref_ids2", "=", "list", "(", "map", "(", "torch", ".", "IntTensor", ",", "[", "\n", "[", "7", ",", "6", ",", "5", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "5", ",", "4", ",", "2", "]", ",", "\n", "[", "5", ",", "4", ",", "2", "]", ",", "\n", "[", "4", ",", "2", "]", ",", "\n", "]", ")", ")", "\n", "\n", "# build dictionary", "\n", "d", "=", "Dictionary", "(", ")", "\n", "for", "line", "in", "txt", ":", "\n", "            ", "Tokenizer", ".", "tokenize", "(", "line", ",", "d", ",", "add_if_not_exist", "=", "True", ")", "\n", "\n", "", "def", "get_ids", "(", "dictionary", ")", ":", "\n", "            ", "ids", "=", "[", "]", "\n", "for", "line", "in", "txt", ":", "\n", "                ", "ids", ".", "append", "(", "Tokenizer", ".", "tokenize", "(", "line", ",", "dictionary", ",", "add_if_not_exist", "=", "False", ")", ")", "\n", "", "return", "ids", "\n", "\n", "", "def", "assertMatch", "(", "ids", ",", "ref_ids", ")", ":", "\n", "            ", "for", "toks", ",", "ref_toks", "in", "zip", "(", "ids", ",", "ref_ids", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "toks", ".", "size", "(", ")", ",", "ref_toks", ".", "size", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "0", ",", "(", "toks", "!=", "ref_toks", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "", "ids", "=", "get_ids", "(", "d", ")", "\n", "assertMatch", "(", "ids", ",", "ref_ids1", ")", "\n", "\n", "# check finalized dictionary", "\n", "d", ".", "finalize", "(", ")", "\n", "finalized_ids", "=", "get_ids", "(", "d", ")", "\n", "assertMatch", "(", "finalized_ids", ",", "ref_ids2", ")", "\n", "\n", "# write to disk and reload", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "mode", "=", "'w'", ")", "as", "tmp_dict", ":", "\n", "            ", "d", ".", "save", "(", "tmp_dict", ".", "name", ")", "\n", "d", "=", "Dictionary", ".", "load", "(", "tmp_dict", ".", "name", ")", "\n", "reload_ids", "=", "get_ids", "(", "d", ")", "\n", "assertMatch", "(", "reload_ids", ",", "ref_ids2", ")", "\n", "assertMatch", "(", "finalized_ids", ",", "reload_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_convtbc.TestConvTBC.test_convtbc": [[16, 43], ["fairseq.modules.ConvTBC", "torch.Conv1d", "torch.Conv1d", "fairseq.modules.ConvTBC.weight.data.copy_", "fairseq.modules.ConvTBC.bias.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn.data.transpose().transpose", "torch.randn.data.transpose().transpose", "fairseq.modules.ConvTBC.", "torch.Conv1d.", "test_convtbc.TestConvTBC.assertAlmostEqual", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn.transpose().transpose().contiguous", "torch.randn.transpose().transpose().contiguous", "fairseq.modules.ConvTBC.backward", "nn.Conv1d.backward", "test_convtbc.TestConvTBC.assertAlmostEqual", "test_convtbc.TestConvTBC.assertAlmostEqual", "test_convtbc.TestConvTBC.assertAlmostEqual", "torch.Conv1d.weight.data.transpose", "fairseq.modules.ConvTBC.data.transpose().transpose", "fairseq.modules.ConvTBC.size", "fairseq.modules.ConvTBC.weight.grad.data.transpose", "torch.randn.grad.data.transpose().transpose", "torch.randn.grad.data.transpose().transpose", "torch.randn.data.transpose", "torch.randn.data.transpose", "torch.randn.transpose().transpose", "torch.randn.transpose().transpose", "fairseq.modules.ConvTBC.data.transpose", "torch.randn.grad.data.transpose", "torch.randn.grad.data.transpose", "torch.randn.transpose", "torch.randn.transpose"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.ConvTBC", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.scalar_bias.ScalarBias.backward", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.scalar_bias.ScalarBias.backward", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["    ", "def", "test_convtbc", "(", "self", ")", ":", "\n", "# ksz, in_channels, out_channels", "\n", "        ", "conv_tbc", "=", "ConvTBC", "(", "4", ",", "5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "# out_channels, in_channels, ksz", "\n", "conv1d", "=", "nn", ".", "Conv1d", "(", "4", ",", "5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "conv_tbc", ".", "weight", ".", "data", ".", "copy_", "(", "conv1d", ".", "weight", ".", "data", ".", "transpose", "(", "0", ",", "2", ")", ")", "\n", "conv_tbc", ".", "bias", ".", "data", ".", "copy_", "(", "conv1d", ".", "bias", ".", "data", ")", "\n", "\n", "input_tbc", "=", "torch", ".", "randn", "(", "7", ",", "2", ",", "4", ",", "requires_grad", "=", "True", ")", "\n", "input1d", "=", "input_tbc", ".", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "input1d", ".", "requires_grad", "=", "True", "\n", "\n", "output_tbc", "=", "conv_tbc", "(", "input_tbc", ")", "\n", "output1d", "=", "conv1d", "(", "input1d", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "output_tbc", ".", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ",", "output1d", ".", "data", ")", "\n", "\n", "grad_tbc", "=", "torch", ".", "randn", "(", "output_tbc", ".", "size", "(", ")", ")", "\n", "grad1d", "=", "grad_tbc", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "output_tbc", ".", "backward", "(", "grad_tbc", ")", "\n", "output1d", ".", "backward", "(", "grad1d", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "conv_tbc", ".", "weight", ".", "grad", ".", "data", ".", "transpose", "(", "0", ",", "2", ")", ",", "conv1d", ".", "weight", ".", "grad", ".", "data", ")", "\n", "self", ".", "assertAlmostEqual", "(", "conv_tbc", ".", "bias", ".", "grad", ".", "data", ",", "conv1d", ".", "bias", ".", "grad", ".", "data", ")", "\n", "self", ".", "assertAlmostEqual", "(", "input_tbc", ".", "grad", ".", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ",", "input1d", ".", "grad", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_convtbc.TestConvTBC.assertAlmostEqual": [[44, 47], ["test_convtbc.TestConvTBC.assertEqual", "test_convtbc.TestConvTBC.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_scorer.TestSequenceScorer.test_sequence_scorer": [[20, 92], ["tests.dummy_dictionary", "test_sequence_scorer.TestSequenceScorer.assertEqual", "test_sequence_scorer.TestSequenceScorer.assertEqual", "test_sequence_scorer.TestSequenceScorer.assertEqual", "tests.dummy_dictionary.eos", "tests.dummy_dataloader", "argparse.Namespace", "tests.TestTranslationTask.setup_task", "tests.TestTranslationTask.setup_task.build_model", "fairseq.sequence_scorer.SequenceScorer", "fairseq.sequence_scorer.SequenceScorer.score_batched_itr", "tests.dummy_dictionary.pad", "tests.dummy_dictionary.eos", "tests.dummy_dictionary.unk", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "test_sequence_scorer.TestSequenceScorer.assertHypoTokens", "test_sequence_scorer.TestSequenceScorer.assertHypoScore", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.dummy_dictionary", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.dummy_dataloader", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.__init__.setup_task", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.build_model", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_scorer.SequenceScorer.score_batched_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore"], ["    ", "def", "test_sequence_scorer", "(", "self", ")", ":", "\n", "# construct dummy dictionary", "\n", "        ", "d", "=", "test_utils", ".", "dummy_dictionary", "(", "vocab_size", "=", "2", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "pad", "(", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "eos", "(", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "unk", "(", ")", ",", "3", ")", "\n", "eos", "=", "d", ".", "eos", "(", ")", "\n", "w1", "=", "4", "\n", "w2", "=", "5", "\n", "\n", "# construct dataloader", "\n", "data", "=", "[", "\n", "{", "\n", "'source'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "w2", ",", "eos", "]", ")", ",", "\n", "'target'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ")", ",", "\n", "}", ",", "\n", "{", "\n", "'source'", ":", "torch", ".", "LongTensor", "(", "[", "w2", ",", "eos", "]", ")", ",", "\n", "'target'", ":", "torch", ".", "LongTensor", "(", "[", "w2", ",", "w1", ",", "eos", "]", ")", ",", "\n", "}", ",", "\n", "{", "\n", "'source'", ":", "torch", ".", "LongTensor", "(", "[", "w2", ",", "eos", "]", ")", ",", "\n", "'target'", ":", "torch", ".", "LongTensor", "(", "[", "w2", ",", "eos", "]", ")", ",", "\n", "}", ",", "\n", "]", "\n", "data_itr", "=", "test_utils", ".", "dummy_dataloader", "(", "data", ")", "\n", "\n", "# specify expected output probabilities", "\n", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "unk", "=", "0.", "\n", "args", ".", "beam_probs", "=", "[", "\n", "# step 0:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "[", "0.0", ",", "unk", ",", "0.6", ",", "0.4", "]", ",", "# sentence 1", "\n", "[", "0.0", ",", "unk", ",", "0.4", ",", "0.6", "]", ",", "# sentence 2", "\n", "[", "0.0", ",", "unk", ",", "0.7", ",", "0.3", "]", ",", "# sentence 3", "\n", "]", ")", ",", "\n", "# step 1:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "[", "0.0", ",", "unk", ",", "0.2", ",", "0.7", "]", ",", "# sentence 1", "\n", "[", "0.0", ",", "unk", ",", "0.8", ",", "0.2", "]", ",", "# sentence 2", "\n", "[", "0.7", ",", "unk", ",", "0.1", ",", "0.2", "]", ",", "# sentence 3", "\n", "]", ")", ",", "\n", "# step 2:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos       w1    w2", "\n", "[", "0.10", ",", "unk", ",", "0.50", ",", "0.4", "]", ",", "# sentence 1", "\n", "[", "0.15", ",", "unk", ",", "0.15", ",", "0.7", "]", ",", "# sentence 2", "\n", "[", "0.00", ",", "unk", ",", "0.00", ",", "0.0", "]", ",", "# sentence 3", "\n", "]", ")", ",", "\n", "# step 3:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1    w2", "\n", "[", "0.9", ",", "unk", ",", "0.05", ",", "0.05", "]", ",", "# sentence 1", "\n", "[", "0.0", ",", "unk", ",", "0.00", ",", "0.0", "]", ",", "# sentence 2", "\n", "[", "0.0", ",", "unk", ",", "0.00", ",", "0.0", "]", ",", "# sentence 3", "\n", "]", ")", ",", "\n", "]", "\n", "expected_scores", "=", "[", "\n", "[", "0.6", ",", "0.7", ",", "0.5", ",", "0.9", "]", ",", "# sentence 1", "\n", "[", "0.6", ",", "0.8", ",", "0.15", "]", ",", "# sentence 2", "\n", "[", "0.3", ",", "0.7", "]", ",", "# sentence 3", "\n", "]", "\n", "\n", "task", "=", "test_utils", ".", "TestTranslationTask", ".", "setup_task", "(", "args", ",", "d", ",", "d", ")", "\n", "model", "=", "task", ".", "build_model", "(", "args", ")", "\n", "scorer", "=", "SequenceScorer", "(", "[", "model", "]", ",", "task", ".", "target_dictionary", ")", "\n", "for", "id", ",", "_src", ",", "_ref", ",", "hypos", "in", "scorer", ".", "score_batched_itr", "(", "data_itr", ")", ":", "\n", "            ", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", ",", "data", "[", "id", "]", "[", "'target'", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", ",", "expected_scores", "[", "id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_scorer.TestSequenceScorer.assertHypoTokens": [[93, 95], ["test_sequence_scorer.TestSequenceScorer.assertTensorEqual", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertTensorEqual"], ["", "", "def", "assertHypoTokens", "(", "self", ",", "hypo", ",", "tokens", ")", ":", "\n", "        ", "self", ".", "assertTensorEqual", "(", "hypo", "[", "'tokens'", "]", ",", "torch", ".", "LongTensor", "(", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_scorer.TestSequenceScorer.assertHypoScore": [[96, 104], ["torch.FloatTensor().log", "test_sequence_scorer.TestSequenceScorer.assertAlmostEqual", "test_sequence_scorer.TestSequenceScorer.assertEqual", "torch.FloatTensor().log.sum", "test_sequence_scorer.TestSequenceScorer.assertLess", "torch.FloatTensor().log.numel", "hypo[].numel", "abs", "torch.FloatTensor", "torch.FloatTensor().log.numel"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual"], ["", "def", "assertHypoScore", "(", "self", ",", "hypo", ",", "pos_probs", ",", "normalized", "=", "True", ",", "lenpen", "=", "1.", ")", ":", "\n", "        ", "pos_scores", "=", "torch", ".", "FloatTensor", "(", "pos_probs", ")", ".", "log", "(", ")", "\n", "self", ".", "assertAlmostEqual", "(", "hypo", "[", "'positional_scores'", "]", ",", "pos_scores", ")", "\n", "self", ".", "assertEqual", "(", "pos_scores", ".", "numel", "(", ")", ",", "hypo", "[", "'tokens'", "]", ".", "numel", "(", ")", ")", "\n", "score", "=", "pos_scores", ".", "sum", "(", ")", "\n", "if", "normalized", ":", "\n", "            ", "score", "/=", "pos_scores", ".", "numel", "(", ")", "**", "lenpen", "\n", "", "self", ".", "assertLess", "(", "abs", "(", "score", "-", "hypo", "[", "'score'", "]", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_scorer.TestSequenceScorer.assertAlmostEqual": [[105, 108], ["test_sequence_scorer.TestSequenceScorer.assertEqual", "test_sequence_scorer.TestSequenceScorer.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_scorer.TestSequenceScorer.assertTensorEqual": [[109, 112], ["test_sequence_scorer.TestSequenceScorer.assertEqual", "test_sequence_scorer.TestSequenceScorer.assertEqual", "t1.size", "t2.size", "t1.ne().long().sum", "t1.ne().long", "t1.ne"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "assertTensorEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertEqual", "(", "t1", ".", "ne", "(", "t2", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_backtranslation_dataset.TestBacktranslationDataset.setUp": [[17, 37], ["tests.sequence_generator_setup", "argparse.Namespace", "tests.TestDataset"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.sequence_generator_setup"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "tgt_dict", ",", "self", ".", "w1", ",", "self", ".", "w2", ",", "self", ".", "src_tokens", ",", "self", ".", "src_lengths", ",", "self", ".", "model", "=", "(", "\n", "test_utils", ".", "sequence_generator_setup", "(", ")", "\n", ")", "\n", "backtranslation_args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "\n", "\"\"\"\n        Same as defaults from fairseq/options.py\n        \"\"\"", "\n", "backtranslation_args", ".", "backtranslation_unkpen", "=", "0", "\n", "backtranslation_args", ".", "backtranslation_sampling", "=", "False", "\n", "backtranslation_args", ".", "backtranslation_max_len_a", "=", "0", "\n", "backtranslation_args", ".", "backtranslation_max_len_b", "=", "200", "\n", "backtranslation_args", ".", "backtranslation_beam", "=", "2", "\n", "\n", "self", ".", "backtranslation_args", "=", "backtranslation_args", "\n", "\n", "dummy_src_samples", "=", "self", ".", "src_tokens", "\n", "\n", "self", ".", "tgt_dataset", "=", "test_utils", ".", "TestDataset", "(", "data", "=", "dummy_src_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_backtranslation_dataset.TestBacktranslationDataset.test_backtranslation_dataset": [[38, 63], ["fairseq.data.backtranslation_dataset.BacktranslationDataset", "torch.utils.data.DataLoader", "next", "torch.LongTensor", "torch.LongTensor", "test_backtranslation_dataset.TestBacktranslationDataset.assertTensorEqual", "test_backtranslation_dataset.TestBacktranslationDataset.assertTensorEqual", "iter", "test_backtranslation_dataset.TestBacktranslationDataset.tgt_dict.eos", "test_backtranslation_dataset.TestBacktranslationDataset.tgt_dict.pad"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertTensorEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertTensorEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad"], ["", "def", "test_backtranslation_dataset", "(", "self", ")", ":", "\n", "        ", "backtranslation_dataset", "=", "BacktranslationDataset", "(", "\n", "args", "=", "self", ".", "backtranslation_args", ",", "\n", "tgt_dataset", "=", "self", ".", "tgt_dataset", ",", "\n", "tgt_dict", "=", "self", ".", "tgt_dict", ",", "\n", "backtranslation_model", "=", "self", ".", "model", ",", "\n", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "backtranslation_dataset", ",", "\n", "batch_size", "=", "2", ",", "\n", "collate_fn", "=", "backtranslation_dataset", ".", "collater", ",", "\n", ")", "\n", "backtranslation_batch_result", "=", "next", "(", "iter", "(", "dataloader", ")", ")", "\n", "\n", "eos", ",", "pad", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "tgt_dict", ".", "pad", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "\n", "# Note that we sort by src_lengths and add left padding, so actually", "\n", "# ids will look like: [1, 0]", "\n", "expected_src", "=", "torch", ".", "LongTensor", "(", "[", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ",", "[", "pad", ",", "pad", ",", "w1", ",", "eos", "]", "]", ")", "\n", "expected_tgt", "=", "torch", ".", "LongTensor", "(", "[", "[", "w1", ",", "w2", ",", "eos", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", "]", ")", "\n", "generated_src", "=", "backtranslation_batch_result", "[", "\"net_input\"", "]", "[", "\"src_tokens\"", "]", "\n", "tgt_tokens", "=", "backtranslation_batch_result", "[", "\"target\"", "]", "\n", "\n", "self", ".", "assertTensorEqual", "(", "expected_src", ",", "generated_src", ")", "\n", "self", ".", "assertTensorEqual", "(", "expected_tgt", ",", "tgt_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_backtranslation_dataset.TestBacktranslationDataset.assertTensorEqual": [[64, 67], ["test_backtranslation_dataset.TestBacktranslationDataset.assertEqual", "test_backtranslation_dataset.TestBacktranslationDataset.assertEqual", "t1.size", "t2.size", "t1.ne().long().sum", "t1.ne().long", "t1.ne"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "assertTensorEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertEqual", "(", "t1", ".", "ne", "(", "t2", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_utils.TestUtils.test_convert_padding_direction": [[17, 44], ["torch.LongTensor", "torch.LongTensor", "test_utils.TestUtils.assertAlmostEqual", "test_utils.TestUtils.assertAlmostEqual", "fairseq.utils.convert_padding_direction", "fairseq.utils.convert_padding_direction"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.convert_padding_direction", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.convert_padding_direction"], ["    ", "def", "test_convert_padding_direction", "(", "self", ")", ":", "\n", "        ", "pad", "=", "1", "\n", "left_pad", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "[", "1", ",", "7", ",", "8", ",", "9", ",", "10", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "11", ",", "12", "]", ",", "\n", "]", ")", "\n", "right_pad", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "[", "7", ",", "8", ",", "9", ",", "10", ",", "1", "]", ",", "\n", "[", "11", ",", "12", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "]", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "right_pad", ",", "\n", "utils", ".", "convert_padding_direction", "(", "\n", "left_pad", ",", "\n", "pad", ",", "\n", "left_to_right", "=", "True", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "left_pad", ",", "\n", "utils", ".", "convert_padding_direction", "(", "\n", "right_pad", ",", "\n", "pad", ",", "\n", "right_to_left", "=", "True", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_utils.TestUtils.test_make_positions": [[47, 77], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "test_utils.TestUtils.assertAlmostEqual", "test_utils.TestUtils.assertAlmostEqual", "fairseq.utils.make_positions", "fairseq.utils.make_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.make_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.make_positions"], ["", "def", "test_make_positions", "(", "self", ")", ":", "\n", "        ", "pad", "=", "1", "\n", "left_pad_input", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "9", ",", "9", ",", "9", ",", "9", ",", "9", "]", ",", "\n", "[", "1", ",", "9", ",", "9", ",", "9", ",", "9", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "9", ",", "9", "]", ",", "\n", "]", ")", "\n", "left_pad_output", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "2", ",", "3", "]", ",", "\n", "]", ")", "\n", "right_pad_input", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "9", ",", "9", ",", "9", ",", "9", ",", "9", "]", ",", "\n", "[", "9", ",", "9", ",", "9", ",", "9", ",", "1", "]", ",", "\n", "[", "9", ",", "9", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "]", ")", "\n", "right_pad_output", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "[", "2", ",", "3", ",", "4", ",", "5", ",", "1", "]", ",", "\n", "[", "2", ",", "3", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "]", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "left_pad_output", ",", "\n", "utils", ".", "make_positions", "(", "left_pad_input", ",", "pad", ",", "left_pad", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "right_pad_output", ",", "\n", "utils", ".", "make_positions", "(", "right_pad_input", ",", "pad", ",", "left_pad", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_utils.TestUtils.assertAlmostEqual": [[79, 82], ["test_utils.TestUtils.assertEqual", "test_utils.TestUtils.assertLess", "t1.size", "t2.size", "fairseq.utils.item"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "utils", ".", "item", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.TestLoadCheckpoint.setUp": [[56, 66], ["unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.patch", "p.start", "test_train.TestLoadCheckpoint.patches.items"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.start"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "args_mock", "=", "MagicMock", "(", ")", "\n", "self", ".", "args_mock", ".", "optimizer_overrides", "=", "'{}'", "\n", "self", ".", "patches", "=", "{", "\n", "'os.makedirs'", ":", "MagicMock", "(", ")", ",", "\n", "'os.path.join'", ":", "MagicMock", "(", ")", ",", "\n", "'os.path.isfile'", ":", "MagicMock", "(", "return_value", "=", "True", ")", ",", "\n", "}", "\n", "self", ".", "applied_patches", "=", "[", "patch", "(", "p", ",", "d", ")", "for", "p", ",", "d", "in", "self", ".", "patches", ".", "items", "(", ")", "]", "\n", "[", "p", ".", "start", "(", ")", "for", "p", "in", "self", ".", "applied_patches", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.TestLoadCheckpoint.test_load_partial_checkpoint": [[68, 82], ["contextlib.redirect_stdout", "test_train.get_trainer_and_epoch_itr", "train.load_checkpoint", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "epoch_itr.next_epoch_itr", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "io.StringIO", "[].item", "next"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.get_trainer_and_epoch_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.load_checkpoint", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["", "def", "test_load_partial_checkpoint", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "trainer", ",", "epoch_itr", "=", "get_trainer_and_epoch_itr", "(", "2", ",", "150", ",", "200", ",", "50", ")", "\n", "\n", "train", ".", "load_checkpoint", "(", "self", ".", "args_mock", ",", "trainer", ",", "epoch_itr", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "epoch", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "50", ")", "\n", "\n", "itr", "=", "epoch_itr", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "epoch", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "50", ")", "\n", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "[", "0", "]", ".", "item", "(", ")", ",", "50", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "51", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.TestLoadCheckpoint.test_load_full_checkpoint": [[83, 93], ["contextlib.redirect_stdout", "test_train.get_trainer_and_epoch_itr", "train.load_checkpoint", "epoch_itr.next_epoch_itr", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "io.StringIO", "[].item", "next"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.get_trainer_and_epoch_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.load_checkpoint", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["", "", "def", "test_load_full_checkpoint", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "trainer", ",", "epoch_itr", "=", "get_trainer_and_epoch_itr", "(", "2", ",", "150", ",", "300", ",", "150", ")", "\n", "\n", "train", ".", "load_checkpoint", "(", "self", ".", "args_mock", ",", "trainer", ",", "epoch_itr", ")", "\n", "itr", "=", "epoch_itr", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "epoch", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "[", "0", "]", ".", "item", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.TestLoadCheckpoint.test_load_no_checkpoint": [[94, 105], ["contextlib.redirect_stdout", "test_train.get_trainer_and_epoch_itr", "train.load_checkpoint", "epoch_itr.next_epoch_itr", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "io.StringIO", "[].item", "next"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.get_trainer_and_epoch_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.load_checkpoint", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["", "", "def", "test_load_no_checkpoint", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "trainer", ",", "epoch_itr", "=", "get_trainer_and_epoch_itr", "(", "0", ",", "150", ",", "0", ",", "0", ")", "\n", "self", ".", "patches", "[", "'os.path.isfile'", "]", ".", "return_value", "=", "False", "\n", "\n", "train", ".", "load_checkpoint", "(", "self", ".", "args_mock", ",", "trainer", ",", "epoch_itr", ")", "\n", "itr", "=", "epoch_itr", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "epoch", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "[", "0", "]", ".", "item", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.TestLoadCheckpoint.tearDown": [[106, 108], ["unittest.mock.patch.stopall"], "methods", ["None"], ["", "", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "patch", ".", "stopall", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.mock_trainer": [[20, 31], ["unittest.mock.MagicMock"], "function", ["None"], ["def", "mock_trainer", "(", "epoch", ",", "num_updates", ",", "iterations_in_epoch", ")", ":", "\n", "    ", "trainer", "=", "MagicMock", "(", ")", "\n", "trainer", ".", "load_checkpoint", ".", "return_value", "=", "{", "\n", "'train_iterator'", ":", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'iterations_in_epoch'", ":", "iterations_in_epoch", ",", "\n", "'shuffle'", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "trainer", ".", "get_num_updates", ".", "return_value", "=", "num_updates", "\n", "return", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.mock_dict": [[33, 39], ["unittest.mock.MagicMock"], "function", ["None"], ["", "def", "mock_dict", "(", ")", ":", "\n", "    ", "d", "=", "MagicMock", "(", ")", "\n", "d", ".", "pad", ".", "return_value", "=", "1", "\n", "d", ".", "eos", ".", "return_value", "=", "2", "\n", "d", ".", "unk", ".", "return_value", "=", "3", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.get_trainer_and_epoch_itr": [[41, 52], ["torch.LongTensor", "fairseq.data.TokenBlockDataset", "test_train.mock_trainer", "fairseq.data.LanguagePairDataset", "fairseq.data.EpochBatchIterator", "list", "test_train.mock_dict", "range", "len", "range"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.mock_trainer", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_train.mock_dict"], ["", "def", "get_trainer_and_epoch_itr", "(", "epoch", ",", "epoch_size", ",", "num_updates", ",", "iterations_in_epoch", ")", ":", "\n", "    ", "tokens", "=", "torch", ".", "LongTensor", "(", "list", "(", "range", "(", "epoch_size", ")", ")", ")", "\n", "tokens_ds", "=", "data", ".", "TokenBlockDataset", "(", "tokens", ",", "sizes", "=", "[", "len", "(", "tokens", ")", "]", ",", "block_size", "=", "1", ",", "pad", "=", "0", ",", "eos", "=", "1", ",", "include_targets", "=", "False", ")", "\n", "trainer", "=", "mock_trainer", "(", "epoch", ",", "num_updates", ",", "iterations_in_epoch", ")", "\n", "dataset", "=", "data", ".", "LanguagePairDataset", "(", "tokens_ds", ",", "tokens_ds", ".", "sizes", ",", "mock_dict", "(", ")", ",", "shuffle", "=", "False", ")", "\n", "epoch_itr", "=", "data", ".", "EpochBatchIterator", "(", "\n", "dataset", "=", "dataset", ",", "\n", "collate_fn", "=", "dataset", ".", "collater", ",", "\n", "batch_sampler", "=", "[", "[", "i", "]", "for", "i", "in", "range", "(", "epoch_size", ")", "]", ",", "\n", ")", "\n", "return", "trainer", ",", "epoch_itr", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.TestTranslation.test_fconv": [[29, 36], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main"], ["    ", "def", "test_fconv", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_fconv'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.TestTranslation.test_raw": [[37, 44], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main"], ["", "", "", "def", "test_raw", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_fconv_raw'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ",", "[", "'--output-format'", ",", "'raw'", "]", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "'--raw-text'", "]", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "'--raw-text'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.TestTranslation.test_fp16": [[45, 52], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main"], ["", "", "", "def", "test_fp16", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_fp16'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "'--fp16'", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.TestTranslation.test_update_freq": [[53, 60], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main"], ["", "", "", "def", "test_update_freq", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_update_freq'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "'--update-freq'", ",", "'3'", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.TestTranslation.test_max_positions": [[61, 81], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.TestTranslation.assertTrue", "test_binaries.train_translation_model", "test_binaries.generate_main", "test_binaries.TestTranslation.assertRaises", "test_binaries.train_translation_model", "test_binaries.TestTranslation.assertRaises", "test_binaries.generate_main", "str"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main"], ["", "", "", "def", "test_max_positions", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_max_positions'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "with", "self", ".", "assertRaises", "(", "Exception", ")", "as", "context", ":", "\n", "                    ", "train_translation_model", "(", "\n", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "'--max-target-positions'", ",", "'5'", "]", ",", "\n", ")", "\n", "", "self", ".", "assertTrue", "(", "\n", "'skip this example with --skip-invalid-size-inputs-valid-test'", "in", "str", "(", "context", ".", "exception", ")", "\n", ")", "\n", "train_translation_model", "(", "\n", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "\n", "[", "'--max-target-positions'", ",", "'5'", ",", "'--skip-invalid-size-inputs-valid-test'", "]", ",", "\n", ")", "\n", "with", "self", ".", "assertRaises", "(", "Exception", ")", "as", "context", ":", "\n", "                    ", "generate_main", "(", "data_dir", ")", "\n", "", "generate_main", "(", "data_dir", ",", "[", "'--skip-invalid-size-inputs-valid-test'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.TestTranslation.test_generation": [[82, 101], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main", "test_binaries.generate_main", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main"], ["", "", "", "def", "test_generation", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_sampling'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--sampling'", ",", "\n", "'--sampling-temperature'", ",", "'2'", ",", "\n", "'--beam'", ",", "'2'", ",", "\n", "'--nbest'", ",", "'2'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--sampling'", ",", "\n", "'--sampling-topk'", ",", "'3'", ",", "\n", "'--beam'", ",", "'2'", ",", "\n", "'--nbest'", ",", "'2'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "'--prefix-size'", ",", "'2'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.TestTranslation.test_lstm": [[102, 112], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main"], ["", "", "", "def", "test_lstm", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_lstm'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'lstm_wiseman_iwslt_de_en'", ",", "[", "\n", "'--encoder-layers'", ",", "'2'", ",", "\n", "'--decoder-layers'", ",", "'2'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.TestTranslation.test_lstm_bidirectional": [[113, 125], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main"], ["", "", "", "def", "test_lstm_bidirectional", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_lstm_bidirectional'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'lstm'", ",", "[", "\n", "'--encoder-layers'", ",", "'2'", ",", "\n", "'--encoder-bidirectional'", ",", "\n", "'--encoder-hidden-size'", ",", "'256'", ",", "\n", "'--decoder-layers'", ",", "'2'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.TestTranslation.test_transformer": [[126, 133], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main"], ["", "", "", "def", "test_transformer", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_transformer'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'transformer_iwslt_de_en'", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.TestStories.test_fconv_self_att_wp": [[137, 162], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main", "os.rename", "config.extend", "test_binaries.train_translation_model", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model"], ["    ", "def", "test_fconv_self_att_wp", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_fconv_self_att_wp'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "config", "=", "[", "\n", "'--encoder-layers'", ",", "'[(512, 3)] * 2'", ",", "\n", "'--decoder-layers'", ",", "'[(512, 3)] * 2'", ",", "\n", "'--decoder-attention'", ",", "'True'", ",", "\n", "'--encoder-attention'", ",", "'False'", ",", "\n", "'--gated-attention'", ",", "'True'", ",", "\n", "'--self-attention'", ",", "'True'", ",", "\n", "'--project-input'", ",", "'True'", ",", "\n", "]", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_self_att_wp'", ",", "config", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n", "# fusion model", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint_last.pt'", ")", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'pretrained.pt'", ")", ")", "\n", "config", ".", "extend", "(", "[", "\n", "'--pretrained'", ",", "'True'", ",", "\n", "'--pretrained-checkpoint'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'pretrained.pt'", ")", ",", "\n", "'--save-dir'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'fusion_model'", ")", ",", "\n", "]", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_self_att_wp'", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.TestLanguageModeling.test_fconv_lm": [[166, 173], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_lm_data", "test_binaries.train_language_model", "test_binaries.eval_lm_main"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_lm_data", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_language_model", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.eval_lm_main"], ["    ", "def", "test_fconv_lm", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_fconv_lm'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_lm_data", "(", "data_dir", ")", "\n", "train_language_model", "(", "data_dir", ",", "'fconv_lm'", ")", "\n", "eval_lm_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.create_dummy_data": [[175, 194], ["test_binaries.create_dummy_data._create_dummy_data"], "function", ["None"], ["", "", "", "", "def", "create_dummy_data", "(", "data_dir", ",", "num_examples", "=", "1000", ",", "maxlen", "=", "20", ")", ":", "\n", "\n", "    ", "def", "_create_dummy_data", "(", "filename", ")", ":", "\n", "        ", "data", "=", "torch", ".", "rand", "(", "num_examples", "*", "maxlen", ")", "\n", "data", "=", "97", "+", "torch", ".", "floor", "(", "26", "*", "data", ")", ".", "int", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename", ")", ",", "'w'", ")", "as", "h", ":", "\n", "            ", "offset", "=", "0", "\n", "for", "_", "in", "range", "(", "num_examples", ")", ":", "\n", "                ", "ex_len", "=", "random", ".", "randint", "(", "1", ",", "maxlen", ")", "\n", "ex_str", "=", "' '", ".", "join", "(", "map", "(", "chr", ",", "data", "[", "offset", ":", "offset", "+", "ex_len", "]", ")", ")", "\n", "print", "(", "ex_str", ",", "file", "=", "h", ")", "\n", "offset", "+=", "ex_len", "\n", "\n", "", "", "", "_create_dummy_data", "(", "'train.in'", ")", "\n", "_create_dummy_data", "(", "'train.out'", ")", "\n", "_create_dummy_data", "(", "'valid.in'", ")", "\n", "_create_dummy_data", "(", "'valid.out'", ")", "\n", "_create_dummy_data", "(", "'test.in'", ")", "\n", "_create_dummy_data", "(", "'test.out'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_translation_data": [[196, 211], ["preprocess.get_parser", "preprocess.get_parser.parse_args", "preprocess.main", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_parser", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.main"], ["", "def", "preprocess_translation_data", "(", "data_dir", ",", "extra_flags", "=", "None", ")", ":", "\n", "    ", "preprocess_parser", "=", "preprocess", ".", "get_parser", "(", ")", "\n", "preprocess_args", "=", "preprocess_parser", ".", "parse_args", "(", "\n", "[", "\n", "'--source-lang'", ",", "'in'", ",", "\n", "'--target-lang'", ",", "'out'", ",", "\n", "'--trainpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train'", ")", ",", "\n", "'--validpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'valid'", ")", ",", "\n", "'--testpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'test'", ")", ",", "\n", "'--thresholdtgt'", ",", "'0'", ",", "\n", "'--thresholdsrc'", ",", "'0'", ",", "\n", "'--destdir'", ",", "data_dir", ",", "\n", "]", "+", "(", "extra_flags", "or", "[", "]", ")", ",", "\n", ")", "\n", "preprocess", ".", "main", "(", "preprocess_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_translation_model": [[213, 233], ["fairseq.options.get_training_parser", "fairseq.options.parse_args_and_arch", "train.main"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_training_parser", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.main"], ["", "def", "train_translation_model", "(", "data_dir", ",", "arch", ",", "extra_flags", "=", "None", ")", ":", "\n", "    ", "train_parser", "=", "options", ".", "get_training_parser", "(", ")", "\n", "train_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "train_parser", ",", "\n", "[", "\n", "'--task'", ",", "'translation'", ",", "\n", "data_dir", ",", "\n", "'--save-dir'", ",", "data_dir", ",", "\n", "'--arch'", ",", "arch", ",", "\n", "'--optimizer'", ",", "'nag'", ",", "\n", "'--lr'", ",", "'0.05'", ",", "\n", "'--max-tokens'", ",", "'500'", ",", "\n", "'--max-epoch'", ",", "'1'", ",", "\n", "'--no-progress-bar'", ",", "\n", "'--distributed-world-size'", ",", "'1'", ",", "\n", "'--source-lang'", ",", "'in'", ",", "\n", "'--target-lang'", ",", "'out'", ",", "\n", "]", "+", "(", "extra_flags", "or", "[", "]", ")", ",", "\n", ")", "\n", "train", ".", "main", "(", "train_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.generate_main": [[235, 261], ["fairseq.options.get_generation_parser", "fairseq.options.parse_args_and_arch", "generate.main", "io.StringIO", "interactive.main", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_generation_parser", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.main", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.main"], ["", "def", "generate_main", "(", "data_dir", ",", "extra_flags", "=", "None", ")", ":", "\n", "    ", "generate_parser", "=", "options", ".", "get_generation_parser", "(", ")", "\n", "generate_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "generate_parser", ",", "\n", "[", "\n", "data_dir", ",", "\n", "'--path'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint_last.pt'", ")", ",", "\n", "'--beam'", ",", "'3'", ",", "\n", "'--batch-size'", ",", "'64'", ",", "\n", "'--max-len-b'", ",", "'5'", ",", "\n", "'--gen-subset'", ",", "'valid'", ",", "\n", "'--no-progress-bar'", ",", "\n", "'--print-alignment'", ",", "\n", "]", "+", "(", "extra_flags", "or", "[", "]", ")", ",", "\n", ")", "\n", "\n", "# evaluate model in batch mode", "\n", "generate", ".", "main", "(", "generate_args", ")", "\n", "\n", "# evaluate model interactively", "\n", "generate_args", ".", "buffer_size", "=", "0", "\n", "generate_args", ".", "max_sentences", "=", "None", "\n", "orig_stdin", "=", "sys", ".", "stdin", "\n", "sys", ".", "stdin", "=", "StringIO", "(", "'h e l l o\\n'", ")", "\n", "interactive", ".", "main", "(", "generate_args", ")", "\n", "sys", ".", "stdin", "=", "orig_stdin", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.preprocess_lm_data": [[263, 273], ["preprocess.get_parser", "preprocess.get_parser.parse_args", "preprocess.main", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_parser", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.main"], ["", "def", "preprocess_lm_data", "(", "data_dir", ")", ":", "\n", "    ", "preprocess_parser", "=", "preprocess", ".", "get_parser", "(", ")", "\n", "preprocess_args", "=", "preprocess_parser", ".", "parse_args", "(", "[", "\n", "'--only-source'", ",", "\n", "'--trainpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train.out'", ")", ",", "\n", "'--validpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'valid.out'", ")", ",", "\n", "'--testpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'test.out'", ")", ",", "\n", "'--destdir'", ",", "data_dir", ",", "\n", "]", ")", "\n", "preprocess", ".", "main", "(", "preprocess_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.train_language_model": [[275, 299], ["fairseq.options.get_training_parser", "fairseq.options.parse_args_and_arch", "train.main"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_training_parser", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.main"], ["", "def", "train_language_model", "(", "data_dir", ",", "arch", ")", ":", "\n", "    ", "train_parser", "=", "options", ".", "get_training_parser", "(", ")", "\n", "train_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "train_parser", ",", "\n", "[", "\n", "'--task'", ",", "'language_modeling'", ",", "\n", "data_dir", ",", "\n", "'--arch'", ",", "arch", ",", "\n", "'--optimizer'", ",", "'nag'", ",", "\n", "'--lr'", ",", "'1.0'", ",", "\n", "'--criterion'", ",", "'adaptive_loss'", ",", "\n", "'--adaptive-softmax-cutoff'", ",", "'5,10,15'", ",", "\n", "'--decoder-layers'", ",", "'[(850, 3)] * 2 + [(1024,4)]'", ",", "\n", "'--decoder-embed-dim'", ",", "'280'", ",", "\n", "'--max-tokens'", ",", "'500'", ",", "\n", "'--tokens-per-sample'", ",", "'500'", ",", "\n", "'--save-dir'", ",", "data_dir", ",", "\n", "'--max-epoch'", ",", "'1'", ",", "\n", "'--no-progress-bar'", ",", "\n", "'--distributed-world-size'", ",", "'1'", ",", "\n", "'--ddp-backend'", ",", "'no_c10d'", ",", "\n", "]", ",", "\n", ")", "\n", "train", ".", "main", "(", "train_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_binaries.eval_lm_main": [[301, 312], ["fairseq.options.get_eval_lm_parser", "fairseq.options.parse_args_and_arch", "eval_lm.main", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_eval_lm_parser", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.main"], ["", "def", "eval_lm_main", "(", "data_dir", ")", ":", "\n", "    ", "eval_lm_parser", "=", "options", ".", "get_eval_lm_parser", "(", ")", "\n", "eval_lm_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "eval_lm_parser", ",", "\n", "[", "\n", "data_dir", ",", "\n", "'--path'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint_last.pt'", ")", ",", "\n", "'--no-progress-bar'", ",", "\n", "]", ",", "\n", ")", "\n", "eval_lm", ".", "main", "(", "eval_lm_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestSequenceGenerator.setUp": [[20, 26], ["tests.sequence_generator_setup"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.sequence_generator_setup"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "tgt_dict", ",", "self", ".", "w1", ",", "self", ".", "w2", ",", "src_tokens", ",", "src_lengths", ",", "self", ".", "model", "=", "(", "\n", "test_utils", ".", "sequence_generator_setup", "(", ")", "\n", ")", "\n", "self", ".", "encoder_input", "=", "{", "\n", "'src_tokens'", ":", "src_tokens", ",", "'src_lengths'", ":", "src_lengths", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestSequenceGenerator.test_with_normalization": [[28, 44], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "def", "test_with_normalization", "(", "self", ")", ":", "\n", "        ", "generator", "=", "SequenceGenerator", "(", "[", "self", ".", "model", "]", ",", "self", ".", "tgt_dict", ")", "\n", "hypos", "=", "generator", ".", "generate", "(", "self", ".", "encoder_input", ",", "beam_size", "=", "2", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "1.0", "]", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w2", ",", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.1", ",", "0.9", ",", "0.9", ",", "1.0", "]", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.4", ",", "1.0", "]", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.4", ",", "0.6", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestSequenceGenerator.test_without_normalization": [[45, 63], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "def", "test_without_normalization", "(", "self", ")", ":", "\n", "# Sentence 1: unchanged from the normalized case", "\n", "# Sentence 2: beams swap order", "\n", "        ", "generator", "=", "SequenceGenerator", "(", "[", "self", ".", "model", "]", ",", "self", ".", "tgt_dict", ",", "normalize_scores", "=", "False", ")", "\n", "hypos", "=", "generator", ".", "generate", "(", "self", ".", "encoder_input", ",", "beam_size", "=", "2", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "1.0", "]", ",", "normalized", "=", "False", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w2", ",", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.1", ",", "0.9", ",", "0.9", ",", "1.0", "]", ",", "normalized", "=", "False", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.6", "]", ",", "normalized", "=", "False", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.4", ",", "0.4", ",", "1.0", "]", ",", "normalized", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestSequenceGenerator.test_with_lenpen_favoring_short_hypos": [[64, 81], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "def", "test_with_lenpen_favoring_short_hypos", "(", "self", ")", ":", "\n", "        ", "lenpen", "=", "0.6", "\n", "generator", "=", "SequenceGenerator", "(", "[", "self", ".", "model", "]", ",", "self", ".", "tgt_dict", ",", "len_penalty", "=", "lenpen", ")", "\n", "hypos", "=", "generator", ".", "generate", "(", "self", ".", "encoder_input", ",", "beam_size", "=", "2", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w2", ",", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.1", ",", "0.9", ",", "0.9", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.6", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.4", ",", "0.4", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestSequenceGenerator.test_with_lenpen_favoring_long_hypos": [[82, 99], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "def", "test_with_lenpen_favoring_long_hypos", "(", "self", ")", ":", "\n", "        ", "lenpen", "=", "5.0", "\n", "generator", "=", "SequenceGenerator", "(", "[", "self", ".", "model", "]", ",", "self", ".", "tgt_dict", ",", "len_penalty", "=", "lenpen", ")", "\n", "hypos", "=", "generator", ".", "generate", "(", "self", ".", "encoder_input", ",", "beam_size", "=", "2", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w2", ",", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.1", ",", "0.9", ",", "0.9", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.9", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.4", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.4", ",", "0.6", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestSequenceGenerator.test_maxlen": [[100, 116], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "def", "test_maxlen", "(", "self", ")", ":", "\n", "        ", "generator", "=", "SequenceGenerator", "(", "[", "self", ".", "model", "]", ",", "self", ".", "tgt_dict", ",", "maxlen", "=", "2", ")", "\n", "hypos", "=", "generator", ".", "generate", "(", "self", ".", "encoder_input", ",", "beam_size", "=", "2", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "1.0", "]", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w2", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.1", ",", "0.1", ",", "0.6", "]", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.6", "]", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w2", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.3", ",", "0.9", ",", "0.01", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestSequenceGenerator.test_no_stop_early": [[117, 133], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "def", "test_no_stop_early", "(", "self", ")", ":", "\n", "        ", "generator", "=", "SequenceGenerator", "(", "[", "self", ".", "model", "]", ",", "self", ".", "tgt_dict", ",", "stop_early", "=", "False", ")", "\n", "hypos", "=", "generator", ".", "generate", "(", "self", ".", "encoder_input", ",", "beam_size", "=", "2", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "1.0", "]", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w2", ",", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.1", ",", "0.9", ",", "0.9", ",", "1.0", "]", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w2", ",", "w2", ",", "w2", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.3", ",", "0.9", ",", "0.99", ",", "0.4", ",", "1.0", "]", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.4", ",", "0.4", ",", "1.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestSequenceGenerator.assertHypoTokens": [[134, 136], ["test_sequence_generator.TestSequenceGenerator.assertTensorEqual", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertTensorEqual"], ["", "def", "assertHypoTokens", "(", "self", ",", "hypo", ",", "tokens", ")", ":", "\n", "        ", "self", ".", "assertTensorEqual", "(", "hypo", "[", "'tokens'", "]", ",", "torch", ".", "LongTensor", "(", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestSequenceGenerator.assertHypoScore": [[137, 145], ["torch.FloatTensor().log", "test_sequence_generator.TestSequenceGenerator.assertAlmostEqual", "test_sequence_generator.TestSequenceGenerator.assertEqual", "torch.FloatTensor().log.sum", "test_sequence_generator.TestSequenceGenerator.assertLess", "torch.FloatTensor().log.numel", "hypo[].numel", "abs", "torch.FloatTensor", "torch.FloatTensor().log.numel"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual"], ["", "def", "assertHypoScore", "(", "self", ",", "hypo", ",", "pos_probs", ",", "normalized", "=", "True", ",", "lenpen", "=", "1.", ")", ":", "\n", "        ", "pos_scores", "=", "torch", ".", "FloatTensor", "(", "pos_probs", ")", ".", "log", "(", ")", "\n", "self", ".", "assertAlmostEqual", "(", "hypo", "[", "'positional_scores'", "]", ",", "pos_scores", ")", "\n", "self", ".", "assertEqual", "(", "pos_scores", ".", "numel", "(", ")", ",", "hypo", "[", "'tokens'", "]", ".", "numel", "(", ")", ")", "\n", "score", "=", "pos_scores", ".", "sum", "(", ")", "\n", "if", "normalized", ":", "\n", "            ", "score", "/=", "pos_scores", ".", "numel", "(", ")", "**", "lenpen", "\n", "", "self", ".", "assertLess", "(", "abs", "(", "score", "-", "hypo", "[", "'score'", "]", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestSequenceGenerator.assertAlmostEqual": [[146, 149], ["test_sequence_generator.TestSequenceGenerator.assertEqual", "test_sequence_generator.TestSequenceGenerator.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestSequenceGenerator.assertTensorEqual": [[150, 153], ["test_sequence_generator.TestSequenceGenerator.assertEqual", "test_sequence_generator.TestSequenceGenerator.assertEqual", "t1.size", "t2.size", "t1.ne().long().sum", "t1.ne().long", "t1.ne"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "assertTensorEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertEqual", "(", "t1", ".", "ne", "(", "t2", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.setUp": [[157, 212], ["tests.dummy_dictionary", "test_sequence_generator.TestDiverseBeamSearch.assertEqual", "test_sequence_generator.TestDiverseBeamSearch.assertEqual", "test_sequence_generator.TestDiverseBeamSearch.assertEqual", "tests.dummy_dictionary.eos", "torch.LongTensor", "torch.LongTensor", "argparse.Namespace", "tests.TestTranslationTask.setup_task", "tests.TestTranslationTask.setup_task.build_model", "tests.dummy_dictionary.pad", "tests.dummy_dictionary.eos", "tests.dummy_dictionary.unk", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.dummy_dictionary", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.__init__.setup_task", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.build_model", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# construct dummy dictionary", "\n", "        ", "d", "=", "test_utils", ".", "dummy_dictionary", "(", "vocab_size", "=", "2", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "pad", "(", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "eos", "(", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "unk", "(", ")", ",", "3", ")", "\n", "self", ".", "eos", "=", "d", ".", "eos", "(", ")", "\n", "self", ".", "w1", "=", "4", "\n", "self", ".", "w2", "=", "5", "\n", "\n", "# construct source data", "\n", "self", ".", "src_tokens", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "self", ".", "w1", ",", "self", ".", "w2", ",", "self", ".", "eos", "]", ",", "\n", "[", "self", ".", "w1", ",", "self", ".", "w2", ",", "self", ".", "eos", "]", ",", "\n", "]", ")", "\n", "self", ".", "src_lengths", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "2", "]", ")", "\n", "\n", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "unk", "=", "0.", "\n", "args", ".", "beam_probs", "=", "[", "\n", "# step 0:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "# sentence 1:", "\n", "[", "0.0", ",", "unk", ",", "0.9", ",", "0.1", "]", ",", "# beam 1", "\n", "[", "0.0", ",", "unk", ",", "0.9", ",", "0.1", "]", ",", "# beam 2", "\n", "# sentence 2:", "\n", "[", "0.0", ",", "unk", ",", "0.7", ",", "0.3", "]", ",", "\n", "[", "0.0", ",", "unk", ",", "0.7", ",", "0.3", "]", ",", "\n", "]", ")", ",", "\n", "# step 1:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "# sentence 1:", "\n", "[", "0.0", ",", "unk", ",", "0.6", ",", "0.4", "]", ",", "\n", "[", "0.0", ",", "unk", ",", "0.6", ",", "0.4", "]", ",", "\n", "# sentence 2:", "\n", "[", "0.25", ",", "unk", ",", "0.35", ",", "0.4", "]", ",", "\n", "[", "0.25", ",", "unk", ",", "0.35", ",", "0.4", "]", ",", "\n", "]", ")", ",", "\n", "# step 2:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "# sentence 1:", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "\n", "# sentence 2:", "\n", "[", "0.9", ",", "unk", ",", "0.1", ",", "0.0", "]", ",", "\n", "[", "0.9", ",", "unk", ",", "0.1", ",", "0.0", "]", ",", "\n", "]", ")", ",", "\n", "]", "\n", "\n", "task", "=", "test_utils", ".", "TestTranslationTask", ".", "setup_task", "(", "args", ",", "d", ",", "d", ")", "\n", "self", ".", "model", "=", "task", ".", "build_model", "(", "args", ")", "\n", "self", ".", "tgt_dict", "=", "task", ".", "target_dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.test_diverse_beam_search": [[213, 233], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "test_sequence_generator.TestDiverseBeamSearch.assertHypoScore"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore"], ["", "def", "test_diverse_beam_search", "(", "self", ")", ":", "\n", "        ", "generator", "=", "SequenceGenerator", "(", "\n", "[", "self", ".", "model", "]", ",", "self", ".", "tgt_dict", ",", "\n", "beam_size", "=", "2", ",", "diverse_beam_groups", "=", "2", ",", "diverse_beam_strength", "=", "0.", ",", "\n", ")", "\n", "encoder_input", "=", "{", "'src_tokens'", ":", "self", ".", "src_tokens", ",", "'src_lengths'", ":", "self", ".", "src_lengths", "}", "\n", "hypos", "=", "generator", ".", "generate", "(", "encoder_input", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "eos", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "0.6", ",", "1.0", "]", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.9", ",", "0.6", ",", "1.0", "]", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.9", "]", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.4", ",", "0.9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens": [[234, 236], ["test_sequence_generator.TestDiverseBeamSearch.assertTensorEqual", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertTensorEqual"], ["", "def", "assertHypoTokens", "(", "self", ",", "hypo", ",", "tokens", ")", ":", "\n", "        ", "self", ".", "assertTensorEqual", "(", "hypo", "[", "'tokens'", "]", ",", "torch", ".", "LongTensor", "(", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertHypoScore": [[237, 245], ["torch.FloatTensor().log", "test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual", "test_sequence_generator.TestDiverseBeamSearch.assertEqual", "torch.FloatTensor().log.sum", "test_sequence_generator.TestDiverseBeamSearch.assertLess", "torch.FloatTensor().log.numel", "hypo[].numel", "abs", "torch.FloatTensor", "torch.FloatTensor().log.numel"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual"], ["", "def", "assertHypoScore", "(", "self", ",", "hypo", ",", "pos_probs", ",", "normalized", "=", "True", ",", "lenpen", "=", "1.", ")", ":", "\n", "        ", "pos_scores", "=", "torch", ".", "FloatTensor", "(", "pos_probs", ")", ".", "log", "(", ")", "\n", "self", ".", "assertAlmostEqual", "(", "hypo", "[", "'positional_scores'", "]", ",", "pos_scores", ")", "\n", "self", ".", "assertEqual", "(", "pos_scores", ".", "numel", "(", ")", ",", "hypo", "[", "'tokens'", "]", ".", "numel", "(", ")", ")", "\n", "score", "=", "pos_scores", ".", "sum", "(", ")", "\n", "if", "normalized", ":", "\n", "            ", "score", "/=", "pos_scores", ".", "numel", "(", ")", "**", "lenpen", "\n", "", "self", ".", "assertLess", "(", "abs", "(", "score", "-", "hypo", "[", "'score'", "]", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertAlmostEqual": [[246, 249], ["test_sequence_generator.TestDiverseBeamSearch.assertEqual", "test_sequence_generator.TestDiverseBeamSearch.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_sequence_generator.TestDiverseBeamSearch.assertTensorEqual": [[250, 253], ["test_sequence_generator.TestDiverseBeamSearch.assertEqual", "test_sequence_generator.TestDiverseBeamSearch.assertEqual", "t1.size", "t2.size", "t1.ne().long().sum", "t1.ne().long", "t1.ne"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "assertTensorEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertEqual", "(", "t1", ".", "ne", "(", "t2", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.test_average_checkpoints.TestAverageCheckpoints.test_average_checkpoints": [[20, 68], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "tempfile.mkstemp", "tempfile.mkstemp", "torch.save", "torch.save", "os.close", "os.remove", "os.close", "os.remove", "zip", "collections.OrderedDict", "collections.OrderedDict", "scripts.average_checkpoints.average_checkpoints", "collections.OrderedDict.items", "output.items", "test_average_checkpoints.TestAverageCheckpoints.assertEqual", "numpy.testing.assert_allclose", "v_expected.numpy", "v_out.numpy", "torch.DoubleTensor", "torch.FloatTensor", "torch.IntTensor", "torch.DoubleTensor", "torch.FloatTensor", "torch.IntTensor", "torch.DoubleTensor", "torch.FloatTensor", "torch.IntTensor", "collections.OrderedDict.keys", "output.keys"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.save", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.save", "home.repos.pwc.inspect_result.lyy1994_reformer.scripts.average_checkpoints.average_checkpoints"], ["    ", "def", "test_average_checkpoints", "(", "self", ")", ":", "\n", "        ", "params_0", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "\n", "(", "'a'", ",", "torch", ".", "DoubleTensor", "(", "[", "100.0", "]", ")", ")", ",", "\n", "(", "'b'", ",", "torch", ".", "FloatTensor", "(", "[", "[", "1.0", ",", "2.0", ",", "3.0", "]", ",", "[", "4.0", ",", "5.0", ",", "6.0", "]", "]", ")", ")", ",", "\n", "(", "'c'", ",", "torch", ".", "IntTensor", "(", "[", "7", ",", "8", ",", "9", "]", ")", ")", ",", "\n", "]", "\n", ")", "\n", "params_1", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "\n", "(", "'a'", ",", "torch", ".", "DoubleTensor", "(", "[", "1.0", "]", ")", ")", ",", "\n", "(", "'b'", ",", "torch", ".", "FloatTensor", "(", "[", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "[", "1.0", ",", "1.0", ",", "1.0", "]", "]", ")", ")", ",", "\n", "(", "'c'", ",", "torch", ".", "IntTensor", "(", "[", "2", ",", "2", ",", "2", "]", ")", ")", ",", "\n", "]", "\n", ")", "\n", "params_avg", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "\n", "(", "'a'", ",", "torch", ".", "DoubleTensor", "(", "[", "50.5", "]", ")", ")", ",", "\n", "(", "'b'", ",", "torch", ".", "FloatTensor", "(", "[", "[", "1.0", ",", "1.5", ",", "2.0", "]", ",", "[", "2.5", ",", "3.0", ",", "3.5", "]", "]", ")", ")", ",", "\n", "# We expect truncation for integer division", "\n", "(", "'c'", ",", "torch", ".", "IntTensor", "(", "[", "4", ",", "5", ",", "5", "]", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "fd_0", ",", "path_0", "=", "tempfile", ".", "mkstemp", "(", ")", "\n", "fd_1", ",", "path_1", "=", "tempfile", ".", "mkstemp", "(", ")", "\n", "torch", ".", "save", "(", "collections", ".", "OrderedDict", "(", "[", "(", "'model'", ",", "params_0", ")", "]", ")", ",", "path_0", ")", "\n", "torch", ".", "save", "(", "collections", ".", "OrderedDict", "(", "[", "(", "'model'", ",", "params_1", ")", "]", ")", ",", "path_1", ")", "\n", "\n", "output", "=", "average_checkpoints", "(", "[", "path_0", ",", "path_1", "]", ")", "[", "'model'", "]", "\n", "\n", "os", ".", "close", "(", "fd_0", ")", "\n", "os", ".", "remove", "(", "path_0", ")", "\n", "os", ".", "close", "(", "fd_1", ")", "\n", "os", ".", "remove", "(", "path_1", ")", "\n", "\n", "for", "(", "k_expected", ",", "v_expected", ")", ",", "(", "k_out", ",", "v_out", ")", "in", "zip", "(", "\n", "params_avg", ".", "items", "(", ")", ",", "output", ".", "items", "(", ")", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "\n", "k_expected", ",", "k_out", ",", "'Key mismatch - expected {} but found {}. '", "\n", "'(Expected list of keys: {} vs actual list of keys: {})'", ".", "format", "(", "\n", "k_expected", ",", "k_out", ",", "params_avg", ".", "keys", "(", ")", ",", "output", ".", "keys", "(", ")", "\n", ")", "\n", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "v_expected", ".", "numpy", "(", ")", ",", "\n", "v_out", ".", "numpy", "(", ")", ",", "\n", "err_msg", "=", "'Tensor value mismatch for key {}'", ".", "format", "(", "k_expected", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestDataset.__init__": [[121, 124], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestDataset.__getitem__": [[125, 127], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestDataset.__len__": [[128, 130], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestTranslationTask.__init__": [[134, 139], ["fairseq.tasks.FairseqTask.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "src_dict", ",", "tgt_dict", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "src_dict", "=", "src_dict", "\n", "self", ".", "tgt_dict", "=", "tgt_dict", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestTranslationTask.setup_task": [[140, 143], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "src_dict", "=", "None", ",", "tgt_dict", "=", "None", ",", "model", "=", "None", ")", ":", "\n", "        ", "return", "cls", "(", "args", ",", "src_dict", ",", "tgt_dict", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestTranslationTask.build_model": [[144, 146], ["fairseq.utils.TestModel.build_model"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.build_model"], ["", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "TestModel", ".", "build_model", "(", "args", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestTranslationTask.source_dictionary": [[147, 150], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "src_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestTranslationTask.target_dictionary": [[151, 154], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tgt_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestModel.__init__": [[157, 159], ["fairseq.models.FairseqModel.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestModel.build_model": [[160, 165], ["fairseq.utils.TestEncoder", "fairseq.utils.TestIncrementalDecoder", "cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "encoder", "=", "TestEncoder", "(", "args", ",", "task", ".", "source_dictionary", ")", "\n", "decoder", "=", "TestIncrementalDecoder", "(", "args", ",", "task", ".", "target_dictionary", ")", "\n", "return", "cls", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestEncoder.__init__": [[168, 171], ["fairseq.models.FairseqEncoder.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestEncoder.forward": [[172, 174], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "return", "src_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestEncoder.reorder_encoder_out": [[175, 177], ["encoder_out.index_select"], "methods", ["None"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "return", "encoder_out", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestIncrementalDecoder.__init__": [[180, 185], ["fairseq.models.FairseqIncrementalDecoder.__init__", "getattr", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "assert", "hasattr", "(", "args", ",", "'beam_probs'", ")", "or", "hasattr", "(", "args", ",", "'probs'", ")", "\n", "args", ".", "max_decoder_positions", "=", "getattr", "(", "args", ",", "'max_decoder_positions'", ",", "100", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestIncrementalDecoder.forward": [[186, 224], ["prev_output_tokens.size", "len", "encoder_out.size", "prev_output_tokens.size", "hasattr", "torch.rand", "fairseq.utils.get_incremental_state", "fairseq.utils.set_incremental_state", "list", "fairseq.utils.TestIncrementalDecoder.args.probs.index_select", "torch.FloatTensor().zero_", "enumerate", "range", "fairseq.utils.TestIncrementalDecoder.args.probs.dim", "torch.LongTensor", "torch.FloatTensor", "len", "len", "fairseq.utils.TestIncrementalDecoder.dictionary.eos", "fairseq.utils.TestIncrementalDecoder.dictionary.eos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.get_incremental_state", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.set_incremental_state", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", ",", "incremental_state", "=", "None", ")", ":", "\n", "        ", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "prev_output_tokens", "=", "prev_output_tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "", "bbsz", "=", "prev_output_tokens", ".", "size", "(", "0", ")", "\n", "vocab", "=", "len", "(", "self", ".", "dictionary", ")", "\n", "src_len", "=", "encoder_out", ".", "size", "(", "1", ")", "\n", "tgt_len", "=", "prev_output_tokens", ".", "size", "(", "1", ")", "\n", "\n", "# determine number of steps", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "# cache step number", "\n", "            ", "step", "=", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'step'", ")", "\n", "if", "step", "is", "None", ":", "\n", "                ", "step", "=", "0", "\n", "", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'step'", ",", "step", "+", "1", ")", "\n", "steps", "=", "[", "step", "]", "\n", "", "else", ":", "\n", "            ", "steps", "=", "list", "(", "range", "(", "tgt_len", ")", ")", "\n", "\n", "# define output in terms of raw probs", "\n", "", "if", "hasattr", "(", "self", ".", "args", ",", "'probs'", ")", ":", "\n", "            ", "assert", "self", ".", "args", ".", "probs", ".", "dim", "(", ")", "==", "3", ",", "'expected probs to have size bsz*steps*vocab'", "\n", "probs", "=", "self", ".", "args", ".", "probs", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "steps", ")", ")", "\n", "", "else", ":", "\n", "            ", "probs", "=", "torch", ".", "FloatTensor", "(", "bbsz", ",", "len", "(", "steps", ")", ",", "vocab", ")", ".", "zero_", "(", ")", "\n", "for", "i", ",", "step", "in", "enumerate", "(", "steps", ")", ":", "\n", "# args.beam_probs gives the probability for every vocab element,", "\n", "# starting with eos, then unknown, and then the rest of the vocab", "\n", "                ", "if", "step", "<", "len", "(", "self", ".", "args", ".", "beam_probs", ")", ":", "\n", "                    ", "probs", "[", ":", ",", "i", ",", "self", ".", "dictionary", ".", "eos", "(", ")", ":", "]", "=", "self", ".", "args", ".", "beam_probs", "[", "step", "]", "\n", "", "else", ":", "\n", "                    ", "probs", "[", ":", ",", "i", ",", "self", ".", "dictionary", ".", "eos", "(", ")", "]", "=", "1.0", "\n", "\n", "# random attention", "\n", "", "", "", "attn", "=", "torch", ".", "rand", "(", "bbsz", ",", "tgt_len", ",", "src_len", ")", "\n", "\n", "return", "probs", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestIncrementalDecoder.get_normalized_probs": [[225, 232], ["probs.log"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log"], ["", "def", "get_normalized_probs", "(", "self", ",", "net_output", ",", "log_probs", ",", "_", ")", ":", "\n", "# the decoder returns probabilities directly", "\n", "        ", "probs", "=", "net_output", "[", "0", "]", "\n", "if", "log_probs", ":", "\n", "            ", "return", "probs", ".", "log", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.TestIncrementalDecoder.max_positions": [[233, 235], ["None"], "methods", ["None"], ["", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "args", ".", "max_decoder_positions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.dummy_dictionary": [[22, 29], ["fairseq.data.Dictionary", "range", "fairseq.data.Dictionary.finalize", "fairseq.data.Dictionary.add_symbol", "str"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDatasetBuilder.finalize", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.add_symbol"], ["def", "dummy_dictionary", "(", "vocab_size", ",", "prefix", "=", "'token_'", ")", ":", "\n", "    ", "d", "=", "Dictionary", "(", ")", "\n", "for", "i", "in", "range", "(", "vocab_size", ")", ":", "\n", "        ", "token", "=", "prefix", "+", "str", "(", "i", ")", "\n", "d", ".", "add_symbol", "(", "token", ")", "\n", "", "d", ".", "finalize", "(", "padding_factor", "=", "1", ")", "# don't add extra padding symbols", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.dummy_dataloader": [[31, 53], ["enumerate", "utils.TestDataset", "torch.utils.data.DataLoader", "iter", "len", "fairseq.data.language_pair_dataset.collate"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.collate"], ["", "def", "dummy_dataloader", "(", "\n", "samples", ",", "\n", "padding_idx", "=", "1", ",", "\n", "eos_idx", "=", "2", ",", "\n", "batch_size", "=", "None", ",", "\n", ")", ":", "\n", "    ", "if", "batch_size", "is", "None", ":", "\n", "        ", "batch_size", "=", "len", "(", "samples", ")", "\n", "\n", "# add any missing data to samples", "\n", "", "for", "i", ",", "sample", "in", "enumerate", "(", "samples", ")", ":", "\n", "        ", "if", "'id'", "not", "in", "sample", ":", "\n", "            ", "sample", "[", "'id'", "]", "=", "i", "\n", "\n", "# create dataloader", "\n", "", "", "dataset", "=", "TestDataset", "(", "samples", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "collate_fn", "=", "(", "lambda", "samples", ":", "collate", "(", "samples", ",", "padding_idx", ",", "eos_idx", ")", ")", ",", "\n", ")", "\n", "return", "iter", "(", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.sequence_generator_setup": [[55, 117], ["utils.dummy_dictionary", "dummy_dictionary.eos", "torch.LongTensor", "torch.LongTensor", "argparse.Namespace", "utils.TestTranslationTask.setup_task", "TestTranslationTask.setup_task.build_model", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.tests.utils.dummy_dictionary", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.__init__.setup_task", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.build_model"], ["", "def", "sequence_generator_setup", "(", ")", ":", "\n", "# construct dummy dictionary", "\n", "    ", "d", "=", "dummy_dictionary", "(", "vocab_size", "=", "2", ")", "\n", "\n", "eos", "=", "d", ".", "eos", "(", ")", "\n", "w1", "=", "4", "\n", "w2", "=", "5", "\n", "\n", "# construct source data", "\n", "src_tokens", "=", "torch", ".", "LongTensor", "(", "[", "[", "w1", ",", "w2", ",", "eos", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", "]", ")", "\n", "src_lengths", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "2", "]", ")", "\n", "\n", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "unk", "=", "0.", "\n", "args", ".", "beam_probs", "=", "[", "\n", "# step 0:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "# sentence 1:", "\n", "[", "0.0", ",", "unk", ",", "0.9", ",", "0.1", "]", ",", "# beam 1", "\n", "[", "0.0", ",", "unk", ",", "0.9", ",", "0.1", "]", ",", "# beam 2", "\n", "# sentence 2:", "\n", "[", "0.0", ",", "unk", ",", "0.7", ",", "0.3", "]", ",", "\n", "[", "0.0", ",", "unk", ",", "0.7", ",", "0.3", "]", ",", "\n", "]", ")", ",", "\n", "# step 1:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2       prefix", "\n", "# sentence 1:", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "# w1: 0.9  (emit: w1 <eos>: 0.9*1.0)", "\n", "[", "0.0", ",", "unk", ",", "0.9", ",", "0.1", "]", ",", "# w2: 0.1", "\n", "# sentence 2:", "\n", "[", "0.25", ",", "unk", ",", "0.35", ",", "0.4", "]", ",", "# w1: 0.7  (don't emit: w1 <eos>: 0.7*0.25)", "\n", "[", "0.00", ",", "unk", ",", "0.10", ",", "0.9", "]", ",", "# w2: 0.3", "\n", "]", ")", ",", "\n", "# step 2:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2       prefix", "\n", "# sentence 1:", "\n", "[", "0.0", ",", "unk", ",", "0.1", ",", "0.9", "]", ",", "# w2 w1: 0.1*0.9", "\n", "[", "0.6", ",", "unk", ",", "0.2", ",", "0.2", "]", ",", "# w2 w2: 0.1*0.1  (emit: w2 w2 <eos>: 0.1*0.1*0.6)", "\n", "# sentence 2:", "\n", "[", "0.60", ",", "unk", ",", "0.4", ",", "0.00", "]", ",", "# w1 w2: 0.7*0.4  (emit: w1 w2 <eos>: 0.7*0.4*0.6)", "\n", "[", "0.01", ",", "unk", ",", "0.0", ",", "0.99", "]", ",", "# w2 w2: 0.3*0.9", "\n", "]", ")", ",", "\n", "# step 3:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2       prefix", "\n", "# sentence 1:", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "# w2 w1 w2: 0.1*0.9*0.9  (emit: w2 w1 w2 <eos>: 0.1*0.9*0.9*1.0)", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "# w2 w1 w1: 0.1*0.9*0.1  (emit: w2 w1 w1 <eos>: 0.1*0.9*0.1*1.0)", "\n", "# sentence 2:", "\n", "[", "0.1", ",", "unk", ",", "0.5", ",", "0.4", "]", ",", "# w2 w2 w2: 0.3*0.9*0.99  (emit: w2 w2 w2 <eos>: 0.3*0.9*0.99*0.1)", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "# w1 w2 w1: 0.7*0.4*0.4  (emit: w1 w2 w1 <eos>: 0.7*0.4*0.4*1.0)", "\n", "]", ")", ",", "\n", "]", "\n", "\n", "task", "=", "TestTranslationTask", ".", "setup_task", "(", "args", ",", "d", ",", "d", ")", "\n", "model", "=", "task", ".", "build_model", "(", "args", ")", "\n", "tgt_dict", "=", "task", ".", "target_dictionary", "\n", "\n", "return", "tgt_dict", ",", "w1", ",", "w2", ",", "src_tokens", ",", "src_lengths", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.analytics.sentence_bleu.Reference.__init__": [[36, 41], ["line.strip().split", "len", "sentence_bleu.get_ngram_pool", "line.strip"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.analytics.sentence_bleu.get_ngram_pool"], ["    ", "def", "__init__", "(", "self", ",", "line", ",", "ngram", "=", "4", ")", ":", "\n", "        ", "self", ".", "n", "=", "ngram", "\n", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "length", "=", "len", "(", "tokens", ")", "\n", "self", ".", "ngram_pool", "=", "get_ngram_pool", "(", "tokens", ",", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.analytics.sentence_bleu.MultiReference.__init__": [[44, 64], ["len", "len", "range", "dict", "range", "range", "ref.ngram_pool.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ref_list", ")", ":", "\n", "        ", "self", ".", "ref_num", "=", "len", "(", "ref_list", ")", "\n", "self", ".", "sent_num", "=", "len", "(", "ref_list", "[", "0", "]", ")", "\n", "\n", "self", ".", "ngram_pool", "=", "[", "dict", "(", ")", "for", "i", "in", "range", "(", "self", ".", "sent_num", ")", "]", "\n", "self", ".", "length", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "sent_num", ")", ":", "\n", "            ", "length", "=", "[", "]", "\n", "ngrams", "=", "self", ".", "ngram_pool", "[", "i", "]", "\n", "for", "ref_id", "in", "range", "(", "self", ".", "ref_num", ")", ":", "\n", "                ", "ref", "=", "ref_list", "[", "ref_id", "]", "[", "i", "]", "\n", "for", "k", ",", "v", "in", "ref", ".", "ngram_pool", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", "not", "in", "ngrams", ":", "\n", "                        ", "ngrams", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                        ", "if", "v", ">", "ngrams", "[", "k", "]", ":", "\n", "                            ", "ngrams", "[", "k", "]", "=", "v", "\n", "", "", "", "length", "+=", "[", "ref", ".", "length", "]", "\n", "", "self", ".", "length", "+=", "[", "length", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.analytics.sentence_bleu.MultiReference.__getitem__": [[66, 69], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "0", "<=", "index", "<", "self", ".", "sent_num", ",", "'illegal index:{} while sentence num={}'", ".", "format", "(", "index", ",", "self", ".", "sent_num", ")", "\n", "return", "self", ".", "ngram_pool", "[", "index", "]", ",", "self", ".", "length", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.analytics.sentence_bleu.MultiReference.__len__": [[70, 72], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ref_num", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.analytics.sentence_bleu.get_ngram_pool": [[22, 33], ["dict", "len", "range", "range"], "function", ["None"], ["def", "get_ngram_pool", "(", "line", ",", "ngram", ")", ":", "\n", "    ", "pool", "=", "dict", "(", ")", "\n", "length", "=", "len", "(", "line", ")", "\n", "for", "n", "in", "range", "(", "ngram", ")", ":", "\n", "        ", "for", "beg", "in", "range", "(", "length", "-", "n", ")", ":", "\n", "            ", "ngram_str", "=", "' '", ".", "join", "(", "line", "[", "beg", ":", "beg", "+", "n", "+", "1", "]", ")", "\n", "if", "ngram_str", "in", "pool", ":", "\n", "                ", "pool", "[", "ngram_str", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "pool", "[", "ngram_str", "]", "=", "1", "\n", "", "", "", "return", "pool", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.analytics.sentence_bleu.read_ref_file": [[74, 81], ["codecs.open", "sentence_bleu.Reference"], "function", ["None"], ["", "", "def", "read_ref_file", "(", "ref_path", ")", ":", "\n", "    ", "ref_set", "=", "[", "]", "\n", "with", "codecs", ".", "open", "(", "ref_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "l", "in", "f", ":", "\n", "            ", "ref", "=", "Reference", "(", "l", ")", "\n", "ref_set", "+=", "[", "ref", "]", "\n", "", "", "return", "ref_set", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.analytics.sentence_bleu.get_metrics": [[91, 122], ["cand.strip().split.strip().split", "len", "sentence_bleu.get_ngram_pool", "range", "min", "math.exp", "range", "math.log", "sum", "min", "cand.strip().split.strip", "enumerate", "min", "print", "sys.exit", "min", "max", "math.fabs"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.analytics.sentence_bleu.get_ngram_pool", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max"], ["def", "get_metrics", "(", "cand", ",", "ref", ",", "bleu_type", "=", "'NIST'", ")", ":", "\n", "    ", "cand", "=", "cand", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "cand_len", "=", "len", "(", "cand", ")", "\n", "cand_pool", "=", "get_ngram_pool", "(", "cand", ",", "NGRAM", ")", "\n", "\n", "ref_pool", "=", "ref", "[", "0", "]", "\n", "ref_len", "=", "ref", "[", "1", "]", "\n", "\n", "# ngram precision", "\n", "ngram_acc", "=", "[", "0", "]", "*", "NGRAM", "\n", "for", "n", "in", "range", "(", "NGRAM", ")", ":", "\n", "        ", "for", "beg", "in", "range", "(", "cand_len", "-", "n", ")", ":", "\n", "            ", "ngram_str", "=", "' '", ".", "join", "(", "cand", "[", "beg", ":", "beg", "+", "n", "+", "1", "]", ")", "\n", "if", "ngram_str", "in", "ref_pool", ":", "\n", "                ", "ngram_acc", "[", "n", "]", "+=", "min", "(", "ref_pool", "[", "ngram_str", "]", ",", "cand_pool", "[", "ngram_str", "]", ")", "\n", "", "", "", "ngram_acc", "=", "[", "1.0", "*", "(", "v", "+", "1", ")", "/", "(", "max", "(", "0", ",", "cand_len", "-", "i", ")", "+", "1", ")", "for", "i", ",", "v", "in", "enumerate", "(", "ngram_acc", ")", "]", "\n", "ngram_acc", "=", "[", "math", ".", "log", "(", "i", ")", "for", "i", "in", "ngram_acc", "]", "\n", "log_p", "=", "sum", "(", "ngram_acc", ")", "/", "NGRAM", "\n", "\n", "# bp", "\n", "if", "bleu_type", "==", "'NIST'", ":", "\n", "        ", "r", "=", "min", "(", "ref_len", ")", "\n", "", "elif", "bleu_type", "==", "'IBM'", ":", "\n", "        ", "r", "=", "min", "(", "[", "math", ".", "fabs", "(", "l", "-", "cand_len", ")", "for", "l", "in", "ref_len", "]", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'not support bleu type:%s'", "%", "bleu_type", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "", "log_bp", "=", "min", "(", "0", ",", "1", "-", "1.0", "*", "r", "/", "cand_len", ")", "\n", "\n", "log_bleu", "=", "log_p", "+", "log_bp", "\n", "return", "math", ".", "exp", "(", "log_bleu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_training_parser": [[19, 28], ["options.get_parser", "options.add_dataset_args", "options.add_model_parallelism_args", "options.add_distributed_training_args", "options.add_model_args", "options.add_optimization_args", "options.add_checkpoint_args"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_parser", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_dataset_args", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_model_parallelism_args", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_distributed_training_args", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_model_args", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_optimization_args", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_checkpoint_args"], ["def", "get_training_parser", "(", "default_task", "=", "'translation'", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", "'Trainer'", ",", "default_task", ")", "\n", "add_dataset_args", "(", "parser", ",", "train", "=", "True", ")", "\n", "add_model_parallelism_args", "(", "parser", ")", "\n", "add_distributed_training_args", "(", "parser", ")", "\n", "add_model_args", "(", "parser", ")", "\n", "add_optimization_args", "(", "parser", ")", "\n", "add_checkpoint_args", "(", "parser", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_generation_parser": [[30, 38], ["options.get_parser", "options.add_dataset_args", "options.add_model_parallelism_args", "options.add_generation_args", "options.add_interactive_args"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_parser", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_dataset_args", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_model_parallelism_args", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_generation_args", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_interactive_args"], ["", "def", "get_generation_parser", "(", "interactive", "=", "False", ",", "default_task", "=", "'translation'", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", "'Generation'", ",", "default_task", ")", "\n", "add_dataset_args", "(", "parser", ",", "gen", "=", "True", ")", "\n", "add_model_parallelism_args", "(", "parser", ")", "\n", "add_generation_args", "(", "parser", ")", "\n", "if", "interactive", ":", "\n", "        ", "add_interactive_args", "(", "parser", ")", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_interactive_generation_parser": [[40, 42], ["options.get_generation_parser"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_generation_parser"], ["", "def", "get_interactive_generation_parser", "(", "default_task", "=", "'translation'", ")", ":", "\n", "    ", "return", "get_generation_parser", "(", "interactive", "=", "True", ",", "default_task", "=", "default_task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_eval_lm_parser": [[44, 49], ["options.get_parser", "options.add_dataset_args", "options.add_eval_lm_args"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_parser", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_dataset_args", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_eval_lm_args"], ["", "def", "get_eval_lm_parser", "(", "default_task", "=", "'language_modeling'", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", "'Evaluate Language Model'", ",", "default_task", ")", "\n", "add_dataset_args", "(", "parser", ",", "gen", "=", "True", ")", "\n", "add_eval_lm_args", "(", "parser", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.eval_str_list": [[51, 60], ["isinstance", "eval", "list", "map", "type"], "function", ["None"], ["", "def", "eval_str_list", "(", "x", ",", "type", "=", "float", ")", ":", "\n", "    ", "if", "x", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "if", "isinstance", "(", "x", ",", "str", ")", ":", "\n", "        ", "x", "=", "eval", "(", "x", ")", "\n", "", "try", ":", "\n", "        ", "return", "list", "(", "map", "(", "type", ",", "x", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "[", "type", "(", "x", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.eval_bool": [[62, 69], ["bool", "eval"], "function", ["None"], ["", "", "def", "eval_bool", "(", "x", ",", "default", "=", "False", ")", ":", "\n", "    ", "if", "x", "is", "None", ":", "\n", "        ", "return", "default", "\n", "", "try", ":", "\n", "        ", "return", "bool", "(", "eval", "(", "x", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "default", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.parse_args_and_arch": [[71, 121], ["parser.parse_known_args", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "parser.add_argument_group", "ARCH_MODEL_REGISTRY[].add_args", "CRITERION_REGISTRY[].add_args", "OPTIMIZER_REGISTRY[].add_args", "LR_SCHEDULER_REGISTRY[].add_args", "TASK_REGISTRY[].add_args", "parser.parse_known_args", "parser.parse_args", "options.eval_str_list", "options.eval_str_list", "hasattr"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.add_args", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.add_args", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.add_args", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.add_args", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.add_args", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.eval_str_list", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.eval_str_list"], ["", "", "def", "parse_args_and_arch", "(", "parser", ",", "input_args", "=", "None", ",", "parse_known", "=", "False", ")", ":", "\n", "# The parser doesn't know about model/criterion/optimizer-specific args, so", "\n", "# we parse twice. First we parse the model/criterion/optimizer, then we", "\n", "# parse a second time after adding the *-specific arguments.", "\n", "# If input_args is given, we will parse those args instead of sys.argv.", "\n", "    ", "args", ",", "_", "=", "parser", ".", "parse_known_args", "(", "input_args", ")", "\n", "\n", "# Add model-specific args to parser.", "\n", "if", "hasattr", "(", "args", ",", "'arch'", ")", ":", "\n", "        ", "model_specific_group", "=", "parser", ".", "add_argument_group", "(", "\n", "'Model-specific configuration'", ",", "\n", "# Only include attributes which are explicitly given as command-line", "\n", "# arguments or which have default values.", "\n", "argument_default", "=", "argparse", ".", "SUPPRESS", ",", "\n", ")", "\n", "ARCH_MODEL_REGISTRY", "[", "args", ".", "arch", "]", ".", "add_args", "(", "model_specific_group", ")", "\n", "\n", "# Add *-specific args to parser.", "\n", "", "if", "hasattr", "(", "args", ",", "'criterion'", ")", ":", "\n", "        ", "CRITERION_REGISTRY", "[", "args", ".", "criterion", "]", ".", "add_args", "(", "parser", ")", "\n", "", "if", "hasattr", "(", "args", ",", "'optimizer'", ")", ":", "\n", "        ", "OPTIMIZER_REGISTRY", "[", "args", ".", "optimizer", "]", ".", "add_args", "(", "parser", ")", "\n", "", "if", "hasattr", "(", "args", ",", "'lr_scheduler'", ")", ":", "\n", "        ", "LR_SCHEDULER_REGISTRY", "[", "args", ".", "lr_scheduler", "]", ".", "add_args", "(", "parser", ")", "\n", "", "if", "hasattr", "(", "args", ",", "'task'", ")", ":", "\n", "        ", "TASK_REGISTRY", "[", "args", ".", "task", "]", ".", "add_args", "(", "parser", ")", "\n", "\n", "# Parse a second time.", "\n", "", "if", "parse_known", ":", "\n", "        ", "args", ",", "extra", "=", "parser", ".", "parse_known_args", "(", "input_args", ")", "\n", "", "else", ":", "\n", "        ", "args", "=", "parser", ".", "parse_args", "(", "input_args", ")", "\n", "extra", "=", "None", "\n", "\n", "# Post-process args.", "\n", "", "if", "hasattr", "(", "args", ",", "'lr'", ")", ":", "\n", "        ", "args", ".", "lr", "=", "eval_str_list", "(", "args", ".", "lr", ",", "type", "=", "float", ")", "\n", "", "if", "hasattr", "(", "args", ",", "'update_freq'", ")", ":", "\n", "        ", "args", ".", "update_freq", "=", "eval_str_list", "(", "args", ".", "update_freq", ",", "type", "=", "int", ")", "\n", "", "if", "hasattr", "(", "args", ",", "'max_sentences_valid'", ")", "and", "args", ".", "max_sentences_valid", "is", "None", ":", "\n", "        ", "args", ".", "max_sentences_valid", "=", "args", ".", "max_sentences", "\n", "\n", "# Apply architecture configuration.", "\n", "", "if", "hasattr", "(", "args", ",", "'arch'", ")", ":", "\n", "        ", "ARCH_CONFIG_REGISTRY", "[", "args", ".", "arch", "]", "(", "args", ")", "\n", "\n", "", "if", "parse_known", ":", "\n", "        ", "return", "args", ",", "extra", "\n", "", "else", ":", "\n", "        ", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.get_parser": [[123, 146], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "fairseq.tasks.TASK_REGISTRY.keys"], "function", ["None"], ["", "", "def", "get_parser", "(", "desc", ",", "default_task", "=", "'translation'", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--no-progress-bar'", ",", "action", "=", "'store_true'", ",", "help", "=", "'disable progress bar'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'log progress every N batches (when progress bar is disabled)'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb-log-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'tensorboard log progress every N updates (when TensorboardX is available'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-format'", ",", "default", "=", "None", ",", "help", "=", "'log format to use'", ",", "\n", "choices", "=", "[", "'json'", ",", "'none'", ",", "'simple'", ",", "'tqdm'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'pseudo random number generator seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use FP16'", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16-init-scale'", ",", "default", "=", "2", "**", "7", ",", "type", "=", "int", ",", "\n", "help", "=", "'default FP16 loss scale'", ")", "\n", "\n", "# Task definitions can be found under fairseq/tasks/", "\n", "parser", ".", "add_argument", "(", "\n", "'--task'", ",", "metavar", "=", "'TASK'", ",", "default", "=", "default_task", ",", "\n", "choices", "=", "TASK_REGISTRY", ".", "keys", "(", ")", ",", "\n", "help", "=", "'task'", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_dataset_args": [[148, 174], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_dataset_args", "(", "parser", ",", "train", "=", "False", ",", "gen", "=", "False", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Dataset and data loading'", ")", "\n", "group", ".", "add_argument", "(", "'--skip-invalid-size-inputs-valid-test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'ignore too long or too short lines in valid and test set'", ")", "\n", "group", ".", "add_argument", "(", "'--max-tokens'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'maximum number of tokens in a batch'", ")", "\n", "group", ".", "add_argument", "(", "'--max-sentences'", ",", "'--batch-size'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'maximum number of sentences in a batch'", ")", "\n", "if", "train", ":", "\n", "        ", "group", ".", "add_argument", "(", "'--train-subset'", ",", "default", "=", "'train'", ",", "metavar", "=", "'SPLIT'", ",", "\n", "choices", "=", "[", "'train'", ",", "'valid'", ",", "'test'", "]", ",", "\n", "help", "=", "'data subset to use for training (train, valid, test)'", ")", "\n", "group", ".", "add_argument", "(", "'--valid-subset'", ",", "default", "=", "'valid'", ",", "metavar", "=", "'SPLIT'", ",", "\n", "help", "=", "'comma separated list of data subsets to use for validation'", "\n", "' (train, valid, valid1, test, test1)'", ")", "\n", "group", ".", "add_argument", "(", "'--max-sentences-valid'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'maximum number of sentences in a validation batch'", "\n", "' (defaults to --max-sentences)'", ")", "\n", "", "if", "gen", ":", "\n", "        ", "group", ".", "add_argument", "(", "'--gen-subset'", ",", "default", "=", "'test'", ",", "metavar", "=", "'SPLIT'", ",", "\n", "help", "=", "'data subset to generate (train, valid, test)'", ")", "\n", "group", ".", "add_argument", "(", "'--num-shards'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'shard generation over N shards'", ")", "\n", "group", ".", "add_argument", "(", "'--shard-id'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'ID'", ",", "\n", "help", "=", "'id of the shard to generate (id < num_shards)'", ")", "\n", "", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_distributed_training_args": [[176, 198], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "torch.cuda.device_count"], "function", ["None"], ["", "def", "add_distributed_training_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Distributed training'", ")", "\n", "group", ".", "add_argument", "(", "'--distributed-world-size'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "default", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\n", "help", "=", "'total number of GPUs across all nodes (default: all visible GPUs)'", ")", "\n", "group", ".", "add_argument", "(", "'--distributed-rank'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'rank of the current worker'", ")", "\n", "group", ".", "add_argument", "(", "'--distributed-backend'", ",", "default", "=", "'nccl'", ",", "type", "=", "str", ",", "\n", "help", "=", "'distributed backend'", ")", "\n", "group", ".", "add_argument", "(", "'--distributed-init-method'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "'typically tcp://hostname:port that will be used to '", "\n", "'establish initial connetion'", ")", "\n", "group", ".", "add_argument", "(", "'--distributed-port'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'port number (not required if using --distributed-init-method)'", ")", "\n", "group", ".", "add_argument", "(", "'--device-id'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'which GPU to use (usually configured automatically)'", ")", "\n", "group", ".", "add_argument", "(", "'--ddp-backend'", ",", "default", "=", "'c10d'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'c10d'", ",", "'no_c10d'", "]", ",", "\n", "help", "=", "'DistributedDataParallel backend'", ")", "\n", "group", ".", "add_argument", "(", "'--bucket-cap-mb'", ",", "default", "=", "150", ",", "type", "=", "int", ",", "metavar", "=", "'MB'", ",", "\n", "help", "=", "'bucket size for reduction'", ")", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_model_parallelism_args": [[200, 210], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_model_parallelism_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Model Parallelism'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show additional debug info'", ")", "\n", "group", ".", "add_argument", "(", "'--model-parallelism-world-size'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of GPUs per model instance (default: 1)'", ")", "\n", "group", ".", "add_argument", "(", "'--pseudo-sublayers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "default", "=", "0", ",", "\n", "help", "=", "'add pseudo sublayers to make room for both '", "\n", "'embeddings and softmax in the first device'", ")", "\n", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_optimization_args": [[212, 250], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "fairseq.optim.OPTIMIZER_REGISTRY.keys", "fairseq.optim.lr_scheduler.LR_SCHEDULER_REGISTRY.keys"], "function", ["None"], ["", "def", "add_optimization_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Optimization'", ")", "\n", "group", ".", "add_argument", "(", "'--max-epoch'", ",", "'--me'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'force stop training at specified epoch'", ")", "\n", "group", ".", "add_argument", "(", "'--max-update'", ",", "'--mu'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'force stop training at specified update'", ")", "\n", "group", ".", "add_argument", "(", "'--clip-norm'", ",", "default", "=", "25", ",", "type", "=", "float", ",", "metavar", "=", "'NORM'", ",", "\n", "help", "=", "'clip threshold of gradients'", ")", "\n", "group", ".", "add_argument", "(", "'--sentence-avg'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'normalize gradients by the number of sentences in a batch'", "\n", "' (default is to normalize by number of tokens)'", ")", "\n", "group", ".", "add_argument", "(", "'--update-freq'", ",", "default", "=", "'1'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'update parameters every N_i batches, when in epoch i'", ")", "\n", "\n", "# Optimizer definitions can be found under fairseq/optim/", "\n", "group", ".", "add_argument", "(", "'--optimizer'", ",", "default", "=", "'nag'", ",", "metavar", "=", "'OPT'", ",", "\n", "choices", "=", "OPTIMIZER_REGISTRY", ".", "keys", "(", ")", ",", "\n", "help", "=", "'Optimizer'", ")", "\n", "group", ".", "add_argument", "(", "'--lr'", ",", "'--learning-rate'", ",", "default", "=", "'0.25'", ",", "metavar", "=", "'LR_1,LR_2,...,LR_N'", ",", "\n", "help", "=", "'learning rate for the first N epochs; all epochs >N using LR_N'", "\n", "' (note: this may be interpreted differently depending on --lr-scheduler)'", ")", "\n", "group", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.99", ",", "type", "=", "float", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'momentum factor'", ")", "\n", "group", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'WD'", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "\n", "# Learning rate schedulers can be found under fairseq/optim/lr_scheduler/", "\n", "group", ".", "add_argument", "(", "'--lr-scheduler'", ",", "default", "=", "'reduce_lr_on_plateau'", ",", "\n", "choices", "=", "LR_SCHEDULER_REGISTRY", ".", "keys", "(", ")", ",", "\n", "help", "=", "'Learning Rate Scheduler'", ")", "\n", "group", ".", "add_argument", "(", "'--lr-shrink'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "metavar", "=", "'LS'", ",", "\n", "help", "=", "'learning rate shrink factor for annealing, lr_new = (lr * lr_shrink)'", ")", "\n", "group", ".", "add_argument", "(", "'--min-lr'", ",", "default", "=", "1e-5", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'minimum learning rate'", ")", "\n", "group", ".", "add_argument", "(", "'--min-loss-scale'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'minimum loss scale (for FP16 training)'", ")", "\n", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_checkpoint_args": [[252, 277], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_checkpoint_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Checkpointing'", ")", "\n", "group", ".", "add_argument", "(", "'--save-dir'", ",", "metavar", "=", "'DIR'", ",", "default", "=", "'checkpoints'", ",", "\n", "help", "=", "'path to save checkpoints'", ")", "\n", "group", ".", "add_argument", "(", "'--restore-file'", ",", "default", "=", "'checkpoint_last.pt'", ",", "\n", "help", "=", "'filename in save-dir from which to load checkpoint'", ")", "\n", "group", ".", "add_argument", "(", "'--reset-optimizer'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, does not load optimizer state from the checkpoint'", ")", "\n", "group", ".", "add_argument", "(", "'--reset-lr-scheduler'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, does not load lr scheduler state from the checkpoint'", ")", "\n", "group", ".", "add_argument", "(", "'--optimizer-overrides'", ",", "default", "=", "\"{}\"", ",", "type", "=", "str", ",", "metavar", "=", "'DICT'", ",", "\n", "help", "=", "'a dictionary used to override optimizer args when loading a checkpoint'", ")", "\n", "group", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'save a checkpoint every N epochs'", ")", "\n", "group", ".", "add_argument", "(", "'--save-interval-updates'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'save a checkpoint (and validate) every N updates'", ")", "\n", "group", ".", "add_argument", "(", "'--keep-interval-updates'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'keep last N checkpoints saved with --save-interval-updates'", ")", "\n", "group", ".", "add_argument", "(", "'--no-save'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'don\\'t save models or checkpoints'", ")", "\n", "group", ".", "add_argument", "(", "'--no-epoch-checkpoints'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'only store last and best checkpoints'", ")", "\n", "group", ".", "add_argument", "(", "'--validate-interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'validate every N epochs'", ")", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_common_eval_args": [[279, 287], ["group.add_argument", "group.add_argument", "group.add_argument", "group.add_argument"], "function", ["None"], ["", "def", "add_common_eval_args", "(", "group", ")", ":", "\n", "    ", "group", ".", "add_argument", "(", "'--path'", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'path(s) to model file(s), colon separated'", ")", "\n", "group", ".", "add_argument", "(", "'--remove-bpe'", ",", "nargs", "=", "'?'", ",", "const", "=", "'@@ '", ",", "default", "=", "None", ",", "\n", "help", "=", "'remove BPE tokens before scoring'", ")", "\n", "group", ".", "add_argument", "(", "'--cpu'", ",", "action", "=", "'store_true'", ",", "help", "=", "'generate on CPU'", ")", "\n", "group", ".", "add_argument", "(", "'--quiet'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'only print final scores'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_eval_lm_args": [[289, 296], ["parser.add_argument_group", "options.add_common_eval_args", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_common_eval_args"], ["", "def", "add_eval_lm_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'LM Evaluation'", ")", "\n", "add_common_eval_args", "(", "group", ")", "\n", "group", ".", "add_argument", "(", "'--output-word-probs'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, outputs words and their predicted log probabilities to standard output'", ")", "\n", "group", ".", "add_argument", "(", "'--output-word-stats'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, outputs word statistics such as word count, average probability, etc'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_generation_args": [[298, 353], ["parser.add_argument_group", "options.add_common_eval_args", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_common_eval_args"], ["", "def", "add_generation_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Generation'", ")", "\n", "add_common_eval_args", "(", "group", ")", "\n", "group", ".", "add_argument", "(", "'--output-file'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'file name to store nbest hypotheses'", ")", "\n", "group", ".", "add_argument", "(", "'--beam'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'beam size'", ")", "\n", "group", ".", "add_argument", "(", "'--nbest'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of hypotheses to output'", ")", "\n", "group", ".", "add_argument", "(", "'--max-len-a'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "(", "'generate sequences of maximum length ax + b, '", "\n", "'where x is the source length'", ")", ")", "\n", "group", ".", "add_argument", "(", "'--max-len-b'", ",", "default", "=", "200", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "(", "'generate sequences of maximum length ax + b, '", "\n", "'where x is the source length'", ")", ")", "\n", "group", ".", "add_argument", "(", "'--min-len'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "(", "'minimum generation length'", ")", ")", "\n", "group", ".", "add_argument", "(", "'--no-early-stop'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "(", "'continue searching even after finalizing k=beam '", "\n", "'hypotheses; this is more correct, but increases '", "\n", "'generation time by 50%%'", ")", ")", "\n", "group", ".", "add_argument", "(", "'--unnormalized'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'compare unnormalized hypothesis scores'", ")", "\n", "group", ".", "add_argument", "(", "'--no-beamable-mm'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'don\\'t use BeamableMM in attention layers'", ")", "\n", "group", ".", "add_argument", "(", "'--lenpen'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "\n", "help", "=", "'length penalty: <1.0 favors shorter, >1.0 favors longer sentences'", ")", "\n", "group", ".", "add_argument", "(", "'--unkpen'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "\n", "help", "=", "'unknown word penalty: <0 produces more unks, >0 produces fewer'", ")", "\n", "group", ".", "add_argument", "(", "'--replace-unk'", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "None", ",", "\n", "help", "=", "'perform unknown replacement (optionally with alignment dictionary)'", ")", "\n", "group", ".", "add_argument", "(", "'--score-reference'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'just score the reference translation'", ")", "\n", "group", ".", "add_argument", "(", "'--prefix-size'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'PS'", ",", "\n", "help", "=", "'initialize generation by target prefix of given length'", ")", "\n", "group", ".", "add_argument", "(", "'--sampling'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'sample hypotheses instead of using beam search'", ")", "\n", "group", ".", "add_argument", "(", "'--sampling-topk'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "metavar", "=", "'PS'", ",", "\n", "help", "=", "'sample from top K likely next words instead of all words'", ")", "\n", "group", ".", "add_argument", "(", "'--sampling-temperature'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'temperature for random sampling'", ")", "\n", "group", ".", "add_argument", "(", "'--diverse-beam-groups'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of groups for Diverse Beam Search'", ")", "\n", "group", ".", "add_argument", "(", "'--diverse-beam-strength'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'strength of diversity penalty for Diverse Beam Search'", ")", "\n", "group", ".", "add_argument", "(", "'--print-alignment'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, uses attention feedback to compute and print alignment to source tokens'", ")", "\n", "group", ".", "add_argument", "(", "'--model-overrides'", ",", "default", "=", "\"{}\"", ",", "type", "=", "str", ",", "metavar", "=", "'DICT'", ",", "\n", "help", "=", "'a dictionary used to override model args at generation that were used during model training'", ")", "\n", "\n", "group", ".", "add_argument", "(", "'--top-k'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'1 if the target in the top-k predictions during scoring references and 0 otherwise'", ")", "\n", "group", ".", "add_argument", "(", "'--same-file'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'file name to store 0-1 strings'", ")", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_interactive_args": [[355, 359], ["parser.add_argument_group", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_interactive_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Interactive'", ")", "\n", "group", ".", "add_argument", "(", "'--buffer-size'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'read this many sentences into a buffer before processing them'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.add_model_args": [[361, 385], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "fairseq.models.ARCH_MODEL_REGISTRY.keys", "fairseq.criterions.CRITERION_REGISTRY.keys"], "function", ["None"], ["", "def", "add_model_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Model configuration'", ")", "\n", "\n", "# Model definitions can be found under fairseq/models/", "\n", "#", "\n", "# The model architecture can be specified in several ways.", "\n", "# In increasing order of priority:", "\n", "# 1) model defaults (lowest priority)", "\n", "# 2) --arch argument", "\n", "# 3) --encoder/decoder-* arguments (highest priority)", "\n", "group", ".", "add_argument", "(", "\n", "'--arch'", ",", "'-a'", ",", "default", "=", "'fconv'", ",", "metavar", "=", "'ARCH'", ",", "required", "=", "True", ",", "\n", "choices", "=", "ARCH_MODEL_REGISTRY", ".", "keys", "(", ")", ",", "\n", "help", "=", "'Model Architecture'", ",", "\n", ")", "\n", "\n", "# Criterion definitions can be found under fairseq/criterions/", "\n", "group", ".", "add_argument", "(", "\n", "'--criterion'", ",", "default", "=", "'cross_entropy'", ",", "metavar", "=", "'CRIT'", ",", "\n", "choices", "=", "CRITERION_REGISTRY", ".", "keys", "(", ")", ",", "\n", "help", "=", "'Training Criterion'", ",", "\n", ")", "\n", "\n", "return", "group", "\n", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.is_master": [[17, 19], ["None"], "function", ["None"], ["def", "is_master", "(", "args", ")", ":", "\n", "    ", "return", "args", ".", "distributed_rank", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.distributed_init": [[45, 71], ["distributed_utils.suppress_output.print", "init_fn", "ValueError", "distributed_utils.is_master", "distributed_utils.suppress_output"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.is_master", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.suppress_output"], ["", "def", "distributed_init", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "distributed_world_size", "==", "1", ":", "\n", "        ", "raise", "ValueError", "(", "'Cannot initialize distributed with distributed_world_size=1'", ")", "\n", "\n", "", "if", "args", ".", "ddp_backend", "==", "'no_c10d'", ":", "\n", "        ", "_use_c10d", "[", "0", "]", "=", "False", "\n", "\n", "", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "distributed_rank", ",", "args", ".", "distributed_init_method", ")", ",", "flush", "=", "True", ")", "\n", "\n", "if", "_use_c10d", "[", "0", "]", ":", "\n", "        ", "init_fn", "=", "dist_c10d", ".", "init_process_group", "\n", "", "else", ":", "\n", "        ", "init_fn", "=", "dist_no_c10d", ".", "init_process_group", "\n", "\n", "", "init_fn", "(", "\n", "backend", "=", "args", ".", "distributed_backend", ",", "\n", "init_method", "=", "args", ".", "distributed_init_method", ",", "\n", "world_size", "=", "args", ".", "distributed_world_size", ",", "\n", "rank", "=", "args", ".", "distributed_rank", ",", "\n", ")", "\n", "\n", "if", "not", "is_master", "(", "args", ")", ":", "\n", "        ", "suppress_output", "(", ")", "\n", "\n", "", "return", "args", ".", "distributed_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.suppress_output": [[73, 85], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "def", "suppress_output", "(", ")", ":", "\n", "    ", "\"\"\"Suppress printing on the current device. Force printing with `force=True`.\"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "'force'", "in", "kwargs", ":", "\n", "            ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ")", "\n", "if", "force", ":", "\n", "                ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.get_rank": [[87, 92], ["dist_c10d.get_rank", "dist_no_c10d.get_rank"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.get_rank", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "_use_c10d", "[", "0", "]", ":", "\n", "        ", "return", "dist_c10d", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "dist_no_c10d", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.get_world_size": [[94, 99], ["dist_c10d.get_world_size", "dist_no_c10d.get_world_size"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.get_world_size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.get_world_size"], ["", "", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "_use_c10d", "[", "0", "]", ":", "\n", "        ", "return", "dist_c10d", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "dist_no_c10d", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.get_default_group": [[101, 106], ["None"], "function", ["None"], ["", "", "def", "get_default_group", "(", ")", ":", "\n", "    ", "if", "_use_c10d", "[", "0", "]", ":", "\n", "        ", "return", "dist_c10d", ".", "group", ".", "WORLD", "\n", "", "else", ":", "\n", "        ", "return", "dist_no_c10d", ".", "group", ".", "WORLD", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.all_reduce": [[108, 115], ["distributed_utils.get_default_group", "dist_c10d.all_reduce", "dist_no_c10d.all_reduce"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.get_default_group", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.all_reduce"], ["", "", "def", "all_reduce", "(", "tensor", ",", "group", "=", "None", ")", ":", "\n", "    ", "if", "group", "is", "None", ":", "\n", "        ", "group", "=", "get_default_group", "(", ")", "\n", "", "if", "_use_c10d", "[", "0", "]", ":", "\n", "        ", "return", "dist_c10d", ".", "all_reduce", "(", "tensor", ",", "group", "=", "group", ")", "\n", "", "else", ":", "\n", "        ", "return", "dist_no_c10d", ".", "all_reduce", "(", "tensor", ",", "group", "=", "group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.all_gather_list": [[117, 161], ["distributed_utils.get_rank", "distributed_utils.get_world_size", "buffer.zero_", "pickle.dumps", "len", "torch.ByteTensor", "distributed_utils.all_reduce", "range", "torch.cuda.ByteTensor", "ValueError", "list", "hasattr", "all_gather_list._buffer.numel", "fairseq.utils.item", "result.append", "fairseq.utils.item", "pickle.loads", "bytes", "out_buffer[].tolist"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.get_rank", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.get_world_size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["", "", "def", "all_gather_list", "(", "data", ",", "group", "=", "None", ",", "max_size", "=", "16384", ")", ":", "\n", "    ", "\"\"\"Gathers arbitrary data from all nodes into a list.\n\n    Similar to :func:`~torch.distributed.all_gather` but for arbitrary Python\n    data. Note that *data* must be picklable.\n\n    Args:\n        data (Any): data from the local worker to be gathered on other workers\n        group (optional): group of the collective\n        max_size (int, optional): maximum size of the data to be gathered\n            across workers\n    \"\"\"", "\n", "rank", "=", "get_rank", "(", ")", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "buffer_size", "=", "max_size", "*", "world_size", "\n", "if", "not", "hasattr", "(", "all_gather_list", ",", "'_buffer'", ")", "or", "all_gather_list", ".", "_buffer", ".", "numel", "(", ")", "<", "buffer_size", ":", "\n", "        ", "all_gather_list", ".", "_buffer", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "buffer_size", ")", "\n", "", "buffer", "=", "all_gather_list", ".", "_buffer", "\n", "buffer", ".", "zero_", "(", ")", "\n", "\n", "enc", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "enc_size", "=", "len", "(", "enc", ")", "\n", "if", "enc_size", "+", "2", ">", "max_size", ":", "\n", "        ", "raise", "ValueError", "(", "'encoded data exceeds max_size: {}'", ".", "format", "(", "enc_size", "+", "2", ")", ")", "\n", "", "assert", "max_size", "<", "255", "*", "256", "\n", "\n", "buffer_rank", "=", "buffer", "[", "rank", "*", "max_size", ":", "(", "rank", "+", "1", ")", "*", "max_size", "]", "\n", "buffer_rank", "[", "0", "]", "=", "enc_size", "//", "255", "# this encoding works for max_size < 65k", "\n", "buffer_rank", "[", "1", "]", "=", "enc_size", "%", "255", "\n", "buffer_rank", "[", "2", ":", "enc_size", "+", "2", "]", "=", "torch", ".", "ByteTensor", "(", "list", "(", "enc", ")", ")", "\n", "\n", "all_reduce", "(", "buffer", ",", "group", "=", "group", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "        ", "out_buffer", "=", "buffer", "[", "i", "*", "max_size", ":", "(", "i", "+", "1", ")", "*", "max_size", "]", "\n", "size", "=", "(", "255", "*", "utils", ".", "item", "(", "out_buffer", "[", "0", "]", ")", ")", "+", "utils", ".", "item", "(", "out_buffer", "[", "1", "]", ")", "\n", "if", "size", ">", "0", ":", "\n", "            ", "result", ".", "append", "(", "\n", "pickle", ".", "loads", "(", "bytes", "(", "out_buffer", "[", "2", ":", "size", "+", "2", "]", ".", "tolist", "(", ")", ")", ")", "\n", ")", "\n", "", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.multiprocessing_pdb.MultiprocessingPdb.__init__": [[24, 26], ["pdb.Pdb.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pdb", ".", "Pdb", ".", "__init__", "(", "self", ",", "nosigint", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.multiprocessing_pdb.MultiprocessingPdb._cmdloop": [[27, 37], ["multiprocessing_pdb.MultiprocessingPdb.cmdloop", "os.fdopen"], "methods", ["None"], ["", "def", "_cmdloop", "(", "self", ")", ":", "\n", "        ", "stdin_bak", "=", "sys", ".", "stdin", "\n", "with", "self", ".", "_stdin_lock", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "not", "self", ".", "_stdin", ":", "\n", "                    ", "self", ".", "_stdin", "=", "os", ".", "fdopen", "(", "self", ".", "_stdin_fd", ")", "\n", "", "sys", ".", "stdin", "=", "self", ".", "_stdin", "\n", "self", ".", "cmdloop", "(", ")", "\n", "", "finally", ":", "\n", "                ", "sys", ".", "stdin", "=", "stdin_bak", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar.__init__": [[44, 52], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "iterable", ",", "epoch", "=", "None", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "self", ".", "iterable", "=", "iterable", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "prefix", "=", "''", "\n", "if", "epoch", "is", "not", "None", ":", "\n", "            ", "self", ".", "prefix", "+=", "'| epoch {:03d}'", ".", "format", "(", "epoch", ")", "\n", "", "if", "prefix", "is", "not", "None", ":", "\n", "            ", "self", ".", "prefix", "+=", "' | {}'", ".", "format", "(", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar.__enter__": [[53, 55], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar.__exit__": [[56, 58], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "exc", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar.__iter__": [[59, 61], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar.log": [[62, 65], ["None"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "stats", ")", ":", "\n", "        ", "\"\"\"Log intermediate stats according to log_interval.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar.print": [[66, 69], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ",", "stats", ")", ":", "\n", "        ", "\"\"\"Print end-of-epoch stats.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar._str_commas": [[70, 73], ["stats[].strip", "stats.keys"], "methods", ["None"], ["", "def", "_str_commas", "(", "self", ",", "stats", ")", ":", "\n", "        ", "return", "', '", ".", "join", "(", "key", "+", "'='", "+", "stats", "[", "key", "]", ".", "strip", "(", ")", "\n", "for", "key", "in", "stats", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar._str_pipes": [[74, 77], ["stats[].strip", "stats.keys"], "methods", ["None"], ["", "def", "_str_pipes", "(", "self", ",", "stats", ")", ":", "\n", "        ", "return", "' | '", ".", "join", "(", "key", "+", "' '", "+", "stats", "[", "key", "]", ".", "strip", "(", ")", "\n", "for", "key", "in", "stats", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar._format_stats": [[78, 94], ["collections.OrderedDict", "collections.OrderedDict.keys", "isinstance", "isinstance", "isinstance", "str"], "methods", ["None"], ["", "def", "_format_stats", "(", "self", ",", "stats", ")", ":", "\n", "        ", "postfix", "=", "OrderedDict", "(", "stats", ")", "\n", "# Preprocess stats according to datatype", "\n", "for", "key", "in", "postfix", ".", "keys", "(", ")", ":", "\n", "# Number: limit the length of the string", "\n", "            ", "if", "isinstance", "(", "postfix", "[", "key", "]", ",", "Number", ")", ":", "\n", "                ", "postfix", "[", "key", "]", "=", "'{:g}'", ".", "format", "(", "postfix", "[", "key", "]", ")", "\n", "# Meter: display both current and average value", "\n", "", "elif", "isinstance", "(", "postfix", "[", "key", "]", ",", "AverageMeter", ")", ":", "\n", "                ", "postfix", "[", "key", "]", "=", "'{:.2f} ({:.2f})'", ".", "format", "(", "\n", "postfix", "[", "key", "]", ".", "val", ",", "postfix", "[", "key", "]", ".", "avg", ")", "\n", "# Else for any other type, try to get the string conversion", "\n", "", "elif", "not", "isinstance", "(", "postfix", "[", "key", "]", ",", "str", ")", ":", "\n", "                ", "postfix", "[", "key", "]", "=", "str", "(", "postfix", "[", "key", "]", ")", "\n", "# Else if it's a string, don't need to preprocess anything", "\n", "", "", "return", "postfix", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.json_progress_bar.__init__": [[99, 103], ["progress_bar.progress_bar.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "iterable", ",", "epoch", "=", "None", ",", "prefix", "=", "None", ",", "log_interval", "=", "1000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "iterable", ",", "epoch", ",", "prefix", ")", "\n", "self", ".", "log_interval", "=", "log_interval", "\n", "self", ".", "stats", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.json_progress_bar.__iter__": [[104, 113], ["float", "enumerate", "len", "progress_bar.json_progress_bar._format_stats", "progress_bar.json_progress_bar.print"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.json_progress_bar._format_stats", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "size", "=", "float", "(", "len", "(", "self", ".", "iterable", ")", ")", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "self", ".", "iterable", ")", ":", "\n", "            ", "yield", "obj", "\n", "if", "self", ".", "stats", "is", "not", "None", "and", "i", ">", "0", "and", "self", ".", "log_interval", "is", "not", "None", "and", "i", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "update", "=", "self", ".", "epoch", "-", "1", "+", "float", "(", "i", "/", "size", ")", "if", "self", ".", "epoch", "is", "not", "None", "else", "None", "\n", "stats", "=", "self", ".", "_format_stats", "(", "self", ".", "stats", ",", "epoch", "=", "self", ".", "epoch", ",", "update", "=", "update", ")", "\n", "print", "(", "json", ".", "dumps", "(", "stats", ")", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.json_progress_bar.log": [[114, 117], ["None"], "methods", ["None"], ["", "", "", "def", "log", "(", "self", ",", "stats", ")", ":", "\n", "        ", "\"\"\"Log intermediate stats according to log_interval.\"\"\"", "\n", "self", ".", "stats", "=", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.json_progress_bar.print": [[118, 123], ["progress_bar.json_progress_bar._format_stats", "progress_bar.json_progress_bar.print"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.json_progress_bar._format_stats", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], ["", "def", "print", "(", "self", ",", "stats", ")", ":", "\n", "        ", "\"\"\"Print end-of-epoch stats.\"\"\"", "\n", "self", ".", "stats", "=", "stats", "\n", "stats", "=", "self", ".", "_format_stats", "(", "self", ".", "stats", ",", "epoch", "=", "self", ".", "epoch", ")", "\n", "print", "(", "json", ".", "dumps", "(", "stats", ")", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.json_progress_bar._format_stats": [[124, 139], ["collections.OrderedDict", "stats.keys", "isinstance"], "methods", ["None"], ["", "def", "_format_stats", "(", "self", ",", "stats", ",", "epoch", "=", "None", ",", "update", "=", "None", ")", ":", "\n", "        ", "postfix", "=", "OrderedDict", "(", ")", "\n", "if", "epoch", "is", "not", "None", ":", "\n", "            ", "postfix", "[", "'epoch'", "]", "=", "epoch", "\n", "", "if", "update", "is", "not", "None", ":", "\n", "            ", "postfix", "[", "'update'", "]", "=", "update", "\n", "# Preprocess stats according to datatype", "\n", "", "for", "key", "in", "stats", ".", "keys", "(", ")", ":", "\n", "# Meter: display both current and average value", "\n", "            ", "if", "isinstance", "(", "stats", "[", "key", "]", ",", "AverageMeter", ")", ":", "\n", "                ", "postfix", "[", "key", "]", "=", "stats", "[", "key", "]", ".", "val", "\n", "postfix", "[", "key", "+", "'_avg'", "]", "=", "stats", "[", "key", "]", ".", "avg", "\n", "", "else", ":", "\n", "                ", "postfix", "[", "key", "]", "=", "stats", "[", "key", "]", "\n", "", "", "return", "postfix", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.noop_progress_bar.__init__": [[144, 146], ["progress_bar.progress_bar.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "iterable", ",", "epoch", "=", "None", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "iterable", ",", "epoch", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.noop_progress_bar.__iter__": [[147, 150], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "obj", "in", "self", ".", "iterable", ":", "\n", "            ", "yield", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.noop_progress_bar.log": [[151, 154], ["None"], "methods", ["None"], ["", "", "def", "log", "(", "self", ",", "stats", ")", ":", "\n", "        ", "\"\"\"Log intermediate stats according to log_interval.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.noop_progress_bar.print": [[155, 158], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ",", "stats", ")", ":", "\n", "        ", "\"\"\"Print end-of-epoch stats.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.simple_progress_bar.__init__": [[163, 167], ["progress_bar.progress_bar.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "iterable", ",", "epoch", "=", "None", ",", "prefix", "=", "None", ",", "log_interval", "=", "1000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "iterable", ",", "epoch", ",", "prefix", ")", "\n", "self", ".", "log_interval", "=", "log_interval", "\n", "self", ".", "stats", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.simple_progress_bar.__iter__": [[168, 177], ["len", "enumerate", "progress_bar.simple_progress_bar._str_commas", "progress_bar.simple_progress_bar.print"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar._str_commas", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "size", "=", "len", "(", "self", ".", "iterable", ")", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "self", ".", "iterable", ")", ":", "\n", "            ", "yield", "obj", "\n", "if", "self", ".", "stats", "is", "not", "None", "and", "i", ">", "0", "and", "self", ".", "log_interval", "is", "not", "None", "and", "i", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "postfix", "=", "self", ".", "_str_commas", "(", "self", ".", "stats", ")", "\n", "print", "(", "'{}:  {:5d} / {:d} {}'", ".", "format", "(", "self", ".", "prefix", ",", "i", ",", "size", ",", "postfix", ")", ",", "\n", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.simple_progress_bar.log": [[178, 181], ["progress_bar.simple_progress_bar._format_stats"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.json_progress_bar._format_stats"], ["", "", "", "def", "log", "(", "self", ",", "stats", ")", ":", "\n", "        ", "\"\"\"Log intermediate stats according to log_interval.\"\"\"", "\n", "self", ".", "stats", "=", "self", ".", "_format_stats", "(", "stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.simple_progress_bar.print": [[182, 186], ["progress_bar.simple_progress_bar._str_pipes", "progress_bar.simple_progress_bar.print"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar._str_pipes", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], ["", "def", "print", "(", "self", ",", "stats", ")", ":", "\n", "        ", "\"\"\"Print end-of-epoch stats.\"\"\"", "\n", "postfix", "=", "self", ".", "_str_pipes", "(", "self", ".", "_format_stats", "(", "stats", ")", ")", "\n", "print", "(", "'{} | {}'", ".", "format", "(", "self", ".", "prefix", ",", "postfix", ")", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.__init__": [[191, 194], ["progress_bar.progress_bar.__init__", "tqdm.tqdm.tqdm"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "iterable", ",", "epoch", "=", "None", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "iterable", ",", "epoch", ",", "prefix", ")", "\n", "self", ".", "tqdm", "=", "tqdm", "(", "iterable", ",", "self", ".", "prefix", ",", "leave", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.__iter__": [[195, 197], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "tqdm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log": [[198, 201], ["progress_bar.tqdm_progress_bar.tqdm.set_postfix", "progress_bar.tqdm_progress_bar._format_stats"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.json_progress_bar._format_stats"], ["", "def", "log", "(", "self", ",", "stats", ")", ":", "\n", "        ", "\"\"\"Log intermediate stats according to log_interval.\"\"\"", "\n", "self", ".", "tqdm", ".", "set_postfix", "(", "self", ".", "_format_stats", "(", "stats", ")", ",", "refresh", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print": [[202, 206], ["progress_bar.tqdm_progress_bar._str_pipes", "progress_bar.tqdm_progress_bar.tqdm.write", "progress_bar.tqdm_progress_bar._format_stats"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.progress_bar._str_pipes", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.json_progress_bar._format_stats"], ["", "def", "print", "(", "self", ",", "stats", ")", ":", "\n", "        ", "\"\"\"Print end-of-epoch stats.\"\"\"", "\n", "postfix", "=", "self", ".", "_str_pipes", "(", "self", ".", "_format_stats", "(", "stats", ")", ")", "\n", "self", ".", "tqdm", ".", "write", "(", "'{} | {}'", ".", "format", "(", "self", ".", "tqdm", ".", "desc", ",", "postfix", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.build_progress_bar": [[22, 40], ["progress_bar.json_progress_bar", "sys.stderr.isatty", "progress_bar.noop_progress_bar", "progress_bar.simple_progress_bar", "progress_bar.tqdm_progress_bar", "ValueError"], "function", ["None"], ["def", "build_progress_bar", "(", "args", ",", "iterator", ",", "epoch", "=", "None", ",", "prefix", "=", "None", ",", "default", "=", "'tqdm'", ",", "no_progress_bar", "=", "'none'", ")", ":", "\n", "    ", "if", "args", ".", "log_format", "is", "None", ":", "\n", "        ", "args", ".", "log_format", "=", "no_progress_bar", "if", "args", ".", "no_progress_bar", "else", "default", "\n", "\n", "", "if", "args", ".", "log_format", "==", "'tqdm'", "and", "not", "sys", ".", "stderr", ".", "isatty", "(", ")", ":", "\n", "        ", "args", ".", "log_format", "=", "'simple'", "\n", "\n", "", "if", "args", ".", "log_format", "==", "'json'", ":", "\n", "        ", "bar", "=", "json_progress_bar", "(", "iterator", ",", "epoch", ",", "prefix", ",", "args", ".", "log_interval", ")", "\n", "", "elif", "args", ".", "log_format", "==", "'none'", ":", "\n", "        ", "bar", "=", "noop_progress_bar", "(", "iterator", ",", "epoch", ",", "prefix", ")", "\n", "", "elif", "args", ".", "log_format", "==", "'simple'", ":", "\n", "        ", "bar", "=", "simple_progress_bar", "(", "iterator", ",", "epoch", ",", "prefix", ",", "args", ".", "log_interval", ")", "\n", "", "elif", "args", ".", "log_format", "==", "'tqdm'", ":", "\n", "        ", "bar", "=", "tqdm_progress_bar", "(", "iterator", ",", "epoch", ",", "prefix", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown log format: {}'", ".", "format", "(", "args", ".", "log_format", ")", ")", "\n", "", "return", "bar", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_scorer.SequenceScorer.__init__": [[16, 20], ["tgt_dict.pad"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad"], ["def", "__init__", "(", "self", ",", "models", ",", "tgt_dict", ",", "top_k", ")", ":", "\n", "        ", "self", ".", "models", "=", "models", "\n", "self", ".", "pad", "=", "tgt_dict", ".", "pad", "(", ")", "\n", "self", ".", "top_k", "=", "top_k", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_scorer.SequenceScorer.cuda": [[21, 25], ["model.cuda"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "for", "model", "in", "self", ".", "models", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_scorer.SequenceScorer.score_batched_itr": [[26, 58], ["sequence_scorer.SequenceScorer.score", "enumerate", "fairseq.utils.move_to_cuda", "timer.start", "fairseq.utils.strip_pad", "ref.numel", "fairseq.utils.strip_pad", "pos_scores_i.sum", "attn_i.max", "timer.stop"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.score", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.move_to_cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.stop"], ["", "def", "score_batched_itr", "(", "self", ",", "data_itr", ",", "cuda", "=", "False", ",", "timer", "=", "None", ")", ":", "\n", "        ", "\"\"\"Iterate over a batched dataset and yield scored translations.\"\"\"", "\n", "for", "sample", "in", "data_itr", ":", "\n", "            ", "s", "=", "utils", ".", "move_to_cuda", "(", "sample", ")", "if", "cuda", "else", "sample", "\n", "if", "timer", "is", "not", "None", ":", "\n", "                ", "timer", ".", "start", "(", ")", "\n", "", "pos_scores", ",", "attn", ",", "same", "=", "self", ".", "score", "(", "s", ")", "\n", "for", "i", ",", "id", "in", "enumerate", "(", "s", "[", "'id'", "]", ".", "data", ")", ":", "\n", "# remove padding from ref", "\n", "                ", "src", "=", "utils", ".", "strip_pad", "(", "s", "[", "'net_input'", "]", "[", "'src_tokens'", "]", ".", "data", "[", "i", ",", ":", "]", ",", "self", ".", "pad", ")", "\n", "ref", "=", "utils", ".", "strip_pad", "(", "s", "[", "'target'", "]", ".", "data", "[", "i", ",", ":", "]", ",", "self", ".", "pad", ")", "if", "s", "[", "'target'", "]", "is", "not", "None", "else", "None", "\n", "tgt_len", "=", "ref", ".", "numel", "(", ")", "\n", "pos_scores_i", "=", "pos_scores", "[", "i", "]", "[", ":", "tgt_len", "]", "\n", "same_i", "=", "same", "[", "i", "]", "[", ":", "tgt_len", "]", "\n", "score_i", "=", "pos_scores_i", ".", "sum", "(", ")", "/", "tgt_len", "\n", "if", "attn", "is", "not", "None", ":", "\n", "                    ", "attn_i", "=", "attn", "[", "i", "]", "\n", "_", ",", "alignment", "=", "attn_i", ".", "max", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "attn_i", "=", "alignment", "=", "None", "\n", "", "hypos", "=", "[", "{", "\n", "'tokens'", ":", "ref", ",", "\n", "'score'", ":", "score_i", ",", "\n", "'attention'", ":", "attn_i", ",", "\n", "'alignment'", ":", "alignment", ",", "\n", "'positional_scores'", ":", "pos_scores_i", ",", "\n", "'same'", ":", "same_i", ",", "\n", "}", "]", "\n", "if", "timer", "is", "not", "None", ":", "\n", "                    ", "timer", ".", "stop", "(", "s", "[", "'ntokens'", "]", ")", "\n", "# return results in the same format as SequenceGenerator", "\n", "", "yield", "id", ",", "src", ",", "ref", ",", "hypos", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_scorer.SequenceScorer.score": [[59, 95], ["avg_probs.gather.gather.div_", "sequence_scorer.SequenceScorer.in_topk", "avg_probs.gather.gather.log_", "avg_probs.gather.gather.gather", "len", "avg_attn.div_", "avg_probs.gather.gather.squeeze", "torch.no_grad", "model.eval", "model.forward", "model.get_normalized_probs", "avg_probs.gather.gather.add_", "len", "sample[].data.unsqueeze", "type", "avg_attn.add_"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_scorer.SequenceScorer.in_topk", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.forward", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_decoder.FairseqDecoder.get_normalized_probs"], ["", "", "", "def", "score", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"Score a batch of translations.\"\"\"", "\n", "net_input", "=", "sample", "[", "'net_input'", "]", "\n", "\n", "# compute scores for each model in the ensemble", "\n", "avg_probs", "=", "None", "\n", "avg_attn", "=", "None", "\n", "for", "model", "in", "self", ".", "models", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "decoder_out", "=", "model", ".", "forward", "(", "**", "net_input", ")", "\n", "attn", "=", "decoder_out", "[", "1", "]", "\n", "if", "type", "(", "attn", ")", "is", "dict", ":", "\n", "                    ", "attn", "=", "attn", "[", "'attn'", "]", "\n", "\n", "", "", "probs", "=", "model", ".", "get_normalized_probs", "(", "decoder_out", ",", "log_probs", "=", "False", ",", "sample", "=", "sample", ")", ".", "data", "\n", "if", "avg_probs", "is", "None", ":", "\n", "                ", "avg_probs", "=", "probs", "\n", "", "else", ":", "\n", "                ", "avg_probs", ".", "add_", "(", "probs", ")", "\n", "", "if", "attn", "is", "not", "None", ":", "\n", "                ", "attn", "=", "attn", ".", "data", "\n", "if", "avg_attn", "is", "None", ":", "\n", "                    ", "avg_attn", "=", "attn", "\n", "", "else", ":", "\n", "                    ", "avg_attn", ".", "add_", "(", "attn", ")", "\n", "", "", "", "avg_probs", ".", "div_", "(", "len", "(", "self", ".", "models", ")", ")", "\n", "same", "=", "self", ".", "in_topk", "(", "avg_probs", ",", "sample", "[", "'target'", "]", ",", "self", ".", "top_k", ",", "self", ".", "pad", ")", "\n", "avg_probs", ".", "log_", "(", ")", "\n", "if", "avg_attn", "is", "not", "None", ":", "\n", "            ", "avg_attn", ".", "div_", "(", "len", "(", "self", ".", "models", ")", ")", "\n", "", "avg_probs", "=", "avg_probs", ".", "gather", "(", "\n", "dim", "=", "2", ",", "\n", "index", "=", "sample", "[", "'target'", "]", ".", "data", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", ")", "\n", "return", "avg_probs", ".", "squeeze", "(", "2", ")", ",", "avg_attn", ",", "same", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_scorer.SequenceScorer.in_topk": [[96, 113], ["min", "torch.topk", "torch.ne", "labels.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "torch.sum", "torch.ne.long", "predictions.size", "torch.eq", "labels.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "@", "staticmethod", "\n", "def", "in_topk", "(", "predictions", ",", "labels", ",", "k", ",", "pad", ")", ":", "\n", "        ", "\"\"\"\n        Returns a 0-1 tensor with the same shape as labels, 0 implies not in top-k and 1 otherwise\n        :param predictions: B x T x V\n        :param labels: B x T\n        :param k: int\n        :param pad: <pad> index\n        :return: B x T\n        \"\"\"", "\n", "effective_k", "=", "min", "(", "k", ",", "predictions", ".", "size", "(", "-", "1", ")", ")", "\n", "_", ",", "indices", "=", "torch", ".", "topk", "(", "predictions", ",", "effective_k", ")", "# B x T x k", "\n", "padding_mask", "=", "torch", ".", "ne", "(", "labels", ",", "pad", ")", "# B x T", "\n", "labels", "=", "labels", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "indices", ")", "# B x T x k", "\n", "same", "=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "labels", ",", "indices", ")", ",", "-", "1", ")", "# B x T", "\n", "same", "*=", "padding_mask", ".", "long", "(", ")", "\n", "return", "same", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.add_file_to_dictionary_single_worker": [[34, 54], ["collections.Counter", "open", "f.seek", "f.readline", "os.fstat", "tokenizer.safe_readline", "tokenizer.Tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.safe_readline", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.tokenize"], ["    ", "@", "staticmethod", "\n", "def", "add_file_to_dictionary_single_worker", "(", "filename", ",", "tokenize", ",", "eos_word", ",", "worker_id", "=", "0", ",", "num_workers", "=", "1", ")", ":", "\n", "        ", "counter", "=", "Counter", "(", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "size", "=", "os", ".", "fstat", "(", "f", ".", "fileno", "(", ")", ")", ".", "st_size", "\n", "chunk_size", "=", "size", "//", "num_workers", "\n", "offset", "=", "worker_id", "*", "chunk_size", "\n", "end", "=", "offset", "+", "chunk_size", "\n", "f", ".", "seek", "(", "offset", ")", "\n", "if", "offset", ">", "0", ":", "\n", "                ", "safe_readline", "(", "f", ")", "# drop first incomplete line", "\n", "", "line", "=", "f", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "                ", "for", "word", "in", "tokenize", "(", "line", ")", ":", "\n", "                    ", "counter", ".", "update", "(", "[", "word", "]", ")", "\n", "", "counter", ".", "update", "(", "[", "eos_word", "]", ")", "\n", "if", "f", ".", "tell", "(", ")", ">", "end", ":", "\n", "                    ", "break", "\n", "", "line", "=", "f", ".", "readline", "(", ")", "\n", "", "", "return", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.add_file_to_dictionary": [[55, 74], ["counter.items", "multiprocessing.Pool", "range", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "tokenizer.Tokenizer.add_file_to_dictionary.merge_result"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_file_to_dictionary", "(", "filename", ",", "dict", ",", "tokenize", ",", "num_workers", ")", ":", "\n", "        ", "def", "merge_result", "(", "counter", ")", ":", "\n", "            ", "for", "w", ",", "c", "in", "counter", ".", "items", "(", ")", ":", "\n", "                ", "dict", ".", "add_symbol", "(", "w", ",", "c", ")", "\n", "", "", "if", "num_workers", ">", "1", ":", "\n", "            ", "pool", "=", "Pool", "(", "processes", "=", "num_workers", ")", "\n", "results", "=", "[", "]", "\n", "for", "worker_id", "in", "range", "(", "num_workers", ")", ":", "\n", "                ", "results", ".", "append", "(", "pool", ".", "apply_async", "(", "\n", "Tokenizer", ".", "add_file_to_dictionary_single_worker", ",", "\n", "(", "filename", ",", "tokenize", ",", "dict", ".", "eos_word", ",", "worker_id", ",", "num_workers", ")", "\n", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "r", "in", "results", ":", "\n", "                ", "merge_result", "(", "r", ".", "get", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "merge_result", "(", "Tokenizer", ".", "add_file_to_dictionary_single_worker", "(", "filename", ",", "tokenize", ",", "dict", ".", "eos_word", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.binarize": [[75, 105], ["collections.Counter", "open", "f.seek", "tokenizer.safe_readline", "sum", "collections.Counter.update", "tokenizer.Tokenizer.tokenize", "len", "consumer", "f.readline", "collections.Counter.values", "f.tell"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.safe_readline", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.tokenize"], ["", "", "@", "staticmethod", "\n", "def", "binarize", "(", "filename", ",", "dict", ",", "consumer", ",", "tokenize", "=", "tokenize_line", ",", "\n", "append_eos", "=", "True", ",", "reverse_order", "=", "False", ",", "\n", "offset", "=", "0", ",", "end", "=", "-", "1", ")", ":", "\n", "        ", "nseq", ",", "ntok", "=", "0", ",", "0", "\n", "replaced", "=", "Counter", "(", ")", "\n", "def", "replaced_consumer", "(", "word", ",", "idx", ")", ":", "\n", "            ", "if", "idx", "==", "dict", ".", "unk_index", "and", "word", "!=", "dict", ".", "unk_word", ":", "\n", "                ", "replaced", ".", "update", "(", "[", "word", "]", ")", "\n", "", "", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "f", ".", "seek", "(", "offset", ")", "\n", "# next(f) breaks f.tell(), hence readline() must be used", "\n", "line", "=", "safe_readline", "(", "f", ")", "\n", "while", "line", ":", "\n", "                ", "if", "end", ">", "0", "and", "f", ".", "tell", "(", ")", ">", "end", ":", "\n", "                    ", "break", "\n", "", "ids", "=", "Tokenizer", ".", "tokenize", "(", "\n", "line", "=", "line", ",", "\n", "dict", "=", "dict", ",", "\n", "tokenize", "=", "tokenize", ",", "\n", "add_if_not_exist", "=", "False", ",", "\n", "consumer", "=", "replaced_consumer", ",", "\n", "append_eos", "=", "append_eos", ",", "\n", "reverse_order", "=", "reverse_order", ",", "\n", ")", "\n", "nseq", "+=", "1", "\n", "ntok", "+=", "len", "(", "ids", ")", "\n", "consumer", "(", "ids", ")", "\n", "line", "=", "f", ".", "readline", "(", ")", "\n", "", "", "return", "{", "'nseq'", ":", "nseq", ",", "'nunk'", ":", "sum", "(", "replaced", ".", "values", "(", ")", ")", ",", "'ntok'", ":", "ntok", ",", "'replaced'", ":", "replaced", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.find_offsets": [[106, 117], ["open", "range", "os.fstat", "f.seek", "tokenizer.safe_readline", "f.tell", "f.fileno", "range"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.safe_readline"], ["", "@", "staticmethod", "\n", "def", "find_offsets", "(", "filename", ",", "num_chunks", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "size", "=", "os", ".", "fstat", "(", "f", ".", "fileno", "(", ")", ")", ".", "st_size", "\n", "chunk_size", "=", "size", "//", "num_chunks", "\n", "offsets", "=", "[", "0", "for", "_", "in", "range", "(", "num_chunks", "+", "1", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "num_chunks", ")", ":", "\n", "                ", "f", ".", "seek", "(", "chunk_size", "*", "i", ")", "\n", "safe_readline", "(", "f", ")", "\n", "offsets", "[", "i", "]", "=", "f", ".", "tell", "(", ")", "\n", "", "return", "offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.tokenize": [[118, 138], ["tokenizer.Tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.tokenize"], ["", "", "@", "staticmethod", "\n", "def", "tokenize", "(", "line", ",", "dict", ",", "tokenize", "=", "tokenize_line", ",", "add_if_not_exist", "=", "True", ",", "\n", "consumer", "=", "None", ",", "append_eos", "=", "True", ",", "reverse_order", "=", "False", ")", ":", "\n", "        ", "words", "=", "tokenize", "(", "line", ")", "\n", "if", "reverse_order", ":", "\n", "            ", "words", "=", "list", "(", "reversed", "(", "words", ")", ")", "\n", "", "nwords", "=", "len", "(", "words", ")", "\n", "ids", "=", "torch", ".", "IntTensor", "(", "nwords", "+", "1", "if", "append_eos", "else", "nwords", ")", "\n", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "            ", "if", "add_if_not_exist", ":", "\n", "                ", "idx", "=", "dict", ".", "add_symbol", "(", "word", ")", "\n", "", "else", ":", "\n", "                ", "idx", "=", "dict", ".", "index", "(", "word", ")", "\n", "", "if", "consumer", "is", "not", "None", ":", "\n", "                ", "consumer", "(", "word", ",", "idx", ")", "\n", "", "ids", "[", "i", "]", "=", "idx", "\n", "", "if", "append_eos", ":", "\n", "            ", "ids", "[", "nwords", "]", "=", "dict", ".", "eos_index", "\n", "", "return", "ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.tokenize_line": [[17, 21], ["SPACE_NORMALIZER.sub", "line.strip.strip", "line.strip.split"], "function", ["None"], ["def", "tokenize_line", "(", "line", ")", ":", "\n", "    ", "line", "=", "SPACE_NORMALIZER", ".", "sub", "(", "\" \"", ",", "line", ")", "\n", "line", "=", "line", ".", "strip", "(", ")", "\n", "return", "line", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.safe_readline": [[23, 31], ["f.tell", "f.readline", "f.seek"], "function", ["None"], ["", "def", "safe_readline", "(", "f", ")", ":", "\n", "    ", "pos", "=", "f", ".", "tell", "(", ")", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "f", ".", "readline", "(", ")", "\n", "", "except", "UnicodeDecodeError", ":", "\n", "            ", "pos", "-=", "1", "\n", "f", ".", "seek", "(", "pos", ")", "# search where this character begins", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.__init__": [[39, 45], ["bleu.BleuStat", "bleu.Scorer.reset"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "pad", ",", "eos", ",", "unk", ")", ":", "\n", "        ", "self", ".", "stat", "=", "BleuStat", "(", ")", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "unk", "=", "unk", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.reset": [[46, 51], ["C.bleu_one_init", "C.bleu_zero_init", "ctypes.byref", "ctypes.byref"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "one_init", "=", "False", ")", ":", "\n", "        ", "if", "one_init", ":", "\n", "            ", "C", ".", "bleu_one_init", "(", "ctypes", ".", "byref", "(", "self", ".", "stat", ")", ")", "\n", "", "else", ":", "\n", "            ", "C", ".", "bleu_zero_init", "(", "ctypes", ".", "byref", "(", "self", ".", "stat", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.add": [[52, 76], ["ref.clone", "rref.contiguous().view.contiguous().view.contiguous().view", "pred.contiguous().view.contiguous().view.contiguous().view", "C.bleu_add", "isinstance", "TypeError", "isinstance", "TypeError", "rref.contiguous().view.contiguous().view.lt().any", "ctypes.byref", "ctypes.c_size_t", "ctypes.c_void_p", "ctypes.c_size_t", "ctypes.c_void_p", "ctypes.c_int", "ctypes.c_int", "rref.contiguous().view.contiguous().view.eq", "rref.contiguous().view.contiguous().view.contiguous", "pred.contiguous().view.contiguous().view.contiguous", "rref.contiguous().view.contiguous().view.size", "rref.contiguous().view.contiguous().view.data_ptr", "pred.contiguous().view.contiguous().view.size", "pred.contiguous().view.contiguous().view.data_ptr", "type", "type", "rref.contiguous().view.contiguous().view.lt"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "", "def", "add", "(", "self", ",", "ref", ",", "pred", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "ref", ",", "torch", ".", "IntTensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'ref must be a torch.IntTensor (got {})'", "\n", ".", "format", "(", "type", "(", "ref", ")", ")", ")", "\n", "", "if", "not", "isinstance", "(", "pred", ",", "torch", ".", "IntTensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'pred must be a torch.IntTensor(got {})'", "\n", ".", "format", "(", "type", "(", "pred", ")", ")", ")", "\n", "\n", "# don't match unknown words", "\n", "", "rref", "=", "ref", ".", "clone", "(", ")", "\n", "assert", "not", "rref", ".", "lt", "(", "0", ")", ".", "any", "(", ")", "\n", "rref", "[", "rref", ".", "eq", "(", "self", ".", "unk", ")", "]", "=", "-", "999", "\n", "\n", "rref", "=", "rref", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "pred", "=", "pred", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "C", ".", "bleu_add", "(", "\n", "ctypes", ".", "byref", "(", "self", ".", "stat", ")", ",", "\n", "ctypes", ".", "c_size_t", "(", "rref", ".", "size", "(", "0", ")", ")", ",", "\n", "ctypes", ".", "c_void_p", "(", "rref", ".", "data_ptr", "(", ")", ")", ",", "\n", "ctypes", ".", "c_size_t", "(", "pred", ".", "size", "(", "0", ")", ")", ",", "\n", "ctypes", ".", "c_void_p", "(", "pred", ".", "data_ptr", "(", ")", ")", ",", "\n", "ctypes", ".", "c_int", "(", "self", ".", "pad", ")", ",", "\n", "ctypes", ".", "c_int", "(", "self", ".", "eos", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.score": [[77, 81], ["sum", "bleu.Scorer.brevity", "math.exp", "math.log", "float", "bleu.Scorer.precision"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.brevity", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.precision"], ["", "def", "score", "(", "self", ",", "order", "=", "4", ")", ":", "\n", "        ", "psum", "=", "sum", "(", "math", ".", "log", "(", "p", ")", "if", "p", ">", "0", "else", "float", "(", "'-Inf'", ")", "\n", "for", "p", "in", "self", ".", "precision", "(", ")", "[", ":", "order", "]", ")", "\n", "return", "self", ".", "brevity", "(", ")", "*", "math", ".", "exp", "(", "psum", "/", "order", ")", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.precision": [[82, 91], ["bleu.Scorer.precision.ratio"], "methods", ["None"], ["", "def", "precision", "(", "self", ")", ":", "\n", "        ", "def", "ratio", "(", "a", ",", "b", ")", ":", "\n", "            ", "return", "a", "/", "b", "if", "b", ">", "0", "else", "0", "\n", "\n", "", "return", "[", "\n", "ratio", "(", "self", ".", "stat", ".", "match1", ",", "self", ".", "stat", ".", "count1", ")", ",", "\n", "ratio", "(", "self", ".", "stat", ".", "match2", ",", "self", ".", "stat", ".", "count2", ")", ",", "\n", "ratio", "(", "self", ".", "stat", ".", "match3", ",", "self", ".", "stat", ".", "count3", ")", ",", "\n", "ratio", "(", "self", ".", "stat", ".", "match4", ",", "self", ".", "stat", ".", "count4", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.brevity": [[93, 96], ["min", "math.exp"], "methods", ["None"], ["", "def", "brevity", "(", "self", ")", ":", "\n", "        ", "r", "=", "self", ".", "stat", ".", "reflen", "/", "self", ".", "stat", ".", "predlen", "\n", "return", "min", "(", "1", ",", "math", ".", "exp", "(", "1", "-", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.result_string": [[97, 107], ["range", "fmt.format", "bleu.Scorer.score", "bleu.Scorer.brevity", "bleu.Scorer.precision"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.score", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.brevity", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.precision"], ["", "def", "result_string", "(", "self", ",", "order", "=", "4", ")", ":", "\n", "        ", "assert", "order", "<=", "4", ",", "\"BLEU scores for order > 4 aren't supported\"", "\n", "fmt", "=", "'BLEU{} = {:2.2f}, {:2.1f}'", "\n", "for", "_", "in", "range", "(", "1", ",", "order", ")", ":", "\n", "            ", "fmt", "+=", "'/{:2.1f}'", "\n", "", "fmt", "+=", "' (BP={:.3f}, ratio={:.3f}, syslen={}, reflen={})'", "\n", "bleup", "=", "[", "p", "*", "100", "for", "p", "in", "self", ".", "precision", "(", ")", "[", ":", "order", "]", "]", "\n", "return", "fmt", ".", "format", "(", "order", ",", "self", ".", "score", "(", "order", "=", "order", ")", ",", "*", "bleup", ",", "\n", "self", ".", "brevity", "(", ")", ",", "self", ".", "stat", ".", "predlen", "/", "self", ".", "stat", ".", "reflen", ",", "\n", "self", ".", "stat", ".", "predlen", ",", "self", ".", "stat", ".", "reflen", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.__init__": [[33, 72], ["criterion.cuda", "collections.OrderedDict", "fairseq.meters.AverageMeter", "fairseq.meters.AverageMeter", "fairseq.meters.AverageMeter", "fairseq.meters.AverageMeter", "fairseq.meters.TimeMeter", "fairseq.meters.TimeMeter", "fairseq.meters.AverageMeter", "fairseq.meters.AverageMeter", "fairseq.meters.AverageMeter", "fairseq.meters.AverageMeter", "fairseq.meters.AverageMeter", "fairseq.meters.TimeMeter", "fairseq.meters.StopwatchMeter", "torch.cuda.is_available", "NotImplementedError", "model.half", "trainer.Trainer._model.cuda", "fairseq.meters.AverageMeter"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda"], ["def", "__init__", "(", "self", ",", "args", ",", "task", ",", "model", ",", "criterion", ",", "dummy_batch", ")", ":", "\n", "\n", "        ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Training on CPU is not supported'", ")", "\n", "\n", "", "self", ".", "args", "=", "args", "\n", "self", ".", "task", "=", "task", "\n", "\n", "# copy model and criterion to current device", "\n", "self", ".", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "self", ".", "_model", "=", "model", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_model", "=", "model", "\n", "", "self", ".", "_model", "=", "self", ".", "_model", ".", "cuda", "(", ")", "if", "args", ".", "model_parallelism_world_size", "==", "1", "else", "self", ".", "_model", "\n", "\n", "# initialize meters", "\n", "self", ".", "meters", "=", "OrderedDict", "(", ")", "\n", "self", ".", "meters", "[", "'train_loss'", "]", "=", "AverageMeter", "(", ")", "\n", "self", ".", "meters", "[", "'train_nll_loss'", "]", "=", "AverageMeter", "(", ")", "\n", "self", ".", "meters", "[", "'valid_loss'", "]", "=", "AverageMeter", "(", ")", "\n", "self", ".", "meters", "[", "'valid_nll_loss'", "]", "=", "AverageMeter", "(", ")", "\n", "self", ".", "meters", "[", "'wps'", "]", "=", "TimeMeter", "(", ")", "# words per second", "\n", "self", ".", "meters", "[", "'ups'", "]", "=", "TimeMeter", "(", ")", "# updates per second", "\n", "self", ".", "meters", "[", "'wpb'", "]", "=", "AverageMeter", "(", ")", "# words per batch", "\n", "self", ".", "meters", "[", "'bsz'", "]", "=", "AverageMeter", "(", ")", "# sentences per batch", "\n", "self", ".", "meters", "[", "'gnorm'", "]", "=", "AverageMeter", "(", ")", "# gradient norm", "\n", "self", ".", "meters", "[", "'clip'", "]", "=", "AverageMeter", "(", ")", "# % of updates clipped", "\n", "self", ".", "meters", "[", "'oom'", "]", "=", "AverageMeter", "(", ")", "# out of memory", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "self", ".", "meters", "[", "'loss_scale'", "]", "=", "AverageMeter", "(", ")", "# dynamic loss scale", "\n", "", "self", ".", "meters", "[", "'wall'", "]", "=", "TimeMeter", "(", ")", "# wall time in seconds", "\n", "self", ".", "meters", "[", "'train_wall'", "]", "=", "StopwatchMeter", "(", ")", "# train wall time in seconds", "\n", "\n", "self", ".", "_dummy_batch", "=", "dummy_batch", "\n", "self", ".", "_num_updates", "=", "0", "\n", "self", ".", "_optim_history", "=", "None", "\n", "self", ".", "_optimizer", "=", "None", "\n", "self", ".", "_wrapped_model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.model": [[73, 83], ["fairseq.models.DistributedFairseqModel"], "methods", ["None"], ["", "@", "property", "\n", "def", "model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_wrapped_model", "is", "None", ":", "\n", "            ", "if", "self", ".", "args", ".", "distributed_world_size", ">", "1", ":", "\n", "                ", "self", ".", "_wrapped_model", "=", "models", ".", "DistributedFairseqModel", "(", "\n", "self", ".", "args", ",", "self", ".", "_model", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_wrapped_model", "=", "self", ".", "_model", "\n", "", "", "return", "self", ".", "_wrapped_model", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.optimizer": [[84, 89], ["trainer.Trainer._build_optimizer"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer._build_optimizer"], ["", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_optimizer", "is", "None", ":", "\n", "            ", "self", ".", "_build_optimizer", "(", ")", "\n", "", "return", "self", ".", "_optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer._build_optimizer": [[90, 103], ["fairseq.optim.lr_scheduler.build_lr_scheduler", "list", "fairseq.optim.FP16Optimizer.build_optimizer", "fairseq.optim.build_optimizer", "print", "filter", "print", "trainer.Trainer.model.parameters", "torch.cuda.get_device_capability", "trainer.Trainer.model.parameters", "torch.cuda.get_device_capability"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.__init__.build_lr_scheduler", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.__init__.build_optimizer", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.__init__.build_optimizer", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], ["", "def", "_build_optimizer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "fp16", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "get_device_capability", "(", "0", ")", "[", "0", "]", "<", "7", ":", "\n", "                ", "print", "(", "'| WARNING: your device does NOT support faster training with --fp16, '", "\n", "'please switch to FP32 which is likely to be faster'", ")", "\n", "", "params", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ")", "\n", "self", ".", "_optimizer", "=", "optim", ".", "FP16Optimizer", ".", "build_optimizer", "(", "self", ".", "args", ",", "params", ")", "\n", "", "else", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "get_device_capability", "(", "0", ")", "[", "0", "]", ">=", "7", ":", "\n", "                ", "print", "(", "'| NOTICE: your device may support faster training with --fp16'", ")", "\n", "", "self", ".", "_optimizer", "=", "optim", ".", "build_optimizer", "(", "self", ".", "args", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "", "self", ".", "lr_scheduler", "=", "lr_scheduler", ".", "build_lr_scheduler", "(", "self", ".", "args", ",", "self", ".", "_optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.save_checkpoint": [[104, 111], ["fairseq.distributed_utils.is_master", "fairseq.utils.save_state", "trainer.Trainer.get_model"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.is_master", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.save_state", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_model"], ["", "def", "save_checkpoint", "(", "self", ",", "filename", ",", "extra_state", ")", ":", "\n", "        ", "\"\"\"Save all training state in a checkpoint file.\"\"\"", "\n", "if", "distributed_utils", ".", "is_master", "(", "self", ".", "args", ")", ":", "# only save one checkpoint", "\n", "            ", "extra_state", "[", "'train_meters'", "]", "=", "self", ".", "meters", "\n", "utils", ".", "save_state", "(", "\n", "filename", ",", "self", ".", "args", ",", "self", ".", "get_model", "(", ")", ",", "self", ".", "criterion", ",", "self", ".", "optimizer", ",", "\n", "self", ".", "lr_scheduler", ",", "self", ".", "_num_updates", ",", "self", ".", "_optim_history", ",", "extra_state", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.load_checkpoint": [[113, 144], ["fairseq.utils.load_model_state", "trainer.Trainer.get_model", "trainer.Trainer._build_optimizer", "trainer.Trainer.optimizer.load_state_dict", "trainer.Trainer.meters.update", "trainer.Trainer.meters.values", "trainer.Trainer.lr_scheduler.load_state_dict", "isinstance", "meter.reset"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_model_state", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_model", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer._build_optimizer", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.load_state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.load_state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.reset"], ["", "", "def", "load_checkpoint", "(", "self", ",", "filename", ",", "reset_optimizer", "=", "False", ",", "reset_lr_scheduler", "=", "False", ",", "optimizer_overrides", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load all training state from a checkpoint file.\"\"\"", "\n", "extra_state", ",", "self", ".", "_optim_history", ",", "last_optim_state", "=", "utils", ".", "load_model_state", "(", "filename", ",", "self", ".", "get_model", "(", ")", ")", "\n", "if", "last_optim_state", "is", "not", "None", "and", "not", "reset_optimizer", ":", "\n", "# rebuild optimizer after loading model, since params may have changed", "\n", "            ", "self", ".", "_build_optimizer", "(", ")", "\n", "\n", "# only reload optimizer and lr_scheduler if they match", "\n", "last_optim", "=", "self", ".", "_optim_history", "[", "-", "1", "]", "\n", "assert", "last_optim", "[", "'criterion_name'", "]", "==", "self", ".", "criterion", ".", "__class__", ".", "__name__", ",", "'criterion does not match; please reset the optimizer (--reset-optimizer)'", "\n", "assert", "last_optim", "[", "'optimizer_name'", "]", "==", "self", ".", "optimizer", ".", "__class__", ".", "__name__", ",", "'optimizer does not match; please reset the optimizer (--reset-optimizer)'", "\n", "\n", "if", "not", "reset_lr_scheduler", ":", "\n", "                ", "self", ".", "lr_scheduler", ".", "load_state_dict", "(", "last_optim", "[", "'lr_scheduler_state'", "]", ")", "\n", "", "self", ".", "optimizer", ".", "load_state_dict", "(", "last_optim_state", ",", "optimizer_overrides", ")", "\n", "\n", "self", ".", "_num_updates", "=", "last_optim", "[", "'num_updates'", "]", "\n", "\n", "", "if", "extra_state", "is", "not", "None", "and", "'train_meters'", "in", "extra_state", ":", "\n", "            ", "self", ".", "meters", ".", "update", "(", "extra_state", "[", "'train_meters'", "]", ")", "\n", "del", "extra_state", "[", "'train_meters'", "]", "\n", "\n", "# reset TimeMeters, since their start times don't make sense anymore", "\n", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "meter", ",", "TimeMeter", ")", ":", "\n", "                    ", "meter", ".", "reset", "(", ")", "\n", "\n", "", "", "", "return", "extra_state", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.train_step": [[145, 268], ["torch.manual_seed", "torch.cuda.manual_seed", "trainer.Trainer.model.train", "trainer.Trainer.zero_grad", "enumerate", "trainer.Trainer.criterion.__class__.aggregate_logging_outputs", "trainer.Trainer.criterion.__class__.grad_denom", "trainer.Trainer.meters[].stop", "trainer.Trainer.get_num_updates", "trainer.Trainer.meters[].start", "trainer.Trainer._prepare_sample", "zip", "list", "list", "sum", "print", "trainer.Trainer.zero_grad", "all", "Exception", "trainer.Trainer.optimizer.multiply_grads", "trainer.Trainer.optimizer.clip_grad_norm", "trainer.Trainer.optimizer.step", "trainer.Trainer.lr_scheduler.step_update", "trainer.Trainer.get", "trainer.Trainer.get", "trainer.Trainer.meters[].update", "trainer.Trainer.meters[].update", "trainer.Trainer.meters[].update", "trainer.Trainer.meters[].update", "trainer.Trainer.meters[].update", "trainer.Trainer.meters[].update", "trainer.Trainer.meters[].update", "trainer.Trainer.meters[].update", "trainer.Trainer.meters[].reset", "trainer.Trainer.meters[].update", "trainer.Trainer._prepare_sample", "trainer.Trainer.task.get_loss", "trainer.Trainer.optimizer.backward", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "trainer.Trainer.get", "trainer.Trainer.meters[].update", "print", "trainer.Trainer.zero_grad", "list.append", "list.append", "fairseq.distributed_utils.all_gather_list", "float", "trainer.Trainer.get", "str", "print", "trainer.Trainer.zero_grad", "str", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.None.train.train", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.zero_grad", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.aggregate_logging_outputs", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.fairseq_criterion.FairseqCriterion.grad_denom", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.stop", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_num_updates", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer._prepare_sample", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.zero_grad", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.multiply_grads", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.clip_grad_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step_update", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.reset", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer._prepare_sample", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.get_loss", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.scalar_bias.ScalarBias.backward", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.zero_grad", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.all_gather_list", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.zero_grad"], ["", "def", "train_step", "(", "self", ",", "samples", ",", "dummy_batch", "=", "False", ")", ":", "\n", "        ", "\"\"\"Do forward, backward and parameter update.\"\"\"", "\n", "# Set seed based on args.seed and the update number so that we get", "\n", "# reproducible results when resuming from checkpoints", "\n", "seed", "=", "self", ".", "args", ".", "seed", "+", "self", ".", "get_num_updates", "(", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "zero_grad", "(", ")", "\n", "\n", "if", "not", "dummy_batch", ":", "\n", "            ", "self", ".", "meters", "[", "'train_wall'", "]", ".", "start", "(", ")", "\n", "\n", "# forward and backward pass", "\n", "", "logging_outputs", ",", "sample_sizes", ",", "ooms", "=", "[", "]", ",", "[", "]", ",", "0", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "samples", ")", ":", "\n", "            ", "sample", "=", "self", ".", "_prepare_sample", "(", "sample", ")", "\n", "if", "sample", "is", "None", ":", "\n", "# when sample is None, run forward/backward on a dummy batch", "\n", "# and ignore the resulting gradients", "\n", "                ", "sample", "=", "self", ".", "_prepare_sample", "(", "self", ".", "_dummy_batch", ")", "\n", "ignore_grad", "=", "True", "\n", "", "else", ":", "\n", "                ", "ignore_grad", "=", "False", "\n", "\n", "", "try", ":", "\n", "# forward", "\n", "                ", "loss", ",", "sample_size", ",", "logging_output", "=", "self", ".", "task", ".", "get_loss", "(", "\n", "self", ".", "model", ",", "self", ".", "criterion", ",", "sample", ",", "\n", ")", "\n", "if", "ignore_grad", ":", "\n", "                    ", "loss", "*=", "0", "\n", "\n", "", "if", "self", ".", "args", ".", "distributed_world_size", ">", "1", ":", "\n", "# only all-reduce gradients in the last backwards pass", "\n", "                    ", "if", "i", "<", "len", "(", "samples", ")", "-", "1", ":", "\n", "                        ", "self", ".", "model", ".", "need_reduction", "=", "False", "\n", "", "else", ":", "\n", "                        ", "self", ".", "model", ".", "need_reduction", "=", "True", "\n", "\n", "# backward", "\n", "", "", "self", ".", "optimizer", ".", "backward", "(", "loss", ")", "\n", "\n", "if", "not", "ignore_grad", ":", "\n", "                    ", "logging_outputs", ".", "append", "(", "logging_output", ")", "\n", "sample_sizes", ".", "append", "(", "sample_size", ")", "\n", "", "", "except", "RuntimeError", "as", "e", ":", "\n", "                ", "if", "'out of memory'", "in", "str", "(", "e", ")", ":", "\n", "                    ", "print", "(", "'| WARNING: ran out of memory, skipping batch'", ")", "\n", "ooms", "+=", "1", "\n", "self", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "e", "\n", "\n", "", "", "", "if", "dummy_batch", ":", "\n", "            ", "return", "None", "\n", "\n", "# gather logging outputs from all replicas", "\n", "", "if", "self", ".", "args", ".", "distributed_world_size", ">", "1", ":", "\n", "            ", "logging_outputs", ",", "sample_sizes", ",", "ooms", "=", "zip", "(", "*", "distributed_utils", ".", "all_gather_list", "(", "\n", "[", "logging_outputs", ",", "sample_sizes", ",", "ooms", "]", ",", "\n", ")", ")", "\n", "logging_outputs", "=", "list", "(", "chain", ".", "from_iterable", "(", "logging_outputs", ")", ")", "\n", "sample_sizes", "=", "list", "(", "chain", ".", "from_iterable", "(", "sample_sizes", ")", ")", "\n", "ooms", "=", "sum", "(", "ooms", ")", "\n", "\n", "", "if", "ooms", "==", "self", ".", "args", ".", "distributed_world_size", ":", "\n", "            ", "print", "(", "'| WARNING: OOM in all workers, skipping update'", ")", "\n", "self", ".", "zero_grad", "(", ")", "\n", "return", "None", "\n", "\n", "# aggregate logging outputs and sample sizes", "\n", "", "logging_output", "=", "self", ".", "criterion", ".", "__class__", ".", "aggregate_logging_outputs", "(", "logging_outputs", ")", "\n", "sample_size", "=", "self", ".", "criterion", ".", "__class__", ".", "grad_denom", "(", "sample_sizes", ")", "\n", "\n", "if", "not", "all", "(", "k", "in", "logging_output", "for", "k", "in", "[", "'ntokens'", ",", "'nsentences'", "]", ")", ":", "\n", "            ", "raise", "Exception", "(", "(", "\n", "'Please update the {}.aggregate_logging_outputs() method to '", "\n", "'return ntokens and nsentences'", "\n", ")", ".", "format", "(", "self", ".", "criterion", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "try", ":", "\n", "# normalize grads by sample size", "\n", "            ", "self", ".", "optimizer", ".", "multiply_grads", "(", "self", ".", "args", ".", "distributed_world_size", "/", "float", "(", "sample_size", ")", ")", "\n", "\n", "# clip grads", "\n", "grad_norm", "=", "self", ".", "optimizer", ".", "clip_grad_norm", "(", "self", ".", "args", ".", "clip_norm", ")", "\n", "\n", "# take an optimization step", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "_num_updates", "+=", "1", "\n", "\n", "# update learning rate", "\n", "self", ".", "lr_scheduler", ".", "step_update", "(", "self", ".", "_num_updates", ")", "\n", "\n", "# update meters", "\n", "ntokens", "=", "logging_output", ".", "get", "(", "'ntokens'", ",", "0", ")", "\n", "nsentences", "=", "logging_output", ".", "get", "(", "'nsentences'", ",", "0", ")", "\n", "self", ".", "meters", "[", "'wps'", "]", ".", "update", "(", "ntokens", ")", "\n", "self", ".", "meters", "[", "'ups'", "]", ".", "update", "(", "1.", ")", "\n", "self", ".", "meters", "[", "'wpb'", "]", ".", "update", "(", "ntokens", ")", "\n", "self", ".", "meters", "[", "'bsz'", "]", ".", "update", "(", "nsentences", ")", "\n", "self", ".", "meters", "[", "'gnorm'", "]", ".", "update", "(", "grad_norm", ")", "\n", "self", ".", "meters", "[", "'clip'", "]", ".", "update", "(", "\n", "1.", "if", "grad_norm", ">", "self", ".", "args", ".", "clip_norm", "and", "self", ".", "args", ".", "clip_norm", ">", "0", "else", "0.", "\n", ")", "\n", "self", ".", "meters", "[", "'oom'", "]", ".", "update", "(", "ooms", ")", "\n", "self", ".", "meters", "[", "'train_loss'", "]", ".", "update", "(", "logging_output", ".", "get", "(", "'loss'", ",", "0", ")", ",", "sample_size", ")", "\n", "if", "'nll_loss'", "in", "logging_output", ":", "\n", "                ", "self", ".", "meters", "[", "'train_nll_loss'", "]", ".", "update", "(", "logging_output", ".", "get", "(", "'nll_loss'", ",", "0", ")", ",", "ntokens", ")", "\n", "", "", "except", "OverflowError", "as", "e", ":", "\n", "            ", "print", "(", "'| WARNING: overflow detected, '", "+", "str", "(", "e", ")", ")", "\n", "self", ".", "zero_grad", "(", ")", "\n", "logging_output", "=", "None", "\n", "\n", "", "if", "self", ".", "args", ".", "fp16", ":", "\n", "            ", "self", ".", "meters", "[", "'loss_scale'", "]", ".", "reset", "(", ")", "\n", "self", ".", "meters", "[", "'loss_scale'", "]", ".", "update", "(", "self", ".", "optimizer", ".", "scaler", ".", "loss_scale", ")", "\n", "\n", "", "self", ".", "meters", "[", "'train_wall'", "]", ".", "stop", "(", ")", "\n", "\n", "return", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.valid_step": [[269, 321], ["trainer.Trainer.criterion.__class__.aggregate_logging_outputs", "trainer.Trainer.criterion.__class__.grad_denom", "list.get", "trainer.Trainer.meters[].update", "torch.no_grad", "trainer.Trainer.model.eval", "trainer.Trainer._prepare_sample", "zip", "list", "list", "list.get", "trainer.Trainer.meters[].update", "trainer.Trainer._prepare_sample", "trainer.Trainer.task.get_loss", "list.get", "fairseq.distributed_utils.all_gather_list", "print", "trainer.Trainer.model.parameters", "torch.cuda.empty_cache", "trainer.Trainer.valid_step", "str"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.aggregate_logging_outputs", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.fairseq_criterion.FairseqCriterion.grad_denom", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer._prepare_sample", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer._prepare_sample", "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.get_loss", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.distributed_utils.all_gather_list", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.valid_step"], ["", "def", "valid_step", "(", "self", ",", "sample", ",", "raise_oom", "=", "False", ")", ":", "\n", "        ", "\"\"\"Do forward pass in evaluation mode.\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "sample", "=", "self", ".", "_prepare_sample", "(", "sample", ")", "\n", "if", "sample", "is", "None", ":", "\n", "                ", "sample", "=", "self", ".", "_prepare_sample", "(", "self", ".", "_dummy_batch", ")", "\n", "ignore_results", "=", "True", "\n", "", "else", ":", "\n", "                ", "ignore_results", "=", "False", "\n", "\n", "", "try", ":", "\n", "                ", "_loss", ",", "sample_size", ",", "logging_output", "=", "self", ".", "task", ".", "get_loss", "(", "\n", "self", ".", "model", ",", "self", ".", "criterion", ",", "sample", ",", "\n", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "                ", "if", "'out of memory'", "in", "str", "(", "e", ")", "and", "not", "raise_oom", ":", "\n", "                    ", "print", "(", "'| WARNING: ran out of memory, retrying batch'", ")", "\n", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "                        ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                            ", "del", "p", ".", "grad", "# free some memory", "\n", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "self", ".", "valid_step", "(", "sample", ",", "raise_oom", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "e", "\n", "\n", "", "", "if", "ignore_results", ":", "\n", "                ", "logging_output", ",", "sample_size", "=", "{", "}", ",", "0", "\n", "\n", "# gather logging outputs from all replicas", "\n", "", "", "if", "self", ".", "args", ".", "distributed_world_size", ">", "1", ":", "\n", "            ", "logging_output", ",", "sample_size", "=", "zip", "(", "*", "distributed_utils", ".", "all_gather_list", "(", "\n", "[", "logging_output", ",", "sample_size", "]", ",", "\n", ")", ")", "\n", "logging_output", "=", "list", "(", "logging_output", ")", "\n", "sample_size", "=", "list", "(", "sample_size", ")", "\n", "", "else", ":", "\n", "            ", "logging_output", "=", "[", "logging_output", "]", "\n", "sample_size", "=", "[", "sample_size", "]", "\n", "\n", "# aggregate logging outputs and sample sizes", "\n", "", "logging_output", "=", "self", ".", "criterion", ".", "__class__", ".", "aggregate_logging_outputs", "(", "logging_output", ")", "\n", "sample_size", "=", "self", ".", "criterion", ".", "__class__", ".", "grad_denom", "(", "sample_size", ")", "\n", "\n", "# update meters for validation", "\n", "ntokens", "=", "logging_output", ".", "get", "(", "'ntokens'", ",", "0", ")", "\n", "self", ".", "meters", "[", "'valid_loss'", "]", ".", "update", "(", "logging_output", ".", "get", "(", "'loss'", ",", "0", ")", ",", "sample_size", ")", "\n", "if", "'nll_loss'", "in", "logging_output", ":", "\n", "            ", "self", ".", "meters", "[", "'valid_nll_loss'", "]", ".", "update", "(", "logging_output", ".", "get", "(", "'nll_loss'", ",", "0", ")", ",", "ntokens", ")", "\n", "\n", "", "return", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.dummy_train_step": [[322, 326], ["trainer.Trainer.train_step", "trainer.Trainer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.train_step", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.zero_grad"], ["", "def", "dummy_train_step", "(", "self", ",", "dummy_batch", ")", ":", "\n", "        ", "\"\"\"Dummy training step for warming caching allocator.\"\"\"", "\n", "self", ".", "train_step", "(", "dummy_batch", ",", "dummy_batch", "=", "True", ")", "\n", "self", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.zero_grad": [[327, 329], ["trainer.Trainer.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.lr_step": [[330, 333], ["trainer.Trainer.lr_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step"], ["", "def", "lr_step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Adjust the learning rate based on the validation loss.\"\"\"", "\n", "return", "self", ".", "lr_scheduler", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.lr_step_update": [[334, 337], ["trainer.Trainer.lr_scheduler.step_update"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step_update"], ["", "def", "lr_step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "return", "self", ".", "lr_scheduler", ".", "step_update", "(", "num_updates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_lr": [[338, 341], ["trainer.Trainer.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the current learning rate.\"\"\"", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_model": [[342, 345], ["None"], "methods", ["None"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the (non-wrapped) model instance.\"\"\"", "\n", "return", "self", ".", "_model", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_meter": [[346, 351], ["None"], "methods", ["None"], ["", "def", "get_meter", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Get a specific meter by name.\"\"\"", "\n", "if", "name", "not", "in", "self", ".", "meters", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "meters", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.get_num_updates": [[352, 355], ["None"], "methods", ["None"], ["", "def", "get_num_updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the number of parameters updates.\"\"\"", "\n", "return", "self", ".", "_num_updates", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer._prepare_sample": [[356, 360], ["fairseq.utils.move_to_cuda", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.move_to_cuda"], ["", "def", "_prepare_sample", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "sample", "is", "None", "or", "len", "(", "sample", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "utils", ".", "move_to_cuda", "(", "sample", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.AverageMeter.__init__": [[13, 15], ["meters.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.AverageMeter.reset": [[16, 21], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.AverageMeter.update": [[22, 27], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.TimeMeter.__init__": [[31, 33], ["meters.TimeMeter.reset"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.reset"], ["def", "__init__", "(", "self", ",", "init", "=", "0", ")", ":", "\n", "        ", "self", ".", "reset", "(", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.TimeMeter.reset": [[34, 38], ["time.time"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "init", "=", "0", ")", ":", "\n", "        ", "self", ".", "init", "=", "init", "\n", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "n", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.TimeMeter.update": [[39, 41], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", "=", "1", ")", ":", "\n", "        ", "self", ".", "n", "+=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.TimeMeter.avg": [[42, 45], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "/", "self", ".", "elapsed_time", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.TimeMeter.elapsed_time": [[46, 49], ["time.time"], "methods", ["None"], ["", "@", "property", "\n", "def", "elapsed_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "init", "+", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.__init__": [[53, 55], ["meters.StopwatchMeter.reset"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.start": [[56, 58], ["time.time"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.stop": [[59, 65], ["time.time"], "methods", ["None"], ["", "def", "stop", "(", "self", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "start_time", "is", "not", "None", ":", "\n", "            ", "delta", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "sum", "+=", "delta", "\n", "self", ".", "n", "+=", "n", "\n", "self", ".", "start_time", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.reset": [[66, 70], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum", "=", "0", "\n", "self", ".", "n", "=", "0", "\n", "self", ".", "start_time", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.avg": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sum", "/", "self", ".", "n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.Search.__init__": [[13, 21], ["tgt_dict.pad", "tgt_dict.unk", "tgt_dict.eos", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["    ", "def", "__init__", "(", "self", ",", "tgt_dict", ")", ":", "\n", "        ", "self", ".", "pad", "=", "tgt_dict", ".", "pad", "(", ")", "\n", "self", ".", "unk", "=", "tgt_dict", ".", "unk", "(", ")", "\n", "self", ".", "eos", "=", "tgt_dict", ".", "eos", "(", ")", "\n", "self", ".", "vocab_size", "=", "len", "(", "tgt_dict", ")", "\n", "self", ".", "scores_buf", "=", "None", "\n", "self", ".", "indices_buf", "=", "None", "\n", "self", ".", "beams_buf", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.Search._init_buffers": [[22, 27], ["t.new", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "_init_buffers", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "scores_buf", "is", "None", ":", "\n", "            ", "self", ".", "scores_buf", "=", "t", ".", "new", "(", ")", "\n", "self", ".", "indices_buf", "=", "torch", ".", "LongTensor", "(", ")", ".", "to", "(", "device", "=", "t", ".", "device", ")", "\n", "self", ".", "beams_buf", "=", "torch", ".", "LongTensor", "(", ")", ".", "to", "(", "device", "=", "t", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.Search.step": [[28, 49], ["None"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "step", ",", "lprobs", ",", "scores", ",", "beam_size", ")", ":", "\n", "        ", "\"\"\"Take a single search step.\n\n        Args:\n            step: the current search step, starting at 0\n            lprobs: (bsz x input_beam_size x vocab_size)\n                the model's log-probabilities over the vocabulary at the current step\n            scores: (bsz x input_beam_size x step)\n                the historical model scores of each hypothesis up to this point\n\n        Return: A tuple of (scores, indices, beams) where:\n            scores: (bsz x output_beam_size)\n                the scores of the chosen elements; output_beam_size can be\n                larger than input_beam_size, e.g., we may return\n                2*input_beam_size to account for EOS\n            indices: (bsz x output_beam_size)\n                the indices of the chosen elements\n            beams: (bsz x output_beam_size)\n                the hypothesis ids of the chosen elements, in the range [0, input_beam_size)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.BeamSearch.__init__": [[53, 55], ["search.Search.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tgt_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tgt_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.BeamSearch.step": [[56, 81], ["search.Search._init_buffers", "lprobs[].contiguous.size", "torch.topk", "torch.div", "search.BeamSearch.indices_buf.fmod_", "lprobs[].contiguous", "lprobs[].contiguous.add_", "lprobs[].contiguous.view", "scores[].unsqueeze", "min", "lprobs[].contiguous.view().size", "lprobs[].contiguous.view"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.Search._init_buffers", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "step", "(", "self", ",", "step", ",", "lprobs", ",", "scores", ")", ":", "\n", "        ", "super", "(", ")", ".", "_init_buffers", "(", "lprobs", ")", "\n", "bsz", ",", "beam_size", ",", "vocab_size", "=", "lprobs", ".", "size", "(", ")", "\n", "\n", "if", "step", "==", "0", ":", "\n", "# at the first step all hypotheses are equally likely, so use", "\n", "# only the first beam", "\n", "            ", "lprobs", "=", "lprobs", "[", ":", ",", ":", ":", "beam_size", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "# make probs contain cumulative scores for each hypothesis", "\n", "            ", "lprobs", ".", "add_", "(", "scores", "[", ":", ",", ":", ",", "step", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "", "torch", ".", "topk", "(", "\n", "lprobs", ".", "view", "(", "bsz", ",", "-", "1", ")", ",", "\n", "k", "=", "min", "(", "\n", "# Take the best 2 x beam_size predictions. We'll choose the first", "\n", "# beam_size of these which don't predict eos to continue with.", "\n", "beam_size", "*", "2", ",", "\n", "lprobs", ".", "view", "(", "bsz", ",", "-", "1", ")", ".", "size", "(", "1", ")", "-", "1", ",", "# -1 so we never select pad", "\n", ")", ",", "\n", "out", "=", "(", "self", ".", "scores_buf", ",", "self", ".", "indices_buf", ")", ",", "\n", ")", "\n", "torch", ".", "div", "(", "self", ".", "indices_buf", ",", "vocab_size", ",", "out", "=", "self", ".", "beams_buf", ")", "\n", "self", ".", "indices_buf", ".", "fmod_", "(", "vocab_size", ")", "\n", "return", "self", ".", "scores_buf", ",", "self", ".", "indices_buf", ",", "self", ".", "beams_buf", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.DiverseBeamSearch.__init__": [[93, 99], ["search.Search.__init__", "search.BeamSearch"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "tgt_dict", ",", "num_groups", ",", "diversity_strength", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tgt_dict", ")", "\n", "self", ".", "num_groups", "=", "num_groups", "\n", "self", ".", "diversity_strength", "=", "-", "diversity_strength", "\n", "self", ".", "diversity_buf", "=", "None", "\n", "self", ".", "beam", "=", "BeamSearch", "(", "tgt_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.DiverseBeamSearch.step": [[100, 144], ["search.Search._init_buffers", "lprobs.size", "torch.zeros", "range", "torch.stack().view", "torch.stack().view", "torch.stack().view", "ValueError", "lprobs.new", "lprobs[].size", "search.DiverseBeamSearch.beam.step", "beams_buf.mul_().add_", "scores_G.append", "indices_G.append", "beams_G.append", "search.DiverseBeamSearch.diversity_buf.scatter_add_", "torch.add", "lprobs_g.contiguous.contiguous.contiguous", "scores_buf.clone", "indices_buf.clone", "beams_buf.clone", "search.DiverseBeamSearch.diversity_buf.new_ones", "torch.stack", "torch.stack", "torch.stack", "search.DiverseBeamSearch.diversity_buf.unsqueeze", "beams_buf.mul_", "indices_buf.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.Search._init_buffers", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.add", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "step", "(", "self", ",", "step", ",", "lprobs", ",", "scores", ")", ":", "\n", "        ", "super", "(", ")", ".", "_init_buffers", "(", "lprobs", ")", "\n", "bsz", ",", "beam_size", ",", "vocab_size", "=", "lprobs", ".", "size", "(", ")", "\n", "if", "beam_size", "%", "self", ".", "num_groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'DiverseBeamSearch requires --beam to be divisible by the number of groups'", "\n", ")", "\n", "", "group_size", "=", "beam_size", "//", "self", ".", "num_groups", "\n", "\n", "# initialize diversity penalty", "\n", "if", "self", ".", "diversity_buf", "is", "None", ":", "\n", "            ", "self", ".", "diversity_buf", "=", "lprobs", ".", "new", "(", ")", "\n", "", "torch", ".", "zeros", "(", "lprobs", "[", ":", ",", "0", ",", ":", "]", ".", "size", "(", ")", ",", "out", "=", "self", ".", "diversity_buf", ")", "\n", "\n", "scores_G", ",", "indices_G", ",", "beams_G", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "g", "in", "range", "(", "self", ".", "num_groups", ")", ":", "\n", "            ", "lprobs_g", "=", "lprobs", "[", ":", ",", "g", ":", ":", "self", ".", "num_groups", ",", ":", "]", "\n", "scores_g", "=", "scores", "[", ":", ",", "g", ":", ":", "self", ".", "num_groups", ",", ":", "]", "if", "step", ">", "0", "else", "None", "\n", "\n", "# apply diversity penalty", "\n", "if", "g", ">", "0", ":", "\n", "                ", "lprobs_g", "=", "torch", ".", "add", "(", "lprobs_g", ",", "self", ".", "diversity_strength", ",", "self", ".", "diversity_buf", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "lprobs_g", "=", "lprobs_g", ".", "contiguous", "(", ")", "\n", "\n", "", "scores_buf", ",", "indices_buf", ",", "beams_buf", "=", "self", ".", "beam", ".", "step", "(", "step", ",", "lprobs_g", ",", "scores_g", ")", "\n", "beams_buf", ".", "mul_", "(", "self", ".", "num_groups", ")", ".", "add_", "(", "g", ")", "\n", "\n", "scores_G", ".", "append", "(", "scores_buf", ".", "clone", "(", ")", ")", "\n", "indices_G", ".", "append", "(", "indices_buf", ".", "clone", "(", ")", ")", "\n", "beams_G", ".", "append", "(", "beams_buf", ".", "clone", "(", ")", ")", "\n", "\n", "# update diversity penalty", "\n", "self", ".", "diversity_buf", ".", "scatter_add_", "(", "\n", "1", ",", "\n", "indices_buf", ",", "\n", "self", ".", "diversity_buf", ".", "new_ones", "(", "indices_buf", ".", "size", "(", ")", ")", "\n", ")", "\n", "\n", "# interleave results from different groups", "\n", "", "self", ".", "scores_buf", "=", "torch", ".", "stack", "(", "scores_G", ",", "dim", "=", "2", ",", "out", "=", "self", ".", "scores_buf", ")", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "self", ".", "indices_buf", "=", "torch", ".", "stack", "(", "indices_G", ",", "dim", "=", "2", ",", "out", "=", "self", ".", "indices_buf", ")", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "self", ".", "beams_buf", "=", "torch", ".", "stack", "(", "beams_G", ",", "dim", "=", "2", ",", "out", "=", "self", ".", "beams_buf", ")", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "return", "self", ".", "scores_buf", ",", "self", ".", "indices_buf", ",", "self", ".", "beams_buf", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.Sampling.__init__": [[148, 152], ["search.Search.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tgt_dict", ",", "sampling_topk", "=", "-", "1", ",", "sampling_temperature", "=", "1.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tgt_dict", ")", "\n", "self", ".", "sampling_topk", "=", "sampling_topk", "\n", "self", ".", "sampling_temperature", "=", "sampling_temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.Sampling.step": [[153, 229], ["search.Search._init_buffers", "lprobs[].contiguous.size", "lprobs_nopad.div_.div_.exp_", "torch.gather", "search.Sampling.scores_buf.log_().view", "search.Sampling.indices_buf.add_", "lprobs[].contiguous", "lprobs_nopad.div_.div_.topk", "lprobs_nopad.div_.div_.div_", "torch.multinomial().view", "torch.multinomial().view", "probs_nopad.expand.expand.expand", "torch.gather().squeeze", "search.Sampling.indices_buf.new_zeros", "torch.arange().repeat", "search.Sampling.scores_buf.add_", "search.Sampling.indices_buf.unsqueeze", "search.Sampling.scores_buf.log_", "torch.gather", "torch.multinomial", "torch.multinomial", "torch.gather", "torch.arange", "probs_nopad.expand.expand.view", "probs_nopad.expand.expand.view", "topk_indices.expand", "search.Sampling.indices_buf.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.search.Search._init_buffers", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "step", "(", "self", ",", "step", ",", "lprobs", ",", "scores", ")", ":", "\n", "        ", "super", "(", ")", ".", "_init_buffers", "(", "lprobs", ")", "\n", "bsz", ",", "beam_size", ",", "vocab_size", "=", "lprobs", ".", "size", "(", ")", "\n", "\n", "if", "step", "==", "0", ":", "\n", "# at the first step all hypotheses are equally likely, so use", "\n", "# only the first beam", "\n", "            ", "lprobs", "=", "lprobs", "[", ":", ",", ":", ":", "beam_size", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "# we exclude the first two vocab items, one of which is pad", "\n", "", "assert", "self", ".", "pad", "==", "1", ",", "'sampling assumes the first two symbols can be ignored'", "\n", "lprobs_nopad", "=", "lprobs", "[", ":", ",", ":", ",", "2", ":", "]", "\n", "\n", "# only sample from top-k candidates", "\n", "if", "self", ".", "sampling_topk", ">", "0", ":", "\n", "            ", "lprobs_nopad", ",", "topk_indices", "=", "lprobs_nopad", ".", "topk", "(", "self", ".", "sampling_topk", ")", "\n", "\n", "# sampling temperature", "\n", "", "if", "self", ".", "sampling_temperature", "!=", "1.", ":", "\n", "            ", "lprobs_nopad", "=", "lprobs_nopad", ".", "div_", "(", "self", ".", "sampling_temperature", ")", "\n", "\n", "# sample", "\n", "", "probs_nopad", "=", "lprobs_nopad", ".", "exp_", "(", ")", "\n", "if", "step", "==", "0", ":", "\n", "            ", "self", ".", "indices_buf", "=", "torch", ".", "multinomial", "(", "\n", "probs_nopad", ".", "view", "(", "bsz", ",", "-", "1", ")", ",", "\n", "beam_size", ",", "\n", "replacement", "=", "True", ",", "\n", "out", "=", "self", ".", "indices_buf", ",", "\n", ")", ".", "view", "(", "bsz", ",", "beam_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "indices_buf", "=", "torch", ".", "multinomial", "(", "\n", "probs_nopad", ".", "view", "(", "bsz", "*", "beam_size", ",", "-", "1", ")", ",", "\n", "1", ",", "\n", "replacement", "=", "True", ",", "\n", "out", "=", "self", ".", "indices_buf", ",", "\n", ")", ".", "view", "(", "bsz", ",", "beam_size", ")", "\n", "\n", "", "if", "step", "==", "0", ":", "\n", "# expand to beam size", "\n", "            ", "probs_nopad", "=", "probs_nopad", ".", "expand", "(", "bsz", ",", "beam_size", ",", "-", "1", ")", "\n", "\n", "# gather scores", "\n", "", "torch", ".", "gather", "(", "\n", "probs_nopad", ",", "\n", "dim", "=", "2", ",", "\n", "index", "=", "self", ".", "indices_buf", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "out", "=", "self", ".", "scores_buf", ",", "\n", ")", "\n", "self", ".", "scores_buf", "=", "self", ".", "scores_buf", ".", "log_", "(", ")", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "\n", "# remap indices if using top-k sampling", "\n", "if", "self", ".", "sampling_topk", ">", "0", ":", "\n", "            ", "self", ".", "indices_buf", "=", "torch", ".", "gather", "(", "\n", "topk_indices", ".", "expand", "(", "bsz", ",", "beam_size", ",", "-", "1", ")", ",", "\n", "dim", "=", "2", ",", "\n", "index", "=", "self", ".", "indices_buf", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "# remap indices since we excluded the first two vocab items", "\n", "", "self", ".", "indices_buf", ".", "add_", "(", "2", ")", "\n", "\n", "if", "step", "==", "0", ":", "\n", "            ", "self", ".", "beams_buf", "=", "self", ".", "indices_buf", ".", "new_zeros", "(", "bsz", ",", "beam_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "beams_buf", "=", "torch", ".", "arange", "(", "0", ",", "beam_size", ",", "out", "=", "self", ".", "beams_buf", ")", ".", "repeat", "(", "bsz", ",", "1", ")", "\n", "# make scores cumulative", "\n", "self", ".", "scores_buf", ".", "add_", "(", "\n", "torch", ".", "gather", "(", "\n", "scores", "[", ":", ",", ":", ",", "step", "-", "1", "]", ",", "\n", "dim", "=", "1", ",", "\n", "index", "=", "self", ".", "beams_buf", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "self", ".", "scores_buf", ",", "self", ".", "indices_buf", ",", "self", ".", "beams_buf", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.__init__": [[17, 56], ["tgt_dict.pad", "tgt_dict.unk", "tgt_dict.eos", "len", "min", "min", "fairseq.search.Sampling", "m.max_decoder_positions", "fairseq.search.DiverseBeamSearch", "fairseq.search.BeamSearch"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.max_decoder_positions"], ["    ", "def", "__init__", "(", "\n", "self", ",", "models", ",", "tgt_dict", ",", "beam_size", "=", "1", ",", "minlen", "=", "1", ",", "maxlen", "=", "None", ",", "stop_early", "=", "True", ",", "\n", "normalize_scores", "=", "True", ",", "len_penalty", "=", "1", ",", "unk_penalty", "=", "0", ",", "retain_dropout", "=", "False", ",", "\n", "sampling", "=", "False", ",", "sampling_topk", "=", "-", "1", ",", "sampling_temperature", "=", "1", ",", "\n", "diverse_beam_groups", "=", "-", "1", ",", "diverse_beam_strength", "=", "0.5", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Generates translations of a given source sentence.\n        Args:\n            min/maxlen: The length of the generated output will be bounded by\n                minlen and maxlen (not including the end-of-sentence marker).\n            stop_early: Stop generation immediately after we finalize beam_size\n                hypotheses, even though longer hypotheses might have better\n                normalized scores.\n            normalize_scores: Normalize scores by the length of the output.\n        \"\"\"", "\n", "self", ".", "models", "=", "models", "\n", "self", ".", "pad", "=", "tgt_dict", ".", "pad", "(", ")", "\n", "self", ".", "unk", "=", "tgt_dict", ".", "unk", "(", ")", "\n", "self", ".", "eos", "=", "tgt_dict", ".", "eos", "(", ")", "\n", "self", ".", "vocab_size", "=", "len", "(", "tgt_dict", ")", "\n", "self", ".", "beam_size", "=", "beam_size", "\n", "self", ".", "minlen", "=", "minlen", "\n", "max_decoder_len", "=", "min", "(", "m", ".", "max_decoder_positions", "(", ")", "for", "m", "in", "self", ".", "models", ")", "\n", "max_decoder_len", "-=", "1", "# we define maxlen not including the EOS marker", "\n", "self", ".", "maxlen", "=", "max_decoder_len", "if", "maxlen", "is", "None", "else", "min", "(", "maxlen", ",", "max_decoder_len", ")", "\n", "self", ".", "stop_early", "=", "stop_early", "\n", "self", ".", "normalize_scores", "=", "normalize_scores", "\n", "self", ".", "len_penalty", "=", "len_penalty", "\n", "self", ".", "unk_penalty", "=", "unk_penalty", "\n", "self", ".", "retain_dropout", "=", "retain_dropout", "\n", "\n", "assert", "sampling_topk", "<", "0", "or", "sampling", ",", "'--sampling-topk requires --sampling'", "\n", "\n", "if", "sampling", ":", "\n", "            ", "self", ".", "search", "=", "search", ".", "Sampling", "(", "tgt_dict", ",", "sampling_topk", ",", "sampling_temperature", ")", "\n", "", "elif", "diverse_beam_groups", ">", "0", ":", "\n", "            ", "self", ".", "search", "=", "search", ".", "DiverseBeamSearch", "(", "tgt_dict", ",", "diverse_beam_groups", ",", "diverse_beam_strength", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "search", "=", "search", ".", "BeamSearch", "(", "tgt_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda": [[57, 61], ["model.cuda"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda"], ["", "", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "for", "model", "in", "self", ".", "models", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate_batched_itr": [[62, 104], ["encoder_input[].size", "enumerate", "fairseq.utils.move_to_cuda", "timer.start", "torch.no_grad", "sequence_generator.SequenceGenerator.generate", "timer.stop", "fairseq.utils.strip_pad", "input.items", "sum", "fairseq.utils.strip_pad", "int", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.move_to_cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.meters.StopwatchMeter.stop", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.strip_pad"], ["", "def", "generate_batched_itr", "(", "\n", "self", ",", "data_itr", ",", "beam_size", "=", "None", ",", "maxlen_a", "=", "0.0", ",", "maxlen_b", "=", "None", ",", "\n", "cuda", "=", "False", ",", "timer", "=", "None", ",", "prefix_size", "=", "0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Iterate over a batched dataset and yield individual translations.\n        Args:\n            maxlen_a/b: generate sequences of maximum length ax + b,\n                where x is the source sentence length.\n            cuda: use GPU for generation\n            timer: StopwatchMeter for timing generations.\n        \"\"\"", "\n", "if", "maxlen_b", "is", "None", ":", "\n", "            ", "maxlen_b", "=", "self", ".", "maxlen", "\n", "\n", "", "for", "sample", "in", "data_itr", ":", "\n", "            ", "s", "=", "utils", ".", "move_to_cuda", "(", "sample", ")", "if", "cuda", "else", "sample", "\n", "if", "'net_input'", "not", "in", "s", ":", "\n", "                ", "continue", "\n", "", "input", "=", "s", "[", "'net_input'", "]", "\n", "# model.forward normally channels prev_output_tokens into the decoder", "\n", "# separately, but SequenceGenerator directly calls model.encoder", "\n", "encoder_input", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "input", ".", "items", "(", ")", "\n", "if", "k", "!=", "'prev_output_tokens'", "\n", "}", "\n", "srclen", "=", "encoder_input", "[", "'src_tokens'", "]", ".", "size", "(", "1", ")", "\n", "if", "timer", "is", "not", "None", ":", "\n", "                ", "timer", ".", "start", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "hypos", "=", "self", ".", "generate", "(", "\n", "encoder_input", ",", "\n", "beam_size", "=", "beam_size", ",", "\n", "maxlen", "=", "int", "(", "maxlen_a", "*", "srclen", "+", "maxlen_b", ")", ",", "\n", "prefix_tokens", "=", "s", "[", "'target'", "]", "[", ":", ",", ":", "prefix_size", "]", "if", "prefix_size", ">", "0", "else", "None", ",", "\n", ")", "\n", "", "if", "timer", "is", "not", "None", ":", "\n", "                ", "timer", ".", "stop", "(", "sum", "(", "len", "(", "h", "[", "0", "]", "[", "'tokens'", "]", ")", "for", "h", "in", "hypos", ")", ")", "\n", "", "for", "i", ",", "id", "in", "enumerate", "(", "s", "[", "'id'", "]", ".", "data", ")", ":", "\n", "# remove padding", "\n", "                ", "src", "=", "utils", ".", "strip_pad", "(", "input", "[", "'src_tokens'", "]", ".", "data", "[", "i", ",", ":", "]", ",", "self", ".", "pad", ")", "\n", "ref", "=", "utils", ".", "strip_pad", "(", "s", "[", "'target'", "]", ".", "data", "[", "i", ",", ":", "]", ",", "self", ".", "pad", ")", "if", "s", "[", "'target'", "]", "is", "not", "None", "else", "None", "\n", "yield", "id", ",", "src", ",", "ref", ",", "hypos", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate": [[105, 118], ["torch.no_grad", "sequence_generator.SequenceGenerator._generate"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator._generate"], ["", "", "", "def", "generate", "(", "self", ",", "encoder_input", ",", "beam_size", "=", "None", ",", "maxlen", "=", "None", ",", "prefix_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate a batch of translations.\n\n        Args:\n            encoder_input: dictionary containing the inputs to\n                model.encoder.forward\n            beam_size: int overriding the beam size. defaults to\n                self.beam_size\n            max_len: maximum length of the generated sequence\n            prefix_tokens: force decoder to begin with these tokens\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "_generate", "(", "encoder_input", ",", "beam_size", ",", "maxlen", ",", "prefix_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator._generate": [[119, 478], ["src_tokens.size", "min", "src_tokens.data.new().float().fill_", "[].view.clone", "src_tokens.data.new().fill_", "[].view.clone", "torch.arange().type_as", "range", "range", "min", "isinstance", "model.encoder", "torch.arange().view().repeat().view", "new_order.to.to.to", "model.encoder.reorder_encoder_out", "encoder_outs.append", "[].view.index_select", "set", "enumerate", "sequence_generator.SequenceGenerator._decode", "[].view.type_as", "scores_buf.type_as.type_as.type_as", "sequence_generator.SequenceGenerator._generate.buffer"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerEncoder.reorder_encoder_out", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator._decode"], ["", "", "def", "_generate", "(", "self", ",", "encoder_input", ",", "beam_size", "=", "None", ",", "maxlen", "=", "None", ",", "prefix_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\"See generate\"\"\"", "\n", "src_tokens", "=", "encoder_input", "[", "'src_tokens'", "]", "\n", "bsz", ",", "srclen", "=", "src_tokens", ".", "size", "(", ")", "\n", "maxlen", "=", "min", "(", "maxlen", ",", "self", ".", "maxlen", ")", "if", "maxlen", "is", "not", "None", "else", "self", ".", "maxlen", "\n", "\n", "# the max beam size is the dictionary size - 1, since we never select pad", "\n", "beam_size", "=", "beam_size", "if", "beam_size", "is", "not", "None", "else", "self", ".", "beam_size", "\n", "beam_size", "=", "min", "(", "beam_size", ",", "self", ".", "vocab_size", "-", "1", ")", "\n", "\n", "encoder_outs", "=", "[", "]", "\n", "incremental_states", "=", "{", "}", "\n", "for", "model", "in", "self", ".", "models", ":", "\n", "            ", "if", "not", "self", ".", "retain_dropout", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "", "if", "isinstance", "(", "model", ".", "decoder", ",", "FairseqIncrementalDecoder", ")", ":", "\n", "                ", "incremental_states", "[", "model", "]", "=", "{", "}", "\n", "", "else", ":", "\n", "                ", "incremental_states", "[", "model", "]", "=", "None", "\n", "\n", "# compute the encoder output for each beam", "\n", "", "encoder_out", "=", "model", ".", "encoder", "(", "**", "encoder_input", ")", "\n", "new_order", "=", "torch", ".", "arange", "(", "bsz", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ")", ".", "view", "(", "-", "1", ")", "\n", "new_order", "=", "new_order", ".", "to", "(", "src_tokens", ".", "device", ")", "\n", "encoder_out", "=", "model", ".", "encoder", ".", "reorder_encoder_out", "(", "encoder_out", ",", "new_order", ")", "\n", "encoder_outs", ".", "append", "(", "encoder_out", ")", "\n", "\n", "# initialize buffers", "\n", "", "scores", "=", "src_tokens", ".", "data", ".", "new", "(", "bsz", "*", "beam_size", ",", "maxlen", "+", "1", ")", ".", "float", "(", ")", ".", "fill_", "(", "0", ")", "\n", "scores_buf", "=", "scores", ".", "clone", "(", ")", "\n", "tokens", "=", "src_tokens", ".", "data", ".", "new", "(", "bsz", "*", "beam_size", ",", "maxlen", "+", "2", ")", ".", "fill_", "(", "self", ".", "pad", ")", "\n", "tokens_buf", "=", "tokens", ".", "clone", "(", ")", "\n", "tokens", "[", ":", ",", "0", "]", "=", "self", ".", "eos", "\n", "attn", ",", "attn_buf", "=", "None", ",", "None", "\n", "nonpad_idxs", "=", "None", "\n", "\n", "# list of completed sentences", "\n", "finalized", "=", "[", "[", "]", "for", "i", "in", "range", "(", "bsz", ")", "]", "\n", "finished", "=", "[", "False", "for", "i", "in", "range", "(", "bsz", ")", "]", "\n", "worst_finalized", "=", "[", "{", "'idx'", ":", "None", ",", "'score'", ":", "-", "math", ".", "inf", "}", "for", "i", "in", "range", "(", "bsz", ")", "]", "\n", "num_remaining_sent", "=", "bsz", "\n", "\n", "# number of candidate hypos per step", "\n", "cand_size", "=", "2", "*", "beam_size", "# 2 x beam size in case half are EOS", "\n", "\n", "# offset arrays for converting between different indexing schemes", "\n", "bbsz_offsets", "=", "(", "torch", ".", "arange", "(", "0", ",", "bsz", ")", "*", "beam_size", ")", ".", "unsqueeze", "(", "1", ")", ".", "type_as", "(", "tokens", ")", "\n", "cand_offsets", "=", "torch", ".", "arange", "(", "0", ",", "cand_size", ")", ".", "type_as", "(", "tokens", ")", "\n", "\n", "# helper function for allocating buffers on the fly", "\n", "buffers", "=", "{", "}", "\n", "\n", "def", "buffer", "(", "name", ",", "type_of", "=", "tokens", ")", ":", "# noqa", "\n", "            ", "if", "name", "not", "in", "buffers", ":", "\n", "                ", "buffers", "[", "name", "]", "=", "type_of", ".", "new", "(", ")", "\n", "", "return", "buffers", "[", "name", "]", "\n", "\n", "", "def", "is_finished", "(", "sent", ",", "step", ",", "unfinalized_scores", "=", "None", ")", ":", "\n", "            ", "\"\"\"\n            Check whether we've finished generation for a given sentence, by\n            comparing the worst score among finalized hypotheses to the best\n            possible score among unfinalized hypotheses.\n            \"\"\"", "\n", "assert", "len", "(", "finalized", "[", "sent", "]", ")", "<=", "beam_size", "\n", "if", "len", "(", "finalized", "[", "sent", "]", ")", "==", "beam_size", ":", "\n", "                ", "if", "self", ".", "stop_early", "or", "step", "==", "maxlen", "or", "unfinalized_scores", "is", "None", ":", "\n", "                    ", "return", "True", "\n", "# stop if the best unfinalized score is worse than the worst", "\n", "# finalized one", "\n", "", "best_unfinalized_score", "=", "unfinalized_scores", "[", "sent", "]", ".", "max", "(", ")", "\n", "if", "self", ".", "normalize_scores", ":", "\n", "                    ", "best_unfinalized_score", "/=", "maxlen", "**", "self", ".", "len_penalty", "\n", "", "if", "worst_finalized", "[", "sent", "]", "[", "'score'", "]", ">=", "best_unfinalized_score", ":", "\n", "                    ", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "", "def", "finalize_hypos", "(", "step", ",", "bbsz_idx", ",", "eos_scores", ",", "unfinalized_scores", "=", "None", ")", ":", "\n", "            ", "\"\"\"\n            Finalize the given hypotheses at this step, while keeping the total\n            number of finalized hypotheses per sentence <= beam_size.\n            Note: the input must be in the desired finalization order, so that\n            hypotheses that appear earlier in the input are preferred to those\n            that appear later.\n            Args:\n                step: current time step\n                bbsz_idx: A vector of indices in the range [0, bsz*beam_size),\n                    indicating which hypotheses to finalize\n                eos_scores: A vector of the same size as bbsz_idx containing\n                    scores for each hypothesis\n                unfinalized_scores: A vector containing scores for all\n                    unfinalized hypotheses\n            \"\"\"", "\n", "assert", "bbsz_idx", ".", "numel", "(", ")", "==", "eos_scores", ".", "numel", "(", ")", "\n", "\n", "# clone relevant token and attention tensors", "\n", "tokens_clone", "=", "tokens", ".", "index_select", "(", "0", ",", "bbsz_idx", ")", "\n", "tokens_clone", "=", "tokens_clone", "[", ":", ",", "1", ":", "step", "+", "2", "]", "# skip the first index, which is EOS", "\n", "tokens_clone", "[", ":", ",", "step", "]", "=", "self", ".", "eos", "\n", "attn_clone", "=", "attn", ".", "index_select", "(", "0", ",", "bbsz_idx", ")", "[", ":", ",", ":", ",", "1", ":", "step", "+", "2", "]", "if", "attn", "is", "not", "None", "else", "None", "\n", "\n", "# compute scores per token position", "\n", "pos_scores", "=", "scores", ".", "index_select", "(", "0", ",", "bbsz_idx", ")", "[", ":", ",", ":", "step", "+", "1", "]", "\n", "pos_scores", "[", ":", ",", "step", "]", "=", "eos_scores", "\n", "# convert from cumulative to per-position scores", "\n", "pos_scores", "[", ":", ",", "1", ":", "]", "=", "pos_scores", "[", ":", ",", "1", ":", "]", "-", "pos_scores", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "# normalize sentence-level scores", "\n", "if", "self", ".", "normalize_scores", ":", "\n", "                ", "eos_scores", "/=", "(", "step", "+", "1", ")", "**", "self", ".", "len_penalty", "\n", "\n", "", "cum_unfin", "=", "[", "]", "\n", "prev", "=", "0", "\n", "for", "f", "in", "finished", ":", "\n", "                ", "if", "f", ":", "\n", "                    ", "prev", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "cum_unfin", ".", "append", "(", "prev", ")", "\n", "\n", "", "", "sents_seen", "=", "set", "(", ")", "\n", "for", "i", ",", "(", "idx", ",", "score", ")", "in", "enumerate", "(", "zip", "(", "bbsz_idx", ".", "tolist", "(", ")", ",", "eos_scores", ".", "tolist", "(", ")", ")", ")", ":", "\n", "                ", "unfin_idx", "=", "idx", "//", "beam_size", "\n", "sent", "=", "unfin_idx", "+", "cum_unfin", "[", "unfin_idx", "]", "\n", "\n", "sents_seen", ".", "add", "(", "(", "sent", ",", "unfin_idx", ")", ")", "\n", "\n", "def", "get_hypo", "(", ")", ":", "\n", "\n", "                    ", "if", "attn_clone", "is", "not", "None", ":", "\n", "# remove padding tokens from attn scores", "\n", "                        ", "hypo_attn", "=", "attn_clone", "[", "i", "]", "[", "nonpad_idxs", "[", "sent", "]", "]", "\n", "_", ",", "alignment", "=", "hypo_attn", ".", "max", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                        ", "hypo_attn", "=", "None", "\n", "alignment", "=", "None", "\n", "\n", "", "return", "{", "\n", "'tokens'", ":", "tokens_clone", "[", "i", "]", ",", "\n", "'score'", ":", "score", ",", "\n", "'attention'", ":", "hypo_attn", ",", "# src_len x tgt_len", "\n", "'alignment'", ":", "alignment", ",", "\n", "'positional_scores'", ":", "pos_scores", "[", "i", "]", ",", "\n", "}", "\n", "\n", "", "if", "len", "(", "finalized", "[", "sent", "]", ")", "<", "beam_size", ":", "\n", "                    ", "finalized", "[", "sent", "]", ".", "append", "(", "get_hypo", "(", ")", ")", "\n", "", "elif", "not", "self", ".", "stop_early", "and", "score", ">", "worst_finalized", "[", "sent", "]", "[", "'score'", "]", ":", "\n", "# replace worst hypo for this sentence with new/better one", "\n", "                    ", "worst_idx", "=", "worst_finalized", "[", "sent", "]", "[", "'idx'", "]", "\n", "if", "worst_idx", "is", "not", "None", ":", "\n", "                        ", "finalized", "[", "sent", "]", "[", "worst_idx", "]", "=", "get_hypo", "(", ")", "\n", "\n", "# find new worst finalized hypo for this sentence", "\n", "", "idx", ",", "s", "=", "min", "(", "enumerate", "(", "finalized", "[", "sent", "]", ")", ",", "key", "=", "lambda", "r", ":", "r", "[", "1", "]", "[", "'score'", "]", ")", "\n", "worst_finalized", "[", "sent", "]", "=", "{", "\n", "'score'", ":", "s", "[", "'score'", "]", ",", "\n", "'idx'", ":", "idx", ",", "\n", "}", "\n", "\n", "", "", "newly_finished", "=", "[", "]", "\n", "for", "sent", ",", "unfin_idx", "in", "sents_seen", ":", "\n", "# check termination conditions for this sentence", "\n", "                ", "if", "not", "finished", "[", "sent", "]", "and", "is_finished", "(", "sent", ",", "step", ",", "unfinalized_scores", ")", ":", "\n", "                    ", "finished", "[", "sent", "]", "=", "True", "\n", "newly_finished", ".", "append", "(", "unfin_idx", ")", "\n", "", "", "return", "newly_finished", "\n", "\n", "", "reorder_state", "=", "None", "\n", "batch_idxs", "=", "None", "\n", "for", "step", "in", "range", "(", "maxlen", "+", "1", ")", ":", "# one extra step for EOS marker", "\n", "# reorder decoder internal states based on the prev choice of beams", "\n", "            ", "if", "reorder_state", "is", "not", "None", ":", "\n", "                ", "if", "batch_idxs", "is", "not", "None", ":", "\n", "# update beam indices to take into account removed sentences", "\n", "                    ", "corr", "=", "batch_idxs", "-", "torch", ".", "arange", "(", "batch_idxs", ".", "numel", "(", ")", ")", ".", "type_as", "(", "batch_idxs", ")", "\n", "reorder_state", ".", "view", "(", "-", "1", ",", "beam_size", ")", ".", "add_", "(", "corr", ".", "unsqueeze", "(", "-", "1", ")", "*", "beam_size", ")", "\n", "", "for", "i", ",", "model", "in", "enumerate", "(", "self", ".", "models", ")", ":", "\n", "                    ", "if", "isinstance", "(", "model", ".", "decoder", ",", "FairseqIncrementalDecoder", ")", ":", "\n", "                        ", "model", ".", "decoder", ".", "reorder_incremental_state", "(", "incremental_states", "[", "model", "]", ",", "reorder_state", ")", "\n", "", "encoder_outs", "[", "i", "]", "=", "model", ".", "encoder", ".", "reorder_encoder_out", "(", "encoder_outs", "[", "i", "]", ",", "reorder_state", ")", "\n", "\n", "", "", "lprobs", ",", "avg_attn_scores", "=", "self", ".", "_decode", "(", "tokens", "[", ":", ",", ":", "step", "+", "1", "]", ",", "encoder_outs", ",", "incremental_states", ")", "\n", "\n", "lprobs", "[", ":", ",", "self", ".", "pad", "]", "=", "-", "math", ".", "inf", "# never select pad", "\n", "lprobs", "[", ":", ",", "self", ".", "unk", "]", "-=", "self", ".", "unk_penalty", "# apply unk penalty", "\n", "\n", "# Record attention scores", "\n", "if", "avg_attn_scores", "is", "not", "None", ":", "\n", "                ", "if", "attn", "is", "None", ":", "\n", "                    ", "attn", "=", "scores", ".", "new", "(", "bsz", "*", "beam_size", ",", "src_tokens", ".", "size", "(", "1", ")", ",", "maxlen", "+", "2", ")", "\n", "attn_buf", "=", "attn", ".", "clone", "(", ")", "\n", "nonpad_idxs", "=", "src_tokens", ".", "ne", "(", "self", ".", "pad", ")", "\n", "", "attn", "[", ":", ",", ":", ",", "step", "+", "1", "]", ".", "copy_", "(", "avg_attn_scores", ")", "\n", "\n", "", "scores", "=", "scores", ".", "type_as", "(", "lprobs", ")", "\n", "scores_buf", "=", "scores_buf", ".", "type_as", "(", "lprobs", ")", "\n", "eos_bbsz_idx", "=", "buffer", "(", "'eos_bbsz_idx'", ")", "\n", "eos_scores", "=", "buffer", "(", "'eos_scores'", ",", "type_of", "=", "scores", ")", "\n", "if", "step", "<", "maxlen", ":", "\n", "                ", "if", "prefix_tokens", "is", "not", "None", "and", "step", "<", "prefix_tokens", ".", "size", "(", "1", ")", ":", "\n", "                    ", "probs_slice", "=", "lprobs", ".", "view", "(", "bsz", ",", "-", "1", ",", "lprobs", ".", "size", "(", "-", "1", ")", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "cand_scores", "=", "torch", ".", "gather", "(", "\n", "probs_slice", ",", "dim", "=", "1", ",", "\n", "index", "=", "prefix_tokens", "[", ":", ",", "step", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "data", "\n", ")", ".", "expand", "(", "-", "1", ",", "cand_size", ")", "\n", "cand_indices", "=", "prefix_tokens", "[", ":", ",", "step", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "bsz", ",", "cand_size", ")", ".", "data", "\n", "cand_beams", "=", "torch", ".", "zeros_like", "(", "cand_indices", ")", "\n", "", "else", ":", "\n", "                    ", "cand_scores", ",", "cand_indices", ",", "cand_beams", "=", "self", ".", "search", ".", "step", "(", "\n", "step", ",", "\n", "lprobs", ".", "view", "(", "bsz", ",", "-", "1", ",", "self", ".", "vocab_size", ")", ",", "\n", "scores", ".", "view", "(", "bsz", ",", "beam_size", ",", "-", "1", ")", "[", ":", ",", ":", ",", ":", "step", "]", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "# make probs contain cumulative scores for each hypothesis", "\n", "                ", "lprobs", ".", "add_", "(", "scores", "[", ":", ",", "step", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "# finalize all active hypotheses once we hit maxlen", "\n", "# pick the hypothesis with the highest prob of EOS right now", "\n", "torch", ".", "sort", "(", "\n", "lprobs", "[", ":", ",", "self", ".", "eos", "]", ",", "\n", "descending", "=", "True", ",", "\n", "out", "=", "(", "eos_scores", ",", "eos_bbsz_idx", ")", ",", "\n", ")", "\n", "num_remaining_sent", "-=", "len", "(", "finalize_hypos", "(", "\n", "step", ",", "eos_bbsz_idx", ",", "eos_scores", ")", ")", "\n", "assert", "num_remaining_sent", "==", "0", "\n", "break", "\n", "\n", "# cand_bbsz_idx contains beam indices for the top candidate", "\n", "# hypotheses, with a range of values: [0, bsz*beam_size),", "\n", "# and dimensions: [bsz, cand_size]", "\n", "", "cand_bbsz_idx", "=", "cand_beams", ".", "add", "(", "bbsz_offsets", ")", "\n", "\n", "# finalize hypotheses that end in eos", "\n", "eos_mask", "=", "cand_indices", ".", "eq", "(", "self", ".", "eos", ")", "\n", "\n", "finalized_sents", "=", "set", "(", ")", "\n", "if", "step", ">=", "self", ".", "minlen", ":", "\n", "# only consider eos when it's among the top beam_size indices", "\n", "                ", "torch", ".", "masked_select", "(", "\n", "cand_bbsz_idx", "[", ":", ",", ":", "beam_size", "]", ",", "\n", "mask", "=", "eos_mask", "[", ":", ",", ":", "beam_size", "]", ",", "\n", "out", "=", "eos_bbsz_idx", ",", "\n", ")", "\n", "if", "eos_bbsz_idx", ".", "numel", "(", ")", ">", "0", ":", "\n", "                    ", "torch", ".", "masked_select", "(", "\n", "cand_scores", "[", ":", ",", ":", "beam_size", "]", ",", "\n", "mask", "=", "eos_mask", "[", ":", ",", ":", "beam_size", "]", ",", "\n", "out", "=", "eos_scores", ",", "\n", ")", "\n", "finalized_sents", "=", "finalize_hypos", "(", "\n", "step", ",", "eos_bbsz_idx", ",", "eos_scores", ",", "cand_scores", ")", "\n", "num_remaining_sent", "-=", "len", "(", "finalized_sents", ")", "\n", "\n", "", "", "assert", "num_remaining_sent", ">=", "0", "\n", "if", "num_remaining_sent", "==", "0", ":", "\n", "                ", "break", "\n", "", "assert", "step", "<", "maxlen", "\n", "\n", "if", "len", "(", "finalized_sents", ")", ">", "0", ":", "\n", "                ", "new_bsz", "=", "bsz", "-", "len", "(", "finalized_sents", ")", "\n", "\n", "# construct batch_idxs which holds indices of batches to keep for the next pass", "\n", "batch_mask", "=", "cand_indices", ".", "new_ones", "(", "bsz", ")", "\n", "batch_mask", "[", "cand_indices", ".", "new", "(", "finalized_sents", ")", "]", "=", "0", "\n", "batch_idxs", "=", "batch_mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "eos_mask", "=", "eos_mask", "[", "batch_idxs", "]", "\n", "cand_beams", "=", "cand_beams", "[", "batch_idxs", "]", "\n", "bbsz_offsets", ".", "resize_", "(", "new_bsz", ",", "1", ")", "\n", "cand_bbsz_idx", "=", "cand_beams", ".", "add", "(", "bbsz_offsets", ")", "\n", "\n", "cand_scores", "=", "cand_scores", "[", "batch_idxs", "]", "\n", "cand_indices", "=", "cand_indices", "[", "batch_idxs", "]", "\n", "if", "prefix_tokens", "is", "not", "None", ":", "\n", "                    ", "prefix_tokens", "=", "prefix_tokens", "[", "batch_idxs", "]", "\n", "\n", "", "scores", "=", "scores", ".", "view", "(", "bsz", ",", "-", "1", ")", "[", "batch_idxs", "]", ".", "view", "(", "new_bsz", "*", "beam_size", ",", "-", "1", ")", "\n", "scores_buf", ".", "resize_as_", "(", "scores", ")", "\n", "tokens", "=", "tokens", ".", "view", "(", "bsz", ",", "-", "1", ")", "[", "batch_idxs", "]", ".", "view", "(", "new_bsz", "*", "beam_size", ",", "-", "1", ")", "\n", "tokens_buf", ".", "resize_as_", "(", "tokens", ")", "\n", "if", "attn", "is", "not", "None", ":", "\n", "                    ", "attn", "=", "attn", ".", "view", "(", "bsz", ",", "-", "1", ")", "[", "batch_idxs", "]", ".", "view", "(", "new_bsz", "*", "beam_size", ",", "attn", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "attn_buf", ".", "resize_as_", "(", "attn", ")", "\n", "", "bsz", "=", "new_bsz", "\n", "", "else", ":", "\n", "                ", "batch_idxs", "=", "None", "\n", "\n", "# set active_mask so that values > cand_size indicate eos hypos", "\n", "# and values < cand_size indicate candidate active hypos.", "\n", "# After, the min values per row are the top candidate active hypos", "\n", "", "active_mask", "=", "buffer", "(", "'active_mask'", ")", "\n", "torch", ".", "add", "(", "\n", "eos_mask", ".", "type_as", "(", "cand_offsets", ")", "*", "cand_size", ",", "\n", "cand_offsets", "[", ":", "eos_mask", ".", "size", "(", "1", ")", "]", ",", "\n", "out", "=", "active_mask", ",", "\n", ")", "\n", "\n", "# get the top beam_size active hypotheses, which are just the hypos", "\n", "# with the smallest values in active_mask", "\n", "active_hypos", ",", "_ignore", "=", "buffer", "(", "'active_hypos'", ")", ",", "buffer", "(", "'_ignore'", ")", "\n", "torch", ".", "topk", "(", "\n", "active_mask", ",", "k", "=", "beam_size", ",", "dim", "=", "1", ",", "largest", "=", "False", ",", "\n", "out", "=", "(", "_ignore", ",", "active_hypos", ")", "\n", ")", "\n", "\n", "active_bbsz_idx", "=", "buffer", "(", "'active_bbsz_idx'", ")", "\n", "torch", ".", "gather", "(", "\n", "cand_bbsz_idx", ",", "dim", "=", "1", ",", "index", "=", "active_hypos", ",", "\n", "out", "=", "active_bbsz_idx", ",", "\n", ")", "\n", "active_scores", "=", "torch", ".", "gather", "(", "\n", "cand_scores", ",", "dim", "=", "1", ",", "index", "=", "active_hypos", ",", "\n", "out", "=", "scores", "[", ":", ",", "step", "]", ".", "view", "(", "bsz", ",", "beam_size", ")", ",", "\n", ")", "\n", "\n", "active_bbsz_idx", "=", "active_bbsz_idx", ".", "view", "(", "-", "1", ")", "\n", "active_scores", "=", "active_scores", ".", "view", "(", "-", "1", ")", "\n", "\n", "# copy tokens and scores for active hypotheses", "\n", "torch", ".", "index_select", "(", "\n", "tokens", "[", ":", ",", ":", "step", "+", "1", "]", ",", "dim", "=", "0", ",", "index", "=", "active_bbsz_idx", ",", "\n", "out", "=", "tokens_buf", "[", ":", ",", ":", "step", "+", "1", "]", ",", "\n", ")", "\n", "torch", ".", "gather", "(", "\n", "cand_indices", ",", "dim", "=", "1", ",", "index", "=", "active_hypos", ",", "\n", "out", "=", "tokens_buf", ".", "view", "(", "bsz", ",", "beam_size", ",", "-", "1", ")", "[", ":", ",", ":", ",", "step", "+", "1", "]", ",", "\n", ")", "\n", "if", "step", ">", "0", ":", "\n", "                ", "torch", ".", "index_select", "(", "\n", "scores", "[", ":", ",", ":", "step", "]", ",", "dim", "=", "0", ",", "index", "=", "active_bbsz_idx", ",", "\n", "out", "=", "scores_buf", "[", ":", ",", ":", "step", "]", ",", "\n", ")", "\n", "", "torch", ".", "gather", "(", "\n", "cand_scores", ",", "dim", "=", "1", ",", "index", "=", "active_hypos", ",", "\n", "out", "=", "scores_buf", ".", "view", "(", "bsz", ",", "beam_size", ",", "-", "1", ")", "[", ":", ",", ":", ",", "step", "]", ",", "\n", ")", "\n", "\n", "# copy attention for active hypotheses", "\n", "if", "attn", "is", "not", "None", ":", "\n", "                ", "torch", ".", "index_select", "(", "\n", "attn", "[", ":", ",", ":", ",", ":", "step", "+", "2", "]", ",", "dim", "=", "0", ",", "index", "=", "active_bbsz_idx", ",", "\n", "out", "=", "attn_buf", "[", ":", ",", ":", ",", ":", "step", "+", "2", "]", ",", "\n", ")", "\n", "\n", "# swap buffers", "\n", "", "tokens", ",", "tokens_buf", "=", "tokens_buf", ",", "tokens", "\n", "scores", ",", "scores_buf", "=", "scores_buf", ",", "scores", "\n", "if", "attn", "is", "not", "None", ":", "\n", "                ", "attn", ",", "attn_buf", "=", "attn_buf", ",", "attn", "\n", "\n", "# reorder incremental state in decoder", "\n", "", "reorder_state", "=", "active_bbsz_idx", "\n", "\n", "# sort by score descending", "\n", "", "for", "sent", "in", "range", "(", "len", "(", "finalized", ")", ")", ":", "\n", "            ", "finalized", "[", "sent", "]", "=", "sorted", "(", "finalized", "[", "sent", "]", ",", "key", "=", "lambda", "r", ":", "r", "[", "'score'", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "", "return", "finalized", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator._decode": [[479, 501], ["zip", "avg_probs.div_", "avg_probs.log_", "len", "sequence_generator.SequenceGenerator._decode_one", "sequence_generator.SequenceGenerator._decode_one", "len", "avg_attn.div_", "avg_probs.add_", "len", "avg_attn.add_"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator._decode_one", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator._decode_one"], ["", "def", "_decode", "(", "self", ",", "tokens", ",", "encoder_outs", ",", "incremental_states", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "models", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "_decode_one", "(", "tokens", ",", "self", ".", "models", "[", "0", "]", ",", "encoder_outs", "[", "0", "]", ",", "incremental_states", ",", "log_probs", "=", "True", ")", "\n", "\n", "", "avg_probs", "=", "None", "\n", "avg_attn", "=", "None", "\n", "for", "model", ",", "encoder_out", "in", "zip", "(", "self", ".", "models", ",", "encoder_outs", ")", ":", "\n", "            ", "probs", ",", "attn", "=", "self", ".", "_decode_one", "(", "tokens", ",", "model", ",", "encoder_out", ",", "incremental_states", ",", "log_probs", "=", "False", ")", "\n", "if", "avg_probs", "is", "None", ":", "\n", "                ", "avg_probs", "=", "probs", "\n", "", "else", ":", "\n", "                ", "avg_probs", ".", "add_", "(", "probs", ")", "\n", "", "if", "attn", "is", "not", "None", ":", "\n", "                ", "if", "avg_attn", "is", "None", ":", "\n", "                    ", "avg_attn", "=", "attn", "\n", "", "else", ":", "\n", "                    ", "avg_attn", ".", "add_", "(", "attn", ")", "\n", "", "", "", "avg_probs", ".", "div_", "(", "len", "(", "self", ".", "models", ")", ")", "\n", "avg_probs", ".", "log_", "(", ")", "\n", "if", "avg_attn", "is", "not", "None", ":", "\n", "            ", "avg_attn", ".", "div_", "(", "len", "(", "self", ".", "models", ")", ")", "\n", "", "return", "avg_probs", ",", "avg_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator._decode_one": [[502, 518], ["model.get_normalized_probs", "torch.no_grad", "list", "list", "type", "model.decoder", "model.decoder", "type"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_decoder.FairseqDecoder.get_normalized_probs"], ["", "def", "_decode_one", "(", "self", ",", "tokens", ",", "model", ",", "encoder_out", ",", "incremental_states", ",", "log_probs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "incremental_states", "[", "model", "]", "is", "not", "None", ":", "\n", "                ", "decoder_out", "=", "list", "(", "model", ".", "decoder", "(", "tokens", ",", "encoder_out", ",", "incremental_state", "=", "incremental_states", "[", "model", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "decoder_out", "=", "list", "(", "model", ".", "decoder", "(", "tokens", ",", "encoder_out", ")", ")", "\n", "", "decoder_out", "[", "0", "]", "=", "decoder_out", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "attn", "=", "decoder_out", "[", "1", "]", "\n", "if", "type", "(", "attn", ")", "is", "dict", ":", "\n", "                ", "attn", "=", "attn", "[", "'attn'", "]", "\n", "", "if", "attn", "is", "not", "None", ":", "\n", "                ", "if", "type", "(", "attn", ")", "is", "dict", ":", "\n", "                    ", "attn", "=", "attn", "[", "'attn'", "]", "\n", "", "attn", "=", "attn", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "", "", "probs", "=", "model", ".", "get_normalized_probs", "(", "decoder_out", ",", "log_probs", "=", "log_probs", ")", "\n", "return", "probs", ",", "attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.torch_persistent_save": [[18, 25], ["range", "torch.save", "logging.error", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.save"], [")", "\n", "from", "fairseq", ".", "tasks", "import", "FairseqTask", "\n", "\n", "\n", "def", "dummy_dictionary", "(", "vocab_size", ",", "prefix", "=", "'token_'", ")", ":", "\n", "    ", "d", "=", "Dictionary", "(", ")", "\n", "for", "i", "in", "range", "(", "vocab_size", ")", ":", "\n", "        ", "token", "=", "prefix", "+", "str", "(", "i", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.convert_state_dict_type": [[27, 39], ["isinstance", "collections.OrderedDict", "state_dict.items", "isinstance", "utils.convert_state_dict_type", "torch.is_tensor", "utils.convert_state_dict_type", "state_dict.type"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.convert_state_dict_type", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.convert_state_dict_type"], ["", "d", ".", "finalize", "(", "padding_factor", "=", "1", ")", "# don't add extra padding symbols", "\n", "return", "d", "\n", "\n", "\n", "", "def", "dummy_dataloader", "(", "\n", "samples", ",", "\n", "padding_idx", "=", "1", ",", "\n", "eos_idx", "=", "2", ",", "\n", "batch_size", "=", "None", ",", "\n", ")", ":", "\n", "    ", "if", "batch_size", "is", "None", ":", "\n", "        ", "batch_size", "=", "len", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.save_state": [[41, 62], ["utils.torch_persistent_save", "utils.convert_state_dict_type", "model.state_dict", "optimizer.state_dict", "lr_scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.torch_persistent_save", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.convert_state_dict_type", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.state_dict"], ["", "for", "i", ",", "sample", "in", "enumerate", "(", "samples", ")", ":", "\n", "        ", "if", "'id'", "not", "in", "sample", ":", "\n", "            ", "sample", "[", "'id'", "]", "=", "i", "\n", "\n", "# create dataloader", "\n", "", "", "dataset", "=", "TestDataset", "(", "samples", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "collate_fn", "=", "(", "lambda", "samples", ":", "collate", "(", "samples", ",", "padding_idx", ",", "eos_idx", ")", ")", ",", "\n", ")", "\n", "return", "iter", "(", "dataloader", ")", "\n", "\n", "\n", "", "def", "sequence_generator_setup", "(", ")", ":", "\n", "# construct dummy dictionary", "\n", "    ", "d", "=", "dummy_dictionary", "(", "vocab_size", "=", "2", ")", "\n", "\n", "eos", "=", "d", ".", "eos", "(", ")", "\n", "w1", "=", "4", "\n", "w2", "=", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_model_state": [[64, 79], ["torch.load", "utils._upgrade_state_dict", "model.upgrade_state_dict", "os.path.exists", "model.load_state_dict", "Exception", "torch.serialization.default_restore_location"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils._upgrade_state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.upgrade_state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.load_state_dict"], ["src_tokens", "=", "torch", ".", "LongTensor", "(", "[", "[", "w1", ",", "w2", ",", "eos", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", "]", ")", "\n", "src_lengths", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "2", "]", ")", "\n", "\n", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "unk", "=", "0.", "\n", "args", ".", "beam_probs", "=", "[", "\n", "# step 0:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "# sentence 1:", "\n", "[", "0.0", ",", "unk", ",", "0.9", ",", "0.1", "]", ",", "# beam 1", "\n", "[", "0.0", ",", "unk", ",", "0.9", ",", "0.1", "]", ",", "# beam 2", "\n", "# sentence 2:", "\n", "[", "0.0", ",", "unk", ",", "0.7", ",", "0.3", "]", ",", "\n", "[", "0.0", ",", "unk", ",", "0.7", ",", "0.3", "]", ",", "\n", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils._upgrade_state_dict": [[81, 132], ["hasattr", "hasattr", "state[].get"], "function", ["None"], ["torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2       prefix", "\n", "# sentence 1:", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "# w1: 0.9  (emit: w1 <eos>: 0.9*1.0)", "\n", "[", "0.0", ",", "unk", ",", "0.9", ",", "0.1", "]", ",", "# w2: 0.1", "\n", "# sentence 2:", "\n", "[", "0.25", ",", "unk", ",", "0.35", ",", "0.4", "]", ",", "# w1: 0.7  (don't emit: w1 <eos>: 0.7*0.25)", "\n", "[", "0.00", ",", "unk", ",", "0.10", ",", "0.9", "]", ",", "# w2: 0.3", "\n", "]", ")", ",", "\n", "# step 2:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2       prefix", "\n", "# sentence 1:", "\n", "[", "0.0", ",", "unk", ",", "0.1", ",", "0.9", "]", ",", "# w2 w1: 0.1*0.9", "\n", "[", "0.6", ",", "unk", ",", "0.2", ",", "0.2", "]", ",", "# w2 w2: 0.1*0.1  (emit: w2 w2 <eos>: 0.1*0.1*0.6)", "\n", "# sentence 2:", "\n", "[", "0.60", ",", "unk", ",", "0.4", ",", "0.00", "]", ",", "# w1 w2: 0.7*0.4  (emit: w1 w2 <eos>: 0.7*0.4*0.6)", "\n", "[", "0.01", ",", "unk", ",", "0.0", ",", "0.99", "]", ",", "# w2 w2: 0.3*0.9", "\n", "]", ")", ",", "\n", "# step 3:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2       prefix", "\n", "# sentence 1:", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "# w2 w1 w2: 0.1*0.9*0.9  (emit: w2 w1 w2 <eos>: 0.1*0.9*0.9*1.0)", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "# w2 w1 w1: 0.1*0.9*0.1  (emit: w2 w1 w1 <eos>: 0.1*0.9*0.1*1.0)", "\n", "# sentence 2:", "\n", "[", "0.1", ",", "unk", ",", "0.5", ",", "0.4", "]", ",", "# w2 w2 w2: 0.3*0.9*0.99  (emit: w2 w2 w2 <eos>: 0.3*0.9*0.99*0.1)", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "# w1 w2 w1: 0.7*0.4*0.4  (emit: w1 w2 w1 <eos>: 0.7*0.4*0.4*1.0)", "\n", "]", ")", ",", "\n", "]", "\n", "\n", "task", "=", "TestTranslationTask", ".", "setup_task", "(", "args", ",", "d", ",", "d", ")", "\n", "model", "=", "task", ".", "build_model", "(", "args", ")", "\n", "tgt_dict", "=", "task", ".", "target_dictionary", "\n", "\n", "return", "tgt_dict", ",", "w1", ",", "w2", ",", "src_tokens", ",", "src_lengths", ",", "model", "\n", "\n", "\n", "", "class", "TestDataset", "(", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "index", "]", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n", "\n", "", "", "class", "TestTranslationTask", "(", "FairseqTask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_ensemble_for_inference": [[134, 164], ["torch.load", "utils._upgrade_state_dict", "states.append", "task.build_model", "task.build_model.upgrade_state_dict", "task.build_model.load_state_dict", "ensemble.append", "os.path.exists", "IOError", "utils._override_model_args", "torch.serialization.default_restore_location"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils._upgrade_state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.build_model", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.upgrade_state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.load_state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils._override_model_args"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "src_dict", ",", "tgt_dict", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "src_dict", "=", "src_dict", "\n", "self", ".", "tgt_dict", "=", "tgt_dict", "\n", "self", ".", "model", "=", "model", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "src_dict", "=", "None", ",", "tgt_dict", "=", "None", ",", "model", "=", "None", ")", ":", "\n", "        ", "return", "cls", "(", "args", ",", "src_dict", ",", "tgt_dict", ",", "model", ")", "\n", "\n", "", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "TestModel", ".", "build_model", "(", "args", ",", "self", ")", "\n", "\n", "", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "src_dict", "\n", "\n", "", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tgt_dict", "\n", "\n", "\n", "", "", "class", "TestModel", "(", "FairseqModel", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "encoder", "=", "TestEncoder", "(", "args", ",", "task", ".", "source_dictionary", ")", "\n", "decoder", "=", "TestIncrementalDecoder", "(", "args", ",", "task", ".", "target_dictionary", ")", "\n", "return", "cls", "(", "encoder", ",", "decoder", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils._override_model_args": [[166, 171], ["model_arg_overrides.items", "setattr"], "function", ["None"], ["\n", "", "", "class", "TestEncoder", "(", "FairseqEncoder", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.move_to_cuda": [[173, 191], ["utils.move_to_cuda._move_to_cuda"], "function", ["None"], ["        ", "return", "src_tokens", "\n", "\n", "", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "return", "encoder_out", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "\n", "\n", "", "", "class", "TestIncrementalDecoder", "(", "FairseqIncrementalDecoder", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "assert", "hasattr", "(", "args", ",", "'beam_probs'", ")", "or", "hasattr", "(", "args", ",", "'probs'", ")", "\n", "args", ".", "max_decoder_positions", "=", "getattr", "(", "args", ",", "'max_decoder_positions'", ",", "100", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", ",", "incremental_state", "=", "None", ")", ":", "\n", "        ", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "prev_output_tokens", "=", "prev_output_tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "", "bbsz", "=", "prev_output_tokens", ".", "size", "(", "0", ")", "\n", "vocab", "=", "len", "(", "self", ".", "dictionary", ")", "\n", "src_len", "=", "encoder_out", ".", "size", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils._get_full_incremental_state_key": [[196, 206], ["hasattr"], "function", ["None"], ["# cache step number", "\n", "            ", "step", "=", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'step'", ")", "\n", "if", "step", "is", "None", ":", "\n", "                ", "step", "=", "0", "\n", "", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'step'", ",", "step", "+", "1", ")", "\n", "steps", "=", "[", "step", "]", "\n", "", "else", ":", "\n", "            ", "steps", "=", "list", "(", "range", "(", "tgt_len", ")", ")", "\n", "\n", "# define output in terms of raw probs", "\n", "", "if", "hasattr", "(", "self", ".", "args", ",", "'probs'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.get_incremental_state": [[208, 214], ["utils._get_full_incremental_state_key"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils._get_full_incremental_state_key"], ["'expected probs to have size bsz*steps*vocab'", "\n", "probs", "=", "self", ".", "args", ".", "probs", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "steps", ")", ")", "\n", "", "else", ":", "\n", "            ", "probs", "=", "torch", ".", "FloatTensor", "(", "bbsz", ",", "len", "(", "steps", ")", ",", "vocab", ")", ".", "zero_", "(", ")", "\n", "for", "i", ",", "step", "in", "enumerate", "(", "steps", ")", ":", "\n", "# args.beam_probs gives the probability for every vocab element,", "\n", "# starting with eos, then unknown, and then the rest of the vocab", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.set_incremental_state": [[216, 221], ["utils._get_full_incremental_state_key"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils._get_full_incremental_state_key"], ["                    ", "probs", "[", ":", ",", "i", ",", "self", ".", "dictionary", ".", "eos", "(", ")", ":", "]", "=", "self", ".", "args", ".", "beam_probs", "[", "step", "]", "\n", "", "else", ":", "\n", "                    ", "probs", "[", ":", ",", "i", ",", "self", ".", "dictionary", ".", "eos", "(", ")", "]", "=", "1.0", "\n", "\n", "# random attention", "\n", "", "", "", "attn", "=", "torch", ".", "rand", "(", "bbsz", ",", "tgt_len", ",", "src_len", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_align_dict": [[223, 238], ["isinstance", "open", "line.split"], "function", ["None"], ["return", "probs", ",", "attn", "\n", "\n", "", "def", "get_normalized_probs", "(", "self", ",", "net_output", ",", "log_probs", ",", "_", ")", ":", "\n", "# the decoder returns probabilities directly", "\n", "        ", "probs", "=", "net_output", "[", "0", "]", "\n", "if", "log_probs", ":", "\n", "            ", "return", "probs", ".", "log", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "probs", "\n", "\n", "", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "args", ".", "max_decoder_positions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.print_embed_overlap": [[240, 245], ["set", "set", "len", "print", "embed_dict.keys", "len"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.parse_embedding": [[247, 265], ["open", "next", "line.rstrip().split", "torch.Tensor", "line.rstrip", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_embedding": [[267, 273], ["range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.replace_unk": [[275, 287], ["tokenizer.tokenize_line", "enumerate", "tokenizer.tokenize_line", "align_dict.get"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.tokenize_line", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.tokenize_line"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.post_process_prediction": [[289, 299], ["tgt_dict.string", "utils.replace_unk", "tokenizer.Tokenizer.tokenize", "tgt_dict.unk_string"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.replace_unk", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.tokenize", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk_string"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.make_positions": [[301, 328], ["make_positions.range_buf.type_as", "tensor.ne", "make_positions.range_buf[].expand_as", "tensor.clone().masked_scatter_", "tensor.ne", "range_buf.expand_as", "tensor.size", "hasattr", "tensor.new", "make_positions.range_buf.numel", "torch.arange", "tensor.ne.long().sum().unsqueeze", "tensor.clone", "torch._dim_arange", "tensor.ne.long().sum().unsqueeze", "tensor.ne.long", "tensor.ne.size", "tensor.ne.size", "tensor.ne.long", "tensor.size", "tensor.ne.long().sum", "tensor.ne.long().sum", "tensor.ne.long", "tensor.ne.long"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.strip_pad": [[330, 332], ["tensor.ne"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.buffered_arange": [[334, 340], ["hasattr", "torch.LongTensor", "buffered_arange.buf.numel", "torch.arange"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.convert_padding_direction": [[342, 362], ["src_tokens.eq", "src_tokens.size", "buffered_arange().type_as().expand_as", "src_tokens.eq.long().sum", "src_tokens.gather", "src_tokens.eq.any", "torch.remainder", "torch.remainder", "pad_mask[].any", "pad_mask[].any", "buffered_arange().type_as", "src_tokens.eq.long", "utils.buffered_arange"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.buffered_arange"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item": [[364, 370], ["hasattr", "hasattr", "tensor.item"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.clip_grad_norm_": [[372, 378], ["utils.item", "torch.norm", "tensor.mul_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.fill_with_neg_inf": [[380, 383], ["t.float().fill_().type_as", "t.float().fill_", "float", "t.float"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.checkpoint_paths": [[385, 402], ["re.compile", "os.listdir", "enumerate", "re.compile.fullmatch", "os.path.join", "entries.append", "sorted", "int", "len", "pt_regexp.fullmatch.group", "pt_regexp.fullmatch.group", "pt_regexp.fullmatch.groups"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.resolve_max_positions": [[404, 428], ["isinstance", "isinstance", "min", "tuple", "map", "zip"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.adagrad.Adagrad.__init__": [[15, 18], ["FairseqOptimizer.__init__", "torch.optim.Adagrad"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "params", ")", "\n", "self", ".", "_optimizer", "=", "torch", ".", "optim", ".", "Adagrad", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.adagrad.Adagrad.optimizer_config": [[19, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.__init__": [[15, 19], ["object.__init__", "list"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "params", "=", "list", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.add_args": [[20, 24], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.optimizer": [[25, 33], ["hasattr", "isinstance", "ValueError"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return a torch.optim.optimizer.Optimizer instance.\"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "'_optimizer'", ")", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "not", "isinstance", "(", "self", ".", "_optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'_optimizer must be an instance of torch.optim.Optimizer'", ")", "\n", "", "return", "self", ".", "_optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.optimizer_config": [[34, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.get_lr": [[44, 47], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the current learning rate.\"\"\"", "\n", "return", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.set_lr": [[48, 52], ["None"], "methods", ["None"], ["", "def", "set_lr", "(", "self", ",", "lr", ")", ":", "\n", "        ", "\"\"\"Set the learning rate.\"\"\"", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.state_dict": [[53, 56], ["fairseq_optimizer.FairseqOptimizer.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.state_dict"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the optimizer's state dict.\"\"\"", "\n", "return", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.load_state_dict": [[57, 71], ["fairseq_optimizer.FairseqOptimizer.optimizer.load_state_dict", "len", "group.update"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.load_state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "optimizer_overrides", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load an optimizer state dict.\n\n        In general we should prefer the configuration of the existing optimizer\n        instance (e.g., learning rate) over that found in the state_dict. This\n        allows us to resume training from a checkpoint using a new set of\n        optimizer args.\n        \"\"\"", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "if", "optimizer_overrides", "is", "not", "None", "and", "len", "(", "optimizer_overrides", ")", ">", "0", ":", "\n", "# override learning rate, momentum, etc. with latest values", "\n", "            ", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", ".", "update", "(", "optimizer_overrides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.backward": [[72, 74], ["loss.backward"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.scalar_bias.ScalarBias.backward"], ["", "", "", "def", "backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.multiply_grads": [[75, 79], ["p.grad.data.mul_"], "methods", ["None"], ["", "def", "multiply_grads", "(", "self", ",", "c", ")", ":", "\n", "        ", "\"\"\"Multiplies grads by a constant ``c``.\"\"\"", "\n", "for", "p", "in", "self", ".", "params", ":", "\n", "            ", "p", ".", "grad", ".", "data", ".", "mul_", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.clip_grad_norm": [[80, 86], ["torch.nn.utils.clip_grad_norm_", "math.sqrt", "sum", "p.grad.data.norm"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.clip_grad_norm_"], ["", "", "def", "clip_grad_norm", "(", "self", ",", "max_norm", ")", ":", "\n", "        ", "\"\"\"Clips gradient norm.\"\"\"", "\n", "if", "max_norm", ">", "0", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "params", ",", "max_norm", ")", "\n", "", "else", ":", "\n", "            ", "return", "math", ".", "sqrt", "(", "sum", "(", "p", ".", "grad", ".", "data", ".", "norm", "(", ")", "**", "2", "for", "p", "in", "self", ".", "params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.step": [[87, 90], ["fairseq_optimizer.FairseqOptimizer.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\"\"\"", "\n", "self", ".", "optimizer", ".", "step", "(", "closure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fairseq_optimizer.FairseqOptimizer.zero_grad": [[91, 94], ["fairseq_optimizer.FairseqOptimizer.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clears the gradients of all optimized parameters.\"\"\"", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.DynamicLossScaler.__init__": [[15, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "init_scale", "=", "2.", "**", "15", ",", "scale_factor", "=", "2.", ",", "scale_window", "=", "2000", ")", ":", "\n", "        ", "self", ".", "loss_scale", "=", "init_scale", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "scale_window", "=", "scale_window", "\n", "self", ".", "_iter", "=", "0", "\n", "self", ".", "_last_overflow_iter", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.DynamicLossScaler.update_scale": [[22, 29], ["None"], "methods", ["None"], ["", "def", "update_scale", "(", "self", ",", "overflow", ")", ":", "\n", "        ", "if", "overflow", ":", "\n", "            ", "self", ".", "loss_scale", "/=", "self", ".", "scale_factor", "\n", "self", ".", "_last_overflow_iter", "=", "self", ".", "_iter", "\n", "", "elif", "(", "self", ".", "_iter", "-", "self", ".", "_last_overflow_iter", ")", "%", "self", ".", "scale_window", "==", "0", ":", "\n", "            ", "self", ".", "loss_scale", "*=", "self", ".", "scale_factor", "\n", "", "self", ".", "_iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.DynamicLossScaler.has_overflow": [[30, 36], ["float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "has_overflow", "(", "grad_norm", ")", ":", "\n", "# detect inf and nan", "\n", "        ", "if", "grad_norm", "==", "float", "(", "'inf'", ")", "or", "grad_norm", "!=", "grad_norm", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.__init__": [[40, 47], ["fairseq.optim.FairseqOptimizer.__init__", "fp16_optimizer.DynamicLossScaler"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ",", "fp32_optimizer", ",", "fp32_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "params", ")", "\n", "self", ".", "fp32_optimizer", "=", "fp32_optimizer", "\n", "self", ".", "fp32_params", "=", "fp32_params", "\n", "self", ".", "scaler", "=", "DynamicLossScaler", "(", "\n", "init_scale", "=", "args", ".", "fp16_init_scale", ",", "\n", "scale_window", "=", "(", "2", "**", "14", "/", "args", ".", "distributed_world_size", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.build_optimizer": [[49, 64], ["sum", "params[].new().float().new", "torch.nn.Parameter", "torch.nn.Parameter.data.new", "fairseq.optim.build_optimizer", "fp16_optimizer.FP16Optimizer", "p.data.numel", "fp32_params[].copy_", "p.data.numel", "params[].new().float", "p.data.view", "params[].new"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.__init__.build_optimizer"], ["", "@", "staticmethod", "\n", "def", "build_optimizer", "(", "args", ",", "params", ")", ":", "\n", "# create FP32 copy of parameters and grads", "\n", "        ", "total_param_size", "=", "sum", "(", "p", ".", "data", ".", "numel", "(", ")", "for", "p", "in", "params", ")", "\n", "fp32_params", "=", "params", "[", "0", "]", ".", "new", "(", "0", ")", ".", "float", "(", ")", ".", "new", "(", "total_param_size", ")", "\n", "offset", "=", "0", "\n", "for", "p", "in", "params", ":", "\n", "            ", "numel", "=", "p", ".", "data", ".", "numel", "(", ")", "\n", "fp32_params", "[", "offset", ":", "offset", "+", "numel", "]", ".", "copy_", "(", "p", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "offset", "+=", "numel", "\n", "", "fp32_params", "=", "torch", ".", "nn", ".", "Parameter", "(", "fp32_params", ")", "\n", "fp32_params", ".", "grad", "=", "fp32_params", ".", "data", ".", "new", "(", "total_param_size", ")", "\n", "\n", "fp32_optimizer", "=", "optim", ".", "build_optimizer", "(", "args", ",", "[", "fp32_params", "]", ")", "\n", "return", "FP16Optimizer", "(", "args", ",", "params", ",", "fp32_optimizer", ",", "fp32_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.optimizer": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fp32_optimizer", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.optimizer_config": [[69, 72], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fp32_optimizer", ".", "optimizer_config", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr": [[73, 75], ["fp16_optimizer.FP16Optimizer.fp32_optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fp32_optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.set_lr": [[76, 78], ["fp16_optimizer.FP16Optimizer.fp32_optimizer.set_lr"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.set_lr"], ["", "def", "set_lr", "(", "self", ",", "lr", ")", ":", "\n", "        ", "self", ".", "fp32_optimizer", ".", "set_lr", "(", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.state_dict": [[79, 84], ["fp16_optimizer.FP16Optimizer.fp32_optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the optimizer's state dict.\"\"\"", "\n", "state_dict", "=", "self", ".", "fp32_optimizer", ".", "state_dict", "(", ")", "\n", "state_dict", "[", "'loss_scale'", "]", "=", "self", ".", "scaler", ".", "loss_scale", "\n", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.load_state_dict": [[85, 96], ["fp16_optimizer.FP16Optimizer.fp32_optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "optimizer_overrides", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load an optimizer state dict.\n\n        In general we should prefer the configuration of the existing optimizer\n        instance (e.g., learning rate) over that found in the state_dict. This\n        allows us to resume training from a checkpoint using a new set of\n        optimizer args.\n        \"\"\"", "\n", "if", "'loss_scale'", "in", "state_dict", ":", "\n", "            ", "self", ".", "scaler", ".", "loss_scale", "=", "state_dict", "[", "'loss_scale'", "]", "\n", "", "self", ".", "fp32_optimizer", ".", "load_state_dict", "(", "state_dict", ",", "optimizer_overrides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.backward": [[97, 101], ["loss.backward"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.scalar_bias.ScalarBias.backward"], ["", "def", "backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "loss", "=", "loss", "*", "self", ".", "scaler", ".", "loss_scale", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "_needs_sync", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer._sync_fp16_grads_to_fp32": [[102, 118], ["fp16_optimizer.FP16Optimizer.fp32_params.grad.data.mul_", "grad_data.numel", "fp16_optimizer.FP16Optimizer.fp32_params.grad.data[].copy_", "p.data.new_zeros", "grad_data.view"], "methods", ["None"], ["", "def", "_sync_fp16_grads_to_fp32", "(", "self", ",", "multiply_grads", "=", "1.", ")", ":", "\n", "        ", "if", "self", ".", "_needs_sync", ":", "\n", "# copy FP16 grads to FP32", "\n", "            ", "offset", "=", "0", "\n", "for", "p", "in", "self", ".", "params", ":", "\n", "                ", "if", "not", "p", ".", "requires_grad", ":", "\n", "                    ", "continue", "\n", "", "grad_data", "=", "p", ".", "grad", ".", "data", "if", "p", ".", "grad", "is", "not", "None", "else", "p", ".", "data", ".", "new_zeros", "(", "p", ".", "data", ".", "shape", ")", "\n", "numel", "=", "grad_data", ".", "numel", "(", ")", "\n", "self", ".", "fp32_params", ".", "grad", ".", "data", "[", "offset", ":", "offset", "+", "numel", "]", ".", "copy_", "(", "grad_data", ".", "view", "(", "-", "1", ")", ")", "\n", "offset", "+=", "numel", "\n", "\n", "# correct for dynamic loss scaler", "\n", "", "self", ".", "fp32_params", ".", "grad", ".", "data", ".", "mul_", "(", "multiply_grads", "/", "self", ".", "scaler", ".", "loss_scale", ")", "\n", "\n", "self", ".", "_needs_sync", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.multiply_grads": [[119, 125], ["fp16_optimizer.FP16Optimizer._sync_fp16_grads_to_fp32", "fp16_optimizer.FP16Optimizer.fp32_params.grad.data.mul_"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer._sync_fp16_grads_to_fp32"], ["", "", "def", "multiply_grads", "(", "self", ",", "c", ")", ":", "\n", "        ", "\"\"\"Multiplies grads by a constant ``c``.\"\"\"", "\n", "if", "self", ".", "_needs_sync", ":", "\n", "            ", "self", ".", "_sync_fp16_grads_to_fp32", "(", "c", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fp32_params", ".", "grad", ".", "data", ".", "mul_", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.clip_grad_norm": [[126, 143], ["fp16_optimizer.FP16Optimizer._sync_fp16_grads_to_fp32", "fairseq.utils.clip_grad_norm_", "fp16_optimizer.DynamicLossScaler.has_overflow", "fp16_optimizer.FP16Optimizer.scaler.update_scale", "OverflowError", "Exception", "str"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer._sync_fp16_grads_to_fp32", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.clip_grad_norm_", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.DynamicLossScaler.has_overflow", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.DynamicLossScaler.update_scale"], ["", "", "def", "clip_grad_norm", "(", "self", ",", "max_norm", ")", ":", "\n", "        ", "\"\"\"Clips gradient norm and updates dynamic loss scaler.\"\"\"", "\n", "self", ".", "_sync_fp16_grads_to_fp32", "(", ")", "\n", "grad_norm", "=", "utils", ".", "clip_grad_norm_", "(", "self", ".", "fp32_params", ".", "grad", ".", "data", ",", "max_norm", ")", "\n", "\n", "# detect overflow and adjust loss scale", "\n", "overflow", "=", "DynamicLossScaler", ".", "has_overflow", "(", "grad_norm", ")", "\n", "self", ".", "scaler", ".", "update_scale", "(", "overflow", ")", "\n", "if", "overflow", ":", "\n", "            ", "if", "self", ".", "scaler", ".", "loss_scale", "<=", "self", ".", "args", ".", "min_loss_scale", ":", "\n", "                ", "raise", "Exception", "(", "(", "\n", "'Minimum loss scale reached ({}). Your loss is probably exploding. '", "\n", "'Try lowering the learning rate, using gradient clipping or '", "\n", "'increasing the batch size.'", "\n", ")", ".", "format", "(", "self", ".", "args", ".", "min_loss_scale", ")", ")", "\n", "", "raise", "OverflowError", "(", "'setting loss scale to: '", "+", "str", "(", "self", ".", "scaler", ".", "loss_scale", ")", ")", "\n", "", "return", "grad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.step": [[144, 157], ["fp16_optimizer.FP16Optimizer._sync_fp16_grads_to_fp32", "fp16_optimizer.FP16Optimizer.fp32_optimizer.step", "p.data.numel", "p.data.copy_", "fp16_optimizer.FP16Optimizer.fp32_params.data[].view_as"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer._sync_fp16_grads_to_fp32", "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\"\"\"", "\n", "self", ".", "_sync_fp16_grads_to_fp32", "(", ")", "\n", "self", ".", "fp32_optimizer", ".", "step", "(", "closure", ")", "\n", "\n", "# copy FP32 params back into FP16 model", "\n", "offset", "=", "0", "\n", "for", "p", "in", "self", ".", "params", ":", "\n", "            ", "if", "not", "p", ".", "requires_grad", ":", "\n", "                ", "continue", "\n", "", "numel", "=", "p", ".", "data", ".", "numel", "(", ")", "\n", "p", ".", "data", ".", "copy_", "(", "self", ".", "fp32_params", ".", "data", "[", "offset", ":", "offset", "+", "numel", "]", ".", "view_as", "(", "p", ".", "data", ")", ")", "\n", "offset", "+=", "numel", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.zero_grad": [[158, 166], ["fp16_optimizer.FP16Optimizer.fp32_optimizer.zero_grad", "p.grad.detach_", "p.grad.zero_"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.zero_grad"], ["", "", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clears the gradients of all optimized parameters.\"\"\"", "\n", "self", ".", "fp32_optimizer", ".", "zero_grad", "(", ")", "\n", "for", "p", "in", "self", ".", "params", ":", "\n", "            ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                ", "p", ".", "grad", ".", "detach_", "(", ")", "\n", "p", ".", "grad", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "_needs_sync", "=", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.adam.FairseqAdam.__init__": [[17, 20], ["FairseqOptimizer.__init__", "adam.Adam"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "params", ")", "\n", "self", ".", "_optimizer", "=", "Adam", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.adam.FairseqAdam.add_args": [[21, 28], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--adam-betas'", ",", "default", "=", "'(0.9, 0.999)'", ",", "metavar", "=", "'B'", ",", "\n", "help", "=", "'betas for Adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam-eps'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'epsilon for Adam optimizer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.adam.FairseqAdam.optimizer_config": [[29, 42], ["eval"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'betas'", ":", "eval", "(", "self", ".", "args", ".", "adam_betas", ")", ",", "\n", "'eps'", ":", "self", ".", "args", ".", "adam_eps", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.adam.Adam.__init__": [[72, 77], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "Adam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.adam.Adam.step": [[78, 139], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.max", "torch.max", "torch.max", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "p.data.add_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.__init__.build_optimizer": [[19, 22], ["list", "filter"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.__init__.register_optimizer": [[24, 41], ["OPTIMIZER_CLASS_NAMES.add", "ValueError", "issubclass", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.add"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.nag.FairseqNAG.__init__": [[15, 18], ["FairseqOptimizer.__init__", "nag.NAG"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "params", ")", "\n", "self", ".", "_optimizer", "=", "NAG", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.nag.FairseqNAG.optimizer_config": [[19, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'momentum'", ":", "self", ".", "args", ".", "momentum", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.nag.NAG.__init__": [[35, 38], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", "0", ",", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "lr_old", "=", "lr", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "weight_decay", ")", "\n", "super", "(", "NAG", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.nag.NAG.step": [[39, 78], ["closure", "group.get", "p.data.add_", "p.data.add_", "buf.mul_().add_", "d_p.clone().zero_", "p.data.mul_", "buf.mul_", "d_p.clone"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "lr", "=", "group", "[", "'lr'", "]", "\n", "lr_old", "=", "group", ".", "get", "(", "'lr_old'", ",", "lr", ")", "\n", "lr_correct", "=", "lr", "/", "lr_old", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "d_p", "=", "p", ".", "grad", ".", "data", "\n", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                    ", "param_state", "[", "'momentum_buffer'", "]", "=", "d_p", ".", "clone", "(", ")", ".", "zero_", "(", ")", "\n", "\n", "", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "p", ".", "data", ".", "mul_", "(", "1", "-", "lr", "*", "weight_decay", ")", "\n", "", "p", ".", "data", ".", "add_", "(", "momentum", "*", "momentum", "*", "lr_correct", ",", "buf", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "(", "1", "+", "momentum", ")", "*", "lr", ",", "d_p", ")", "\n", "\n", "buf", ".", "mul_", "(", "momentum", "*", "lr_correct", ")", ".", "add_", "(", "-", "lr", ",", "d_p", ")", "\n", "\n", "", "group", "[", "'lr_old'", "]", "=", "lr", "\n", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.sgd.SGD.__init__": [[15, 18], ["FairseqOptimizer.__init__", "torch.optim.SGD"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "params", ")", "\n", "self", ".", "_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.optim.sgd.SGD.optimizer_config": [[19, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'momentum'", ":", "self", ".", "args", ".", "momentum", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.reduce_lr_on_plateau.ReduceLROnPlateau.__init__": [[17, 26], ["FairseqLRScheduler.__init__", "torch.optim.lr_scheduler.ReduceLROnPlateau", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with reduce_lr_on_plateau.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "self", ".", "optimizer", ".", "optimizer", ",", "patience", "=", "0", ",", "factor", "=", "args", ".", "lr_shrink", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.reduce_lr_on_plateau.ReduceLROnPlateau.state_dict": [[27, 32], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the LR scheduler state dict.\"\"\"", "\n", "return", "{", "\n", "'best'", ":", "self", ".", "lr_scheduler", ".", "best", ",", "\n", "'last_epoch'", ":", "self", ".", "lr_scheduler", ".", "last_epoch", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.reduce_lr_on_plateau.ReduceLROnPlateau.load_state_dict": [[34, 39], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Load an LR scheduler state dict.\"\"\"", "\n", "self", ".", "lr_scheduler", ".", "best", "=", "state_dict", "[", "'best'", "]", "\n", "if", "'last_epoch'", "in", "state_dict", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "last_epoch", "=", "state_dict", "[", "'last_epoch'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.reduce_lr_on_plateau.ReduceLROnPlateau.step": [[40, 47], ["reduce_lr_on_plateau.ReduceLROnPlateau.optimizer.get_lr", "reduce_lr_on_plateau.ReduceLROnPlateau.lr_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr", "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step"], ["", "", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "if", "val_loss", "is", "not", "None", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", "val_loss", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "last_epoch", "=", "epoch", "\n", "", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.inverse_square_root_schedule.InverseSquareRootSchedule.__init__": [[34, 54], ["FairseqLRScheduler.__init__", "inverse_square_root_schedule.InverseSquareRootSchedule.optimizer.set_lr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with inverse_sqrt.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "", "warmup_end_lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "if", "args", ".", "warmup_init_lr", "<", "0", ":", "\n", "            ", "args", ".", "warmup_init_lr", "=", "warmup_end_lr", "\n", "\n", "# linearly warmup for the first args.warmup_updates", "\n", "", "self", ".", "lr_step", "=", "(", "warmup_end_lr", "-", "args", ".", "warmup_init_lr", ")", "/", "args", ".", "warmup_updates", "\n", "\n", "# then, decay prop. to the inverse square root of the update number", "\n", "self", ".", "decay_factor", "=", "warmup_end_lr", "*", "args", ".", "warmup_updates", "**", "0.5", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "args", ".", "warmup_init_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.inverse_square_root_schedule.InverseSquareRootSchedule.add_args": [[55, 62], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "4000", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-init-lr'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial learning rate during warmup phase; default is args.lr'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.inverse_square_root_schedule.InverseSquareRootSchedule.step": [[63, 68], ["super().step", "inverse_square_root_schedule.InverseSquareRootSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.inverse_square_root_schedule.InverseSquareRootSchedule.step_update": [[69, 77], ["inverse_square_root_schedule.InverseSquareRootSchedule.optimizer.set_lr"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "num_updates", "<", "self", ".", "args", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "args", ".", "warmup_init_lr", "+", "num_updates", "*", "self", ".", "lr_step", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "decay_factor", "*", "num_updates", "**", "-", "0.5", "\n", "", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.__init__": [[13, 20], ["object.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "optimizer", ",", "FairseqOptimizer", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'optimizer must be an instance of FairseqOptimizer'", ")", "\n", "", "self", ".", "args", "=", "args", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "best", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.add_args": [[21, 25], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict": [[26, 29], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the LR scheduler state dict.\"\"\"", "\n", "return", "{", "'best'", ":", "self", ".", "best", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict": [[30, 33], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Load an LR scheduler state dict.\"\"\"", "\n", "self", ".", "best", "=", "state_dict", "[", "'best'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.step": [[34, 41], ["min"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "if", "val_loss", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "best", "is", "None", ":", "\n", "                ", "self", ".", "best", "=", "val_loss", "\n", "", "else", ":", "\n", "                ", "self", ".", "best", "=", "min", "(", "self", ".", "best", ",", "val_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.step_update": [[42, 45], ["fairseq_lr_scheduler.FairseqLRScheduler.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr"], ["", "", "", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fixed_schedule.FixedSchedule.__init__": [[15, 26], ["FairseqLRScheduler.__init__", "getattr"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "\n", "# set defaults", "\n", "args", ".", "warmup_updates", "=", "getattr", "(", "args", ",", "'warmup_updates'", ",", "0", ")", "or", "0", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "if", "args", ".", "warmup_updates", ">", "0", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "1.", "/", "args", ".", "warmup_updates", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fixed_schedule.FixedSchedule.add_args": [[27, 34], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--force-anneal'", ",", "'--fa'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'force annealing at specified epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fixed_schedule.FixedSchedule.get_next_lr": [[35, 44], ["min", "len"], "methods", ["None"], ["", "def", "get_next_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "lrs", "=", "self", ".", "args", ".", "lr", "\n", "if", "self", ".", "args", ".", "force_anneal", "is", "None", "or", "epoch", "<", "self", ".", "args", ".", "force_anneal", ":", "\n", "# use fixed LR schedule", "\n", "            ", "next_lr", "=", "lrs", "[", "min", "(", "epoch", ",", "len", "(", "lrs", ")", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "# annneal based on lr_shrink", "\n", "            ", "next_lr", "=", "lrs", "[", "-", "1", "]", "*", "self", ".", "args", ".", "lr_shrink", "**", "(", "epoch", "+", "1", "-", "self", ".", "args", ".", "force_anneal", ")", "\n", "", "return", "next_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fixed_schedule.FixedSchedule.step": [[45, 51], ["super().step", "fixed_schedule.FixedSchedule.get_next_lr", "fixed_schedule.FixedSchedule.optimizer.set_lr", "fixed_schedule.FixedSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fixed_schedule.FixedSchedule.get_next_lr", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.set_lr", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "self", ".", "lr", "=", "self", ".", "get_next_lr", "(", "epoch", ")", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "warmup_factor", "*", "self", ".", "lr", ")", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.fixed_schedule.FixedSchedule.step_update": [[52, 58], ["fixed_schedule.FixedSchedule.optimizer.get_lr", "fixed_schedule.FixedSchedule.optimizer.set_lr", "float"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "self", ".", "args", ".", "warmup_updates", ">", "0", "and", "num_updates", "<=", "self", ".", "args", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "num_updates", "/", "float", "(", "self", ".", "args", ".", "warmup_updates", ")", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "warmup_factor", "*", "self", ".", "lr", ")", "\n", "", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.__init__.build_lr_scheduler": [[17, 19], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.__init__.register_lr_scheduler": [[21, 33], ["ValueError", "issubclass", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.triangular_lr_scheduler.TriangularSchedule.__init__": [[21, 41], ["FairseqLRScheduler.__init__", "triangular_lr_scheduler.TriangularSchedule.optimizer.set_lr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with triangular.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "\n", "", "lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "\n", "assert", "args", ".", "max_lr", ">", "lr", ",", "'max_lr must be more than lr'", "\n", "self", ".", "min_lr", "=", "lr", "\n", "self", ".", "max_lr", "=", "args", ".", "max_lr", "\n", "self", ".", "stepsize", "=", "args", ".", "lr_period_updates", "//", "2", "\n", "self", ".", "lr_shrink", "=", "args", ".", "lr_shrink", "\n", "self", ".", "shrink_min", "=", "args", ".", "shrink_min", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "self", ".", "min_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.triangular_lr_scheduler.TriangularSchedule.add_args": [[42, 51], ["parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--max-lr'", ",", "required", "=", "True", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'max learning rate, must be more than args.lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-period-updates'", ",", "default", "=", "5000", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial number of updates per period (cycle length)'", ")", "\n", "parser", ".", "add_argument", "(", "'--shrink-min'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, also shrinks min lr'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.triangular_lr_scheduler.TriangularSchedule.step": [[52, 57], ["super().step", "triangular_lr_scheduler.TriangularSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.triangular_lr_scheduler.TriangularSchedule.step_update": [[58, 74], ["math.floor", "abs", "triangular_lr_scheduler.TriangularSchedule.optimizer.set_lr", "max"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.set_lr", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "cycle", "=", "math", ".", "floor", "(", "num_updates", "/", "(", "2", "*", "self", ".", "stepsize", ")", ")", "\n", "\n", "lr_shrink", "=", "self", ".", "lr_shrink", "**", "cycle", "\n", "max_lr", "=", "self", ".", "max_lr", "*", "lr_shrink", "\n", "if", "self", ".", "shrink_min", ":", "\n", "            ", "min_lr", "=", "self", ".", "min_lr", "*", "lr_shrink", "\n", "", "else", ":", "\n", "            ", "min_lr", "=", "self", ".", "min_lr", "\n", "\n", "", "x", "=", "abs", "(", "num_updates", "/", "self", ".", "stepsize", "-", "2", "*", "(", "cycle", "+", "1", ")", "+", "1", ")", "\n", "self", ".", "lr", "=", "min_lr", "+", "(", "max_lr", "-", "min_lr", ")", "*", "max", "(", "0", ",", "(", "1", "-", "x", ")", ")", "\n", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.__init__": [[30, 62], ["FairseqLRScheduler.__init__", "cosine_lr_scheduler.CosineSchedule.optimizer.set_lr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with cosine.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "\n", "", "warmup_end_lr", "=", "args", ".", "max_lr", "\n", "if", "args", ".", "warmup_init_lr", "<", "0", ":", "\n", "            ", "args", ".", "warmup_init_lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "\n", "", "self", ".", "min_lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "self", ".", "max_lr", "=", "args", ".", "max_lr", "\n", "\n", "assert", "self", ".", "max_lr", ">", "self", ".", "min_lr", ",", "'max_lr must be more than lr'", "\n", "\n", "self", ".", "t_mult", "=", "args", ".", "t_mult", "\n", "self", ".", "period", "=", "args", ".", "lr_period_updates", "\n", "\n", "if", "args", ".", "warmup_updates", ">", "0", ":", "\n", "# linearly warmup for the first args.warmup_updates", "\n", "            ", "self", ".", "lr_step", "=", "(", "warmup_end_lr", "-", "args", ".", "warmup_init_lr", ")", "/", "args", ".", "warmup_updates", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr_step", "=", "1", "\n", "\n", "", "self", ".", "warmup_updates", "=", "args", ".", "warmup_updates", "\n", "self", ".", "lr_shrink", "=", "args", ".", "lr_shrink", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "args", ".", "warmup_init_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.add_args": [[63, 76], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-init-lr'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial learning rate during warmup phase; default is args.lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-lr'", ",", "required", "=", "True", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'max learning rate, must be more than args.lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--t-mult'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'factor to grow the length of each period'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-period-updates'", ",", "default", "=", "5000", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial number of updates per period'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step": [[77, 82], ["super().step", "cosine_lr_scheduler.CosineSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step_update": [[83, 106], ["cosine_lr_scheduler.CosineSchedule.optimizer.set_lr", "math.floor", "math.floor", "math.log", "math.cos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.optim.fp16_optimizer.FP16Optimizer.set_lr", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "num_updates", "<", "self", ".", "args", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "args", ".", "warmup_init_lr", "+", "num_updates", "*", "self", ".", "lr_step", "\n", "", "else", ":", "\n", "            ", "curr_updates", "=", "num_updates", "-", "self", ".", "args", ".", "warmup_updates", "\n", "if", "self", ".", "t_mult", "!=", "1", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "1", "-", "curr_updates", "/", "self", ".", "period", "*", "(", "1", "-", "self", ".", "t_mult", ")", ",", "self", ".", "t_mult", ")", ")", "\n", "t_i", "=", "self", ".", "t_mult", "**", "i", "*", "self", ".", "period", "\n", "t_curr", "=", "curr_updates", "-", "(", "1", "-", "self", ".", "t_mult", "**", "i", ")", "/", "(", "1", "-", "self", ".", "t_mult", ")", "*", "self", ".", "period", "\n", "", "else", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "curr_updates", "/", "self", ".", "period", ")", "\n", "t_i", "=", "self", ".", "period", "\n", "t_curr", "=", "curr_updates", "-", "(", "self", ".", "period", "*", "i", ")", "\n", "\n", "", "lr_shrink", "=", "self", ".", "lr_shrink", "**", "i", "\n", "min_lr", "=", "self", ".", "min_lr", "*", "lr_shrink", "\n", "max_lr", "=", "self", ".", "max_lr", "*", "lr_shrink", "\n", "\n", "self", ".", "lr", "=", "min_lr", "+", "0.5", "*", "(", "max_lr", "-", "min_lr", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "t_curr", "/", "t_i", ")", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.grad_multiply.GradMultiply.forward": [[12, 17], ["x.new"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "scale", ")", ":", "\n", "        ", "ctx", ".", "scale", "=", "scale", "\n", "res", "=", "x", ".", "new", "(", "x", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.grad_multiply.GradMultiply.backward": [[18, 21], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "return", "grad", "*", "ctx", ".", "scale", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.learned_positional_embedding.LearnedPositionalEmbedding.__init__": [[20, 23], ["torch.Embedding.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ",", "left_pad", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", "\n", "self", ".", "left_pad", "=", "left_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.learned_positional_embedding.LearnedPositionalEmbedding.forward": [[24, 32], ["super().forward", "input.data.new().fill_", "fairseq.utils.make_positions", "input.data.new", "input.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.forward", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.make_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "forward", "(", "self", ",", "input", ",", "incremental_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"Input is expected to be of size [bsz x seqlen].\"\"\"", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "# positions is the same for every token when decoding a single step", "\n", "            ", "positions", "=", "input", ".", "data", ".", "new", "(", "1", ",", "1", ")", ".", "fill_", "(", "self", ".", "padding_idx", "+", "input", ".", "size", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "positions", "=", "utils", ".", "make_positions", "(", "input", ".", "data", ",", "self", ".", "padding_idx", ",", "self", ".", "left_pad", ")", "\n", "", "return", "super", "(", ")", ".", "forward", "(", "positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.learned_positional_embedding.LearnedPositionalEmbedding.max_positions": [[33, 36], ["None"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum number of supported positions.\"\"\"", "\n", "return", "self", ".", "num_embeddings", "-", "self", ".", "padding_idx", "-", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention.__init__": [[22, 49], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "multihead_attention.MultiheadAttention.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "multihead_attention.MultiheadAttention.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.highway.Highway.reset_parameters"], ["def", "__init__", "(", "self", ",", "embed_dim", ",", "num_heads", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ",", "add_bias_kv", "=", "False", ",", "add_zero_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "assert", "self", ".", "head_dim", "*", "num_heads", "==", "self", ".", "embed_dim", ",", "\"embed_dim must be divisible by num_heads\"", "\n", "self", ".", "scaling", "=", "self", ".", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "in_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "3", "*", "embed_dim", ",", "embed_dim", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "in_proj_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "3", "*", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'in_proj_bias'", ",", "None", ")", "\n", "", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "if", "add_bias_kv", ":", "\n", "            ", "self", ".", "bias_k", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "bias_v", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_k", "=", "self", ".", "bias_v", "=", "None", "\n", "\n", "", "self", ".", "add_zero_attn", "=", "add_zero_attn", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "self", ".", "onnx_trace", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention.prepare_for_onnx_export_": [[50, 52], ["None"], "methods", ["None"], ["", "def", "prepare_for_onnx_export_", "(", "self", ")", ":", "\n", "        ", "self", ".", "onnx_trace", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention.reset_parameters": [[53, 63], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "in_proj_weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "out_proj", ".", "weight", ")", "\n", "if", "self", ".", "in_proj_bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "in_proj_bias", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "out_proj", ".", "bias", ",", "0.", ")", "\n", "", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "bias_k", ")", "\n", "", "if", "self", ".", "bias_v", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "bias_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention.forward": [[64, 187], ["query.size", "torch.cat.size", "torch.cat.size", "multihead_attention.MultiheadAttention.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax().type_as", "torch.softmax().type_as", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "multihead_attention.MultiheadAttention.transpose().contiguous().view", "multihead_attention.MultiheadAttention.out_proj", "query.data_ptr", "key.data_ptr", "value.data_ptr", "key.data_ptr", "value.data_ptr", "list", "key.size", "value.size", "multihead_attention.MultiheadAttention._get_input_buffer", "multihead_attention.MultiheadAttention.in_proj_qkv", "multihead_attention.MultiheadAttention._set_input_buffer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.cat.transpose", "list", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "attn_weights.view.view.view", "attn_weights.view.view.float().masked_fill().type_as", "attn_weights.view.view.view", "list", "attn_weights.view.view.view", "query.size", "multihead_attention.MultiheadAttention.in_proj_q", "multihead_attention.MultiheadAttention.in_proj_q", "multihead_attention.MultiheadAttention.in_proj_k", "multihead_attention.MultiheadAttention.in_proj_v", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "multihead_attention.MultiheadAttention.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_weights.view.view.size", "torch.softmax", "torch.softmax", "multihead_attention.MultiheadAttention.size", "multihead_attention.MultiheadAttention.transpose().contiguous", "attn_weights.view.view.sum", "multihead_attention.MultiheadAttention.in_proj_kv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "multihead_attention.MultiheadAttention.bias_k.repeat", "multihead_attention.MultiheadAttention.bias_v.repeat", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "attn_weights.view.view.float().masked_fill", "attn_weights.view.view.float", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "multihead_attention.MultiheadAttention.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "float", "multihead_attention.MultiheadAttention.transpose", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "attn_weights.view.view.float", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._get_input_buffer", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_qkv", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._set_input_buffer", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_q", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_q", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_k", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_v", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_kv", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "key_padding_mask", "=", "None", ",", "incremental_state", "=", "None", ",", "\n", "need_weights", "=", "True", ",", "static_kv", "=", "False", ",", "attn_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Input shape: Time x Batch x Channel\n\n        Self-attention can be implemented by passing in the same arguments for\n        query, key and value. Timesteps can be masked by supplying a T x T mask in the\n        `attn_mask` argument. Padding elements can be excluded from\n        the key by passing a binary ByteTensor (`key_padding_mask`) with shape:\n        batch x src_len, where padding elements are indicated by 1s.\n        \"\"\"", "\n", "\n", "qkv_same", "=", "query", ".", "data_ptr", "(", ")", "==", "key", ".", "data_ptr", "(", ")", "==", "value", ".", "data_ptr", "(", ")", "\n", "kv_same", "=", "key", ".", "data_ptr", "(", ")", "==", "value", ".", "data_ptr", "(", ")", "\n", "\n", "tgt_len", ",", "bsz", ",", "embed_dim", "=", "query", ".", "size", "(", ")", "\n", "assert", "embed_dim", "==", "self", ".", "embed_dim", "\n", "assert", "list", "(", "query", ".", "size", "(", ")", ")", "==", "[", "tgt_len", ",", "bsz", ",", "embed_dim", "]", "\n", "assert", "key", ".", "size", "(", ")", "==", "value", ".", "size", "(", ")", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "saved_state", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "'prev_key'", "in", "saved_state", ":", "\n", "# previous time steps are cached - no need to recompute", "\n", "# key and value if they are static", "\n", "                ", "if", "static_kv", ":", "\n", "                    ", "assert", "kv_same", "and", "not", "qkv_same", "\n", "key", "=", "value", "=", "None", "\n", "", "", "", "else", ":", "\n", "            ", "saved_state", "=", "None", "\n", "\n", "", "if", "qkv_same", ":", "\n", "# self-attention", "\n", "            ", "q", ",", "k", ",", "v", "=", "self", ".", "in_proj_qkv", "(", "query", ")", "\n", "", "elif", "kv_same", ":", "\n", "# encoder-decoder attention", "\n", "            ", "q", "=", "self", ".", "in_proj_q", "(", "query", ")", "\n", "if", "key", "is", "None", ":", "\n", "                ", "assert", "value", "is", "None", "\n", "k", "=", "v", "=", "None", "\n", "", "else", ":", "\n", "                ", "k", ",", "v", "=", "self", ".", "in_proj_kv", "(", "key", ")", "\n", "", "", "else", ":", "\n", "            ", "q", "=", "self", ".", "in_proj_q", "(", "query", ")", "\n", "k", "=", "self", ".", "in_proj_k", "(", "key", ")", "\n", "v", "=", "self", ".", "in_proj_v", "(", "value", ")", "\n", "", "q", "*=", "self", ".", "scaling", "\n", "\n", "if", "saved_state", "is", "not", "None", ":", "\n", "\n", "            ", "if", "'prev_key'", "in", "saved_state", ":", "\n", "                ", "if", "static_kv", ":", "\n", "                    ", "k", "=", "saved_state", "[", "'prev_key'", "]", "\n", "", "else", ":", "\n", "                    ", "k", "=", "torch", ".", "cat", "(", "(", "saved_state", "[", "'prev_key'", "]", ",", "k", ")", ",", "dim", "=", "0", ")", "\n", "", "", "if", "'prev_value'", "in", "saved_state", ":", "\n", "                ", "if", "static_kv", ":", "\n", "                    ", "v", "=", "saved_state", "[", "'prev_value'", "]", "\n", "", "else", ":", "\n", "                    ", "v", "=", "torch", ".", "cat", "(", "(", "saved_state", "[", "'prev_value'", "]", ",", "v", ")", ",", "dim", "=", "0", ")", "\n", "", "", "saved_state", "[", "'prev_key'", "]", "=", "k", "\n", "saved_state", "[", "'prev_value'", "]", "=", "v", "\n", "\n", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "saved_state", ")", "\n", "\n", "", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "bias_v", "is", "not", "None", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "self", ".", "bias_k", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "self", ".", "bias_v", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "attn_mask", ".", "new_zeros", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "key_padding_mask", "=", "torch", ".", "cat", "(", "\n", "[", "key_padding_mask", ",", "key_padding_mask", ".", "new_zeros", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "src_len", "=", "k", ".", "size", "(", "0", ")", "\n", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "assert", "key_padding_mask", ".", "size", "(", "0", ")", "==", "bsz", "\n", "assert", "key_padding_mask", ".", "size", "(", "1", ")", "==", "src_len", "\n", "\n", "", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "src_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "src_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "add_zero_attn", ":", "\n", "            ", "src_len", "+=", "1", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "k", ".", "new_zeros", "(", "(", "k", ".", "size", "(", "0", ")", ",", "1", ")", "+", "k", ".", "size", "(", ")", "[", "2", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "v", ".", "new_zeros", "(", "(", "v", ".", "size", "(", "0", ")", ",", "1", ")", "+", "v", ".", "size", "(", ")", "[", "2", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "attn_mask", ".", "new_zeros", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "key_padding_mask", "=", "torch", ".", "cat", "(", "[", "key_padding_mask", ",", "key_padding_mask", ".", "new_zeros", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "attn_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "assert", "list", "(", "attn_weights", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", "]", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_weights", "+=", "attn_mask", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "# don't attend to padding symbols", "\n", "            ", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "attn_weights", "=", "attn_weights", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "float", "(", "'-inf'", ")", ",", "\n", ")", ".", "type_as", "(", "attn_weights", ")", "# FP16 support: cast to float and back", "\n", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "\n", "", "attn_weights", "=", "F", ".", "softmax", "(", "attn_weights", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type_as", "(", "attn_weights", ")", "\n", "attn_weights", "=", "F", ".", "dropout", "(", "attn_weights", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "attn", "=", "torch", ".", "bmm", "(", "attn_weights", ",", "v", ")", "\n", "assert", "list", "(", "attn", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "self", ".", "head_dim", "]", "\n", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "embed_dim", ")", "\n", "attn", "=", "self", ".", "out_proj", "(", "attn", ")", "\n", "\n", "if", "need_weights", ":", "\n", "# average attention weights over heads", "\n", "            ", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "attn_weights", "=", "attn_weights", ".", "sum", "(", "dim", "=", "1", ")", "/", "self", ".", "num_heads", "\n", "", "else", ":", "\n", "            ", "attn_weights", "=", "None", "\n", "\n", "", "return", "attn", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention.in_proj_qkv": [[188, 190], ["multihead_attention.MultiheadAttention._in_proj().chunk", "multihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._in_proj"], ["", "def", "in_proj_qkv", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "query", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention.in_proj_kv": [[191, 193], ["multihead_attention.MultiheadAttention._in_proj().chunk", "multihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._in_proj"], ["", "def", "in_proj_kv", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "key", ",", "start", "=", "self", ".", "embed_dim", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention.in_proj_q": [[194, 196], ["multihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._in_proj"], ["", "def", "in_proj_q", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "query", ",", "end", "=", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention.in_proj_k": [[197, 199], ["multihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._in_proj"], ["", "def", "in_proj_k", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "key", ",", "start", "=", "self", ".", "embed_dim", ",", "end", "=", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention.in_proj_v": [[200, 202], ["multihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._in_proj"], ["", "def", "in_proj_v", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "value", ",", "start", "=", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention._in_proj": [[203, 210], ["torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "_in_proj", "(", "self", ",", "input", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "weight", "=", "self", ".", "in_proj_weight", "\n", "bias", "=", "self", ".", "in_proj_bias", "\n", "weight", "=", "weight", "[", "start", ":", "end", ",", ":", "]", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "bias", "[", "start", ":", "end", "]", "\n", "", "return", "F", ".", "linear", "(", "input", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention.reorder_incremental_state": [[211, 218], ["multihead_attention.MultiheadAttention._get_input_buffer", "multihead_attention.MultiheadAttention.keys", "multihead_attention.MultiheadAttention._set_input_buffer", "input_buffer[].index_select", "new_order.to"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._get_input_buffer", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._set_input_buffer"], ["", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"Reorder buffered internal state (for incremental generation).\"\"\"", "\n", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "not", "None", ":", "\n", "            ", "for", "k", "in", "input_buffer", ".", "keys", "(", ")", ":", "\n", "                ", "input_buffer", "[", "k", "]", "=", "input_buffer", "[", "k", "]", ".", "index_select", "(", "1", ",", "new_order", ".", "to", "(", "input_buffer", "[", "k", "]", ".", "device", ")", ")", "\n", "", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "input_buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention._get_input_buffer": [[219, 225], ["fairseq.utils.get_incremental_state"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.get_incremental_state"], ["", "", "def", "_get_input_buffer", "(", "self", ",", "incremental_state", ")", ":", "\n", "        ", "return", "utils", ".", "get_incremental_state", "(", "\n", "self", ",", "\n", "incremental_state", ",", "\n", "'attn_state'", ",", "\n", ")", "or", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.multihead_attention.MultiheadAttention._set_input_buffer": [[226, 232], ["fairseq.utils.set_incremental_state"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.set_incremental_state"], ["", "def", "_set_input_buffer", "(", "self", ",", "incremental_state", ",", "buffer", ")", ":", "\n", "        ", "utils", ".", "set_incremental_state", "(", "\n", "self", ",", "\n", "incremental_state", ",", "\n", "'attn_state'", ",", "\n", "buffer", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.dropout1d.Dropout1d.__init__": [[17, 21], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "dim", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.dropout1d.Dropout1d.extra_repr": [[22, 24], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'p={}, dim={}'", ".", "format", "(", "self", ".", "p", ",", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.dropout1d.Dropout1d.forward": [[25, 36], ["list", "x.size", "torch.dropout", "torch.dropout", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Drop the entire 1D (along `dim`) channel with probability `p`.\n        :param x: tensor with any shape\n        :return: tensor with the same shape and dtype as x\n        \"\"\"", "\n", "noise_shape", "=", "list", "(", "x", ".", "size", "(", ")", ")", "\n", "noise_shape", "[", "self", ".", "dim", "]", "=", "1", "\n", "x", "=", "x", "*", "F", ".", "dropout", "(", "torch", ".", "ones", "(", "noise_shape", ",", "dtype", "=", "x", ".", "dtype", ",", "layout", "=", "x", ".", "layout", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "p", "=", "self", ".", "p", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.__init__": [[30, 37], ["torch.nn.Module.__init__", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm"], ["def", "__init__", "(", "self", ",", "method", ":", "str", ",", "normalize_before", ":", "bool", ",", "args", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "normalize_before", "=", "normalize_before", "\n", "self", ".", "specific_repr", "=", "None", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "args", ".", "decoder_model_dim", ")", "\n", "self", ".", "customize_forward", "=", "self", ".", "VALID_REDUCTION", "[", "self", ".", "method", "]", "(", "self", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.extra_repr": [[38, 42], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "general_repr", "=", "'method={}, normalize_before={},'", ".", "format", "(", "self", ".", "method", ",", "self", ".", "normalize_before", ")", "\n", "specific_repr", "=", "f' {self.specific_repr},'", "if", "self", ".", "specific_repr", "is", "not", "None", "else", "''", "\n", "return", "general_repr", "+", "specific_repr", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.forward": [[43, 45], ["reduction.Reduction.customize_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "customize_forward", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.maybe_layer_norm": [[46, 52], ["layer_norm"], "methods", ["None"], ["", "def", "maybe_layer_norm", "(", "self", ",", "layer_norm", ",", "x", ",", "before", "=", "False", ",", "after", "=", "False", ")", ":", "\n", "        ", "assert", "before", "^", "after", "\n", "if", "after", "^", "self", ".", "normalize_before", ":", "\n", "            ", "return", "layer_norm", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max": [[53, 82], ["reduction.register_to", "reduction.Reduction.maybe_layer_norm", "reduction.Reduction.maybe_layer_norm", "x.masked_fill.masked_fill.masked_fill", "x.masked_fill.masked_fill.max", "mask.transpose().unsqueeze().unsqueeze", "float", "mask.transpose().unsqueeze", "mask.transpose"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.register_to", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max"], ["", "", "@", "register_to", "(", "'max'", ",", "_VALID_REDUCTION", ")", "\n", "def", "max", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Reduce the source dimension based on their maximum\n        :param args: Namespace\n        :return: Callable\n        \"\"\"", "\n", "\n", "def", "_forward", "(", "x", ",", "mask", ",", "incremental_state", "=", "None", ")", ":", "\n", "            ", "\"\"\"\n            Customized forward function\n            :param x: torch.FloatTensor, T x S x B x C\n            :param mask: torch.ByteTensor, B x S, masked elements indicated by 1\n            :param incremental_state: Dictionary\n            :return: torch.FloatTensor, T x B x C\n            \"\"\"", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "layer_norm", ",", "x", ",", "before", "=", "True", ")", "\n", "# T x S x B x C", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "x", "=", "x", ".", "masked_fill", "(", "\n", "mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "float", "(", "'-inf'", ")", ",", "\n", ")", "\n", "# T x B x C", "\n", "", "x", "=", "x", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "layer_norm", ",", "x", ",", "after", "=", "True", ")", "\n", "return", "x", "\n", "\n", "", "return", "_forward", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.attn": [[83, 118], ["reduction.register_to", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "reduction.Reduction.maybe_layer_norm", "torch.linear", "torch.linear", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "reduction.Reduction.maybe_layer_norm", "mask.transpose().unsqueeze().unsqueeze.transpose().unsqueeze().unsqueeze.transpose().unsqueeze().unsqueeze", "weights.masked_fill.masked_fill.masked_fill", "float", "mask.transpose().unsqueeze().unsqueeze.transpose().unsqueeze().unsqueeze.transpose().unsqueeze", "mask.transpose().unsqueeze().unsqueeze.transpose().unsqueeze().unsqueeze.transpose"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.register_to", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm"], ["", "@", "register_to", "(", "'attn'", ",", "_VALID_REDUCTION", ")", "\n", "def", "attn", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Reduce the given dimension based on the distribution computed by an affine transformation\n        (compute attention similar to multi-hop with nhop=model_dim\n        but apply attention similar to multi-head with nhead=model_dim).\n        :param args: Namespace\n        :return: Callable\n        \"\"\"", "\n", "self", ".", "weights", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "args", ".", "decoder_model_dim", ",", "args", ".", "decoder_model_dim", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "weights", ",", "mean", "=", "0", ",", "std", "=", "args", ".", "decoder_model_dim", "**", "-", "0.5", ")", "\n", "\n", "def", "_forward", "(", "x", ",", "mask", ",", "incremental_state", "=", "None", ")", ":", "\n", "            ", "\"\"\"\n            Customized forward function\n            :param x: torch.FloatTensor, T x S x B x C\n            :param mask: torch.ByteTensor, B x S, masked elements indicated by 1\n            :param incremental_state: Dictionary\n            :return: torch.FloatTensor, T x B x C\n            \"\"\"", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "layer_norm", ",", "x", ",", "before", "=", "True", ")", "\n", "# T x S x B x C", "\n", "weights", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weights", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "mask", "=", "mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "weights", "=", "weights", ".", "masked_fill", "(", "\n", "mask", ",", "\n", "float", "(", "'-inf'", ")", ",", "\n", ")", "\n", "", "prob", "=", "F", ".", "softmax", "(", "weights", ",", "dim", "=", "1", ")", "\n", "x", "=", "torch", ".", "sum", "(", "prob", "*", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "layer_norm", ",", "x", ",", "after", "=", "True", ")", "\n", "return", "x", "\n", "\n", "", "return", "_forward", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.register_to": [[16, 22], ["None"], "function", ["None"], ["def", "register_to", "(", "name", ":", "str", ",", "mapping", ":", "dict", ")", ":", "\n", "    ", "def", "wrapper", "(", "fn", ")", ":", "\n", "        ", "mapping", "[", "name", "]", "=", "fn", "\n", "return", "fn", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.adaptive_softmax.AdaptiveSoftmax.__init__": [[21, 50], ["torch.nn.Module.__init__", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.Linear", "torch.nn.Linear", "adaptive_softmax.AdaptiveSoftmax._make_tail", "adaptive_softmax.AdaptiveSoftmax.apply", "adaptive_softmax.AdaptiveSoftmax.register_buffer", "hasattr", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.adaptive_softmax.AdaptiveSoftmax._make_tail"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "input_dim", ",", "cutoff", ",", "dropout", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "vocab_size", ">", "cutoff", "[", "-", "1", "]", ":", "\n", "            ", "cutoff", "=", "cutoff", "+", "[", "vocab_size", "]", "\n", "", "else", ":", "\n", "            ", "assert", "vocab_size", "==", "cutoff", "[", "\n", "-", "1", "]", ",", "'cannot specify cutoff larger than vocab size'", "\n", "\n", "", "output_dim", "=", "cutoff", "[", "0", "]", "+", "len", "(", "cutoff", ")", "-", "1", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "cutoff", "=", "cutoff", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "\n", "self", ".", "lsm", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "_make_tail", "(", "True", ")", "\n", "\n", "def", "init_weights", "(", "m", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ")", "\n", "# versions prior to 1 had a bug that offset indices on the head by 1", "\n", "self", ".", "buggy_offset", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.adaptive_softmax.AdaptiveSoftmax._make_tail": [[51, 61], ["torch.nn.ModuleList", "torch.nn.ModuleList", "range", "adaptive_softmax.AdaptiveSoftmax.tail.append", "len", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["", "def", "_make_tail", "(", "self", ",", "fix_exponent", ")", ":", "\n", "        ", "extra_denom", "=", "1", "if", "fix_exponent", "else", "0", "\n", "\n", "self", ".", "tail", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoff", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "tail", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "input_dim", "//", "4", "**", "(", "i", "+", "extra_denom", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "input_dim", "//", "4", "**", "(", "i", "+", "extra_denom", ")", ",", "self", ".", "cutoff", "[", "i", "+", "1", "]", "-", "self", ".", "cutoff", "[", "i", "]", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.adaptive_softmax.AdaptiveSoftmax.upgrade_state_dict_named": [[64, 70], ["adaptive_softmax.AdaptiveSoftmax._make_tail", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.adaptive_softmax.AdaptiveSoftmax._make_tail"], ["", "", "def", "upgrade_state_dict_named", "(", "self", ",", "state_dict", ",", "name", ")", ":", "\n", "        ", "version_name", "=", "name", "+", "'.version'", "\n", "if", "version_name", "not", "in", "state_dict", ":", "\n", "            ", "self", ".", "buggy_offset", "=", "1", "\n", "self", ".", "_make_tail", "(", "False", ")", "\n", "state_dict", "[", "version_name", "]", "=", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.adaptive_softmax.AdaptiveSoftmax.adapt_target": [[71, 95], ["target.view.view.view", "range", "target.view.view.clone", "target.view.view.ge().mul", "target.view.ge().mul.any", "len", "target.view.view.lt", "target_idxs.append", "new_target.append", "target_idxs.append", "new_target.append", "target.view.view.ge", "target.view.ge().mul.nonzero().squeeze", "target[].add", "target.view.ge().mul.nonzero"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.add"], ["", "", "def", "adapt_target", "(", "self", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        In order to be efficient, the AdaptiveSoftMax does not compute the\n        scores for all the word of the vocabulary for all the examples. It is\n        thus necessary to call the method adapt_target of the AdaptiveSoftMax\n        layer inside each forward pass.\n        \"\"\"", "\n", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "new_target", "=", "[", "target", ".", "clone", "(", ")", "]", "\n", "target_idxs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoff", ")", "-", "1", ")", ":", "\n", "            ", "mask", "=", "target", ".", "ge", "(", "self", ".", "cutoff", "[", "i", "]", ")", ".", "mul", "(", "target", ".", "lt", "(", "self", ".", "cutoff", "[", "i", "+", "1", "]", ")", ")", "\n", "new_target", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cutoff", "[", "0", "]", "+", "i", "-", "self", ".", "buggy_offset", "\n", "\n", "if", "mask", ".", "any", "(", ")", ":", "\n", "                ", "target_idxs", ".", "append", "(", "mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", ")", "\n", "new_target", ".", "append", "(", "target", "[", "mask", "]", ".", "add", "(", "-", "self", ".", "cutoff", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "target_idxs", ".", "append", "(", "None", ")", "\n", "new_target", ".", "append", "(", "None", ")", "\n", "\n", "", "", "return", "new_target", ",", "target_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.adaptive_softmax.AdaptiveSoftmax.forward": [[96, 118], ["torch.dropout.contiguous().view", "torch.dropout", "torch.dropout", "adaptive_softmax.AdaptiveSoftmax.adapt_target", "range", "torch.dropout.size", "adaptive_softmax.AdaptiveSoftmax.head", "len", "torch.dropout.contiguous", "output.append", "output.append", "torch.dropout.index_select"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.adaptive_softmax.AdaptiveSoftmax.adapt_target", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: (b x t x d)\n            target: (b x t)\n        Returns:\n            2 lists: output for each cutoff section and new targets by cut off\n        \"\"\"", "\n", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "-", "1", ")", ")", "\n", "input", "=", "F", ".", "dropout", "(", "input", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "new_target", ",", "target_idxs", "=", "self", ".", "adapt_target", "(", "target", ")", "\n", "output", "=", "[", "self", ".", "head", "(", "input", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "target_idxs", ")", ")", ":", "\n", "            ", "if", "target_idxs", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "output", ".", "append", "(", "self", ".", "tail", "[", "i", "]", "(", "input", ".", "index_select", "(", "0", ",", "target_idxs", "[", "i", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "None", ")", "\n", "\n", "", "", "return", "output", ",", "new_target", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.adaptive_softmax.AdaptiveSoftmax.get_log_prob": [[119, 156], ["input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.contiguous().view", "adaptive_softmax.AdaptiveSoftmax.head", "adaptive_softmax.AdaptiveSoftmax.new_zeros", "adaptive_softmax.AdaptiveSoftmax.lsm", "log_probs[].clone", "range", "log_probs.view.view.view", "adaptive_softmax.AdaptiveSoftmax.adapt_target", "input.contiguous().view.contiguous().view.size", "len", "len", "input.contiguous().view.contiguous().view.contiguous", "tail_out.copy_", "adaptive_softmax.AdaptiveSoftmax.lsm().add_", "tail_out.copy_", "adaptive_softmax.AdaptiveSoftmax.lsm().add_", "adaptive_softmax.AdaptiveSoftmax.lsm", "adaptive_softmax.AdaptiveSoftmax.lsm"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.adaptive_softmax.AdaptiveSoftmax.adapt_target", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "get_log_prob", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Computes the log probabilities for all the words of the vocabulary,\n        given a 2D tensor of hidden vectors.\n        \"\"\"", "\n", "\n", "bsz", ",", "length", ",", "dim", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "dim", ")", "\n", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "_", ",", "target_idxs", "=", "self", ".", "adapt_target", "(", "target", ")", "\n", "", "else", ":", "\n", "            ", "target_idxs", "=", "None", "\n", "\n", "", "head_y", "=", "self", ".", "head", "(", "input", ")", "\n", "log_probs", "=", "head_y", ".", "new_zeros", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "vocab_size", ")", "\n", "\n", "head_sz", "=", "self", ".", "cutoff", "[", "0", "]", "+", "len", "(", "self", ".", "tail", ")", "\n", "log_probs", "[", ":", ",", ":", "head_sz", "]", "=", "self", ".", "lsm", "(", "head_y", ")", "\n", "tail_priors", "=", "log_probs", "[", ":", ",", "self", ".", "cutoff", "[", "0", "]", "-", "self", ".", "buggy_offset", ":", "head_sz", "-", "self", ".", "buggy_offset", "]", ".", "clone", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "tail", ")", ")", ":", "\n", "            ", "start", "=", "self", ".", "cutoff", "[", "i", "]", "\n", "end", "=", "self", ".", "cutoff", "[", "i", "+", "1", "]", "\n", "\n", "if", "target_idxs", "is", "None", ":", "\n", "                ", "tail_out", "=", "log_probs", "[", ":", ",", "start", ":", "end", "]", "\n", "tail_out", ".", "copy_", "(", "self", ".", "tail", "[", "i", "]", "(", "input", ")", ")", "\n", "log_probs", "[", ":", ",", "start", ":", "end", "]", "=", "self", ".", "lsm", "(", "tail_out", ")", ".", "add_", "(", "tail_priors", "[", ":", ",", "i", ",", "None", "]", ")", "\n", "", "elif", "target_idxs", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "idxs", "=", "target_idxs", "[", "i", "]", "\n", "tail_out", "=", "log_probs", "[", "idxs", ",", "start", ":", "end", "]", "\n", "tail_out", ".", "copy_", "(", "self", ".", "tail", "[", "i", "]", "(", "input", "[", "idxs", "]", ")", ")", "\n", "log_probs", "[", "idxs", ",", "start", ":", "end", "]", "=", "self", ".", "lsm", "(", "tail_out", ")", ".", "add_", "(", "tail_priors", "[", "idxs", ",", "i", ",", "None", "]", ")", "\n", "\n", "", "", "log_probs", "=", "log_probs", ".", "view", "(", "bsz", ",", "length", ",", "-", "1", ")", "\n", "return", "log_probs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.beamable_mm.BeamableMM.__init__": [[20, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "beam_size", "=", "None", ")", ":", "\n", "        ", "super", "(", "BeamableMM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beam_size", "=", "beam_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.beamable_mm.BeamableMM.forward": [[24, 47], ["input1[].unfold().transpose", "input1[].unfold().transpose.bmm.view", "input1[].unfold().transpose.bmm", "input1[].unfold().transpose.dim", "input1[].unfold().transpose.size", "input1[].unfold().transpose.size", "input2.unfold", "input1[].unfold().transpose.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "input1[].unfold().transpose.bmm", "input1[].unfold"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "if", "(", "\n", "not", "self", ".", "training", "and", "# test mode", "\n", "self", ".", "beam_size", "is", "not", "None", "and", "# beam size is set", "\n", "input1", ".", "dim", "(", ")", "==", "3", "and", "# only support batched input", "\n", "input1", ".", "size", "(", "1", ")", "==", "1", "# single time step update", "\n", ")", ":", "\n", "            ", "bsz", ",", "beam", "=", "input1", ".", "size", "(", "0", ")", ",", "self", ".", "beam_size", "\n", "\n", "# bsz x 1 x nhu --> bsz/beam x beam x nhu", "\n", "input1", "=", "input1", "[", ":", ",", "0", ",", ":", "]", ".", "unfold", "(", "0", ",", "beam", ",", "beam", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "# bsz x sz2 x nhu --> bsz/beam x sz2 x nhu", "\n", "input2", "=", "input2", ".", "unfold", "(", "0", ",", "beam", ",", "beam", ")", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "\n", "# use non batched operation if bsz = beam", "\n", "if", "input1", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "                ", "output", "=", "torch", ".", "mm", "(", "input1", "[", "0", ",", ":", ",", ":", "]", ",", "input2", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "input1", ".", "bmm", "(", "input2", ")", "\n", "", "return", "output", ".", "view", "(", "bsz", ",", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "input1", ".", "bmm", "(", "input2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.beamable_mm.BeamableMM.set_beam_size": [[48, 50], ["None"], "methods", ["None"], ["", "", "def", "set_beam_size", "(", "self", ",", "beam_size", ")", ":", "\n", "        ", "self", ".", "beam_size", "=", "beam_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.conv_tbc.ConvTBC.__init__": [[18, 28], ["super().__init__", "torch.nn.modules.utils._single", "torch.nn.modules.utils._single", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "ConvTBC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_single", "(", "kernel_size", ")", "\n", "self", ".", "padding", "=", "_single", "(", "padding", ")", "\n", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "kernel_size", "[", "0", "]", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.conv_tbc.ConvTBC.forward": [[29, 31], ["torch.conv_tbc", "input.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "torch", ".", "conv_tbc", "(", "input", ".", "contiguous", "(", ")", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "padding", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.conv_tbc.ConvTBC.__repr__": [[32, 39], ["s.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{name}({in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', padding={padding}'", ")", "\n", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "s", "+=", "')'", "\n", "return", "s", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.character_token_embedder.CharacterTokenEmbedder.__init__": [[22, 51], ["super().__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.ModuleList", "torch.nn.ModuleList", "sum", "highway.Highway", "torch.nn.Linear", "torch.nn.Linear", "character_token_embedder.CharacterTokenEmbedder.set_vocab", "character_token_embedder.CharacterTokenEmbedder.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "character_token_embedder.CharacterTokenEmbedder.convolutions.append", "torch.nn.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.character_token_embedder.CharacterTokenEmbedder.set_vocab", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.highway.Highway.reset_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "vocab", ":", "Dictionary", ",", "\n", "filters", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "char_embed_dim", ":", "int", ",", "\n", "word_embed_dim", ":", "int", ",", "\n", "highway_layers", ":", "int", ",", "\n", "max_char_len", ":", "int", "=", "50", ",", "\n", ")", ":", "\n", "        ", "super", "(", "CharacterTokenEmbedder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embedding_dim", "=", "word_embed_dim", "\n", "self", ".", "char_embeddings", "=", "nn", ".", "Embedding", "(", "257", ",", "char_embed_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "symbol_embeddings", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "2", ",", "word_embed_dim", ")", ")", "\n", "self", ".", "eos_idx", ",", "self", ".", "unk_idx", "=", "0", ",", "1", "\n", "\n", "self", ".", "convolutions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "width", ",", "out_c", "in", "filters", ":", "\n", "            ", "self", ".", "convolutions", ".", "append", "(", "\n", "nn", ".", "Conv1d", "(", "char_embed_dim", ",", "out_c", ",", "kernel_size", "=", "width", ")", "\n", ")", "\n", "\n", "", "final_dim", "=", "sum", "(", "f", "[", "1", "]", "for", "f", "in", "filters", ")", "\n", "\n", "self", ".", "highway", "=", "Highway", "(", "final_dim", ",", "highway_layers", ")", "\n", "self", ".", "projection", "=", "nn", ".", "Linear", "(", "final_dim", ",", "word_embed_dim", ")", "\n", "\n", "self", ".", "set_vocab", "(", "vocab", ",", "max_char_len", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.character_token_embedder.CharacterTokenEmbedder.set_vocab": [[52, 73], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "len", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "print", "vocab[].encode", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], ["", "def", "set_vocab", "(", "self", ",", "vocab", ",", "max_char_len", ")", ":", "\n", "        ", "word_to_char", "=", "torch", ".", "LongTensor", "(", "len", "(", "vocab", ")", ",", "max_char_len", ")", "\n", "\n", "truncated", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "vocab", ")", ")", ":", "\n", "            ", "if", "i", "<", "vocab", ".", "nspecial", ":", "\n", "                ", "char_idxs", "=", "[", "0", "]", "*", "max_char_len", "\n", "", "else", ":", "\n", "                ", "chars", "=", "vocab", "[", "i", "]", ".", "encode", "(", ")", "\n", "# +1 for padding", "\n", "char_idxs", "=", "[", "c", "+", "1", "for", "c", "in", "chars", "]", "+", "[", "0", "]", "*", "(", "max_char_len", "-", "len", "(", "chars", ")", ")", "\n", "", "if", "len", "(", "char_idxs", ")", ">", "max_char_len", ":", "\n", "                ", "truncated", "+=", "1", "\n", "char_idxs", "=", "char_idxs", "[", ":", "max_char_len", "]", "\n", "", "word_to_char", "[", "i", "]", "=", "torch", ".", "LongTensor", "(", "char_idxs", ")", "\n", "\n", "", "if", "truncated", ">", "0", ":", "\n", "            ", "print", "(", "'Truncated {} words longer than {} characters'", ".", "format", "(", "truncated", ",", "max_char_len", ")", ")", "\n", "\n", "", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "word_to_char", "=", "word_to_char", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.character_token_embedder.CharacterTokenEmbedder.padding_idx": [[74, 77], ["character_token_embedder.CharacterTokenEmbedder.vocab.pad"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad"], ["", "@", "property", "\n", "def", "padding_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab", ".", "pad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.character_token_embedder.CharacterTokenEmbedder.reset_parameters": [[78, 84], ["torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "char_embeddings", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "symbol_embeddings", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "projection", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "char_embeddings", ".", "weight", "[", "self", ".", "char_embeddings", ".", "padding_idx", "]", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "projection", ".", "bias", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.character_token_embedder.CharacterTokenEmbedder.forward": [[85, 107], ["character_token_embedder.CharacterTokenEmbedder.word_to_char.type_as", "words.view", "character_token_embedder.CharacterTokenEmbedder._convolve", "words.view.eq", "words.view.eq.any", "words.view.eq", "words.view.eq.any", "words.view.eq", "words.view.eq.any", "character_token_embedder.CharacterTokenEmbedder.view", "character_token_embedder.CharacterTokenEmbedder.vocab.pad", "character_token_embedder.CharacterTokenEmbedder.vocab.eos", "character_token_embedder.CharacterTokenEmbedder.vocab.unk", "words.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.character_token_embedder.CharacterTokenEmbedder._convolve", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "words", ":", "torch", ".", "Tensor", ",", "\n", ")", ":", "\n", "        ", "self", ".", "word_to_char", "=", "self", ".", "word_to_char", ".", "type_as", "(", "words", ")", "\n", "\n", "flat_words", "=", "words", ".", "view", "(", "-", "1", ")", "\n", "word_embs", "=", "self", ".", "_convolve", "(", "self", ".", "word_to_char", "[", "flat_words", "]", ")", "\n", "\n", "pads", "=", "flat_words", ".", "eq", "(", "self", ".", "vocab", ".", "pad", "(", ")", ")", "\n", "if", "pads", ".", "any", "(", ")", ":", "\n", "            ", "word_embs", "[", "pads", "]", "=", "0", "\n", "\n", "", "eos", "=", "flat_words", ".", "eq", "(", "self", ".", "vocab", ".", "eos", "(", ")", ")", "\n", "if", "eos", ".", "any", "(", ")", ":", "\n", "            ", "word_embs", "[", "eos", "]", "=", "self", ".", "symbol_embeddings", "[", "self", ".", "eos_idx", "]", "\n", "\n", "", "unk", "=", "flat_words", ".", "eq", "(", "self", ".", "vocab", ".", "unk", "(", ")", ")", "\n", "if", "unk", ".", "any", "(", ")", ":", "\n", "            ", "word_embs", "[", "unk", "]", "=", "self", ".", "symbol_embeddings", "[", "self", ".", "unk_idx", "]", "\n", "\n", "", "return", "word_embs", ".", "view", "(", "words", ".", "size", "(", ")", "+", "(", "-", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.character_token_embedder.CharacterTokenEmbedder._convolve": [[108, 127], ["character_token_embedder.CharacterTokenEmbedder.char_embeddings", "char_embs.transpose.transpose.transpose", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "character_token_embedder.CharacterTokenEmbedder.highway", "character_token_embedder.CharacterTokenEmbedder.projection", "conv", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu", "torch.relu", "character_token_embedder.CharacterTokenEmbedder.append"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max"], ["", "def", "_convolve", "(", "\n", "self", ",", "\n", "char_idxs", ":", "torch", ".", "Tensor", ",", "\n", ")", ":", "\n", "        ", "char_embs", "=", "self", ".", "char_embeddings", "(", "char_idxs", ")", "\n", "char_embs", "=", "char_embs", ".", "transpose", "(", "1", ",", "2", ")", "# BTC -> BCT", "\n", "\n", "conv_result", "=", "[", "]", "\n", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convolutions", ")", ":", "\n", "            ", "x", "=", "conv", "(", "char_embs", ")", "\n", "x", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "conv_result", ".", "append", "(", "x", ")", "\n", "\n", "", "conv_result", "=", "torch", ".", "cat", "(", "conv_result", ",", "dim", "=", "-", "1", ")", "\n", "conv_result", "=", "self", ".", "highway", "(", "conv_result", ")", "\n", "\n", "return", "self", ".", "projection", "(", "conv_result", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.__init__": [[24, 36], ["torch.Module.__init__", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.get_embedding", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.get_embedding"], ["def", "__init__", "(", "self", ",", "embedding_dim", ",", "padding_idx", ",", "left_pad", ",", "init_size", "=", "1024", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "padding_idx", "=", "padding_idx", "\n", "self", ".", "left_pad", "=", "left_pad", "\n", "self", ".", "weights", "=", "SinusoidalPositionalEmbedding", ".", "get_embedding", "(", "\n", "init_size", ",", "\n", "embedding_dim", ",", "\n", "padding_idx", ",", "\n", ")", "\n", "self", ".", "onnx_trace", "=", "False", "\n", "self", ".", "register_buffer", "(", "'_float_tensor'", ",", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.prepare_for_onnx_export_": [[37, 39], ["None"], "methods", ["None"], ["", "def", "prepare_for_onnx_export_", "(", "self", ")", ":", "\n", "        ", "self", ".", "onnx_trace", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.get_embedding": [[40, 58], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "math.log", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log"], ["", "@", "staticmethod", "\n", "def", "get_embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "None", ")", ":", "\n", "        ", "\"\"\"Build sinusoidal embeddings.\n\n        This matches the implementation in tensor2tensor, but differs slightly\n        from the description in Section 3.5 of \"Attention Is All You Need\".\n        \"\"\"", "\n", "half_dim", "=", "embedding_dim", "//", "2", "\n", "emb", "=", "math", ".", "log", "(", "10000", ")", "/", "(", "half_dim", "-", "1", ")", "\n", "emb", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "half_dim", ",", "dtype", "=", "torch", ".", "float", ")", "*", "-", "emb", ")", "\n", "emb", "=", "torch", ".", "arange", "(", "num_embeddings", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "*", "emb", ".", "unsqueeze", "(", "0", ")", "\n", "emb", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sin", "(", "emb", ")", ",", "torch", ".", "cos", "(", "emb", ")", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "num_embeddings", ",", "-", "1", ")", "\n", "if", "embedding_dim", "%", "2", "==", "1", ":", "\n", "# zero pad", "\n", "            ", "emb", "=", "torch", ".", "cat", "(", "[", "emb", ",", "torch", ".", "zeros", "(", "num_embeddings", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "padding_idx", "is", "not", "None", ":", "\n", "            ", "emb", "[", "padding_idx", ",", ":", "]", "=", "0", "\n", "", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.forward": [[59, 86], ["torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.type_as", "fairseq.utils.make_positions", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.index_select().view().detach", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.get_embedding", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights[].expand", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.detach().index_select", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.size", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights[].unsqueeze().repeat", "fairseq.utils.make_positions.view", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.index_select().view", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.detach", "bsz.view", "seq_len.view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights[].unsqueeze", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.index_select", "timestep.int", "fairseq.utils.make_positions.view"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.make_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.get_embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "forward", "(", "self", ",", "input", ",", "incremental_state", "=", "None", ",", "timestep", "=", "None", ")", ":", "\n", "        ", "\"\"\"Input is expected to be of size [bsz x seqlen].\"\"\"", "\n", "bsz", ",", "seq_len", "=", "torch", ".", "onnx", ".", "operators", ".", "shape_as_tensor", "(", "input", ")", "\n", "max_pos", "=", "self", ".", "padding_idx", "+", "1", "+", "seq_len", "\n", "if", "self", ".", "weights", "is", "None", "or", "max_pos", ">", "self", ".", "weights", ".", "size", "(", "0", ")", ":", "\n", "# recompute/expand embeddings if needed", "\n", "            ", "self", ".", "weights", "=", "SinusoidalPositionalEmbedding", ".", "get_embedding", "(", "\n", "max_pos", ",", "\n", "self", ".", "embedding_dim", ",", "\n", "self", ".", "padding_idx", ",", "\n", ")", "\n", "", "self", ".", "weights", "=", "self", ".", "weights", ".", "type_as", "(", "self", ".", "_float_tensor", ")", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "# positions is the same for every token when decoding a single step", "\n", "            ", "pos", "=", "(", "timestep", ".", "int", "(", ")", "+", "1", ")", ".", "long", "(", ")", "if", "timestep", "is", "not", "None", "else", "seq_len", "\n", "if", "self", ".", "onnx_trace", ":", "\n", "                ", "return", "self", ".", "weights", "[", "self", ".", "padding_idx", "+", "pos", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "bsz", ",", "1", ",", "1", ")", "\n", "", "return", "self", ".", "weights", "[", "self", ".", "padding_idx", "+", "pos", ",", ":", "]", ".", "expand", "(", "bsz", ",", "1", ",", "-", "1", ")", "\n", "\n", "", "positions", "=", "utils", ".", "make_positions", "(", "input", ",", "self", ".", "padding_idx", ",", "self", ".", "left_pad", ",", "self", ".", "onnx_trace", ")", "\n", "if", "self", ".", "onnx_trace", ":", "\n", "            ", "flat_embeddings", "=", "self", ".", "weights", ".", "detach", "(", ")", ".", "index_select", "(", "0", ",", "positions", ".", "view", "(", "-", "1", ")", ")", "\n", "embedding_shape", "=", "torch", ".", "cat", "(", "(", "bsz", ".", "view", "(", "1", ")", ",", "seq_len", ".", "view", "(", "1", ")", ",", "torch", ".", "LongTensor", "(", "[", "-", "1", "]", ")", ")", ")", "\n", "embeddings", "=", "torch", ".", "onnx", ".", "operators", ".", "reshape_from_tensor_shape", "(", "flat_embeddings", ",", "embedding_shape", ")", "\n", "return", "embeddings", "\n", "", "return", "self", ".", "weights", ".", "index_select", "(", "0", ",", "positions", ".", "view", "(", "-", "1", ")", ")", ".", "view", "(", "bsz", ",", "seq_len", ",", "-", "1", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.max_positions": [[87, 90], ["int"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum number of supported positions.\"\"\"", "\n", "return", "int", "(", "1e5", ")", "# an arbitrary large number", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.__init__": [[23, 54], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "fairseq.modules.Dropout1d", "separable_attention.SeparableAttention.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "separable_attention.SeparableAttention.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.highway.Highway.reset_parameters"], ["def", "__init__", "(", "self", ",", "embed_dim", ",", "num_heads", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ",", "add_bias_kv", "=", "False", ",", "add_zero_attn", "=", "False", ",", "\n", "tgt_attn", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "assert", "self", ".", "head_dim", "*", "num_heads", "==", "self", ".", "embed_dim", ",", "\"embed_dim must be divisible by num_heads\"", "\n", "self", ".", "scaling", "=", "self", ".", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "in_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "3", "*", "embed_dim", ",", "embed_dim", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "in_proj_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "3", "*", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'in_proj_bias'", ",", "None", ")", "\n", "", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "if", "add_bias_kv", ":", "\n", "            ", "self", ".", "bias_k", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "bias_v", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_k", "=", "self", ".", "bias_v", "=", "None", "\n", "\n", "", "self", ".", "add_zero_attn", "=", "add_zero_attn", "\n", "\n", "self", ".", "tgt_attn", "=", "tgt_attn", "\n", "\n", "self", ".", "dropout1d", "=", "Dropout1d", "(", "p", "=", "dropout", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "self", ".", "onnx_trace", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.prepare_for_onnx_export_": [[55, 57], ["None"], "methods", ["None"], ["", "def", "prepare_for_onnx_export_", "(", "self", ")", ":", "\n", "        ", "self", ".", "onnx_trace", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.reset_parameters": [[58, 68], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "in_proj_weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "out_proj", ".", "weight", ")", "\n", "if", "self", ".", "in_proj_bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "in_proj_bias", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "out_proj", ".", "bias", ",", "0.", ")", "\n", "", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "bias_k", ")", "\n", "", "if", "self", ".", "bias_v", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "bias_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.extra_repr": [[69, 71], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'tgt_attn={}, num_heads={},'", ".", "format", "(", "self", ".", "tgt_attn", ",", "self", ".", "num_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.forward": [[72, 205], ["query.transpose.transpose.size", "torch.cat.size", "torch.cat.size", "separable_attention.SeparableAttention.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "separable_attention.SeparableAttention.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax().type_as", "torch.softmax().type_as", "attn_weights.view.view.view", "separable_attention.SeparableAttention.dropout1d", "attn_weights.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "attn.transpose.transpose.transpose().contiguous().view", "separable_attention.SeparableAttention.out_proj", "query.transpose.transpose.data_ptr", "key.transpose.transpose.data_ptr", "value.transpose.transpose.data_ptr", "key.transpose.transpose.data_ptr", "value.transpose.transpose.data_ptr", "query.transpose.transpose.transpose", "key.transpose.transpose.transpose", "value.transpose.transpose.transpose", "list", "key.transpose.transpose.size", "value.transpose.transpose.size", "separable_attention.SeparableAttention._get_input_buffer", "separable_attention.SeparableAttention.in_proj_qkv", "separable_attention.SeparableAttention._set_input_buffer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.cat.transpose", "list", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "attn_weights.view.view.view", "torch.cat.unsqueeze().unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze().unsqueeze", "attn_weights.view.view.float().masked_fill().type_as", "attn_weights.view.view.view", "list", "attn.transpose.transpose.transpose", "attn_weights.view.view.view", "query.transpose.transpose.size", "separable_attention.SeparableAttention.in_proj_q", "separable_attention.SeparableAttention.in_proj_q", "separable_attention.SeparableAttention.in_proj_k", "separable_attention.SeparableAttention.in_proj_v", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "separable_attention.SeparableAttention.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "separable_attention.SeparableAttention.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_weights.view.view.size", "torch.softmax", "torch.softmax", "attn.transpose.transpose.size", "attn.transpose.transpose.transpose().contiguous", "attn_weights.view.view.sum", "separable_attention.SeparableAttention.in_proj_kv", "separable_attention.SeparableAttention.bias_k.repeat", "separable_attention.SeparableAttention.bias_v.repeat", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "attn_weights.view.view.float().masked_fill", "attn_weights.view.view.float", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "separable_attention.SeparableAttention.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "float", "attn.transpose.transpose.transpose", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "attn_weights.view.view.float", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._get_input_buffer", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_qkv", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._set_input_buffer", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_q", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_q", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_k", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_v", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_kv", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "key_padding_mask", "=", "None", ",", "incremental_state", "=", "None", ",", "need_weights", "=", "True", ",", "\n", "attn_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        To perform decoder self-attention: tgt_attn=True, attn_mask is not None (train).\n        To perform encoder self-attention: tgt_attn=False, key_padding_mask is not None, qkv_same=True.\n        :param query: Output x Source x Batch x Channel\n        :param key: Input x Source x Batch x Channel\n        :param value: the same to key\n        :param key_padding_mask: Batch x Source, required only tgt_attn=False\n        :param incremental_state:\n        :param need_weights:\n        :param attn_mask: Output x Input, required only tgt_attn=True\n        :return:\n        \"\"\"", "\n", "# since data_ptr() is used to detect whether q, k, v are the same be", "\n", "# careful with the case that q, k, v have different dims yet sliced", "\n", "# from one tensor", "\n", "qkv_same", "=", "query", ".", "data_ptr", "(", ")", "==", "key", ".", "data_ptr", "(", ")", "==", "value", ".", "data_ptr", "(", ")", "\n", "kv_same", "=", "key", ".", "data_ptr", "(", ")", "==", "value", ".", "data_ptr", "(", ")", "\n", "\n", "if", "not", "self", ".", "tgt_attn", ":", "\n", "            ", "query", "=", "query", ".", "transpose", "(", "0", ",", "1", ")", "\n", "key", "=", "key", ".", "transpose", "(", "0", ",", "1", ")", "\n", "value", "=", "value", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "out_len", ",", "src_size", ",", "true_bsz", ",", "embed_dim", "=", "query", ".", "size", "(", ")", "\n", "bsz", "=", "src_size", "*", "true_bsz", "\n", "assert", "embed_dim", "==", "self", ".", "embed_dim", "\n", "assert", "list", "(", "query", ".", "size", "(", ")", ")", "==", "[", "out_len", ",", "src_size", ",", "true_bsz", ",", "embed_dim", "]", "\n", "assert", "key", ".", "size", "(", ")", "==", "value", ".", "size", "(", ")", "\n", "\n", "# encoder self-attention does not need cache", "\n", "if", "incremental_state", "is", "not", "None", "and", "self", ".", "tgt_attn", ":", "\n", "            ", "saved_state", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "", "else", ":", "\n", "            ", "saved_state", "=", "None", "\n", "\n", "", "if", "qkv_same", ":", "\n", "            ", "q", ",", "k", ",", "v", "=", "self", ".", "in_proj_qkv", "(", "query", ")", "\n", "", "elif", "kv_same", ":", "\n", "            ", "q", "=", "self", ".", "in_proj_q", "(", "query", ")", "\n", "if", "key", "is", "None", ":", "\n", "                ", "assert", "value", "is", "None", "\n", "k", "=", "v", "=", "None", "\n", "", "else", ":", "\n", "                ", "k", ",", "v", "=", "self", ".", "in_proj_kv", "(", "key", ")", "\n", "", "", "else", ":", "\n", "            ", "q", "=", "self", ".", "in_proj_q", "(", "query", ")", "\n", "k", "=", "self", ".", "in_proj_k", "(", "key", ")", "\n", "v", "=", "self", ".", "in_proj_v", "(", "value", ")", "\n", "", "q", "*=", "self", ".", "scaling", "\n", "\n", "if", "saved_state", "is", "not", "None", ":", "\n", "\n", "            ", "if", "'prev_key'", "in", "saved_state", ":", "\n", "                ", "k", "=", "torch", ".", "cat", "(", "(", "saved_state", "[", "'prev_key'", "]", ",", "k", ")", ",", "dim", "=", "0", ")", "\n", "", "if", "'prev_value'", "in", "saved_state", ":", "\n", "                ", "v", "=", "torch", ".", "cat", "(", "(", "saved_state", "[", "'prev_value'", "]", ",", "v", ")", ",", "dim", "=", "0", ")", "\n", "", "saved_state", "[", "'prev_key'", "]", "=", "k", "\n", "saved_state", "[", "'prev_value'", "]", "=", "v", "\n", "\n", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "saved_state", ")", "\n", "\n", "", "in_len", "=", "k", ".", "size", "(", "0", ")", "\n", "\n", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "out_len", ",", "src_size", "*", "true_bsz", ",", "embed_dim", ")", "\n", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "in_len", ",", "src_size", "*", "true_bsz", ",", "embed_dim", ")", "\n", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "in_len", ",", "src_size", "*", "true_bsz", ",", "embed_dim", ")", "\n", "\n", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "bias_v", "is", "not", "None", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "self", ".", "bias_k", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "self", ".", "bias_v", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "attn_mask", ".", "new_zeros", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "key_padding_mask", "=", "torch", ".", "cat", "(", "\n", "[", "key_padding_mask", ",", "key_padding_mask", ".", "new_zeros", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "assert", "key_padding_mask", ".", "size", "(", "0", ")", "==", "true_bsz", "\n", "assert", "key_padding_mask", ".", "size", "(", "1", ")", "==", "in_len", "\n", "\n", "", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "out_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "in_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "in_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "add_zero_attn", ":", "\n", "            ", "in_len", "+=", "1", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "k", ".", "new_zeros", "(", "(", "k", ".", "size", "(", "0", ")", ",", "1", ")", "+", "k", ".", "size", "(", ")", "[", "2", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "v", ".", "new_zeros", "(", "(", "v", ".", "size", "(", "0", ")", ",", "1", ")", "+", "v", ".", "size", "(", ")", "[", "2", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "attn_mask", ".", "new_zeros", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "key_padding_mask", "=", "torch", ".", "cat", "(", "\n", "[", "key_padding_mask", ",", "key_padding_mask", ".", "new_zeros", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "attn_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "assert", "list", "(", "attn_weights", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "out_len", ",", "in_len", "]", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_weights", "+=", "attn_mask", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "# don't attend to padding symbols", "\n", "            ", "attn_weights", "=", "attn_weights", ".", "view", "(", "src_size", ",", "true_bsz", ",", "self", ".", "num_heads", ",", "out_len", ",", "in_len", ")", "\n", "key_padding_mask", "=", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn_weights", "=", "attn_weights", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "key_padding_mask", ",", "\n", "float", "(", "'-inf'", ")", ",", "\n", ")", ".", "type_as", "(", "attn_weights", ")", "# FP16 support: cast to float and back", "\n", "attn_weights", "=", "attn_weights", ".", "view", "(", "src_size", "*", "true_bsz", "*", "self", ".", "num_heads", ",", "out_len", ",", "in_len", ")", "\n", "\n", "", "attn_weights", "=", "F", ".", "softmax", "(", "attn_weights", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type_as", "(", "attn_weights", ")", "\n", "attn_weights", "=", "attn_weights", ".", "view", "(", "src_size", ",", "true_bsz", ",", "self", ".", "num_heads", ",", "out_len", ",", "in_len", ")", "\n", "attn_weights", "=", "self", ".", "dropout1d", "(", "attn_weights", ")", "\n", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", "*", "self", ".", "num_heads", ",", "out_len", ",", "in_len", ")", "\n", "\n", "attn", "=", "torch", ".", "bmm", "(", "attn_weights", ",", "v", ")", "\n", "assert", "list", "(", "attn", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "out_len", ",", "self", ".", "head_dim", "]", "\n", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "out_len", ",", "src_size", ",", "true_bsz", ",", "embed_dim", ")", "\n", "attn", "=", "self", ".", "out_proj", "(", "attn", ")", "\n", "\n", "if", "not", "self", ".", "tgt_attn", ":", "\n", "            ", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "if", "need_weights", ":", "\n", "# average attention weights over heads", "\n", "            ", "attn_weights", "=", "attn_weights", ".", "view", "(", "src_size", ",", "true_bsz", ",", "self", ".", "num_heads", ",", "out_len", ",", "in_len", ")", "\n", "attn_weights", "=", "attn_weights", ".", "sum", "(", "dim", "=", "2", ")", "/", "self", ".", "num_heads", "\n", "", "else", ":", "\n", "            ", "attn_weights", "=", "None", "\n", "\n", "", "return", "attn", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_qkv": [[206, 208], ["separable_attention.SeparableAttention._in_proj().chunk", "separable_attention.SeparableAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._in_proj"], ["", "def", "in_proj_qkv", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "query", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_kv": [[209, 211], ["separable_attention.SeparableAttention._in_proj().chunk", "separable_attention.SeparableAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._in_proj"], ["", "def", "in_proj_kv", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "key", ",", "start", "=", "self", ".", "embed_dim", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_q": [[212, 214], ["separable_attention.SeparableAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._in_proj"], ["", "def", "in_proj_q", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "query", ",", "end", "=", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_k": [[215, 217], ["separable_attention.SeparableAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._in_proj"], ["", "def", "in_proj_k", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "key", ",", "start", "=", "self", ".", "embed_dim", ",", "end", "=", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_v": [[218, 220], ["separable_attention.SeparableAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._in_proj"], ["", "def", "in_proj_v", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "value", ",", "start", "=", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._in_proj": [[221, 228], ["torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "_in_proj", "(", "self", ",", "input", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "weight", "=", "self", ".", "in_proj_weight", "\n", "bias", "=", "self", ".", "in_proj_bias", "\n", "weight", "=", "weight", "[", "start", ":", "end", ",", ":", "]", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "bias", "[", "start", ":", "end", "]", "\n", "", "return", "F", ".", "linear", "(", "input", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.reorder_incremental_state": [[229, 239], ["separable_attention.SeparableAttention._get_input_buffer", "separable_attention.SeparableAttention.keys", "separable_attention.SeparableAttention._set_input_buffer", "input_buffer[].index_select", "new_order.to"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._get_input_buffer", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._set_input_buffer"], ["", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"Reorder buffered internal state (for incremental generation).\"\"\"", "\n", "# Although encoder self-attention does not need cache, it still", "\n", "# possesses an empty slot due to the calling of this function", "\n", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "not", "None", ":", "\n", "            ", "for", "k", "in", "input_buffer", ".", "keys", "(", ")", ":", "\n", "# 2 is the Batch dim", "\n", "                ", "input_buffer", "[", "k", "]", "=", "input_buffer", "[", "k", "]", ".", "index_select", "(", "2", ",", "new_order", ".", "to", "(", "input_buffer", "[", "k", "]", ".", "device", ")", ")", "\n", "", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "input_buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._get_input_buffer": [[240, 246], ["fairseq.utils.get_incremental_state"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.get_incremental_state"], ["", "", "def", "_get_input_buffer", "(", "self", ",", "incremental_state", ")", ":", "\n", "        ", "return", "utils", ".", "get_incremental_state", "(", "\n", "self", ",", "\n", "incremental_state", ",", "\n", "'attn_state'", ",", "\n", ")", "or", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention._set_input_buffer": [[247, 253], ["fairseq.utils.set_incremental_state"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.set_incremental_state"], ["", "def", "_set_input_buffer", "(", "self", ",", "incremental_state", ",", "buffer", ")", ":", "\n", "        ", "utils", ".", "set_incremental_state", "(", "\n", "self", ",", "\n", "incremental_state", ",", "\n", "'attn_state'", ",", "\n", "buffer", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.highway.Highway.__init__": [[20, 32], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ReLU", "torch.nn.ReLU", "highway.Highway.reset_parameters", "torch.nn.Linear", "torch.nn.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.highway.Highway.reset_parameters", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ":", "int", ",", "\n", "num_layers", ":", "int", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "Highway", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", "*", "2", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.highway.Highway.reset_parameters": [[33, 44], ["torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "# As per comment in AllenNLP:", "\n", "# We should bias the highway layer to just carry its input forward.  We do that by", "\n", "# setting the bias on `B(x)` to be positive, because that means `g` will be biased to", "\n", "# be high, so we will carry the input forward.  The bias on `B(x)` is the second half", "\n", "# of the bias vector in each Linear layer.", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", "[", "self", ".", "input_dim", ":", "]", ",", "1", ")", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", "[", ":", "self", ".", "input_dim", "]", ",", "0", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "layer", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.highway.Highway.forward": [[45, 56], ["layer", "layer.chunk", "highway.Highway.activation", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "x", ":", "torch", ".", "Tensor", "\n", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "projection", "=", "layer", "(", "x", ")", "\n", "proj_x", ",", "gate", "=", "projection", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "proj_x", "=", "self", ".", "activation", "(", "proj_x", ")", "\n", "gate", "=", "F", ".", "sigmoid", "(", "gate", ")", "\n", "x", "=", "gate", "*", "x", "+", "(", "1", "-", "gate", ")", "*", "proj_x", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.scalar_bias.ScalarBias.forward": [[18, 26], ["list", "input.new().fill_", "input.new().fill_.narrow().copy_", "input.size", "input.new", "input.new().fill_.narrow"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "dim", ",", "bias_init", ")", ":", "\n", "        ", "size", "=", "list", "(", "input", ".", "size", "(", ")", ")", "\n", "size", "[", "dim", "]", "+=", "1", "\n", "output", "=", "input", ".", "new", "(", "*", "size", ")", ".", "fill_", "(", "bias_init", ")", "\n", "output", ".", "narrow", "(", "dim", ",", "1", ",", "size", "[", "dim", "]", "-", "1", ")", ".", "copy_", "(", "input", ")", "\n", "ctx", ".", "dim", "=", "dim", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.scalar_bias.ScalarBias.backward": [[27, 30], ["grad.narrow", "grad.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "return", "grad", ".", "narrow", "(", "ctx", ".", "dim", ",", "1", ",", "grad", ".", "size", "(", "ctx", ".", "dim", ")", "-", "1", ")", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.scalar_bias.scalar_bias": [[32, 34], ["ScalarBias.apply"], "function", ["None"], ["", "", "def", "scalar_bias", "(", "input", ",", "dim", ",", "bias_init", "=", "0", ")", ":", "\n", "    ", "return", "ScalarBias", ".", "apply", "(", "input", ",", "dim", ",", "bias_init", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution.__init__": [[25, 29], ["conv_tbc.ConvTBC.__init__", "linearized_convolution.LinearizedConvolution.register_backward_hook"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "self", ".", "_linearized_weight", "=", "None", "\n", "self", ".", "register_backward_hook", "(", "self", ".", "_clear_linearized_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution.forward": [[30, 67], ["linearized_convolution.LinearizedConvolution._get_linearized_weight", "input.size", "torch.linear.view", "super().forward", "linearized_convolution.LinearizedConvolution._get_input_buffer", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.linear", "torch.linear", "input.new().zero_", "linearized_convolution.LinearizedConvolution._set_input_buffer", "input_buffer[].clone", "input.view", "input.new", "input.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._get_linearized_weight", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.forward", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._get_input_buffer", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._set_input_buffer", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "forward", "(", "self", ",", "input", ",", "incremental_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            incremental_state: Used to buffer signal; if not None, then input is\n                expected to contain a single frame. If the input order changes\n                between time steps, call reorder_incremental_state.\n        Input:\n            Time x Batch x Channel during training\n            Batch x Time x Channel during inference\n        \"\"\"", "\n", "if", "incremental_state", "is", "None", ":", "\n", "            ", "output", "=", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "if", "self", ".", "kernel_size", "[", "0", "]", ">", "1", "and", "self", ".", "padding", "[", "0", "]", ">", "0", ":", "\n", "# remove future timesteps added by padding", "\n", "                ", "output", "=", "output", "[", ":", "-", "self", ".", "padding", "[", "0", "]", ",", ":", ",", ":", "]", "\n", "", "return", "output", "\n", "\n", "# reshape weight", "\n", "", "weight", "=", "self", ".", "_get_linearized_weight", "(", ")", "\n", "kw", "=", "self", ".", "kernel_size", "[", "0", "]", "\n", "\n", "bsz", "=", "input", ".", "size", "(", "0", ")", "# input: bsz x len x dim", "\n", "if", "kw", ">", "1", ":", "\n", "            ", "input", "=", "input", ".", "data", "\n", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "None", ":", "\n", "                ", "input_buffer", "=", "input", ".", "new", "(", "bsz", ",", "kw", ",", "input", ".", "size", "(", "2", ")", ")", ".", "zero_", "(", ")", "\n", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "input_buffer", ")", "\n", "", "else", ":", "\n", "# shift buffer", "\n", "                ", "input_buffer", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "input_buffer", "[", ":", ",", "1", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "# append next input", "\n", "", "input_buffer", "[", ":", ",", "-", "1", ",", ":", "]", "=", "input", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "input", "=", "input_buffer", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "F", ".", "linear", "(", "input", ".", "view", "(", "bsz", ",", "-", "1", ")", ",", "weight", ",", "self", ".", "bias", ")", "\n", "", "return", "output", ".", "view", "(", "bsz", ",", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution.reorder_incremental_state": [[68, 73], ["linearized_convolution.LinearizedConvolution._get_input_buffer", "input_buffer.index_select.index_select.index_select", "linearized_convolution.LinearizedConvolution._set_input_buffer"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._get_input_buffer", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._set_input_buffer"], ["", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "not", "None", ":", "\n", "            ", "input_buffer", "=", "input_buffer", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "input_buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._get_input_buffer": [[74, 76], ["fairseq.utils.get_incremental_state"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.get_incremental_state"], ["", "", "def", "_get_input_buffer", "(", "self", ",", "incremental_state", ")", ":", "\n", "        ", "return", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._set_input_buffer": [[77, 79], ["fairseq.utils.set_incremental_state"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.set_incremental_state"], ["", "def", "_set_input_buffer", "(", "self", ",", "incremental_state", ",", "new_buffer", ")", ":", "\n", "        ", "return", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ",", "new_buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._get_linearized_weight": [[80, 87], ["linearized_convolution.LinearizedConvolution.weight.transpose().transpose().contiguous", "linearized_convolution.LinearizedConvolution.view", "linearized_convolution.LinearizedConvolution.size", "linearized_convolution.LinearizedConvolution.weight.transpose().transpose", "linearized_convolution.LinearizedConvolution.weight.transpose"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "_get_linearized_weight", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_linearized_weight", "is", "None", ":", "\n", "            ", "kw", "=", "self", ".", "kernel_size", "[", "0", "]", "\n", "weight", "=", "self", ".", "weight", ".", "transpose", "(", "2", ",", "1", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "assert", "weight", ".", "size", "(", ")", "==", "(", "self", ".", "out_channels", ",", "kw", ",", "self", ".", "in_channels", ")", "\n", "self", ".", "_linearized_weight", "=", "weight", ".", "view", "(", "self", ".", "out_channels", ",", "-", "1", ")", "\n", "", "return", "self", ".", "_linearized_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._clear_linearized_weight": [[88, 90], ["None"], "methods", ["None"], ["", "def", "_clear_linearized_weight", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "_linearized_weight", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.downsampled_multihead_attention.SingleHeadAttention.__init__": [[21, 63], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "k_layers.append", "v_layers.append", "k_layers.append", "downsampled_multihead_attention.GatedLinear", "v_layers.append", "k_layers.append", "downsampled_multihead_attention.Linear", "v_layers.append", "downsampled_multihead_attention.Linear", "downsampled_multihead_attention.Linear", "downsampled_multihead_attention.Downsample", "downsampled_multihead_attention.Downsample", "downsampled_multihead_attention.GatedLinear", "downsampled_multihead_attention.GatedLinear", "downsampled_multihead_attention.Linear", "downsampled_multihead_attention.Linear"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.downsampled_multihead_attention.GatedLinear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.downsampled_multihead_attention.GatedLinear", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.downsampled_multihead_attention.GatedLinear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["def", "__init__", "(", "\n", "self", ",", "out_channels", ",", "embed_dim", ",", "head_dim", ",", "head_index", ",", "dropout", "=", "0.", ",", "\n", "bias", "=", "True", ",", "project_input", "=", "True", ",", "gated", "=", "False", ",", "downsample", "=", "False", ",", "\n", "num_heads", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "head_index", "=", "head_index", "\n", "self", ".", "head_dim", "=", "head_dim", "\n", "self", ".", "project_input", "=", "project_input", "\n", "self", ".", "gated", "=", "gated", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "projection", "=", "None", "\n", "\n", "k_layers", "=", "[", "]", "\n", "v_layers", "=", "[", "]", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "k_layers", ".", "append", "(", "Downsample", "(", "self", ".", "head_index", ")", ")", "\n", "v_layers", ".", "append", "(", "Downsample", "(", "self", ".", "head_index", ")", ")", "\n", "out_proj_size", "=", "self", ".", "head_dim", "\n", "", "else", ":", "\n", "            ", "out_proj_size", "=", "self", ".", "head_dim", "*", "self", ".", "num_heads", "\n", "", "if", "self", ".", "gated", ":", "\n", "            ", "k_layers", ".", "append", "(", "GatedLinear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", ")", "\n", "self", ".", "in_proj_q", "=", "GatedLinear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", "\n", "v_layers", ".", "append", "(", "GatedLinear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", ")", "\n", "", "else", ":", "\n", "            ", "k_layers", ".", "append", "(", "Linear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", ")", "\n", "self", ".", "in_proj_q", "=", "Linear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", "\n", "v_layers", ".", "append", "(", "Linear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", ")", "\n", "\n", "", "self", ".", "in_proj_k", "=", "nn", ".", "Sequential", "(", "*", "k_layers", ")", "\n", "self", ".", "in_proj_v", "=", "nn", ".", "Sequential", "(", "*", "v_layers", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "self", ".", "out_proj", "=", "Linear", "(", "out_proj_size", ",", "self", ".", "head_dim", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "out_proj", "=", "Linear", "(", "out_proj_size", ",", "out_channels", ",", "bias", "=", "bias", ")", "\n", "\n", "", "self", ".", "scaling", "=", "self", ".", "head_dim", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.downsampled_multihead_attention.SingleHeadAttention.forward": [[64, 150], ["key.size", "query.size", "q.view.view.transpose", "k.view.view.transpose", "fairseq.modules.scalar_bias.scalar_bias.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "downsampled_multihead_attention.SingleHeadAttention.out_proj", "list", "key.size", "value.size", "downsampled_multihead_attention.SingleHeadAttention.in_proj_q", "downsampled_multihead_attention.SingleHeadAttention.in_proj_k", "downsampled_multihead_attention.SingleHeadAttention.in_proj_v", "q.view.view.view", "k.view.view.view", "fairseq.modules.scalar_bias.scalar_bias.view", "k.view.view.transpose", "[].unsqueeze", "[].unsqueeze", "fairseq.modules.scalar_bias.scalar_bias", "fairseq.modules.scalar_bias.scalar_bias", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "query.size", "key_padding_mask.size", "key_padding_mask.size", "k.view.view.size", "query.size", "key.size", "key_padding_mask.max", "attn_weights.view.view.masked_fill", "attn_weights.view.view.view", "attn_weights.view.view.view", "attn_weights.view.view.view", "key_padding_mask.unsqueeze().unsqueeze", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "attn_weights.view.view.data.new().expand().clone", "attn_weights.view.view.data.new().expand().clone", "key_padding_mask.unsqueeze", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose", "attn_weights.view.view.data.new().expand", "attn_weights.view.view.data.new().expand", "attn_weights.view.view.data.new", "attn_weights.view.view.data.new"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_q", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_k", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_v", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.scalar_bias.scalar_bias", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.scalar_bias.scalar_bias", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max"], ["", "def", "forward", "(", "\n", "self", ",", "query", ",", "key", ",", "value", ",", "mask_future_timesteps", "=", "False", ",", "\n", "key_padding_mask", "=", "None", ",", "use_scalar_bias", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Input shape: Time x Batch x Channel\n        Self-attention can be implemented by passing in the same arguments for\n        query, key and value. Future timesteps can be masked with the\n        `mask_future_timesteps` argument. Padding elements can be excluded from\n        the key by passing a binary ByteTensor (`key_padding_mask`) with shape:\n        batch x src_len, where padding elements are indicated by 1s.\n        \"\"\"", "\n", "src_len", ",", "bsz", ",", "out_channels", "=", "key", ".", "size", "(", ")", "\n", "tgt_len", "=", "query", ".", "size", "(", "0", ")", "\n", "assert", "list", "(", "query", ".", "size", "(", ")", ")", "==", "[", "tgt_len", ",", "bsz", ",", "out_channels", "]", "\n", "assert", "key", ".", "size", "(", ")", "==", "value", ".", "size", "(", ")", "\n", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "assert", "key_padding_mask", ".", "size", "(", "0", ")", "==", "bsz", "\n", "assert", "key_padding_mask", ".", "size", "(", "1", ")", "==", "src_len", "\n", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "size", "=", "bsz", "\n", "", "else", ":", "\n", "            ", "size", "=", "bsz", "*", "self", ".", "num_heads", "\n", "\n", "", "k", "=", "key", "\n", "v", "=", "value", "\n", "q", "=", "query", "\n", "if", "self", ".", "project_input", ":", "\n", "            ", "q", "=", "self", ".", "in_proj_q", "(", "q", ")", "\n", "k", "=", "self", ".", "in_proj_k", "(", "k", ")", "\n", "v", "=", "self", ".", "in_proj_v", "(", "v", ")", "\n", "src_len", "=", "k", ".", "size", "(", ")", "[", "0", "]", "\n", "", "q", "*=", "self", ".", "scaling", "\n", "\n", "if", "not", "self", ".", "downsample", ":", "\n", "            ", "q", "=", "q", ".", "view", "(", "tgt_len", ",", "size", ",", "self", ".", "head_dim", ")", "\n", "k", "=", "k", ".", "view", "(", "src_len", ",", "size", ",", "self", ".", "head_dim", ")", "\n", "v", "=", "v", ".", "view", "(", "src_len", ",", "size", ",", "self", ".", "head_dim", ")", "\n", "\n", "", "q", "=", "q", ".", "transpose", "(", "0", ",", "1", ")", "\n", "k", "=", "k", ".", "transpose", "(", "0", ",", "1", ")", "\n", "v", "=", "v", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "attn_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "if", "mask_future_timesteps", ":", "\n", "            ", "assert", "query", ".", "size", "(", ")", "==", "key", ".", "size", "(", ")", ",", "'mask_future_timesteps only applies to self-attention'", "\n", "attn_weights", "*=", "torch", ".", "tril", "(", "\n", "attn_weights", ".", "data", ".", "new", "(", "[", "1", "]", ")", ".", "expand", "(", "tgt_len", ",", "tgt_len", ")", ".", "clone", "(", ")", ",", "\n", "diagonal", "=", "-", "1", ",", "\n", ")", "[", ":", ",", ":", ":", "self", ".", "head_index", "+", "1", "if", "self", ".", "downsample", "else", "1", "]", ".", "unsqueeze", "(", "0", ")", "\n", "attn_weights", "+=", "torch", ".", "triu", "(", "\n", "attn_weights", ".", "data", ".", "new", "(", "[", "-", "math", ".", "inf", "]", ")", ".", "expand", "(", "tgt_len", ",", "tgt_len", ")", ".", "clone", "(", ")", ",", "\n", "diagonal", "=", "0", "\n", ")", "[", ":", ",", ":", ":", "self", ".", "head_index", "+", "1", "if", "self", ".", "downsample", "else", "1", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "tgt_size", "=", "tgt_len", "\n", "if", "use_scalar_bias", ":", "\n", "            ", "attn_weights", "=", "scalar_bias", "(", "attn_weights", ",", "2", ")", "\n", "v", "=", "scalar_bias", "(", "v", ",", "1", ")", "\n", "tgt_size", "+=", "1", "\n", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "# don't attend to padding symbols", "\n", "            ", "if", "key_padding_mask", ".", "max", "(", ")", ">", "0", ":", "\n", "                ", "if", "self", ".", "downsample", ":", "\n", "                    ", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", ",", "1", ",", "tgt_len", ",", "src_len", ")", "\n", "", "else", ":", "\n", "                    ", "attn_weights", "=", "attn_weights", ".", "view", "(", "size", ",", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "", "attn_weights", "=", "attn_weights", ".", "masked_fill", "(", "\n", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "-", "math", ".", "inf", ",", "\n", ")", "\n", "attn_weights", "=", "attn_weights", ".", "view", "(", "size", ",", "tgt_len", ",", "src_len", ")", "\n", "", "", "attn_weights", "=", "F", ".", "softmax", "(", "attn_weights", ",", "dim", "=", "-", "1", ")", "\n", "attn_weights", "=", "F", ".", "dropout", "(", "attn_weights", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "attn", "=", "torch", ".", "bmm", "(", "attn_weights", ",", "v", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "self", ".", "head_dim", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "self", ".", "embed_dim", ")", "\n", "\n", "", "attn", "=", "self", ".", "out_proj", "(", "attn", ")", "\n", "\n", "return", "attn", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.downsampled_multihead_attention.DownsampledMultiHeadAttention.__init__": [[156, 188], ["range", "torch.ModuleList.__init__", "downsampled_multihead_attention.Linear", "torch.ModuleList.__init__", "downsampled_multihead_attention.SingleHeadAttention", "attention_heads.append", "downsampled_multihead_attention.SingleHeadAttention"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "out_channels", ",", "embed_dim", ",", "num_heads", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ",", "\n", "project_input", "=", "True", ",", "gated", "=", "False", ",", "downsample", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "gated", "=", "gated", "\n", "self", ".", "project_input", "=", "project_input", "\n", "assert", "self", ".", "head_dim", "*", "num_heads", "==", "embed_dim", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "attention_heads", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "num_heads", ")", ":", "\n", "                ", "attention_heads", ".", "append", "(", "\n", "SingleHeadAttention", "(", "\n", "out_channels", ",", "self", ".", "embed_dim", ",", "self", ".", "head_dim", ",", "index", ",", "\n", "self", ".", "dropout", ",", "bias", ",", "self", ".", "project_input", ",", "self", ".", "gated", ",", "\n", "self", ".", "downsample", ",", "self", ".", "num_heads", ",", "\n", ")", "\n", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "modules", "=", "attention_heads", ")", "\n", "self", ".", "out_proj", "=", "Linear", "(", "embed_dim", ",", "out_channels", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "# either we have a list of attention heads, or just one attention head", "\n", "# if not being downsampled, we can do the heads with one linear layer instead of separate ones", "\n", "            ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_module", "=", "SingleHeadAttention", "(", "\n", "out_channels", ",", "self", ".", "embed_dim", ",", "self", ".", "head_dim", ",", "1", ",", "self", ".", "dropout", ",", "\n", "bias", ",", "self", ".", "project_input", ",", "self", ".", "gated", ",", "self", ".", "downsample", ",", "self", ".", "num_heads", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.downsampled_multihead_attention.DownsampledMultiHeadAttention.forward": [[190, 228], ["key.size", "query.size", "list", "key.size", "value.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "downsampled_multihead_attention.DownsampledMultiHeadAttention.out_proj", "downsampled_multihead_attention.DownsampledMultiHeadAttention.attention_module", "attn.append", "attn_weights.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "full_attn_weights.view.view.view", "query.size", "attn.append", "attn_weights.append", "attn_weights[].clone", "full_attn_weights.view.view.sum"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "", "def", "forward", "(", "\n", "self", ",", "query", ",", "key", ",", "value", ",", "mask_future_timesteps", "=", "False", ",", "\n", "key_padding_mask", "=", "None", ",", "use_scalar_bias", "=", "False", ",", "\n", ")", ":", "\n", "        ", "src_len", ",", "bsz", ",", "embed_dim", "=", "key", ".", "size", "(", ")", "\n", "tgt_len", "=", "query", ".", "size", "(", "0", ")", "\n", "assert", "embed_dim", "==", "self", ".", "embed_dim", "\n", "assert", "list", "(", "query", ".", "size", "(", ")", ")", "==", "[", "tgt_len", ",", "bsz", ",", "embed_dim", "]", "\n", "assert", "key", ".", "size", "(", ")", "==", "value", ".", "size", "(", ")", "\n", "\n", "tgt_size", "=", "tgt_len", "\n", "if", "use_scalar_bias", ":", "\n", "            ", "tgt_size", "+=", "1", "\n", "\n", "", "attn", "=", "[", "]", "\n", "attn_weights", "=", "[", "]", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "for", "attention_head_number", "in", "range", "(", "self", ".", "num_heads", ")", ":", "\n", "# call the forward of each attention head", "\n", "                ", "_attn", ",", "_attn_weight", "=", "self", "[", "attention_head_number", "]", "(", "\n", "query", ",", "key", ",", "value", ",", "mask_future_timesteps", ",", "key_padding_mask", ",", "use_scalar_bias", ",", "\n", ")", "\n", "attn", ".", "append", "(", "_attn", ")", "\n", "attn_weights", ".", "append", "(", "_attn_weight", ")", "\n", "", "full_attn", "=", "torch", ".", "cat", "(", "attn", ",", "dim", "=", "2", ")", "\n", "full_attn", "=", "self", ".", "out_proj", "(", "full_attn", ")", "\n", "return", "full_attn", ",", "attn_weights", "[", "0", "]", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "_attn", ",", "_attn_weight", "=", "self", ".", "attention_module", "(", "\n", "query", ",", "key", ",", "value", ",", "mask_future_timesteps", ",", "key_padding_mask", ",", "use_scalar_bias", ",", "\n", ")", "\n", "attn", ".", "append", "(", "_attn", ")", "\n", "attn_weights", ".", "append", "(", "_attn_weight", ")", "\n", "full_attn", "=", "torch", ".", "cat", "(", "attn", ",", "dim", "=", "2", ")", "\n", "full_attn_weights", "=", "torch", ".", "cat", "(", "attn_weights", ")", "\n", "full_attn_weights", "=", "full_attn_weights", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "tgt_size", ",", "src_len", ")", "\n", "full_attn_weights", "=", "full_attn_weights", ".", "sum", "(", "dim", "=", "1", ")", "/", "self", ".", "num_heads", "\n", "return", "full_attn", ",", "full_attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.downsampled_multihead_attention.Downsample.__init__": [[234, 237], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "index", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "index", "=", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.downsampled_multihead_attention.Downsample.forward": [[238, 240], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ":", "self", ".", "index", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.downsampled_multihead_attention.Linear": [[242, 248], ["torch.Linear", "nn.Linear.weight.data.normal_", "nn.Linear.bias.data.zero_", "torch.utils.weight_norm", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["", "", "def", "Linear", "(", "in_features", ",", "out_features", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Linear layer (input: B x T x C)\"\"\"", "\n", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "math", ".", "sqrt", "(", "(", "1", "-", "dropout", ")", "/", "in_features", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "return", "nn", ".", "utils", ".", "weight_norm", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.downsampled_multihead_attention.GatedLinear": [[250, 258], ["torch.Sequential", "downsampled_multihead_attention.Linear", "torch.GLU", "downsampled_multihead_attention.Linear", "torch.GLU", "downsampled_multihead_attention.Linear"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["", "def", "GatedLinear", "(", "in_features", ",", "out_features", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Linear layer (input: B x T x C) with interspersed GLU units\"\"\"", "\n", "return", "nn", ".", "Sequential", "(", "\n", "Linear", "(", "in_features", ",", "out_features", "*", "4", ",", "dropout", ",", "bias", ")", ",", "\n", "nn", ".", "GLU", "(", ")", ",", "\n", "Linear", "(", "out_features", "*", "2", ",", "out_features", "*", "2", ",", "dropout", ",", "bias", ")", ",", "\n", "nn", ".", "GLU", "(", ")", ",", "\n", "Linear", "(", "out_features", ",", "out_features", ",", "dropout", ",", "bias", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.dropout2d.Dropout2d.__init__": [[17, 22], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "dim1", "=", "0", ",", "dim2", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "dim1", "=", "dim1", "\n", "self", ".", "dim2", "=", "dim2", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.dropout2d.Dropout2d.extra_repr": [[23, 25], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'p={}, dim1={}, dim2={}'", ".", "format", "(", "self", ".", "p", ",", "self", ".", "dim1", ",", "self", ".", "dim2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.modules.dropout2d.Dropout2d.forward": [[26, 38], ["list", "x.size", "torch.dropout", "torch.dropout", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Drop the entire 2D channel (along dim1 & dim2) with probability `p`.\n        :param x: tensor with any shape\n        :return: tensor with the same shape and dtype as x\n        \"\"\"", "\n", "noise_shape", "=", "list", "(", "x", ".", "size", "(", ")", ")", "\n", "noise_shape", "[", "self", ".", "dim1", "]", "=", "1", "\n", "noise_shape", "[", "self", ".", "dim2", "]", "=", "1", "\n", "x", "=", "x", "*", "F", ".", "dropout", "(", "torch", ".", "ones", "(", "noise_shape", ",", "dtype", "=", "x", ".", "dtype", ",", "layout", "=", "x", ".", "layout", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "p", "=", "self", ".", "p", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.translation.TranslationTask.add_args": [[45, 65], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "nargs", "=", "'+'", ",", "help", "=", "'path(s) to data directorie(s)'", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--source-lang'", ",", "default", "=", "None", ",", "metavar", "=", "'SRC'", ",", "\n", "help", "=", "'source language'", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--target-lang'", ",", "default", "=", "None", ",", "metavar", "=", "'TARGET'", ",", "\n", "help", "=", "'target language'", ")", "\n", "parser", ".", "add_argument", "(", "'--raw-text'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'load raw text dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--left-pad-source'", ",", "default", "=", "'True'", ",", "type", "=", "str", ",", "metavar", "=", "'BOOL'", ",", "\n", "help", "=", "'pad the source on the left'", ")", "\n", "parser", ".", "add_argument", "(", "'--left-pad-target'", ",", "default", "=", "'False'", ",", "type", "=", "str", ",", "metavar", "=", "'BOOL'", ",", "\n", "help", "=", "'pad the target on the left'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-source-positions'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'max number of tokens in the source sequence'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-target-positions'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'max number of tokens in the target sequence'", ")", "\n", "parser", ".", "add_argument", "(", "'--upsample-primary'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'amount to upsample primary dataset'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.translation.TranslationTask.__init__": [[66, 70], ["FairseqTask.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["", "def", "__init__", "(", "self", ",", "args", ",", "src_dict", ",", "tgt_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "src_dict", "=", "src_dict", "\n", "self", ".", "tgt_dict", "=", "tgt_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.translation.TranslationTask.setup_task": [[71, 97], ["fairseq.options.eval_bool", "fairseq.options.eval_bool", "fairseq.data.Dictionary.load", "fairseq.data.Dictionary.load", "print", "print", "cls", "fairseq.data.data_utils.infer_language_pair", "Exception", "os.path.join", "os.path.join", "fairseq.data.Dictionary.load.pad", "fairseq.data.Dictionary.load.pad", "fairseq.data.Dictionary.load.eos", "fairseq.data.Dictionary.load.eos", "fairseq.data.Dictionary.load.unk", "fairseq.data.Dictionary.load.unk", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.eval_bool", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.eval_bool", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.infer_language_pair", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk"], ["", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task (e.g., load dictionaries).\n\n        Args:\n            args (argparse.Namespace): parsed command-line arguments\n        \"\"\"", "\n", "args", ".", "left_pad_source", "=", "options", ".", "eval_bool", "(", "args", ".", "left_pad_source", ")", "\n", "args", ".", "left_pad_target", "=", "options", ".", "eval_bool", "(", "args", ".", "left_pad_target", ")", "\n", "\n", "# find language pair automatically", "\n", "if", "args", ".", "source_lang", "is", "None", "or", "args", ".", "target_lang", "is", "None", ":", "\n", "            ", "args", ".", "source_lang", ",", "args", ".", "target_lang", "=", "data_utils", ".", "infer_language_pair", "(", "args", ".", "data", "[", "0", "]", ")", "\n", "", "if", "args", ".", "source_lang", "is", "None", "or", "args", ".", "target_lang", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Could not infer language pair, please provide it explicitly'", ")", "\n", "\n", "# load dictionaries", "\n", "", "src_dict", "=", "Dictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", "[", "0", "]", ",", "'dict.{}.txt'", ".", "format", "(", "args", ".", "source_lang", ")", ")", ")", "\n", "tgt_dict", "=", "Dictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", "[", "0", "]", ",", "'dict.{}.txt'", ".", "format", "(", "args", ".", "target_lang", ")", ")", ")", "\n", "assert", "src_dict", ".", "pad", "(", ")", "==", "tgt_dict", ".", "pad", "(", ")", "\n", "assert", "src_dict", ".", "eos", "(", ")", "==", "tgt_dict", ".", "eos", "(", ")", "\n", "assert", "src_dict", ".", "unk", "(", ")", "==", "tgt_dict", ".", "unk", "(", ")", "\n", "print", "(", "'| [{}] dictionary: {} types'", ".", "format", "(", "args", ".", "source_lang", ",", "len", "(", "src_dict", ")", ")", ")", "\n", "print", "(", "'| [{}] dictionary: {} types'", ".", "format", "(", "args", ".", "target_lang", ",", "len", "(", "tgt_dict", ")", ")", ")", "\n", "\n", "return", "cls", "(", "args", ",", "src_dict", ",", "tgt_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.translation.TranslationTask.load_dataset": [[98, 174], ["fairseq.data.LanguagePairDataset", "os.path.join", "itertools.count", "len", "len", "len", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "numpy.concatenate", "numpy.concatenate", "fairseq.data.IndexedRawTextDataset.exists", "fairseq.data.IndexedRawTextDataset", "fairseq.data.IndexedInMemoryDataset.exists", "translation.TranslationTask.load_dataset.split_exists"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "combine", "=", "False", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "\n", "def", "split_exists", "(", "split", ",", "src", ",", "tgt", ",", "lang", ",", "data_path", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-{}.{}'", ".", "format", "(", "split", ",", "src", ",", "tgt", ",", "lang", ")", ")", "\n", "if", "self", ".", "args", ".", "raw_text", "and", "IndexedRawTextDataset", ".", "exists", "(", "filename", ")", ":", "\n", "                ", "return", "True", "\n", "", "elif", "not", "self", ".", "args", ".", "raw_text", "and", "IndexedInMemoryDataset", ".", "exists", "(", "filename", ")", ":", "\n", "                ", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "def", "indexed_dataset", "(", "path", ",", "dictionary", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "raw_text", ":", "\n", "                ", "return", "IndexedRawTextDataset", "(", "path", ",", "dictionary", ")", "\n", "", "elif", "IndexedInMemoryDataset", ".", "exists", "(", "path", ")", ":", "\n", "                ", "return", "IndexedInMemoryDataset", "(", "path", ",", "fix_lua_indexing", "=", "True", ")", "\n", "", "return", "None", "\n", "\n", "", "src_datasets", "=", "[", "]", "\n", "tgt_datasets", "=", "[", "]", "\n", "\n", "data_paths", "=", "self", ".", "args", ".", "data", "\n", "\n", "for", "data_path", "in", "data_paths", ":", "\n", "            ", "for", "k", "in", "itertools", ".", "count", "(", ")", ":", "\n", "                ", "split_k", "=", "split", "+", "(", "str", "(", "k", ")", "if", "k", ">", "0", "else", "''", ")", "\n", "\n", "# infer langcode", "\n", "src", ",", "tgt", "=", "self", ".", "args", ".", "source_lang", ",", "self", ".", "args", ".", "target_lang", "\n", "if", "split_exists", "(", "split_k", ",", "src", ",", "tgt", ",", "src", ",", "data_path", ")", ":", "\n", "                    ", "prefix", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-{}.'", ".", "format", "(", "split_k", ",", "src", ",", "tgt", ")", ")", "\n", "", "elif", "split_exists", "(", "split_k", ",", "tgt", ",", "src", ",", "src", ",", "data_path", ")", ":", "\n", "                    ", "prefix", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-{}.'", ".", "format", "(", "split_k", ",", "tgt", ",", "src", ")", ")", "\n", "", "else", ":", "\n", "                    ", "if", "k", ">", "0", ":", "\n", "                        ", "break", "\n", "", "else", ":", "\n", "                        ", "raise", "FileNotFoundError", "(", "'Dataset not found: {} ({})'", ".", "format", "(", "split", ",", "data_path", ")", ")", "\n", "\n", "", "", "src_datasets", ".", "append", "(", "indexed_dataset", "(", "prefix", "+", "src", ",", "self", ".", "src_dict", ")", ")", "\n", "tgt_datasets", ".", "append", "(", "indexed_dataset", "(", "prefix", "+", "tgt", ",", "self", ".", "tgt_dict", ")", ")", "\n", "\n", "print", "(", "'| {} {} {} examples'", ".", "format", "(", "data_path", ",", "split_k", ",", "len", "(", "src_datasets", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "if", "not", "combine", ":", "\n", "                    ", "break", "\n", "\n", "\n", "\n", "\n", "", "", "", "assert", "len", "(", "src_datasets", ")", "==", "len", "(", "tgt_datasets", ")", "\n", "\n", "if", "len", "(", "src_datasets", ")", "==", "1", ":", "\n", "            ", "src_dataset", ",", "tgt_dataset", "=", "src_datasets", "[", "0", "]", ",", "tgt_datasets", "[", "0", "]", "\n", "src_sizes", "=", "src_dataset", ".", "sizes", "\n", "tgt_sizes", "=", "tgt_dataset", ".", "sizes", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "args", ".", "upsample_primary", ">", "1", ":", "\n", "                ", "src_datasets", ".", "extend", "(", "[", "src_datasets", "[", "0", "]", "]", "*", "(", "self", ".", "args", ".", "upsample_primary", "-", "1", ")", ")", "\n", "tgt_datasets", ".", "extend", "(", "[", "tgt_datasets", "[", "0", "]", "]", "*", "(", "self", ".", "args", ".", "upsample_primary", "-", "1", ")", ")", "\n", "", "src_dataset", "=", "ConcatDataset", "(", "src_datasets", ")", "\n", "tgt_dataset", "=", "ConcatDataset", "(", "tgt_datasets", ")", "\n", "src_sizes", "=", "np", ".", "concatenate", "(", "[", "ds", ".", "sizes", "for", "ds", "in", "src_datasets", "]", ")", "\n", "tgt_sizes", "=", "np", ".", "concatenate", "(", "[", "ds", ".", "sizes", "for", "ds", "in", "tgt_datasets", "]", ")", "\n", "\n", "", "self", ".", "datasets", "[", "split", "]", "=", "LanguagePairDataset", "(", "\n", "src_dataset", ",", "src_sizes", ",", "self", ".", "src_dict", ",", "\n", "tgt_dataset", ",", "tgt_sizes", ",", "self", ".", "tgt_dict", ",", "\n", "left_pad_source", "=", "self", ".", "args", ".", "left_pad_source", ",", "\n", "left_pad_target", "=", "self", ".", "args", ".", "left_pad_target", ",", "\n", "max_source_positions", "=", "self", ".", "args", ".", "max_source_positions", ",", "\n", "max_target_positions", "=", "self", ".", "args", ".", "max_target_positions", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.translation.TranslationTask.max_positions": [[176, 179], ["None"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the max sentence length allowed by the task.\"\"\"", "\n", "return", "(", "self", ".", "args", ".", "max_source_positions", ",", "self", ".", "args", ".", "max_target_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.translation.TranslationTask.source_dictionary": [[180, 184], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the source :class:`~fairseq.data.Dictionary`.\"\"\"", "\n", "return", "self", ".", "src_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.translation.TranslationTask.target_dictionary": [[185, 189], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the target :class:`~fairseq.data.Dictionary`.\"\"\"", "\n", "return", "self", ".", "tgt_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.add_args": [[17, 21], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.__init__": [[22, 25], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "datasets", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.setup_task": [[26, 34], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task (e.g., load dictionaries).\n\n        Args:\n            args (argparse.Namespace): parsed command-line arguments\n        \"\"\"", "\n", "return", "cls", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.load_dataset": [[35, 42], ["None"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "combine", "=", "False", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.dataset": [[43, 59], ["KeyError", "isinstance", "TypeError"], "methods", ["None"], ["", "def", "dataset", "(", "self", ",", "split", ")", ":", "\n", "        ", "\"\"\"\n        Return a loaded dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n\n        Returns:\n            a :class:`~fairseq.data.FairseqDataset` corresponding to *split*\n        \"\"\"", "\n", "from", "fairseq", ".", "data", "import", "FairseqDataset", "\n", "if", "split", "not", "in", "self", ".", "datasets", ":", "\n", "            ", "raise", "KeyError", "(", "'Dataset not loaded: '", "+", "split", ")", "\n", "", "if", "not", "isinstance", "(", "self", ".", "datasets", "[", "split", "]", ",", "FairseqDataset", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Datasets are expected to be of type FairseqDataset'", ")", "\n", "", "return", "self", ".", "datasets", "[", "split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.get_batch_iterator": [[60, 116], ["isinstance", "fairseq.data.data_utils.filter_by_size", "fairseq.data.data_utils.batch_by_size", "fairseq.data.iterators.EpochBatchIterator", "fairseq.data.data_utils.numpy_seed", "dataset.ordered_indices"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.filter_by_size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.batch_by_size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.ordered_indices"], ["", "def", "get_batch_iterator", "(", "\n", "self", ",", "dataset", ",", "max_tokens", "=", "None", ",", "max_sentences", "=", "None", ",", "max_positions", "=", "None", ",", "\n", "ignore_invalid_inputs", "=", "False", ",", "required_batch_size_multiple", "=", "1", ",", "\n", "seed", "=", "1", ",", "num_shards", "=", "1", ",", "shard_id", "=", "0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Get an iterator that yields batches of data from the given dataset.\n\n        Args:\n            dataset (~fairseq.data.FairseqDataset): dataset to batch\n            max_tokens (int, optional): max number of tokens in each batch.\n                Default: ``None``\n            max_sentences (int, optional): max number of sentences in each\n                batch. Default: ``None``\n            max_positions (optional): max sentence length supported by the\n                model. Default: ``None``\n            ignore_invalid_inputs (bool, optional): don't raise Exception for\n                sentences that are too long. Default: ``False``\n            required_batch_size_multiple (int, optional): require batch size to\n                be a multiple of N. Default: ``1``\n            seed (int, optional): seed for random number generator for\n                reproducibility. Default: ``1``\n            num_shards (int, optional): shard the data iterator into N\n                shards. Default: ``1``\n            shard_id (int, optional): which shard of the data iterator to\n                return. Default: ``0``\n\n        Returns:\n            ~fairseq.iterators.EpochBatchIterator: a batched iterator over the\n                given dataset split\n        \"\"\"", "\n", "assert", "isinstance", "(", "dataset", ",", "FairseqDataset", ")", "\n", "\n", "# get indices ordered by example size", "\n", "with", "data_utils", ".", "numpy_seed", "(", "seed", ")", ":", "\n", "            ", "indices", "=", "dataset", ".", "ordered_indices", "(", ")", "\n", "\n", "# filter examples that are too large", "\n", "", "indices", "=", "data_utils", ".", "filter_by_size", "(", "\n", "indices", ",", "dataset", ".", "size", ",", "max_positions", ",", "raise_exception", "=", "(", "not", "ignore_invalid_inputs", ")", ",", "\n", ")", "\n", "\n", "# create mini-batches with given size constraints", "\n", "batch_sampler", "=", "data_utils", ".", "batch_by_size", "(", "\n", "indices", ",", "dataset", ".", "num_tokens", ",", "max_tokens", "=", "max_tokens", ",", "max_sentences", "=", "max_sentences", ",", "\n", "required_batch_size_multiple", "=", "required_batch_size_multiple", ",", "\n", ")", "\n", "\n", "# return a reusable, sharded iterator", "\n", "return", "iterators", ".", "EpochBatchIterator", "(", "\n", "dataset", "=", "dataset", ",", "\n", "collate_fn", "=", "dataset", ".", "collater", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "seed", "=", "seed", ",", "\n", "num_shards", "=", "num_shards", ",", "\n", "shard_id", "=", "shard_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.build_model": [[118, 131], ["models.build_model"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.build_model"], ["", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Build the :class:`~fairseq.models.BaseFairseqModel` instance for this\n        task.\n\n        Args:\n            args (argparse.Namespace): parsed command-line arguments\n\n        Returns:\n            a :class:`~fairseq.models.BaseFairseqModel` instance\n        \"\"\"", "\n", "from", "fairseq", "import", "models", "\n", "return", "models", ".", "build_model", "(", "args", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.build_criterion": [[132, 145], ["criterions.build_criterion"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.criterions.__init__.build_criterion"], ["", "def", "build_criterion", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Build the :class:`~fairseq.criterions.FairseqCriterion` instance for\n        this task.\n\n        Args:\n            args (argparse.Namespace): parsed command-line arguments\n\n        Returns:\n            a :class:`~fairseq.criterions.FairseqCriterion` instance\n        \"\"\"", "\n", "from", "fairseq", "import", "criterions", "\n", "return", "criterions", ".", "build_criterion", "(", "args", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.get_loss": [[146, 158], ["criterion"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "model", ",", "criterion", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Return the loss as computed by *criterion* for the given *model* and\n        *sample*.\n\n        Args:\n            model (~fairseq.models.BaseFairseqModel): the model\n            criterion (~fairseq.criterions.FairseqCriterion): the criterion\n            sample (dict): the mini-batch. The format is defined by the\n                :class:`~fairseq.data.FairseqDataset`.\n        \"\"\"", "\n", "return", "criterion", "(", "model", ",", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.max_positions": [[159, 162], ["None"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the max input length allowed by the task.\"\"\"", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.source_dictionary": [[163, 168], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the source :class:`~fairseq.data.Dictionary` (if applicable\n        for this task).\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.fairseq_task.FairseqTask.target_dictionary": [[169, 174], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the target :class:`~fairseq.data.Dictionary` (if applicable\n        for this task).\"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.language_modeling.LanguageModelingTask.add_args": [[51, 73], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "help", "=", "'path to data directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-break-mode'", ",", "\n", "choices", "=", "[", "'none'", ",", "'complete'", ",", "'eos'", "]", ",", "\n", "help", "=", "'If omitted or \"none\", fills each sample with tokens-per-sample '", "\n", "'tokens. If set to \"complete\", splits samples only at the end '", "\n", "'of sentence, but may include multiple sentences per sample. '", "\n", "'If set to \"eos\", includes only one sentence per sample.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tokens-per-sample'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "\n", "help", "=", "'max number of tokens per sample for LM dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--raw-text'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'load raw text dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--output-dictionary-size'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'limit the size of output dictionary'", ")", "\n", "parser", ".", "add_argument", "(", "'--self-target'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'include self target'", ")", "\n", "parser", ".", "add_argument", "(", "'--future-target'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'include future target'", ")", "\n", "parser", ".", "add_argument", "(", "'--past-target'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'include past target'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.language_modeling.LanguageModelingTask.__init__": [[74, 82], ["FairseqTask.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "output_dictionary", ",", "targets", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "output_dictionary", "=", "output_dictionary", "\n", "\n", "if", "targets", "is", "None", ":", "\n", "            ", "targets", "=", "[", "'future'", "]", "\n", "", "self", ".", "targets", "=", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.language_modeling.LanguageModelingTask.setup_task": [[83, 112], ["fairseq.data.Dictionary.load", "print", "hasattr", "cls", "os.path.join", "fairseq.data.TruncatedDictionary", "targets.append", "targets.append", "targets.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], ["", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task (e.g., load dictionaries).\n\n        Args:\n            args (argparse.Namespace): parsed command-line arguments\n        \"\"\"", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'dict.txt'", ")", ")", "\n", "print", "(", "'| dictionary: {} types'", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "output_dictionary", "=", "dictionary", "\n", "if", "args", ".", "output_dictionary_size", ">=", "0", ":", "\n", "            ", "output_dictionary", "=", "TruncatedDictionary", "(", "dictionary", ",", "args", ".", "output_dictionary_size", ")", "\n", "\n", "# upgrade old checkpoints", "\n", "", "if", "hasattr", "(", "args", ",", "'exclude_self_target'", ")", ":", "\n", "            ", "args", ".", "self_target", "=", "not", "args", ".", "exclude_self_target", "\n", "\n", "", "targets", "=", "[", "]", "\n", "if", "args", ".", "self_target", ":", "\n", "            ", "targets", ".", "append", "(", "'self'", ")", "\n", "", "if", "args", ".", "future_target", ":", "\n", "            ", "targets", ".", "append", "(", "'future'", ")", "\n", "", "if", "args", ".", "past_target", ":", "\n", "            ", "targets", ".", "append", "(", "'past'", ")", "\n", "", "if", "len", "(", "targets", ")", "==", "0", ":", "\n", "# standard language modeling", "\n", "            ", "targets", "=", "[", "'future'", "]", "\n", "\n", "", "return", "cls", "(", "args", ",", "dictionary", ",", "output_dictionary", ",", "targets", "=", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.language_modeling.LanguageModelingTask.build_model": [[113, 121], ["super().build_model", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.build_model"], ["", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "model", "=", "super", "(", ")", ".", "build_model", "(", "args", ")", "\n", "\n", "for", "target", "in", "self", ".", "targets", ":", "\n", "            ", "if", "target", "not", "in", "model", ".", "supported_targets", ":", "\n", "                ", "raise", "ValueError", "(", "'Unsupported language modeling target: {}'", ".", "format", "(", "target", ")", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.language_modeling.LanguageModelingTask.load_dataset": [[123, 172], ["itertools.count", "fairseq.data.MonolingualDataset", "os.path.join", "loaded_datasets.append", "print", "len", "torch.utils.data.ConcatDataset", "numpy.concatenate", "fairseq.data.IndexedRawTextDataset.exists", "fairseq.data.IndexedRawTextDataset", "fairseq.data.TokenBlockDataset", "str", "fairseq.data.IndexedInMemoryDataset.exists", "fairseq.data.IndexedInMemoryDataset", "len", "FileNotFoundError", "language_modeling.LanguageModelingTask.dictionary.pad", "language_modeling.LanguageModelingTask.dictionary.eos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "combine", "=", "False", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "\n", "loaded_datasets", "=", "[", "]", "\n", "\n", "for", "k", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "split_k", "=", "split", "+", "(", "str", "(", "k", ")", "if", "k", ">", "0", "else", "''", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data", ",", "split_k", ")", "\n", "\n", "if", "self", ".", "args", ".", "raw_text", "and", "IndexedRawTextDataset", ".", "exists", "(", "path", ")", ":", "\n", "                ", "ds", "=", "IndexedRawTextDataset", "(", "path", ",", "self", ".", "dictionary", ")", "\n", "tokens", "=", "[", "t", "for", "l", "in", "ds", ".", "tokens_list", "for", "t", "in", "l", "]", "\n", "", "elif", "not", "self", ".", "args", ".", "raw_text", "and", "IndexedInMemoryDataset", ".", "exists", "(", "path", ")", ":", "\n", "                ", "ds", "=", "IndexedInMemoryDataset", "(", "path", ",", "fix_lua_indexing", "=", "True", ")", "\n", "tokens", "=", "ds", ".", "buffer", "\n", "", "else", ":", "\n", "                ", "if", "k", ">", "0", ":", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "                    ", "raise", "FileNotFoundError", "(", "'Dataset not found: {} ({})'", ".", "format", "(", "split", ",", "self", ".", "args", ".", "data", ")", ")", "\n", "\n", "", "", "loaded_datasets", ".", "append", "(", "\n", "TokenBlockDataset", "(", "\n", "tokens", ",", "ds", ".", "sizes", ",", "self", ".", "args", ".", "tokens_per_sample", ",", "pad", "=", "self", ".", "dictionary", ".", "pad", "(", ")", ",", "eos", "=", "self", ".", "dictionary", ".", "eos", "(", ")", ",", "\n", "break_mode", "=", "self", ".", "args", ".", "sample_break_mode", ",", "include_targets", "=", "True", ",", "\n", ")", ")", "\n", "\n", "print", "(", "'| {} {} {} examples'", ".", "format", "(", "self", ".", "args", ".", "data", ",", "split_k", ",", "len", "(", "loaded_datasets", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "if", "not", "combine", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "len", "(", "loaded_datasets", ")", "==", "1", ":", "\n", "            ", "dataset", "=", "loaded_datasets", "[", "0", "]", "\n", "sizes", "=", "dataset", ".", "sizes", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "ConcatDataset", "(", "loaded_datasets", ")", "\n", "sizes", "=", "np", ".", "concatenate", "(", "[", "ds", ".", "sizes", "for", "ds", "in", "loaded_datasets", "]", ")", "\n", "\n", "", "add_eos_for_other_targets", "=", "self", ".", "args", ".", "sample_break_mode", "is", "not", "None", "and", "self", ".", "args", ".", "sample_break_mode", "!=", "'none'", "\n", "\n", "self", ".", "datasets", "[", "split", "]", "=", "MonolingualDataset", "(", "\n", "dataset", ",", "sizes", ",", "self", ".", "dictionary", ",", "self", ".", "output_dictionary", ",", "\n", "add_eos_for_other_targets", "=", "add_eos_for_other_targets", ",", "shuffle", "=", "False", ",", "\n", "targets", "=", "self", ".", "targets", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.language_modeling.LanguageModelingTask.target_dictionary": [[174, 179], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the :class:`~fairseq.data.Dictionary` for the language\n        model.\"\"\"", "\n", "return", "self", ".", "output_dictionary", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.__init__.setup_task": [[18, 20], ["TASK_REGISTRY[].setup_task"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.tasks.__init__.setup_task"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.tasks.__init__.register_task": [[22, 56], ["TASK_CLASS_NAMES.add", "ValueError", "issubclass", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.add"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvModelSelfAtt.__init__": [[29, 40], ["FairseqModel.__init__", "sum", "CompositeEncoder"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ",", "pretrained_encoder", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "self", ".", "encoder", ".", "num_attention_layers", "=", "sum", "(", "layer", "is", "not", "None", "for", "layer", "in", "decoder", ".", "attention", ")", "\n", "self", ".", "pretrained_encoder", "=", "pretrained_encoder", "\n", "if", "self", ".", "pretrained_encoder", "is", "None", ":", "\n", "            ", "encoders", "=", "{", "'encoder'", ":", "encoder", "}", "\n", "", "else", ":", "\n", "            ", "encoders", "=", "{", "'encoder'", ":", "encoder", ",", "'pretrained'", ":", "self", ".", "pretrained_encoder", "}", "\n", "# for fusion model, CompositeEncoder contains both pretrained and training encoders", "\n", "# these are forwarded and then combined in the decoder", "\n", "", "self", ".", "encoder", "=", "CompositeEncoder", "(", "encoders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvModelSelfAtt.add_args": [[41, 78], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'encoder layers [(dim, kernel_size), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder layers [(dim, kernel_size), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-out-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder attention [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--self-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder self-attention layers, ex: [True] + [False]*5'", ")", "\n", "parser", ".", "add_argument", "(", "'--multihead-attention-nheads'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of heads to use in attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--multihead-self-attention-nheads'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of heads to use in self-attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'encoder attention [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-attention-nheads'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of heads to use in encoder attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--project-input'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'Use projections in self-attention [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--gated-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'Use GLU layers in self-attention projections [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--downsample'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'Use downsampling in self-attention [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained-checkpoint'", ",", "metavar", "=", "'DIR'", ",", "\n", "help", "=", "'path to load checkpoint from pretrained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'use pretrained model when training [True, ...]'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvModelSelfAtt.build_model": [[79, 130], ["eval", "fconv_self_att.FConvModelSelfAtt.FConvEncoder", "fconv_self_att.FConvModelSelfAtt.FConvDecoder", "fconv_self_att.FConvModelSelfAtt.FConvModelSelfAtt", "print", "trained_decoder.parameters", "trained_encoder.parameters", "list", "list", "eval", "eval", "eval", "eval", "eval", "eval", "eval", "eval", "fairseq.utils.load_ensemble_for_inference", "trained_model.children", "trained_model.children"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_ensemble_for_inference"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "trained_encoder", ",", "trained_decoder", "=", "None", ",", "None", "\n", "pretrained", "=", "eval", "(", "args", ".", "pretrained", ")", "\n", "if", "pretrained", ":", "\n", "            ", "print", "(", "\"| loading pretrained model\"", ")", "\n", "trained_model", "=", "utils", ".", "load_ensemble_for_inference", "(", "\n", "# not actually for inference, but loads pretrained model parameters", "\n", "filenames", "=", "[", "args", ".", "pretrained_checkpoint", "]", ",", "\n", "task", "=", "task", ",", "\n", ")", "[", "0", "]", "[", "0", "]", "\n", "trained_decoder", "=", "list", "(", "trained_model", ".", "children", "(", ")", ")", "[", "1", "]", "\n", "trained_encoder", "=", "list", "(", "trained_model", ".", "children", "(", ")", ")", "[", "0", "]", "\n", "\n", "# freeze pretrained model", "\n", "for", "param", "in", "trained_decoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "trained_encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "\"\"\"Build a new model instance.\"\"\"", "\n", "encoder", "=", "FConvEncoder", "(", "\n", "task", ".", "source_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "encoder_embed_dim", ",", "\n", "convolutions", "=", "eval", "(", "args", ".", "encoder_layers", ")", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "max_positions", "=", "args", ".", "max_source_positions", ",", "\n", "attention", "=", "eval", "(", "args", ".", "encoder_attention", ")", ",", "\n", "attention_nheads", "=", "args", ".", "encoder_attention_nheads", "\n", ")", "\n", "\n", "decoder", "=", "FConvDecoder", "(", "\n", "task", ".", "target_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "convolutions", "=", "eval", "(", "args", ".", "decoder_layers", ")", ",", "\n", "out_embed_dim", "=", "args", ".", "decoder_out_embed_dim", ",", "\n", "attention", "=", "eval", "(", "args", ".", "decoder_attention", ")", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "max_positions", "=", "args", ".", "max_target_positions", ",", "\n", "selfattention", "=", "eval", "(", "args", ".", "self_attention", ")", ",", "\n", "attention_nheads", "=", "args", ".", "multihead_attention_nheads", ",", "\n", "selfattention_nheads", "=", "args", ".", "multihead_self_attention_nheads", ",", "\n", "project_input", "=", "eval", "(", "args", ".", "project_input", ")", ",", "\n", "gated_attention", "=", "eval", "(", "args", ".", "gated_attention", ")", ",", "\n", "downsample", "=", "eval", "(", "args", ".", "downsample", ")", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "trained_decoder", "=", "trained_decoder", "\n", ")", "\n", "model", "=", "FConvModelSelfAtt", "(", "encoder", ",", "decoder", ",", "trained_encoder", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvModelSelfAtt.pretrained": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pretrained", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pretrained_encoder", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvEncoder.__init__": [[138, 186], ["FairseqEncoder.__init__", "len", "dictionary.pad", "fconv_self_att.Embedding", "fconv_self_att.PositionalEmbedding", "fconv_self_att.FConvEncoder.FConvEncoder.__init__.expand_bool_array"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.PositionalEmbedding"], ["def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "max_positions", "=", "1024", ",", "\n", "convolutions", "=", "(", "(", "512", ",", "3", ")", ",", ")", "*", "20", ",", "dropout", "=", "0.1", ",", "attention", "=", "False", ",", "\n", "attention_nheads", "=", "1", ",", "left_pad", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "num_attention_layers", "=", "None", "\n", "self", ".", "left_pad", "=", "left_pad", "\n", "\n", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "self", ".", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "self", ".", "padding_idx", ")", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "max_positions", ",", "\n", "embed_dim", ",", "\n", "self", ".", "padding_idx", ",", "\n", "left_pad", "=", "self", ".", "left_pad", ",", "\n", ")", "\n", "\n", "def", "expand_bool_array", "(", "val", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "bool", ")", ":", "\n", "# expand True into [True, True, ...] and do the same with False", "\n", "                ", "return", "[", "val", "]", "*", "len", "(", "convolutions", ")", "\n", "", "return", "val", "\n", "\n", "", "attention", "=", "expand_bool_array", "(", "attention", ")", "\n", "\n", "in_channels", "=", "convolutions", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "fc1", "=", "Linear", "(", "embed_dim", ",", "in_channels", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "projections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convolutions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "attproj", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "(", "out_channels", ",", "kernel_size", ")", "in", "enumerate", "(", "convolutions", ")", ":", "\n", "            ", "self", ".", "projections", ".", "append", "(", "\n", "Linear", "(", "in_channels", ",", "out_channels", ")", "if", "in_channels", "!=", "out_channels", "else", "None", "\n", ")", "\n", "self", ".", "convolutions", ".", "append", "(", "\n", "ConvTBC", "(", "in_channels", ",", "out_channels", "*", "2", ",", "kernel_size", ",", "dropout", "=", "dropout", ")", "\n", ")", "\n", "\n", "self", ".", "attention", ".", "append", "(", "\n", "SelfAttention", "(", "out_channels", ",", "embed_dim", ",", "attention_nheads", ")", "if", "attention", "[", "i", "]", "else", "None", "\n", ")", "\n", "in_channels", "=", "out_channels", "\n", "\n", "", "self", ".", "fc2", "=", "Linear", "(", "in_channels", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvEncoder.forward": [[187, 227], ["torch.dropout", "torch.dropout", "torch.dropout", "attention.transpose", "fconv_self_att.FConvEncoder.FConvEncoder.fc1", "attention.transpose", "zip", "attention.transpose", "fconv_self_att.FConvEncoder.FConvEncoder.fc2", "fairseq.modules.GradMultiply.apply", "fconv_self_att.FConvEncoder.FConvEncoder.embed_tokens", "fconv_self_att.FConvEncoder.FConvEncoder.embed_positions", "torch.dropout", "torch.dropout", "torch.dropout", "torch.pad", "torch.pad", "torch.pad", "conv", "torch.glu", "torch.glu", "torch.glu", "math.sqrt", "proj", "attention", "math.sqrt", "attention.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "# embed tokens and positions", "\n", "        ", "x", "=", "self", ".", "embed_tokens", "(", "src_tokens", ")", "+", "self", ".", "embed_positions", "(", "src_tokens", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "input_embedding", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# project to size of convolution", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# temporal convolutions", "\n", "for", "proj", ",", "conv", ",", "attention", "in", "zip", "(", "self", ".", "projections", ",", "self", ".", "convolutions", ",", "self", ".", "attention", ")", ":", "\n", "            ", "residual", "=", "x", "if", "proj", "is", "None", "else", "proj", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "padding_l", "=", "(", "conv", ".", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", "\n", "padding_r", "=", "conv", ".", "kernel_size", "[", "0", "]", "//", "2", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "padding_l", ",", "padding_r", ")", ")", "\n", "x", "=", "conv", "(", "x", ")", "\n", "x", "=", "F", ".", "glu", "(", "x", ",", "dim", "=", "2", ")", "\n", "if", "attention", "is", "not", "None", ":", "\n", "                ", "x", "=", "attention", "(", "x", ")", "\n", "", "x", "=", "(", "x", "+", "residual", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# project back to size of embedding", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "# scale gradients (this only affects backward, not forward)", "\n", "x", "=", "GradMultiply", ".", "apply", "(", "x", ",", "1.0", "/", "(", "2.0", "*", "self", ".", "num_attention_layers", ")", ")", "\n", "\n", "# add output to input embedding for attention", "\n", "y", "=", "(", "x", "+", "input_embedding", ".", "transpose", "(", "0", ",", "1", ")", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "\n", "return", "{", "\n", "'encoder_out'", ":", "(", "x", ",", "y", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvEncoder.reorder_encoder_out": [[229, 241], ["tuple", "tuple", "eo.index_select", "eo.index_select"], "methods", ["None"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "encoder_out", "[", "'encoder_out'", "]", "=", "tuple", "(", "\n", "eo", ".", "index_select", "(", "0", ",", "new_order", ")", "for", "eo", "in", "encoder_out", "[", "'encoder_out'", "]", "\n", ")", "\n", "\n", "if", "'pretrained'", "in", "encoder_out", ":", "\n", "            ", "encoder_out", "[", "'pretrained'", "]", "[", "'encoder_out'", "]", "=", "tuple", "(", "\n", "eo", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "for", "eo", "in", "encoder_out", "[", "'pretrained'", "]", "[", "'encoder_out'", "]", "\n", ")", "\n", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvEncoder.max_positions": [[242, 245], ["fconv_self_att.FConvEncoder.FConvEncoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "return", "self", ".", "embed_positions", ".", "max_positions", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvDecoder.__init__": [[249, 355], ["FairseqDecoder.__init__", "fconv_self_att.FConvDecoder.FConvDecoder.register_buffer", "fconv_self_att.FConvDecoder.FConvDecoder.__init__.expand_bool_array"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "out_embed_dim", "=", "256", ",", "max_positions", "=", "1024", ",", "\n", "convolutions", "=", "(", "(", "512", ",", "3", ")", ",", ")", "*", "8", ",", "attention", "=", "True", ",", "dropout", "=", "0.1", ",", "\n", "selfattention", "=", "False", ",", "attention_nheads", "=", "1", ",", "selfattention_nheads", "=", "1", ",", "\n", "project_input", "=", "False", ",", "gated_attention", "=", "False", ",", "downsample", "=", "False", ",", "\n", "pretrained", "=", "False", ",", "trained_decoder", "=", "None", ",", "left_pad", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "pretrained_decoder", "=", "trained_decoder", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "left_pad", "=", "left_pad", "\n", "self", ".", "need_attn", "=", "True", "\n", "in_channels", "=", "convolutions", "[", "0", "]", "[", "0", "]", "\n", "\n", "def", "expand_bool_array", "(", "val", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "bool", ")", ":", "\n", "# expand True into [True, True, ...] and do the same with False", "\n", "                ", "return", "[", "val", "]", "*", "len", "(", "convolutions", ")", "\n", "", "return", "val", "\n", "\n", "", "attention", "=", "expand_bool_array", "(", "attention", ")", "\n", "selfattention", "=", "expand_bool_array", "(", "selfattention", ")", "\n", "\n", "if", "not", "isinstance", "(", "attention", ",", "list", ")", "or", "len", "(", "attention", ")", "!=", "len", "(", "convolutions", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Attention is expected to be a list of booleans of '", "\n", "'length equal to the number of layers.'", ")", "\n", "\n", "", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "max_positions", ",", "\n", "embed_dim", ",", "\n", "padding_idx", ",", "\n", "left_pad", "=", "self", ".", "left_pad", ",", "\n", ")", "\n", "\n", "self", ".", "fc1", "=", "Linear", "(", "embed_dim", ",", "in_channels", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "projections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convolutions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "selfattention", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "attproj", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "(", "out_channels", ",", "kernel_size", ")", "in", "enumerate", "(", "convolutions", ")", ":", "\n", "            ", "self", ".", "projections", ".", "append", "(", "\n", "Linear", "(", "in_channels", ",", "out_channels", ")", "if", "in_channels", "!=", "out_channels", "else", "None", "\n", ")", "\n", "self", ".", "convolutions", ".", "append", "(", "\n", "LinearizedConv1d", "(", "\n", "in_channels", ",", "out_channels", "*", "2", ",", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", ",", "dropout", "=", "dropout", ",", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "attention", ".", "append", "(", "\n", "DownsampledMultiHeadAttention", "(", "\n", "out_channels", ",", "embed_dim", ",", "attention_nheads", ",", "\n", "project_input", "=", "project_input", ",", "gated", "=", "False", ",", "downsample", "=", "False", ",", "\n", ")", "if", "attention", "[", "i", "]", "else", "None", "\n", ")", "\n", "\n", "self", ".", "attproj", ".", "append", "(", "\n", "Linear", "(", "out_channels", ",", "embed_dim", ",", "dropout", "=", "dropout", ")", "if", "attention", "[", "i", "]", "else", "None", "\n", ")", "\n", "self", ".", "selfattention", ".", "append", "(", "\n", "SelfAttention", "(", "\n", "out_channels", ",", "embed_dim", ",", "selfattention_nheads", ",", "\n", "project_input", "=", "project_input", ",", "gated", "=", "gated_attention", ",", "\n", "downsample", "=", "downsample", ",", "\n", ")", "if", "selfattention", "[", "i", "]", "else", "None", "\n", ")", "\n", "in_channels", "=", "out_channels", "\n", "\n", "", "self", ".", "fc2", "=", "Linear", "(", "in_channels", ",", "out_embed_dim", ")", "\n", "self", ".", "fc3", "=", "Linear", "(", "out_embed_dim", ",", "num_embeddings", ",", "dropout", "=", "dropout", ")", "\n", "\n", "# model fusion", "\n", "if", "self", ".", "pretrained", ":", "\n", "# independent gates are learned from the concatenated input", "\n", "            ", "self", ".", "gate1", "=", "nn", ".", "Sequential", "(", "Linear", "(", "out_embed_dim", "*", "2", ",", "out_embed_dim", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "gate2", "=", "nn", ".", "Sequential", "(", "Linear", "(", "out_embed_dim", "*", "2", ",", "out_embed_dim", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "# pretrained and trained models are joined", "\n", "self", ".", "joining", "=", "nn", ".", "Sequential", "(", "\n", "Linear", "(", "out_embed_dim", "*", "2", ",", "out_embed_dim", "*", "2", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "out_embed_dim", "*", "2", ")", ",", "\n", "nn", ".", "GLU", "(", ")", ",", "\n", "Linear", "(", "out_embed_dim", ",", "out_embed_dim", "*", "2", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "out_embed_dim", "*", "2", ")", ",", "\n", "nn", ".", "GLU", "(", ")", ",", "\n", "Linear", "(", "out_embed_dim", ",", "out_embed_dim", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "out_embed_dim", ")", "\n", ")", "\n", "# pretrained model contains an output layer that is nhid -> vocab size", "\n", "# but the models are combined in their hidden state", "\n", "# the hook stores the output of the pretrained model forward", "\n", "self", ".", "pretrained_outputs", "=", "{", "}", "\n", "\n", "def", "save_output", "(", ")", ":", "\n", "                ", "def", "hook", "(", "a", ",", "b", ",", "output", ")", ":", "\n", "                    ", "self", ".", "pretrained_outputs", "[", "\"out\"", "]", "=", "output", "\n", "", "return", "hook", "\n", "\n", "", "self", ".", "pretrained_decoder", ".", "fc2", ".", "register_forward_hook", "(", "save_output", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvDecoder.forward": [[356, 426], ["fconv_self_att.FConvDecoder.FConvDecoder._split_encoder_out", "fconv_self_att.FConvDecoder.FConvDecoder.embed_positions", "torch.dropout", "torch.dropout", "torch.dropout", "fconv_self_att.FConvDecoder.FConvDecoder.transpose", "fconv_self_att.FConvDecoder.FConvDecoder.fc1", "fconv_self_att.FConvDecoder.FConvDecoder.transpose", "zip", "fconv_self_att.FConvDecoder.FConvDecoder.transpose", "fconv_self_att.FConvDecoder.FConvDecoder.fc2", "torch.dropout", "torch.dropout", "torch.dropout", "fconv_self_att.FConvDecoder.FConvDecoder.embed_tokens", "torch.dropout", "torch.dropout", "torch.dropout", "conv", "torch.glu", "torch.glu", "torch.glu", "fconv_self_att.FConvDecoder.FConvDecoder.fc3", "fconv_self_att.FConvDecoder.FConvDecoder.pretrained_decoder.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fconv_self_att.FConvDecoder.FConvDecoder.gate1", "fconv_self_att.FConvDecoder.FConvDecoder.gate2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fconv_self_att.FConvDecoder.FConvDecoder.joining", "fconv_self_att.FConvDecoder.FConvDecoder.fc3", "proj", "attention", "fconv_self_att.FConvDecoder.FConvDecoder.", "math.sqrt", "attproj", "avg_attn_scores.add_"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder._split_encoder_out", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.forward"], ["", "", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out_dict", ")", ":", "\n", "        ", "encoder_out", "=", "encoder_out_dict", "[", "'encoder'", "]", "[", "'encoder_out'", "]", "\n", "trained_encoder_out", "=", "encoder_out_dict", "[", "'pretrained'", "]", "if", "self", ".", "pretrained", "else", "None", "\n", "\n", "encoder_a", ",", "encoder_b", "=", "self", ".", "_split_encoder_out", "(", "encoder_out", ")", "\n", "\n", "# embed positions", "\n", "positions", "=", "self", ".", "embed_positions", "(", "prev_output_tokens", ")", "\n", "\n", "# embed tokens and positions", "\n", "x", "=", "self", ".", "embed_tokens", "(", "prev_output_tokens", ")", "+", "positions", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "target_embedding", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# project to size of convolution", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# temporal convolutions", "\n", "avg_attn_scores", "=", "None", "\n", "for", "proj", ",", "conv", ",", "attention", ",", "selfattention", ",", "attproj", "in", "zip", "(", "\n", "self", ".", "projections", ",", "self", ".", "convolutions", ",", "self", ".", "attention", ",", "self", ".", "selfattention", ",", "self", ".", "attproj", "\n", ")", ":", "\n", "            ", "residual", "=", "x", "if", "proj", "is", "None", "else", "proj", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "conv", "(", "x", ")", "\n", "x", "=", "F", ".", "glu", "(", "x", ",", "dim", "=", "2", ")", "\n", "\n", "# attention", "\n", "if", "attention", "is", "not", "None", ":", "\n", "                ", "r", "=", "x", "\n", "x", ",", "attn_scores", "=", "attention", "(", "attproj", "(", "x", ")", "+", "target_embedding", ",", "encoder_a", ",", "encoder_b", ")", "\n", "x", "=", "x", "+", "r", "\n", "if", "not", "self", ".", "training", "and", "self", ".", "need_attn", ":", "\n", "                    ", "if", "avg_attn_scores", "is", "None", ":", "\n", "                        ", "avg_attn_scores", "=", "attn_scores", "\n", "", "else", ":", "\n", "                        ", "avg_attn_scores", ".", "add_", "(", "attn_scores", ")", "\n", "\n", "", "", "", "if", "selfattention", "is", "not", "None", ":", "\n", "                ", "x", "=", "selfattention", "(", "x", ")", "\n", "\n", "", "x", "=", "(", "x", "+", "residual", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# project back to size of vocabulary", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "if", "not", "self", ".", "pretrained", ":", "\n", "            ", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "# fusion gating", "\n", "", "if", "self", ".", "pretrained", ":", "\n", "            ", "trained_x", ",", "_", "=", "self", ".", "pretrained_decoder", ".", "forward", "(", "prev_output_tokens", ",", "trained_encoder_out", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "pretrained_outputs", "[", "\"out\"", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "gate1", "=", "self", ".", "gate1", "(", "y", ")", "\n", "gate2", "=", "self", ".", "gate2", "(", "y", ")", "\n", "gated_x1", "=", "gate1", "*", "x", "\n", "gated_x2", "=", "gate2", "*", "self", ".", "pretrained_outputs", "[", "\"out\"", "]", "\n", "fusion", "=", "torch", ".", "cat", "(", "[", "gated_x1", ",", "gated_x2", "]", ",", "dim", "=", "-", "1", ")", "\n", "fusion", "=", "self", ".", "joining", "(", "fusion", ")", "\n", "fusion_output", "=", "self", ".", "fc3", "(", "fusion", ")", "\n", "return", "fusion_output", ",", "avg_attn_scores", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "avg_attn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvDecoder.max_positions": [[427, 430], ["fconv_self_att.FConvDecoder.FConvDecoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum output length supported by the decoder.\"\"\"", "\n", "return", "self", ".", "embed_positions", ".", "max_positions", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvDecoder.make_generation_fast_": [[431, 433], ["None"], "methods", ["None"], ["", "def", "make_generation_fast_", "(", "self", ",", "need_attn", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "need_attn", "=", "need_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.FConvDecoder._split_encoder_out": [[434, 442], ["encoder_a.transpose().contiguous.transpose().contiguous.transpose().contiguous", "encoder_b.transpose().contiguous.transpose().contiguous.transpose().contiguous", "encoder_a.transpose().contiguous.transpose().contiguous.transpose", "encoder_b.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["None"], ["", "def", "_split_encoder_out", "(", "self", ",", "encoder_out", ")", ":", "\n", "        ", "\"\"\"Split and transpose encoder outputs.\"\"\"", "\n", "# transpose only once to speed up attention layers", "\n", "encoder_a", ",", "encoder_b", "=", "encoder_out", "\n", "encoder_a", "=", "encoder_a", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "encoder_b", "=", "encoder_b", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "result", "=", "(", "encoder_a", ",", "encoder_b", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.SelfAttention.__init__": [[446, 456], ["torch.Module.__init__", "fairseq.modules.DownsampledMultiHeadAttention", "fconv_self_att.Linear", "fconv_self_att.Linear", "fconv_self_att.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ",", "embed_dim", ",", "num_heads", ",", "project_input", "=", "False", ",", "gated", "=", "False", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "DownsampledMultiHeadAttention", "(", "\n", "out_channels", ",", "embed_dim", ",", "num_heads", ",", "dropout", "=", "0", ",", "bias", "=", "True", ",", "\n", "project_input", "=", "project_input", ",", "gated", "=", "gated", ",", "downsample", "=", "downsample", ",", "\n", ")", "\n", "self", ".", "in_proj_q", "=", "Linear", "(", "out_channels", ",", "embed_dim", ")", "\n", "self", ".", "in_proj_k", "=", "Linear", "(", "out_channels", ",", "embed_dim", ")", "\n", "self", ".", "in_proj_v", "=", "Linear", "(", "out_channels", ",", "embed_dim", ")", "\n", "self", ".", "ln", "=", "nn", ".", "LayerNorm", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.SelfAttention.forward": [[457, 464], ["fconv_self_att.SelfAttention.SelfAttention.in_proj_q", "fconv_self_att.SelfAttention.SelfAttention.in_proj_k", "fconv_self_att.SelfAttention.SelfAttention.in_proj_v", "fconv_self_att.SelfAttention.SelfAttention.attention", "fconv_self_att.SelfAttention.SelfAttention.ln"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_q", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_k", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.separable_attention.SeparableAttention.in_proj_v"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "query", "=", "self", ".", "in_proj_q", "(", "x", ")", "\n", "key", "=", "self", ".", "in_proj_k", "(", "x", ")", "\n", "value", "=", "self", ".", "in_proj_v", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "attention", "(", "query", ",", "key", ",", "value", ",", "mask_future_timesteps", "=", "True", ",", "use_scalar_bias", "=", "True", ")", "\n", "return", "self", ".", "ln", "(", "x", "+", "residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.Embedding": [[466, 470], ["torch.Embedding", "nn.Embedding.weight.data.normal_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding"], ["", "", "def", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.1", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.PositionalEmbedding": [[472, 476], ["fairseq.modules.LearnedPositionalEmbedding", "fairseq.modules.LearnedPositionalEmbedding.weight.data.normal_"], "function", ["None"], ["", "def", "PositionalEmbedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ",", "left_pad", ")", ":", "\n", "    ", "m", "=", "LearnedPositionalEmbedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ",", "left_pad", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.1", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.Linear": [[478, 484], ["torch.Linear", "nn.Linear.weight.data.normal_", "nn.Linear.bias.data.zero_", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["", "def", "Linear", "(", "in_features", ",", "out_features", ",", "dropout", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Linear layer (input: N x T x C)\"\"\"", "\n", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "math", ".", "sqrt", "(", "(", "1", "-", "dropout", ")", "/", "in_features", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.LinearizedConv1d": [[486, 493], ["fairseq.modules.LinearizedConvolution", "math.sqrt", "fairseq.modules.LinearizedConvolution.weight.data.normal_", "fairseq.modules.LinearizedConvolution.bias.data.zero_"], "function", ["None"], ["", "def", "LinearizedConv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "dropout", "=", "0.", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Conv1d layer optimized for decoding\"\"\"", "\n", "m", "=", "LinearizedConvolution", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "(", "4", "*", "(", "1.0", "-", "dropout", ")", ")", "/", "(", "m", ".", "kernel_size", "[", "0", "]", "*", "in_channels", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.ConvTBC": [[495, 503], ["fconv_self_att.ConvTBC", "math.sqrt", "ConvTBC.weight.data.normal_", "ConvTBC.bias.data.zero_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.ConvTBC"], ["", "def", "ConvTBC", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "dropout", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Conv1d layer\"\"\"", "\n", "from", "fairseq", ".", "modules", "import", "ConvTBC", "\n", "m", "=", "ConvTBC", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "(", "4", "*", "(", "1.0", "-", "dropout", ")", ")", "/", "(", "m", ".", "kernel_size", "[", "0", "]", "*", "in_channels", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.base_architecture": [[505, 524], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "'fconv_self_att'", ",", "'fconv_self_att'", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "'[(512, 3)] * 3'", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "'[(512, 3)] * 8'", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "256", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'True'", ")", "\n", "args", ".", "self_attention", "=", "getattr", "(", "args", ",", "'self_attention'", ",", "'False'", ")", "\n", "args", ".", "encoder_attention", "=", "getattr", "(", "args", ",", "'encoder_attention'", ",", "'False'", ")", "\n", "args", ".", "multihead_attention_nheads", "=", "getattr", "(", "args", ",", "'multihead_attention_nheads'", ",", "1", ")", "\n", "args", ".", "multihead_self_attention_nheads", "=", "getattr", "(", "args", ",", "'multihead_self_attention_nheads'", ",", "1", ")", "\n", "args", ".", "encoder_attention_nheads", "=", "getattr", "(", "args", ",", "'encoder_attention_nheads'", ",", "1", ")", "\n", "args", ".", "project_input", "=", "getattr", "(", "args", ",", "'project_input'", ",", "'False'", ")", "\n", "args", ".", "gated_attention", "=", "getattr", "(", "args", ",", "'gated_attention'", ",", "'False'", ")", "\n", "args", ".", "downsample", "=", "getattr", "(", "args", ",", "'downsample'", ",", "'False'", ")", "\n", "args", ".", "pretrained_checkpoint", "=", "getattr", "(", "args", ",", "'pretrained_checkpoint'", ",", "''", ")", "\n", "args", ".", "pretrained", "=", "getattr", "(", "args", ",", "'pretrained'", ",", "'False'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv_self_att.fconv_self_att_wp": [[525, 538], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "fconv_self_att.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'fconv_self_att'", ",", "'fconv_self_att_wp'", ")", "\n", "def", "fconv_self_att_wp", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "'[(128, 3)] * 2 + [(512,3)] * 1'", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "'[(512, 4)] * 4 + [(768, 4)] * 2 + [(1024, 4)] * 1'", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "256", ")", "\n", "args", ".", "self_attention", "=", "getattr", "(", "args", ",", "'self_attention'", ",", "'True'", ")", "\n", "args", ".", "multihead_self_attention_nheads", "=", "getattr", "(", "args", ",", "'multihead_self_attention_nheads'", ",", "4", ")", "\n", "args", ".", "project_input", "=", "getattr", "(", "args", ",", "'project_input'", ",", "'True'", ")", "\n", "args", ".", "gated_attention", "=", "getattr", "(", "args", ",", "'gated_attention'", ",", "'True'", ")", "\n", "args", ".", "downsample", "=", "getattr", "(", "args", ",", "'downsample'", ",", "'True'", ")", "\n", "base_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_encoder.FairseqEncoder.__init__": [[14, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_encoder.FairseqEncoder.forward": [[18, 27], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            src_tokens (LongTensor): tokens in the source language of shape\n                `(batch, src_len)`\n            src_lengths (LongTensor): lengths of each source sentence of shape\n                `(batch)`\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_encoder.FairseqEncoder.reorder_encoder_out": [[28, 40], ["None"], "methods", ["None"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"\n        Reorder encoder output according to `new_order`.\n\n        Args:\n            encoder_out: output from the ``forward()`` method\n            new_order (LongTensor): desired order\n\n        Returns:\n            `encoder_out` rearranged according to `new_order`\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_encoder.FairseqEncoder.max_positions": [[41, 44], ["None"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "return", "1e6", "# an arbitrary large number", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_encoder.FairseqEncoder.upgrade_state_dict": [[45, 48], ["None"], "methods", ["None"], ["", "def", "upgrade_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Upgrade a (possibly old) state dict for new versions of fairseq.\"\"\"", "\n", "return", "state_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_incremental_decoder.FairseqIncrementalDecoder.__init__": [[30, 32], ["FairseqDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_incremental_decoder.FairseqIncrementalDecoder.forward": [[33, 51], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", ",", "incremental_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prev_output_tokens (LongTensor): previous decoder outputs of shape\n                `(batch, tgt_len)`, for input feeding/teacher forcing\n            encoder_out (Tensor, optional): output from the encoder, used for\n                encoder-side attention\n            incremental_state (dict): dictionary used for storing state during\n                :ref:`Incremental decoding`\n\n        Returns:\n            tuple:\n                - the last decoder layer's output of shape `(batch, tgt_len,\n                  vocab)`\n                - the last decoder layer's attention weights of shape `(batch,\n                  tgt_len, src_len)`\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_incremental_decoder.FairseqIncrementalDecoder.reorder_incremental_state": [[52, 66], ["fairseq_incremental_decoder.FairseqIncrementalDecoder.apply", "hasattr", "module.reorder_incremental_state"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder.reorder_incremental_state"], ["", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"Reorder incremental state.\n\n        This should be called when the order of the input has changed from the\n        previous time step. A typical use case is beam search, where the input\n        order changes between time steps based on the selection of beams.\n        \"\"\"", "\n", "def", "apply_reorder_incremental_state", "(", "module", ")", ":", "\n", "            ", "if", "module", "!=", "self", "and", "hasattr", "(", "module", ",", "'reorder_incremental_state'", ")", ":", "\n", "                ", "module", ".", "reorder_incremental_state", "(", "\n", "incremental_state", ",", "\n", "new_order", ",", "\n", ")", "\n", "", "", "self", ".", "apply", "(", "apply_reorder_incremental_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_incremental_decoder.FairseqIncrementalDecoder.set_beam_size": [[67, 75], ["getattr", "fairseq_incremental_decoder.FairseqIncrementalDecoder.apply", "hasattr", "module.set_beam_size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_incremental_decoder.FairseqIncrementalDecoder.set_beam_size"], ["", "def", "set_beam_size", "(", "self", ",", "beam_size", ")", ":", "\n", "        ", "\"\"\"Sets the beam size in the decoder and all children.\"\"\"", "\n", "if", "getattr", "(", "self", ",", "'_beam_size'", ",", "-", "1", ")", "!=", "beam_size", ":", "\n", "            ", "def", "apply_set_beam_size", "(", "module", ")", ":", "\n", "                ", "if", "module", "!=", "self", "and", "hasattr", "(", "module", ",", "'set_beam_size'", ")", ":", "\n", "                    ", "module", ".", "set_beam_size", "(", "beam_size", ")", "\n", "", "", "self", ".", "apply", "(", "apply_set_beam_size", ")", "\n", "self", ".", "_beam_size", "=", "beam_size", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerModel.__init__": [[60, 62], ["FairseqModel.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerModel.add_args": [[63, 121], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "VALID_INPUT_LAYER.keys", "fairseq.modules.Reduction.VALID_REDUCTION.keys"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--attention-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for attention weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--relu-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability after ReLU in FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained encoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-ffn-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension for FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num encoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-attention-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num encoder attention heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-normalize-before'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply layernorm before each encoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-learned-pos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use learned positional embeddings in the encoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained decoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-ffn-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension for FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder attention heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-learned-pos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use learned positional embeddings in the decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-normalize-before'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply layernorm before each decoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoder-input-output-embed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoder input and output embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-all-embeddings'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share encoder, decoder and output embeddings'", "\n", "' (requires shared dictionary and embed dim)'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", ",", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'sets adaptive softmax dropout for the tail projections'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--decoder-input-layer'", ",", "choices", "=", "VALID_INPUT_LAYER", ".", "keys", "(", ")", ",", "\n", "help", "=", "'the method chosen to produce the 2D input'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-output-layer'", ",", "choices", "=", "Reduction", ".", "VALID_REDUCTION", ".", "keys", "(", ")", ",", "\n", "help", "=", "'the method chosen to produce the 1D output'", ")", "\n", "parser", ".", "add_argument", "(", "'--src-tgt-embed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use source and target embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer-chain'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'specify the instruction of layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--memory-efficient'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'checkpoint all attentions, ~25% slower, ~38% less memory'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerModel.build_model": [[122, 171], ["reformer.base_architecture", "reformer.ReformerEncoder", "reformer.ReformerDecoder", "cls.model_parallelism", "hasattr", "hasattr", "len", "dictionary.pad", "reformer.Embedding", "reformer.ReformerModel.build_model.build_embedding"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerModel.model_parallelism", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "\n", "# make sure all arguments are present in older models", "\n", "base_architecture", "(", "args", ")", "\n", "\n", "if", "not", "hasattr", "(", "args", ",", "'max_source_positions'", ")", ":", "\n", "            ", "args", ".", "max_source_positions", "=", "1024", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'max_target_positions'", ")", ":", "\n", "            ", "args", ".", "max_target_positions", "=", "1024", "\n", "\n", "", "src_dict", ",", "tgt_dict", "=", "task", ".", "source_dictionary", ",", "task", ".", "target_dictionary", "\n", "\n", "def", "build_embedding", "(", "dictionary", ",", "embed_dim", ",", "path", "=", "None", ")", ":", "\n", "            ", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "emb", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "# if provided, load from preloaded dictionaries", "\n", "if", "path", ":", "\n", "                ", "embed_dict", "=", "utils", ".", "parse_embedding", "(", "path", ")", "\n", "utils", ".", "load_embedding", "(", "embed_dict", ",", "dictionary", ",", "emb", ")", "\n", "", "return", "emb", "\n", "\n", "", "if", "args", ".", "share_all_embeddings", ":", "\n", "            ", "if", "src_dict", "!=", "tgt_dict", ":", "\n", "                ", "raise", "RuntimeError", "(", "'--share-all-embeddings requires a joined dictionary'", ")", "\n", "", "if", "args", ".", "encoder_embed_dim", "!=", "args", ".", "decoder_embed_dim", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'--share-all-embeddings requires --encoder-embed-dim to match --decoder-embed-dim'", ")", "\n", "", "if", "args", ".", "decoder_embed_path", "and", "(", "\n", "args", ".", "decoder_embed_path", "!=", "args", ".", "encoder_embed_path", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "'--share-all-embeddings not compatible with --decoder-embed-path'", ")", "\n", "", "encoder_embed_tokens", "=", "build_embedding", "(", "\n", "src_dict", ",", "args", ".", "encoder_embed_dim", ",", "args", ".", "encoder_embed_path", "\n", ")", "\n", "decoder_embed_tokens", "=", "encoder_embed_tokens", "\n", "args", ".", "share_decoder_input_output_embed", "=", "True", "\n", "", "else", ":", "\n", "            ", "encoder_embed_tokens", "=", "build_embedding", "(", "\n", "src_dict", ",", "args", ".", "encoder_embed_dim", ",", "args", ".", "encoder_embed_path", "\n", ")", "\n", "decoder_embed_tokens", "=", "build_embedding", "(", "\n", "tgt_dict", ",", "args", ".", "decoder_embed_dim", ",", "args", ".", "decoder_embed_path", "\n", ")", "\n", "\n", "", "encoder", "=", "ReformerEncoder", "(", "args", ",", "src_dict", ",", "encoder_embed_tokens", ")", "\n", "decoder", "=", "ReformerDecoder", "(", "args", ",", "tgt_dict", ",", "decoder_embed_tokens", ")", "\n", "return", "cls", ".", "model_parallelism", "(", "ReformerModel", "(", "encoder", ",", "decoder", ")", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerModel.model_parallelism": [[172, 216], ["model.cuda", "math.ceil", "model.named_modules", "isinstance", "isinstance", "max", "max", "print", "enumerate", "print", "module.cuda", "names.append", "devices.append", "module.cuda", "names.append", "devices.append", "module.cuda", "zip", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "len", "len", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], ["", "@", "staticmethod", "\n", "def", "model_parallelism", "(", "model", ",", "args", ")", ":", "\n", "        ", "if", "args", ".", "model_parallelism_world_size", "==", "1", ":", "\n", "            ", "return", "model", "\n", "", "else", ":", "\n", "# we first put all parameters and buffers to a single GPU", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "nsublayers", "=", "INCREMENTAL_MODULE_INSTANCE_ID", "[", "ReformerDecoderSubLayer", ".", "__name__", "]", "\n", "# starting from N implies making extra N sublayers space in the first device (embeddings, softmax, encoder)", "\n", "sublayer_id", "=", "args", ".", "pseudo_sublayers", "\n", "sublayers_per_device", "=", "math", ".", "ceil", "(", "(", "nsublayers", "+", "sublayer_id", ")", "/", "args", ".", "model_parallelism_world_size", ")", "\n", "names", ",", "devices", "=", "[", "'module name'", "]", ",", "[", "'device'", "]", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", "prefix", "=", "'reformer'", ")", ":", "\n", "# we only distribute sublayers to different GPU", "\n", "                ", "if", "isinstance", "(", "module", ",", "ReformerDecoderSubLayer", ")", ":", "\n", "                    ", "MODULE_DEVICE", "[", "module", ".", "_id", "]", "=", "(", "sublayer_id", "//", "sublayers_per_device", ")", "\n", "assert", "MODULE_DEVICE", "[", "module", ".", "_id", "]", "<", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "f'try to assign a sublayer {name} to a invalid device {MODULE_DEVICE[module._id]}\\n'", "f'Fix bugs in the sublayer allocation strategy!!!'", "\n", "module", ".", "cuda", "(", "MODULE_DEVICE", "[", "module", ".", "_id", "]", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "devices", ".", "append", "(", "f'cuda:{MODULE_DEVICE[module._id]}'", ")", "\n", "sublayer_id", "+=", "1", "\n", "# we push the dimension reduction to the last GPU (with potentially larger space)", "\n", "# to avoid communication overhead (as well as the last layer norm)", "\n", "", "if", "isinstance", "(", "module", ",", "ReformerOutputLayer", ")", ":", "\n", "                    ", "module", ".", "cuda", "(", "0", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "devices", ".", "append", "(", "f'cuda:{0}'", ")", "\n", "", "if", "'.decoder.layer_norm'", "in", "name", ":", "\n", "                    ", "module", ".", "cuda", "(", "0", ")", "\n", "", "", "if", "args", ".", "debug", ":", "\n", "                ", "name_width", "=", "max", "(", "[", "len", "(", "e", ")", "for", "e", "in", "names", "]", ")", "\n", "device_width", "=", "max", "(", "[", "len", "(", "e", ")", "for", "e", "in", "devices", "]", ")", "\n", "separate_line", "=", "'|'", "+", "'-'", "*", "(", "name_width", "+", "2", ")", "+", "'|'", "+", "'-'", "*", "(", "device_width", "+", "2", ")", "+", "'|'", "\n", "print", "(", "separate_line", ")", "\n", "for", "i", ",", "(", "name", ",", "device", ")", "in", "enumerate", "(", "zip", "(", "names", ",", "devices", ")", ")", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "print", "(", "f\"| {name: ^{name_width}} | {device: ^{device_width}} |\"", ")", "\n", "print", "(", "separate_line", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "f\"| {name: <{name_width}} | {device: <{device_width}} |\"", ")", "\n", "", "", "print", "(", "separate_line", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerEncoder.__init__": [[231, 261], ["FairseqEncoder.__init__", "math.sqrt", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "reformer.ReformerEncoder.layers.extend", "reformer.ReformerEncoder.register_buffer", "reformer.PositionalEmbedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "reformer.LayerNorm", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "fairseq.models.transformer.TransformerEncoderLayer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.PositionalEmbedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm"], ["def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ",", "left_pad", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "\n", "embed_dim", "=", "embed_tokens", ".", "embedding_dim", "\n", "self", ".", "padding_idx", "=", "embed_tokens", ".", "padding_idx", "\n", "self", ".", "max_source_positions", "=", "args", ".", "max_source_positions", "\n", "\n", "self", ".", "embed_tokens", "=", "embed_tokens", "\n", "self", ".", "embed_scale", "=", "math", ".", "sqrt", "(", "embed_dim", ")", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "args", ".", "max_source_positions", ",", "embed_dim", ",", "self", ".", "padding_idx", ",", "\n", "left_pad", "=", "left_pad", ",", "\n", "learned", "=", "args", ".", "encoder_learned_pos", ",", "\n", ")", "if", "not", "args", ".", "no_token_positional_embeddings", "else", "None", "\n", "\n", "self", ".", "src_embed", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "normal_", "(", "\n", "torch", ".", "Tensor", "(", "embed_dim", ")", ",", "\n", "mean", "=", "0", ",", "std", "=", "embed_dim", "**", "-", "0.5", "\n", ")", ")", "if", "args", ".", "src_tgt_embed", "else", "None", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "layers", ".", "extend", "(", "[", "\n", "TransformerEncoderLayer", "(", "args", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "encoder_layers", ")", "\n", "]", ")", "\n", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "normalize", "=", "args", ".", "encoder_normalize_before", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "self", ".", "layer_norm", "=", "LayerNorm", "(", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerEncoder.forward": [[262, 303], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "reformer.ReformerEncoder.transpose", "src_tokens.eq", "reformer.ReformerEncoder.embed_tokens", "reformer.ReformerEncoder.embed_positions", "src_tokens.eq.any", "layer", "reformer.ReformerEncoder.layer_norm", "reformer.ReformerEncoder.src_embed.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            src_tokens (LongTensor): tokens in the source language of shape\n                `(batch, src_len)`\n            src_lengths (torch.LongTensor): lengths of each source sentence of\n                shape `(batch)`\n\n        Returns:\n            dict:\n                - **encoder_out** (Tensor): the last encoder layer's output of\n                  shape `(src_len, batch, embed_dim)`\n                - **encoder_padding_mask** (ByteTensor): the positions of\n                  padding elements of shape `(batch, src_len)`\n        \"\"\"", "\n", "# embed tokens and positions", "\n", "x", "=", "self", ".", "embed_scale", "*", "self", ".", "embed_tokens", "(", "src_tokens", ")", "\n", "if", "self", ".", "embed_positions", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "embed_positions", "(", "src_tokens", ")", "\n", "", "if", "self", ".", "src_embed", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "src_embed", ".", "unsqueeze", "(", "0", ")", "*", "self", ".", "embed_scale", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# compute padding mask", "\n", "encoder_padding_mask", "=", "src_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", "\n", "if", "not", "encoder_padding_mask", ".", "any", "(", ")", ":", "\n", "            ", "encoder_padding_mask", "=", "None", "\n", "\n", "# encoder layers", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "encoder_padding_mask", ")", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "", "return", "{", "\n", "'encoder_out'", ":", "x", ",", "# T x B x C", "\n", "'encoder_padding_mask'", ":", "encoder_padding_mask", ",", "# B x T", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerEncoder.reorder_encoder_out": [[305, 323], ["encoder_out[].index_select", "encoder_out[].index_select"], "methods", ["None"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"\n        Reorder encoder output according to *new_order*.\n\n        Args:\n            encoder_out: output from the ``forward()`` method\n            new_order (LongTensor): desired order\n\n        Returns:\n            *encoder_out* rearranged according to *new_order*\n        \"\"\"", "\n", "if", "encoder_out", "[", "'encoder_out'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_out'", "]", "=", "encoder_out", "[", "'encoder_out'", "]", ".", "index_select", "(", "1", ",", "new_order", ")", "\n", "", "if", "encoder_out", "[", "'encoder_padding_mask'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_padding_mask'", "]", "=", "encoder_out", "[", "'encoder_padding_mask'", "]", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerEncoder.max_positions": [[324, 329], ["min", "reformer.ReformerEncoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "if", "self", ".", "embed_positions", "is", "None", ":", "\n", "            ", "return", "self", ".", "max_source_positions", "\n", "", "return", "min", "(", "self", ".", "max_source_positions", ",", "self", ".", "embed_positions", ".", "max_positions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoder.__init__": [[344, 405], ["FairseqIncrementalDecoder.__init__", "math.sqrt", "reformer.ReformerInputLayer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "reformer.ReformerDecoder.layers.extend", "reformer.ReformerDecoder.register_buffer", "reformer.ReformerOutputLayer", "reformer.Linear", "reformer.PositionalEmbedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "reformer.Linear", "fairseq.modules.AdaptiveSoftmax", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "reformer.LayerNorm", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "reformer.ReformerDecoderLayer", "len", "fairseq.options.eval_str_list", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.PositionalEmbedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.eval_str_list"], ["def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ",", "left_pad", "=", "False", ",", "final_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "share_input_output_embed", "=", "args", ".", "share_decoder_input_output_embed", "\n", "\n", "input_embed_dim", "=", "embed_tokens", ".", "embedding_dim", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", "\n", "output_embed_dim", "=", "args", ".", "decoder_output_dim", "\n", "\n", "model_dim", "=", "args", ".", "decoder_model_dim", "\n", "\n", "padding_idx", "=", "embed_tokens", ".", "padding_idx", "\n", "self", ".", "max_target_positions", "=", "args", ".", "max_target_positions", "\n", "\n", "self", ".", "embed_tokens", "=", "embed_tokens", "\n", "self", ".", "embed_scale", "=", "math", ".", "sqrt", "(", "embed_dim", ")", "# todo: try with input_embed_dim", "\n", "\n", "self", ".", "project_in_dim", "=", "Linear", "(", "input_embed_dim", ",", "embed_dim", ",", "bias", "=", "False", ",", "\n", "uniform", "=", "False", ")", "if", "embed_dim", "!=", "input_embed_dim", "else", "None", "\n", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "args", ".", "max_target_positions", ",", "embed_dim", ",", "padding_idx", ",", "\n", "left_pad", "=", "left_pad", ",", "\n", "learned", "=", "args", ".", "decoder_learned_pos", ",", "\n", ")", "if", "not", "args", ".", "no_token_positional_embeddings", "else", "None", "\n", "\n", "self", ".", "tgt_embed", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "normal_", "(", "\n", "torch", ".", "Tensor", "(", "embed_dim", ")", ",", "\n", "mean", "=", "0", ",", "std", "=", "embed_dim", "**", "-", "0.5", "\n", ")", ")", "if", "args", ".", "src_tgt_embed", "else", "None", "\n", "\n", "self", ".", "input_layer", "=", "ReformerInputLayer", "(", "args", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "layers", ".", "extend", "(", "[", "\n", "ReformerDecoderLayer", "(", "args", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "decoder_layers", ")", "\n", "]", ")", "\n", "\n", "self", ".", "adaptive_softmax", "=", "None", "\n", "\n", "self", ".", "project_out_dim", "=", "Linear", "(", "model_dim", ",", "output_embed_dim", ",", "\n", "bias", "=", "False", ",", "uniform", "=", "False", ")", "if", "model_dim", "!=", "output_embed_dim", "else", "None", "\n", "\n", "if", "args", ".", "adaptive_softmax_cutoff", "is", "not", "None", ":", "\n", "            ", "self", ".", "adaptive_softmax", "=", "AdaptiveSoftmax", "(", "\n", "len", "(", "dictionary", ")", ",", "output_embed_dim", ",", "\n", "options", ".", "eval_str_list", "(", "args", ".", "adaptive_softmax_cutoff", ",", "type", "=", "int", ")", ",", "\n", "dropout", "=", "args", ".", "adaptive_softmax_dropout", ",", "\n", ")", "\n", "", "elif", "not", "self", ".", "share_input_output_embed", ":", "\n", "            ", "self", ".", "embed_out", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "dictionary", ")", ",", "output_embed_dim", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_out", ",", "mean", "=", "0", ",", "std", "=", "output_embed_dim", "**", "-", "0.5", ")", "\n", "", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "normalize", "=", "args", ".", "decoder_normalize_before", "and", "final_norm", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "self", ".", "layer_norm", "=", "LayerNorm", "(", "model_dim", ")", "\n", "\n", "# output_layer function to compress model output before softmax", "\n", "# Target x Source x Batch x Channel -> T x B x C", "\n", "", "self", ".", "output_layer", "=", "ReformerOutputLayer", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoder.forward": [[406, 491], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.linear.transpose", "reformer.ReformerDecoder.input_layer", "torch.linear.to", "reformer.ReformerDecoder.output_layer", "torch.linear.transpose", "reformer.ReformerDecoder.embed_positions", "reformer.ReformerDecoder.embed_tokens", "reformer.ReformerDecoder.project_in_dim", "layer", "inner_states.append", "reformer.ReformerDecoder.layer_norm", "reformer.ReformerDecoder.project_out_dim", "reformer.ReformerDecoder.tgt_embed.unsqueeze", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "reformer.ReformerDecoder.buffered_future_mask"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.buffered_future_mask"], ["", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", "=", "None", ",", "incremental_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prev_output_tokens (LongTensor): previous decoder outputs of shape\n                `(batch, tgt_len)`, for input feeding/teacher forcing\n            encoder_out (Tensor, optional): output from the encoder, used for\n                encoder-side attention\n            incremental_state (dict): dictionary used for storing state during\n                :ref:`Incremental decoding`\n\n        Returns:\n            tuple:\n                - the last decoder layer's output of shape `(batch, tgt_len,\n                  vocab)`\n                - the last decoder layer's attention weights of shape `(batch,\n                  tgt_len, src_len)`\n        \"\"\"", "\n", "# embed positions", "\n", "positions", "=", "self", ".", "embed_positions", "(", "\n", "prev_output_tokens", ",", "\n", "incremental_state", "=", "incremental_state", ",", "\n", ")", "if", "self", ".", "embed_positions", "is", "not", "None", "else", "None", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "prev_output_tokens", "=", "prev_output_tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "if", "positions", "is", "not", "None", ":", "\n", "                ", "positions", "=", "positions", "[", ":", ",", "-", "1", ":", "]", "\n", "\n", "# embed tokens and positions", "\n", "", "", "x", "=", "self", ".", "embed_scale", "*", "self", ".", "embed_tokens", "(", "prev_output_tokens", ")", "\n", "\n", "if", "self", ".", "project_in_dim", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "project_in_dim", "(", "x", ")", "\n", "\n", "", "if", "positions", "is", "not", "None", ":", "\n", "            ", "x", "+=", "positions", "\n", "", "if", "self", ".", "tgt_embed", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "tgt_embed", ".", "unsqueeze", "(", "0", ")", "*", "self", ".", "embed_scale", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "attn", "=", "None", "\n", "\n", "src_input", ",", "tgt_input", "=", "encoder_out", "[", "'encoder_out'", "]", ",", "x", "\n", "# form a source-target 2D representation", "\n", "# T x B x C -> T x S x B x C", "\n", "x", "=", "self", ".", "input_layer", "(", "src_input", ",", "tgt_input", ")", "\n", "\n", "inner_states", "=", "[", "x", "]", "\n", "\n", "# decoder layers", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", ",", "attn", "=", "layer", "(", "\n", "x", ",", "\n", "encoder_out", "[", "'encoder_padding_mask'", "]", "if", "encoder_out", "is", "not", "None", "else", "None", ",", "\n", "incremental_state", ",", "\n", "self_attn_mask", "=", "self", ".", "buffered_future_mask", "(", "x", ")", "if", "incremental_state", "is", "None", "else", "None", ",", "\n", ")", "\n", "inner_states", ".", "append", "(", "x", ")", "\n", "\n", "# push the result to where softmax/embeddings hosted", "\n", "", "x", "=", "x", ".", "to", "(", "self", ".", "embed_tokens", ".", "weight", ".", "device", ")", "\n", "\n", "# T x S x B x C -> T x B x C", "\n", "# TODO: output_layer after project_out_dim", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ",", "encoder_out", "[", "'encoder_padding_mask'", "]", "if", "encoder_out", "is", "not", "None", "else", "None", ")", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "project_out_dim", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "project_out_dim", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "adaptive_softmax", "is", "None", ":", "\n", "# project back to size of vocabulary", "\n", "            ", "if", "self", ".", "share_input_output_embed", ":", "\n", "                ", "x", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "embed_tokens", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "embed_out", ")", "\n", "\n", "", "", "return", "x", ",", "{", "'attn'", ":", "attn", ",", "'inner_states'", ":", "inner_states", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoder.max_positions": [[492, 497], ["min", "reformer.ReformerDecoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum output length supported by the decoder.\"\"\"", "\n", "if", "self", ".", "embed_positions", "is", "None", ":", "\n", "            ", "return", "self", ".", "max_target_positions", "\n", "", "return", "min", "(", "self", ".", "max_target_positions", ",", "self", ".", "embed_positions", ".", "max_positions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoder.buffered_future_mask": [[498, 505], ["tensor.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "reformer.ReformerDecoder._future_mask.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "hasattr", "fairseq.utils.fill_with_neg_inf", "fairseq.utils.fill_with_neg_inf", "tensor.new", "reformer.ReformerDecoder._future_mask.resize_"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.fill_with_neg_inf", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.fill_with_neg_inf"], ["", "def", "buffered_future_mask", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "dim", "=", "tensor", ".", "size", "(", "0", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "'_future_mask'", ")", "or", "self", ".", "_future_mask", "is", "None", "or", "self", ".", "_future_mask", ".", "device", "!=", "tensor", ".", "device", ":", "\n", "            ", "self", ".", "_future_mask", "=", "torch", ".", "triu", "(", "utils", ".", "fill_with_neg_inf", "(", "tensor", ".", "new", "(", "dim", ",", "dim", ")", ")", ",", "1", ")", "\n", "", "if", "self", ".", "_future_mask", ".", "size", "(", "0", ")", "<", "dim", ":", "\n", "            ", "self", ".", "_future_mask", "=", "torch", ".", "triu", "(", "utils", ".", "fill_with_neg_inf", "(", "self", ".", "_future_mask", ".", "resize_", "(", "dim", ",", "dim", ")", ")", ",", "1", ")", "\n", "", "return", "self", ".", "_future_mask", "[", ":", "dim", ",", ":", "dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerInputLayer.__init__": [[512, 517], ["torch.Module.__init__", "args.arch.startswith"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# TODO: more ways to form 2D representation", "\n", "self", ".", "input_layer", "=", "args", ".", "decoder_input_layer", "\n", "self", ".", "scaling", "=", "0.5", "if", "args", ".", "arch", ".", "startswith", "(", "'reformer_v1'", ")", "else", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerInputLayer.extra_repr": [[518, 520], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'input_layer={}, scaling={}'", ".", "format", "(", "self", ".", "input_layer", ",", "self", ".", "scaling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerInputLayer.forward": [[521, 535], ["src_embed.size", "tgt_embed.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "src_embed.unsqueeze().repeat", "tgt_embed.unsqueeze().repeat", "src_embed.size", "tgt_embed.size", "src_embed.unsqueeze().repeat", "src_embed.size", "tgt_embed.size", "tgt_embed.unsqueeze().repeat", "src_embed.unsqueeze", "tgt_embed.unsqueeze", "src_embed.unsqueeze", "tgt_embed.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "forward", "(", "self", ",", "src_embed", ",", "tgt_embed", ")", ":", "\n", "        ", "x", "=", "None", "\n", "src_len", "=", "src_embed", ".", "size", "(", "0", ")", "\n", "tgt_len", "=", "tgt_embed", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "input_layer", "==", "'cat'", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "\n", "(", "src_embed", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "tgt_len", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "tgt_embed", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "src_len", ",", "1", ",", "1", ")", ")", ",", "-", "1", ")", "\n", "", "elif", "self", ".", "input_layer", "==", "'add'", ":", "\n", "            ", "assert", "src_embed", ".", "size", "(", "-", "1", ")", "==", "tgt_embed", ".", "size", "(", "-", "1", ")", ",", "f'source embedding dim ({src_embed.size(-1)}) must match target embedding dim({tgt_embed.size(-1)}) '", "f'when using input layer {self.input_layer}'", "\n", "x", "=", "src_embed", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "tgt_len", ",", "1", ",", "1", ",", "1", ")", "+", "tgt_embed", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "src_len", ",", "1", ",", "1", ")", "*", "self", ".", "scaling", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerOutputLayer.__init__": [[542, 545], ["torch.Module.__init__", "fairseq.modules.Reduction"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "Reduction", "(", "args", ".", "decoder_output_layer", ",", "args", ".", "decoder_normalize_before", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerOutputLayer.forward": [[546, 553], ["reformer.ReformerOutputLayer.reduction", "encoder_padding_mask.to.to.to"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "encoder_padding_mask", ")", ":", "\n", "# since reduction happens after layer_norm, additional layer_norm might be required after the", "\n", "# reduction, especially for those reduction variants that does not preserve output scale", "\n", "        ", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "            ", "encoder_padding_mask", "=", "encoder_padding_mask", ".", "to", "(", "x", ".", "device", ")", "\n", "", "x", "=", "self", ".", "reduction", "(", "x", ",", "encoder_padding_mask", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoderLayer.__init__": [[578, 586], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "reformer.ReformerDecoderLayer.parse", "reformer.ReformerDecoderLayer.sublayers.append", "reformer.ReformerDecoderSubLayer"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoderLayer.parse"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_chain", "=", "args", ".", "layer_chain", "\n", "self", ".", "sublayers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "# sublayer declaration order must match their computation order, which", "\n", "# helps to avoid potential extra communication cost due to auto-register", "\n", "for", "op", ",", "parsed_args", "in", "self", ".", "parse", "(", "self", ".", "layer_chain", ")", ":", "\n", "            ", "self", ".", "sublayers", ".", "append", "(", "ReformerDecoderSubLayer", "(", "args", ",", "op", ",", "*", "parsed_args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoderLayer.parse": [[587, 604], ["hasattr", "op.split", "ops_with_args.append", "layer_chain.split", "len", "op_with_args[].split", "args.append"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "parse", "(", "layer_chain", ":", "str", ")", "->", "list", ":", "\n", "        ", "if", "not", "hasattr", "(", "ReformerDecoderLayer", ".", "parse", ",", "'str2arg'", ")", ":", "\n", "            ", "ReformerDecoderLayer", ".", "parse", ".", "str2arg", "=", "{", "'enc'", ":", "False", ",", "'dec'", ":", "True", "}", "\n", "", "ops", "=", "[", "op", ".", "split", "(", "':'", ")", "for", "op", "in", "layer_chain", ".", "split", "(", "'+'", ")", "]", "\n", "ops_with_args", "=", "[", "]", "\n", "for", "op_with_args", "in", "ops", ":", "\n", "            ", "op", "=", "op_with_args", "[", "0", "]", "\n", "args", "=", "[", "]", "\n", "if", "len", "(", "op_with_args", ")", "==", "2", ":", "\n", "                ", "for", "arg", "in", "op_with_args", "[", "1", "]", ".", "split", "(", "','", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "args", ".", "append", "(", "ReformerDecoderLayer", ".", "parse", ".", "str2arg", "[", "arg", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "                        ", "continue", "\n", "", "", "", "ops_with_args", ".", "append", "(", "[", "op", ",", "args", "]", ")", "\n", "", "return", "ops_with_args", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoderLayer.forward": [[605, 621], ["sublayer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "encoder_padding_mask", ",", "incremental_state", ",", "\n", "self_attn_mask", "=", "None", ",", "self_attn_padding_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (Tensor): input to the layer of shape `(seq_len, batch, embed_dim)`\n            encoder_padding_mask (ByteTensor): binary ByteTensor of shape\n                `(batch, src_len)` where padding elements are indicated by ``1``.\n\n        Returns:\n            encoded output of shape `(batch, src_len, embed_dim)`\n        \"\"\"", "\n", "attn", "=", "None", "\n", "for", "sublayer", "in", "self", ".", "sublayers", ":", "\n", "            ", "x", ",", "attn", "=", "sublayer", "(", "x", ",", "encoder_padding_mask", ",", "incremental_state", ",", "\n", "self_attn_mask", ",", "self_attn_padding_mask", ")", "\n", "", "return", "x", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoderSubLayer.__init__": [[662, 677], ["torch.Module.__init__", "reformer.LayerNorm", "VALID_SUBLAYER.keys"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm"], ["@", "register_module", "\n", "def", "__init__", "(", "self", ",", "args", ",", "layer_type", ",", "decoder_attn", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder_attn", "=", "decoder_attn", "\n", "assert", "layer_type", "in", "VALID_SUBLAYER", ".", "keys", "(", ")", "\n", "self", ".", "layer_type", "=", "layer_type", "\n", "self", ".", "embed_dim", "=", "args", ".", "decoder_model_dim", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "relu_dropout", "=", "args", ".", "relu_dropout", "\n", "self", ".", "normalize_before", "=", "args", ".", "decoder_normalize_before", "\n", "\n", "self", ".", "customize_forward", "=", "VALID_SUBLAYER", "[", "self", ".", "layer_type", "]", "(", "self", ",", "args", ")", "\n", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ")", "\n", "self", ".", "need_attn", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoderSubLayer.extra_repr": [[678, 680], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'layer_type={}, normalize_before={},'", ".", "format", "(", "self", ".", "layer_type", ",", "self", ".", "normalize_before", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoderSubLayer.forward": [[681, 695], ["reformer.ReformerDecoderSubLayer.customize_forward"], "methods", ["None"], ["", "@", "fetch_input", "\n", "def", "forward", "(", "self", ",", "x", ",", "encoder_padding_mask", ",", "incremental_state", ",", "\n", "self_attn_mask", "=", "None", ",", "self_attn_padding_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (Tensor): input to the layer of shape `(seq_len, batch, embed_dim)`\n            encoder_padding_mask (ByteTensor): binary ByteTensor of shape\n                `(batch, src_len)` where padding elements are indicated by ``1``.\n\n        Returns:\n            encoded output of shape `(batch, src_len, embed_dim)`\n        \"\"\"", "\n", "return", "self", ".", "customize_forward", "(", "x", ",", "encoder_padding_mask", ",", "incremental_state", ",", "\n", "self_attn_mask", ",", "self_attn_padding_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoderSubLayer.maybe_layer_norm": [[696, 702], ["layer_norm"], "methods", ["None"], ["", "def", "maybe_layer_norm", "(", "self", ",", "layer_norm", ",", "x", ",", "before", "=", "False", ",", "after", "=", "False", ")", ":", "\n", "        ", "assert", "before", "^", "after", "\n", "if", "after", "^", "self", ".", "normalize_before", ":", "\n", "            ", "return", "layer_norm", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoderSubLayer.make_generation_fast_": [[703, 705], ["None"], "methods", ["None"], ["", "", "def", "make_generation_fast_", "(", "self", ",", "need_attn", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "need_attn", "=", "need_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoderSubLayer.ffn2d": [[706, 728], ["reformer.register_to", "reformer.Linear", "reformer.Linear", "fairseq.modules.Dropout2d", "fairseq.modules.Dropout2d", "reformer.ReformerDecoderSubLayer.maybe_layer_norm", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "reformer.ReformerDecoderSubLayer.relu_dropout2d", "reformer.ReformerDecoderSubLayer.fc2", "reformer.ReformerDecoderSubLayer.dropout2d", "reformer.ReformerDecoderSubLayer.maybe_layer_norm", "reformer.ReformerDecoderSubLayer.fc1"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.register_to", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm"], ["", "@", "register_to", "(", "'ffn2d'", ",", "VALID_SUBLAYER", ")", "\n", "def", "ffn2d", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "fc1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "args", ".", "decoder_ffn_embed_dim", ")", "\n", "self", ".", "fc2", "=", "Linear", "(", "args", ".", "decoder_ffn_embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "relu_dropout2d", "=", "Dropout2d", "(", "p", "=", "self", ".", "relu_dropout", ")", "\n", "self", ".", "dropout2d", "=", "Dropout2d", "(", "p", "=", "self", ".", "dropout", ")", "\n", "\n", "def", "forward", "(", "x", ",", "encoder_padding_mask", ",", "incremental_state", ",", "\n", "self_attn_mask", ",", "self_attn_padding_mask", ")", ":", "\n", "            ", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "layer_norm", ",", "x", ",", "before", "=", "True", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu_dropout2d", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "dropout2d", "(", "x", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "layer_norm", ",", "x", ",", "after", "=", "True", ")", "\n", "return", "x", ",", "None", "\n", "\n", "", "return", "forward", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.ReformerDecoderSubLayer.attn1d": [[729, 771], ["reformer.register_to", "fairseq.modules.SeparableAttention", "fairseq.modules.Dropout1d", "reformer.ReformerDecoderSubLayer.maybe_layer_norm", "reformer.ReformerDecoderSubLayer.dropout1d", "reformer.ReformerDecoderSubLayer.maybe_layer_norm", "reformer.ReformerDecoderSubLayer.self_attn", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "reformer.ReformerDecoderSubLayer.self_attn"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.register_to", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm"], ["", "@", "register_to", "(", "'attn1d'", ",", "VALID_SUBLAYER", ")", "\n", "def", "attn1d", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "self_attn", "=", "SeparableAttention", "(", "\n", "self", ".", "embed_dim", ",", "args", ".", "decoder_attention_heads", ",", "\n", "dropout", "=", "args", ".", "attention_dropout", ",", "\n", "tgt_attn", "=", "self", ".", "decoder_attn", ",", "\n", ")", "\n", "self", ".", "dropout1d", "=", "Dropout1d", "(", "p", "=", "self", ".", "dropout", ",", "dim", "=", "1", "if", "self", ".", "decoder_attn", "else", "0", ")", "\n", "\n", "def", "forward", "(", "x", ",", "encoder_padding_mask", ",", "incremental_state", ",", "\n", "self_attn_mask", ",", "self_attn_padding_mask", ")", ":", "\n", "            ", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "layer_norm", ",", "x", ",", "before", "=", "True", ")", "\n", "if", "not", "args", ".", "memory_efficient", ":", "\n", "                ", "x", ",", "attn", "=", "self", ".", "self_attn", "(", "\n", "query", "=", "x", ",", "\n", "key", "=", "x", ",", "\n", "value", "=", "x", ",", "\n", "key_padding_mask", "=", "self_attn_padding_mask", "if", "self", ".", "decoder_attn", "else", "encoder_padding_mask", ",", "\n", "incremental_state", "=", "incremental_state", ",", "\n", "need_weights", "=", "(", "not", "self", ".", "training", "and", "self", ".", "need_attn", ")", ",", "\n", "attn_mask", "=", "self_attn_mask", "if", "self", ".", "decoder_attn", "else", "None", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "x", ",", "attn", "=", "ckpt", ".", "checkpoint", "(", "\n", "lambda", "h", ":", "self", ".", "self_attn", "(", "\n", "query", "=", "h", ",", "\n", "key", "=", "h", ",", "\n", "value", "=", "h", ",", "\n", "key_padding_mask", "=", "self_attn_padding_mask", "if", "self", ".", "decoder_attn", "else", "encoder_padding_mask", ",", "\n", "incremental_state", "=", "incremental_state", ",", "\n", "need_weights", "=", "True", ",", "\n", "attn_mask", "=", "self_attn_mask", "if", "self", ".", "decoder_attn", "else", "None", ",", "\n", ")", ",", "\n", "x", ",", "\n", ")", "\n", "", "x", "=", "self", ".", "dropout1d", "(", "x", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "layer_norm", ",", "x", ",", "after", "=", "True", ")", "\n", "return", "x", ",", "attn", "\n", "\n", "", "return", "forward", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.register_to": [[555, 561], ["None"], "function", ["None"], ["", "", "def", "register_to", "(", "name", ":", "str", ",", "mapping", ":", "dict", ")", ":", "\n", "    ", "def", "wrapper", "(", "fn", ")", ":", "\n", "        ", "mapping", "[", "name", "]", "=", "fn", "\n", "return", "fn", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.register_module": [[626, 637], ["functools.wraps", "init_fn", "hasattr"], "function", ["None"], ["def", "register_module", "(", "init_fn", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "init_fn", ")", "\n", "def", "wrapper", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "module_name", "=", "self", ".", "__class__", ".", "__name__", "\n", "# assign a unique id to each module instance", "\n", "if", "not", "hasattr", "(", "self", ",", "'_id'", ")", ":", "\n", "            ", "INCREMENTAL_MODULE_INSTANCE_ID", "[", "module_name", "]", "+=", "1", "\n", "self", ".", "_id", "=", "INCREMENTAL_MODULE_INSTANCE_ID", "[", "module_name", "]", "\n", "", "return", "init_fn", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.fetch_input": [[639, 651], ["functools.wraps", "forward_fn", "item.cuda", "value.cuda", "kwargs.items", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda"], ["", "def", "fetch_input", "(", "forward_fn", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "forward_fn", ")", "\n", "def", "wrapper", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "args", "=", "[", "item", ".", "cuda", "(", "MODULE_DEVICE", "[", "self", ".", "_id", "]", ")", "\n", "if", "isinstance", "(", "item", ",", "torch", ".", "Tensor", ")", "and", "MODULE_DEVICE", "[", "self", ".", "_id", "]", "is", "not", "None", "else", "item", "\n", "for", "item", "in", "args", "]", "\n", "kwargs", "=", "{", "key", ":", "value", ".", "cuda", "(", "MODULE_DEVICE", "[", "self", ".", "_id", "]", ")", "\n", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", "and", "MODULE_DEVICE", "[", "self", ".", "_id", "]", "is", "not", "None", "else", "value", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", "}", "\n", "return", "forward_fn", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.Embedding": [[773, 778], ["torch.Embedding", "torch.init.normal_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding"], ["", "", "def", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "embedding_dim", "**", "-", "0.5", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.LayerNorm": [[780, 783], ["torch.LayerNorm"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm"], ["", "def", "LayerNorm", "(", "embedding_dim", ",", "affine", "=", "True", ")", ":", "\n", "    ", "m", "=", "nn", ".", "LayerNorm", "(", "embedding_dim", ",", "elementwise_affine", "=", "affine", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.Linear": [[785, 794], ["torch.Linear", "torch.init.xavier_uniform_", "torch.init.xavier_normal_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["", "def", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "uniform", "=", "True", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "if", "uniform", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "", "if", "bias", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.PositionalEmbedding": [[796, 804], ["fairseq.modules.LearnedPositionalEmbedding", "torch.init.normal_", "torch.init.constant_", "fairseq.modules.SinusoidalPositionalEmbedding"], "function", ["None"], ["", "def", "PositionalEmbedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ",", "left_pad", ",", "learned", "=", "False", ")", ":", "\n", "    ", "if", "learned", ":", "\n", "        ", "m", "=", "LearnedPositionalEmbedding", "(", "num_embeddings", "+", "padding_idx", "+", "1", ",", "embedding_dim", ",", "padding_idx", ",", "left_pad", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "embedding_dim", "**", "-", "0.5", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "m", "=", "SinusoidalPositionalEmbedding", "(", "embedding_dim", ",", "padding_idx", ",", "left_pad", ",", "num_embeddings", "+", "padding_idx", "+", "1", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.base_architecture": [[806, 843], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "'reformer'", ",", "'reformer'", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "'encoder_embed_path'", ",", "None", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "2048", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "5", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "8", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "'encoder_normalize_before'", ",", "False", ")", "\n", "args", ".", "encoder_learned_pos", "=", "getattr", "(", "args", ",", "'encoder_learned_pos'", ",", "False", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "'decoder_embed_path'", ",", "None", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "args", ".", "encoder_ffn_embed_dim", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "args", ".", "encoder_layers", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "args", ".", "encoder_attention_heads", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "'decoder_normalize_before'", ",", "args", ".", "encoder_normalize_before", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "'decoder_learned_pos'", ",", "args", ".", "encoder_learned_pos", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.", ")", "\n", "args", ".", "relu_dropout", "=", "getattr", "(", "args", ",", "'relu_dropout'", ",", "0.", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "'adaptive_softmax_dropout'", ",", "0", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "args", ",", "'share_decoder_input_output_embed'", ",", "False", ")", "\n", "args", ".", "share_all_embeddings", "=", "getattr", "(", "args", ",", "'share_all_embeddings'", ",", "False", ")", "\n", "args", ".", "no_token_positional_embeddings", "=", "getattr", "(", "args", ",", "'no_token_positional_embeddings'", ",", "False", ")", "\n", "\n", "args", ".", "decoder_input_layer", "=", "getattr", "(", "args", ",", "'decoder_input_layer'", ",", "'add'", ")", "\n", "args", ".", "decoder_output_layer", "=", "getattr", "(", "args", ",", "'decoder_output_layer'", ",", "'attn'", ")", "\n", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "'decoder_input_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "args", ".", "decoder_model_dim", "=", "getattr", "(", "args", ",", "'decoder_model_dim'", ",", "\n", "VALID_INPUT_LAYER", "[", "args", ".", "decoder_input_layer", "]", "(", "\n", "args", ".", "encoder_embed_dim", ",", "args", ".", "decoder_embed_dim", ")", ")", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "args", ",", "'decoder_output_dim'", ",", "args", ".", "decoder_model_dim", ")", "\n", "\n", "args", ".", "src_tgt_embed", "=", "getattr", "(", "args", ",", "'src_tgt_embed'", ",", "False", ")", "\n", "args", ".", "layer_chain", "=", "getattr", "(", "args", ",", "'layer_chain'", ",", "'attn1d:dec+ffn2d:dec+attn1d:enc+ffn2d:enc'", ")", "\n", "args", ".", "memory_efficient", "=", "getattr", "(", "args", ",", "'memory_efficient'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.reformer_base_iwslt_de_en": [[845, 855], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "reformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'reformer'", ",", "'reformer_base_iwslt_de_en'", ")", "\n", "def", "reformer_base_iwslt_de_en", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.3", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "0", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "7", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "1024", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "4", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "'decoder_normalize_before'", ",", "True", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.reformer_fast_iwslt_de_en": [[857, 865], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "reformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'reformer'", ",", "'reformer_fast_iwslt_de_en'", ")", "\n", "def", "reformer_fast_iwslt_de_en", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.3", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "1024", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "4", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "'encoder_normalize_before'", ",", "True", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.reformer_fast_iwslt_de_en_scaling": [[867, 872], ["register_model_architecture", "getattr", "getattr", "reformer.reformer_fast_iwslt_de_en"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.reformer_fast_iwslt_de_en"], ["", "@", "register_model_architecture", "(", "'reformer'", ",", "'reformer_fast_iwslt_de_en_scaling'", ")", "\n", "def", "reformer_fast_iwslt_de_en_scaling", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "1536", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "7", ")", "\n", "reformer_fast_iwslt_de_en", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.reformer_base_nist_zh_en": [[874, 883], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "reformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'reformer'", ",", "'reformer_base_nist_zh_en'", ")", "\n", "def", "reformer_base_nist_zh_en", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "relu_dropout", "=", "getattr", "(", "args", ",", "'relu_dropout'", ",", "0.1", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "0", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "7", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "'decoder_normalize_before'", ",", "True", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.reformer_fast_nist_zh_en": [[885, 892], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "reformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'reformer'", ",", "'reformer_fast_nist_zh_en'", ")", "\n", "def", "reformer_fast_nist_zh_en", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "relu_dropout", "=", "getattr", "(", "args", ",", "'relu_dropout'", ",", "0.1", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "'encoder_normalize_before'", ",", "True", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.reformer_fast_nist_zh_en_scaling": [[894, 900], ["register_model_architecture", "getattr", "getattr", "getattr", "reformer.reformer_fast_nist_zh_en"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.reformer.reformer_fast_nist_zh_en"], ["", "@", "register_model_architecture", "(", "'reformer'", ",", "'reformer_fast_nist_zh_en_scaling'", ")", "\n", "def", "reformer_fast_nist_zh_en_scaling", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.2", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "3072", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "7", ")", "\n", "reformer_fast_nist_zh_en", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMModel.__init__": [[22, 24], ["FairseqModel.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMModel.add_args": [[25, 70], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained encoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-hidden-size'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder hidden size'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of encoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-bidirectional'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'make all layers of encoder bidirectional'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained decoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-hidden-size'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder hidden size'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-out-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'BOOL'", ",", "\n", "help", "=", "'decoder attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", "\n", "\n", "# Granular dropout settings (if not specified these default to --dropout)", "\n", "parser", ".", "add_argument", "(", "'--encoder-dropout-in'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for encoder input embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-dropout-out'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for encoder output'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-dropout-in'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for decoder input embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-dropout-out'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for decoder output'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoder-input-output-embed'", ",", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoder input and output embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-all-embeddings'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share encoder, decoder and output embeddings'", "\n", "' (requires shared dictionary and embed dim)'", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMModel.build_model": [[72, 157], ["lstm.base_architecture", "lstm.LSTMEncoder", "lstm.LSTMDecoder", "cls", "len", "dictionary.pad", "lstm.Embedding", "fairseq.utils.parse_embedding", "fairseq.utils.print_embed_overlap", "fairseq.utils.load_embedding", "lstm.LSTMModel.build_model.load_pretrained_embedding_from_file"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.parse_embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.print_embed_overlap", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_embedding"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "# make sure that all args are properly defaulted (in case there are any new ones)", "\n", "base_architecture", "(", "args", ")", "\n", "\n", "def", "load_pretrained_embedding_from_file", "(", "embed_path", ",", "dictionary", ",", "embed_dim", ")", ":", "\n", "            ", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "embed_dict", "=", "utils", ".", "parse_embedding", "(", "embed_path", ")", "\n", "utils", ".", "print_embed_overlap", "(", "embed_dict", ",", "dictionary", ")", "\n", "return", "utils", ".", "load_embedding", "(", "embed_dict", ",", "dictionary", ",", "embed_tokens", ")", "\n", "\n", "", "if", "args", ".", "encoder_embed_path", ":", "\n", "            ", "pretrained_encoder_embed", "=", "load_pretrained_embedding_from_file", "(", "\n", "args", ".", "encoder_embed_path", ",", "task", ".", "source_dictionary", ",", "args", ".", "encoder_embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "num_embeddings", "=", "len", "(", "task", ".", "source_dictionary", ")", "\n", "pretrained_encoder_embed", "=", "Embedding", "(", "\n", "num_embeddings", ",", "args", ".", "encoder_embed_dim", ",", "task", ".", "source_dictionary", ".", "pad", "(", ")", "\n", ")", "\n", "\n", "", "if", "args", ".", "share_all_embeddings", ":", "\n", "# double check all parameters combinations are valid", "\n", "            ", "if", "task", ".", "source_dictionary", "!=", "task", ".", "target_dictionary", ":", "\n", "                ", "raise", "RuntimeError", "(", "'--share-all-embeddings requires a joint dictionary'", ")", "\n", "", "if", "args", ".", "decoder_embed_path", "and", "(", "\n", "args", ".", "decoder_embed_path", "!=", "args", ".", "encoder_embed_path", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'--share-all-embed not compatible with --decoder-embed-path'", "\n", ")", "\n", "", "if", "args", ".", "encoder_embed_dim", "!=", "args", ".", "decoder_embed_dim", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'--share-all-embeddings requires --encoder-embed-dim to '", "\n", "'match --decoder-embed-dim'", "\n", ")", "\n", "", "pretrained_decoder_embed", "=", "pretrained_encoder_embed", "\n", "args", ".", "share_decoder_input_output_embed", "=", "True", "\n", "", "else", ":", "\n", "# separate decoder input embeddings", "\n", "            ", "pretrained_decoder_embed", "=", "None", "\n", "if", "args", ".", "decoder_embed_path", ":", "\n", "                ", "pretrained_decoder_embed", "=", "load_pretrained_embedding_from_file", "(", "\n", "args", ".", "decoder_embed_path", ",", "\n", "task", ".", "target_dictionary", ",", "\n", "args", ".", "decoder_embed_dim", "\n", ")", "\n", "# one last double check of parameter combinations", "\n", "", "", "if", "args", ".", "share_decoder_input_output_embed", "and", "(", "\n", "args", ".", "decoder_embed_dim", "!=", "args", ".", "decoder_out_embed_dim", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'--share-decoder-input-output-embeddings requires '", "\n", "'--decoder-embed-dim to match --decoder-out-embed-dim'", "\n", ")", "\n", "\n", "", "encoder", "=", "LSTMEncoder", "(", "\n", "dictionary", "=", "task", ".", "source_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "encoder_embed_dim", ",", "\n", "hidden_size", "=", "args", ".", "encoder_hidden_size", ",", "\n", "num_layers", "=", "args", ".", "encoder_layers", ",", "\n", "dropout_in", "=", "args", ".", "encoder_dropout_in", ",", "\n", "dropout_out", "=", "args", ".", "encoder_dropout_out", ",", "\n", "bidirectional", "=", "args", ".", "encoder_bidirectional", ",", "\n", "pretrained_embed", "=", "pretrained_encoder_embed", ",", "\n", ")", "\n", "decoder", "=", "LSTMDecoder", "(", "\n", "dictionary", "=", "task", ".", "target_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "hidden_size", "=", "args", ".", "decoder_hidden_size", ",", "\n", "out_embed_dim", "=", "args", ".", "decoder_out_embed_dim", ",", "\n", "num_layers", "=", "args", ".", "decoder_layers", ",", "\n", "dropout_in", "=", "args", ".", "decoder_dropout_in", ",", "\n", "dropout_out", "=", "args", ".", "decoder_dropout_out", ",", "\n", "attention", "=", "options", ".", "eval_bool", "(", "args", ".", "decoder_attention", ")", ",", "\n", "encoder_embed_dim", "=", "args", ".", "encoder_embed_dim", ",", "\n", "encoder_output_units", "=", "encoder", ".", "output_units", ",", "\n", "pretrained_embed", "=", "pretrained_decoder_embed", ",", "\n", "share_input_output_embed", "=", "args", ".", "share_decoder_input_output_embed", ",", "\n", "adaptive_softmax_cutoff", "=", "(", "\n", "options", ".", "eval_str_list", "(", "args", ".", "adaptive_softmax_cutoff", ",", "type", "=", "int", ")", "\n", "if", "args", ".", "criterion", "==", "'adaptive_loss'", "else", "None", "\n", ")", ",", "\n", ")", "\n", "return", "cls", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMEncoder.__init__": [[161, 193], ["FairseqEncoder.__init__", "len", "dictionary.pad", "lstm.LSTM", "lstm.Embedding"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTM", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding"], ["def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "hidden_size", "=", "512", ",", "num_layers", "=", "1", ",", "\n", "dropout_in", "=", "0.1", ",", "dropout_out", "=", "0.1", ",", "bidirectional", "=", "False", ",", "\n", "left_pad", "=", "True", ",", "pretrained_embed", "=", "None", ",", "padding_value", "=", "0.", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "dropout_in", "=", "dropout_in", "\n", "self", ".", "dropout_out", "=", "dropout_out", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "self", ".", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "if", "pretrained_embed", "is", "None", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "self", ".", "padding_idx", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "pretrained_embed", "\n", "\n", "", "self", ".", "lstm", "=", "LSTM", "(", "\n", "input_size", "=", "embed_dim", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "dropout", "=", "self", ".", "dropout_out", "if", "num_layers", ">", "1", "else", "0.", ",", "\n", "bidirectional", "=", "bidirectional", ",", "\n", ")", "\n", "self", ".", "left_pad", "=", "left_pad", "\n", "self", ".", "padding_value", "=", "padding_value", "\n", "\n", "self", ".", "output_units", "=", "hidden_size", "\n", "if", "bidirectional", ":", "\n", "            ", "self", ".", "output_units", "*=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMEncoder.forward": [[195, 243], ["fairseq.utils.convert_padding_direction.size", "lstm.LSTMEncoder.embed_tokens", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.transpose", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.dropout.data.new().zero_", "torch.dropout.data.new().zero_", "lstm.LSTMEncoder.lstm", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.dropout", "torch.dropout", "torch.dropout", "fairseq.utils.convert_padding_direction.eq().t", "fairseq.utils.convert_padding_direction", "src_lengths.data.tolist", "list", "lstm.LSTMEncoder.forward.combine_bidir"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.convert_padding_direction"], ["", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "if", "self", ".", "left_pad", ":", "\n", "# convert left-padding to right-padding", "\n", "            ", "src_tokens", "=", "utils", ".", "convert_padding_direction", "(", "\n", "src_tokens", ",", "\n", "self", ".", "padding_idx", ",", "\n", "left_to_right", "=", "True", ",", "\n", ")", "\n", "\n", "", "bsz", ",", "seqlen", "=", "src_tokens", ".", "size", "(", ")", "\n", "\n", "# embed tokens", "\n", "x", "=", "self", ".", "embed_tokens", "(", "src_tokens", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_in", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# pack embedded source tokens into a PackedSequence", "\n", "packed_x", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x", ",", "src_lengths", ".", "data", ".", "tolist", "(", ")", ")", "\n", "\n", "# apply LSTM", "\n", "if", "self", ".", "bidirectional", ":", "\n", "            ", "state_size", "=", "2", "*", "self", ".", "num_layers", ",", "bsz", ",", "self", ".", "hidden_size", "\n", "", "else", ":", "\n", "            ", "state_size", "=", "self", ".", "num_layers", ",", "bsz", ",", "self", ".", "hidden_size", "\n", "", "h0", "=", "x", ".", "data", ".", "new", "(", "*", "state_size", ")", ".", "zero_", "(", ")", "\n", "c0", "=", "x", ".", "data", ".", "new", "(", "*", "state_size", ")", ".", "zero_", "(", ")", "\n", "packed_outs", ",", "(", "final_hiddens", ",", "final_cells", ")", "=", "self", ".", "lstm", "(", "packed_x", ",", "(", "h0", ",", "c0", ")", ")", "\n", "\n", "# unpack outputs and apply dropout", "\n", "x", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "packed_outs", ",", "padding_value", "=", "self", ".", "padding_value", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_out", ",", "training", "=", "self", ".", "training", ")", "\n", "assert", "list", "(", "x", ".", "size", "(", ")", ")", "==", "[", "seqlen", ",", "bsz", ",", "self", ".", "output_units", "]", "\n", "\n", "if", "self", ".", "bidirectional", ":", "\n", "\n", "            ", "def", "combine_bidir", "(", "outs", ")", ":", "\n", "                ", "return", "outs", ".", "view", "(", "self", ".", "num_layers", ",", "2", ",", "bsz", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "num_layers", ",", "bsz", ",", "-", "1", ")", "\n", "\n", "", "final_hiddens", "=", "combine_bidir", "(", "final_hiddens", ")", "\n", "final_cells", "=", "combine_bidir", "(", "final_cells", ")", "\n", "\n", "", "encoder_padding_mask", "=", "src_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", ".", "t", "(", ")", "\n", "\n", "return", "{", "\n", "'encoder_out'", ":", "(", "x", ",", "final_hiddens", ",", "final_cells", ")", ",", "\n", "'encoder_padding_mask'", ":", "encoder_padding_mask", "if", "encoder_padding_mask", ".", "any", "(", ")", "else", "None", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMEncoder.reorder_encoder_out": [[245, 254], ["tuple", "encoder_out[].index_select", "eo.index_select"], "methods", ["None"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "encoder_out", "[", "'encoder_out'", "]", "=", "tuple", "(", "\n", "eo", ".", "index_select", "(", "1", ",", "new_order", ")", "\n", "for", "eo", "in", "encoder_out", "[", "'encoder_out'", "]", "\n", ")", "\n", "if", "encoder_out", "[", "'encoder_padding_mask'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_padding_mask'", "]", "=", "encoder_out", "[", "'encoder_padding_mask'", "]", ".", "index_select", "(", "1", ",", "new_order", ")", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMEncoder.max_positions": [[255, 258], ["int"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "return", "int", "(", "1e5", ")", "# an arbitrary large number", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.AttentionLayer.__init__": [[261, 266], ["torch.Module.__init__", "lstm.Linear", "lstm.Linear"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "input_embed_dim", ",", "output_embed_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_proj", "=", "Linear", "(", "input_embed_dim", ",", "output_embed_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "output_proj", "=", "Linear", "(", "input_embed_dim", "+", "output_embed_dim", ",", "output_embed_dim", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.AttentionLayer.forward": [[267, 291], ["lstm.AttentionLayer.input_proj", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tanh", "torch.tanh", "torch.tanh", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.float().masked_fill_().type_as", "lstm.AttentionLayer.output_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh.unsqueeze", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.float().masked_fill_", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.unsqueeze", "float", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "source_hids", ",", "encoder_padding_mask", ")", ":", "\n", "# input: bsz x input_embed_dim", "\n", "# source_hids: srclen x bsz x output_embed_dim", "\n", "\n", "# x: bsz x output_embed_dim", "\n", "        ", "x", "=", "self", ".", "input_proj", "(", "input", ")", "\n", "\n", "# compute attention", "\n", "attn_scores", "=", "(", "source_hids", "*", "x", ".", "unsqueeze", "(", "0", ")", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "\n", "# don't attend over padding", "\n", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "            ", "attn_scores", "=", "attn_scores", ".", "float", "(", ")", ".", "masked_fill_", "(", "\n", "encoder_padding_mask", ",", "\n", "float", "(", "'-inf'", ")", "\n", ")", ".", "type_as", "(", "attn_scores", ")", "# FP16 support: cast to float and back", "\n", "\n", "", "attn_scores", "=", "F", ".", "softmax", "(", "attn_scores", ",", "dim", "=", "0", ")", "# srclen x bsz", "\n", "\n", "# sum weighted sources", "\n", "x", "=", "(", "attn_scores", ".", "unsqueeze", "(", "2", ")", "*", "source_hids", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "output_proj", "(", "torch", ".", "cat", "(", "(", "x", ",", "input", ")", ",", "dim", "=", "1", ")", ")", ")", "\n", "return", "x", ",", "attn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMDecoder.__init__": [[295, 337], ["FairseqIncrementalDecoder.__init__", "len", "dictionary.pad", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "lstm.Embedding", "lstm.AttentionLayer", "lstm.Linear", "fairseq.modules.AdaptiveSoftmax", "lstm.LSTMCell", "lstm.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMCell", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "hidden_size", "=", "512", ",", "out_embed_dim", "=", "512", ",", "\n", "num_layers", "=", "1", ",", "dropout_in", "=", "0.1", ",", "dropout_out", "=", "0.1", ",", "attention", "=", "True", ",", "\n", "encoder_embed_dim", "=", "512", ",", "encoder_output_units", "=", "512", ",", "pretrained_embed", "=", "None", ",", "\n", "share_input_output_embed", "=", "False", ",", "adaptive_softmax_cutoff", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout_in", "=", "dropout_in", "\n", "self", ".", "dropout_out", "=", "dropout_out", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "share_input_output_embed", "=", "share_input_output_embed", "\n", "self", ".", "need_attn", "=", "True", "\n", "\n", "self", ".", "adaptive_softmax", "=", "None", "\n", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "if", "pretrained_embed", "is", "None", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "pretrained_embed", "\n", "\n", "", "self", ".", "encoder_output_units", "=", "encoder_output_units", "\n", "assert", "encoder_output_units", "==", "hidden_size", ",", "'encoder_output_units ({}) != hidden_size ({})'", ".", "format", "(", "encoder_output_units", ",", "hidden_size", ")", "\n", "# TODO another Linear layer if not equal", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "\n", "LSTMCell", "(", "\n", "input_size", "=", "encoder_output_units", "+", "embed_dim", "if", "layer", "==", "0", "else", "hidden_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", "\n", "]", ")", "\n", "self", ".", "attention", "=", "AttentionLayer", "(", "encoder_output_units", ",", "hidden_size", ")", "if", "attention", "else", "None", "\n", "if", "hidden_size", "!=", "out_embed_dim", ":", "\n", "            ", "self", ".", "additional_fc", "=", "Linear", "(", "hidden_size", ",", "out_embed_dim", ")", "\n", "", "if", "adaptive_softmax_cutoff", "is", "not", "None", ":", "\n", "# setting adaptive_softmax dropout to dropout_out for now but can be redefined", "\n", "            ", "self", ".", "adaptive_softmax", "=", "AdaptiveSoftmax", "(", "num_embeddings", ",", "embed_dim", ",", "adaptive_softmax_cutoff", ",", "\n", "dropout", "=", "dropout_out", ")", "\n", "", "elif", "not", "self", ".", "share_input_output_embed", ":", "\n", "            ", "self", ".", "fc_out", "=", "Linear", "(", "out_embed_dim", ",", "num_embeddings", ",", "dropout", "=", "dropout_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMDecoder.forward": [[339, 425], ["prev_output_tokens.size", "encoder_outs.size", "lstm.LSTMDecoder.embed_tokens", "torch.dropout", "torch.dropout", "torch.dropout", "lstm.LSTMDecoder.transpose", "fairseq.utils.get_incremental_state", "lstm.LSTMDecoder.data.new().zero_", "range", "fairseq.utils.set_incremental_state", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "lstm.LSTMDecoder.transpose", "len", "lstm.LSTMDecoder.data.new().zero_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "torch.dropout", "torch.dropout", "torch.dropout", "outs.append", "attn_scores.transpose.transpose.transpose", "hasattr", "lstm.LSTMDecoder.data.new", "rnn", "torch.dropout", "torch.dropout", "torch.dropout", "lstm.LSTMDecoder.attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lstm.LSTMDecoder.additional_fc", "torch.dropout", "torch.dropout", "torch.dropout", "torch.linear", "torch.linear", "torch.linear", "lstm.LSTMDecoder.fc_out", "range", "range", "lstm.LSTMDecoder.data.new"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.get_incremental_state", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.set_incremental_state"], ["", "", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out_dict", ",", "incremental_state", "=", "None", ")", ":", "\n", "        ", "encoder_out", "=", "encoder_out_dict", "[", "'encoder_out'", "]", "\n", "encoder_padding_mask", "=", "encoder_out_dict", "[", "'encoder_padding_mask'", "]", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "prev_output_tokens", "=", "prev_output_tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "", "bsz", ",", "seqlen", "=", "prev_output_tokens", ".", "size", "(", ")", "\n", "\n", "# get outputs from encoder", "\n", "encoder_outs", ",", "_", ",", "_", "=", "encoder_out", "[", ":", "3", "]", "\n", "srclen", "=", "encoder_outs", ".", "size", "(", "0", ")", "\n", "\n", "# embed tokens", "\n", "x", "=", "self", ".", "embed_tokens", "(", "prev_output_tokens", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_in", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# initialize previous states (or get from cache during incremental generation)", "\n", "cached_state", "=", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'cached_state'", ")", "\n", "if", "cached_state", "is", "not", "None", ":", "\n", "            ", "prev_hiddens", ",", "prev_cells", ",", "input_feed", "=", "cached_state", "\n", "", "else", ":", "\n", "            ", "_", ",", "encoder_hiddens", ",", "encoder_cells", "=", "encoder_out", "[", ":", "3", "]", "\n", "num_layers", "=", "len", "(", "self", ".", "layers", ")", "\n", "prev_hiddens", "=", "[", "encoder_hiddens", "[", "i", "]", "for", "i", "in", "range", "(", "num_layers", ")", "]", "\n", "prev_cells", "=", "[", "encoder_cells", "[", "i", "]", "for", "i", "in", "range", "(", "num_layers", ")", "]", "\n", "input_feed", "=", "x", ".", "data", ".", "new", "(", "bsz", ",", "self", ".", "encoder_output_units", ")", ".", "zero_", "(", ")", "\n", "\n", "", "attn_scores", "=", "x", ".", "data", ".", "new", "(", "srclen", ",", "seqlen", ",", "bsz", ")", ".", "zero_", "(", ")", "\n", "outs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "seqlen", ")", ":", "\n", "# input feeding: concatenate context vector from previous time step", "\n", "            ", "input", "=", "torch", ".", "cat", "(", "(", "x", "[", "j", ",", ":", ",", ":", "]", ",", "input_feed", ")", ",", "dim", "=", "1", ")", "\n", "\n", "for", "i", ",", "rnn", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "# recurrent cell", "\n", "                ", "hidden", ",", "cell", "=", "rnn", "(", "input", ",", "(", "prev_hiddens", "[", "i", "]", ",", "prev_cells", "[", "i", "]", ")", ")", "\n", "\n", "# hidden state becomes the input to the next layer", "\n", "input", "=", "F", ".", "dropout", "(", "hidden", ",", "p", "=", "self", ".", "dropout_out", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# save state for next time step", "\n", "prev_hiddens", "[", "i", "]", "=", "hidden", "\n", "prev_cells", "[", "i", "]", "=", "cell", "\n", "\n", "# apply attention using the last layer's hidden state", "\n", "", "if", "self", ".", "attention", "is", "not", "None", ":", "\n", "                ", "out", ",", "attn_scores", "[", ":", ",", "j", ",", ":", "]", "=", "self", ".", "attention", "(", "hidden", ",", "encoder_outs", ",", "encoder_padding_mask", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "hidden", "\n", "", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "dropout_out", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# input feeding", "\n", "input_feed", "=", "out", "\n", "\n", "# save final output", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "# cache previous states (no-op except during incremental generation)", "\n", "", "utils", ".", "set_incremental_state", "(", "\n", "self", ",", "incremental_state", ",", "'cached_state'", ",", "(", "prev_hiddens", ",", "prev_cells", ",", "input_feed", ")", ")", "\n", "\n", "# collect outputs across time steps", "\n", "x", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "0", ")", ".", "view", "(", "seqlen", ",", "bsz", ",", "self", ".", "hidden_size", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# srclen x tgtlen x bsz -> bsz x tgtlen x srclen", "\n", "if", "not", "self", ".", "training", "and", "self", ".", "need_attn", ":", "\n", "            ", "attn_scores", "=", "attn_scores", ".", "transpose", "(", "0", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "attn_scores", "=", "None", "\n", "\n", "# project back to size of vocabulary", "\n", "", "if", "self", ".", "adaptive_softmax", "is", "None", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "'additional_fc'", ")", ":", "\n", "                ", "x", "=", "self", ".", "additional_fc", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_out", ",", "training", "=", "self", ".", "training", ")", "\n", "", "if", "self", ".", "share_input_output_embed", ":", "\n", "                ", "x", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "embed_tokens", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "fc_out", "(", "x", ")", "\n", "", "", "return", "x", ",", "attn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMDecoder.reorder_incremental_state": [[426, 439], ["super().reorder_incremental_state", "fairseq.utils.get_incremental_state", "tuple", "fairseq.utils.set_incremental_state", "isinstance", "state.index_select", "map", "lstm.LSTMDecoder.reorder_incremental_state.reorder_state"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder.reorder_incremental_state", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.get_incremental_state", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.set_incremental_state"], ["", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "super", "(", ")", ".", "reorder_incremental_state", "(", "incremental_state", ",", "new_order", ")", "\n", "cached_state", "=", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'cached_state'", ")", "\n", "if", "cached_state", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "def", "reorder_state", "(", "state", ")", ":", "\n", "            ", "if", "isinstance", "(", "state", ",", "list", ")", ":", "\n", "                ", "return", "[", "reorder_state", "(", "state_i", ")", "for", "state_i", "in", "state", "]", "\n", "", "return", "state", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "\n", "", "new_state", "=", "tuple", "(", "map", "(", "reorder_state", ",", "cached_state", ")", ")", "\n", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'cached_state'", ",", "new_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMDecoder.max_positions": [[440, 443], ["int"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum output length supported by the decoder.\"\"\"", "\n", "return", "int", "(", "1e5", ")", "# an arbitrary large number", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMDecoder.make_generation_fast_": [[444, 446], ["None"], "methods", ["None"], ["", "def", "make_generation_fast_", "(", "self", ",", "need_attn", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "need_attn", "=", "need_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.Embedding": [[448, 453], ["torch.Embedding", "torch.init.uniform_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding"], ["", "", "def", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "m", ".", "weight", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTM": [[455, 461], ["torch.LSTM", "nn.LSTM.named_parameters", "param.data.uniform_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTM"], ["", "def", "LSTM", "(", "input_size", ",", "hidden_size", ",", "**", "kwargs", ")", ":", "\n", "    ", "m", "=", "nn", ".", "LSTM", "(", "input_size", ",", "hidden_size", ",", "**", "kwargs", ")", "\n", "for", "name", ",", "param", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'weight'", "in", "name", "or", "'bias'", "in", "name", ":", "\n", "            ", "param", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMCell": [[463, 469], ["torch.LSTMCell", "nn.LSTMCell.named_parameters", "param.data.uniform_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.LSTMCell"], ["", "def", "LSTMCell", "(", "input_size", ",", "hidden_size", ",", "**", "kwargs", ")", ":", "\n", "    ", "m", "=", "nn", ".", "LSTMCell", "(", "input_size", ",", "hidden_size", ",", "**", "kwargs", ")", "\n", "for", "name", ",", "param", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'weight'", "in", "name", "or", "'bias'", "in", "name", ":", "\n", "            ", "param", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.Linear": [[471, 478], ["torch.Linear", "nn.Linear.weight.data.uniform_", "nn.Linear.bias.data.uniform_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["", "def", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "\"\"\"Linear layer (input: N x T x C)\"\"\"", "\n", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "if", "bias", ":", "\n", "        ", "m", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.base_architecture": [[480, 501], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "'lstm'", ",", "'lstm'", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "'encoder_embed_path'", ",", "None", ")", "\n", "args", ".", "encoder_hidden_size", "=", "getattr", "(", "args", ",", "'encoder_hidden_size'", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "1", ")", "\n", "args", ".", "encoder_bidirectional", "=", "getattr", "(", "args", ",", "'encoder_bidirectional'", ",", "False", ")", "\n", "args", ".", "encoder_dropout_in", "=", "getattr", "(", "args", ",", "'encoder_dropout_in'", ",", "args", ".", "dropout", ")", "\n", "args", ".", "encoder_dropout_out", "=", "getattr", "(", "args", ",", "'encoder_dropout_out'", ",", "args", ".", "dropout", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "'decoder_embed_path'", ",", "None", ")", "\n", "args", ".", "decoder_hidden_size", "=", "getattr", "(", "args", ",", "'decoder_hidden_size'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "1", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'1'", ")", "\n", "args", ".", "decoder_dropout_in", "=", "getattr", "(", "args", ",", "'decoder_dropout_in'", ",", "args", ".", "dropout", ")", "\n", "args", ".", "decoder_dropout_out", "=", "getattr", "(", "args", ",", "'decoder_dropout_out'", ",", "args", ".", "dropout", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "args", ",", "'share_decoder_input_output_embed'", ",", "False", ")", "\n", "args", ".", "share_all_embeddings", "=", "getattr", "(", "args", ",", "'share_all_embeddings'", ",", "False", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "'10000,50000,200000'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.lstm_wiseman_iwslt_de_en": [[502, 513], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "lstm.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'lstm'", ",", "'lstm_wiseman_iwslt_de_en'", ")", "\n", "def", "lstm_wiseman_iwslt_de_en", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "encoder_dropout_in", "=", "getattr", "(", "args", ",", "'encoder_dropout_in'", ",", "0", ")", "\n", "args", ".", "encoder_dropout_out", "=", "getattr", "(", "args", ",", "'encoder_dropout_out'", ",", "0", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "256", ")", "\n", "args", ".", "decoder_dropout_in", "=", "getattr", "(", "args", ",", "'decoder_dropout_in'", ",", "0", ")", "\n", "args", ".", "decoder_dropout_out", "=", "getattr", "(", "args", ",", "'decoder_dropout_out'", ",", "args", ".", "dropout", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.lstm.lstm_luong_wmt_en_de": [[515, 525], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "lstm.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'lstm'", ",", "'lstm_luong_wmt_en_de'", ")", "\n", "def", "lstm_luong_wmt_en_de", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "1000", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "4", ")", "\n", "args", ".", "encoder_dropout_out", "=", "getattr", "(", "args", ",", "'encoder_dropout_out'", ",", "0", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "1000", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "4", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "1000", ")", "\n", "args", ".", "decoder_dropout_out", "=", "getattr", "(", "args", ",", "'decoder_dropout_out'", ",", "0", ")", "\n", "base_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvModel.__init__": [[44, 47], ["FairseqModel.__init__", "sum"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "self", ".", "encoder", ".", "num_attention_layers", "=", "sum", "(", "layer", "is", "not", "None", "for", "layer", "in", "decoder", ".", "attention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvModel.add_args": [[48, 71], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained encoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'encoder layers [(dim, kernel_size), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained decoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder layers [(dim, kernel_size), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-out-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder attention [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-input-output-embed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share input and output embeddings (requires'", "\n", "' --decoder-out-embed-dim and --decoder-embed-dim'", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvModel.build_model": [[74, 110], ["fconv.base_architecture", "fconv.FConvEncoder", "fconv.FConvDecoder", "fconv.FConvModel", "fairseq.utils.parse_embedding", "fairseq.utils.print_embed_overlap", "fairseq.utils.parse_embedding", "fairseq.utils.print_embed_overlap", "eval", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.parse_embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.print_embed_overlap", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.parse_embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.print_embed_overlap"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "# make sure that all args are properly defaulted (in case there are any new ones)", "\n", "base_architecture", "(", "args", ")", "\n", "\n", "encoder_embed_dict", "=", "None", "\n", "if", "args", ".", "encoder_embed_path", ":", "\n", "            ", "encoder_embed_dict", "=", "utils", ".", "parse_embedding", "(", "args", ".", "encoder_embed_path", ")", "\n", "utils", ".", "print_embed_overlap", "(", "encoder_embed_dict", ",", "task", ".", "source_dictionary", ")", "\n", "\n", "", "decoder_embed_dict", "=", "None", "\n", "if", "args", ".", "decoder_embed_path", ":", "\n", "            ", "decoder_embed_dict", "=", "utils", ".", "parse_embedding", "(", "args", ".", "decoder_embed_path", ")", "\n", "utils", ".", "print_embed_overlap", "(", "decoder_embed_dict", ",", "task", ".", "target_dictionary", ")", "\n", "\n", "", "encoder", "=", "FConvEncoder", "(", "\n", "dictionary", "=", "task", ".", "source_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "encoder_embed_dim", ",", "\n", "embed_dict", "=", "encoder_embed_dict", ",", "\n", "convolutions", "=", "eval", "(", "args", ".", "encoder_layers", ")", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "max_positions", "=", "args", ".", "max_source_positions", ",", "\n", ")", "\n", "decoder", "=", "FConvDecoder", "(", "\n", "dictionary", "=", "task", ".", "target_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "embed_dict", "=", "decoder_embed_dict", ",", "\n", "convolutions", "=", "eval", "(", "args", ".", "decoder_layers", ")", ",", "\n", "out_embed_dim", "=", "args", ".", "decoder_out_embed_dim", ",", "\n", "attention", "=", "eval", "(", "args", ".", "decoder_attention", ")", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "max_positions", "=", "args", ".", "max_target_positions", ",", "\n", "share_embed", "=", "args", ".", "share_input_output_embed", ",", "\n", ")", "\n", "return", "FConvModel", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvLanguageModel.__init__": [[114, 116], ["FairseqLanguageModel.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvLanguageModel.add_args": [[117, 135], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder layers [(dim, kernel_size), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-out-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'sets adaptive softmax dropout for the tail projections'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder attention [True, ...]'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvLanguageModel.build_model": [[136, 162], ["fconv.base_lm_architecture", "hasattr", "fconv.FConvDecoder", "fconv.FConvLanguageModel", "eval", "eval", "fairseq.options.eval_str_list"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_lm_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.eval_str_list"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "# make sure all arguments are present in older models", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n", "if", "hasattr", "(", "args", ",", "'max_target_positions'", ")", ":", "\n", "            ", "args", ".", "tokens_per_sample", "=", "args", ".", "max_target_positions", "\n", "\n", "", "decoder", "=", "FConvDecoder", "(", "\n", "dictionary", "=", "task", ".", "target_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "convolutions", "=", "eval", "(", "args", ".", "decoder_layers", ")", ",", "\n", "out_embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "attention", "=", "eval", "(", "args", ".", "decoder_attention", ")", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "max_positions", "=", "args", ".", "tokens_per_sample", ",", "\n", "share_embed", "=", "False", ",", "\n", "positional_embeddings", "=", "False", ",", "\n", "adaptive_softmax_cutoff", "=", "(", "\n", "options", ".", "eval_str_list", "(", "args", ".", "adaptive_softmax_cutoff", ",", "type", "=", "int", ")", "\n", "if", "args", ".", "criterion", "==", "'adaptive_loss'", "else", "None", "\n", ")", ",", "\n", "adaptive_softmax_dropout", "=", "args", ".", "adaptive_softmax_dropout", ",", "\n", ")", "\n", "return", "FConvLanguageModel", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvEncoder.__init__": [[186, 235], ["FairseqEncoder.__init__", "len", "dictionary.pad", "fconv.Embedding", "fconv.PositionalEmbedding", "fconv.extend_conv_spec", "fconv.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "fconv.Linear", "fairseq.utils.load_embedding", "fconv.FConvEncoder.projections.append", "fconv.FConvEncoder.convolutions.append", "fconv.FConvEncoder.residuals.append", "layer_in_channels.append", "fconv.ConvTBC", "fconv.Linear"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.PositionalEmbedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.extend_conv_spec", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.ConvTBC", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "embed_dict", "=", "None", ",", "max_positions", "=", "1024", ",", "\n", "convolutions", "=", "(", "(", "512", ",", "3", ")", ",", ")", "*", "20", ",", "dropout", "=", "0.1", ",", "left_pad", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "left_pad", "=", "left_pad", "\n", "self", ".", "num_attention_layers", "=", "None", "\n", "\n", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "self", ".", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "self", ".", "padding_idx", ")", "\n", "if", "embed_dict", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "utils", ".", "load_embedding", "(", "embed_dict", ",", "self", ".", "dictionary", ",", "self", ".", "embed_tokens", ")", "\n", "\n", "", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "max_positions", ",", "\n", "embed_dim", ",", "\n", "self", ".", "padding_idx", ",", "\n", "left_pad", "=", "self", ".", "left_pad", ",", "\n", ")", "\n", "\n", "convolutions", "=", "extend_conv_spec", "(", "convolutions", ")", "\n", "in_channels", "=", "convolutions", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "fc1", "=", "Linear", "(", "embed_dim", ",", "in_channels", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "projections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convolutions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "residuals", "=", "[", "]", "\n", "\n", "layer_in_channels", "=", "[", "in_channels", "]", "\n", "for", "i", ",", "(", "out_channels", ",", "kernel_size", ",", "residual", ")", "in", "enumerate", "(", "convolutions", ")", ":", "\n", "            ", "if", "residual", "==", "0", ":", "\n", "                ", "residual_dim", "=", "out_channels", "\n", "", "else", ":", "\n", "                ", "residual_dim", "=", "layer_in_channels", "[", "-", "residual", "]", "\n", "", "self", ".", "projections", ".", "append", "(", "Linear", "(", "residual_dim", ",", "out_channels", ")", "\n", "if", "residual_dim", "!=", "out_channels", "else", "None", ")", "\n", "if", "kernel_size", "%", "2", "==", "1", ":", "\n", "                ", "padding", "=", "kernel_size", "//", "2", "\n", "", "else", ":", "\n", "                ", "padding", "=", "0", "\n", "", "self", ".", "convolutions", ".", "append", "(", "\n", "ConvTBC", "(", "in_channels", ",", "out_channels", "*", "2", ",", "kernel_size", ",", "\n", "dropout", "=", "dropout", ",", "padding", "=", "padding", ")", "\n", ")", "\n", "self", ".", "residuals", ".", "append", "(", "residual", ")", "\n", "in_channels", "=", "out_channels", "\n", "layer_in_channels", ".", "append", "(", "out_channels", ")", "\n", "", "self", ".", "fc2", "=", "Linear", "(", "in_channels", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvEncoder.forward": [[236, 316], ["torch.dropout", "torch.dropout", "torch.dropout", "fconv.FConvEncoder.fc1", "src_tokens.eq().t", "conv.transpose", "zip", "conv.transpose", "fconv.FConvEncoder.fc2", "fairseq.modules.GradMultiply.apply", "fconv.FConvEncoder.embed_tokens", "fconv.FConvEncoder.embed_positions", "encoder_padding_mask.t.t.any", "torch.dropout", "torch.dropout", "torch.dropout", "torch.glu", "torch.glu", "torch.glu", "residuals.append", "encoder_padding_mask.t.t.t", "conv.masked_fill", "math.sqrt", "src_tokens.eq", "conv.masked_fill", "conv", "torch.pad", "torch.pad", "torch.pad", "conv", "encoder_padding_mask.t.t.unsqueeze", "proj", "encoder_padding_mask.t.t.unsqueeze", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            src_tokens (LongTensor): tokens in the source language of shape\n                `(batch, src_len)`\n            src_lengths (LongTensor): lengths of each source sentence of shape\n                `(batch)`\n\n        Returns:\n            dict:\n                - **encoder_out** (tuple): a tuple with two elements, where the\n                  first element is the last encoder layer's output and the\n                  second element is the same quantity summed with the input\n                  embedding (used for attention). The shape of both tensors is\n                  `(batch, src_len, embed_dim)`.\n                - **encoder_padding_mask** (ByteTensor): the positions of\n                  padding elements of shape `(batch, src_len)`\n        \"\"\"", "\n", "# embed tokens and positions", "\n", "x", "=", "self", ".", "embed_tokens", "(", "src_tokens", ")", "+", "self", ".", "embed_positions", "(", "src_tokens", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "input_embedding", "=", "x", "\n", "\n", "# project to size of convolution", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "\n", "# used to mask padding in input", "\n", "encoder_padding_mask", "=", "src_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", ".", "t", "(", ")", "# -> T x B", "\n", "if", "not", "encoder_padding_mask", ".", "any", "(", ")", ":", "\n", "            ", "encoder_padding_mask", "=", "None", "\n", "\n", "# B x T x C -> T x B x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "residuals", "=", "[", "x", "]", "\n", "# temporal convolutions", "\n", "for", "proj", ",", "conv", ",", "res_layer", "in", "zip", "(", "self", ".", "projections", ",", "self", ".", "convolutions", ",", "self", ".", "residuals", ")", ":", "\n", "            ", "if", "res_layer", ">", "0", ":", "\n", "                ", "residual", "=", "residuals", "[", "-", "res_layer", "]", "\n", "residual", "=", "residual", "if", "proj", "is", "None", "else", "proj", "(", "residual", ")", "\n", "", "else", ":", "\n", "                ", "residual", "=", "None", "\n", "\n", "", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "                ", "x", "=", "x", ".", "masked_fill", "(", "encoder_padding_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "if", "conv", ".", "kernel_size", "[", "0", "]", "%", "2", "==", "1", ":", "\n", "# padding is implicit in the conv", "\n", "                ", "x", "=", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "padding_l", "=", "(", "conv", ".", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", "\n", "padding_r", "=", "conv", ".", "kernel_size", "[", "0", "]", "//", "2", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "padding_l", ",", "padding_r", ")", ")", "\n", "x", "=", "conv", "(", "x", ")", "\n", "", "x", "=", "F", ".", "glu", "(", "x", ",", "dim", "=", "2", ")", "\n", "\n", "if", "residual", "is", "not", "None", ":", "\n", "                ", "x", "=", "(", "x", "+", "residual", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "", "residuals", ".", "append", "(", "x", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# project back to size of embedding", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "            ", "encoder_padding_mask", "=", "encoder_padding_mask", ".", "t", "(", ")", "# -> B x T", "\n", "x", "=", "x", ".", "masked_fill", "(", "encoder_padding_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "\n", "# scale gradients (this only affects backward, not forward)", "\n", "", "x", "=", "GradMultiply", ".", "apply", "(", "x", ",", "1.0", "/", "(", "2.0", "*", "self", ".", "num_attention_layers", ")", ")", "\n", "\n", "# add output to input embedding for attention", "\n", "y", "=", "(", "x", "+", "input_embedding", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "\n", "return", "{", "\n", "'encoder_out'", ":", "(", "x", ",", "y", ")", ",", "\n", "'encoder_padding_mask'", ":", "encoder_padding_mask", ",", "# B x T", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvEncoder.reorder_encoder_out": [[318, 328], ["encoder_out[].index_select", "[].index_select", "[].index_select"], "methods", ["None"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "if", "encoder_out", "[", "'encoder_out'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_out'", "]", "=", "(", "\n", "encoder_out", "[", "'encoder_out'", "]", "[", "0", "]", ".", "index_select", "(", "0", ",", "new_order", ")", ",", "\n", "encoder_out", "[", "'encoder_out'", "]", "[", "1", "]", ".", "index_select", "(", "0", ",", "new_order", ")", ",", "\n", ")", "\n", "", "if", "encoder_out", "[", "'encoder_padding_mask'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_padding_mask'", "]", "=", "encoder_out", "[", "'encoder_padding_mask'", "]", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvEncoder.max_positions": [[329, 332], ["fconv.FConvEncoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "return", "self", ".", "embed_positions", ".", "max_positions", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.AttentionLayer.__init__": [[335, 343], ["torch.Module.__init__", "fconv.Linear", "fconv.Linear"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "conv_channels", ",", "embed_dim", ",", "bmm", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# projects from output of convolution to embedding dimension", "\n", "self", ".", "in_projection", "=", "Linear", "(", "conv_channels", ",", "embed_dim", ")", "\n", "# projects from embedding dimension to convolution size", "\n", "self", ".", "out_projection", "=", "Linear", "(", "embed_dim", ",", "conv_channels", ")", "\n", "\n", "self", ".", "bmm", "=", "bmm", "if", "bmm", "is", "not", "None", "else", "torch", ".", "bmm", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.AttentionLayer.forward": [[344, 378], ["fconv.AttentionLayer.bmm", "x.float().masked_fill().type_as.float().masked_fill().type_as.size", "torch.softmax", "torch.softmax", "torch.softmax", "x.float().masked_fill().type_as.float().masked_fill().type_as.view", "fconv.AttentionLayer.bmm", "encoder_out[].size", "math.sqrt", "x.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "x.float().masked_fill().type_as.float().masked_fill().type_as.view", "s.unsqueeze.unsqueeze.unsqueeze", "math.sqrt", "fconv.AttentionLayer.in_projection", "encoder_padding_mask.type_as().sum", "fconv.AttentionLayer.out_projection", "x.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "math.sqrt", "s.unsqueeze.unsqueeze.rsqrt", "encoder_padding_mask.unsqueeze", "float", "encoder_padding_mask.type_as", "x.float().masked_fill().type_as.float().masked_fill().type_as.float"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "target_embedding", ",", "encoder_out", ",", "encoder_padding_mask", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "# attention", "\n", "x", "=", "(", "self", ".", "in_projection", "(", "x", ")", "+", "target_embedding", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "x", "=", "self", ".", "bmm", "(", "x", ",", "encoder_out", "[", "0", "]", ")", "\n", "\n", "# don't attend over padding", "\n", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "encoder_padding_mask", ".", "unsqueeze", "(", "1", ")", ",", "\n", "float", "(", "'-inf'", ")", "\n", ")", ".", "type_as", "(", "x", ")", "# FP16 support: cast to float and back", "\n", "\n", "# softmax over last dim", "\n", "", "sz", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ".", "view", "(", "sz", "[", "0", "]", "*", "sz", "[", "1", "]", ",", "sz", "[", "2", "]", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "sz", ")", "\n", "attn_scores", "=", "x", "\n", "\n", "x", "=", "self", ".", "bmm", "(", "x", ",", "encoder_out", "[", "1", "]", ")", "\n", "\n", "# scale attention output (respecting potentially different lengths)", "\n", "s", "=", "encoder_out", "[", "1", "]", ".", "size", "(", "1", ")", "\n", "if", "encoder_padding_mask", "is", "None", ":", "\n", "            ", "x", "=", "x", "*", "(", "s", "*", "math", ".", "sqrt", "(", "1.0", "/", "s", ")", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "s", "-", "encoder_padding_mask", ".", "type_as", "(", "x", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# exclude padding", "\n", "s", "=", "s", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x", "=", "x", "*", "(", "s", "*", "s", ".", "rsqrt", "(", ")", ")", "\n", "\n", "# project back", "\n", "", "x", "=", "(", "self", ".", "out_projection", "(", "x", ")", "+", "residual", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "return", "x", ",", "attn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.AttentionLayer.make_generation_fast_": [[379, 384], ["fconv.AttentionLayer.add_module", "fairseq.modules.BeamableMM"], "methods", ["None"], ["", "def", "make_generation_fast_", "(", "self", ",", "beamable_mm_beam_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Replace torch.bmm with BeamableMM.\"\"\"", "\n", "if", "beamable_mm_beam_size", "is", "not", "None", ":", "\n", "            ", "del", "self", ".", "bmm", "\n", "self", ".", "add_module", "(", "'bmm'", ",", "BeamableMM", "(", "beamable_mm_beam_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder.__init__": [[389, 465], ["FairseqIncrementalDecoder.__init__", "fconv.FConvDecoder.register_buffer", "fconv.extend_conv_spec", "isinstance", "len", "dictionary.pad", "fconv.Embedding", "fconv.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ValueError", "fairseq.utils.load_embedding", "fconv.PositionalEmbedding", "fconv.FConvDecoder.projections.append", "fconv.FConvDecoder.convolutions.append", "fconv.FConvDecoder.attention.append", "fconv.FConvDecoder.residuals.append", "layer_in_channels.append", "fairseq.modules.AdaptiveSoftmax", "fconv.Linear", "len", "isinstance", "len", "len", "fconv.LinearizedConv1d", "torch.Linear", "torch.Linear", "torch.Linear", "fconv.Linear", "fconv.Linear", "fconv.AttentionLayer"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.extend_conv_spec", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.load_embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.PositionalEmbedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.LinearizedConv1d", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "embed_dict", "=", "None", ",", "out_embed_dim", "=", "256", ",", "\n", "max_positions", "=", "1024", ",", "convolutions", "=", "(", "(", "512", ",", "3", ")", ",", ")", "*", "20", ",", "attention", "=", "True", ",", "\n", "dropout", "=", "0.1", ",", "share_embed", "=", "False", ",", "positional_embeddings", "=", "True", ",", "\n", "adaptive_softmax_cutoff", "=", "None", ",", "adaptive_softmax_dropout", "=", "0", ",", "\n", "left_pad", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "left_pad", "=", "left_pad", "\n", "self", ".", "need_attn", "=", "True", "\n", "\n", "convolutions", "=", "extend_conv_spec", "(", "convolutions", ")", "\n", "in_channels", "=", "convolutions", "[", "0", "]", "[", "0", "]", "\n", "if", "isinstance", "(", "attention", ",", "bool", ")", ":", "\n", "# expand True into [True, True, ...] and do the same with False", "\n", "            ", "attention", "=", "[", "attention", "]", "*", "len", "(", "convolutions", ")", "\n", "", "if", "not", "isinstance", "(", "attention", ",", "list", ")", "or", "len", "(", "attention", ")", "!=", "len", "(", "convolutions", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Attention is expected to be a list of booleans of '", "\n", "'length equal to the number of layers.'", ")", "\n", "\n", "", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "if", "embed_dict", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "utils", ".", "load_embedding", "(", "embed_dict", ",", "self", ".", "dictionary", ",", "self", ".", "embed_tokens", ")", "\n", "\n", "", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "max_positions", ",", "\n", "embed_dim", ",", "\n", "padding_idx", ",", "\n", "left_pad", "=", "self", ".", "left_pad", ",", "\n", ")", "if", "positional_embeddings", "else", "None", "\n", "\n", "self", ".", "fc1", "=", "Linear", "(", "embed_dim", ",", "in_channels", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "projections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convolutions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "residuals", "=", "[", "]", "\n", "\n", "layer_in_channels", "=", "[", "in_channels", "]", "\n", "for", "i", ",", "(", "out_channels", ",", "kernel_size", ",", "residual", ")", "in", "enumerate", "(", "convolutions", ")", ":", "\n", "            ", "if", "residual", "==", "0", ":", "\n", "                ", "residual_dim", "=", "out_channels", "\n", "", "else", ":", "\n", "                ", "residual_dim", "=", "layer_in_channels", "[", "-", "residual", "]", "\n", "", "self", ".", "projections", ".", "append", "(", "Linear", "(", "residual_dim", ",", "out_channels", ")", "\n", "if", "residual_dim", "!=", "out_channels", "else", "None", ")", "\n", "self", ".", "convolutions", ".", "append", "(", "\n", "LinearizedConv1d", "(", "in_channels", ",", "out_channels", "*", "2", ",", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", ",", "dropout", "=", "dropout", ")", "\n", ")", "\n", "self", ".", "attention", ".", "append", "(", "AttentionLayer", "(", "out_channels", ",", "embed_dim", ")", "\n", "if", "attention", "[", "i", "]", "else", "None", ")", "\n", "self", ".", "residuals", ".", "append", "(", "residual", ")", "\n", "in_channels", "=", "out_channels", "\n", "layer_in_channels", ".", "append", "(", "out_channels", ")", "\n", "\n", "", "self", ".", "adaptive_softmax", "=", "None", "\n", "self", ".", "fc2", "=", "self", ".", "fc3", "=", "None", "\n", "\n", "if", "adaptive_softmax_cutoff", "is", "not", "None", ":", "\n", "            ", "assert", "not", "share_embed", "\n", "self", ".", "adaptive_softmax", "=", "AdaptiveSoftmax", "(", "num_embeddings", ",", "in_channels", ",", "adaptive_softmax_cutoff", ",", "\n", "dropout", "=", "adaptive_softmax_dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc2", "=", "Linear", "(", "in_channels", ",", "out_embed_dim", ")", "\n", "if", "share_embed", ":", "\n", "                ", "assert", "out_embed_dim", "==", "embed_dim", ",", "\"Shared embed weights implies same dimensions \"", "\" out_embed_dim={} vs embed_dim={}\"", ".", "format", "(", "out_embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "out_embed_dim", ",", "num_embeddings", ")", "\n", "self", ".", "fc3", ".", "weight", "=", "self", ".", "embed_tokens", ".", "weight", "\n", "", "else", ":", "\n", "                ", "self", ".", "fc3", "=", "Linear", "(", "out_embed_dim", ",", "num_embeddings", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder.forward": [[466, 540], ["fconv.FConvDecoder._embed_tokens", "torch.dropout", "torch.dropout", "torch.dropout", "fconv.FConvDecoder.fc1", "fconv.FConvDecoder._transpose_if_training", "len", "zip", "fconv.FConvDecoder._transpose_if_training", "fconv.FConvDecoder._split_encoder_out", "fconv.FConvDecoder.embed_positions", "torch.dropout", "torch.dropout", "torch.dropout", "conv", "torch.glu", "torch.glu", "torch.glu", "residuals.append", "fconv.FConvDecoder.fc2", "torch.dropout", "torch.dropout", "torch.dropout", "fconv.FConvDecoder.fc3", "fconv.FConvDecoder._transpose_if_training", "attention", "fconv.FConvDecoder._transpose_if_training", "proj", "math.sqrt", "avg_attn_scores.add_"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder._embed_tokens", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder._transpose_if_training", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder._transpose_if_training", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder._split_encoder_out", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder._transpose_if_training", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder._transpose_if_training"], ["", "", "", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out_dict", "=", "None", ",", "incremental_state", "=", "None", ")", ":", "\n", "        ", "if", "encoder_out_dict", "is", "not", "None", ":", "\n", "            ", "encoder_out", "=", "encoder_out_dict", "[", "'encoder_out'", "]", "\n", "encoder_padding_mask", "=", "encoder_out_dict", "[", "'encoder_padding_mask'", "]", "\n", "\n", "# split and transpose encoder outputs", "\n", "encoder_a", ",", "encoder_b", "=", "self", ".", "_split_encoder_out", "(", "encoder_out", ",", "incremental_state", ")", "\n", "\n", "", "if", "self", ".", "embed_positions", "is", "not", "None", ":", "\n", "            ", "pos_embed", "=", "self", ".", "embed_positions", "(", "prev_output_tokens", ",", "incremental_state", ")", "\n", "", "else", ":", "\n", "            ", "pos_embed", "=", "0", "\n", "\n", "", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "prev_output_tokens", "=", "prev_output_tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "", "x", "=", "self", ".", "_embed_tokens", "(", "prev_output_tokens", ",", "incremental_state", ")", "\n", "\n", "# embed tokens and combine with positional embeddings", "\n", "x", "+=", "pos_embed", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "target_embedding", "=", "x", "\n", "\n", "# project to size of convolution", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "self", ".", "_transpose_if_training", "(", "x", ",", "incremental_state", ")", "\n", "\n", "# temporal convolutions", "\n", "avg_attn_scores", "=", "None", "\n", "num_attn_layers", "=", "len", "(", "self", ".", "attention", ")", "\n", "residuals", "=", "[", "x", "]", "\n", "for", "proj", ",", "conv", ",", "attention", ",", "res_layer", "in", "zip", "(", "self", ".", "projections", ",", "self", ".", "convolutions", ",", "self", ".", "attention", ",", "\n", "self", ".", "residuals", ")", ":", "\n", "            ", "if", "res_layer", ">", "0", ":", "\n", "                ", "residual", "=", "residuals", "[", "-", "res_layer", "]", "\n", "residual", "=", "residual", "if", "proj", "is", "None", "else", "proj", "(", "residual", ")", "\n", "", "else", ":", "\n", "                ", "residual", "=", "None", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "conv", "(", "x", ",", "incremental_state", ")", "\n", "x", "=", "F", ".", "glu", "(", "x", ",", "dim", "=", "2", ")", "\n", "\n", "# attention", "\n", "if", "attention", "is", "not", "None", ":", "\n", "                ", "x", "=", "self", ".", "_transpose_if_training", "(", "x", ",", "incremental_state", ")", "\n", "\n", "x", ",", "attn_scores", "=", "attention", "(", "x", ",", "target_embedding", ",", "(", "encoder_a", ",", "encoder_b", ")", ",", "encoder_padding_mask", ")", "\n", "\n", "if", "not", "self", ".", "training", "and", "self", ".", "need_attn", ":", "\n", "                    ", "attn_scores", "=", "attn_scores", "/", "num_attn_layers", "\n", "if", "avg_attn_scores", "is", "None", ":", "\n", "                        ", "avg_attn_scores", "=", "attn_scores", "\n", "", "else", ":", "\n", "                        ", "avg_attn_scores", ".", "add_", "(", "attn_scores", ")", "\n", "\n", "", "", "x", "=", "self", ".", "_transpose_if_training", "(", "x", ",", "incremental_state", ")", "\n", "\n", "# residual", "\n", "", "if", "residual", "is", "not", "None", ":", "\n", "                ", "x", "=", "(", "x", "+", "residual", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "", "residuals", ".", "append", "(", "x", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "self", ".", "_transpose_if_training", "(", "x", ",", "incremental_state", ")", "\n", "\n", "# project back to size of vocabulary if not using adaptive softmax", "\n", "if", "self", ".", "fc2", "is", "not", "None", "and", "self", ".", "fc3", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "", "return", "x", ",", "avg_attn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder.reorder_incremental_state": [[541, 547], ["super().reorder_incremental_state", "fairseq.utils.get_incremental_state", "tuple", "fairseq.utils.set_incremental_state", "eo.index_select"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder.reorder_incremental_state", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.get_incremental_state", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.set_incremental_state"], ["", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "super", "(", ")", ".", "reorder_incremental_state", "(", "incremental_state", ",", "new_order", ")", "\n", "encoder_out", "=", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'encoder_out'", ")", "\n", "if", "encoder_out", "is", "not", "None", ":", "\n", "            ", "encoder_out", "=", "tuple", "(", "eo", ".", "index_select", "(", "0", ",", "new_order", ")", "for", "eo", "in", "encoder_out", ")", "\n", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'encoder_out'", ",", "encoder_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder.max_positions": [[548, 551], ["fconv.FConvDecoder.embed_positions.max_positions", "float"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum output length supported by the decoder.\"\"\"", "\n", "return", "self", ".", "embed_positions", ".", "max_positions", "(", ")", "if", "self", ".", "embed_positions", "is", "not", "None", "else", "float", "(", "'inf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder.upgrade_state_dict": [[552, 561], ["fairseq.utils.item", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.utils.remove_weight_norm", "torch.utils.remove_weight_norm", "torch.utils.remove_weight_norm", "torch.utils.weight_norm", "torch.utils.weight_norm", "torch.utils.weight_norm", "state_dict.get", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["", "def", "upgrade_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "if", "utils", ".", "item", "(", "state_dict", ".", "get", "(", "'decoder.version'", ",", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ")", "[", "0", "]", ")", "<", "2", ":", "\n", "# old models use incorrect weight norm dimension", "\n", "            ", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convolutions", ")", ":", "\n", "# reconfigure weight norm", "\n", "                ", "nn", ".", "utils", ".", "remove_weight_norm", "(", "conv", ")", "\n", "self", ".", "convolutions", "[", "i", "]", "=", "nn", ".", "utils", ".", "weight_norm", "(", "conv", ",", "dim", "=", "0", ")", "\n", "", "state_dict", "[", "'decoder.version'", "]", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder.make_generation_fast_": [[562, 564], ["None"], "methods", ["None"], ["", "def", "make_generation_fast_", "(", "self", ",", "need_attn", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "need_attn", "=", "need_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder._embed_tokens": [[565, 570], ["fconv.FConvDecoder.embed_tokens"], "methods", ["None"], ["", "def", "_embed_tokens", "(", "self", ",", "tokens", ",", "incremental_state", ")", ":", "\n", "        ", "if", "incremental_state", "is", "not", "None", ":", "\n", "# keep only the last token for incremental forward pass", "\n", "            ", "tokens", "=", "tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "", "return", "self", ".", "embed_tokens", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder._split_encoder_out": [[571, 588], ["fairseq.utils.get_incremental_state", "encoder_a.transpose().contiguous.transpose().contiguous.transpose().contiguous", "fairseq.utils.set_incremental_state", "encoder_a.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.get_incremental_state", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.set_incremental_state"], ["", "def", "_split_encoder_out", "(", "self", ",", "encoder_out", ",", "incremental_state", ")", ":", "\n", "        ", "\"\"\"Split and transpose encoder outputs.\n\n        This is cached when doing incremental inference.\n        \"\"\"", "\n", "cached_result", "=", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'encoder_out'", ")", "\n", "if", "cached_result", "is", "not", "None", ":", "\n", "            ", "return", "cached_result", "\n", "\n", "# transpose only once to speed up attention layers", "\n", "", "encoder_a", ",", "encoder_b", "=", "encoder_out", "\n", "encoder_a", "=", "encoder_a", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "result", "=", "(", "encoder_a", ",", "encoder_b", ")", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'encoder_out'", ",", "result", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.FConvDecoder._transpose_if_training": [[589, 593], ["x.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "_transpose_if_training", "(", "self", ",", "x", ",", "incremental_state", ")", ":", "\n", "        ", "if", "incremental_state", "is", "None", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.extend_conv_spec": [[595, 610], ["tuple", "len", "extended.append", "len", "extended.append", "Exception", "str"], "function", ["None"], ["", "", "def", "extend_conv_spec", "(", "convolutions", ")", ":", "\n", "    ", "\"\"\"\n    Extends convolutional spec that is a list of tuples of 2 or 3 parameters\n    (kernel size, dim size and optionally how many layers behind to look for residual)\n    to default the residual propagation param if it is not specified\n    \"\"\"", "\n", "extended", "=", "[", "]", "\n", "for", "spec", "in", "convolutions", ":", "\n", "        ", "if", "len", "(", "spec", ")", "==", "3", ":", "\n", "            ", "extended", ".", "append", "(", "spec", ")", "\n", "", "elif", "len", "(", "spec", ")", "==", "2", ":", "\n", "            ", "extended", ".", "append", "(", "spec", "+", "(", "1", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'invalid number of parameters in convolution spec '", "+", "str", "(", "spec", ")", "+", "'. expected 2 or 3'", ")", "\n", "", "", "return", "tuple", "(", "extended", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.Embedding": [[612, 617], ["torch.Embedding", "torch.init.normal_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding"], ["", "def", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.PositionalEmbedding": [[619, 624], ["fairseq.modules.LearnedPositionalEmbedding", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["", "def", "PositionalEmbedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ",", "left_pad", ")", ":", "\n", "    ", "m", "=", "LearnedPositionalEmbedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ",", "left_pad", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.Linear": [[626, 632], ["torch.Linear", "torch.init.normal_", "torch.init.constant_", "torch.utils.weight_norm", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["", "def", "Linear", "(", "in_features", ",", "out_features", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Linear layer (input: N x T x C)\"\"\"", "\n", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "math", ".", "sqrt", "(", "(", "1", "-", "dropout", ")", "/", "in_features", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "return", "nn", ".", "utils", ".", "weight_norm", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.LinearizedConv1d": [[634, 641], ["fairseq.modules.LinearizedConvolution", "math.sqrt", "torch.init.normal_", "torch.init.constant_", "torch.utils.weight_norm"], "function", ["None"], ["", "def", "LinearizedConv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "dropout", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Conv1d layer optimized for decoding\"\"\"", "\n", "m", "=", "LinearizedConvolution", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "(", "4", "*", "(", "1.0", "-", "dropout", ")", ")", "/", "(", "m", ".", "kernel_size", "[", "0", "]", "*", "in_channels", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "return", "nn", ".", "utils", ".", "weight_norm", "(", "m", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.ConvTBC": [[643, 651], ["fconv.ConvTBC", "math.sqrt", "torch.init.normal_", "torch.init.constant_", "torch.utils.weight_norm"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.ConvTBC"], ["", "def", "ConvTBC", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "dropout", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Conv1d layer\"\"\"", "\n", "from", "fairseq", ".", "modules", "import", "ConvTBC", "\n", "m", "=", "ConvTBC", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "(", "4", "*", "(", "1.0", "-", "dropout", ")", ")", "/", "(", "m", ".", "kernel_size", "[", "0", "]", "*", "in_channels", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "return", "nn", ".", "utils", ".", "weight_norm", "(", "m", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.base_lm_architecture": [[653, 661], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "'fconv_lm'", ",", "'fconv_lm'", ")", "\n", "def", "base_lm_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "128", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "'[(1268, 4)] * 13'", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'False'", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "'adaptive_softmax_dropout'", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.fconv_lm_dauphin_wikitext103": [[663, 677], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "fconv.base_lm_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_lm_architecture"], ["", "@", "register_model_architecture", "(", "'fconv_lm'", ",", "'fconv_lm_dauphin_wikitext103'", ")", "\n", "def", "fconv_lm_dauphin_wikitext103", "(", "args", ")", ":", "\n", "    ", "layers", "=", "'[(850, 6)] * 3'", "\n", "layers", "+=", "' + [(850, 1)] * 1'", "\n", "layers", "+=", "' + [(850, 5)] * 4'", "\n", "layers", "+=", "' + [(850, 1)] * 1'", "\n", "layers", "+=", "' + [(850, 4)] * 3'", "\n", "layers", "+=", "' + [(1024, 4)] * 1'", "\n", "layers", "+=", "' + [(2048, 4)] * 1'", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "280", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "layers", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'False'", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "'10000,20000,200000'", ")", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.fconv_lm_dauphin_gbw": [[679, 691], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "fconv.base_lm_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_lm_architecture"], ["", "@", "register_model_architecture", "(", "'fconv_lm'", ",", "'fconv_lm_dauphin_gbw'", ")", "\n", "def", "fconv_lm_dauphin_gbw", "(", "args", ")", ":", "\n", "    ", "layers", "=", "'[(512, 5)]'", "\n", "layers", "+=", "' + [(128, 1, 0), (128, 5, 0), (512, 1, 3)] * 3'", "\n", "layers", "+=", "' + [(512, 1, 0), (512, 5, 0), (1024, 1, 3)] * 3'", "\n", "layers", "+=", "' + [(1024, 1, 0), (1024, 5, 0), (2048, 1, 3)] * 6'", "\n", "layers", "+=", "' + [(1024, 1, 0), (1024, 5, 0), (4096, 1, 3)]'", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "128", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "layers", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'False'", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "'10000,50000,200000'", ")", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.base_architecture": [[693, 705], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "'fconv'", ",", "'fconv'", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "'encoder_embed_path'", ",", "None", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "'[(512, 3)] * 20'", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "'decoder_embed_path'", ",", "None", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "'[(512, 3)] * 20'", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "256", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'True'", ")", "\n", "args", ".", "share_input_output_embed", "=", "getattr", "(", "args", ",", "'share_input_output_embed'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.fconv_iwslt_de_en": [[707, 715], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "fconv.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'fconv'", ",", "'fconv_iwslt_de_en'", ")", "\n", "def", "fconv_iwslt_de_en", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "'[(256, 3)] * 4'", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "'[(256, 3)] * 3'", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "256", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.fconv_wmt_en_ro": [[717, 721], ["register_model_architecture", "getattr", "fconv.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'fconv'", ",", "'fconv_wmt_en_ro'", ")", "\n", "def", "fconv_wmt_en_ro", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "512", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.fconv_wmt_en_de": [[723, 735], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "fconv.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'fconv'", ",", "'fconv_wmt_en_de'", ")", "\n", "def", "fconv_wmt_en_de", "(", "args", ")", ":", "\n", "    ", "convs", "=", "'[(512, 3)] * 9'", "# first 9 layers have 512 units", "\n", "convs", "+=", "' + [(1024, 3)] * 4'", "# next 4 layers have 1024 units", "\n", "convs", "+=", "' + [(2048, 1)] * 2'", "# final 2 layers use 1x1 convolutions", "\n", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "768", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "convs", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "768", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "convs", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "512", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fconv.fconv_wmt_en_fr": [[737, 751], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "fconv.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'fconv'", ",", "'fconv_wmt_en_fr'", ")", "\n", "def", "fconv_wmt_en_fr", "(", "args", ")", ":", "\n", "    ", "convs", "=", "'[(512, 3)] * 6'", "# first 6 layers have 512 units", "\n", "convs", "+=", "' + [(768, 3)] * 4'", "# next 4 layers have 768 units", "\n", "convs", "+=", "' + [(1024, 3)] * 3'", "# next 3 layers have 1024 units", "\n", "convs", "+=", "' + [(2048, 1)] * 1'", "# next 1 layer uses 1x1 convolutions", "\n", "convs", "+=", "' + [(4096, 1)] * 1'", "# final 1 layer uses 1x1 convolutions", "\n", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "768", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "convs", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "768", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "convs", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "512", ")", "\n", "base_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.__init__": [[18, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_is_generation_fast", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.add_args": [[22, 26], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.build_model": [[27, 31], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.get_targets": [[32, 35], ["None"], "methods", ["None"], ["", "def", "get_targets", "(", "self", ",", "sample", ",", "net_output", ")", ":", "\n", "        ", "\"\"\"Get targets from either the sample or the net's output.\"\"\"", "\n", "return", "sample", "[", "'target'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.get_normalized_probs": [[36, 47], ["hasattr", "fairseq_model.BaseFairseqModel.decoder.get_normalized_probs", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "net_output.float", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_decoder.FairseqDecoder.get_normalized_probs"], ["", "def", "get_normalized_probs", "(", "self", ",", "net_output", ",", "log_probs", ",", "sample", "=", "None", ")", ":", "\n", "        ", "\"\"\"Get normalized probabilities (or log probs) from a net's output.\"\"\"", "\n", "if", "hasattr", "(", "self", ",", "'decoder'", ")", ":", "\n", "            ", "return", "self", ".", "decoder", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", ",", "sample", ")", "\n", "", "elif", "torch", ".", "is_tensor", "(", "net_output", ")", ":", "\n", "            ", "logits", "=", "net_output", ".", "float", "(", ")", "\n", "if", "log_probs", ":", "\n", "                ", "return", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "return", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "", "", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.max_positions": [[48, 51], ["None"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum length supported by the model.\"\"\"", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.max_decoder_positions": [[52, 55], ["fairseq_model.BaseFairseqModel.decoder.max_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "def", "max_decoder_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum length supported by the decoder.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "max_positions", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.load_state_dict": [[56, 65], ["fairseq_model.BaseFairseqModel.upgrade_state_dict", "super().load_state_dict"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.upgrade_state_dict", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "\"\"\"Copies parameters and buffers from *state_dict* into this module and\n        its descendants.\n\n        Overrides the method in :class:`nn.Module`. Compared with that method\n        this additionally \"upgrades\" *state_dicts* from old checkpoints.\n        \"\"\"", "\n", "self", ".", "upgrade_state_dict", "(", "state_dict", ")", "\n", "super", "(", ")", ".", "load_state_dict", "(", "state_dict", ",", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.upgrade_state_dict": [[66, 69], ["fairseq_model.BaseFairseqModel.upgrade_state_dict_named"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.upgrade_state_dict_named"], ["", "def", "upgrade_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Upgrade old state dicts to work with newer code.\"\"\"", "\n", "self", ".", "upgrade_state_dict_named", "(", "state_dict", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.upgrade_state_dict_named": [[70, 86], ["fairseq_model.BaseFairseqModel.upgrade_state_dict_named.do_upgrade"], "methods", ["None"], ["", "def", "upgrade_state_dict_named", "(", "self", ",", "state_dict", ",", "name", ")", ":", "\n", "        ", "assert", "state_dict", "is", "not", "None", "\n", "\n", "def", "do_upgrade", "(", "m", ",", "prefix", ")", ":", "\n", "            ", "if", "len", "(", "prefix", ")", ">", "0", ":", "\n", "                ", "prefix", "+=", "'.'", "\n", "\n", "", "for", "n", ",", "c", "in", "m", ".", "named_children", "(", ")", ":", "\n", "                ", "name", "=", "prefix", "+", "n", "\n", "if", "hasattr", "(", "c", ",", "'upgrade_state_dict_named'", ")", ":", "\n", "                    ", "c", ".", "upgrade_state_dict_named", "(", "state_dict", ",", "name", ")", "\n", "", "elif", "hasattr", "(", "c", ",", "'upgrade_state_dict'", ")", ":", "\n", "                    ", "c", ".", "upgrade_state_dict", "(", "state_dict", ")", "\n", "", "do_upgrade", "(", "c", ",", "name", ")", "\n", "\n", "", "", "do_upgrade", "(", "self", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.make_generation_fast_": [[87, 115], ["fairseq_model.BaseFairseqModel.apply", "fairseq_model.BaseFairseqModel.apply", "fairseq_model.BaseFairseqModel.eval", "torch.utils.remove_weight_norm", "torch.utils.remove_weight_norm", "torch.utils.remove_weight_norm", "hasattr", "module.make_generation_fast_", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.make_generation_fast_"], ["", "def", "make_generation_fast_", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Optimize model for faster generation.\"\"\"", "\n", "if", "self", ".", "_is_generation_fast", ":", "\n", "            ", "return", "# only apply once", "\n", "", "self", ".", "_is_generation_fast", "=", "True", "\n", "\n", "# remove weight norm from all modules in the network", "\n", "def", "apply_remove_weight_norm", "(", "module", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "nn", ".", "utils", ".", "remove_weight_norm", "(", "module", ")", "\n", "", "except", "ValueError", ":", "# this module didn't have weight norm", "\n", "                ", "return", "\n", "\n", "", "", "self", ".", "apply", "(", "apply_remove_weight_norm", ")", "\n", "\n", "def", "apply_make_generation_fast_", "(", "module", ")", ":", "\n", "            ", "if", "module", "!=", "self", "and", "hasattr", "(", "module", ",", "'make_generation_fast_'", ")", ":", "\n", "                ", "module", ".", "make_generation_fast_", "(", "**", "kwargs", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "apply_make_generation_fast_", ")", "\n", "\n", "def", "train", "(", "mode", ")", ":", "\n", "            ", "if", "mode", ":", "\n", "                ", "raise", "RuntimeError", "(", "'cannot train after make_generation_fast'", ")", "\n", "\n", "# this model should no longer be used for training", "\n", "", "", "self", ".", "eval", "(", ")", "\n", "self", ".", "train", "=", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.prepare_for_onnx_export_": [[116, 123], ["fairseq_model.BaseFairseqModel.apply", "hasattr", "module.prepare_for_onnx_export_"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.prepare_for_onnx_export_"], ["", "def", "prepare_for_onnx_export_", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Make model exportable via ONNX trace.\"\"\"", "\n", "def", "apply_prepare_for_onnx_export_", "(", "module", ")", ":", "\n", "            ", "if", "module", "!=", "self", "and", "hasattr", "(", "module", ",", "'prepare_for_onnx_export_'", ")", ":", "\n", "                ", "module", ".", "prepare_for_onnx_export_", "(", "**", "kwargs", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "apply_prepare_for_onnx_export_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.FairseqModel.__init__": [[133, 140], ["fairseq_model.BaseFairseqModel.__init__", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "assert", "isinstance", "(", "self", ".", "encoder", ",", "FairseqEncoder", ")", "\n", "assert", "isinstance", "(", "self", ".", "decoder", ",", "FairseqDecoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.FairseqModel.forward": [[141, 165], ["fairseq_model.FairseqModel.encoder", "fairseq_model.FairseqModel.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ")", ":", "\n", "        ", "\"\"\"\n        Run the forward pass for an encoder-decoder model.\n\n        First feed a batch of source tokens through the encoder. Then, feed the\n        encoder output and previous decoder outputs (i.e., input feeding/teacher\n        forcing) to the decoder to produce the next outputs::\n\n            encoder_out = self.encoder(src_tokens, src_lengths)\n            return self.decoder(prev_output_tokens, encoder_out)\n\n        Args:\n            src_tokens (LongTensor): tokens in the source language of shape\n                `(batch, src_len)`\n            src_lengths (LongTensor): source sentence lengths of shape `(batch)`\n            prev_output_tokens (LongTensor): previous decoder outputs of shape\n                `(batch, tgt_len)`, for input feeding/teacher forcing\n\n        Returns:\n            the decoder's output, typically of shape `(batch, tgt_len, vocab)`\n        \"\"\"", "\n", "encoder_out", "=", "self", ".", "encoder", "(", "src_tokens", ",", "src_lengths", ")", "\n", "decoder_out", "=", "self", ".", "decoder", "(", "prev_output_tokens", ",", "encoder_out", ")", "\n", "return", "decoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.FairseqModel.max_positions": [[166, 169], ["fairseq_model.FairseqModel.encoder.max_positions", "fairseq_model.FairseqModel.decoder.max_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum length supported by the model.\"\"\"", "\n", "return", "(", "self", ".", "encoder", ".", "max_positions", "(", ")", ",", "self", ".", "decoder", ".", "max_positions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.FairseqLanguageModel.__init__": [[178, 182], ["fairseq_model.BaseFairseqModel.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder", "=", "decoder", "\n", "assert", "isinstance", "(", "self", ".", "decoder", ",", "FairseqDecoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.FairseqLanguageModel.forward": [[183, 198], ["fairseq_model.FairseqLanguageModel.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "\"\"\"\n        Run the forward pass for a decoder-only model.\n\n        Feeds a batch of tokens through the decoder to predict the next tokens.\n\n        Args:\n            src_tokens (LongTensor): tokens on which to condition the decoder,\n                of shape `(batch, tgt_len)`\n            src_lengths (LongTensor): source sentence lengths of shape `(batch)`\n\n        Returns:\n            the decoder's output, typically of shape `(batch, seq_len, vocab)`\n        \"\"\"", "\n", "return", "self", ".", "decoder", "(", "src_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.FairseqLanguageModel.max_positions": [[199, 202], ["fairseq_model.FairseqLanguageModel.decoder.max_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum length supported by the model.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "max_positions", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.FairseqLanguageModel.supported_targets": [[203, 206], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supported_targets", "(", "self", ")", ":", "\n", "        ", "return", "{", "'future'", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.build_model": [[27, 29], ["ARCH_MODEL_REGISTRY[].build_model"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.build_model"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model": [[31, 59], ["ValueError", "issubclass", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture": [[61, 99], ["ARCH_MODEL_INV_REGISTRY.setdefault().append", "ValueError", "ValueError", "callable", "ValueError", "ARCH_MODEL_INV_REGISTRY.setdefault"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.models.composite_encoder.CompositeEncoder.__init__": [[22, 27], ["FairseqEncoder.__init__", "composite_encoder.CompositeEncoder.add_module", "next", "iter", "encoders.values"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "encoders", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "next", "(", "iter", "(", "encoders", ".", "values", "(", ")", ")", ")", ".", "dictionary", ")", "\n", "self", ".", "encoders", "=", "encoders", "\n", "for", "key", "in", "self", ".", "encoders", ":", "\n", "            ", "self", ".", "add_module", "(", "key", ",", "self", ".", "encoders", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.composite_encoder.CompositeEncoder.forward": [[28, 44], ["None"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            src_tokens (LongTensor): tokens in the source language of shape\n                `(batch, src_len)`\n            src_lengths (LongTensor): lengths of each source sentence of shape\n                `(batch)`\n\n        Returns:\n            dict:\n                the outputs from each Encoder\n        \"\"\"", "\n", "encoder_out", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "encoders", ":", "\n", "            ", "encoder_out", "[", "key", "]", "=", "self", ".", "encoders", "[", "key", "]", "(", "src_tokens", ",", "src_lengths", ")", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.composite_encoder.CompositeEncoder.reorder_encoder_out": [[45, 50], ["composite_encoder.CompositeEncoder.encoders[].reorder_encoder_out"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerEncoder.reorder_encoder_out"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"Reorder encoder output according to new_order.\"\"\"", "\n", "for", "key", "in", "self", ".", "encoders", ":", "\n", "            ", "encoder_out", "[", "key", "]", "=", "self", ".", "encoders", "[", "key", "]", ".", "reorder_encoder_out", "(", "encoder_out", "[", "key", "]", ",", "new_order", ")", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.composite_encoder.CompositeEncoder.max_positions": [[51, 53], ["min", "composite_encoder.CompositeEncoder.encoders[].max_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "[", "self", ".", "encoders", "[", "key", "]", ".", "max_positions", "(", ")", "for", "key", "in", "self", ".", "encoders", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.composite_encoder.CompositeEncoder.upgrade_state_dict": [[54, 58], ["composite_encoder.CompositeEncoder.encoders[].upgrade_state_dict"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.upgrade_state_dict"], ["", "def", "upgrade_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "encoders", ":", "\n", "            ", "self", ".", "encoders", "[", "key", "]", ".", "upgrade_state_dict", "(", "state_dict", ")", "\n", "", "return", "state_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_decoder.FairseqDecoder.__init__": [[15, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_decoder.FairseqDecoder.forward": [[19, 35], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prev_output_tokens (LongTensor): previous decoder outputs of shape\n                `(batch, tgt_len)`, for input feeding/teacher forcing\n            encoder_out (Tensor, optional): output from the encoder, used for\n                encoder-side attention\n\n        Returns:\n            tuple:\n                - the last decoder layer's output of shape\n                  `(batch, tgt_len, vocab)`\n                - the last decoder layer's attention weights of shape\n                  `(batch, tgt_len, src_len)`\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_decoder.FairseqDecoder.get_normalized_probs": [[36, 49], ["net_output[].float", "hasattr", "fairseq_decoder.FairseqDecoder.adaptive_softmax.get_log_prob", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "fairseq_decoder.FairseqDecoder.exp_"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.adaptive_softmax.AdaptiveSoftmax.get_log_prob"], ["", "def", "get_normalized_probs", "(", "self", ",", "net_output", ",", "log_probs", ",", "sample", ")", ":", "\n", "        ", "\"\"\"Get normalized probabilities (or log probs) from a net's output.\"\"\"", "\n", "\n", "if", "hasattr", "(", "self", ",", "'adaptive_softmax'", ")", "and", "self", ".", "adaptive_softmax", "is", "not", "None", ":", "\n", "            ", "assert", "sample", "is", "not", "None", "and", "'target'", "in", "sample", "\n", "out", "=", "self", ".", "adaptive_softmax", ".", "get_log_prob", "(", "net_output", "[", "0", "]", ",", "sample", "[", "'target'", "]", ")", "\n", "return", "out", ".", "exp_", "(", ")", "if", "not", "log_probs", "else", "out", "\n", "\n", "", "logits", "=", "net_output", "[", "0", "]", ".", "float", "(", ")", "\n", "if", "log_probs", ":", "\n", "            ", "return", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_decoder.FairseqDecoder.max_positions": [[50, 53], ["None"], "methods", ["None"], ["", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the decoder.\"\"\"", "\n", "return", "1e6", "# an arbitrary large number", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_decoder.FairseqDecoder.upgrade_state_dict": [[54, 57], ["None"], "methods", ["None"], ["", "def", "upgrade_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Upgrade a (possibly old) state dict for new versions of fairseq.\"\"\"", "\n", "return", "state_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerModel.__init__": [[46, 48], ["FairseqModel.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerModel.add_args": [[49, 96], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--attention-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for attention weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--relu-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability after ReLU in FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained encoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-ffn-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension for FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num encoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-attention-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num encoder attention heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-normalize-before'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply layernorm before each encoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-learned-pos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use learned positional embeddings in the encoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained decoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-ffn-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension for FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder attention heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-learned-pos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use learned positional embeddings in the decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-normalize-before'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply layernorm before each decoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoder-input-output-embed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoder input and output embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-all-embeddings'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share encoder, decoder and output embeddings'", "\n", "' (requires shared dictionary and embed dim)'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", ",", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'sets adaptive softmax dropout for the tail projections'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerModel.build_model": [[97, 146], ["transformer.base_architecture", "transformer.TransformerEncoder", "transformer.TransformerDecoder", "transformer.TransformerModel", "hasattr", "hasattr", "len", "dictionary.pad", "transformer.Embedding", "transformer.TransformerModel.build_model.build_embedding"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "\n", "# make sure all arguments are present in older models", "\n", "base_architecture", "(", "args", ")", "\n", "\n", "if", "not", "hasattr", "(", "args", ",", "'max_source_positions'", ")", ":", "\n", "            ", "args", ".", "max_source_positions", "=", "1024", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'max_target_positions'", ")", ":", "\n", "            ", "args", ".", "max_target_positions", "=", "1024", "\n", "\n", "", "src_dict", ",", "tgt_dict", "=", "task", ".", "source_dictionary", ",", "task", ".", "target_dictionary", "\n", "\n", "def", "build_embedding", "(", "dictionary", ",", "embed_dim", ",", "path", "=", "None", ")", ":", "\n", "            ", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "emb", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "# if provided, load from preloaded dictionaries", "\n", "if", "path", ":", "\n", "                ", "embed_dict", "=", "utils", ".", "parse_embedding", "(", "path", ")", "\n", "utils", ".", "load_embedding", "(", "embed_dict", ",", "dictionary", ",", "emb", ")", "\n", "", "return", "emb", "\n", "\n", "", "if", "args", ".", "share_all_embeddings", ":", "\n", "            ", "if", "src_dict", "!=", "tgt_dict", ":", "\n", "                ", "raise", "RuntimeError", "(", "'--share-all-embeddings requires a joined dictionary'", ")", "\n", "", "if", "args", ".", "encoder_embed_dim", "!=", "args", ".", "decoder_embed_dim", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'--share-all-embeddings requires --encoder-embed-dim to match --decoder-embed-dim'", ")", "\n", "", "if", "args", ".", "decoder_embed_path", "and", "(", "\n", "args", ".", "decoder_embed_path", "!=", "args", ".", "encoder_embed_path", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "'--share-all-embeddings not compatible with --decoder-embed-path'", ")", "\n", "", "encoder_embed_tokens", "=", "build_embedding", "(", "\n", "src_dict", ",", "args", ".", "encoder_embed_dim", ",", "args", ".", "encoder_embed_path", "\n", ")", "\n", "decoder_embed_tokens", "=", "encoder_embed_tokens", "\n", "args", ".", "share_decoder_input_output_embed", "=", "True", "\n", "", "else", ":", "\n", "            ", "encoder_embed_tokens", "=", "build_embedding", "(", "\n", "src_dict", ",", "args", ".", "encoder_embed_dim", ",", "args", ".", "encoder_embed_path", "\n", ")", "\n", "decoder_embed_tokens", "=", "build_embedding", "(", "\n", "tgt_dict", ",", "args", ".", "decoder_embed_dim", ",", "args", ".", "decoder_embed_path", "\n", ")", "\n", "\n", "", "encoder", "=", "TransformerEncoder", "(", "args", ",", "src_dict", ",", "encoder_embed_tokens", ")", "\n", "decoder", "=", "TransformerDecoder", "(", "args", ",", "tgt_dict", ",", "decoder_embed_tokens", ")", "\n", "return", "TransformerModel", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.__init__": [[150, 152], ["FairseqLanguageModel.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.add_args": [[153, 194], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--attention-dropout'", ",", "default", "=", "0.", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for attention weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--relu-dropout'", ",", "default", "=", "0.", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability after ReLU in FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-output-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-input-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder input dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-ffn-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension for FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder attention heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-normalize-before'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply layernorm before each decoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'sets adaptive softmax dropout for the tail projections'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-token-positional-embeddings'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, disables positional embeddings (outside self attention)'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoder-input-output-embed'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoder input and output embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--character-embeddings'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, uses character embedding convolutions to produce token embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--character-filters'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "default", "=", "'[(1, 64), (2, 128), (3, 192), (4, 256), (5, 256), (6, 256), (7, 256)]'", ",", "\n", "help", "=", "'size of character embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--character-embedding-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "default", "=", "4", ",", "\n", "help", "=", "'size of character embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--char-embedder-highway-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of highway layers for character token embeddder'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerLanguageModel.build_model": [[195, 218], ["transformer.base_lm_architecture", "transformer.TransformerDecoder", "transformer.TransformerLanguageModel", "hasattr", "hasattr", "fairseq.modules.CharacterTokenEmbedder", "transformer.Embedding", "eval", "len", "task.dictionary.pad"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_lm_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "\n", "# make sure all arguments are present in older models", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n", "if", "not", "hasattr", "(", "args", ",", "'max_source_positions'", ")", ":", "\n", "            ", "args", ".", "max_source_positions", "=", "args", ".", "tokens_per_sample", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'max_target_positions'", ")", ":", "\n", "            ", "args", ".", "max_target_positions", "=", "args", ".", "tokens_per_sample", "\n", "\n", "", "if", "args", ".", "character_embeddings", ":", "\n", "            ", "embed_tokens", "=", "CharacterTokenEmbedder", "(", "task", ".", "dictionary", ",", "eval", "(", "args", ".", "character_filters", ")", ",", "\n", "args", ".", "character_embedding_dim", ",", "\n", "args", ".", "decoder_embed_dim", ",", "\n", "args", ".", "char_embedder_highway_layers", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "embed_tokens", "=", "Embedding", "(", "len", "(", "task", ".", "dictionary", ")", ",", "args", ".", "decoder_input_dim", ",", "task", ".", "dictionary", ".", "pad", "(", ")", ")", "\n", "\n", "", "decoder", "=", "TransformerDecoder", "(", "args", ",", "task", ".", "output_dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "True", ",", "final_norm", "=", "False", ")", "\n", "return", "TransformerLanguageModel", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerEncoder.__init__": [[233, 258], ["FairseqEncoder.__init__", "math.sqrt", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "transformer.TransformerEncoder.layers.extend", "transformer.TransformerEncoder.register_buffer", "transformer.PositionalEmbedding", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "transformer.LayerNorm", "transformer.TransformerEncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.PositionalEmbedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm"], ["def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ",", "left_pad", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "\n", "embed_dim", "=", "embed_tokens", ".", "embedding_dim", "\n", "self", ".", "padding_idx", "=", "embed_tokens", ".", "padding_idx", "\n", "self", ".", "max_source_positions", "=", "args", ".", "max_source_positions", "\n", "\n", "self", ".", "embed_tokens", "=", "embed_tokens", "\n", "self", ".", "embed_scale", "=", "math", ".", "sqrt", "(", "embed_dim", ")", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "args", ".", "max_source_positions", ",", "embed_dim", ",", "self", ".", "padding_idx", ",", "\n", "left_pad", "=", "left_pad", ",", "\n", "learned", "=", "args", ".", "encoder_learned_pos", ",", "\n", ")", "if", "not", "args", ".", "no_token_positional_embeddings", "else", "None", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "layers", ".", "extend", "(", "[", "\n", "TransformerEncoderLayer", "(", "args", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "encoder_layers", ")", "\n", "]", ")", "\n", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "normalize", "=", "args", ".", "encoder_normalize_before", "\n", "if", "self", ".", "normalize", ":", "\n", "           ", "self", ".", "layer_norm", "=", "LayerNorm", "(", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerEncoder.forward": [[259, 298], ["torch.dropout", "torch.dropout", "torch.dropout", "transformer.TransformerEncoder.transpose", "src_tokens.eq", "transformer.TransformerEncoder.embed_tokens", "transformer.TransformerEncoder.embed_positions", "src_tokens.eq.any", "layer", "transformer.TransformerEncoder.layer_norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            src_tokens (LongTensor): tokens in the source language of shape\n                `(batch, src_len)`\n            src_lengths (torch.LongTensor): lengths of each source sentence of\n                shape `(batch)`\n\n        Returns:\n            dict:\n                - **encoder_out** (Tensor): the last encoder layer's output of\n                  shape `(src_len, batch, embed_dim)`\n                - **encoder_padding_mask** (ByteTensor): the positions of\n                  padding elements of shape `(batch, src_len)`\n        \"\"\"", "\n", "# embed tokens and positions", "\n", "x", "=", "self", ".", "embed_scale", "*", "self", ".", "embed_tokens", "(", "src_tokens", ")", "\n", "if", "self", ".", "embed_positions", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "embed_positions", "(", "src_tokens", ")", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# compute padding mask", "\n", "encoder_padding_mask", "=", "src_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", "\n", "if", "not", "encoder_padding_mask", ".", "any", "(", ")", ":", "\n", "            ", "encoder_padding_mask", "=", "None", "\n", "\n", "# encoder layers", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "encoder_padding_mask", ")", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "", "return", "{", "\n", "'encoder_out'", ":", "x", ",", "# T x B x C", "\n", "'encoder_padding_mask'", ":", "encoder_padding_mask", ",", "# B x T", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerEncoder.reorder_encoder_out": [[300, 318], ["encoder_out[].index_select", "encoder_out[].index_select"], "methods", ["None"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"\n        Reorder encoder output according to *new_order*.\n\n        Args:\n            encoder_out: output from the ``forward()`` method\n            new_order (LongTensor): desired order\n\n        Returns:\n            *encoder_out* rearranged according to *new_order*\n        \"\"\"", "\n", "if", "encoder_out", "[", "'encoder_out'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_out'", "]", "=", "encoder_out", "[", "'encoder_out'", "]", ".", "index_select", "(", "1", ",", "new_order", ")", "\n", "", "if", "encoder_out", "[", "'encoder_padding_mask'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_padding_mask'", "]", "=", "encoder_out", "[", "'encoder_padding_mask'", "]", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerEncoder.max_positions": [[319, 324], ["min", "transformer.TransformerEncoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "if", "self", ".", "embed_positions", "is", "None", ":", "\n", "            ", "return", "self", ".", "max_source_positions", "\n", "", "return", "min", "(", "self", ".", "max_source_positions", ",", "self", ".", "embed_positions", ".", "max_positions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerEncoder.upgrade_state_dict": [[325, 337], ["isinstance", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "fairseq.utils.item", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "state_dict.get", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["", "def", "upgrade_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Upgrade a (possibly old) state dict for new versions of fairseq.\"\"\"", "\n", "if", "isinstance", "(", "self", ".", "embed_positions", ",", "SinusoidalPositionalEmbedding", ")", ":", "\n", "            ", "if", "'encoder.embed_positions.weights'", "in", "state_dict", ":", "\n", "                ", "del", "state_dict", "[", "'encoder.embed_positions.weights'", "]", "\n", "", "state_dict", "[", "'encoder.embed_positions._float_tensor'", "]", "=", "torch", ".", "FloatTensor", "(", "1", ")", "\n", "", "if", "utils", ".", "item", "(", "state_dict", ".", "get", "(", "'encoder.version'", ",", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ")", "[", "0", "]", ")", "<", "2", ":", "\n", "# earlier checkpoints did not normalize after the stack of layers", "\n", "            ", "self", ".", "layer_norm", "=", "None", "\n", "self", ".", "normalize", "=", "False", "\n", "state_dict", "[", "'encoder.version'", "]", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.__init__": [[354, 402], ["FairseqIncrementalDecoder.__init__", "math.sqrt", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "transformer.TransformerDecoder.layers.extend", "transformer.TransformerDecoder.register_buffer", "transformer.Linear", "transformer.PositionalEmbedding", "transformer.Linear", "fairseq.modules.AdaptiveSoftmax", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "transformer.LayerNorm", "transformer.TransformerDecoderLayer", "len", "fairseq.options.eval_str_list", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.PositionalEmbedding", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.options.eval_str_list"], ["def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "False", ",", "left_pad", "=", "False", ",", "final_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "share_input_output_embed", "=", "args", ".", "share_decoder_input_output_embed", "\n", "\n", "input_embed_dim", "=", "embed_tokens", ".", "embedding_dim", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", "\n", "output_embed_dim", "=", "args", ".", "decoder_output_dim", "\n", "\n", "padding_idx", "=", "embed_tokens", ".", "padding_idx", "\n", "self", ".", "max_target_positions", "=", "args", ".", "max_target_positions", "\n", "\n", "self", ".", "embed_tokens", "=", "embed_tokens", "\n", "self", ".", "embed_scale", "=", "math", ".", "sqrt", "(", "embed_dim", ")", "# todo: try with input_embed_dim", "\n", "\n", "self", ".", "project_in_dim", "=", "Linear", "(", "input_embed_dim", ",", "embed_dim", ",", "bias", "=", "False", ",", "\n", "uniform", "=", "False", ")", "if", "embed_dim", "!=", "input_embed_dim", "else", "None", "\n", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "args", ".", "max_target_positions", ",", "embed_dim", ",", "padding_idx", ",", "\n", "left_pad", "=", "left_pad", ",", "\n", "learned", "=", "args", ".", "decoder_learned_pos", ",", "\n", ")", "if", "not", "args", ".", "no_token_positional_embeddings", "else", "None", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "layers", ".", "extend", "(", "[", "\n", "TransformerDecoderLayer", "(", "args", ",", "no_encoder_attn", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "decoder_layers", ")", "\n", "]", ")", "\n", "\n", "self", ".", "adaptive_softmax", "=", "None", "\n", "\n", "self", ".", "project_out_dim", "=", "Linear", "(", "embed_dim", ",", "output_embed_dim", ",", "\n", "bias", "=", "False", ",", "uniform", "=", "False", ")", "if", "embed_dim", "!=", "output_embed_dim", "else", "None", "\n", "\n", "if", "args", ".", "adaptive_softmax_cutoff", "is", "not", "None", ":", "\n", "            ", "self", ".", "adaptive_softmax", "=", "AdaptiveSoftmax", "(", "\n", "len", "(", "dictionary", ")", ",", "output_embed_dim", ",", "\n", "options", ".", "eval_str_list", "(", "args", ".", "adaptive_softmax_cutoff", ",", "type", "=", "int", ")", ",", "\n", "dropout", "=", "args", ".", "adaptive_softmax_dropout", ",", "\n", ")", "\n", "", "elif", "not", "self", ".", "share_input_output_embed", ":", "\n", "            ", "self", ".", "embed_out", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "dictionary", ")", ",", "output_embed_dim", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_out", ",", "mean", "=", "0", ",", "std", "=", "output_embed_dim", "**", "-", "0.5", ")", "\n", "", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "normalize", "=", "args", ".", "decoder_normalize_before", "and", "final_norm", "\n", "if", "self", ".", "normalize", ":", "\n", "           ", "self", ".", "layer_norm", "=", "LayerNorm", "(", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.forward": [[403, 475], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.linear.transpose", "torch.linear.transpose", "transformer.TransformerDecoder.embed_positions", "transformer.TransformerDecoder.embed_tokens", "transformer.TransformerDecoder.project_in_dim", "layer", "inner_states.append", "transformer.TransformerDecoder.layer_norm", "transformer.TransformerDecoder.project_out_dim", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "transformer.TransformerDecoder.buffered_future_mask"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.buffered_future_mask"], ["", "", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", "=", "None", ",", "incremental_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prev_output_tokens (LongTensor): previous decoder outputs of shape\n                `(batch, tgt_len)`, for input feeding/teacher forcing\n            encoder_out (Tensor, optional): output from the encoder, used for\n                encoder-side attention\n            incremental_state (dict): dictionary used for storing state during\n                :ref:`Incremental decoding`\n\n        Returns:\n            tuple:\n                - the last decoder layer's output of shape `(batch, tgt_len,\n                  vocab)`\n                - the last decoder layer's attention weights of shape `(batch,\n                  tgt_len, src_len)`\n        \"\"\"", "\n", "# embed positions", "\n", "positions", "=", "self", ".", "embed_positions", "(", "\n", "prev_output_tokens", ",", "\n", "incremental_state", "=", "incremental_state", ",", "\n", ")", "if", "self", ".", "embed_positions", "is", "not", "None", "else", "None", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "prev_output_tokens", "=", "prev_output_tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "if", "positions", "is", "not", "None", ":", "\n", "                ", "positions", "=", "positions", "[", ":", ",", "-", "1", ":", "]", "\n", "\n", "# embed tokens and positions", "\n", "", "", "x", "=", "self", ".", "embed_scale", "*", "self", ".", "embed_tokens", "(", "prev_output_tokens", ")", "\n", "\n", "if", "self", ".", "project_in_dim", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "project_in_dim", "(", "x", ")", "\n", "\n", "", "if", "positions", "is", "not", "None", ":", "\n", "            ", "x", "+=", "positions", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "attn", "=", "None", "\n", "\n", "inner_states", "=", "[", "x", "]", "\n", "\n", "# decoder layers", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", ",", "attn", "=", "layer", "(", "\n", "x", ",", "\n", "encoder_out", "[", "'encoder_out'", "]", "if", "encoder_out", "is", "not", "None", "else", "None", ",", "\n", "encoder_out", "[", "'encoder_padding_mask'", "]", "if", "encoder_out", "is", "not", "None", "else", "None", ",", "\n", "incremental_state", ",", "\n", "self_attn_mask", "=", "self", ".", "buffered_future_mask", "(", "x", ")", "if", "incremental_state", "is", "None", "else", "None", ",", "\n", ")", "\n", "inner_states", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "project_out_dim", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "project_out_dim", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "adaptive_softmax", "is", "None", ":", "\n", "# project back to size of vocabulary", "\n", "            ", "if", "self", ".", "share_input_output_embed", ":", "\n", "                ", "x", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "embed_tokens", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "embed_out", ")", "\n", "\n", "", "", "return", "x", ",", "{", "'attn'", ":", "attn", ",", "'inner_states'", ":", "inner_states", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions": [[476, 481], ["min", "transformer.TransformerDecoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum output length supported by the decoder.\"\"\"", "\n", "if", "self", ".", "embed_positions", "is", "None", ":", "\n", "            ", "return", "self", ".", "max_target_positions", "\n", "", "return", "min", "(", "self", ".", "max_target_positions", ",", "self", ".", "embed_positions", ".", "max_positions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.buffered_future_mask": [[482, 489], ["tensor.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "transformer.TransformerDecoder._future_mask.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "hasattr", "fairseq.utils.fill_with_neg_inf", "fairseq.utils.fill_with_neg_inf", "tensor.new", "transformer.TransformerDecoder._future_mask.resize_"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.fill_with_neg_inf", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.fill_with_neg_inf"], ["", "def", "buffered_future_mask", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "dim", "=", "tensor", ".", "size", "(", "0", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "'_future_mask'", ")", "or", "self", ".", "_future_mask", "is", "None", "or", "self", ".", "_future_mask", ".", "device", "!=", "tensor", ".", "device", ":", "\n", "            ", "self", ".", "_future_mask", "=", "torch", ".", "triu", "(", "utils", ".", "fill_with_neg_inf", "(", "tensor", ".", "new", "(", "dim", ",", "dim", ")", ")", ",", "1", ")", "\n", "", "if", "self", ".", "_future_mask", ".", "size", "(", "0", ")", "<", "dim", ":", "\n", "            ", "self", ".", "_future_mask", "=", "torch", ".", "triu", "(", "utils", ".", "fill_with_neg_inf", "(", "self", ".", "_future_mask", ".", "resize_", "(", "dim", ",", "dim", ")", ")", ",", "1", ")", "\n", "", "return", "self", ".", "_future_mask", "[", ":", "dim", ",", ":", "dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoder.upgrade_state_dict": [[490, 518], ["isinstance", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "layer_norm_map.items", "fairseq.utils.item", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "state_dict.get", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["", "def", "upgrade_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Upgrade a (possibly old) state dict for new versions of fairseq.\"\"\"", "\n", "if", "isinstance", "(", "self", ".", "embed_positions", ",", "SinusoidalPositionalEmbedding", ")", ":", "\n", "            ", "if", "'decoder.embed_positions.weights'", "in", "state_dict", ":", "\n", "                ", "del", "state_dict", "[", "'decoder.embed_positions.weights'", "]", "\n", "", "state_dict", "[", "'decoder.embed_positions._float_tensor'", "]", "=", "torch", ".", "FloatTensor", "(", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers", ")", ")", ":", "\n", "# update layer norms", "\n", "            ", "layer_norm_map", "=", "{", "\n", "'0'", ":", "'self_attn_layer_norm'", ",", "\n", "'1'", ":", "'encoder_attn_layer_norm'", ",", "\n", "'2'", ":", "'final_layer_norm'", "\n", "}", "\n", "for", "old", ",", "new", "in", "layer_norm_map", ".", "items", "(", ")", ":", "\n", "                ", "for", "m", "in", "(", "'weight'", ",", "'bias'", ")", ":", "\n", "                    ", "k", "=", "'decoder.layers.{}.layer_norms.{}.{}'", ".", "format", "(", "i", ",", "old", ",", "m", ")", "\n", "if", "k", "in", "state_dict", ":", "\n", "                        ", "state_dict", "[", "'decoder.layers.{}.{}.{}'", ".", "format", "(", "i", ",", "new", ",", "m", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "del", "state_dict", "[", "k", "]", "\n", "", "", "", "", "if", "utils", ".", "item", "(", "state_dict", ".", "get", "(", "'decoder.version'", ",", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ")", "[", "0", "]", ")", "<", "2", ":", "\n", "# earlier checkpoints did not normalize after the stack of layers", "\n", "            ", "self", ".", "layer_norm", "=", "None", "\n", "self", ".", "normalize", "=", "False", "\n", "state_dict", "[", "'decoder.version'", "]", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", "\n", "\n", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerEncoderLayer.__init__": [[535, 548], ["torch.Module.__init__", "fairseq.modules.MultiheadAttention", "transformer.Linear", "transformer.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "transformer.LayerNorm", "range"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "args", ".", "encoder_embed_dim", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "\n", "self", ".", "embed_dim", ",", "args", ".", "encoder_attention_heads", ",", "\n", "dropout", "=", "args", ".", "attention_dropout", ",", "\n", ")", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "relu_dropout", "=", "args", ".", "relu_dropout", "\n", "self", ".", "normalize_before", "=", "args", ".", "encoder_normalize_before", "\n", "self", ".", "fc1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "args", ".", "encoder_ffn_embed_dim", ")", "\n", "self", ".", "fc2", "=", "Linear", "(", "args", ".", "encoder_ffn_embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "layer_norms", "=", "nn", ".", "ModuleList", "(", "[", "LayerNorm", "(", "self", ".", "embed_dim", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerEncoderLayer.forward": [[549, 575], ["transformer.TransformerEncoderLayer.maybe_layer_norm", "transformer.TransformerEncoderLayer.self_attn", "torch.dropout", "torch.dropout", "torch.dropout", "transformer.TransformerEncoderLayer.maybe_layer_norm", "transformer.TransformerEncoderLayer.maybe_layer_norm", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "transformer.TransformerEncoderLayer.fc2", "torch.dropout", "torch.dropout", "torch.dropout", "transformer.TransformerEncoderLayer.maybe_layer_norm", "transformer.TransformerEncoderLayer.fc1"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm"], ["", "def", "forward", "(", "self", ",", "x", ",", "encoder_padding_mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (Tensor): input to the layer of shape `(seq_len, batch, embed_dim)`\n            encoder_padding_mask (ByteTensor): binary ByteTensor of shape\n                `(batch, src_len)` where padding elements are indicated by ``1``.\n\n        Returns:\n            encoded output of shape `(batch, src_len, embed_dim)`\n        \"\"\"", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "0", ",", "x", ",", "before", "=", "True", ")", "\n", "x", ",", "_", "=", "self", ".", "self_attn", "(", "query", "=", "x", ",", "key", "=", "x", ",", "value", "=", "x", ",", "key_padding_mask", "=", "encoder_padding_mask", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "0", ",", "x", ",", "after", "=", "True", ")", "\n", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "1", ",", "x", ",", "before", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "relu_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "1", ",", "x", ",", "after", "=", "True", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerEncoderLayer.maybe_layer_norm": [[576, 582], ["None"], "methods", ["None"], ["", "def", "maybe_layer_norm", "(", "self", ",", "i", ",", "x", ",", "before", "=", "False", ",", "after", "=", "False", ")", ":", "\n", "        ", "assert", "before", "^", "after", "\n", "if", "after", "^", "self", ".", "normalize_before", ":", "\n", "            ", "return", "self", ".", "layer_norms", "[", "i", "]", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.__init__": [[601, 631], ["torch.Module.__init__", "fairseq.modules.MultiheadAttention", "transformer.LayerNorm", "transformer.Linear", "transformer.Linear", "transformer.LayerNorm", "fairseq.modules.MultiheadAttention", "transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm"], ["def", "__init__", "(", "self", ",", "args", ",", "no_encoder_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "args", ".", "decoder_embed_dim", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "\n", "self", ".", "embed_dim", ",", "args", ".", "decoder_attention_heads", ",", "\n", "dropout", "=", "args", ".", "attention_dropout", ",", "\n", ")", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "relu_dropout", "=", "args", ".", "relu_dropout", "\n", "self", ".", "normalize_before", "=", "args", ".", "decoder_normalize_before", "\n", "\n", "self", ".", "self_attn_layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ")", "\n", "\n", "if", "no_encoder_attn", ":", "\n", "            ", "self", ".", "encoder_attn", "=", "None", "\n", "self", ".", "encoder_attn_layer_norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder_attn", "=", "MultiheadAttention", "(", "\n", "self", ".", "embed_dim", ",", "args", ".", "decoder_attention_heads", ",", "\n", "dropout", "=", "args", ".", "attention_dropout", ",", "\n", ")", "\n", "self", ".", "encoder_attn_layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ")", "\n", "\n", "", "self", ".", "fc1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "args", ".", "decoder_ffn_embed_dim", ")", "\n", "self", ".", "fc2", "=", "Linear", "(", "args", ".", "decoder_ffn_embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "\n", "self", ".", "final_layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ")", "\n", "self", ".", "need_attn", "=", "True", "\n", "\n", "self", ".", "onnx_trace", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.prepare_for_onnx_export_": [[632, 634], ["None"], "methods", ["None"], ["", "def", "prepare_for_onnx_export_", "(", "self", ")", ":", "\n", "        ", "self", ".", "onnx_trace", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.forward": [[635, 704], ["transformer.TransformerDecoderLayer.maybe_layer_norm", "transformer.TransformerDecoderLayer.self_attn", "torch.dropout", "torch.dropout", "torch.dropout", "transformer.TransformerDecoderLayer.maybe_layer_norm", "transformer.TransformerDecoderLayer.maybe_layer_norm", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "transformer.TransformerDecoderLayer.fc2", "torch.dropout", "torch.dropout", "torch.dropout", "transformer.TransformerDecoderLayer.maybe_layer_norm", "transformer.TransformerDecoderLayer.self_attn._set_input_buffer", "transformer.TransformerDecoderLayer.maybe_layer_norm", "transformer.TransformerDecoderLayer.encoder_attn", "torch.dropout", "torch.dropout", "torch.dropout", "transformer.TransformerDecoderLayer.maybe_layer_norm", "transformer.TransformerDecoderLayer.fc1", "transformer.TransformerDecoderLayer.self_attn._get_input_buffer", "transformer.TransformerDecoderLayer.encoder_attn._set_input_buffer"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._set_input_buffer", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._get_input_buffer", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.linearized_convolution.LinearizedConvolution._set_input_buffer"], ["", "def", "forward", "(", "self", ",", "x", ",", "encoder_out", ",", "encoder_padding_mask", ",", "incremental_state", ",", "\n", "prev_self_attn_state", "=", "None", ",", "prev_attn_state", "=", "None", ",", "self_attn_mask", "=", "None", ",", "\n", "self_attn_padding_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (Tensor): input to the layer of shape `(seq_len, batch, embed_dim)`\n            encoder_padding_mask (ByteTensor): binary ByteTensor of shape\n                `(batch, src_len)` where padding elements are indicated by ``1``.\n\n        Returns:\n            encoded output of shape `(batch, src_len, embed_dim)`\n        \"\"\"", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "self_attn_layer_norm", ",", "x", ",", "before", "=", "True", ")", "\n", "if", "prev_self_attn_state", "is", "not", "None", ":", "\n", "            ", "if", "incremental_state", "is", "None", ":", "\n", "                ", "incremental_state", "=", "{", "}", "\n", "", "prev_key", ",", "prev_value", "=", "prev_self_attn_state", "\n", "saved_state", "=", "{", "\"prev_key\"", ":", "prev_key", ",", "\"prev_value\"", ":", "prev_value", "}", "\n", "self", ".", "self_attn", ".", "_set_input_buffer", "(", "incremental_state", ",", "saved_state", ")", "\n", "", "x", ",", "_", "=", "self", ".", "self_attn", "(", "\n", "query", "=", "x", ",", "\n", "key", "=", "x", ",", "\n", "value", "=", "x", ",", "\n", "key_padding_mask", "=", "self_attn_padding_mask", ",", "\n", "incremental_state", "=", "incremental_state", ",", "\n", "need_weights", "=", "False", ",", "\n", "attn_mask", "=", "self_attn_mask", ",", "\n", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "self_attn_layer_norm", ",", "x", ",", "after", "=", "True", ")", "\n", "\n", "attn", "=", "None", "\n", "if", "self", ".", "encoder_attn", "is", "not", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "encoder_attn_layer_norm", ",", "x", ",", "before", "=", "True", ")", "\n", "if", "prev_attn_state", "is", "not", "None", ":", "\n", "                ", "if", "incremental_state", "is", "None", ":", "\n", "                    ", "incremental_state", "=", "{", "}", "\n", "", "prev_key", ",", "prev_value", "=", "prev_attn_state", "\n", "saved_state", "=", "{", "\"prev_key\"", ":", "prev_key", ",", "\"prev_value\"", ":", "prev_value", "}", "\n", "self", ".", "encoder_attn", ".", "_set_input_buffer", "(", "incremental_state", ",", "saved_state", ")", "\n", "", "x", ",", "attn", "=", "self", ".", "encoder_attn", "(", "\n", "query", "=", "x", ",", "\n", "key", "=", "encoder_out", ",", "\n", "value", "=", "encoder_out", ",", "\n", "key_padding_mask", "=", "encoder_padding_mask", ",", "\n", "incremental_state", "=", "incremental_state", ",", "\n", "static_kv", "=", "True", ",", "\n", "need_weights", "=", "(", "not", "self", ".", "training", "and", "self", ".", "need_attn", ")", ",", "\n", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "encoder_attn_layer_norm", ",", "x", ",", "after", "=", "True", ")", "\n", "\n", "", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "final_layer_norm", ",", "x", ",", "before", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "relu_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "final_layer_norm", ",", "x", ",", "after", "=", "True", ")", "\n", "if", "self", ".", "onnx_trace", ":", "\n", "            ", "saved_state", "=", "self", ".", "self_attn", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "self_attn_state", "=", "saved_state", "[", "\"prev_key\"", "]", ",", "saved_state", "[", "\"prev_value\"", "]", "\n", "return", "x", ",", "attn", ",", "self_attn_state", "\n", "", "return", "x", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.maybe_layer_norm": [[705, 711], ["layer_norm"], "methods", ["None"], ["", "def", "maybe_layer_norm", "(", "self", ",", "layer_norm", ",", "x", ",", "before", "=", "False", ",", "after", "=", "False", ")", ":", "\n", "        ", "assert", "before", "^", "after", "\n", "if", "after", "^", "self", ".", "normalize_before", ":", "\n", "            ", "return", "layer_norm", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.TransformerDecoderLayer.make_generation_fast_": [[712, 714], ["None"], "methods", ["None"], ["", "", "def", "make_generation_fast_", "(", "self", ",", "need_attn", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "need_attn", "=", "need_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding": [[716, 721], ["torch.Embedding", "torch.init.normal_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Embedding"], ["", "", "def", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "embedding_dim", "**", "-", "0.5", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm": [[723, 726], ["torch.LayerNorm"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.LayerNorm"], ["", "def", "LayerNorm", "(", "embedding_dim", ")", ":", "\n", "    ", "m", "=", "nn", ".", "LayerNorm", "(", "embedding_dim", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear": [[728, 737], ["torch.Linear", "torch.init.xavier_uniform_", "torch.init.xavier_normal_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.Linear"], ["", "def", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "uniform", "=", "True", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "if", "uniform", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "", "if", "bias", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.PositionalEmbedding": [[739, 747], ["fairseq.modules.LearnedPositionalEmbedding", "torch.init.normal_", "torch.init.constant_", "fairseq.modules.SinusoidalPositionalEmbedding"], "function", ["None"], ["", "def", "PositionalEmbedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ",", "left_pad", ",", "learned", "=", "False", ")", ":", "\n", "    ", "if", "learned", ":", "\n", "        ", "m", "=", "LearnedPositionalEmbedding", "(", "num_embeddings", "+", "padding_idx", "+", "1", ",", "embedding_dim", ",", "padding_idx", ",", "left_pad", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "embedding_dim", "**", "-", "0.5", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "m", "=", "SinusoidalPositionalEmbedding", "(", "embedding_dim", ",", "padding_idx", ",", "left_pad", ",", "num_embeddings", "+", "padding_idx", "+", "1", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_lm_architecture": [[749, 766], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm'", ")", "\n", "def", "base_lm_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "2048", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "6", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "8", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "'adaptive_softmax_dropout'", ",", "0", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "'decoder_learned_pos'", ",", "False", ")", "\n", "\n", "args", ".", "character_embeddings", "=", "getattr", "(", "args", ",", "'character_embeddings'", ",", "False", ")", "\n", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "args", ",", "'decoder_output_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "'decoder_input_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "\n", "# The model training is not stable without this", "\n", "args", ".", "decoder_normalize_before", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_lm_big": [[767, 773], ["register_model_architecture", "getattr", "getattr", "getattr", "transformer.base_lm_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_lm_architecture"], ["", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_big'", ")", "\n", "def", "transformer_lm_big", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "1024", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "4096", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "16", ")", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_lm_wiki103": [[775, 779], ["register_model_architecture", "getattr", "transformer.transformer_lm_big"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_lm_big"], ["", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_wiki103'", ")", "\n", "def", "transformer_lm_wiki103", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.3", ")", "\n", "transformer_lm_big", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_lm_gbw": [[781, 787], ["register_model_architecture", "getattr", "getattr", "getattr", "transformer.transformer_lm_big"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_lm_big"], ["", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_gbw'", ")", "\n", "def", "transformer_lm_gbw", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "transformer_lm_big", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture": [[789, 816], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "'transformer'", ",", "'transformer'", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "'encoder_embed_path'", ",", "None", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "2048", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "6", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "8", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "'encoder_normalize_before'", ",", "False", ")", "\n", "args", ".", "encoder_learned_pos", "=", "getattr", "(", "args", ",", "'encoder_learned_pos'", ",", "False", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "'decoder_embed_path'", ",", "None", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "args", ".", "encoder_ffn_embed_dim", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "6", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "8", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "'decoder_normalize_before'", ",", "False", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "'decoder_learned_pos'", ",", "False", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.", ")", "\n", "args", ".", "relu_dropout", "=", "getattr", "(", "args", ",", "'relu_dropout'", ",", "0.", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "'adaptive_softmax_dropout'", ",", "0", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "args", ",", "'share_decoder_input_output_embed'", ",", "False", ")", "\n", "args", ".", "share_all_embeddings", "=", "getattr", "(", "args", ",", "'share_all_embeddings'", ",", "False", ")", "\n", "args", ".", "no_token_positional_embeddings", "=", "getattr", "(", "args", ",", "'no_token_positional_embeddings'", ",", "False", ")", "\n", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "args", ",", "'decoder_output_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "'decoder_input_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_iwslt_de_en": [[818, 829], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "transformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'transformer'", ",", "'transformer_iwslt_de_en'", ")", "\n", "def", "transformer_iwslt_de_en", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "1024", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "4", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "6", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "1024", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "4", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "6", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_wmt_en_de": [[831, 834], ["register_model_architecture", "transformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'transformer'", ",", "'transformer_wmt_en_de'", ")", "\n", "def", "transformer_wmt_en_de", "(", "args", ")", ":", "\n", "    ", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_vaswani_wmt_en_de_big": [[837, 848], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "transformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.base_architecture"], ["", "@", "register_model_architecture", "(", "'transformer'", ",", "'transformer_vaswani_wmt_en_de_big'", ")", "\n", "def", "transformer_vaswani_wmt_en_de_big", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "1024", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "4096", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "16", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "'encoder_normalize_before'", ",", "False", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "1024", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "4096", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "16", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.3", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_vaswani_wmt_en_fr_big": [[850, 854], ["register_model_architecture", "getattr", "transformer.transformer_vaswani_wmt_en_de_big"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_vaswani_wmt_en_de_big"], ["", "@", "register_model_architecture", "(", "'transformer'", ",", "'transformer_vaswani_wmt_en_fr_big'", ")", "\n", "def", "transformer_vaswani_wmt_en_fr_big", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "transformer_vaswani_wmt_en_de_big", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_wmt_en_de_big": [[856, 860], ["register_model_architecture", "getattr", "transformer.transformer_vaswani_wmt_en_de_big"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_vaswani_wmt_en_de_big"], ["", "@", "register_model_architecture", "(", "'transformer'", ",", "'transformer_wmt_en_de_big'", ")", "\n", "def", "transformer_wmt_en_de_big", "(", "args", ")", ":", "\n", "    ", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "transformer_vaswani_wmt_en_de_big", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_wmt_en_de_big_t2t": [[863, 870], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "transformer.transformer_vaswani_wmt_en_de_big"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.lyy1994_reformer.models.transformer.transformer_vaswani_wmt_en_de_big"], ["", "@", "register_model_architecture", "(", "'transformer'", ",", "'transformer_wmt_en_de_big_t2t'", ")", "\n", "def", "transformer_wmt_en_de_big_t2t", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "'encoder_normalize_before'", ",", "True", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "'decoder_normalize_before'", ",", "True", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "relu_dropout", "=", "getattr", "(", "args", ",", "'relu_dropout'", ",", "0.1", ")", "\n", "transformer_vaswani_wmt_en_de_big", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.distributed_fairseq_model.DistributedFairseqModel.__init__": [[29, 62], ["BaseFairseqModel.__init__", "isinstance", "ddp_class", "ddp_class", "ValueError", "Exception"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "model", ",", "BaseFairseqModel", ")", "\n", "if", "args", ".", "ddp_backend", "==", "'c10d'", ":", "\n", "            ", "if", "c10d_status", ".", "is_default", ":", "\n", "                ", "ddp_class", "=", "parallel", ".", "DistributedDataParallel", "\n", "", "elif", "c10d_status", ".", "has_c10d", ":", "\n", "                ", "ddp_class", "=", "parallel", ".", "_DistributedDataParallelC10d", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\n", "'Can\\'t find c10d version of DistributedDataParallel. '", "\n", "'Please update PyTorch.'", "\n", ")", "\n", "", "self", ".", "ddp_model", "=", "ddp_class", "(", "\n", "module", "=", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "device_id", "]", ",", "\n", "output_device", "=", "args", ".", "device_id", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "bucket_cap_mb", "=", "args", ".", "bucket_cap_mb", ",", "\n", ")", "\n", "", "elif", "args", ".", "ddp_backend", "==", "'no_c10d'", ":", "\n", "            ", "if", "c10d_status", ".", "is_default", ":", "\n", "                ", "ddp_class", "=", "parallel", ".", "deprecated", ".", "DistributedDataParallel", "\n", "", "else", ":", "\n", "                ", "ddp_class", "=", "parallel", ".", "DistributedDataParallel", "\n", "", "self", ".", "ddp_model", "=", "ddp_class", "(", "\n", "module", "=", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "device_id", "]", ",", "\n", "output_device", "=", "args", ".", "device_id", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown --ddp-backend: '", "+", "args", ".", "ddp_backend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.distributed_fairseq_model.DistributedFairseqModel.__call__": [[63, 65], ["distributed_fairseq_model.DistributedFairseqModel.ddp_model"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "ddp_model", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.distributed_fairseq_model.DistributedFairseqModel.forward": [[66, 68], ["distributed_fairseq_model.DistributedFairseqModel.ddp_model.forward"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.forward"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "ddp_model", ".", "forward", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.models.distributed_fairseq_model.DistributedFairseqModel.__getattr__": [[69, 79], ["distributed_fairseq_model.DistributedFairseqModel.ddp_model.module.__getattr__", "super().__getattr__", "distributed_fairseq_model.DistributedFairseqModel.ddp_model.__getattr__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.distributed_fairseq_model.DistributedFairseqModel.__getattr__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.distributed_fairseq_model.DistributedFairseqModel.__getattr__", "home.repos.pwc.inspect_result.lyy1994_reformer.models.distributed_fairseq_model.DistributedFairseqModel.__getattr__"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "super", "(", ")", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "pass", "\n", "", "try", ":", "\n", "            ", "return", "self", ".", "ddp_model", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "pass", "\n", "", "return", "self", ".", "ddp_model", ".", "module", ".", "__getattr__", "(", "name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.fairseq_criterion.FairseqCriterion.__init__": [[13, 17], ["torch.nn.modules.loss._Loss.__init__", "task.target_dictionary.pad"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "padding_idx", "=", "task", ".", "target_dictionary", ".", "pad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.fairseq_criterion.FairseqCriterion.add_args": [[18, 22], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add criterion-specific arguments to the parser.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.fairseq_criterion.FairseqCriterion.forward": [[23, 32], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.fairseq_criterion.FairseqCriterion.aggregate_logging_outputs": [[33, 37], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "aggregate_logging_outputs", "(", "logging_outputs", ")", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.fairseq_criterion.FairseqCriterion.grad_denom": [[38, 42], ["sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "grad_denom", "(", "sample_sizes", ")", ":", "\n", "        ", "\"\"\"Compute the gradient denominator for a set of sample sizes.\"\"\"", "\n", "return", "sum", "(", "sample_sizes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.cross_entropy.CrossEntropyCriterion.__init__": [[19, 21], ["FairseqCriterion.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.cross_entropy.CrossEntropyCriterion.forward": [[22, 44], ["model", "model.get_normalized_probs", "lprobs.view.view.view", "model.get_targets().view", "torch.nll_loss", "lprobs.view.view.size", "sample[].size", "sample[].size", "model.get_targets", "fairseq.utils.item"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_decoder.FairseqDecoder.get_normalized_probs", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.get_targets", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "net_output", "=", "model", "(", "**", "sample", "[", "'net_input'", "]", ")", "\n", "lprobs", "=", "model", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", "=", "True", ")", "\n", "lprobs", "=", "lprobs", ".", "view", "(", "-", "1", ",", "lprobs", ".", "size", "(", "-", "1", ")", ")", "\n", "target", "=", "model", ".", "get_targets", "(", "sample", ",", "net_output", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "lprobs", ",", "target", ",", "size_average", "=", "False", ",", "ignore_index", "=", "self", ".", "padding_idx", ",", "\n", "reduce", "=", "reduce", ")", "\n", "sample_size", "=", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", "if", "self", ".", "args", ".", "sentence_avg", "else", "sample", "[", "'ntokens'", "]", "\n", "logging_output", "=", "{", "\n", "'loss'", ":", "utils", ".", "item", "(", "loss", ".", "data", ")", "if", "reduce", "else", "loss", ".", "data", ",", "\n", "'ntokens'", ":", "sample", "[", "'ntokens'", "]", ",", "\n", "'nsentences'", ":", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.cross_entropy.CrossEntropyCriterion.aggregate_logging_outputs": [[45, 61], ["sum", "sum", "sum", "sum", "log.get", "log.get", "log.get", "log.get", "math.log", "math.log"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log"], ["", "@", "staticmethod", "\n", "def", "aggregate_logging_outputs", "(", "logging_outputs", ")", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "loss_sum", "=", "sum", "(", "log", ".", "get", "(", "'loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "ntokens", "=", "sum", "(", "log", ".", "get", "(", "'ntokens'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "nsentences", "=", "sum", "(", "log", ".", "get", "(", "'nsentences'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "sample_size", "=", "sum", "(", "log", ".", "get", "(", "'sample_size'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "agg_output", "=", "{", "\n", "'loss'", ":", "loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "\n", "'ntokens'", ":", "ntokens", ",", "\n", "'nsentences'", ":", "nsentences", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "if", "sample_size", "!=", "ntokens", ":", "\n", "            ", "agg_output", "[", "'nll_loss'", "]", "=", "loss_sum", "/", "ntokens", "/", "math", ".", "log", "(", "2", ")", "\n", "", "return", "agg_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.adaptive_loss.AdaptiveLoss.__init__": [[22, 28], ["FairseqCriterion.__init__", "Exception"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "\n", "if", "args", ".", "ddp_backend", "==", "'c10d'", ":", "\n", "            ", "raise", "Exception", "(", "\n", "'AdaptiveLoss is not compatible with the c10d '", "\n", "'version of DistributedDataParallel. Please use '", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.adaptive_loss.AdaptiveLoss.forward": [[32, 73], ["model", "model.get_targets", "orig_target.view.view.size", "orig_target.view.view.view", "orig_target.view.view.size", "adaptive_softmax", "net_output[].new().zero_", "range", "fairseq.utils.strip_pad", "fairseq.utils.strip_pad.numel", "hasattr", "len", "len", "len", "sample[].size", "net_output[].new", "torch.cross_entropy", "fairseq.utils.item", "target[].min", "target[].max", "logits[].size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.get_targets", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "\n", "assert", "hasattr", "(", "model", ".", "decoder", ",", "'adaptive_softmax'", ")", "and", "model", ".", "decoder", ".", "adaptive_softmax", "is", "not", "None", "\n", "adaptive_softmax", "=", "model", ".", "decoder", ".", "adaptive_softmax", "\n", "\n", "net_output", "=", "model", "(", "**", "sample", "[", "'net_input'", "]", ")", "\n", "orig_target", "=", "model", ".", "get_targets", "(", "sample", ",", "net_output", ")", "\n", "\n", "nsentences", "=", "orig_target", ".", "size", "(", "0", ")", "\n", "orig_target", "=", "orig_target", ".", "view", "(", "-", "1", ")", "\n", "\n", "bsz", "=", "orig_target", ".", "size", "(", "0", ")", "\n", "\n", "logits", ",", "target", "=", "adaptive_softmax", "(", "net_output", "[", "0", "]", ",", "orig_target", ")", "\n", "assert", "len", "(", "target", ")", "==", "len", "(", "logits", ")", "\n", "\n", "loss", "=", "net_output", "[", "0", "]", ".", "new", "(", "1", "if", "reduce", "else", "bsz", ")", ".", "zero_", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "target", ")", ")", ":", "\n", "            ", "if", "target", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "assert", "(", "target", "[", "i", "]", ".", "min", "(", ")", ">=", "0", "and", "target", "[", "i", "]", ".", "max", "(", ")", "<=", "logits", "[", "i", "]", ".", "size", "(", "1", ")", ")", "\n", "loss", "+=", "F", ".", "cross_entropy", "(", "logits", "[", "i", "]", ",", "target", "[", "i", "]", ",", "size_average", "=", "False", ",", "ignore_index", "=", "self", ".", "padding_idx", ",", "\n", "reduce", "=", "reduce", ")", "\n", "\n", "", "", "orig", "=", "utils", ".", "strip_pad", "(", "orig_target", ",", "self", ".", "padding_idx", ")", "\n", "ntokens", "=", "orig", ".", "numel", "(", ")", "\n", "sample_size", "=", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", "if", "self", ".", "args", ".", "sentence_avg", "else", "ntokens", "\n", "logging_output", "=", "{", "\n", "'loss'", ":", "utils", ".", "item", "(", "loss", ".", "data", ")", "if", "reduce", "else", "loss", ".", "data", ",", "\n", "'ntokens'", ":", "ntokens", ",", "\n", "'nsentences'", ":", "nsentences", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.adaptive_loss.AdaptiveLoss.aggregate_logging_outputs": [[74, 91], ["sum", "sum", "sum", "sum", "log.get", "log.get", "log.get", "log.get", "math.log", "math.log", "math.log"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log"], ["", "@", "staticmethod", "\n", "def", "aggregate_logging_outputs", "(", "logging_outputs", ")", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "loss_sum", "=", "sum", "(", "log", ".", "get", "(", "'loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "ntokens", "=", "sum", "(", "log", ".", "get", "(", "'ntokens'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "nsentences", "=", "sum", "(", "log", ".", "get", "(", "'nsentences'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "sample_size", "=", "sum", "(", "log", ".", "get", "(", "'sample_size'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "agg_output", "=", "{", "\n", "'loss'", ":", "loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "\n", "'nll_loss'", ":", "loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "\n", "'ntokens'", ":", "ntokens", ",", "\n", "'nsentences'", ":", "nsentences", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "if", "sample_size", "!=", "ntokens", ":", "\n", "            ", "agg_output", "[", "'nll_loss'", "]", "=", "loss_sum", "/", "ntokens", "/", "math", ".", "log", "(", "2", ")", "\n", "", "return", "agg_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.__init__": [[18, 21], ["FairseqCriterion.__init__"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "self", ".", "eps", "=", "args", ".", "label_smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.add_args": [[22, 27], ["parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add criterion-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--label-smoothing'", ",", "default", "=", "0.", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'epsilon for label smoothing, 0 means no label smoothing'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.forward": [[28, 47], ["model", "label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.compute_loss", "sample[].size", "sample[].size", "fairseq.utils.item", "fairseq.utils.item"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.compute_loss", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.item"], ["", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "net_output", "=", "model", "(", "**", "sample", "[", "'net_input'", "]", ")", "\n", "loss", ",", "nll_loss", "=", "self", ".", "compute_loss", "(", "model", ",", "net_output", ",", "sample", ",", "reduce", "=", "reduce", ")", "\n", "sample_size", "=", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", "if", "self", ".", "args", ".", "sentence_avg", "else", "sample", "[", "'ntokens'", "]", "\n", "logging_output", "=", "{", "\n", "'loss'", ":", "utils", ".", "item", "(", "loss", ".", "data", ")", "if", "reduce", "else", "loss", ".", "data", ",", "\n", "'nll_loss'", ":", "utils", ".", "item", "(", "nll_loss", ".", "data", ")", "if", "reduce", "else", "nll_loss", ".", "data", ",", "\n", "'ntokens'", ":", "sample", "[", "'ntokens'", "]", ",", "\n", "'nsentences'", ":", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.compute_loss": [[48, 61], ["model.get_normalized_probs", "lprobs.view.view.view", "model.get_targets().view", "model.get_targets().view.ne", "lprobs.view.view.size", "nll_loss.sum.sum.sum", "smooth_loss.sum.sum.sum", "lprobs.view.view.size", "model.get_targets", "lprobs.view.view.gather", "lprobs.view.view.sum"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_decoder.FairseqDecoder.get_normalized_probs", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.models.fairseq_model.BaseFairseqModel.get_targets"], ["", "def", "compute_loss", "(", "self", ",", "model", ",", "net_output", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "lprobs", "=", "model", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", "=", "True", ")", "\n", "lprobs", "=", "lprobs", ".", "view", "(", "-", "1", ",", "lprobs", ".", "size", "(", "-", "1", ")", ")", "\n", "target", "=", "model", ".", "get_targets", "(", "sample", ",", "net_output", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "non_pad_mask", "=", "target", ".", "ne", "(", "self", ".", "padding_idx", ")", "\n", "nll_loss", "=", "-", "lprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ")", "[", "non_pad_mask", "]", "\n", "smooth_loss", "=", "-", "lprobs", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "non_pad_mask", "]", "\n", "if", "reduce", ":", "\n", "            ", "nll_loss", "=", "nll_loss", ".", "sum", "(", ")", "\n", "smooth_loss", "=", "smooth_loss", ".", "sum", "(", ")", "\n", "", "eps_i", "=", "self", ".", "eps", "/", "lprobs", ".", "size", "(", "-", "1", ")", "\n", "loss", "=", "(", "1.", "-", "self", ".", "eps", ")", "*", "nll_loss", "+", "eps_i", "*", "smooth_loss", "\n", "return", "loss", ",", "nll_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.aggregate_logging_outputs": [[62, 74], ["sum", "sum", "sum", "log.get", "log.get", "log.get", "math.log", "math.log", "sum", "sum", "log.get", "log.get"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.log"], ["", "@", "staticmethod", "\n", "def", "aggregate_logging_outputs", "(", "logging_outputs", ")", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "ntokens", "=", "sum", "(", "log", ".", "get", "(", "'ntokens'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "nsentences", "=", "sum", "(", "log", ".", "get", "(", "'nsentences'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "sample_size", "=", "sum", "(", "log", ".", "get", "(", "'sample_size'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "return", "{", "\n", "'loss'", ":", "sum", "(", "log", ".", "get", "(", "'loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "\n", "'nll_loss'", ":", "sum", "(", "log", ".", "get", "(", "'nll_loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "/", "ntokens", "/", "math", ".", "log", "(", "2", ")", ",", "\n", "'ntokens'", ":", "ntokens", ",", "\n", "'nsentences'", ":", "nsentences", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.__init__.build_criterion": [[18, 20], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.criterions.__init__.register_criterion": [[22, 39], ["CRITERION_CLASS_NAMES.add", "ValueError", "issubclass", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.bleu.Scorer.add"], []], "home.repos.pwc.inspect_result.lyy1994_reformer.data.fairseq_dataset.FairseqDataset.__getitem__": [[16, 18], ["None"], "methods", ["None"], ["def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.fairseq_dataset.FairseqDataset.__len__": [[19, 21], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.fairseq_dataset.FairseqDataset.collater": [[22, 32], ["None"], "methods", ["None"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Merge a list of samples to form a mini-batch.\n\n        Args:\n            samples (List[int]): sample indices to collate\n\n        Returns:\n            dict: a mini-batch suitable for forwarding with a Model\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.fairseq_dataset.FairseqDataset.get_dummy_batch": [[33, 36], ["None"], "methods", ["None"], ["", "def", "get_dummy_batch", "(", "self", ",", "num_tokens", ",", "max_positions", ")", ":", "\n", "        ", "\"\"\"Return a dummy batch with a given number of tokens.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.fairseq_dataset.FairseqDataset.num_tokens": [[37, 41], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return the number of tokens in a sample. This value is used to\n        enforce ``--max-tokens`` during batching.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.fairseq_dataset.FairseqDataset.size": [[42, 46], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with ``--max-positions``.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.fairseq_dataset.FairseqDataset.ordered_indices": [[47, 51], ["None"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an ordered list of indices. Batches will be constructed based\n        on this order.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.backtranslation_dataset.BacktranslationDataset.__init__": [[15, 55], ["language_pair_dataset.LanguagePairDataset", "fairseq.sequence_generator.SequenceGenerator"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "tgt_dataset", ",", "tgt_dict", ",", "backtranslation_model", ")", ":", "\n", "        ", "\"\"\"\n        Sets up a backtranslation dataset which takes a tgt batch, generates\n        a src using a tgt-src backtranslation_model, and returns the\n        corresponding {generated src, input tgt} batch\n        Args:\n            args: generation args for the backtranslation SequenceGenerator'\n                Note that there is no equivalent argparse code for these args\n                anywhere in our top level train scripts yet. Integration is\n                still in progress. You can still, however, test out this dataset\n                functionality with the appropriate args as in the corresponding\n                unittest: test_backtranslation_dataset.\n            tgt_dataset: dataset which will be used to build self.tgt_dataset --\n                a LanguagePairDataset with tgt dataset as the source dataset and\n                None as the target dataset.\n                We use language_pair_dataset here to encapsulate the tgt_dataset\n                so we can re-use the LanguagePairDataset collater to format the\n                batches in the structure that SequenceGenerator expects.\n            tgt_dict: tgt dictionary (typically a joint src/tgt BPE dictionary)\n            backtranslation_model: tgt-src model to use in the SequenceGenerator\n                to generate backtranslations from tgt batches\n        \"\"\"", "\n", "self", ".", "tgt_dataset", "=", "language_pair_dataset", ".", "LanguagePairDataset", "(", "\n", "src", "=", "tgt_dataset", ",", "\n", "src_sizes", "=", "None", ",", "\n", "src_dict", "=", "tgt_dict", ",", "\n", "tgt", "=", "None", ",", "\n", "tgt_sizes", "=", "None", ",", "\n", "tgt_dict", "=", "None", ",", "\n", ")", "\n", "self", ".", "backtranslation_generator", "=", "sequence_generator", ".", "SequenceGenerator", "(", "\n", "[", "backtranslation_model", "]", ",", "\n", "tgt_dict", ",", "\n", "unk_penalty", "=", "args", ".", "backtranslation_unkpen", ",", "\n", "sampling", "=", "args", ".", "backtranslation_sampling", ",", "\n", "beam_size", "=", "args", ".", "backtranslation_beam", ",", "\n", ")", "\n", "self", ".", "backtranslation_max_len_a", "=", "args", ".", "backtranslation_max_len_a", "\n", "self", ".", "backtranslation_max_len_b", "=", "args", ".", "backtranslation_max_len_b", "\n", "self", ".", "backtranslation_beam", "=", "args", ".", "backtranslation_beam", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.backtranslation_dataset.BacktranslationDataset.__getitem__": [[56, 65], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns a single sample. Multiple samples are fed to the collater to\n        create a backtranslation batch. Note you should always use collate_fn\n        BacktranslationDataset.collater() below if given the option to\n        specify which collate_fn to use (e.g. in a dataloader which uses this\n        BacktranslationDataset -- see corresponding unittest for an example).\n        \"\"\"", "\n", "return", "self", ".", "tgt_dataset", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.backtranslation_dataset.BacktranslationDataset.__len__": [[66, 71], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The length of the backtranslation dataset is the length of tgt.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "tgt_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.backtranslation_dataset.BacktranslationDataset.collater": [[72, 98], ["backtranslation_dataset.BacktranslationDataset.tgt_dataset.collater", "backtranslation_dataset.BacktranslationDataset._generate_hypotheses", "zip", "language_pair_dataset.collate", "generated_samples.append", "backtranslation_dataset.BacktranslationDataset.tgt_dataset.src_dict.pad", "backtranslation_dataset.BacktranslationDataset.tgt_dataset.src_dict.eos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.collater", "home.repos.pwc.inspect_result.lyy1994_reformer.data.backtranslation_dataset.BacktranslationDataset._generate_hypotheses", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.collate", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"\n        Using the samples from the tgt dataset, load a collated tgt sample to\n        feed to the backtranslation model. Then take the generated translation\n        with best score as the source and the orignal net input as the target.\n        \"\"\"", "\n", "collated_tgt_only_sample", "=", "self", ".", "tgt_dataset", ".", "collater", "(", "samples", ")", "\n", "backtranslation_hypos", "=", "self", ".", "_generate_hypotheses", "(", "collated_tgt_only_sample", ")", "\n", "\n", "# Go through each tgt sentence in batch and its corresponding best", "\n", "# generated hypothesis and create a backtranslation data pair", "\n", "# {id: id, source: generated backtranslation, target: original tgt}", "\n", "generated_samples", "=", "[", "]", "\n", "for", "input_sample", ",", "hypos", "in", "zip", "(", "samples", ",", "backtranslation_hypos", ")", ":", "\n", "            ", "generated_samples", ".", "append", "(", "\n", "{", "\n", "\"id\"", ":", "input_sample", "[", "\"id\"", "]", ",", "\n", "\"source\"", ":", "hypos", "[", "0", "]", "[", "\"tokens\"", "]", ",", "# first hypo is best hypo", "\n", "\"target\"", ":", "input_sample", "[", "\"source\"", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "return", "language_pair_dataset", ".", "collate", "(", "\n", "samples", "=", "generated_samples", ",", "\n", "pad_idx", "=", "self", ".", "tgt_dataset", ".", "src_dict", ".", "pad", "(", ")", ",", "\n", "eos_idx", "=", "self", ".", "tgt_dataset", ".", "src_dict", ".", "eos", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.backtranslation_dataset.BacktranslationDataset.get_dummy_batch": [[100, 103], ["backtranslation_dataset.BacktranslationDataset.tgt_dataset.get_dummy_batch"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.get_dummy_batch"], ["", "def", "get_dummy_batch", "(", "self", ",", "num_tokens", ",", "max_positions", ")", ":", "\n", "        ", "\"\"\" Just use the tgt dataset get_dummy_batch \"\"\"", "\n", "self", ".", "tgt_dataset", ".", "get_dummy_batch", "(", "num_tokens", ",", "max_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.backtranslation_dataset.BacktranslationDataset.num_tokens": [[104, 107], ["backtranslation_dataset.BacktranslationDataset.tgt_dataset.num_tokens"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.num_tokens"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\" Just use the tgt dataset num_tokens \"\"\"", "\n", "self", ".", "tgt_dataset", ".", "num_tokens", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.backtranslation_dataset.BacktranslationDataset.ordered_indices": [[108, 111], ["None"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\" Just use the tgt dataset ordered_indices \"\"\"", "\n", "self", ".", "tgt_dataset", ".", "ordered_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.backtranslation_dataset.BacktranslationDataset.valid_size": [[112, 115], ["backtranslation_dataset.BacktranslationDataset.tgt_dataset.valid_size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.backtranslation_dataset.BacktranslationDataset.valid_size"], ["", "def", "valid_size", "(", "self", ",", "index", ",", "max_positions", ")", ":", "\n", "        ", "\"\"\" Just use the tgt dataset size \"\"\"", "\n", "self", ".", "tgt_dataset", ".", "valid_size", "(", "index", ",", "max_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.backtranslation_dataset.BacktranslationDataset._generate_hypotheses": [[116, 132], ["backtranslation_dataset.BacktranslationDataset.backtranslation_generator.cuda", "input[].size", "backtranslation_dataset.BacktranslationDataset.backtranslation_generator.generate", "int"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.cuda", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.sequence_generator.SequenceGenerator.generate"], ["", "def", "_generate_hypotheses", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Generates hypotheses from a LanguagePairDataset collated / batched\n        sample. Note in this case, sample[\"target\"] is None, and\n        sample[\"net_input\"][\"src_tokens\"] is really in tgt language.\n        \"\"\"", "\n", "self", ".", "backtranslation_generator", ".", "cuda", "(", ")", "\n", "input", "=", "sample", "[", "\"net_input\"", "]", "\n", "srclen", "=", "input", "[", "\"src_tokens\"", "]", ".", "size", "(", "1", ")", "\n", "hypos", "=", "self", ".", "backtranslation_generator", ".", "generate", "(", "\n", "input", ",", "\n", "maxlen", "=", "int", "(", "\n", "self", ".", "backtranslation_max_len_a", "*", "srclen", "+", "self", ".", "backtranslation_max_len_b", "\n", ")", ",", "\n", ")", "\n", "return", "hypos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.token_block_dataset.TokenBlockDataset.__init__": [[32, 78], ["super().__init__", "len", "numpy.array", "math.ceil", "min", "token_block_dataset.TokenBlockDataset.__init__.block_at"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__"], ["def", "__init__", "(", "self", ",", "tokens", ",", "sizes", ",", "block_size", ",", "pad", ",", "eos", ",", "break_mode", "=", "None", ",", "include_targets", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "total_size", "=", "len", "(", "tokens", ")", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "include_targets", "=", "include_targets", "\n", "self", ".", "slice_indices", "=", "[", "]", "\n", "\n", "if", "break_mode", "is", "None", "or", "break_mode", "==", "'none'", ":", "\n", "            ", "length", "=", "math", ".", "ceil", "(", "len", "(", "tokens", ")", "/", "block_size", ")", "\n", "\n", "def", "block_at", "(", "i", ")", ":", "\n", "                ", "start", "=", "i", "*", "block_size", "\n", "end", "=", "min", "(", "start", "+", "block_size", ",", "len", "(", "tokens", ")", ")", "\n", "return", "(", "start", ",", "end", ")", "\n", "\n", "", "self", ".", "slice_indices", "=", "[", "block_at", "(", "i", ")", "for", "i", "in", "range", "(", "length", ")", "]", "\n", "", "elif", "break_mode", "==", "'complete'", ":", "\n", "            ", "assert", "sizes", "is", "not", "None", "and", "sum", "(", "sizes", ")", "==", "len", "(", "tokens", ")", ",", "'{} != {}'", ".", "format", "(", "sum", "(", "sizes", ")", ",", "len", "(", "tokens", ")", ")", "\n", "tok_idx", "=", "0", "\n", "sz_idx", "=", "0", "\n", "curr_size", "=", "0", "\n", "while", "sz_idx", "<", "len", "(", "sizes", ")", ":", "\n", "                ", "if", "curr_size", "+", "sizes", "[", "sz_idx", "]", "<=", "block_size", "or", "curr_size", "==", "0", ":", "\n", "                    ", "curr_size", "+=", "sizes", "[", "sz_idx", "]", "\n", "sz_idx", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "slice_indices", ".", "append", "(", "(", "tok_idx", ",", "tok_idx", "+", "curr_size", ")", ")", "\n", "tok_idx", "+=", "curr_size", "\n", "curr_size", "=", "0", "\n", "", "", "if", "curr_size", ">", "0", ":", "\n", "                ", "self", ".", "slice_indices", ".", "append", "(", "(", "tok_idx", ",", "tok_idx", "+", "curr_size", ")", ")", "\n", "", "", "elif", "break_mode", "==", "'eos'", ":", "\n", "            ", "assert", "sizes", "is", "not", "None", "and", "sum", "(", "sizes", ")", "==", "len", "(", "tokens", ")", ",", "'{} != {}'", ".", "format", "(", "sum", "(", "sizes", ")", ",", "len", "(", "tokens", ")", ")", "\n", "curr", "=", "0", "\n", "for", "sz", "in", "sizes", ":", "\n", "# skip samples with just 1 example (which would be just the eos token)", "\n", "                ", "if", "sz", ">", "1", ":", "\n", "                    ", "self", ".", "slice_indices", ".", "append", "(", "(", "curr", ",", "curr", "+", "sz", ")", ")", "\n", "", "curr", "+=", "sz", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid break_mode: '", "+", "break_mode", ")", "\n", "\n", "", "self", ".", "sizes", "=", "np", ".", "array", "(", "[", "e", "-", "s", "for", "s", ",", "e", "in", "self", ".", "slice_indices", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.token_block_dataset.TokenBlockDataset.__getitem__": [[79, 99], ["torch.LongTensor", "numpy.concatenate", "numpy.concatenate", "torch.LongTensor", "torch.LongTensor", "numpy.concatenate"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "s", ",", "e", "=", "self", ".", "slice_indices", "[", "index", "]", "\n", "\n", "item", "=", "torch", ".", "LongTensor", "(", "self", ".", "tokens", "[", "s", ":", "e", "]", ")", "\n", "\n", "if", "self", ".", "include_targets", ":", "\n", "# target is the sentence, for source, rotate item one token to the left (would start with eos)", "\n", "# past target is rotated to the left by 2 (padded if its first)", "\n", "            ", "if", "s", "==", "0", ":", "\n", "                ", "source", "=", "np", ".", "concatenate", "(", "[", "[", "self", ".", "eos", "]", ",", "self", ".", "tokens", "[", "0", ":", "e", "-", "1", "]", "]", ")", "\n", "past_target", "=", "np", ".", "concatenate", "(", "[", "[", "self", ".", "pad", ",", "self", ".", "eos", "]", ",", "self", ".", "tokens", "[", "0", ":", "e", "-", "2", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "source", "=", "self", ".", "tokens", "[", "s", "-", "1", ":", "e", "-", "1", "]", "\n", "if", "s", "==", "1", ":", "\n", "                    ", "past_target", "=", "np", ".", "concatenate", "(", "[", "[", "self", ".", "eos", "]", ",", "self", ".", "tokens", "[", "0", ":", "e", "-", "2", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "past_target", "=", "self", ".", "tokens", "[", "s", "-", "2", ":", "e", "-", "2", "]", "\n", "\n", "", "", "return", "torch", ".", "LongTensor", "(", "source", ")", ",", "item", ",", "torch", ".", "LongTensor", "(", "past_target", ")", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.token_block_dataset.TokenBlockDataset.__len__": [[100, 102], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "slice_indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.__init__": [[27, 31], ["iter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "iterable", ")", ":", "\n", "        ", "self", ".", "iterable", "=", "iterable", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "itr", "=", "iter", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "iterable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.__iter__": [[35, 39], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "x", "in", "self", ".", "iterable", ":", "\n", "            ", "self", ".", "count", "+=", "1", "\n", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.__next__": [[40, 42], ["next"], "methods", ["None"], ["", "", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "next", "(", "self", ".", "itr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.has_next": [[43, 46], ["len"], "methods", ["None"], ["", "def", "has_next", "(", "self", ")", ":", "\n", "        ", "\"\"\"Whether the iterator has been exhausted.\"\"\"", "\n", "return", "self", ".", "count", "<", "len", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.skip": [[47, 51], ["next", "itertools.islice"], "methods", ["None"], ["", "def", "skip", "(", "self", ",", "num_to_skip", ")", ":", "\n", "        ", "\"\"\"Fast-forward the iterator by skipping *num_to_skip* elements.\"\"\"", "\n", "next", "(", "itertools", ".", "islice", "(", "self", ".", "itr", ",", "num_to_skip", ",", "num_to_skip", ")", ",", "None", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.__init__": [[77, 89], ["isinstance", "tuple"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "collate_fn", ",", "batch_sampler", ",", "seed", "=", "1", ",", "num_shards", "=", "1", ",", "shard_id", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "collate_fn", "=", "collate_fn", "\n", "self", ".", "frozen_batches", "=", "tuple", "(", "batch_sampler", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "num_shards", "=", "num_shards", "\n", "self", ".", "shard_id", "=", "shard_id", "\n", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "_cur_epoch_itr", "=", "None", "\n", "self", ".", "_next_epoch_itr", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "frozen_batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.next_epoch_itr": [[93, 107], ["iterators.EpochBatchIterator._get_iterator_for_epoch"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator._get_iterator_for_epoch"], ["", "def", "next_epoch_itr", "(", "self", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "\"\"\"Return a new iterator over the dataset.\n\n        Args:\n            shuffle (bool, optional): shuffle batches before returning the\n                iterator. Default: ``True``\n        \"\"\"", "\n", "if", "self", ".", "_next_epoch_itr", "is", "not", "None", ":", "\n", "            ", "self", ".", "_cur_epoch_itr", "=", "self", ".", "_next_epoch_itr", "\n", "self", ".", "_next_epoch_itr", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "epoch", "+=", "1", "\n", "self", ".", "_cur_epoch_itr", "=", "self", ".", "_get_iterator_for_epoch", "(", "self", ".", "epoch", ",", "shuffle", ")", "\n", "", "return", "self", ".", "_cur_epoch_itr", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.end_of_epoch": [[108, 111], ["iterators.EpochBatchIterator._cur_epoch_itr.has_next"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.has_next"], ["", "def", "end_of_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns whether the most recent epoch iterator has been exhausted\"\"\"", "\n", "return", "not", "self", ".", "_cur_epoch_itr", ".", "has_next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.iterations_in_epoch": [[112, 120], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "iterations_in_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"The number of consumed batches in the current epoch.\"\"\"", "\n", "if", "self", ".", "_cur_epoch_itr", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_cur_epoch_itr", ".", "count", "\n", "", "elif", "self", ".", "_next_epoch_itr", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_next_epoch_itr", ".", "count", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.state_dict": [[121, 126], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a dictionary containing a whole state of the iterator.\"\"\"", "\n", "return", "{", "\n", "'epoch'", ":", "self", ".", "epoch", ",", "\n", "'iterations_in_epoch'", ":", "self", ".", "iterations_in_epoch", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator.load_state_dict": [[128, 137], ["state_dict.get", "iterators.EpochBatchIterator._get_iterator_for_epoch", "state_dict.get", "len", "iterators.EpochBatchIterator.skip"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator._get_iterator_for_epoch", "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.CountingIterator.skip"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Copies the state of the iterator from the given *state_dict*.\"\"\"", "\n", "self", ".", "epoch", "=", "state_dict", "[", "'epoch'", "]", "\n", "itr_pos", "=", "state_dict", ".", "get", "(", "'iterations_in_epoch'", ",", "0", ")", "\n", "if", "itr_pos", ">", "0", ":", "\n", "# fast-forward epoch iterator", "\n", "            ", "itr", "=", "self", ".", "_get_iterator_for_epoch", "(", "self", ".", "epoch", ",", "state_dict", ".", "get", "(", "'shuffle'", ",", "True", ")", ")", "\n", "if", "itr_pos", "<", "len", "(", "itr", ")", ":", "\n", "                ", "self", ".", "_next_epoch_itr", "=", "itr", ".", "skip", "(", "itr_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.EpochBatchIterator._get_iterator_for_epoch": [[138, 151], ["iterators.CountingIterator", "torch.utils.data.DataLoader", "data_utils.numpy_seed", "list", "numpy.random.shuffle", "iterators.ShardedIterator"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.numpy_seed"], ["", "", "", "def", "_get_iterator_for_epoch", "(", "self", ",", "epoch", ",", "shuffle", ")", ":", "\n", "        ", "if", "shuffle", ":", "\n", "# set seed based on the seed and epoch number so that we get", "\n", "# reproducible results when resuming from checkpoints", "\n", "            ", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "seed", "+", "epoch", ")", ":", "\n", "                ", "batches", "=", "list", "(", "self", ".", "frozen_batches", ")", "# copy", "\n", "np", ".", "random", ".", "shuffle", "(", "batches", ")", "\n", "", "", "else", ":", "\n", "            ", "batches", "=", "self", ".", "frozen_batches", "\n", "", "return", "CountingIterator", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "collate_fn", "=", "self", ".", "collate_fn", ",", "\n", "batch_sampler", "=", "ShardedIterator", "(", "batches", ",", "self", ".", "num_shards", ",", "self", ".", "shard_id", ",", "fill_value", "=", "[", "]", ")", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.GroupedIterator.__init__": [[162, 166], ["int", "iter", "math.ceil", "len", "float"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "iterable", ",", "chunk_size", ")", ":", "\n", "        ", "self", ".", "_len", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "iterable", ")", "/", "float", "(", "chunk_size", ")", ")", ")", "\n", "self", ".", "itr", "=", "iter", "(", "iterable", ")", "\n", "self", ".", "chunk_size", "=", "chunk_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.GroupedIterator.__len__": [[167, 169], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_len", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.GroupedIterator.__iter__": [[170, 172], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.GroupedIterator.__next__": [[173, 182], ["range", "chunk.append", "next", "len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "chunk", "=", "[", "]", "\n", "try", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "chunk_size", ")", ":", "\n", "                ", "chunk", ".", "append", "(", "next", "(", "self", ".", "itr", ")", ")", "\n", "", "", "except", "StopIteration", "as", "e", ":", "\n", "            ", "if", "len", "(", "chunk", ")", "==", "0", ":", "\n", "                ", "raise", "e", "\n", "", "", "return", "chunk", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.ShardedIterator.__init__": [[195, 207], ["itertools.zip_longest", "ValueError", "len", "range", "itertools.islice", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "iterable", ",", "num_shards", ",", "shard_id", ",", "fill_value", "=", "None", ")", ":", "\n", "        ", "if", "shard_id", "<", "0", "or", "shard_id", ">=", "num_shards", ":", "\n", "            ", "raise", "ValueError", "(", "'shard_id must be between 0 and num_shards'", ")", "\n", "\n", "", "self", ".", "_sharded_len", "=", "len", "(", "iterable", ")", "//", "num_shards", "\n", "if", "len", "(", "iterable", ")", "%", "num_shards", ">", "0", ":", "\n", "            ", "self", ".", "_sharded_len", "+=", "1", "\n", "\n", "", "self", ".", "itr", "=", "itertools", ".", "zip_longest", "(", "\n", "range", "(", "self", ".", "_sharded_len", ")", ",", "\n", "itertools", ".", "islice", "(", "iterable", ",", "shard_id", ",", "len", "(", "iterable", ")", ",", "num_shards", ")", ",", "\n", "fillvalue", "=", "fill_value", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.ShardedIterator.__len__": [[209, 211], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sharded_len", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.ShardedIterator.__iter__": [[212, 214], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.iterators.ShardedIterator.__next__": [[215, 217], ["next"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "next", "(", "self", ".", "itr", ")", "[", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.infer_language_pair": [[14, 22], ["os.listdir", "filename.split", "parts[].split", "len", "len", "parts[].split"], "function", ["None"], ["def", "infer_language_pair", "(", "path", ")", ":", "\n", "    ", "\"\"\"Infer language pair from filename: <split>.<lang1>-<lang2>.(...).idx\"\"\"", "\n", "src", ",", "dst", "=", "None", ",", "None", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "        ", "parts", "=", "filename", ".", "split", "(", "'.'", ")", "\n", "if", "len", "(", "parts", ")", ">=", "3", "and", "len", "(", "parts", "[", "1", "]", ".", "split", "(", "'-'", ")", ")", "==", "2", ":", "\n", "            ", "return", "parts", "[", "1", "]", ".", "split", "(", "'-'", ")", "\n", "", "", "return", "src", ",", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.collate_tokens": [[24, 41], ["max", "values[].new().fill_", "enumerate", "data_utils.collate_tokens.copy_tensor"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max"], ["", "def", "collate_tokens", "(", "values", ",", "pad_idx", ",", "eos_idx", ",", "left_pad", ",", "move_eos_to_beginning", "=", "False", ")", ":", "\n", "    ", "\"\"\"Convert a list of 1d tensors into a padded 2d tensor.\"\"\"", "\n", "size", "=", "max", "(", "v", ".", "size", "(", "0", ")", "for", "v", "in", "values", ")", "\n", "res", "=", "values", "[", "0", "]", ".", "new", "(", "len", "(", "values", ")", ",", "size", ")", ".", "fill_", "(", "pad_idx", ")", "\n", "\n", "def", "copy_tensor", "(", "src", ",", "dst", ")", ":", "\n", "        ", "assert", "dst", ".", "numel", "(", ")", "==", "src", ".", "numel", "(", ")", "\n", "if", "move_eos_to_beginning", ":", "\n", "            ", "assert", "src", "[", "-", "1", "]", "==", "eos_idx", "\n", "dst", "[", "0", "]", "=", "eos_idx", "\n", "dst", "[", "1", ":", "]", "=", "src", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "dst", ".", "copy_", "(", "src", ")", "\n", "\n", "", "", "for", "i", ",", "v", "in", "enumerate", "(", "values", ")", ":", "\n", "        ", "copy_tensor", "(", "v", ",", "res", "[", "i", "]", "[", "size", "-", "len", "(", "v", ")", ":", "]", "if", "left_pad", "else", "res", "[", "i", "]", "[", ":", "len", "(", "v", ")", "]", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.numpy_seed": [[43, 56], ["numpy.random.get_state", "numpy.random.seed", "numpy.random.set_state"], "function", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "numpy_seed", "(", "seed", ")", ":", "\n", "    ", "\"\"\"Context manager which seeds the NumPy PRNG with the specified seed and\n    restores the state afterward\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "yield", "\n", "return", "\n", "", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "np", ".", "random", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.collect_filtered": [[58, 73], ["function", "filtered.append"], "function", ["None"], ["", "", "def", "collect_filtered", "(", "function", ",", "iterable", ",", "filtered", ")", ":", "\n", "    ", "\"\"\"\n    Similar to :func:`filter` but collects filtered elements in ``filtered``.\n\n    Args:\n        function (callable): function that returns ``False`` for elements that\n            should be filtered\n        iterable (iterable): iterable to filter\n        filtered (list): list to store filtered elements\n    \"\"\"", "\n", "for", "el", "in", "iterable", ":", "\n", "        ", "if", "function", "(", "el", ")", ":", "\n", "            ", "yield", "el", "\n", "", "else", ":", "\n", "            ", "filtered", ".", "append", "(", "el", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.filter_by_size": [[75, 109], ["data_utils.collect_filtered", "len", "print", "isinstance", "isinstance", "all", "Exception", "size_fn", "len", "len", "size_fn", "zip", "size_fn"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.collect_filtered", "home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print"], ["", "", "", "def", "filter_by_size", "(", "indices", ",", "size_fn", ",", "max_positions", ",", "raise_exception", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Filter indices based on their size.\n\n    Args:\n        indices (List[int]): ordered list of dataset indices\n        size_fn (callable): function that returns the size of a given index\n        max_positions (tuple): filter elements larger than this size.\n            Comparisons are done component-wise.\n        raise_exception (bool, optional): if ``True``, raise an exception\n            if any elements are filtered. Default: ``False``\n    \"\"\"", "\n", "def", "check_size", "(", "idx", ")", ":", "\n", "        ", "if", "isinstance", "(", "max_positions", ",", "float", ")", "or", "isinstance", "(", "max_positions", ",", "int", ")", ":", "\n", "            ", "return", "size_fn", "(", "idx", ")", "<=", "max_positions", "\n", "", "else", ":", "\n", "            ", "return", "all", "(", "a", "is", "None", "or", "b", "is", "None", "or", "a", "<=", "b", "\n", "for", "a", ",", "b", "in", "zip", "(", "size_fn", "(", "idx", ")", ",", "max_positions", ")", ")", "\n", "\n", "", "", "ignored", "=", "[", "]", "\n", "itr", "=", "collect_filtered", "(", "check_size", ",", "indices", ",", "ignored", ")", "\n", "for", "idx", "in", "itr", ":", "\n", "        ", "if", "len", "(", "ignored", ")", ">", "0", "and", "raise_exception", ":", "\n", "            ", "raise", "Exception", "(", "(", "\n", "'Size of sample #{} is invalid (={}) since max_positions={}, '", "\n", "'skip this example with --skip-invalid-size-inputs-valid-test'", "\n", ")", ".", "format", "(", "idx", ",", "size_fn", "(", "idx", ")", ",", "max_positions", ")", ")", "\n", "", "yield", "idx", "\n", "\n", "", "if", "len", "(", "ignored", ")", ">", "0", ":", "\n", "        ", "print", "(", "(", "\n", "'| WARNING: {} samples have invalid sizes and will be skipped, '", "\n", "'max_positions={}, first few sample ids={}'", "\n", ")", ".", "format", "(", "len", "(", "ignored", ")", ",", "max_positions", ",", "ignored", "[", ":", "10", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.data_utils.batch_by_size": [[111, 166], ["float", "float", "sample_lens.append", "max", "data_utils.batch_by_size.is_batch_full"], "function", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max"], ["", "", "def", "batch_by_size", "(", "\n", "indices", ",", "num_tokens_fn", ",", "max_tokens", "=", "None", ",", "max_sentences", "=", "None", ",", "\n", "required_batch_size_multiple", "=", "1", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Yield mini-batches of indices bucketed by size. Batches may contain\n    sequences of different lengths.\n\n    Args:\n        indices (List[int]): ordered list of dataset indices\n        num_tokens_fn (callable): function that returns the number of tokens at\n            a given index\n        max_tokens (int, optional): max number of tokens in each batch.\n            Default: ``None``\n        max_sentences (int, optional): max number of sentences in each\n            batch. Default: ``None``\n        required_batch_size_multiple (int, optional): require batch size to\n            be a multiple of N. Default: ``1``\n    \"\"\"", "\n", "max_tokens", "=", "max_tokens", "if", "max_tokens", "is", "not", "None", "else", "float", "(", "'Inf'", ")", "\n", "max_sentences", "=", "max_sentences", "if", "max_sentences", "is", "not", "None", "else", "float", "(", "'Inf'", ")", "\n", "bsz_mult", "=", "required_batch_size_multiple", "\n", "\n", "batch", "=", "[", "]", "\n", "\n", "def", "is_batch_full", "(", "num_tokens", ")", ":", "\n", "        ", "if", "len", "(", "batch", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "", "if", "len", "(", "batch", ")", "==", "max_sentences", ":", "\n", "            ", "return", "True", "\n", "", "if", "num_tokens", ">", "max_tokens", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "sample_len", "=", "0", "\n", "sample_lens", "=", "[", "]", "\n", "ignored", "=", "[", "]", "\n", "for", "idx", "in", "indices", ":", "\n", "        ", "sample_lens", ".", "append", "(", "num_tokens_fn", "(", "idx", ")", ")", "\n", "sample_len", "=", "max", "(", "sample_len", ",", "sample_lens", "[", "-", "1", "]", ")", "\n", "num_tokens", "=", "(", "len", "(", "batch", ")", "+", "1", ")", "*", "sample_len", "\n", "if", "is_batch_full", "(", "num_tokens", ")", ":", "\n", "            ", "mod_len", "=", "max", "(", "\n", "bsz_mult", "*", "(", "len", "(", "batch", ")", "//", "bsz_mult", ")", ",", "\n", "len", "(", "batch", ")", "%", "bsz_mult", ",", "\n", ")", "\n", "yield", "batch", "[", ":", "mod_len", "]", "\n", "batch", "=", "batch", "[", "mod_len", ":", "]", "\n", "sample_lens", "=", "sample_lens", "[", "mod_len", ":", "]", "\n", "sample_len", "=", "max", "(", "sample_lens", ")", "if", "len", "(", "sample_lens", ")", ">", "0", "else", "0", "\n", "\n", "", "batch", ".", "append", "(", "idx", ")", "\n", "\n", "", "if", "len", "(", "batch", ")", ">", "0", ":", "\n", "        ", "yield", "batch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.__init__": [[16, 27], ["dictionary.Dictionary.add_symbol", "dictionary.Dictionary.add_symbol", "dictionary.Dictionary.add_symbol", "dictionary.Dictionary.add_symbol", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.add_symbol"], ["def", "__init__", "(", "self", ",", "pad", "=", "'<pad>'", ",", "eos", "=", "'</s>'", ",", "unk", "=", "'<unk>'", ")", ":", "\n", "        ", "self", ".", "unk_word", ",", "self", ".", "pad_word", ",", "self", ".", "eos_word", "=", "unk", ",", "pad", ",", "eos", "\n", "self", ".", "symbols", "=", "[", "]", "\n", "self", ".", "count", "=", "[", "]", "\n", "self", ".", "indices", "=", "{", "}", "\n", "# dictionary indexing starts at 1 for consistency with Lua", "\n", "self", ".", "add_symbol", "(", "'<Lua heritage>'", ")", "\n", "self", ".", "pad_index", "=", "self", ".", "add_symbol", "(", "pad", ")", "\n", "self", ".", "eos_index", "=", "self", ".", "add_symbol", "(", "eos", ")", "\n", "self", ".", "unk_index", "=", "self", ".", "add_symbol", "(", "unk", ")", "\n", "self", ".", "nspecial", "=", "len", "(", "self", ".", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.__eq__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "indices", "==", "other", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.__getitem__": [[31, 35], ["len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "<", "len", "(", "self", ".", "symbols", ")", ":", "\n", "            ", "return", "self", ".", "symbols", "[", "idx", "]", "\n", "", "return", "self", ".", "unk_word", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.__len__": [[36, 39], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of symbols in the dictionary\"\"\"", "\n", "return", "len", "(", "self", ".", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.index": [[40, 45], ["None"], "methods", ["None"], ["", "def", "index", "(", "self", ",", "sym", ")", ":", "\n", "        ", "\"\"\"Returns the index of the specified symbol\"\"\"", "\n", "if", "sym", "in", "self", ".", "indices", ":", "\n", "            ", "return", "self", ".", "indices", "[", "sym", "]", "\n", "", "return", "self", ".", "unk_index", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.string": [[46, 64], ["torch.is_tensor", "tensor.dim", "dictionary.Dictionary.unk", "dictionary.Dictionary.unk_string", "dictionary.Dictionary.string.token_string"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk_string"], ["", "def", "string", "(", "self", ",", "tensor", ",", "bpe_symbol", "=", "None", ",", "escape_unk", "=", "False", ")", ":", "\n", "        ", "\"\"\"Helper for converting a tensor of token indices to a string.\n\n        Can optionally remove BPE symbols or escape <unk> words.\n        \"\"\"", "\n", "if", "torch", ".", "is_tensor", "(", "tensor", ")", "and", "tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "return", "'\\n'", ".", "join", "(", "self", ".", "string", "(", "t", ")", "for", "t", "in", "tensor", ")", "\n", "\n", "", "def", "token_string", "(", "i", ")", ":", "\n", "            ", "if", "i", "==", "self", ".", "unk", "(", ")", ":", "\n", "                ", "return", "self", ".", "unk_string", "(", "escape_unk", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", "[", "i", "]", "\n", "\n", "", "", "sent", "=", "' '", ".", "join", "(", "token_string", "(", "i", ")", "for", "i", "in", "tensor", "if", "i", "!=", "self", ".", "eos", "(", ")", ")", "\n", "if", "bpe_symbol", "is", "not", "None", ":", "\n", "            ", "sent", "=", "(", "sent", "+", "' '", ")", ".", "replace", "(", "bpe_symbol", ",", "''", ")", ".", "rstrip", "(", ")", "\n", "", "return", "sent", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk_string": [[65, 71], ["None"], "methods", ["None"], ["", "def", "unk_string", "(", "self", ",", "escape", "=", "False", ")", ":", "\n", "        ", "\"\"\"Return unknown string, optionally escaped as: <<unk>>\"\"\"", "\n", "if", "escape", ":", "\n", "            ", "return", "'<{}>'", ".", "format", "(", "self", ".", "unk_word", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "unk_word", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.add_symbol": [[72, 84], ["len", "dictionary.Dictionary.symbols.append", "dictionary.Dictionary.count.append"], "methods", ["None"], ["", "", "def", "add_symbol", "(", "self", ",", "word", ",", "n", "=", "1", ")", ":", "\n", "        ", "\"\"\"Adds a word to the dictionary\"\"\"", "\n", "if", "word", "in", "self", ".", "indices", ":", "\n", "            ", "idx", "=", "self", ".", "indices", "[", "word", "]", "\n", "self", ".", "count", "[", "idx", "]", "=", "self", ".", "count", "[", "idx", "]", "+", "n", "\n", "return", "idx", "\n", "", "else", ":", "\n", "            ", "idx", "=", "len", "(", "self", ".", "symbols", ")", "\n", "self", ".", "indices", "[", "word", "]", "=", "idx", "\n", "self", ".", "symbols", ".", "append", "(", "word", ")", "\n", "self", ".", "count", ".", "append", "(", "n", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.update": [[85, 97], ["len", "dictionary.Dictionary.symbols.append", "dictionary.Dictionary.count.append"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "new_dict", ")", ":", "\n", "        ", "\"\"\"Updates counts from new dictionary.\"\"\"", "\n", "for", "word", "in", "new_dict", ".", "symbols", ":", "\n", "            ", "idx2", "=", "new_dict", ".", "indices", "[", "word", "]", "\n", "if", "word", "in", "self", ".", "indices", ":", "\n", "                ", "idx", "=", "self", ".", "indices", "[", "word", "]", "\n", "self", ".", "count", "[", "idx", "]", "=", "self", ".", "count", "[", "idx", "]", "+", "new_dict", ".", "count", "[", "idx2", "]", "\n", "", "else", ":", "\n", "                ", "idx", "=", "len", "(", "self", ".", "symbols", ")", "\n", "self", ".", "indices", "[", "word", "]", "=", "idx", "\n", "self", ".", "symbols", ".", "append", "(", "word", ")", "\n", "self", ".", "count", ".", "append", "(", "new_dict", ".", "count", "[", "idx2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.finalize": [[98, 142], ["dict", "collections.Counter", "collections.Counter.most_common", "len", "list", "list", "len", "zip", "dict", "len", "len", "range", "zip", "len", "new_symbols.append", "new_count.append", "len", "new_symbols.append", "new_count.append", "len"], "methods", ["None"], ["", "", "", "def", "finalize", "(", "self", ",", "threshold", "=", "-", "1", ",", "nwords", "=", "-", "1", ",", "padding_factor", "=", "8", ")", ":", "\n", "        ", "\"\"\"Sort symbols by frequency in descending order, ignoring special ones.\n\n        Args:\n            - threshold defines the minimum word count\n            - nwords defines the total number of words in the final dictionary,\n                including special symbols\n            - padding_factor can be used to pad the dictionary size to be a\n                multiple of 8, which is important on some hardware (e.g., Nvidia\n                Tensor Cores).\n        \"\"\"", "\n", "if", "nwords", "<=", "0", ":", "\n", "            ", "nwords", "=", "len", "(", "self", ")", "\n", "\n", "", "new_indices", "=", "dict", "(", "zip", "(", "self", ".", "symbols", "[", ":", "self", ".", "nspecial", "]", ",", "range", "(", "self", ".", "nspecial", ")", ")", ")", "\n", "new_symbols", "=", "self", ".", "symbols", "[", ":", "self", ".", "nspecial", "]", "\n", "new_count", "=", "self", ".", "count", "[", ":", "self", ".", "nspecial", "]", "\n", "\n", "c", "=", "Counter", "(", "dict", "(", "zip", "(", "self", ".", "symbols", "[", "self", ".", "nspecial", ":", "]", ",", "self", ".", "count", "[", "self", ".", "nspecial", ":", "]", ")", ")", ")", "\n", "for", "symbol", ",", "count", "in", "c", ".", "most_common", "(", "nwords", "-", "self", ".", "nspecial", ")", ":", "\n", "            ", "if", "count", ">=", "threshold", ":", "\n", "                ", "new_indices", "[", "symbol", "]", "=", "len", "(", "new_symbols", ")", "\n", "new_symbols", ".", "append", "(", "symbol", ")", "\n", "new_count", ".", "append", "(", "count", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "threshold_nwords", "=", "len", "(", "new_symbols", ")", "\n", "if", "padding_factor", ">", "1", ":", "\n", "            ", "i", "=", "0", "\n", "while", "threshold_nwords", "%", "padding_factor", "!=", "0", ":", "\n", "                ", "symbol", "=", "'madeupword{:04d}'", ".", "format", "(", "i", ")", "\n", "new_indices", "[", "symbol", "]", "=", "len", "(", "new_symbols", ")", "\n", "new_symbols", ".", "append", "(", "symbol", ")", "\n", "new_count", ".", "append", "(", "0", ")", "\n", "i", "+=", "1", "\n", "threshold_nwords", "+=", "1", "\n", "\n", "", "", "assert", "len", "(", "new_symbols", ")", "%", "padding_factor", "==", "0", "\n", "assert", "len", "(", "new_symbols", ")", "==", "len", "(", "new_indices", ")", "\n", "\n", "self", ".", "count", "=", "list", "(", "new_count", ")", "\n", "self", ".", "symbols", "=", "list", "(", "new_symbols", ")", "\n", "self", ".", "indices", "=", "new_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad": [[143, 146], ["None"], "methods", ["None"], ["", "def", "pad", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper to get index of pad symbol\"\"\"", "\n", "return", "self", ".", "pad_index", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos": [[147, 150], ["None"], "methods", ["None"], ["", "def", "eos", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper to get index of end-of-sentence symbol\"\"\"", "\n", "return", "self", ".", "eos_index", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk": [[151, 154], ["None"], "methods", ["None"], ["", "def", "unk", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper to get index of unk symbol\"\"\"", "\n", "return", "self", ".", "unk_index", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.load": [[155, 188], ["isinstance", "cls", "f.readlines", "line.rfind", "int", "len", "cls.symbols.append", "cls.count.append", "Exception", "open", "cls.load", "open", "cls.load"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "f", ",", "ignore_utf_errors", "=", "False", ")", ":", "\n", "        ", "\"\"\"Loads the dictionary from a text file with the format:\n\n        ```\n        <symbol0> <count0>\n        <symbol1> <count1>\n        ...\n        ```\n        \"\"\"", "\n", "if", "isinstance", "(", "f", ",", "str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "not", "ignore_utf_errors", ":", "\n", "                    ", "with", "open", "(", "f", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fd", ":", "\n", "                        ", "return", "cls", ".", "load", "(", "fd", ")", "\n", "", "", "else", ":", "\n", "                    ", "with", "open", "(", "f", ",", "'r'", ",", "encoding", "=", "'utf-8'", ",", "errors", "=", "'ignore'", ")", "as", "fd", ":", "\n", "                        ", "return", "cls", ".", "load", "(", "fd", ")", "\n", "", "", "", "except", "FileNotFoundError", "as", "fnfe", ":", "\n", "                ", "raise", "fnfe", "\n", "", "except", "Exception", ":", "\n", "                ", "raise", "Exception", "(", "\"Incorrect encoding detected in {}, please \"", "\n", "\"rebuild the dataset\"", ".", "format", "(", "f", ")", ")", "\n", "\n", "", "", "d", "=", "cls", "(", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "idx", "=", "line", ".", "rfind", "(", "' '", ")", "\n", "word", "=", "line", "[", ":", "idx", "]", "\n", "count", "=", "int", "(", "line", "[", "idx", "+", "1", ":", "]", ")", "\n", "d", ".", "indices", "[", "word", "]", "=", "len", "(", "d", ".", "symbols", ")", "\n", "d", ".", "symbols", ".", "append", "(", "word", ")", "\n", "d", ".", "count", ".", "append", "(", "count", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.save": [[189, 197], ["isinstance", "zip", "os.makedirs", "print", "os.path.dirname", "open", "dictionary.Dictionary.save"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.progress_bar.tqdm_progress_bar.print", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.save"], ["", "def", "save", "(", "self", ",", "f", ")", ":", "\n", "        ", "\"\"\"Stores dictionary into a text file\"\"\"", "\n", "if", "isinstance", "(", "f", ",", "str", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "f", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "f", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "fd", ":", "\n", "                ", "return", "self", ".", "save", "(", "fd", ")", "\n", "", "", "for", "symbol", ",", "count", "in", "zip", "(", "self", ".", "symbols", "[", "self", ".", "nspecial", ":", "]", ",", "self", ".", "count", "[", "self", ".", "nspecial", ":", "]", ")", ":", "\n", "            ", "print", "(", "'{} {}'", ".", "format", "(", "symbol", ",", "count", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.dummy_sentence": [[198, 202], ["torch.Tensor().uniform_().long", "dictionary.Dictionary.eos", "torch.Tensor().uniform_", "len", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "", "def", "dummy_sentence", "(", "self", ",", "length", ")", ":", "\n", "        ", "t", "=", "torch", ".", "Tensor", "(", "length", ")", ".", "uniform_", "(", "self", ".", "nspecial", "+", "1", ",", "len", "(", "self", ")", ")", ".", "long", "(", ")", "\n", "t", "[", "-", "1", "]", "=", "self", ".", "eos", "(", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.TruncatedDictionary.__init__": [[205, 211], ["type", "min", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped_dict", ",", "length", ")", ":", "\n", "        ", "self", ".", "__class__", "=", "type", "(", "wrapped_dict", ".", "__class__", ".", "__name__", ",", "\n", "(", "self", ".", "__class__", ",", "wrapped_dict", ".", "__class__", ")", ",", "{", "}", ")", "\n", "self", ".", "__dict__", "=", "wrapped_dict", ".", "__dict__", "\n", "self", ".", "wrapped_dict", "=", "wrapped_dict", "\n", "self", ".", "length", "=", "min", "(", "len", "(", "self", ".", "wrapped_dict", ")", ",", "length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.TruncatedDictionary.__len__": [[212, 214], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.TruncatedDictionary.__getitem__": [[215, 219], ["dictionary.TruncatedDictionary.wrapped_dict.unk"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "i", "<", "self", ".", "length", ":", "\n", "            ", "return", "self", ".", "wrapped_dict", "[", "i", "]", "\n", "", "return", "self", ".", "wrapped_dict", ".", "unk", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.__init__": [[55, 62], ["super().__init__", "indexed_dataset.IndexedDataset.read_index", "indexed_dataset.IndexedDataset.read_data"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.read_index", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.read_data"], ["def", "__init__", "(", "self", ",", "path", ",", "fix_lua_indexing", "=", "False", ",", "read_data", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fix_lua_indexing", "=", "fix_lua_indexing", "\n", "self", ".", "read_index", "(", "path", ")", "\n", "self", ".", "data_file", "=", "None", "\n", "if", "read_data", ":", "\n", "            ", "self", ".", "read_data", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.read_index": [[63, 75], ["open", "f.read", "f.read", "struct.unpack", "struct.unpack", "indexed_dataset.read_longs", "indexed_dataset.read_longs", "indexed_dataset.read_longs", "indexed_dataset.index_file_path", "struct.unpack", "f.read", "f.read"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.read_longs", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.read_longs", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.read_longs", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.index_file_path"], ["", "", "def", "read_index", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "index_file_path", "(", "path", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "magic", "=", "f", ".", "read", "(", "8", ")", "\n", "assert", "magic", "==", "b'TNTIDX\\x00\\x00'", "\n", "version", "=", "f", ".", "read", "(", "8", ")", "\n", "assert", "struct", ".", "unpack", "(", "'<Q'", ",", "version", ")", "==", "(", "1", ",", ")", "\n", "code", ",", "self", ".", "element_size", "=", "struct", ".", "unpack", "(", "'<QQ'", ",", "f", ".", "read", "(", "16", ")", ")", "\n", "self", ".", "dtype", "=", "dtypes", "[", "code", "]", "\n", "self", ".", "size", ",", "self", ".", "s", "=", "struct", ".", "unpack", "(", "'<QQ'", ",", "f", ".", "read", "(", "16", ")", ")", "\n", "self", ".", "dim_offsets", "=", "read_longs", "(", "f", ",", "self", ".", "size", "+", "1", ")", "\n", "self", ".", "data_offsets", "=", "read_longs", "(", "f", ",", "self", ".", "size", "+", "1", ")", "\n", "self", ".", "sizes", "=", "read_longs", "(", "f", ",", "self", ".", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.read_data": [[76, 78], ["open", "indexed_dataset.data_file_path"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.data_file_path"], ["", "", "def", "read_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "data_file", "=", "open", "(", "data_file_path", "(", "path", ")", ",", "'rb'", ",", "buffering", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.check_index": [[79, 82], ["IndexError"], "methods", ["None"], ["", "def", "check_index", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "i", "<", "0", "or", "i", ">=", "self", ".", "size", ":", "\n", "            ", "raise", "IndexError", "(", "'index out of range'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.__del__": [[83, 86], ["indexed_dataset.IndexedDataset.data_file.close"], "methods", ["None"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "data_file", ":", "\n", "            ", "self", ".", "data_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.__getitem__": [[87, 97], ["indexed_dataset.IndexedDataset.check_index", "numpy.empty", "indexed_dataset.IndexedDataset.data_file.seek", "indexed_dataset.IndexedDataset.data_file.readinto", "torch.from_numpy().long", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.check_index"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "self", ".", "check_index", "(", "i", ")", "\n", "tensor_size", "=", "self", ".", "sizes", "[", "self", ".", "dim_offsets", "[", "i", "]", ":", "self", ".", "dim_offsets", "[", "i", "+", "1", "]", "]", "\n", "a", "=", "np", ".", "empty", "(", "tensor_size", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "self", ".", "data_file", ".", "seek", "(", "self", ".", "data_offsets", "[", "i", "]", "*", "self", ".", "element_size", ")", "\n", "self", ".", "data_file", ".", "readinto", "(", "a", ")", "\n", "item", "=", "torch", ".", "from_numpy", "(", "a", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "fix_lua_indexing", ":", "\n", "            ", "item", "-=", "1", "# subtract 1 for 0-based indexing", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.__len__": [[98, 100], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.exists": [[101, 106], ["os.path.exists", "os.path.exists", "indexed_dataset.index_file_path", "indexed_dataset.data_file_path"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.index_file_path", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.data_file_path"], ["", "@", "staticmethod", "\n", "def", "exists", "(", "path", ")", ":", "\n", "        ", "return", "(", "\n", "os", ".", "path", ".", "exists", "(", "index_file_path", "(", "path", ")", ")", "and", "\n", "os", ".", "path", ".", "exists", "(", "data_file_path", "(", "path", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedInMemoryDataset.read_data": [[112, 119], ["open", "numpy.empty", "indexed_dataset.IndexedInMemoryDataset.data_file.readinto", "indexed_dataset.IndexedInMemoryDataset.data_file.close", "indexed_dataset.data_file_path"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.data_file_path"], ["def", "read_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "data_file", "=", "open", "(", "data_file_path", "(", "path", ")", ",", "'rb'", ")", "\n", "self", ".", "buffer", "=", "np", ".", "empty", "(", "self", ".", "data_offsets", "[", "-", "1", "]", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "self", ".", "data_file", ".", "readinto", "(", "self", ".", "buffer", ")", "\n", "self", ".", "data_file", ".", "close", "(", ")", "\n", "if", "self", ".", "fix_lua_indexing", ":", "\n", "            ", "self", ".", "buffer", "-=", "1", "# subtract 1 for 0-based indexing", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedInMemoryDataset.__del__": [[120, 122], ["None"], "methods", ["None"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedInMemoryDataset.__getitem__": [[123, 129], ["indexed_dataset.IndexedInMemoryDataset.check_index", "numpy.empty", "numpy.copyto", "torch.from_numpy().long", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.check_index"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "self", ".", "check_index", "(", "i", ")", "\n", "tensor_size", "=", "self", ".", "sizes", "[", "self", ".", "dim_offsets", "[", "i", "]", ":", "self", ".", "dim_offsets", "[", "i", "+", "1", "]", "]", "\n", "a", "=", "np", ".", "empty", "(", "tensor_size", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "np", ".", "copyto", "(", "a", ",", "self", ".", "buffer", "[", "self", ".", "data_offsets", "[", "i", "]", ":", "self", ".", "data_offsets", "[", "i", "+", "1", "]", "]", ")", "\n", "return", "torch", ".", "from_numpy", "(", "a", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.__init__": [[135, 143], ["indexed_dataset.IndexedRawTextDataset.read_data", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.read_data"], ["def", "__init__", "(", "self", ",", "path", ",", "dictionary", ",", "append_eos", "=", "True", ",", "reverse_order", "=", "False", ")", ":", "\n", "        ", "self", ".", "tokens_list", "=", "[", "]", "\n", "self", ".", "lines", "=", "[", "]", "\n", "self", ".", "sizes", "=", "[", "]", "\n", "self", ".", "append_eos", "=", "append_eos", "\n", "self", ".", "reverse_order", "=", "reverse_order", "\n", "self", ".", "read_data", "(", "path", ",", "dictionary", ")", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "tokens_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.read_data": [[144, 155], ["numpy.array", "open", "indexed_dataset.IndexedRawTextDataset.lines.append", "fairseq.tokenizer.Tokenizer.tokenize().long", "indexed_dataset.IndexedRawTextDataset.tokens_list.append", "indexed_dataset.IndexedRawTextDataset.sizes.append", "line.strip", "len", "fairseq.tokenizer.Tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.tokenizer.Tokenizer.tokenize"], ["", "def", "read_data", "(", "self", ",", "path", ",", "dictionary", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "self", ".", "lines", ".", "append", "(", "line", ".", "strip", "(", "'\\n'", ")", ")", "\n", "tokens", "=", "Tokenizer", ".", "tokenize", "(", "\n", "line", ",", "dictionary", ",", "add_if_not_exist", "=", "False", ",", "\n", "append_eos", "=", "self", ".", "append_eos", ",", "reverse_order", "=", "self", ".", "reverse_order", ",", "\n", ")", ".", "long", "(", ")", "\n", "self", ".", "tokens_list", ".", "append", "(", "tokens", ")", "\n", "self", ".", "sizes", ".", "append", "(", "len", "(", "tokens", ")", ")", "\n", "", "", "self", ".", "sizes", "=", "np", ".", "array", "(", "self", ".", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.__getitem__": [[156, 159], ["indexed_dataset.IndexedRawTextDataset.check_index"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.check_index"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "self", ".", "check_index", "(", "i", ")", "\n", "return", "self", ".", "tokens_list", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.get_original_text": [[160, 163], ["indexed_dataset.IndexedRawTextDataset.check_index"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDataset.check_index"], ["", "def", "get_original_text", "(", "self", ",", "i", ")", ":", "\n", "        ", "self", ".", "check_index", "(", "i", ")", "\n", "return", "self", ".", "lines", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.__del__": [[164, 166], ["None"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.__len__": [[167, 169], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists": [[170, 173], ["os.path.exists"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedRawTextDataset.exists"], ["", "@", "staticmethod", "\n", "def", "exists", "(", "path", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDatasetBuilder.__init__": [[186, 193], ["open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "out_file", ",", "dtype", "=", "np", ".", "int32", ")", ":", "\n", "        ", "self", ".", "out_file", "=", "open", "(", "out_file", ",", "'wb'", ")", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "data_offsets", "=", "[", "0", "]", "\n", "self", ".", "dim_offsets", "=", "[", "0", "]", "\n", "self", ".", "sizes", "=", "[", "]", "\n", "self", ".", "element_size", "=", "self", ".", "element_sizes", "[", "self", ".", "dtype", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDatasetBuilder.add_item": [[194, 201], ["indexed_dataset.IndexedDatasetBuilder.out_file.write", "indexed_dataset.IndexedDatasetBuilder.data_offsets.append", "tensor.size", "indexed_dataset.IndexedDatasetBuilder.dim_offsets.append", "numpy.array", "indexed_dataset.IndexedDatasetBuilder.sizes.append", "len", "tensor.numpy", "tensor.size"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size"], ["", "def", "add_item", "(", "self", ",", "tensor", ")", ":", "\n", "# +1 for Lua compatibility", "\n", "        ", "bytes", "=", "self", ".", "out_file", ".", "write", "(", "np", ".", "array", "(", "tensor", ".", "numpy", "(", ")", "+", "1", ",", "dtype", "=", "self", ".", "dtype", ")", ")", "\n", "self", ".", "data_offsets", ".", "append", "(", "self", ".", "data_offsets", "[", "-", "1", "]", "+", "bytes", "/", "self", ".", "element_size", ")", "\n", "for", "s", "in", "tensor", ".", "size", "(", ")", ":", "\n", "            ", "self", ".", "sizes", ".", "append", "(", "s", ")", "\n", "", "self", ".", "dim_offsets", ".", "append", "(", "self", ".", "dim_offsets", "[", "-", "1", "]", "+", "len", "(", "tensor", ".", "size", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDatasetBuilder.merge_file_": [[202, 221], ["indexed_dataset.IndexedDataset", "indexed_dataset.IndexedDatasetBuilder.sizes.extend", "indexed_dataset.IndexedDatasetBuilder.data_offsets.append", "indexed_dataset.IndexedDatasetBuilder.dim_offsets.append", "open", "indexed_dataset.data_file_path", "f.read", "indexed_dataset.IndexedDatasetBuilder.out_file.write"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.data_file_path"], ["", "def", "merge_file_", "(", "self", ",", "another_file", ")", ":", "\n", "        ", "index", "=", "IndexedDataset", "(", "another_file", ",", "read_data", "=", "False", ")", "\n", "assert", "index", ".", "dtype", "==", "self", ".", "dtype", "\n", "\n", "begin", "=", "self", ".", "data_offsets", "[", "-", "1", "]", "\n", "for", "offset", "in", "index", ".", "data_offsets", "[", "1", ":", "]", ":", "\n", "            ", "self", ".", "data_offsets", ".", "append", "(", "begin", "+", "offset", ")", "\n", "", "self", ".", "sizes", ".", "extend", "(", "index", ".", "sizes", ")", "\n", "begin", "=", "self", ".", "dim_offsets", "[", "-", "1", "]", "\n", "for", "dim_offset", "in", "index", ".", "dim_offsets", "[", "1", ":", "]", ":", "\n", "            ", "self", ".", "dim_offsets", ".", "append", "(", "begin", "+", "dim_offset", ")", "\n", "\n", "", "with", "open", "(", "data_file_path", "(", "another_file", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "data", "=", "f", ".", "read", "(", "1024", ")", "\n", "if", "data", ":", "\n", "                    ", "self", ".", "out_file", ".", "write", "(", "data", ")", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.IndexedDatasetBuilder.finalize": [[222, 233], ["indexed_dataset.IndexedDatasetBuilder.out_file.close", "open", "open.write", "open.write", "open.write", "open.write", "indexed_dataset.write_longs", "indexed_dataset.write_longs", "indexed_dataset.write_longs", "open.close", "struct.pack", "struct.pack", "struct.pack", "indexed_dataset.code", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.write_longs", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.write_longs", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.write_longs", "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.code"], ["", "", "", "", "def", "finalize", "(", "self", ",", "index_file", ")", ":", "\n", "        ", "self", ".", "out_file", ".", "close", "(", ")", "\n", "index", "=", "open", "(", "index_file", ",", "'wb'", ")", "\n", "index", ".", "write", "(", "b'TNTIDX\\x00\\x00'", ")", "\n", "index", ".", "write", "(", "struct", ".", "pack", "(", "'<Q'", ",", "1", ")", ")", "\n", "index", ".", "write", "(", "struct", ".", "pack", "(", "'<QQ'", ",", "code", "(", "self", ".", "dtype", ")", ",", "self", ".", "element_size", ")", ")", "\n", "index", ".", "write", "(", "struct", ".", "pack", "(", "'<QQ'", ",", "len", "(", "self", ".", "data_offsets", ")", "-", "1", ",", "len", "(", "self", ".", "sizes", ")", ")", ")", "\n", "write_longs", "(", "index", ",", "self", ".", "dim_offsets", ")", "\n", "write_longs", "(", "index", ",", "self", ".", "data_offsets", ")", "\n", "write_longs", "(", "index", ",", "self", ".", "sizes", ")", "\n", "index", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.read_longs": [[17, 21], ["numpy.empty", "f.readinto"], "function", ["None"], ["def", "read_longs", "(", "f", ",", "n", ")", ":", "\n", "    ", "a", "=", "np", ".", "empty", "(", "n", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "f", ".", "readinto", "(", "a", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.write_longs": [[23, 25], ["f.write", "numpy.array"], "function", ["None"], ["", "def", "write_longs", "(", "f", ",", "a", ")", ":", "\n", "    ", "f", ".", "write", "(", "np", ".", "array", "(", "a", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.code": [[38, 42], ["dtypes.keys"], "function", ["None"], ["def", "code", "(", "dtype", ")", ":", "\n", "    ", "for", "k", "in", "dtypes", ".", "keys", "(", ")", ":", "\n", "        ", "if", "dtypes", "[", "k", "]", "==", "dtype", ":", "\n", "            ", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.index_file_path": [[44, 46], ["None"], "function", ["None"], ["", "", "", "def", "index_file_path", "(", "prefix_path", ")", ":", "\n", "    ", "return", "prefix_path", "+", "'.idx'", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.indexed_dataset.data_file_path": [[48, 50], ["None"], "function", ["None"], ["", "def", "data_file_path", "(", "prefix_path", ")", ":", "\n", "    ", "return", "prefix_path", "+", "'.bin'", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset.__init__": [[60, 74], ["numpy.array", "all", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "sizes", ",", "src_vocab", ",", "tgt_vocab", ",", "add_eos_for_other_targets", ",", "shuffle", ",", "\n", "targets", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "sizes", "=", "np", ".", "array", "(", "sizes", ")", "\n", "self", ".", "vocab", "=", "src_vocab", "\n", "self", ".", "tgt_vocab", "=", "tgt_vocab", "\n", "self", ".", "add_eos_for_other_targets", "=", "add_eos_for_other_targets", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "assert", "targets", "is", "None", "or", "all", "(", "\n", "t", "in", "{", "'self'", ",", "'future'", ",", "'past'", "}", "for", "t", "in", "targets", ")", ",", "\"targets must be none or one of 'self', 'future', 'past'\"", "\n", "if", "targets", "is", "not", "None", "and", "len", "(", "targets", ")", "==", "0", ":", "\n", "            ", "targets", "=", "None", "\n", "", "self", ".", "targets", "=", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset.__getitem__": [[75, 79], ["monolingual_dataset.MonolingualDataset._make_source_target"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset._make_source_target"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "source", ",", "future_target", ",", "past_target", "=", "self", ".", "dataset", "[", "index", "]", "\n", "source", ",", "target", "=", "self", ".", "_make_source_target", "(", "source", ",", "future_target", ",", "past_target", ")", "\n", "return", "{", "'id'", ":", "index", ",", "'source'", ":", "source", ",", "'target'", ":", "target", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset.__len__": [[80, 82], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset._make_source_target": [[83, 115], ["monolingual_dataset.MonolingualDataset._filter_vocab", "torch.cat", "len", "monolingual_dataset.MonolingualDataset.vocab.eos", "torch.cat", "torch.cat", "target.append", "torch.cat.new", "target.append", "torch.cat.new", "torch.cat.new", "target.append", "Exception", "monolingual_dataset.MonolingualDataset.vocab.eos", "monolingual_dataset.MonolingualDataset.vocab.pad", "monolingual_dataset.MonolingualDataset.vocab.pad"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset._filter_vocab", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad"], ["", "def", "_make_source_target", "(", "self", ",", "source", ",", "future_target", ",", "past_target", ")", ":", "\n", "        ", "if", "self", ".", "targets", "is", "not", "None", ":", "\n", "            ", "target", "=", "[", "]", "\n", "\n", "if", "self", ".", "add_eos_for_other_targets", "and", "(", "(", "'self'", "in", "self", ".", "targets", ")", "or", "(", "'past'", "in", "self", ".", "targets", ")", ")", "and", "source", "[", "-", "1", "]", "!=", "self", ".", "vocab", ".", "eos", "(", ")", ":", "\n", "# append eos at the end of source", "\n", "                ", "source", "=", "torch", ".", "cat", "(", "[", "source", ",", "source", ".", "new", "(", "[", "self", ".", "vocab", ".", "eos", "(", ")", "]", ")", "]", ")", "\n", "\n", "if", "'future'", "in", "self", ".", "targets", ":", "\n", "                    ", "future_target", "=", "torch", ".", "cat", "(", "[", "future_target", ",", "future_target", ".", "new", "(", "[", "self", ".", "vocab", ".", "pad", "(", ")", "]", ")", "]", ")", "\n", "", "if", "'past'", "in", "self", ".", "targets", ":", "\n", "# first token is before the start of sentence which is only used in \"none\" break mode when", "\n", "# add_eos_for_other_targets is False", "\n", "                    ", "past_target", "=", "torch", ".", "cat", "(", "[", "past_target", ".", "new", "(", "[", "self", ".", "vocab", ".", "pad", "(", ")", "]", ")", ",", "past_target", "[", "1", ":", "]", ",", "source", "[", "-", "2", ",", "None", "]", "]", ")", "\n", "\n", "", "", "for", "t", "in", "self", ".", "targets", ":", "\n", "                ", "if", "t", "==", "'self'", ":", "\n", "                    ", "target", ".", "append", "(", "source", ")", "\n", "", "elif", "t", "==", "'future'", ":", "\n", "                    ", "target", ".", "append", "(", "future_target", ")", "\n", "", "elif", "t", "==", "'past'", ":", "\n", "                    ", "target", ".", "append", "(", "past_target", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'invalid target '", "+", "t", ")", "\n", "\n", "", "", "if", "len", "(", "target", ")", "==", "1", ":", "\n", "                ", "target", "=", "target", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "target", "=", "future_target", "\n", "\n", "", "return", "source", ",", "self", ".", "_filter_vocab", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset._filter_vocab": [[116, 128], ["len", "len", "isinstance", "monolingual_dataset.MonolingualDataset._filter_vocab._filter"], "methods", ["None"], ["", "def", "_filter_vocab", "(", "self", ",", "target", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "tgt_vocab", ")", "!=", "len", "(", "self", ".", "vocab", ")", ":", "\n", "            ", "def", "_filter", "(", "target", ")", ":", "\n", "                ", "mask", "=", "target", ".", "ge", "(", "len", "(", "self", ".", "tgt_vocab", ")", ")", "\n", "if", "mask", ".", "any", "(", ")", ":", "\n", "                    ", "target", "[", "mask", "]", "=", "self", ".", "tgt_vocab", ".", "unk", "(", ")", "\n", "", "return", "target", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "                ", "return", "[", "_filter", "(", "t", ")", "for", "t", "in", "target", "]", "\n", "", "return", "_filter", "(", "target", ")", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset.collater": [[129, 151], ["monolingual_dataset.collate", "monolingual_dataset.MonolingualDataset.vocab.pad", "monolingual_dataset.MonolingualDataset.vocab.eos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.collate", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Merge a list of samples to form a mini-batch.\n\n        Args:\n            samples (List[dict]): samples to collate\n\n        Returns:\n            dict: a mini-batch with the following keys:\n\n                - `id` (LongTensor): example IDs in the original input order\n                - `ntokens` (int): total number of tokens in the batch\n                - `net_input` (dict): the input to the Model, containing keys:\n\n                  - `src_tokens` (LongTensor): a padded 2D Tensor of tokens in\n                    the source sentence of shape `(bsz, src_len)`. Padding will\n                    appear on the right.\n\n                - `target` (LongTensor): a padded 2D Tensor of tokens in the\n                  target sentence of shape `(bsz, tgt_len)`. Padding will appear\n                  on the right.\n        \"\"\"", "\n", "return", "collate", "(", "samples", ",", "self", ".", "vocab", ".", "pad", "(", ")", ",", "self", ".", "vocab", ".", "eos", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset.get_dummy_batch": [[152, 164], ["monolingual_dataset.MonolingualDataset.vocab.dummy_sentence", "monolingual_dataset.MonolingualDataset._make_source_target", "monolingual_dataset.MonolingualDataset.collater", "isinstance", "isinstance", "min", "range"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.dummy_sentence", "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset._make_source_target", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.collater"], ["", "def", "get_dummy_batch", "(", "self", ",", "num_tokens", ",", "max_positions", ",", "tgt_len", "=", "128", ")", ":", "\n", "        ", "\"\"\"Return a dummy batch with a given number of tokens.\"\"\"", "\n", "if", "isinstance", "(", "max_positions", ",", "float", ")", "or", "isinstance", "(", "max_positions", ",", "int", ")", ":", "\n", "            ", "tgt_len", "=", "min", "(", "tgt_len", ",", "max_positions", ")", "\n", "", "bsz", "=", "num_tokens", "//", "tgt_len", "\n", "target", "=", "self", ".", "vocab", ".", "dummy_sentence", "(", "tgt_len", "+", "2", ")", "\n", "source", ",", "past_target", ",", "future_target", "=", "target", "[", "1", ":", "-", "1", "]", ",", "target", "[", "2", ":", "]", ",", "target", "[", ":", "-", "2", "]", "\n", "source", ",", "target", "=", "self", ".", "_make_source_target", "(", "source", ",", "past_target", ",", "future_target", ")", "\n", "\n", "return", "self", ".", "collater", "(", "[", "\n", "{", "'id'", ":", "i", ",", "'source'", ":", "source", ",", "'target'", ":", "target", "}", "\n", "for", "i", "in", "range", "(", "bsz", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset.num_tokens": [[166, 170], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return the number of tokens in a sample. This value is used to\n        enforce ``--max-tokens`` during batching.\"\"\"", "\n", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset.size": [[171, 175], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with ``--max-positions``.\"\"\"", "\n", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.MonolingualDataset.ordered_indices": [[176, 185], ["order.append", "numpy.lexsort", "numpy.flip", "numpy.random.permutation", "numpy.arange", "len", "len"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an ordered list of indices. Batches will be constructed based\n        on this order.\"\"\"", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "order", "=", "[", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "order", "=", "[", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "]", "\n", "", "order", ".", "append", "(", "np", ".", "flip", "(", "self", ".", "sizes", ",", "0", ")", ")", "\n", "return", "np", ".", "lexsort", "(", "order", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.monolingual_dataset.collate": [[15, 45], ["isinstance", "len", "torch.LongTensor", "sum", "monolingual_dataset.collate.merge"], "function", ["None"], ["def", "collate", "(", "samples", ",", "pad_idx", ",", "eos_idx", ")", ":", "\n", "    ", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "        ", "return", "{", "}", "\n", "\n", "", "def", "merge", "(", "key", ",", "is_list", "=", "False", ")", ":", "\n", "        ", "if", "is_list", ":", "\n", "            ", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "samples", "[", "0", "]", "[", "key", "]", ")", ")", ":", "\n", "                ", "res", ".", "append", "(", "data_utils", ".", "collate_tokens", "(", "\n", "[", "s", "[", "key", "]", "[", "i", "]", "for", "s", "in", "samples", "]", ",", "pad_idx", ",", "eos_idx", ",", "left_pad", "=", "False", ",", "\n", ")", ")", "\n", "", "return", "res", "\n", "", "else", ":", "\n", "            ", "return", "data_utils", ".", "collate_tokens", "(", "\n", "[", "s", "[", "key", "]", "for", "s", "in", "samples", "]", ",", "pad_idx", ",", "eos_idx", ",", "left_pad", "=", "False", ",", "\n", ")", "\n", "\n", "", "", "is_target_list", "=", "isinstance", "(", "samples", "[", "0", "]", "[", "'target'", "]", ",", "list", ")", "\n", "\n", "return", "{", "\n", "'id'", ":", "torch", ".", "LongTensor", "(", "[", "s", "[", "'id'", "]", "for", "s", "in", "samples", "]", ")", ",", "\n", "'ntokens'", ":", "sum", "(", "len", "(", "s", "[", "'source'", "]", ")", "for", "s", "in", "samples", ")", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "merge", "(", "'source'", ")", ",", "\n", "'src_lengths'", ":", "torch", ".", "LongTensor", "(", "[", "\n", "s", "[", "'source'", "]", ".", "numel", "(", ")", "for", "s", "in", "samples", "\n", "]", ")", ",", "\n", "}", ",", "\n", "'target'", ":", "merge", "(", "'target'", ",", "is_target_list", ")", ",", "\n", "'nsentences'", ":", "samples", "[", "0", "]", "[", "'source'", "]", ".", "size", "(", "0", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__init__": [[97, 120], ["numpy.array", "numpy.array", "src_dict.pad", "tgt_dict.pad", "src_dict.eos", "tgt_dict.eos", "src_dict.unk", "tgt_dict.unk"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.unk"], ["def", "__init__", "(", "\n", "self", ",", "src", ",", "src_sizes", ",", "src_dict", ",", "\n", "tgt", "=", "None", ",", "tgt_sizes", "=", "None", ",", "tgt_dict", "=", "None", ",", "\n", "left_pad_source", "=", "True", ",", "left_pad_target", "=", "False", ",", "\n", "max_source_positions", "=", "1024", ",", "max_target_positions", "=", "1024", ",", "\n", "shuffle", "=", "True", ",", "input_feeding", "=", "True", ",", "\n", ")", ":", "\n", "        ", "if", "tgt_dict", "is", "not", "None", ":", "\n", "            ", "assert", "src_dict", ".", "pad", "(", ")", "==", "tgt_dict", ".", "pad", "(", ")", "\n", "assert", "src_dict", ".", "eos", "(", ")", "==", "tgt_dict", ".", "eos", "(", ")", "\n", "assert", "src_dict", ".", "unk", "(", ")", "==", "tgt_dict", ".", "unk", "(", ")", "\n", "", "self", ".", "src", "=", "src", "\n", "self", ".", "tgt", "=", "tgt", "\n", "self", ".", "src_sizes", "=", "np", ".", "array", "(", "src_sizes", ")", "\n", "self", ".", "tgt_sizes", "=", "np", ".", "array", "(", "tgt_sizes", ")", "if", "tgt_sizes", "is", "not", "None", "else", "None", "\n", "self", ".", "src_dict", "=", "src_dict", "\n", "self", ".", "tgt_dict", "=", "tgt_dict", "\n", "self", ".", "left_pad_source", "=", "left_pad_source", "\n", "self", ".", "left_pad_target", "=", "left_pad_target", "\n", "self", ".", "max_source_positions", "=", "max_source_positions", "\n", "self", ".", "max_target_positions", "=", "max_target_positions", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "input_feeding", "=", "input_feeding", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__getitem__": [[121, 126], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "{", "\n", "'id'", ":", "index", ",", "\n", "'source'", ":", "self", ".", "src", "[", "index", "]", ",", "\n", "'target'", ":", "self", ".", "tgt", "[", "index", "]", "if", "self", ".", "tgt", "is", "not", "None", "else", "None", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.__len__": [[128, 130], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "src", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.collater": [[131, 164], ["language_pair_dataset.collate", "language_pair_dataset.LanguagePairDataset.src_dict.pad", "language_pair_dataset.LanguagePairDataset.src_dict.eos"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.collate", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.eos"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Merge a list of samples to form a mini-batch.\n\n        Args:\n            samples (List[dict]): samples to collate\n\n        Returns:\n            dict: a mini-batch with the following keys:\n\n                - `id` (LongTensor): example IDs in the original input order\n                - `ntokens` (int): total number of tokens in the batch\n                - `net_input` (dict): the input to the Model, containing keys:\n\n                  - `src_tokens` (LongTensor): a padded 2D Tensor of tokens in\n                    the source sentence of shape `(bsz, src_len)`. Padding will\n                    appear on the left if *left_pad_source* is ``True``.\n                  - `src_lengths` (LongTensor): 1D Tensor of the unpadded\n                    lengths of each source sentence of shape `(bsz)`\n                  - `prev_output_tokens` (LongTensor): a padded 2D Tensor of\n                    tokens in the target sentence, shifted right by one position\n                    for input feeding/teacher forcing, of shape `(bsz,\n                    tgt_len)`. This key will not be present if *input_feeding*\n                    is ``False``. Padding will appear on the left if\n                    *left_pad_target* is ``True``.\n\n                - `target` (LongTensor): a padded 2D Tensor of tokens in the\n                  target sentence of shape `(bsz, tgt_len)`. Padding will appear\n                  on the left if *left_pad_target* is ``True``.\n        \"\"\"", "\n", "return", "collate", "(", "\n", "samples", ",", "pad_idx", "=", "self", ".", "src_dict", ".", "pad", "(", ")", ",", "eos_idx", "=", "self", ".", "src_dict", ".", "eos", "(", ")", ",", "\n", "left_pad_source", "=", "self", ".", "left_pad_source", ",", "left_pad_target", "=", "self", ".", "left_pad_target", ",", "\n", "input_feeding", "=", "self", ".", "input_feeding", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.get_dummy_batch": [[166, 181], ["fairseq.utils.resolve_max_positions", "language_pair_dataset.LanguagePairDataset.collater", "max", "language_pair_dataset.LanguagePairDataset.src_dict.dummy_sentence", "range", "language_pair_dataset.LanguagePairDataset.tgt_dict.dummy_sentence"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.collater", "home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.dummy_sentence", "home.repos.pwc.inspect_result.lyy1994_reformer.data.dictionary.Dictionary.dummy_sentence"], ["", "def", "get_dummy_batch", "(", "self", ",", "num_tokens", ",", "max_positions", ",", "src_len", "=", "128", ",", "tgt_len", "=", "128", ")", ":", "\n", "        ", "\"\"\"Return a dummy batch with a given number of tokens.\"\"\"", "\n", "src_len", ",", "tgt_len", "=", "utils", ".", "resolve_max_positions", "(", "\n", "(", "src_len", ",", "tgt_len", ")", ",", "\n", "max_positions", ",", "\n", "(", "self", ".", "max_source_positions", ",", "self", ".", "max_target_positions", ")", ",", "\n", ")", "\n", "bsz", "=", "num_tokens", "//", "max", "(", "src_len", ",", "tgt_len", ")", "\n", "return", "self", ".", "collater", "(", "[", "\n", "{", "\n", "'id'", ":", "i", ",", "\n", "'source'", ":", "self", ".", "src_dict", ".", "dummy_sentence", "(", "src_len", ")", ",", "\n", "'target'", ":", "self", ".", "tgt_dict", ".", "dummy_sentence", "(", "tgt_len", ")", "if", "self", ".", "tgt_dict", "is", "not", "None", "else", "None", ",", "\n", "}", "\n", "for", "i", "in", "range", "(", "bsz", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.num_tokens": [[183, 187], ["max"], "methods", ["home.repos.pwc.inspect_result.lyy1994_reformer.modules.reduction.Reduction.max"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return the number of tokens in a sample. This value is used to\n        enforce ``--max-tokens`` during batching.\"\"\"", "\n", "return", "max", "(", "self", ".", "src_sizes", "[", "index", "]", ",", "self", ".", "tgt_sizes", "[", "index", "]", "if", "self", ".", "tgt_sizes", "is", "not", "None", "else", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.size": [[188, 192], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with ``--max-positions``.\"\"\"", "\n", "return", "(", "self", ".", "src_sizes", "[", "index", "]", ",", "self", ".", "tgt_sizes", "[", "index", "]", "if", "self", ".", "tgt_sizes", "is", "not", "None", "else", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.LanguagePairDataset.ordered_indices": [[193, 203], ["numpy.random.permutation", "numpy.arange", "len", "len", "numpy.argsort", "numpy.argsort"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an ordered list of indices. Batches will be constructed based\n        on this order.\"\"\"", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ")", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "", "if", "self", ".", "tgt_sizes", "is", "not", "None", ":", "\n", "            ", "indices", "=", "indices", "[", "np", ".", "argsort", "(", "self", ".", "tgt_sizes", "[", "indices", "]", ",", "kind", "=", "'mergesort'", ")", "]", "\n", "", "return", "indices", "[", "np", ".", "argsort", "(", "self", ".", "src_sizes", "[", "indices", "]", ",", "kind", "=", "'mergesort'", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lyy1994_reformer.data.language_pair_dataset.collate": [[16, 69], ["torch.LongTensor", "language_pair_dataset.collate.merge"], "function", ["None"], ["def", "collate", "(", "\n", "samples", ",", "pad_idx", ",", "eos_idx", ",", "left_pad_source", "=", "True", ",", "left_pad_target", "=", "False", ",", "\n", "input_feeding", "=", "True", ",", "\n", ")", ":", "\n", "    ", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "        ", "return", "{", "}", "\n", "\n", "", "def", "merge", "(", "key", ",", "left_pad", ",", "move_eos_to_beginning", "=", "False", ")", ":", "\n", "        ", "return", "data_utils", ".", "collate_tokens", "(", "\n", "[", "s", "[", "key", "]", "for", "s", "in", "samples", "]", ",", "\n", "pad_idx", ",", "eos_idx", ",", "left_pad", ",", "move_eos_to_beginning", ",", "\n", ")", "\n", "\n", "", "id", "=", "torch", ".", "LongTensor", "(", "[", "s", "[", "'id'", "]", "for", "s", "in", "samples", "]", ")", "\n", "src_tokens", "=", "merge", "(", "'source'", ",", "left_pad", "=", "left_pad_source", ")", "\n", "# sort by descending source length", "\n", "src_lengths", "=", "torch", ".", "LongTensor", "(", "[", "s", "[", "'source'", "]", ".", "numel", "(", ")", "for", "s", "in", "samples", "]", ")", "\n", "src_lengths", ",", "sort_order", "=", "src_lengths", ".", "sort", "(", "descending", "=", "True", ")", "\n", "id", "=", "id", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "src_tokens", "=", "src_tokens", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "\n", "prev_output_tokens", "=", "None", "\n", "target", "=", "None", "\n", "if", "samples", "[", "0", "]", ".", "get", "(", "'target'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "target", "=", "merge", "(", "'target'", ",", "left_pad", "=", "left_pad_target", ")", "\n", "target", "=", "target", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "ntokens", "=", "sum", "(", "len", "(", "s", "[", "'target'", "]", ")", "for", "s", "in", "samples", ")", "\n", "\n", "if", "input_feeding", ":", "\n", "# we create a shifted version of targets for feeding the", "\n", "# previous output token(s) into the next decoder step", "\n", "            ", "prev_output_tokens", "=", "merge", "(", "\n", "'target'", ",", "\n", "left_pad", "=", "left_pad_target", ",", "\n", "move_eos_to_beginning", "=", "True", ",", "\n", ")", "\n", "prev_output_tokens", "=", "prev_output_tokens", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "", "", "else", ":", "\n", "        ", "ntokens", "=", "sum", "(", "len", "(", "s", "[", "'source'", "]", ")", "for", "s", "in", "samples", ")", "\n", "\n", "", "batch", "=", "{", "\n", "'id'", ":", "id", ",", "\n", "'ntokens'", ":", "ntokens", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "src_tokens", ",", "\n", "'src_lengths'", ":", "src_lengths", ",", "\n", "}", ",", "\n", "'target'", ":", "target", ",", "\n", "'nsentences'", ":", "samples", "[", "0", "]", "[", "'source'", "]", ".", "size", "(", "0", ")", ",", "\n", "}", "\n", "if", "prev_output_tokens", "is", "not", "None", ":", "\n", "        ", "batch", "[", "'net_input'", "]", "[", "'prev_output_tokens'", "]", "=", "prev_output_tokens", "\n", "", "return", "batch", "\n", "\n"]]}