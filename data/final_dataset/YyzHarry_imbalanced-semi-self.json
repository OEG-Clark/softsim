{"home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_rot.main": [[53, 70], ["parser.parse_args", "utils.prepare_folders", "pretrain_rot.main_worker", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "parser.parse_args.dataset.startswith", "str"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.prepare_folders", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "store_name", "=", "'_'", ".", "join", "(", "[", "args", ".", "dataset", ",", "args", ".", "arch", ",", "args", ".", "loss_type", ",", "args", ".", "train_rule", ",", "args", ".", "exp_str", "]", ")", "if", "not", "args", ".", "dataset", ".", "startswith", "(", "'cifar'", ")", "else", "'_'", ".", "join", "(", "[", "args", ".", "dataset", ",", "args", ".", "arch", ",", "args", ".", "loss_type", ",", "args", ".", "train_rule", ",", "\n", "args", ".", "imb_type", ",", "str", "(", "args", ".", "imb_factor", ")", ",", "args", ".", "exp_str", "]", ")", "\n", "prepare_folders", "(", "args", ")", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, which can slow down training considerably! '", "\n", "'You may see unexpected behavior when restarting from checkpoints.'", ")", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "main_worker", "(", "args", ".", "gpu", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_rot.main_worker": [[72, 216], ["print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torchvision.Compose", "torchvision.Compose", "args.dataset.startswith", "open", "open", "tensorboardX.SummaryWriter", "range", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.parameters", "os.path.isfile", "dataset.imbalance_cifar.ImbalanceCIFAR10", "torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.imbalance_cifar.ImbalanceCIFAR100.get_cls_num_list", "print", "print", "os.path.join", "os.path.join", "open", "f.write", "utils.adjust_learning_rate", "torch.CrossEntropyLoss().cuda", "pretrain_rot.train", "pretrain_rot.validate", "max", "tensorboardX.SummaryWriter.add_scalar", "print", "open.write", "open.flush", "utils.save_checkpoint", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "ValueError", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "utils.ImbalancedDatasetSampler", "dataset.imbalance_cifar.ImbalanceCIFAR100", "torchvision.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "str", "os.path.join", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "best_acc1.to.to", "utils.ImbalancedDatasetSampler", "dataset.inat.load_data_inat", "dataset.inat.load_data_inat", "np.power", "np.array", "len", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.CrossEntropyLoss", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "dataset.imagenet.load_data_imagenet", "dataset.imagenet.load_data_imagenet", "NotImplementedError", "np.sum", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "np.power", "np.array", "len", "np.sum", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "str"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_cls_num_list", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.train", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.validate", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.save_checkpoint", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.inat.load_data_inat", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.inat.load_data_inat", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imagenet.load_data_imagenet", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imagenet.load_data_imagenet"], ["", "def", "main_worker", "(", "gpu", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "f\"Use GPU: {args.gpu} for training\"", ")", "\n", "\n", "", "print", "(", "f\"===> Creating model '{args.arch}'\"", ")", "\n", "num_classes", "=", "4", "\n", "use_norm", "=", "True", "if", "args", ".", "loss_type", "==", "'LDAM'", "else", "False", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "num_classes", ",", "use_norm", "=", "use_norm", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "f\"===> Loading checkpoint '{args.resume}'\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "torch", ".", "device", "(", "f'cuda:{str(args.gpu)}'", ")", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "f\"===> Loaded checkpoint '{args.resume}' (epoch {checkpoint['epoch']})\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"No checkpoint found at '{args.resume}'\"", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "transform_val", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_dataset", "=", "ImbalanceCIFAR10", "(", "\n", "root", "=", "args", ".", "data_path", ",", "imb_type", "=", "args", ".", "imb_type", ",", "imb_factor", "=", "args", ".", "imb_factor", ",", "\n", "rand_number", "=", "args", ".", "rand_number", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", "\n", ")", "\n", "val_dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "args", ".", "data_path", ",", "\n", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_val", ")", "\n", "train_sampler", "=", "None", "\n", "if", "args", ".", "train_rule", "==", "'Resample'", ":", "\n", "            ", "train_sampler", "=", "ImbalancedDatasetSampler", "(", "train_dataset", ")", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "train_dataset", "=", "ImbalanceCIFAR100", "(", "\n", "root", "=", "args", ".", "data_path", ",", "imb_type", "=", "args", ".", "imb_type", ",", "imb_factor", "=", "args", ".", "imb_factor", ",", "\n", "rand_number", "=", "args", ".", "rand_number", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", "\n", ")", "\n", "val_dataset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "args", ".", "data_path", ",", "\n", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_val", ")", "\n", "train_sampler", "=", "None", "\n", "if", "args", ".", "train_rule", "==", "'Resample'", ":", "\n", "            ", "train_sampler", "=", "ImbalancedDatasetSampler", "(", "train_dataset", ")", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'inat'", ":", "\n", "        ", "train_loader", "=", "load_data_inat", "(", "data_root", "=", "args", ".", "data_path", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "phase", "=", "'train'", ",", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "load_data_inat", "(", "data_root", "=", "args", ".", "data_path", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "phase", "=", "'val'", ",", "shuffle", "=", "False", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "        ", "train_loader", "=", "load_data_imagenet", "(", "data_root", "=", "args", ".", "data_path", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "phase", "=", "'train'", ",", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "load_data_imagenet", "(", "data_root", "=", "args", ".", "data_path", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "phase", "=", "'val'", ",", "shuffle", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Dataset is not listed'", ")", "\n", "\n", "", "if", "args", ".", "dataset", ".", "startswith", "(", "'cifar'", ")", ":", "\n", "        ", "cls_num_list", "=", "train_dataset", ".", "get_cls_num_list", "(", ")", "\n", "print", "(", "'cls num list:'", ")", "\n", "print", "(", "cls_num_list", ")", "\n", "args", ".", "cls_num_list", "=", "cls_num_list", "\n", "\n", "# init log for training", "\n", "", "log_training", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log_train.csv'", ")", ",", "'w'", ")", "\n", "log_testing", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log_test.csv'", ")", ",", "'w'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "if", "args", ".", "train_rule", "==", "'Reweight'", ":", "\n", "            ", "beta", "=", "0.9999", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "beta", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "beta", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "per_cls_weights", "=", "torch", ".", "FloatTensor", "(", "per_cls_weights", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "elif", "args", ".", "train_rule", "==", "'DRW'", ":", "\n", "            ", "idx", "=", "epoch", "//", "160", "\n", "betas", "=", "[", "0", ",", "0.9999", "]", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "betas", "[", "idx", "]", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "betas", "[", "idx", "]", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "per_cls_weights", "=", "torch", ".", "FloatTensor", "(", "per_cls_weights", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "per_cls_weights", "=", "None", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "per_cls_weights", ")", ".", "cuda", "(", ")", "\n", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "log_training", ",", "tf_writer", ")", "\n", "acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ",", "log_testing", ",", "tf_writer", ")", "\n", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1_best'", ",", "best_acc1", ",", "epoch", ")", "\n", "output_best", "=", "'Best Prec@1: %.3f\\n'", "%", "best_acc1", "\n", "print", "(", "output_best", ")", "\n", "log_testing", ".", "write", "(", "output_best", "+", "'\\n'", ")", "\n", "log_testing", ".", "flush", "(", ")", "\n", "\n", "save_checkpoint", "(", "args", ",", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_rot.train": [[218, 263], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "enumerate", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "utils.AverageMeter.update", "utils.rotation", "inputs.cuda.cuda", "target_rot.cuda", "model", "criterion", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "utils.accuracy", "criterion.item", "inputs.cuda.size", "acc1.item", "inputs.cuda.size", "print", "log.write", "log.flush", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.train", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.rotation", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLossFunc.backward", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.accuracy", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "log", ",", "tf_writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", ",", "target_rot", "=", "rotation", "(", "inputs", ")", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target_rot", ".", "cuda", "(", ")", "\n", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "acc1", "=", "accuracy", "(", "output", ",", "target", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "output", "=", "(", "'Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", "*", "0.1", ")", ")", "\n", "print", "(", "output", ")", "\n", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_rot.validate": [[265, 311], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "tf_writer.add_scalar", "tf_writer.add_scalar", "utils.rotation", "inputs.cuda.cuda", "target_rot.cuda", "model", "criterion", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "all_preds.extend", "all_targets.extend", "log.write", "log.flush", "utils.accuracy", "criterion.item", "inputs.cuda.size", "acc1.item", "inputs.cuda.size", "pred.cpu().numpy", "target_rot.cuda.cpu().numpy", "print", "time.time", "len", "pred.cpu", "target_rot.cuda.cpu"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.eval", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.rotation", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.accuracy", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ",", "log", "=", "None", ",", "tf_writer", "=", "None", ",", "flag", "=", "'val'", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "all_preds", "=", "[", "]", "\n", "all_targets", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "_", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "inputs", ",", "target_rot", "=", "rotation", "(", "inputs", ")", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target_rot", ".", "cuda", "(", ")", "\n", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "acc1", "=", "accuracy", "(", "output", ",", "target", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "all_preds", ".", "extend", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_targets", ".", "extend", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "output", "=", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "loss", "=", "losses", ",", "top1", "=", "top1", ")", ")", "\n", "print", "(", "output", ")", "\n", "", "", "output", "=", "(", "'{flag} Results: Prec@1 {top1.avg:.3f} Loss {loss.avg:.5f}'", ".", "format", "(", "flag", "=", "flag", ",", "top1", "=", "top1", ",", "loss", "=", "losses", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "            ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "tf_writer", ".", "add_scalar", "(", "'loss/test_'", "+", "flag", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_'", "+", "flag", "+", "'_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train.main": [[54, 70], ["parser.parse_args", "utils.prepare_folders", "train.main_worker", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "str"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.prepare_folders", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "store_name", "=", "'_'", ".", "join", "(", "[", "args", ".", "dataset", ",", "args", ".", "arch", ",", "args", ".", "loss_type", ",", "args", ".", "train_rule", ",", "\n", "args", ".", "imb_type", ",", "str", "(", "args", ".", "imb_factor", ")", ",", "args", ".", "exp_str", "]", ")", "\n", "prepare_folders", "(", "args", ")", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, which can slow down training considerably! '", "\n", "'You may see unexpected behavior when restarting from checkpoints.'", ")", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "main_worker", "(", "args", ".", "gpu", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train.main_worker": [[72, 270], ["print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torchvision.Compose", "torchvision.Compose", "args.dataset.startswith", "open", "open", "tensorboardX.SummaryWriter", "range", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.parameters", "args.dataset.startswith", "args.dataset.startswith", "dataset.imbalance_cifar.ImbalanceCIFAR10", "torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "print", "train.validate", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "dataset.imbalance_svhn.ImbalanceSVHN.get_cls_num_list", "print", "print", "os.path.join", "os.path.join", "open", "f.write", "utils.adjust_learning_rate", "train.train", "train.validate", "max", "tensorboardX.SummaryWriter.add_scalar", "print", "open.write", "open.flush", "utils.save_checkpoint", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "utils.ImbalancedDatasetSampler", "dataset.imbalance_cifar.ImbalanceCIFAR100", "torchvision.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.CrossEntropyLoss", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "ValueError", "OrderedDict", "checkpoint[].items", "torch.nn.DataParallel().cuda.load_state_dict", "print", "list", "torch.nn.DataParallel().cuda.load_state_dict", "os.path.join", "str", "os.path.join", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.CrossEntropyLoss().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.ImbalancedDatasetSampler", "dataset.imbalance_svhn.ImbalanceSVHN", "torchvision.SVHN", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "NotImplementedError", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "best_acc1.to.to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "state_dict.keys", "np.power", "np.array", "len", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "losses.LDAMLoss().cuda", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "utils.ImbalancedDatasetSampler", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "k.startswith", "set", "set", "np.sum", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "np.power", "np.array", "len", "torch.CrossEntropyLoss", "losses.FocalLoss().cuda", "warnings.warn", "len", "k.startswith", "np.sum", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "losses.LDAMLoss", "str", "str", "list", "losses.FocalLoss", "str", "OrderedDict.keys", "len"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.validate", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_cls_num_list", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.train", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.validate", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.save_checkpoint"], ["", "def", "main_worker", "(", "gpu", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "f\"Use GPU: {args.gpu} for training\"", ")", "\n", "\n", "", "print", "(", "f\"===> Creating model '{args.arch}'\"", ")", "\n", "if", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "num_classes", "=", "100", "\n", "", "elif", "args", ".", "dataset", "in", "{", "'cifar10'", ",", "'svhn'", "}", ":", "\n", "        ", "num_classes", "=", "10", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "use_norm", "=", "True", "if", "args", ".", "loss_type", "==", "'LDAM'", "else", "False", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "num_classes", ",", "use_norm", "=", "use_norm", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "if", "args", ".", "dataset", ".", "startswith", "(", "'cifar'", ")", "else", "[", ".5", ",", ".5", ",", ".5", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "if", "args", ".", "dataset", ".", "startswith", "(", "'cifar'", ")", "else", "[", ".5", ",", ".5", ",", ".5", "]", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", ")", "\n", "transform_val", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_dataset", "=", "ImbalanceCIFAR10", "(", "\n", "root", "=", "args", ".", "data_path", ",", "imb_type", "=", "args", ".", "imb_type", ",", "imb_factor", "=", "args", ".", "imb_factor", ",", "\n", "rand_number", "=", "args", ".", "rand_number", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "val_dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "args", ".", "data_path", ",", "\n", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_val", ")", "\n", "train_sampler", "=", "None", "\n", "if", "args", ".", "train_rule", "==", "'Resample'", ":", "\n", "            ", "train_sampler", "=", "ImbalancedDatasetSampler", "(", "train_dataset", ")", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "train_dataset", "=", "ImbalanceCIFAR100", "(", "\n", "root", "=", "args", ".", "data_path", ",", "imb_type", "=", "args", ".", "imb_type", ",", "imb_factor", "=", "args", ".", "imb_factor", ",", "\n", "rand_number", "=", "args", ".", "rand_number", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "val_dataset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "args", ".", "data_path", ",", "\n", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_val", ")", "\n", "train_sampler", "=", "None", "\n", "if", "args", ".", "train_rule", "==", "'Resample'", ":", "\n", "            ", "train_sampler", "=", "ImbalancedDatasetSampler", "(", "train_dataset", ")", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "train_dataset", "=", "ImbalanceSVHN", "(", "\n", "root", "=", "args", ".", "data_path", ",", "imb_type", "=", "args", ".", "imb_type", ",", "imb_factor", "=", "args", ".", "imb_factor", ",", "\n", "rand_number", "=", "args", ".", "rand_number", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "val_dataset", "=", "datasets", ".", "SVHN", "(", "root", "=", "args", ".", "data_path", ",", "\n", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "transform_val", ")", "\n", "train_sampler", "=", "None", "\n", "if", "args", ".", "train_rule", "==", "'Resample'", ":", "\n", "            ", "train_sampler", "=", "ImbalancedDatasetSampler", "(", "train_dataset", ")", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Dataset {args.dataset} is not supported!\"", ")", "\n", "\n", "# evaluate only", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "assert", "args", ".", "resume", ",", "'Specify a trained model using [args.resume]'", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "torch", ".", "device", "(", "f'cuda:{str(args.gpu)}'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "f\"===> Checkpoint '{args.resume}' loaded, testing...\"", ")", "\n", "validate", "(", "val_loader", ",", "model", ",", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "0", ",", "args", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "f\"===> Loading checkpoint '{args.resume}'\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "torch", ".", "device", "(", "f'cuda:{str(args.gpu)}'", ")", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "f\"===> Loaded checkpoint '{args.resume}' (epoch {checkpoint['epoch']})\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"No checkpoint found at '{args.resume}'\"", ")", "\n", "\n", "# load self-supervised pre-trained model", "\n", "", "", "if", "args", ".", "pretrained_model", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model", ",", "map_location", "=", "torch", ".", "device", "(", "f'cuda:{str(args.gpu)}'", ")", ")", "\n", "if", "'moco_ckpt'", "not", "in", "args", ".", "pretrained_model", ":", "\n", "            ", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "'linear'", "not", "in", "k", "and", "'fc'", "not", "in", "k", ":", "\n", "                    ", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "f'===> Pretrained weights found in total: [{len(list(new_state_dict.keys()))}]'", ")", "\n", "", "else", ":", "\n", "# rename moco pre-trained keys", "\n", "            ", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q up to before the embedding layer", "\n", "                ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "                    ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "if", "use_norm", ":", "\n", "                ", "assert", "set", "(", "msg", ".", "missing_keys", ")", "==", "{", "\"fc.weight\"", "}", "\n", "", "else", ":", "\n", "                ", "assert", "set", "(", "msg", ".", "missing_keys", ")", "==", "{", "\"fc.weight\"", ",", "\"fc.bias\"", "}", "\n", "", "", "print", "(", "f'===> Pre-trained model loaded: {args.pretrained_model}'", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "args", ".", "dataset", ".", "startswith", "(", "(", "'cifar'", ",", "'svhn'", ")", ")", ":", "\n", "        ", "cls_num_list", "=", "train_dataset", ".", "get_cls_num_list", "(", ")", "\n", "print", "(", "'cls num list:'", ")", "\n", "print", "(", "cls_num_list", ")", "\n", "args", ".", "cls_num_list", "=", "cls_num_list", "\n", "\n", "# init log for training", "\n", "", "log_training", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log_train.csv'", ")", ",", "'w'", ")", "\n", "log_testing", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log_test.csv'", ")", ",", "'w'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "if", "args", ".", "train_rule", "==", "'Reweight'", ":", "\n", "            ", "beta", "=", "0.9999", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "beta", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "beta", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "per_cls_weights", "=", "torch", ".", "FloatTensor", "(", "per_cls_weights", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "elif", "args", ".", "train_rule", "==", "'DRW'", ":", "\n", "            ", "idx", "=", "epoch", "//", "160", "\n", "betas", "=", "[", "0", ",", "0.9999", "]", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "betas", "[", "idx", "]", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "betas", "[", "idx", "]", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "per_cls_weights", "=", "torch", ".", "FloatTensor", "(", "per_cls_weights", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "per_cls_weights", "=", "None", "\n", "\n", "", "if", "args", ".", "loss_type", "==", "'CE'", ":", "\n", "            ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "per_cls_weights", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "elif", "args", ".", "loss_type", "==", "'LDAM'", ":", "\n", "            ", "criterion", "=", "LDAMLoss", "(", "cls_num_list", "=", "cls_num_list", ",", "max_m", "=", "0.5", ",", "s", "=", "30", ",", "weight", "=", "per_cls_weights", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "elif", "args", ".", "loss_type", "==", "'Focal'", ":", "\n", "            ", "criterion", "=", "FocalLoss", "(", "weight", "=", "per_cls_weights", ",", "gamma", "=", "1", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Loss type is not listed'", ")", "\n", "return", "\n", "\n", "", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "log_training", ",", "tf_writer", ")", "\n", "acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ",", "log_testing", ",", "tf_writer", ")", "\n", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1_best'", ",", "best_acc1", ",", "epoch", ")", "\n", "output_best", "=", "'Best Prec@1: %.3f\\n'", "%", "best_acc1", "\n", "print", "(", "output_best", ")", "\n", "log_testing", ".", "write", "(", "output_best", "+", "'\\n'", ")", "\n", "log_testing", ".", "flush", "(", ")", "\n", "\n", "save_checkpoint", "(", "args", ",", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train.train": [[272, 319], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "enumerate", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "utils.AverageMeter.update", "inputs.cuda.cuda", "target.cuda.cuda", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "criterion.item", "inputs.cuda.size", "inputs.cuda.size", "inputs.cuda.size", "print", "log.write", "log.flush", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.train", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.accuracy", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLossFunc.backward", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "log", ",", "tf_writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "output", "=", "(", "'Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", "*", "0.1", ")", ")", "\n", "print", "(", "output", ")", "\n", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train.validate": [[321, 383], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "confusion_matrix().astype", "confusion_matrix().astype.sum", "np.diag", "print", "print", "inputs.cuda.cuda", "target.cuda.cuda", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "all_preds.extend", "all_targets.extend", "log.write", "log.write", "log.flush", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalars", "criterion.item", "inputs.cuda.size", "inputs.cuda.size", "inputs.cuda.size", "pred.cpu().numpy", "target.cuda.cpu().numpy", "print", "confusion_matrix", "np.array2string", "time.time", "len", "str", "pred.cpu", "target.cuda.cpu", "enumerate"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.eval", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.accuracy", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ",", "log", "=", "None", ",", "tf_writer", "=", "None", ",", "flag", "=", "'val'", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "all_preds", "=", "[", "]", "\n", "all_targets", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "all_preds", ".", "extend", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_targets", ".", "extend", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "output", "=", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "print", "(", "output", ")", "\n", "", "", "cf", "=", "confusion_matrix", "(", "all_targets", ",", "all_preds", ")", ".", "astype", "(", "float", ")", "\n", "cls_cnt", "=", "cf", ".", "sum", "(", "axis", "=", "1", ")", "\n", "cls_hit", "=", "np", ".", "diag", "(", "cf", ")", "\n", "cls_acc", "=", "cls_hit", "/", "cls_cnt", "\n", "output", "=", "(", "'{flag} Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'", "\n", ".", "format", "(", "flag", "=", "flag", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "loss", "=", "losses", ")", ")", "\n", "out_cls_acc", "=", "'%s Class Accuracy: %s'", "%", "(", "\n", "flag", ",", "(", "np", ".", "array2string", "(", "cls_acc", ",", "separator", "=", "','", ",", "formatter", "=", "{", "'float_kind'", ":", "lambda", "x", ":", "\"%.3f\"", "%", "x", "}", ")", ")", ")", "\n", "print", "(", "output", ")", "\n", "print", "(", "out_cls_acc", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "            ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "write", "(", "out_cls_acc", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "if", "tf_writer", "is", "not", "None", ":", "\n", "            ", "tf_writer", ".", "add_scalar", "(", "'loss/test_'", "+", "flag", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_'", "+", "flag", "+", "'_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_'", "+", "flag", "+", "'_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalars", "(", "'acc/test_'", "+", "flag", "+", "'_cls_acc'", ",", "{", "str", "(", "i", ")", ":", "x", "for", "i", ",", "x", "in", "enumerate", "(", "cls_acc", ")", "}", ",", "epoch", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.AverageMeter.__init__": [[343, 347], ["pretrain_moco.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.AverageMeter.reset": [[348, 353], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.AverageMeter.update": [[354, 359], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.AverageMeter.__str__": [[360, 363], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.ProgressMeter.__init__": [[366, 370], ["pretrain_moco.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.ProgressMeter.display": [[371, 375], ["print", "str", "pretrain_moco.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.ProgressMeter._get_batch_fmtstr": [[376, 380], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.main": [[99, 134], ["parser.parse_args", "os.makedirs", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "pretrain_moco.main_worker"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "root_model", "=", "f'{args.root_path}/{args.dataset}/checkpoint'", "\n", "os", ".", "makedirs", "(", "args", ".", "root_model", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.main_worker": [[136, 286], ["print", "moco.builder.MoCo", "moco.builder.MoCo", "print", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "print", "torch.init_process_group", "model.cuda.parameters", "os.path.isfile", "torchvision.Normalize", "torchvision.Normalize", "dataset.inat.INaturalist", "dataset.imagenet.ImageNetLT", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "pretrain_moco.adjust_learning_rate", "pretrain_moco.train", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "NotImplementedError", "torch.CrossEntropyLoss", "print", "model.cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torchvision.RandomResizedCrop", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.RandomApply", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomResizedCrop", "torchvision.RandomGrayscale", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "moco.loader.TwoCropsTransform", "moco.loader.TwoCropsTransform", "moco.loader.TwoCropsTransform", "moco.loader.TwoCropsTransform", "len", "pretrain_moco.save_checkpoint", "torchvision.ColorJitter", "moco.loader.GaussianBlur", "moco.loader.GaussianBlur", "torchvision.Compose", "torchvision.Compose", "model.cuda.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.train", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.ClassAwareSampler.ClassAwareSampler.set_epoch", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "gpu", "\n", "\n", "# suppress printing if not master", "\n", "if", "args", ".", "multiprocessing_distributed", "and", "args", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "# num_classes = 8142 if args.dataset == 'inat' else 1000", "\n", "", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "moco", ".", "builder", ".", "MoCo", "(", "\n", "models", ".", "__dict__", "[", "args", ".", "arch", "]", ",", "\n", "args", ".", "moco_dim", ",", "args", ".", "moco_k", ",", "args", ".", "moco_m", ",", "args", ".", "moco_t", ",", "args", ".", "mlp", ")", "\n", "print", "(", "model", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "txt_train", "=", "f'./imagenet_inat/data/iNaturalist18/iNaturalist18_train.txt'", "if", "args", ".", "dataset", "==", "'inat'", "else", "f'./imagenet_inat/data/ImageNet_LT/ImageNet_LT_train.txt'", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.466", ",", "0.471", ",", "0.380", "]", ",", "std", "=", "[", "0.195", ",", "0.194", ",", "0.192", "]", ")", "if", "args", ".", "dataset", "==", "'inat'", "else", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "args", ".", "aug_plus", ":", "\n", "# MoCo v2's aug: similar to SimCLR https://arxiv.org/abs/2002.05709", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "# not strengthened", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "moco", ".", "loader", ".", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", "\n", "", "else", ":", "\n", "# MoCo v1's aug: the same as InstDisc https://arxiv.org/abs/1805.01978", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", "\n", "\n", "", "train_dataset", "=", "INaturalist", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "txt", "=", "txt_train", ",", "\n", "transform", "=", "moco", ".", "loader", ".", "TwoCropsTransform", "(", "transforms", ".", "Compose", "(", "augmentation", ")", ")", "\n", ")", "if", "args", ".", "dataset", "==", "'inat'", "else", "ImageNetLT", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "txt", "=", "txt_train", ",", "\n", "transform", "=", "moco", ".", "loader", ".", "TwoCropsTransform", "(", "transforms", ".", "Compose", "(", "augmentation", ")", ")", ")", "\n", "print", "(", "f'===> Training data length {len(train_dataset)}'", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "f'{args.root_model}/moco_ckpt_{(epoch+1):04d}.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.train": [[288, 333], ["pretrain_moco.AverageMeter", "pretrain_moco.AverageMeter", "pretrain_moco.AverageMeter", "pretrain_moco.AverageMeter", "pretrain_moco.AverageMeter", "pretrain_moco.ProgressMeter", "model.train", "time.time", "enumerate", "len", "pretrain_moco.AverageMeter.update", "model", "criterion", "pretrain_moco.accuracy", "pretrain_moco.AverageMeter.update", "pretrain_moco.AverageMeter.update", "pretrain_moco.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "pretrain_moco.AverageMeter.update", "time.time", "images[].cuda", "images[].cuda", "criterion.item", "images[].size", "images[].size", "images[].size", "pretrain_moco.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.train", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.accuracy", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLossFunc.backward", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.ProgressMeter.display"], ["", "", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "[", "0", "]", "=", "images", "[", "0", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "images", "[", "1", "]", "=", "images", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", ",", "target", "=", "model", "(", "im_q", "=", "images", "[", "0", "]", ",", "im_k", "=", "images", "[", "1", "]", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# acc1/acc5 are (K+1)-way contrast classifier accuracy", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.save_checkpoint": [[335, 339], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "filename.replace"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "filename", ".", "replace", "(", "'pth.tar'", ",", "'best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.adjust_learning_rate": [[382, 392], ["math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "args", ".", "cos", ":", "# cosine lr schedule", "\n", "        ", "lr", "*=", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "            ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.pretrain_moco.accuracy": [[394, 409], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.ImbalancedDatasetSampler.__init__": [[44, 70], ["torch.DoubleTensor", "list", "len", "len", "utils.ImbalancedDatasetSampler._get_label", "numpy.power", "numpy.array", "range", "numpy.unique", "len", "utils.ImbalancedDatasetSampler._get_label"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.ImbalancedDatasetSampler._get_label", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.ImbalancedDatasetSampler._get_label"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "indices", "=", "None", ",", "num_samples", "=", "None", ")", ":", "\n", "\n", "# if indices is not provided, ", "\n", "# all elements in the dataset will be considered", "\n", "        ", "self", ".", "indices", "=", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", "if", "indices", "is", "None", "else", "indices", "\n", "\n", "# if num_samples is not provided, ", "\n", "# draw `len(indices)` samples in each iteration", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "indices", ")", "if", "num_samples", "is", "None", "else", "num_samples", "\n", "\n", "# distribution of classes in the dataset ", "\n", "label_to_count", "=", "[", "0", "]", "*", "len", "(", "np", ".", "unique", "(", "dataset", ".", "targets", ")", ")", "\n", "for", "idx", "in", "self", ".", "indices", ":", "\n", "            ", "label", "=", "self", ".", "_get_label", "(", "dataset", ",", "idx", ")", "\n", "label_to_count", "[", "label", "]", "+=", "1", "\n", "\n", "", "beta", "=", "0.9999", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "beta", ",", "label_to_count", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "beta", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "\n", "# weight for each sample", "\n", "weights", "=", "[", "per_cls_weights", "[", "self", ".", "_get_label", "(", "dataset", ",", "idx", ")", "]", "\n", "for", "idx", "in", "self", ".", "indices", "]", "\n", "self", ".", "weights", "=", "torch", ".", "DoubleTensor", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.ImbalancedDatasetSampler._get_label": [[71, 73], ["None"], "methods", ["None"], ["", "def", "_get_label", "(", "self", ",", "dataset", ",", "idx", ")", ":", "\n", "        ", "return", "dataset", ".", "targets", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.ImbalancedDatasetSampler.__iter__": [[74, 76], ["iter", "torch.multinomial().tolist", "torch.multinomial"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "torch", ".", "multinomial", "(", "self", ".", "weights", ",", "self", ".", "num_samples", ",", "replacement", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.ImbalancedDatasetSampler.__len__": [[77, 79], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.AverageMeter.__init__": [[170, 174], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.AverageMeter.reset": [[175, 180], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.AverageMeter.update": [[181, 186], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.AverageMeter.__str__": [[187, 190], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.rotation": [[12, 22], ["target.long.long", "torch.zeros_like", "torch.zeros_like.copy_", "range", "torch.Tensor", "torch.rot90", "numpy.random.permutation", "int"], "function", ["None"], ["def", "rotation", "(", "inputs", ")", ":", "\n", "    ", "batch", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "target", "=", "torch", ".", "Tensor", "(", "np", ".", "random", ".", "permutation", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", "*", "(", "int", "(", "batch", "/", "4", ")", "+", "1", ")", ")", ",", "device", "=", "inputs", ".", "device", ")", "[", ":", "batch", "]", "\n", "target", "=", "target", ".", "long", "(", ")", "\n", "image", "=", "torch", ".", "zeros_like", "(", "inputs", ")", "\n", "image", ".", "copy_", "(", "inputs", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "        ", "image", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "torch", ".", "rot90", "(", "inputs", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "target", "[", "i", "]", ",", "[", "1", ",", "2", "]", ")", "\n", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.cosine_annealing": [[24, 26], ["numpy.cos"], "function", ["None"], ["", "def", "cosine_annealing", "(", "step", ",", "total_steps", ",", "lr_max", ",", "lr_min", ")", ":", "\n", "    ", "return", "lr_min", "+", "(", "lr_max", "-", "lr_min", ")", "*", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "step", "/", "total_steps", "*", "np", ".", "pi", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.adjust_learning_rate": [[28, 40], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "epoch", "=", "epoch", "+", "1", "\n", "if", "epoch", "<=", "5", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "epoch", "/", "5", "\n", "", "elif", "epoch", ">", "180", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.0001", "\n", "", "elif", "epoch", ">", "160", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "else", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.calc_confusion_mat": [[81, 107], ["model.eval", "sklearn.metrics.confusion_matrix().astype", "confusion_matrix().astype.sum", "numpy.diag", "print", "print", "utils.plot_confusion_matrix", "matplotlib.savefig", "torch.no_grad", "enumerate", "str", "os.path.join", "target.cuda.cuda", "model", "torch.max", "all_preds.extend", "all_targets.extend", "sklearn.metrics.confusion_matrix", "input.cuda.cuda", "pred.cpu().numpy", "target.cuda.cpu().numpy", "pred.cpu", "target.cuda.cpu"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.eval", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.plot_confusion_matrix", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max"], ["", "", "def", "calc_confusion_mat", "(", "val_loader", ",", "model", ",", "args", ",", "save_path", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "all_preds", "=", "[", "]", "\n", "all_targets", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "output", "=", "model", "(", "input", ")", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "all_preds", ".", "extend", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_targets", ".", "extend", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "cf", "=", "confusion_matrix", "(", "all_targets", ",", "all_preds", ")", ".", "astype", "(", "float", ")", "\n", "\n", "cls_cnt", "=", "cf", ".", "sum", "(", "axis", "=", "1", ")", "\n", "cls_hit", "=", "np", ".", "diag", "(", "cf", ")", "\n", "\n", "cls_acc", "=", "cls_hit", "/", "cls_cnt", "\n", "\n", "print", "(", "'Class Accuracy : '", ")", "\n", "print", "(", "cls_acc", ")", "\n", "classes", "=", "[", "str", "(", "x", ")", "for", "x", "in", "args", ".", "cls_num_list", "]", "\n", "plot_confusion_matrix", "(", "all_targets", ",", "all_preds", ",", "classes", ",", "normalize", "=", "True", ",", "title", "=", "args", ".", "confusion_title", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'confusion_matrix.pdf'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.plot_confusion_matrix": [[109, 149], ["sklearn.metrics.confusion_matrix", "matplotlib.subplots", "ax.imshow", "ax.figure.colorbar", "ax.set", "matplotlib.xlabel", "matplotlib.ylabel", "range", "matplotlib.tight_layout", "str", "sklearn.metrics.confusion_matrix.max", "range", "range", "numpy.arange", "numpy.arange", "ax.text", "format"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max"], ["", "def", "plot_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "classes", ",", "\n", "normalize", "=", "False", ",", "\n", "title", "=", "None", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "if", "not", "title", ":", "\n", "        ", "if", "normalize", ":", "\n", "            ", "title", "=", "'Normalized confusion matrix'", "\n", "", "else", ":", "\n", "            ", "title", "=", "'Confusion matrix, without normalization'", "\n", "\n", "# Compute confusion matrix", "\n", "", "", "cm", "=", "confusion_matrix", "(", "y_true", ",", "y_pred", ")", "\n", "classes", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "ax", ".", "figure", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ")", "\n", "# We want to show all ticks...", "\n", "ax", ".", "set", "(", "xticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "1", "]", ")", ",", "\n", "yticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "\n", "# ... and label them with the respective list entries", "\n", "xticklabels", "=", "classes", ",", "yticklabels", "=", "classes", ")", "\n", "\n", "# Rotate the tick labels and set their alignment.", "\n", "# plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")", "\n", "# plt.title(title, fontsize=18)", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ",", "fontsize", "=", "17", ")", "\n", "plt", ".", "ylabel", "(", "'True label'", ",", "fontsize", "=", "17", ")", "\n", "\n", "# Loop over data dimensions and create text annotations.", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "norm", "=", "1000", "if", "normalize", "else", "1", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", "in", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "ax", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", "/", "norm", ",", "fmt", ")", ",", "\n", "ha", "=", "\"center\"", ",", "va", "=", "\"center\"", ",", "\n", "color", "=", "\"black\"", ")", "# color=\"white\" if cm[i, j] > thresh else \"black\")", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.prepare_folders": [[151, 159], ["os.path.join", "os.path.join", "os.path.exists", "print", "os.mkdir"], "function", ["None"], ["", "def", "prepare_folders", "(", "args", ")", ":", "\n", "    ", "folders_util", "=", "[", "args", ".", "root_log", ",", "args", ".", "root_model", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "]", "\n", "for", "folder", "in", "folders_util", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "print", "(", "f'Creating folder: {folder}'", ")", "\n", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.save_checkpoint": [[161, 166], ["torch.save", "shutil.copyfile", "filename.replace"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "args", ",", "state", ",", "is_best", ")", ":", "\n", "    ", "filename", "=", "f'{args.root_model}/{args.store_name}/ckpt.pth.tar'", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "filename", ".", "replace", "(", "'pth.tar'", ",", "'best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.accuracy": [[192, 206], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.losses.FocalLoss.__init__": [[14, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "gamma", "=", "0.", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "gamma", ">=", "0", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.losses.FocalLoss.forward": [[20, 22], ["losses.focal_loss", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.losses.focal_loss"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "focal_loss", "(", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "reduction", "=", "'none'", ",", "weight", "=", "self", ".", "weight", ")", ",", "self", ".", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.losses.LDAMLoss.__init__": [[26, 35], ["torch.Module.__init__", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "numpy.sqrt", "numpy.sqrt", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max"], ["    ", "def", "__init__", "(", "self", ",", "cls_num_list", ",", "max_m", "=", "0.5", ",", "weight", "=", "None", ",", "s", "=", "30", ")", ":", "\n", "        ", "super", "(", "LDAMLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "m_list", "=", "1.0", "/", "np", ".", "sqrt", "(", "np", ".", "sqrt", "(", "cls_num_list", ")", ")", "\n", "m_list", "=", "m_list", "*", "(", "max_m", "/", "np", ".", "max", "(", "m_list", ")", ")", "\n", "m_list", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "m_list", ")", "\n", "self", ".", "m_list", "=", "m_list", "\n", "assert", "s", ">", "0", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.losses.LDAMLoss.forward": [[36, 47], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.type", "torch.zeros_like.type", "torch.zeros_like.type", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "batch_m.view.view.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "target.data.view", "torch.zeros_like.type.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "index", "=", "torch", ".", "zeros_like", "(", "x", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "index", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "index_float", "=", "index", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "batch_m", "=", "torch", ".", "matmul", "(", "self", ".", "m_list", "[", "None", ",", ":", "]", ",", "index_float", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "batch_m", "=", "batch_m", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "x_m", "=", "x", "-", "batch_m", "\n", "\n", "output", "=", "torch", ".", "where", "(", "index", ",", "x_m", ",", "x", ")", "\n", "return", "F", ".", "cross_entropy", "(", "self", ".", "s", "*", "output", ",", "target", ",", "weight", "=", "self", ".", "weight", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.losses.focal_loss": [[7, 11], ["torch.exp", "torch.exp", "torch.exp", "loss.mean"], "function", ["None"], ["def", "focal_loss", "(", "input_values", ",", "gamma", ")", ":", "\n", "    ", "p", "=", "torch", ".", "exp", "(", "-", "input_values", ")", "\n", "loss", "=", "(", "1", "-", "p", ")", "**", "gamma", "*", "input_values", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.main": [[54, 70], ["parser.parse_args", "utils.prepare_folders", "train_semi.main_worker", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "str", "str"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.prepare_folders", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "store_name", "=", "'_'", ".", "join", "(", "[", "args", ".", "dataset", ",", "args", ".", "arch", ",", "args", ".", "loss_type", ",", "args", ".", "train_rule", ",", "args", ".", "imb_type", ",", "\n", "str", "(", "args", ".", "imb_factor", ")", ",", "str", "(", "args", ".", "imb_factor_unlabel", ")", ",", "args", ".", "exp_str", "]", ")", "\n", "prepare_folders", "(", "args", ")", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, which can slow down training considerably! '", "\n", "'You may see unexpected behavior when restarting from checkpoints.'", ")", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "main_worker", "(", "args", ".", "gpu", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.main_worker": [[72, 257], ["print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torchvision.Compose", "torchvision.Compose", "args.dataset.startswith", "open", "open", "tensorboardX.SummaryWriter", "range", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.parameters", "args.dataset.startswith", "args.dataset.startswith", "dataset.imbalance_cifar.SemiSupervisedImbalanceCIFAR10", "torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "print", "train_semi.validate", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_cls_num_list", "print", "print", "os.path.join", "os.path.join", "open", "f.write", "utils.adjust_learning_rate", "train_semi.train", "train_semi.validate", "max", "tensorboardX.SummaryWriter.add_scalar", "print", "open.write", "open.flush", "utils.save_checkpoint", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "utils.ImbalancedDatasetSampler", "dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN", "torchvision.SVHN", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "NotImplementedError", "torch.CrossEntropyLoss", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "ValueError", "OrderedDict", "checkpoint[].items", "torch.nn.DataParallel().cuda.load_state_dict", "print", "list", "torch.nn.DataParallel().cuda.load_state_dict", "os.path.join", "str", "os.path.join", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.CrossEntropyLoss().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.ImbalancedDatasetSampler", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "best_acc1.to.to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "state_dict.keys", "np.power", "np.array", "len", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "losses.LDAMLoss().cuda", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "k.startswith", "set", "set", "np.sum", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "np.power", "np.array", "len", "torch.CrossEntropyLoss", "losses.FocalLoss().cuda", "warnings.warn", "len", "k.startswith", "np.sum", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "losses.LDAMLoss", "str", "str", "list", "losses.FocalLoss", "str", "OrderedDict.keys", "len"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.validate", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_cls_num_list", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.train", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.validate", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.save_checkpoint"], ["", "def", "main_worker", "(", "gpu", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "f\"Use GPU: {args.gpu} for training\"", ")", "\n", "\n", "", "print", "(", "f\"===> Creating model '{args.arch}'\"", ")", "\n", "if", "args", ".", "dataset", "in", "{", "'cifar10'", ",", "'svhn'", "}", ":", "\n", "        ", "num_classes", "=", "10", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "use_norm", "=", "True", "if", "args", ".", "loss_type", "==", "'LDAM'", "else", "False", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "num_classes", ",", "use_norm", "=", "use_norm", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "if", "args", ".", "dataset", ".", "startswith", "(", "'cifar'", ")", "else", "[", ".5", ",", ".5", ",", ".5", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "if", "args", ".", "dataset", ".", "startswith", "(", "'cifar'", ")", "else", "[", ".5", ",", ".5", ",", ".5", "]", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", ")", "\n", "transform_val", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_dataset", "=", "SemiSupervisedImbalanceCIFAR10", "(", "\n", "root", "=", "args", ".", "data_path", ",", "\n", "imb_type", "=", "args", ".", "imb_type", ",", "imb_factor", "=", "args", ".", "imb_factor", ",", "unlabel_imb_factor", "=", "args", ".", "imb_factor_unlabel", ",", "\n", "rand_number", "=", "args", ".", "rand_number", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", "\n", ")", "\n", "val_dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "args", ".", "data_path", ",", "\n", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_val", ")", "\n", "train_sampler", "=", "None", "\n", "if", "args", ".", "train_rule", "==", "'Resample'", ":", "\n", "            ", "train_sampler", "=", "ImbalancedDatasetSampler", "(", "train_dataset", ")", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "train_dataset", "=", "SemiSupervisedImbalanceSVHN", "(", "\n", "root", "=", "args", ".", "data_path", ",", "\n", "imb_type", "=", "args", ".", "imb_type", ",", "imb_factor", "=", "args", ".", "imb_factor", ",", "unlabel_imb_factor", "=", "args", ".", "imb_factor_unlabel", ",", "\n", "rand_number", "=", "args", ".", "rand_number", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "transform_train", "\n", ")", "\n", "val_dataset", "=", "datasets", ".", "SVHN", "(", "root", "=", "args", ".", "data_path", ",", "\n", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "transform_val", ")", "\n", "train_sampler", "=", "None", "\n", "if", "args", ".", "train_rule", "==", "'Resample'", ":", "\n", "            ", "train_sampler", "=", "ImbalancedDatasetSampler", "(", "train_dataset", ")", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Dataset {args.dataset} is not supported!\"", ")", "\n", "\n", "# evaluate only", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "assert", "args", ".", "resume", ",", "'Specify a trained model using [args.resume]'", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "torch", ".", "device", "(", "f'cuda:{str(args.gpu)}'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "f\"===> Checkpoint '{args.resume}' loaded, testing...\"", ")", "\n", "validate", "(", "val_loader", ",", "model", ",", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "0", ",", "args", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "f\"===> Loading checkpoint '{args.resume}'\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "torch", ".", "device", "(", "f'cuda:{str(args.gpu)}'", ")", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "f\"===> Loaded checkpoint '{args.resume}' (epoch {checkpoint['epoch']})\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"No checkpoint found at '{args.resume}'\"", ")", "\n", "\n", "", "", "if", "args", ".", "pretrained_model", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model", ",", "map_location", "=", "torch", ".", "device", "(", "f'cuda:{str(args.gpu)}'", ")", ")", "\n", "if", "'moco_ckpt'", "not", "in", "args", ".", "pretrained_model", ":", "\n", "            ", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "'linear'", "not", "in", "k", "and", "'fc'", "not", "in", "k", ":", "\n", "                    ", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "f'===> Pretrained weights found in total: [{len(list(new_state_dict.keys()))}]'", ")", "\n", "", "else", ":", "\n", "# rename moco pre-trained keys", "\n", "            ", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q up to before the embedding layer", "\n", "                ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "                    ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "if", "use_norm", ":", "\n", "                ", "assert", "set", "(", "msg", ".", "missing_keys", ")", "==", "{", "\"fc.weight\"", "}", "\n", "", "else", ":", "\n", "                ", "assert", "set", "(", "msg", ".", "missing_keys", ")", "==", "{", "\"fc.weight\"", ",", "\"fc.bias\"", "}", "\n", "", "", "print", "(", "f'===> Pre-trained model loaded: {args.pretrained_model}'", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "args", ".", "dataset", ".", "startswith", "(", "(", "'cifar'", ",", "'svhn'", ")", ")", ":", "\n", "        ", "cls_num_list", "=", "train_dataset", ".", "get_cls_num_list", "(", ")", "\n", "print", "(", "'cls num list:'", ")", "\n", "print", "(", "cls_num_list", ")", "\n", "args", ".", "cls_num_list", "=", "cls_num_list", "\n", "\n", "# init log for training", "\n", "", "log_training", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log_train.csv'", ")", ",", "'w'", ")", "\n", "log_testing", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log_test.csv'", ")", ",", "'w'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "if", "args", ".", "train_rule", "==", "'Reweight'", ":", "\n", "            ", "beta", "=", "0.9999", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "beta", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "beta", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "per_cls_weights", "=", "torch", ".", "FloatTensor", "(", "per_cls_weights", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "elif", "args", ".", "train_rule", "==", "'DRW'", ":", "\n", "            ", "idx", "=", "epoch", "//", "160", "\n", "betas", "=", "[", "0", ",", "0.9999", "]", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "betas", "[", "idx", "]", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "betas", "[", "idx", "]", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "per_cls_weights", "=", "torch", ".", "FloatTensor", "(", "per_cls_weights", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "per_cls_weights", "=", "None", "\n", "\n", "", "if", "args", ".", "loss_type", "==", "'CE'", ":", "\n", "            ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "per_cls_weights", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "elif", "args", ".", "loss_type", "==", "'LDAM'", ":", "\n", "            ", "criterion", "=", "LDAMLoss", "(", "cls_num_list", "=", "cls_num_list", ",", "max_m", "=", "0.5", ",", "s", "=", "30", ",", "weight", "=", "per_cls_weights", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "elif", "args", ".", "loss_type", "==", "'Focal'", ":", "\n", "            ", "criterion", "=", "FocalLoss", "(", "weight", "=", "per_cls_weights", ",", "gamma", "=", "1", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Loss type is not listed'", ")", "\n", "return", "\n", "\n", "", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "log_training", ",", "tf_writer", ")", "\n", "acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ",", "log_testing", ",", "tf_writer", ")", "\n", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1_best'", ",", "best_acc1", ",", "epoch", ")", "\n", "output_best", "=", "'Best Prec@1: %.3f\\n'", "%", "best_acc1", "\n", "print", "(", "output_best", ")", "\n", "log_testing", ".", "write", "(", "output_best", "+", "'\\n'", ")", "\n", "log_testing", ".", "flush", "(", ")", "\n", "\n", "save_checkpoint", "(", "args", ",", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.train": [[259, 307], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "enumerate", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "utils.AverageMeter.update", "inputs.cuda.cuda", "target.cuda.cuda", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "criterion.item", "inputs.cuda.size", "inputs.cuda.size", "inputs.cuda.size", "print", "log.write", "log.flush", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.train", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.accuracy", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLossFunc.backward", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "log", ",", "tf_writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "output", "=", "(", "'Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", "*", "0.1", ")", ")", "\n", "print", "(", "output", ")", "\n", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.train_semi.validate": [[309, 371], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "confusion_matrix().astype", "confusion_matrix().astype.sum", "np.diag", "print", "print", "inputs.cuda.cuda", "target.cuda.cuda", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "all_preds.extend", "all_targets.extend", "log.write", "log.write", "log.flush", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalars", "criterion.item", "inputs.cuda.size", "inputs.cuda.size", "inputs.cuda.size", "pred.cpu().numpy", "target.cuda.cpu().numpy", "print", "confusion_matrix", "np.array2string", "time.time", "len", "str", "pred.cpu", "target.cuda.cpu", "enumerate"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.eval", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.None.utils.accuracy", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ",", "log", "=", "None", ",", "tf_writer", "=", "None", ",", "flag", "=", "'val'", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "all_preds", "=", "[", "]", "\n", "all_targets", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "all_preds", ".", "extend", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_targets", ".", "extend", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "output", "=", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "print", "(", "output", ")", "\n", "", "", "cf", "=", "confusion_matrix", "(", "all_targets", ",", "all_preds", ")", ".", "astype", "(", "float", ")", "\n", "cls_cnt", "=", "cf", ".", "sum", "(", "axis", "=", "1", ")", "\n", "cls_hit", "=", "np", ".", "diag", "(", "cf", ")", "\n", "cls_acc", "=", "cls_hit", "/", "cls_cnt", "\n", "output", "=", "(", "'{flag} Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'", "\n", ".", "format", "(", "flag", "=", "flag", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "loss", "=", "losses", ")", ")", "\n", "out_cls_acc", "=", "'%s Class Accuracy: %s'", "%", "(", "\n", "flag", ",", "(", "np", ".", "array2string", "(", "cls_acc", ",", "separator", "=", "','", ",", "formatter", "=", "{", "'float_kind'", ":", "lambda", "x", ":", "\"%.3f\"", "%", "x", "}", ")", ")", ")", "\n", "print", "(", "output", ")", "\n", "print", "(", "out_cls_acc", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "            ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "write", "(", "out_cls_acc", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "if", "tf_writer", "is", "not", "None", ":", "\n", "            ", "tf_writer", ".", "add_scalar", "(", "'loss/test_'", "+", "flag", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_'", "+", "flag", "+", "'_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_'", "+", "flag", "+", "'_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalars", "(", "'acc/test_'", "+", "flag", "+", "'_cls_acc'", ",", "{", "str", "(", "i", ")", ":", "x", "for", "i", ",", "x", "in", "enumerate", "(", "cls_acc", ")", "}", ",", "epoch", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imagenet.ImageNetLT.__init__": [[41, 49], ["open", "imagenet.ImageNetLT.img_path.append", "imagenet.ImageNetLT.labels.append", "os.path.join", "int", "line.split", "line.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "txt", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "img_path", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "with", "open", "(", "txt", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "self", ".", "img_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "line", ".", "split", "(", ")", "[", "0", "]", ")", ")", "\n", "self", ".", "labels", ".", "append", "(", "int", "(", "line", ".", "split", "(", ")", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imagenet.ImageNetLT.__len__": [[50, 52], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imagenet.ImageNetLT.__getitem__": [[53, 64], ["open", "PIL.Image.open().convert", "imagenet.ImageNetLT.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "img_path", "[", "index", "]", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "sample", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", ",", "label", "# , index", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imagenet.get_data_transform": [[14, 37], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "get_data_transform", "(", "split", ",", "rgb_mean", ",", "rbg_std", ")", ":", "\n", "    ", "data_transforms", "=", "{", "\n", "'train'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", ",", "\n", "'val'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", ",", "\n", "'test'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", "\n", "}", "\n", "return", "data_transforms", "[", "split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imagenet.load_data_imagenet": [[66, 92], ["print", "imagenet.get_data_transform", "imagenet.ImageNetLT", "print", "print", "print", "torch.utils.data.DataLoader", "print", "print", "torch.utils.data.DataLoader", "len"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.dataloader.get_data_transform"], ["", "", "def", "load_data_imagenet", "(", "data_root", ",", "batch_size", ",", "phase", ",", "sampler_dic", "=", "None", ",", "num_workers", "=", "4", ",", "shuffle", "=", "True", ")", ":", "\n", "    ", "assert", "phase", "in", "{", "'train'", ",", "'val'", "}", "\n", "key", "=", "'ImageNet'", "\n", "txt", "=", "f'./imagenet_inat/data/ImageNet_LT/ImageNet_LT_{phase}.txt'", "\n", "print", "(", "f'===> Loading ImageNet data from {txt}'", ")", "\n", "rgb_mean", ",", "rgb_std", "=", "RGB_statistics", "[", "key", "]", "[", "'mean'", "]", ",", "RGB_statistics", "[", "key", "]", "[", "'std'", "]", "\n", "transform", "=", "get_data_transform", "(", "phase", ",", "rgb_mean", ",", "rgb_std", ")", "\n", "\n", "set_imagenet", "=", "ImageNetLT", "(", "data_root", ",", "txt", ",", "transform", ")", "\n", "print", "(", "f'===> {phase} data length {len(set_imagenet)}'", ")", "\n", "\n", "# if phase == 'test' and test_open:", "\n", "#     open_txt = './data/%s/%s_open.txt' % (dataset, dataset)", "\n", "#     print('Testing with open sets from %s' % open_txt)", "\n", "#     open_set_ = INaturalist('./data/%s/%s_open' % (dataset, dataset), open_txt, transform)", "\n", "#     set_ = ConcatDataset([set_, open_set_])", "\n", "\n", "if", "sampler_dic", "and", "phase", "==", "'train'", ":", "\n", "        ", "print", "(", "'Using sampler: '", ",", "sampler_dic", "[", "'sampler'", "]", ")", "\n", "print", "(", "'Sampler parameters: '", ",", "sampler_dic", "[", "'params'", "]", ")", "\n", "return", "DataLoader", "(", "dataset", "=", "set_imagenet", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "\n", "sampler", "=", "sampler_dic", "[", "'sampler'", "]", "(", "set_imagenet", ",", "**", "sampler_dic", "[", "'params'", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'No sampler.'", ")", "\n", "print", "(", "'Shuffle is %s.'", "%", "shuffle", ")", "\n", "return", "DataLoader", "(", "dataset", "=", "set_imagenet", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.ClassAwareSampler.RandomCycleIter.__init__": [[8, 13], ["list", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "data_list", "=", "list", "(", "data", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data_list", ")", "\n", "self", ".", "i", "=", "self", ".", "length", "-", "1", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.ClassAwareSampler.RandomCycleIter.__iter__": [[14, 16], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.ClassAwareSampler.RandomCycleIter.__next__": [[17, 26], ["random.shuffle"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "i", "+=", "1", "\n", "\n", "if", "self", ".", "i", "==", "self", ".", "length", ":", "\n", "            ", "self", ".", "i", "=", "0", "\n", "if", "not", "self", ".", "test_mode", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "data_list", ")", "\n", "\n", "", "", "return", "self", ".", "data_list", "[", "self", ".", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.ClassAwareSampler.ClassAwareSampler.__init__": [[45, 55], ["len", "ClassAwareSampler.RandomCycleIter", "enumerate", "numpy.unique", "range", "list", "cls_data_list[].append", "ClassAwareSampler.RandomCycleIter", "max", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "num_samples_cls", "=", "4", ",", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "0", "\n", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "data_source", ".", "labels", ")", ")", "\n", "self", ".", "class_iter", "=", "RandomCycleIter", "(", "range", "(", "num_classes", ")", ")", "\n", "cls_data_list", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "data_source", ".", "labels", ")", ":", "\n", "            ", "cls_data_list", "[", "label", "]", ".", "append", "(", "i", ")", "\n", "", "self", ".", "data_iter_list", "=", "[", "RandomCycleIter", "(", "x", ")", "for", "x", "in", "cls_data_list", "]", "\n", "self", ".", "num_samples", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "cls_data_list", "]", ")", "*", "len", "(", "cls_data_list", ")", "\n", "self", ".", "num_samples_cls", "=", "num_samples_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.ClassAwareSampler.ClassAwareSampler.__iter__": [[56, 59], ["ClassAwareSampler.class_aware_sample_generator"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassAwareSampler.class_aware_sample_generator"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "class_aware_sample_generator", "(", "self", ".", "class_iter", ",", "self", ".", "data_iter_list", ",", "\n", "self", ".", "num_samples", ",", "self", ".", "num_samples_cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.ClassAwareSampler.ClassAwareSampler.__len__": [[60, 62], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.ClassAwareSampler.ClassAwareSampler.set_epoch": [[63, 65], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.ClassAwareSampler.class_aware_sample_generator": [[28, 41], ["next", "zip", "next"], "function", ["None"], ["", "", "def", "class_aware_sample_generator", "(", "cls_iter", ",", "data_iter_list", ",", "n", ",", "num_samples_cls", "=", "1", ")", ":", "\n", "    ", "i", "=", "0", "\n", "j", "=", "0", "\n", "while", "i", "<", "n", ":", "\n", "        ", "if", "j", ">=", "num_samples_cls", ":", "\n", "            ", "j", "=", "0", "\n", "", "if", "j", "==", "0", ":", "\n", "            ", "temp_tuple", "=", "next", "(", "zip", "(", "*", "[", "data_iter_list", "[", "next", "(", "cls_iter", ")", "]", "]", "*", "num_samples_cls", ")", ")", "\n", "yield", "temp_tuple", "[", "j", "]", "\n", "", "else", ":", "\n", "            ", "yield", "temp_tuple", "[", "j", "]", "\n", "", "i", "+=", "1", "\n", "j", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.ClassAwareSampler.get_sampler": [[67, 69], ["None"], "function", ["None"], ["", "", "def", "get_sampler", "(", ")", ":", "\n", "    ", "return", "ClassAwareSampler", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_cifar.ImbalanceCIFAR10.__init__": [[11, 17], ["super().__init__", "numpy.random.seed", "imbalance_cifar.ImbalanceCIFAR10.get_img_num_per_cls", "imbalance_cifar.ImbalanceCIFAR10.gen_imbalanced_data"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_img_num_per_cls", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.gen_imbalanced_data"], ["def", "__init__", "(", "self", ",", "root", ",", "imb_type", "=", "'exp'", ",", "imb_factor", "=", "0.01", ",", "rand_number", "=", "0", ",", "train", "=", "True", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImbalanceCIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "train", ",", "transform", ",", "target_transform", ",", "download", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_number", ")", "\n", "img_num_list", "=", "self", ".", "get_img_num_per_cls", "(", "self", ".", "cls_num", ",", "imb_type", ",", "imb_factor", ")", "\n", "self", ".", "gen_imbalanced_data", "(", "img_num_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_cifar.ImbalanceCIFAR10.get_img_num_per_cls": [[18, 33], ["len", "range", "img_num_per_cls.append", "range", "range", "img_num_per_cls.extend", "int", "img_num_per_cls.append", "img_num_per_cls.append", "int", "int", "int"], "methods", ["None"], ["", "def", "get_img_num_per_cls", "(", "self", ",", "cls_num", ",", "imb_type", ",", "imb_factor", ")", ":", "\n", "        ", "img_max", "=", "len", "(", "self", ".", "data", ")", "/", "cls_num", "\n", "img_num_per_cls", "=", "[", "]", "\n", "if", "imb_type", "==", "'exp'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", ")", ":", "\n", "                ", "num", "=", "img_max", "*", "(", "imb_factor", "**", "(", "cls_idx", "/", "(", "cls_num", "-", "1.0", ")", ")", ")", "\n", "img_num_per_cls", ".", "append", "(", "int", "(", "num", ")", ")", "\n", "", "", "elif", "imb_type", "==", "'step'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", ")", ")", "\n", "", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", "*", "imb_factor", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "img_num_per_cls", ".", "extend", "(", "[", "int", "(", "img_max", ")", "]", "*", "cls_num", ")", "\n", "", "return", "img_num_per_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_cifar.ImbalanceCIFAR10.gen_imbalanced_data": [[34, 51], ["numpy.array", "numpy.unique", "dict", "zip", "numpy.vstack", "numpy.random.shuffle", "numpy.vstack.append", "new_targets.extend", "numpy.where"], "methods", ["None"], ["", "def", "gen_imbalanced_data", "(", "self", ",", "img_num_per_cls", ")", ":", "\n", "        ", "new_data", "=", "[", "]", "\n", "new_targets", "=", "[", "]", "\n", "targets_np", "=", "np", ".", "array", "(", "self", ".", "targets", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "classes", "=", "np", ".", "unique", "(", "targets_np", ")", "\n", "# np.random.shuffle(classes)", "\n", "self", ".", "num_per_cls_dict", "=", "dict", "(", ")", "\n", "for", "the_class", ",", "the_img_num", "in", "zip", "(", "classes", ",", "img_num_per_cls", ")", ":", "\n", "            ", "self", ".", "num_per_cls_dict", "[", "the_class", "]", "=", "the_img_num", "\n", "idx", "=", "np", ".", "where", "(", "targets_np", "==", "the_class", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "selec_idx", "=", "idx", "[", ":", "the_img_num", "]", "\n", "new_data", ".", "append", "(", "self", ".", "data", "[", "selec_idx", ",", "...", "]", ")", "\n", "new_targets", ".", "extend", "(", "[", "the_class", ",", "]", "*", "the_img_num", ")", "\n", "", "new_data", "=", "np", ".", "vstack", "(", "new_data", ")", "\n", "self", ".", "data", "=", "new_data", "\n", "self", ".", "targets", "=", "new_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_cifar.ImbalanceCIFAR10.get_cls_num_list": [[52, 57], ["range", "cls_num_list.append"], "methods", ["None"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "cls_num_list", ".", "append", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "", "return", "cls_num_list", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_cifar.SemiSupervisedImbalanceCIFAR10.__init__": [[83, 97], ["super().__init__", "os.path.join", "os.path.join", "dict", "numpy.random.seed", "imbalance_cifar.SemiSupervisedImbalanceCIFAR10.get_img_num_per_cls", "imbalance_cifar.SemiSupervisedImbalanceCIFAR10.get_img_num_per_cls_unlabeled", "imbalance_cifar.SemiSupervisedImbalanceCIFAR10.gen_imbalanced_data"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_img_num_per_cls", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_img_num_per_cls_unlabeled", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.gen_imbalanced_data"], ["def", "__init__", "(", "self", ",", "root", ",", "imb_type", "=", "'exp'", ",", "imb_factor", "=", "0.01", ",", "unlabel_imb_factor", "=", "1", ",", "\n", "rand_number", "=", "0", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "SemiSupervisedImbalanceCIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "train", ",", "transform", ",", "target_transform", ",", "download", ")", "\n", "# unlabeled", "\n", "self", ".", "unlabeled_data", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'ti_80M_selected.pickle'", ")", "# selected data from 80M-TI", "\n", "self", ".", "unlabeled_pseudo", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pseudo_labeled_cifar.pickle'", ")", "# pseudo-label using model trained on imbalanced data", "\n", "self", ".", "imb_factor", "=", "imb_factor", "\n", "self", ".", "unlabel_imb_factor", "=", "unlabel_imb_factor", "\n", "self", ".", "num_per_cls_dict", "=", "dict", "(", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "rand_number", ")", "\n", "img_num_list", "=", "self", ".", "get_img_num_per_cls", "(", "self", ".", "cls_num", ",", "imb_type", ",", "imb_factor", ")", "\n", "img_num_list_unlabeled", "=", "self", ".", "get_img_num_per_cls_unlabeled", "(", "self", ".", "cls_num", ",", "img_num_list", ",", "unlabel_imb_factor", ")", "\n", "self", ".", "gen_imbalanced_data", "(", "img_num_list", ",", "img_num_list_unlabeled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_cifar.SemiSupervisedImbalanceCIFAR10.get_img_num_per_cls": [[98, 113], ["len", "range", "img_num_per_cls.append", "range", "range", "img_num_per_cls.extend", "int", "img_num_per_cls.append", "img_num_per_cls.append", "int", "int", "int"], "methods", ["None"], ["", "def", "get_img_num_per_cls", "(", "self", ",", "cls_num", ",", "imb_type", ",", "imb_factor", ")", ":", "\n", "        ", "img_max", "=", "len", "(", "self", ".", "data", ")", "/", "cls_num", "\n", "img_num_per_cls", "=", "[", "]", "\n", "if", "imb_type", "==", "'exp'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", ")", ":", "\n", "                ", "num", "=", "img_max", "*", "(", "imb_factor", "**", "(", "cls_idx", "/", "(", "cls_num", "-", "1.0", ")", ")", ")", "\n", "img_num_per_cls", ".", "append", "(", "int", "(", "num", ")", ")", "\n", "", "", "elif", "imb_type", "==", "'step'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", ")", ")", "\n", "", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", "*", "imb_factor", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "img_num_per_cls", ".", "extend", "(", "[", "int", "(", "img_max", ")", "]", "*", "cls_num", ")", "\n", "", "return", "img_num_per_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_cifar.SemiSupervisedImbalanceCIFAR10.get_img_num_per_cls_unlabeled": [[114, 126], ["range", "print", "numpy.sum", "img_num_per_cls_unlabel.append", "numpy.sum", "int", "int", "numpy.sum"], "methods", ["None"], ["", "def", "get_img_num_per_cls_unlabeled", "(", "self", ",", "cls_num", ",", "labeled_img_num_list", ",", "imb_factor", ")", ":", "\n", "        ", "img_unlabeled_total", "=", "np", ".", "sum", "(", "labeled_img_num_list", ")", "*", "self", ".", "unlabel_size_factor", "\n", "img_first_min", "=", "img_unlabeled_total", "//", "cls_num", "\n", "img_num_per_cls_unlabel", "=", "[", "]", "\n", "for", "cls_idx", "in", "range", "(", "cls_num", ")", ":", "\n", "            ", "num", "=", "img_first_min", "*", "(", "imb_factor", "**", "(", "cls_idx", "/", "(", "cls_num", "-", "1.0", ")", ")", ")", "\n", "img_num_per_cls_unlabel", ".", "append", "(", "int", "(", "num", ")", ")", "\n", "", "factor", "=", "img_unlabeled_total", "/", "np", ".", "sum", "(", "img_num_per_cls_unlabel", ")", "\n", "img_num_per_cls_unlabel", "=", "[", "int", "(", "num", "*", "factor", ")", "for", "num", "in", "img_num_per_cls_unlabel", "]", "\n", "print", "(", "f\"Unlabeled est total:\\t{img_unlabeled_total}\\n\"", "\n", "f\"After processing:\\t{np.sum(img_num_per_cls_unlabel)},\\t{img_num_per_cls_unlabel}\"", ")", "\n", "return", "img_num_per_cls_unlabel", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_cifar.SemiSupervisedImbalanceCIFAR10.gen_imbalanced_data": [[127, 172], ["numpy.array", "numpy.unique", "zip", "print", "range", "print", "print", "zip", "numpy.vstack", "print", "range", "numpy.random.shuffle", "numpy.vstack.append", "new_targets.extend", "print", "open", "pickle.load", "open", "pickle.load", "numpy.random.shuffle", "numpy.vstack.append", "new_targets.extend", "len", "print", "numpy.where", "numpy.where", "len", "len"], "methods", ["None"], ["", "def", "gen_imbalanced_data", "(", "self", ",", "img_num_per_cls", ",", "img_num_per_cls_unlabeled", ")", ":", "\n", "        ", "new_data", "=", "[", "]", "\n", "new_targets", "=", "[", "]", "\n", "targets_np", "=", "np", ".", "array", "(", "self", ".", "targets", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "classes", "=", "np", ".", "unique", "(", "targets_np", ")", "\n", "# np.random.shuffle(classes)", "\n", "for", "the_class", ",", "the_img_num", "in", "zip", "(", "classes", ",", "img_num_per_cls", ")", ":", "\n", "            ", "self", ".", "num_per_cls_dict", "[", "the_class", "]", "=", "the_img_num", "\n", "idx", "=", "np", ".", "where", "(", "targets_np", "==", "the_class", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "selec_idx", "=", "idx", "[", ":", "the_img_num", "]", "\n", "new_data", ".", "append", "(", "self", ".", "data", "[", "selec_idx", ",", "...", "]", ")", "\n", "new_targets", ".", "extend", "(", "[", "the_class", ",", "]", "*", "the_img_num", ")", "\n", "", "print", "(", "f\"Labeled data extracted:\\t{len(new_targets)}\"", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "print", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "\n", "# unlabeled dataset", "\n", "", "print", "(", "\"Loading unlabeled data from %s\"", "%", "self", ".", "unlabeled_data", ")", "\n", "with", "open", "(", "self", ".", "unlabeled_data", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "aux", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "aux_data", "=", "aux", "[", "'data'", "]", "\n", "aux_truth", "=", "aux", "[", "'extrapolated_targets'", "]", "\n", "print", "(", "\"Loading pseudo labels from %s\"", "%", "self", ".", "unlabeled_pseudo", ")", "\n", "with", "open", "(", "self", ".", "unlabeled_pseudo", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "aux_targets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "aux_targets", "=", "aux_targets", "[", "'extrapolated_targets'", "]", "\n", "\n", "for", "the_class", ",", "the_img_num", "in", "zip", "(", "classes", ",", "img_num_per_cls_unlabeled", ")", ":", "\n", "# ground truth is only used to select samples", "\n", "            ", "idx", "=", "np", ".", "where", "(", "aux_truth", "==", "the_class", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "selec_idx", "=", "idx", "[", ":", "the_img_num", "]", "\n", "new_data", ".", "append", "(", "aux_data", "[", "selec_idx", ",", "...", "]", ")", "\n", "# append pseudo-label", "\n", "new_targets", ".", "extend", "(", "aux_targets", "[", "selec_idx", "]", ")", "\n", "for", "pseudo_class", "in", "aux_targets", "[", "selec_idx", "]", ":", "\n", "                ", "self", ".", "num_per_cls_dict", "[", "pseudo_class", "]", "+=", "1", "\n", "", "", "new_data", "=", "np", ".", "vstack", "(", "new_data", ")", "\n", "self", ".", "data", "=", "new_data", "\n", "self", ".", "targets", "=", "new_targets", "\n", "assert", "new_data", ".", "shape", "[", "0", "]", "==", "len", "(", "new_targets", ")", ",", "'Length of data & labels do not match!'", "\n", "print", "(", "f\"Unlabeled data extracted:\\t{len(new_targets)}\"", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "print", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_cifar.SemiSupervisedImbalanceCIFAR10.get_cls_num_list": [[173, 178], ["range", "cls_num_list.append"], "methods", ["None"], ["", "", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "cls_num_list", ".", "append", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "", "return", "cls_num_list", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.ImbalanceSVHN.__init__": [[12, 18], ["super().__init__", "numpy.random.seed", "imbalance_svhn.ImbalanceSVHN.get_img_num_per_cls", "imbalance_svhn.ImbalanceSVHN.gen_imbalanced_data"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_img_num_per_cls", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.gen_imbalanced_data"], ["def", "__init__", "(", "self", ",", "root", ",", "imb_type", "=", "'exp'", ",", "imb_factor", "=", "0.01", ",", "rand_number", "=", "0", ",", "split", "=", "'train'", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImbalanceSVHN", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ",", "transform", ",", "target_transform", ",", "download", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_number", ")", "\n", "img_num_list", "=", "self", ".", "get_img_num_per_cls", "(", "self", ".", "cls_num", ",", "imb_type", ",", "imb_factor", ")", "\n", "self", ".", "gen_imbalanced_data", "(", "img_num_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.ImbalanceSVHN.get_img_num_per_cls": [[19, 35], ["range", "img_num_per_cls.append", "range", "range", "img_num_per_cls.extend", "int", "img_num_per_cls.append", "img_num_per_cls.append", "int", "int", "int"], "methods", ["None"], ["", "def", "get_img_num_per_cls", "(", "self", ",", "cls_num", ",", "imb_type", ",", "imb_factor", ")", ":", "\n", "# img_max = len(self.data) / cls_num", "\n", "        ", "img_max", "=", "1000", "\n", "img_num_per_cls", "=", "[", "]", "\n", "if", "imb_type", "==", "'exp'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", ")", ":", "\n", "                ", "num", "=", "img_max", "*", "(", "imb_factor", "**", "(", "cls_idx", "/", "(", "cls_num", "-", "1.0", ")", ")", ")", "\n", "img_num_per_cls", ".", "append", "(", "int", "(", "num", ")", ")", "\n", "", "", "elif", "imb_type", "==", "'step'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", ")", ")", "\n", "", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", "*", "imb_factor", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "img_num_per_cls", ".", "extend", "(", "[", "int", "(", "img_max", ")", "]", "*", "cls_num", ")", "\n", "", "return", "img_num_per_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.ImbalanceSVHN.gen_imbalanced_data": [[36, 58], ["numpy.array", "numpy.unique", "numpy.concatenate", "dict", "zip", "numpy.vstack", "print", "numpy.random.shuffle", "numpy.vstack.append", "new_targets.extend", "len", "numpy.where", "len"], "methods", ["None"], ["", "def", "gen_imbalanced_data", "(", "self", ",", "img_num_per_cls", ")", ":", "\n", "        ", "new_data", "=", "[", "]", "\n", "new_targets", "=", "[", "]", "\n", "targets_np", "=", "np", ".", "array", "(", "self", ".", "labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "classes", "=", "np", ".", "unique", "(", "targets_np", ")", "\n", "# shift label 0 to the last (as original SVHN labels)", "\n", "# since SVHN itself is long-tailed, label 10 (0 here) may not contain enough images", "\n", "classes", "=", "np", ".", "concatenate", "(", "[", "classes", "[", "1", ":", "]", ",", "classes", "[", ":", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "# np.random.shuffle(classes)", "\n", "self", ".", "num_per_cls_dict", "=", "dict", "(", ")", "\n", "for", "the_class", ",", "the_img_num", "in", "zip", "(", "classes", ",", "img_num_per_cls", ")", ":", "\n", "            ", "self", ".", "num_per_cls_dict", "[", "the_class", "]", "=", "the_img_num", "\n", "idx", "=", "np", ".", "where", "(", "targets_np", "==", "the_class", ")", "[", "0", "]", "\n", "print", "(", "f\"Class {the_class}:\\t{len(idx)}\"", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "selec_idx", "=", "idx", "[", ":", "the_img_num", "]", "\n", "new_data", ".", "append", "(", "self", ".", "data", "[", "selec_idx", ",", "...", "]", ")", "\n", "new_targets", ".", "extend", "(", "[", "the_class", ",", "]", "*", "the_img_num", ")", "\n", "", "new_data", "=", "np", ".", "vstack", "(", "new_data", ")", "\n", "self", ".", "data", "=", "new_data", "\n", "self", ".", "labels", "=", "new_targets", "\n", "assert", "new_data", ".", "shape", "[", "0", "]", "==", "len", "(", "new_targets", ")", ",", "'Length of data & labels do not match!'", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.ImbalanceSVHN.get_cls_num_list": [[59, 64], ["range", "cls_num_list.append"], "methods", ["None"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "cls_num_list", ".", "append", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "", "return", "cls_num_list", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.__init__": [[70, 82], ["super().__init__", "os.path.join", "dict", "numpy.random.seed", "imbalance_svhn.SemiSupervisedImbalanceSVHN.get_img_num_per_cls", "imbalance_svhn.SemiSupervisedImbalanceSVHN.get_img_num_per_cls_unlabeled", "imbalance_svhn.SemiSupervisedImbalanceSVHN.gen_imbalanced_data"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_img_num_per_cls", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_img_num_per_cls_unlabeled", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.gen_imbalanced_data"], ["def", "__init__", "(", "self", ",", "root", ",", "imb_type", "=", "'exp'", ",", "imb_factor", "=", "0.01", ",", "unlabel_imb_factor", "=", "1", ",", "rand_number", "=", "0", ",", "split", "=", "'train'", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "SemiSupervisedImbalanceSVHN", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ",", "transform", ",", "target_transform", ",", "download", ")", "\n", "# unlabeled", "\n", "self", ".", "unlabeled_pseudo", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pseudo_labeled_svhn.pickle'", ")", "# pseudo-labels using model trained on imbalanced data", "\n", "self", ".", "imb_factor", "=", "imb_factor", "\n", "self", ".", "unlabel_imb_factor", "=", "unlabel_imb_factor", "\n", "self", ".", "num_per_cls_dict", "=", "dict", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_number", ")", "\n", "img_num_list", "=", "self", ".", "get_img_num_per_cls", "(", "self", ".", "cls_num", ",", "imb_type", ",", "imb_factor", ")", "\n", "img_num_list_unlabeled", "=", "self", ".", "get_img_num_per_cls_unlabeled", "(", "self", ".", "cls_num", ",", "img_num_list", ",", "unlabel_imb_factor", ")", "\n", "self", ".", "gen_imbalanced_data", "(", "img_num_list", ",", "img_num_list_unlabeled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_img_num_per_cls": [[83, 99], ["range", "img_num_per_cls.append", "range", "range", "img_num_per_cls.extend", "int", "img_num_per_cls.append", "img_num_per_cls.append", "int", "int", "int"], "methods", ["None"], ["", "def", "get_img_num_per_cls", "(", "self", ",", "cls_num", ",", "imb_type", ",", "imb_factor", ")", ":", "\n", "# img_max = len(self.data) / cls_num", "\n", "        ", "img_max", "=", "1000", "\n", "img_num_per_cls", "=", "[", "]", "\n", "if", "imb_type", "==", "'exp'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", ")", ":", "\n", "                ", "num", "=", "img_max", "*", "(", "imb_factor", "**", "(", "cls_idx", "/", "(", "cls_num", "-", "1.0", ")", ")", ")", "\n", "img_num_per_cls", ".", "append", "(", "int", "(", "num", ")", ")", "\n", "", "", "elif", "imb_type", "==", "'step'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", ")", ")", "\n", "", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", "*", "imb_factor", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "img_num_per_cls", ".", "extend", "(", "[", "int", "(", "img_max", ")", "]", "*", "cls_num", ")", "\n", "", "return", "img_num_per_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_img_num_per_cls_unlabeled": [[100, 112], ["range", "print", "numpy.sum", "img_num_per_cls_unlabel.append", "numpy.sum", "int", "int", "numpy.sum"], "methods", ["None"], ["", "def", "get_img_num_per_cls_unlabeled", "(", "self", ",", "cls_num", ",", "labeled_img_num_list", ",", "imb_factor", ")", ":", "\n", "        ", "img_unlabeled_total", "=", "np", ".", "sum", "(", "labeled_img_num_list", ")", "*", "self", ".", "unlabel_size_factor", "\n", "img_first_min", "=", "img_unlabeled_total", "//", "cls_num", "\n", "img_num_per_cls_unlabel", "=", "[", "]", "\n", "for", "cls_idx", "in", "range", "(", "cls_num", ")", ":", "\n", "            ", "num", "=", "img_first_min", "*", "(", "imb_factor", "**", "(", "cls_idx", "/", "(", "cls_num", "-", "1.0", ")", ")", ")", "\n", "img_num_per_cls_unlabel", ".", "append", "(", "int", "(", "num", ")", ")", "\n", "", "factor", "=", "img_unlabeled_total", "/", "np", ".", "sum", "(", "img_num_per_cls_unlabel", ")", "\n", "img_num_per_cls_unlabel", "=", "[", "int", "(", "num", "*", "factor", ")", "for", "num", "in", "img_num_per_cls_unlabel", "]", "\n", "print", "(", "f\"Unlabeled est total:\\t{img_unlabeled_total}\\n\"", "\n", "f\"After processing:\\t{np.sum(img_num_per_cls_unlabel)},\\t{img_num_per_cls_unlabel}\"", ")", "\n", "return", "img_num_per_cls_unlabel", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.gen_imbalanced_data": [[113, 161], ["numpy.array", "numpy.unique", "numpy.concatenate", "zip", "print", "range", "scipy.loadmat", "numpy.transpose", "aux_mat[].astype().squeeze", "numpy.place", "print", "zip", "numpy.vstack", "print", "range", "numpy.random.shuffle", "numpy.vstack.append", "new_targets.extend", "print", "os.path.join", "open", "pickle.load", "numpy.random.shuffle", "numpy.vstack.append", "new_targets.extend", "len", "print", "numpy.where", "aux_mat[].astype", "numpy.where", "len", "len"], "methods", ["None"], ["", "def", "gen_imbalanced_data", "(", "self", ",", "img_num_per_cls", ",", "img_num_per_cls_unlabeled", ")", ":", "\n", "        ", "new_data", "=", "[", "]", "\n", "new_targets", "=", "[", "]", "\n", "targets_np", "=", "np", ".", "array", "(", "self", ".", "labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "classes", "=", "np", ".", "unique", "(", "targets_np", ")", "\n", "# shift label 0 to the last (as original SVHN labels)", "\n", "# since SVHN itself is long-tailed, label 10 (0 here) may not contain enough images", "\n", "classes", "=", "np", ".", "concatenate", "(", "[", "classes", "[", "1", ":", "]", ",", "classes", "[", ":", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "# np.random.shuffle(classes)", "\n", "for", "the_class", ",", "the_img_num", "in", "zip", "(", "classes", ",", "img_num_per_cls", ")", ":", "\n", "            ", "self", ".", "num_per_cls_dict", "[", "the_class", "]", "=", "the_img_num", "\n", "idx", "=", "np", ".", "where", "(", "targets_np", "==", "the_class", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "selec_idx", "=", "idx", "[", ":", "the_img_num", "]", "\n", "new_data", ".", "append", "(", "self", ".", "data", "[", "selec_idx", ",", "...", "]", ")", "\n", "new_targets", ".", "extend", "(", "[", "the_class", ",", "]", "*", "the_img_num", ")", "\n", "", "print", "(", "f\"Labeled data extracted:\\t{len(new_targets)}\"", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "print", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "\n", "# unlabeled data", "\n", "", "aux_mat", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'extra_32x32.mat'", ")", ")", "\n", "aux_data", "=", "aux_mat", "[", "'X'", "]", "\n", "aux_data", "=", "np", ".", "transpose", "(", "aux_data", ",", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", "\n", "aux_truth", "=", "aux_mat", "[", "'y'", "]", ".", "astype", "(", "np", ".", "int64", ")", ".", "squeeze", "(", ")", "\n", "np", ".", "place", "(", "aux_truth", ",", "aux_truth", "==", "10", ",", "0", ")", "\n", "print", "(", "\"Loading pseudo labels from %s\"", "%", "self", ".", "unlabeled_pseudo", ")", "\n", "with", "open", "(", "self", ".", "unlabeled_pseudo", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "aux_targets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "aux_targets", "=", "aux_targets", "[", "'extrapolated_targets'", "]", "\n", "\n", "for", "the_class", ",", "the_img_num", "in", "zip", "(", "classes", ",", "img_num_per_cls_unlabeled", ")", ":", "\n", "# ground truth is only used to select samples", "\n", "            ", "idx", "=", "np", ".", "where", "(", "aux_truth", "==", "the_class", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "selec_idx", "=", "idx", "[", ":", "the_img_num", "]", "\n", "new_data", ".", "append", "(", "aux_data", "[", "selec_idx", ",", "...", "]", ")", "\n", "# append pseudo-label", "\n", "new_targets", ".", "extend", "(", "aux_targets", "[", "selec_idx", "]", ")", "\n", "for", "pseudo_class", "in", "aux_targets", "[", "selec_idx", "]", ":", "\n", "                ", "self", ".", "num_per_cls_dict", "[", "pseudo_class", "]", "+=", "1", "\n", "", "", "new_data", "=", "np", ".", "vstack", "(", "new_data", ")", "\n", "self", ".", "data", "=", "new_data", "\n", "self", ".", "labels", "=", "new_targets", "\n", "assert", "new_data", ".", "shape", "[", "0", "]", "==", "len", "(", "new_targets", ")", ",", "'Length of data & labels do not match!'", "\n", "print", "(", "f\"Unlabeled data extracted:\\t{len(new_targets)}\"", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "print", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.imbalance_svhn.SemiSupervisedImbalanceSVHN.get_cls_num_list": [[162, 167], ["range", "cls_num_list.append"], "methods", ["None"], ["", "", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "cls_num_list", ".", "append", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "", "return", "cls_num_list", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.inat.INaturalist.__init__": [[40, 48], ["open", "inat.INaturalist.img_path.append", "inat.INaturalist.labels.append", "os.path.join", "int", "line.split", "line.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "txt", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "img_path", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "with", "open", "(", "txt", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "self", ".", "img_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "line", ".", "split", "(", ")", "[", "0", "]", ")", ")", "\n", "self", ".", "labels", ".", "append", "(", "int", "(", "line", ".", "split", "(", ")", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.inat.INaturalist.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.inat.INaturalist.__getitem__": [[52, 63], ["open", "PIL.Image.open().convert", "inat.INaturalist.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "img_path", "[", "index", "]", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "sample", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", ",", "label", "# , index", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.inat.get_data_transform": [[14, 36], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "get_data_transform", "(", "split", ",", "rgb_mean", ",", "rbg_std", ")", ":", "\n", "    ", "data_transforms", "=", "{", "\n", "'train'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", ",", "\n", "'val'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", ",", "\n", "'test'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", "\n", "}", "\n", "return", "data_transforms", "[", "split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.dataset.inat.load_data_inat": [[65, 91], ["print", "inat.get_data_transform", "inat.INaturalist", "print", "print", "print", "torch.utils.data.DataLoader", "print", "print", "torch.utils.data.DataLoader", "len"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.dataloader.get_data_transform"], ["", "", "def", "load_data_inat", "(", "data_root", ",", "batch_size", ",", "phase", ",", "sampler_dic", "=", "None", ",", "num_workers", "=", "4", ",", "shuffle", "=", "True", ")", ":", "\n", "    ", "assert", "phase", "in", "{", "'train'", ",", "'val'", "}", "\n", "key", "=", "'iNaturalist18'", "\n", "txt", "=", "f'./imagenet_inat/data/iNaturalist18/iNaturalist18_{phase}.txt'", "\n", "print", "(", "f'===> Loading iNaturalist18 data from {txt}'", ")", "\n", "rgb_mean", ",", "rgb_std", "=", "RGB_statistics", "[", "key", "]", "[", "'mean'", "]", ",", "RGB_statistics", "[", "key", "]", "[", "'std'", "]", "\n", "transform", "=", "get_data_transform", "(", "phase", ",", "rgb_mean", ",", "rgb_std", ")", "\n", "\n", "set_inat", "=", "INaturalist", "(", "data_root", ",", "txt", ",", "transform", ")", "\n", "print", "(", "f'===> {phase} data length {len(set_inat)}'", ")", "\n", "\n", "# if phase == 'test' and test_open:", "\n", "#     open_txt = './data/%s/%s_open.txt' % (dataset, dataset)", "\n", "#     print('Testing with open sets from %s' % open_txt)", "\n", "#     open_set_ = INaturalist('./data/%s/%s_open' % (dataset, dataset), open_txt, transform)", "\n", "#     set_ = ConcatDataset([set_, open_set_])", "\n", "\n", "if", "sampler_dic", "and", "phase", "==", "'train'", ":", "\n", "        ", "print", "(", "'Using sampler: '", ",", "sampler_dic", "[", "'sampler'", "]", ")", "\n", "print", "(", "'Sampler parameters: '", ",", "sampler_dic", "[", "'params'", "]", ")", "\n", "return", "DataLoader", "(", "dataset", "=", "set_inat", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "sampler", "=", "sampler_dic", "[", "'sampler'", "]", "(", "set_inat", ",", "**", "sampler_dic", "[", "'params'", "]", ")", ",", "num_workers", "=", "num_workers", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'No sampler.'", ")", "\n", "print", "(", "'Shuffle is %s.'", "%", "shuffle", ")", "\n", "return", "DataLoader", "(", "dataset", "=", "set_inat", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.NormedLinear.__init__": [[18, 22], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "resnet_cifar.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "resnet_cifar.NormedLinear.weight.data.uniform_().renorm_", "resnet_cifar.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.NormedLinear.forward": [[23, 26], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.LambdaLayer.__init__": [[30, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.LambdaLayer.forward": [[34, 36], ["resnet_cifar.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.BasicBlock.__init__": [[41, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_cifar.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.BasicBlock.forward": [[62, 68], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn2", "resnet_cifar.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn1", "resnet_cifar.BasicBlock.conv2", "resnet_cifar.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.ResNet_s.__init__": [[72, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar.ResNet_s._make_layer", "resnet_cifar.ResNet_s._make_layer", "resnet_cifar.ResNet_s._make_layer", "resnet_cifar.ResNet_s.apply", "resnet_cifar.NormedLinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "use_norm", "=", "False", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet_s", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "if", "use_norm", ":", "\n", "            ", "self", ".", "fc", "=", "NormedLinear", "(", "64", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "", "self", ".", "apply", "(", "_weights_init", ")", "\n", "self", ".", "return_encoding", "=", "return_features", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.ResNet_s._make_layer": [[88, 96], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.ResNet_s.forward": [[97, 109], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.ResNet_s.layer1", "resnet_cifar.ResNet_s.layer2", "resnet_cifar.ResNet_s.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar.ResNet_s.view", "resnet_cifar.ResNet_s.fc", "resnet_cifar.ResNet_s.bn1", "resnet_cifar.ResNet_s.size", "resnet_cifar.ResNet_s.conv1", "resnet_cifar.ResNet_s.size"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "encoding", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "encoding", ")", "\n", "if", "self", ".", "return_encoding", ":", "\n", "            ", "return", "out", ",", "encoding", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar._weights_init": [[10, 14], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.resnet20": [[111, 113], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "", "", "def", "resnet20", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.resnet32": [[115, 117], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet32", "(", "num_classes", "=", "10", ",", "use_norm", "=", "False", ",", "return_features", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "num_classes", "=", "num_classes", ",", "use_norm", "=", "use_norm", ",", "return_features", "=", "return_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.resnet44": [[119, 121], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet44", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.resnet56": [[123, 125], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet56", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.resnet110": [[127, 129], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet110", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.resnet1202": [[131, 133], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet1202", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet_cifar.test": [[135, 143], ["filter", "print", "print", "net.parameters", "np.prod", "len", "list", "x.data.numpy", "filter", "net.parameters", "len", "p.data.size"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "test", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "total_params", "=", "0", "\n", "\n", "for", "x", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "x", ".", "data", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "", "print", "(", "\"Total number of params\"", ",", "total_params", ")", "\n", "print", "(", "\"Total layers\"", ",", "len", "(", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", "and", "len", "(", "p", ".", "data", ".", "size", "(", ")", ")", ">", "1", ",", "net", ".", "parameters", "(", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.BasicBlock.__init__": [[9, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BN", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BN", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.BasicBlock.forward": [[23, 29], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.Bottleneck.__init__": [[34, 48], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BN", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BN", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BN", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.Bottleneck.forward": [[50, 57], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.ResNet.__init__": [[60, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "use_norm", "=", "False", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "global", "BN", "\n", "BN", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer_one", "=", "self", ".", "conv1", "\n", "self", ".", "bn1", "=", "BN", "(", "64", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "return_encoding", "=", "return_features", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.ResNet._make_layer": [[78, 85], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.ResNet.forward": [[86, 103], ["resnet.ResNet.conv1", "resnet.ResNet.layer_one_out.requires_grad_", "resnet.ResNet.layer_one_out.retain_grad", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "layer_one_out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "self", ".", "layer_one_out", ".", "requires_grad_", "(", ")", "\n", "self", ".", "layer_one_out", ".", "retain_grad", "(", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "layer_one_out", ")", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "7", ")", "\n", "encoding", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "encoding", ")", "\n", "if", "self", ".", "return_encoding", ":", "\n", "            ", "return", "out", ",", "encoding", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.ResNetCIFAR.__init__": [[106, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "resnet.ResNetCIFAR._make_layer", "resnet.ResNetCIFAR._make_layer", "resnet.ResNetCIFAR._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNetCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "global", "BN", "\n", "BN", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.ResNetCIFAR._make_layer": [[120, 127], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.ResNetCIFAR.forward": [[128, 137], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNetCIFAR.layer1", "resnet.ResNetCIFAR.layer2", "resnet.ResNetCIFAR.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNetCIFAR.view", "resnet.ResNetCIFAR.linear", "resnet.ResNetCIFAR.bn1", "resnet.ResNetCIFAR.size", "resnet.ResNetCIFAR.conv1"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.resnet18": [[139, 141], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.resnet34": [[143, 145], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.resnet50": [[147, 149], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.resnet101": [[151, 153], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.resnet.resnet152": [[155, 157], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.DotProductClassifier.DotProduct_Classifier.__init__": [[8, 12], ["torch.Module.__init__", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "feat_dim", "=", "2048", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "DotProduct_Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print('<DotProductClassifier> contains bias: {}'.format(bias))", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "feat_dim", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.DotProductClassifier.DotProduct_Classifier.forward": [[13, 16], ["DotProductClassifier.DotProduct_Classifier.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.DotProductClassifier.create_model": [[18, 41], ["print", "DotProductClassifier.DotProduct_Classifier", "print", "print", "init_weights", "print", "subdir.replace.replace", "os.path.join", "log_dir.strip().split", "os.path.join", "log_dir.strip", "log_dir.split"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.layers.ModulatedAttLayer.ModulatedAttLayer.init_weights"], ["", "", "def", "create_model", "(", "feat_dim", ",", "num_classes", "=", "1000", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "*", "args", ")", ":", "\n", "    ", "print", "(", "'Loading Dot Product Classifier.'", ")", "\n", "clf", "=", "DotProduct_Classifier", "(", "num_classes", ",", "feat_dim", ")", "\n", "\n", "if", "not", "test", ":", "\n", "        ", "if", "stage1_weights", ":", "\n", "            ", "assert", "dataset", "\n", "print", "(", "'Loading %s Stage 1 Classifier Weights.'", "%", "dataset", ")", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "                ", "subdir", "=", "log_dir", ".", "strip", "(", "'/'", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "subdir", "=", "subdir", ".", "replace", "(", "'stage2'", ",", "'stage1'", ")", "\n", "weight_dir", "=", "path", ".", "join", "(", "'/'", ".", "join", "(", "log_dir", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "subdir", ")", "\n", "# weight_dir = path.join('/'.join(log_dir.split('/')[:-1]), 'stage1')", "\n", "", "else", ":", "\n", "                ", "weight_dir", "=", "'./logs/%s/stage1'", "%", "dataset", "\n", "", "print", "(", "'==> Loading classifier weights from %s'", "%", "weight_dir", ")", "\n", "clf", ".", "fc", "=", "init_weights", "(", "model", "=", "clf", ".", "fc", ",", "\n", "weights_path", "=", "path", ".", "join", "(", "weight_dir", ",", "'final_model_checkpoint.pth'", ")", ",", "\n", "classifier", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Random initialized classifier weights.'", ")", "\n", "\n", "", "", "return", "clf", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNet50Feature.create_model": [[6, 29], ["print", "ResNet", "print", "print", "init_weights", "print", "os.path.join", "os.path.join", "log_dir.split"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.layers.ModulatedAttLayer.ModulatedAttLayer.init_weights"], ["def", "create_model", "(", "use_selfatt", "=", "False", ",", "use_fc", "=", "False", ",", "dropout", "=", "None", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "*", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'Loading Scratch ResNet 50 Feature Model.'", ")", "\n", "resnet50", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "use_modulatedatt", "=", "use_selfatt", ",", "use_fc", "=", "use_fc", ",", "dropout", "=", "None", ")", "\n", "\n", "if", "not", "test", ":", "\n", "        ", "if", "stage1_weights", ":", "\n", "            ", "assert", "dataset", "\n", "print", "(", "'Loading %s Stage 1 ResNet 10 Weights.'", "%", "dataset", ")", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "# subdir = log_dir.strip('/').split('/')[-1]", "\n", "# subdir = subdir.replace('stage2', 'stage1')", "\n", "# weight_dir = path.join('/'.join(log_dir.split('/')[:-1]), subdir)", "\n", "                ", "weight_dir", "=", "path", ".", "join", "(", "'/'", ".", "join", "(", "log_dir", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "'stage1'", ")", "\n", "", "else", ":", "\n", "                ", "weight_dir", "=", "'./logs/%s/stage1'", "%", "dataset", "\n", "", "print", "(", "'==> Loading weights from %s'", "%", "weight_dir", ")", "\n", "resnet50", "=", "init_weights", "(", "model", "=", "resnet50", ",", "\n", "weights_path", "=", "path", ".", "join", "(", "weight_dir", ",", "'final_model_checkpoint.pth'", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No Pretrained Weights For Feature Model.'", ")", "\n", "\n", "", "", "return", "resnet50", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNet10Feature.create_model": [[6, 26], ["print", "ResNet", "print", "print", "init_weights", "print", "os.path.join", "os.path.join", "log_dir.split"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.layers.ModulatedAttLayer.ModulatedAttLayer.init_weights"], ["def", "create_model", "(", "use_selfatt", "=", "False", ",", "use_fc", "=", "False", ",", "dropout", "=", "None", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "*", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'Loading Scratch ResNet 10 Feature Model.'", ")", "\n", "resnet10", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "use_modulatedatt", "=", "use_selfatt", ",", "use_fc", "=", "use_fc", ",", "dropout", "=", "None", ")", "\n", "\n", "if", "not", "test", ":", "\n", "        ", "if", "stage1_weights", ":", "\n", "            ", "assert", "dataset", "\n", "print", "(", "'Loading %s Stage 1 ResNet 10 Weights.'", "%", "dataset", ")", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "                ", "weight_dir", "=", "path", ".", "join", "(", "'/'", ".", "join", "(", "log_dir", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "'stage1'", ")", "\n", "", "else", ":", "\n", "                ", "weight_dir", "=", "'./logs/%s/stage1'", "%", "dataset", "\n", "", "print", "(", "'==> Loading weights from %s'", "%", "weight_dir", ")", "\n", "resnet10", "=", "init_weights", "(", "model", "=", "resnet10", ",", "\n", "weights_path", "=", "path", ".", "join", "(", "weight_dir", ",", "'final_model_checkpoint.pth'", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No Pretrained Weights For Feature Model.'", ")", "\n", "\n", "", "", "return", "resnet10", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.BasicBlock.__init__": [[15, 24], ["torch.Module.__init__", "ResNetFeature.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "ResNetFeature.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.conv3x3", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.BasicBlock.forward": [[25, 42], ["ResNetFeature.BasicBlock.conv1", "ResNetFeature.BasicBlock.bn1", "ResNetFeature.BasicBlock.relu", "ResNetFeature.BasicBlock.conv2", "ResNetFeature.BasicBlock.bn2", "ResNetFeature.BasicBlock.relu", "ResNetFeature.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.Bottleneck.__init__": [[47, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.Bottleneck.forward": [[60, 81], ["ResNetFeature.Bottleneck.conv1", "ResNetFeature.Bottleneck.bn1", "ResNetFeature.Bottleneck.relu", "ResNetFeature.Bottleneck.conv2", "ResNetFeature.Bottleneck.bn2", "ResNetFeature.Bottleneck.relu", "ResNetFeature.Bottleneck.conv3", "ResNetFeature.Bottleneck.bn3", "ResNetFeature.Bottleneck.relu", "ResNetFeature.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet.__init__": [[85, 122], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "ResNetFeature.ResNet._make_layer", "ResNetFeature.ResNet._make_layer", "ResNetFeature.ResNet._make_layer", "ResNetFeature.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "ResNetFeature.ResNet.modules", "print", "torch.Linear", "torch.Linear", "print", "torch.Dropout", "torch.Dropout", "print", "imagenet_inat.layers.ModulatedAttLayer.ModulatedAttLayer", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "use_modulatedatt", "=", "False", ",", "use_fc", "=", "False", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "use_fc", "=", "use_fc", "\n", "self", ".", "use_dropout", "=", "True", "if", "dropout", "else", "False", "\n", "\n", "if", "self", ".", "use_fc", ":", "\n", "            ", "print", "(", "'Using fc.'", ")", "\n", "self", ".", "fc_add", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "512", ")", "\n", "\n", "", "if", "self", ".", "use_dropout", ":", "\n", "            ", "print", "(", "'Using dropout.'", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "", "self", ".", "use_modulatedatt", "=", "use_modulatedatt", "\n", "if", "self", ".", "use_modulatedatt", ":", "\n", "            ", "print", "(", "'Using self attention.'", ")", "\n", "self", ".", "modulatedatt", "=", "ModulatedAttLayer", "(", "in_channels", "=", "512", "*", "block", ".", "expansion", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet._make_layer": [[123, 139], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.ResNet.forward": [[140, 167], ["ResNetFeature.ResNet.conv1", "ResNetFeature.ResNet.bn1", "ResNetFeature.ResNet.relu", "ResNetFeature.ResNet.maxpool", "ResNetFeature.ResNet.layer1", "ResNetFeature.ResNet.layer2", "ResNetFeature.ResNet.layer3", "ResNetFeature.ResNet.layer4", "ResNetFeature.ResNet.avgpool", "ResNetFeature.ResNet.view", "ResNetFeature.ResNet.modulatedatt", "ResNetFeature.ResNet.size", "torch.relu", "torch.relu", "ResNetFeature.ResNet.dropout", "ResNetFeature.ResNet.fc_add"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "if", "self", ".", "use_modulatedatt", ":", "\n", "            ", "x", ",", "feature_maps", "=", "self", ".", "modulatedatt", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "feature_maps", "=", "None", "\n", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_fc", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc_add", "(", "x", ")", ")", "\n", "\n", "", "if", "self", ".", "use_dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "return", "x", ",", "feature_maps", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNetFeature.conv3x3": [[7, 10], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.MoCo.__init__": [[11, 43], ["torch.Module.__init__", "base_encoder", "base_encoder", "zip", "builder.MoCo.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo.register_buffer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder.MoCo.encoder_q.parameters", "builder.MoCo.encoder_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__"], ["def", "__init__", "(", "self", ",", "base_encoder", ",", "dim", "=", "128", ",", "K", "=", "65536", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ",", "mlp", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "self", ".", "encoder_q", "=", "base_encoder", "(", "num_classes", "=", "dim", ")", "\n", "self", ".", "encoder_k", "=", "base_encoder", "(", "num_classes", "=", "dim", ")", "\n", "\n", "if", "mlp", ":", "# hack: brute-force replacement", "\n", "            ", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "encoder_q", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_q", ".", "fc", ")", "\n", "self", ".", "encoder_k", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_k", ".", "fc", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.MoCo._momentum_update_key_encoder": [[44, 51], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "builder.MoCo.encoder_q.parameters", "builder.MoCo.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.MoCo._dequeue_and_enqueue": [[52, 67], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "int"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.MoCo._batch_shuffle_ddp": [[68, 95], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.concat_all_gather", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.broadcast", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.broadcast", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.broadcast", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.broadcast"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.MoCo._batch_unshuffle_ddp": [[96, 114], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.MoCo.forward": [[115, 161], ["builder.MoCo.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "builder.MoCo._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.MoCo._momentum_update_key_encoder", "builder.MoCo._batch_shuffle_ddp", "builder.MoCo.encoder_k", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo._batch_unshuffle_ddp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "builder.MoCo.queue.clone().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "builder.MoCo.queue.clone"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.MoCo._dequeue_and_enqueue", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.MoCo._momentum_update_key_encoder", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.MoCo._batch_shuffle_ddp", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.MoCo._batch_unshuffle_ddp"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", ")", "# queries: NxC", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k", ")", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.builder.concat_all_gather": [[164, 176], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.loader.TwoCropsTransform.__init__": [[9, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_transform", ")", ":", "\n", "        ", "self", ".", "base_transform", "=", "base_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.loader.TwoCropsTransform.__call__": [[12, 16], ["loader.TwoCropsTransform.base_transform", "loader.TwoCropsTransform.base_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "k", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "return", "[", "q", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.loader.GaussianBlur.__init__": [[21, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.moco.loader.GaussianBlur.__call__": [[24, 28], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.__init__": [[17, 75], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "imagenet_inat.logger.Logger", "run_networks.model.init_models", "run_networks.model.load_model", "print", "len", "int", "print", "run_networks.model.init_optimizers", "run_networks.model.init_criterions", "os.path.join", "os.path.isfile", "run_networks.model.logger.log_cfg", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "run_networks.model.centroids_cal", "os.remove", "run_networks.model.load_model", "run_networks.model.get_knncentroids", "print", "run_networks.model.networks[].update", "open", "pickle.dump", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.init_models", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.load_model", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.init_optimizers", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.init_criterions", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.logger.Logger.log_cfg", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.centroids_cal", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.load_model", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.get_knncentroids", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "data", ",", "test", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "training_opt", "=", "self", ".", "config", "[", "'training_opt'", "]", "\n", "self", ".", "memory", "=", "self", ".", "config", "[", "'memory'", "]", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "test_mode", "=", "test", "\n", "self", ".", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "self", ".", "do_shuffle", "=", "config", "[", "'shuffle'", "]", "if", "'shuffle'", "in", "config", "else", "False", "\n", "\n", "# Setup logger", "\n", "self", ".", "logger", "=", "Logger", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ")", "\n", "\n", "# Initialize model", "\n", "self", ".", "init_models", "(", ")", "\n", "\n", "# Load pre-trained model parameters", "\n", "if", "'model_dir'", "in", "self", ".", "config", "and", "self", ".", "config", "[", "'model_dir'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_model", "(", "self", ".", "config", "[", "'model_dir'", "]", ")", "\n", "\n", "# Under training mode, initialize training steps, optimizers, schedulers, criterions, and centroids", "\n", "", "if", "not", "self", ".", "test_mode", ":", "\n", "\n", "# If using steps for training, we need to calculate training steps ", "\n", "# for each epoch based on actual number of training data instead of ", "\n", "# oversampled data number ", "\n", "            ", "print", "(", "'Using steps for training.'", ")", "\n", "self", ".", "training_data_num", "=", "len", "(", "self", ".", "data", "[", "'train'", "]", ".", "dataset", ")", "\n", "self", ".", "epoch_steps", "=", "int", "(", "self", ".", "training_data_num", "/", "self", ".", "training_opt", "[", "'batch_size'", "]", ")", "\n", "\n", "# Initialize model optimizer and scheduler", "\n", "print", "(", "'Initializing model optimizer.'", ")", "\n", "self", ".", "scheduler_params", "=", "self", ".", "training_opt", "[", "'scheduler_params'", "]", "\n", "self", ".", "model_optimizer", ",", "self", ".", "model_optimizer_scheduler", "=", "self", ".", "init_optimizers", "(", "self", ".", "model_optim_params_list", ")", "\n", "self", ".", "init_criterions", "(", ")", "\n", "if", "self", ".", "memory", "[", "'init_centroids'", "]", ":", "\n", "                ", "self", ".", "criterions", "[", "'FeatureLoss'", "]", ".", "centroids", ".", "data", "=", "self", ".", "centroids_cal", "(", "self", ".", "data", "[", "'train_plain'", "]", ")", "\n", "\n", "# Set up log file", "\n", "", "self", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "'log.txt'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "log_file", ")", ":", "\n", "                ", "os", ".", "remove", "(", "self", ".", "log_file", ")", "\n", "", "self", ".", "logger", ".", "log_cfg", "(", "self", ".", "config", ")", "\n", "", "else", ":", "\n", "            ", "if", "'KNNClassifier'", "in", "self", ".", "config", "[", "'networks'", "]", "[", "'classifier'", "]", "[", "'def_file'", "]", ":", "\n", "                ", "self", ".", "load_model", "(", ")", "\n", "if", "not", "self", ".", "networks", "[", "'classifier'", "]", ".", "initialized", ":", "\n", "                    ", "cfeats", "=", "self", ".", "get_knncentroids", "(", ")", "\n", "print", "(", "'===> Saving features to %s'", "%", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "'cfeats.pkl'", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "'cfeats.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "cfeats", ",", "f", ")", "\n", "", "self", ".", "networks", "[", "'classifier'", "]", ".", "update", "(", "cfeats", ")", "\n", "", "", "self", ".", "log_file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.init_models": [[76, 112], ["print", "networks_defs.items", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "model_args.update", "source_import().create_model", "run_networks.model.model_optim_params_list.append", "run_networks.model.networks[].cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "print", "run_networks.model.networks[].named_parameters", "source_import", "type", "run_networks.model.networks[].parameters", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.models.ResNet10Feature.create_model", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.source_import"], ["", "", "def", "init_models", "(", "self", ",", "optimizer", "=", "True", ")", ":", "\n", "        ", "networks_defs", "=", "self", ".", "config", "[", "'networks'", "]", "\n", "self", ".", "networks", "=", "{", "}", "\n", "self", ".", "model_optim_params_list", "=", "[", "]", "\n", "\n", "print", "(", "\"Using\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs.\"", ")", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "# Networks", "\n", "            ", "def_file", "=", "val", "[", "'def_file'", "]", "\n", "# model_args = list(val['params'].values())", "\n", "# model_args.append(self.test_mode)", "\n", "model_args", "=", "val", "[", "'params'", "]", "\n", "model_args", ".", "update", "(", "{", "'test'", ":", "self", ".", "test_mode", "}", ")", "\n", "\n", "self", ".", "networks", "[", "key", "]", "=", "source_import", "(", "def_file", ")", ".", "create_model", "(", "**", "model_args", ")", "\n", "if", "'KNNClassifier'", "in", "type", "(", "self", ".", "networks", "[", "key", "]", ")", ".", "__name__", ":", "\n", "# Put the KNN classifier on one single GPU", "\n", "                ", "self", ".", "networks", "[", "key", "]", "=", "self", ".", "networks", "[", "key", "]", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "networks", "[", "key", "]", "=", "nn", ".", "DataParallel", "(", "self", ".", "networks", "[", "key", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "'fix'", "in", "val", "and", "val", "[", "'fix'", "]", ":", "\n", "                ", "print", "(", "'Freezing feature weights except for self attention weights (if exist).'", ")", "\n", "for", "param_name", ",", "param", "in", "self", ".", "networks", "[", "key", "]", ".", "named_parameters", "(", ")", ":", "\n", "# Freeze all parameters except self attention parameters", "\n", "                    ", "if", "'selfatt'", "not", "in", "param_name", "and", "'fc'", "not", "in", "param_name", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "False", "\n", "# print('  | ', param_name, param.requires_grad)", "\n", "\n", "# Optimizer list", "\n", "", "", "", "optim_params", "=", "val", "[", "'optim_params'", "]", "\n", "self", ".", "model_optim_params_list", ".", "append", "(", "{", "'params'", ":", "self", ".", "networks", "[", "key", "]", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "optim_params", "[", "'lr'", "]", ",", "\n", "'momentum'", ":", "optim_params", "[", "'momentum'", "]", ",", "\n", "'weight_decay'", ":", "optim_params", "[", "'weight_decay'", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.init_criterions": [[113, 137], ["criterion_defs.items", "list", "source_import().create_loss().cuda", "val[].values", "print", "run_networks.model.init_optimizers", "source_import().create_loss", "run_networks.model.criterions[].parameters", "source_import"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.init_optimizers", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.create_loss", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.source_import"], ["", "", "def", "init_criterions", "(", "self", ")", ":", "\n", "        ", "criterion_defs", "=", "self", ".", "config", "[", "'criterions'", "]", "\n", "self", ".", "criterions", "=", "{", "}", "\n", "self", ".", "criterion_weights", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "criterion_defs", ".", "items", "(", ")", ":", "\n", "            ", "def_file", "=", "val", "[", "'def_file'", "]", "\n", "loss_args", "=", "list", "(", "val", "[", "'loss_params'", "]", ".", "values", "(", ")", ")", "\n", "\n", "self", ".", "criterions", "[", "key", "]", "=", "source_import", "(", "def_file", ")", ".", "create_loss", "(", "*", "loss_args", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion_weights", "[", "key", "]", "=", "val", "[", "'weight'", "]", "\n", "\n", "if", "val", "[", "'optim_params'", "]", ":", "\n", "                ", "print", "(", "'Initializing criterion optimizer.'", ")", "\n", "optim_params", "=", "val", "[", "'optim_params'", "]", "\n", "optim_params", "=", "[", "{", "'params'", ":", "self", ".", "criterions", "[", "key", "]", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "optim_params", "[", "'lr'", "]", ",", "\n", "'momentum'", ":", "optim_params", "[", "'momentum'", "]", ",", "\n", "'weight_decay'", ":", "optim_params", "[", "'weight_decay'", "]", "}", "]", "\n", "# Initialize criterion optimizer and scheduler", "\n", "self", ".", "criterion_optimizer", ",", "self", ".", "criterion_optimizer_scheduler", "=", "self", ".", "init_optimizers", "(", "optim_params", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "criterion_optimizer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.init_optimizers": [[138, 149], ["torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "print", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR"], "methods", ["None"], ["", "", "", "def", "init_optimizers", "(", "self", ",", "optim_params", ")", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "optim_params", ")", "\n", "if", "self", ".", "config", "[", "'coslr'", "]", ":", "\n", "            ", "print", "(", "\"===> Using coslr eta_min={}\"", ".", "format", "(", "self", ".", "config", "[", "'endlr'", "]", ")", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "self", ".", "training_opt", "[", "'num_epochs'", "]", ",", "eta_min", "=", "self", ".", "config", "[", "'endlr'", "]", ")", "\n", "", "else", ":", "\n", "            ", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "\n", "step_size", "=", "self", ".", "scheduler_params", "[", "'step_size'", "]", ",", "\n", "gamma", "=", "self", ".", "scheduler_params", "[", "'gamma'", "]", ")", "\n", "", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.batch_forward": [[150, 179], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "run_networks.model.centroids.unsqueeze().expand().reshape().squeeze", "run_networks.model.criterions.keys", "run_networks.model.centroids.unsqueeze().expand().reshape", "run_networks.model.centroids.unsqueeze().expand", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "run_networks.model.centroids.unsqueeze"], "methods", ["None"], ["", "def", "batch_forward", "(", "self", ",", "inputs", ",", "labels", "=", "None", ",", "centroids", "=", "False", ",", "feature_ext", "=", "False", ",", "phase", "=", "'train'", ")", ":", "\n", "        ", "'''\n        This is a general single batch running function. \n        '''", "\n", "\n", "# Calculate Features", "\n", "self", ".", "features", ",", "self", ".", "feature_maps", "=", "self", ".", "networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "\n", "# If not just extracting features, calculate logits", "\n", "if", "not", "feature_ext", ":", "\n", "\n", "# During training, calculate centroids if needed to ", "\n", "            ", "if", "phase", "!=", "'test'", ":", "\n", "                ", "if", "centroids", "and", "'FeatureLoss'", "in", "self", ".", "criterions", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "centroids", "=", "self", ".", "criterions", "[", "'FeatureLoss'", "]", ".", "centroids", ".", "data", "\n", "# torch.cat([self.centroids] * self.num_gpus)", "\n", "self", ".", "centroids", "=", "self", ".", "centroids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "\n", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "self", ".", "centroids", ".", "shape", "[", "0", "]", ",", "self", ".", "centroids", ".", "shape", "[", "1", "]", ")", ".", "reshape", "(", "\n", "-", "1", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", "*", "self", ".", "centroids", ".", "shape", "[", "0", "]", ",", "self", ".", "centroids", ".", "shape", "[", "1", "]", ")", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "centroids", "=", "None", "\n", "\n", "", "", "if", "self", ".", "centroids", "is", "not", "None", ":", "\n", "                ", "centroids_", "=", "torch", ".", "cat", "(", "[", "self", ".", "centroids", "]", "*", "self", ".", "num_gpus", ")", "\n", "", "else", ":", "\n", "                ", "centroids_", "=", "self", ".", "centroids", "\n", "\n", "# Calculate logits with classifier", "\n", "", "self", ".", "logits", ",", "self", ".", "direct_memory_feature", "=", "self", ".", "networks", "[", "'classifier'", "]", "(", "self", ".", "features", ",", "centroids_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.batch_backward": [[180, 191], ["run_networks.model.model_optimizer.zero_grad", "run_networks.model.loss.backward", "run_networks.model.model_optimizer.step", "run_networks.model.criterion_optimizer.zero_grad", "run_networks.model.criterion_optimizer.step"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLossFunc.backward"], ["", "", "def", "batch_backward", "(", "self", ")", ":", "\n", "# Zero out optimizer gradients", "\n", "        ", "self", ".", "model_optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "criterion_optimizer", ":", "\n", "            ", "self", ".", "criterion_optimizer", ".", "zero_grad", "(", ")", "\n", "# Back-propagation from loss outputs", "\n", "", "self", ".", "loss", ".", "backward", "(", ")", "\n", "# Step optimizers", "\n", "self", ".", "model_optimizer", ".", "step", "(", ")", "\n", "if", "self", ".", "criterion_optimizer", ":", "\n", "            ", "self", ".", "criterion_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.batch_loss": [[192, 207], ["run_networks.model.criterions.keys", "run_networks.model.criterions.keys"], "methods", ["None"], ["", "", "def", "batch_loss", "(", "self", ",", "labels", ")", ":", "\n", "        ", "self", ".", "loss", "=", "0", "\n", "\n", "# First, apply performance loss", "\n", "if", "'PerformanceLoss'", "in", "self", ".", "criterions", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "loss_perf", "=", "self", ".", "criterions", "[", "'PerformanceLoss'", "]", "(", "self", ".", "logits", ",", "labels", ")", "\n", "self", ".", "loss_perf", "*=", "self", ".", "criterion_weights", "[", "'PerformanceLoss'", "]", "\n", "self", ".", "loss", "+=", "self", ".", "loss_perf", "\n", "\n", "# Apply loss on features if set up", "\n", "", "if", "'FeatureLoss'", "in", "self", ".", "criterions", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "loss_feat", "=", "self", ".", "criterions", "[", "'FeatureLoss'", "]", "(", "self", ".", "features", ",", "labels", ")", "\n", "self", ".", "loss_feat", "=", "self", ".", "loss_feat", "*", "self", ".", "criterion_weights", "[", "'FeatureLoss'", "]", "\n", "# Add feature loss to total loss", "\n", "self", ".", "loss", "+=", "self", ".", "loss_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.shuffle_batch": [[208, 213], ["torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "x.size"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "shuffle_batch", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "index", "=", "torch", ".", "randperm", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "x", "=", "x", "[", "index", "]", "\n", "y", "=", "y", "[", "index", "]", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.train": [[214, 365], ["print_write", "time.sleep", "print_write", "copy.deepcopy", "copy.deepcopy", "range", "print", "print", "print_write", "run_networks.model.save_model", "run_networks.model.reset_model", "run_networks.model.eval", "print", "run_networks.model.networks[].state_dict", "run_networks.model.networks[].state_dict", "run_networks.model.networks.values", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "run_networks.model.model_optimizer_scheduler.step", "enumerate", "hasattr", "hasattr", "run_networks.model.eval_with_preds", "run_networks.model.eval", "rsls.update", "rsls.update", "hasattr", "run_networks.model.logger.log_acc", "print", "run_networks.model.save_latest", "run_networks.model.train", "run_networks.model.criterion_optimizer_scheduler.step", "hasattr", "run_networks.model.logger.log_ws", "run_networks.model.data[].sampler.reset_weights", "get_priority", "run_networks.model.data[].sampler.reset_priority", "copy.deepcopy", "copy.deepcopy", "run_networks.model.shuffle_batch", "inputs.cuda", "labels.cuda", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "run_networks.model.batch_forward", "run_networks.model.batch_loss", "run_networks.model.batch_backward", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "total_preds.append", "total_labels.append", "hasattr", "get_priority", "run_networks.model.data[].sampler.update_weights", "run_networks.model.data[].sampler.get_weights", "run_networks.model.total_logits.detach", "run_networks.model.total_labels.cpu().numpy", "run_networks.model.networks[].state_dict", "run_networks.model.networks[].state_dict", "torch2numpy", "torch2numpy", "run_networks.model.loss.item", "mic_acc_cal", "print_write", "run_networks.model.logger.log_loss", "run_networks.model.logits.detach", "indexes.cpu().numpy", "inlist.append", "run_networks.model.loss_feat.item", "run_networks.model.loss_perf.item", "labels.cpu().numpy", "run_networks.model.total_labels.cpu", "run_networks.model.criterions.keys", "indexes.cpu", "labels.cpu"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.print_write", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.print_write", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.print_write", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.save_model", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.reset_model", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.eval", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.eval_with_preds", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.eval", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.logger.Logger.log_acc", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.save_latest", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.train", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.logger.Logger.log_ws", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.reset_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.get_priority", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.reset_priority", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.shuffle_batch", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.batch_forward", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.batch_loss", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.batch_backward", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.get_priority", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.update_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.torch2numpy", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.torch2numpy", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.mic_acc_cal", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.print_write", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.logger.Logger.log_loss"], ["", "def", "train", "(", "self", ")", ":", "\n", "# When training the network", "\n", "        ", "print_str", "=", "[", "'Phase: train'", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "time", ".", "sleep", "(", "0.25", ")", "\n", "\n", "print_write", "(", "[", "'Do shuffle??? --- '", ",", "self", ".", "do_shuffle", "]", ",", "self", ".", "log_file", ")", "\n", "\n", "# Initialize best model", "\n", "best_model_weights", "=", "{", "}", "\n", "best_model_weights", "[", "'feat_model'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'feat_model'", "]", ".", "state_dict", "(", ")", ")", "\n", "best_model_weights", "[", "'classifier'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'classifier'", "]", ".", "state_dict", "(", ")", ")", "\n", "best_acc", "=", "0.0", "\n", "best_epoch", "=", "0", "\n", "# best_centroids = self.centroids", "\n", "\n", "end_epoch", "=", "self", ".", "training_opt", "[", "'num_epochs'", "]", "\n", "\n", "# Loop over epochs", "\n", "for", "epoch", "in", "range", "(", "1", ",", "end_epoch", "+", "1", ")", ":", "\n", "            ", "for", "model", "in", "self", ".", "networks", ".", "values", "(", ")", ":", "\n", "                ", "model", ".", "train", "(", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# Set model modes and set scheduler", "\n", "# In training, step optimizer scheduler and set model to train() ", "\n", "self", ".", "model_optimizer_scheduler", ".", "step", "(", ")", "\n", "if", "self", ".", "criterion_optimizer", ":", "\n", "                ", "self", ".", "criterion_optimizer_scheduler", ".", "step", "(", ")", "\n", "\n", "# Iterate over dataset", "\n", "", "total_preds", "=", "[", "]", "\n", "total_labels", "=", "[", "]", "\n", "\n", "for", "step", ",", "(", "inputs", ",", "labels", ",", "indexes", ")", "in", "enumerate", "(", "self", ".", "data", "[", "'train'", "]", ")", ":", "\n", "# Break when step equal to epoch step", "\n", "                ", "if", "step", "==", "self", ".", "epoch_steps", ":", "\n", "                    ", "break", "\n", "", "if", "self", ".", "do_shuffle", ":", "\n", "                    ", "inputs", ",", "labels", "=", "self", ".", "shuffle_batch", "(", "inputs", ",", "labels", ")", "\n", "", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "# If on training phase, enable gradients", "\n", "with", "torch", ".", "set_grad_enabled", "(", "True", ")", ":", "\n", "\n", "# If training, forward with loss, and no top 5 accuracy calculation", "\n", "                    ", "self", ".", "batch_forward", "(", "inputs", ",", "labels", ",", "\n", "centroids", "=", "self", ".", "memory", "[", "'centroids'", "]", ",", "\n", "phase", "=", "'train'", ")", "\n", "self", ".", "batch_loss", "(", "labels", ")", "\n", "self", ".", "batch_backward", "(", ")", "\n", "\n", "# Tracking predictions", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "self", ".", "logits", ",", "1", ")", "\n", "total_preds", ".", "append", "(", "torch2numpy", "(", "preds", ")", ")", "\n", "total_labels", ".", "append", "(", "torch2numpy", "(", "labels", ")", ")", "\n", "\n", "# Output minibatch training results", "\n", "if", "step", "%", "self", ".", "training_opt", "[", "'display_step'", "]", "==", "0", ":", "\n", "\n", "                        ", "minibatch_loss_feat", "=", "self", ".", "loss_feat", ".", "item", "(", ")", "if", "'FeatureLoss'", "in", "self", ".", "criterions", ".", "keys", "(", ")", "else", "None", "\n", "minibatch_loss_perf", "=", "self", ".", "loss_perf", ".", "item", "(", ")", "if", "'PerformanceLoss'", "in", "self", ".", "criterions", "else", "None", "\n", "minibatch_loss_total", "=", "self", ".", "loss", ".", "item", "(", ")", "\n", "minibatch_acc", "=", "mic_acc_cal", "(", "preds", ",", "labels", ")", "\n", "\n", "print_str", "=", "[", "'Epoch: [%d/%d]'", "\n", "%", "(", "epoch", ",", "self", ".", "training_opt", "[", "'num_epochs'", "]", ")", ",", "\n", "'Step: %5d'", "\n", "%", "(", "step", ")", ",", "\n", "'Minibatch_loss_feature: %.3f'", "\n", "%", "(", "minibatch_loss_feat", ")", "if", "minibatch_loss_feat", "else", "''", ",", "\n", "'Minibatch_loss_performance: %.3f'", "\n", "%", "(", "minibatch_loss_perf", ")", "if", "minibatch_loss_perf", "else", "''", ",", "\n", "'Minibatch_accuracy_micro: %.3f'", "\n", "%", "(", "minibatch_acc", ")", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "\n", "loss_info", "=", "{", "\n", "'Epoch'", ":", "epoch", ",", "\n", "'Step'", ":", "step", ",", "\n", "'Total'", ":", "minibatch_loss_total", ",", "\n", "'CE'", ":", "minibatch_loss_perf", ",", "\n", "'feat'", ":", "minibatch_loss_feat", "\n", "}", "\n", "\n", "self", ".", "logger", ".", "log_loss", "(", "loss_info", ")", "\n", "\n", "# Update priority weights if using PrioritizedSampler", "\n", "# if self.training_opt['sampler'] and \\", "\n", "#    self.training_opt['sampler']['type'] == 'PrioritizedSampler':", "\n", "", "", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'update_weights'", ")", ":", "\n", "                    ", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'ptype'", ")", ":", "\n", "                        ", "ptype", "=", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "ptype", "\n", "", "else", ":", "\n", "                        ", "ptype", "=", "'score'", "\n", "", "ws", "=", "get_priority", "(", "ptype", ",", "self", ".", "logits", ".", "detach", "(", ")", ",", "labels", ")", "\n", "# ws = logits2score(self.logits.detach(), labels)", "\n", "inlist", "=", "[", "indexes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "ws", "]", "\n", "if", "self", ".", "training_opt", "[", "'sampler'", "]", "[", "'type'", "]", "==", "'ClassPrioritySampler'", ":", "\n", "                        ", "inlist", ".", "append", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "update_weights", "(", "*", "inlist", ")", "\n", "# self.data['train'].sampler.update_weights(indexes.cpu().numpy(), ws)", "\n", "\n", "", "", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'get_weights'", ")", ":", "\n", "                ", "self", ".", "logger", ".", "log_ws", "(", "epoch", ",", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "get_weights", "(", ")", ")", "\n", "", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'reset_weights'", ")", ":", "\n", "                ", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "reset_weights", "(", "epoch", ")", "\n", "\n", "# After every epoch, validation", "\n", "", "rsls", "=", "{", "'epoch'", ":", "epoch", "}", "\n", "rsls_train", "=", "self", ".", "eval_with_preds", "(", "total_preds", ",", "total_labels", ")", "\n", "rsls_eval", "=", "self", ".", "eval", "(", "phase", "=", "'val'", ")", "\n", "rsls", ".", "update", "(", "rsls_train", ")", "\n", "rsls", ".", "update", "(", "rsls_eval", ")", "\n", "\n", "# Reset class weights for sampling if pri_mode is valid", "\n", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'reset_priority'", ")", ":", "\n", "                ", "ws", "=", "get_priority", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "ptype", ",", "\n", "self", ".", "total_logits", ".", "detach", "(", ")", ",", "\n", "self", ".", "total_labels", ")", "\n", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "reset_priority", "(", "ws", ",", "self", ".", "total_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# Log results", "\n", "", "self", ".", "logger", ".", "log_acc", "(", "rsls", ")", "\n", "\n", "# Under validation, the best model need to be updated", "\n", "if", "self", ".", "eval_acc_mic_top1", ">", "best_acc", ":", "\n", "                ", "best_epoch", "=", "epoch", "\n", "best_acc", "=", "self", ".", "eval_acc_mic_top1", "\n", "best_centroids", "=", "self", ".", "centroids", "\n", "best_model_weights", "[", "'feat_model'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'feat_model'", "]", ".", "state_dict", "(", ")", ")", "\n", "best_model_weights", "[", "'classifier'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'classifier'", "]", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "print", "(", "'===> Saving checkpoint'", ")", "\n", "self", ".", "save_latest", "(", "epoch", ")", "\n", "\n", "", "print", "(", ")", "\n", "print", "(", "'Training Complete.'", ")", "\n", "\n", "print_str", "=", "[", "'Best validation accuracy is %.3f at epoch %d'", "%", "(", "best_acc", ",", "best_epoch", ")", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "# Save the best model and best centroids if calculated", "\n", "self", ".", "save_model", "(", "epoch", ",", "best_epoch", ",", "best_model_weights", ",", "best_acc", ",", "centroids", "=", "best_centroids", ")", "\n", "\n", "# Test on the test set", "\n", "self", ".", "reset_model", "(", "best_model_weights", ")", "\n", "self", ".", "eval", "(", "'test'", "if", "'test'", "in", "self", ".", "data", "else", "'val'", ")", "\n", "print", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.eval_with_preds": [[366, 419], ["sum", "zip", "print_write", "isinstance", "len", "list", "mic_acc_cal", "shot_acc", "len", "list", "numpy.concatenate", "weighted_mic_acc_cal", "weighted_shot_acc", "len", "mixup_preds.append", "mixup_labels1.append", "mixup_labels2.append", "numpy.concatenate.append", "normal_preds.append", "normal_labels.append", "map", "map", "len", "len", "len", "len", "numpy.ones_like", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.print_write", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.mic_acc_cal", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.shot_acc", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.weighted_mic_acc_cal", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.weighted_shot_acc"], ["", "def", "eval_with_preds", "(", "self", ",", "preds", ",", "labels", ")", ":", "\n", "# Count the number of examples", "\n", "        ", "n_total", "=", "sum", "(", "[", "len", "(", "p", ")", "for", "p", "in", "preds", "]", ")", "\n", "\n", "# Split the examples into normal and mixup", "\n", "normal_preds", ",", "normal_labels", "=", "[", "]", ",", "[", "]", "\n", "mixup_preds", ",", "mixup_labels1", ",", "mixup_labels2", ",", "mixup_ws", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "p", ",", "l", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "            ", "if", "isinstance", "(", "l", ",", "tuple", ")", ":", "\n", "                ", "mixup_preds", ".", "append", "(", "p", ")", "\n", "mixup_labels1", ".", "append", "(", "l", "[", "0", "]", ")", "\n", "mixup_labels2", ".", "append", "(", "l", "[", "1", "]", ")", "\n", "mixup_ws", ".", "append", "(", "l", "[", "2", "]", "*", "np", ".", "ones_like", "(", "l", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "normal_preds", ".", "append", "(", "p", ")", "\n", "normal_labels", ".", "append", "(", "l", ")", "\n", "\n", "# Calculate normal prediction accuracy", "\n", "", "", "rsl", "=", "{", "'train_all'", ":", "0.", ",", "'train_many'", ":", "0.", ",", "'train_median'", ":", "0.", ",", "'train_low'", ":", "0.", "}", "\n", "if", "len", "(", "normal_preds", ")", ">", "0", ":", "\n", "            ", "normal_preds", ",", "normal_labels", "=", "list", "(", "map", "(", "np", ".", "concatenate", ",", "[", "normal_preds", ",", "normal_labels", "]", ")", ")", "\n", "n_top1", "=", "mic_acc_cal", "(", "normal_preds", ",", "normal_labels", ")", "\n", "n_top1_many", ",", "n_top1_median", ",", "n_top1_low", ",", "=", "shot_acc", "(", "normal_preds", ",", "normal_labels", ",", "self", ".", "data", "[", "'train'", "]", ")", "\n", "rsl", "[", "'train_all'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1", "\n", "rsl", "[", "'train_many'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1_many", "\n", "rsl", "[", "'train_median'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1_median", "\n", "rsl", "[", "'train_low'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1_low", "\n", "\n", "# Calculate mixup prediction accuracy", "\n", "", "if", "len", "(", "mixup_preds", ")", ">", "0", ":", "\n", "            ", "mixup_preds", ",", "mixup_labels", ",", "mixup_ws", "=", "list", "(", "map", "(", "np", ".", "concatenate", ",", "[", "mixup_preds", "*", "2", ",", "mixup_labels1", "+", "mixup_labels2", ",", "mixup_ws", "]", ")", ")", "\n", "mixup_ws", "=", "np", ".", "concatenate", "(", "[", "mixup_ws", ",", "1", "-", "mixup_ws", "]", ")", "\n", "n_top1", "=", "weighted_mic_acc_cal", "(", "mixup_preds", ",", "mixup_labels", ",", "mixup_ws", ")", "\n", "n_top1_many", ",", "n_top1_median", ",", "n_top1_low", ",", "=", "weighted_shot_acc", "(", "mixup_preds", ",", "mixup_labels", ",", "mixup_ws", ",", "self", ".", "data", "[", "'train'", "]", ")", "\n", "rsl", "[", "'train_all'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1", "\n", "rsl", "[", "'train_many'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1_many", "\n", "rsl", "[", "'train_median'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1_median", "\n", "rsl", "[", "'train_low'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1_low", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "", "print_str", "=", "[", "'\\n Training acc Top1: %.3f \\n'", "%", "(", "rsl", "[", "'train_all'", "]", ")", ",", "\n", "'Many_top1: %.3f'", "%", "(", "rsl", "[", "'train_many'", "]", ")", ",", "\n", "'Median_top1: %.3f'", "%", "(", "rsl", "[", "'train_median'", "]", ")", ",", "\n", "'Low_top1: %.3f'", "%", "(", "rsl", "[", "'train_low'", "]", ")", ",", "\n", "'\\n'", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "\n", "return", "rsl", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.eval": [[420, 548], ["print_write", "time.sleep", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "run_networks.model.networks.values", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "numpy.empty", "tqdm.tqdm.tqdm", "torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "mic_acc_cal", "F_measure", "shot_acc", "print", "run_networks.model.eval", "os.path.join", "print", "mic_acc_cal", "print", "print_write", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "inputs.cuda", "labels.cuda", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "run_networks.model.batch_forward", "open", "pickle.dump", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "os.path.exists", "print_write", "print_write", "print", "print", "open", "pickle.dump", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.concatenate", "logits_all.append", "feats_all.append", "labels_all.append", "idxs_all.append", "run_networks.model.total_logits.detach", "os.path.join", "run_networks.model.logits.cpu().numpy", "run_networks.model.features.cpu().numpy", "labels.cpu().numpy", "paths.numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "run_networks.model.logits.cpu", "run_networks.model.features.cpu", "labels.cpu"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.print_write", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.mic_acc_cal", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.F_measure", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.shot_acc", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.eval", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.mic_acc_cal", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.print_write", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.batch_forward", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.print_write", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.print_write"], ["", "def", "eval", "(", "self", ",", "phase", "=", "'val'", ",", "openset", "=", "False", ",", "save_feat", "=", "False", ")", ":", "\n", "\n", "        ", "print_str", "=", "[", "'Phase: %s'", "%", "(", "phase", ")", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "time", ".", "sleep", "(", "0.25", ")", "\n", "\n", "if", "openset", ":", "\n", "            ", "print", "(", "'Under openset test mode. Open threshold is %.1f'", "\n", "%", "self", ".", "training_opt", "[", "'open_threshold'", "]", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# In validation or testing mode, set model to eval() and initialize running loss/correct", "\n", "for", "model", "in", "self", ".", "networks", ".", "values", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "", "self", ".", "total_logits", "=", "torch", ".", "empty", "(", "(", "0", ",", "self", ".", "training_opt", "[", "'num_classes'", "]", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "total_labels", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "self", ".", "total_paths", "=", "np", ".", "empty", "(", "0", ")", "\n", "\n", "get_feat_only", "=", "save_feat", "\n", "feats_all", ",", "labels_all", ",", "idxs_all", ",", "logits_all", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "featmaps_all", "=", "[", "]", "\n", "# Iterate over dataset", "\n", "for", "inputs", ",", "labels", ",", "paths", "in", "tqdm", "(", "self", ".", "data", "[", "phase", "]", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "# If on training phase, enable gradients", "\n", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "\n", "# In validation or testing", "\n", "                ", "self", ".", "batch_forward", "(", "inputs", ",", "labels", ",", "\n", "centroids", "=", "self", ".", "memory", "[", "'centroids'", "]", ",", "\n", "phase", "=", "phase", ")", "\n", "if", "not", "get_feat_only", ":", "\n", "                    ", "self", ".", "total_logits", "=", "torch", ".", "cat", "(", "(", "self", ".", "total_logits", ",", "self", ".", "logits", ")", ")", "\n", "self", ".", "total_labels", "=", "torch", ".", "cat", "(", "(", "self", ".", "total_labels", ",", "labels", ")", ")", "\n", "self", ".", "total_paths", "=", "np", ".", "concatenate", "(", "(", "self", ".", "total_paths", ",", "paths", ")", ")", "\n", "\n", "", "if", "get_feat_only", ":", "\n", "                    ", "logits_all", ".", "append", "(", "self", ".", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "feats_all", ".", "append", "(", "self", ".", "features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels_all", ".", "append", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "idxs_all", ".", "append", "(", "paths", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "if", "get_feat_only", ":", "\n", "            ", "typ", "=", "'feat'", "\n", "if", "phase", "==", "'train_plain'", ":", "\n", "                ", "name", "=", "'train{}_all.pkl'", ".", "format", "(", "typ", ")", "\n", "", "elif", "phase", "==", "'test'", ":", "\n", "                ", "name", "=", "'test{}_all.pkl'", ".", "format", "(", "typ", ")", "\n", "", "elif", "phase", "==", "'val'", ":", "\n", "                ", "name", "=", "'val{}_all.pkl'", ".", "format", "(", "typ", ")", "\n", "\n", "", "fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "name", ")", "\n", "print", "(", "'===> Saving feats to '", "+", "fname", ")", "\n", "with", "open", "(", "fname", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\n", "'feats'", ":", "np", ".", "concatenate", "(", "feats_all", ")", ",", "\n", "'labels'", ":", "np", ".", "concatenate", "(", "labels_all", ")", ",", "\n", "'idxs'", ":", "np", ".", "concatenate", "(", "idxs_all", ")", ",", "\n", "}", ",", "\n", "f", ",", "protocol", "=", "4", ")", "\n", "", "return", "\n", "", "probs", ",", "preds", "=", "F", ".", "softmax", "(", "self", ".", "total_logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "if", "openset", ":", "\n", "            ", "preds", "[", "probs", "<", "self", ".", "training_opt", "[", "'open_threshold'", "]", "]", "=", "-", "1", "\n", "self", ".", "openset_acc", "=", "mic_acc_cal", "(", "preds", "[", "self", ".", "total_labels", "==", "-", "1", "]", ",", "\n", "self", ".", "total_labels", "[", "self", ".", "total_labels", "==", "-", "1", "]", ")", "\n", "print", "(", "'\\n\\nOpenset Accuracy: %.3f'", "%", "self", ".", "openset_acc", ")", "\n", "\n", "# Calculate the overall accuracy and F measurement", "\n", "", "self", ".", "eval_acc_mic_top1", "=", "mic_acc_cal", "(", "preds", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ",", "\n", "self", ".", "total_labels", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ")", "\n", "self", ".", "eval_f_measure", "=", "F_measure", "(", "preds", ",", "self", ".", "total_labels", ",", "openset", "=", "openset", ",", "\n", "theta", "=", "self", ".", "training_opt", "[", "'open_threshold'", "]", ")", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "preds", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ",", "\n", "self", ".", "total_labels", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "# Top-1 accuracy and additional string", "\n", "print_str", "=", "[", "'\\n\\n'", ",", "\n", "'Phase: %s'", "\n", "%", "(", "phase", ")", ",", "\n", "'\\n\\n'", ",", "\n", "'Evaluation_accuracy_micro_top1: %.3f'", "\n", "%", "(", "self", ".", "eval_acc_mic_top1", ")", ",", "\n", "'\\n'", ",", "\n", "'Averaged F-measure: %.3f'", "\n", "%", "(", "self", ".", "eval_f_measure", ")", ",", "\n", "'\\n'", ",", "\n", "'Many_shot_accuracy_top1: %.3f'", "\n", "%", "(", "self", ".", "many_acc_top1", ")", ",", "\n", "'Median_shot_accuracy_top1: %.3f'", "\n", "%", "(", "self", ".", "median_acc_top1", ")", ",", "\n", "'Low_shot_accuracy_top1: %.3f'", "\n", "%", "(", "self", ".", "low_acc_top1", ")", ",", "\n", "'\\n'", "]", "\n", "\n", "rsl", "=", "{", "phase", "+", "'_all'", ":", "self", ".", "eval_acc_mic_top1", ",", "\n", "phase", "+", "'_many'", ":", "self", ".", "many_acc_top1", ",", "\n", "phase", "+", "'_median'", ":", "self", ".", "median_acc_top1", ",", "\n", "phase", "+", "'_low'", ":", "self", ".", "low_acc_top1", ",", "\n", "phase", "+", "'_fscore'", ":", "self", ".", "eval_f_measure", "}", "\n", "\n", "if", "phase", "==", "'val'", ":", "\n", "            ", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "", "else", ":", "\n", "            ", "acc_str", "=", "[", "\"{:.1f} \\t {:.1f} \\t {:.1f} \\t {:.1f}\"", ".", "format", "(", "\n", "self", ".", "many_acc_top1", "*", "100", ",", "\n", "self", ".", "median_acc_top1", "*", "100", ",", "\n", "self", ".", "low_acc_top1", "*", "100", ",", "\n", "self", ".", "eval_acc_mic_top1", "*", "100", ")", "]", "\n", "if", "self", ".", "log_file", "is", "not", "None", "and", "os", ".", "path", ".", "exists", "(", "self", ".", "log_file", ")", ":", "\n", "                ", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "print_write", "(", "acc_str", ",", "self", ".", "log_file", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "*", "print_str", ")", "\n", "print", "(", "*", "acc_str", ")", "\n", "\n", "", "", "if", "phase", "==", "'test'", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "'cls_accs.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "cls_accs", ",", "f", ")", "\n", "", "", "return", "rsl", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.centroids_cal": [[549, 590], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "run_networks.model.networks.values", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "torch.tensor().float().unsqueeze().cuda", "run_networks.model.eval", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "tqdm.tqdm.tqdm", "os.path.join", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "run_networks.model.batch_forward", "range", "open", "pickle.dump", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "inputs.cuda", "labels.cuda", "len", "feats_all.append", "labels_all.append", "idxs_all.append", "run_networks.model.features.cpu().numpy", "labels.cpu().numpy", "idxs.numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "run_networks.model.features.cpu", "labels.cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "class_count"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.eval", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.batch_forward", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.class_count"], ["", "def", "centroids_cal", "(", "self", ",", "data", ",", "save_all", "=", "False", ")", ":", "\n", "\n", "        ", "centroids", "=", "torch", ".", "zeros", "(", "self", ".", "training_opt", "[", "'num_classes'", "]", ",", "\n", "self", ".", "training_opt", "[", "'feature_dim'", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "'Calculating centroids.'", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "for", "model", "in", "self", ".", "networks", ".", "values", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "", "feats_all", ",", "labels_all", ",", "idxs_all", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# Calculate initial centroids only on training data.", "\n", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "            ", "for", "inputs", ",", "labels", ",", "idxs", "in", "tqdm", "(", "data", ")", ":", "\n", "                ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "# Calculate Features of each training data", "\n", "self", ".", "batch_forward", "(", "inputs", ",", "feature_ext", "=", "True", ")", "\n", "# Add all calculated features to center tensor", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "                    ", "label", "=", "labels", "[", "i", "]", "\n", "centroids", "[", "label", "]", "+=", "self", ".", "features", "[", "i", "]", "\n", "# Save features if requried", "\n", "", "if", "save_all", ":", "\n", "                    ", "feats_all", ".", "append", "(", "self", ".", "features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels_all", ".", "append", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "idxs_all", ".", "append", "(", "idxs", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "if", "save_all", ":", "\n", "            ", "fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "'feats_all.pkl'", ")", "\n", "with", "open", "(", "fname", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "'feats'", ":", "np", ".", "concatenate", "(", "feats_all", ")", ",", "\n", "'labels'", ":", "np", ".", "concatenate", "(", "labels_all", ")", ",", "\n", "'idxs'", ":", "np", ".", "concatenate", "(", "idxs_all", ")", "}", ",", "\n", "f", ")", "\n", "# Average summed features with class count", "\n", "", "", "centroids", "/=", "torch", ".", "tensor", "(", "class_count", "(", "data", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.get_knncentroids": [[591, 644], ["print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "run_networks.model.networks.values", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.mean", "run_networks.model.get_knncentroids.get_centroids"], "methods", ["None"], ["", "def", "get_knncentroids", "(", "self", ")", ":", "\n", "        ", "datakey", "=", "'train_plain'", "\n", "assert", "datakey", "in", "self", ".", "data", "\n", "\n", "print", "(", "'===> Calculating KNN centroids.'", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "for", "model", "in", "self", ".", "networks", ".", "values", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "", "feats_all", ",", "labels_all", "=", "[", "]", ",", "[", "]", "\n", "\n", "# Calculate initial centroids only on training data.", "\n", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "            ", "for", "inputs", ",", "labels", ",", "idxs", "in", "tqdm", "(", "self", ".", "data", "[", "datakey", "]", ")", ":", "\n", "                ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "# Calculate Features of each training data", "\n", "self", ".", "batch_forward", "(", "inputs", ",", "feature_ext", "=", "True", ")", "\n", "\n", "feats_all", ".", "append", "(", "self", ".", "features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels_all", ".", "append", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "feats", "=", "np", ".", "concatenate", "(", "feats_all", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels_all", ")", "\n", "\n", "featmean", "=", "feats", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "def", "get_centroids", "(", "feats_", ",", "labels_", ")", ":", "\n", "            ", "centroids", "=", "[", "]", "\n", "for", "i", "in", "np", ".", "unique", "(", "labels_", ")", ":", "\n", "                ", "centroids", ".", "append", "(", "np", ".", "mean", "(", "feats_", "[", "labels_", "==", "i", "]", ",", "axis", "=", "0", ")", ")", "\n", "", "return", "np", ".", "stack", "(", "centroids", ")", "\n", "# Get unnormalized centorids", "\n", "", "un_centers", "=", "get_centroids", "(", "feats", ",", "labels", ")", "\n", "\n", "# Get l2n centorids", "\n", "l2n_feats", "=", "torch", ".", "Tensor", "(", "feats", ".", "copy", "(", ")", ")", "\n", "norm_l2n", "=", "torch", ".", "norm", "(", "l2n_feats", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "l2n_feats", "=", "l2n_feats", "/", "norm_l2n", "\n", "l2n_centers", "=", "get_centroids", "(", "l2n_feats", ".", "numpy", "(", ")", ",", "labels", ")", "\n", "\n", "# Get cl2n centorids", "\n", "cl2n_feats", "=", "torch", ".", "Tensor", "(", "feats", ".", "copy", "(", ")", ")", "\n", "cl2n_feats", "=", "cl2n_feats", "-", "torch", ".", "Tensor", "(", "featmean", ")", "\n", "norm_cl2n", "=", "torch", ".", "norm", "(", "cl2n_feats", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "cl2n_feats", "=", "cl2n_feats", "/", "norm_cl2n", "\n", "cl2n_centers", "=", "get_centroids", "(", "cl2n_feats", ".", "numpy", "(", ")", ",", "labels", ")", "\n", "\n", "return", "{", "'mean'", ":", "featmean", ",", "\n", "'uncs'", ":", "un_centers", ",", "\n", "'l2ncs'", ":", "l2n_centers", ",", "\n", "'cl2ncs'", ":", "cl2n_centers", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.reset_model": [[645, 650], ["run_networks.model.networks.items", "model.load_state_dict", "model.state_dict"], "methods", ["None"], ["", "def", "reset_model", "(", "self", ",", "model_state", ")", ":", "\n", "        ", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "weights", "=", "model_state", "[", "key", "]", "\n", "weights", "=", "{", "k", ":", "weights", "[", "k", "]", "for", "k", "in", "weights", "if", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "model", ".", "load_state_dict", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.load_model": [[651, 688], ["print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "run_networks.model.networks.items", "os.path.join.endswith", "os.path.join", "print", "print", "print", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "tuple", "os.path.join.endswith", "print", "os.path.join.endswith", "list", "list", "model_state.keys", "model.state_dict().keys", "k.startswith", "len", "model.state_dict", "len", "weights.keys", "k.startswith", "model.state_dict", "list", "list", "model.state_dict().keys", "weights.keys", "model.state_dict", "len"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update"], ["", "", "def", "load_model", "(", "self", ",", "model_dir", "=", "None", ")", ":", "\n", "        ", "model_dir", "=", "self", ".", "training_opt", "[", "'log_dir'", "]", "if", "model_dir", "is", "None", "else", "model_dir", "\n", "if", "not", "model_dir", ".", "endswith", "(", "tuple", "(", "[", "'.pth'", ",", "'.pth.tar'", "]", ")", ")", ":", "\n", "            ", "model_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'final_model_checkpoint.pth'", ")", "\n", "\n", "", "print", "(", "'Validation on the best model.'", ")", "\n", "print", "(", "'Loading model from %s'", "%", "model_dir", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", ")", "\n", "model_state", "=", "checkpoint", "[", "'state_dict_best'", "]", "if", "not", "model_dir", ".", "endswith", "(", "'.pth.tar'", ")", "else", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "self", ".", "centroids", "=", "checkpoint", "[", "'centroids'", "]", "if", "'centroids'", "in", "checkpoint", "else", "None", "\n", "\n", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "test_mode", "and", "'DotProductClassifier'", "in", "self", ".", "config", "[", "'networks'", "]", "[", "key", "]", "[", "'def_file'", "]", ":", "\n", "# Skip classifier initialization ", "\n", "                ", "print", "(", "'Skipping classifier initialization'", ")", "\n", "continue", "\n", "\n", "", "if", "not", "model_dir", ".", "endswith", "(", "'.pth.tar'", ")", ":", "\n", "                ", "weights", "=", "model_state", "[", "key", "]", "\n", "", "else", ":", "\n", "# rename moco pre-trained keys", "\n", "                ", "for", "k", "in", "list", "(", "model_state", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q up to before the embedding layer", "\n", "                    ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "                        ", "model_state", "[", "f\"module.{k[len('module.encoder_q.'):]}\"", "]", "=", "model_state", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "model_state", "[", "k", "]", "\n", "", "weights", "=", "model_state", "\n", "", "print", "(", "list", "(", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", ")", "\n", "print", "(", "f\"TOTAL: {len(list(model.state_dict().keys()))}\\n======\"", ")", "\n", "weights", "=", "{", "k", ":", "weights", "[", "k", "]", "for", "k", "in", "weights", "if", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "print", "(", "f\"Pretrained weights found (TOTAL: {len(list(weights.keys()))}):\\n{weights.keys()}\\n\"", ")", "\n", "x", "=", "model", ".", "state_dict", "(", ")", "\n", "x", ".", "update", "(", "weights", ")", "\n", "model", ".", "load_state_dict", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.save_latest": [[689, 702], ["copy.deepcopy", "copy.deepcopy", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "run_networks.model.networks[].state_dict", "run_networks.model.networks[].state_dict"], "methods", ["None"], ["", "", "def", "save_latest", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "model_weights", "=", "{", "}", "\n", "model_weights", "[", "'feat_model'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'feat_model'", "]", ".", "state_dict", "(", ")", ")", "\n", "model_weights", "[", "'classifier'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'classifier'", "]", ".", "state_dict", "(", ")", ")", "\n", "\n", "model_states", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model_weights", "\n", "}", "\n", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "\n", "'latest_model_checkpoint.pth'", ")", "\n", "torch", ".", "save", "(", "model_states", ",", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.save_model": [[703, 715], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "epoch", ",", "best_epoch", ",", "best_model_weights", ",", "best_acc", ",", "centroids", "=", "None", ")", ":", "\n", "\n", "        ", "model_states", "=", "{", "'epoch'", ":", "epoch", ",", "\n", "'best_epoch'", ":", "best_epoch", ",", "\n", "'state_dict_best'", ":", "best_model_weights", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'centroids'", ":", "centroids", "}", "\n", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "\n", "'final_model_checkpoint.pth'", ")", "\n", "\n", "torch", ".", "save", "(", "model_states", ",", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.run_networks.model.output_logits": [[716, 724], ["os.path.join", "print", "numpy.savez", "run_networks.model.total_logits.detach().cpu().numpy", "run_networks.model.total_labels.detach().cpu().numpy", "run_networks.model.total_logits.detach().cpu", "run_networks.model.total_labels.detach().cpu", "run_networks.model.total_logits.detach", "run_networks.model.total_labels.detach"], "methods", ["None"], ["", "def", "output_logits", "(", "self", ",", "openset", "=", "False", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "\n", "'logits_%s'", "%", "(", "'open'", "if", "openset", "else", "'close'", ")", ")", "\n", "print", "(", "\"Saving total logits to: %s.npz\"", "%", "filename", ")", "\n", "np", ".", "savez", "(", "filename", ",", "\n", "logits", "=", "self", ".", "total_logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "labels", "=", "self", ".", "total_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "paths", "=", "self", ".", "total_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.main.split2phase": [[26, 31], ["None"], "function", ["None"], ["def", "split2phase", "(", "split", ")", ":", "\n", "    ", "if", "split", "==", "'train'", "and", "args", ".", "val_as_train", ":", "\n", "        ", "return", "'train_val'", "\n", "", "else", ":", "\n", "        ", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.main.update": [[33, 40], ["imagenet_inat.utils.get_value", "imagenet_inat.utils.get_value"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.get_value", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.get_value"], ["", "", "def", "update", "(", "config", ",", "args", ")", ":", "\n", "# Change parameters", "\n", "    ", "config", "[", "'model_dir'", "]", "=", "get_value", "(", "config", "[", "'model_dir'", "]", ",", "args", ".", "model_dir", ")", "\n", "config", "[", "'training_opt'", "]", "[", "'batch_size'", "]", "=", "get_value", "(", "config", "[", "'training_opt'", "]", "[", "'batch_size'", "]", ",", "args", ".", "batch_size", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.logger.Logger.__init__": [[8, 19], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logdir", ")", ":", "\n", "        ", "self", ".", "logdir", "=", "logdir", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "logdir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "logdir", ")", "\n", "", "self", ".", "cfg_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logdir", ",", "'cfg.yaml'", ")", "\n", "self", ".", "acc_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logdir", ",", "'acc.csv'", ")", "\n", "self", ".", "loss_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logdir", ",", "'loss.csv'", ")", "\n", "self", ".", "ws_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logdir", ",", "'ws.h5'", ")", "\n", "self", ".", "acc_keys", "=", "None", "\n", "self", ".", "loss_keys", "=", "None", "\n", "self", ".", "logging_ws", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.logger.Logger.log_cfg": [[20, 24], ["print", "open", "yaml.dump"], "methods", ["None"], ["", "def", "log_cfg", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "print", "(", "'===> Saving cfg parameters to: '", ",", "self", ".", "cfg_file", ")", "\n", "with", "open", "(", "self", ".", "cfg_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "cfg", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.logger.Logger.log_acc": [[25, 36], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "csv.DictWriter.writerow", "open", "csv.DictWriter", "csv.DictWriter.writerow", "accs.keys"], "methods", ["None"], ["", "", "def", "log_acc", "(", "self", ",", "accs", ")", ":", "\n", "        ", "if", "self", ".", "acc_keys", "is", "None", ":", "\n", "            ", "self", ".", "acc_keys", "=", "[", "k", "for", "k", "in", "accs", ".", "keys", "(", ")", "]", "\n", "with", "open", "(", "self", ".", "acc_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "f", ",", "fieldnames", "=", "self", ".", "acc_keys", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "writer", ".", "writerow", "(", "accs", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "acc_file", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "f", ",", "fieldnames", "=", "self", ".", "acc_keys", ")", "\n", "writer", ".", "writerow", "(", "accs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.logger.Logger.log_loss": [[37, 50], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "csv.DictWriter.writerow", "open", "csv.DictWriter", "csv.DictWriter.writerow", "valid_losses.keys"], "methods", ["None"], ["", "", "", "def", "log_loss", "(", "self", ",", "losses", ")", ":", "\n", "# valid_losses = {k: v for k, v in losses.items() if v is not None}", "\n", "        ", "valid_losses", "=", "losses", "\n", "if", "self", ".", "loss_keys", "is", "None", ":", "\n", "            ", "self", ".", "loss_keys", "=", "[", "k", "for", "k", "in", "valid_losses", ".", "keys", "(", ")", "]", "\n", "with", "open", "(", "self", ".", "loss_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "f", ",", "fieldnames", "=", "self", ".", "loss_keys", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "writer", ".", "writerow", "(", "valid_losses", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "loss_file", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "f", ",", "fieldnames", "=", "self", ".", "loss_keys", ")", "\n", "writer", ".", "writerow", "(", "valid_losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.logger.Logger.log_ws": [[51, 60], ["h5py.File", "f.create_group", "ws.items", "f.create_group.create_dataset"], "methods", ["None"], ["", "", "", "def", "log_ws", "(", "self", ",", "e", ",", "ws", ")", ":", "\n", "        ", "mode", "=", "'a'", "if", "self", ".", "logging_ws", "else", "'w'", "\n", "self", ".", "logging_ws", "=", "True", "\n", "\n", "key", "=", "'Epoch{:02d}'", ".", "format", "(", "e", ")", "\n", "with", "h5py", ".", "File", "(", "self", ".", "ws_file", ",", "mode", ")", "as", "f", ":", "\n", "            ", "g", "=", "f", ".", "create_group", "(", "key", ")", "\n", "for", "k", ",", "v", "in", "ws", ".", "items", "(", ")", ":", "\n", "                ", "g", ".", "create_dataset", "(", "k", ",", "data", "=", "v", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.source_import": [[9, 15], ["importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "importlib.util.spec_from_file_location.loader.exec_module"], "function", ["None"], ["from", "sklearn", ".", "utils", ".", "multiclass", "import", "unique_labels", "\n", "\n", "\n", "def", "rotation", "(", "inputs", ")", ":", "\n", "    ", "batch", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "target", "=", "torch", ".", "Tensor", "(", "np", ".", "random", ".", "permutation", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", "*", "(", "int", "(", "batch", "/", "4", ")", "+", "1", ")", ")", ",", "device", "=", "inputs", ".", "device", ")", "[", ":", "batch", "]", "\n", "target", "=", "target", ".", "long", "(", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.batch_show": [[17, 28], ["np.clip.numpy().transpose", "numpy.array", "numpy.array", "numpy.clip", "matplotlib.figure", "matplotlib.imshow", "matplotlib.title", "np.clip.numpy"], "function", ["None"], ["image", ".", "copy_", "(", "inputs", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "        ", "image", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "torch", ".", "rot90", "(", "inputs", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "target", "[", "i", "]", ",", "[", "1", ",", "2", "]", ")", "\n", "\n", "", "return", "image", ",", "target", "\n", "\n", "\n", "", "def", "cosine_annealing", "(", "step", ",", "total_steps", ",", "lr_max", ",", "lr_min", ")", ":", "\n", "    ", "return", "lr_min", "+", "(", "lr_max", "-", "lr_min", ")", "*", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "step", "/", "total_steps", "*", "np", ".", "pi", ")", ")", "\n", "\n", "\n", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.print_write": [[30, 36], ["print", "open", "print"], "function", ["None"], ["if", "epoch", "<=", "5", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "epoch", "/", "5", "\n", "", "elif", "epoch", ">", "180", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.0001", "\n", "", "elif", "epoch", ">", "160", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.init_weights": [[38, 56], ["print", "torch.load", "torch.load", "model.load_state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict"], "function", ["None"], ["", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "\n", "", "", "class", "ImbalancedDatasetSampler", "(", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "Sampler", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset", ",", "indices", "=", "None", ",", "num_samples", "=", "None", ")", ":", "\n", "\n", "# if indices is not provided, ", "\n", "# all elements in the dataset will be considered", "\n", "        ", "self", ".", "indices", "=", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", "if", "indices", "is", "None", "else", "indices", "\n", "\n", "# if num_samples is not provided, ", "\n", "# draw `len(indices)` samples in each iteration", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "indices", ")", "if", "num_samples", "is", "None", "else", "num_samples", "\n", "\n", "# distribution of classes in the dataset ", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.shot_acc": [[58, 102], ["isinstance", "isinstance", "numpy.unique", "range", "numpy.array().astype", "numpy.array().astype", "preds.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "isinstance", "train_class_count.append", "test_class_count.append", "class_correct.append", "len", "len", "many_shot.append", "len", "median_shot.append", "len", "low_shot.append", "TypeError", "len", "len", "many_shot.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "preds.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "low_shot.append", "median_shot.append", "zip", "type", "preds.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach"], "function", ["None"], ["for", "idx", "in", "self", ".", "indices", ":", "\n", "            ", "label", "=", "self", ".", "_get_label", "(", "dataset", ",", "idx", ")", "\n", "label_to_count", "[", "label", "]", "+=", "1", "\n", "\n", "", "beta", "=", "0.9999", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "beta", ",", "label_to_count", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "beta", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "\n", "# weight for each sample", "\n", "weights", "=", "[", "per_cls_weights", "[", "self", ".", "_get_label", "(", "dataset", ",", "idx", ")", "]", "\n", "for", "idx", "in", "self", ".", "indices", "]", "\n", "self", ".", "weights", "=", "torch", ".", "DoubleTensor", "(", "weights", ")", "\n", "\n", "", "def", "_get_label", "(", "self", ",", "dataset", ",", "idx", ")", ":", "\n", "        ", "return", "dataset", ".", "targets", "[", "idx", "]", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "torch", ".", "multinomial", "(", "self", ".", "weights", ",", "self", ".", "num_samples", ",", "replacement", "=", "True", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n", "\n", "", "", "def", "calc_confusion_mat", "(", "val_loader", ",", "model", ",", "args", ",", "save_path", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "all_preds", "=", "[", "]", "\n", "all_targets", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "output", "=", "model", "(", "input", ")", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "all_preds", ".", "extend", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_targets", ".", "extend", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "cf", "=", "confusion_matrix", "(", "all_targets", ",", "all_preds", ")", ".", "astype", "(", "float", ")", "\n", "\n", "cls_cnt", "=", "cf", ".", "sum", "(", "axis", "=", "1", ")", "\n", "cls_hit", "=", "np", ".", "diag", "(", "cf", ")", "\n", "\n", "cls_acc", "=", "cls_hit", "/", "cls_cnt", "\n", "\n", "print", "(", "'Class Accuracy : '", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.weighted_shot_acc": [[104, 133], ["numpy.array().astype", "isinstance", "numpy.unique", "range", "preds.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "isinstance", "train_class_count.append", "test_class_count.append", "class_correct.append", "len", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "TypeError", "len", "ws[].sum", "many_shot.append", "preds.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "low_shot.append", "median_shot.append", "type", "preds.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach"], "function", ["None"], ["classes", "=", "[", "str", "(", "x", ")", "for", "x", "in", "args", ".", "cls_num_list", "]", "\n", "plot_confusion_matrix", "(", "all_targets", ",", "all_preds", ",", "classes", ",", "normalize", "=", "True", ",", "title", "=", "args", ".", "confusion_title", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'confusion_matrix.pdf'", ")", ")", "\n", "\n", "\n", "", "def", "plot_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "classes", ",", "\n", "normalize", "=", "False", ",", "\n", "title", "=", "None", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "if", "not", "title", ":", "\n", "        ", "if", "normalize", ":", "\n", "            ", "title", "=", "'Normalized confusion matrix'", "\n", "", "else", ":", "\n", "            ", "title", "=", "'Confusion matrix, without normalization'", "\n", "\n", "# Compute confusion matrix", "\n", "", "", "cm", "=", "confusion_matrix", "(", "y_true", ",", "y_pred", ")", "\n", "classes", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "ax", ".", "figure", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ")", "\n", "# We want to show all ticks...", "\n", "ax", ".", "set", "(", "xticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "1", "]", ")", ",", "\n", "yticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "\n", "# ... and label them with the respective list entries", "\n", "xticklabels", "=", "classes", ",", "yticklabels", "=", "classes", ")", "\n", "\n", "# Rotate the tick labels and set their alignment.", "\n", "# plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.F_measure": [[135, 153], ["range", "sklearn.metrics.f1_score", "len", "labels.detach().cpu().numpy", "preds.detach().cpu().numpy", "labels.detach().cpu", "preds.detach().cpu", "labels.detach", "preds.detach"], "function", ["None"], ["plt", ".", "xlabel", "(", "'Predicted label'", ",", "fontsize", "=", "17", ")", "\n", "plt", ".", "ylabel", "(", "'True label'", ",", "fontsize", "=", "17", ")", "\n", "\n", "# Loop over data dimensions and create text annotations.", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "norm", "=", "1000", "if", "normalize", "else", "1", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", "in", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "ax", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", "/", "norm", ",", "fmt", ")", ",", "\n", "ha", "=", "\"center\"", ",", "va", "=", "\"center\"", ",", "\n", "color", "=", "\"black\"", ")", "# color=\"white\" if cm[i, j] > thresh else \"black\")", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "return", "ax", "\n", "\n", "\n", "", "def", "prepare_folders", "(", "args", ")", ":", "\n", "    ", "folders_util", "=", "[", "args", ".", "root_log", ",", "args", ".", "root_model", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ",", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.mic_acc_cal": [[155, 164], ["isinstance", "len", "len", "len", "preds.eq().cpu().sum().float", "preds.eq().cpu().sum().float", "preds.eq().cpu().sum", "preds.eq().cpu().sum", "preds.eq().cpu", "preds.eq().cpu", "preds.eq", "preds.eq"], "function", ["None"], ["for", "folder", "in", "folders_util", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "print", "(", "f'Creating folder: {folder}'", ")", "\n", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n", "\n", "", "", "", "def", "save_checkpoint", "(", "args", ",", "state", ",", "is_best", ")", ":", "\n", "    ", "filename", "=", "f'{args.root_model}/{args.store_name}/ckpt.pth.tar'", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.weighted_mic_acc_cal": [[166, 169], ["ws[].sum", "ws.sum"], "function", ["None"], ["\n", "\n", "", "", "class", "AverageMeter", "(", "object", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.class_count": [[171, 177], ["numpy.array", "numpy.unique", "class_data_num.append", "len"], "function", ["None"], ["        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.torch2numpy": [[179, 186], ["isinstance", "x.detach().cpu().numpy", "isinstance", "tuple", "x.detach().cpu", "utils.torch2numpy", "x.detach"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.torch2numpy"], ["self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.logits2score": [[188, 193], ["torch.softmax", "F.softmax.gather", "score.squeeze().cpu().numpy.squeeze().cpu().numpy", "labels.view", "score.squeeze().cpu().numpy.squeeze().cpu", "score.squeeze().cpu().numpy.squeeze"], "function", ["None"], ["        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n", "\n", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.logits2entropy": [[195, 201], ["torch.softmax", "numpy.sum", "F.softmax.cpu().numpy", "numpy.log", "F.softmax.cpu"], "function", ["None"], ["batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.logits2CE": [[203, 209], ["torch.softmax", "F.softmax.gather", "labels.view", "scores.gather.squeeze().cpu().numpy", "numpy.log", "scores.gather.squeeze().cpu", "scores.gather.squeeze"], "function", ["None"], ["            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.get_priority": [[211, 220], ["utils.logits2score", "utils.logits2entropy", "utils.logits2CE"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.logits2score", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.logits2entropy", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.logits2CE"], []], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.imagenet_inat.utils.get_value": [[222, 227], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.layers.ModulatedAttLayer.ModulatedAttLayer.__init__": [[9, 27], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.AvgPool2d", "torch.nn.Linear", "ModulatedAttLayer.ModulatedAttLayer.init_weights"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.layers.ModulatedAttLayer.ModulatedAttLayer.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "reduction", "=", "2", ",", "mode", "=", "'embedded_gaussian'", ")", ":", "\n", "        ", "super", "(", "ModulatedAttLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "inter_channels", "=", "in_channels", "//", "reduction", "\n", "self", ".", "mode", "=", "mode", "\n", "assert", "mode", "in", "[", "'embedded_gaussian'", "]", "\n", "\n", "self", ".", "g", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "theta", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv_mask", "=", "nn", ".", "Conv2d", "(", "self", ".", "inter_channels", ",", "self", ".", "in_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc_spatial", "=", "nn", ".", "Linear", "(", "7", "*", "7", "*", "self", ".", "in_channels", ",", "7", "*", "7", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.layers.ModulatedAttLayer.ModulatedAttLayer.init_weights": [[28, 34], ["ModulatedAttLayer.ModulatedAttLayer.conv_mask.weight.data.zero_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "msra_list", "=", "[", "self", ".", "g", ",", "self", ".", "theta", ",", "self", ".", "phi", "]", "\n", "for", "m", "in", "msra_list", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "self", ".", "conv_mask", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.layers.ModulatedAttLayer.ModulatedAttLayer.embedded_gaussian": [[35, 64], ["x.size", "ModulatedAttLayer.ModulatedAttLayer.g().view", "g_x.permute.permute.permute", "ModulatedAttLayer.ModulatedAttLayer.theta().view", "theta_x.permute.permute.permute", "ModulatedAttLayer.ModulatedAttLayer.phi().view", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "map_.view.view.permute().contiguous", "map_.view.view.view", "ModulatedAttLayer.ModulatedAttLayer.conv_mask", "x.view", "ModulatedAttLayer.ModulatedAttLayer.fc_spatial", "spatial_att.expand.expand.softmax", "spatial_att.expand.expand.view().unsqueeze", "spatial_att.expand.expand.expand", "x.size", "x.size", "ModulatedAttLayer.ModulatedAttLayer.g", "ModulatedAttLayer.ModulatedAttLayer.theta", "ModulatedAttLayer.ModulatedAttLayer.phi", "map_.view.view.permute", "spatial_att.expand.expand.view"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "embedded_gaussian", "(", "self", ",", "x", ")", ":", "\n", "# embedded_gaussian cal self-attention, which may not strong enough", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "\n", "map_t_p", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "mask_t_p", "=", "F", ".", "softmax", "(", "map_t_p", ",", "dim", "=", "-", "1", ")", "\n", "\n", "map_", "=", "torch", ".", "matmul", "(", "mask_t_p", ",", "g_x", ")", "\n", "map_", "=", "map_", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "map_", "=", "map_", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "mask", "=", "self", ".", "conv_mask", "(", "map_", ")", "\n", "\n", "x_flatten", "=", "x", ".", "view", "(", "-", "1", ",", "7", "*", "7", "*", "self", ".", "in_channels", ")", "\n", "\n", "spatial_att", "=", "self", ".", "fc_spatial", "(", "x_flatten", ")", "\n", "spatial_att", "=", "spatial_att", ".", "softmax", "(", "dim", "=", "1", ")", "\n", "\n", "spatial_att", "=", "spatial_att", ".", "view", "(", "-", "1", ",", "7", ",", "7", ")", ".", "unsqueeze", "(", "1", ")", "\n", "spatial_att", "=", "spatial_att", ".", "expand", "(", "-", "1", ",", "self", ".", "in_channels", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "final", "=", "spatial_att", "*", "mask", "+", "x", "\n", "\n", "return", "final", ",", "[", "x", ",", "spatial_att", ",", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.layers.ModulatedAttLayer.ModulatedAttLayer.forward": [[65, 71], ["ModulatedAttLayer.ModulatedAttLayer.embedded_gaussian", "NotImplemented"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.layers.ModulatedAttLayer.ModulatedAttLayer.embedded_gaussian"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'embedded_gaussian'", ":", "\n", "            ", "output", ",", "feature_maps", "=", "self", ".", "embedded_gaussian", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "(", "\"The code has not been implemented.\"", ")", "\n", "", "return", "output", ",", "feature_maps", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassAwareSampler.RandomCycleIter.__init__": [[8, 13], ["list", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "data_list", "=", "list", "(", "data", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data_list", ")", "\n", "self", ".", "i", "=", "self", ".", "length", "-", "1", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassAwareSampler.RandomCycleIter.__iter__": [[14, 16], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassAwareSampler.RandomCycleIter.__next__": [[17, 25], ["random.shuffle"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "i", "+=", "1", "\n", "\n", "if", "self", ".", "i", "==", "self", ".", "length", ":", "\n", "            ", "self", ".", "i", "=", "0", "\n", "if", "not", "self", ".", "test_mode", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "data_list", ")", "\n", "\n", "", "", "return", "self", ".", "data_list", "[", "self", ".", "i", "]", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassAwareSampler.ClassAwareSampler.__init__": [[44, 53], ["len", "ClassAwareSampler.RandomCycleIter", "enumerate", "numpy.unique", "range", "list", "cls_data_list[].append", "ClassAwareSampler.RandomCycleIter", "max", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max"], ["\n", "    ", "def", "__init__", "(", "self", ",", "data_source", ",", "num_samples_cls", "=", "4", ",", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "0", "\n", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "data_source", ".", "labels", ")", ")", "\n", "self", ".", "class_iter", "=", "RandomCycleIter", "(", "range", "(", "num_classes", ")", ")", "\n", "cls_data_list", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "data_source", ".", "labels", ")", ":", "\n", "            ", "cls_data_list", "[", "label", "]", ".", "append", "(", "i", ")", "\n", "", "self", ".", "data_iter_list", "=", "[", "RandomCycleIter", "(", "x", ")", "for", "x", "in", "cls_data_list", "]", "\n", "self", ".", "num_samples", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "cls_data_list", "]", ")", "*", "len", "(", "cls_data_list", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassAwareSampler.ClassAwareSampler.__iter__": [[54, 57], ["ClassAwareSampler.class_aware_sample_generator"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassAwareSampler.class_aware_sample_generator"], ["self", ".", "num_samples_cls", "=", "num_samples_cls", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "class_aware_sample_generator", "(", "self", ".", "class_iter", ",", "self", ".", "data_iter_list", ",", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassAwareSampler.ClassAwareSampler.__len__": [[58, 60], ["None"], "methods", ["None"], ["self", ".", "num_samples", ",", "self", ".", "num_samples_cls", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassAwareSampler.class_aware_sample_generator": [[27, 40], ["next", "zip", "next"], "function", ["None"], ["\n", "", "", "def", "class_aware_sample_generator", "(", "cls_iter", ",", "data_iter_list", ",", "n", ",", "num_samples_cls", "=", "1", ")", ":", "\n", "    ", "i", "=", "0", "\n", "j", "=", "0", "\n", "while", "i", "<", "n", ":", "\n", "        ", "if", "j", ">=", "num_samples_cls", ":", "\n", "            ", "j", "=", "0", "\n", "", "if", "j", "==", "0", ":", "\n", "            ", "temp_tuple", "=", "next", "(", "zip", "(", "*", "[", "data_iter_list", "[", "next", "(", "cls_iter", ")", "]", "]", "*", "num_samples_cls", ")", ")", "\n", "yield", "temp_tuple", "[", "j", "]", "\n", "", "else", ":", "\n", "            ", "yield", "temp_tuple", "[", "j", "]", "\n", "", "i", "+=", "1", "\n", "j", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassAwareSampler.get_sampler": [[62, 64], ["None"], "function", ["None"], ["\n", "", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.RandomCycleIter.__init__": [[8, 13], ["list", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "data_list", "=", "list", "(", "data", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data_list", ")", "\n", "self", ".", "i", "=", "self", ".", "length", "-", "1", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.RandomCycleIter.__iter__": [[14, 16], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.RandomCycleIter.__next__": [[17, 26], ["random.shuffle"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "i", "+=", "1", "\n", "\n", "if", "self", ".", "i", "==", "self", ".", "length", ":", "\n", "            ", "self", ".", "i", "=", "0", "\n", "if", "not", "self", ".", "test_mode", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "data_list", ")", "\n", "\n", "", "", "return", "self", ".", "data_list", "[", "self", ".", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.__init__": [[29, 43], ["numpy.zeros", "ClassPrioritySampler.PriorityTree.initialize", "len", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.initialize"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "init_weights", ",", "fixed_weights", "=", "None", ",", "fixed_scale", "=", "1.0", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        fixed_weights: weights that wont be updated by self.update()\n        \"\"\"", "\n", "assert", "fixed_weights", "is", "None", "or", "len", "(", "fixed_weights", ")", "==", "capacity", "\n", "assert", "len", "(", "init_weights", ")", "==", "capacity", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "_capacity", "=", "capacity", "\n", "self", ".", "_tree_size", "=", "2", "*", "capacity", "-", "1", "\n", "self", ".", "fixed_scale", "=", "fixed_scale", "\n", "self", ".", "fixed_weights", "=", "np", ".", "zeros", "(", "self", ".", "_capacity", ")", "if", "fixed_weights", "is", "None", "else", "fixed_weights", "\n", "self", ".", "tree", "=", "np", ".", "zeros", "(", "self", ".", "_tree_size", ")", "\n", "self", ".", "_initialized", "=", "False", "\n", "self", ".", "initialize", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.initialize": [[44, 57], ["print", "ClassPrioritySampler.PriorityTree.update_whole", "ClassPrioritySampler.PriorityTree.fixed_weights.sum", "init_weights.sum", "init_weights.sum", "ClassPrioritySampler.PriorityTree.fixed_weights.sum", "ClassPrioritySampler.PriorityTree.fixed_weights.sum", "ClassPrioritySampler.PriorityTree.fixed_weights.sum", "init_weights.sum"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update_whole"], ["", "def", "initialize", "(", "self", ",", "init_weights", ")", ":", "\n", "        ", "\"\"\"Initialize the tree.\"\"\"", "\n", "\n", "# Rescale the fixed_weights if it is not zero", "\n", "self", ".", "fixed_scale_init", "=", "self", ".", "fixed_scale", "\n", "if", "self", ".", "fixed_weights", ".", "sum", "(", ")", ">", "0", "and", "init_weights", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "self", ".", "fixed_scale_init", "*=", "init_weights", ".", "sum", "(", ")", "/", "self", ".", "fixed_weights", ".", "sum", "(", ")", "\n", "self", ".", "fixed_weights", "*=", "self", ".", "fixed_scale", "*", "init_weights", ".", "sum", "(", ")", "/", "self", ".", "fixed_weights", ".", "sum", "(", ")", "\n", "", "print", "(", "'FixedWeights: {}'", ".", "format", "(", "self", ".", "fixed_weights", ".", "sum", "(", ")", ")", ")", "\n", "\n", "self", ".", "update_whole", "(", "init_weights", "+", "self", ".", "fixed_weights", ")", "\n", "self", ".", "_initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.reset_adaptive_weights": [[58, 60], ["ClassPrioritySampler.PriorityTree.update_whole"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update_whole"], ["", "def", "reset_adaptive_weights", "(", "self", ",", "adaptive_weights", ")", ":", "\n", "        ", "self", ".", "update_whole", "(", "self", ".", "fixed_weights", "+", "adaptive_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.reset_fixed_weights": [[61, 78], ["ClassPrioritySampler.PriorityTree.get_adaptive_weights", "fixed_weights.sum", "ClassPrioritySampler.PriorityTree.update_whole", "ClassPrioritySampler.PriorityTree.fixed_weights.sum", "ClassPrioritySampler.PriorityTree.sum"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_adaptive_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update_whole"], ["", "def", "reset_fixed_weights", "(", "self", ",", "fixed_weights", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\" Reset the manually designed weights and \n            update the whole tree accordingly.\n\n            @rescale: rescale the fixed_weights such that \n            fixed_weights.sum() = self.fixed_scale * adaptive_weights.sum()\n        \"\"\"", "\n", "adaptive_weights", "=", "self", ".", "get_adaptive_weights", "(", ")", "\n", "fixed_sum", "=", "fixed_weights", ".", "sum", "(", ")", "\n", "if", "rescale", "and", "fixed_sum", ">", "0", ":", "\n", "# Rescale fixedweight based on adaptive weights", "\n", "            ", "scale", "=", "self", ".", "fixed_scale", "*", "adaptive_weights", ".", "sum", "(", ")", "/", "fixed_sum", "\n", "", "else", ":", "\n", "# Rescale fixedweight based on previous fixedweight", "\n", "            ", "scale", "=", "self", ".", "fixed_weights", ".", "sum", "(", ")", "/", "fixed_sum", "\n", "", "self", ".", "fixed_weights", "=", "fixed_weights", "*", "scale", "\n", "self", ".", "update_whole", "(", "self", ".", "fixed_weights", "+", "adaptive_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.update_whole": [[79, 95], ["ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "numpy.power", "range"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "update_whole", "(", "self", ",", "total_weights", ")", ":", "\n", "        ", "\"\"\" Update the whole tree based on per-example sampling weights \"\"\"", "\n", "if", "self", ".", "alpha", "!=", "1", ":", "\n", "            ", "total_weights", "=", "np", ".", "power", "(", "total_weights", ",", "self", ".", "alpha", ")", "\n", "", "lefti", "=", "self", ".", "pointer_to_treeidx", "(", "0", ")", "\n", "righti", "=", "self", ".", "pointer_to_treeidx", "(", "self", ".", "capacity", "-", "1", ")", "\n", "self", ".", "tree", "[", "lefti", ":", "righti", "+", "1", "]", "=", "total_weights", "\n", "\n", "# Iteratively find a parent layer", "\n", "while", "lefti", "!=", "0", "and", "righti", "!=", "0", ":", "\n", "            ", "lefti", "=", "(", "lefti", "-", "1", ")", "//", "2", "if", "lefti", "!=", "0", "else", "0", "\n", "righti", "=", "(", "righti", "-", "1", ")", "//", "2", "if", "righti", "!=", "0", "else", "0", "\n", "\n", "# Assign paraent weights from right to left", "\n", "for", "i", "in", "range", "(", "righti", ",", "lefti", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "self", ".", "tree", "[", "i", "]", "=", "self", ".", "tree", "[", "2", "*", "i", "+", "1", "]", "+", "self", ".", "tree", "[", "2", "*", "i", "+", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.get_adaptive_weights": [[96, 102], ["ClassPrioritySampler.PriorityTree.get_total_weights", "ClassPrioritySampler.PriorityTree.get_raw_total_weights"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_total_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.get_raw_total_weights"], ["", "", "", "def", "get_adaptive_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the instance-aware weights, that are not mannually designed\"\"\"", "\n", "if", "self", ".", "alpha", "==", "1", ":", "\n", "            ", "return", "self", ".", "get_total_weights", "(", ")", "-", "self", ".", "fixed_weights", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "get_raw_total_weights", "(", ")", "-", "self", ".", "fixed_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.get_total_weights": [[103, 110], ["ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "ClassPrioritySampler.PriorityTree.pointer_to_treeidx"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "", "def", "get_total_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the per-example sampling weights\n            return shape: [capacity]\n        \"\"\"", "\n", "lefti", "=", "self", ".", "pointer_to_treeidx", "(", "0", ")", "\n", "righti", "=", "self", ".", "pointer_to_treeidx", "(", "self", ".", "capacity", "-", "1", ")", "\n", "return", "self", ".", "tree", "[", "lefti", ":", "righti", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.get_raw_total_weights": [[111, 118], ["ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "get_raw_total_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the per-example sampling weights\n            return shape: [capacity]\n        \"\"\"", "\n", "lefti", "=", "self", ".", "pointer_to_treeidx", "(", "0", ")", "\n", "righti", "=", "self", ".", "pointer_to_treeidx", "(", "self", ".", "capacity", "-", "1", ")", "\n", "return", "np", ".", "power", "(", "self", ".", "tree", "[", "lefti", ":", "righti", "+", "1", "]", ",", "1", "/", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.size": [[119, 122], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tree_size", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.capacity": [[123, 126], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "capacity", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.__len__": [[127, 129], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.pointer_to_treeidx": [[130, 133], ["int"], "methods", ["None"], ["", "def", "pointer_to_treeidx", "(", "self", ",", "pointer", ")", ":", "\n", "        ", "assert", "pointer", "<", "self", ".", "capacity", "\n", "return", "int", "(", "pointer", "+", "self", ".", "capacity", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.update": [[134, 145], ["ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "update", "(", "self", ",", "pointer", ",", "priority", ")", ":", "\n", "        ", "assert", "pointer", "<", "self", ".", "capacity", "\n", "tree_idx", "=", "self", ".", "pointer_to_treeidx", "(", "pointer", ")", "\n", "priority", "+=", "self", ".", "fixed_weights", "[", "pointer", "]", "\n", "if", "self", ".", "alpha", "!=", "1", ":", "\n", "            ", "priority", "=", "np", ".", "power", "(", "priority", ",", "self", ".", "alpha", ")", "\n", "", "delta", "=", "priority", "-", "self", ".", "tree", "[", "tree_idx", "]", "\n", "self", ".", "tree", "[", "tree_idx", "]", "=", "priority", "\n", "while", "tree_idx", "!=", "0", ":", "\n", "            ", "tree_idx", "=", "(", "tree_idx", "-", "1", ")", "//", "2", "\n", "self", ".", "tree", "[", "tree_idx", "]", "+=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.update_delta": [[146, 160], ["ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "pdb.set_trace", "numpy.power", "numpy.power", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "", "def", "update_delta", "(", "self", ",", "pointer", ",", "delta", ")", ":", "\n", "        ", "assert", "pointer", "<", "self", ".", "capacity", "\n", "tree_idx", "=", "self", ".", "pointer_to_treeidx", "(", "pointer", ")", "\n", "ratio", "=", "1", "-", "self", ".", "fixed_weights", "[", "pointer", "]", "/", "self", ".", "tree", "[", "tree_idx", "]", "\n", "# delta *= ratio", "\n", "if", "self", ".", "alpha", "!=", "1", ":", "\n", "# Update delta", "\n", "            ", "if", "self", ".", "tree", "[", "tree_idx", "]", "<", "0", "or", "np", ".", "power", "(", "self", ".", "tree", "[", "tree_idx", "]", ",", "1", "/", "self", ".", "alpha", ")", "+", "delta", "<", "0", ":", "\n", "                ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "delta", "=", "np", ".", "power", "(", "np", ".", "power", "(", "self", ".", "tree", "[", "tree_idx", "]", ",", "1", "/", "self", ".", "alpha", ")", "+", "delta", ",", "self", ".", "alpha", ")", "-", "self", ".", "tree", "[", "tree_idx", "]", "\n", "", "self", ".", "tree", "[", "tree_idx", "]", "+=", "delta", "\n", "while", "tree_idx", "!=", "0", ":", "\n", "            ", "tree_idx", "=", "(", "tree_idx", "-", "1", ")", "//", "2", "\n", "self", ".", "tree", "[", "tree_idx", "]", "+=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.get_leaf": [[161, 178], ["len"], "methods", ["None"], ["", "", "def", "get_leaf", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "assert", "self", ".", "total", ">", "0", ",", "'No priority weights set!!'", "\n", "parent", "=", "0", "\n", "while", "True", ":", "\n", "            ", "left_child", "=", "2", "*", "parent", "+", "1", "\n", "right_child", "=", "2", "*", "parent", "+", "2", "\n", "if", "left_child", ">=", "len", "(", "self", ".", "tree", ")", ":", "\n", "                ", "tgt_leaf", "=", "parent", "\n", "break", "\n", "", "if", "value", "<", "self", ".", "tree", "[", "left_child", "]", ":", "\n", "                ", "parent", "=", "left_child", "\n", "", "else", ":", "\n", "                ", "value", "-=", "self", ".", "tree", "[", "left_child", "]", "\n", "parent", "=", "right_child", "\n", "", "", "data_idx", "=", "tgt_leaf", "-", "self", ".", "capacity", "+", "1", "\n", "return", "data_idx", ",", "self", ".", "tree", "[", "tgt_leaf", "]", "# data idx, priority", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.total": [[179, 183], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "total", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "return", "self", ".", "tree", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.max": [[184, 187], ["numpy.max"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "max", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.min": [[188, 192], ["numpy.min"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.min"], ["", "@", "property", "\n", "def", "min", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "return", "np", ".", "min", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.get_weights": [[193, 201], ["ClassPrioritySampler.PriorityTree.get_total_weights", "wdict.update", "ClassPrioritySampler.PriorityTree.get_raw_total_weights"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_total_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.get_raw_total_weights"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "wdict", "=", "{", "'fixed_weights'", ":", "self", ".", "fixed_weights", ",", "\n", "'total_weights'", ":", "self", ".", "get_total_weights", "(", ")", "}", "\n", "if", "self", ".", "alpha", "!=", "1", ":", "\n", "            ", "wdict", ".", "update", "(", "{", "'raw_total_weights'", ":", "self", ".", "get_raw_total_weights", "(", ")", ",", "\n", "'alpha'", ":", "self", ".", "alpha", "}", ")", "\n", "\n", "", "return", "wdict", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.__init__": [[251, 360], ["len", "print", "numpy.array", "numpy.unique", "len", "numpy.array().astype", "enumerate", "range", "ClassPrioritySampler.ClassPrioritySampler.get_balanced_weights", "ClassPrioritySampler.ClassPrioritySampler.get_uniform_weights", "ClassPrioritySampler.ClassPrioritySampler.get_manual_weights", "ClassPrioritySampler.ClassPrioritySampler.get_cls_ratios", "ClassPrioritySampler.ClassPrioritySampler.broadcast", "numpy.zeros", "ClassPrioritySampler.PriorityTree", "ClassPrioritySampler.ClassPrioritySampler.cls_cnts.append", "ClassPrioritySampler.ClassPrioritySampler.cls_idxs[].append", "ClassPrioritySampler.RandomCycleIter", "numpy.array", "numpy.ones", "ClassPrioritySampler.ClassPrioritySampler.manual_weights.copy", "numpy.power", "numpy.linspace", "numpy.sum", "numpy.array", "range", "NotImplementedError", "numpy.concatenate", "numpy.concatenate", "NotImplementedError", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.get_uniform_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.get_cls_ratios", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.broadcast"], ["def", "__init__", "(", "self", ",", "dataset", ",", "balance_scale", "=", "1.0", ",", "fixed_scale", "=", "1.0", ",", "\n", "lam", "=", "None", ",", "epochs", "=", "90", ",", "cycle", "=", "0", ",", "nroot", "=", "None", ",", "manual_only", "=", "False", ",", "\n", "rescale", "=", "False", ",", "root_decay", "=", "None", ",", "decay_gap", "=", "30", ",", "ptype", "=", "'score'", ",", "\n", "pri_mode", "=", "'train'", ",", "momentum", "=", "0.", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "balance_scale", "=", "balance_scale", "\n", "self", ".", "fixed_scale", "=", "fixed_scale", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "lam", "=", "lam", "\n", "self", ".", "cycle", "=", "cycle", "\n", "self", ".", "nroot", "=", "nroot", "\n", "self", ".", "rescale", "=", "rescale", "\n", "self", ".", "manual_only", "=", "manual_only", "\n", "self", ".", "root_decay", "=", "root_decay", "\n", "self", ".", "decay_gap", "=", "decay_gap", "\n", "self", ".", "ptype", "=", "ptype", "\n", "self", ".", "pri_mode", "=", "pri_mode", "\n", "self", ".", "num_samples", "=", "len", "(", "dataset", ")", "\n", "self", ".", "manual_as_backend", "=", "False", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "assert", "0.", "<=", "self", ".", "momentum", "<=", "1.0", "\n", "assert", "0.", "<=", "self", ".", "alpha", "\n", "\n", "# Change the backend distribution of priority if needed", "\n", "if", "self", ".", "fixed_scale", "<", "0", ":", "\n", "            ", "self", ".", "fixed_scale", "=", "0", "\n", "self", ".", "manual_as_backend", "=", "True", "\n", "\n", "# If using root_decay, reset relevent parameters", "\n", "", "if", "self", ".", "root_decay", "in", "[", "'exp'", ",", "'linear'", ",", "'autoexp'", "]", ":", "\n", "            ", "self", ".", "lam", "=", "1", "\n", "self", ".", "manual_only", "=", "True", "\n", "self", ".", "nroot", "=", "1", "\n", "if", "self", ".", "root_decay", "==", "'autoexp'", ":", "\n", "                ", "self", ".", "decay_gap", "=", "1", "\n", "self", ".", "decay_factor", "=", "np", ".", "power", "(", "nroot", ",", "1", "/", "(", "self", ".", "epochs", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "root_decay", "is", "None", "\n", "assert", "self", ".", "nroot", "is", "None", "or", "self", ".", "nroot", ">", "1", "\n", "", "print", "(", "\"====> Decay GAP: {}\"", ".", "format", "(", "self", ".", "decay_gap", ")", ")", "\n", "\n", "# Take care of lambdas", "\n", "self", ".", "freeze", "=", "True", "\n", "if", "self", ".", "lam", "is", "None", ":", "\n", "            ", "self", ".", "freeze", "=", "False", "\n", "if", "cycle", "==", "0", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", ")", "\n", "", "elif", "cycle", "==", "1", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "concatenate", "(", "[", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "]", "*", "3", ")", "\n", "", "elif", "cycle", "==", "2", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "concatenate", "(", "[", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", ",", "\n", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "[", ":", ":", "-", "1", "]", ",", "\n", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "'cycle = {} not implemented'", ".", "format", "(", "cycle", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "lams", "=", "[", "self", ".", "lam", "]", "\n", "\n", "# Get num of samples per class", "\n", "", "self", ".", "cls_cnts", "=", "[", "]", "\n", "self", ".", "labels", "=", "labels", "=", "np", ".", "array", "(", "self", ".", "dataset", ".", "labels", ")", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "            ", "self", ".", "cls_cnts", ".", "append", "(", "np", ".", "sum", "(", "labels", "==", "l", ")", ")", "\n", "", "self", ".", "num_classes", "=", "len", "(", "self", ".", "cls_cnts", ")", "\n", "self", ".", "cnts", "=", "np", ".", "array", "(", "self", ".", "cls_cnts", ")", ".", "astype", "(", "float", ")", "\n", "\n", "# Get per-class image indexes", "\n", "self", ".", "cls_idxs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "dataset", ".", "labels", ")", ":", "\n", "            ", "self", ".", "cls_idxs", "[", "label", "]", ".", "append", "(", "i", ")", "\n", "", "self", ".", "data_iter_list", "=", "[", "RandomCycleIter", "(", "x", ")", "for", "x", "in", "self", ".", "cls_idxs", "]", "\n", "for", "ci", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "self", ".", "cls_idxs", "[", "ci", "]", "=", "np", ".", "array", "(", "self", ".", "cls_idxs", "[", "ci", "]", ")", "\n", "\n", "# Build balanced weights based on class counts ", "\n", "", "self", ".", "balanced_weights", "=", "self", ".", "get_balanced_weights", "(", "self", ".", "nroot", ")", "\n", "self", ".", "uniform_weights", "=", "self", ".", "get_uniform_weights", "(", ")", "\n", "self", ".", "manual_weights", "=", "self", ".", "get_manual_weights", "(", "self", ".", "lams", "[", "0", "]", ")", "\n", "\n", "# back_weights = self.get_balanced_weights(1.5)", "\n", "back_weights", "=", "self", ".", "uniform_weights", "\n", "\n", "# Calculate priority ratios that reshape priority into target distribution", "\n", "self", ".", "per_cls_ratios", "=", "self", ".", "get_cls_ratios", "(", "\n", "self", ".", "manual_weights", "if", "self", ".", "manual_as_backend", "else", "back_weights", ")", "\n", "self", ".", "per_example_ratios", "=", "self", ".", "broadcast", "(", "self", ".", "per_cls_ratios", ")", "\n", "\n", "# Setup priority tree", "\n", "if", "self", ".", "ptype", "==", "'score'", ":", "\n", "            ", "self", ".", "init_weight", "=", "1.", "\n", "", "elif", "self", ".", "ptype", "in", "[", "'CE'", ",", "'entropy'", "]", ":", "\n", "            ", "self", ".", "init_weight", "=", "6.9", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'ptype {} not implemented'", ".", "format", "(", "self", ".", "ptype", ")", ")", "\n", "", "if", "self", ".", "manual_only", ":", "\n", "            ", "self", ".", "init_weight", "=", "0.", "\n", "", "self", ".", "per_example_uni_weights", "=", "np", ".", "ones", "(", "self", ".", "num_samples", ")", "*", "self", ".", "init_weight", "\n", "self", ".", "per_example_velocities", "=", "np", ".", "zeros", "(", "self", ".", "num_samples", ")", "\n", "# init_priorities = np.power(self.init_weight, self.alpha) \\", "\n", "#                 * self.uniform_weights * self.per_cls_ratios", "\n", "init_priorities", "=", "self", ".", "init_weight", "*", "self", ".", "uniform_weights", "*", "self", ".", "per_cls_ratios", "\n", "self", ".", "ptree", "=", "PriorityTree", "(", "self", ".", "num_classes", ",", "init_priorities", ",", "\n", "self", ".", "manual_weights", ".", "copy", "(", ")", ",", "fixed_scale", "=", "self", ".", "fixed_scale", ",", "\n", "alpha", "=", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.get_cls_ratios": [[361, 367], ["numpy.ones_like", "ClassPrioritySampler.ClassPrioritySampler.uniform_weights.sum", "tgt_weights.sum"], "methods", ["None"], ["", "def", "get_cls_ratios", "(", "self", ",", "tgt_weights", ")", ":", "\n", "        ", "if", "tgt_weights", "is", "self", ".", "uniform_weights", ":", "\n", "            ", "return", "np", ".", "ones_like", "(", "self", ".", "uniform_weights", ")", "\n", "", "per_cls_ratios", "=", "tgt_weights", "/", "self", ".", "uniform_weights", "\n", "per_cls_ratios", "*=", "self", ".", "uniform_weights", ".", "sum", "(", ")", "/", "tgt_weights", ".", "sum", "(", ")", "\n", "return", "per_cls_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.get_cls_weights": [[368, 371], ["ClassPrioritySampler.ClassPrioritySampler.debroadcast_sum"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.debroadcast_sum"], ["", "def", "get_cls_weights", "(", "self", ")", ":", "\n", "        ", "ratioed_ws", "=", "self", ".", "per_example_uni_weights", "*", "self", ".", "per_example_ratios", "\n", "return", "self", ".", "debroadcast_sum", "(", "ratioed_ws", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.broadcast": [[372, 378], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "broadcast", "(", "self", ",", "per_cls_info", ")", ":", "\n", "        ", "per_exmaple_info", "=", "np", ".", "zeros", "(", "self", ".", "num_samples", ")", "\n", "# Braodcast per-cls info to each example ", "\n", "for", "ci", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "per_exmaple_info", "[", "self", ".", "cls_idxs", "[", "ci", "]", "]", "=", "per_cls_info", "[", "ci", "]", "\n", "", "return", "per_exmaple_info", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.debroadcast_sum": [[379, 385], ["numpy.zeros", "range", "per_example_info[].sum"], "methods", ["None"], ["", "def", "debroadcast_sum", "(", "self", ",", "per_example_info", ")", ":", "\n", "        ", "per_cls_info", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "# DeBraodcast per-example info to each cls by summation ", "\n", "for", "ci", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "per_cls_info", "[", "ci", "]", "=", "per_example_info", "[", "self", ".", "cls_idxs", "[", "ci", "]", "]", ".", "sum", "(", ")", "\n", "", "return", "per_cls_info", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.get_manual_weights": [[386, 395], ["ClassPrioritySampler.ClassPrioritySampler.balanced_weights.copy", "ClassPrioritySampler.ClassPrioritySampler.uniform_weights.copy"], "methods", ["None"], ["", "def", "get_manual_weights", "(", "self", ",", "lam", ")", ":", "\n", "# Merge balanced weights and uniform weights ", "\n", "        ", "if", "lam", "==", "1", ":", "\n", "            ", "manual_weights", "=", "self", ".", "balanced_weights", ".", "copy", "(", ")", "\n", "", "elif", "lam", "==", "0", ":", "\n", "            ", "manual_weights", "=", "self", ".", "uniform_weights", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "manual_weights", "=", "self", ".", "balanced_weights", "*", "lam", "+", "(", "1", "-", "lam", ")", "*", "self", ".", "uniform_weights", "\n", "", "return", "manual_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.get_uniform_weights": [[396, 398], ["ClassPrioritySampler.ClassPrioritySampler.cnts.copy"], "methods", ["None"], ["", "def", "get_uniform_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cnts", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.get_balanced_weights": [[399, 423], ["numpy.ones", "len", "NotImplementedError", "balanced_weights.sum", "cnts.sum", "numpy.power", "cnts.sum"], "methods", ["None"], ["", "def", "get_balanced_weights", "(", "self", ",", "nroot", ")", ":", "\n", "        ", "\"\"\" Calculate normalized generalized balanced weights \"\"\"", "\n", "\n", "cnts", "=", "self", ".", "cnts", "\n", "if", "nroot", "is", "None", ":", "\n", "# Real balanced sampling weights, each class has the same weights", "\n", "# Un-normalized !!!", "\n", "            ", "cls_ws", "=", "np", ".", "ones", "(", "len", "(", "cnts", ")", ")", "\n", "", "elif", "nroot", ">=", "1", ":", "\n", "# Generalized balanced weights", "\n", "# Un-normalized !!!", "\n", "            ", "cls_ws", "=", "cnts", "/", "cnts", ".", "sum", "(", ")", "\n", "cls_ws", "=", "np", ".", "power", "(", "cls_ws", ",", "1.", "/", "nroot", ")", "*", "cnts", ".", "sum", "(", ")", "\n", "cls_ws", "=", "cls_ws", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'root:{} not implemented'", ".", "format", "(", "nroot", ")", ")", "\n", "\n", "# Get un-normalized weights", "\n", "", "balanced_weights", "=", "cls_ws", "\n", "\n", "# Normalization and rescale", "\n", "balanced_weights", "*=", "self", ".", "num_samples", "/", "balanced_weights", ".", "sum", "(", ")", "*", "self", ".", "balance_scale", "\n", "return", "balanced_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.__iter__": [[424, 429], ["range", "ClassPrioritySampler.ClassPrioritySampler.ptree.get_leaf", "random.random", "next"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_leaf"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "num_samples", ")", ":", "\n", "            ", "w", "=", "random", ".", "random", "(", ")", "*", "self", ".", "ptree", ".", "total", "\n", "ci", ",", "pri", "=", "self", ".", "ptree", ".", "get_leaf", "(", "w", ")", "\n", "yield", "next", "(", "self", ".", "data_iter_list", "[", "ci", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.__len__": [[430, 432], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.reset_weights": [[433, 460], ["numpy.clip", "ClassPrioritySampler.ClassPrioritySampler.get_manual_weights", "ClassPrioritySampler.ClassPrioritySampler.get_balanced_weights", "ClassPrioritySampler.ClassPrioritySampler.ptree.reset_fixed_weights", "ClassPrioritySampler.ClassPrioritySampler.update_backend_distribution", "ClassPrioritySampler.ClassPrioritySampler.update_backend_distribution", "ClassPrioritySampler.ClassPrioritySampler.ptree.reset_fixed_weights", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.reset_fixed_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.update_backend_distribution", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.update_backend_distribution", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.reset_fixed_weights"], ["", "def", "reset_weights", "(", "self", ",", "epoch", ")", ":", "\n", "# If it is linear shifting ", "\n", "        ", "if", "not", "self", ".", "freeze", ":", "\n", "            ", "e", "=", "np", ".", "clip", "(", "epoch", ",", "0", ",", "self", ".", "epochs", "-", "1", ")", "\n", "self", ".", "manual_weights", "=", "self", ".", "get_manual_weights", "(", "self", ".", "lams", "[", "e", "]", ")", "\n", "# make sure 'self.fixed_scale > 0' and 'self.manual_as_backend = True' are ", "\n", "# mutually exclusive ", "\n", "if", "self", ".", "fixed_scale", ">", "0", ":", "\n", "                ", "self", ".", "ptree", ".", "reset_fixed_weights", "(", "self", ".", "manual_weights", ",", "self", ".", "rescale", ")", "\n", "", "if", "self", ".", "manual_as_backend", ":", "\n", "                ", "self", ".", "update_backend_distribution", "(", "self", ".", "manual_weights", ")", "\n", "\n", "# If it is root decay", "\n", "", "", "if", "self", ".", "root_decay", "in", "[", "'exp'", ",", "'linear'", ",", "'autoexp'", "]", "and", "epoch", "%", "self", ".", "decay_gap", "==", "0", ":", "\n", "            ", "if", "self", ".", "root_decay", "==", "'exp'", ":", "\n", "                ", "self", ".", "nroot", "*=", "2", "\n", "", "elif", "self", ".", "root_decay", "==", "'linear'", ":", "\n", "                ", "self", ".", "nroot", "+=", "1", "\n", "", "elif", "self", ".", "root_decay", "==", "'autoexp'", ":", "\n", "# self.nroot *= self.decay_factor", "\n", "                ", "self", ".", "nroot", "=", "np", ".", "power", "(", "self", ".", "decay_factor", ",", "epoch", ")", "\n", "\n", "", "bw", "=", "self", ".", "get_balanced_weights", "(", "self", ".", "nroot", ")", "\n", "if", "self", ".", "manual_as_backend", ":", "\n", "                ", "self", ".", "update_backend_distribution", "(", "bw", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "ptree", ".", "reset_fixed_weights", "(", "bw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.update_backend_distribution": [[461, 470], ["ClassPrioritySampler.ClassPrioritySampler.get_cls_ratios", "ClassPrioritySampler.ClassPrioritySampler.broadcast", "ClassPrioritySampler.ClassPrioritySampler.get_cls_weights", "ClassPrioritySampler.ClassPrioritySampler.ptree.reset_adaptive_weights"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.get_cls_ratios", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.broadcast", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.get_cls_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.reset_adaptive_weights"], ["", "", "", "def", "update_backend_distribution", "(", "self", ",", "tgt_weights", ")", ":", "\n", "# Recalculate the cls ratios based on the given target distribution", "\n", "        ", "self", ".", "per_cls_ratios", "=", "self", ".", "get_cls_ratios", "(", "tgt_weights", ")", "\n", "self", ".", "per_example_ratios", "=", "self", ".", "broadcast", "(", "self", ".", "per_cls_ratios", ")", "\n", "\n", "# Recalculate the new per-class weights based on the new ratios", "\n", "# new_backend_weights = self.init_weight * self.uniform_weights * self.per_cls_ratios", "\n", "new_cls_weights", "=", "self", ".", "get_cls_weights", "(", ")", "\n", "self", ".", "ptree", ".", "reset_adaptive_weights", "(", "new_cls_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.update_weights": [[471, 501], ["numpy.clip", "numpy.unique", "ClassPrioritySampler.ClassPrioritySampler.ptree.update_delta", "ClassPrioritySampler.ClassPrioritySampler.ptree.update", "delta.sum", "ClassPrioritySampler.ClassPrioritySampler.per_example_uni_weights[].sum"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.update_delta", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update"], ["", "def", "update_weights", "(", "self", ",", "inds", ",", "weights", ",", "labels", ")", ":", "\n", "        ", "\"\"\" Update priority weights \"\"\"", "\n", "if", "not", "self", ".", "manual_only", "and", "self", ".", "pri_mode", "==", "'train'", ":", "\n", "            ", "weights", "=", "np", ".", "clip", "(", "weights", ",", "0", ",", "self", ".", "init_weight", ")", "\n", "\n", "# Iterate over all classes in the batch", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "# Calculate per-class delta weights", "\n", "                ", "example_inds", "=", "inds", "[", "labels", "==", "l", "]", "\n", "last_weights", "=", "self", ".", "per_example_uni_weights", "[", "example_inds", "]", "\n", "# delta = np.power(weights[labels==l], self.alpha) - \\", "\n", "#         np.power(last_weights, self.alpha)", "\n", "delta", "=", "weights", "[", "labels", "==", "l", "]", "-", "last_weights", "\n", "delta", "=", "self", ".", "momentum", "*", "self", ".", "per_example_velocities", "[", "example_inds", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "delta", "\n", "\n", "# Update velocities ", "\n", "self", ".", "per_example_velocities", "[", "example_inds", "]", "=", "delta", "\n", "# Update per-example weights ", "\n", "# self.per_example_uni_weights[example_inds] = weights[labels==l]", "\n", "self", ".", "per_example_uni_weights", "[", "example_inds", "]", "+=", "delta", "\n", "\n", "# Scale the delta", "\n", "# (ie, the per-example weights both before and after update)", "\n", "delta", "*=", "self", ".", "per_example_ratios", "[", "example_inds", "]", "\n", "\n", "# Update tree", "\n", "if", "self", ".", "alpha", "==", "1", ":", "\n", "                    ", "self", ".", "ptree", ".", "update_delta", "(", "l", ",", "delta", ".", "sum", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "ptree", ".", "update", "(", "l", ",", "self", ".", "per_example_uni_weights", "[", "self", ".", "cls_idxs", "[", "l", "]", "]", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.reset_priority": [[502, 512], ["numpy.clip", "numpy.zeros", "numpy.unique", "ClassPrioritySampler.ClassPrioritySampler.ptree.reset_adaptive_weights", "len", "weights[].mean", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.PriorityTree.reset_adaptive_weights"], ["", "", "", "", "def", "reset_priority", "(", "self", ",", "weights", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "pri_mode", "==", "'valid'", ":", "\n", "            ", "assert", "len", "(", "np", ".", "unique", "(", "labels", ")", ")", "==", "self", ".", "num_classes", "\n", "weights", "=", "np", ".", "clip", "(", "weights", ",", "0", ",", "self", ".", "init_weight", ")", "\n", "cls_weights", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "for", "c", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "                ", "cls_weights", "[", "c", "]", "=", "weights", "[", "labels", "==", "c", "]", ".", "mean", "(", ")", "\n", "", "cls_weights", "*=", "self", ".", "cnts", "\n", "cls_weights", "*=", "self", ".", "per_cls_ratios", "\n", "self", ".", "ptree", ".", "reset_adaptive_weights", "(", "cls_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.ClassPrioritySampler.get_weights": [[513, 515], ["ClassPrioritySampler.ClassPrioritySampler.ptree.get_weights"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_weights"], ["", "", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ptree", ".", "get_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.ClassPrioritySampler.get_sampler": [[517, 519], ["None"], "function", ["None"], ["", "", "def", "get_sampler", "(", ")", ":", "\n", "    ", "return", "ClassPrioritySampler", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.__init__": [[7, 21], ["numpy.zeros", "MixedPrioritizedSampler.PriorityTree.initialize", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.initialize"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "fixed_weights", "=", "None", ",", "fixed_scale", "=", "1.0", ",", "\n", "init_weight", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        fixed_weights: weights that wont be updated by self.update()\n        \"\"\"", "\n", "assert", "fixed_weights", "is", "None", "or", "len", "(", "fixed_weights", ")", "==", "capacity", "\n", "self", ".", "_capacity", "=", "capacity", "\n", "self", ".", "_tree_size", "=", "2", "*", "capacity", "-", "1", "\n", "self", ".", "fixed_scale", "=", "fixed_scale", "\n", "self", ".", "fixed_weights", "=", "np", ".", "zeros", "(", "self", ".", "_capacity", ")", "if", "fixed_weights", "is", "None", "else", "fixed_weights", "\n", "self", ".", "tree", "=", "np", ".", "zeros", "(", "self", ".", "_tree_size", ")", "\n", "self", ".", "_initialized", "=", "False", "\n", "self", ".", "initialize", "(", "init_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.initialize": [[22, 33], ["print", "MixedPrioritizedSampler.PriorityTree.update_whole", "MixedPrioritizedSampler.PriorityTree.fixed_weights.sum", "MixedPrioritizedSampler.PriorityTree.fixed_weights.sum", "MixedPrioritizedSampler.PriorityTree.fixed_weights.sum"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update_whole"], ["", "def", "initialize", "(", "self", ",", "init_weight", ")", ":", "\n", "        ", "\"\"\"Initialize the tree.\"\"\"", "\n", "\n", "# Rescale the fixed_weights if it is not zero", "\n", "if", "self", ".", "fixed_weights", ".", "sum", "(", ")", ">", "0", "and", "init_weight", ">", "0", ":", "\n", "            ", "self", ".", "fixed_weights", "*=", "self", ".", "fixed_scale", "*", "init_weight", "*", "self", ".", "capacity", "/", "self", ".", "fixed_weights", ".", "sum", "(", ")", "\n", "", "print", "(", "'FixedWeights: {}'", ".", "format", "(", "self", ".", "fixed_weights", ".", "sum", "(", ")", ")", ")", "\n", "\n", "self", ".", "update_whole", "(", "init_weight", "+", "self", ".", "fixed_weights", ")", "\n", "self", ".", "_initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.reset_fixed_weights": [[34, 50], ["MixedPrioritizedSampler.PriorityTree.get_adaptive_weights", "fixed_weights.sum", "MixedPrioritizedSampler.PriorityTree.update_whole", "MixedPrioritizedSampler.PriorityTree.sum"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_adaptive_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update_whole"], ["", "def", "reset_fixed_weights", "(", "self", ",", "fixed_weights", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\" Reset the manually designed weights and \n            update the whole tree accordingly.\n\n            @rescale: rescale the fixed_weights such that \n            fixed_weights.sum() = self.fixed_scale * adaptive_weights.sum()\n        \"\"\"", "\n", "\n", "adaptive_weights", "=", "self", ".", "get_adaptive_weights", "(", ")", "\n", "fixed_sum", "=", "fixed_weights", ".", "sum", "(", ")", "\n", "if", "rescale", "and", "fixed_sum", ">", "0", ":", "\n", "            ", "scale", "=", "self", ".", "fixed_scale", "*", "adaptive_weights", ".", "sum", "(", ")", "/", "fixed_sum", "\n", "self", ".", "fixed_weights", "=", "fixed_weights", "*", "scale", "\n", "", "else", ":", "\n", "            ", "self", ".", "fixed_weights", "=", "fixed_weights", "\n", "", "self", ".", "update_whole", "(", "self", ".", "fixed_weights", "+", "adaptive_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update_whole": [[51, 65], ["MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "range"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "update_whole", "(", "self", ",", "total_weights", ")", ":", "\n", "        ", "\"\"\" Update the whole tree based on per-example sampling weights \"\"\"", "\n", "lefti", "=", "self", ".", "pointer_to_treeidx", "(", "0", ")", "\n", "righti", "=", "self", ".", "pointer_to_treeidx", "(", "self", ".", "capacity", "-", "1", ")", "\n", "self", ".", "tree", "[", "lefti", ":", "righti", "+", "1", "]", "=", "total_weights", "\n", "\n", "# Iteratively find a parent layer", "\n", "while", "lefti", "!=", "0", "and", "righti", "!=", "0", ":", "\n", "            ", "lefti", "=", "(", "lefti", "-", "1", ")", "//", "2", "if", "lefti", "!=", "0", "else", "0", "\n", "righti", "=", "(", "righti", "-", "1", ")", "//", "2", "if", "righti", "!=", "0", "else", "0", "\n", "\n", "# Assign paraent weights from right to left", "\n", "for", "i", "in", "range", "(", "righti", ",", "lefti", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "self", ".", "tree", "[", "i", "]", "=", "self", ".", "tree", "[", "2", "*", "i", "+", "1", "]", "+", "self", ".", "tree", "[", "2", "*", "i", "+", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_adaptive_weights": [[66, 69], ["MixedPrioritizedSampler.PriorityTree.get_total_weights"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_total_weights"], ["", "", "", "def", "get_adaptive_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the instance-aware weights, that are not mannually designed\"\"\"", "\n", "return", "self", ".", "get_total_weights", "(", ")", "-", "self", ".", "fixed_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_total_weights": [[70, 77], ["MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "get_total_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the per-example sampling weights\n            return shape: [capacity]\n        \"\"\"", "\n", "lefti", "=", "self", ".", "pointer_to_treeidx", "(", "0", ")", "\n", "righti", "=", "self", ".", "pointer_to_treeidx", "(", "self", ".", "capacity", "-", "1", ")", "\n", "return", "self", ".", "tree", "[", "lefti", ":", "righti", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size": [[78, 81], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tree_size", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.capacity": [[82, 85], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "capacity", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.__len__": [[86, 88], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx": [[89, 92], ["int"], "methods", ["None"], ["", "def", "pointer_to_treeidx", "(", "self", ",", "pointer", ")", ":", "\n", "        ", "assert", "pointer", "<", "self", ".", "capacity", "\n", "return", "int", "(", "pointer", "+", "self", ".", "capacity", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update": [[93, 102], ["MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "update", "(", "self", ",", "pointer", ",", "priority", ")", ":", "\n", "        ", "assert", "pointer", "<", "self", ".", "capacity", "\n", "tree_idx", "=", "self", ".", "pointer_to_treeidx", "(", "pointer", ")", "\n", "priority", "+=", "self", ".", "fixed_weights", "[", "pointer", "]", "\n", "delta", "=", "priority", "-", "self", ".", "tree", "[", "tree_idx", "]", "\n", "self", ".", "tree", "[", "tree_idx", "]", "=", "priority", "\n", "while", "tree_idx", "!=", "0", ":", "\n", "            ", "tree_idx", "=", "(", "tree_idx", "-", "1", ")", "//", "2", "\n", "self", ".", "tree", "[", "tree_idx", "]", "+=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_leaf": [[103, 120], ["len"], "methods", ["None"], ["", "", "def", "get_leaf", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "assert", "self", ".", "total", ">", "0", ",", "'No priority weights setted!!'", "\n", "parent", "=", "0", "\n", "while", "True", ":", "\n", "            ", "left_child", "=", "2", "*", "parent", "+", "1", "\n", "right_child", "=", "2", "*", "parent", "+", "2", "\n", "if", "left_child", ">=", "len", "(", "self", ".", "tree", ")", ":", "\n", "                ", "tgt_leaf", "=", "parent", "\n", "break", "\n", "", "if", "value", "<", "self", ".", "tree", "[", "left_child", "]", ":", "\n", "                ", "parent", "=", "left_child", "\n", "", "else", ":", "\n", "                ", "value", "-=", "self", ".", "tree", "[", "left_child", "]", "\n", "parent", "=", "right_child", "\n", "", "", "data_idx", "=", "tgt_leaf", "-", "self", ".", "capacity", "+", "1", "\n", "return", "data_idx", ",", "self", ".", "tree", "[", "tgt_leaf", "]", "# data idx, priority", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.total": [[121, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "total", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "return", "self", ".", "tree", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max": [[126, 129], ["numpy.max"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "max", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.min": [[130, 134], ["numpy.min"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.min"], ["", "@", "property", "\n", "def", "min", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "return", "np", ".", "min", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_weights": [[135, 138], ["MixedPrioritizedSampler.PriorityTree.get_total_weights"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_total_weights"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "{", "'fixed_weights'", ":", "self", ".", "fixed_weights", ",", "\n", "'total_weights'", ":", "self", ".", "get_total_weights", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.__init__": [[186, 270], ["len", "print", "numpy.array", "numpy.unique", "len", "numpy.array().astype", "enumerate", "range", "MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights", "numpy.power", "MixedPrioritizedSampler.PriorityTree", "MixedPrioritizedSampler.MixedPrioritizedSampler.cls_cnts.append", "MixedPrioritizedSampler.MixedPrioritizedSampler.cls_idxs[].append", "numpy.array", "numpy.power", "numpy.linspace", "numpy.sum", "numpy.array", "range", "NotImplementedError", "numpy.concatenate", "numpy.concatenate", "NotImplementedError", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights"], ["def", "__init__", "(", "self", ",", "dataset", ",", "balance_scale", "=", "1.0", ",", "fixed_scale", "=", "1.0", ",", "\n", "lam", "=", "None", ",", "epochs", "=", "90", ",", "cycle", "=", "0", ",", "nroot", "=", "None", ",", "manual_only", "=", "False", ",", "\n", "rescale", "=", "False", ",", "root_decay", "=", "None", ",", "decay_gap", "=", "30", ",", "ptype", "=", "'score'", ",", "\n", "alpha", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "balance_scale", "=", "balance_scale", "\n", "self", ".", "fixed_scale", "=", "fixed_scale", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "lam", "=", "lam", "\n", "self", ".", "cycle", "=", "cycle", "\n", "self", ".", "nroot", "=", "nroot", "\n", "self", ".", "rescale", "=", "rescale", "\n", "self", ".", "manual_only", "=", "manual_only", "\n", "self", ".", "root_decay", "=", "root_decay", "\n", "self", ".", "decay_gap", "=", "decay_gap", "\n", "self", ".", "ptype", "=", "ptype", "\n", "self", ".", "num_samples", "=", "len", "(", "dataset", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "# If using root_decay, reset relevent parameters", "\n", "if", "self", ".", "root_decay", "in", "[", "'exp'", ",", "'linear'", ",", "'autoexp'", "]", ":", "\n", "            ", "self", ".", "lam", "=", "1", "\n", "self", ".", "manual_only", "=", "True", "\n", "self", ".", "nroot", "=", "1", "\n", "if", "self", ".", "root_decay", "==", "'autoexp'", ":", "\n", "                ", "self", ".", "decay_gap", "=", "1", "\n", "self", ".", "decay_factor", "=", "np", ".", "power", "(", "nroot", ",", "1", "/", "(", "self", ".", "epochs", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "root_decay", "is", "None", "\n", "assert", "self", ".", "nroot", "is", "None", "or", "self", ".", "nroot", ">=", "2", "\n", "", "print", "(", "\"====> Decay GAP: {}\"", ".", "format", "(", "self", ".", "decay_gap", ")", ")", "\n", "\n", "# Take care of lambdas", "\n", "if", "self", ".", "lam", "is", "None", ":", "\n", "            ", "self", ".", "freeze", "=", "False", "\n", "if", "cycle", "==", "0", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", ")", "\n", "", "elif", "cycle", "==", "1", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "concatenate", "(", "[", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "]", "*", "3", ")", "\n", "", "elif", "cycle", "==", "2", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "concatenate", "(", "[", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", ",", "\n", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "[", ":", ":", "-", "1", "]", ",", "\n", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "'cycle = {} not implemented'", ".", "format", "(", "cycle", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "lams", "=", "[", "self", ".", "lam", "]", "\n", "self", ".", "freeze", "=", "True", "\n", "\n", "# Get num of samples per class", "\n", "", "self", ".", "cls_cnts", "=", "[", "]", "\n", "self", ".", "labels", "=", "labels", "=", "np", ".", "array", "(", "self", ".", "dataset", ".", "labels", ")", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "            ", "self", ".", "cls_cnts", ".", "append", "(", "np", ".", "sum", "(", "labels", "==", "l", ")", ")", "\n", "", "self", ".", "num_classes", "=", "len", "(", "self", ".", "cls_cnts", ")", "\n", "self", ".", "cnts", "=", "np", ".", "array", "(", "self", ".", "cls_cnts", ")", ".", "astype", "(", "float", ")", "\n", "\n", "# Get per-class image indexes", "\n", "self", ".", "cls_idxs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "dataset", ".", "labels", ")", ":", "\n", "            ", "self", ".", "cls_idxs", "[", "label", "]", ".", "append", "(", "i", ")", "\n", "", "for", "ci", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "self", ".", "cls_idxs", "[", "ci", "]", "=", "np", ".", "array", "(", "self", ".", "cls_idxs", "[", "ci", "]", ")", "\n", "\n", "# Build balanced weights based on class counts ", "\n", "", "self", ".", "balanced_weights", "=", "self", ".", "get_balanced_weights", "(", "self", ".", "nroot", ")", "\n", "self", ".", "manual_weights", "=", "self", ".", "get_manual_weights", "(", "self", ".", "lams", "[", "0", "]", ")", "\n", "\n", "# Setup priority tree", "\n", "if", "self", ".", "ptype", "==", "'score'", ":", "\n", "            ", "self", ".", "init_weight", "=", "1.", "\n", "", "elif", "self", ".", "ptype", "in", "[", "'CE'", ",", "'entropy'", "]", ":", "\n", "            ", "self", ".", "init_weight", "=", "6.9", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'ptype {} not implemented'", ".", "format", "(", "self", ".", "ptype", ")", ")", "\n", "", "if", "self", ".", "manual_only", ":", "\n", "            ", "self", ".", "init_weight", "=", "0.", "\n", "", "self", ".", "init_weight", "=", "np", ".", "power", "(", "self", ".", "init_weight", ",", "self", ".", "alpha", ")", "\n", "self", ".", "ptree", "=", "PriorityTree", "(", "self", ".", "num_samples", ",", "self", ".", "manual_weights", ",", "\n", "fixed_scale", "=", "self", ".", "fixed_scale", ",", "\n", "init_weight", "=", "self", ".", "init_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights": [[271, 280], ["numpy.ones", "len"], "methods", ["None"], ["", "def", "get_manual_weights", "(", "self", ",", "lam", ")", ":", "\n", "# Merge balanced weights and uniform weights ", "\n", "        ", "if", "lam", "==", "1", ":", "\n", "            ", "manual_weights", "=", "self", ".", "balanced_weights", "\n", "", "elif", "lam", "==", "0", ":", "\n", "            ", "manual_weights", "=", "np", ".", "ones", "(", "len", "(", "self", ".", "balanced_weights", ")", ")", "\n", "", "else", ":", "\n", "            ", "manual_weights", "=", "self", ".", "balanced_weights", "*", "lam", "+", "(", "1", "-", "lam", ")", "\n", "", "return", "manual_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights": [[281, 305], ["numpy.zeros", "range", "cnts.min", "NotImplementedError", "numpy.zeros.sum", "cnts.sum", "numpy.power", "cnts.sum"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.min"], ["", "def", "get_balanced_weights", "(", "self", ",", "nroot", ")", ":", "\n", "        ", "\"\"\" Calculate normalized generalized balanced weights \"\"\"", "\n", "\n", "cnts", "=", "self", ".", "cnts", "\n", "if", "nroot", "is", "None", ":", "\n", "# Real balanced sampling weights", "\n", "            ", "cls_ws", "=", "cnts", ".", "min", "(", ")", "/", "cnts", "\n", "", "elif", "nroot", ">=", "1", ":", "\n", "# Generalized balanced weights", "\n", "            ", "cls_ws", "=", "cnts", "/", "cnts", ".", "sum", "(", ")", "\n", "cls_ws", "=", "np", ".", "power", "(", "cls_ws", ",", "1.", "/", "nroot", ")", "*", "cnts", ".", "sum", "(", ")", "\n", "cls_ws", "=", "cls_ws", "/", "cnts", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'root:{} not implemented'", ".", "format", "(", "nroot", ")", ")", "\n", "\n", "# Get un-normalized weights", "\n", "", "balanced_weights", "=", "np", ".", "zeros", "(", "self", ".", "num_samples", ")", "\n", "for", "ci", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "balanced_weights", "[", "self", ".", "cls_idxs", "[", "ci", "]", "]", "=", "cls_ws", "[", "ci", "]", "\n", "\n", "# Normalization and rescale", "\n", "", "balanced_weights", "*=", "self", ".", "num_samples", "/", "balanced_weights", ".", "sum", "(", ")", "*", "self", ".", "balance_scale", "\n", "return", "balanced_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.__iter__": [[306, 311], ["range", "MixedPrioritizedSampler.MixedPrioritizedSampler.ptree.get_leaf", "random.random"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.get_leaf"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "num_samples", ")", ":", "\n", "            ", "w", "=", "random", ".", "random", "(", ")", "*", "self", ".", "ptree", ".", "total", "\n", "i", ",", "pri", "=", "self", ".", "ptree", ".", "get_leaf", "(", "w", ")", "\n", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.__len__": [[312, 314], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.reset_weights": [[315, 337], ["MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights", "MixedPrioritizedSampler.MixedPrioritizedSampler.ptree.reset_fixed_weights", "MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "MixedPrioritizedSampler.MixedPrioritizedSampler.ptree.reset_fixed_weights", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.reset_fixed_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.reset_fixed_weights"], ["", "def", "reset_weights", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "not", "self", ".", "freeze", "and", "self", ".", "fixed_scale", ">", "0", ":", "\n", "            ", "if", "epoch", ">=", "self", ".", "epochs", ":", "\n", "                ", "e", "=", "self", ".", "epochs", "-", "1", "\n", "", "elif", "epoch", "<", "1", ":", "\n", "                ", "e", "=", "0", "\n", "", "else", ":", "\n", "                ", "e", "=", "epoch", "\n", "", "self", ".", "manual_weights", "=", "self", ".", "get_manual_weights", "(", "self", ".", "lams", "[", "e", "]", ")", "\n", "self", ".", "ptree", ".", "reset_fixed_weights", "(", "self", ".", "manual_weights", ",", "self", ".", "rescale", ")", "\n", "\n", "", "if", "self", ".", "root_decay", "in", "[", "'exp'", ",", "'linear'", ",", "'autoexp'", "]", "and", "epoch", "%", "self", ".", "decay_gap", "==", "0", ":", "\n", "            ", "if", "self", ".", "root_decay", "==", "'exp'", ":", "\n", "                ", "self", ".", "nroot", "*=", "2", "\n", "", "elif", "self", ".", "root_decay", "==", "'linear'", ":", "\n", "                ", "self", ".", "nroot", "+=", "1", "\n", "", "elif", "self", ".", "root_decay", "==", "'autoexp'", ":", "\n", "# self.nroot *= self.decay_factor", "\n", "                ", "self", ".", "nroot", "=", "np", ".", "power", "(", "self", ".", "decay_factor", ",", "epoch", ")", "\n", "\n", "", "bw", "=", "self", ".", "get_balanced_weights", "(", "self", ".", "nroot", ")", "\n", "self", ".", "ptree", ".", "reset_fixed_weights", "(", "bw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.update_weights": [[338, 345], ["numpy.clip", "numpy.power", "zip", "MixedPrioritizedSampler.MixedPrioritizedSampler.ptree.update"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.update"], ["", "", "def", "update_weights", "(", "self", ",", "inds", ",", "weights", ")", ":", "\n", "        ", "\"\"\" Update priority weights \"\"\"", "\n", "if", "not", "self", ".", "manual_only", ":", "\n", "            ", "weights", "=", "np", ".", "clip", "(", "weights", ",", "0", ",", "self", ".", "init_weight", ")", "\n", "weights", "=", "np", ".", "power", "(", "weights", ",", "self", ".", "alpha", ")", "\n", "for", "i", ",", "w", "in", "zip", "(", "inds", ",", "weights", ")", ":", "\n", "                ", "self", ".", "ptree", ".", "update", "(", "i", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_weights": [[346, 348], ["MixedPrioritizedSampler.MixedPrioritizedSampler.ptree.get_weights"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_weights"], ["", "", "", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ptree", ".", "get_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.get_sampler": [[350, 352], ["None"], "function", ["None"], ["", "", "def", "get_sampler", "(", ")", ":", "\n", "    ", "return", "MixedPrioritizedSampler", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.dataloader.LT_Dataset.__init__": [[53, 61], ["open", "dataloader.LT_Dataset.img_path.append", "dataloader.LT_Dataset.labels.append", "os.path.join", "int", "line.split", "line.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "txt", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "img_path", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "with", "open", "(", "txt", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "self", ".", "img_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "line", ".", "split", "(", ")", "[", "0", "]", ")", ")", "\n", "self", ".", "labels", ".", "append", "(", "int", "(", "line", ".", "split", "(", ")", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.dataloader.LT_Dataset.__len__": [[62, 64], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.dataloader.LT_Dataset.__getitem__": [[65, 77], ["open", "PIL.Image.open().convert", "dataloader.LT_Dataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "path", "=", "self", ".", "img_path", "[", "index", "]", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "sample", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", ",", "label", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.dataloader.get_data_transform": [[21, 49], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "get_data_transform", "(", "split", ",", "rgb_mean", ",", "rbg_std", ",", "key", "=", "'default'", ")", ":", "\n", "    ", "data_transforms", "=", "{", "\n", "'train'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", "if", "key", "==", "'iNaturalist18'", "else", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", ",", "\n", "'val'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", ",", "\n", "'test'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", "\n", "}", "\n", "return", "data_transforms", "[", "split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.dataloader.load_data": [[79, 124], ["print", "print", "dataloader.LT_Dataset", "print", "print", "dataloader.get_data_transform", "dataloader.get_data_transform", "len", "print", "dataloader.LT_Dataset", "torch.utils.data.ConcatDataset", "print", "print", "torch.utils.data.DataLoader", "print", "print", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.dataloader.get_data_transform", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.dataloader.get_data_transform"], ["", "", "def", "load_data", "(", "data_root", ",", "dataset", ",", "phase", ",", "batch_size", ",", "sampler_dic", "=", "None", ",", "num_workers", "=", "4", ",", "test_open", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "\n", "    ", "if", "phase", "==", "'train_plain'", ":", "\n", "        ", "txt_split", "=", "'train'", "\n", "", "elif", "phase", "==", "'train_val'", ":", "\n", "        ", "txt_split", "=", "'val'", "\n", "phase", "=", "'train'", "\n", "", "else", ":", "\n", "        ", "txt_split", "=", "phase", "\n", "", "txt", "=", "'./imagenet_inat/data/%s/%s_%s.txt'", "%", "(", "dataset", ",", "dataset", ",", "txt_split", ")", "\n", "\n", "print", "(", "'Loading data from %s'", "%", "txt", ")", "\n", "\n", "if", "dataset", "==", "'iNaturalist18'", ":", "\n", "        ", "print", "(", "'===> Loading iNaturalist18 statistics'", ")", "\n", "key", "=", "'iNaturalist18'", "\n", "", "else", ":", "\n", "        ", "key", "=", "'default'", "\n", "", "rgb_mean", ",", "rgb_std", "=", "RGB_statistics", "[", "key", "]", "[", "'mean'", "]", ",", "RGB_statistics", "[", "key", "]", "[", "'std'", "]", "\n", "\n", "if", "phase", "not", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "        ", "transform", "=", "get_data_transform", "(", "'test'", ",", "rgb_mean", ",", "rgb_std", ",", "key", ")", "\n", "", "else", ":", "\n", "        ", "transform", "=", "get_data_transform", "(", "phase", ",", "rgb_mean", ",", "rgb_std", ",", "key", ")", "\n", "\n", "", "print", "(", "'Use data transformation:'", ",", "transform", ")", "\n", "\n", "set_", "=", "LT_Dataset", "(", "data_root", ",", "txt", ",", "transform", ")", "\n", "print", "(", "len", "(", "set_", ")", ")", "\n", "if", "phase", "==", "'test'", "and", "test_open", ":", "\n", "        ", "open_txt", "=", "'./data/%s/%s_open.txt'", "%", "(", "dataset", ",", "dataset", ")", "\n", "print", "(", "'Testing with opensets from %s'", "%", "open_txt", ")", "\n", "open_set_", "=", "LT_Dataset", "(", "'./data/%s/%s_open'", "%", "(", "dataset", ",", "dataset", ")", ",", "open_txt", ",", "transform", ")", "\n", "set_", "=", "ConcatDataset", "(", "[", "set_", ",", "open_set_", "]", ")", "\n", "\n", "", "if", "sampler_dic", "and", "phase", "==", "'train'", ":", "\n", "        ", "print", "(", "'Using sampler: '", ",", "sampler_dic", "[", "'sampler'", "]", ")", "\n", "# print('Sample %s samples per-class.' % sampler_dic['num_samples_cls'])", "\n", "print", "(", "'Sampler parameters: '", ",", "sampler_dic", "[", "'params'", "]", ")", "\n", "return", "DataLoader", "(", "dataset", "=", "set_", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "sampler", "=", "sampler_dic", "[", "'sampler'", "]", "(", "set_", ",", "**", "sampler_dic", "[", "'params'", "]", ")", ",", "num_workers", "=", "num_workers", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'No sampler.'", ")", "\n", "print", "(", "'Shuffle is %s.'", "%", "shuffle", ")", "\n", "return", "DataLoader", "(", "dataset", "=", "set_", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.SoftmaxLoss.create_loss": [[4, 7], ["print", "torch.CrossEntropyLoss"], "function", ["None"], ["def", "create_loss", "(", ")", ":", "\n", "    ", "print", "(", "'Loading Softmax Loss.'", ")", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__": [[8, 15], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "feat_dim", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiscCentroidsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "centroids", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_classes", ",", "feat_dim", ")", ")", "\n", "self", ".", "disccentroidslossfunc", "=", "DiscCentroidsLossFunc", ".", "apply", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLoss.forward": [[16, 49], ["feat.view.view.size", "feat.view.view.view", "feat.view.view.new_empty().fill_", "DiscCentroidsLoss.DiscCentroidsLoss.disccentroidslossfunc().squeeze", "distmat.addmm_", "torch.arange().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "label.unsqueeze().expand", "label.unsqueeze().expand.eq", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "feat.view.view.size", "ValueError", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "DiscCentroidsLoss.DiscCentroidsLoss.centroids.t", "torch.arange().long().cuda.expand", "torch.arange().long().cuda.expand", "feat.view.view.new_empty", "DiscCentroidsLoss.DiscCentroidsLoss.disccentroidslossfunc", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "label.unsqueeze", "feat.view.view.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "distmat_neg.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "forward", "(", "self", ",", "feat", ",", "label", ")", ":", "\n", "        ", "batch_size", "=", "feat", ".", "size", "(", "0", ")", "\n", "\n", "# calculate attracting loss", "\n", "\n", "feat", "=", "feat", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "# To check the dim of centroids and features", "\n", "if", "feat", ".", "size", "(", "1", ")", "!=", "self", ".", "feat_dim", ":", "\n", "            ", "raise", "ValueError", "(", "\"Center's dim: {0} should be equal to input feature's \\\n                            dim: {1}\"", ".", "format", "(", "self", ".", "feat_dim", ",", "feat", ".", "size", "(", "1", ")", ")", ")", "\n", "", "batch_size_tensor", "=", "feat", ".", "new_empty", "(", "1", ")", ".", "fill_", "(", "batch_size", "if", "self", ".", "size_average", "else", "1", ")", "\n", "loss_attract", "=", "self", ".", "disccentroidslossfunc", "(", "feat", ",", "label", ",", "self", ".", "centroids", ",", "batch_size_tensor", ")", ".", "squeeze", "(", ")", "\n", "\n", "# calculate repelling loss", "\n", "\n", "distmat", "=", "torch", ".", "pow", "(", "feat", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", "+", "torch", ".", "pow", "(", "self", ".", "centroids", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "self", ".", "num_classes", ",", "batch_size", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "feat", ",", "self", ".", "centroids", ".", "t", "(", ")", ")", "\n", "\n", "classes", "=", "torch", ".", "arange", "(", "self", ".", "num_classes", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "labels_expand", "=", "label", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", "\n", "mask", "=", "labels_expand", ".", "eq", "(", "classes", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", ")", "\n", "\n", "distmat_neg", "=", "distmat", "\n", "distmat_neg", "[", "mask", "]", "=", "0.0", "\n", "# margin = 50.0", "\n", "margin", "=", "10.0", "\n", "loss_repel", "=", "torch", ".", "clamp", "(", "margin", "-", "distmat_neg", ".", "sum", "(", ")", "/", "(", "batch_size", "*", "self", ".", "num_classes", ")", ",", "0.0", ",", "1e6", ")", "\n", "\n", "# loss = loss_attract + 0.05 * loss_repel", "\n", "loss", "=", "loss_attract", "+", "0.01", "*", "loss_repel", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLossFunc.forward": [[52, 57], ["ctx.save_for_backward", "centroids.index_select", "label.long"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "feature", ",", "label", ",", "centroids", ",", "batch_size", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "feature", ",", "label", ",", "centroids", ",", "batch_size", ")", "\n", "centroids_batch", "=", "centroids", ".", "index_select", "(", "0", ",", "label", ".", "long", "(", ")", ")", "\n", "return", "(", "feature", "-", "centroids_batch", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "/", "2.0", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.DiscCentroidsLossFunc.backward": [[58, 72], ["centroids.index_select", "centroids.new_ones", "centroids.new_ones", "centroids.new_zeros", "counts.scatter_add_.scatter_add_.scatter_add_", "centroids.new_zeros.scatter_add_", "label.long", "centroids.size", "label.size", "centroids.size", "label.long", "label.unsqueeze().expand().long", "counts.scatter_add_.scatter_add_.view", "label.unsqueeze().expand", "feature.size", "label.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "feature", ",", "label", ",", "centroids", ",", "batch_size", "=", "ctx", ".", "saved_tensors", "\n", "centroids_batch", "=", "centroids", ".", "index_select", "(", "0", ",", "label", ".", "long", "(", ")", ")", "\n", "diff", "=", "centroids_batch", "-", "feature", "\n", "# init every iteration", "\n", "counts", "=", "centroids", ".", "new_ones", "(", "centroids", ".", "size", "(", "0", ")", ")", "\n", "ones", "=", "centroids", ".", "new_ones", "(", "label", ".", "size", "(", "0", ")", ")", "\n", "grad_centroids", "=", "centroids", ".", "new_zeros", "(", "centroids", ".", "size", "(", ")", ")", "\n", "\n", "counts", "=", "counts", ".", "scatter_add_", "(", "0", ",", "label", ".", "long", "(", ")", ",", "ones", ")", "\n", "grad_centroids", ".", "scatter_add_", "(", "0", ",", "label", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "feature", ".", "size", "(", ")", ")", ".", "long", "(", ")", ",", "diff", ")", "\n", "grad_centroids", "=", "grad_centroids", "/", "counts", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "-", "grad_output", "*", "diff", "/", "batch_size", ",", "None", ",", "grad_centroids", "/", "batch_size", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_imbalanced-semi-self.loss.DiscCentroidsLoss.create_loss": [[74, 77], ["print", "DiscCentroidsLoss.DiscCentroidsLoss"], "function", ["None"], ["", "", "def", "create_loss", "(", "feat_dim", "=", "512", ",", "num_classes", "=", "1000", ")", ":", "\n", "    ", "print", "(", "'Loading Discriminative Centroids Loss.'", ")", "\n", "return", "DiscCentroidsLoss", "(", "num_classes", ",", "feat_dim", ")", "\n", "", ""]]}