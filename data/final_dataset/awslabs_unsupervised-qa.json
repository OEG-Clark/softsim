{"home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.tokenize_and_ner_inputs.main": [[10, 44], ["timy.timer", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.exists", "os.mkdir", "contextlib.ExitStack", "stack.enter_context", "sc.textFile", "print", "stack.enter_context.flush", "distant_supervision.input_parser.InputParser", "distant_supervision.input_parser.InputParser.tokenize_and_perform_rollup", "input_parser.tokenize_and_perform_rollup.map().saveAsTextFile", "logzero.logger.info", "open", "os.path.join", "sc.textFile.count", "input_parser.tokenize_and_perform_rollup.map", "x.jsonify"], "function", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.input_parser.InputParser.tokenize_and_perform_rollup", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.DsDatum.jsonify"], ["@", "timy", ".", "timer", "(", ")", "\n", "def", "main", "(", "sc", ")", ":", "\n", "    ", "argp", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "argp", ".", "add_argument", "(", "'--corpus'", ",", "help", "=", "'input corpus (*.raw)'", ",", "required", "=", "True", ")", "\n", "argp", ".", "add_argument", "(", "'--output-dir'", ",", "default", "=", "\"output/\"", ",", "help", "=", "''", ")", "\n", "argp", ".", "add_argument", "(", "'--num-partitions'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "''", ")", "\n", "argp", ".", "add_argument", "(", "'--debug-save'", ",", "help", "=", "'for debugging purposes'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "argp", ".", "parse_args", "(", ")", "\n", "\n", "metric_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'metric.txt'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "output_dir", ")", "\n", "\n", "", "with", "ExitStack", "(", ")", "as", "stack", ":", "\n", "        ", "metric_fptr", "=", "stack", ".", "enter_context", "(", "open", "(", "metric_filename", ",", "'w'", ")", ")", "\n", "\n", "data_raw", "=", "sc", ".", "textFile", "(", "args", ".", "corpus", ")", "\n", "\n", "assert", "(", "args", ".", "corpus", "[", "-", "4", ":", "]", "==", "'.raw'", ")", "\n", "print", "(", "'Number of articles in raw: {}'", ".", "format", "(", "data_raw", ".", "count", "(", ")", ")", ",", "file", "=", "metric_fptr", ")", "\n", "metric_fptr", ".", "flush", "(", ")", "\n", "\n", "input_parser", "=", "InputParser", "(", "\n", "num_partitions", "=", "args", ".", "num_partitions", ",", "\n", "debug_save", "=", "args", ".", "debug_save", ")", "\n", "\n", "# combine the data", "\n", "rollup_rdd", "=", "input_parser", ".", "tokenize_and_perform_rollup", "(", "data_raw", ")", "\n", "\n", "rollup_rdd", ".", "map", "(", "lambda", "x", ":", "x", ".", "jsonify", "(", ")", ")", ".", "saveAsTextFile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'rollup'", ")", ")", "\n", "\n", "# do not do rollup_rdd.count(). It will recompute everything.", "\n", "\n", "logging", ".", "info", "(", "'Output directory: {}'", ".", "format", "(", "args", ".", "output_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.create_squad_ner_dataset._run_job": [[22, 30], ["sc.textFile().map", "distant_supervision.squad_ner_creator.SquadNerCreator", "distant_supervision.squad_ner_creator.SquadNerCreator.run_job", "os.path.join", "sc.textFile"], "function", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator.run_job"], ["def", "_run_job", "(", "input_jsonl_filepath", ",", "channel", ",", "metric_fptr", ",", "args", ")", ":", "\n", "    ", "question_rdd", "=", "sc", ".", "textFile", "(", "input_jsonl_filepath", ",", "minPartitions", "=", "args", ".", "num_partitions", ")", ".", "map", "(", "RcQuestion", ".", "deserialize_json", ")", "\n", "\n", "job", "=", "SquadNerCreator", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'squad_ner_{}'", ".", "format", "(", "channel", ")", ")", ",", "\n", "num_partitions", "=", "args", ".", "num_partitions", ",", "\n", "debug_save", "=", "args", ".", "debug_save", ")", "\n", "job", ".", "run_job", "(", "sc", ",", "question_rdd", ",", "metric_fptr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.create_squad_ner_dataset.main": [[32, 62], ["timy.timer", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.exists", "os.mkdir", "contextlib.ExitStack", "input_dct.items", "logzero.logger.info", "os.path.join", "stack.enter_context", "os.path.join", "create_squad_ner_dataset._run_job", "open"], "function", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.create_squad_ner_dataset._run_job"], ["", "@", "timy", ".", "timer", "(", ")", "\n", "def", "main", "(", "sc", ")", ":", "\n", "    ", "argp", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "argp", ".", "add_argument", "(", "'--squad-rc-dir'", ",", "help", "=", "'input path of squad data'", ",", "required", "=", "True", ")", "\n", "argp", ".", "add_argument", "(", "'--output-dir'", ",", "default", "=", "\"output/\"", ",", "help", "=", "''", ",", "required", "=", "True", ")", "\n", "argp", ".", "add_argument", "(", "'--num-partitions'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "''", ")", "\n", "argp", ".", "add_argument", "(", "'--debug-save'", ",", "help", "=", "'for debugging purposes'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "argp", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "output_dir", ")", "\n", "\n", "", "input_dct", "=", "{", "\n", "'train'", ":", "'squad_rc_train.jsonl'", ",", "\n", "'dev'", ":", "'squad_rc_dev.jsonl'", ",", "\n", "'test'", ":", "'squad_rc_test.jsonl'", ",", "\n", "}", "\n", "if", "args", ".", "debug_save", ":", "\n", "# debug_save mode only runs for dev set", "\n", "        ", "input_dct", "=", "{", "'dev'", ":", "input_dct", "[", "'dev'", "]", "}", "\n", "\n", "", "with", "ExitStack", "(", ")", "as", "stack", ":", "\n", "        ", "for", "channel", ",", "jsonl_basename", "in", "input_dct", ".", "items", "(", ")", ":", "\n", "            ", "metric_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'metric_{}.txt'", ".", "format", "(", "channel", ")", ")", "\n", "metric_fptr", "=", "stack", ".", "enter_context", "(", "open", "(", "metric_filename", ",", "'w'", ")", ")", "\n", "\n", "input_jsonl_filepath", "=", "os", ".", "path", ".", "join", "(", "args", ".", "squad_rc_dir", ",", "jsonl_basename", ")", "\n", "_run_job", "(", "input_jsonl_filepath", ",", "channel", ",", "metric_fptr", ",", "args", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Output directory: {}'", ".", "format", "(", "args", ".", "output_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.create_ds_synthetic_dataset._create_jsonl_training_files": [[16, 34], ["os.path.join", "cmd_lst.append", "os.path.join", "cmd_lst.append", "logzero.logger.info", "subprocess.run", "os.path.join"], "function", ["None"], ["def", "_create_jsonl_training_files", "(", "output_dir", ",", "qstyle", ")", ":", "\n", "    ", "dest_200k_jsonl_filepath", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'{}_200k.jsonl'", ".", "format", "(", "qstyle", ".", "value", ")", ")", "\n", "cmd_lst", "=", "[", "]", "\n", "\n", "cmd_lst", ".", "append", "(", "'cat {}/part-* | shuf -n 200000 > {}'", ".", "format", "(", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "qstyle", ".", "value", ")", ",", "\n", "dest_200k_jsonl_filepath", ")", ")", "\n", "\n", "for", "kilo_head_count", "in", "[", "50", ",", "100", "]", ":", "\n", "        ", "dest_jsonl_filepath", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'{}_{}k.jsonl'", ".", "format", "(", "qstyle", ".", "value", ",", "kilo_head_count", ")", ")", "\n", "cmd_lst", ".", "append", "(", "'head -n {} {} > {}'", ".", "format", "(", "\n", "kilo_head_count", "*", "1000", ",", "\n", "dest_200k_jsonl_filepath", ",", "\n", "dest_jsonl_filepath", ")", ")", "\n", "\n", "", "for", "cmd", "in", "cmd_lst", ":", "\n", "        ", "logging", ".", "info", "(", "'# {}'", ".", "format", "(", "cmd", ")", ")", "\n", "subprocess", ".", "run", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.create_ds_synthetic_dataset.main": [[35, 104], ["timy.timer", "distant_supervision.utils.read_default_config_toml", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logzero.logger.info", "sc.textFile().map", "os.path.exists", "os.mkdir", "open", "distant_supervision.whxx_ngram_table.WhxxNgramTable.import_from_toml", "contextlib.ExitStack", "stack.enter_context", "print", "sc.textFile().map", "distant_supervision.synthetic_data_creator.SyntheticDataCreator", "distant_supervision.synthetic_data_creator.SyntheticDataCreator.run_job", "logzero.logger.info", "create_ds_synthetic_dataset._create_jsonl_training_files", "os.getenv", "open", "sc.textFile", "distant_supervision.data_models.PhraseObj.import_from", "os.path.join", "sc.textFile", "distant_supervision.data_models.PhraseMode", "json.loads"], "function", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.read_default_config_toml", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.whxx_ngram_table.WhxxNgramTable.import_from_toml", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator.run_job", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.create_ds_synthetic_dataset._create_jsonl_training_files", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.PhraseObj.import_from"], ["", "", "@", "timy", ".", "timer", "(", ")", "\n", "def", "main", "(", "sc", ")", ":", "\n", "    ", "default_config", "=", "utils", ".", "read_default_config_toml", "(", ")", "\n", "\n", "argp", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "argp", ".", "add_argument", "(", "'--corpus'", ",", "help", "=", "'input path for corpus data'", ",", "required", "=", "True", ")", "\n", "argp", ".", "add_argument", "(", "'--output-dir'", ",", "default", "=", "\"output/\"", ",", "help", "=", "''", ",", "required", "=", "True", ")", "\n", "argp", ".", "add_argument", "(", "'--ulim-count'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'approximate output count. Does not change NER ulim'", ")", "\n", "argp", ".", "add_argument", "(", "'--es-hosts'", ",", "help", "=", "''", ",", "default", "=", "os", ".", "getenv", "(", "'AES_HOSTS'", ")", ")", "\n", "argp", ".", "add_argument", "(", "'--es-index-readonly'", ",", "help", "=", "''", ",", "default", "=", "default_config", "[", "'es_index_readonly'", "]", ")", "\n", "argp", ".", "add_argument", "(", "'--whxx-ngram-table'", ",", "help", "=", "'toml config file'", ",", "default", "=", "'resources/whxx_ngram_table.toml'", ")", "\n", "argp", ".", "add_argument", "(", "'--num-partitions'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "''", ")", "\n", "argp", ".", "add_argument", "(", "'--debug-save'", ",", "help", "=", "'for debugging purposes'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "argp", ".", "add_argument", "(", "'--ulim-ner'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "'upper limit of NER'", ")", "\n", "argp", ".", "add_argument", "(", "'--ner'", ",", "\n", "help", "=", "'NER entity2articles folder. If none is given, NER set is computed from corpus.'", ")", "\n", "\n", "argp", ".", "add_argument", "(", "'--phrase-mode'", ",", "choices", "=", "[", "e", ".", "value", "for", "e", "in", "PhraseMode", "]", ",", "default", "=", "PhraseMode", ".", "NER_ONLY", ".", "value", ",", "\n", "help", "=", "'Generate data using ner_only. Skip noun phrases'", ")", "\n", "\n", "argp", ".", "add_argument", "(", "'--aux-qs'", ",", "type", "=", "int", ",", "dest", "=", "'nb_aux_qs_matches'", ",", "\n", "help", "=", "'number of auxiliary entity matches with query sentence'", ",", "default", "=", "0", ")", "\n", "argp", ".", "add_argument", "(", "'--aux-awc'", ",", "type", "=", "int", ",", "dest", "=", "'nb_aux_awc_matches'", ",", "\n", "help", "=", "'number of additional aux matches with anywhere in context (in additional to aux-qs)'", ",", "\n", "default", "=", "0", ")", "\n", "args", "=", "argp", ".", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "es_hosts", "and", "args", ".", "es_index_readonly", "\n", "\n", "logging", ".", "info", "(", "'es index: {}'", ".", "format", "(", "args", ".", "es_index_readonly", ")", ")", "\n", "\n", "if", "args", ".", "ner", ":", "\n", "        ", "ner_rdd", "=", "sc", ".", "textFile", "(", "args", ".", "ner", ",", "minPartitions", "=", "args", ".", "num_partitions", ")", ".", "map", "(", "\n", "lambda", "x", ":", "PhraseObj", ".", "import_from", "(", "json", ".", "loads", "(", "x", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "ner_rdd", "=", "None", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "output_dir", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "whxx_ngram_table", ")", "as", "fptr", ":", "\n", "        ", "whxx_ngram_table", "=", "WhxxNgramTable", ".", "import_from_toml", "(", "fptr", ")", "\n", "\n", "", "with", "ExitStack", "(", ")", "as", "stack", ":", "\n", "        ", "metric_fptr", "=", "stack", ".", "enter_context", "(", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'metric.txt'", ")", ",", "'w'", ")", ")", "\n", "print", "(", "'CMD: {}'", ".", "format", "(", "' '", ".", "join", "(", "sys", ".", "argv", ")", ")", ",", "file", "=", "metric_fptr", ")", "\n", "\n", "article_rdd", "=", "sc", ".", "textFile", "(", "args", ".", "corpus", ",", "minPartitions", "=", "args", ".", "num_partitions", ")", ".", "map", "(", "Article", ".", "deserialize_json", ")", "\n", "\n", "job", "=", "SyntheticDataCreator", "(", "\n", "args", ".", "output_dir", ",", "\n", "ulim_count", "=", "args", ".", "ulim_count", ",", "\n", "es_hosts", "=", "args", ".", "es_hosts", ",", "\n", "es_index_name", "=", "args", ".", "es_index_readonly", ",", "\n", "whxx_ngram_table", "=", "whxx_ngram_table", ",", "\n", "nb_ner_ulim", "=", "args", ".", "ulim_ner", ",", "\n", "num_partitions", "=", "args", ".", "num_partitions", ",", "\n", "nb_aux_qs_matches", "=", "args", ".", "nb_aux_qs_matches", ",", "\n", "nb_aux_awc_matches", "=", "args", ".", "nb_aux_awc_matches", ",", "\n", "phrase_mode", "=", "PhraseMode", "(", "args", ".", "phrase_mode", ")", ",", "\n", "debug_save", "=", "args", ".", "debug_save", ")", "\n", "job", ".", "run_job", "(", "sc", ",", "article_rdd", ",", "ner_rdd", ",", "metric_fptr", ")", "\n", "\n", "logging", ".", "info", "(", "'Output directory: {}'", ".", "format", "(", "args", ".", "output_dir", ")", ")", "\n", "\n", "", "for", "qstyle", "in", "QUESTION_STYLES_FOR_JSONLINES", ":", "\n", "        ", "_create_jsonl_training_files", "(", "args", ".", "output_dir", ",", "qstyle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.stat_for_ner_category_to_wh_words.WhxxNgram.__init__": [[22, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ngram_size", ",", "ngram", ",", "count", ")", ":", "\n", "        ", "self", ".", "ngram_size", "=", "ngram_size", "\n", "self", ".", "ngram", "=", "ngram", "\n", "self", ".", "count", "=", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.stat_for_ner_category_to_wh_words._extract_leading_ngrams": [[28, 40], ["question.question.lower", "re.sub", "re.sub.split", "range"], "function", ["None"], ["", "", "def", "_extract_leading_ngrams", "(", "question", ")", ":", "\n", "    ", "\"\"\"\n    :return: list of ((<NER category>, <number of words>, <ngram>), 1), e.g. returns ( (\"PERSON\", 2, \"who is\"), 1)\n    \"\"\"", "\n", "ner_category", "=", "question", ".", "answers", "[", "0", "]", "[", "'ner_category'", "]", "\n", "\n", "question_text", "=", "question", ".", "question", ".", "lower", "(", ")", "\n", "question_text", "=", "re", ".", "sub", "(", "r'\\W+'", ",", "' '", ",", "question_text", ")", "\n", "tokens", "=", "question_text", ".", "split", "(", ")", "\n", "return", "[", "\n", "(", "(", "ner_category", ",", "n", ",", "' '", ".", "join", "(", "tokens", "[", ":", "n", "]", ")", ")", ",", "1", ")", "\n", "for", "n", "in", "range", "(", "1", ",", "ULIM_NGRAM_SIZE", "+", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.stat_for_ner_category_to_wh_words._compute_count_per_category": [[41, 48], ["question_rdd.map().reduceByKey", "question_rdd.map().reduceByKey.collectAsMap", "question_rdd.map"], "function", ["None"], ["", "def", "_compute_count_per_category", "(", "question_rdd", ")", ":", "\n", "    ", "\"\"\"\n    returns dictionary of category => count\n    \"\"\"", "\n", "\n", "category_count_prdd", "=", "question_rdd", ".", "map", "(", "lambda", "x", ":", "(", "x", ".", "answers", "[", "0", "]", "[", "'ner_category'", "]", ",", "1", ")", ")", ".", "reduceByKey", "(", "add", ")", "\n", "return", "category_count_prdd", ".", "collectAsMap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.stat_for_ner_category_to_wh_words._add_to_toml": [[49, 57], ["None"], "function", ["None"], ["", "def", "_add_to_toml", "(", "toml_dct", ",", "category", ",", "size2list", ")", ":", "\n", "    ", "whxx_ngram_objs", "=", "size2list", "[", "TOML_NGRAM_SIZE", "]", "\n", "\n", "dct", "=", "{", "}", "\n", "for", "whxx_ngram", "in", "whxx_ngram_objs", ":", "\n", "        ", "dct", "[", "whxx_ngram", ".", "ngram", "]", "=", "whxx_ngram", ".", "count", "\n", "\n", "", "toml_dct", "[", "category", "]", "=", "dct", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.stat_for_ner_category_to_wh_words._run_stat": [[58, 112], ["stat_for_ner_category_to_wh_words._compute_count_per_category", "question_rdd.flatMap", "question_rdd.flatMap.reduceByKey().filter", "unit_count_prdd.reduceByKey().filter.cache", "unit_count_prdd.reduceByKey().filter.saveAsTextFile", "unit_count_prdd.reduceByKey().filter.collectAsMap", "collections.defaultdict", "count_prdd.collectAsMap.items", "sorted", "sorted", "print", "os.path.join", "stat_for_ner_category_to_wh_words.WhxxNgram", "category2list[].append", "collections.defaultdict.items", "collections.defaultdict", "collections.defaultdict.keys", "sorted", "stat_for_ner_category_to_wh_words._add_to_toml", "collections.defaultdict.items", "print", "print", "toml.dumps", "question_rdd.flatMap.reduceByKey", "size2list[].append", "sorted", "collections.defaultdict.items", "print", "print", "sorted", "print", "print"], "function", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.stat_for_ner_category_to_wh_words._compute_count_per_category", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.stat_for_ner_category_to_wh_words._add_to_toml"], ["", "def", "_run_stat", "(", "question_rdd", ",", "metric_fptr", ",", "metric_per_category_fptr", ",", "toml_fptr", ",", "output_dir", ")", ":", "\n", "    ", "count_per_category", "=", "_compute_count_per_category", "(", "question_rdd", ")", "\n", "\n", "unit_count_prdd", "=", "question_rdd", ".", "flatMap", "(", "_extract_leading_ngrams", ")", "\n", "\n", "count_prdd", "=", "unit_count_prdd", ".", "reduceByKey", "(", "add", ")", ".", "filter", "(", "lambda", "x", ":", "x", "[", "1", "]", ">=", "10", ")", "\n", "count_prdd", ".", "cache", "(", ")", "\n", "count_prdd", ".", "saveAsTextFile", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'count_prdd'", ")", ")", "\n", "\n", "count_dct", "=", "count_prdd", ".", "collectAsMap", "(", ")", "\n", "\n", "toml_dct", "=", "{", "}", "\n", "\n", "category2list", "=", "defaultdict", "(", "list", ")", "\n", "for", "k", ",", "count", "in", "count_dct", ".", "items", "(", ")", ":", "\n", "        ", "ner_category", "=", "k", "[", "0", "]", "\n", "whxx_ngram", "=", "WhxxNgram", "(", "k", "[", "1", "]", ",", "k", "[", "2", "]", ",", "count", ")", "\n", "\n", "category2list", "[", "ner_category", "]", ".", "append", "(", "whxx_ngram", ")", "\n", "\n", "", "for", "category", ",", "whxx_ngram_lst", "in", "sorted", "(", "category2list", ".", "items", "(", ")", ")", ":", "\n", "        ", "size2list", "=", "defaultdict", "(", "list", ")", "# ngram-size to list-of-whxx_ngram", "\n", "\n", "for", "whxx_ngram", "in", "whxx_ngram_lst", ":", "\n", "            ", "size2list", "[", "whxx_ngram", ".", "ngram_size", "]", ".", "append", "(", "whxx_ngram", ")", "\n", "\n", "", "for", "size", "in", "size2list", ".", "keys", "(", ")", ":", "\n", "            ", "size2list", "[", "size", "]", "=", "sorted", "(", "size2list", "[", "size", "]", ",", "key", "=", "lambda", "x", ":", "-", "x", ".", "count", ")", "\n", "\n", "", "for", "size", ",", "lst", "in", "sorted", "(", "size2list", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'{} {}-gram'", ".", "format", "(", "category", ",", "size", ")", ",", "file", "=", "metric_fptr", ")", "\n", "for", "whxx_ngram", "in", "lst", "[", ":", "TOPK", "]", ":", "\n", "                ", "print", "(", "'count= {:4d} / {:4d} ({:5.2f}%) \"{}\"'", ".", "format", "(", "\n", "whxx_ngram", ".", "count", ",", "\n", "count_per_category", "[", "category", "]", ",", "\n", "100.0", "*", "whxx_ngram", ".", "count", "/", "count_per_category", "[", "category", "]", ",", "\n", "whxx_ngram", ".", "ngram", ")", ",", "file", "=", "metric_fptr", ")", "\n", "", "print", "(", "file", "=", "metric_fptr", ")", "\n", "\n", "", "_add_to_toml", "(", "toml_dct", ",", "category", ",", "size2list", ")", "\n", "\n", "", "for", "category", ",", "whxx_ngram_lst", "in", "sorted", "(", "category2list", ".", "items", "(", ")", ")", ":", "\n", "        ", "sorted_lst", "=", "sorted", "(", "whxx_ngram_lst", ",", "key", "=", "lambda", "x", ":", "-", "x", ".", "count", ")", "[", ":", "10", "]", "\n", "\n", "print", "(", "'{}'", ".", "format", "(", "category", ")", ",", "file", "=", "metric_per_category_fptr", ")", "\n", "for", "whxx_ngram", "in", "sorted_lst", ":", "\n", "            ", "print", "(", "'count= {:4d} / {:4d} ({:5.2f}%) \"{}\"'", ".", "format", "(", "\n", "whxx_ngram", ".", "count", ",", "\n", "count_per_category", "[", "category", "]", ",", "\n", "100.0", "*", "whxx_ngram", ".", "count", "/", "count_per_category", "[", "category", "]", ",", "\n", "whxx_ngram", ".", "ngram", ")", ",", "file", "=", "metric_per_category_fptr", ")", "\n", "", "print", "(", "file", "=", "metric_per_category_fptr", ")", "\n", "\n", "", "print", "(", "toml", ".", "dumps", "(", "toml_dct", ")", ",", "file", "=", "toml_fptr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.stat_for_ner_category_to_wh_words.main": [[114, 139], ["timy.timer", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.exists", "os.mkdir", "contextlib.ExitStack", "os.path.join", "stack.enter_context", "stack.enter_context", "stack.enter_context", "sc.textFile().map", "stat_for_ner_category_to_wh_words._run_stat", "logzero.logger.info", "open", "open", "open", "os.path.join", "os.path.join", "sc.textFile"], "function", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.stat_for_ner_category_to_wh_words._run_stat"], ["", "@", "timy", ".", "timer", "(", ")", "\n", "def", "main", "(", "sc", ")", ":", "\n", "    ", "argp", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "argp", ".", "add_argument", "(", "'--squadner'", ",", "help", "=", "'input path of squadner data'", ",", "required", "=", "True", ")", "\n", "argp", ".", "add_argument", "(", "'--output-dir'", ",", "default", "=", "\"output/\"", ",", "help", "=", "''", ",", "required", "=", "True", ")", "\n", "argp", ".", "add_argument", "(", "'--num-partitions'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "''", ")", "\n", "argp", ".", "add_argument", "(", "'--debug-save'", ",", "help", "=", "'for debugging purposes'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "argp", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "output_dir", ")", "\n", "\n", "", "with", "ExitStack", "(", ")", "as", "stack", ":", "\n", "        ", "metric_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'metric.txt'", ")", "\n", "metric_fptr", "=", "stack", ".", "enter_context", "(", "open", "(", "metric_filename", ",", "'w'", ")", ")", "\n", "\n", "metric_per_category_fptr", "=", "stack", ".", "enter_context", "(", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'metric_per_category.txt'", ")", ",", "'w'", ")", ")", "\n", "\n", "toml_fptr", "=", "stack", ".", "enter_context", "(", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'whxx_ngram_table.toml'", ")", ",", "'w'", ")", ")", "\n", "\n", "question_rdd", "=", "sc", ".", "textFile", "(", "args", ".", "squadner", ",", "minPartitions", "=", "args", ".", "num_partitions", ")", ".", "map", "(", "RcQuestion", ".", "deserialize_json", ")", "\n", "_run_stat", "(", "question_rdd", ",", "metric_fptr", ",", "metric_per_category_fptr", ",", "toml_fptr", ",", "args", ".", "output_dir", ")", "\n", "logging", ".", "info", "(", "'Output dir: {}'", ".", "format", "(", "args", ".", "output_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.spark_scripts.write_sentence_level_es_index.main": [[9, 39], ["timy.timer", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "sc.textFile", "os.path.exists", "os.mkdir", "contextlib.ExitStack", "os.path.join", "stack.enter_context", "print", "distant_supervision.ds_es_client.ESIndexWriter", "distant_supervision.ds_es_client.ESIndexWriter.run_job", "logzero.logger.info", "os.getenv", "open"], "function", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator.run_job"], ["@", "timy", ".", "timer", "(", ")", "\n", "def", "main", "(", "sc", ")", ":", "\n", "    ", "argp", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "argp", ".", "add_argument", "(", "'--corpus'", ",", "help", "=", "'input path, e.g. foobar/rollup/'", ",", "required", "=", "True", ")", "\n", "argp", ".", "add_argument", "(", "'--output-dir'", ",", "default", "=", "\"output/\"", ",", "help", "=", "''", ")", "\n", "argp", ".", "add_argument", "(", "'--es-hosts'", ",", "help", "=", "''", ",", "default", "=", "os", ".", "getenv", "(", "'AES_HOSTS'", ")", ")", "\n", "argp", ".", "add_argument", "(", "'--es-index'", ",", "help", "=", "''", ",", "required", "=", "True", ")", "\n", "argp", ".", "add_argument", "(", "'--num-partitions'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "''", ")", "\n", "argp", ".", "add_argument", "(", "'--debug-save'", ",", "help", "=", "'for debugging purposes'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "argp", ".", "parse_args", "(", ")", "\n", "\n", "corpus_rdd", "=", "sc", ".", "textFile", "(", "args", ".", "corpus", ",", "minPartitions", "=", "args", ".", "num_partitions", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "output_dir", ")", "\n", "\n", "", "with", "ExitStack", "(", ")", "as", "stack", ":", "\n", "        ", "metric_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'metric.txt'", ")", "\n", "metric_fptr", "=", "stack", ".", "enter_context", "(", "open", "(", "metric_filename", ",", "'w'", ")", ")", "\n", "\n", "print", "(", "'args: {}'", ".", "format", "(", "args", ")", ",", "file", "=", "metric_fptr", ")", "\n", "\n", "job", "=", "ESIndexWriter", "(", "\n", "args", ".", "output_dir", ",", "\n", "es_hosts", "=", "args", ".", "es_hosts", ",", "\n", "es_index_name", "=", "args", ".", "es_index", ",", "\n", "debug_save", "=", "args", ".", "debug_save", ")", "\n", "job", ".", "run_job", "(", "corpus_rdd", ",", "metric_fptr", ")", "\n", "\n", "logging", ".", "info", "(", "'Output directory: {}'", ".", "format", "(", "args", ".", "output_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.entity_to_queries_mapper.EntityToQueriesMapper.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "phrase_mode", ")", ":", "\n", "        ", "self", ".", "phrase_mode", "=", "phrase_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.entity_to_queries_mapper.EntityToQueriesMapper._largest_index_exceeding_ulim_context": [[13, 21], ["range", "len"], "methods", ["None"], ["", "def", "_largest_index_exceeding_ulim_context", "(", "self", ",", "word_count_arr", ")", ":", "\n", "# compute the largest index that could have approximately CONTEXT_NUM_WORDS_ULIM words", "\n", "        ", "reverse_accum", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "word_count_arr", ")", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "reverse_accum", "+=", "word_count_arr", "[", "idx", "]", "\n", "if", "reverse_accum", ">=", "CONTEXT_NUM_WORDS_ULIM", ":", "\n", "                ", "return", "idx", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.entity_to_queries_mapper.EntityToQueriesMapper._get_valid_context_sentences": [[22, 50], ["entity_to_queries_mapper.EntityToQueriesMapper._largest_index_exceeding_ulim_context", "rng.vanilla.randint", "range", "word_count_arr.append", "len", "len", "len", "good_sents.append", "len", "sent.text.split"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.entity_to_queries_mapper.EntityToQueriesMapper._largest_index_exceeding_ulim_context"], ["", "def", "_get_valid_context_sentences", "(", "self", ",", "article", ",", "rng", ")", ":", "\n", "        ", "\"\"\"\n        0  10\n        1  5\n        2  6\n        3  7\n\n        Let's say CONTEXT_NUM_WORDS_ULIM=10. Then The largest_inclusive_idx should be index of 2.\n        We then randint(0,2)\n        \"\"\"", "\n", "word_count_arr", "=", "[", "]", "\n", "for", "sent", "in", "article", ".", "sents", ":", "\n", "            ", "word_count_arr", ".", "append", "(", "len", "(", "sent", ".", "text", ".", "split", "(", ")", ")", ")", "# using split() is only approximate because of punctuation", "\n", "\n", "", "assert", "len", "(", "word_count_arr", ")", "==", "len", "(", "article", ".", "sents", ")", "\n", "\n", "largest_inclusive_idx", "=", "self", ".", "_largest_index_exceeding_ulim_context", "(", "word_count_arr", ")", "\n", "rnd_idx", "=", "rng", ".", "vanilla", ".", "randint", "(", "0", ",", "largest_inclusive_idx", ")", "\n", "\n", "good_sents", "=", "[", "]", "\n", "accum_nb_words", "=", "0", "\n", "for", "i", "in", "range", "(", "rnd_idx", ",", "len", "(", "article", ".", "sents", ")", ")", ":", "\n", "            ", "good_sents", ".", "append", "(", "article", ".", "sents", "[", "i", "]", ")", "\n", "accum_nb_words", "+=", "word_count_arr", "[", "i", "]", "\n", "if", "accum_nb_words", ">=", "CONTEXT_NUM_WORDS_ULIM", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "good_sents", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.entity_to_queries_mapper.EntityToQueriesMapper._get_all_phrases_from_sentence_list": [[51, 56], ["set", "list", "set.update", "sent.get_phrases"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.get_phrases"], ["", "def", "_get_all_phrases_from_sentence_list", "(", "self", ",", "sent_lst", ")", ":", "\n", "        ", "phrase_set", "=", "set", "(", ")", "\n", "for", "sent", "in", "sent_lst", ":", "\n", "            ", "phrase_set", ".", "update", "(", "sent", ".", "get_phrases", "(", "self", ".", "phrase_mode", ")", ")", "\n", "", "return", "list", "(", "phrase_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.entity_to_queries_mapper.EntityToQueriesMapper._get_entity2qpa_list": [[57, 105], ["utils.RandomNumberGenerator", "entity_to_queries_mapper.EntityToQueriesMapper._get_valid_context_sentences", "entity_to_queries_mapper.EntityToQueriesMapper._get_all_phrases_from_sentence_list", "set", "list", "utils.RandomNumberGenerator.vanilla.shuffle", "list.update", "data_models.PhraseObj", "utils.RandomNumberGenerator.vanilla.shuffle", "data_models.QueriesPerArticleObj", "result_lst.append", "sent.get_phrases", "len", "s.get_phrases", "len", "s.text.split"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.entity_to_queries_mapper.EntityToQueriesMapper._get_valid_context_sentences", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.entity_to_queries_mapper.EntityToQueriesMapper._get_all_phrases_from_sentence_list", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.get_phrases", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.get_phrases"], ["", "def", "_get_entity2qpa_list", "(", "self", ",", "article", ",", "ner_broadcast", ")", ":", "\n", "        ", "rng", "=", "utils", ".", "RandomNumberGenerator", "(", ")", "\n", "\n", "# good_sents is contiguous", "\n", "good_sents", "=", "self", ".", "_get_valid_context_sentences", "(", "article", ",", "rng", ")", "\n", "\n", "# only use the first N sentences, instead of using article.text", "\n", "article_raw", "=", "' '", ".", "join", "(", "[", "sent", ".", "text", "for", "sent", "in", "good_sents", "]", ")", "\n", "\n", "article_phrases", "=", "self", ".", "_get_all_phrases_from_sentence_list", "(", "good_sents", ")", "\n", "\n", "candidate_phrase_pairs", "=", "set", "(", ")", "\n", "for", "sent", "in", "good_sents", ":", "\n", "            ", "candidate_phrase_pairs", ".", "update", "(", "sent", ".", "get_phrases", "(", "self", ".", "phrase_mode", ")", ")", "\n", "\n", "", "candidate_phrase_pairs", "=", "list", "(", "candidate_phrase_pairs", "&", "ner_broadcast", ".", "value", ")", "# only keep ones that are in NER list", "\n", "\n", "rng", ".", "vanilla", ".", "shuffle", "(", "candidate_phrase_pairs", ")", "\n", "candidate_phrase_pairs", "=", "candidate_phrase_pairs", "[", ":", "NUM_ENTITIES_PER_ARTICLE_TO_CONSIDER", "]", "\n", "\n", "result_lst", "=", "[", "]", "\n", "for", "phrase_str", ",", "phrase_category", "in", "candidate_phrase_pairs", ":", "\n", "# filtered sentences where the \"answer\" string is in there.", "\n", "# Also, keep only ones that have less than X number of words (others are likely an error).", "\n", "            ", "filtered_sents", "=", "[", "\n", "s", "for", "s", "in", "good_sents", "\n", "if", "(", "phrase_str", ",", "phrase_category", ")", "in", "s", ".", "get_phrases", "(", "self", ".", "phrase_mode", ")", "and", "len", "(", "s", ".", "text", ".", "split", "(", ")", ")", "<=", "NUM_WORDS_IN_QUERY_SENTENCE_ULIM", "]", "\n", "\n", "if", "not", "filtered_sents", ":", "\n", "                ", "continue", "\n", "\n", "", "phrase", "=", "PhraseObj", "(", "phrase_str", ",", "phrase_category", ")", "\n", "\n", "rng", ".", "vanilla", ".", "shuffle", "(", "filtered_sents", ")", "\n", "filtered_sents", "=", "filtered_sents", "[", ":", "NUM_OF_SENTENCES_ULIM", "]", "# only randomly take this many sentences", "\n", "\n", "qpa", "=", "QueriesPerArticleObj", "(", "\n", "article_id", "=", "article", ".", "id", ",", "\n", "article_title", "=", "article", ".", "title", ",", "\n", "article_raw", "=", "article_raw", ",", "# do not use article.text here. We only use first/some N sentences", "\n", "article_phrases", "=", "article_phrases", ",", "\n", "filtered_sents", "=", "filtered_sents", ",", "# filtered sentences where the \"answer\" string is in there", "\n", "phrase", "=", "phrase", ")", "\n", "result_lst", ".", "append", "(", "(", "(", "phrase", ".", "phrase_str", ",", "phrase", ".", "phrase_category", ")", ",", "[", "qpa", "]", ")", ")", "\n", "\n", "if", "len", "(", "result_lst", ")", ">=", "NUM_ENTITIES_PER_ARTICLE_TO_KEEP", ":", "\n", "                ", "break", "\n", "", "", "return", "result_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.entity_to_queries_mapper.EntityToQueriesMapper.get_entity_to_queries_v2": [[107, 131], ["print", "sc.broadcast", "article_rdd.flatMap", "sc.broadcast.unpersist", "article_rdd.flatMap.reduceByKey", "entity2queries_prdd.map.map.map", "len", "entity_to_queries_mapper.EntityToQueriesMapper._get_entity2qpa_list"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.entity_to_queries_mapper.EntityToQueriesMapper._get_entity2qpa_list"], ["", "def", "get_entity_to_queries_v2", "(", "self", ",", "sc", ",", "article_rdd", ",", "ner_set", ",", "metric_fptr", ")", ":", "\n", "        ", "\"\"\"\n        return a RDD with (entity, list of qpa)\n\n        - List of QPAs are randomly selected/ordered.\n        - V2 uses broadcast instead of explicit join\n        - Take only first N sentences from an article. If we need more samples, consider splitting article\n          to multiple passages.\n        \"\"\"", "\n", "\n", "print", "(", "'Size of NER set: {}\\n'", ".", "format", "(", "len", "(", "ner_set", ")", ")", ",", "file", "=", "metric_fptr", ")", "\n", "\n", "ner_broadcast", "=", "sc", ".", "broadcast", "(", "ner_set", ")", "\n", "\n", "entity2qpa_prdd", "=", "article_rdd", ".", "flatMap", "(", "lambda", "x", ":", "self", ".", "_get_entity2qpa_list", "(", "x", ",", "ner_broadcast", ")", ")", "\n", "\n", "ner_broadcast", ".", "unpersist", "(", ")", "\n", "\n", "entity2queries_prdd", "=", "entity2qpa_prdd", ".", "reduceByKey", "(", "add", ")", "\n", "\n", "# limit number of backfill articles. Some entities such as first is too common.", "\n", "entity2queries_prdd", "=", "entity2queries_prdd", ".", "map", "(", "lambda", "e2q", ":", "(", "e2q", "[", "0", "]", ",", "e2q", "[", "1", "]", "[", ":", "NUM_ARTICLES_PER_ENTITY_ULIM", "]", ")", ")", "\n", "\n", "return", "entity2queries_prdd", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.input_parser.PrepWikipedia.preprocess": [[16, 37], ["article.items", "regex.match", "PrepWikipedia.PARSER.unescape", "article[].lower", "article[].lower"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "preprocess", "(", "article", ")", ":", "\n", "# Take out HTML escaping WikiExtractor didn't clean", "\n", "        ", "for", "k", ",", "v", "in", "article", ".", "items", "(", ")", ":", "\n", "            ", "article", "[", "k", "]", "=", "PrepWikipedia", ".", "PARSER", ".", "unescape", "(", "v", ")", "\n", "\n", "# Filter some disambiguation pages not caught by the WikiExtractor", "\n", "", "if", "article", "[", "'id'", "]", "in", "PrepWikipedia", ".", "BLACKLIST", ":", "\n", "            ", "return", "None", "\n", "", "if", "'(disambiguation)'", "in", "article", "[", "'title'", "]", ".", "lower", "(", ")", ":", "\n", "            ", "return", "None", "\n", "", "if", "'(disambiguation page)'", "in", "article", "[", "'title'", "]", ".", "lower", "(", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "# Take out List/Index/Outline pages (mostly links)", "\n", "", "if", "re", ".", "match", "(", "r'(List of .+)|(Index of .+)|(Outline of .+)'", ",", "\n", "article", "[", "'title'", "]", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "# Return doc with `id` set to `title`", "\n", "", "return", "article", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.input_parser.InputParser.__init__": [[40, 44], ["text_preprocessor.TextPreprocessor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "num_partitions", ",", "debug_save", ")", ":", "\n", "        ", "self", ".", "text_preprocessor", "=", "TextPreprocessor", "(", ")", "\n", "self", ".", "num_partitions", "=", "num_partitions", "\n", "self", ".", "debug_save", "=", "debug_save", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.input_parser.InputParser._load_json": [[45, 48], ["json.loads"], "methods", ["None"], ["", "def", "_load_json", "(", "self", ",", "json_str", ")", ":", "\n", "        ", "dct", "=", "json", ".", "loads", "(", "json_str", ")", "\n", "return", "dct", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.input_parser.InputParser._convert_jsonl_to_prdd": [[49, 52], ["rdd.map", "rdd.map.map"], "methods", ["None"], ["", "def", "_convert_jsonl_to_prdd", "(", "self", ",", "rdd", ")", ":", "\n", "        ", "json_rdd", "=", "rdd", ".", "map", "(", "self", ".", "_load_json", ")", "\n", "return", "json_rdd", ".", "map", "(", "lambda", "x", ":", "(", "x", "[", "'id'", "]", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.input_parser.InputParser._process_row": [[53, 88], ["input_parser.PrepWikipedia.preprocess", "data_models.Article", "data_models.Article.import_from", "input_parser.InputParser.text_preprocessor.sent_tokenize", "input_parser.InputParser.text_preprocessor.unicode_normalize", "input_parser.InputParser.text_preprocessor.compute_ner_and_noun_chunks", "sentence_structs.append", "dict", "len", "len", "utils.random_str"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.input_parser.PrepWikipedia.preprocess", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.PhraseObj.import_from", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.sent_tokenize", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.unicode_normalize", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.compute_ner_and_noun_chunks", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.random_str"], ["", "def", "_process_row", "(", "self", ",", "row", ")", ":", "\n", "        ", "raw_row", "=", "row", "\n", "\n", "preprocessed_row", "=", "PrepWikipedia", ".", "preprocess", "(", "raw_row", ")", "\n", "if", "not", "preprocessed_row", ":", "\n", "            ", "return", "None", "\n", "\n", "", "article", "=", "Article", "(", ")", "\n", "\n", "for", "k", "in", "[", "'text'", ",", "'title'", "]", ":", "\n", "            ", "raw_row", "[", "k", "]", "=", "self", ".", "text_preprocessor", ".", "unicode_normalize", "(", "raw_row", "[", "k", "]", ")", "\n", "\n", "", "article", ".", "import_from", "(", "raw_row", ")", "\n", "\n", "# article.tok = ' '.join(self.text_preprocessor.word_tokenize(article.text))", "\n", "\n", "sentence_str_lst", "=", "self", ".", "text_preprocessor", ".", "sent_tokenize", "(", "article", ".", "text", ",", "article", ".", "title", ")", "\n", "\n", "sentence_structs", "=", "[", "]", "\n", "for", "sent_str", "in", "sentence_str_lst", ":", "\n", "            ", "ents", ",", "noun_chunks", "=", "self", ".", "text_preprocessor", ".", "compute_ner_and_noun_chunks", "(", "sent_str", ")", "\n", "\n", "if", "len", "(", "ents", ")", "+", "len", "(", "noun_chunks", ")", "==", "0", ":", "\n", "# discard sentences that have neither", "\n", "                ", "continue", "\n", "\n", "", "sentence_structs", ".", "append", "(", "dict", "(", "\n", "id", "=", "utils", ".", "random_str", "(", "16", ")", ",", "\n", "text", "=", "sent_str", ",", "\n", "noun_chunks", "=", "noun_chunks", ",", "\n", "ents", "=", "ents", ")", ")", "\n", "\n", "", "article", ".", "sents", "=", "sentence_structs", "\n", "\n", "return", "article", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.input_parser.InputParser.tokenize_and_perform_rollup": [[89, 94], ["raw_rdd.map().repartition", "raw_rdd.map().repartition.map().filter", "raw_rdd.map", "raw_rdd.map().repartition.map", "input_parser.InputParser._process_row"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.squad_ner_creator.SquadNerCreator._process_row"], ["", "def", "tokenize_and_perform_rollup", "(", "self", ",", "raw_rdd", ")", ":", "\n", "        ", "corpus_rdd", "=", "raw_rdd", ".", "map", "(", "self", ".", "_load_json", ")", ".", "repartition", "(", "self", ".", "num_partitions", ")", "\n", "\n", "rollup_rdd", "=", "corpus_rdd", ".", "map", "(", "lambda", "x", ":", "self", ".", "_process_row", "(", "x", ")", ")", ".", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ")", "\n", "return", "rollup_rdd", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.NerEntityGatherer.__init__": [[39, 43], ["stat_computation.StatComputation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "output_dir", ",", "phrase_mode", ")", ":", "\n", "        ", "self", ".", "stat_computation", "=", "StatComputation", "(", ")", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "phrase_mode", "=", "phrase_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.NerEntityGatherer._get_unique_entity_pairs": [[44, 58], ["set", "list", "sent.get_phrases", "set.add", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.get_phrases"], ["", "def", "_get_unique_entity_pairs", "(", "self", ",", "article", ")", ":", "\n", "        ", "\"\"\"\n        :return: a list of pairs [(\"0 to 6 years\", \"DATE\"), ...]\n        \"\"\"", "\n", "phrase_pair_set", "=", "set", "(", ")", "\n", "for", "sent", "in", "article", ".", "sents", ":", "\n", "            ", "phrase_tuple_lst", "=", "sent", ".", "get_phrases", "(", "self", ".", "phrase_mode", ")", "\n", "\n", "for", "(", "phrase_str", ",", "phrase_category", ")", "in", "phrase_tuple_lst", ":", "\n", "                ", "if", "len", "(", "phrase_str", ")", "<", "ENTITY_NCHARS_LLIM", ":", "\n", "# only keep entities that have a minimum number of characters", "\n", "                    ", "continue", "\n", "", "phrase_pair_set", ".", "add", "(", "(", "phrase_str", ",", "phrase_category", ")", ")", "\n", "", "", "return", "list", "(", "phrase_pair_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.NerEntityGatherer.gather_entities": [[59, 76], ["article_rdd.flatMap", "article_rdd.flatMap.map().reduceByKey().filter", "article_rdd.flatMap.map().reduceByKey().filter.cache", "ner_entity_gatherer.NerEntityGatherer._print_stats", "article_rdd.flatMap.map().reduceByKey().filter.map", "ner_entity_gatherer.NerEntityGatherer._get_unique_entity_pairs", "article_rdd.flatMap.map().reduceByKey", "data_models.PhraseObj", "article_rdd.flatMap.map"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.NerEntityGatherer._print_stats", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.NerEntityGatherer._get_unique_entity_pairs"], ["", "def", "gather_entities", "(", "self", ",", "article_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "\"\"\"\n        :return: ner_rdd\n        \"\"\"", "\n", "\n", "entity_pair_rdd", "=", "article_rdd", ".", "flatMap", "(", "lambda", "x", ":", "self", ".", "_get_unique_entity_pairs", "(", "x", ")", ")", "\n", "\n", "# count number of articles per entity-pair", "\n", "entity_pair_count_prdd", "=", "entity_pair_rdd", ".", "map", "(", "lambda", "x", ":", "(", "x", ",", "1", ")", ")", ".", "reduceByKey", "(", "add", ")", ".", "filter", "(", "\n", "lambda", "p2c", ":", "p2c", "[", "1", "]", ">=", "NUM_ARTICLES_PER_ENTITY_LLIM", ")", "\n", "\n", "entity_pair_count_prdd", ".", "cache", "(", ")", "\n", "self", ".", "_print_stats", "(", "metric_fptr", ",", "entity_pair_count_prdd", ")", "\n", "\n", "# p2c[0] returns the entity-pair (phrase_str, phrase_category)", "\n", "ner_rdd", "=", "entity_pair_count_prdd", ".", "map", "(", "lambda", "p2c", ":", "PhraseObj", "(", "p2c", "[", "0", "]", "[", "0", "]", ",", "p2c", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "return", "ner_rdd", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.NerEntityGatherer._print_stats": [[77, 90], ["entity_pair_count_prdd.map().histogram", "print", "print", "ner_entity_gatherer.NerEntityGatherer.stat_computation.help_print_histogram", "ner_entity_gatherer.NerEntityGatherer._stats_phrase_category_counts", "ner_entity_gatherer.NerEntityGatherer._stats_top_occurring_entities", "entity_pair_count_prdd.map"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.help_print_histogram", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.NerEntityGatherer._stats_phrase_category_counts", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.NerEntityGatherer._stats_top_occurring_entities"], ["", "def", "_print_stats", "(", "self", ",", "metric_fptr", ",", "entity_pair_count_prdd", ")", ":", "\n", "        ", "nb_bins", "=", "30", "\n", "buckets", ",", "histogram", "=", "entity_pair_count_prdd", ".", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ")", ".", "histogram", "(", "nb_bins", ")", "\n", "\n", "# Number of entities with articles-count=[..., ...):", "\n", "print", "(", "'Article counts histogram below is on the corpus, not the generated data'", ",", "file", "=", "metric_fptr", ")", "\n", "print", "(", "(", "'Since each article has more than one entity, the denominator of articles-count is not '", "'the same as number of articles.'", ")", ",", "file", "=", "metric_fptr", ")", "\n", "self", ".", "stat_computation", ".", "help_print_histogram", "(", "\n", "metric_fptr", ",", "buckets", ",", "histogram", ",", "'Histogram of gathered entities with articles-count='", ")", "\n", "\n", "self", ".", "_stats_phrase_category_counts", "(", "metric_fptr", ",", "entity_pair_count_prdd", ")", "\n", "self", ".", "_stats_top_occurring_entities", "(", "entity_pair_count_prdd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.NerEntityGatherer._stats_phrase_category_counts": [[91, 97], ["entity_pair_count_prdd.map().reduceByKey().collectAsMap", "ner_entity_gatherer.NerEntityGatherer.stat_computation.print_phrase_category_counts", "entity_pair_count_prdd.map().reduceByKey", "entity_pair_count_prdd.map"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.print_phrase_category_counts"], ["", "def", "_stats_phrase_category_counts", "(", "self", ",", "metric_fptr", ",", "entity_pair_count_prdd", ")", ":", "\n", "        ", "phrase_category_counts", "=", "entity_pair_count_prdd", ".", "map", "(", "\n", "lambda", "p2c", ":", "(", "p2c", "[", "0", "]", "[", "1", "]", ",", "1", ")", "\n", ")", ".", "reduceByKey", "(", "add", ")", ".", "collectAsMap", "(", ")", "\n", "\n", "self", ".", "stat_computation", ".", "print_phrase_category_counts", "(", "metric_fptr", ",", "phrase_category_counts", ",", "'Number of gathered phrases'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.NerEntityGatherer._stats_top_occurring_entities": [[98, 105], ["entity_pair_count_prdd.takeOrdered", "open", "os.path.join", "print"], "methods", ["None"], ["", "def", "_stats_top_occurring_entities", "(", "self", ",", "entity_pair_count_prdd", ")", ":", "\n", "        ", "frequent_lst", "=", "entity_pair_count_prdd", ".", "takeOrdered", "(", "\n", "1000", ",", "\n", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'frequently_occurring_phrases.txt'", ")", ",", "'w'", ")", "as", "fptr", ":", "\n", "            ", "for", "line", "in", "frequent_lst", ":", "\n", "                ", "print", "(", "line", ",", "file", "=", "fptr", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer._clean_ners": [[11, 23], ["logzero.logger.info", "set", "logzero.logger.info", "len", "len", "len"], "function", ["None"], ["def", "_clean_ners", "(", "ner_set", ")", ":", "\n", "    ", "\"\"\"\n    Remove entities/answers that are too long\n    \"\"\"", "\n", "logging", ".", "info", "(", "'Number of NER entities/answers before filtering: {}'", ".", "format", "(", "len", "(", "ner_set", ")", ")", ")", "\n", "\n", "new_ner_set", "=", "set", "(", "[", "(", "phrase_str", ",", "phrase_category", ")", "\n", "for", "phrase_str", ",", "phrase_category", "in", "ner_set", "\n", "if", "len", "(", "phrase_str", ")", "<=", "ANSWER_NUM_CHARS_ULIM", "]", ")", "\n", "\n", "logging", ".", "info", "(", "'Number of NER entities/answers after filtering: {}'", ".", "format", "(", "len", "(", "new_ner_set", ")", ")", ")", "\n", "return", "new_ner_set", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.convert_ner_rdd_to_set": [[24, 36], ["set", "ner_entity_gatherer._clean_ners", "ner_rdd.map().collect", "list", "utils.RandomNumberGenerator", "utils.RandomNumberGenerator.vanilla.shuffle", "set", "ner_rdd.map"], "function", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer._clean_ners"], ["", "def", "convert_ner_rdd_to_set", "(", "ner_rdd", ",", "nb_ner_ulim", ")", ":", "\n", "# For NER file, we only use the entity + category information (not the article IDs)", "\n", "    ", "ner_set", "=", "set", "(", "ner_rdd", ".", "map", "(", "lambda", "x", ":", "(", "x", ".", "phrase_str", ",", "x", ".", "phrase_category", ")", ")", ".", "collect", "(", ")", ")", "\n", "ner_set", "=", "_clean_ners", "(", "ner_set", ")", "\n", "\n", "if", "nb_ner_ulim", ":", "\n", "        ", "ner_lst", "=", "list", "(", "ner_set", ")", "\n", "rng", "=", "utils", ".", "RandomNumberGenerator", "(", ")", "\n", "rng", ".", "vanilla", ".", "shuffle", "(", "ner_lst", ")", "\n", "ner_set", "=", "set", "(", "ner_lst", "[", ":", "nb_ner_ulim", "]", ")", "\n", "\n", "", "return", "ner_set", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter.__init__": [[8, 17], ["text_preprocessor.TextPreprocessor", "utils.ElasticsearchConfig"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ",", "*", ",", "es_hosts", ",", "es_index_name", ",", "debug_save", ")", ":", "\n", "        ", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "debug_save", "=", "debug_save", "\n", "self", ".", "text_preprocessor", "=", "TextPreprocessor", "(", ")", "\n", "\n", "self", ".", "es_conf", "=", "ElasticsearchConfig", "(", "\n", "hosts", "=", "es_hosts", ",", "\n", "index_name", "=", "es_index_name", ",", "\n", "doc_type", "=", "'doc'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter._is_good_sentence": [[18, 21], ["len"], "methods", ["None"], ["", "def", "_is_good_sentence", "(", "self", ",", "sent", ")", ":", "\n", "# remove sentences that are very short (just do it based on number of characters)", "\n", "        ", "return", "len", "(", "sent", ")", ">=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter._wrangle_articles": [[22, 37], ["article_rdd.map", "new_sents.append", "ds_es_client.ESIndexWriter._is_good_sentence"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter._is_good_sentence"], ["", "def", "_wrangle_articles", "(", "self", ",", "article_rdd", ")", ":", "\n", "        ", "\"\"\"\n        Filter for good sentences,etc\n        \"\"\"", "\n", "def", "filter_sents", "(", "article", ")", ":", "\n", "            ", "new_sents", "=", "[", "]", "\n", "for", "sent_obj", "in", "article", ".", "sents", ":", "\n", "                ", "if", "not", "self", ".", "_is_good_sentence", "(", "sent_obj", ".", "text", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "new_sents", ".", "append", "(", "sent_obj", ")", "\n", "", "article", ".", "sents", "=", "new_sents", "\n", "return", "article", "\n", "\n", "", "return", "article_rdd", ".", "map", "(", "filter_sents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter._index_rdd_partition": [[39, 65], ["utils.ElasticsearchMagic.get_instance", "helpers.bulk", "ds_es_client.ESIndexWriter._index_rdd_partition.gendata"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.ElasticsearchMagic.get_instance"], ["", "def", "_index_rdd_partition", "(", "self", ",", "article_lst", ")", ":", "\n", "        ", "es_conf", "=", "self", ".", "es_conf", "\n", "es", "=", "ElasticsearchMagic", ".", "get_instance", "(", "'singleton'", ",", "hosts", "=", "[", "es_conf", ".", "hosts", "]", ")", "\n", "\n", "def", "gendata", "(", ")", ":", "\n", "            ", "for", "article", "in", "article_lst", ":", "\n", "                ", "for", "sent_obj", "in", "article", ".", "sents", ":", "\n", "                    ", "text_body", "=", "sent_obj", ".", "text", "\n", "\n", "yield", "{", "\n", "'_op_type'", ":", "'create'", ",", "# `create` will fail on duplicate _id", "\n", "\"_index\"", ":", "es_conf", ".", "index_name", ",", "\n", "\"_type\"", ":", "es_conf", ".", "doc_type", ",", "\n", "'_id'", ":", "sent_obj", ".", "id", ",", "\n", "\"_source\"", ":", "{", "\n", "'body'", ":", "text_body", ",", "\n", "'body_with_title'", ":", "'{} \\n {}'", ".", "format", "(", "article", ".", "title", ",", "text_body", ")", ",", "\n", "'article_id'", ":", "article", ".", "id", ",", "\n", "'article_title'", ":", "article", ".", "title", ",", "\n", "'entities'", ":", "json", ".", "dumps", "(", "sent_obj", ".", "ents", ")", ",", "\n", "'noun_chunks'", ":", "json", ".", "dumps", "(", "sent_obj", ".", "noun_chunks", ")", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "", "", "", "from", "elasticsearch6", "import", "helpers", "\n", "helpers", ".", "bulk", "(", "es", ",", "gendata", "(", ")", ",", "request_timeout", "=", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter._perform_es_index": [[66, 69], ["article_rdd.foreachPartition", "ds_es_client.ESIndexWriter._index_rdd_partition"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter._index_rdd_partition"], ["", "def", "_perform_es_index", "(", "self", ",", "article_rdd", ")", ":", "\n", "        ", "article_rdd", ".", "foreachPartition", "(", "\n", "lambda", "article_lst", ":", "self", ".", "_index_rdd_partition", "(", "article_lst", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter.run_job": [[70, 85], ["corpus_rdd.count", "print", "corpus_rdd.map", "ds_es_client.ESIndexWriter._wrangle_articles", "ds_es_client.ESIndexWriter.map().reduce", "print", "metric_fptr.flush", "ds_es_client.ESIndexWriter._create_es_index", "ds_es_client.ESIndexWriter._perform_es_index", "data_models.Article.deserialize_json", "ds_es_client.ESIndexWriter.map", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter._wrangle_articles", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter._create_es_index", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter._perform_es_index", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.Article.deserialize_json"], ["", "def", "run_job", "(", "self", ",", "corpus_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "total_nb_articles", "=", "corpus_rdd", ".", "count", "(", ")", "\n", "print", "(", "'Number of articles in corpus: {}'", ".", "format", "(", "total_nb_articles", ")", ",", "file", "=", "metric_fptr", ")", "\n", "\n", "article_rdd", "=", "corpus_rdd", ".", "map", "(", "lambda", "x", ":", "Article", ".", "deserialize_json", "(", "x", ")", ")", "\n", "article_rdd", "=", "self", ".", "_wrangle_articles", "(", "article_rdd", ")", "\n", "\n", "nb_sentences_to_index", "=", "article_rdd", ".", "map", "(", "lambda", "x", ":", "len", "(", "x", ".", "sents", ")", ")", ".", "reduce", "(", "add", ")", "\n", "print", "(", "'Number of sentences to index: {}'", ".", "format", "(", "nb_sentences_to_index", ")", ",", "file", "=", "metric_fptr", ")", "\n", "metric_fptr", ".", "flush", "(", ")", "\n", "\n", "# TODO generate some statistics on number of characters", "\n", "\n", "self", ".", "_create_es_index", "(", ")", "\n", "self", ".", "_perform_es_index", "(", "article_rdd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ds_es_client.ESIndexWriter._create_es_index": [[86, 207], ["utils.ElasticsearchMagic.get_instance", "utils.ElasticsearchMagic.get_instance.indices.exists", "utils.ElasticsearchMagic.get_instance.indices.create", "utils.ElasticsearchMagic.get_instance.indices.open", "utils.ElasticsearchMagic.get_instance.indices.delete", "dict"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.ElasticsearchMagic.get_instance"], ["", "def", "_create_es_index", "(", "self", ")", ":", "\n", "        ", "es_conf", "=", "self", ".", "es_conf", "\n", "es", "=", "ElasticsearchMagic", ".", "get_instance", "(", "'singleton'", ",", "hosts", "=", "[", "es_conf", ".", "hosts", "]", ")", "\n", "\n", "# delete index if exists", "\n", "if", "es", ".", "indices", ".", "exists", "(", "index", "=", "es_conf", ".", "index_name", ")", ":", "\n", "            ", "es", ".", "indices", ".", "delete", "(", "index", "=", "es_conf", ".", "index_name", ")", "\n", "\n", "", "settings", "=", "{", "\n", "\"number_of_shards\"", ":", "9", ",", "\n", "\"number_of_replicas\"", ":", "1", ",", "\n", "\"similarity\"", ":", "{", "\n", "\"default\"", ":", "{", "\n", "\"type\"", ":", "\"BM25\"", ",", "\n", "\"k1\"", ":", "0.1", ",", "# default is 1.2. Value of 0.0 means that it only depends on IDF (not TF).", "\n", "\"b\"", ":", "0.1", ",", "# default is 0.75. Value of 0.0 disables length-normalization.", "\n", "}", "\n", "}", ",", "\n", "\"analysis\"", ":", "{", "\n", "\"filter\"", ":", "{", "\n", "\"english_possessive_stemmer\"", ":", "{", "\n", "\"name\"", ":", "\"possessive_english\"", ",", "\n", "\"type\"", ":", "\"stemmer\"", "\n", "}", ",", "\n", "\"english_stop\"", ":", "{", "\n", "\"stopwords\"", ":", "\"_english_\"", ",", "\n", "\"type\"", ":", "\"stop\"", "\n", "}", ",", "\n", "\"kstem_stemmer\"", ":", "{", "\n", "# kstem is less aggressive than porter, e.g. \"dogs\" => \"dog\" in porter, but not in kstem", "\n", "\"name\"", ":", "\"light_english\"", ",", "\n", "\"type\"", ":", "\"stemmer\"", "\n", "}", ",", "\n", "\"english_porter_stemmer\"", ":", "{", "\n", "\"name\"", ":", "\"english\"", ",", "# porter, see StemmerTokenFilterFactory.java", "\n", "\"type\"", ":", "\"stemmer\"", "\n", "}", "\n", "}", ",", "\n", "\"analyzer\"", ":", "{", "\n", "\"porter_eng_analyzer\"", ":", "{", "\n", "# https://stackoverflow.com/questions/33945796/understanding-analyzers-filters-and-queries-in-elasticsearch", "\n", "\"filter\"", ":", "[", "\n", "\"standard\"", ",", "# does nothing: https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-tokenfilter.html", "\n", "\"asciifolding\"", ",", "\n", "\"english_possessive_stemmer\"", ",", "\n", "\"lowercase\"", ",", "\n", "\"english_stop\"", ",", "\n", "\"english_porter_stemmer\"", "\n", "]", ",", "\n", "\"tokenizer\"", ":", "\"standard\"", "\n", "}", ",", "\n", "\"kstem_eng_analyzer\"", ":", "{", "\n", "\"filter\"", ":", "[", "\n", "\"standard\"", ",", "\n", "\"asciifolding\"", ",", "\n", "\"english_possessive_stemmer\"", ",", "\n", "\"lowercase\"", ",", "\n", "\"english_stop\"", ",", "\n", "\"kstem_stemmer\"", "\n", "]", ",", "\n", "\"tokenizer\"", ":", "\"standard\"", "\n", "}", ",", "\n", "\"possessive_english_analyzer\"", ":", "{", "\n", "# no stemming", "\n", "\"filter\"", ":", "[", "\n", "\"standard\"", ",", "\n", "\"asciifolding\"", ",", "\n", "\"english_possessive_stemmer\"", ",", "\n", "\"lowercase\"", ",", "\n", "\"english_stop\"", ",", "\n", "]", ",", "\n", "\"tokenizer\"", ":", "\"standard\"", "\n", "}", ",", "\n", "\"standard_english_analyzer\"", ":", "{", "\n", "\"type\"", ":", "\"standard\"", ",", "\n", "\"stopwords\"", ":", "\"_english_\"", "\n", "}", ",", "\n", "}", "\n", "}", "\n", "}", "\n", "\n", "mappings_for_analyzed_text_field", "=", "{", "\n", "\"type\"", ":", "\"text\"", ",", "\n", "\"index\"", ":", "True", ",", "\n", "\"analyzer\"", ":", "\"porter_eng_analyzer\"", ",", "\n", "\"fields\"", ":", "{", "\n", "\"possessive\"", ":", "{", "\"type\"", ":", "\"text\"", ",", "\"analyzer\"", ":", "\"possessive_english_analyzer\"", "}", ",", "\n", "\"kstem\"", ":", "{", "\"type\"", ":", "\"text\"", ",", "\"analyzer\"", ":", "\"kstem_eng_analyzer\"", "}", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "mappings", "=", "{", "\n", "\"doc\"", ":", "{", "\n", "\"properties\"", ":", "{", "\n", "\"entities\"", ":", "{", "\n", "\"type\"", ":", "\"text\"", ",", "# json string", "\n", "\"index\"", ":", "False", ",", "\n", "}", ",", "\n", "\"noun_chunks\"", ":", "{", "\n", "\"type\"", ":", "\"text\"", ",", "# json string", "\n", "\"index\"", ":", "False", ",", "\n", "}", ",", "\n", "\"article_title\"", ":", "{", "\n", "\"type\"", ":", "\"keyword\"", ",", "\n", "\"index\"", ":", "False", ",", "\n", "}", ",", "\n", "\"article_id\"", ":", "{", "\n", "\"type\"", ":", "\"integer\"", ",", "\n", "\"index\"", ":", "True", ",", "\n", "}", ",", "\n", "\"body\"", ":", "mappings_for_analyzed_text_field", ",", "\n", "\"body_with_title\"", ":", "mappings_for_analyzed_text_field", ",", "\n", "}", "\n", "}", "\n", "}", "\n", "\n", "es", ".", "indices", ".", "create", "(", "es_conf", ".", "index_name", ",", "body", "=", "dict", "(", "\n", "mappings", "=", "mappings", ",", "\n", "settings", "=", "settings", ")", ")", "\n", "\n", "es", ".", "indices", ".", "open", "(", "es_conf", ".", "index_name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator.__init__": [[9, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "whxx_ngram_table", ",", "text_preprocessor", ")", ":", "\n", "        ", "self", ".", "whxx_ngram_table", "=", "whxx_ngram_table", "\n", "self", ".", "text_preprocessor", "=", "text_preprocessor", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator.make_cloze_style": [[13, 23], ["text.replace", "question_generator.QuestionGeneratorError"], "methods", ["None"], ["", "def", "make_cloze_style", "(", "self", ",", "text", ",", "answer_str", ",", "mask", ")", ":", "\n", "# replace ALL occurrences", "\n", "        ", "new_text", "=", "text", ".", "replace", "(", "answer_str", ",", "mask", ")", "\n", "\n", "if", "new_text", "==", "text", ":", "\n", "            ", "raise", "QuestionGeneratorError", "(", "\n", "'Failed to convert cloze style, did not replace anything with answer=\"{}\": {}'", ".", "format", "(", "\n", "answer_str", ",", "text", ")", ")", "\n", "\n", "", "return", "new_text", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator._replace_with_question_mark_ending": [[24, 26], ["re.sub"], "methods", ["None"], ["", "def", "_replace_with_question_mark_ending", "(", "self", ",", "text", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "r'\\W*$'", ",", "'?'", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator._post_questionify": [[27, 32], ["text.strip.strip.strip", "question_generator.QuestionGenerator._replace_with_question_mark_ending", "text[].upper"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator._replace_with_question_mark_ending"], ["", "def", "_post_questionify", "(", "self", ",", "text", ")", ":", "\n", "        ", "text", "=", "text", ".", "strip", "(", ")", "\n", "# capitalize() does not work here, because it lowercase the rest of the sentence", "\n", "text", "=", "text", "[", "0", "]", ".", "upper", "(", ")", "+", "text", "[", "1", ":", "]", "\n", "return", "self", ".", "_replace_with_question_mark_ending", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator._generate_template_awb": [[33, 51], ["re.sub", "re.sub", "question_generator.QuestionGenerator._post_questionify", "re.escape"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator._post_questionify"], ["", "def", "_generate_template_awb", "(", "self", ",", "text", ",", "answer_str", ",", "sampled_ngram", ")", ":", "\n", "        ", "\"\"\"\n        If cloze-style is \u201c[FragmentA] [PERSON] [FragmentB]\u201d, then:\n\n        \"[FragmentA], who [FragmentB]?\" - AWB\n        \"\"\"", "\n", "\n", "# need to use \\W+ to ensure word boundaries and not part of a word", "\n", "template", "=", "re", ".", "sub", "(", "\n", "r'\\W+{}\\W+'", ".", "format", "(", "re", ".", "escape", "(", "answer_str", ")", ")", ",", "\n", "', {} '", ".", "format", "(", "sampled_ngram", ")", ",", "\n", "' '", "+", "text", "+", "' '", ")", "\n", "\n", "# remove leading comma if the replacement was the first word", "\n", "template", "=", "re", ".", "sub", "(", "r'^,\\s*'", ",", "''", ",", "template", ")", "\n", "template", "=", "self", ".", "_post_questionify", "(", "template", ")", "\n", "\n", "return", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator._generate_template_wba": [[52, 70], ["re.sub", "re.sub", "question_generator.QuestionGenerator._post_questionify", "re.escape"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator._post_questionify"], ["", "def", "_generate_template_wba", "(", "self", ",", "text", ",", "answer_str", ",", "sampled_ngram", ")", ":", "\n", "        ", "\"\"\"\n        If cloze-style is \u201c[FragmentA] [PERSON] [FragmentB]\u201d, then:\n\n        \"Who [FragmentB] [FragmentA]?\" - WBA\n        \"\"\"", "\n", "# need to use \\W+ to ensure word boundaries and not part of a word", "\n", "template", "=", "re", ".", "sub", "(", "\n", "r'^(.*?)\\W+{}\\W+(.*?)\\W*$'", ".", "format", "(", "re", ".", "escape", "(", "answer_str", ")", ")", ",", "\n", "r'{} \\2, \\1'", ".", "format", "(", "sampled_ngram", ")", ",", "\n", "' '", "+", "text", "+", "' '", ")", "\n", "\n", "template", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "template", ")", "# regex above may have created double spaces", "\n", "template", "=", "self", ".", "_post_questionify", "(", "template", ")", "\n", "\n", "# self._check_template(template, answer_str, text)", "\n", "\n", "return", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator.make_template_qg_styles": [[71, 85], ["question_generator.QuestionGenerator.whxx_ngram_table.rand_sample_ngram", "question_generator.QuestionGenerator.text_preprocessor.findall_substr", "question_generator.QuestionGeneratorError", "question_generator.QuestionGenerator._generate_template_awb", "question_generator.QuestionGenerator._generate_template_wba"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.whxx_ngram_table.WhxxNgramTable.rand_sample_ngram", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.findall_substr", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator._generate_template_awb", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator._generate_template_wba"], ["", "def", "make_template_qg_styles", "(", "self", ",", "text", ",", "answer_str", ",", "ner_category", ",", "rng", ")", ":", "\n", "        ", "if", "not", "self", ".", "text_preprocessor", ".", "findall_substr", "(", "answer_str", ",", "text", ")", ":", "\n", "            ", "raise", "QuestionGeneratorError", "(", "\n", "'Failed to convert template QG style, answer=\"{}\" not in question-text: {}'", ".", "format", "(", "\n", "answer_str", ",", "text", ")", ")", "\n", "\n", "", "sampled_ngram", "=", "self", ".", "whxx_ngram_table", ".", "rand_sample_ngram", "(", "rng", ".", "np", ",", "ner_category", ")", "\n", "\n", "styles", "=", "{", "\n", "QuestionStyle", ".", "TEMPLATE_AWB", ":", "self", ".", "_generate_template_awb", "(", "text", ",", "answer_str", ",", "sampled_ngram", ")", ",", "\n", "QuestionStyle", ".", "TEMPLATE_WBA", ":", "self", ".", "_generate_template_wba", "(", "text", ",", "answer_str", ",", "sampled_ngram", ")", ",", "\n", "}", "\n", "\n", "return", "styles", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.RcQuestion.__init__": [[44, 51], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", ",", "qid", "=", "None", ",", "question", "=", "None", ",", "context", "=", "None", ",", "article_title", "=", "None", ",", "answers", "=", "None", ")", ":", "\n", "        ", "self", ".", "qid", "=", "qid", "\n", "self", ".", "question", "=", "question", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "answers", "=", "answers", "# list of {'text': \"foobar\", \"answer_start\": 48}", "\n", "\n", "self", ".", "article_title", "=", "article_title", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.RcQuestion.jsonify": [[52, 54], ["json.dumps"], "methods", ["None"], ["", "def", "jsonify", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.RcQuestion.deserialize_json": [[55, 62], ["json.loads", "data_models.RcQuestion", "json.loads.items"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "deserialize_json", "(", "cls", ",", "json_str", ")", ":", "\n", "        ", "dct", "=", "json", ".", "loads", "(", "json_str", ")", "\n", "question", "=", "RcQuestion", "(", ")", "\n", "for", "k", ",", "v", "in", "dct", ".", "items", "(", ")", ":", "\n", "            ", "question", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "", "return", "question", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.Article.__init__": [[65, 67], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.Article.import_from": [[68, 74], ["int"], "methods", ["None"], ["", "def", "import_from", "(", "self", ",", "raw_row", ")", ":", "\n", "        ", "self", ".", "text", "=", "raw_row", "[", "'text'", "]", "\n", "self", ".", "id", "=", "int", "(", "raw_row", "[", "'id'", "]", ")", "\n", "self", ".", "title", "=", "raw_row", "[", "'title'", "]", "\n", "\n", "self", ".", "sents", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.Article.deserialize_json": [[75, 88], ["json.loads", "data_models.Article", "json.loads.items", "new_sents.append", "data_models.Sentence"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "deserialize_json", "(", "cls", ",", "json_str", ")", ":", "\n", "        ", "dct", "=", "json", ".", "loads", "(", "json_str", ")", "\n", "article", "=", "Article", "(", ")", "\n", "for", "k", ",", "v", "in", "dct", ".", "items", "(", ")", ":", "\n", "            ", "article", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n", "", "new_sents", "=", "[", "]", "\n", "for", "sent", "in", "article", ".", "sents", ":", "\n", "            ", "new_sents", ".", "append", "(", "Sentence", "(", "sent", "[", "'id'", "]", ",", "sent", "[", "'text'", "]", ",", "sent", "[", "'ents'", "]", ",", "sent", "[", "'noun_chunks'", "]", ")", ")", "\n", "", "article", ".", "sents", "=", "new_sents", "\n", "\n", "return", "article", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.Article.__repr__": [[89, 91], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.Article.jsonify": [[92, 94], ["json.dumps"], "methods", ["None"], ["", "def", "jsonify", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.Sentence.__init__": [[96, 104], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "text", ",", "ents", ",", "noun_chunks", ")", ":", "\n", "        ", "\"\"\"\n        noun chunks: https://nlp.stanford.edu/software/dependencies_manual.pdf\n        \"\"\"", "\n", "self", ".", "id", "=", "id", "# note that this is sentence ID, and not article_id", "\n", "self", ".", "text", "=", "text", "\n", "self", ".", "ents", "=", "[", "(", "e", "[", "0", "]", ",", "e", "[", "1", "]", ")", "for", "e", "in", "ents", "]", "\n", "self", ".", "noun_chunks", "=", "[", "(", "e", "[", "0", "]", ",", "e", "[", "1", "]", ")", "for", "e", "in", "noun_chunks", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.Sentence.get_phrases": [[105, 111], ["text_preprocessor.TextPreprocessor.get_phrases", "text_preprocessor.TextPreprocessor.get_phrases"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.get_phrases", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.get_phrases"], ["", "def", "get_phrases", "(", "self", ",", "phrase_mode", ")", ":", "\n", "        ", "if", "phrase_mode", "is", "PhraseMode", ".", "NER_ONLY", ":", "\n", "# don't pass it any noun_chunks", "\n", "            ", "return", "TextPreprocessor", ".", "get_phrases", "(", "entities", "=", "self", ".", "ents", ",", "noun_chunks", "=", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "TextPreprocessor", ".", "get_phrases", "(", "entities", "=", "self", ".", "ents", ",", "noun_chunks", "=", "self", ".", "noun_chunks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.Sentence.__repr__": [[112, 114], ["str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.PhraseObj.__init__": [[117, 120], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "phrase_str", ",", "phrase_category", ")", ":", "\n", "        ", "self", ".", "phrase_str", "=", "phrase_str", "\n", "self", ".", "phrase_category", "=", "phrase_category", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.PhraseObj.import_from": [[121, 130], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "import_from", "(", "cls", ",", "row", ")", ":", "\n", "        ", "\"\"\"\n        Example format: [[\"0 to 6 years\", \"DATE\"], [5809465, 53318614, 49544471, 27237145, 54568155]]\n        \"\"\"", "\n", "phrase_pair", "=", "row", "[", "0", "]", "\n", "\n", "phrase", "=", "cls", "(", "phrase_pair", "[", "0", "]", ",", "phrase_pair", "[", "1", "]", ")", "\n", "return", "phrase", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.PhraseObj.__repr__": [[131, 133], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.DsDatum.__init__": [[136, 142], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "qid", ",", "styled_questions", ",", "context", ",", "answers", ")", ":", "\n", "        ", "self", ".", "qid", "=", "qid", "\n", "self", ".", "styled_questions", "=", "styled_questions", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "answers", "=", "answers", "\n", "self", ".", "meta", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.DsDatum.__repr__": [[143, 145], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.DsDatum.jsonify": [[146, 148], ["json.dumps"], "methods", ["None"], ["", "def", "jsonify", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.DsDatum.jsonify_single_style": [[149, 155], ["copy.deepcopy", "json.dumps"], "methods", ["None"], ["", "def", "jsonify_single_style", "(", "self", ",", "question_style", ")", ":", "\n", "        ", "dct", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "dct", "[", "'question'", "]", "=", "self", ".", "styled_questions", "[", "question_style", ".", "value", "]", "\n", "del", "dct", "[", "'styled_questions'", "]", "\n", "\n", "return", "json", ".", "dumps", "(", "dct", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.QueriesPerArticleObj.__init__": [[158, 165], ["int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "article_id", ",", "article_title", ",", "article_raw", ",", "article_phrases", ",", "filtered_sents", ",", "phrase", ")", ":", "\n", "        ", "self", ".", "article_id", "=", "int", "(", "article_id", ")", "\n", "self", ".", "article_title", "=", "article_title", "\n", "self", ".", "article_raw", "=", "article_raw", "\n", "self", ".", "article_phrases", "=", "article_phrases", "\n", "self", ".", "filtered_sents", "=", "filtered_sents", "\n", "self", ".", "phrase", "=", "phrase", "# answer phrase", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.QueriesPerArticleObj.__repr__": [[166, 168], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.squad_ner_creator.SquadNerCreator.__init__": [[29, 35], ["text_preprocessor.TextPreprocessor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ",", "*", ",", "debug_save", ",", "num_partitions", ")", ":", "\n", "        ", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "debug_save", "=", "debug_save", "\n", "self", ".", "num_partitions", "=", "num_partitions", "\n", "\n", "self", ".", "text_preprocessor", "=", "TextPreprocessor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.squad_ner_creator.SquadNerCreator._process_row": [[36, 62], ["squad_ner_creator.SquadNerCreator.text_preprocessor.compute_ner", "ans_struct[].lower", "new_answers.append", "ent_str.lower"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.compute_ner"], ["", "def", "_process_row", "(", "self", ",", "question", ")", ":", "\n", "        ", "\"\"\"\n        1. Run NER on `context` field\n        2. Set `ner_category` for answers\n        3. Discard answers that are not entities\n        \"\"\"", "\n", "\n", "# this returns a list, e.g. [('today', 'DATE'), ('Patrick', 'PERSON')]", "\n", "ent_lst", "=", "self", ".", "text_preprocessor", ".", "compute_ner", "(", "question", ".", "context", ")", "\n", "\n", "ent_dct", "=", "{", "}", "\n", "for", "ent_str", ",", "ner_category", "in", "ent_lst", ":", "\n", "# perform uncasing", "\n", "            ", "ent_dct", "[", "ent_str", ".", "lower", "(", ")", "]", "=", "ner_category", "\n", "\n", "", "new_answers", "=", "[", "]", "\n", "for", "ans_struct", "in", "question", ".", "answers", ":", "\n", "            ", "ans_text", "=", "ans_struct", "[", "'text'", "]", ".", "lower", "(", ")", "# perform uncasing", "\n", "if", "ans_text", "not", "in", "ent_dct", ":", "\n", "                ", "continue", "\n", "\n", "", "ans_struct", "[", "'ner_category'", "]", "=", "ent_dct", "[", "ans_text", "]", "\n", "new_answers", ".", "append", "(", "ans_struct", ")", "\n", "\n", "", "question", ".", "answers", "=", "new_answers", "\n", "return", "question", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.squad_ner_creator.SquadNerCreator._print_output_stats": [[63, 78], ["print", "question_rdd.map().reduceByKey().collectAsMap", "sum", "print", "sorted", "question_rdd.map().reduceByKey().collectAsMap.values", "question_rdd.map().reduceByKey().collectAsMap.items", "print", "question_rdd.count", "question_rdd.map().reduceByKey", "question_rdd.map"], "methods", ["None"], ["", "def", "_print_output_stats", "(", "self", ",", "question_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "print", "(", "'Count of new question_rdd: {}'", ".", "format", "(", "question_rdd", ".", "count", "(", ")", ")", ",", "file", "=", "metric_fptr", ")", "\n", "\n", "ner_category_counts", "=", "question_rdd", ".", "map", "(", "\n", "lambda", "x", ":", "(", "x", ".", "answers", "[", "0", "]", "[", "'ner_category'", "]", ",", "1", ")", "\n", ")", ".", "reduceByKey", "(", "add", ")", ".", "collectAsMap", "(", ")", "\n", "\n", "total_count", "=", "sum", "(", "ner_category_counts", ".", "values", "(", ")", ")", "\n", "print", "(", "file", "=", "metric_fptr", ")", "\n", "for", "ner_category", ",", "count", "in", "sorted", "(", "ner_category_counts", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'Number of samples with NER category \"{}\": {} / {} ({:.2f}%)'", ".", "format", "(", "\n", "ner_category", ",", "\n", "count", ",", "\n", "total_count", ",", "\n", "100.0", "*", "count", "/", "total_count", ")", ",", "file", "=", "metric_fptr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.squad_ner_creator.SquadNerCreator.run_job": [[81, 90], ["print", "question_rdd.map().filter.map().filter.map().filter", "question_rdd.map().filter.map().filter.map().saveAsTextFile", "squad_ner_creator.SquadNerCreator._print_output_stats", "question_rdd.map().filter.map().filter.count", "question_rdd.map().filter.map().filter.map", "question_rdd.map().filter.map().filter.map", "len", "squad_ner_creator.SquadNerCreator._process_row", "x.jsonify"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.squad_ner_creator.SquadNerCreator._print_output_stats", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.squad_ner_creator.SquadNerCreator._process_row", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.DsDatum.jsonify"], ["", "", "def", "run_job", "(", "self", ",", "sc", ",", "question_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "print", "(", "'Count of original question_rdd: {}'", ".", "format", "(", "question_rdd", ".", "count", "(", ")", ")", ",", "file", "=", "metric_fptr", ")", "\n", "\n", "question_rdd", "=", "question_rdd", ".", "map", "(", "lambda", "x", ":", "self", ".", "_process_row", "(", "x", ")", ")", ".", "filter", "(", "lambda", "x", ":", "len", "(", "x", ".", "answers", ")", ">=", "1", ")", "\n", "\n", "final_output_dir", "=", "self", ".", "output_dir", "# normally, we do os.path.join(self.output_dir, <...>)", "\n", "question_rdd", ".", "map", "(", "lambda", "x", ":", "x", ".", "jsonify", "(", ")", ")", ".", "saveAsTextFile", "(", "final_output_dir", ")", "\n", "\n", "self", ".", "_print_output_stats", "(", "question_rdd", ",", "metric_fptr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.whxx_ngram_table.WhxxNgramTable.__init__": [[5, 8], ["whxx_ngram_table.WhxxNgramTable._compute_freqs"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.whxx_ngram_table.WhxxNgramTable._compute_freqs"], ["    ", "def", "__init__", "(", "self", ",", "counts", ")", ":", "\n", "        ", "self", ".", "counts", "=", "counts", "\n", "self", ".", "freqs", "=", "self", ".", "_compute_freqs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.whxx_ngram_table.WhxxNgramTable.__repr__": [[24, 26], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.whxx_ngram_table.WhxxNgramTable._compute_freqs": [[27, 38], ["whxx_ngram_table.WhxxNgramTable.counts.items", "sum", "ngram2count.items", "numpy.isclose", "ngram2count.values", "sum", "float", "ngram2freq.values"], "methods", ["None"], ["", "def", "_compute_freqs", "(", "self", ")", ":", "\n", "        ", "freqs", "=", "{", "}", "\n", "for", "category", ",", "ngram2count", "in", "self", ".", "counts", ".", "items", "(", ")", ":", "\n", "            ", "ngram2freq", "=", "{", "}", "\n", "total", "=", "sum", "(", "ngram2count", ".", "values", "(", ")", ")", "\n", "\n", "for", "ngram", ",", "count", "in", "ngram2count", ".", "items", "(", ")", ":", "\n", "                ", "ngram2freq", "[", "ngram", "]", "=", "float", "(", "count", ")", "/", "total", "\n", "", "freqs", "[", "category", "]", "=", "ngram2freq", "\n", "assert", "(", "np", ".", "isclose", "(", "sum", "(", "ngram2freq", ".", "values", "(", ")", ")", ",", "1.0", ")", ")", "\n", "", "return", "freqs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.whxx_ngram_table.WhxxNgramTable.rand_sample_ngram": [[39, 46], ["np_rng.choice", "list", "ngram2freq.keys", "list", "ngram2freq.values"], "methods", ["None"], ["", "def", "rand_sample_ngram", "(", "self", ",", "np_rng", ",", "ner_category", ")", ":", "\n", "        ", "if", "ner_category", "not", "in", "self", ".", "freqs", ":", "\n", "            ", "return", "'what'", "\n", "\n", "", "ngram2freq", "=", "self", ".", "freqs", "[", "ner_category", "]", "\n", "ngram", "=", "np_rng", ".", "choice", "(", "list", "(", "ngram2freq", ".", "keys", "(", ")", ")", ",", "p", "=", "list", "(", "ngram2freq", ".", "values", "(", ")", ")", ")", "\n", "return", "ngram", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.whxx_ngram_table.WhxxNgramTable.import_from_toml": [[47, 51], ["toml.loads", "whxx_ngram_table.WhxxNgramTable", "fptr.read"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "import_from_toml", "(", "cls", ",", "fptr", ")", ":", "\n", "        ", "counts", "=", "toml", ".", "loads", "(", "fptr", ".", "read", "(", ")", ")", "\n", "return", "WhxxNgramTable", "(", "counts", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.help_print_histogram": [[8, 21], ["sum", "range", "print", "metric_fptr.flush", "len", "print"], "methods", ["None"], ["", "def", "help_print_histogram", "(", "self", ",", "metric_fptr", ",", "buckets", ",", "histogram", ",", "description", ")", ":", "\n", "        ", "tot", "=", "sum", "(", "histogram", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "histogram", ")", ")", ":", "\n", "            ", "print", "(", "'{}[{:.3f}, {:.3f}): {} / {} ({:.2f}%)'", ".", "format", "(", "\n", "description", ",", "\n", "buckets", "[", "i", "]", ",", "\n", "buckets", "[", "i", "+", "1", "]", ",", "\n", "histogram", "[", "i", "]", ",", "\n", "tot", ",", "\n", "100.0", "*", "histogram", "[", "i", "]", "/", "tot", ")", ",", "file", "=", "metric_fptr", ")", "\n", "", "print", "(", "file", "=", "metric_fptr", ")", "\n", "metric_fptr", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_context_stats": [[22, 27], ["ds_data_rdd.map().histogram", "stat_computation.StatComputation.help_print_histogram", "ds_data_rdd.map", "len", "x.context.split"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.help_print_histogram"], ["", "def", "_print_context_stats", "(", "self", ",", "ds_data_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "nb_bins", "=", "10", "\n", "buckets", ",", "histogram", "=", "ds_data_rdd", ".", "map", "(", "lambda", "x", ":", "len", "(", "x", ".", "context", ".", "split", "(", ")", ")", ")", ".", "histogram", "(", "nb_bins", ")", "\n", "\n", "self", ".", "help_print_histogram", "(", "metric_fptr", ",", "buckets", ",", "histogram", ",", "'Histogram of contexts with words-count='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_question_stats": [[28, 35], ["ds_data_rdd.map().histogram", "stat_computation.StatComputation.help_print_histogram", "ds_data_rdd.map", "len", "x.styled_questions[].split"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.help_print_histogram"], ["", "def", "_print_question_stats", "(", "self", ",", "ds_data_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "nb_bins", "=", "10", "\n", "buckets", ",", "histogram", "=", "ds_data_rdd", ".", "map", "(", "\n", "lambda", "x", ":", "len", "(", "x", ".", "styled_questions", "[", "QuestionStyle", ".", "CLOZE_GENERIC", ".", "value", "]", ".", "split", "(", ")", ")", "\n", ")", ".", "histogram", "(", "nb_bins", ")", "\n", "\n", "self", ".", "help_print_histogram", "(", "metric_fptr", ",", "buckets", ",", "histogram", ",", "'Histogram of questions with words-count='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_answer_stats": [[36, 43], ["ds_data_rdd.map().histogram", "stat_computation.StatComputation.help_print_histogram", "ds_data_rdd.map", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.help_print_histogram"], ["", "def", "_print_answer_stats", "(", "self", ",", "ds_data_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "nb_bins", "=", "10", "\n", "buckets", ",", "histogram", "=", "ds_data_rdd", ".", "map", "(", "\n", "lambda", "x", ":", "len", "(", "x", ".", "answers", "[", "0", "]", "[", "'text'", "]", ")", "\n", ")", ".", "histogram", "(", "nb_bins", ")", "\n", "\n", "self", ".", "help_print_histogram", "(", "metric_fptr", ",", "buckets", ",", "histogram", ",", "'Histogram of answers with chars-count='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_backfill_stats": [[44, 57], ["ds_data_rdd.map().histogram", "stat_computation.StatComputation.help_print_histogram", "ds_data_rdd.map"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.help_print_histogram"], ["", "def", "_print_backfill_stats", "(", "self", ",", "ds_data_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "default_nb_bins", "=", "10", "\n", "\n", "for", "field", ",", "nb_bins", "in", "[", "\n", "(", "'backfill_nb_sents'", ",", "5", ")", ",", "\n", "(", "'backfill_nb_articles'", ",", "default_nb_bins", ")", ",", "\n", "(", "'es_rank'", ",", "default_nb_bins", ")", ",", "\n", "(", "'es_score'", ",", "default_nb_bins", ")", "]", ":", "\n", "            ", "buckets", ",", "histogram", "=", "ds_data_rdd", ".", "map", "(", "\n", "lambda", "x", ":", "x", ".", "meta", "[", "field", "]", "\n", ")", ".", "histogram", "(", "nb_bins", ")", "\n", "\n", "self", ".", "help_print_histogram", "(", "metric_fptr", ",", "buckets", ",", "histogram", ",", "'Histogram of meta field {}='", ".", "format", "(", "field", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_article_diversity_stats_helper": [[58, 67], ["ds_data_rdd.map().reduceByKey().values", "ds_data_rdd.map().reduceByKey().values.histogram", "stat_computation.StatComputation.help_print_histogram", "ds_data_rdd.map().reduceByKey", "ds_data_rdd.map"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.help_print_histogram"], ["", "", "def", "_print_article_diversity_stats_helper", "(", "self", ",", "meta_field", ",", "ds_data_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "nb_bins", "=", "10", "\n", "\n", "row_counts", "=", "ds_data_rdd", ".", "map", "(", "lambda", "x", ":", "(", "x", ".", "meta", "[", "meta_field", "]", "[", "'article_id'", "]", ",", "1", ")", ")", ".", "reduceByKey", "(", "add", ")", ".", "values", "(", ")", "\n", "buckets", ",", "histogram", "=", "row_counts", ".", "histogram", "(", "nb_bins", ")", "\n", "\n", "self", ".", "help_print_histogram", "(", "\n", "metric_fptr", ",", "buckets", ",", "histogram", ",", "\n", "'Article diversity: number of {}.article_id with example-count='", ".", "format", "(", "meta_field", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_article_diversity_stats": [[68, 71], ["stat_computation.StatComputation._print_article_diversity_stats_helper"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_article_diversity_stats_helper"], ["", "def", "_print_article_diversity_stats", "(", "self", ",", "ds_data_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "for", "meta_field", "in", "[", "'question'", ",", "'context'", "]", ":", "\n", "            ", "self", ".", "_print_article_diversity_stats_helper", "(", "meta_field", ",", "ds_data_rdd", ",", "metric_fptr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.print_phrase_category_counts": [[73, 85], ["sum", "print", "sorted", "print", "metric_fptr.flush", "phrase_category_counts.values", "phrase_category_counts.items", "print"], "methods", ["None"], ["", "", "def", "print_phrase_category_counts", "(", "self", ",", "metric_fptr", ",", "phrase_category_counts", ",", "description", ")", ":", "\n", "        ", "total_count", "=", "sum", "(", "phrase_category_counts", ".", "values", "(", ")", ")", "\n", "print", "(", "file", "=", "metric_fptr", ")", "\n", "for", "phrase_category", ",", "count", "in", "sorted", "(", "phrase_category_counts", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'{} with NER category \"{}\": {} / {} ({:.2f}%)'", ".", "format", "(", "\n", "description", ",", "\n", "phrase_category", ",", "\n", "count", ",", "\n", "total_count", ",", "\n", "100.0", "*", "count", "/", "total_count", ")", ",", "file", "=", "metric_fptr", ")", "\n", "", "print", "(", "file", "=", "metric_fptr", ")", "\n", "metric_fptr", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.print_output_stats": [[86, 103], ["print", "print", "ds_data_rdd.map().reduceByKey().collectAsMap", "stat_computation.StatComputation.print_phrase_category_counts", "stat_computation.StatComputation._print_context_stats", "stat_computation.StatComputation._print_question_stats", "stat_computation.StatComputation._print_answer_stats", "stat_computation.StatComputation._print_backfill_stats", "stat_computation.StatComputation._print_article_diversity_stats", "ds_data_rdd.count", "ds_data_rdd.map().reduceByKey", "ds_data_rdd.map"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.print_phrase_category_counts", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_context_stats", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_question_stats", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_answer_stats", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_backfill_stats", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation._print_article_diversity_stats"], ["", "def", "print_output_stats", "(", "self", ",", "ds_data_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "print", "(", "file", "=", "metric_fptr", ")", "\n", "print", "(", "'Count of ds_data_rdd: {}'", ".", "format", "(", "ds_data_rdd", ".", "count", "(", ")", ")", ",", "file", "=", "metric_fptr", ")", "\n", "\n", "phrase_category_counts", "=", "ds_data_rdd", ".", "map", "(", "\n", "lambda", "x", ":", "(", "x", ".", "meta", "[", "'answer_phrase_category'", "]", ",", "1", ")", "\n", ")", ".", "reduceByKey", "(", "add", ")", ".", "collectAsMap", "(", ")", "\n", "\n", "self", ".", "print_phrase_category_counts", "(", "metric_fptr", ",", "phrase_category_counts", ",", "'Number of synthetic samples'", ")", "\n", "\n", "self", ".", "_print_context_stats", "(", "ds_data_rdd", ",", "metric_fptr", ")", "\n", "self", ".", "_print_question_stats", "(", "ds_data_rdd", ",", "metric_fptr", ")", "\n", "self", ".", "_print_answer_stats", "(", "ds_data_rdd", ",", "metric_fptr", ")", "\n", "\n", "self", ".", "_print_backfill_stats", "(", "ds_data_rdd", ",", "metric_fptr", ")", "\n", "\n", "self", ".", "_print_article_diversity_stats", "(", "ds_data_rdd", ",", "metric_fptr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator.__init__": [[25, 59], ["text_preprocessor.TextPreprocessor", "question_generator.QuestionGenerator", "utils.ElasticsearchConfig"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_dir", ",", "*", ",", "\n", "es_hosts", ",", "\n", "es_index_name", ",", "\n", "debug_save", ",", "\n", "ulim_count", ",", "\n", "nb_ner_ulim", ",", "\n", "num_partitions", ",", "\n", "nb_aux_qs_matches", ",", "\n", "nb_aux_awc_matches", ",", "\n", "phrase_mode", ",", "\n", "whxx_ngram_table", ")", ":", "\n", "\n", "        ", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "debug_save", "=", "debug_save", "\n", "self", ".", "num_partitions", "=", "num_partitions", "\n", "\n", "self", ".", "phrase_mode", "=", "phrase_mode", "\n", "\n", "self", ".", "ulim_count", "=", "ulim_count", "# limit the number of results", "\n", "\n", "self", ".", "nb_ner_ulim", "=", "nb_ner_ulim", "\n", "\n", "self", ".", "nb_aux_qs_matches", "=", "nb_aux_qs_matches", "\n", "self", ".", "nb_aux_awc_matches", "=", "nb_aux_awc_matches", "\n", "\n", "self", ".", "whxx_ngram_table", "=", "whxx_ngram_table", "\n", "self", ".", "text_preprocessor", "=", "TextPreprocessor", "(", ")", "\n", "self", ".", "question_generator", "=", "QuestionGenerator", "(", "self", ".", "whxx_ngram_table", ",", "self", ".", "text_preprocessor", ")", "\n", "\n", "self", ".", "es_conf", "=", "ElasticsearchConfig", "(", "\n", "hosts", "=", "es_hosts", ",", "\n", "index_name", "=", "es_index_name", ",", "\n", "doc_type", "=", "'doc'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._compute_answer_start": [[61, 91], ["utils.find_all", "utils.find_all", "exceptions.DsDatasetCreationError", "exceptions.DsDatasetCreationError", "start_pos_lst.extend", "exceptions.DsDatasetCreationError", "str", "len", "dict"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.find_all", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.find_all"], ["", "def", "_compute_answer_start", "(", "self", ",", "*", ",", "answer_str", ",", "es_query", ",", "context", ")", ":", "\n", "        ", "within_sent_start_pos_lst", "=", "find_all", "(", "es_query", ",", "answer_str", ")", "\n", "if", "not", "within_sent_start_pos_lst", ":", "\n", "            ", "raise", "DsDatasetCreationError", "(", "'Cannot find start position for answer=\"{}\" in es_query=\"{}\"'", ".", "format", "(", "\n", "answer_str", ",", "es_query", ")", ")", "\n", "\n", "", "sentence_start_pos_lst", "=", "find_all", "(", "context", ",", "es_query", ")", "# should probably only have a single occurrence", "\n", "if", "not", "sentence_start_pos_lst", ":", "\n", "            ", "raise", "DsDatasetCreationError", "(", "'Cannot find es_query=\"{}\" in the following:\\n{}'", ".", "format", "(", "\n", "es_query", ",", "context", ")", ")", "\n", "\n", "", "start_pos_lst", "=", "[", "]", "\n", "for", "sentence_start_pos", "in", "sentence_start_pos_lst", ":", "\n", "            ", "start_pos_lst", ".", "extend", "(", "[", "pos", "+", "sentence_start_pos", "for", "pos", "in", "within_sent_start_pos_lst", "]", ")", "\n", "\n", "", "for", "pos", "in", "start_pos_lst", ":", "\n", "# verify that it's correct", "\n", "            ", "if", "context", "[", "pos", ":", "pos", "+", "len", "(", "answer_str", ")", "]", "!=", "answer_str", ":", "\n", "                ", "raise", "DsDatasetCreationError", "(", "\n", "'inconsistent start_pos found {}'", ".", "format", "(", "\n", "str", "(", "dict", "(", "\n", "start_pos", "=", "pos", ",", "\n", "sentence_start_pos_lst", "=", "sentence_start_pos_lst", ",", "\n", "within_sent_start_pos_lst", "=", "within_sent_start_pos_lst", ",", "\n", "answer_str", "=", "answer_str", ",", "\n", "es_query", "=", "es_query", ",", "\n", "context", "=", "context", ",", "\n", ")", ")", ")", ")", "\n", "\n", "", "", "return", "start_pos_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._make_styled_questions": [[92, 115], ["synthetic_data_creator.SyntheticDataCreator.question_generator.make_cloze_style", "synthetic_data_creator.SyntheticDataCreator.question_generator.make_cloze_style", "synthetic_data_creator.SyntheticDataCreator.question_generator.make_template_qg_styles", "styled_questions.update", "styled_questions.items"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator.make_cloze_style", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator.make_cloze_style", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.question_generator.QuestionGenerator.make_template_qg_styles"], ["", "def", "_make_styled_questions", "(", "self", ",", "*", ",", "qpa", ",", "es_hit", ",", "answer_str", ",", "rng", ")", ":", "\n", "        ", "styled_questions", "=", "{", "}", "\n", "\n", "styled_questions", "[", "QuestionStyle", ".", "CLOZE_GENERIC", "]", "=", "self", ".", "question_generator", ".", "make_cloze_style", "(", "\n", "es_hit", "[", "'_source'", "]", "[", "'body'", "]", ",", "\n", "answer_str", ",", "\n", "'[MASK]'", ")", "\n", "\n", "styled_questions", "[", "QuestionStyle", ".", "CLOZE_CATEGORY", "]", "=", "self", ".", "question_generator", ".", "make_cloze_style", "(", "\n", "es_hit", "[", "'_source'", "]", "[", "'body'", "]", ",", "\n", "answer_str", ",", "\n", "'[{}]'", ".", "format", "(", "qpa", ".", "phrase", ".", "phrase_category", ")", ")", "\n", "\n", "templated_strings", "=", "self", ".", "question_generator", ".", "make_template_qg_styles", "(", "\n", "es_hit", "[", "'_source'", "]", "[", "'body'", "]", ",", "\n", "answer_str", ",", "\n", "qpa", ".", "phrase", ".", "phrase_category", ",", "\n", "rng", ")", "\n", "\n", "styled_questions", ".", "update", "(", "templated_strings", ")", "\n", "\n", "# unwrap the enum", "\n", "return", "{", "k", ".", "value", ":", "v", "for", "k", ",", "v", "in", "styled_questions", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._construct_dataset_sample": [[116, 164], ["utils.random_str", "synthetic_data_creator.SyntheticDataCreator._compute_answer_start", "synthetic_data_creator.SyntheticDataCreator._make_styled_questions", "data_models.DsDatum", "len", "exceptions.DsDatasetCreationError", "int"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.random_str", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._compute_answer_start", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._make_styled_questions"], ["", "def", "_construct_dataset_sample", "(", "self", ",", "*", ",", "qpa", ",", "hit", ",", "hit_phrases", ",", "es_query", ",", "es_rank", ",", "backfill_article", ",", "backfill_sent", ",", "rng", ")", ":", "\n", "        ", "qid", "=", "random_str", "(", "16", ")", "\n", "\n", "context", "=", "qpa", ".", "article_raw", "\n", "\n", "answer_str", "=", "qpa", ".", "phrase", ".", "phrase_str", "\n", "answer_start_lst", "=", "self", ".", "_compute_answer_start", "(", "\n", "answer_str", "=", "answer_str", ",", "\n", "es_query", "=", "es_query", ",", "\n", "context", "=", "context", ")", "\n", "\n", "if", "len", "(", "answer_start_lst", ")", "==", "0", ":", "\n", "            ", "raise", "DsDatasetCreationError", "(", "'Did not find any answer_start answer={}: {}\\n{}'", ".", "format", "(", "\n", "answer_str", ",", "es_query", ",", "context", ")", ")", "\n", "\n", "", "answers", "=", "[", "{", "'text'", ":", "answer_str", ",", "'answer_start'", ":", "pos", "}", "for", "pos", "in", "answer_start_lst", "]", "\n", "\n", "styled_questions", "=", "self", ".", "_make_styled_questions", "(", "\n", "qpa", "=", "qpa", ",", "\n", "es_hit", "=", "hit", ",", "\n", "answer_str", "=", "answer_str", ",", "\n", "rng", "=", "rng", ")", "\n", "\n", "datum", "=", "DsDatum", "(", "\n", "qid", "=", "qid", ",", "\n", "styled_questions", "=", "styled_questions", ",", "\n", "answers", "=", "answers", ",", "\n", "context", "=", "context", ")", "\n", "\n", "datum", ".", "meta", "=", "{", "\n", "\"es_query\"", ":", "es_query", ",", "\n", "\"es_rank\"", ":", "es_rank", ",", "\n", "\"es_score\"", ":", "hit", "[", "'_score'", "]", ",", "\n", "\"answer_phrase_category\"", ":", "qpa", ".", "phrase", ".", "phrase_category", ",", "\n", "\"context\"", ":", "{", "\n", "\"article_id\"", ":", "qpa", ".", "article_id", ",", "\n", "\"article_title\"", ":", "qpa", ".", "article_title", ",", "\n", "}", ",", "\n", "\"question\"", ":", "{", "\n", "\"article_id\"", ":", "int", "(", "hit", "[", "'_source'", "]", "[", "'article_id'", "]", ")", ",", "\n", "\"article_title\"", ":", "hit", "[", "'_source'", "]", "[", "'article_title'", "]", ",", "\n", "\"phrases\"", ":", "hit_phrases", ",", "\n", "}", ",", "\n", "\"backfill_nb_articles\"", ":", "backfill_article", ",", "\n", "\"backfill_nb_sents\"", ":", "backfill_sent", ",", "\n", "}", "\n", "\n", "return", "datum", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._get_hit_phrases": [[165, 174], ["set", "tuple", "tuple", "synthetic_data_creator.SyntheticDataCreator.text_preprocessor.get_phrases", "synthetic_data_creator.SyntheticDataCreator.text_preprocessor.get_phrases", "json.loads", "json.loads"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.get_phrases", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.get_phrases"], ["", "def", "_get_hit_phrases", "(", "self", ",", "es_hit", ")", ":", "\n", "        ", "entities", "=", "[", "tuple", "(", "e", ")", "for", "e", "in", "json", ".", "loads", "(", "es_hit", "[", "'_source'", "]", "[", "'entities'", "]", ")", "]", "\n", "noun_chunks", "=", "[", "tuple", "(", "e", ")", "for", "e", "in", "json", ".", "loads", "(", "es_hit", "[", "'_source'", "]", "[", "'noun_chunks'", "]", ")", "]", "\n", "\n", "if", "self", ".", "phrase_mode", "is", "PhraseMode", ".", "NER_ONLY", ":", "\n", "            ", "phrases", "=", "self", ".", "text_preprocessor", ".", "get_phrases", "(", "entities", "=", "entities", ",", "noun_chunks", "=", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "phrases", "=", "self", ".", "text_preprocessor", ".", "get_phrases", "(", "entities", "=", "entities", ",", "noun_chunks", "=", "noun_chunks", ")", "\n", "", "return", "set", "(", "phrases", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._obtain_retrieved_sentences_for_single_article": [[176, 281], ["rng.vanilla.shuffle", "set", "enumerate", "set", "enumerate", "sent.get_phrases", "es.search", "int", "synthetic_data_creator.SyntheticDataCreator._get_hit_phrases", "len", "synthetic_data_creator.SyntheticDataCreator.text_preprocessor.is_similar", "synthetic_data_creator.SyntheticDataCreator._construct_dataset_sample", "print", "len", "len", "len", "len", "synthetic_data_creator.SyntheticDataCreator.text_preprocessor.findall_substr", "synthetic_data_creator.SyntheticDataCreator.text_preprocessor.is_similar", "retrieved_str.split", "list", "str", "str"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.get_phrases", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._get_hit_phrases", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.is_similar", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._construct_dataset_sample", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.findall_substr", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.is_similar"], ["", "def", "_obtain_retrieved_sentences_for_single_article", "(", "self", ",", "*", ",", "qpa", ",", "es", ",", "rng", ",", "backfill_article", ")", ":", "\n", "        ", "\"\"\"\n        Return a list. Currently, it should return a list with zero or one element\n\n        :param backfill_article: for debugging purpose. The index of backfill\n        \"\"\"", "\n", "\n", "filtered_sentences", "=", "qpa", ".", "filtered_sents", "\n", "rng", ".", "vanilla", ".", "shuffle", "(", "filtered_sentences", ")", "\n", "\n", "context_phrase_set", "=", "set", "(", "qpa", ".", "article_phrases", ")", "\n", "\n", "for", "backfill_sent", ",", "sent", "in", "enumerate", "(", "filtered_sentences", ")", ":", "\n", "# Consider adding title to es_query", "\n", "            ", "es_query", "=", "sent", ".", "text", "\n", "\n", "es_query_phrases", "=", "set", "(", "sent", ".", "get_phrases", "(", "self", ".", "phrase_mode", ")", ")", "\n", "\n", "request_body", "=", "{", "\n", "\"query\"", ":", "{", "\n", "\"bool\"", ":", "{", "\n", "\"should\"", ":", "{", "\n", "\"match\"", ":", "{", "\"body_with_title\"", ":", "es_query", "}", ",", "\n", "}", ",", "\n", "\"must\"", ":", "{", "\n", "\"match\"", ":", "{", "\"body_with_title\"", ":", "qpa", ".", "phrase", ".", "phrase_str", "}", ",", "\n", "}", ",", "\n", "\"must_not\"", ":", "{", "\n", "\"match\"", ":", "{", "\"article_id\"", ":", "str", "(", "qpa", ".", "article_id", ")", "}", "\n", "}", "\n", "}", "\n", "}", "\n", "}", "\n", "\n", "try", ":", "\n", "# maybe convert to using msearch (multi-search)", "\n", "                ", "results", "=", "es", ".", "search", "(", "\n", "index", "=", "self", ".", "es_conf", ".", "index_name", ",", "\n", "doc_type", "=", "self", ".", "es_conf", ".", "doc_type", ",", "\n", "size", "=", "NUM_OF_HITS_FROM_ES", ",", "# top-k", "\n", "request_timeout", "=", "60", ",", "\n", "body", "=", "request_body", ")", "\n", "", "except", "RequestError", "as", "ex", ":", "\n", "                ", "print", "(", "'ES RequestError found: {}'", ".", "format", "(", "str", "(", "ex", ")", ")", ")", "\n", "continue", "\n", "\n", "", "for", "hit_idx", ",", "hit", "in", "enumerate", "(", "results", "[", "'hits'", "]", "[", "'hits'", "]", ")", ":", "\n", "                ", "retrieved_str", "=", "hit", "[", "'_source'", "]", "[", "'body'", "]", "\n", "hit_article_id", "=", "int", "(", "hit", "[", "'_source'", "]", "[", "'article_id'", "]", ")", "\n", "\n", "# TODO add create real hit_phrases", "\n", "hit_phrases", "=", "self", ".", "_get_hit_phrases", "(", "hit", ")", "\n", "\n", "if", "hit_article_id", "==", "qpa", ".", "article_id", ":", "\n", "# if the hit is from the same article as the query, skip", "\n", "# we already check this in ES, but just to be safe", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "hit_phrases", ")", "<", "2", ":", "\n", "# if number of entities in hit (question) is less than 2, it's likely that it's unanswerable", "\n", "# Should have at least 2 entities", "\n", "                    ", "continue", "\n", "\n", "", "if", "(", "qpa", ".", "phrase", ".", "phrase_str", ",", "qpa", ".", "phrase", ".", "phrase_category", ")", "not", "in", "hit_phrases", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "hit_phrases", "&", "es_query_phrases", ")", "<", "self", ".", "nb_aux_qs_matches", "+", "1", ":", "\n", "# needs to +1 to nb_aux_qs_matches because there is already a match for phrase_str", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "hit_phrases", "&", "context_phrase_set", ")", "<", "self", ".", "nb_aux_awc_matches", "+", "self", ".", "nb_aux_qs_matches", "+", "1", ":", "\n", "# needs to add self.nb_aux_qs_matches + 1 for both the phrase_str and aux_qs matches", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "retrieved_str", ".", "split", "(", ")", ")", ">", "QUESTION_NUM_WORDS_ULIM", ":", "\n", "# used naive splitting based on spaces", "\n", "                    ", "continue", "\n", "\n", "", "nb_entity_occurrences", "=", "len", "(", "self", ".", "text_preprocessor", ".", "findall_substr", "(", "qpa", ".", "phrase", ".", "phrase_str", ",", "retrieved_str", ")", ")", "\n", "if", "nb_entity_occurrences", "!=", "1", ":", "\n", "# We already check existence in ES query, but we want only occurrence of *once* here.", "\n", "# This is to simplify conversion to question-style", "\n", "                    ", "continue", "\n", "\n", "", "if", "self", ".", "text_preprocessor", ".", "is_similar", "(", "es_query", ",", "retrieved_str", ",", "0.95", ",", "discard_stopwords", "=", "False", ")", ":", "\n", "# recall that retrieved_str (from ES hit) is actually a sentence", "\n", "# If the two sentence are too similar, then it's likely a plagiarized sentence", "\n", "                    ", "continue", "\n", "\n", "", "if", "not", "self", ".", "text_preprocessor", ".", "is_similar", "(", "retrieved_str", ",", "es_query", ",", "0.30", ",", "discard_stopwords", "=", "True", ")", ":", "\n", "# if there is almost no overlap, skip", "\n", "                    ", "continue", "\n", "\n", "# the \"hit\" is used to generate the question", "\n", "", "dataset_sample", "=", "self", ".", "_construct_dataset_sample", "(", "\n", "rng", "=", "rng", ",", "\n", "qpa", "=", "qpa", ",", "\n", "hit", "=", "hit", ",", "\n", "hit_phrases", "=", "list", "(", "hit_phrases", ")", ",", "\n", "es_query", "=", "es_query", ",", "\n", "es_rank", "=", "hit_idx", ",", "\n", "backfill_article", "=", "backfill_article", ",", "\n", "backfill_sent", "=", "backfill_sent", ")", "\n", "\n", "return", "[", "dataset_sample", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._obtain_retrieved_sentences": [[283, 299], ["rng.vanilla.shuffle", "enumerate", "synthetic_data_creator.SyntheticDataCreator._obtain_retrieved_sentences_for_single_article"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._obtain_retrieved_sentences_for_single_article"], ["", "", "", "def", "_obtain_retrieved_sentences", "(", "self", ",", "entity2queries", ",", "es", ",", "rng", ")", ":", "\n", "        ", "\"\"\"\n        :return: either empty list or a list with a single element\n        \"\"\"", "\n", "qpa_lst", "=", "entity2queries", "[", "1", "]", "\n", "rng", ".", "vanilla", ".", "shuffle", "(", "qpa_lst", ")", "\n", "\n", "for", "backfill_article", ",", "qpa", "in", "enumerate", "(", "qpa_lst", ")", ":", "\n", "            ", "retrieved_objs", "=", "self", ".", "_obtain_retrieved_sentences_for_single_article", "(", "\n", "qpa", "=", "qpa", ",", "\n", "es", "=", "es", ",", "\n", "rng", "=", "rng", ",", "\n", "backfill_article", "=", "backfill_article", ")", "\n", "if", "retrieved_objs", ":", "\n", "                ", "return", "retrieved_objs", "\n", "", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._compute_ds_data_by_partition": [[301, 312], ["utils.RandomNumberGenerator", "utils.ElasticsearchMagic.get_instance", "synthetic_data_creator.SyntheticDataCreator._obtain_retrieved_sentences"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.ElasticsearchMagic.get_instance", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._obtain_retrieved_sentences"], ["", "def", "_compute_ds_data_by_partition", "(", "self", ",", "entity2queries_lst", ")", ":", "\n", "# Do not move RNG as instance variables. You want a different seed for each partition", "\n", "        ", "rng", "=", "utils", ".", "RandomNumberGenerator", "(", ")", "\n", "\n", "es", "=", "ElasticsearchMagic", ".", "get_instance", "(", "\n", "'singleton'", ",", "\n", "hosts", "=", "[", "self", ".", "es_conf", ".", "hosts", "]", ",", "\n", "timeout", "=", "60", ")", "\n", "\n", "for", "entity2queries", "in", "entity2queries_lst", ":", "\n", "            ", "yield", "self", ".", "_obtain_retrieved_sentences", "(", "entity2queries", ",", "es", ",", "rng", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._split_by_style_and_write": [[313, 321], ["ds_data_rdd.map().saveAsTextFile", "os.path.join", "ds_data_rdd.map", "x.jsonify_single_style"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.DsDatum.jsonify_single_style"], ["", "", "def", "_split_by_style_and_write", "(", "self", ",", "ds_data_rdd", ")", ":", "\n", "# Only add to this list if we want to run the dataset directly using BERT", "\n", "# If the data would be used for style-transfer, you can just use core_data format.", "\n", "        ", "qstyle_lst", "=", "QUESTION_STYLES_FOR_JSONLINES", "\n", "\n", "for", "qstyle", "in", "qstyle_lst", ":", "\n", "            ", "ds_data_rdd", ".", "map", "(", "lambda", "x", ":", "x", ".", "jsonify_single_style", "(", "qstyle", ")", ")", ".", "saveAsTextFile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "qstyle", ".", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._calculate_phrase_rdd": [[322, 329], ["ner_entity_gatherer.NerEntityGatherer.NerEntityGatherer", "ner_entity_gatherer.NerEntityGatherer.NerEntityGatherer.gather_entities"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.NerEntityGatherer.gather_entities"], ["", "", "def", "_calculate_phrase_rdd", "(", "self", ",", "article_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "ner_entity_gatherer", "=", "NerEntityGatherer", "(", "\n", "output_dir", "=", "self", ".", "output_dir", ",", "\n", "phrase_mode", "=", "self", ".", "phrase_mode", ")", "\n", "ner_rdd", "=", "ner_entity_gatherer", ".", "gather_entities", "(", "article_rdd", ",", "metric_fptr", ")", "\n", "\n", "return", "ner_rdd", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._perform_subsample": [[330, 334], ["rdd.sample"], "methods", ["None"], ["", "def", "_perform_subsample", "(", "self", ",", "rdd", ",", "subsample_frac", ")", ":", "\n", "        ", "if", "subsample_frac", "<", "0.99", ":", "\n", "            ", "return", "rdd", ".", "sample", "(", "False", ",", "subsample_frac", ")", "\n", "", "return", "rdd", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._perform_subsample_by_count": [[335, 346], ["synthetic_data_creator.SyntheticDataCreator._perform_subsample", "rdd.count", "float"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._perform_subsample"], ["", "def", "_perform_subsample_by_count", "(", "self", ",", "rdd", ",", "subsample_count", ",", "*", ",", "tot_count", "=", "None", ")", ":", "\n", "        ", "extra_frac", "=", "2.0", "# if extra_frac = 1.10, sample for 10% more data", "\n", "\n", "if", "tot_count", "is", "None", ":", "\n", "            ", "tot_count", "=", "rdd", ".", "count", "(", ")", "\n", "", "frac", "=", "float", "(", "subsample_count", ")", "/", "tot_count", "\n", "\n", "if", "frac", ">=", "0.99", ":", "\n", "            ", "return", "rdd", "\n", "\n", "", "return", "self", ".", "_perform_subsample", "(", "rdd", ",", "frac", "*", "extra_frac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator.run_job": [[347, 382], ["article_rdd.count", "print", "ner_entity_gatherer.convert_ner_rdd_to_set", "entity_to_queries_mapper.EntityToQueriesMapper().get_entity_to_queries_v2", "entity_to_queries_mapper.EntityToQueriesMapper().get_entity_to_queries_v2.mapPartitions", "EntityToQueriesMapper().get_entity_to_queries_v2.mapPartitions.flatMap", "entity2queries_prdd.mapPartitions.flatMap.persist", "synthetic_data_creator.SyntheticDataCreator._split_by_style_and_write", "entity2queries_prdd.mapPartitions.flatMap.map().saveAsTextFile", "stat_computation.StatComputation().print_output_stats", "synthetic_data_creator.SyntheticDataCreator._calculate_phrase_rdd", "synthetic_data_creator.SyntheticDataCreator._perform_subsample_by_count", "synthetic_data_creator.SyntheticDataCreator.cache", "print", "os.path.join", "entity_to_queries_mapper.EntityToQueriesMapper", "synthetic_data_creator.SyntheticDataCreator._compute_ds_data_by_partition", "entity2queries_prdd.mapPartitions.flatMap.map", "stat_computation.StatComputation", "synthetic_data_creator.SyntheticDataCreator.count", "x.jsonify"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.ner_entity_gatherer.convert_ner_rdd_to_set", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.entity_to_queries_mapper.EntityToQueriesMapper.get_entity_to_queries_v2", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._split_by_style_and_write", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.stat_computation.StatComputation.print_output_stats", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._calculate_phrase_rdd", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._perform_subsample_by_count", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.synthetic_data_creator.SyntheticDataCreator._compute_ds_data_by_partition", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.data_models.DsDatum.jsonify"], ["", "def", "run_job", "(", "self", ",", "sc", ",", "article_rdd", ",", "phrase_rdd", ",", "metric_fptr", ")", ":", "\n", "        ", "total_nb_articles", "=", "article_rdd", ".", "count", "(", ")", "\n", "print", "(", "'Number of articles in corpus: {}\\n'", ".", "format", "(", "total_nb_articles", ")", ",", "file", "=", "metric_fptr", ")", "\n", "\n", "if", "phrase_rdd", "is", "None", ":", "\n", "            ", "phrase_rdd", "=", "self", ".", "_calculate_phrase_rdd", "(", "article_rdd", ",", "metric_fptr", ")", "\n", "\n", "", "phrase_set", "=", "convert_ner_rdd_to_set", "(", "phrase_rdd", ",", "self", ".", "nb_ner_ulim", ")", "\n", "\n", "if", "self", ".", "ulim_count", "is", "not", "None", ":", "\n", "            ", "subsampled_article_rdd", "=", "self", ".", "_perform_subsample_by_count", "(", "\n", "article_rdd", ",", "\n", "self", ".", "ulim_count", ",", "\n", "tot_count", "=", "total_nb_articles", ")", "\n", "", "else", ":", "\n", "            ", "subsampled_article_rdd", "=", "article_rdd", "\n", "\n", "", "if", "self", ".", "debug_save", ":", "\n", "            ", "subsampled_article_rdd", ".", "cache", "(", ")", "# only do this in debug_save", "\n", "print", "(", "'Number of subsampled articles: {}\\n'", ".", "format", "(", "subsampled_article_rdd", ".", "count", "(", ")", ")", ",", "file", "=", "metric_fptr", ")", "\n", "\n", "", "entity2queries_prdd", "=", "EntityToQueriesMapper", "(", "self", ".", "phrase_mode", ")", ".", "get_entity_to_queries_v2", "(", "\n", "sc", ",", "subsampled_article_rdd", ",", "phrase_set", ",", "metric_fptr", ")", "\n", "\n", "ds_data_rdd_nonflat", "=", "entity2queries_prdd", ".", "mapPartitions", "(", "lambda", "x", ":", "self", ".", "_compute_ds_data_by_partition", "(", "x", ")", ")", "\n", "ds_data_rdd", "=", "ds_data_rdd_nonflat", ".", "flatMap", "(", "lambda", "x", ":", "x", ")", "\n", "\n", "ds_data_rdd", ".", "persist", "(", "StorageLevel", ".", "MEMORY_AND_DISK", ")", "\n", "\n", "# need to separate by different style and save it to separate folders", "\n", "self", ".", "_split_by_style_and_write", "(", "ds_data_rdd", ")", "\n", "\n", "ds_data_rdd", ".", "map", "(", "lambda", "x", ":", "x", ".", "jsonify", "(", ")", ")", ".", "saveAsTextFile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'core_data'", ")", ")", "\n", "\n", "StatComputation", "(", ")", ".", "print_output_stats", "(", "ds_data_rdd", ",", "metric_fptr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.SpacyMagic.load": [[22, 36], ["spacy.load"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.SpacyMagic.load"], ["@", "classmethod", "\n", "def", "load", "(", "cls", ",", "name", ",", "lang", ",", "**", "kwargs", ")", ":", "\n", "# e.g. load('my_en', 'en_core_web_sm', disable=['tagger', 'ner'])", "\n", "\n", "# spacy has memory leaks: https://github.com/explosion/spaCy/issues/3618", "\n", "# HACK: reload every K loads (via counter) to prevent leaks", "\n", "\n", "        ", "if", "name", "not", "in", "cls", ".", "_spacys", "or", "cls", ".", "_counter", "[", "name", "]", "%", "10000", "==", "0", ":", "\n", "# only load once per thread", "\n", "            ", "import", "spacy", "\n", "cls", ".", "_spacys", "[", "name", "]", "=", "spacy", ".", "load", "(", "lang", ",", "**", "kwargs", ")", "\n", "\n", "", "cls", ".", "_counter", "[", "name", "]", "+=", "1", "\n", "return", "cls", ".", "_spacys", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.SpacyMagic.load_en_disable_all": [[37, 47], ["spacy.load", "len", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.SpacyMagic.load"], ["", "@", "classmethod", "\n", "def", "load_en_disable_all", "(", "cls", ")", ":", "\n", "        ", "name", "=", "'en_disable_all'", "\n", "if", "name", "not", "in", "cls", ".", "_spacys", ":", "\n", "            ", "import", "spacy", "\n", "nlp", "=", "spacy", ".", "load", "(", "'en_core_web_sm'", ",", "disable", "=", "[", "'tagger'", ",", "'ner'", ",", "'parser'", "]", ")", "\n", "assert", "(", "len", "(", "nlp", ".", "pipeline", ")", "==", "0", ")", "\n", "assert", "(", "len", "(", "nlp", ".", "pipe_names", ")", "==", "0", ")", "\n", "cls", ".", "_spacys", "[", "name", "]", "=", "nlp", "\n", "", "return", "cls", ".", "_spacys", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.SpacyMagic.load_en_sentencizer": [[48, 60], ["English", "English.create_pipe", "English.add_pipe"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "load_en_sentencizer", "(", "cls", ")", ":", "\n", "# https://spacy.io/usage/linguistic-features#sbd-component", "\n", "        ", "name", "=", "'en_sentencizer'", "\n", "if", "name", "not", "in", "cls", ".", "_spacys", ":", "\n", "# only load once per thread", "\n", "            ", "from", "spacy", ".", "lang", ".", "en", "import", "English", "\n", "nlp", "=", "English", "(", ")", "\n", "sbd", "=", "nlp", ".", "create_pipe", "(", "'sentencizer'", ")", "# or: nlp.create_pipe('sbd')", "\n", "nlp", ".", "add_pipe", "(", "sbd", ")", "\n", "cls", ".", "_spacys", "[", "name", "]", "=", "nlp", "\n", "", "return", "cls", ".", "_spacys", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.ElasticsearchMagic.get_instance": [[65, 71], ["Elasticsearch"], "methods", ["None"], ["@", "classmethod", "\n", "def", "get_instance", "(", "cls", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "name", "not", "in", "cls", ".", "_es_objects", ":", "\n", "            ", "from", "elasticsearch6", "import", "Elasticsearch", "\n", "cls", ".", "_es_objects", "[", "name", "]", "=", "Elasticsearch", "(", "**", "kwargs", ")", "\n", "", "return", "cls", ".", "_es_objects", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.ElasticsearchConfig.__init__": [[74, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "hosts", ",", "index_name", ",", "doc_type", ")", ":", "\n", "        ", "self", ".", "hosts", "=", "hosts", "\n", "self", ".", "index_name", "=", "index_name", "\n", "self", ".", "doc_type", "=", "doc_type", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.RandomNumberGenerator.__init__": [[85, 88], ["utils.RandomNumberGenerator.get_random_number_generator", "utils.RandomNumberGenerator.get_numpy_random_number_generator"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.RandomNumberGenerator.get_random_number_generator", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.RandomNumberGenerator.get_numpy_random_number_generator"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "vanilla", "=", "self", ".", "get_random_number_generator", "(", ")", "\n", "self", ".", "np", "=", "self", ".", "get_numpy_random_number_generator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.RandomNumberGenerator.get_random_number_generator": [[89, 93], ["random.Random", "random.Random.seed", "secrets.randbits"], "methods", ["None"], ["", "def", "get_random_number_generator", "(", "self", ")", ":", "\n", "        ", "rng", "=", "random", ".", "Random", "(", ")", "\n", "rng", ".", "seed", "(", "secrets", ".", "randbits", "(", "128", ")", ")", "\n", "return", "rng", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.RandomNumberGenerator.get_numpy_random_number_generator": [[94, 97], ["numpy.random.RandomState", "secrets.randbits"], "methods", ["None"], ["", "def", "get_numpy_random_number_generator", "(", "self", ")", ":", "\n", "        ", "np_rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "secrets", ".", "randbits", "(", "32", ")", ")", "\n", "return", "np_rng", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.read_default_config_toml": [[8, 11], ["open", "toml.loads", "fh.read"], "function", ["None"], ["def", "read_default_config_toml", "(", ")", ":", "\n", "    ", "with", "open", "(", "'resources/default_config.toml'", ")", "as", "fh", ":", "\n", "        ", "return", "toml", ".", "loads", "(", "fh", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.random_str": [[98, 101], ["secrets.choice", "range"], "function", ["None"], ["", "", "def", "random_str", "(", "N", ")", ":", "\n", "    ", "alphabet", "=", "string", ".", "ascii_lowercase", "+", "string", ".", "ascii_uppercase", "+", "string", ".", "digits", "\n", "return", "''", ".", "join", "(", "secrets", ".", "choice", "(", "alphabet", ")", "for", "i", "in", "range", "(", "N", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.find_all": [[102, 111], ["a_str.find", "len"], "function", ["None"], ["", "def", "find_all", "(", "a_str", ",", "sub", ")", ":", "\n", "# https://stackoverflow.com/questions/4664850/find-all-occurrences-of-a-substring-in-python/19720214", "\n", "    ", "start", "=", "0", "\n", "while", "True", ":", "\n", "        ", "start", "=", "a_str", ".", "find", "(", "sub", ",", "start", ")", "\n", "if", "start", "==", "-", "1", ":", "\n", "            ", "return", "\n", "", "yield", "start", "\n", "start", "+=", "len", "(", "sub", ")", "# use start += 1 to find overlapping matches", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.get_phrases": [[19, 38], ["copy.deepcopy", "set", "nc_str.lower", "ent_str.lower", "copy.deepcopy.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_phrases", "(", "*", ",", "entities", ",", "noun_chunks", ")", ":", "\n", "        ", "\"\"\"\n        :param entities: list of pairs (ent_str, ent_category)\n        :param noun_chunks: list of pairs\n        \"\"\"", "\n", "phrases", "=", "copy", ".", "deepcopy", "(", "entities", ")", "\n", "\n", "ent_str_set", "=", "set", "(", "[", "ent_str", ".", "lower", "(", ")", "for", "ent_str", ",", "_", "in", "entities", "]", ")", "\n", "discard_set", "=", "ent_str_set", "|", "STOPWORDS", "\n", "\n", "for", "nc", "in", "noun_chunks", ":", "\n", "            ", "nc_str", ",", "_", "=", "nc", "# ensure it's in the correct format (i.e. pairs)", "\n", "nc_str_lower", "=", "nc_str", ".", "lower", "(", ")", "\n", "\n", "if", "nc_str_lower", "not", "in", "discard_set", ":", "\n", "                ", "phrases", ".", "append", "(", "nc", ")", "\n", "\n", "", "", "return", "phrases", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.unicode_normalize": [[39, 47], ["unicodedata.normalize"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "unicode_normalize", "(", "text", ")", ":", "\n", "        ", "\"\"\"\n        Resolve different type of unicode encodings.\n\n        e.g. unicodedata.normalize('NFKD', '\\u00A0') will return ' '\n        \"\"\"", "\n", "return", "unicodedata", ".", "normalize", "(", "'NFKD'", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.clean_and_tokenize_str": [[48, 53], ["set", "re.split", "s.lower"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "clean_and_tokenize_str", "(", "cls", ",", "s", ")", ":", "\n", "        ", "tokens", "=", "set", "(", "re", ".", "split", "(", "r'\\W+'", ",", "s", ".", "lower", "(", ")", ")", ")", "\n", "tokens", "=", "tokens", "-", "DISCARD_WORD_SET", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.findall_substr": [[54, 59], ["re.findall", "re.escape"], "methods", ["None"], ["", "def", "findall_substr", "(", "self", ",", "substr", ",", "full_str", ")", ":", "\n", "        ", "\"\"\"\n        Respect word boundaries\n        \"\"\"", "\n", "return", "re", ".", "findall", "(", "r'\\b{}\\b'", ".", "format", "(", "re", ".", "escape", "(", "substr", ")", ")", ",", "full_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.is_similar": [[60, 83], ["statistics.harmonic_mean", "text_preprocessor.TextPreprocessor.clean_and_tokenize_str", "text_preprocessor.TextPreprocessor.clean_and_tokenize_str", "set", "set", "float", "float", "sent1.strip().split", "sent2.strip().split", "len", "len", "len", "len", "sent1.strip", "sent2.strip"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.clean_and_tokenize_str", "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.clean_and_tokenize_str"], ["", "def", "is_similar", "(", "self", ",", "sent1", ",", "sent2", ",", "f1_cutoff", ",", "*", ",", "discard_stopwords", ")", ":", "\n", "        ", "\"\"\"\n        Based on bag of words.\n\n        :param discard_stopwords: remove stopwords and lowercasing\n        \"\"\"", "\n", "if", "sent1", "==", "sent2", ":", "\n", "            ", "return", "True", "\n", "\n", "", "if", "discard_stopwords", ":", "\n", "            ", "tokens1", "=", "self", ".", "clean_and_tokenize_str", "(", "sent1", ")", "\n", "tokens2", "=", "self", ".", "clean_and_tokenize_str", "(", "sent2", ")", "\n", "", "else", ":", "\n", "            ", "tokens1", "=", "set", "(", "sent1", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "tokens2", "=", "set", "(", "sent2", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "\n", "", "eps", "=", "1e-100", "\n", "\n", "score1", "=", "float", "(", "len", "(", "tokens1", "&", "tokens2", ")", ")", "/", "(", "len", "(", "tokens1", ")", "+", "eps", ")", "\n", "score2", "=", "float", "(", "len", "(", "tokens1", "&", "tokens2", ")", ")", "/", "(", "len", "(", "tokens2", ")", "+", "eps", ")", "\n", "\n", "f1", "=", "statistics", ".", "harmonic_mean", "(", "[", "score1", ",", "score2", "]", ")", "\n", "return", "f1", ">=", "f1_cutoff", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.word_tokenize": [[84, 87], ["distant_supervision.utils.SpacyMagic.load_en_disable_all", "distant_supervision.utils.SpacyMagic.load_en_disable_all."], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.SpacyMagic.load_en_disable_all"], ["", "def", "word_tokenize", "(", "self", ",", "raw_text", ")", ":", "\n", "        ", "nlp", "=", "SpacyMagic", ".", "load_en_disable_all", "(", ")", "\n", "return", "[", "w", ".", "text", "for", "w", "in", "nlp", "(", "raw_text", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.compute_ner": [[88, 95], ["distant_supervision.utils.SpacyMagic.load", "sorted", "set", "distant_supervision.utils.SpacyMagic.load."], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.SpacyMagic.load"], ["", "def", "compute_ner", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :return: e.g. [('today', 'DATE'), ('Patrick', 'PERSON')]\n        \"\"\"", "\n", "nlp", "=", "SpacyMagic", ".", "load", "(", "'my_english_ner'", ",", "'en_core_web_sm'", ",", "disable", "=", "[", "'tagger'", ",", "'parser'", "]", ")", "\n", "ents", "=", "[", "(", "ent", ".", "text", ",", "ent", ".", "label_", ")", "for", "ent", "in", "nlp", "(", "text", ")", ".", "ents", "]", "\n", "return", "sorted", "(", "set", "(", "ents", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.compute_ner_and_noun_chunks": [[96, 119], ["distant_supervision.utils.SpacyMagic.load", "distant_supervision.utils.SpacyMagic.load.", "sorted", "sorted", "len", "set", "set"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.SpacyMagic.load"], ["", "def", "compute_ner_and_noun_chunks", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        https://spacy.io/usage/linguistic-features#noun-chunks\n\n        ents: [('today', 'DATE'), ('Patrick', 'PERSON')]\n        noun_chunks: e.g. [('Autonomous cars', 'nsubj'), ('insurance liability', 'dobj')]\n\n        :return: (ents, noun_chunks)\n        \"\"\"", "\n", "if", "len", "(", "text", ")", ">", "ULIM_CHAR_PER_SENTENCE", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "\n", "# spacy has memory leaks: https://github.com/explosion/spaCy/issues/3618", "\n", "", "nlp", "=", "SpacyMagic", ".", "load", "(", "'my_english'", ",", "'en_core_web_sm'", ",", "disable", "=", "[", "]", ")", "\n", "doc", "=", "nlp", "(", "text", ")", "\n", "\n", "ents", "=", "[", "(", "ent", ".", "text", ",", "ent", ".", "label_", ")", "for", "ent", "in", "doc", ".", "ents", "]", "\n", "chunks", "=", "[", "(", "nc", ".", "text", ",", "nc", ".", "root", ".", "dep_", ")", "for", "nc", "in", "doc", ".", "noun_chunks", "]", "\n", "\n", "ents", "=", "sorted", "(", "set", "(", "ents", ")", ")", "\n", "chunks", "=", "sorted", "(", "set", "(", "chunks", ")", ")", "\n", "\n", "return", "ents", ",", "chunks", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.normalize_basic": [[120, 126], ["text.lower().split", "text.lower"], "methods", ["None"], ["", "def", "normalize_basic", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :param text: tokenized text string\n        \"\"\"", "\n", "tokens", "=", "[", "w", "for", "w", "in", "text", ".", "lower", "(", ")", ".", "split", "(", ")", "if", "w", "not", "in", "DISCARD_WORD_SET", "]", "\n", "return", "' '", ".", "join", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.text_preprocessor.TextPreprocessor.sent_tokenize": [[127, 148], ["distant_supervision.utils.SpacyMagic.load_en_sentencizer", "re.split", "distant_supervision.utils.SpacyMagic.load_en_sentencizer.", "sentences_agg.extend", "sent.string.strip"], "methods", ["home.repos.pwc.inspect_result.awslabs_unsupervised-qa.distant_supervision.utils.SpacyMagic.load_en_sentencizer"], ["", "def", "sent_tokenize", "(", "self", ",", "raw_text", ",", "title", ")", ":", "\n", "        ", "\"\"\"\n        :return: a list of ...\n        \"\"\"", "\n", "# There are different types of sentence segmentation. See", "\n", "# https://spacy.io/usage/linguistic-features#sbd for more details", "\n", "# The sentencizer is much faster, but not as good as DependencyParser", "\n", "# Alternatively, nlp = SpacyMagic.load('en_core_web_sm')  # using DependencyParser", "\n", "nlp", "=", "SpacyMagic", ".", "load_en_sentencizer", "(", ")", "\n", "\n", "text_lst", "=", "re", ".", "split", "(", "r'[\\n\\r]+'", ",", "raw_text", ")", "\n", "if", "title", "and", "text_lst", "[", "0", "]", "==", "title", ":", "\n", "# remove the first element if is the same as the title", "\n", "            ", "text_lst", "=", "text_lst", "[", "1", ":", "]", "\n", "\n", "", "sentences_agg", "=", "[", "]", "\n", "for", "text", "in", "text_lst", ":", "\n", "            ", "doc", "=", "nlp", "(", "text", ")", "\n", "sentences", "=", "[", "sent", ".", "string", ".", "strip", "(", ")", "for", "sent", "in", "doc", ".", "sents", "]", "\n", "sentences_agg", ".", "extend", "(", "sentences", ")", "\n", "", "return", "sentences_agg", "\n", "", "", ""]]}