{"home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.classify.classify": [[17, 84], ["os.path.abspath", "Utils.openLog", "classify.getInput", "classify.getModel", "train.getSteps", "selector.check", "selector.check", "os.path.abspath", "os.path.abspath", "train.workdir", "selector.markOmitSteps", "Detectors.Preprocessor.Preprocessor", "detector.getBioNLPSharedTaskParams", "detector.classify", "Detectors.Preprocessor.Preprocessor.setArgForAllSteps", "os.path.exists", "Detectors.Preprocessor.Preprocessor.process", "train.getDetector"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.openLog", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.classify.getInput", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.classify.getModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.check", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.check", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.markOmitSteps", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllCorrectClassifier.AllCorrectClassifier.classify", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setArgForAllSteps", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process"], ["def", "classify", "(", "input", ",", "model", ",", "output", ",", "workDir", "=", "None", ",", "step", "=", "None", ",", "omitSteps", "=", "None", ",", "\n", "goldInput", "=", "None", ",", "detector", "=", "None", ",", "debug", "=", "False", ",", "clear", "=", "False", ",", "\n", "preprocessorTag", "=", "\"-preprocessed.xml.gz\"", ",", "preprocessorParams", "=", "None", ",", "bioNLPSTParams", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Detect events or relations from text.\n    \n    @param input: The input file in either interaction XML or BioNLP ST format. Can also be a PMID or TEES default corpus name.\n    @param model: A path to a model file or the name of a TEES default model.\n    @param output: The output file stem. Output files will be of the form output-*\n    @param workDir: If intermediate files need to be saved, they will go here.\n    @param step: A step=substep pair, where the steps are PREPROCESS and CLASSIFY\n    @param omitSteps: step=substep parameters, where multiple substeps can be defined.\n    @param goldInput: a version of the corpus file with gold annotation. Enables measuring of performance\n    @param detector: a Detector object, or a string defining one to be imported. If None, will be read from model.\n    @param debug: In debug mode, more output is shown, and some temporary intermediate files are saved\n    @param clear: Remove existing workDir\n    @param preprocessorTag: preprocessor output file will be output + preprocessorTag\n    @param preprocessorParams: Optional parameters controlling preprocessing. If None, will be read from model.\n    @param bioNLPSTParams: Optional parameters controlling BioNLP ST format output. If None, will be read from model.\n                - \"convert\" - if True output will be converted to shared task format \n                - \"evaluate\" - if True tries to evaluates the output\n                - \"scores\" - if False .a2 will contains only information about events, if True it will also contain \n                            information about scores from classifier\n                - \"a2Tag\" - if False the result extension will be .a2\n    \"\"\"", "\n", "input", "=", "os", ".", "path", ".", "abspath", "(", "input", ")", "\n", "if", "goldInput", "!=", "None", ":", "goldInput", "=", "os", ".", "path", ".", "abspath", "(", "goldInput", ")", "\n", "if", "model", "!=", "None", ":", "model", "=", "os", ".", "path", ".", "abspath", "(", "model", ")", "\n", "# Initialize working directory", "\n", "if", "workDir", "!=", "None", ":", "# use a permanent work directory", "\n", "        ", "workdir", "(", "workDir", ",", "clear", ")", "\n", "", "Stream", ".", "openLog", "(", "output", "+", "\"-log.txt\"", ")", "# log in the output directory", "\n", "# Get input files", "\n", "input", ",", "preprocess", "=", "getInput", "(", "input", ")", "\n", "model", "=", "getModel", "(", "model", ")", "\n", "# Define processing steps", "\n", "selector", ",", "detectorSteps", ",", "omitDetectorSteps", "=", "getSteps", "(", "step", ",", "omitSteps", ",", "[", "\"PREPROCESS\"", ",", "\"CLASSIFY\"", "]", ")", "\n", "if", "not", "preprocess", ":", "\n", "        ", "selector", ".", "markOmitSteps", "(", "\"PREPROCESS\"", ")", "\n", "\n", "", "classifyInput", "=", "input", "\n", "if", "selector", ".", "check", "(", "\"PREPROCESS\"", ")", ":", "\n", "        ", "preprocessor", "=", "Preprocessor", "(", ")", "\n", "if", "debug", ":", "\n", "            ", "preprocessor", ".", "setArgForAllSteps", "(", "\"debug\"", ",", "True", ")", "\n", "", "preprocessorOutput", "=", "output", "+", "preprocessorTag", "\n", "#preprocessor.debug = debug", "\n", "#preprocessor.source = input # This has to be defined already here, needs to be fixed later", "\n", "#preprocessor.requireEntitiesForParsing = True # parse only sentences which contain named entities", "\n", "if", "os", ".", "path", ".", "exists", "(", "preprocessorOutput", ")", "and", "not", "clear", ":", "#os.path.exists(preprocessor.getOutputPath(\"FIND-HEADS\")):", "\n", "#print >> sys.stderr, \"Preprocessor output\", preprocessor.getOutputPath(\"FIND-HEADS\"), \"exists, skipping preprocessing.\"", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Preprocessor output\"", ",", "preprocessorOutput", ",", "\"exists, skipping preprocessing.\"", "\n", "classifyInput", "=", "preprocessorOutput", "# preprocessor.getOutputPath(\"FIND-HEADS\")", "\n", "", "else", ":", "\n", "#print >> sys.stderr, \"Preprocessor output\", preprocessor.getOutputPath(\"FIND-HEADS\"), \"does not exist\"", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Preprocessor output\"", ",", "preprocessorOutput", ",", "\"does not exist\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"------------ Preprocessing ------------\"", "\n", "# Remove some of the unnecessary intermediate files", "\n", "#preprocessor.setIntermediateFiles({\"Convert\":None, \"SPLIT-SENTENCES\":None, \"PARSE\":None, \"CONVERT-PARSE\":None, \"SPLIT-NAMES\":None})", "\n", "# Process input into interaction XML", "\n", "classifyInput", "=", "preprocessor", ".", "process", "(", "input", ",", "preprocessorOutput", ",", "preprocessorParams", ",", "model", ",", "[", "]", ",", "fromStep", "=", "detectorSteps", "[", "\"PREPROCESS\"", "]", ",", "toStep", "=", "None", ",", "omitSteps", "=", "omitDetectorSteps", "[", "\"PREPROCESS\"", "]", ")", "\n", "\n", "", "", "if", "selector", ".", "check", "(", "\"CLASSIFY\"", ")", ":", "\n", "        ", "detector", "=", "getDetector", "(", "detector", ",", "model", ")", "[", "0", "]", "(", ")", "# initialize detector object", "\n", "detector", ".", "debug", "=", "debug", "\n", "detector", ".", "bioNLPSTParams", "=", "detector", ".", "getBioNLPSharedTaskParams", "(", "bioNLPSTParams", ",", "model", ")", "\n", "detector", ".", "classify", "(", "classifyInput", ",", "model", ",", "output", ",", "goldData", "=", "goldInput", ",", "fromStep", "=", "detectorSteps", "[", "\"CLASSIFY\"", "]", ",", "omitSteps", "=", "omitDetectorSteps", "[", "\"CLASSIFY\"", "]", ",", "workDir", "=", "workDir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.classify.getModel": [[85, 109], ["os.path.abspath", "os.path.exists", "os.path.basename", "hasattr", "Exception", "os.path.join", "os.path.exists", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "", "def", "getModel", "(", "model", ")", ":", "\n", "    ", "if", "model", "==", "None", ":", "\n", "        ", "return", "None", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "model", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Model\"", ",", "model", ",", "\"doesn't exist, looking for a default model\"", "\n", "modelName", "=", "os", ".", "path", ".", "basename", "(", "model", ")", "\n", "found", "=", "None", "\n", "if", "hasattr", "(", "Settings", ",", "\"MODEL_DIR\"", ")", ":", "\n", "            ", "for", "suffix", "in", "[", "\"\"", ",", "\"-test\"", ",", "\".zip\"", ",", "\"-test.zip\"", "]", ":", "\n", "                ", "predefined", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "MODEL_DIR", ",", "modelName", "+", "suffix", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "predefined", ")", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"Classifying with default model\"", ",", "predefined", "\n", "found", "=", "predefined", "\n", "model", "=", "found", "\n", "break", "\n", "", "", "if", "found", "==", "None", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"No default model found for definition\"", ",", "modelName", "\n", "", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Default model directory MODEL_DIR not defined in Settings\"", "\n", "", "if", "found", "==", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Model \"", "+", "str", "(", "model", ")", "+", "\" not found\"", ")", "\n", "", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Classifying with model\"", ",", "model", "\n", "", "return", "os", ".", "path", ".", "abspath", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.classify.getInput": [[110, 136], ["os.path.basename().isdigit", "classify.getPubMed", "os.path.abspath", "model.split", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.exists", "os.path.basename", "os.path.join", "os.path.exists", "Exception", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.classify.getPubMed", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "def", "getInput", "(", "input", ",", "model", "=", "None", ")", ":", "\n", "    ", "if", "input", "==", "None", ":", "# Get a corpus corresponding to the model", "\n", "        ", "assert", "model", "!=", "None", "\n", "input", "=", "model", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "", "if", "os", ".", "path", ".", "basename", "(", "input", ")", ".", "isdigit", "(", ")", ":", "# PMID", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Classifying PubMed abstract\"", ",", "os", ".", "path", ".", "basename", "(", "input", ")", "\n", "input", "=", "getPubMed", "(", "os", ".", "path", ".", "basename", "(", "input", ")", ")", "\n", "preprocess", "=", "True", "\n", "", "elif", "not", "os", ".", "path", ".", "exists", "(", "input", ")", ":", "# Use a predefined corpus", "\n", "        ", "defaultInput", "=", "os", ".", "path", ".", "basename", "(", "input", ")", "\n", "for", "suffix", "in", "[", "\"\"", ",", "\".xml\"", ",", "\".xml.gz\"", "]", ":", "\n", "            ", "predefined", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "CORPUS_DIR", ",", "defaultInput", "+", "suffix", ")", "\n", "found", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "predefined", ")", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Classifying default corpus file\"", ",", "predefined", "\n", "found", "=", "predefined", "\n", "preprocess", "=", "False", "\n", "break", "\n", "", "", "if", "found", "==", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Default corpus file for input \"", "+", "str", "(", "defaultInput", ")", "+", "\" not found\"", ")", "\n", "", "input", "=", "found", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Classifying input\"", ",", "input", "\n", "preprocess", "=", "True", "\n", "", "return", "os", ".", "path", ".", "abspath", "(", "input", ")", ",", "preprocess", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.classify.getPubMed": [[137, 164], ["tempfile.gettempdir", "os.path.join", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "codecs.open", "codecs.open.close", "codecs.open", "codecs.open.write", "codecs.open.close", "line.strip.strip", "str", "str", "line.strip.startswith", "textElements.append", "[].split", "line.strip.split"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["", "def", "getPubMed", "(", "pmid", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"*************************** NOTE ***************************\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Do not attempt to do large-scale classification of PubMed\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"abstracts with this feature. For that, use the downloadable\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"PubMed release. This is a demonstration feature only, and\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"abusing it will cause you to be banned from PubMed!\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"************************************************************\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Downloading PubMed abstract\"", ",", "pmid", "\n", "tempDir", "=", "tempfile", ".", "gettempdir", "(", ")", "\n", "url", "=", "\"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=\"", "+", "str", "(", "pmid", ")", "+", "\"&retmode=xml\"", "\n", "downloaded", "=", "os", ".", "path", ".", "join", "(", "tempDir", ",", "\"pmid-\"", "+", "str", "(", "pmid", ")", ")", "\n", "Utils", ".", "Download", ".", "download", "(", "url", ",", "downloaded", "+", "\".xml\"", ",", "False", ")", "\n", "# Read the text from the XML", "\n", "f", "=", "codecs", ".", "open", "(", "downloaded", "+", "\".xml\"", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "textElements", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "for", "tag", "in", "[", "\"<ArticleTitle>\"", ",", "\"<AbstractText>\"", "]", ":", "\n", "            ", "if", "line", ".", "startswith", "(", "tag", ")", ":", "\n", "                ", "textElements", ".", "append", "(", "line", ".", "split", "(", "\">\"", ",", "1", ")", "[", "1", "]", ".", "split", "(", "\"<\"", ")", "[", "0", "]", ")", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "# Save the text file", "\n", "f", "=", "codecs", ".", "open", "(", "downloaded", "+", "\".txt\"", ",", "\"wt\"", ",", "\"utf-8\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ".", "join", "(", "textElements", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "# Return text file name", "\n", "return", "downloaded", "+", "\".txt\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.pathMenuInitializer": [[35, 115], ["menu.system.setAttr", "menu.system.setAttr", "configure.setClosingMessage", "os.path.exists", "nextMenus.append", "nextMenus.append", "nextMenus.append", "nextMenus.append", "os.path.exists", "shutil.rmtree", "os.path.abspath", "reload", "os.path.isdir", "os.makedirs", "os.path.expanduser", "os.path.exists", "os.path.expanduser"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.setClosingMessage", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["def", "pathMenuInitializer", "(", "menu", ",", "prevMenu", ")", ":", "\n", "    ", "if", "menu", "!=", "prevMenu", ":", "\n", "        ", "nextMenus", "=", "[", "]", "\n", "if", "prevMenu", ".", "optDict", "[", "\"1\"", "]", ".", "toggle", ":", "\n", "            ", "nextMenus", ".", "append", "(", "\"Classifier\"", ")", "\n", "", "if", "prevMenu", ".", "optDict", "[", "\"2\"", "]", ".", "toggle", ":", "\n", "            ", "nextMenus", ".", "append", "(", "\"Models\"", ")", "\n", "", "if", "prevMenu", ".", "optDict", "[", "\"3\"", "]", ".", "toggle", ":", "\n", "            ", "nextMenus", ".", "append", "(", "\"Corpora\"", ")", "\n", "", "if", "prevMenu", ".", "optDict", "[", "\"4\"", "]", ".", "toggle", ":", "\n", "            ", "nextMenus", ".", "append", "(", "\"Tools\"", ")", "\n", "", "menu", ".", "optDict", "[", "\"c\"", "]", ".", "nextMenu", "=", "nextMenus", "\n", "\n", "", "menu", ".", "text", "=", "\"\"\"\n    1. By default, all data and tools will be installed to one directory, the DATAPATH. \n    You can later set the installation directory individually for each component, or \n    you can change the default path now.\n    \n    \"\"\"", "\n", "if", "menu", ".", "defaultInstallDir", "==", "None", ":", "\n", "        ", "if", "menu", ".", "system", ".", "progArgs", "[", "\"installDir\"", "]", "!=", "None", ":", "\n", "            ", "menu", ".", "defaultInstallDir", "=", "menu", ".", "system", ".", "progArgs", "[", "\"installDir\"", "]", "\n", "if", "menu", ".", "system", ".", "progArgs", "[", "\"clearInstallDir\"", "]", "and", "os", ".", "path", ".", "exists", "(", "menu", ".", "system", ".", "progArgs", "[", "\"installDir\"", "]", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "menu", ".", "system", ".", "progArgs", "[", "\"installDir\"", "]", ")", "\n", "", "menu", ".", "text", "+=", "\"\\nUsing the DATAPATH path from configure.py command line options.\\n\\n\"", "\n", "", "elif", "menu", ".", "system", ".", "progArgs", "[", "\"localSettings\"", "]", "!=", "None", ":", "\n", "            ", "os", ".", "environ", "[", "\"TEES_SETTINGS\"", "]", "=", "os", ".", "path", ".", "abspath", "(", "menu", ".", "system", ".", "progArgs", "[", "\"localSettings\"", "]", ")", "\n", "reload", "(", "Settings", ")", "\n", "menu", ".", "defaultInstallDir", "=", "Settings", ".", "DATAPATH", "\n", "", "elif", "\"TEES_SETTINGS\"", "in", "os", ".", "environ", ":", "\n", "            ", "menu", ".", "defaultInstallDir", "=", "Settings", ".", "DATAPATH", "\n", "", "else", ":", "\n", "            ", "menu", ".", "defaultInstallDir", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/.tees\"", ")", "\n", "", "", "elif", "os", ".", "path", ".", "exists", "(", "menu", ".", "defaultInstallDir", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "menu", ".", "defaultInstallDir", ")", ":", "\n", "            ", "menu", ".", "text", "+=", "\"WARNING! The DATAPATH directory is not a directory.\\n\\n\"", "\n", "", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "menu", ".", "defaultInstallDir", ")", "\n", "", "except", ":", "\n", "            ", "menu", ".", "text", "+=", "\"WARNING! Could not create DATAPATH.\\n\\n\"", "\n", "#menu.text += \"DATAPATH = \" + menu.defaultInstallDir + \"\\n\"", "\n", "\n", "", "", "menu", ".", "text", "+=", "\"\"\"\n    2. TEES reads its configuration from a file defined by the environment\n    variable \"TEES_SETTINGS\". This environment variable must be set, and\n    point to a configuration file for TEES to work. By editing this \n    configuration file you can configure TEES in addition (or instead of)\n    using this configuration program.\n    \"\"\"", "\n", "if", "menu", ".", "configFilePath", "==", "None", ":", "\n", "        ", "if", "menu", ".", "system", ".", "progArgs", "[", "\"localSettings\"", "]", "!=", "None", ":", "\n", "            ", "menu", ".", "configFilePath", "=", "menu", ".", "system", ".", "progArgs", "[", "\"localSettings\"", "]", "\n", "menu", ".", "text", "+=", "\"\\nUsing the TEES_SETTINGS path from configure.py command line options.\\n\\n\"", "\n", "", "elif", "\"TEES_SETTINGS\"", "in", "os", ".", "environ", ":", "\n", "            ", "menu", ".", "configFilePath", "=", "os", ".", "environ", "[", "\"TEES_SETTINGS\"", "]", "\n", "menu", ".", "text", "+=", "\"\"\"\n            The \"TEES_SETTINGS\" environment variable is already set. If the configuration file\n            exists, this installation program will use it and by default install only missing components.\n            \"\"\"", "\n", "", "else", ":", "\n", "            ", "menu", ".", "configFilePath", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/.tees_local_settings.py\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "menu", ".", "configFilePath", ")", ":", "\n", "                ", "menu", ".", "text", "+=", "\"\"\"\n                The \"TEES_SETTINGS\" environment variable is not set, but a configuration file has been\n                found in the default location. This installation program will use the existing\n                file, and by default install only missing components.\n                \"\"\"", "\n", "", "else", ":", "\n", "                ", "menu", ".", "text", "+=", "\"\"\"\n                The \"TEES_SETTINGS\" environment variable is not set, so a new local configuration file\n                will be created.\n                \"\"\"", "\n", "#menu.text += \"TEES_SETTINGS = \" + menu.configFilePath + \"\\n\\n\"", "\n", "", "", "", "menu", ".", "system", ".", "setAttr", "(", "\"defaultInstallDir\"", ",", "menu", ".", "defaultInstallDir", ")", "\n", "Settings", ".", "DATAPATH", "=", "menu", ".", "defaultInstallDir", "\n", "menu", ".", "system", ".", "setAttr", "(", "\"configFilePath\"", ",", "menu", ".", "configFilePath", ")", "\n", "os", ".", "environ", "[", "\"TEES_SETTINGS\"", "]", "=", "menu", ".", "configFilePath", "\n", "setClosingMessage", "(", "menu", ".", "system", ",", "menu", ".", "configFilePath", ")", "\n", "menu", ".", "optDict", "[", "\"c\"", "]", ".", "handlerArgs", "=", "[", "menu", ".", "configFilePath", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.setClosingMessage": [[116, 125], ["os.path.expanduser"], "function", ["None"], ["", "def", "setClosingMessage", "(", "menuSystem", ",", "configFilePath", ")", ":", "\n", "    ", "menuSystem", ".", "closingMessage", "=", "\"!!!!!!!!!!!!!!!!!!!!!! Important Note !!!!!!!!!!!!!!!!!!!!!!\\n\"", "\n", "menuSystem", ".", "closingMessage", "+=", "\"Before using TEES, remember to define the TEES_SETTINGS\\n\"", "\n", "menuSystem", ".", "closingMessage", "+=", "\"environment variable, if you used a local settings path\\n\"", "\n", "menuSystem", ".", "closingMessage", "+=", "\"other than \"", "+", "os", ".", "path", ".", "expanduser", "(", "\"~/.tees_local_settings.py\"", ")", "+", "\"\\n\"", "\n", "menuSystem", ".", "closingMessage", "+=", "\"How to do this depends on your shell,\\n\"", "\n", "menuSystem", ".", "closingMessage", "+=", "\"some common commands are:\\n\\n\"", "\n", "menuSystem", ".", "closingMessage", "+=", "\"bash: 'export TEES_SETTINGS=\"", "+", "configFilePath", "+", "\"'\\n\"", "\n", "menuSystem", ".", "closingMessage", "+=", "\"tcsh: 'setenv TEES_SETTINGS \"", "+", "configFilePath", "+", "\"'\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.initLocalSettings": [[126, 158], ["os.path.exists", "reload", "open", "open.write", "open.close", "os.path.exists", "os.makedirs", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "def", "initLocalSettings", "(", "filename", ")", ":", "\n", "    ", "assert", "Menu", ".", "system", ".", "defaultInstallDir", "!=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Using existing local settings file\"", ",", "filename", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Initializing local settings file\"", ",", "filename", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", "\n", "", "f", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "f", ".", "write", "(", "\"\"\"\n        # Edit these settings to configure TEES. A variable must have a value \n        # other than None for it to be usable. This file is interpreted as\n        # a Python module, so Python code can be used.\n        \n        # Tools\n        SVM_MULTICLASS_DIR = None # svm_multiclass_learn and svm_multiclass_classify directory\n        BANNER_DIR = None # BANNER program directory\n        GENIA_SENTENCE_SPLITTER_DIR = None # GENIA Sentence Splitter directory\n        RUBY_PATH = \"ruby\" # Command to run Ruby (used only by the GENIA Sentence Splitter)\n        BLLIP_PARSER_DIR = None # The BLLIP parser directory\n        MCCLOSKY_BIOPARSINGMODEL_DIR = None # The McClosky BioModel directory\n        STANFORD_PARSER_DIR = None # The Stanford parser directory\n        \n        # Data\n        DATAPATH = 'DATAPATH_VALUE' # Main directory for datafiles\n        CORPUS_DIR = None # Directory for the corpus XML-files\n        MODEL_DIR = None # Directory for the official TEES models\n        \"\"\"", ".", "replace", "(", "\"    \"", ",", "\"\"", ")", ".", "replace", "(", "\"DATAPATH_VALUE\"", ",", "Menu", ".", "system", ".", "defaultInstallDir", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "# Reset local settings", "\n", "", "os", ".", "environ", "[", "\"TEES_SETTINGS\"", "]", "=", "filename", "\n", "reload", "(", "Settings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkInstallPath": [[159, 170], ["hasattr", "menu.setDefault", "menu.setDefault", "getattr", "getattr"], "function", ["None"], ["", "def", "checkInstallPath", "(", "menu", ",", "setting", ",", "defaultInstallKey", "=", "\"i\"", ",", "defaultSkipKey", "=", "\"s\"", ")", ":", "\n", "#if getattr(menu, menuVariable) == None:", "\n", "#    setattr(menu, menuVariable, menu.system.defaultInstallDir + \"/\" + installSubDir)", "\n", "    ", "if", "hasattr", "(", "Settings", ",", "setting", ")", "and", "getattr", "(", "Settings", ",", "setting", ")", "!=", "None", ":", "\n", "        ", "menu", ".", "text", "+=", "\"The \"", "+", "setting", "+", "\" setting is already configured, so the default option is to skip installing.\\n\\n\"", "\n", "menu", ".", "text", "+=", "setting", "+", "\"=\"", "+", "getattr", "(", "Settings", ",", "setting", ")", "\n", "menu", ".", "setDefault", "(", "defaultSkipKey", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "        ", "menu", ".", "setDefault", "(", "defaultInstallKey", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkCorpusInstall": [[171, 183], ["os.path.exists"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "", "def", "checkCorpusInstall", "(", "corpus", ",", "dataSets", "=", "(", "\"-train.xml\"", ",", "\"-devel.xml\"", ",", "\"-test.xml\"", ")", ")", ":", "\n", "# CORPUS_DIR is set, so check if the corpus is installed", "\n", "    ", "allFound", "=", "True", "# check for all corpus subsets", "\n", "for", "dataSet", "in", "dataSets", ":", "\n", "        ", "filePath", "=", "Settings", ".", "CORPUS_DIR", "+", "\"/\"", "+", "corpus", "+", "dataSet", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filePath", ")", ":", "\n", "#print >> sys.stderr, \"Corpus file\", filePath, \"is not installed\" ", "\n", "            ", "allFound", "=", "False", "\n", "", "", "if", "allFound", ":", "# if corpus files are present, installing this corpora can be skipped", "\n", "        ", "return", "True", "\n", "", "else", ":", "# if a corpus file is missing, mark it to be installed", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.svmMenuInitializer": [[184, 198], ["configure.checkInstallPath", "hasattr", "menu.setDefault", "menu.setDefault", "os.path.join", "getattr"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkInstallPath"], ["", "", "def", "svmMenuInitializer", "(", "menu", ",", "prevMenu", ")", ":", "\n", "    ", "menu", ".", "text", "=", "\"\"\"\n    TEES uses the SVM Multiclass classifer by Thorsten Joachims for all \n    classification tasks. You can optionally choose to compile it from \n    source if the precompiled Linux-binary does not work on your system.\n    \"\"\"", "\n", "checkInstallPath", "(", "menu", ",", "\"SVM_MULTICLASS_DIR\"", ")", "\n", "if", "hasattr", "(", "Settings", ",", "\"SVM_MULTICLASS_DIR\"", ")", "and", "getattr", "(", "Settings", ",", "\"SVM_MULTICLASS_DIR\"", ")", "!=", "None", ":", "\n", "        ", "menu", ".", "setDefault", "(", "\"s\"", ")", "\n", "svmInstallDir", "=", "Settings", ".", "SVM_MULTICLASS_DIR", "\n", "", "else", ":", "\n", "        ", "menu", ".", "setDefault", "(", "\"i\"", ")", "\n", "svmInstallDir", "=", "None", "\n", "", "menu", ".", "optDict", "[", "\"i\"", "]", ".", "handlerArgs", "=", "[", "None", ",", "os", ".", "path", ".", "join", "(", "menu", ".", "system", ".", "defaultInstallDir", ",", "\"tools/download\"", ")", ",", "True", ",", "menu", ".", "optDict", "[", "\"1\"", "]", ".", "toggle", ",", "True", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.toolsMenuInitializer": [[199, 228], ["handlers.append", "handlerArgs.append", "handlers.append", "handlerArgs.append", "handlers.append", "handlerArgs.append", "handlers.append", "handlerArgs.append", "configure.checkInstallPath", "configure.checkInstallPath", "configure.checkInstallPath", "configure.checkInstallPath"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkInstallPath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkInstallPath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkInstallPath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkInstallPath"], ["", "def", "toolsMenuInitializer", "(", "menu", ",", "prevMenu", ")", ":", "\n", "# Java path for ANT", "\n", "#if getattr(menu, \"javaHome\") == None:", "\n", "#    if \"JAVA_HOME\" in os.environ:", "\n", "#        setattr(menu, \"javaHome\", os.environ(\"JAVA_HOME\"))", "\n", "#    else:", "\n", "#        setattr(menu, \"javaHome\", \"\")", "\n", "# Tool initializers", "\n", "    ", "handlers", "=", "[", "]", "\n", "handlerArgs", "=", "[", "]", "\n", "redownload", "=", "menu", ".", "optDict", "[", "\"1\"", "]", ".", "toggle", "\n", "if", "menu", ".", "optDict", "[", "\"2\"", "]", ".", "toggle", "or", "(", "menu", "!=", "prevMenu", "and", "checkInstallPath", "(", "menu", ",", "\"GENIA_SENTENCE_SPLITTER_DIR\"", ")", ")", ":", "\n", "        ", "menu", ".", "optDict", "[", "\"2\"", "]", ".", "toggle", "=", "True", "\n", "handlers", ".", "append", "(", "Tools", ".", "GeniaSentenceSplitter", ".", "install", ")", "\n", "handlerArgs", ".", "append", "(", "[", "None", ",", "None", ",", "redownload", ",", "True", "]", ")", "\n", "", "if", "menu", ".", "optDict", "[", "\"3\"", "]", ".", "toggle", "or", "(", "menu", "!=", "prevMenu", "and", "checkInstallPath", "(", "menu", ",", "\"BANNER_DIR\"", ")", ")", ":", "\n", "        ", "menu", ".", "optDict", "[", "\"3\"", "]", ".", "toggle", "=", "True", "\n", "handlers", ".", "append", "(", "Tools", ".", "BANNER", ".", "install", ")", "\n", "handlerArgs", ".", "append", "(", "[", "None", ",", "None", ",", "redownload", ",", "False", ",", "None", ",", "True", "]", ")", "\n", "", "if", "menu", ".", "optDict", "[", "\"4\"", "]", ".", "toggle", "or", "(", "menu", "!=", "prevMenu", "and", "checkInstallPath", "(", "menu", ",", "\"BLLIP_PARSER_DIR\"", ")", ")", ":", "\n", "        ", "menu", ".", "optDict", "[", "\"4\"", "]", ".", "toggle", "=", "True", "\n", "handlers", ".", "append", "(", "Tools", ".", "BLLIPParser", ".", "install", ")", "\n", "handlerArgs", ".", "append", "(", "[", "None", ",", "None", ",", "redownload", ",", "True", "]", ")", "\n", "", "if", "menu", ".", "optDict", "[", "\"5\"", "]", ".", "toggle", "or", "(", "menu", "!=", "prevMenu", "and", "checkInstallPath", "(", "menu", ",", "\"STANFORD_PARSER_DIR\"", ")", ")", ":", "\n", "        ", "menu", ".", "optDict", "[", "\"5\"", "]", ".", "toggle", "=", "True", "\n", "handlers", ".", "append", "(", "Tools", ".", "StanfordParser", ".", "install", ")", "\n", "handlerArgs", ".", "append", "(", "[", "None", ",", "None", ",", "redownload", ",", "True", "]", ")", "\n", "", "menu", ".", "optDict", "[", "\"i\"", "]", ".", "handler", "=", "handlers", "\n", "menu", ".", "optDict", "[", "\"i\"", "]", ".", "handlerArgs", "=", "handlerArgs", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.modelsMenuInitializer": [[229, 254], ["os.path.join", "os.path.join", "menu.setDefault", "menu.setDefault", "hasattr", "getattr", "str", "hasattr", "os.path.exists", "getattr"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "def", "modelsMenuInitializer", "(", "menu", ",", "prevMenu", ")", ":", "\n", "    ", "menu", ".", "text", "=", "\"\"\"\n    TEES models are used for predicting events or relations using\n    classify.py. Models are provided for all tasks in the BioNLP'09, \n    BioNLP'11, BioNLP'13, DDIExtraction'11 and DDIExtraction'13\n    Shared Tasks (except BioNLP'13 BB task 1).\n    \n    For a list of models and instructions for using them see\n    https://github.com/jbjorne/TEES/wiki/Classifying.\n    \"\"\"", "\n", "# Mark \"skip\" as default option, this will be re-marked if there is no model directory", "\n", "if", "menu", "!=", "prevMenu", ":", "\n", "        ", "menu", ".", "setDefault", "(", "\"s\"", ")", "\n", "", "redownload", "=", "menu", ".", "optDict", "[", "\"1\"", "]", ".", "toggle", "\n", "destPath", "=", "os", ".", "path", ".", "join", "(", "menu", ".", "system", ".", "defaultInstallDir", ",", "\"models\"", ")", "\n", "downloadPath", "=", "os", ".", "path", ".", "join", "(", "menu", ".", "system", ".", "defaultInstallDir", ",", "\"models/download\"", ")", "\n", "# If MODEL_DIR setting is not set set it now", "\n", "if", "menu", "!=", "prevMenu", "and", "(", "not", "hasattr", "(", "Settings", ",", "\"MODEL_DIR\"", ")", "or", "Settings", ".", "MODEL_DIR", "==", "None", "or", "not", "os", ".", "path", ".", "exists", "(", "Settings", ".", "MODEL_DIR", ")", ")", ":", "\n", "        ", "menu", ".", "setDefault", "(", "\"i\"", ")", "\n", "", "if", "hasattr", "(", "Settings", ",", "\"MODEL_DIR\"", ")", "and", "getattr", "(", "Settings", ",", "\"MODEL_DIR\"", ")", "!=", "None", ":", "\n", "        ", "menu", ".", "text", "+=", "\"\\nMODEL_DIR=\"", "+", "str", "(", "getattr", "(", "Settings", ",", "\"MODEL_DIR\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "menu", ".", "text", "+=", "\"\\nMODEL_DIR=\"", "+", "destPath", "\n", "", "menu", ".", "optDict", "[", "\"i\"", "]", ".", "handler", "=", "[", "Utils", ".", "Download", ".", "downloadAndExtract", ",", "Settings", ".", "setLocal", "]", "\n", "menu", ".", "optDict", "[", "\"i\"", "]", ".", "handlerArgs", "=", "[", "[", "Settings", ".", "URL", "[", "\"MODELS\"", "]", ",", "destPath", ",", "downloadPath", ",", "None", ",", "True", ",", "redownload", "]", ",", "[", "\"MODEL_DIR\"", ",", "destPath", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.corpusMenuInitializer": [[255, 334], ["menu.setDefault", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "Utils.setLocal", "menu.setDefault", "handlers.append", "handlerArgs.append", "menu.setDefault", "handlers.append", "handlerArgs.append", "menu.setDefault", "handlers.append", "handlerArgs.append", "menu.setDefault", "handlers.append", "handlerArgs.append", "hasattr", "getattr", "os.path.join", "menu.setDefault", "handlers.append", "handlerArgs.append", "menu.setDefault", "handlers.append", "handlerArgs.append", "configure.checkCorpusInstall", "configure.checkCorpusInstall", "configure.checkCorpusInstall", "configure.checkCorpusInstall", "configure.checkCorpusInstall", "hasattr", "getattr"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkCorpusInstall", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkCorpusInstall", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkCorpusInstall", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkCorpusInstall", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.checkCorpusInstall"], ["", "def", "corpusMenuInitializer", "(", "menu", ",", "prevMenu", ")", ":", "\n", "    ", "menu", ".", "text", "=", "\"\"\"\n    The corpora are used for training new models and testing existing\n    models. The corpora installable here are from the three BioNLP Shared\n    Tasks (2009, 2011 and 2013) on Event Extraction (organized by \n    University of Tokyo), and the two Drug-Drug Interaction  Extraction \n    tasks (DDI'11 and 13, organized by Universidad Carlos III de Madrid).\n    \n    The corpora are downloaded as interaction XML files, generated from \n    the original Shared Task files. If you need to convert the corpora \n    from  the original files, you can use the convertBioNLP.py, \n    convertDDI.py and convertDDI13.py programs located at Utils/Convert.\n    \n    It is also recommended to download the official BioNLP Shared Task evaluator \n    programs, which will be used by TEES when training or testing on those corpora.\n    \"\"\"", "\n", "# Mark \"skip\" as default option, this will be re-marked as install if a corpus is missing", "\n", "menu", ".", "setDefault", "(", "\"s\"", ")", "\n", "# If CORPUS_DIR setting is not set set it now", "\n", "if", "not", "hasattr", "(", "Settings", ",", "\"CORPUS_DIR\"", ")", "or", "getattr", "(", "Settings", ",", "\"CORPUS_DIR\"", ")", "==", "None", ":", "\n", "        ", "Settings", ".", "setLocal", "(", "\"CORPUS_DIR\"", ",", "os", ".", "path", ".", "join", "(", "menu", ".", "system", ".", "defaultInstallDir", ",", "\"corpora\"", ")", ")", "\n", "print", ">>", "sys", ".", "stderr", "\n", "# Initialize handlers", "\n", "", "handlers", "=", "[", "]", "\n", "handlerArgs", "=", "[", "]", "\n", "corpusInstallPath", "=", "os", ".", "path", ".", "join", "(", "menu", ".", "system", ".", "defaultInstallDir", ",", "\"corpora\"", ")", "\n", "corpusDownloadPath", "=", "os", ".", "path", ".", "join", "(", "menu", ".", "system", ".", "defaultInstallDir", ",", "\"corpora/download\"", ")", "\n", "# Check which corpora need to be installed", "\n", "redownload", "=", "menu", ".", "optDict", "[", "\"1\"", "]", ".", "toggle", "\n", "# BioNLP'09", "\n", "if", "menu", ".", "optDict", "[", "\"2\"", "]", ".", "toggle", "or", "(", "menu", "!=", "prevMenu", "and", "not", "checkCorpusInstall", "(", "\"GE09\"", ")", ")", ":", "\n", "        ", "menu", ".", "setDefault", "(", "\"i\"", ")", "\n", "menu", ".", "optDict", "[", "\"2\"", "]", ".", "toggle", "=", "True", "\n", "handlers", ".", "append", "(", "convertBioNLP", ".", "installPreconverted", ")", "\n", "handlerArgs", ".", "append", "(", "[", "\"BIONLP_09_CORPUS\"", ",", "corpusInstallPath", ",", "corpusDownloadPath", ",", "redownload", ",", "True", "]", ")", "\n", "# BioNLP'11", "\n", "", "for", "corpus", "in", "[", "\"GE11\"", ",", "\"EPI11\"", ",", "\"ID11\"", ",", "\"BB11\"", ",", "\"BI11\"", ",", "\"CO11\"", ",", "\"REL11\"", ",", "\"REN11\"", "]", ":", "\n", "        ", "if", "menu", ".", "optDict", "[", "\"3\"", "]", ".", "toggle", "or", "(", "menu", "!=", "prevMenu", "and", "not", "checkCorpusInstall", "(", "corpus", ")", ")", ":", "\n", "            ", "menu", ".", "setDefault", "(", "\"i\"", ")", "\n", "menu", ".", "optDict", "[", "\"3\"", "]", ".", "toggle", "=", "True", "\n", "handlers", ".", "append", "(", "convertBioNLP", ".", "installPreconverted", ")", "\n", "handlerArgs", ".", "append", "(", "[", "\"BIONLP_11_CORPORA\"", ",", "corpusInstallPath", ",", "corpusDownloadPath", ",", "redownload", ",", "True", "]", ")", "\n", "break", "\n", "# BioNLP'13", "\n", "", "", "bioNLP13Corpora", "=", "[", "\"GE13\"", ",", "\"CG13\"", ",", "\"PC13\"", ",", "\"GRO13\"", ",", "\"GRN13\"", ",", "\"BB13T2\"", ",", "\"BB13T3\"", "]", "\n", "for", "corpus", "in", "bioNLP13Corpora", ":", "\n", "        ", "if", "menu", ".", "optDict", "[", "\"4\"", "]", ".", "toggle", "or", "(", "menu", "!=", "prevMenu", "and", "not", "checkCorpusInstall", "(", "corpus", ")", ")", ":", "\n", "            ", "menu", ".", "setDefault", "(", "\"i\"", ")", "\n", "menu", ".", "optDict", "[", "\"4\"", "]", ".", "toggle", "=", "True", "\n", "#handlers.append(convertBioNLP.convert)", "\n", "#handlerArgs.append([bioNLP13Corpora, corpusInstallPath, corpusDownloadPath, redownload, False])", "\n", "handlers", ".", "append", "(", "convertBioNLP", ".", "installPreconverted", ")", "\n", "handlerArgs", ".", "append", "(", "[", "\"BIONLP_13_CORPORA\"", ",", "corpusInstallPath", ",", "corpusDownloadPath", ",", "redownload", ",", "True", "]", ")", "\n", "break", "\n", "# DDI'11", "\n", "", "", "if", "menu", ".", "optDict", "[", "\"5\"", "]", ".", "toggle", "or", "(", "menu", "!=", "prevMenu", "and", "not", "checkCorpusInstall", "(", "\"DDI11\"", ",", "(", "\"-train.xml\"", ",", "\"-devel.xml\"", ")", ")", ")", ":", "\n", "        ", "menu", ".", "setDefault", "(", "\"i\"", ")", "\n", "menu", ".", "optDict", "[", "\"5\"", "]", ".", "toggle", "=", "True", "\n", "handlers", ".", "append", "(", "convertBioNLP", ".", "installPreconverted", ")", "\n", "handlerArgs", ".", "append", "(", "[", "\"DDI_11_CORPUS\"", ",", "corpusInstallPath", ",", "corpusDownloadPath", ",", "redownload", ",", "True", "]", ")", "\n", "# DDI'13", "\n", "", "if", "menu", ".", "optDict", "[", "\"6\"", "]", ".", "toggle", "or", "(", "menu", "!=", "prevMenu", "and", "not", "checkCorpusInstall", "(", "\"DDI13\"", ",", "(", "\"-train.xml\"", ",", "\"-test-task9.1.xml\"", ",", "\"-test-task9.2.xml\"", ")", ")", ")", ":", "\n", "        ", "menu", ".", "setDefault", "(", "\"i\"", ")", "\n", "menu", ".", "optDict", "[", "\"6\"", "]", ".", "toggle", "=", "True", "\n", "#handlers.append(convertDDI13.convertDDI13)", "\n", "#handlerArgs.append([corpusInstallPath, corpusDownloadPath, [\"DDI13_TRAIN\", \"DDI13_TEST_TASK_9.1\", \"DDI13_TEST_TASK_9.2\"], redownload])", "\n", "handlers", ".", "append", "(", "convertBioNLP", ".", "installPreconverted", ")", "\n", "handlerArgs", ".", "append", "(", "[", "\"DDI_13_CORPUS\"", ",", "corpusInstallPath", ",", "corpusDownloadPath", ",", "redownload", ",", "True", "]", ")", "\n", "# A handler for installing BioNLP'11 evaluators", "\n", "", "evaluatorInstallPath", "=", "os", ".", "path", ".", "join", "(", "menu", ".", "system", ".", "defaultInstallDir", ",", "\"tools/evaluators\"", ")", "\n", "evaluatorDownloadPath", "=", "os", ".", "path", ".", "join", "(", "menu", ".", "system", ".", "defaultInstallDir", ",", "\"tools/download\"", ")", "\n", "if", "menu", ".", "optDict", "[", "\"7\"", "]", ".", "toggle", "or", "(", "menu", "!=", "prevMenu", "and", "(", "(", "hasattr", "(", "Settings", ",", "\"BIONLP_EVALUATOR_DIR\"", ")", "==", "False", ")", "or", "(", "getattr", "(", "Settings", ",", "\"BIONLP_EVALUATOR_DIR\"", ")", "==", "None", ")", ")", ")", ":", "\n", "        ", "menu", ".", "setDefault", "(", "\"i\"", ")", "\n", "menu", ".", "optDict", "[", "\"7\"", "]", ".", "toggle", "=", "True", "\n", "handlers", ".", "append", "(", "convertBioNLP", ".", "installEvaluators", ")", "\n", "handlerArgs", ".", "append", "(", "[", "evaluatorInstallPath", ",", "evaluatorDownloadPath", ",", "redownload", ",", "True", "]", ")", "\n", "# Add the handlers to install option", "\n", "", "menu", ".", "optDict", "[", "\"i\"", "]", ".", "handler", "=", "handlers", "\n", "menu", ".", "optDict", "[", "\"i\"", "]", ".", "handlerArgs", "=", "handlerArgs", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.buildMenus": [[335, 426], ["Menu", "Menu", "Menu", "Menu", "Menu", "Menu", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option", "Option"], "function", ["None"], ["", "def", "buildMenus", "(", ")", ":", "\n", "    ", "Menu", "(", "\"Classifier\"", ",", "None", ",", "[", "\n", "Option", "(", "\"1\"", ",", "\"Compile from source\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", "(", "\"i\"", ",", "\"Install\"", ",", "handler", "=", "Classifiers", ".", "SVMMultiClassClassifier", ".", "install", ")", ",", "\n", "Option", "(", "\"s\"", ",", "\"Skip\"", ")", "]", ",", "\n", "svmMenuInitializer", ")", "\n", "\n", "Menu", "(", "\"Install Directory\"", ",", "None", ",", "[", "\n", "Option", "(", "\"1\"", ",", "\"Change DATAPATH\"", ",", "dataInput", "=", "\"defaultInstallDir\"", ")", ",", "\n", "Option", "(", "\"2\"", ",", "\"Change TEES_SETTINGS\"", ",", "dataInput", "=", "\"configFilePath\"", ")", ",", "\n", "Option", "(", "\"c\"", ",", "\"Continue\"", ",", "\"Classifier\"", ",", "isDefault", "=", "True", ",", "handler", "=", "initLocalSettings", ")", "]", ",", "\n", "pathMenuInitializer", ")", "\n", "\n", "Menu", "(", "\"Configure TEES\"", ",", "\n", "\"\"\"\n        Welcome to using the Turku Event Extraction System (TEES)! In order to work, TEES\n        depends on a number of other programs, which have to be set up before use.\n        \n        The classifier (1) is required for all uses of the system. The models (2) are \n        required for predicting events and together with the preprocessing tools (4)\n        can be used on any unprocessed text. The corpora (3) are used for testing the \n        performance of a model or for training a new model.\n        \n        If you are unsure which components you need, just install everything (the default choice). \n        You can also rerun configure.py at any time later to install missing components.\n        \n        To make a choice, type the option's key and press enter, or just press enter for the\n        default option. The '*' sign indicates the default option and brackets a selectable one.\n        \"\"\"", ",", "\n", "[", "\n", "Option", "(", "\"1\"", ",", "\"Install classifier (SVM Multiclass)\"", ",", "toggle", "=", "True", ")", ",", "\n", "Option", "(", "\"2\"", ",", "\"Install models (TEES models for BioNLP'09-13 and DDI'11-13)\"", ",", "toggle", "=", "True", ")", ",", "\n", "Option", "(", "\"3\"", ",", "\"Install corpora (BioNLP'09-13 and DDI'11-13)\"", ",", "toggle", "=", "True", ")", ",", "\n", "Option", "(", "\"4\"", ",", "\"Install preprocessing tools (BANNER, BLLIP parser etc)\"", ",", "toggle", "=", "True", ")", ",", "\n", "Option", "(", "\"c\"", ",", "\"Continue and install selected items\"", ",", "\"Install Directory\"", ",", "isDefault", "=", "True", ")", ",", "\n", "Option", "(", "\"q\"", ",", "\"Quit\"", ",", "handler", "=", "sys", ".", "exit", ")", ",", "\n", "]", ")", "\n", "\n", "Menu", "(", "\"Models\"", ",", "\"Install TEES models\\n\"", ",", "[", "\n", "Option", "(", "\"1\"", ",", "\"Redownload already downloaded files\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", ".", "SPACE", ",", "\n", "Option", "(", "\"i\"", ",", "\"Install\"", ",", "isDefault", "=", "True", ")", ",", "\n", "Option", "(", "\"s\"", ",", "\"Skip\"", ")", "]", ",", "\n", "modelsMenuInitializer", ")", "\n", "\n", "Menu", "(", "\"Corpora\"", ",", "\"Install corpora\\n\"", ",", "[", "\n", "Option", "(", "\"1\"", ",", "\"Redownload already downloaded files\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", ".", "SPACE", ",", "\n", "Option", "(", "\"2\"", ",", "\"Install BioNLP'09 (GENIA) corpus\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", "(", "\"3\"", ",", "\"Install BioNLP'11 corpora\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", "(", "\"4\"", ",", "\"Install BioNLP'13 corpora\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", ".", "SPACE", ",", "\n", "Option", "(", "\"5\"", ",", "\"Install DDI'11 (Drug-Drug Interactions) corpus\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", "(", "\"6\"", ",", "\"Install DDI'13 (Drug-Drug Interactions) corpus\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", ".", "SPACE", ",", "\n", "Option", "(", "\"7\"", ",", "\"Install BioNLP evaluators\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", ".", "SPACE", ",", "\n", "Option", "(", "\"i\"", ",", "\"Install\"", ",", "isDefault", "=", "True", ")", ",", "\n", "Option", "(", "\"s\"", ",", "\"Skip\"", ")", "]", ",", "\n", "corpusMenuInitializer", ")", "\n", "\n", "Menu", "(", "\"Tools\"", ",", "\n", "\"\"\"\n         The tools are required for processing unannotated text and can\n         be used as part of TEES, or independently through their wrappers. For\n         information and usage conditions, see https://github.com/jbjorne/TEES/wiki/Licenses.\n         Some of the tools need to be compiled from source, this will take a while.\n         \n         The external tools used by TEES are:\n         \n         The GENIA Sentence Splitter of Tokyo University (Tsuruoka Y. et. al.)\n         \n         The BANNER named entity recognizer by Robert Leaman et. al.\n         \n         The BLLIP parser of Brown University (Charniak E., Johnson M. et. al.)\n         \n         The Stanford Parser of the Stanford Natural Language Processing Group\n         \"\"\"", ",", "\n", "[", "\n", "Option", "(", "\"1\"", ",", "\"Redownload already downloaded files\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", ".", "SPACE", ",", "\n", "Option", "(", "\"2\"", ",", "\"Install GENIA Sentence Splitter\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", "(", "\"3\"", ",", "\"Install BANNER named entity recognizer\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", "(", "\"4\"", ",", "\"Install BLLIP parser\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", "(", "\"5\"", ",", "\"Install Stanford Parser\"", ",", "toggle", "=", "False", ")", ",", "\n", "Option", ".", "SPACE", ",", "\n", "Option", "(", "\"i\"", ",", "\"Install\"", ",", "isDefault", "=", "True", ")", ",", "\n", "Option", "(", "\"s\"", ",", "\"Skip\"", ")", "]", ",", "\n", "toolsMenuInitializer", ")", "\n", "\n", "return", "\"Configure TEES\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.configure": [[427, 436], ["Menu.system.run", "Menu.system.finalize", "configure.buildMenus"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.configure.buildMenus"], ["", "def", "configure", "(", "installDir", "=", "None", ",", "localSettings", "=", "None", ",", "auto", "=", "False", ",", "width", "=", "80", ",", "clear", "=", "False", ",", "onError", "=", "\"ASK\"", ")", ":", "\n", "    ", "Menu", ".", "system", ".", "width", "=", "width", "\n", "Menu", ".", "system", ".", "progArgs", "=", "{", "}", "\n", "Menu", ".", "system", ".", "progArgs", "[", "\"installDir\"", "]", "=", "installDir", "\n", "Menu", ".", "system", ".", "progArgs", "[", "\"localSettings\"", "]", "=", "localSettings", "\n", "Menu", ".", "system", ".", "progArgs", "[", "\"clearInstallDir\"", "]", "=", "clear", "\n", "Menu", ".", "system", ".", "onException", "=", "onError", "\n", "Menu", ".", "system", ".", "run", "(", "buildMenus", "(", ")", ")", "\n", "Menu", ".", "system", ".", "finalize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.getMaxJobsFromFile": [[12, 22], ["open", "open.readlines", "open.close", "int", "len", "sys.exit"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["def", "getMaxJobsFromFile", "(", "controlFilename", ")", ":", "\n", "    ", "f", "=", "open", "(", "controlFilename", ",", "\"rt\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "assert", "len", "(", "lines", ")", "==", "1", "\n", "value", "=", "int", "(", "lines", "[", "0", "]", ")", "\n", "if", "value", "==", "0", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Exit by control file request\"", "\n", "sys", ".", "exit", "(", ")", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.getMaxJobs": [[23, 31], ["getMaxJobsSetting"], "function", ["None"], ["", "def", "getMaxJobs", "(", "maxJobs", ",", "controlFilename", "=", "None", ")", ":", "\n", "    ", "if", "maxJobs", "==", "None", ":", "\n", "        ", "if", "controlFilename", "!=", "None", ":", "\n", "            ", "return", "getMaxJobsSetting", "(", "controlFilename", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "", "", "else", ":", "\n", "        ", "return", "maxJobs", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.prepareCommand": [[32, 45], ["template.replace.replace", "template.replace.replace", "template.replace.replace", "template.replace.replace", "template.replace.replace", "os.path.abspath", "os.path.basename"], "function", ["None"], ["", "", "def", "prepareCommand", "(", "template", ",", "input", "=", "None", ",", "jobTag", "=", "None", ",", "output", "=", "None", ")", ":", "\n", "    ", "if", "\"%i\"", "in", "template", "or", "\"%a\"", "in", "template", "or", "\"%b\"", "in", "template", ":", "\n", "        ", "assert", "input", "!=", "None", "\n", "template", "=", "template", ".", "replace", "(", "\"%i\"", ",", "input", ")", "\n", "template", "=", "template", ".", "replace", "(", "\"%a\"", ",", "os", ".", "path", ".", "abspath", "(", "input", ")", ")", "\n", "template", "=", "template", ".", "replace", "(", "\"%b\"", ",", "os", ".", "path", ".", "basename", "(", "input", ")", ")", "\n", "", "if", "\"%j\"", "in", "template", ":", "\n", "        ", "assert", "jobTag", "!=", "None", "\n", "template", "=", "template", ".", "replace", "(", "\"%j\"", ",", "jobTag", ")", "\n", "", "if", "\"%o\"", "in", "template", ":", "\n", "        ", "assert", "output", "!=", "None", "\n", "template", "=", "template", ".", "replace", "(", "\"%o\"", ",", "output", ")", "\n", "", "return", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.submitJob": [[46, 100], ["connection.getJobStatusByName", "batch.prepareCommand", "input.endswith", "os.path.abspath", "os.path.basename", "connection.submit", "regex.match", "os.path.dirname", "os.path.abspath.rstrip().split", "os.path.abspath.rstrip().split", "connection.makeJobScript", "os.path.abspath.rstrip", "os.path.abspath.rstrip"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getJobStatusByName", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.prepareCommand", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.submit", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.makeJobScript"], ["", "def", "submitJob", "(", "command", ",", "input", ",", "connection", ",", "jobTag", "=", "None", ",", "output", "=", "None", ",", "regex", "=", "None", ",", "dummy", "=", "False", ",", "rerun", "=", "None", ",", "hideFinished", "=", "False", ")", ":", "\n", "    ", "if", "input", "!=", "None", "and", "input", ".", "endswith", "(", "\".job\"", ")", ":", "\n", "        ", "if", "connection", ".", "debug", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Skipped job control file\"", ",", "input", "\n", "", "return", "\n", "", "if", "connection", ".", "debug", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Preparing to submit a job for input\"", ",", "input", "\n", "", "if", "regex", "!=", "None", "and", "regex", ".", "match", "(", "input", ")", "==", "None", ":", "\n", "        ", "if", "connection", ".", "debug", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Regular expression did not match input, no job submitted\"", "\n", "", "return", "\n", "", "elif", "connection", ".", "debug", "and", "input", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Regular expression matched the input\"", "\n", "\n", "", "if", "input", "!=", "None", ":", "\n", "# Determine job name and directory from the input file", "\n", "        ", "jobDir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "input", ")", ")", "\n", "jobName", "=", "os", ".", "path", ".", "basename", "(", "input", ")", "\n", "if", "jobName", "==", "\"\"", ":", "# input is a directory", "\n", "            ", "jobName", "=", "jobDir", ".", "rstrip", "(", "\"/\"", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "# use directory name as job name", "\n", "jobDir", "=", "jobDir", ".", "rstrip", "(", "\"/\"", ")", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "# save job control file on the same level as the directory", "\n", "", "if", "jobTag", "!=", "None", ":", "\n", "            ", "jobName", "+=", "\"-\"", "+", "jobTag", "\n", "# A defined output directory means the job file goes there", "\n", "", "if", "output", "!=", "None", ":", "\n", "            ", "jobDir", "=", "output", "\n", "", "", "else", ":", "# inputless job", "\n", "        ", "assert", "jobTag", "!=", "None", "\n", "jobName", "=", "jobTag", "\n", "jobDir", "=", "output", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Processing job\"", ",", "jobName", ",", "\"for input\"", ",", "input", "\n", "jobStatus", "=", "connection", ".", "getJobStatusByName", "(", "jobDir", ",", "jobName", ")", "\n", "if", "jobStatus", "!=", "None", ":", "\n", "        ", "if", "rerun", "!=", "None", "and", "jobStatus", "in", "rerun", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Rerunning job\"", ",", "jobName", ",", "\"with status\"", ",", "jobStatus", "\n", "", "else", ":", "\n", "            ", "if", "jobStatus", "==", "\"RUNNING\"", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Skipping currently running job\"", "\n", "", "elif", "not", "hideFinished", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Skipping already processed job with status\"", ",", "jobStatus", "\n", "", "return", "False", "\n", "\n", "", "", "command", "=", "prepareCommand", "(", "command", ",", "input", ",", "jobTag", ",", "output", ")", "\n", "\n", "if", "not", "dummy", ":", "\n", "        ", "connection", ".", "submit", "(", "command", ",", "jobDir", ",", "jobName", ")", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Dummy mode\"", "\n", "if", "connection", ".", "debug", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"------- Job command -------\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "connection", ".", "makeJobScript", "(", "command", ",", "jobDir", ",", "jobName", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"--------------------------\"", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.waitForJobs": [[101, 111], ["connection.getNumJobs", "batch.getMaxJobs", "str", "str", "time.sleep", "connection.getNumJobs", "batch.getMaxJobs", "str", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.getNumJobs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.getMaxJobs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.getNumJobs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.getMaxJobs"], ["", "def", "waitForJobs", "(", "maxJobs", ",", "submitCount", ",", "connection", ",", "controlFilename", "=", "None", ",", "sleepTime", "=", "15", ")", ":", "\n", "    ", "currentJobs", "=", "connection", ".", "getNumJobs", "(", ")", "\n", "currentMaxJobs", "=", "getMaxJobs", "(", "maxJobs", ",", "controlFilename", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Current jobs\"", ",", "str", "(", "currentJobs", ")", "+", "\", max jobs\"", ",", "str", "(", "currentMaxJobs", ")", "+", "\", submitted jobs\"", ",", "submitCount", "\n", "if", "currentMaxJobs", "!=", "None", ":", "\n", "        ", "while", "(", "currentJobs", ">=", "currentMaxJobs", ")", ":", "\n", "            ", "time", ".", "sleep", "(", "sleepTime", ")", "\n", "currentJobs", "=", "connection", ".", "getNumJobs", "(", ")", "\n", "currentMaxJobs", "=", "getMaxJobs", "(", "maxJobs", ",", "controlFilename", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Current jobs\"", ",", "str", "(", "currentJobs", ")", "+", "\", max jobs\"", ",", "str", "(", "currentMaxJobs", ")", "+", "\", submitted jobs\"", ",", "submitCount", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.getOutputDir": [[112, 120], ["relativeCurrentDir.lstrip.lstrip", "os.path.join", "os.path.abspath", "len", "os.path.abspath"], "function", ["None"], ["", "", "", "def", "getOutputDir", "(", "currentDir", ",", "currentItem", ",", "input", ",", "output", "=", "None", ")", ":", "\n", "    ", "if", "output", "==", "None", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "#print (currentDir, currentItem, input, output, \"TEST\")", "\n", "        ", "relativeCurrentDir", "=", "os", ".", "path", ".", "abspath", "(", "currentDir", ")", "[", "len", "(", "os", ".", "path", ".", "abspath", "(", "input", ")", ")", ":", "]", "\n", "relativeCurrentDir", "=", "relativeCurrentDir", ".", "lstrip", "(", "\"/\"", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "output", ",", "relativeCurrentDir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.batch": [[121, 169], ["Utils.Connection.Connection.getConnection", "batch.waitForJobs", "batch.submitJob", "os.path.exists", "os.path.isfile", "batch.waitForJobs", "batch.submitJob", "batch.waitForJobs", "os.walk", "sorted", "sorted", "batch.submitJob", "regexDir.match", "os.path.join", "batch.getOutputDir", "batch.waitForJobs", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.waitForJobs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.submitJob", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.waitForJobs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.submitJob", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.waitForJobs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.submitJob", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.tees.batch.getOutputDir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.waitForJobs"], ["", "", "def", "batch", "(", "command", ",", "input", "=", "None", ",", "connection", "=", "None", ",", "jobTag", "=", "None", ",", "output", "=", "None", ",", "regex", "=", "None", ",", "regexDir", "=", "None", ",", "dummy", "=", "False", ",", "rerun", "=", "None", ",", "\n", "hideFinished", "=", "False", ",", "controlFilename", "=", "None", ",", "sleepTime", "=", "None", ",", "debug", "=", "False", ",", "limit", "=", "None", ",", "loop", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Process a large number of input files\n    \n    @param input: An input file or directory. A directory will be processed recursively\n    @param connection: A parameter set defining a local connection for submitting the jobs\n    @param jobTag: The name of the job file, usually if input is not defined. Can be used in the command template.\n    @param output: An optional output directory. The input directory tree will be replicated here.\n    @param regex: A regular expression for selecting input files\n    @param regexDir: A regular expression for input directories, allowing early out for entire subtrees\n    @param dummy: In dummy mode, jobs are only printed on screen, not submitted. Good for testing\n    @param rerun: A job is normally submitted only if it does not already exist. If an existing job needs to be resubmitted, this defines the status codes, usually FAILED or FINISHED\n    @param hideFinished: Do not print a notification when skipping an existing job\n    @param controlFilename: A file with only one number inside it. This is the job limit, and can be changed while batch.py is running.\n    @param sleepTime: The time to wait between checks when waiting for jobs to finish. Default is 15 seconds.\n    @param debug: Job submission scripts are printed on screen.\n    @param limit: Maximum number of jobs. Overrides controlFilename\n    @param loop: Loop over the input directory. Otherwise process it once.\n    \"\"\"", "\n", "if", "sleepTime", "==", "None", ":", "\n", "        ", "sleepTime", "=", "15", "\n", "", "connection", "=", "getConnection", "(", "connection", ")", "\n", "connection", ".", "debug", "=", "debug", "\n", "if", "input", "==", "None", ":", "# an inputless batch job:", "\n", "        ", "waitForJobs", "(", "limit", ",", "0", ",", "connection", ",", "controlFilename", ",", "sleepTime", ")", "\n", "submitJob", "(", "command", ",", "input", ",", "connection", ",", "jobTag", ",", "output", ",", "regex", ",", "dummy", ",", "rerun", ",", "hideFinished", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "input", ")", "and", "os", ".", "path", ".", "isfile", "(", "input", ")", ":", "# single file", "\n", "        ", "waitForJobs", "(", "limit", ",", "0", ",", "connection", ",", "controlFilename", ",", "sleepTime", ")", "\n", "submitJob", "(", "command", ",", "input", ",", "connection", ",", "jobTag", ",", "output", ",", "regex", ",", "dummy", ",", "rerun", ",", "hideFinished", ")", "\n", "", "else", ":", "# walk directory tree", "\n", "        ", "firstLoop", "=", "True", "\n", "submitCount", "=", "0", "\n", "while", "firstLoop", "or", "loop", ":", "\n", "            ", "waitForJobs", "(", "limit", ",", "submitCount", ",", "connection", ",", "controlFilename", ",", "sleepTime", ")", "\n", "for", "triple", "in", "os", ".", "walk", "(", "input", ")", ":", "\n", "                ", "if", "regexDir", "!=", "None", "and", "regexDir", ".", "match", "(", "os", ".", "path", ".", "join", "(", "triple", "[", "0", "]", ")", ")", "==", "None", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"Skipping directory\"", ",", "triple", "[", "0", "]", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"Processing directory\"", ",", "triple", "[", "0", "]", "\n", "", "for", "item", "in", "sorted", "(", "triple", "[", "1", "]", ")", "+", "sorted", "(", "triple", "[", "2", "]", ")", ":", "# process both directories and files", "\n", "#print item, triple, os.path.join(triple[0], item)", "\n", "                    ", "if", "submitJob", "(", "command", ",", "os", ".", "path", ".", "join", "(", "triple", "[", "0", "]", ",", "item", ")", ",", "connection", ",", "jobTag", ",", "getOutputDir", "(", "triple", "[", "0", "]", ",", "item", ",", "input", ",", "output", ")", ",", "regex", ",", "dummy", ",", "rerun", ",", "hideFinished", ")", ":", "\n", "                        ", "submitCount", "+=", "1", "\n", "# number of submitted jobs has increased, so check if we need to wait", "\n", "waitForJobs", "(", "limit", ",", "submitCount", ",", "connection", ",", "controlFilename", ",", "sleepTime", ")", "\n", "", "", "", "firstLoop", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EdgeDetector.EdgeDetector.__init__": [[11, 19], ["SingleStageDetector.SingleStageDetector.SingleStageDetector.__init__", "ExampleWriters.EdgeExampleWriter.EdgeExampleWriter"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "SingleStageDetector", ".", "__init__", "(", "self", ")", "\n", "self", ".", "exampleBuilder", "=", "EdgeExampleBuilder", "\n", "self", ".", "exampleWriter", "=", "EdgeExampleWriter", "(", ")", "\n", "self", ".", "Classifier", "=", "SVMMultiClassClassifier", "\n", "self", ".", "evaluator", "=", "AveragingMultiClassEvaluator", "\n", "#self.stEvaluator = Evaluators.BioNLP11GeniaTools", "\n", "self", ".", "tag", "=", "\"edge-\"", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.Preprocessor.Preprocessor.__init__": [[22, 25], ["ToolChain.ToolChain.ToolChain.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "ToolChain", ".", "__init__", "(", "self", ")", "\n", "self", ".", "modelParameterStringName", "=", "\"preprocessorParams\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.Preprocessor.Preprocessor.getDefaultSteps": [[26, 37], ["steps.append", "steps.append", "steps.append", "steps.append", "steps.append", "steps.append", "steps.append", "steps.append"], "methods", ["None"], ["", "def", "getDefaultSteps", "(", "self", ")", ":", "\n", "        ", "steps", "=", "[", "]", "\n", "steps", ".", "append", "(", "(", "\"CONVERT\"", ",", "self", ".", "convert", ",", "{", "\"dataSetNames\"", ":", "None", ",", "\"corpusName\"", ":", "None", "}", ",", "\"documents.xml\"", ")", ")", "\n", "steps", ".", "append", "(", "(", "\"SPLIT-SENTENCES\"", ",", "Tools", ".", "GeniaSentenceSplitter", ".", "makeSentences", ",", "{", "\"debug\"", ":", "False", ",", "\"postProcess\"", ":", "True", "}", ",", "\"sentences.xml\"", ")", ")", "\n", "steps", ".", "append", "(", "(", "\"NER\"", ",", "Tools", ".", "BANNER", ".", "run", ",", "{", "\"elementName\"", ":", "\"entity\"", ",", "\"processElement\"", ":", "\"sentence\"", ",", "\"debug\"", ":", "False", ",", "\"splitNewlines\"", ":", "True", "}", ",", "\"ner.xml\"", ")", ")", "\n", "steps", ".", "append", "(", "(", "\"PARSE\"", ",", "Tools", ".", "BLLIPParser", ".", "parse", ",", "{", "\"parseName\"", ":", "\"McCC\"", ",", "\"requireEntities\"", ":", "False", ",", "\"debug\"", ":", "False", "}", ",", "\"parse.xml\"", ")", ")", "\n", "steps", ".", "append", "(", "(", "\"CONVERT-PARSE\"", ",", "Tools", ".", "StanfordParser", ".", "convertXML", ",", "{", "\"parser\"", ":", "\"McCC\"", ",", "\"debug\"", ":", "False", "}", ",", "\"converted-parse.xml\"", ")", ")", "\n", "steps", ".", "append", "(", "(", "\"SPLIT-NAMES\"", ",", "ProteinNameSplitter", ".", "mainFunc", ",", "{", "\"parseName\"", ":", "\"McCC\"", ",", "\"removeOld\"", ":", "True", "}", ",", "\"split-names.xml\"", ")", ")", "\n", "steps", ".", "append", "(", "(", "\"FIND-HEADS\"", ",", "FindHeads", ".", "findHeads", ",", "{", "\"parse\"", ":", "\"McCC\"", ",", "\"removeExisting\"", ":", "True", "}", ",", "\"heads.xml\"", ")", ")", "\n", "steps", ".", "append", "(", "(", "\"DIVIDE-SETS\"", ",", "self", ".", "divideSets", ",", "{", "\"outputStem\"", ":", "None", ",", "\"saveCombined\"", ":", "True", "}", ")", ")", "\n", "return", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.Preprocessor.Preprocessor.process": [[38, 57], ["ToolChain.ToolChain.ToolChain.process", "Exception", "type"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process"], ["", "def", "process", "(", "self", ",", "source", ",", "output", ",", "parameters", "=", "None", ",", "model", "=", "None", ",", "sourceDataSetNames", "=", "None", ",", "fromStep", "=", "None", ",", "toStep", "=", "None", ",", "omitSteps", "=", "None", ")", ":", "\n", "        ", "if", "omitSteps", "!=", "None", "and", "(", "(", "type", "(", "omitSteps", ")", "in", "types", ".", "StringTypes", "and", "omitSteps", "==", "\"CONVERT\"", ")", "or", "\"CONVERT\"", "in", "omitSteps", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Preprocessor step 'CONVERT' may not be omitted\"", ")", "\n", "\n", "# Initialize variables and save existing default values", "\n", "#self.intermediateFileTag = corpusName", "\n", "#parameters = self.getParameters(parameters, model)", "\n", "#parameters[\"CONVERT.dataSetNames\"] = sourceDataSetNames", "\n", "#parameters[\"CONVERT.corpusName\"] = corpusName", "\n", "#convertSetNames = self.stepArgs(\"CONVERT\")[\"dataSetNames\"]", "\n", "#convertCorpusName = self.stepArgs(\"CONVERT\")[\"corpusName\"]", "\n", "#self.stepArgs(\"CONVERT\")[\"dataSetNames\"] = sourceDataSetNames", "\n", "#self.stepArgs(\"CONVERT\")[\"corpusName\"] = corpusName", "\n", "# Run the tool chain", "\n", "", "xml", "=", "ToolChain", ".", "process", "(", "self", ",", "source", ",", "output", ",", "parameters", ",", "model", ",", "fromStep", ",", "toStep", ",", "omitSteps", ")", "\n", "# Reset variables to saved default values", "\n", "#self.stepArgs(\"CONVERT\")[\"dataSetNames\"] = convertSetNames", "\n", "#self.stepArgs(\"CONVERT\")[\"corpusName\"] = convertCorpusName", "\n", "return", "xml", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.Preprocessor.Preprocessor.convert": [[58, 86], ["isinstance", "itertools.izip_longest", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.STFormat.ConvertXML.toInteractionXML", "Utils.ETFromObj", "Utils.ETFromObj", "Utils.ETFromObj", "Utils.ETFromObj", "Utils.ETFromObj", "Utils.ETFromObj", "Utils.ETFromObj", "Utils.ETFromObj", "os.path.isdir", "input.endswith", "input.endswith", "type", "dataSetDirs.split.split.split", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "Utils.STFormat.STTools.loadSet", "documents.extend", "type", "dataSetNames.split.split.split", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj"], ["", "def", "convert", "(", "self", ",", "input", ",", "dataSetNames", "=", "None", ",", "corpusName", "=", "None", ",", "output", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "basestring", ")", "and", "(", "os", ".", "path", ".", "isdir", "(", "input", ")", "or", "input", ".", "endswith", "(", "\".tar.gz\"", ")", "or", "input", ".", "endswith", "(", "\".txt\"", ")", "or", "\",\"", "in", "input", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Converting ST-format to Interaction XML\"", "\n", "# Get input file (or files)", "\n", "dataSetDirs", "=", "input", "\n", "documents", "=", "[", "]", "\n", "if", "type", "(", "dataSetDirs", ")", "in", "types", ".", "StringTypes", ":", "\n", "                ", "dataSetDirs", "=", "dataSetDirs", ".", "split", "(", "\",\"", ")", "\n", "# Get the list of \"train\", \"devel\" etc names for these sets", "\n", "", "if", "dataSetNames", "==", "None", ":", "\n", "                ", "dataSetNames", "=", "[", "]", "\n", "", "elif", "type", "(", "dataSetNames", ")", "in", "types", ".", "StringTypes", ":", "\n", "                ", "dataSetNames", "=", "dataSetNames", ".", "split", "(", "\",\"", ")", "\n", "# Convert all input files into one corpus", "\n", "", "for", "dataSetDir", ",", "dataSetName", "in", "itertools", ".", "izip_longest", "(", "dataSetDirs", ",", "dataSetNames", ",", "fillvalue", "=", "None", ")", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Reading\"", ",", "dataSetDir", ",", "\"set,\"", ",", "\n", "docs", "=", "Utils", ".", "STFormat", ".", "STTools", ".", "loadSet", "(", "dataSetDir", ",", "dataSetName", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "len", "(", "docs", ")", ",", "\"documents\"", "\n", "documents", ".", "extend", "(", "docs", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Resolving equivalences\"", "\n", "Utils", ".", "STFormat", ".", "Equiv", ".", "process", "(", "documents", ")", "\n", "if", "corpusName", "==", "None", ":", "\n", "                ", "corpusName", "=", "\"TEES\"", "\n", "", "self", ".", "xml", "=", "Utils", ".", "STFormat", ".", "ConvertXML", ".", "toInteractionXML", "(", "documents", ",", "corpusName", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Processing source as interaction XML\"", "\n", "self", ".", "xml", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "", "return", "self", ".", "xml", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.Preprocessor.Preprocessor.divideSets": [[87, 94], ["os.path.split", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus"], ["", "def", "divideSets", "(", "self", ",", "input", ",", "outputStem", ",", "saveCombined", "=", "True", ")", ":", "\n", "        ", "if", "outputStem", "!=", "None", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Dividing into sets\"", "\n", "outDir", ",", "outputStem", "=", "os", ".", "path", ".", "split", "(", "outputStem", ")", "\n", "Utils", ".", "InteractionXML", ".", "DivideSets", ".", "processCorpus", "(", "input", ",", "outDir", ",", "outputStem", ",", "\".xml\"", ",", "saveCombined", "=", "saveCombined", ")", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"No set division\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EntityDetector.EntityDetector.__init__": [[11, 18], ["SingleStageDetector.SingleStageDetector.SingleStageDetector.__init__", "ExampleWriters.EntityExampleWriter.EntityExampleWriter"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "SingleStageDetector", ".", "__init__", "(", "self", ")", "\n", "self", ".", "exampleBuilder", "=", "EntityExampleBuilder", "\n", "self", ".", "exampleWriter", "=", "EntityExampleWriter", "(", ")", "\n", "self", ".", "Classifier", "=", "SVMMultiClassClassifier", "\n", "self", ".", "evaluator", "=", "AveragingMultiClassEvaluator", "\n", "self", ".", "tag", "=", "\"trigger-\"", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.__init__": [[23, 34], ["Detector.Detector.Detector.__init__", "EntityDetector.EntityDetector.EntityDetector", "EdgeDetector.EdgeDetector.EdgeDetector", "UnmergingDetector.UnmergingDetector.UnmergingDetector", "ModifierDetector.ModifierDetector.ModifierDetector"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "Detector", ".", "__init__", "(", "self", ")", "\n", "self", ".", "triggerDetector", "=", "EntityDetector", "(", ")", "\n", "self", ".", "edgeDetector", "=", "EdgeDetector", "(", ")", "\n", "self", ".", "unmergingDetector", "=", "UnmergingDetector", "(", ")", "\n", "self", ".", "doUnmergingSelfTraining", "=", "True", "#False", "\n", "self", ".", "modifierDetector", "=", "ModifierDetector", "(", ")", "\n", "#self.stEvaluator = Evaluators.BioNLP11GeniaTools", "\n", "#self.stWriteScores = False", "\n", "self", ".", "STATE_COMPONENT_TRAIN", "=", "\"COMPONENT_TRAIN\"", "\n", "self", ".", "tag", "=", "\"event-\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setConnection": [[35, 41], ["EventDetector.EventDetector.triggerDetector.setConnection", "EventDetector.EventDetector.edgeDetector.setConnection", "EventDetector.EventDetector.unmergingDetector.setConnection", "EventDetector.EventDetector.modifierDetector.setConnection"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setConnection", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setConnection", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setConnection", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setConnection"], ["", "def", "setConnection", "(", "self", ",", "connection", ")", ":", "\n", "        ", "self", ".", "triggerDetector", ".", "setConnection", "(", "connection", ")", "\n", "self", ".", "edgeDetector", ".", "setConnection", "(", "connection", ")", "\n", "self", ".", "unmergingDetector", ".", "setConnection", "(", "connection", ")", "\n", "self", ".", "modifierDetector", ".", "setConnection", "(", "connection", ")", "\n", "return", "connection", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setWorkDir": [[42, 48], ["Detector.Detector.Detector.setWorkDir", "detector.setWorkDir"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setWorkDir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setWorkDir"], ["", "def", "setWorkDir", "(", "self", ",", "workDir", ")", ":", "\n", "        ", "Detector", ".", "setWorkDir", "(", "self", ",", "workDir", ")", "# for EventDetector", "\n", "# setup components", "\n", "for", "detector", "in", "[", "self", ".", "triggerDetector", ",", "self", ".", "edgeDetector", ",", "self", ".", "unmergingDetector", ",", "self", ".", "modifierDetector", "]", ":", "\n", "            ", "if", "detector", "!=", "None", ":", "\n", "                ", "detector", ".", "setWorkDir", "(", "workDir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.train": [[49, 167], ["EventDetector.EventDetector.initVariables", "EventDetector.EventDetector.setWorkDir", "EventDetector.EventDetector.enterState", "EventDetector.EventDetector.triggerDetector.enterState", "EventDetector.EventDetector.edgeDetector.enterState", "EventDetector.EventDetector.unmergingDetector.enterState", "EventDetector.EventDetector.modifierDetector.enterState", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.openModel", "EventDetector.EventDetector.openModel", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.trainUnmergingDetector", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.exitState", "EventDetector.EventDetector.triggerDetector.exitState", "EventDetector.EventDetector.edgeDetector.exitState", "EventDetector.EventDetector.unmergingDetector.exitState", "EventDetector.EventDetector.modifierDetector.exitState", "EventDetector.EventDetector.initModel", "EventDetector.EventDetector.initModel", "EventDetector.EventDetector.saveStrings", "EventDetector.EventDetector.saveStrings", "EventDetector.EventDetector.structureAnalyzer.analyze", "EventDetector.EventDetector.structureAnalyzer.hasEvents", "EventDetector.EventDetector.structureAnalyzer.hasModifiers", "EventDetector.EventDetector.triggerDetector.buildExamples", "EventDetector.EventDetector.edgeDetector.buildExamples", "EventDetector.EventDetector.triggerDetector.beginModel", "EventDetector.EventDetector.edgeDetector.beginModel", "EventDetector.EventDetector.triggerDetector.endModel", "EventDetector.EventDetector.edgeDetector.endModel", "EventDetector.EventDetector.doGrid", "EventDetector.EventDetector.triggerDetector.endModel", "EventDetector.EventDetector.edgeDetector.endModel", "EventDetector.EventDetector.setWorkDir", "EventDetector.EventDetector.structureAnalyzer.toString", "EventDetector.EventDetector.structureAnalyzer.isInitialized", "EventDetector.EventDetector.structureAnalyzer.load", "EventDetector.EventDetector.structureAnalyzer.isInitialized", "EventDetector.EventDetector.structureAnalyzer.load", "EventDetector.EventDetector.modifierDetector.buildExamples", "EventDetector.EventDetector.modifierDetector.beginModel", "EventDetector.EventDetector.modifierDetector.endModel", "EventDetector.EventDetector.triggerDetector.beginModel", "EventDetector.EventDetector.edgeDetector.beginModel", "EventDetector.EventDetector.modifierDetector.beginModel", "EventDetector.EventDetector.triggerDetector.beginModel", "EventDetector.EventDetector.edgeDetector.beginModel", "EventDetector.EventDetector.modifierDetector.endModel", "optData.replace", "trainData.replace", "optData.replace", "trainData.replace", "EventDetector.EventDetector.modifierDetector.beginModel"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setWorkDir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.trainUnmergingDetector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.UnmergingDetector.UnmergingDetector.buildExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.UnmergingDetector.UnmergingDetector.buildExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.endModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.endModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.doGrid", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.endModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.endModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setWorkDir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.load", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.load", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.UnmergingDetector.UnmergingDetector.buildExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.endModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.endModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel"], ["", "", "", "def", "train", "(", "self", ",", "trainData", "=", "None", ",", "optData", "=", "None", ",", "\n", "model", "=", "None", ",", "combinedModel", "=", "None", ",", "\n", "triggerExampleStyle", "=", "None", ",", "edgeExampleStyle", "=", "None", ",", "unmergingExampleStyle", "=", "None", ",", "modifierExampleStyle", "=", "None", ",", "\n", "triggerClassifierParameters", "=", "None", ",", "edgeClassifierParameters", "=", "None", ",", "\n", "unmergingClassifierParameters", "=", "None", ",", "modifierClassifierParameters", "=", "None", ",", "\n", "recallAdjustParameters", "=", "None", ",", "unmerging", "=", "None", ",", "trainModifiers", "=", "None", ",", "\n", "fullGrid", "=", "False", ",", "task", "=", "None", ",", "\n", "parse", "=", "None", ",", "tokenization", "=", "None", ",", "\n", "fromStep", "=", "None", ",", "toStep", "=", "None", ",", "\n", "workDir", "=", "None", ")", ":", "\n", "# Initialize the training process ##############################", "\n", "        ", "self", ".", "initVariables", "(", "trainData", "=", "trainData", ",", "optData", "=", "optData", ",", "model", "=", "model", ",", "combinedModel", "=", "combinedModel", ",", "\n", "triggerExampleStyle", "=", "triggerExampleStyle", ",", "edgeExampleStyle", "=", "edgeExampleStyle", ",", "\n", "unmergingExampleStyle", "=", "unmergingExampleStyle", ",", "modifierExampleStyle", "=", "modifierExampleStyle", ",", "\n", "triggerClassifierParameters", "=", "triggerClassifierParameters", ",", "\n", "edgeClassifierParameters", "=", "edgeClassifierParameters", ",", "\n", "unmergingClassifierParameters", "=", "unmergingClassifierParameters", ",", "\n", "modifierClassifierParameters", "=", "modifierClassifierParameters", ",", "\n", "recallAdjustParameters", "=", "recallAdjustParameters", ",", "unmerging", "=", "unmerging", ",", "trainModifiers", "=", "trainModifiers", ",", "\n", "fullGrid", "=", "fullGrid", ",", "task", "=", "task", ",", "parse", "=", "parse", ",", "tokenization", "=", "tokenization", ")", "\n", "self", ".", "setWorkDir", "(", "workDir", ")", "\n", "# Begin the training process ####################################", "\n", "self", ".", "enterState", "(", "self", ".", "STATE_TRAIN", ",", "[", "\"ANALYZE\"", ",", "\"EXAMPLES\"", ",", "\"BEGIN-MODEL\"", ",", "\"END-MODEL\"", ",", "\"BEGIN-COMBINED-MODEL\"", ",", "\n", "\"SELF-TRAIN-EXAMPLES-FOR-UNMERGING\"", ",", "\"UNMERGING-EXAMPLES\"", ",", "\"BEGIN-UNMERGING-MODEL\"", ",", "\"END-UNMERGING-MODEL\"", ",", "\n", "\"GRID\"", ",", "\"BEGIN-COMBINED-MODEL-FULLGRID\"", ",", "\"END-COMBINED-MODEL\"", "]", ",", "fromStep", ",", "toStep", ")", "\n", "self", ".", "triggerDetector", ".", "enterState", "(", "self", ".", "STATE_COMPONENT_TRAIN", ")", "\n", "self", ".", "edgeDetector", ".", "enterState", "(", "self", ".", "STATE_COMPONENT_TRAIN", ")", "\n", "self", ".", "unmergingDetector", ".", "enterState", "(", "self", ".", "STATE_COMPONENT_TRAIN", ")", "\n", "self", ".", "modifierDetector", ".", "enterState", "(", "self", ".", "STATE_COMPONENT_TRAIN", ")", "\n", "if", "self", ".", "checkStep", "(", "\"ANALYZE\"", ")", ":", "\n", "# General training initialization done at the beginning of the first state", "\n", "            ", "self", ".", "model", "=", "self", ".", "initModel", "(", "self", ".", "model", ",", "\n", "[", "(", "\"triggerExampleStyle\"", ",", "self", ".", "triggerDetector", ".", "tag", "+", "\"example-style\"", ")", ",", "\n", "(", "\"triggerClassifierParameters\"", ",", "self", ".", "triggerDetector", ".", "tag", "+", "\"classifier-parameters-train\"", ")", ",", "\n", "(", "\"edgeExampleStyle\"", ",", "self", ".", "edgeDetector", ".", "tag", "+", "\"example-style\"", ")", ",", "\n", "(", "\"edgeClassifierParameters\"", ",", "self", ".", "edgeDetector", ".", "tag", "+", "\"classifier-parameters-train\"", ")", ",", "\n", "(", "\"unmergingExampleStyle\"", ",", "self", ".", "unmergingDetector", ".", "tag", "+", "\"example-style\"", ")", ",", "\n", "(", "\"unmergingClassifierParameters\"", ",", "self", ".", "unmergingDetector", ".", "tag", "+", "\"classifier-parameters-train\"", ")", ",", "\n", "(", "\"modifierExampleStyle\"", ",", "self", ".", "modifierDetector", ".", "tag", "+", "\"example-style\"", ")", ",", "\n", "(", "\"modifierClassifierParameters\"", ",", "self", ".", "modifierDetector", ".", "tag", "+", "\"classifier-parameters-train\"", ")", "]", ")", "\n", "self", ".", "combinedModel", "=", "self", ".", "initModel", "(", "self", ".", "combinedModel", ")", "\n", "tags", "=", "[", "self", ".", "triggerDetector", ".", "tag", ",", "self", ".", "edgeDetector", ".", "tag", ",", "self", ".", "unmergingDetector", ".", "tag", ",", "self", ".", "modifierDetector", ".", "tag", "]", "\n", "stringDict", "=", "{", "}", "\n", "for", "tag", "in", "tags", ":", "\n", "                ", "stringDict", "[", "tag", "+", "\"parse\"", "]", "=", "parse", "\n", "stringDict", "[", "tag", "+", "\"task\"", "]", "=", "task", "\n", "", "self", ".", "saveStrings", "(", "stringDict", ",", "self", ".", "model", ")", "\n", "self", ".", "saveStrings", "(", "stringDict", ",", "self", ".", "combinedModel", ",", "False", ")", "\n", "# Perform structure analysis", "\n", "self", ".", "structureAnalyzer", ".", "analyze", "(", "[", "optData", ",", "trainData", "]", ",", "self", ".", "model", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "self", ".", "structureAnalyzer", ".", "toString", "(", ")", "\n", "# (Re-)open models in case we start after the first (\"ANALYZE\") step", "\n", "", "self", ".", "model", "=", "self", ".", "openModel", "(", "model", ",", "\"a\"", ")", "\n", "self", ".", "combinedModel", "=", "self", ".", "openModel", "(", "combinedModel", ",", "\"a\"", ")", "\n", "# Use structure analysis to define automatic parameters", "\n", "if", "self", ".", "unmerging", "==", "None", ":", "\n", "            ", "if", "not", "self", ".", "structureAnalyzer", ".", "isInitialized", "(", ")", ":", "\n", "                ", "self", ".", "structureAnalyzer", ".", "load", "(", "self", ".", "model", ")", "\n", "", "self", ".", "unmerging", "=", "self", ".", "structureAnalyzer", ".", "hasEvents", "(", ")", "\n", "", "if", "self", ".", "trainModifiers", "==", "None", ":", "\n", "            ", "if", "not", "self", ".", "structureAnalyzer", ".", "isInitialized", "(", ")", ":", "\n", "                ", "self", ".", "structureAnalyzer", ".", "load", "(", "self", ".", "model", ")", "\n", "", "self", ".", "trainModifiers", "=", "self", ".", "structureAnalyzer", ".", "hasModifiers", "(", ")", "\n", "", "if", "self", ".", "checkStep", "(", "\"EXAMPLES\"", ")", ":", "\n", "            ", "self", ".", "triggerDetector", ".", "buildExamples", "(", "self", ".", "model", ",", "[", "optData", ".", "replace", "(", "\"-nodup\"", ",", "\"\"", ")", ",", "trainData", ".", "replace", "(", "\"-nodup\"", ",", "\"\"", ")", "]", ",", "[", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"opt-examples.gz\"", ",", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"train-examples.gz\"", "]", ",", "saveIdsToModel", "=", "True", ")", "\n", "self", ".", "edgeDetector", ".", "buildExamples", "(", "self", ".", "model", ",", "[", "optData", ".", "replace", "(", "\"-nodup\"", ",", "\"\"", ")", ",", "trainData", ".", "replace", "(", "\"-nodup\"", ",", "\"\"", ")", "]", ",", "[", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"opt-examples.gz\"", ",", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"train-examples.gz\"", "]", ",", "saveIdsToModel", "=", "True", ")", "\n", "if", "self", ".", "trainModifiers", ":", "\n", "                ", "self", ".", "modifierDetector", ".", "buildExamples", "(", "self", ".", "model", ",", "[", "optData", ",", "trainData", "]", ",", "[", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"opt-examples.gz\"", ",", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"train-examples.gz\"", "]", ",", "saveIdsToModel", "=", "True", ")", "\n", "", "", "if", "self", ".", "checkStep", "(", "\"BEGIN-MODEL\"", ")", ":", "\n", "#for model in [self.model, self.combinedModel]:", "\n", "#    if model != None:", "\n", "#        model.addStr(\"BioNLPSTParams\", Parameters.toString(self.bioNLPSTParams))", "\n", "            ", "self", ".", "triggerDetector", ".", "bioNLPSTParams", "=", "self", ".", "bioNLPSTParams", "\n", "self", ".", "triggerDetector", ".", "beginModel", "(", "None", ",", "self", ".", "model", ",", "[", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"train-examples.gz\"", "]", ",", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "self", ".", "edgeDetector", ".", "beginModel", "(", "None", ",", "self", ".", "model", ",", "[", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"train-examples.gz\"", "]", ",", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "if", "self", ".", "trainModifiers", ":", "\n", "                ", "self", ".", "modifierDetector", ".", "beginModel", "(", "None", ",", "self", ".", "model", ",", "[", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"train-examples.gz\"", "]", ",", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "", "", "if", "self", ".", "checkStep", "(", "\"END-MODEL\"", ")", ":", "\n", "            ", "self", ".", "triggerDetector", ".", "endModel", "(", "None", ",", "self", ".", "model", ",", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "self", ".", "edgeDetector", ".", "endModel", "(", "None", ",", "self", ".", "model", ",", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "if", "self", ".", "trainModifiers", ":", "\n", "                ", "self", ".", "modifierDetector", ".", "endModel", "(", "None", ",", "self", ".", "model", ",", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "", "", "if", "self", ".", "checkStep", "(", "\"BEGIN-COMBINED-MODEL\"", ")", ":", "\n", "            ", "if", "not", "self", ".", "fullGrid", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Training combined model before grid search\"", "\n", "self", ".", "triggerDetector", ".", "beginModel", "(", "None", ",", "self", ".", "combinedModel", ",", "[", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"train-examples.gz\"", ",", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"opt-examples.gz\"", "]", ",", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"opt-examples.gz\"", ",", "self", ".", "model", ")", "\n", "self", ".", "edgeDetector", ".", "beginModel", "(", "None", ",", "self", ".", "combinedModel", ",", "[", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"train-examples.gz\"", ",", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"opt-examples.gz\"", "]", ",", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"opt-examples.gz\"", ",", "self", ".", "model", ")", "\n", "", "else", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Combined model will be trained after grid search\"", "\n", "", "if", "self", ".", "trainModifiers", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Training combined model for modifier detection\"", "\n", "self", ".", "modifierDetector", ".", "beginModel", "(", "None", ",", "self", ".", "combinedModel", ",", "[", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"train-examples.gz\"", ",", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"opt-examples.gz\"", "]", ",", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"opt-examples.gz\"", ",", "self", ".", "model", ")", "\n", "", "", "self", ".", "trainUnmergingDetector", "(", ")", "\n", "if", "self", ".", "checkStep", "(", "\"GRID\"", ")", ":", "\n", "            ", "self", ".", "doGrid", "(", ")", "\n", "", "if", "self", ".", "checkStep", "(", "\"BEGIN-COMBINED-MODEL-FULLGRID\"", ")", ":", "\n", "            ", "if", "self", ".", "fullGrid", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Training combined model after grid search\"", "\n", "self", ".", "triggerDetector", ".", "beginModel", "(", "None", ",", "self", ".", "combinedModel", ",", "[", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"train-examples.gz\"", ",", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"opt-examples.gz\"", "]", ",", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"opt-examples.gz\"", ",", "self", ".", "model", ")", "\n", "self", ".", "edgeDetector", ".", "beginModel", "(", "None", ",", "self", ".", "combinedModel", ",", "[", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"train-examples.gz\"", ",", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"opt-examples.gz\"", "]", ",", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"opt-examples.gz\"", ",", "self", ".", "model", ")", "\n", "if", "self", ".", "trainModifiers", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"Training combined model for modifier detection\"", "\n", "self", ".", "modifierDetector", ".", "beginModel", "(", "None", ",", "self", ".", "combinedModel", ",", "[", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"train-examples.gz\"", ",", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"opt-examples.gz\"", "]", ",", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"opt-examples.gz\"", ",", "self", ".", "model", ")", "\n", "", "", "else", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Combined model has been trained before grid search\"", "\n", "", "", "if", "self", ".", "checkStep", "(", "\"END-COMBINED-MODEL\"", ")", ":", "\n", "            ", "self", ".", "triggerDetector", ".", "endModel", "(", "None", ",", "self", ".", "combinedModel", ",", "self", ".", "workDir", "+", "self", ".", "triggerDetector", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "self", ".", "edgeDetector", ".", "endModel", "(", "None", ",", "self", ".", "combinedModel", ",", "self", ".", "workDir", "+", "self", ".", "edgeDetector", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "if", "self", ".", "trainModifiers", ":", "\n", "                ", "self", ".", "modifierDetector", ".", "endModel", "(", "None", ",", "self", ".", "combinedModel", ",", "self", ".", "workDir", "+", "self", ".", "modifierDetector", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "# End the training process ####################################", "\n", "", "", "if", "workDir", "!=", "None", ":", "\n", "            ", "self", ".", "setWorkDir", "(", "\"\"", ")", "\n", "", "self", ".", "exitState", "(", ")", "\n", "self", ".", "triggerDetector", ".", "exitState", "(", ")", "\n", "self", ".", "edgeDetector", ".", "exitState", "(", ")", "\n", "self", ".", "unmergingDetector", ".", "exitState", "(", ")", "\n", "self", ".", "modifierDetector", ".", "exitState", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.doGrid": [[168, 236], ["EventDetector.EventDetector.triggerDetector.buildExamples", "Utils.Libraries.combine.combine", "Utils.Libraries.combine.combine", "Utils.Libraries.combine.combine", "Utils.Libraries.combine.combine", "range", "os.path.join", "os.path.join", "EventDetector.EventDetector.structureAnalyzer.load", "range", "EventDetector.EventDetector.saveStr", "EventDetector.EventDetector.saveStr", "Utils.getCombinations", "Utils.getCombinations", "Utils.getCombinations", "Utils.getCombinations", "range", "len", "len", "EventDetector.EventDetector.edgeDetector.classifyToXML", "EventDetector.EventDetector.evaluateGrid", "len", "str", "str", "EventDetector.EventDetector.triggerDetector.addClassifierModel", "EventDetector.EventDetector.edgeDetector.addClassifierModel", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "len", "Utils.toString", "Utils.toString", "Utils.toString", "Utils.toString", "os.path.normpath", "os.path.normpath", "EventDetector.EventDetector.triggerDetector.classifyToXML", "Utils.toId", "Utils.toId", "Utils.toId", "Utils.toId", "os.path.exists", "os.path.exists", "EventDetector.EventDetector.model.getStr", "float", "EventDetector.EventDetector.model.getStr", "EventDetector.EventDetector.model.getStr", "float", "EventDetector.EventDetector.model.getStr", "str", "os.remove", "str", "str", "os.remove", "EventDetector.EventDetector.recallAdjustParameters.split", "EventDetector.EventDetector.recallAdjustParameters.split", "str", "len", "str", "str", "Utils.toId", "Utils.toId", "Utils.toId", "Utils.toId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.UnmergingDetector.UnmergingDetector.buildExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.combine.combine", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.combine.combine", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.combine.combine", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.combine.combine", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.load", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classifyToXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.evaluateGrid", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classifyToXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr"], ["", "def", "doGrid", "(", "self", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"--------- Parameter grid search ---------\"", "\n", "# Build trigger examples", "\n", "self", ".", "triggerDetector", ".", "buildExamples", "(", "self", ".", "model", ",", "[", "self", ".", "optData", "]", ",", "[", "self", ".", "workDir", "+", "\"grid-trigger-examples\"", "]", ")", "\n", "\n", "if", "self", ".", "fullGrid", ":", "\n", "            ", "stepParams", "=", "{", "\n", "\"trigger\"", ":", "Parameters", ".", "get", "(", "self", ".", "model", ".", "getStr", "(", "self", ".", "triggerDetector", ".", "tag", "+", "\"classifier-parameters-train\"", ",", "defaultIfNotExist", "=", "\"\"", ")", ",", "valueListKey", "=", "\"c\"", ")", ",", "\n", "\"booster\"", ":", "[", "float", "(", "i", ")", "for", "i", "in", "self", ".", "recallAdjustParameters", ".", "split", "(", "\",\"", ")", "]", ",", "\n", "\"edge\"", ":", "Parameters", ".", "get", "(", "self", ".", "model", ".", "getStr", "(", "self", ".", "edgeDetector", ".", "tag", "+", "\"classifier-parameters-train\"", ",", "defaultIfNotExist", "=", "\"\"", ")", ",", "valueListKey", "=", "\"c\"", ")", "}", "\n", "", "else", ":", "\n", "            ", "stepParams", "=", "{", "\n", "\"trigger\"", ":", "Parameters", ".", "get", "(", "self", ".", "model", ".", "getStr", "(", "self", ".", "triggerDetector", ".", "tag", "+", "\"classifier-parameter\"", ",", "defaultIfNotExist", "=", "\"\"", ")", ",", "valueListKey", "=", "\"c\"", ")", ",", "\n", "\"booster\"", ":", "[", "float", "(", "i", ")", "for", "i", "in", "self", ".", "recallAdjustParameters", ".", "split", "(", "\",\"", ")", "]", ",", "\n", "\"edge\"", ":", "Parameters", ".", "get", "(", "self", ".", "model", ".", "getStr", "(", "self", ".", "edgeDetector", ".", "tag", "+", "\"classifier-parameter\"", ",", "defaultIfNotExist", "=", "\"\"", ")", ",", "valueListKey", "=", "\"c\"", ")", "}", "\n", "\n", "", "for", "step", "in", "[", "\"trigger\"", ",", "\"edge\"", "]", ":", "\n", "            ", "stepParams", "[", "step", "]", "=", "Parameters", ".", "getCombinations", "(", "stepParams", "[", "step", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "stepParams", "[", "step", "]", ")", ")", ":", "\n", "                ", "stepParams", "[", "step", "]", "[", "i", "]", "=", "Parameters", ".", "toString", "(", "stepParams", "[", "step", "]", "[", "i", "]", ")", "\n", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Parameters\"", ",", "[", "stepParams", "[", "x", "]", "for", "x", "in", "[", "\"trigger\"", ",", "\"booster\"", ",", "\"edge\"", "]", "]", "\n", "paramCombinations", "=", "combine", "(", "*", "[", "stepParams", "[", "x", "]", "for", "x", "in", "[", "\"trigger\"", ",", "\"booster\"", ",", "\"edge\"", "]", "]", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Combinations\"", ",", "paramCombinations", "\n", "for", "i", "in", "range", "(", "len", "(", "paramCombinations", ")", ")", ":", "\n", "            ", "paramCombinations", "[", "i", "]", "=", "{", "\"trigger\"", ":", "paramCombinations", "[", "i", "]", "[", "0", "]", ",", "\"booster\"", ":", "paramCombinations", "[", "i", "]", "[", "1", "]", ",", "\"edge\"", ":", "paramCombinations", "[", "i", "]", "[", "2", "]", "}", "\n", "\n", "#paramCombinations = Parameters.getCombinations(ALL_PARAMS, [\"trigger\", \"booster\", \"edge\"])", "\n", "", "prevParams", "=", "None", "\n", "EDGE_MODEL_STEM", "=", "os", ".", "path", ".", "join", "(", "self", ".", "edgeDetector", ".", "workDir", ",", "os", ".", "path", ".", "normpath", "(", "self", ".", "model", ".", "path", ")", "+", "\"-edge-models/model\"", ")", "\n", "TRIGGER_MODEL_STEM", "=", "os", ".", "path", ".", "join", "(", "self", ".", "triggerDetector", ".", "workDir", ",", "os", ".", "path", ".", "normpath", "(", "self", ".", "model", ".", "path", ")", "+", "\"-trigger-models/model\"", ")", "\n", "self", ".", "structureAnalyzer", ".", "load", "(", "self", ".", "model", ")", "\n", "bestResults", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "paramCombinations", ")", ")", ":", "\n", "            ", "params", "=", "paramCombinations", "[", "i", "]", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Processing params\"", ",", "str", "(", "i", "+", "1", ")", "+", "\"/\"", "+", "str", "(", "len", "(", "paramCombinations", ")", ")", ",", "params", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"", "\n", "# Triggers and Boost (the trigger predictions are recalculated only when the relevant parameters change)", "\n", "if", "(", "prevParams", "==", "None", ")", "or", "(", "prevParams", "[", "\"trigger\"", "]", "!=", "params", "[", "\"trigger\"", "]", ")", "or", "(", "prevParams", "[", "\"booster\"", "]", "!=", "params", "[", "\"booster\"", "]", ")", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Classifying trigger examples for parameters\"", ",", "\"trigger:\"", "+", "str", "(", "params", "[", "\"trigger\"", "]", ")", ",", "\"booster:\"", "+", "str", "(", "params", "[", "\"booster\"", "]", ")", "\n", "xml", "=", "self", ".", "triggerDetector", ".", "classifyToXML", "(", "self", ".", "optData", ",", "self", ".", "model", ",", "self", ".", "workDir", "+", "\"grid-trigger-examples\"", ",", "self", ".", "workDir", "+", "\"grid-\"", ",", "classifierModel", "=", "TRIGGER_MODEL_STEM", "+", "Parameters", ".", "toId", "(", "params", "[", "\"trigger\"", "]", ")", ",", "recallAdjust", "=", "params", "[", "\"booster\"", "]", ",", "useExistingExamples", "=", "True", ")", "\n", "", "prevParams", "=", "params", "\n", "## Build edge examples", "\n", "#self.edgeDetector.buildExamples(self.model, [xml], [self.workDir+\"grid-edge-examples\"], [self.optData])", "\n", "# Classify with pre-defined model", "\n", "edgeClassifierModel", "=", "EDGE_MODEL_STEM", "+", "Parameters", ".", "toId", "(", "params", "[", "\"edge\"", "]", ")", "\n", "xml", "=", "self", ".", "edgeDetector", ".", "classifyToXML", "(", "xml", ",", "self", ".", "model", ",", "self", ".", "workDir", "+", "\"grid-edge-examples\"", ",", "self", ".", "workDir", "+", "\"grid-\"", ",", "classifierModel", "=", "edgeClassifierModel", ",", "goldData", "=", "self", ".", "optData", ")", "\n", "bestResults", "=", "self", ".", "evaluateGrid", "(", "xml", ",", "params", ",", "bestResults", ")", "\n", "# Remove remaining intermediate grid files", "\n", "", "for", "tag1", "in", "[", "\"edge\"", ",", "\"trigger\"", ",", "\"unmerging\"", "]", ":", "\n", "            ", "for", "tag2", "in", "[", "\"examples\"", ",", "\"pred.xml.gz\"", "]", ":", "\n", "                ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "workDir", "+", "\"grid-\"", "+", "tag1", "+", "\"-\"", "+", "tag2", ")", ":", "\n", "                    ", "os", ".", "remove", "(", "self", ".", "workDir", "+", "\"grid-\"", "+", "tag1", "+", "\"-\"", "+", "tag2", ")", "\n", "", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Parameter grid search complete\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Tested\"", ",", "len", "(", "paramCombinations", ")", ",", "\"combinations\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Best parameters:\"", ",", "bestResults", "[", "0", "]", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Best result:\"", ",", "bestResults", "[", "2", "]", "# f-score", "\n", "# Save grid model", "\n", "self", ".", "saveStr", "(", "\"recallAdjustParameter\"", ",", "str", "(", "bestResults", "[", "0", "]", "[", "\"booster\"", "]", ")", ",", "self", ".", "model", ")", "\n", "self", ".", "saveStr", "(", "\"recallAdjustParameter\"", ",", "str", "(", "bestResults", "[", "0", "]", "[", "\"booster\"", "]", ")", ",", "self", ".", "combinedModel", ",", "False", ")", "\n", "if", "self", ".", "fullGrid", ":", "# define best models", "\n", "            ", "self", ".", "triggerDetector", ".", "addClassifierModel", "(", "self", ".", "model", ",", "TRIGGER_MODEL_STEM", "+", "str", "(", "bestResults", "[", "0", "]", "[", "\"trigger\"", "]", ")", ",", "bestResults", "[", "0", "]", "[", "\"trigger\"", "]", ")", "\n", "self", ".", "edgeDetector", ".", "addClassifierModel", "(", "self", ".", "model", ",", "EDGE_MODEL_STEM", "+", "str", "(", "bestResults", "[", "0", "]", "[", "\"edge\"", "]", ")", ",", "bestResults", "[", "0", "]", "[", "\"edge\"", "]", ")", "\n", "# Remove work files", "\n", "", "for", "stepTag", "in", "[", "self", ".", "workDir", "+", "\"grid-trigger\"", ",", "self", ".", "workDir", "+", "\"grid-edge\"", ",", "self", ".", "workDir", "+", "\"grid-unmerging\"", "]", ":", "\n", "            ", "for", "fileStem", "in", "[", "\"-classifications\"", ",", "\"-classifications.log\"", ",", "\"examples.gz\"", ",", "\"pred.xml.gz\"", "]", ":", "\n", "                ", "if", "os", ".", "path", ".", "exists", "(", "stepTag", "+", "fileStem", ")", ":", "\n", "                    ", "os", ".", "remove", "(", "stepTag", "+", "fileStem", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.evaluateGrid": [[237, 271], ["Evaluators.run", "Evaluators.run", "os.path.exists", "os.path.exists", "EventDetector.EventDetector.unmergingDetector.classifyToXML", "EventDetector.EventDetector.stEvaluator.evaluate", "shutil.rmtree", "shutil.rmtree", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Evaluators.run.getData", "bestResults[].getData", "Evaluators.run.getData"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classifyToXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat"], ["", "", "", "", "def", "evaluateGrid", "(", "self", ",", "xml", ",", "params", ",", "bestResults", ")", ":", "\n", "        ", "if", "xml", "!=", "None", ":", "\n", "# TODO: Where should the EvaluateInteractionXML evaluator come from?", "\n", "            ", "EIXMLResult", "=", "EvaluateInteractionXML", ".", "run", "(", "self", ".", "edgeDetector", ".", "evaluator", ",", "xml", ",", "self", ".", "optData", ",", "self", ".", "parse", ")", "\n", "# Convert to ST-format", "\n", "if", "self", ".", "unmerging", ":", "\n", "                ", "xml", "=", "self", ".", "unmergingDetector", ".", "classifyToXML", "(", "xml", ",", "self", ".", "model", ",", "None", ",", "self", ".", "workDir", "+", "\"grid-\"", ",", "goldData", "=", "self", ".", "optData", ")", "\n", "#self.structureAnalyzer.validate(xml)", "\n", "if", "self", ".", "bioNLPSTParams", "[", "\"evaluate\"", "]", ":", "\n", "                    ", "Utils", ".", "STFormat", ".", "ConvertXML", ".", "toSTFormat", "(", "xml", ",", "self", ".", "workDir", "+", "\"grid-unmerging-geniaformat\"", ",", "\"a2\"", ")", "\n", "stFormatDir", "=", "self", ".", "workDir", "+", "\"grid-unmerging-geniaformat\"", "\n", "", "", "elif", "self", ".", "bioNLPSTParams", "[", "\"evaluate\"", "]", ":", "\n", "#self.structureAnalyzer.validate(xml)", "\n", "                ", "Utils", ".", "STFormat", ".", "ConvertXML", ".", "toSTFormat", "(", "xml", ",", "self", ".", "workDir", "+", "\"grid-flat-geniaformat\"", ",", "\"a2\"", ")", "#getA2FileTag(options.task, subTask))", "\n", "stFormatDir", "=", "self", ".", "workDir", "+", "\"grid-flat-geniaformat\"", "\n", "# Evaluation", "\n", "# Attempt shared task evaluation", "\n", "", "stEvaluation", "=", "None", "\n", "if", "self", ".", "bioNLPSTParams", "[", "\"evaluate\"", "]", ":", "\n", "                ", "stEvaluation", "=", "self", ".", "stEvaluator", ".", "evaluate", "(", "stFormatDir", ",", "self", ".", "task", ")", "\n", "", "if", "stEvaluation", "!=", "None", ":", "\n", "                ", "if", "bestResults", "==", "None", "or", "stEvaluation", "[", "0", "]", ">", "bestResults", "[", "1", "]", "[", "0", "]", ":", "\n", "                    ", "bestResults", "=", "(", "params", ",", "stEvaluation", ",", "stEvaluation", "[", "0", "]", ")", "\n", "", "", "else", ":", "# If shared task evaluation was not done (failed or not requested) fall back to internal evaluation", "\n", "                ", "if", "bestResults", "==", "None", "or", "EIXMLResult", ".", "getData", "(", ")", ".", "fscore", ">", "bestResults", "[", "1", "]", ".", "getData", "(", ")", ".", "fscore", ":", "\n", "                    ", "bestResults", "=", "(", "params", ",", "EIXMLResult", ",", "EIXMLResult", ".", "getData", "(", ")", ".", "fscore", ")", "\n", "# Remove ST-format files", "\n", "", "", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "workDir", "+", "\"grid-flat-geniaformat\"", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "self", ".", "workDir", "+", "\"grid-flat-geniaformat\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "workDir", "+", "\"grid-unmerging-geniaformat\"", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "self", ".", "workDir", "+", "\"grid-unmerging-geniaformat\"", ")", "\n", "", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"No predicted edges\"", "\n", "", "return", "bestResults", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.trainUnmergingDetector": [[272, 324], ["EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.optData.replace", "EventDetector.EventDetector.trainData.replace", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.unmergingDetector.beginModel", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.unmergingDetector.endModel", "copy.copy", "copy.copy", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "EventDetector.EventDetector.triggerDetector.classifyToXML", "EventDetector.EventDetector.edgeDetector.classifyToXML", "Evaluators.run", "Evaluators.run", "EventDetector.EventDetector.unmergingDetector.buildExamples", "EventDetector.EventDetector.unmergingDetector.buildExamples", "EventDetector.EventDetector.combinedModel.addStr", "EventDetector.EventDetector.combinedModel.insert", "EventDetector.EventDetector.combinedModel.insert", "EventDetector.EventDetector.unmergingDetector.addClassifierModel", "EventDetector.EventDetector.combinedModel.save", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "EventDetector.EventDetector.model.getStr", "EventDetector.EventDetector.model.get", "EventDetector.EventDetector.model.get", "EventDetector.EventDetector.model.get", "EventDetector.EventDetector.model.getStr", "EventDetector.EventDetector.optData.replace", "EventDetector.EventDetector.optData.replace", "EventDetector.EventDetector.trainData.replace", "EventDetector.EventDetector.trainData.replace"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.endModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classifyToXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classifyToXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.UnmergingDetector.UnmergingDetector.buildExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.UnmergingDetector.UnmergingDetector.buildExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.addStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.insert", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.insert", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.save", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr"], ["", "def", "trainUnmergingDetector", "(", "self", ")", ":", "\n", "        ", "xml", "=", "None", "\n", "if", "not", "self", ".", "unmerging", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"No unmerging\"", "\n", "", "if", "self", ".", "checkStep", "(", "\"SELF-TRAIN-EXAMPLES-FOR-UNMERGING\"", ",", "self", ".", "unmerging", ")", "and", "self", ".", "unmerging", ":", "\n", "# Self-classified train data for unmerging", "\n", "            ", "if", "self", ".", "doUnmergingSelfTraining", ":", "\n", "# This allows limiting to a subcorpus", "\n", "                ", "triggerStyle", "=", "copy", ".", "copy", "(", "Parameters", ".", "get", "(", "self", ".", "triggerExampleStyle", ")", ")", "\n", "edgeStyle", "=", "copy", ".", "copy", "(", "Parameters", ".", "get", "(", "self", ".", "edgeExampleStyle", ")", ")", "\n", "unmergingStyle", "=", "Parameters", ".", "get", "(", "self", ".", "unmergingExampleStyle", ")", "\n", "if", "\"sentenceLimit\"", "in", "unmergingStyle", "and", "unmergingStyle", "[", "\"sentenceLimit\"", "]", ":", "\n", "                    ", "triggerStyle", "[", "\"sentenceLimit\"", "]", "=", "unmergingStyle", "[", "\"sentenceLimit\"", "]", "\n", "edgeStyle", "[", "\"sentenceLimit\"", "]", "=", "unmergingStyle", "[", "\"sentenceLimit\"", "]", "\n", "# Build the examples", "\n", "", "xml", "=", "self", ".", "triggerDetector", ".", "classifyToXML", "(", "self", ".", "trainData", ",", "self", ".", "model", ",", "None", ",", "self", ".", "workDir", "+", "\"unmerging-extra-\"", ",", "exampleStyle", "=", "triggerStyle", ")", "#, recallAdjust=0.5)", "\n", "xml", "=", "self", ".", "edgeDetector", ".", "classifyToXML", "(", "xml", ",", "self", ".", "model", ",", "None", ",", "self", ".", "workDir", "+", "\"unmerging-extra-\"", ",", "exampleStyle", "=", "edgeStyle", ")", "#, recallAdjust=0.5)", "\n", "assert", "xml", "!=", "None", "\n", "EvaluateInteractionXML", ".", "run", "(", "self", ".", "edgeDetector", ".", "evaluator", ",", "xml", ",", "self", ".", "trainData", ",", "self", ".", "parse", ")", "\n", "", "else", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"No self-training for unmerging\"", "\n", "", "", "if", "self", ".", "checkStep", "(", "\"UNMERGING-EXAMPLES\"", ",", "self", ".", "unmerging", ")", "and", "self", ".", "unmerging", ":", "\n", "# Unmerging example generation", "\n", "            ", "GOLD_TEST_FILE", "=", "self", ".", "optData", ".", "replace", "(", "\"-nodup\"", ",", "\"\"", ")", "\n", "GOLD_TRAIN_FILE", "=", "self", ".", "trainData", ".", "replace", "(", "\"-nodup\"", ",", "\"\"", ")", "\n", "if", "self", ".", "doUnmergingSelfTraining", ":", "\n", "                ", "if", "xml", "==", "None", ":", "\n", "                    ", "xml", "=", "self", ".", "workDir", "+", "\"unmerging-extra-edge-pred.xml.gz\"", "\n", "", "self", ".", "unmergingDetector", ".", "buildExamples", "(", "self", ".", "model", ",", "[", "self", ".", "optData", ".", "replace", "(", "\"-nodup\"", ",", "\"\"", ")", ",", "[", "self", ".", "trainData", ".", "replace", "(", "\"-nodup\"", ",", "\"\"", ")", ",", "xml", "]", "]", ",", "\n", "[", "self", ".", "workDir", "+", "\"unmerging-opt-examples.gz\"", ",", "self", ".", "workDir", "+", "\"unmerging-train-examples.gz\"", "]", ",", "\n", "[", "GOLD_TEST_FILE", ",", "[", "GOLD_TRAIN_FILE", ",", "GOLD_TRAIN_FILE", "]", "]", ",", "\n", "exampleStyle", "=", "self", ".", "unmergingExampleStyle", ",", "saveIdsToModel", "=", "True", ")", "\n", "xml", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "unmergingDetector", ".", "buildExamples", "(", "self", ".", "model", ",", "[", "self", ".", "optData", ".", "replace", "(", "\"-nodup\"", ",", "\"\"", ")", ",", "self", ".", "trainData", ".", "replace", "(", "\"-nodup\"", ",", "\"\"", ")", "]", ",", "\n", "[", "self", ".", "workDir", "+", "\"unmerging-opt-examples.gz\"", ",", "self", ".", "workDir", "+", "\"unmerging-train-examples.gz\"", "]", ",", "\n", "[", "GOLD_TEST_FILE", ",", "GOLD_TRAIN_FILE", "]", ",", "\n", "exampleStyle", "=", "self", ".", "unmergingExampleStyle", ",", "saveIdsToModel", "=", "True", ")", "\n", "xml", "=", "None", "\n", "#UnmergingExampleBuilder.run(\"/home/jari/biotext/EventExtension/TrainSelfClassify/test-predicted-edges.xml\", GOLD_TRAIN_FILE, UNMERGING_TRAIN_EXAMPLE_FILE, PARSE, TOK, UNMERGING_FEATURE_PARAMS, UNMERGING_IDS, append=True)", "\n", "", "", "if", "self", ".", "checkStep", "(", "\"BEGIN-UNMERGING-MODEL\"", ",", "self", ".", "unmerging", ")", "and", "self", ".", "unmerging", ":", "\n", "            ", "self", ".", "unmergingDetector", ".", "beginModel", "(", "None", ",", "self", ".", "model", ",", "self", ".", "workDir", "+", "\"unmerging-train-examples.gz\"", ",", "self", ".", "workDir", "+", "\"unmerging-opt-examples.gz\"", ")", "\n", "", "if", "self", ".", "checkStep", "(", "\"END-UNMERGING-MODEL\"", ",", "self", ".", "unmerging", ")", "and", "self", ".", "unmerging", ":", "\n", "            ", "self", ".", "unmergingDetector", ".", "endModel", "(", "None", ",", "self", ".", "model", ",", "self", ".", "workDir", "+", "\"unmerging-opt-examples.gz\"", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Adding unmerging classifier model to test-set event model\"", "\n", "if", "self", ".", "combinedModel", "!=", "None", ":", "\n", "                ", "self", ".", "combinedModel", ".", "addStr", "(", "\"unmerging-example-style\"", ",", "self", ".", "model", ".", "getStr", "(", "\"unmerging-example-style\"", ")", ")", "\n", "self", ".", "combinedModel", ".", "insert", "(", "self", ".", "model", ".", "get", "(", "\"unmerging-ids.classes\"", ")", ",", "\"unmerging-ids.classes\"", ")", "\n", "self", ".", "combinedModel", ".", "insert", "(", "self", ".", "model", ".", "get", "(", "\"unmerging-ids.features\"", ")", ",", "\"unmerging-ids.features\"", ")", "\n", "self", ".", "unmergingDetector", ".", "addClassifierModel", "(", "self", ".", "combinedModel", ",", "self", ".", "model", ".", "get", "(", "\"unmerging-classifier-model\"", ",", "True", ")", ",", "\n", "self", ".", "model", ".", "getStr", "(", "\"unmerging-classifier-parameter\"", ")", ")", "\n", "self", ".", "combinedModel", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.classify": [[325, 403], ["EventDetector.EventDetector.openModel", "EventDetector.EventDetector.initVariables", "EventDetector.EventDetector.enterState", "EventDetector.EventDetector.setWorkDir", "os.path.join", "EventDetector.EventDetector.openModel", "EventDetector.EventDetector.getBioNLPSharedTaskParams", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.checkStep", "EventDetector.EventDetector.getWorkFile", "EventDetector.EventDetector.deleteTempWorkDir", "EventDetector.EventDetector.exitState", "EventDetector.EventDetector.setTempWorkDir", "EventDetector.EventDetector.triggerDetector.classifyToXML", "EventDetector.EventDetector.getWorkFile", "EventDetector.EventDetector.edgeDetector.classifyToXML", "EventDetector.EventDetector.model.hasMember", "shutil.copy2", "os.path.basename", "EventDetector.EventDetector.getStr", "Evaluators.run", "Evaluators.run", "Evaluators.run", "Evaluators.run", "EventDetector.EventDetector.model.getStr", "EventDetector.EventDetector.getWorkFile", "EventDetector.EventDetector.unmergingDetector.classifyToXML", "EventDetector.EventDetector.getWorkFile", "EventDetector.EventDetector.modifierDetector.classifyToXML", "EventDetector.EventDetector.getWorkFile", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "float", "EventDetector.EventDetector.getStr", "Evaluators.run", "Evaluators.run", "Evaluators.run", "Evaluators.run", "EventDetector.EventDetector.stEvaluator.evaluate", "EventDetector.EventDetector.getStr", "EventDetector.EventDetector.getStr"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setWorkDir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.getWorkFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classifyToXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.getWorkFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classifyToXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.hasMember", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.getWorkFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classifyToXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.getWorkFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classifyToXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.getWorkFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr"], ["", "", "", "def", "classify", "(", "self", ",", "data", ",", "model", ",", "output", ",", "parse", "=", "None", ",", "task", "=", "None", ",", "goldData", "=", "None", ",", "fromStep", "=", "None", ",", "toStep", "=", "None", ",", "omitSteps", "=", "None", ",", "workDir", "=", "None", ")", ":", "\n", "#BINARY_RECALL_MODE = False # TODO: make a parameter", "\n", "        ", "xml", "=", "None", "\n", "model", "=", "self", ".", "openModel", "(", "model", ",", "\"r\"", ")", "\n", "self", ".", "initVariables", "(", "classifyData", "=", "data", ",", "model", "=", "model", ",", "xml", "=", "None", ",", "task", "=", "task", ",", "parse", "=", "parse", ")", "\n", "self", ".", "enterState", "(", "self", ".", "STATE_CLASSIFY", ",", "[", "\"TRIGGERS\"", ",", "\"EDGES\"", ",", "\"UNMERGING\"", ",", "\"MODIFIERS\"", ",", "\"ST-CONVERT\"", "]", ",", "fromStep", ",", "toStep", ",", "omitSteps", ")", "\n", "#self.enterState(self.STATE_CLASSIFY, [\"TRIGGERS\", \"RECALL-ADJUST\", \"EDGES\", \"UNMERGING\", \"MODIFIERS\", \"ST-CONVERT\"], fromStep, toStep)", "\n", "self", ".", "setWorkDir", "(", "workDir", ")", "\n", "if", "workDir", "==", "None", ":", "\n", "            ", "self", ".", "setTempWorkDir", "(", ")", "\n", "", "workOutputTag", "=", "os", ".", "path", ".", "join", "(", "self", ".", "workDir", ",", "os", ".", "path", ".", "basename", "(", "output", ")", "+", "\"-\"", ")", "\n", "self", ".", "model", "=", "self", ".", "openModel", "(", "self", ".", "model", ",", "\"r\"", ")", "\n", "stParams", "=", "self", ".", "getBioNLPSharedTaskParams", "(", "self", ".", "bioNLPSTParams", ",", "model", ")", "\n", "if", "self", ".", "checkStep", "(", "\"TRIGGERS\"", ")", ":", "\n", "            ", "xml", "=", "self", ".", "triggerDetector", ".", "classifyToXML", "(", "self", ".", "classifyData", ",", "self", ".", "model", ",", "None", ",", "workOutputTag", ",", "goldData", "=", "goldData", ",", "parse", "=", "self", ".", "parse", ",", "recallAdjust", "=", "float", "(", "self", ".", "getStr", "(", "\"recallAdjustParameter\"", ",", "self", ".", "model", ")", ")", ")", "\n", "", "if", "self", ".", "checkStep", "(", "\"EDGES\"", ")", ":", "\n", "            ", "xml", "=", "self", ".", "getWorkFile", "(", "xml", ",", "workOutputTag", "+", "\"trigger-pred.xml.gz\"", ")", "\n", "xml", "=", "self", ".", "edgeDetector", ".", "classifyToXML", "(", "xml", ",", "self", ".", "model", ",", "None", ",", "workOutputTag", ",", "goldData", "=", "goldData", ",", "parse", "=", "self", ".", "parse", ")", "\n", "assert", "xml", "!=", "None", "\n", "if", "self", ".", "parse", "==", "None", ":", "\n", "                ", "edgeParse", "=", "self", ".", "getStr", "(", "self", ".", "edgeDetector", ".", "tag", "+", "\"parse\"", ",", "self", ".", "model", ")", "\n", "", "else", ":", "\n", "                ", "edgeParse", "=", "self", ".", "parse", "\n", "#EvaluateInteractionXML.run(self.edgeDetector.evaluator, xml, self.classifyData, edgeParse)", "\n", "", "if", "goldData", "!=", "None", ":", "\n", "                ", "EvaluateInteractionXML", ".", "run", "(", "self", ".", "edgeDetector", ".", "evaluator", ",", "xml", ",", "goldData", ",", "edgeParse", ")", "\n", "", "else", ":", "\n", "                ", "EvaluateInteractionXML", ".", "run", "(", "self", ".", "edgeDetector", ".", "evaluator", ",", "xml", ",", "self", ".", "classifyData", ",", "edgeParse", ")", "\n", "", "", "if", "self", ".", "checkStep", "(", "\"UNMERGING\"", ")", ":", "\n", "            ", "if", "self", ".", "model", ".", "getStr", "(", "\"unmerging-classifier-parameter\"", ",", "None", ")", "!=", "None", ":", "#self.model.hasMember(\"unmerging-classifier-model\"):", "\n", "#xml = self.getWorkFile(xml, output + \"-edge-pred.xml.gz\")", "\n", "# To avoid running out of memory, always use file on disk", "\n", "                ", "xml", "=", "self", ".", "getWorkFile", "(", "None", ",", "workOutputTag", "+", "\"edge-pred.xml.gz\"", ")", "\n", "#goldData = None", "\n", "#if type(self.classifyData) in types.StringTypes:", "\n", "#    if os.path.exists(self.classifyData.replace(\"-nodup\", \"\")):", "\n", "#        goldData = self.classifyData.replace(\"-nodup\", \"\")", "\n", "xml", "=", "self", ".", "unmergingDetector", ".", "classifyToXML", "(", "xml", ",", "self", ".", "model", ",", "None", ",", "workOutputTag", ",", "goldData", "=", "goldData", ",", "parse", "=", "self", ".", "parse", ")", "\n", "# Evaluate after unmerging", "\n", "if", "self", ".", "parse", "==", "None", ":", "\n", "                    ", "edgeParse", "=", "self", ".", "getStr", "(", "self", ".", "edgeDetector", ".", "tag", "+", "\"parse\"", ",", "self", ".", "model", ")", "\n", "", "else", ":", "\n", "                    ", "edgeParse", "=", "self", ".", "parse", "\n", "", "if", "goldData", "!=", "None", ":", "\n", "                    ", "EvaluateInteractionXML", ".", "run", "(", "self", ".", "edgeDetector", ".", "evaluator", ",", "xml", ",", "goldData", ",", "edgeParse", ")", "\n", "", "else", ":", "\n", "                    ", "EvaluateInteractionXML", ".", "run", "(", "self", ".", "edgeDetector", ".", "evaluator", ",", "xml", ",", "self", ".", "classifyData", ",", "edgeParse", ")", "\n", "", "", "else", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"No model for unmerging\"", "\n", "", "", "if", "self", ".", "checkStep", "(", "\"MODIFIERS\"", ")", ":", "\n", "            ", "if", "self", ".", "model", ".", "hasMember", "(", "\"modifier-classifier-model\"", ")", ":", "\n", "                ", "xml", "=", "self", ".", "getWorkFile", "(", "xml", ",", "[", "workOutputTag", "+", "\"unmerging-pred.xml.gz\"", ",", "workOutputTag", "+", "\"edge-pred.xml.gz\"", "]", ")", "\n", "xml", "=", "self", ".", "modifierDetector", ".", "classifyToXML", "(", "xml", ",", "self", ".", "model", ",", "None", ",", "workOutputTag", ",", "goldData", "=", "goldData", ",", "parse", "=", "self", ".", "parse", ")", "\n", "", "else", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"No model for modifier detection\"", "\n", "#        if self.checkStep(\"VALIDATE\"):", "\n", "#            xml = self.getWorkFile(xml, [workOutputTag + \"modifier-pred.xml.gz\", workOutputTag + \"unmerging-pred.xml.gz\", workOutputTag + \"edge-pred.xml.gz\"])", "\n", "#            self.structureAnalyzer.load(model)", "\n", "#            self.structureAnalyzer.validate(xml)", "\n", "#            ETUtils.write(xml, workOutputTag + \"validate-pred.xml.gz\")", "\n", "", "", "if", "self", ".", "checkStep", "(", "\"ST-CONVERT\"", ")", ":", "\n", "            ", "if", "stParams", "[", "\"convert\"", "]", ":", "\n", "                ", "extension", "=", "\".zip\"", "if", "(", "stParams", "[", "\"convert\"", "]", "==", "\"zip\"", ")", "else", "\".tar.gz\"", "\n", "#xml = self.getWorkFile(xml, [workOutputTag + \"validate-pred.xml.gz\", workOutputTag + \"modifier-pred.xml.gz\", workOutputTag + \"unmerging-pred.xml.gz\", workOutputTag + \"edge-pred.xml.gz\"])", "\n", "xml", "=", "self", ".", "getWorkFile", "(", "xml", ",", "[", "workOutputTag", "+", "\"modifier-pred.xml.gz\"", ",", "workOutputTag", "+", "\"unmerging-pred.xml.gz\"", ",", "workOutputTag", "+", "\"edge-pred.xml.gz\"", "]", ")", "\n", "Utils", ".", "STFormat", ".", "ConvertXML", ".", "toSTFormat", "(", "xml", ",", "output", "+", "\"-events\"", "+", "extension", ",", "outputTag", "=", "stParams", "[", "\"a2Tag\"", "]", ",", "writeExtra", "=", "(", "stParams", "[", "\"scores\"", "]", "==", "True", ")", ")", "\n", "if", "stParams", "[", "\"evaluate\"", "]", ":", "#self.stEvaluator != None:", "\n", "                    ", "task", "=", "self", ".", "task", "\n", "if", "task", "==", "None", ":", "\n", "                        ", "task", "=", "self", ".", "getStr", "(", "self", ".", "edgeDetector", ".", "tag", "+", "\"task\"", ",", "self", ".", "model", ")", "\n", "", "self", ".", "stEvaluator", ".", "evaluate", "(", "output", "+", "\"-events\"", "+", "extension", ",", "task", ")", "\n", "", "", "else", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"No BioNLP shared task format conversion\"", "\n", "", "", "finalXMLFile", "=", "self", ".", "getWorkFile", "(", "None", ",", "[", "workOutputTag", "+", "\"modifier-pred.xml.gz\"", ",", "workOutputTag", "+", "\"unmerging-pred.xml.gz\"", ",", "workOutputTag", "+", "\"edge-pred.xml.gz\"", "]", ")", "\n", "if", "finalXMLFile", "!=", "None", ":", "\n", "            ", "shutil", ".", "copy2", "(", "finalXMLFile", ",", "output", "+", "\"-pred.xml.gz\"", ")", "\n", "", "self", ".", "deleteTempWorkDir", "(", ")", "\n", "self", ".", "exitState", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.getWorkFile": [[404, 420], ["type", "os.path.exists", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "def", "getWorkFile", "(", "self", ",", "fileObject", ",", "serializedPath", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns fileObject if it is not None, otherwise tries all paths in serializedPath\n        and returns the first one that exists. Use this to get an intermediate file in a\n        stepwise process.\n        \"\"\"", "\n", "if", "fileObject", "!=", "None", ":", "\n", "            ", "return", "fileObject", "\n", "", "elif", "type", "(", "serializedPath", ")", "not", "in", "types", ".", "StringTypes", ":", "# multiple files to try", "\n", "            ", "for", "sPath", "in", "serializedPath", ":", "\n", "                ", "if", "os", ".", "path", ".", "exists", "(", "sPath", ")", ":", "\n", "                    ", "return", "sPath", "\n", "", "", "assert", "False", "\n", "", "else", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "serializedPath", ")", "\n", "return", "serializedPath", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.CODetector.CODetector.__init__": [[11, 15], ["EventDetector.EventDetector.EventDetector.__init__", "ExampleWriters.PhraseTriggerExampleWriter.PhraseTriggerExampleWriter"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "EventDetector", ".", "__init__", "(", "self", ")", "\n", "self", ".", "triggerDetector", ".", "exampleBuilder", "=", "PhraseTriggerExampleBuilder", "\n", "self", ".", "triggerDetector", ".", "exampleWriter", "=", "PhraseTriggerExampleWriter", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.__init__": [[6, 15], ["StepSelector.StepSelector.setLimits", "type"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.setLimits"], ["    ", "def", "__init__", "(", "self", ",", "steps", ",", "fromStep", "=", "None", ",", "toStep", "=", "None", ",", "verbose", "=", "True", ",", "omitSteps", "=", "None", ")", ":", "\n", "        ", "self", ".", "steps", "=", "steps", "\n", "if", "type", "(", "omitSteps", ")", "in", "types", ".", "StringTypes", ":", "\n", "            ", "omitSteps", "=", "[", "omitSteps", "]", "\n", "", "self", ".", "omitSteps", "=", "omitSteps", "\n", "self", ".", "currentStep", "=", "None", "\n", "self", ".", "currentStepStartTime", "=", "None", "\n", "self", ".", "setLimits", "(", "fromStep", ",", "toStep", ")", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.markOmitSteps": [[16, 24], ["type", "StepSelector.StepSelector.omitSteps.append"], "methods", ["None"], ["", "def", "markOmitSteps", "(", "self", ",", "steps", ")", ":", "\n", "        ", "if", "self", ".", "omitSteps", "==", "None", ":", "\n", "            ", "self", ".", "omitSteps", "=", "[", "]", "\n", "", "if", "type", "(", "steps", ")", "not", "in", "[", "types", ".", "ListType", ",", "types", ".", "TupleType", "]", ":", "\n", "            ", "steps", "=", "[", "steps", "]", "\n", "", "for", "step", "in", "steps", ":", "\n", "            ", "if", "step", "not", "in", "self", ".", "omitSteps", ":", "\n", "                ", "self", ".", "omitSteps", ".", "append", "(", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.setLimits": [[25, 42], ["type", "StepSelector.StepSelector.doSteps.split", "type", "StepSelector.StepSelector.doSteps[].strip"], "methods", ["None"], ["", "", "", "def", "setLimits", "(", "self", ",", "fromStep", ",", "toStep", ")", ":", "\n", "        ", "self", ".", "fromStep", "=", "fromStep", "\n", "self", ".", "toStep", "=", "toStep", "\n", "self", ".", "doSteps", "=", "None", "\n", "if", "self", ".", "fromStep", "!=", "None", "and", "(", "type", "(", "self", ".", "fromStep", ")", "==", "types", ".", "ListType", "or", "\",\"", "in", "self", ".", "fromStep", ")", ":", "\n", "            ", "self", ".", "doSteps", "=", "self", ".", "fromStep", "\n", "if", "type", "(", "self", ".", "doSteps", ")", "!=", "types", ".", "ListType", ":", "\n", "                ", "self", ".", "doSteps", "=", "self", ".", "doSteps", ".", "split", "(", "\",\"", ")", "\n", "if", "self", ".", "doSteps", "[", "-", "1", "]", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "                    ", "self", ".", "doSteps", "=", "self", ".", "doSteps", "[", ":", "-", "1", "]", "\n", "", "", "self", ".", "fromStep", "=", "None", "\n", "for", "step", "in", "self", ".", "doSteps", ":", "\n", "                ", "assert", "step", "in", "self", ".", "steps", ",", "(", "step", ",", "self", ".", "steps", ")", "\n", "", "", "elif", "self", ".", "fromStep", "!=", "None", ":", "\n", "            ", "assert", "self", ".", "fromStep", "in", "self", ".", "steps", ",", "(", "self", ".", "fromStep", ",", "self", ".", "steps", ")", "\n", "", "if", "self", ".", "toStep", "!=", "None", ":", "\n", "            ", "assert", "self", ".", "toStep", "in", "self", ".", "steps", ",", "(", "self", ".", "toStep", ",", "self", ".", "steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.printStepTime": [[51, 54], ["str", "datetime.timedelta", "time.time"], "methods", ["None"], ["", "", "def", "printStepTime", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "currentStep", "!=", "None", "and", "self", ".", "currentStepStartTime", "!=", "None", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"===\"", ",", "\"EXIT STEP\"", ",", "self", ".", "currentStep", "+", "\": \"", "+", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "self", ".", "currentStepStartTime", ")", ")", ",", "\"===\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.getStepStatus": [[55, 72], ["StepSelector.StepSelector.steps.index", "StepSelector.StepSelector.steps.index", "len", "StepSelector.StepSelector.steps.index"], "methods", ["None"], ["", "", "def", "getStepStatus", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "omitSteps", "!=", "None", "and", "step", "in", "self", ".", "omitSteps", ":", "\n", "            ", "return", "\"OMIT\"", "\n", "", "stepIndex", "=", "self", ".", "steps", ".", "index", "(", "step", ")", "\n", "# Get range", "\n", "fromIndex", "=", "0", "\n", "if", "self", ".", "fromStep", "!=", "None", ":", "\n", "            ", "fromIndex", "=", "self", ".", "steps", ".", "index", "(", "self", ".", "fromStep", ")", "\n", "", "toIndex", "=", "len", "(", "self", ".", "steps", ")", "-", "1", "\n", "if", "self", ".", "toStep", "!=", "None", ":", "\n", "            ", "toIndex", "=", "self", ".", "steps", ".", "index", "(", "self", ".", "toStep", ")", "\n", "# Determine if step is in range", "\n", "", "if", "stepIndex", "<", "fromIndex", ":", "\n", "            ", "return", "\"BEFORE\"", "\n", "", "if", "stepIndex", ">", "toIndex", ":", "\n", "            ", "return", "\"AFTER\"", "\n", "", "return", "\"PROCESS\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.check": [[73, 115], ["StepSelector.StepSelector.steps.index", "StepSelector.StepSelector.steps.index", "StepSelector.StepSelector.steps.index", "len", "StepSelector.StepSelector.steps.index", "time.time", "str", "datetime.timedelta", "time.time"], "methods", ["None"], ["", "def", "check", "(", "self", ",", "step", ")", ":", "\n", "#print \"CHECK\", step, self.currentStep, self.steps, self.fromStep, self.toStep", "\n", "        ", "assert", "step", "in", "self", ".", "steps", "\n", "assert", "self", ".", "fromStep", "==", "None", "or", "self", ".", "fromStep", "in", "self", ".", "steps", ",", "(", "self", ".", "fromStep", ",", "self", ".", "toStep", ",", "self", ".", "steps", ")", "\n", "assert", "self", ".", "toStep", "==", "None", "or", "self", ".", "toStep", "in", "self", ".", "steps", ",", "(", "self", ".", "fromStep", ",", "self", ".", "toStep", ",", "self", ".", "steps", ")", "\n", "if", "self", ".", "doSteps", "!=", "None", ":", "\n", "            ", "for", "s", "in", "self", ".", "doSteps", ":", "\n", "                ", "assert", "s", "in", "self", ".", "steps", ",", "(", "a", ",", "self", ".", "steps", ")", "\n", "\n", "", "", "stepIndex", "=", "self", ".", "steps", ".", "index", "(", "step", ")", "\n", "# Get current index", "\n", "currentIndex", "=", "-", "1", "\n", "if", "self", ".", "currentStep", "!=", "None", ":", "\n", "            ", "currentIndex", "=", "self", ".", "steps", ".", "index", "(", "self", ".", "currentStep", ")", "\n", "#assert stepIndex == currentIndex + 1, (step, self.currentStep, self.steps)", "\n", "# Get range", "\n", "", "fromIndex", "=", "0", "\n", "if", "self", ".", "fromStep", "!=", "None", ":", "\n", "            ", "fromIndex", "=", "self", ".", "steps", ".", "index", "(", "self", ".", "fromStep", ")", "\n", "", "toIndex", "=", "len", "(", "self", ".", "steps", ")", "-", "1", "\n", "if", "self", ".", "toStep", "!=", "None", ":", "\n", "            ", "toIndex", "=", "self", ".", "steps", ".", "index", "(", "self", ".", "toStep", ")", "\n", "# Determine if step is in range", "\n", "", "if", "stepIndex", ">=", "fromIndex", "and", "stepIndex", "<=", "toIndex", ":", "\n", "            ", "if", "currentIndex", "<", "stepIndex", ":", "\n", "                ", "if", "self", ".", "currentStepStartTime", "!=", "None", ":", "\n", "                    ", "if", "self", ".", "verbose", ":", "print", ">>", "sys", ".", "stderr", ",", "\"===\"", ",", "\"EXIT STEP\"", ",", "self", ".", "currentStep", ",", "\"time:\"", ",", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "self", ".", "currentStepStartTime", ")", ")", ",", "\"===\"", "\n", "", "self", ".", "currentStep", "=", "step", "\n", "self", ".", "currentStepStartTime", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "omitSteps", "!=", "None", "and", "step", "in", "self", ".", "omitSteps", ":", "\n", "                    ", "if", "self", ".", "verbose", ":", "print", ">>", "sys", ".", "stderr", ",", "\"Omitting step\"", ",", "step", "\n", "return", "False", "\n", "", "else", ":", "\n", "                    ", "return", "True", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "verbose", ":", "print", ">>", "sys", ".", "stderr", ",", "\"Step\"", ",", "step", ",", "\"already done, skipping.\"", "\n", "return", "False", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "print", ">>", "sys", ".", "stderr", ",", "\"Step\"", ",", "step", ",", "\"out of range\"", "\n", "return", "False", "\n", "\n", "", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.UnmergingDetector.UnmergingDetector.__init__": [[12, 19], ["SingleStageDetector.SingleStageDetector.SingleStageDetector.__init__", "ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "SingleStageDetector", ".", "__init__", "(", "self", ")", "\n", "self", ".", "exampleBuilder", "=", "UnmergingExampleBuilder", "\n", "self", ".", "exampleWriter", "=", "UnmergingExampleWriter", "(", ")", "\n", "self", ".", "Classifier", "=", "SVMMultiClassClassifier", "\n", "self", ".", "evaluator", "=", "AveragingMultiClassEvaluator", "\n", "self", ".", "tag", "=", "\"unmerging-\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.UnmergingDetector.UnmergingDetector.buildExamples": [[20, 42], ["UnmergingDetector.UnmergingDetector.structureAnalyzer.load", "itertools.izip_longest", "model.getStr", "UnmergingDetector.UnmergingDetector.getStr", "itertools.izip_longest", "model.save", "isinstance", "isinstance", "UnmergingDetector.UnmergingDetector.exampleBuilder.run", "model.get", "model.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.load", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.save", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "buildExamples", "(", "self", ",", "model", ",", "datas", ",", "outputs", ",", "golds", "=", "[", "]", ",", "exampleStyle", "=", "None", ",", "saveIdsToModel", "=", "False", ",", "parse", "=", "None", ")", ":", "\n", "        ", "if", "exampleStyle", "==", "None", ":", "\n", "            ", "exampleStyle", "=", "model", ".", "getStr", "(", "self", ".", "tag", "+", "\"example-style\"", ")", "\n", "", "if", "parse", "==", "None", ":", "\n", "            ", "parse", "=", "self", ".", "getStr", "(", "self", ".", "tag", "+", "\"parse\"", ",", "model", ")", "\n", "", "self", ".", "structureAnalyzer", ".", "load", "(", "model", ")", "\n", "self", ".", "exampleBuilder", ".", "structureAnalyzer", "=", "self", ".", "structureAnalyzer", "\n", "for", "data", ",", "output", ",", "gold", "in", "itertools", ".", "izip_longest", "(", "datas", ",", "outputs", ",", "golds", ",", "fillvalue", "=", "[", "]", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Example generation for\"", ",", "output", "\n", "if", "not", "isinstance", "(", "data", ",", "(", "list", ",", "tuple", ")", ")", ":", "data", "=", "[", "data", "]", "\n", "if", "not", "isinstance", "(", "gold", ",", "(", "list", ",", "tuple", ")", ")", ":", "gold", "=", "[", "gold", "]", "\n", "append", "=", "False", "\n", "for", "dataSet", ",", "goldSet", "in", "itertools", ".", "izip_longest", "(", "data", ",", "gold", ",", "fillvalue", "=", "None", ")", ":", "\n", "                ", "if", "goldSet", "==", "None", ":", "\n", "                    ", "goldSet", "=", "dataSet", "\n", "", "if", "dataSet", "!=", "None", ":", "\n", "                    ", "self", ".", "exampleBuilder", ".", "run", "(", "dataSet", ",", "output", ",", "parse", ",", "None", ",", "exampleStyle", ",", "model", ".", "get", "(", "self", ".", "tag", "+", "\"ids.classes\"", ",", "\n", "True", ")", ",", "model", ".", "get", "(", "self", ".", "tag", "+", "\"ids.features\"", ",", "True", ")", ",", "goldSet", ",", "append", ",", "saveIdsToModel", ",", "\n", "structureAnalyzer", "=", "self", ".", "structureAnalyzer", ")", "\n", "", "append", "=", "True", "\n", "", "", "if", "saveIdsToModel", ":", "\n", "            ", "model", ".", "save", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.__init__": [[27, 30], ["Detector.Detector.Detector.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "Detector", ".", "__init__", "(", "self", ")", "\n", "self", ".", "deleteCombinedExamples", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel": [[31, 72], ["SingleStageDetector.SingleStageDetector.checkStep", "SingleStageDetector.SingleStageDetector.openModel", "classifier.optimize", "SingleStageDetector.SingleStageDetector.save", "SingleStageDetector.SingleStageDetector.importFrom", "SingleStageDetector.SingleStageDetector.addStr", "SingleStageDetector.SingleStageDetector.addStr", "type", "SingleStageDetector.SingleStageDetector.getClassifier", "SingleStageDetector.SingleStageDetector.getStr", "SingleStageDetector.SingleStageDetector.get", "SingleStageDetector.SingleStageDetector.openModel", "SingleStageDetector.SingleStageDetector.getStr", "len", "Utils.toString", "Utils.toString", "Utils.toString", "Utils.toString", "Utils.toString", "len", "gzip.open", "gzip.open.close", "SingleStageDetector.SingleStageDetector.getStr", "shutil.copyfileobj", "gzip.open", "os.path.normpath", "os.path.normpath"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllCorrectClassifier.AllCorrectClassifier.optimize", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.save", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.importFrom", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.addStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.addStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "def", "beginModel", "(", "self", ",", "step", ",", "model", ",", "trainExampleFiles", ",", "testExampleFile", ",", "importIdsFromModel", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Begin the training process leading to a new model.\n        \"\"\"", "\n", "if", "self", ".", "checkStep", "(", "step", ",", "False", ")", ":", "\n", "            ", "if", "model", "!=", "None", ":", "\n", "                ", "if", "self", ".", "state", "!=", "None", "and", "step", "!=", "None", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "self", ".", "__class__", ".", "__name__", "+", "\":\"", "+", "self", ".", "state", "+", "\":\"", "+", "step", "\n", "# Create combined model", "\n", "", "model", "=", "self", ".", "openModel", "(", "model", ",", "\"w\"", ")", "\n", "assert", "model", ".", "mode", "in", "[", "\"a\"", ",", "\"w\"", "]", ",", "(", "model", ".", "path", ",", "model", ".", "mode", ")", "\n", "# Information can be imported from an existing model. In this case, model is trained", "\n", "# with the parameter already defined in the import source. This is used when training", "\n", "# the combined model.", "\n", "if", "importIdsFromModel", "!=", "None", ":", "\n", "                    ", "model", ".", "importFrom", "(", "self", ".", "openModel", "(", "importIdsFromModel", ",", "\"r\"", ")", ",", "[", "self", ".", "tag", "+", "\"ids.classes\"", ",", "self", ".", "tag", "+", "\"ids.features\"", ",", "\"structure.txt\"", "]", ",", "\n", "[", "self", ".", "tag", "+", "\"classifier-parameter\"", ",", "self", ".", "tag", "+", "\"example-style\"", ",", "self", ".", "tag", "+", "\"parse\"", ",", "self", ".", "tag", "+", "\"task\"", "]", ")", "\n", "# Train the model with the parameters defined in the import source", "\n", "model", ".", "addStr", "(", "self", ".", "tag", "+", "\"classifier-parameters-train\"", ",", "model", ".", "getStr", "(", "self", ".", "tag", "+", "\"classifier-parameter\"", ")", ")", "\n", "", "if", "self", ".", "bioNLPSTParams", "!=", "None", "and", "len", "(", "self", ".", "bioNLPSTParams", ")", ">", "0", ":", "\n", "                    ", "model", ".", "addStr", "(", "\"BioNLPSTParams\"", ",", "Parameters", ".", "toString", "(", "self", ".", "bioNLPSTParams", ")", ")", "\n", "# Catenate example files", "\n", "", "if", "type", "(", "trainExampleFiles", ")", "in", "types", ".", "StringTypes", ":", "\n", "                    ", "combinedTrainExamples", "=", "trainExampleFiles", "\n", "", "elif", "len", "(", "trainExampleFiles", ")", "==", "1", ":", "\n", "                    ", "combinedTrainExamples", "=", "trainExampleFiles", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "combinedTrainExamples", "=", "self", ".", "workDir", "+", "os", ".", "path", ".", "normpath", "(", "model", ".", "path", ")", "+", "\"-\"", "+", "self", ".", "tag", "+", "\"combined-examples.gz\"", "\n", "combinedTrainExamplesFile", "=", "gzip", ".", "open", "(", "combinedTrainExamples", ",", "'wb'", ")", "\n", "for", "trainExampleFile", "in", "trainExampleFiles", ":", "\n", "                        ", "print", ">>", "sys", ".", "stderr", ",", "\"Catenating\"", ",", "trainExampleFile", ",", "\"to\"", ",", "combinedTrainExamples", "\n", "shutil", ".", "copyfileobj", "(", "gzip", ".", "open", "(", "trainExampleFile", ",", "'rb'", ")", ",", "combinedTrainExamplesFile", ")", "\n", "", "combinedTrainExamplesFile", ".", "close", "(", ")", "\n", "# Upload training model", "\n", "# The parameter grid is stored in the model as \"*classifier-parameters-train\" so that endModel can ", "\n", "# use it, and also as annotation for the trained model. The final selected parameter will", "\n", "# be stored as \"*classifier-parameter\" ", "\n", "", "classifierWorkDir", "=", "self", ".", "workDir", "+", "os", ".", "path", ".", "normpath", "(", "model", ".", "path", ")", "+", "\"-\"", "+", "self", ".", "tag", "+", "\"models\"", "\n", "classifier", "=", "self", ".", "getClassifier", "(", "model", ".", "getStr", "(", "self", ".", "tag", "+", "\"classifier-parameters-train\"", ")", ")", "(", "self", ".", "connection", ")", "\n", "classifier", ".", "optimize", "(", "combinedTrainExamples", ",", "classifierWorkDir", ",", "model", ".", "getStr", "(", "self", ".", "tag", "+", "\"classifier-parameters-train\"", ")", ",", "testExampleFile", ",", "model", ".", "get", "(", "self", ".", "tag", "+", "\"ids.classes\"", ")", ",", "step", "=", "\"SUBMIT\"", ",", "evaluator", "=", "self", ".", "evaluator", ")", "\n", "model", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.endModel": [[73, 94], ["SingleStageDetector.SingleStageDetector.checkStep", "SingleStageDetector.SingleStageDetector.openModel", "classifier.optimize", "classifier.optimize.saveModel", "SingleStageDetector.SingleStageDetector.save", "SingleStageDetector.SingleStageDetector.getClassifier", "SingleStageDetector.SingleStageDetector.getStr", "SingleStageDetector.SingleStageDetector.get", "os.path.exists", "SingleStageDetector.SingleStageDetector.getStr", "os.remove", "SingleStageDetector.SingleStageDetector.getStr", "os.path.normpath", "os.path.normpath"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllCorrectClassifier.AllCorrectClassifier.optimize", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.saveModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.save", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr"], ["", "", "", "def", "endModel", "(", "self", ",", "step", ",", "model", ",", "testExampleFile", ")", ":", "\n", "        ", "if", "self", ".", "checkStep", "(", "step", ",", "False", ")", ":", "\n", "            ", "if", "model", "!=", "None", ":", "\n", "                ", "if", "self", ".", "state", "!=", "None", "and", "step", "!=", "None", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "self", ".", "__class__", ".", "__name__", "+", "\":\"", "+", "self", ".", "state", "+", "\":\"", "+", "step", "\n", "# Download combined model", "\n", "", "model", "=", "self", ".", "openModel", "(", "model", ",", "\"a\"", ")", "\n", "assert", "model", ".", "mode", "in", "[", "\"a\"", ",", "\"w\"", "]", "\n", "classifierWorkDir", "=", "self", ".", "workDir", "+", "os", ".", "path", ".", "normpath", "(", "model", ".", "path", ")", "+", "\"-\"", "+", "self", ".", "tag", "+", "\"models\"", "\n", "classifier", "=", "self", ".", "getClassifier", "(", "model", ".", "getStr", "(", "self", ".", "tag", "+", "\"classifier-parameters-train\"", ")", ")", "(", "self", ".", "connection", ")", "\n", "optimized", "=", "classifier", ".", "optimize", "(", "\"DUMMY\"", ",", "classifierWorkDir", ",", "model", ".", "getStr", "(", "self", ".", "tag", "+", "\"classifier-parameters-train\"", ")", ",", "testExampleFile", ",", "model", ".", "get", "(", "self", ".", "tag", "+", "\"ids.classes\"", ")", ",", "step", "=", "\"RESULTS\"", ",", "evaluator", "=", "self", ".", "evaluator", ",", "\n", "determineThreshold", "=", "(", "\"TEES.threshold\"", "in", "model", ".", "getStr", "(", "self", ".", "tag", "+", "\"classifier-parameters-train\"", ")", ")", ")", "\n", "#self.addClassifierModel(model, optimized.model, optimized.parameters, optimized.threshold)", "\n", "optimized", ".", "saveModel", "(", "model", ",", "self", ".", "tag", ")", "\n", "model", ".", "save", "(", ")", "\n", "# Check for catenated example file", "\n", "if", "self", ".", "deleteCombinedExamples", ":", "\n", "                    ", "combinedTrainExamples", "=", "os", ".", "path", ".", "normpath", "(", "model", ".", "path", ")", "+", "\"-\"", "+", "self", ".", "tag", "+", "\"combined-examples.gz\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "combinedTrainExamples", ")", ":", "\n", "                        ", "print", ">>", "sys", ".", "stderr", ",", "\"Deleting catenated training example file\"", ",", "combinedTrainExamples", "\n", "os", ".", "remove", "(", "combinedTrainExamples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.train": [[95, 120], ["SingleStageDetector.SingleStageDetector.initVariables", "SingleStageDetector.SingleStageDetector.setWorkDir", "SingleStageDetector.SingleStageDetector.enterState", "SingleStageDetector.SingleStageDetector.checkStep", "SingleStageDetector.SingleStageDetector.openModel", "SingleStageDetector.SingleStageDetector.checkStep", "SingleStageDetector.SingleStageDetector.beginModel", "SingleStageDetector.SingleStageDetector.endModel", "SingleStageDetector.SingleStageDetector.beginModel", "SingleStageDetector.SingleStageDetector.endModel", "SingleStageDetector.SingleStageDetector.exitState", "SingleStageDetector.SingleStageDetector.initModel", "SingleStageDetector.SingleStageDetector.saveStr", "SingleStageDetector.SingleStageDetector.structureAnalyzer.analyze", "SingleStageDetector.SingleStageDetector.buildExamples", "SingleStageDetector.SingleStageDetector.setWorkDir", "SingleStageDetector.SingleStageDetector.saveStr", "SingleStageDetector.SingleStageDetector.structureAnalyzer.toString"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setWorkDir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.endModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.beginModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.endModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.UnmergingDetector.UnmergingDetector.buildExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setWorkDir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString"], ["", "", "", "", "", "def", "train", "(", "self", ",", "trainData", "=", "None", ",", "optData", "=", "None", ",", "model", "=", "None", ",", "combinedModel", "=", "None", ",", "exampleStyle", "=", "None", ",", "\n", "classifierParameters", "=", "None", ",", "parse", "=", "None", ",", "tokenization", "=", "None", ",", "task", "=", "None", ",", "fromStep", "=", "None", ",", "toStep", "=", "None", ",", "\n", "workDir", "=", "None", ")", ":", "\n", "        ", "self", ".", "initVariables", "(", "trainData", "=", "trainData", ",", "optData", "=", "optData", ",", "model", "=", "model", ",", "combinedModel", "=", "combinedModel", ",", "exampleStyle", "=", "exampleStyle", ",", "classifierParameters", "=", "classifierParameters", ",", "parse", "=", "parse", ",", "tokenization", "=", "tokenization", ")", "\n", "self", ".", "setWorkDir", "(", "workDir", ")", "\n", "self", ".", "enterState", "(", "self", ".", "STATE_TRAIN", ",", "[", "\"ANALYZE\"", ",", "\"EXAMPLES\"", ",", "\"BEGIN-MODEL\"", ",", "\"END-MODEL\"", ",", "\"BEGIN-COMBINED-MODEL\"", ",", "\"END-COMBINED-MODEL\"", "]", ",", "fromStep", ",", "toStep", ")", "\n", "if", "self", ".", "checkStep", "(", "\"ANALYZE\"", ")", ":", "\n", "# General training initialization done at the beginning of the first state", "\n", "            ", "self", ".", "model", "=", "self", ".", "initModel", "(", "self", ".", "model", ",", "[", "(", "\"exampleStyle\"", ",", "self", ".", "tag", "+", "\"example-style\"", ")", ",", "(", "\"classifierParameters\"", ",", "self", ".", "tag", "+", "\"classifier-parameters-train\"", ")", "]", ")", "\n", "self", ".", "saveStr", "(", "self", ".", "tag", "+", "\"parse\"", ",", "parse", ",", "self", ".", "model", ")", "\n", "if", "task", "!=", "None", ":", "\n", "                ", "self", ".", "saveStr", "(", "self", ".", "tag", "+", "\"task\"", ",", "task", ",", "self", ".", "model", ")", "\n", "# Perform structure analysis", "\n", "", "self", ".", "structureAnalyzer", ".", "analyze", "(", "[", "optData", ",", "trainData", "]", ",", "self", ".", "model", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "self", ".", "structureAnalyzer", ".", "toString", "(", ")", "\n", "", "self", ".", "model", "=", "self", ".", "openModel", "(", "model", ",", "\"a\"", ")", "# Devel model already exists, with ids etc", "\n", "if", "self", ".", "checkStep", "(", "\"EXAMPLES\"", ")", ":", "\n", "            ", "self", ".", "buildExamples", "(", "self", ".", "model", ",", "[", "optData", ",", "trainData", "]", ",", "[", "self", ".", "workDir", "+", "self", ".", "tag", "+", "\"opt-examples.gz\"", ",", "self", ".", "workDir", "+", "self", ".", "tag", "+", "\"train-examples.gz\"", "]", ",", "saveIdsToModel", "=", "True", ")", "\n", "", "self", ".", "beginModel", "(", "\"BEGIN-MODEL\"", ",", "self", ".", "model", ",", "[", "self", ".", "workDir", "+", "self", ".", "tag", "+", "\"train-examples.gz\"", "]", ",", "self", ".", "workDir", "+", "self", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "self", ".", "endModel", "(", "\"END-MODEL\"", ",", "self", ".", "model", ",", "self", ".", "workDir", "+", "self", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "self", ".", "beginModel", "(", "\"BEGIN-COMBINED-MODEL\"", ",", "self", ".", "combinedModel", ",", "[", "self", ".", "workDir", "+", "self", ".", "tag", "+", "\"train-examples.gz\"", ",", "self", ".", "workDir", "+", "self", ".", "tag", "+", "\"opt-examples.gz\"", "]", ",", "self", ".", "workDir", "+", "self", ".", "tag", "+", "\"opt-examples.gz\"", ",", "self", ".", "model", ")", "\n", "self", ".", "endModel", "(", "\"END-COMBINED-MODEL\"", ",", "self", ".", "combinedModel", ",", "self", ".", "workDir", "+", "self", ".", "tag", "+", "\"opt-examples.gz\"", ")", "\n", "if", "workDir", "!=", "None", ":", "\n", "            ", "self", ".", "setWorkDir", "(", "\"\"", ")", "\n", "", "self", ".", "exitState", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classify": [[121, 149], ["SingleStageDetector.SingleStageDetector.openModel", "SingleStageDetector.SingleStageDetector.enterState", "SingleStageDetector.SingleStageDetector.setWorkDir", "SingleStageDetector.SingleStageDetector.openModel", "os.path.join", "SingleStageDetector.SingleStageDetector.classifyToXML", "Evaluators.run", "SingleStageDetector.SingleStageDetector.getBioNLPSharedTaskParams", "SingleStageDetector.SingleStageDetector.deleteTempWorkDir", "SingleStageDetector.SingleStageDetector.exitState", "SingleStageDetector.SingleStageDetector.setTempWorkDir", "SingleStageDetector.SingleStageDetector.getStr", "SingleStageDetector.SingleStageDetector.get", "float", "SingleStageDetector.SingleStageDetector.structureAnalyzer.load", "SingleStageDetector.SingleStageDetector.structureAnalyzer.validate", "Utils.write", "Utils.write", "Utils.write", "Utils.write", "Utils.write", "shutil.copy2", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "Utils.STFormat.ConvertXML.toSTFormat", "os.path.basename", "SingleStageDetector.SingleStageDetector.getStr", "SingleStageDetector.SingleStageDetector.stEvaluator.evaluate", "SingleStageDetector.SingleStageDetector.getStr"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.EventDetector.EventDetector.setWorkDir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classifyToXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.load", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr"], ["", "def", "classify", "(", "self", ",", "data", ",", "model", ",", "output", ",", "parse", "=", "None", ",", "task", "=", "None", ",", "goldData", "=", "None", ",", "workDir", "=", "None", ",", "fromStep", "=", "None", ",", "omitSteps", "=", "None", ",", "validate", "=", "False", ")", ":", "\n", "        ", "model", "=", "self", ".", "openModel", "(", "model", ",", "\"r\"", ")", "\n", "self", ".", "enterState", "(", "self", ".", "STATE_CLASSIFY", ")", "\n", "self", ".", "setWorkDir", "(", "workDir", ")", "\n", "if", "workDir", "==", "None", ":", "\n", "            ", "self", ".", "setTempWorkDir", "(", ")", "\n", "", "model", "=", "self", ".", "openModel", "(", "model", ",", "\"r\"", ")", "\n", "if", "parse", "==", "None", ":", "parse", "=", "self", ".", "getStr", "(", "self", ".", "tag", "+", "\"parse\"", ",", "model", ")", "\n", "workOutputTag", "=", "os", ".", "path", ".", "join", "(", "self", ".", "workDir", ",", "os", ".", "path", ".", "basename", "(", "output", ")", "+", "\"-\"", ")", "\n", "xml", "=", "self", ".", "classifyToXML", "(", "data", ",", "model", ",", "None", ",", "workOutputTag", ",", "\n", "model", ".", "get", "(", "self", ".", "tag", "+", "\"classifier-model\"", ",", "defaultIfNotExist", "=", "None", ")", ",", "goldData", ",", "parse", ",", "float", "(", "model", ".", "getStr", "(", "\"recallAdjustParameter\"", ",", "defaultIfNotExist", "=", "1.0", ")", ")", ")", "\n", "if", "(", "validate", ")", ":", "\n", "            ", "self", ".", "structureAnalyzer", ".", "load", "(", "model", ")", "\n", "self", ".", "structureAnalyzer", ".", "validate", "(", "xml", ")", "\n", "ETUtils", ".", "write", "(", "xml", ",", "output", "+", "\"-pred.xml.gz\"", ")", "\n", "", "else", ":", "\n", "            ", "shutil", ".", "copy2", "(", "workOutputTag", "+", "self", ".", "tag", "+", "\"pred.xml.gz\"", ",", "output", "+", "\"-pred.xml.gz\"", ")", "\n", "", "EvaluateInteractionXML", ".", "run", "(", "self", ".", "evaluator", ",", "xml", ",", "data", ",", "parse", ")", "\n", "stParams", "=", "self", ".", "getBioNLPSharedTaskParams", "(", "self", ".", "bioNLPSTParams", ",", "model", ")", "\n", "if", "stParams", "[", "\"convert\"", "]", ":", "#self.useBioNLPSTFormat:", "\n", "            ", "extension", "=", "\".zip\"", "if", "(", "stParams", "[", "\"convert\"", "]", "==", "\"zip\"", ")", "else", "\".tar.gz\"", "\n", "Utils", ".", "STFormat", ".", "ConvertXML", ".", "toSTFormat", "(", "xml", ",", "output", "+", "\"-events\"", "+", "extension", ",", "outputTag", "=", "stParams", "[", "\"a2Tag\"", "]", ",", "writeExtra", "=", "(", "stParams", "[", "\"scores\"", "]", "==", "True", ")", ")", "\n", "if", "stParams", "[", "\"evaluate\"", "]", ":", "#self.stEvaluator != None:", "\n", "                ", "if", "task", "==", "None", ":", "\n", "                    ", "task", "=", "self", ".", "getStr", "(", "self", ".", "tag", "+", "\"task\"", ",", "model", ")", "\n", "", "self", ".", "stEvaluator", ".", "evaluate", "(", "output", "+", "\"-events\"", "+", "extension", ",", "task", ")", "\n", "", "", "self", ".", "deleteTempWorkDir", "(", ")", "\n", "self", ".", "exitState", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.SingleStageDetector.SingleStageDetector.classifyToXML": [[150, 178], ["SingleStageDetector.SingleStageDetector.openModel", "classifier.classify", "SingleStageDetector.SingleStageDetector.getStr", "Core.loadPredictions", "SingleStageDetector.SingleStageDetector.evaluator.evaluate", "SingleStageDetector.SingleStageDetector.structureAnalyzer.load", "SingleStageDetector.SingleStageDetector.exampleWriter.write", "SingleStageDetector.SingleStageDetector.getStr", "os.path.exists", "SingleStageDetector.SingleStageDetector.buildExamples", "SingleStageDetector.SingleStageDetector.get", "SingleStageDetector.SingleStageDetector.getClassifier", "SingleStageDetector.SingleStageDetector.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "SingleStageDetector.SingleStageDetector.get", "SingleStageDetector.SingleStageDetector.getStr", "SingleStageDetector.SingleStageDetector.getStr"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllCorrectClassifier.AllCorrectClassifier.classify", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.loadPredictions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.load", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.UnmergingDetector.UnmergingDetector.buildExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr"], ["", "def", "classifyToXML", "(", "self", ",", "data", ",", "model", ",", "exampleFileName", "=", "None", ",", "tag", "=", "\"\"", ",", "classifierModel", "=", "None", ",", "goldData", "=", "None", ",", "parse", "=", "None", ",", "recallAdjust", "=", "None", ",", "compressExamples", "=", "True", ",", "exampleStyle", "=", "None", ",", "useExistingExamples", "=", "False", ")", ":", "\n", "        ", "model", "=", "self", ".", "openModel", "(", "model", ",", "\"r\"", ")", "\n", "if", "parse", "==", "None", ":", "\n", "            ", "parse", "=", "self", ".", "getStr", "(", "self", ".", "tag", "+", "\"parse\"", ",", "model", ")", "\n", "", "if", "useExistingExamples", ":", "\n", "            ", "assert", "exampleFileName", "!=", "None", "\n", "assert", "os", ".", "path", ".", "exists", "(", "exampleFileName", ")", "\n", "", "if", "exampleFileName", "==", "None", ":", "\n", "            ", "exampleFileName", "=", "tag", "+", "self", ".", "tag", "+", "\"examples\"", "\n", "if", "compressExamples", ":", "\n", "                ", "exampleFileName", "+=", "\".gz\"", "\n", "", "", "if", "not", "useExistingExamples", ":", "\n", "            ", "self", ".", "buildExamples", "(", "model", ",", "[", "data", "]", ",", "[", "exampleFileName", "]", ",", "[", "goldData", "]", ",", "parse", "=", "parse", ",", "exampleStyle", "=", "exampleStyle", ")", "\n", "", "if", "classifierModel", "==", "None", ":", "\n", "            ", "classifierModel", "=", "model", ".", "get", "(", "self", ".", "tag", "+", "\"classifier-model\"", ",", "defaultIfNotExist", "=", "None", ")", "\n", "#else:", "\n", "#    assert os.path.exists(classifierModel), classifierModel", "\n", "", "classifier", "=", "self", ".", "getClassifier", "(", "model", ".", "getStr", "(", "self", ".", "tag", "+", "\"classifier-parameter\"", ",", "defaultIfNotExist", "=", "None", ")", ")", "(", ")", "\n", "classifier", ".", "classify", "(", "exampleFileName", ",", "tag", "+", "self", ".", "tag", "+", "\"classifications\"", ",", "classifierModel", ",", "finishBeforeReturn", "=", "True", ")", "\n", "threshold", "=", "model", ".", "getStr", "(", "self", ".", "tag", "+", "\"threshold\"", ",", "defaultIfNotExist", "=", "None", ",", "asType", "=", "float", ")", "\n", "predictions", "=", "ExampleUtils", ".", "loadPredictions", "(", "tag", "+", "self", ".", "tag", "+", "\"classifications\"", ",", "recallAdjust", ",", "threshold", "=", "threshold", ")", "\n", "evaluator", "=", "self", ".", "evaluator", ".", "evaluate", "(", "exampleFileName", ",", "predictions", ",", "model", ".", "get", "(", "self", ".", "tag", "+", "\"ids.classes\"", ")", ")", "\n", "#outputFileName = tag+\"-\"+self.tag+\"pred.xml.gz\"", "\n", "#exampleStyle = self.exampleBuilder.getParameters(model.getStr(self.tag+\"example-style\"))", "\n", "if", "exampleStyle", "==", "None", ":", "\n", "            ", "exampleStyle", "=", "Parameters", ".", "get", "(", "model", ".", "getStr", "(", "self", ".", "tag", "+", "\"example-style\"", ")", ")", "# no checking, but these should already have passed the ExampleBuilder", "\n", "", "self", ".", "structureAnalyzer", ".", "load", "(", "model", ")", "\n", "return", "self", ".", "exampleWriter", ".", "write", "(", "exampleFileName", ",", "predictions", ",", "data", ",", "tag", "+", "self", ".", "tag", "+", "\"pred.xml.gz\"", ",", "model", ".", "get", "(", "self", ".", "tag", "+", "\"ids.classes\"", ")", ",", "parse", ",", "exampleStyle", "=", "exampleStyle", ",", "structureAnalyzer", "=", "self", ".", "structureAnalyzer", ")", "\n", "#        if evaluator.getData().getTP() + evaluator.getData().getFP() > 0:", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ModifierDetector.ModifierDetector.__init__": [[12, 20], ["SingleStageDetector.SingleStageDetector.SingleStageDetector.__init__", "ExampleWriters.ModifierExampleWriter.ModifierExampleWriter"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "SingleStageDetector", ".", "__init__", "(", "self", ")", "\n", "self", ".", "exampleBuilder", "=", "ModifierExampleBuilder", "\n", "self", ".", "exampleWriter", "=", "ModifierExampleWriter", "(", ")", "\n", "self", ".", "Classifier", "=", "SVMMultiClassClassifier", "\n", "self", ".", "evaluator", "=", "AveragingMultiClassEvaluator", "\n", "self", ".", "stEvaluator", "=", "Evaluators", ".", "BioNLP11GeniaTools", "\n", "self", ".", "tag", "=", "\"modifier-\"", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.__init__": [[11, 22], ["Detector.Detector.Detector.__init__", "ToolChain.ToolChain.getDefaultSteps", "ToolChain.ToolChain.addStep"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getDefaultSteps", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.addStep"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "Detector", ".", "__init__", "(", "self", ")", "\n", "# Settings", "\n", "self", ".", "STATE_TOOLCHAIN", "=", "\"PROCESS\"", "\n", "self", ".", "steps", "=", "[", "]", "\n", "for", "step", "in", "self", ".", "getDefaultSteps", "(", ")", ":", "\n", "            ", "self", ".", "addStep", "(", "*", "step", ")", "\n", "", "self", ".", "intermediateFilesAtSource", "=", "False", "\n", "self", ".", "compressIntermediateFiles", "=", "True", "\n", "self", ".", "intermediateFileTag", "=", "\"temp\"", "\n", "self", ".", "modelParameterStringName", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getDefaultSteps": [[23, 25], ["None"], "methods", ["None"], ["", "def", "getDefaultSteps", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getDefaultParameters": [[26, 37], ["ToolChain.ToolChain.getDefaultSteps", "sorted", "step[].keys"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getDefaultSteps"], ["", "def", "getDefaultParameters", "(", "self", ",", "defaults", "=", "None", ",", "defaultValue", "=", "None", ")", ":", "\n", "        ", "if", "defaults", "==", "None", ":", "\n", "            ", "defaults", "=", "{", "\"omitSteps\"", ":", "None", ",", "\"intermediateFiles\"", ":", "None", "}", "\n", "", "for", "step", "in", "self", ".", "getDefaultSteps", "(", ")", ":", "\n", "            ", "for", "argName", "in", "sorted", "(", "step", "[", "2", "]", ".", "keys", "(", ")", ")", ":", "\n", "                ", "parameterName", "=", "step", "[", "0", "]", "+", "\".\"", "+", "argName", "\n", "if", "defaultValue", "==", "NOTHING", ":", "\n", "                    ", "defaults", "[", "parameterName", "]", "=", "NOTHING", "\n", "", "else", ":", "\n", "                    ", "defaults", "[", "parameterName", "]", "=", "defaultValue", "\n", "", "", "", "return", "defaults", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getParameters": [[38, 48], ["ToolChain.ToolChain.getDefaultParameters", "Utils.get", "Utils.get", "Utils.get", "ToolChain.ToolChain.openModel", "ToolChain.ToolChain.getStr", "ToolChain.ToolChain.getDefaultSteps"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getDefaultParameters", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getDefaultSteps"], ["", "def", "getParameters", "(", "self", ",", "parameters", "=", "None", ",", "model", "=", "None", ",", "defaultValue", "=", "None", ",", "modelParameterStringName", "=", "None", ")", ":", "\n", "        ", "if", "modelParameterStringName", "==", "None", ":", "\n", "            ", "modelParameterStringName", "=", "self", ".", "modelParameterStringName", "\n", "", "if", "parameters", "==", "None", "and", "model", "!=", "None", ":", "\n", "            ", "model", "=", "self", ".", "openModel", "(", "model", ",", "\"r\"", ")", "\n", "parameters", "=", "model", ".", "getStr", "(", "modelParameterStringName", ",", "defaultIfNotExist", "=", "None", ")", "\n", "", "defaultStepNames", "=", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "getDefaultSteps", "(", ")", "]", "\n", "valueLimits", "=", "{", "\"omitSteps\"", ":", "defaultStepNames", "+", "[", "None", "]", ",", "\"intermediateFiles\"", ":", "defaultStepNames", "+", "[", "True", ",", "None", "]", "}", "\n", "defaults", "=", "self", ".", "getDefaultParameters", "(", "defaultValue", "=", "defaultValue", ")", "\n", "return", "Parameters", ".", "get", "(", "parameters", ",", "defaults", ",", "valueLimits", "=", "valueLimits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.applyParameters": [[49, 61], ["ToolChain.ToolChain.select.markOmitSteps", "sorted", "step[].keys", "ToolChain.ToolChain.setIntermediateFile", "ToolChain.ToolChain.setIntermediateFile"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.markOmitSteps", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setIntermediateFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setIntermediateFile"], ["", "def", "applyParameters", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "self", ".", "select", ".", "markOmitSteps", "(", "parameters", "[", "\"omitSteps\"", "]", ")", "\n", "for", "step", "in", "self", ".", "steps", ":", "\n", "            ", "for", "argName", "in", "sorted", "(", "step", "[", "2", "]", ".", "keys", "(", ")", ")", ":", "\n", "                ", "parameterName", "=", "step", "[", "0", "]", "+", "\".\"", "+", "argName", "\n", "if", "parameters", "[", "parameterName", "]", "!=", "NOTHING", ":", "\n", "                    ", "step", "[", "2", "]", "[", "argName", "]", "=", "parameters", "[", "parameterName", "]", "\n", "", "", "if", "parameters", "[", "\"intermediateFiles\"", "]", "!=", "None", ":", "\n", "                ", "if", "parameters", "[", "\"intermediateFiles\"", "]", "!=", "True", "and", "step", "in", "parameters", "[", "\"intermediateFiles\"", "]", ":", "\n", "                    ", "self", ".", "setIntermediateFile", "(", "step", "[", "0", "]", ",", "step", "[", "3", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "setIntermediateFile", "(", "step", "[", "0", "]", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.addStep": [[62, 65], ["ToolChain.ToolChain.steps.append"], "methods", ["None"], ["", "", "", "", "def", "addStep", "(", "self", ",", "name", ",", "function", ",", "argDict", ",", "intermediateFile", "=", "None", ",", "ioArgNames", "=", "{", "\"input\"", ":", "\"input\"", ",", "\"output\"", ":", "\"output\"", "}", ")", ":", "\n", "        ", "assert", "name", "not", "in", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "steps", "]", ",", "(", "name", ",", "steps", ")", "\n", "self", ".", "steps", ".", "append", "(", "[", "name", ",", "function", ",", "argDict", ",", "intermediateFile", ",", "ioArgNames", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.insertStep": [[66, 69], ["ToolChain.ToolChain.steps.insert"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.insert"], ["", "def", "insertStep", "(", "self", ",", "index", ",", "name", ",", "function", ",", "argDict", ",", "intermediateFile", "=", "None", ",", "ioArgNames", "=", "{", "\"input\"", ":", "\"input\"", ",", "\"output\"", ":", "\"output\"", "}", ")", ":", "\n", "        ", "assert", "name", "not", "in", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "steps", "]", ",", "(", "name", ",", "steps", ")", "\n", "self", ".", "steps", ".", "insert", "(", "index", ",", "[", "name", ",", "function", ",", "argDict", ",", "intermediateFile", ",", "ioArgNames", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setArgForAllSteps": [[70, 75], ["None"], "methods", ["None"], ["", "def", "setArgForAllSteps", "(", "self", ",", "argument", ",", "value", ",", "argMustExist", "=", "True", ")", ":", "\n", "        ", "for", "step", "in", "self", ".", "steps", ":", "\n", "            ", "if", "argMustExist", "and", "argument", "not", "in", "step", "[", "2", "]", ":", "\n", "                ", "continue", "\n", "", "step", "[", "2", "]", "[", "argument", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.stepArgs": [[76, 81], ["None"], "methods", ["None"], ["", "", "def", "stepArgs", "(", "self", ",", "step", ")", ":", "\n", "        ", "for", "s", "in", "self", ".", "steps", ":", "\n", "            ", "if", "step", "==", "s", "[", "0", "]", ":", "\n", "                ", "return", "s", "[", "2", "]", "\n", "", "", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setIntermediateFile": [[82, 92], ["None"], "methods", ["None"], ["", "def", "setIntermediateFile", "(", "self", ",", "stepName", ",", "filename", ")", ":", "\n", "        ", "for", "s", "in", "self", ".", "steps", ":", "\n", "            ", "if", "stepName", "==", "s", "[", "0", "]", ":", "\n", "                ", "if", "filename", "==", "True", ":", "\n", "                    ", "filename", "=", "s", "[", "3", "]", "\n", "", "elif", "filename", "in", "[", "False", ",", "\"None\"", ",", "None", "]", ":", "\n", "                    ", "filename", "=", "None", "\n", "", "s", "[", "3", "]", "=", "filename", "\n", "return", "\n", "", "", "assert", "False", ",", "(", "stepName", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setIntermediateFiles": [[93, 96], ["sorted", "stepToFilename.keys", "ToolChain.ToolChain.setIntermediateFile"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setIntermediateFile"], ["", "def", "setIntermediateFiles", "(", "self", ",", "stepToFilename", ")", ":", "\n", "        ", "for", "key", "in", "sorted", "(", "stepToFilename", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "setIntermediateFile", "(", "key", ",", "stepToFilename", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setNoIntermediateFiles": [[97, 100], ["ToolChain.ToolChain.setIntermediateFile"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setIntermediateFile"], ["", "", "def", "setNoIntermediateFiles", "(", "self", ")", ":", "\n", "        ", "for", "step", "in", "self", ".", "steps", ":", "\n", "            ", "self", ".", "setIntermediateFile", "(", "step", "[", "0", "]", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getIntermediateFilePath": [[101, 119], ["os.path.join", "type", "ToolChain.ToolChain.source.split", "os.path.isfile", "os.path.join.endswith", "os.path.join"], "methods", ["None"], ["", "", "def", "getIntermediateFilePath", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "[", "3", "]", "!=", "None", ":", "\n", "            ", "if", "self", ".", "intermediateFilesAtSource", ":", "\n", "                ", "if", "type", "(", "self", ".", "source", ")", "in", "types", ".", "StringTypes", ":", "\n", "                    ", "firstSource", "=", "self", ".", "source", ".", "split", "(", "\",\"", ")", "# this may be a list of directories", "\n", "if", "os", ".", "path", ".", "isfile", "(", "firstSource", ")", ":", "\n", "                        ", "rv", "=", "firstSource", "+", "\"-\"", "+", "step", "[", "3", "]", "\n", "", "else", ":", "# is a directory", "\n", "                        ", "rv", "=", "os", ".", "path", ".", "join", "(", "firstSource", ",", "step", "[", "3", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "rv", "=", "filename", "\n", "", "", "else", ":", "\n", "                ", "rv", "=", "os", ".", "path", ".", "join", "(", "self", ".", "outDir", ",", "self", ".", "intermediateFileTag", "+", "\"-\"", "+", "step", "[", "3", "]", ")", "\n", "", "if", "self", ".", "compressIntermediateFiles", "and", "not", "rv", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "                ", "rv", "+=", "\".gz\"", "\n", "", "return", "rv", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.process": [[120, 158], ["ToolChain.ToolChain.initVariables", "ToolChain.ToolChain.enterState", "ToolChain.ToolChain.getParameters", "ToolChain.ToolChain.applyParameters", "ToolChain.ToolChain.exitState", "os.path.basename", "os.path.basename", "Utils.toString", "Utils.toString", "Utils.toString", "os.path.exists", "os.remove", "ToolChain.ToolChain.checkStep", "os.path.dirname", "os.path.isdir", "copy.copy", "os.path.isdir", "Utils.write", "Utils.write", "Utils.write", "ToolChain.ToolChain.getDefaultParameters", "Utils.ETFromObj", "Utils.ETFromObj", "Utils.ETFromObj", "ToolChain.ToolChain.getIntermediateFilePath", "ToolChain.ToolChain.getIntermediateFilePath", "ToolChain.ToolChain.getStepStatus", "ToolChain.ToolChain.getIntermediateFilePath"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getParameters", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.applyParameters", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getDefaultParameters", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getIntermediateFilePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getIntermediateFilePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.StepSelector.StepSelector.getStepStatus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getIntermediateFilePath"], ["", "", "def", "process", "(", "self", ",", "input", ",", "output", ",", "parameters", "=", "None", ",", "model", "=", "None", ",", "fromStep", "=", "None", ",", "toStep", "=", "None", ",", "omitSteps", "=", "None", ")", ":", "\n", "        ", "self", ".", "initVariables", "(", "source", "=", "input", ",", "xml", "=", "input", ",", "outDir", "=", "os", ".", "path", ".", "dirname", "(", "output", ")", ")", "\n", "if", "os", ".", "path", ".", "basename", "(", "output", ")", "!=", "\"\"", ":", "\n", "            ", "self", ".", "intermediateFileTag", "=", "os", ".", "path", ".", "basename", "(", "output", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediateFileTag", "=", "\"\"", "\n", "", "self", ".", "enterState", "(", "self", ".", "STATE_TOOLCHAIN", ",", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "steps", "]", ",", "fromStep", ",", "toStep", ",", "omitSteps", ")", "\n", "parameters", "=", "self", ".", "getParameters", "(", "parameters", ",", "model", ",", "defaultValue", "=", "NOTHING", ")", "\n", "self", ".", "applyParameters", "(", "parameters", ")", "\n", "# Run the tools", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Tool chain parameters:\"", ",", "Parameters", ".", "toString", "(", "parameters", ",", "skipKeysWithValues", "=", "[", "NOTHING", "]", ",", "skipDefaults", "=", "self", ".", "getDefaultParameters", "(", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "output", ")", "and", "not", "os", ".", "path", ".", "isdir", "(", "output", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Removing existing preprocessor output file\"", ",", "output", "\n", "os", ".", "remove", "(", "output", ")", "\n", "", "savedIntermediate", "=", "None", "# Output from a previous step if \"fromStep\" is used", "\n", "for", "step", "in", "self", ".", "steps", ":", "\n", "            ", "if", "self", ".", "checkStep", "(", "step", "[", "0", "]", ")", ":", "\n", "                ", "if", "savedIntermediate", "!=", "None", ":", "# A previous run of the program saved an intermediate file", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"Reading input from saved intermediate file\"", ",", "savedIntermediate", "\n", "self", ".", "xml", "=", "ETUtils", ".", "ETFromObj", "(", "savedIntermediate", ")", "\n", "savedIntermediate", "=", "None", "\n", "", "stepArgs", "=", "copy", ".", "copy", "(", "step", "[", "2", "]", ")", "# make a copy of the arguments to which i/o can be added", "\n", "stepArgs", "[", "step", "[", "4", "]", "[", "\"input\"", "]", "]", "=", "self", ".", "xml", "# the input", "\n", "if", "self", ".", "getIntermediateFilePath", "(", "step", ")", "!=", "None", ":", "# this step should save an intermediate file", "\n", "                    ", "stepArgs", "[", "step", "[", "4", "]", "[", "\"output\"", "]", "]", "=", "self", ".", "getIntermediateFilePath", "(", "step", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Running step\"", ",", "step", "[", "0", "]", ",", "\"with arguments\"", ",", "stepArgs", "\n", "step", "[", "1", "]", "(", "**", "stepArgs", ")", "# call the tool", "\n", "", "elif", "self", ".", "getStepStatus", "(", "step", "[", "0", "]", ")", "==", "\"BEFORE\"", ":", "# this step was run earlier", "\n", "                ", "savedIntermediate", "=", "self", ".", "getIntermediateFilePath", "(", "step", ")", "\n", "# End state and return", "\n", "", "", "xml", "=", "self", ".", "xml", "# state-specific member variable self.xml will be removed when exiting state", "\n", "self", ".", "exitState", "(", ")", "\n", "if", "self", ".", "state", "==", "None", ":", "# if the whole toolchain has finished, return the final product", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "output", ")", ":", "# if output is a directory, it was given only for storing intermediate files ...", "\n", "                ", "ETUtils", ".", "write", "(", "xml", ",", "output", ")", "# ... otherwise, save the final output", "\n", "", "return", "xml", "\n", "", "else", ":", "\n", "            ", "return", "None", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.PairBuilder.PairBuilder.__init__": [[6, 9], ["Detectors.EdgeDetector.EdgeDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "EdgeDetector", ".", "__init__", "(", "self", ")", "\n", "self", ".", "Classifier", "=", "AllCorrectClassifier", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.PairBuilder.PairBuilder.train": [[10, 17], ["Utils.cat", "Detectors.EdgeDetector.EdgeDetector.train", "PairBuilder.PairBuilder.classify"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllTrueClassifier.AllTrueClassifier.train", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllCorrectClassifier.AllCorrectClassifier.classify"], ["", "def", "train", "(", "self", ",", "trainData", "=", "None", ",", "optData", "=", "None", ",", "model", "=", "None", ",", "combinedModel", "=", "None", ",", "exampleStyle", "=", "None", ",", "\n", "classifierParameters", "=", "None", ",", "parse", "=", "None", ",", "tokenization", "=", "None", ",", "task", "=", "None", ",", "fromStep", "=", "None", ",", "toStep", "=", "None", ",", "\n", "workDir", "=", "None", ")", ":", "\n", "\n", "        ", "exampleStyle", "=", "Parameters", ".", "cat", "(", "exampleStyle", ",", "\"keep_neg:no_features\"", ")", "\n", "EdgeDetector", ".", "train", "(", "self", ",", "trainData", ",", "optData", ",", "model", ",", "combinedModel", ",", "exampleStyle", ",", "classifierParameters", ",", "parse", ",", "tokenization", ",", "fromStep", ",", "toStep", ")", "\n", "self", ".", "classify", "(", "trainData", ",", "model", ",", "\"classification-train/train\"", ",", "goldData", "=", "trainData", ",", "workDir", "=", "\"classification-train\"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.DivideExamples.getDocumentId": [[9, 11], ["idString.rsplit"], "function", ["None"], ["def", "getDocumentId", "(", "idString", ")", ":", "\n", "    ", "return", "idString", ".", "rsplit", "(", "\".\"", ",", "2", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.DivideExamples.getIdFromLine": [[12, 15], ["[].strip", "line.find", "line.split"], "function", ["None"], ["", "def", "getIdFromLine", "(", "line", ")", ":", "\n", "    ", "assert", "(", "line", ".", "find", "(", "\"#\"", ")", "!=", "-", "1", ")", "\n", "return", "line", ".", "split", "(", "\"#\"", ")", "[", "-", "1", "]", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.DivideExamples.getDocumentIds": [[16, 29], ["open", "open.close", "DivideExamples.getDocumentId", "DivideExamples.getIdFromLine", "documentIds.append", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.DivideExamples.getDocumentId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.DivideExamples.getIdFromLine"], ["", "def", "getDocumentIds", "(", "filename", ")", ":", "\n", "    ", "documentIds", "=", "[", "]", "\n", "inputFile", "=", "open", "(", "filename", ",", "\"rt\"", ")", "\n", "try", ":", "\n", "        ", "for", "line", "in", "inputFile", ":", "\n", "            ", "if", "len", "(", "line", ")", "==", "0", "or", "line", "[", "0", "]", "==", "\"#\"", ":", "\n", "                ", "continue", "\n", "", "docId", "=", "getDocumentId", "(", "getIdFromLine", "(", "line", ")", ")", "\n", "if", "not", "docId", "in", "documentIds", ":", "\n", "                ", "documentIds", ".", "append", "(", "docId", ")", "\n", "", "", "", "finally", ":", "\n", "        ", "inputFile", ".", "close", "(", ")", "\n", "", "return", "documentIds", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.DivideExamples.getDocumentFolds": [[30, 36], ["Split.getFolds", "range", "len", "len"], "function", ["None"], ["", "def", "getDocumentFolds", "(", "documentIds", ",", "folds", ")", ":", "\n", "    ", "sample", "=", "Split", ".", "getFolds", "(", "len", "(", "documentIds", ")", ",", "folds", ")", "\n", "division", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "documentIds", ")", ")", ":", "\n", "        ", "division", "[", "documentIds", "[", "i", "]", "]", "=", "sample", "[", "i", "]", "\n", "", "return", "division", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.DivideExamples.divideExamples": [[37, 62], ["DivideExamples.getDocumentIds", "DivideExamples.getDocumentFolds", "open", "len", "outputFiles.append", "open.close", "outputFile.close", "open", "DivideExamples.getDocumentId", "outputFiles[].write", "DivideExamples.getIdFromLine", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.DivideExamples.getDocumentIds", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.DivideExamples.getDocumentFolds", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.DivideExamples.getDocumentId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.DivideExamples.getIdFromLine"], ["", "def", "divideExamples", "(", "filename", ",", "outputFilenames", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Reading document ids\"", "\n", "documentIds", "=", "getDocumentIds", "(", "filename", ")", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Dividing documents into folds\"", "\n", "division", "=", "getDocumentFolds", "(", "documentIds", ",", "len", "(", "outputFilenames", ")", ")", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Dividing examples\"", "\n", "\n", "outputFiles", "=", "[", "]", "\n", "for", "name", "in", "outputFilenames", ":", "\n", "        ", "outputFiles", ".", "append", "(", "open", "(", "name", ",", "\"wt\"", ")", ")", "\n", "\n", "", "inputFile", "=", "open", "(", "filename", ",", "\"rt\"", ")", "\n", "try", ":", "\n", "        ", "for", "line", "in", "inputFile", ":", "\n", "            ", "if", "len", "(", "line", ")", "==", "0", "or", "line", "[", "0", "]", "==", "\"#\"", ":", "\n", "                ", "continue", "\n", "", "docId", "=", "getDocumentId", "(", "getIdFromLine", "(", "line", ")", ")", "\n", "outputFiles", "[", "division", "[", "docId", "]", "]", ".", "write", "(", "line", ")", "\n", "", "", "finally", ":", "\n", "        ", "inputFile", ".", "close", "(", ")", "\n", "\n", "", "for", "outputFile", "in", "outputFiles", ":", "\n", "        ", "outputFile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.gen2iterable": [[30, 41], ["_iterable", "genfunc"], "function", ["None"], ["def", "gen2iterable", "(", "genfunc", ")", ":", "\n", "    ", "\"\"\"\n    Makes a multi-use iterator generator. See http://bugs.python.org/issue5973\n    for details.\n    \"\"\"", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "class", "_iterable", "(", "object", ")", ":", "\n", "            ", "def", "__iter__", "(", "self", ")", ":", "\n", "                ", "return", "genfunc", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "_iterable", "(", ")", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.isDuplicate": [[42, 48], ["None"], "function", ["None"], ["", "def", "isDuplicate", "(", "example1", ",", "example2", ")", ":", "\n", "    ", "if", "example1", "[", "1", "]", "!=", "example2", "[", "1", "]", ":", "\n", "        ", "return", "False", "\n", "", "if", "example1", "[", "2", "]", "!=", "example2", "[", "2", "]", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.removeDuplicates": [[49, 63], ["range", "range", "len", "len", "len", "range", "newExamples.append", "len", "ExampleUtils.isDuplicate"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.isDuplicate"], ["", "def", "removeDuplicates", "(", "examples", ")", ":", "\n", "    ", "\"\"\" removes all but one of the examples that have the same class and identical feature vectors\"\"\"", "\n", "duplicateList", "=", "[", "False", "]", "*", "len", "(", "examples", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "examples", ")", ")", ":", "\n", "        ", "if", "not", "duplicateList", "[", "i", "]", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "examples", ")", ")", ":", "\n", "                ", "if", "not", "duplicateList", "[", "j", "]", ":", "\n", "                    ", "if", "isDuplicate", "(", "examples", "[", "i", "]", ",", "examples", "[", "j", "]", ")", ":", "\n", "                        ", "duplicateList", "[", "j", "]", "=", "True", "\n", "", "", "", "", "", "newExamples", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "examples", ")", ")", ":", "\n", "        ", "if", "not", "duplicateList", "[", "i", "]", ":", "\n", "            ", "newExamples", ".", "append", "(", "examples", "[", "i", "]", ")", "\n", "", "", "return", "newExamples", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.normalizeFeatureVectors": [[64, 73], ["example[].values", "example[].iteritems", "abs", "float"], "function", ["None"], ["", "def", "normalizeFeatureVectors", "(", "examples", ")", ":", "\n", "    ", "for", "example", "in", "examples", ":", "\n", "# Normalize features", "\n", "        ", "total", "=", "0.0", "\n", "for", "v", "in", "example", "[", "2", "]", ".", "values", "(", ")", ":", "total", "+=", "abs", "(", "v", ")", "\n", "if", "total", "==", "0.0", ":", "\n", "            ", "total", "=", "1.0", "\n", "", "for", "k", ",", "v", "in", "example", "[", "2", "]", ".", "iteritems", "(", ")", ":", "\n", "            ", "example", "[", "2", "]", "[", "k", "]", "=", "float", "(", "v", ")", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.copyExamples": [[74, 79], ["examplesCopy.append", "example[].copy"], "function", ["None"], ["", "", "", "def", "copyExamples", "(", "examples", ")", ":", "\n", "    ", "examplesCopy", "=", "[", "]", "\n", "for", "example", "in", "examples", ":", "\n", "        ", "examplesCopy", ".", "append", "(", "[", "example", "[", "0", "]", ",", "example", "[", "1", "]", ",", "example", "[", "2", "]", ".", "copy", "(", ")", ",", "example", "[", "3", "]", "]", ")", "\n", "", "return", "examplesCopy", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.appendExamples": [[80, 111], ["file.write", "example[].keys", "example[].keys.sort", "file.write", "example[].iteritems", "file.write", "str", "example[].keys.remove", "file.write", "type", "file.write", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "appendExamples", "(", "examples", ",", "file", ")", ":", "\n", "    ", "noneClassCount", "=", "0", "\n", "for", "example", "in", "examples", ":", "\n", "# None-value as a class indicates a class that did not match an existing id,", "\n", "# in situations where new ids cannot be defined, such as predicting. An example", "\n", "# with class == None should never get this far, ideally it should be filtered", "\n", "# in the ExampleBuilder, but this at least prevents a crash.", "\n", "        ", "if", "example", "[", "1", "]", "==", "None", ":", "\n", "            ", "noneClassCount", "+=", "1", "\n", "continue", "\n", "# Write class", "\n", "", "file", ".", "write", "(", "str", "(", "example", "[", "1", "]", ")", ")", "\n", "# Get and sort feature ids", "\n", "keys", "=", "example", "[", "2", "]", ".", "keys", "(", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "# None-value as a key indicates a feature that did not match an existing id,", "\n", "# in situations where new ids cannot be defined, such as predicting", "\n", "if", "None", "in", "example", "[", "2", "]", ":", "\n", "            ", "keys", ".", "remove", "(", "None", ")", "\n", "# Write features", "\n", "", "for", "key", "in", "keys", ":", "\n", "            ", "file", ".", "write", "(", "\" \"", "+", "str", "(", "key", ")", "+", "\":\"", "+", "str", "(", "example", "[", "2", "]", "[", "key", "]", ")", ")", "\n", "# Write comment area", "\n", "", "file", ".", "write", "(", "\" # id:\"", "+", "example", "[", "0", "]", ")", "\n", "for", "extraKey", ",", "extraValue", "in", "example", "[", "3", "]", ".", "iteritems", "(", ")", ":", "\n", "            ", "assert", "(", "extraKey", "!=", "\"id\"", ")", "# id must be defined as example[0]", "\n", "if", "type", "(", "extraValue", ")", "in", "types", ".", "StringTypes", ":", "\n", "                ", "file", ".", "write", "(", "\" \"", "+", "str", "(", "extraKey", ")", "+", "\":\"", "+", "extraValue", ")", "\n", "", "", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "", "if", "noneClassCount", "!=", "0", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning,\"", ",", "noneClassCount", ",", "\"examples had an undefined class.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.appendExamplesBinary": [[112, 120], ["example[].keys", "example[].keys.sort", "file.write", "file.write", "struct.pack", "struct.pack", "len", "str", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "", "def", "appendExamplesBinary", "(", "examples", ",", "file", ")", ":", "\n", "    ", "import", "struct", "\n", "for", "example", "in", "examples", ":", "\n", "#file.write(str(example[1]))", "\n", "        ", "keys", "=", "example", "[", "2", "]", ".", "keys", "(", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "file", ".", "write", "(", "struct", ".", "pack", "(", "\"1i\"", ",", "len", "(", "keys", ")", ")", ")", "\n", "file", ".", "write", "(", "struct", ".", "pack", "(", "str", "(", "len", "(", "keys", ")", ")", "+", "\"i\"", ",", "*", "keys", ")", ")", "\n", "#for key in keys:", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.writeExamples": [[129, 139], ["filename.endswith", "ExampleUtils.appendExamples", "open.close", "gzip.open", "open", "open.write"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.appendExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "", "def", "writeExamples", "(", "examples", ",", "filename", ",", "commentLines", "=", "None", ")", ":", "\n", "    ", "if", "filename", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "        ", "f", "=", "gzip", ".", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "", "if", "commentLines", "!=", "None", ":", "\n", "        ", "for", "commentLine", "in", "commentLines", ":", "\n", "            ", "f", ".", "write", "(", "\"# \"", "+", "commentLine", "+", "\"\\n\"", ")", "\n", "", "", "appendExamples", "(", "examples", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.writePredictions": [[140, 152], ["exampleFileName.endswith", "open.readlines", "open.close", "gzip.open", "open", "line.find"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "def", "writePredictions", "(", "predictions", ",", "exampleFileName", ")", ":", "\n", "    ", "if", "exampleFileName", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "        ", "f", "=", "gzip", ".", "open", "(", "exampleFileName", ",", "\"wt\"", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "open", "(", "exampleFileName", ",", "\"wt\"", ")", "\n", "", "exampleLines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "for", "line", "in", "exampleLines", ":", "\n", "        ", "if", "line", "[", "0", "]", "!=", "\"#\"", ":", "\n", "            ", "break", "\n", "", "if", "line", ".", "find", "(", "\"#commentColumns:\"", ")", "!=", "-", "1", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.getIdsFromFile": [[153, 165], ["filename.endswith", "open.readlines", "gzip.open", "open", "line.rsplit", "ids.append", "splits[].strip"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "", "", "def", "getIdsFromFile", "(", "filename", ")", ":", "\n", "    ", "if", "filename", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "        ", "f", "=", "gzip", ".", "open", "(", "filename", ",", "\"rt\"", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "\"rt\"", ")", "\n", "", "ids", "=", "[", "]", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "        ", "if", "line", "[", "0", "]", "==", "\"#\"", ":", "\n", "            ", "continue", "\n", "", "splits", "=", "line", ".", "rsplit", "(", "\"#\"", ",", "1", ")", "\n", "ids", ".", "append", "(", "splits", "[", "-", "1", "]", ".", "strip", "(", ")", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.readExamples": [[166, 198], ["filename.endswith", "open.close", "gzip.open", "open", "line.split", "splits[].split", "splits[].split", "int", "commentSplit.split", "item.split", "float", "int"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "@", "gen2iterable", "\n", "def", "readExamples", "(", "filename", ",", "readFeatures", "=", "True", ")", ":", "\n", "    ", "if", "filename", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "        ", "f", "=", "gzip", ".", "open", "(", "filename", ",", "\"rt\"", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "\"rt\"", ")", "\n", "#try:", "\n", "", "for", "line", "in", "f", ":", "\n", "        ", "if", "line", "[", "0", "]", "==", "\"#\"", ":", "\n", "            ", "continue", "\n", "", "splits", "=", "line", ".", "split", "(", "\"#\"", ")", "\n", "commentSplits", "=", "splits", "[", "-", "1", "]", ".", "split", "(", ")", "\n", "id", "=", "None", "\n", "extra", "=", "{", "}", "\n", "for", "commentSplit", "in", "commentSplits", ":", "\n", "#if commentSplit.find(\"id:\") == -1:", "\n", "#    continue", "\n", "            ", "key", ",", "value", "=", "commentSplit", ".", "split", "(", "\":\"", ")", "\n", "if", "key", "==", "\"id\"", ":", "\n", "                ", "id", "=", "value", "\n", "", "else", ":", "\n", "                ", "extra", "[", "key", "]", "=", "value", "\n", "", "", "splits2", "=", "splits", "[", "0", "]", ".", "split", "(", ")", "\n", "classId", "=", "int", "(", "splits2", "[", "0", "]", ")", "\n", "features", "=", "{", "}", "\n", "if", "readFeatures", ":", "\n", "            ", "for", "item", "in", "splits2", "[", "1", ":", "]", ":", "\n", "                ", "featureId", ",", "featureValue", "=", "item", ".", "split", "(", "\":\"", ")", "\n", "features", "[", "int", "(", "featureId", ")", "]", "=", "float", "(", "featureValue", ")", "\n", "", "", "yield", "[", "id", ",", "classId", ",", "features", ",", "extra", "]", "\n", "#finally:", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.makeCorpusDivision": [[199, 202], ["corpusElements.documentsById.keys", "ExampleUtils.makeDivision"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.makeDivision"], ["", "def", "makeCorpusDivision", "(", "corpusElements", ",", "fraction", "=", "0.5", ",", "seed", "=", "0", ")", ":", "\n", "    ", "documentIds", "=", "corpusElements", ".", "documentsById", ".", "keys", "(", ")", "\n", "return", "makeDivision", "(", "documentIds", ",", "fraction", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.makeCorpusFolds": [[203, 206], ["corpusElements.documentsById.keys", "ExampleUtils.makeFolds"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.makeFolds"], ["", "def", "makeCorpusFolds", "(", "corpusElements", ",", "folds", "=", "10", ")", ":", "\n", "    ", "documentIds", "=", "corpusElements", ".", "documentsById", ".", "keys", "(", ")", "\n", "return", "makeFolds", "(", "documentIds", ",", "folds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.makeExampleDivision": [[207, 213], ["set", "list", "ExampleUtils.makeDivision", "list.add", "example[].rsplit"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.makeDivision", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["", "def", "makeExampleDivision", "(", "examples", ",", "fraction", "=", "0.5", ")", ":", "\n", "    ", "documentIds", "=", "set", "(", ")", "\n", "for", "example", "in", "examples", ":", "\n", "        ", "documentIds", ".", "add", "(", "example", "[", "0", "]", ".", "rsplit", "(", "\".\"", ",", "2", ")", "[", "0", "]", ")", "\n", "", "documentIds", "=", "list", "(", "documentIds", ")", "\n", "return", "makeDivision", "(", "documentIds", ",", "fraction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.makeExampleFolds": [[214, 220], ["set", "list", "ExampleUtils.makeFolds", "list.add", "example[].rsplit"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.makeFolds", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["", "def", "makeExampleFolds", "(", "examples", ",", "folds", "=", "10", ")", ":", "\n", "    ", "documentIds", "=", "set", "(", ")", "\n", "for", "example", "in", "examples", ":", "\n", "        ", "documentIds", ".", "add", "(", "example", "[", "0", "]", ".", "rsplit", "(", "\".\"", ",", "2", ")", "[", "0", "]", ")", "\n", "", "documentIds", "=", "list", "(", "documentIds", ")", "\n", "return", "makeFolds", "(", "documentIds", ",", "folds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.makeDivision": [[221, 227], ["Split.getSample", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.Subset.getSample"], ["", "def", "makeDivision", "(", "ids", ",", "fraction", "=", "0.5", ",", "seed", "=", "0", ")", ":", "\n", "    ", "sample", "=", "Split", ".", "getSample", "(", "len", "(", "ids", ")", ",", "fraction", ",", "seed", ")", "\n", "division", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "        ", "division", "[", "ids", "[", "i", "]", "]", "=", "sample", "[", "i", "]", "\n", "", "return", "division", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.makeFolds": [[228, 234], ["Split.getFolds", "range", "len", "len"], "function", ["None"], ["", "def", "makeFolds", "(", "ids", ",", "folds", "=", "10", ")", ":", "\n", "    ", "sample", "=", "Split", ".", "getFolds", "(", "len", "(", "ids", ")", ",", "folds", ")", "\n", "division", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "        ", "division", "[", "ids", "[", "i", "]", "]", "=", "sample", "[", "i", "]", "\n", "", "return", "division", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.divideExamples": [[235, 247], ["ExampleUtils.makeExampleDivision", "makeExampleDivision.has_key", "example[].rsplit", "exampleSets[].append", "exampleSets.has_key"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.makeExampleDivision"], ["", "def", "divideExamples", "(", "examples", ",", "division", "=", "None", ")", ":", "\n", "    ", "if", "division", "==", "None", ":", "\n", "        ", "division", "=", "makeExampleDivision", "(", "examples", ")", "\n", "\n", "", "exampleSets", "=", "{", "}", "\n", "for", "example", "in", "examples", ":", "\n", "        ", "documentId", "=", "example", "[", "0", "]", ".", "rsplit", "(", "\".\"", ",", "2", ")", "[", "0", "]", "\n", "if", "division", ".", "has_key", "(", "documentId", ")", ":", "\n", "            ", "if", "not", "exampleSets", ".", "has_key", "(", "division", "[", "documentId", "]", ")", ":", "\n", "                ", "exampleSets", "[", "division", "[", "documentId", "]", "]", "=", "[", "]", "\n", "", "exampleSets", "[", "division", "[", "documentId", "]", "]", ".", "append", "(", "example", ")", "\n", "", "", "return", "exampleSets", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.divideExampleFile": [[248, 267], ["exampleFileName.endswith", "open.readlines", "open.close", "divisionFiles.values", "gzip.open", "open", "[].strip", "divisionFiles[].write", "v.close", "[].strip.rsplit", "divisionFiles.has_key", "open", "line.split", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "def", "divideExampleFile", "(", "exampleFileName", ",", "division", ",", "outputDir", ")", ":", "\n", "    ", "if", "exampleFileName", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "        ", "f", "=", "gzip", ".", "open", "(", "exampleFileName", ",", "\"rt\"", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "open", "(", "exampleFileName", ",", "\"rt\"", ")", "\n", "", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "divisionFiles", "=", "{", "}", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "line", "[", "0", "]", "==", "\"#\"", ":", "\n", "            ", "continue", "\n", "", "id", "=", "line", ".", "split", "(", "\"#\"", ")", "[", "-", "1", "]", ".", "strip", "(", ")", "\n", "documentId", "=", "id", ".", "rsplit", "(", "\".\"", ",", "2", ")", "[", "0", "]", "\n", "if", "not", "divisionFiles", ".", "has_key", "(", "division", "[", "documentId", "]", ")", ":", "\n", "            ", "divisionFiles", "[", "division", "[", "documentId", "]", "]", "=", "open", "(", "outputDir", "+", "\"/set\"", "+", "str", "(", "division", "[", "documentId", "]", ")", ",", "\"wt\"", ")", "\n", "", "divisionFiles", "[", "division", "[", "documentId", "]", "]", ".", "write", "(", "line", ")", "\n", "", "for", "v", "in", "divisionFiles", ".", "values", "(", ")", ":", "\n", "        ", "v", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.loadPredictions": [[294, 356], ["predictionsFile.endswith", "open.close", "gzip.open", "open", "line.split", "len", "open.close", "RecallAdjust.getClassRangesFromPredictions", "ExampleUtils.loadPredictions", "float", "len", "predictions.append", "splits[].split", "pred.append", "range", "line.split", "pred[].append", "int", "float", "RecallAdjust.scaleVal", "RecallAdjust.scaleRange", "len", "range", "int", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.getClassRangesFromPredictions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.loadPredictions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.scaleVal", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.scaleRange"], ["", "", "@", "gen2iterable", "\n", "def", "loadPredictions", "(", "predictionsFile", ",", "recallAdjust", "=", "None", ",", "classRanges", "=", "None", ",", "threshold", "=", "None", ")", ":", "\n", "    ", "if", "predictionsFile", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "        ", "f", "=", "gzip", ".", "open", "(", "predictionsFile", ",", "\"rt\"", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "open", "(", "predictionsFile", ",", "\"rt\"", ")", "\n", "#try:", "\n", "", "for", "line", "in", "f", ":", "\n", "        ", "splits", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "splits", ")", "==", "1", ":", "# true binary", "\n", "            ", "assert", "recallAdjust", "==", "None", "or", "recallAdjust", "==", "1.0", "# not implemented for binary classification", "\n", "yield", "[", "float", "(", "splits", "[", "0", "]", ")", "]", "\n", "", "elif", "len", "(", "splits", ")", "==", "3", "and", "(", "recallAdjust", "!=", "None", "and", "recallAdjust", "!=", "1.0", ")", "and", "classRanges", "==", "None", ":", "# SVM multiclass two class \"binary\" classification", "\n", "# Go through all the predictions to get the ranges", "\n", "            ", "predictions", "=", "[", "splits", "]", "\n", "for", "line", "in", "f", ":", "\n", "                ", "predictions", ".", "append", "(", "line", ".", "split", "(", ")", ")", "\n", "", "f", ".", "close", "(", ")", "# end first iteration", "\n", "classRanges", "=", "RecallAdjust", ".", "getClassRangesFromPredictions", "(", "predictions", ")", "\n", "# Load predictions again with the range information", "\n", "for", "yieldedValue", "in", "loadPredictions", "(", "predictionsFile", ",", "recallAdjust", ",", "classRanges", ")", ":", "\n", "                ", "yield", "yieldedValue", "\n", "", "break", "\n", "", "else", ":", "# multiclass", "\n", "            ", "if", "\",\"", "in", "splits", "[", "0", "]", ":", "# multilabel", "\n", "                ", "pred", "=", "[", "[", "]", "]", "\n", "for", "value", "in", "splits", "[", "0", "]", ".", "split", "(", "\",\"", ")", ":", "\n", "                    ", "pred", "[", "0", "]", ".", "append", "(", "int", "(", "value", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "pred", "=", "[", "int", "(", "splits", "[", "0", "]", ")", "]", "\n", "", "for", "split", "in", "splits", "[", "1", ":", "]", ":", "\n", "                ", "if", "split", "!=", "\"N/A\"", ":", "\n", "                    ", "split", "=", "float", "(", "split", ")", "\n", "", "pred", ".", "append", "(", "split", ")", "\n", "# Recall adjust", "\n", "", "if", "recallAdjust", "!=", "None", "and", "recallAdjust", "!=", "1.0", ":", "\n", "                ", "if", "classRanges", "==", "None", ":", "\n", "                    ", "pred", "[", "1", "]", "=", "RecallAdjust", ".", "scaleVal", "(", "pred", "[", "1", "]", ",", "recallAdjust", ")", "\n", "", "else", ":", "# SVM multiclass two class \"binary\" classification ", "\n", "                    ", "pred", "[", "1", "]", "=", "RecallAdjust", ".", "scaleRange", "(", "pred", "[", "1", "]", ",", "recallAdjust", ",", "classRanges", "[", "1", "]", ")", "\n", "#if pred[0] == 1:", "\n", "", "maxStrength", "=", "pred", "[", "1", "]", "\n", "pred", "[", "0", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "pred", ")", ")", ":", "\n", "                    ", "if", "pred", "[", "i", "]", ">", "maxStrength", ":", "\n", "                        ", "maxStrength", "=", "pred", "[", "i", "]", "\n", "pred", "[", "0", "]", "=", "i", "\n", "# Thresholding", "\n", "", "", "", "if", "threshold", "!=", "None", ":", "\n", "                ", "if", "pred", "[", "1", "]", ">", "threshold", ":", "\n", "                    ", "pred", "[", "0", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "maxStrength", "=", "pred", "[", "2", "]", "\n", "pred", "[", "0", "]", "=", "2", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "pred", ")", ")", ":", "\n", "                        ", "if", "pred", "[", "i", "]", ">", "maxStrength", ":", "\n", "                            ", "maxStrength", "=", "pred", "[", "i", "]", "\n", "pred", "[", "0", "]", "=", "i", "\n", "# Return the prediction", "\n", "", "", "", "", "yield", "pred", "\n", "#finally:", "\n", "", "", "f", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.__init__": [[14, 48], ["idDict.iteritems", "IdSet.IdSet.load", "IdSet.IdSet.defineId", "max", "IdSet.IdSet.Ids.values"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.load", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.defineId"], ["def", "__init__", "(", "self", ",", "firstNumber", "=", "1", ",", "idDict", "=", "None", ",", "locked", "=", "False", ",", "filename", "=", "None", ",", "allowNewIds", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Creates a new IdSet or loads one from a dictionary or a file.\n        \n        To create a new, empty set: idset = IdSet(firstNumber = x). \n        To create a set from a str->int dictionary: idset = IdSet(idDict = x). \n        To load a dictionary from a file: idset = IdSet(filename = x).\n        \n        @param firstNumber: The number given to the first name defined. Subsequent names will\n        have higher numbers.\n        @type firstNumber: int\n        @param idDict: Dictionary of name / integer pairs. The integer values must be unique.\n        @type idDict: dictionary\n        @param locked: Whether new names can be added to the set. If set to True, getId will\n        return None for names that are not already in the set.\n        @type locked: boolean\n        @param filename: load name/id pairs from a file\n        @type filename: str\n        \"\"\"", "\n", "self", ".", "Ids", "=", "{", "}", "\n", "self", ".", "nextFreeId", "=", "firstNumber", "\n", "self", ".", "_namesById", "=", "{", "}", "\n", "self", ".", "allowNewIds", "=", "allowNewIds", "# allow new ids when calling getId without specifying \"createIfNotExist\"", "\n", "\n", "if", "idDict", "!=", "None", ":", "\n", "            ", "self", ".", "locked", "=", "False", "\n", "self", ".", "nextFreeId", "=", "999999999", "\n", "for", "name", ",", "id", "in", "idDict", ".", "iteritems", "(", ")", ":", "\n", "                ", "self", ".", "defineId", "(", "name", ",", "id", ")", "\n", "", "self", ".", "nextFreeId", "=", "max", "(", "self", ".", "Ids", ".", "values", "(", ")", ")", "+", "1", "\n", "", "self", ".", "locked", "=", "locked", "\n", "\n", "if", "filename", "!=", "None", ":", "\n", "            ", "self", ".", "load", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getId": [[49, 72], ["IdSet.IdSet.Ids.has_key"], "methods", ["None"], ["", "", "def", "getId", "(", "self", ",", "key", ",", "createIfNotExist", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns the id number for a name. If the name doesn't already have an id, a new id is defined,\n        unless createIfNotExist is set to false, in which case None is returned for these cases.\n        \n        @type key: str\n        @param key: name\n        @type createIfNotExist: True, False or None\n        @param createIfNotExist: If the name doesn't have an id, define an id for it\n        @rtype: int or None\n        @return: an identifier\n        \"\"\"", "\n", "if", "createIfNotExist", "==", "None", ":", "# no local override to object level setting", "\n", "            ", "createIfNotExist", "=", "self", ".", "allowNewIds", "\n", "", "if", "not", "self", ".", "Ids", ".", "has_key", "(", "key", ")", ":", "\n", "            ", "if", "self", ".", "locked", "or", "createIfNotExist", "==", "False", ":", "\n", "                ", "return", "None", "\n", "", "id", "=", "self", ".", "nextFreeId", "\n", "self", ".", "nextFreeId", "+=", "1", "\n", "#assert(not id in self.Ids.values())", "\n", "self", ".", "Ids", "[", "key", "]", "=", "id", "\n", "self", ".", "_namesById", "[", "id", "]", "=", "key", "\n", "", "return", "self", ".", "Ids", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.__getitem__": [[73, 78], ["IdSet.IdSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        Calls getId through the []-operator.\n        \"\"\"", "\n", "return", "self", ".", "getId", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.defineId": [[79, 91], ["IdSet.IdSet.Ids.values", "IdSet.IdSet.Ids.keys"], "methods", ["None"], ["", "def", "defineId", "(", "self", ",", "name", ",", "id", ")", ":", "\n", "        ", "\"\"\"\n        Give a specific id for a certain name. Neither the name nor the id must exist in the set\n        and the id must be smaller than the largest id already in the set. Usually this method\n        is used only when inserting name/id pairs from an existing source.\n        \"\"\"", "\n", "assert", "(", "not", "self", ".", "locked", ")", "\n", "assert", "(", "not", "id", "in", "self", ".", "Ids", ".", "values", "(", ")", ")", "\n", "assert", "(", "not", "name", "in", "self", ".", "Ids", ".", "keys", "(", ")", ")", "\n", "assert", "(", "id", "<", "self", ".", "nextFreeId", ")", "\n", "self", ".", "Ids", "[", "name", "]", "=", "id", "\n", "self", ".", "_namesById", "[", "id", "]", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getName": [[92, 105], ["IdSet.IdSet._namesById.has_key"], "methods", ["None"], ["", "def", "getName", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"\n        Returns the name corresponding to the identifier. If the identifier doesn't exits, returns None.\n        \n        @param id: the identifier number\n        @type id: int\n        @rtype: str or None\n        @return: a name\n        \"\"\"", "\n", "if", "self", ".", "_namesById", ".", "has_key", "(", "id", ")", ":", "\n", "            ", "return", "self", ".", "_namesById", "[", "id", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getNames": [[106, 113], ["IdSet.IdSet.Ids.keys", "IdSet.IdSet.sort"], "methods", ["None"], ["", "", "def", "getNames", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a sorted list of all names. Can be slow for large IdSets.\n        \"\"\"", "\n", "names", "=", "self", ".", "Ids", ".", "keys", "(", ")", "\n", "names", ".", "sort", "(", ")", "\n", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getIds": [[114, 121], ["IdSet.IdSet.Ids.values", "IdSet.IdSet.sort"], "methods", ["None"], ["", "def", "getIds", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a sorted list of id numbers. Can be slow for large IdSets.\n        \"\"\"", "\n", "values", "=", "self", ".", "Ids", ".", "values", "(", ")", "\n", "values", ".", "sort", "(", ")", "\n", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.write": [[122, 143], ["filename.endswith", "IdSet.IdSet.Ids.keys", "IdSet.IdSet.sort", "gzip.open.close", "gzip.open", "codecs.open", "codecs.open.write", "codecs.getwriter", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "write", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"\n        Writes the name/id pairs to a file, one pair per line, in the format \"name: id\".\n        \"\"\"", "\n", "#f = codecs.open(filename, \"wt\", \"utf-8\")", "\n", "if", "filename", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "            ", "f", "=", "gzip", ".", "open", "(", "filename", ",", "'wt'", ")", "\n", "writer", "=", "codecs", ".", "getwriter", "(", "\"utf-8\"", ")", "(", "f", ")", "\n", "", "else", ":", "\n", "            ", "writer", "=", "codecs", ".", "open", "(", "filename", ",", "\"wt\"", ",", "\"utf-8\"", ")", "\n", "f", "=", "writer", "\n", "\n", "", "keys", "=", "self", ".", "Ids", ".", "keys", "(", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "# key is assumed to be a string", "\n", "            ", "writer", ".", "write", "(", "key", "+", "\": \"", "+", "str", "(", "self", ".", "Ids", "[", "key", "]", ")", "+", "\"\\n\"", ")", "\n", "#f.write( (str(key)+\": \"+str(self.Ids[key])+\"\\n\") ) # this causes unicode problems", "\n", "#f.write( (str(key)+\": \"+str(self.Ids[key])+\"\\n\") )", "\n", "#f.write( (str(key)+\": \"+str(self.Ids[key])+\"\\n\").encode(\"utf-8\") )", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.load": [[144, 171], ["filename.endswith", "codecs.open.readlines", "gzip.open.close", "gzip.open", "codecs.open", "line.rsplit", "key.strip.strip.strip", "int", "codecs.getreader", "int.strip"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"\n        Loads name/id pairs from a file. The IdSet is cleared of all existing ids before\n        loading the ones from the file.\n        \"\"\"", "\n", "self", ".", "Ids", "=", "{", "}", "\n", "self", ".", "_namesById", "=", "{", "}", "\n", "self", ".", "nextFreeId", "=", "-", "999999999999999999", "\n", "\n", "#f = codecs.open(filename, \"rt\", \"utf-8\")", "\n", "if", "filename", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "            ", "f", "=", "gzip", ".", "open", "(", "filename", ",", "'rt'", ")", "\n", "reader", "=", "codecs", ".", "getreader", "(", "\"utf-8\"", ")", "(", "f", ")", "\n", "", "else", ":", "\n", "            ", "reader", "=", "codecs", ".", "open", "(", "filename", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "f", "=", "reader", "\n", "", "lines", "=", "reader", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "rsplit", "(", "\":\"", ",", "1", ")", "\n", "key", "=", "key", ".", "strip", "(", ")", "\n", "value", "=", "int", "(", "value", ".", "strip", "(", ")", ")", "\n", "if", "value", ">=", "self", ".", "nextFreeId", ":", "\n", "                ", "self", ".", "nextFreeId", "=", "value", "+", "1", "\n", "", "self", ".", "Ids", "[", "key", "]", "=", "value", "\n", "self", ".", "_namesById", "[", "value", "]", "=", "key", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.__init__": [[120, 164], ["SimpleGraph.Graph", "SentenceGraph.SentenceGraph.dependencyGraph.addNodes", "SentenceGraph.SentenceGraph.dependencyGraph.addEdge", "token.get", "dependency.get", "dependency.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "__init__", "(", "self", ",", "sentenceElement", ",", "tokenElements", ",", "dependencyElements", ")", ":", "\n", "        ", "\"\"\"\n        Creates the syntactic graph part of the SentenceGraph. The semantic graph\n        can be added with mapInteractions.\n        \n        @param sentenceElement: interaction-XML sentence-element\n        @type sentenceElement: cElementTree.Element\n        @param tokenElements: interaction-XML syntactic token elements\n        @type tokenElements: list of cElementTree.Element objects\n        @param dependencyElements: interacton-XML syntactic dependency elements\n        @type dependencyElements: list of cElementTree.Element objects   \n        \"\"\"", "\n", "self", ".", "sentenceElement", "=", "sentenceElement", "\n", "self", ".", "tokens", "=", "tokenElements", "\n", "self", ".", "dependencies", "=", "dependencyElements", "\n", "#self.dependencyGraph = NX.XDiGraph(multiedges = multiedges)", "\n", "#if multiedges:", "\n", "#    self.dependencyGraph = NX10.MultiDiGraph()", "\n", "#else:", "\n", "#    self.dependencyGraph = NX10.DiGraph()", "\n", "self", ".", "dependencyGraph", "=", "Graph", "(", ")", "\n", "self", ".", "interactions", "=", "None", "\n", "self", ".", "entities", "=", "None", "\n", "self", ".", "interactionGraph", "=", "None", "\n", "self", ".", "entityGraph", "=", "None", "\n", "self", ".", "duplicateInteractionEdgesRemoved", "=", "0", "\n", "self", ".", "tokenHeadScores", "=", "None", "\n", "# Merged graph", "\n", "self", ".", "mergedEntities", "=", "None", "\n", "self", ".", "mergedEntityToDuplicates", "=", "None", "\n", "self", ".", "mergedEntityGraph", "=", "None", "\n", "\n", "self", ".", "tokensById", "=", "{", "}", "\n", "for", "token", "in", "self", ".", "tokens", ":", "\n", "            ", "self", ".", "tokensById", "[", "token", ".", "get", "(", "\"id\"", ")", "]", "=", "token", "\n", "#self.dependencyGraph.add_node(token)", "\n", "", "self", ".", "dependencyGraph", ".", "addNodes", "(", "self", ".", "tokens", ")", "\n", "# Build the dependency graph using token-elements as nodes and dependency-elements", "\n", "# as edge data", "\n", "for", "dependency", "in", "self", ".", "dependencies", ":", "\n", "#self.dependencyGraph.add_edge(self.tokensById[dependency.attrib[\"t1\"]],\\", "\n", "            ", "self", ".", "dependencyGraph", ".", "addEdge", "(", "self", ".", "tokensById", "[", "dependency", ".", "get", "(", "\"t1\"", ")", "]", ",", "self", ".", "tokensById", "[", "dependency", ".", "get", "(", "\"t2\"", ")", "]", ",", "dependency", ")", "\n", "#                              element=dependency)", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getSentenceId": [[180, 182], ["SentenceGraph.SentenceGraph.sentenceElement.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "getSentenceId", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sentenceElement", ".", "get", "(", "\"id\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.makeEntityGraph": [[183, 220], ["SimpleGraph.Graph", "SimpleGraph.Graph.addNodes", "interaction.get", "[].append", "set", "interaction.get", "entities.append", "interaction.get", "SimpleGraph.Graph.addEdge", "set.add", "interaction.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "makeEntityGraph", "(", "self", ",", "entities", ",", "interactions", ",", "entityToDuplicates", "=", "None", ")", ":", "\n", "        ", "graph", "=", "Graph", "(", ")", "\n", "graph", ".", "addNodes", "(", "entities", ")", "\n", "# make a dummy duplicate map if it's not required", "\n", "if", "entityToDuplicates", "==", "None", ":", "\n", "            ", "entityToDuplicates", "=", "{", "}", "\n", "for", "e", "in", "entities", ":", "\n", "                ", "entityToDuplicates", "[", "e", "]", "=", "[", "]", "\n", "# initialize a helper map", "\n", "", "", "interactionMap", "=", "{", "}", "\n", "for", "interaction", "in", "interactions", ":", "\n", "            ", "e1", "=", "self", ".", "entitiesById", "[", "interaction", ".", "get", "(", "\"e1\"", ")", "]", "\n", "e2Id", "=", "interaction", ".", "get", "(", "\"e2\"", ")", "\n", "if", "e2Id", "not", "in", "self", ".", "entitiesById", ":", "# intersentence interaction", "\n", "                ", "if", "e2Id", "not", "in", "entities", ":", "\n", "                    ", "entities", ".", "append", "(", "e2Id", ")", "\n", "entityToDuplicates", "[", "e2Id", "]", "=", "[", "]", "\n", "", "e2", "=", "e2Id", "# make a dummy node", "\n", "", "else", ":", "\n", "                ", "e2", "=", "self", ".", "entitiesById", "[", "e2Id", "]", "\n", "", "if", "e1", "not", "in", "interactionMap", ":", "\n", "                ", "interactionMap", "[", "e1", "]", "=", "{", "}", "\n", "", "if", "e2", "not", "in", "interactionMap", "[", "e1", "]", ":", "\n", "                ", "interactionMap", "[", "e1", "]", "[", "e2", "]", "=", "[", "]", "\n", "", "interactionMap", "[", "e1", "]", "[", "e2", "]", ".", "append", "(", "interaction", ")", "\n", "# make the graph", "\n", "", "for", "e1", "in", "entities", ":", "# loop through all given entities", "\n", "            ", "for", "e2", "in", "entities", ":", "# loop through all given entities", "\n", "                ", "interactionTypes", "=", "set", "(", ")", "\n", "for", "d1", "in", "[", "e1", "]", "+", "entityToDuplicates", "[", "e1", "]", ":", "# add duplicates to each iteration", "\n", "                    ", "for", "d2", "in", "[", "e2", "]", "+", "entityToDuplicates", "[", "e2", "]", ":", "# add duplicates to each iteration", "\n", "                        ", "if", "d1", "in", "interactionMap", "and", "d2", "in", "interactionMap", "[", "d1", "]", ":", "\n", "                            ", "for", "interaction", "in", "interactionMap", "[", "d1", "]", "[", "d2", "]", ":", "\n", "                                ", "if", "interaction", ".", "get", "(", "\"type\"", ")", "not", "in", "interactionTypes", ":", "# remove edges with the same type that another edge already had", "\n", "                                    ", "graph", ".", "addEdge", "(", "e1", ",", "e2", ",", "interaction", ")", "# add primary and duplicate edges for the main entity pair", "\n", "interactionTypes", ".", "add", "(", "interaction", ".", "get", "(", "\"type\"", ")", ")", "\n", "", "", "", "", "", "", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getInteractions": [[222, 243], ["SentenceGraph.SentenceGraph.mergedEntityGraph.getEdges", "SentenceGraph.SentenceGraph.entityGraph.getEdges", "SentenceGraph.SentenceGraph.mergeInteractionGraph", "SentenceGraph.SentenceGraph.makeEntityGraph", "SentenceGraph.SentenceGraph.makeEntityGraph"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.mergeInteractionGraph", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.makeEntityGraph", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.makeEntityGraph"], ["", "def", "getInteractions", "(", "self", ",", "entity1", ",", "entity2", ",", "merged", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Return a list of interaction-elements which represent directed\n        interactions from entity1 to entity2.\n        \n        @param entity1: a semantic node (trigger or named entity)\n        @type entity1: cElementTree.Element \n        @param entity2: a semantic node (trigger or named entity)\n        @type entity2: cElementTree.Element \n        \"\"\"", "\n", "if", "merged", ":", "\n", "# Note: mergeInteractionGraph must be called before", "\n", "            ", "if", "self", ".", "mergedEntityToDuplicates", "==", "None", ":", "\n", "                ", "self", ".", "mergeInteractionGraph", "(", "True", ")", "\n", "", "if", "self", ".", "mergedEntityGraph", "==", "None", ":", "\n", "                ", "self", ".", "mergedEntityGraph", "=", "self", ".", "makeEntityGraph", "(", "self", ".", "mergedEntities", ",", "self", ".", "interactions", ",", "self", ".", "mergedEntityToDuplicates", ")", "\n", "", "return", "self", ".", "mergedEntityGraph", ".", "getEdges", "(", "entity1", ",", "entity2", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "entityGraph", "==", "None", ":", "\n", "                ", "self", ".", "entityGraph", "=", "self", ".", "makeEntityGraph", "(", "self", ".", "entities", ",", "self", ".", "interactions", ")", "\n", "", "return", "self", ".", "entityGraph", ".", "getEdges", "(", "entity1", ",", "entity2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getOutInteractions": [[244, 257], ["SentenceGraph.SentenceGraph.mergedEntityGraph.getOutEdges", "SentenceGraph.SentenceGraph.entityGraph.getOutEdges", "SentenceGraph.SentenceGraph.mergeInteractionGraph", "SentenceGraph.SentenceGraph.makeEntityGraph", "SentenceGraph.SentenceGraph.makeEntityGraph"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.mergeInteractionGraph", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.makeEntityGraph", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.makeEntityGraph"], ["", "", "def", "getOutInteractions", "(", "self", ",", "entity", ",", "merged", "=", "False", ")", ":", "\n", "        ", "if", "merged", ":", "\n", "# Note: mergeInteractionGraph must be called before", "\n", "#assert self.mergedEntityToDuplicates != None", "\n", "            ", "if", "self", ".", "mergedEntityToDuplicates", "==", "None", ":", "\n", "                ", "self", ".", "mergeInteractionGraph", "(", "True", ")", "\n", "", "if", "self", ".", "mergedEntityGraph", "==", "None", ":", "\n", "                ", "self", ".", "mergedEntityGraph", "=", "self", ".", "makeEntityGraph", "(", "self", ".", "mergedEntities", ",", "self", ".", "interactions", ",", "self", ".", "mergedEntityToDuplicates", ")", "\n", "", "return", "self", ".", "mergedEntityGraph", ".", "getOutEdges", "(", "entity", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "entityGraph", "==", "None", ":", "\n", "                ", "self", ".", "entityGraph", "=", "self", ".", "makeEntityGraph", "(", "self", ".", "entities", ",", "self", ".", "interactions", ")", "\n", "", "return", "self", ".", "entityGraph", ".", "getOutEdges", "(", "entity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.mapInteractions": [[264, 347], ["SimpleGraph.Graph", "SentenceGraph.SentenceGraph.interactionGraph.addNodes", "SentenceGraph.SentenceGraph._markNamedEntities", "len", "SentenceGraph.SentenceGraph.mapEntity", "SentenceGraph.SentenceGraph.interactionGraph.getEdges", "entity.get", "SentenceGraph.SentenceGraph.entities.remove", "SentenceGraph.SentenceGraph.sentenceElement.get", "SentenceGraph.SentenceGraph.entities.remove", "SentenceGraph.SentenceGraph.entitiesById.has_key", "SentenceGraph.SentenceGraph.entitiesById.has_key", "SentenceGraph.SentenceGraph.interactionGraph.addEdge", "SentenceGraph.SentenceGraph.entities.remove", "interaction.get", "interaction.get", "edge[].get", "interaction.get", "Utils.overlap", "Exception", "entity.get", "Utils.charOffsetToSingleTuple", "interaction.get", "interaction.get", "entity.get", "str", "SentenceGraph.SentenceGraph.sentenceElement.get", "entity.get", "entity.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph._markNamedEntities", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.mapEntity", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "mapInteractions", "(", "self", ",", "entityElements", ",", "interactionElements", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Maps the semantic interactions to the syntactic graph.\n        \n        Syntactic dependencies are defined between tokens. Semantic edges (interactions)\n        are defined between annotated entities. To utilize the correlation of the dependency\n        parse with the semantic interactions, the graphs must be aligned by mapping the\n        interaction graph's nodes (entities) to the syntactic graph's nodes (tokens). This\n        is done by determining the head tokens of the entities.\n        \n        @param entityElements: the semantic nodes (triggers and named entities)\n        @type entityElements: list of cElementTree.Element objects\n        @param interactionElements: the semantic edges (e.g. Cause and Theme for GENIA)\n        @type interactionElements: list of cElementTree.Element objects\n        @param verbose: Print selected head tokens on screen\n        @param verbose: boolean\n        \"\"\"", "\n", "self", ".", "interactions", "=", "interactionElements", "\n", "self", ".", "entities", "=", "entityElements", "\n", "# Entities that have no text binding can not be mapped and are therefore removed", "\n", "for", "entity", "in", "self", ".", "entities", "[", ":", "]", ":", "\n", "            ", "if", "entity", ".", "get", "(", "\"charOffset\"", ")", "==", "\"\"", ":", "\n", "                ", "self", ".", "entities", ".", "remove", "(", "entity", ")", "\n", "#self.interactionGraph = NX.XDiGraph(multiedges = multiedges)", "\n", "#if multiedges:", "\n", "#    self.interactionGraph = NX10.MultiDiGraph()", "\n", "#else:", "\n", "#    self.interactionGraph = NX10.DiGraph()", "\n", "", "", "self", ".", "interactionGraph", "=", "Graph", "(", ")", "\n", "self", ".", "interactionGraph", ".", "addNodes", "(", "self", ".", "tokens", ")", "\n", "#for token in self.tokens:", "\n", "#    self.interactionGraph.add_node(token)", "\n", "\n", "self", ".", "entitiesByToken", "=", "{", "}", "# a mapping for fast access", "\n", "self", ".", "entitiesById", "=", "{", "}", "\n", "self", ".", "entityHeadTokenByEntity", "=", "{", "}", "\n", "sentenceSpan", "=", "(", "0", ",", "len", "(", "self", ".", "sentenceElement", ".", "get", "(", "\"text\"", ")", ")", ")", "# for validating the entity offsets", "\n", "for", "entity", "in", "self", ".", "entities", "[", ":", "]", ":", "\n", "            ", "headToken", "=", "self", ".", "mapEntity", "(", "entity", ",", "verbose", ")", "\n", "if", "entity", ".", "tag", "!=", "\"entity\"", ":", "\n", "                ", "self", ".", "entities", ".", "remove", "(", "entity", ")", "\n", "", "elif", "headToken", "!=", "None", ":", "\n", "                ", "self", ".", "entityHeadTokenByEntity", "[", "entity", "]", "=", "headToken", "\n", "self", ".", "entitiesById", "[", "entity", ".", "get", "(", "\"id\"", ")", "]", "=", "entity", "\n", "", "else", ":", "\n", "# Check that the entity is within the sentence", "\n", "                ", "if", "not", "Range", ".", "overlap", "(", "Range", ".", "charOffsetToSingleTuple", "(", "entity", ".", "get", "(", "\"charOffset\"", ")", ")", ",", "sentenceSpan", ")", ":", "\n", "                    ", "raise", "Exception", "(", "\"Entity \"", "+", "entity", ".", "get", "(", "\"id\"", ")", "+", "\", charOffset \"", "+", "entity", ".", "get", "(", "\"charOffset\"", ")", "+", "\", does not overlap with sentence \"", "+", "self", ".", "sentenceElement", ".", "get", "(", "\"id\"", ")", "+", "\", length \"", "+", "str", "(", "sentenceSpan", "[", "1", "]", ")", ")", "\n", "# Assume there simply is no token corresponding to the entity", "\n", "", "self", ".", "entities", ".", "remove", "(", "entity", ")", "\n", "", "", "self", ".", "_markNamedEntities", "(", ")", "\n", "\n", "for", "interaction", "in", "self", ".", "interactions", ":", "\n", "            ", "if", "not", "self", ".", "entitiesById", ".", "has_key", "(", "interaction", ".", "get", "(", "\"e1\"", ")", ")", ":", "\n", "                ", "continue", "# e1 is outside of this sentence", "\n", "", "if", "not", "self", ".", "entitiesById", ".", "has_key", "(", "interaction", ".", "get", "(", "\"e2\"", ")", ")", ":", "\n", "                ", "continue", "# e2 is outside of this sentence", "\n", "", "token1", "=", "self", ".", "entityHeadTokenByEntity", "[", "self", ".", "entitiesById", "[", "interaction", ".", "get", "(", "\"e1\"", ")", "]", "]", "\n", "token2", "=", "self", ".", "entityHeadTokenByEntity", "[", "self", ".", "entitiesById", "[", "interaction", ".", "get", "(", "\"e2\"", ")", "]", "]", "\n", "\n", "#            found = False", "\n", "#            if multiedges:", "\n", "#                edges = self.interactionGraph.get_edge_data(token1, token2, default={})", "\n", "#                for i in range(len(edges)):", "\n", "#                    edge = edges[i][\"element\"]", "\n", "#                    if edge.attrib[\"type\"] == interaction.attrib[\"type\"]:", "\n", "#                        found = True", "\n", "#                        break", "\n", "#            if not found:", "\n", "#                self.interactionGraph.add_edge(token1, token2, element=interaction)", "\n", "#            else:", "\n", "#                self.duplicateInteractionEdgesRemoved += 1", "\n", "found", "=", "False", "\n", "edges", "=", "self", ".", "interactionGraph", ".", "getEdges", "(", "token1", ",", "token2", ")", "\n", "for", "edge", "in", "edges", ":", "\n", "                ", "if", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "==", "interaction", ".", "get", "(", "\"type\"", ")", ":", "\n", "                    ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                ", "self", ".", "interactionGraph", ".", "addEdge", "(", "token1", ",", "token2", ",", "interaction", ")", "\n", "", "else", ":", "\n", "# TODO: \"skipped\" would be better than \"removed\"", "\n", "                ", "self", ".", "duplicateInteractionEdgesRemoved", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.mapEntity": [[348, 411], ["entityElement.get", "Utils.charOffsetToSingleTuple", "entityElement.get", "Utils.charOffsetToTuples", "Utils.charOffsetToSingleTuple", "len", "SentenceGraph.SentenceGraph.entitiesByToken[].append", "entityElement.get", "entityElement.get", "SentenceGraph.SentenceGraph.get", "Utils.overlap", "entityElement.get", "SentenceGraph.SentenceGraph.findHeadToken", "entityElement.set", "SentenceGraph.SentenceGraph.entitiesByToken.has_key", "entityElement.get", "entityElement.get", "headTokens.append", "Utils.overlap", "t.get().lower", "SentenceGraph.SentenceGraph.get", "SentenceGraph.SentenceGraph.get", "entityElement.get", "entityElement.get", "SentenceGraph.SentenceGraph.get", "SentenceGraph.SentenceGraph.get", "headTokens.append", "entityElement.set", "t.get", "t.get().lower.find", "t.get().lower.find", "selHead.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToTuples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.findHeadToken", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "def", "mapEntity", "(", "self", ",", "entityElement", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Determine the head token for a named entity or trigger. The head token is the token closest\n        to the root for the subtree of the dependency parse spanned by the text of the element.\n        \n        @param entityElement: a semantic node (trigger or named entity)\n        @type entityElement: cElementTree.Element\n        @param verbose: Print selected head tokens on screen\n        @param verbose: boolean\n        \"\"\"", "\n", "headOffset", "=", "None", "\n", "if", "entityElement", ".", "get", "(", "\"headOffset\"", ")", "!=", "None", ":", "\n", "            ", "headOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "entityElement", ".", "get", "(", "\"headOffset\"", ")", ")", "\n", "", "if", "entityElement", ".", "get", "(", "\"charOffset\"", ")", "!=", "\"\"", ":", "\n", "            ", "charOffsets", "=", "Range", ".", "charOffsetToTuples", "(", "entityElement", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "charOffsets", "=", "[", "]", "\n", "# Each entity can consist of multiple syntactic tokens, covered by its", "\n", "# charOffset-range. One of these must be chosen as the head token.", "\n", "", "headTokens", "=", "[", "]", "# potential head tokens", "\n", "for", "token", "in", "self", ".", "tokens", ":", "\n", "#print token.attrib[\"id\"], token.attrib[\"charOffset\"]", "\n", "            ", "tokenOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "token", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "if", "headOffset", "!=", "None", "and", "entityElement", ".", "get", "(", "\"type\"", ")", "!=", "\"Binding\"", ":", "\n", "# A head token can already be defined in the headOffset-attribute.", "\n", "# However, depending on the tokenization, even this range may", "\n", "# contain multiple tokens. Still, it can always be assumed that", "\n", "# if headOffset is defined, the corret head token is in this range.", "\n", "                ", "if", "Range", ".", "overlap", "(", "headOffset", ",", "tokenOffset", ")", ":", "\n", "                    ", "headTokens", ".", "append", "(", "token", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "offset", "in", "charOffsets", ":", "\n", "                    ", "if", "Range", ".", "overlap", "(", "offset", ",", "tokenOffset", ")", ":", "\n", "                        ", "headTokens", ".", "append", "(", "token", ")", "\n", "", "", "", "", "if", "len", "(", "headTokens", ")", "==", "1", ":", "# An unambiguous head token was found", "\n", "            ", "token", "=", "headTokens", "[", "0", "]", "\n", "", "else", ":", "# One head token must be chosen from the candidates", "\n", "            ", "selHead", "=", "None", "\n", "if", "entityElement", ".", "get", "(", "\"type\"", ")", "==", "\"Binding\"", ":", "\n", "                ", "for", "t", "in", "headTokens", ":", "\n", "                    ", "compText", "=", "t", ".", "get", "(", "\"text\"", ")", ".", "lower", "(", ")", "\n", "if", "compText", ".", "find", "(", "\"bind\"", ")", "!=", "-", "1", "or", "compText", ".", "find", "(", "\"complex\"", ")", "!=", "-", "1", ":", "\n", "                        ", "selHead", "=", "t", "\n", "#print \"Head:\", selHead.get(\"text\"), \"/\", entityElement.get(\"text\"), entityElement.get(\"headOffset\"), selHead.get(\"charOffset\")", "\n", "entityElement", ".", "set", "(", "\"headOffset\"", ",", "selHead", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "break", "\n", "", "", "", "if", "selHead", "==", "None", ":", "\n", "                ", "token", "=", "self", ".", "findHeadToken", "(", "headTokens", ")", "\n", "", "else", ":", "\n", "                ", "token", "=", "selHead", "\n", "", "if", "verbose", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Selected head:\"", ",", "token", ".", "get", "(", "\"id\"", ")", ",", "token", ".", "get", "(", "\"text\"", ")", "\n", "#assert token != None, entityElement.get(\"id\")", "\n", "", "", "if", "token", "!=", "None", ":", "\n", "# The ElementTree entity-element is modified by setting the headOffset attribute", "\n", "            ", "if", "entityElement", ".", "get", "(", "\"headOffset\"", ")", "==", "None", "or", "entityElement", ".", "get", "(", "\"headOffset\"", ")", "!=", "token", ".", "get", "(", "\"charOffset\"", ")", ":", "\n", "                ", "entityElement", ".", "set", "(", "\"headOffset\"", ",", "token", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "", "if", "not", "self", ".", "entitiesByToken", ".", "has_key", "(", "token", ")", ":", "\n", "                ", "self", ".", "entitiesByToken", "[", "token", "]", "=", "[", "]", "\n", "", "self", ".", "entitiesByToken", "[", "token", "]", ".", "append", "(", "entityElement", ")", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, no tokens for entity\"", ",", "entityElement", ".", "get", "(", "\"id\"", ")", "\n", "", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.findHeadToken": [[464, 494], ["SentenceGraph.SentenceGraph.getTokenHeadScores", "len", "bestTokens.append"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getTokenHeadScores"], ["", "def", "findHeadToken", "(", "self", ",", "candidateTokens", ")", ":", "\n", "        ", "\"\"\"\n        Select the candidate token that is closest to the root of the subtree of the depencdeny parse\n        to which the candidate tokens belong to. See getTokenHeadScores method for the algorithm.\n        \n        @param candidateTokens: the list of syntactic tokens from which the head token is selected\n        @type candidateTokens: list of cElementTree.Element objects\n        \"\"\"", "\n", "tokenHeadScores", "=", "self", ".", "getTokenHeadScores", "(", ")", "\n", "\n", "#if debug:", "\n", "#    print \"Tokens:\", candidateTokenIds", "\n", "#    print \"Scores:\", tokenScores", "\n", "\n", "if", "len", "(", "candidateTokens", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "highestScore", "=", "-", "9999999", "\n", "bestTokens", "=", "[", "]", "\n", "for", "token", "in", "candidateTokens", ":", "\n", "            ", "if", "tokenHeadScores", "[", "token", "]", ">", "highestScore", ":", "\n", "                ", "highestScore", "=", "tokenHeadScores", "[", "token", "]", "\n", "", "", "for", "token", "in", "candidateTokens", ":", "\n", "            ", "if", "tokenHeadScores", "[", "token", "]", "==", "highestScore", ":", "\n", "                ", "bestTokens", ".", "append", "(", "token", ")", "\n", "#        if debug:", "\n", "#            print \"tokens:\"", "\n", "#            for i in range(len(candidateTokenIds)):", "\n", "#                print \"[\", candidateTokenIds[i], self.tokensById[candidateTokenIds[i]].text, tokenHeadScores[candidateTokenIds[i]], \"]\"", "\n", "", "", "return", "bestTokens", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getTokenHeadScores": [[495, 562], ["token.get", "token.get", "token.set", "str", "SentenceGraph.SentenceGraph.getSentenceId", "dep.get", "dependency.get", "token.get", "dependency.get", "token.get", "dep.get", "dep.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getSentenceId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getTokenHeadScores", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A head token is chosen using a heuristic that prefers tokens closer to the\n        root of the dependency parse. In a list of candidate tokens, the one with\n        the highest score is the head token. The return value of this method\n        is a dictionary that maps token elements to their scores.\n        \"\"\"", "\n", "# Token head scores are cached the first time this function is called", "\n", "if", "self", ".", "tokenHeadScores", "!=", "None", ":", "\n", "            ", "return", "self", ".", "tokenHeadScores", "\n", "", "else", ":", "\n", "            ", "self", ".", "tokenHeadScores", "=", "{", "}", "\n", "\n", "# Give all tokens initial scores", "\n", "", "tokenById", "=", "{", "}", "\n", "for", "token", "in", "self", ".", "tokens", ":", "\n", "            ", "tokenId", "=", "token", ".", "get", "(", "\"id\"", ")", "\n", "assert", "tokenId", "not", "in", "tokenById", "\n", "tokenById", "[", "tokenId", "]", "=", "token", "\n", "self", ".", "tokenHeadScores", "[", "token", "]", "=", "0", "# initialize score as zero (unconnected token)", "\n", "for", "dependency", "in", "self", ".", "dependencies", ":", "\n", "                ", "if", "dependency", ".", "get", "(", "\"t1\"", ")", "==", "token", ".", "get", "(", "\"id\"", ")", "or", "dependency", ".", "get", "(", "\"t2\"", ")", "==", "token", ".", "get", "(", "\"id\"", ")", ":", "\n", "                    ", "self", ".", "tokenHeadScores", "[", "token", "]", "=", "1", "# token is connected by a dependency", "\n", "break", "\n", "\n", "# Give a low score for tokens that clearly can't be head and are probably produced by hyphen-splitter", "\n", "", "", "", "for", "token", "in", "self", ".", "tokens", ":", "\n", "            ", "tokenText", "=", "token", ".", "get", "(", "\"text\"", ")", "\n", "if", "tokenText", "==", "\"\\\\\"", "or", "tokenText", "==", "\"/\"", "or", "tokenText", "==", "\"-\"", ":", "\n", "                ", "self", ".", "tokenHeadScores", "[", "token", "]", "=", "-", "1", "\n", "\n", "# Loop over all dependencies and increase the scores of all governor tokens", "\n", "# until each governor token has a higher score than its dependent token.", "\n", "# Some dependencies might form a loop so a list is used to define those", "\n", "# dependency types used in determining head scores.", "\n", "", "", "depTypesToInclude", "=", "[", "\"prep\"", ",", "\"nn\"", ",", "\"det\"", ",", "\"hyphen\"", ",", "\"num\"", ",", "\"amod\"", ",", "\"nmod\"", ",", "\"appos\"", ",", "\"measure\"", ",", "\"dep\"", ",", "\"partmod\"", "]", "\n", "#depTypesToRemoveReverse = [\"A/AN\"]", "\n", "modifiedScores", "=", "True", "\n", "loopCount", "=", "0", "# loopcount for devel set approx. 2-4", "\n", "while", "modifiedScores", "==", "True", ":", "# loop until the scores no longer change", "\n", "            ", "if", "loopCount", ">", "20", ":", "# survive loops", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, possible loop in parse for sentence\"", ",", "self", ".", "getSentenceId", "(", ")", "\n", "break", "\n", "", "modifiedScores", "=", "False", "\n", "#            for token1 in self.tokens:", "\n", "#                for token2 in self.tokens: # for each combination of tokens...", "\n", "for", "dep", "in", "self", ".", "dependencies", ":", "# ... check each dependency", "\n", "                ", "token1", "=", "tokenById", "[", "dep", ".", "get", "(", "\"t1\"", ")", "]", "\n", "token2", "=", "tokenById", "[", "dep", ".", "get", "(", "\"t2\"", ")", "]", "\n", "if", "dep", ".", "get", "(", "\"type\"", ")", "in", "depTypesToInclude", ":", "\n", "# The governor token of the dependency must have a higher score", "\n", "# than the dependent token.", "\n", "                    ", "if", "self", ".", "tokenHeadScores", "[", "token1", "]", "<=", "self", ".", "tokenHeadScores", "[", "token2", "]", ":", "\n", "                        ", "self", ".", "tokenHeadScores", "[", "token1", "]", "=", "self", ".", "tokenHeadScores", "[", "token2", "]", "+", "1", "\n", "modifiedScores", "=", "True", "\n", "#                        elif dep.attrib[\"t1\"] == tokenI.attrib[\"id\"] and dep.attrib[\"t2\"] == tokenJ.attrib[\"id\"] and (dep.attrib[\"type\"] in depTypesToRemoveReverse):", "\n", "#                            #tokenScores[i] -= 1", "\n", "#                            if self.tokenHeadScores[tokenJ] <= self.tokenHeadScores[tokenI]:", "\n", "#                                self.tokenHeadScores[tokenJ] = self.tokenHeadScores[tokenI] + 1", "\n", "#                                modifiedScores = True", "\n", "", "", "", "loopCount", "+=", "1", "\n", "\n", "# Add scores to tokens", "\n", "", "for", "token", "in", "self", ".", "tokens", ":", "\n", "            ", "token", ".", "set", "(", "\"headScore\"", ",", "str", "(", "self", ".", "tokenHeadScores", "[", "token", "]", ")", ")", "\n", "\n", "", "return", "self", ".", "tokenHeadScores", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph._markNamedEntities": [[563, 596], ["Utils.charOffsetToTuples", "Utils.charOffsetToSingleTuple", "entity.get", "entity.get", "Utils.charOffsetToSingleTuple", "Utils.overlap", "token.get", "Utils.overlap", "SentenceGraph.SentenceGraph.tokenIsEntityHead[].append", "entity.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToTuples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "_markNamedEntities", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This method is used to define which tokens belong to _named_ entities.\n        Named entities are sometimes masked when testing learning of interactions, to\n        prevent the system making a trivial decision based on commonly interacting names.\n        This function assumes that all given entities are named entities.\n        \"\"\"", "\n", "self", ".", "tokenIsName", "=", "{", "}", "\n", "self", ".", "tokenIsEntity", "=", "{", "}", "\n", "self", ".", "tokenIsEntityHead", "=", "{", "}", "\n", "# Initialize the dictionaries", "\n", "for", "token", "in", "self", ".", "tokens", ":", "\n", "            ", "self", ".", "tokenIsName", "[", "token", "]", "=", "False", "\n", "self", ".", "tokenIsEntity", "[", "token", "]", "=", "False", "\n", "self", ".", "tokenIsEntityHead", "[", "token", "]", "=", "[", "]", "\n", "", "for", "entity", "in", "self", ".", "entities", ":", "\n", "            ", "entityOffsets", "=", "Range", ".", "charOffsetToTuples", "(", "entity", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "entityHeadOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "entity", ".", "get", "(", "\"headOffset\"", ")", ")", "\n", "for", "token", "in", "self", ".", "tokens", ":", "\n", "                ", "tokenOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "token", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "for", "entityOffset", "in", "entityOffsets", ":", "\n", "                    ", "if", "Range", ".", "overlap", "(", "entityOffset", ",", "tokenOffset", ")", ":", "\n", "                        ", "self", ".", "tokenIsEntity", "[", "token", "]", "=", "True", "\n", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "                            ", "self", ".", "tokenIsName", "[", "token", "]", "=", "True", "\n", "#                        if entity.get(\"given\") != None:", "\n", "#                            if entity.get(\"given\") == \"True\":", "\n", "#                                self.tokenIsName[token] = True", "\n", "#                        else:", "\n", "#                            entity.set(\"given\", \"True\")", "\n", "#                            self.tokenIsName[token] = True", "\n", "", "", "", "if", "Range", ".", "overlap", "(", "entityHeadOffset", ",", "tokenOffset", ")", ":", "\n", "                    ", "self", ".", "tokenIsEntityHead", "[", "token", "]", ".", "append", "(", "entity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getTokenText": [[597, 609], ["token.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "", "def", "getTokenText", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\"\n        Returns the text of a token, and masks it if the token is the head token\n        of a named entity.\n        \n        @param token: interaction-XML syntactic token.\n        @type token: cElementTree.Element\n        \"\"\"", "\n", "if", "self", ".", "tokenIsName", "[", "token", "]", ":", "\n", "            ", "return", "\"NAMED_ENT\"", "\n", "", "else", ":", "\n", "            ", "return", "token", ".", "get", "(", "\"text\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getCleared": [[610, 618], ["SentenceGraph.SentenceGraph", "SentenceGraph.mapInteractions", "entity.get", "namedEntities.append"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapInteractions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "getCleared", "(", "self", ")", ":", "\n", "        ", "c", "=", "SentenceGraph", "(", "self", ".", "sentenceElement", ",", "self", ".", "tokens", ",", "self", ".", "dependencies", ")", "\n", "namedEntities", "=", "[", "]", "\n", "for", "entity", "in", "self", ".", "entities", ":", "\n", "            ", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "                ", "namedEntities", ".", "append", "(", "entity", ")", "\n", "", "", "c", ".", "mapInteractions", "(", "namedEntities", ",", "[", "]", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.mergeInteractionGraph": [[619, 658], ["range", "len", "len", "SentenceGraph.SentenceGraph.mergedEntities.append", "range", "entity.get", "SentenceGraph.SentenceGraph.mergedEntities.append", "SentenceGraph.SentenceGraph.entities[].get", "len", "SentenceGraph.SentenceGraph.mergedEntityToDuplicates[].append", "SentenceGraph.SentenceGraph.entities[].get", "SentenceGraph.SentenceGraph.entities[].get", "SentenceGraph.SentenceGraph.entities[].get", "SentenceGraph.SentenceGraph.entities[].get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "mergeInteractionGraph", "(", "self", ",", "merge", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        For merging duplicate entities\n        \n        keepDuplicates - allows calling the function with no effect, so that the same code\n                         can be used for merged and unmerged cases\n        \"\"\"", "\n", "self", ".", "mergedEntities", "=", "[", "]", "\n", "self", ".", "mergedEntityToDuplicates", "=", "{", "}", "\n", "#duplicates = {}", "\n", "#mergedIds = {}", "\n", "if", "not", "merge", ":", "# no entities are filtered", "\n", "# Create dummy structures", "\n", "            ", "for", "entity", "in", "self", ".", "entities", ":", "\n", "                ", "mergedIds", "[", "entity", "]", "=", "entity", ".", "get", "(", "\"id\"", ")", "\n", "self", ".", "mergedEntities", ".", "append", "(", "entity", ")", "\n", "self", ".", "mergedEntityToDuplicates", "[", "entity", "]", "=", "[", "]", "\n", "", "return", "\n", "# Mark all duplicates after the first one in the list for removal", "\n", "", "removeEntities", "=", "[", "False", "]", "*", "len", "(", "self", ".", "entities", ")", "\n", "entitiesToKeep", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "entities", ")", ")", ":", "# loop through all entities, including the last one", "\n", "            ", "if", "removeEntities", "[", "i", "]", ":", "# entity has been already removed", "\n", "                ", "continue", "\n", "", "self", ".", "mergedEntities", ".", "append", "(", "self", ".", "entities", "[", "i", "]", ")", "\n", "#mergedIds[entities[i]] = entities[i].get(\"id\")", "\n", "self", ".", "mergedEntityToDuplicates", "[", "self", ".", "entities", "[", "i", "]", "]", "=", "[", "]", "\n", "if", "self", ".", "entities", "[", "i", "]", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "# named entities are never merged", "\n", "                ", "continue", "\n", "", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "self", ".", "entities", ")", ")", ":", "# loop through all entities coming after entity \"i\"", "\n", "# Entities are duplicates if they have the same type and head token", "\n", "# Also, they are not duplicates if the charOffset differs. This shoulnd't matter,", "\n", "# as the head tokens are the same, but in practice, on the GE, task improves performance,", "\n", "# maybe due to multiple similar examples affecting SVM learning.", "\n", "                ", "if", "self", ".", "entities", "[", "i", "]", ".", "get", "(", "\"type\"", ")", "==", "self", ".", "entities", "[", "j", "]", ".", "get", "(", "\"type\"", ")", "and", "self", ".", "entities", "[", "i", "]", ".", "get", "(", "\"charOffset\"", ")", "==", "self", ".", "entities", "[", "j", "]", ".", "get", "(", "\"charOffset\"", ")", ":", "# and self.entityHeadTokenByEntity[self.entities[i]] == self.entityHeadTokenByEntity[self.entities[j]]:", "\n", "                    ", "removeEntities", "[", "j", "]", "=", "True", "\n", "#mergedIds[entities[i]] += \"/\" + entities[j].get(\"id\")", "\n", "self", ".", "mergedEntityToDuplicates", "[", "self", ".", "entities", "[", "i", "]", "]", ".", "append", "(", "self", ".", "entities", "[", "j", "]", ")", "\n", "#return entitiesToKeep, mergedIds, duplicates     ", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.loadCorpus": [[16, 72], ["ETUtils.ETFromObj", "ETUtils.ETFromObj.getroot", "CorpusElements", "ProgressCounter", "type", "len", "ProgressCounter.update", "SentenceGraph.SentenceGraph", "SentenceGraph.mapInteractions", "pair.get", "str", "len", "len", "sentence.interactions.append", "str", "len", "sentence.sentence.get", "pair.get", "pair.set", "len", "sentence.sentence.iter"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapInteractions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "loadCorpus", "(", "corpus", ",", "parse", ",", "tokenization", "=", "None", ",", "removeNameInfo", "=", "False", ",", "removeIntersentenceInteractionsFromCorpusElements", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Load an entire corpus through CorpusElements and add SentenceGraph-objects\n    to its SentenceElements-objects.\n    \"\"\"", "\n", "import", "Utils", ".", "ElementTreeUtils", "as", "ETUtils", "\n", "import", "sys", "\n", "from", "Utils", ".", "ProgressCounter", "import", "ProgressCounter", "\n", "from", "Utils", ".", "InteractionXML", ".", "CorpusElements", "import", "CorpusElements", "\n", "\n", "# Corpus may be in file or not", "\n", "if", "type", "(", "corpus", ")", "==", "types", ".", "StringType", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus file\"", ",", "corpus", "\n", "", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "corpus", ")", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "# Use CorpusElements-class to access xml-tree", "\n", "corpusElements", "=", "CorpusElements", "(", "corpusRoot", ",", "parse", ",", "tokenization", ",", "tree", "=", "corpusTree", ",", "removeNameInfo", "=", "removeNameInfo", ",", "removeIntersentenceInteractions", "=", "removeIntersentenceInteractionsFromCorpusElements", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "str", "(", "len", "(", "corpusElements", ".", "documentsById", ")", ")", "+", "\" documents, \"", "+", "str", "(", "len", "(", "corpusElements", ".", "sentencesById", ")", ")", "+", "\" sentences\"", "\n", "# Make sentence graphs", "\n", "duplicateInteractionEdgesRemoved", "=", "0", "\n", "sentences", "=", "[", "]", "\n", "counter", "=", "ProgressCounter", "(", "len", "(", "corpusElements", ".", "sentences", ")", ",", "\"Make sentence graphs\"", ")", "\n", "counter", ".", "showMilliseconds", "=", "True", "\n", "for", "sentence", "in", "corpusElements", ".", "sentences", "[", ":", "]", ":", "\n", "        ", "counter", ".", "update", "(", "1", ",", "\"Making sentence graphs (\"", "+", "sentence", ".", "sentence", ".", "get", "(", "\"id\"", ")", "+", "\"): \"", ")", "\n", "# No tokens, no sentence. No also no dependencies = no sentence.", "\n", "# Let's not remove them though, so that we don't lose sentences from input.", "\n", "if", "len", "(", "sentence", ".", "tokens", ")", "==", "0", "or", "len", "(", "sentence", ".", "dependencies", ")", "==", "0", ":", "\n", "#corpusElements.sentences.remove(sentence)", "\n", "            ", "sentence", ".", "sentenceGraph", "=", "None", "\n", "continue", "\n", "", "for", "pair", "in", "sentence", ".", "pairs", ":", "\n", "# gif-xml defines two closely related element types, interactions and", "\n", "# pairs. Pairs are like interactions, but they can also be negative (if", "\n", "# interaction-attribute == False). Sometimes pair-elements have been", "\n", "# (incorrectly) used without this attribute. To work around these issues", "\n", "# we take all pair-elements that define interaction and add them to", "\n", "# the interaction-element list.", "\n", "            ", "isInteraction", "=", "pair", ".", "get", "(", "\"interaction\"", ")", "\n", "if", "isInteraction", "==", "\"True\"", "or", "isInteraction", "==", "None", ":", "\n", "                ", "sentence", ".", "interactions", ".", "append", "(", "pair", ")", "# add to interaction-elements", "\n", "if", "pair", ".", "get", "(", "\"type\"", ")", "==", "None", ":", "# type-attribute must be explicitly defined", "\n", "                    ", "pair", ".", "set", "(", "\"type\"", ",", "\"undefined\"", ")", "\n", "# Construct the basic SentenceGraph (only syntactic information)", "\n", "", "", "", "graph", "=", "SentenceGraph", "(", "sentence", ".", "sentence", ",", "sentence", ".", "tokens", ",", "sentence", ".", "dependencies", ")", "\n", "# Add semantic information, i.e. the interactions", "\n", "graph", ".", "mapInteractions", "(", "sentence", ".", "entities", "+", "[", "x", "for", "x", "in", "sentence", ".", "sentence", ".", "iter", "(", "\"span\"", ")", "]", ",", "sentence", ".", "interactions", ")", "\n", "graph", ".", "interSentenceInteractions", "=", "sentence", ".", "interSentenceInteractions", "\n", "duplicateInteractionEdgesRemoved", "+=", "graph", ".", "duplicateInteractionEdgesRemoved", "\n", "sentence", ".", "sentenceGraph", "=", "graph", "\n", "\n", "graph", ".", "parseElement", "=", "sentence", ".", "parseElement", "\n", "\n", "#graph.mapEntityHints()", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Skipped\"", ",", "duplicateInteractionEdgesRemoved", ",", "\"duplicate interaction edges in SentenceGraphs\"", "\n", "return", "corpusElements", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.getCorpusIterator": [[73, 111], ["ETUtils.ETIteratorFromObj", "ETUtils.ETWriter", "ETUtils.ETWriter.close", "element.findall", "element.clear", "SentenceElements", "sentences.append", "ETUtils.ETWriter.write", "SentenceGraph.SentenceGraph", "SentenceGraph.mapInteractions", "ETUtils.ETWriter.begin", "ETUtils.ETWriter.end", "len", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETIteratorFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapInteractions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.begin", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.end"], ["", "def", "getCorpusIterator", "(", "input", ",", "output", ",", "parse", ",", "tokenization", "=", "None", ",", "removeNameInfo", "=", "False", ",", "removeIntersentenceInteractions", "=", "True", ")", ":", "\n", "    ", "import", "Utils", ".", "ElementTreeUtils", "as", "ETUtils", "\n", "from", "Utils", ".", "InteractionXML", ".", "SentenceElements", "import", "SentenceElements", "\n", "#import xml.etree.cElementTree as ElementTree", "\n", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "etWriter", "=", "ETUtils", ".", "ETWriter", "(", "output", ")", "\n", "", "for", "eTuple", "in", "ETUtils", ".", "ETIteratorFromObj", "(", "input", ",", "(", "\"start\"", ",", "\"end\"", ")", ")", ":", "\n", "        ", "element", "=", "eTuple", "[", "1", "]", "\n", "if", "eTuple", "[", "0", "]", "in", "[", "\"end\"", ",", "\"memory\"", "]", "and", "element", ".", "tag", "==", "\"document\"", ":", "\n", "            ", "sentences", "=", "[", "]", "\n", "for", "sentenceElement", "in", "element", ".", "findall", "(", "\"sentence\"", ")", ":", "\n", "#print ElementTree.tostring(sentenceElement)", "\n", "                ", "sentence", "=", "SentenceElements", "(", "sentenceElement", ",", "parse", ",", "tokenization", ",", "removeIntersentenceInteractions", "=", "removeIntersentenceInteractions", ")", "\n", "if", "len", "(", "sentence", ".", "tokens", ")", "==", "0", "or", "len", "(", "sentence", ".", "dependencies", ")", "==", "0", ":", "\n", "                    ", "sentence", ".", "sentenceGraph", "=", "None", "\n", "", "else", ":", "\n", "# Construct the basic SentenceGraph (only syntactic information)", "\n", "                    ", "graph", "=", "SentenceGraph", "(", "sentence", ".", "sentence", ",", "sentence", ".", "tokens", ",", "sentence", ".", "dependencies", ")", "\n", "# Add semantic information, i.e. the interactions", "\n", "graph", ".", "mapInteractions", "(", "sentence", ".", "entities", ",", "sentence", ".", "interactions", ")", "\n", "graph", ".", "interSentenceInteractions", "=", "sentence", ".", "interSentenceInteractions", "\n", "#duplicateInteractionEdgesRemoved += graph.duplicateInteractionEdgesRemoved", "\n", "sentence", ".", "sentenceGraph", "=", "graph", "\n", "graph", ".", "parseElement", "=", "sentence", ".", "parseElement", "\n", "", "sentences", ".", "append", "(", "sentence", ")", "\n", "", "yield", "sentences", "\n", "if", "output", "!=", "None", ":", "\n", "                ", "etWriter", ".", "write", "(", "element", ")", "\n", "", "", "elif", "element", ".", "tag", "==", "\"corpus\"", "and", "output", "!=", "None", ":", "\n", "            ", "if", "eTuple", "[", "0", "]", "==", "\"start\"", ":", "\n", "                ", "etWriter", ".", "begin", "(", "element", ")", "\n", "", "else", ":", "\n", "                ", "etWriter", ".", "end", "(", "element", ")", "\n", "", "", "if", "eTuple", "[", "0", "]", "==", "\"end\"", "and", "element", ".", "tag", "in", "[", "\"document\"", ",", "\"corpus\"", "]", ":", "\n", "            ", "element", ".", "clear", "(", ")", "\n", "", "", "if", "output", "!=", "None", ":", "\n", "        ", "etWriter", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.RecallAdjust.run": [[87, 116], ["Utils.ETFromObj", "ET.iselement", "isinstance", "Utils.ETFromObj.getroot", "ETUtils.ETFromObj.getroot.getiterator", "Utils.write", "RecallAdjust.getClassRanges", "RecallAdjust.adjustEntity", "ETUtils.ETFromObj.getroot.getiterator", "len", "len", "str", "getClassRanges.keys", "getClassRanges.keys"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.getClassRanges", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.adjustEntity"], ["    ", "@", "classmethod", "\n", "def", "run", "(", "cls", ",", "inFile", ",", "multiplier", "=", "1.0", ",", "outFile", "=", "None", ",", "targetLabel", "=", "\"neg\"", ",", "binary", "=", "False", ")", ":", "\n", "        ", "\"\"\"inFile can be a string with file name (.xml or .xml.gz) or an ElementTree or an Element or an open input stream\n        multiplier adjusts the level of boosting the non-negative predictions, it is a real number (0,inf)\n        multiplier 1.0 does nothing, <1.0 decreases negative class confidence, >1.0 increases negative class confidence\n        the root of the modified tree is returned and, if outFile is a string, written out to outFile as well\"\"\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"##### Recall adjust with multiplier \"", "+", "str", "(", "multiplier", ")", "[", ":", "5", "]", "+", "\" #####\"", "\n", "tree", "=", "ETUtils", ".", "ETFromObj", "(", "inFile", ")", "\n", "if", "not", "ET", ".", "iselement", "(", "tree", ")", ":", "\n", "            ", "assert", "isinstance", "(", "tree", ",", "ET", ".", "ElementTree", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "", "else", ":", "\n", "            ", "root", "=", "tree", "\n", "\n", "", "if", "multiplier", "!=", "-", "1", ":", "\n", "            ", "if", "binary", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Recall binary mode\"", "\n", "classRanges", "=", "getClassRanges", "(", "root", ".", "getiterator", "(", "\"entity\"", ")", ")", "\n", "assert", "len", "(", "classRanges", ".", "keys", "(", ")", ")", "in", "[", "0", ",", "2", "]", "\n", "if", "len", "(", "classRanges", ".", "keys", "(", ")", ")", "==", "0", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, recall adjustment skipped because no prediction weights found\"", "\n", "", "", "else", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Recall multiclass mode\"", "\n", "classRanges", "=", "None", "\n", "", "for", "entityNode", "in", "root", ".", "getiterator", "(", "\"entity\"", ")", ":", "\n", "                ", "adjustEntity", "(", "entityNode", ",", "targetLabel", ",", "multiplier", ",", "classRanges", ")", "\n", "", "", "if", "outFile", ":", "\n", "            ", "ETUtils", ".", "write", "(", "root", ",", "outFile", ")", "\n", "", "return", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.scaleVal": [[18, 25], ["abs", "abs"], "function", ["None"], ["def", "scaleVal", "(", "val", ",", "boost", "=", "1.0", ")", ":", "\n", "    ", "if", "val", ">=", "0", ":", "#non-negative case", "\n", "        ", "val", "*=", "boost", "\n", "", "else", ":", "#negative case (pretend as if it were positive, and translate back)", "\n", "        ", "diff", "=", "abs", "(", "val", ")", "*", "boost", "-", "abs", "(", "val", ")", "\n", "val", "+=", "diff", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.scaleRange": [[26, 34], ["None"], "function", ["None"], ["", "def", "scaleRange", "(", "val", ",", "boost", ",", "classRange", ")", ":", "\n", "    ", "if", "boost", "<", "1.0", "and", "val", ">", "0", ":", "\n", "        ", "if", "val", "<", "(", "1.0", "-", "boost", ")", "*", "classRange", "[", "1", "]", ":", "\n", "            ", "return", "-", "val", "-", "1", "\n", "#elif boost > 1.0 and val > 0:", "\n", "#    if val < (boost-1) * classRange[1]:", "\n", "#        return -val - 1", "\n", "", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.adjustEntity": [[35, 61], ["entityNode.get", "entityNode.get.split", "entityNode.set", "entityNode.set", "labelConfidence.split", "float", "labMod.append", "labMod.append", "RecallAdjust.scaleVal", "RecallAdjust.scaleRange", "float", "float", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.scaleVal", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.scaleRange"], ["", "def", "adjustEntity", "(", "entityNode", ",", "targetLabel", ",", "multiplier", ",", "classRange", "=", "None", ")", ":", "\n", "    ", "\"\"\"Adjust the confidence of targetLabel in entityNode by multiplier\"\"\"", "\n", "predictions", "=", "entityNode", ".", "get", "(", "\"predictions\"", ")", "\n", "if", "not", "predictions", ":", "#nothing to do", "\n", "        ", "return", "\n", "", "maxConfidence", "=", "None", "\n", "maxLabel", "=", "None", "\n", "labMod", "=", "[", "]", "#list with modified \"label:confidence\"", "\n", "for", "labelConfidence", "in", "predictions", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "label", ",", "confidence", "=", "labelConfidence", ".", "split", "(", "\":\"", ")", "\n", "confidence", "=", "float", "(", "confidence", ")", "\n", "if", "label", "!=", "targetLabel", ":", "#nothing to do", "\n", "            ", "labMod", ".", "append", "(", "labelConfidence", ")", "\n", "", "else", ":", "\n", "            ", "if", "classRange", "==", "None", ":", "#multiclass", "\n", "                ", "confidence", "=", "scaleVal", "(", "float", "(", "confidence", ")", ",", "multiplier", ")", "#modify...", "\n", "", "else", ":", "#binary", "\n", "                ", "confidence", "=", "scaleRange", "(", "float", "(", "confidence", ")", ",", "multiplier", ",", "classRange", "[", "label", "]", ")", "#modify...", "\n", "", "labMod", ".", "append", "(", "label", "+", "\":\"", "+", "str", "(", "confidence", ")", ")", "\n", "", "if", "maxConfidence", "==", "None", "or", "maxConfidence", "<", "confidence", ":", "\n", "            ", "maxConfidence", "=", "confidence", "\n", "maxLabel", "=", "label", "\n", "\n", "#Done", "\n", "", "", "entityNode", ".", "set", "(", "\"predictions\"", ",", "\",\"", ".", "join", "(", "labMod", ")", ")", "\n", "entityNode", ".", "set", "(", "\"type\"", ",", "maxLabel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.getClassRanges": [[62, 76], ["entity.get", "entity.get", "entity.get.split", "labelConfidence.split", "float", "classRanges.has_key", "min", "max"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getClassRanges", "(", "entities", ")", ":", "\n", "    ", "classRanges", "=", "{", "}", "\n", "for", "entity", "in", "entities", ":", "\n", "        ", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "            ", "continue", "\n", "", "predictions", "=", "entity", ".", "get", "(", "\"predictions\"", ")", "\n", "if", "predictions", ":", "\n", "            ", "for", "labelConfidence", "in", "predictions", ".", "split", "(", "\",\"", ")", ":", "\n", "                ", "label", ",", "confidence", "=", "labelConfidence", ".", "split", "(", "\":\"", ")", "\n", "confidence", "=", "float", "(", "confidence", ")", "\n", "if", "not", "classRanges", ".", "has_key", "(", "label", ")", ":", "\n", "                    ", "classRanges", "[", "label", "]", "=", "[", "sys", ".", "maxint", ",", "-", "sys", ".", "maxint", "]", "\n", "", "classRanges", "[", "label", "]", "=", "[", "min", "(", "classRanges", "[", "label", "]", "[", "0", "]", ",", "confidence", ")", ",", "max", "(", "classRanges", "[", "label", "]", "[", "1", "]", ",", "confidence", ")", "]", "\n", "", "", "", "return", "classRanges", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.RecallAdjust.getClassRangesFromPredictions": [[77, 84], ["min", "max", "float", "float"], "function", ["None"], ["", "def", "getClassRangesFromPredictions", "(", "predictions", ")", ":", "\n", "    ", "classRanges", "=", "{", "1", ":", "[", "sys", ".", "maxint", ",", "-", "sys", ".", "maxint", "]", ",", "2", ":", "[", "sys", ".", "maxint", ",", "-", "sys", ".", "maxint", "]", "}", "\n", "for", "prediction", "in", "predictions", ":", "\n", "        ", "for", "cls", "in", "[", "1", ",", "2", "]", ":", "\n", "            ", "classRanges", "[", "cls", "]", "[", "0", "]", "=", "min", "(", "float", "(", "prediction", "[", "cls", "]", ")", ",", "classRanges", "[", "cls", "]", "[", "0", "]", ")", "\n", "classRanges", "[", "cls", "]", "[", "1", "]", "=", "max", "(", "float", "(", "prediction", "[", "cls", "]", ")", ",", "classRanges", "[", "cls", "]", "[", "1", "]", ")", "\n", "", "", "return", "classRanges", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.__init__": [[23, 40], ["Model.Model.open"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["def", "__init__", "(", "self", ",", "path", ",", "mode", "=", "\"r\"", ",", "verbose", "=", "True", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", ":", "\n", "        ", "\"\"\"\n        Make a new model or open an existing one\n        \n        @param path: The model file or directory. If making a new model, a path ending in \".zip\" results in a compressed archive.\n        @param mode: r, w or a for read, write or append\n        @param verbose: Model reports what is happening\n        @param compression: The compression method if a the model is a zip-archive.\n        \"\"\"", "\n", "self", ".", "members", "=", "{", "}", "# path_inside_model:path_to_cache_file (path_to_cache_file == None for members not yet requested)", "\n", "self", ".", "valueFileName", "=", "\"TEES_MODEL_VALUES.tsv\"", "\n", "self", ".", "compression", "=", "compression", "\n", "self", ".", "workdir", "=", "None", "\n", "self", ".", "mode", "=", "None", "\n", "self", ".", "path", "=", "None", "\n", "self", ".", "open", "(", "path", ",", "mode", ")", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.__del__": [[41, 43], ["Model.Model.close"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.close": [[44, 50], ["shutil.rmtree"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "workdir", "!=", "None", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "self", ".", "workdir", ")", "\n", "", "self", ".", "workdir", "=", "None", "\n", "self", ".", "path", "=", "None", "\n", "self", ".", "members", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add": [[51, 53], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "members", "[", "name", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.insert": [[54, 63], ["shutil.copy2", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "insert", "(", "self", ",", "filepath", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        Adds a new file to the model.\n        \n        @param filepath: Path to the file being added\n        @param name: Path of the file inside the model  \n        \"\"\"", "\n", "shutil", ".", "copy2", "(", "filepath", ",", "os", ".", "path", ".", "join", "(", "self", ".", "workdir", ",", "name", ")", ")", "\n", "self", ".", "members", "[", "name", "]", "=", "os", ".", "path", ".", "join", "(", "self", ".", "workdir", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.importFrom": [[64, 80], ["model.hasMember", "Model.Model.insert", "model.getStr", "model.get", "IOError", "Model.Model.addStr", "IOError"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.hasMember", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.insert", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.addStr"], ["", "def", "importFrom", "(", "self", ",", "model", ",", "members", ",", "strings", "=", "None", ",", "allowMissing", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Copy several members from another model\n        \"\"\"", "\n", "for", "member", "in", "members", ":", "\n", "            ", "if", "model", ".", "hasMember", "(", "member", ")", ":", "\n", "                ", "self", ".", "insert", "(", "model", ".", "get", "(", "member", ")", ",", "member", ")", "\n", "", "elif", "not", "allowMissing", ":", "\n", "                ", "raise", "IOError", "(", "\"Model to import from has no member \\\"\"", "+", "name", "+", "\"\\\"\"", ")", "\n", "", "", "if", "strings", "!=", "None", ":", "\n", "            ", "for", "string", "in", "strings", ":", "\n", "                ", "stringValue", "=", "model", ".", "getStr", "(", "string", ",", "defaultIfNotExist", "=", "None", ")", "\n", "if", "stringValue", "!=", "None", ":", "\n", "                    ", "self", ".", "addStr", "(", "string", ",", "stringValue", ")", "\n", "", "elif", "not", "allowMissing", ":", "\n", "                    ", "raise", "IOError", "(", "\"Model to import from has no string \\\"\"", "+", "string", "+", "\"\\\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.addStrings": [[81, 87], ["sorted", "dict.keys", "Model.Model.addStr"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.addStr"], ["", "", "", "", "def", "addStrings", "(", "self", ",", "dict", ")", ":", "\n", "        ", "\"\"\"\n        Add multiple name/value pairs\n        \"\"\"", "\n", "for", "key", "in", "sorted", "(", "dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "addStr", "(", "key", ",", "dict", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.addStr": [[88, 106], ["Model.Model._getValues", "Model.Model._setValues"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model._getValues", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model._setValues"], ["", "", "def", "addStr", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "\"\"\"\n        Add a named string to the model\n        \n        @param : the name of the string\n        @param : the string\n        \"\"\"", "\n", "for", "c", "in", "[", "\"\\n\"", ",", "\"\\t\"", ",", "\"\\r\"", "]", ":", "\n", "            ", "if", "name", "!=", "None", ":", "\n", "                ", "assert", "c", "not", "in", "name", ",", "(", "c", ",", "name", ",", "value", ")", "\n", "", "if", "value", "!=", "None", ":", "\n", "                ", "assert", "c", "not", "in", "value", ",", "(", "c", ",", "name", ",", "value", ")", "\n", "", "", "values", "=", "self", ".", "_getValues", "(", ")", "\n", "if", "value", "!=", "None", ":", "# add the parameter to the model", "\n", "            ", "values", "[", "name", "]", "=", "value", "\n", "", "elif", "name", "in", "values", ":", "# remove the parameter", "\n", "            ", "del", "values", "[", "name", "]", "\n", "", "self", ".", "_setValues", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.getStr": [[107, 125], ["Model.Model._getValues", "asType", "IOError"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model._getValues"], ["", "def", "getStr", "(", "self", ",", "name", ",", "defaultIfNotExist", "=", "NOTHING", ",", "asType", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Get a named string from the model\n        \n        @param name : the name of the string\n        @param defaultIfNotExist: if set to a value != NOTHING, will be returned if a name does not exist. Otherwise an exception is raised.\n        @param asType : if set, cast the return value to this type  \n        \"\"\"", "\n", "values", "=", "self", ".", "_getValues", "(", ")", "\n", "if", "name", "in", "values", ":", "\n", "            ", "if", "asType", "==", "None", ":", "\n", "                ", "return", "values", "[", "name", "]", "\n", "", "else", ":", "\n", "                ", "return", "asType", "(", "values", "[", "name", "]", ")", "\n", "", "", "elif", "defaultIfNotExist", "!=", "NOTHING", ":", "\n", "            ", "return", "defaultIfNotExist", "\n", "", "else", ":", "\n", "            ", "raise", "IOError", "(", "\"String named '\"", "+", "name", "+", "\"' not defined in model \"", "+", "self", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.save": [[126, 171], ["sorted", "IOError", "zipfile.ZipFile", "zipfile.ZipFile.namelist", "Model.Model.members.keys", "len", "zipfile.ZipFile.close", "os.path.exists", "tempfile.mkdtemp", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "zipfile.ZipFile", "os.listdir", "shutil.rmtree", "os.stat", "os.path.join", "shutil.copy2", "zipfile.ZipFile.write", "shutil.copy2", "zipfile.ZipFile.getinfo", "changed.append", "changed.append", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "filecmp.cmp"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Save a model.\n        \n        When saving a model, files that have changed in the cache are written to the model.\n        \"\"\"", "\n", "if", "self", ".", "mode", "==", "\"r\"", ":", "\n", "            ", "raise", "IOError", "(", "\"Model not open for writing\"", ")", "\n", "", "if", "self", ".", "isPackage", ":", "\n", "            ", "package", "=", "zipfile", ".", "ZipFile", "(", "self", ".", "path", ",", "\"r\"", ",", "self", ".", "compression", ")", "\n", "packageNames", "=", "package", ".", "namelist", "(", ")", "\n", "# Check which files have changed in the cache", "\n", "", "changed", "=", "[", "]", "\n", "for", "name", "in", "sorted", "(", "self", ".", "members", ".", "keys", "(", ")", ")", ":", "\n", "            ", "cached", "=", "self", ".", "members", "[", "name", "]", "\n", "if", "cached", "!=", "None", "and", "os", ".", "path", ".", "exists", "(", "cached", ")", ":", "# cache file exists", "\n", "                ", "if", "self", ".", "isPackage", ":", "\n", "                    ", "cachedInfo", "=", "os", ".", "stat", "(", "cached", ")", "\n", "packageFileInfo", "=", "None", "\n", "if", "name", "in", "packageNames", ":", "\n", "                        ", "packageFileInfo", "=", "package", ".", "getinfo", "(", "name", ")", "\n", "", "if", "packageFileInfo", "==", "None", "or", "cachedInfo", ".", "st_size", "!=", "packageFileInfo", ".", "file_size", ":", "\n", "                        ", "changed", ".", "append", "(", "name", ")", "\n", "", "", "else", ":", "\n", "                    ", "modelFilename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "modelFilename", ")", "or", "not", "filecmp", ".", "cmp", "(", "modelFilename", ",", "cached", ")", ":", "\n", "                        ", "changed", ".", "append", "(", "name", ")", "\n", "# Copy changed files from the cache to the model", "\n", "", "", "", "", "if", "len", "(", "changed", ")", ">", "0", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "print", ">>", "sys", ".", "stderr", ",", "\"Saving model \\\"\"", "+", "self", ".", "path", "+", "\"\\\" (cache:\"", "+", "self", ".", "workdir", "+", "\", changed:\"", "+", "\",\"", ".", "join", "(", "changed", ")", "+", "\")\"", "\n", "if", "self", ".", "isPackage", ":", "\n", "                ", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "# place to unpack existing model", "\n", "package", ".", "extractall", "(", "tempdir", ")", "# unpack model", "\n", "package", ".", "close", "(", ")", "# close model", "\n", "for", "name", "in", "changed", ":", "# add changed files from cache", "\n", "                    ", "shutil", ".", "copy2", "(", "self", ".", "members", "[", "name", "]", ",", "os", ".", "path", ".", "join", "(", "tempdir", ",", "name", ")", ")", "# from cache to unpacked model", "\n", "", "package", "=", "zipfile", ".", "ZipFile", "(", "self", ".", "path", ",", "\"w\"", ",", "self", ".", "compression", ")", "# recreate the model", "\n", "for", "name", "in", "os", ".", "listdir", "(", "tempdir", ")", ":", "# add all files to model", "\n", "                    ", "package", ".", "write", "(", "os", ".", "path", ".", "join", "(", "tempdir", ",", "name", ")", ",", "name", ")", "# add file from tempdir", "\n", "", "shutil", ".", "rmtree", "(", "tempdir", ")", "# remove temporary directory", "\n", "", "else", ":", "\n", "                ", "for", "name", "in", "changed", ":", "\n", "                    ", "shutil", ".", "copy2", "(", "self", ".", "members", "[", "name", "]", ",", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "name", ")", ")", "\n", "", "", "", "if", "self", ".", "isPackage", ":", "\n", "            ", "package", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.saveAs": [[172, 197], ["os.path.exists", "os.path.isdir", "shutil.copy2", "zipfile.ZipFile", "os.listdir", "zipfile.ZipFile.close", "shutil.copytree", "os.listdir", "shutil.rmtree", "os.remove", "zipfile.ZipFile.write", "shutil.copy2", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "", "def", "saveAs", "(", "self", ",", "outPath", ")", ":", "\n", "        ", "\"\"\"\n        Save a model with a different name.\n        \"\"\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Saving model \\\"\"", "+", "self", ".", "path", ",", "\"as\"", ",", "outPath", "\n", "if", "os", ".", "path", ".", "exists", "(", "outPath", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "outPath", ",", "\"exists, removing\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "outPath", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "outPath", ")", "\n", "", "else", ":", "\n", "                ", "os", ".", "remove", "(", "outPath", ")", "\n", "", "", "if", "self", ".", "isPackage", ":", "\n", "# copy current model to new location", "\n", "            ", "shutil", ".", "copy2", "(", "self", ".", "path", ",", "outPath", ")", "\n", "# add cached (potentially updated) files", "\n", "package", "=", "zipfile", ".", "ZipFile", "(", "outPath", ",", "\"a\"", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "workdir", ")", ":", "\n", "                ", "package", ".", "write", "(", "f", ")", "\n", "", "package", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "# copy files from model", "\n", "            ", "shutil", ".", "copytree", "(", "self", ".", "path", ",", "outPath", ")", "\n", "# copy cached (potentially updated) files", "\n", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "workdir", ")", ":", "\n", "                ", "shutil", ".", "copy2", "(", "os", ".", "path", ".", "join", "(", "self", ".", "workdir", ",", "f", ")", ",", "outPath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.hasMember": [[198, 200], ["None"], "methods", ["None"], ["", "", "", "def", "hasMember", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "name", "in", "self", ".", "members", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.get": [[201, 233], ["os.path.join", "Model.Model.add", "zipfile.ZipFile", "zipfile.ZipFile.close", "os.path.exists", "IOError", "zipfile.ZipFile.extract", "os.path.join", "shutil.copy2", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "def", "get", "(", "self", ",", "name", ",", "addIfNotExist", "=", "False", ",", "defaultIfNotExist", "=", "NOTHING", ")", ":", "\n", "        ", "\"\"\"\n        Return a file member from the model. The member is extracted to a cached directory\n        and returned as a path name. If this file is modified, when the model is saved,\n        it will be copied back to the model.\n        \n        @param name : the path to the file inside the model\n        @param addIfNotExist : Return a file name which can be created for adding the file\n        \"\"\"", "\n", "if", "name", "not", "in", "self", ".", "members", ":", "\n", "            ", "if", "addIfNotExist", ":", "\n", "                ", "self", ".", "add", "(", "name", ")", "\n", "", "elif", "defaultIfNotExist", "!=", "NOTHING", ":", "\n", "                ", "return", "defaultIfNotExist", "\n", "", "else", ":", "\n", "                ", "raise", "IOError", "(", "\"Model has no member \\\"\"", "+", "name", "+", "\"\\\"\"", ")", "\n", "# Cache member if not yet cached", "\n", "", "", "if", "self", ".", "members", "[", "name", "]", "==", "None", ":", "# file has not been cached yet", "\n", "            ", "cacheFilename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "workdir", ",", "name", ")", "\n", "if", "self", ".", "isPackage", ":", "\n", "                ", "package", "=", "zipfile", ".", "ZipFile", "(", "self", ".", "path", ",", "\"r\"", ")", "\n", "try", ":", "\n", "                    ", "if", "self", ".", "verbose", ":", "print", ">>", "sys", ".", "stderr", ",", "\"Caching model \\\"\"", "+", "self", ".", "path", "+", "\"\\\" member \\\"\"", "+", "name", "+", "\"\\\" to \\\"\"", "+", "cacheFilename", "+", "\"\\\"\"", "\n", "package", ".", "extract", "(", "name", ",", "self", ".", "workdir", ")", "\n", "", "except", ":", "# member does not exist yet", "\n", "                    ", "pass", "\n", "", "package", ".", "close", "(", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "name", ")", ")", ":", "# member already exists inside the model directory", "\n", "                ", "if", "self", ".", "verbose", ":", "print", ">>", "sys", ".", "stderr", ",", "\"Caching model \\\"\"", "+", "self", ".", "path", "+", "\"\\\" member \\\"\"", "+", "name", "+", "\"\\\" to \\\"\"", "+", "cacheFilename", "+", "\"\\\"\"", "\n", "shutil", ".", "copy2", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "name", ")", ",", "cacheFilename", ")", "\n", "", "self", ".", "members", "[", "name", "]", "=", "cacheFilename", "\n", "", "return", "self", ".", "members", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open": [[234, 243], ["Model.Model.path.endswith", "tempfile.mkdtemp", "Model.Model._openPackage", "Model.Model._openDir"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model._openPackage", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model._openDir"], ["", "def", "open", "(", "self", ",", "path", ",", "mode", "=", "\"r\"", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "\"r\"", ",", "\"w\"", ",", "\"a\"", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "path", "=", "path", "\n", "if", "self", ".", "path", ".", "endswith", "(", "'.zip'", ")", ":", "\n", "            ", "self", ".", "_openPackage", "(", "path", ",", "mode", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_openDir", "(", "path", ",", "mode", ")", "\n", "", "self", ".", "workdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model._openDir": [[244, 255], ["os.listdir", "os.path.exists", "shutil.rmtree", "os.path.exists", "os.mkdir", "open().close", "Model.Model.open"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.mkdir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "def", "_openDir", "(", "self", ",", "path", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "\"w\"", "and", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "self", ".", "valueFileName", ")", ",", "\"wt\"", ")", ".", "close", "(", ")", "\n", "# get members", "\n", "", "members", "=", "os", ".", "listdir", "(", "path", ")", "\n", "for", "member", "in", "members", ":", "\n", "            ", "self", ".", "members", "[", "member", "]", "=", "None", "\n", "", "self", ".", "isPackage", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model._openPackage": [[256, 271], ["zipfile.ZipFile", "zipfile.ZipFile.namelist", "zipfile.ZipFile.close", "os.path.exists", "os.remove", "os.path.exists", "zipfile.ZipFile", "tempfile.mkstemp", "zipfile.ZipFile.write", "zipfile.ZipFile.close", "os.remove"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["", "def", "_openPackage", "(", "self", ",", "path", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "\"w\"", "and", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "remove", "(", "path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "# create empty archive", "\n", "            ", "package", "=", "zipfile", ".", "ZipFile", "(", "path", ",", "\"w\"", ",", "self", ".", "compression", ")", "\n", "temp", "=", "tempfile", ".", "mkstemp", "(", ")", "\n", "package", ".", "write", "(", "temp", "[", "1", "]", ",", "self", ".", "valueFileName", ")", "\n", "package", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "temp", "[", "1", "]", ")", "\n", "# get members", "\n", "", "package", "=", "zipfile", ".", "ZipFile", "(", "path", ",", "\"r\"", ")", "\n", "for", "name", "in", "package", ".", "namelist", "(", ")", ":", "\n", "            ", "self", ".", "members", "[", "name", "]", "=", "None", "\n", "", "package", ".", "close", "(", ")", "\n", "self", ".", "isPackage", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model._getValues": [[273, 285], ["Model.Model.get", "os.path.exists", "Model.Model.open"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "def", "_getValues", "(", "self", ")", ":", "\n", "        ", "values", "=", "{", "}", "\n", "settingsFileName", "=", "self", ".", "get", "(", "self", ".", "valueFileName", ",", "True", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "settingsFileName", ")", ":", "\n", "            ", "f", "=", "open", "(", "settingsFileName", ",", "\"rt\"", ")", "\n", "for", "line", "in", "f", ":", "\n", "                ", "key", ",", "value", "=", "line", ".", "split", "(", "\"\\t\"", ",", "1", ")", "\n", "key", "=", "key", ".", "strip", "(", ")", "\n", "value", "=", "value", ".", "strip", "(", ")", "\n", "values", "[", "key", "]", "=", "value", "\n", "", "f", ".", "close", "(", ")", "\n", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model._setValues": [[286, 291], ["Model.Model.open"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "def", "_setValues", "(", "self", ",", "values", ")", ":", "\n", "        ", "f", "=", "open", "(", "self", ".", "get", "(", "self", ".", "valueFileName", ",", "True", ")", ",", "\"wt\"", ")", "\n", "for", "key", "in", "sorted", "(", "values", ".", "keys", "(", ")", ")", ":", "\n", "            ", "f", ".", "write", "(", "key", "+", "\"\\t\"", "+", "values", "[", "key", "]", "+", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.GeniaSentenceSplitter.install": [[21, 38], ["Utils.downloadAndExtract", "Tool.testPrograms", "os.getcwd", "os.chdir", "subprocess.call", "os.chdir", "Tool.finalizeInstall", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.testPrograms", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.finalizeInstall"], ["def", "install", "(", "destDir", "=", "None", ",", "downloadDir", "=", "None", ",", "redownload", "=", "False", ",", "updateLocalSettings", "=", "False", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Installing GENIA Sentence Splitter\"", "\n", "if", "downloadDir", "==", "None", ":", "\n", "        ", "downloadDir", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"tools/download/\"", ")", "\n", "", "if", "destDir", "==", "None", ":", "\n", "        ", "destDir", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"tools/geniass\"", ")", "\n", "", "Download", ".", "downloadAndExtract", "(", "Settings", ".", "URL", "[", "\"GENIA_SENTENCE_SPLITTER\"", "]", ",", "destDir", ",", "downloadDir", ",", "\"geniass\"", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Compiling GENIA Sentence Splitter\"", "\n", "Tool", ".", "testPrograms", "(", "\"Genia Sentence Splitter\"", ",", "[", "\"make\"", ",", "\"ruby\"", "]", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "destDir", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Compiling Genia Sentence Splitter\"", "\n", "subprocess", ".", "call", "(", "\"make\"", ",", "shell", "=", "True", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "Tool", ".", "finalizeInstall", "(", "[", "\"./run_geniass.sh\"", "]", ",", "\n", "{", "\"./run_geniass.sh\"", ":", "\"./run_geniass.sh README /dev/null \"", "+", "Settings", ".", "RUBY_PATH", "}", ",", "\n", "destDir", ",", "{", "\"GENIA_SENTENCE_SPLITTER_DIR\"", ":", "destDir", "}", ",", "updateLocalSettings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.GeniaSentenceSplitter.moveElements": [[39, 104], ["document.findall", "document.findall", "Utils.charOffsetToSingleTuple", "document.findall", "interactions.append", "document.remove", "targetSentence.append", "interaction.set", "interaction.set", "interaction.set", "sentence.get", "Utils.charOffsetToTuples", "str", "interaction.get", "interaction.set", "entity.get", "Utils.overlap", "document.remove", "sentence.append", "entity.get", "entityIdLastPart.startswith", "entity.set", "entity.set", "interaction.get", "targetSentence.get", "interaction.get", "entity.get.rsplit", "entity.set", "entity.set", "entity.set", "newEntityOffsets.append", "entity.get", "Utils.tuplesToCharOffset", "interaction.get", "interaction.get", "str", "interaction.get", "sentence.get", "str", "sentence.get", "sentence.get", "sentence.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToTuples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.tuplesToCharOffset", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "moveElements", "(", "document", ")", ":", "\n", "    ", "entMap", "=", "{", "}", "\n", "entSentence", "=", "{", "}", "\n", "entSentenceIndex", "=", "{", "}", "\n", "sentences", "=", "document", ".", "findall", "(", "\"sentence\"", ")", "\n", "sentenceCount", "=", "0", "\n", "for", "sentence", "in", "sentences", ":", "\n", "        ", "sentenceOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "sentence", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "# Move entities", "\n", "entCount", "=", "0", "\n", "for", "entity", "in", "document", ".", "findall", "(", "\"entity\"", ")", ":", "\n", "            ", "entityOffsets", "=", "Range", ".", "charOffsetToTuples", "(", "entity", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "overlaps", "=", "False", "\n", "for", "entityOffset", "in", "entityOffsets", ":", "\n", "                ", "if", "Range", ".", "overlap", "(", "sentenceOffset", ",", "entityOffset", ")", ":", "\n", "                    ", "overlaps", "=", "True", "\n", "break", "\n", "", "", "if", "overlaps", ":", "\n", "                ", "document", ".", "remove", "(", "entity", ")", "\n", "sentence", ".", "append", "(", "entity", ")", "\n", "entityId", "=", "entity", ".", "get", "(", "\"id\"", ")", "\n", "entityIdLastPart", "=", "entityId", ".", "rsplit", "(", "\".\"", ",", "1", ")", "[", "-", "1", "]", "\n", "if", "entityIdLastPart", ".", "startswith", "(", "\"e\"", ")", ":", "\n", "                    ", "entity", ".", "set", "(", "\"id\"", ",", "sentence", ".", "get", "(", "\"id\"", ")", "+", "\".\"", "+", "entityIdLastPart", ")", "\n", "entMap", "[", "entityId", "]", "=", "sentence", ".", "get", "(", "\"id\"", ")", "+", "\".\"", "+", "entityIdLastPart", "\n", "", "else", ":", "\n", "                    ", "entity", ".", "set", "(", "\"docId\"", ",", "entityId", ")", "\n", "entity", ".", "set", "(", "\"id\"", ",", "sentence", ".", "get", "(", "\"id\"", ")", "+", "\".e\"", "+", "str", "(", "entCount", ")", ")", "\n", "entMap", "[", "entityId", "]", "=", "sentence", ".", "get", "(", "\"id\"", ")", "+", "\".e\"", "+", "str", "(", "entCount", ")", "\n", "", "entSentence", "[", "entityId", "]", "=", "sentence", "\n", "entSentenceIndex", "[", "entityId", "]", "=", "sentenceCount", "\n", "#newEntityOffset = (entityOffset[0] - sentenceOffset[0], entityOffset[1] - sentenceOffset[0])", "\n", "newEntityOffsets", "=", "[", "]", "\n", "for", "entityOffset", "in", "entityOffsets", ":", "\n", "                    ", "newEntityOffsets", ".", "append", "(", "(", "entityOffset", "[", "0", "]", "-", "sentenceOffset", "[", "0", "]", ",", "entityOffset", "[", "1", "]", "-", "sentenceOffset", "[", "0", "]", ")", ")", "\n", "", "entity", ".", "set", "(", "\"origOffset\"", ",", "entity", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "#entity.set(\"charOffset\", str(newEntityOffset[0]) + \"-\" + str(newEntityOffset[1]))", "\n", "entity", ".", "set", "(", "\"charOffset\"", ",", "Range", ".", "tuplesToCharOffset", "(", "newEntityOffsets", ")", ")", "\n", "entCount", "+=", "1", "\n", "", "", "sentenceCount", "+=", "1", "\n", "# Move interactions", "\n", "", "intCount", "=", "0", "\n", "interactions", "=", "[", "]", "\n", "interactionOldToNewId", "=", "{", "}", "\n", "for", "interaction", "in", "document", ".", "findall", "(", "\"interaction\"", ")", ":", "\n", "        ", "interactions", ".", "append", "(", "interaction", ")", "\n", "#if entSentenceIndex[interaction.get(\"e1\")] < entSentenceIndex[interaction.get(\"e2\")]:", "\n", "#    targetSentence = entSentence[interaction.get(\"e1\")]", "\n", "#else:", "\n", "#    targetSentence = entSentence[interaction.get(\"e2\")]", "\n", "\n", "# Interactions go to a sentence always by e1, as this is the event they are an argument of.", "\n", "# If an intersentence interaction is a relation, this shouldn't matter.", "\n", "targetSentence", "=", "entSentence", "[", "interaction", ".", "get", "(", "\"e1\"", ")", "]", "\n", "document", ".", "remove", "(", "interaction", ")", "\n", "targetSentence", ".", "append", "(", "interaction", ")", "\n", "newId", "=", "targetSentence", ".", "get", "(", "\"id\"", ")", "+", "\".i\"", "+", "str", "(", "intCount", ")", "\n", "interactionOldToNewId", "[", "interaction", ".", "get", "(", "\"id\"", ")", "]", "=", "newId", "\n", "interaction", ".", "set", "(", "\"id\"", ",", "newId", ")", "\n", "interaction", ".", "set", "(", "\"e1\"", ",", "entMap", "[", "interaction", ".", "get", "(", "\"e1\"", ")", "]", ")", "\n", "interaction", ".", "set", "(", "\"e2\"", ",", "entMap", "[", "interaction", ".", "get", "(", "\"e2\"", ")", "]", ")", "\n", "intCount", "+=", "1", "\n", "", "for", "interaction", "in", "interactions", ":", "\n", "        ", "if", "interaction", ".", "get", "(", "\"siteOf\"", ")", "!=", "None", ":", "\n", "            ", "interaction", ".", "set", "(", "\"siteOf\"", ",", "interactionOldToNewId", "[", "interaction", ".", "get", "(", "\"siteOf\"", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.GeniaSentenceSplitter.makeSentence": [[105, 119], ["ET.Element", "ET.Element.set", "ET.Element.set", "ET.Element.get", "ET.Element.get", "prevSentence.set", "ET.Element.set", "ET.Element.get", "ET.Element.get", "str", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "def", "makeSentence", "(", "text", ",", "begin", ",", "end", ",", "prevSentence", "=", "None", ",", "prevEnd", "=", "None", ")", ":", "\n", "# Make sentence element", "\n", "    ", "e", "=", "ET", ".", "Element", "(", "\"sentence\"", ")", "\n", "e", ".", "set", "(", "\"text\"", ",", "text", "[", "begin", ":", "end", "]", ")", "\n", "e", ".", "set", "(", "\"charOffset\"", ",", "str", "(", "begin", ")", "+", "\"-\"", "+", "str", "(", "end", ")", ")", "# NOTE: check", "\n", "# Set tail string for previous sentence", "\n", "if", "prevSentence", "!=", "None", "and", "begin", "-", "prevEnd", ">", "1", ":", "\n", "        ", "prevSentence", ".", "set", "(", "\"tail\"", ",", "text", "[", "prevEnd", "+", "1", ":", "begin", "]", ")", "\n", "# Set head string for first sentence in document", "\n", "", "if", "begin", ">", "0", "and", "prevSentence", "==", "None", ":", "\n", "        ", "e", ".", "set", "(", "\"head\"", ",", "text", "[", "0", ":", "begin", "]", ")", "\n", "", "assert", "\"\\n\"", "not", "in", "e", ".", "get", "(", "\"text\"", ")", ",", "e", ".", "get", "(", "\"text\"", ")", "\n", "assert", "\"\\r\"", "not", "in", "e", ".", "get", "(", "\"text\"", ")", ",", "e", ".", "get", "(", "\"text\"", ")", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.GeniaSentenceSplitter.makeSentences": [[120, 273], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "Utils.ProgressCounter.ProgressCounter", "tempfile.mkdtemp", "len", "Utils.ProgressCounter.ProgressCounter.update", "document.get", "document.get", "codecs.open", "codecs.open.write", "codecs.open.close", "os.path.exists", "subprocess.Popen", "subprocess.Popen.communicate", "codecs.open.readlines", "GeniaSentenceSplitter.moveElements", "shutil.rmtree", "Utils.write", "str", "document.find", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "codecs.open", "codecs.open", "subprocess.call", "codecs.open.close", "codecs.open.close", "codecs.open", "codecs.open", "sText.strip.strip", "range", "makeSentence.get", "makeSentence.set", "corpusTree.getroot.getiterator", "corpusTree.getroot.getiterator", "str", "document.get.strip", "os.path.dirname", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "sText[].isspace", "text[].isspace", "GeniaSentenceSplitter.makeSentence", "makeSentence.set", "document.append", "makeSentence.get", "document.get", "os.path.abspath", "len", "GeniaSentenceSplitter.makeSentence", "makeSentence.set", "makeSentence.set", "document.append", "str", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.GeniaSentenceSplitter.moveElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.GeniaSentenceSplitter.makeSentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.GeniaSentenceSplitter.makeSentence"], ["", "def", "makeSentences", "(", "input", ",", "output", "=", "None", ",", "removeText", "=", "False", ",", "postProcess", "=", "True", ",", "debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Run GENIA Sentence Splitter\n    \n    Divide text in the \"text\" attributes of document and section \n    elements into sentence elements. These sentence elements are\n    inserted into their respective parent elements.\n    \"\"\"", "\n", "global", "sentenceSplitterDir", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "input", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Corpus file loaded\"", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Running GENIA Sentence Splitter\"", ",", "Settings", ".", "GENIA_SENTENCE_SPLITTER_DIR", ",", "\n", "if", "postProcess", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"(Using post-processing)\"", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"(No post-processing)\"", "\n", "", "docCount", "=", "0", "\n", "sentencesCreated", "=", "0", "\n", "redivideCount", "=", "0", "\n", "emptySentenceCount", "=", "0", "\n", "sourceElements", "=", "[", "x", "for", "x", "in", "corpusRoot", ".", "getiterator", "(", "\"document\"", ")", "]", "+", "[", "x", "for", "x", "in", "corpusRoot", ".", "getiterator", "(", "\"section\"", ")", "]", "\n", "counter", "=", "ProgressCounter", "(", "len", "(", "sourceElements", ")", ",", "\"GeniaSentenceSplitter\"", ")", "\n", "counter", ".", "showMilliseconds", "=", "True", "\n", "# Create working directory", "\n", "workdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "for", "document", "in", "sourceElements", ":", "\n", "        ", "counter", ".", "update", "(", "1", ",", "\"Splitting Documents (\"", "+", "document", ".", "get", "(", "\"id\"", ")", "+", "\"): \"", ")", "\n", "docId", "=", "document", ".", "get", "(", "\"id\"", ")", "\n", "if", "docId", "==", "None", ":", "\n", "            ", "docId", "=", "\"CORPUS.d\"", "+", "str", "(", "docCount", ")", "\n", "", "docTag", "=", "\"-\"", "+", "str", "(", "docCount", ")", "\n", "assert", "document", ".", "find", "(", "\"sentence\"", ")", "==", "None", "\n", "text", "=", "document", ".", "get", "(", "\"text\"", ")", "\n", "if", "text", "==", "None", "or", "text", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "            ", "continue", "\n", "#print type(text)", "\n", "# Write text to workfile", "\n", "#workdir = tempfile.mkdtemp()", "\n", "", "workfile", "=", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"sentence-splitter-input.txt\"", "+", "docTag", ")", ",", "\"wt\"", ",", "\"utf-8\"", ")", "\n", "# From http://themoritzfamily.com/python-encodings-and-unicode.html", "\n", "# \"You have to be careful with the codecs module. Whatever you pass to it must be a Unicode ", "\n", "# object otherwise it will try to automatically decode the byte stream as ASCII\"", "\n", "# However, the unicode errors here were simply due to STTools reading unicode ST-format as ASCII,", "\n", "# thus creating an ASCII interaction XML, which then triggered here the unicode error. So, at this", "\n", "# point we should be able to safely write(text), as the output file is unicode, and reading with", "\n", "# the correct coded is taken care of earlier in the pipeline.", "\n", "workfile", ".", "write", "(", "text", ")", "#.encode(\"utf-8\"))", "\n", "workfile", ".", "close", "(", ")", "\n", "# Run sentence splitter", "\n", "assert", "os", ".", "path", ".", "exists", "(", "Settings", ".", "GENIA_SENTENCE_SPLITTER_DIR", "+", "\"/run_geniass.sh\"", ")", ",", "Settings", ".", "GENIA_SENTENCE_SPLITTER_DIR", "\n", "args", "=", "[", "Settings", ".", "GENIA_SENTENCE_SPLITTER_DIR", "+", "\"/run_geniass.sh\"", ",", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"sentence-splitter-input.txt\"", "+", "docTag", ")", ",", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"sentence-splitter-output.txt\"", "+", "docTag", ")", ",", "Settings", ".", "RUBY_PATH", "]", "\n", "#p = subprocess.call(args)", "\n", "p", "=", "subprocess", ".", "Popen", "(", "args", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", ")", "\n", "stdout", ",", "stderr", "=", "p", ".", "communicate", "(", ")", "\n", "if", "stdout", "!=", "\"\"", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "stdout", "\n", "", "if", "stderr", "!=", "'Extracting events.roading model file.\\nstart classification.\\n'", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "stderr", "\n", "#print \"stdout<\", p.stdout.readlines(), \">\"", "\n", "#print \"stderr<\", p.stderr.readlines(), \">\"", "\n", "", "if", "postProcess", ":", "\n", "            ", "postProcessorPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"geniass-postproc.pl\"", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "postProcessorPath", ")", ",", "postProcessorPath", "\n", "ppIn", "=", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"sentence-splitter-output.txt\"", "+", "docTag", ")", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "ppOut", "=", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"sentence-splitter-output-postprocessed.txt\"", "+", "docTag", ")", ",", "\"wt\"", ",", "\"utf-8\"", ")", "\n", "perlReturnValue", "=", "subprocess", ".", "call", "(", "[", "\"perl\"", ",", "postProcessorPath", "]", ",", "stdin", "=", "ppIn", ",", "stdout", "=", "ppOut", ")", "\n", "assert", "perlReturnValue", "==", "0", ",", "perlReturnValue", "\n", "ppIn", ".", "close", "(", ")", "\n", "ppOut", ".", "close", "(", ")", "\n", "# Read split sentences", "\n", "workfile", "=", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"sentence-splitter-output-postprocessed.txt\"", "+", "docTag", ")", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "", "else", ":", "\n", "            ", "workfile", "=", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"sentence-splitter-output.txt\"", "+", "docTag", ")", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "", "start", "=", "0", "# sentences are consecutively aligned to the text for charOffsets", "\n", "sentenceCount", "=", "0", "\n", "#text = text.replace(\"\\n\", \" \") # should stop sentence splitter from crashing.", "\n", "#text = text.replace(\"  \", \" \") # should stop sentence splitter from crashing.", "\n", "#alignmentText = text.replace(\"\\n\", \" \").replace(\"\\r\", \" \")", "\n", "#docTokens = reWhiteSpace.split(text)", "\n", "docIndex", "=", "0", "\n", "sentenceBeginIndex", "=", "-", "1", "\n", "prevSentence", "=", "None", "\n", "prevEndIndex", "=", "None", "\n", "#emptySentenceCount = 0", "\n", "prevText", "=", "None", "\n", "for", "sText", "in", "workfile", ".", "readlines", "(", ")", ":", "\n", "            ", "sText", "=", "sText", ".", "strip", "(", ")", "# The text of the sentence", "\n", "if", "sText", "==", "\"\"", ":", "\n", "                ", "emptySentenceCount", "+=", "1", "\n", "continue", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "sText", ")", ")", ":", "\n", "                ", "if", "sText", "[", "i", "]", ".", "isspace", "(", ")", ":", "\n", "                    ", "assert", "sText", "[", "i", "]", "not", "in", "[", "\"\\n\"", ",", "\"\\r\"", "]", "\n", "continue", "\n", "", "while", "text", "[", "docIndex", "]", ".", "isspace", "(", ")", ":", "\n", "                    ", "if", "text", "[", "docIndex", "]", "in", "[", "\"\\n\"", ",", "\"\\r\"", "]", "and", "sentenceBeginIndex", "!=", "-", "1", ":", "\n", "                        ", "redivideCount", "+=", "1", "\n", "prevSentence", "=", "makeSentence", "(", "text", ",", "sentenceBeginIndex", ",", "docIndex", ",", "prevSentence", ",", "prevEndIndex", ")", "\n", "prevSentence", ".", "set", "(", "\"id\"", ",", "docId", "+", "\".s\"", "+", "str", "(", "sentenceCount", ")", ")", "\n", "prevSentence", ".", "set", "(", "\"redevided\"", ",", "\"True\"", ")", "\n", "sentencesCreated", "+=", "1", "\n", "sentenceCount", "+=", "1", "\n", "prevEndIndex", "=", "docIndex", "-", "1", "\n", "sentenceBeginIndex", "=", "-", "1", "\n", "document", ".", "append", "(", "prevSentence", ")", "\n", "", "docIndex", "+=", "1", "\n", "", "assert", "sText", "[", "i", "]", "==", "text", "[", "docIndex", "]", ",", "(", "text", ",", "sText", ",", "prevText", ",", "sText", "[", "i", ":", "i", "+", "10", "]", ",", "text", "[", "docIndex", ":", "docIndex", "+", "10", "]", ",", "(", "i", ",", "docIndex", ")", ",", "sentenceBeginIndex", ")", "# tokens[i].isspace() == False", "\n", "if", "sentenceBeginIndex", "==", "-", "1", ":", "\n", "                    ", "sentenceBeginIndex", "=", "docIndex", "\n", "", "docIndex", "+=", "1", "\n", "prevText", "=", "sText", "\n", "", "if", "sentenceBeginIndex", "!=", "-", "1", ":", "\n", "                ", "prevSentence", "=", "makeSentence", "(", "text", ",", "sentenceBeginIndex", ",", "docIndex", ",", "prevSentence", ",", "prevEndIndex", ")", "\n", "prevSentence", ".", "set", "(", "\"id\"", ",", "docId", "+", "\".s\"", "+", "str", "(", "sentenceCount", ")", ")", "\n", "prevEndIndex", "=", "docIndex", "-", "1", "\n", "sentenceBeginIndex", "=", "-", "1", "\n", "sentencesCreated", "+=", "1", "\n", "sentenceCount", "+=", "1", "\n", "document", ".", "append", "(", "prevSentence", ")", "\n", "# Add possible tail for last sentence", "\n", "", "", "if", "prevEndIndex", "<", "len", "(", "text", ")", "-", "1", "and", "prevSentence", "!=", "None", ":", "\n", "            ", "assert", "prevSentence", ".", "get", "(", "\"tail\"", ")", "==", "None", ",", "prevSentence", ".", "get", "(", "\"tail\"", ")", "\n", "prevSentence", ".", "set", "(", "\"tail\"", ",", "text", "[", "prevEndIndex", "+", "1", ":", "]", ")", "\n", "\n", "#if emptySentenceCount > 0:", "\n", "#    print >> sys.stderr, \"Warning,\", emptySentenceCount, \"empty sentences in\", document.get(\"id\") ", "\n", "# Remove original text", "\n", "", "if", "removeText", ":", "\n", "            ", "del", "document", "[", "\"text\"", "]", "\n", "# Move elements from document element to sentences", "\n", "", "moveElements", "(", "document", ")", "\n", "docCount", "+=", "1", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Sentence splitting created\"", ",", "sentencesCreated", ",", "\"sentences\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Redivided\"", ",", "redivideCount", ",", "\"sentences\"", "\n", "if", "emptySentenceCount", ">", "0", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning,\"", ",", "emptySentenceCount", ",", "\"empty sentences\"", "\n", "\n", "", "if", "debug", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Work directory preserved for debugging at\"", ",", "workdir", "\n", "", "else", ":", "\n", "# Remove work directory", "\n", "        ", "shutil", ".", "rmtree", "(", "workdir", ")", "\n", "\n", "", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "output", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.finalizeInstall": [[6, 22], ["Tool.checkPrograms", "sorted", "settings.keys", "Exception", "Utils.setLocal", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.checkPrograms"], ["def", "finalizeInstall", "(", "programs", ",", "testCommand", "=", "{", "}", ",", "programDir", "=", "None", ",", "settings", "=", "{", "}", ",", "updateLocalSettings", "=", "False", ")", ":", "\n", "    ", "installOK", "=", "checkPrograms", "(", "programs", ",", "testCommand", ",", "programDir", ")", "\n", "if", "installOK", ":", "\n", "        ", "setVariable", "=", "updateLocalSettings", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"All programs may not have been installed correctly\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Do not use the following settings if not sure:\"", "\n", "setVariable", "=", "False", "\n", "", "for", "key", "in", "sorted", "(", "settings", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "settings", "[", "key", "]", "!=", "None", ":", "\n", "#raise Exception(\"Local setting \" + str(key) + \" is undefined\")", "\n", "            ", "Settings", ".", "setLocal", "(", "key", ",", "settings", "[", "key", "]", ",", "setVariable", ")", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, local setting \"", "+", "str", "(", "key", ")", "+", "\" is undefined\"", "\n", "", "", "if", "not", "installOK", ":", "\n", "        ", "raise", "Exception", "(", "\"Error installing programs: \"", "+", "\", \"", ".", "join", "(", "programs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.checkReturnCode": [[23, 30], ["str", "str"], "function", ["None"], ["", "", "def", "checkReturnCode", "(", "code", ")", ":", "\n", "    ", "if", "code", "!=", "0", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"*** Non-zero return code\"", ",", "str", "(", "code", ")", "+", "\", program may not be working.\"", "\n", "return", "False", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"*** Return code\"", ",", "str", "(", "code", ")", "+", "\", program appears to be working.\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.checkPrograms": [[31, 50], ["os.getcwd", "os.chdir", "Tool.checkReturnCode", "os.chdir", "os.system", "status.values"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.checkReturnCode"], ["", "", "def", "checkPrograms", "(", "programs", ",", "testCommand", "=", "{", "}", ",", "programDir", "=", "None", ",", "combineResults", "=", "True", ")", ":", "\n", "    ", "if", "testCommand", "==", "None", ":", "\n", "        ", "testCommand", "=", "{", "}", "\n", "", "if", "programDir", "!=", "None", ":", "\n", "        ", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "programDir", ")", "\n", "", "status", "=", "{", "}", "\n", "for", "program", "in", "programs", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"*** Testing\"", ",", "program", ",", "\"...\"", "\n", "command", "=", "program", "+", "\" -v\"", "\n", "if", "program", "in", "testCommand", ":", "\n", "            ", "command", "=", "testCommand", "[", "program", "]", "\n", "", "status", "[", "program", "]", "=", "checkReturnCode", "(", "os", ".", "system", "(", "command", ")", ")", "\n", "", "if", "programDir", "!=", "None", ":", "\n", "        ", "os", ".", "chdir", "(", "cwd", ")", "\n", "", "if", "combineResults", ":", "\n", "        ", "return", "not", "False", "in", "status", ".", "values", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.testPrograms": [[51, 69], ["Tool.checkPrograms", "checkPrograms.values", "Utils.Menu.Menu", "Utils.Menu.Menu", "Utils.Menu.Menu.show", "Utils.Menu.Option", "Utils.Menu.Option", "Utils.Menu.Option", "Utils.Menu.Option", "Utils.Menu.Option", "Utils.Menu.Option"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.checkPrograms"], ["", "", "def", "testPrograms", "(", "dependentProgramName", ",", "programs", ",", "testCommand", "=", "{", "}", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Testing programs\"", ",", "programs", "\n", "# check program status", "\n", "status", "=", "checkPrograms", "(", "programs", ",", "testCommand", ",", "combineResults", "=", "False", ")", "\n", "# if there is a problem, show a menu", "\n", "if", "False", "in", "status", ".", "values", "(", ")", ":", "\n", "        ", "menu", "=", "Utils", ".", "Menu", ".", "Menu", "(", "\"Missing programs\"", ",", "\"\"", ",", "\n", "[", "Utils", ".", "Menu", ".", "Option", "(", "\"r\"", ",", "\"Retry and check again program status\"", ")", ",", "\n", "Utils", ".", "Menu", ".", "Option", "(", "\"c\"", ",", "\"Continue\"", ")", ",", "\n", "Utils", ".", "Menu", ".", "Option", "(", "\"q\"", ",", "\"Quit\"", ",", "isDefault", "=", "True", ",", "handler", "=", "sys", ".", "exit", ",", "handlerArgs", "=", "[", "1", "]", ")", "]", ",", "\n", "addToSystem", "=", "False", ",", "initializer", "=", "initProgramTestMenu", ")", "\n", "menu", ".", "status", "=", "status", "# no need to check on the first show of the menu", "\n", "while", "menu", ".", "prevChoice", "==", "None", "or", "menu", ".", "prevChoice", "==", "\"r\"", ":", "\n", "            ", "menu", ".", "programName", "=", "dependentProgramName", "\n", "menu", ".", "programs", "=", "programs", "\n", "menu", ".", "testCommand", "=", "testCommand", "\n", "menu", ".", "show", "(", ")", "\n", "menu", ".", "status", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.initProgramTestMenu": [[70, 116], ["menu.text.replace", "Tool.checkPrograms", "menu.status.values", "menu.setDefault", "menu.status.values", "menu.setDefault", "menu.setDefault"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.checkPrograms"], ["", "", "", "def", "initProgramTestMenu", "(", "menu", ",", "prevMenu", ")", ":", "\n", "# Check program status if this hasn't been done yet", "\n", "    ", "if", "menu", ".", "status", "==", "None", ":", "\n", "        ", "menu", ".", "status", "=", "checkPrograms", "(", "menu", ".", "programs", ",", "menu", ".", "testCommand", ",", "combineResults", "=", "False", ")", "\n", "# Explain situation", "\n", "", "if", "False", "in", "menu", ".", "status", ".", "values", "(", ")", ":", "\n", "        ", "if", "menu", ".", "system", ".", "auto", ":", "\n", "            ", "menu", ".", "setDefault", "(", "\"q\"", ")", "# avoid getting in a loop", "\n", "", "else", ":", "\n", "            ", "menu", ".", "setDefault", "(", "\"r\"", ")", "\n", "", "menu", ".", "text", "=", "\"\"\"\n        Some programs required for installing MAIN_PROGRAM may not be present.\n        The current status of required programs is:\n        \n        \"\"\"", "\n", "", "else", ":", "# ready to continue", "\n", "        ", "menu", ".", "setDefault", "(", "\"c\"", ")", "\n", "menu", ".", "text", "=", "\"\"\"\n        All programs required for installing MAIN_PROGRAM are present.\n        The current status of required programs is:\n        \n        \"\"\"", "\n", "# Show program status", "\n", "", "for", "program", "in", "menu", ".", "programs", ":", "\n", "        ", "menu", ".", "text", "+=", "program", "\n", "if", "menu", ".", "status", "[", "program", "]", ":", "\n", "            ", "menu", ".", "text", "+=", "\":OK \"", "\n", "", "else", ":", "\n", "            ", "menu", ".", "text", "+=", "\":ERROR \"", "\n", "# Recommend option", "\n", "", "", "if", "False", "in", "menu", ".", "status", ".", "values", "(", ")", ":", "\n", "        ", "menu", ".", "text", "+=", "\"\"\"\n        \n        These programs are most likely available through your operating system's\n        package manager. You can leave this configuration program open, while you\n        install the missing components. Afterwards, check the status again (r).\n        \n        You can also continue installing directly (c), but then it may not be\n        possible to install MAIN_PROGRAM.\n        \"\"\"", "\n", "", "else", ":", "\n", "        ", "menu", ".", "text", "+=", "\"\"\"\n        \n        Please continue installation by choosing (c).\n        \"\"\"", "\n", "", "menu", ".", "text", "=", "menu", ".", "text", ".", "replace", "(", "\"MAIN_PROGRAM\"", ",", "menu", ".", "programName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.MetaMap.convert": [[14, 52], ["xml.Element", "metamapEl.getiterator", "int", "utterance.getiterator", "xml.Element", "ET.Element.set", "ET.Element.set", "phrase.getiterator", "sentenceEl.get", "utterance.find", "int", "Utils.tuplesToCharOffset", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "set", "candidate.getiterator", "ET.Element.set", "set", "candidate.getiterator", "ET.Element.set", "ET.Element.get", "ET.Element.append", "int", "int", "phrase.find", "set.add", "set.add", "phrase.find", "candidate.find", "candidate.find", "candidate.find", "candidate.find", "sorted", "sorted", "phrase.find", "phrase.find", "list", "list"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.tuplesToCharOffset", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["def", "convert", "(", "metamapEl", ",", "sentenceEl", ")", ":", "\n", "    ", "\"\"\"\n    Convert MetaMap XML into phrase-elements\n    \"\"\"", "\n", "newMetamapEl", "=", "ET", ".", "Element", "(", "\"metamap\"", ")", "# make a new metamap element", "\n", "utteranceCount", "=", "0", "\n", "for", "utterance", "in", "metamapEl", ".", "getiterator", "(", "\"Utterance\"", ")", ":", "# process all utterances (sentences)", "\n", "        ", "utteranceCount", "+=", "1", "\n", "#print \"UT:\", utterance.find(\"UttText\").text", "\n", "uttOffsetBegin", "=", "int", "(", "utterance", ".", "find", "(", "\"UttStartPos\"", ")", ".", "text", ")", "\n", "for", "phrase", "in", "utterance", ".", "getiterator", "(", "\"Phrase\"", ")", ":", "# process all phrases for each utterance", "\n", "#print \"Phrase:\", phrase.find(\"PhraseText\").text", "\n", "            ", "phraseEl", "=", "ET", ".", "Element", "(", "\"phrase\"", ")", "\n", "phraseOffset", "=", "[", "int", "(", "phrase", ".", "find", "(", "\"PhraseStartPos\"", ")", ".", "text", ")", ",", "int", "(", "phrase", ".", "find", "(", "\"PhraseStartPos\"", ")", ".", "text", ")", "+", "int", "(", "phrase", ".", "find", "(", "\"PhraseLength\"", ")", ".", "text", ")", "]", "\n", "phraseOffset", "=", "[", "phraseOffset", "[", "0", "]", "-", "uttOffsetBegin", ",", "phraseOffset", "[", "1", "]", "-", "uttOffsetBegin", "]", "\n", "phraseEl", ".", "set", "(", "\"charOffset\"", ",", "Range", ".", "tuplesToCharOffset", "(", "phraseOffset", ")", ")", "\n", "phraseEl", ".", "set", "(", "\"text\"", ",", "phrase", ".", "find", "(", "\"PhraseText\"", ")", ".", "text", ")", "\n", "for", "candidate", "in", "phrase", ".", "getiterator", "(", "\"Candidate\"", ")", ":", "# process first candidate of each phrase", "\n", "                ", "phraseEl", ".", "set", "(", "\"score\"", ",", "candidate", ".", "find", "(", "\"CandidateScore\"", ")", ".", "text", ")", "\n", "phraseEl", ".", "set", "(", "\"cui\"", ",", "candidate", ".", "find", "(", "\"CandidateCUI\"", ")", ".", "text", ")", "\n", "phraseEl", ".", "set", "(", "\"matched\"", ",", "candidate", ".", "find", "(", "\"CandidateMatched\"", ")", ".", "text", ")", "\n", "phraseEl", ".", "set", "(", "\"preferred\"", ",", "candidate", ".", "find", "(", "\"CandidatePreferred\"", ")", ".", "text", ")", "\n", "semTypes", "=", "set", "(", ")", "\n", "for", "semType", "in", "candidate", ".", "getiterator", "(", "\"SemType\"", ")", ":", "\n", "                    ", "semTypes", ".", "add", "(", "semType", ".", "text", ")", "\n", "", "phraseEl", ".", "set", "(", "\"semTypes\"", ",", "\",\"", ".", "join", "(", "sorted", "(", "list", "(", "semTypes", ")", ")", ")", ")", "\n", "sources", "=", "set", "(", ")", "\n", "for", "source", "in", "candidate", ".", "getiterator", "(", "\"Source\"", ")", ":", "\n", "                    ", "sources", ".", "add", "(", "source", ".", "text", ")", "\n", "", "phraseEl", ".", "set", "(", "\"sources\"", ",", "\",\"", ".", "join", "(", "sorted", "(", "list", "(", "sources", ")", ")", ")", ")", "\n", "break", "\n", "", "if", "phraseEl", ".", "get", "(", "\"matched\"", ")", "!=", "None", ":", "# include only matched phrases as new elements", "\n", "                ", "newMetamapEl", ".", "append", "(", "phraseEl", ")", "\n", "#print ET.tostring(phraseEl, \"utf-8\")", "\n", "\n", "", "", "", "if", "utteranceCount", ">", "1", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, sentence\"", ",", "sentenceEl", ".", "get", "(", "\"id\"", ")", ",", "\"has\"", ",", "utteranceCount", ",", "\"utterances\"", "\n", "", "return", "newMetamapEl", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.MetaMap.process": [[53, 100], ["Utils.ProgressCounter.ProgressCounter", "tempfile.mkdtemp", "Utils.ETIteratorFromObj", "Utils.ETWriter", "ETUtils.ETWriter.close", "Utils.encodeNewlines", "shutil.rmtree", "Utils.ProgressCounter.ProgressCounter.update", "ETUtils.ETWriter.begin", "ETUtils.ETWriter.end", "ETUtils.ETWriter.write", "MetaMap.convert", "sentence.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETIteratorFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.encodeNewlines", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.begin", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.end", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ConvertPMC.convert", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "process", "(", "input", ",", "output", "=", "None", ",", "preprocess", "=", "True", ",", "debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Run MetaMap.\n    \"\"\"", "\n", "counter", "=", "ProgressCounter", "(", "id", "=", "\"MetaMap\"", ")", "\n", "\n", "# Create working directory", "\n", "workdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "outWriter", "=", "None", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "outWriter", "=", "ETUtils", ".", "ETWriter", "(", "output", ")", "\n", "\n", "# Loop iteratively over elements", "\n", "", "skip", "=", "False", "\n", "for", "event", ",", "element", "in", "ETUtils", ".", "ETIteratorFromObj", "(", "input", ",", "(", "\"start\"", ",", "\"end\"", ")", ")", ":", "\n", "        ", "if", "event", "==", "\"start\"", ":", "# element start message, element may not be fully read yet", "\n", "            ", "if", "element", ".", "tag", "==", "\"sentence\"", ":", "\n", "                ", "sentence", "=", "element", "\n", "counter", ".", "update", "(", "1", ",", "\"Processing MetaMap (\"", "+", "sentence", ".", "get", "(", "\"id\"", ")", "+", "\"): \"", ")", "\n", "# Run metamap for the sentence element", "\n", "", "elif", "element", ".", "tag", "==", "\"metamap\"", ":", "# skip the metamap element to remove the original one", "\n", "                ", "skip", "=", "True", "\n", "", "if", "not", "skip", "and", "output", "!=", "None", ":", "\n", "                ", "outWriter", ".", "begin", "(", "element", ")", "\n", "\n", "", "", "elif", "event", "==", "\"end\"", ":", "# element is fully read in memory", "\n", "            ", "if", "not", "skip", "and", "output", "!=", "None", ":", "\n", "                ", "outWriter", ".", "end", "(", "element", ")", "\n", "\n", "", "if", "element", ".", "tag", "==", "\"metamap\"", ":", "\n", "                ", "skip", "=", "False", "# write elements again after this one", "\n", "if", "preprocess", ":", "\n", "                    ", "element", "=", "convert", "(", "element", ",", "sentence", ")", "\n", "", "outWriter", ".", "write", "(", "element", ")", "# insert the new metamap element into the output stream", "\n", "\n", "", "", "", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "outWriter", ".", "close", "(", ")", "\n", "ETUtils", ".", "encodeNewlines", "(", "output", ")", "\n", "\n", "", "if", "debug", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Work directory preserved for debugging at\"", ",", "workdir", "\n", "", "else", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "workdir", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.StanfordParser.unescape": [[40, 45], ["text.replace.replace"], "function", ["None"], ["def", "unescape", "(", "text", ")", ":", "\n", "    ", "global", "escDict", ",", "escSymbols", "\n", "for", "escSymbol", "in", "escSymbols", ":", "\n", "        ", "text", "=", "text", ".", "replace", "(", "escSymbol", ",", "escDict", "[", "escSymbol", "]", ")", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.StanfordParser.install": [[46, 57], ["Utils.downloadAndExtract", "Utils.getTopDir", "Tool.finalizeInstall", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.finalizeInstall"], ["", "def", "install", "(", "destDir", "=", "None", ",", "downloadDir", "=", "None", ",", "redownload", "=", "False", ",", "updateLocalSettings", "=", "False", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Installing Stanford Parser\"", "\n", "if", "downloadDir", "==", "None", ":", "\n", "        ", "downloadDir", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"tools/download/\"", ")", "\n", "", "if", "destDir", "==", "None", ":", "\n", "        ", "destDir", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"tools/\"", ")", "\n", "", "items", "=", "Download", ".", "downloadAndExtract", "(", "Settings", ".", "URL", "[", "\"STANFORD_PARSER\"", "]", ",", "destDir", ",", "downloadDir", ")", "\n", "stanfordPath", "=", "Download", ".", "getTopDir", "(", "destDir", ",", "items", ")", "\n", "Tool", ".", "finalizeInstall", "(", "[", "\"stanford-parser.jar\"", "]", ",", "\n", "{", "\"stanford-parser.jar\"", ":", "\"java -cp stanford-parser.jar edu.stanford.nlp.trees.EnglishGrammaticalStructure\"", "}", ",", "\n", "stanfordPath", ",", "{", "\"STANFORD_PARSER_DIR\"", ":", "stanfordPath", "}", ",", "updateLocalSettings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.StanfordParser.runStanford": [[81, 87], ["subprocess.Popen", "codecs.open"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "def", "runStanford", "(", "input", ",", "output", ",", "stanfordParserArgs", ")", ":", "\n", "#global stanfordParserArgs", "\n", "##args = [\"java\", \"-mx150m\", \"-cp\", \"stanford-parser.jar\", \"edu.stanford.nlp.trees.EnglishGrammaticalStructure\", \"-CCprocessed\", \"-treeFile\", input]", "\n", "#args = [\"java\", \"-mx500m\", \"-cp\", \"stanford-parser.jar\", \"edu.stanford.nlp.trees.EnglishGrammaticalStructure\", \"-CCprocessed\", \"-treeFile\", input] ", "\n", "#return subprocess.Popen(args, stdout=codecs.open(output, \"wt\", \"utf-8\"))", "\n", "    ", "return", "subprocess", ".", "Popen", "(", "stanfordParserArgs", "+", "[", "input", "]", ",", "stdout", "=", "codecs", ".", "open", "(", "output", ",", "\"wt\"", ",", "\"utf-8\"", ")", ")", "\n", "#return subprocess.Popen(stanfordParserArgs + [input], stdout=codecs.open(output, \"wt\", \"latin1\", \"replace\"))", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.StanfordParser.getUnicode": [[89, 95], ["string.encode().decode.encode().decode", "string.encode().decode.encode"], "function", ["None"], ["", "def", "getUnicode", "(", "string", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "string", "=", "string", ".", "encode", "(", "'raw_unicode_escape'", ")", ".", "decode", "(", "'utf-8'", ")", "# fix latin1?", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.StanfordParser.addDependencies": [[96, 188], ["sorted", "outfile.readline", "tokens.append", "range", "outfile.readline.strip", "outfile.readline", "tokenByIndex[].get", "outfile.readline.strip", "outfile.readline", "[].split", "rest.split", "t1.rsplit", "unescape().strip", "int", "t2.rsplit", "unescape().strip", "int", "ET.Element", "ET.Element.set", "ET.Element.set", "parse.insert", "t1Index[].isdigit", "t2Index[].isdigit", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "deps.append", "StanfordParser.unescape", "StanfordParser.unescape", "outfile.readline.strip", "str", "tokenByIndex[].get", "tokenByIndex[].get", "tokenByIndex[].get", "tokenByIndex[].get", "outfile.readline.strip", "outfile.readline.strip", "outfile.readline", "outfile.readline.strip", "outfile.readline", "parse.get", "parse.set", "parse.get", "parse.set", "str", "str", "tokenByIndex[].get", "tokenByIndex[].get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.insert", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.unescape", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.unescape", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "addDependencies", "(", "outfile", ",", "parse", ",", "tokenByIndex", "=", "None", ",", "sentenceId", "=", "None", ",", "skipExtra", "=", "0", ")", ":", "\n", "#global escDict", "\n", "#escSymbols = sorted(escDict.keys())", "\n", "\n", "# A list of tokens for debugging", "\n", "    ", "tokens", "=", "[", "]", "\n", "for", "key", "in", "sorted", "(", "tokenByIndex", ")", ":", "\n", "        ", "tokens", ".", "append", "(", "tokenByIndex", "[", "key", "]", ".", "get", "(", "\"text\"", ")", ")", "\n", "\n", "", "depCount", "=", "1", "\n", "line", "=", "outfile", ".", "readline", "(", ")", "\n", "#line = line.encode('raw_unicode_escape').decode('utf-8') # fix latin1?", "\n", "#line = getUnicode(line)", "\n", "deps", "=", "[", "]", "\n", "# BioNLP'09 Shared Task GENIA uses _two_ newlines to denote a failed parse (usually it's one,", "\n", "# the same as the BLLIP parser. To survive this, skipExtra can be used to define the number", "\n", "# of lines to skip, if the first line of a dependency parse is empty (indicating a failed parse) ", "\n", "if", "line", ".", "strip", "(", ")", "==", "\"\"", "and", "skipExtra", ">", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "skipExtra", ")", ":", "\n", "            ", "outfile", ".", "readline", "(", ")", "\n", "", "", "while", "line", ".", "strip", "(", ")", "!=", "\"\"", ":", "\n", "#if \",\" not in line or \"(\" not in line:", "\n", "#    print >> sys.stderr, \"Warning, unreadable dependency '\", line.strip(), \"', in sentence\", sentenceId", "\n", "        ", "try", ":", "\n", "# Add dependencies", "\n", "            ", "depType", ",", "rest", "=", "line", ".", "strip", "(", ")", "[", ":", "-", "1", "]", ".", "split", "(", "\"(\"", ")", "\n", "t1", ",", "t2", "=", "rest", ".", "split", "(", "\", \"", ")", "\n", "t1Word", ",", "t1Index", "=", "t1", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "\n", "#for escSymbol in escSymbols:", "\n", "#    t1Word = t1Word.replace(escSymbol, escDict[escSymbol])", "\n", "t1Word", "=", "unescape", "(", "t1Word", ")", ".", "strip", "(", ")", "\n", "while", "not", "t1Index", "[", "-", "1", "]", ".", "isdigit", "(", ")", ":", "t1Index", "=", "t1Index", "[", ":", "-", "1", "]", "# invalid literal for int() with base 10: \"7'\"", "\n", "t1Index", "=", "int", "(", "t1Index", ")", "\n", "t2Word", ",", "t2Index", "=", "t2", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "\n", "#for escSymbol in escSymbols:", "\n", "#    t2Word = t2Word.replace(escSymbol, escDict[escSymbol])", "\n", "t2Word", "=", "unescape", "(", "t2Word", ")", ".", "strip", "(", ")", "\n", "while", "not", "t2Index", "[", "-", "1", "]", ".", "isdigit", "(", ")", ":", "t2Index", "=", "t2Index", "[", ":", "-", "1", "]", "# invalid literal for int() with base 10: \"7'\"", "\n", "t2Index", "=", "int", "(", "t2Index", ")", "\n", "", "except", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, unreadable dependency '\"", ",", "line", ".", "strip", "(", ")", ",", "\"', in sentence\"", ",", "sentenceId", "\n", "depType", "=", "None", "\n", "# Make element", "\n", "#if depType == \"root\":", "\n", "#    assert t1Word == \"ROOT\"", "\n", "#    if tokenByIndex != None and t2Index-1 in tokenByIndex:", "\n", "#        tokenByIndex[t2Index-1].set(\"stanford-root\", \"True\")", "\n", "", "if", "depType", "!=", "None", "and", "depType", "!=", "\"root\"", ":", "\n", "            ", "dep", "=", "ET", ".", "Element", "(", "\"dependency\"", ")", "\n", "dep", ".", "set", "(", "\"id\"", ",", "\"sd_\"", "+", "str", "(", "depCount", ")", ")", "\n", "alignmentError", "=", "False", "\n", "if", "tokenByIndex", "!=", "None", ":", "\n", "                ", "if", "t1Index", "-", "1", "not", "in", "tokenByIndex", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"Token not found\"", ",", "(", "t1Index", "-", "1", ",", "t1Word", ",", "depCount", ",", "sentenceId", ")", "\n", "deps", "=", "[", "]", "\n", "while", "line", ".", "strip", "(", ")", "!=", "\"\"", ":", "line", "=", "outfile", ".", "readline", "(", ")", "\n", "break", "\n", "", "if", "t2Index", "-", "1", "not", "in", "tokenByIndex", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"Token not found\"", ",", "(", "t2Index", "-", "1", ",", "t2Word", ",", "depCount", ",", "sentenceId", ")", "\n", "deps", "=", "[", "]", "\n", "while", "line", ".", "strip", "(", ")", "!=", "\"\"", ":", "line", "=", "outfile", ".", "readline", "(", ")", "\n", "break", "\n", "", "if", "t1Word", "!=", "tokenByIndex", "[", "t1Index", "-", "1", "]", ".", "get", "(", "\"text\"", ")", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"Alignment error\"", ",", "(", "t1Word", ",", "tokenByIndex", "[", "t1Index", "-", "1", "]", ".", "get", "(", "\"text\"", ")", ",", "t1Index", "-", "1", ",", "depCount", ",", "sentenceId", ",", "tokens", ")", "\n", "alignmentError", "=", "True", "\n", "if", "parse", ".", "get", "(", "\"stanfordAlignmentError\"", ")", "==", "None", ":", "\n", "                        ", "parse", ".", "set", "(", "\"stanfordAlignmentError\"", ",", "t1Word", ")", "\n", "", "", "if", "t2Word", "!=", "tokenByIndex", "[", "t2Index", "-", "1", "]", ".", "get", "(", "\"text\"", ")", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"Alignment error\"", ",", "(", "t2Word", ",", "tokenByIndex", "[", "t2Index", "-", "1", "]", ".", "get", "(", "\"text\"", ")", ",", "t2Index", "-", "1", ",", "depCount", ",", "sentenceId", ",", "tokens", ")", "\n", "alignmentError", "=", "True", "\n", "if", "parse", ".", "get", "(", "\"stanfordAlignmentError\"", ")", "==", "None", ":", "\n", "                        ", "parse", ".", "set", "(", "\"stanfordAlignmentError\"", ",", "t2Word", ")", "\n", "", "", "dep", ".", "set", "(", "\"t1\"", ",", "tokenByIndex", "[", "t1Index", "-", "1", "]", ".", "get", "(", "\"id\"", ")", ")", "\n", "dep", ".", "set", "(", "\"t2\"", ",", "tokenByIndex", "[", "t2Index", "-", "1", "]", ".", "get", "(", "\"id\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "dep", ".", "set", "(", "\"t1\"", ",", "\"bt_\"", "+", "str", "(", "t1Index", ")", ")", "\n", "dep", ".", "set", "(", "\"t2\"", ",", "\"bt_\"", "+", "str", "(", "t2Index", ")", ")", "\n", "", "dep", ".", "set", "(", "\"type\"", ",", "depType", ")", "\n", "parse", ".", "insert", "(", "depCount", "-", "1", ",", "dep", ")", "\n", "depCount", "+=", "1", "\n", "if", "not", "alignmentError", ":", "\n", "                ", "deps", ".", "append", "(", "dep", ")", "\n", "", "", "line", "=", "outfile", ".", "readline", "(", ")", "\n", "#         try:", "\n", "#             line = getUnicode(line)", "\n", "#             #line = line.encode('raw_unicode_escape').decode('utf-8') # fix latin1?", "\n", "#         except Exception as e:", "\n", "#             print \"Type\", type(line)", "\n", "#             print \"Repr\", repr(line)", "\n", "#             print line", "\n", "#             raise e", "\n", "", "return", "deps", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.StanfordParser.convertXML": [[224, 358], ["time.strftime", "Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "tempfile.mkdtemp", "os.path.join", "codecs.open", "corpusTree.getroot.getiterator", "codecs.open.close", "ProcessUtils.runSentenceProcess", "codecs.open", "corpusTree.getroot.findall", "codecs.open.close", "ET.SubElement.get", "codecs.open.write", "document.findall", "shutil.rmtree", "Utils.write", "sentence.find", "ProcessUtils.setDefaultElement", "ProcessUtils.setDefaultElement", "ProcessUtils.getElementByAttrib", "ProcessUtils.setDefaultElement", "ProcessUtils.getElementByAttrib", "len", "ET.SubElement.get", "ET.SubElement.set", "ET.SubElement.set", "ProcessUtils.getElementByAttrib.findall", "document.get", "str", "StanfordParser.addDependencies", "ET.SubElement.findall", "ET.SubElement.findall", "sentence.find", "ProcessUtils.setDefaultElement", "ProcessUtils.setDefaultElement", "ProcessUtils.getElementByAttrib", "ProcessUtils.setDefaultElement", "ProcessUtils.getElementByAttrib", "ET.SubElement", "ET.SubElement.set", "ET.SubElement.set", "sentence.find", "ProcessUtils.getElementByAttrib", "ProcessUtils.getElementByAttrib", "document.get", "len", "ET.SubElement.set", "ET.SubElement.set", "Utils.JAVA.split", "ET.SubElement.remove", "len", "len", "sentence.find", "sentence.find().find", "sentence.get", "ET.SubElement.get", "ET.SubElement.get", "ET.SubElement.set", "Utils.JAVA.split", "ET.SubElement.findall", "ET.SubElement.findall", "ET.SubElement.get", "ET.SubElement.get", "sentence.find"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.runSentenceProcess", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.setDefaultElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.setDefaultElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.setDefaultElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.StanfordParser.addDependencies", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.setDefaultElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.setDefaultElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.setDefaultElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "convertXML", "(", "parser", ",", "input", ",", "output", "=", "None", ",", "debug", "=", "False", ",", "reparse", "=", "False", ",", "stanfordParserDir", "=", "None", ",", "stanfordParserArgs", "=", "None", ")", ":", "\n", "#global stanfordParserDir, stanfordParserArgs", "\n", "    ", "if", "stanfordParserDir", "==", "None", ":", "\n", "        ", "stanfordParserDir", "=", "Settings", ".", "STANFORD_PARSER_DIR", "\n", "", "if", "stanfordParserArgs", "==", "None", ":", "\n", "# not sure how necessary the \"-mx500m\" option is, and how exactly Java", "\n", "# options interact, but adding user defined options from Settings.JAVA", "\n", "# after the \"-mx500m\" hopefully works.", "\n", "        ", "stanfordParserArgs", "=", "Settings", ".", "JAVA", ".", "split", "(", ")", "[", "0", ":", "1", "]", "+", "[", "\"-mx500m\"", "]", "+", "Settings", ".", "JAVA", ".", "split", "(", ")", "[", "1", ":", "]", "+", "[", "\"-cp\"", ",", "\"stanford-parser.jar\"", ",", "\n", "\"edu.stanford.nlp.trees.EnglishGrammaticalStructure\"", ",", "\n", "\"-encoding\"", ",", "\"utf8\"", ",", "\"-CCprocessed\"", ",", "\"-keepPunct\"", ",", "\"-treeFile\"", "]", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Running Stanford conversion\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Stanford tools at:\"", ",", "stanfordParserDir", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Stanford tools arguments:\"", ",", "\" \"", ".", "join", "(", "stanfordParserArgs", ")", "\n", "parseTimeStamp", "=", "time", ".", "strftime", "(", "\"%d.%m.%y %H:%M:%S\"", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Stanford time stamp:\"", ",", "parseTimeStamp", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "input", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Corpus file loaded\"", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "workdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "if", "debug", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Stanford parser workdir\"", ",", "workdir", "\n", "", "stanfordInput", "=", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"input\"", ")", "\n", "stanfordInputFile", "=", "codecs", ".", "open", "(", "stanfordInput", ",", "\"wt\"", ",", "\"utf-8\"", ")", "\n", "\n", "# Put penn tree lines in input file", "\n", "existingCount", "=", "0", "\n", "for", "sentence", "in", "corpusRoot", ".", "getiterator", "(", "\"sentence\"", ")", ":", "\n", "        ", "if", "sentence", ".", "find", "(", "\"sentenceanalyses\"", ")", "!=", "None", ":", "# old format", "\n", "            ", "sentenceAnalyses", "=", "setDefaultElement", "(", "sentence", ",", "\"sentenceanalyses\"", ")", "\n", "parses", "=", "setDefaultElement", "(", "sentenceAnalyses", ",", "\"parses\"", ")", "\n", "parse", "=", "getElementByAttrib", "(", "parses", ",", "\"parse\"", ",", "{", "\"parser\"", ":", "parser", "}", ")", "\n", "", "else", ":", "\n", "            ", "analyses", "=", "setDefaultElement", "(", "sentence", ",", "\"analyses\"", ")", "\n", "parse", "=", "getElementByAttrib", "(", "analyses", ",", "\"parse\"", ",", "{", "\"parser\"", ":", "parser", "}", ")", "\n", "", "if", "parse", "==", "None", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "parse", ".", "findall", "(", "\"dependency\"", ")", ")", ">", "0", ":", "\n", "            ", "if", "reparse", ":", "# remove existing stanford conversion", "\n", "                ", "for", "dep", "in", "parse", ".", "findall", "(", "\"dependency\"", ")", ":", "\n", "                    ", "parse", ".", "remove", "(", "dep", ")", "\n", "", "del", "parse", ".", "attrib", "[", "\"stanford\"", "]", "\n", "", "else", ":", "# don't reparse", "\n", "                ", "existingCount", "+=", "1", "\n", "continue", "\n", "", "", "pennTree", "=", "parse", ".", "get", "(", "\"pennstring\"", ")", "\n", "if", "pennTree", "==", "None", "or", "pennTree", "==", "\"\"", ":", "\n", "            ", "continue", "\n", "", "stanfordInputFile", ".", "write", "(", "pennTree", "+", "\"\\n\"", ")", "\n", "", "stanfordInputFile", ".", "close", "(", ")", "\n", "if", "existingCount", "!=", "0", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Skipping\"", ",", "existingCount", ",", "\"already converted sentences.\"", "\n", "\n", "# Run Stanford parser", "\n", "", "stanfordOutput", "=", "runSentenceProcess", "(", "runStanford", ",", "stanfordParserDir", ",", "stanfordInput", ",", "\n", "workdir", ",", "True", ",", "\"StanfordParser\"", ",", "\n", "\"Stanford Conversion\"", ",", "timeout", "=", "600", ",", "\n", "outputArgs", "=", "{", "\"encoding\"", ":", "\"latin1\"", ",", "\"errors\"", ":", "\"replace\"", "}", ",", "\n", "processArgs", "=", "{", "\"stanfordParserArgs\"", ":", "stanfordParserArgs", "}", ")", "\n", "#stanfordOutputFile = codecs.open(stanfordOutput, \"rt\", \"utf-8\")", "\n", "#stanfordOutputFile = codecs.open(stanfordOutput, \"rt\", \"latin1\", \"replace\")", "\n", "stanfordOutputFile", "=", "codecs", ".", "open", "(", "stanfordOutput", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "\n", "# Get output and insert dependencies", "\n", "noDepCount", "=", "0", "\n", "failCount", "=", "0", "\n", "sentenceCount", "=", "0", "\n", "for", "document", "in", "corpusRoot", ".", "findall", "(", "\"document\"", ")", ":", "\n", "        ", "for", "sentence", "in", "document", ".", "findall", "(", "\"sentence\"", ")", ":", "\n", "# Get parse", "\n", "            ", "if", "sentence", ".", "find", "(", "\"sentenceanalyses\"", ")", "!=", "None", ":", "# old format", "\n", "                ", "sentenceAnalyses", "=", "setDefaultElement", "(", "sentence", ",", "\"sentenceanalyses\"", ")", "\n", "parses", "=", "setDefaultElement", "(", "sentenceAnalyses", ",", "\"parses\"", ")", "\n", "parse", "=", "getElementByAttrib", "(", "parses", ",", "\"parse\"", ",", "{", "\"parser\"", ":", "parser", "}", ")", "\n", "", "else", ":", "\n", "                ", "analyses", "=", "setDefaultElement", "(", "sentence", ",", "\"analyses\"", ")", "\n", "parse", "=", "getElementByAttrib", "(", "analyses", ",", "\"parse\"", ",", "{", "\"parser\"", ":", "parser", "}", ")", "\n", "", "if", "parse", "==", "None", ":", "\n", "                ", "parse", "=", "ET", ".", "SubElement", "(", "analyses", ",", "\"parse\"", ")", "\n", "parse", ".", "set", "(", "\"parser\"", ",", "\"None\"", ")", "\n", "", "if", "reparse", ":", "\n", "                ", "assert", "len", "(", "parse", ".", "findall", "(", "\"dependency\"", ")", ")", "==", "0", "\n", "", "elif", "len", "(", "parse", ".", "findall", "(", "\"dependency\"", ")", ")", ">", "0", ":", "# don't reparse", "\n", "                ", "continue", "\n", "", "pennTree", "=", "parse", ".", "get", "(", "\"pennstring\"", ")", "\n", "if", "pennTree", "==", "None", "or", "pennTree", "==", "\"\"", ":", "\n", "                ", "parse", ".", "set", "(", "\"stanford\"", ",", "\"no_penn\"", ")", "\n", "continue", "\n", "", "parse", ".", "set", "(", "\"stanfordSource\"", ",", "\"TEES\"", ")", "# parser was run through this wrapper", "\n", "parse", ".", "set", "(", "\"stanfordDate\"", ",", "parseTimeStamp", ")", "# links the parse to the log file", "\n", "# Get tokens", "\n", "if", "sentence", ".", "find", "(", "\"analyses\"", ")", "!=", "None", ":", "\n", "                ", "tokenization", "=", "getElementByAttrib", "(", "sentence", ".", "find", "(", "\"analyses\"", ")", ",", "\"tokenization\"", ",", "{", "\"tokenizer\"", ":", "parse", ".", "get", "(", "\"tokenizer\"", ")", "}", ")", "\n", "", "else", ":", "\n", "                ", "tokenization", "=", "getElementByAttrib", "(", "sentence", ".", "find", "(", "\"sentenceanalyses\"", ")", ".", "find", "(", "\"tokenizations\"", ")", ",", "\"tokenization\"", ",", "{", "\"tokenizer\"", ":", "parse", ".", "get", "(", "\"tokenizer\"", ")", "}", ")", "\n", "", "assert", "tokenization", "!=", "None", "\n", "count", "=", "0", "\n", "tokenByIndex", "=", "{", "}", "\n", "for", "token", "in", "tokenization", ".", "findall", "(", "\"token\"", ")", ":", "\n", "                ", "tokenByIndex", "[", "count", "]", "=", "token", "\n", "count", "+=", "1", "\n", "# Insert dependencies", "\n", "", "origId", "=", "document", ".", "get", "(", "\"pmid\"", ")", "\n", "if", "origId", "==", "None", ":", "\n", "                ", "origId", "=", "document", ".", "get", "(", "\"origId\"", ")", "\n", "", "origId", "=", "str", "(", "origId", ")", "\n", "deps", "=", "addDependencies", "(", "stanfordOutputFile", ",", "parse", ",", "tokenByIndex", ",", "(", "sentence", ".", "get", "(", "\"id\"", ")", ",", "origId", ")", ")", "\n", "if", "len", "(", "deps", ")", "==", "0", ":", "\n", "                ", "parse", ".", "set", "(", "\"stanford\"", ",", "\"no_dependencies\"", ")", "\n", "noDepCount", "+=", "1", "\n", "if", "parse", ".", "get", "(", "\"stanfordAlignmentError\"", ")", "!=", "None", ":", "\n", "                    ", "failCount", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "parse", ".", "set", "(", "\"stanford\"", ",", "\"ok\"", ")", "\n", "if", "parse", ".", "get", "(", "\"stanfordAlignmentError\"", ")", "!=", "None", ":", "\n", "                    ", "failCount", "+=", "1", "\n", "parse", ".", "set", "(", "\"stanford\"", ",", "\"partial\"", ")", "\n", "", "", "sentenceCount", "+=", "1", "\n", "", "", "stanfordOutputFile", ".", "close", "(", ")", "\n", "# Remove work directory", "\n", "if", "not", "debug", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "workdir", ")", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Stanford conversion was done for\"", ",", "sentenceCount", ",", "\"sentences,\"", ",", "noDepCount", ",", "\"had no dependencies,\"", ",", "failCount", ",", "\"failed\"", "\n", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "output", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.StanfordParser.insertParse": [[359, 399], ["ProcessUtils.setDefaultElement", "ProcessUtils.getElementByAttrib", "ET.SubElement.get", "sorted", "ProcessUtils.getElementByAttrib", "StanfordParser.addDependencies", "ET.SubElement", "ET.SubElement.set", "len", "ET.SubElement.findall", "ET.SubElement.set", "extraAttributes.keys", "ET.SubElement.set", "sentence.find", "ProcessUtils.getElementByAttrib.findall", "len", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.findall", "ET.SubElement.remove", "ET.SubElement.get", "sentence.get", "sentence.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.setDefaultElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.StanfordParser.addDependencies", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "insertParse", "(", "sentence", ",", "stanfordOutputFile", ",", "parser", ",", "extraAttributes", "=", "{", "}", ",", "skipExtra", "=", "0", ")", ":", "\n", "# Get parse", "\n", "    ", "analyses", "=", "setDefaultElement", "(", "sentence", ",", "\"analyses\"", ")", "\n", "#parses = setDefaultElement(sentenceAnalyses, \"parses\")", "\n", "parse", "=", "getElementByAttrib", "(", "analyses", ",", "\"parse\"", ",", "{", "\"parser\"", ":", "parser", "}", ")", "\n", "if", "parse", "==", "None", ":", "\n", "        ", "parse", "=", "ET", ".", "SubElement", "(", "analyses", ",", "\"parse\"", ")", "\n", "parse", ".", "set", "(", "\"parser\"", ",", "\"None\"", ")", "\n", "# Remove existing dependencies", "\n", "", "if", "len", "(", "parse", ".", "findall", "(", "\"dependency\"", ")", ")", ">", "0", ":", "\n", "        ", "for", "dependency", "in", "parse", ".", "findall", "(", "\"dependency\"", ")", ":", "\n", "            ", "parse", ".", "remove", "(", "dependency", ")", "\n", "# If no penn tree exists, the stanford parsing can't have happened either", "\n", "", "", "pennTree", "=", "parse", ".", "get", "(", "\"pennstring\"", ")", "\n", "if", "pennTree", "==", "None", "or", "pennTree", "==", "\"\"", ":", "\n", "        ", "parse", ".", "set", "(", "\"stanford\"", ",", "\"no_penn\"", ")", "\n", "# Must not exit early, so that reading of the stanfordOutputFile stays in sync with the sentences", "\n", "#if len(parse.findall(\"dependency\")) > 0: # don't reparse", "\n", "#    return True", "\n", "#pennTree = parse.get(\"pennstring\")", "\n", "#if pennTree == None or pennTree == \"\":", "\n", "#    parse.set(\"stanford\", \"no_penn\")", "\n", "#    return False", "\n", "", "for", "attr", "in", "sorted", "(", "extraAttributes", ".", "keys", "(", ")", ")", ":", "\n", "        ", "parse", ".", "set", "(", "attr", ",", "extraAttributes", "[", "attr", "]", ")", "\n", "# Get tokens", "\n", "", "tokenByIndex", "=", "{", "}", "\n", "tokenization", "=", "getElementByAttrib", "(", "sentence", ".", "find", "(", "\"analyses\"", ")", ",", "\"tokenization\"", ",", "{", "\"tokenizer\"", ":", "parse", ".", "get", "(", "\"tokenizer\"", ")", "}", ")", "\n", "if", "tokenization", "!=", "None", ":", "\n", "        ", "count", "=", "0", "\n", "for", "token", "in", "tokenization", ".", "findall", "(", "\"token\"", ")", ":", "\n", "            ", "tokenByIndex", "[", "count", "]", "=", "token", "\n", "count", "+=", "1", "\n", "# Insert dependencies", "\n", "", "", "deps", "=", "addDependencies", "(", "stanfordOutputFile", ",", "parse", ",", "tokenByIndex", ",", "(", "sentence", ".", "get", "(", "\"id\"", ")", ",", "sentence", ".", "get", "(", "\"origId\"", ")", ")", ",", "skipExtra", "=", "skipExtra", ")", "\n", "if", "len", "(", "deps", ")", "==", "0", ":", "\n", "        ", "parse", ".", "set", "(", "\"stanford\"", ",", "\"no_dependencies\"", ")", "\n", "", "else", ":", "\n", "        ", "parse", ".", "set", "(", "\"stanford\"", ",", "\"ok\"", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.StanfordParser.insertParses": [[400, 473], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "os.path.exists", "ProgressCounter", "parsePath.find", "parsePath.split", "tarfile.open", "len", "document.get", "document.get", "str", "openFile", "ProgressCounter.update", "tarfile.open.close", "Utils.write", "document.get", "document.get", "os.path.join", "openFile", "openFile", "openFile", "document.findall", "openFile.close", "corpusTree.getroot.getiterator", "corpusTree.getroot.getiterator", "str", "os.path.join", "os.path.join", "os.path.join", "ProgressCounter.update", "StanfordParser.insertParse", "document.get", "sentence.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.openFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.openFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.openFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.openFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParse", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "insertParses", "(", "input", ",", "parsePath", ",", "output", "=", "None", ",", "parseName", "=", "\"McCC\"", ",", "extraAttributes", "=", "{", "}", ",", "skipExtra", "=", "0", ")", ":", "\n", "    ", "import", "tarfile", "\n", "from", "SentenceSplitter", "import", "openFile", "\n", "\"\"\"\n    Divide text in the \"text\" attributes of document and section \n    elements into sentence elements. These sentence elements are\n    inserted into their respective parent elements.\n    \"\"\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "input", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Corpus file loaded\"", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting parses from\"", ",", "parsePath", "\n", "assert", "os", ".", "path", ".", "exists", "(", "parsePath", ")", "\n", "if", "parsePath", ".", "find", "(", "\".tar.gz\"", ")", "!=", "-", "1", ":", "\n", "        ", "tarFilePath", ",", "parsePath", "=", "parsePath", ".", "split", "(", "\".tar.gz\"", ")", "\n", "tarFilePath", "+=", "\".tar.gz\"", "\n", "tarFile", "=", "tarfile", ".", "open", "(", "tarFilePath", ")", "\n", "if", "parsePath", "[", "0", "]", "==", "\"/\"", ":", "\n", "            ", "parsePath", "=", "parsePath", "[", "1", ":", "]", "\n", "", "", "else", ":", "\n", "        ", "tarFile", "=", "None", "\n", "\n", "", "docCount", "=", "0", "\n", "failCount", "=", "0", "\n", "sentenceCount", "=", "0", "\n", "docsWithStanford", "=", "0", "\n", "sentencesCreated", "=", "0", "\n", "sourceElements", "=", "[", "x", "for", "x", "in", "corpusRoot", ".", "getiterator", "(", "\"document\"", ")", "]", "+", "[", "x", "for", "x", "in", "corpusRoot", ".", "getiterator", "(", "\"section\"", ")", "]", "\n", "counter", "=", "ProgressCounter", "(", "len", "(", "sourceElements", ")", ",", "\"McCC Parse Insertion\"", ")", "\n", "for", "document", "in", "sourceElements", ":", "\n", "        ", "docCount", "+=", "1", "\n", "docId", "=", "document", ".", "get", "(", "\"id\"", ")", "\n", "origId", "=", "document", ".", "get", "(", "\"pmid\"", ")", "\n", "if", "origId", "==", "None", ":", "\n", "            ", "origId", "=", "document", ".", "get", "(", "\"origId\"", ")", "\n", "", "if", "origId", "==", "None", ":", "\n", "            ", "origId", "=", "document", ".", "get", "(", "\"id\"", ")", "\n", "", "origId", "=", "str", "(", "origId", ")", "\n", "if", "docId", "==", "None", ":", "\n", "            ", "docId", "=", "\"CORPUS.d\"", "+", "str", "(", "docCount", ")", "\n", "\n", "", "f", "=", "openFile", "(", "os", ".", "path", ".", "join", "(", "parsePath", ",", "origId", "+", "\".sd\"", ")", ",", "tarFile", ")", "\n", "if", "f", "==", "None", ":", "# file with BioNLP'11 extension not found, try BioNLP'09 extension", "\n", "            ", "f", "=", "openFile", "(", "os", ".", "path", ".", "join", "(", "parsePath", ",", "origId", "+", "\".dep\"", ")", ",", "tarFile", ")", "\n", "", "if", "f", "==", "None", ":", "# file with BioNLP'09 extension not found, try BioNLP'13 extension", "\n", "            ", "f", "=", "openFile", "(", "os", ".", "path", ".", "join", "(", "parsePath", ",", "origId", "+", "\".sdepcc\"", ")", ",", "tarFile", ")", "\n", "", "if", "f", "==", "None", ":", "# file with BioNLP'09 extension not found, try BioNLP'13 extension", "\n", "            ", "f", "=", "openFile", "(", "os", ".", "path", ".", "join", "(", "parsePath", ",", "origId", "+", "\".sdep\"", ")", ",", "tarFile", ")", "\n", "", "if", "f", "!=", "None", ":", "\n", "            ", "sentences", "=", "document", ".", "findall", "(", "\"sentence\"", ")", "\n", "# TODO: Following for-loop is the same as when used with a real parser, and should", "\n", "# be moved to its own function.", "\n", "for", "sentence", "in", "sentences", ":", "\n", "                ", "sentenceCount", "+=", "1", "\n", "counter", ".", "update", "(", "0", ",", "\"Processing Documents (\"", "+", "sentence", ".", "get", "(", "\"id\"", ")", "+", "\"/\"", "+", "origId", "+", "\"): \"", ")", "\n", "if", "not", "insertParse", "(", "sentence", ",", "f", ",", "parseName", ",", "extraAttributes", "=", "{", "}", ",", "skipExtra", "=", "skipExtra", ")", ":", "\n", "                    ", "failCount", "+=", "1", "\n", "", "", "f", ".", "close", "(", ")", "\n", "", "counter", ".", "update", "(", "1", ",", "\"Processing Documents (\"", "+", "document", ".", "get", "(", "\"id\"", ")", "+", "\"/\"", "+", "origId", "+", "\"): \"", ")", "\n", "\n", "", "if", "tarFile", "!=", "None", ":", "\n", "        ", "tarFile", ".", "close", "(", ")", "\n", "#print >> sys.stderr, \"Sentence splitting created\", sentencesCreated, \"sentences\"", "\n", "#print >> sys.stderr, docsWithSentences, \"/\", docCount, \"documents have stanford parses\"", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Stanford conversion was inserted to\"", ",", "sentenceCount", ",", "\"sentences\"", "#, failCount, \"failed\"", "\n", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "output", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.ProcessWrapper.__init__": [[19, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "processes", ")", ":", "\n", "        ", "self", ".", "processes", "=", "processes", "# subprocesses", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.ProcessWrapper.kill": [[22, 37], ["process.poll", "process.kill", "process.poll", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.ProcessWrapper.poll", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.ProcessWrapper.kill", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.ProcessWrapper.poll"], ["", "def", "kill", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Kill all subprocesses\n        \"\"\"", "\n", "for", "process", "in", "self", ".", "processes", ":", "\n", "            ", "try", ":", "\n", "                ", "process", ".", "kill", "(", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "", "for", "process", "in", "self", ".", "processes", ":", "\n", "            ", "poll", "=", "process", ".", "poll", "(", ")", "\n", "#print poll", "\n", "while", "poll", "==", "None", ":", "\n", "                ", "poll", "=", "process", ".", "poll", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "#print poll", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.ProcessWrapper.poll": [[39, 47], ["process.poll"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.ProcessWrapper.poll"], ["", "", "", "def", "poll", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        If any subprocess is running, returns None (not finished).\n        \"\"\"", "\n", "for", "process", "in", "self", ".", "processes", ":", "\n", "            ", "if", "process", ".", "poll", "(", ")", "==", "None", ":", "\n", "                ", "return", "None", "\n", "", "", "return", "\"FINISHED\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.waitForProcess": [[48, 99], ["Utils.ProgressCounter.ProgressCounter", "time.time", "time.time", "Utils.ProgressCounter.ProgressCounter.markFinished", "os.path.exists", "process.poll", "codecs.open", "codecs.open.close", "time.time", "Utils.ProgressCounter.ProgressCounter.update", "time.sleep", "time.time", "line.strip", "time.time", "process.kill", "time.time", "str", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProgressCounter.ProgressCounter.markFinished", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.ProcessWrapper.poll", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.ProcessWrapper.kill"], ["", "", "def", "waitForProcess", "(", "process", ",", "numCorpusSentences", ",", "measureByGap", ",", "outputFile", ",", "counterName", ",", "updateMessage", ",", "timeout", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Waits for a process to finish, and tracks the number of entities it writes\n    to it's outputfile. If writing a sentence takes longer than the timeout, \n    the process is considered stalled and is killed.\n    \"\"\"", "\n", "maxStartupTime", "=", "600", "# Give extra time for the process to start up (even if it creates immediately an empty output file)", "\n", "counter", "=", "ProgressCounter", "(", "numCorpusSentences", ",", "counterName", ")", "\n", "counter", ".", "showMilliseconds", "=", "True", "\n", "prevNumSentences", "=", "0", "# Number of output sentences on previous check", "\n", "finalCheckLeft", "=", "True", "# Make one final check to update counters", "\n", "processStatus", "=", "None", "# When None, process not finished", "\n", "prevTime", "=", "time", ".", "time", "(", ")", "\n", "startTime", "=", "time", ".", "time", "(", ")", "\n", "# Wait until process is finished and periodically check it's progress.", "\n", "while", "processStatus", "==", "None", "or", "finalCheckLeft", ":", "\n", "        ", "if", "processStatus", "!=", "None", ":", "# Extra loop to let counters finish", "\n", "            ", "finalCheckLeft", "=", "False", "# Done only once", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "outputFile", "[", "0", "]", ")", ":", "# Output file has already appeared on disk", "\n", "# Measure number of sentences in output file", "\n", "            ", "numSentences", "=", "0", "\n", "f", "=", "codecs", ".", "open", "(", "outputFile", "[", "0", "]", ",", "\"rt\"", ",", "**", "outputFile", "[", "1", "]", ")", "\n", "for", "line", "in", "f", ":", "\n", "                ", "if", "measureByGap", ":", "\n", "                    ", "if", "line", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "                        ", "numSentences", "+=", "1", "\n", "", "", "else", ":", "\n", "                    ", "numSentences", "+=", "1", "\n", "", "", "f", ".", "close", "(", ")", "\n", "# Update status", "\n", "if", "numSentences", "-", "prevNumSentences", "!=", "0", ":", "# Process has progressed", "\n", "                ", "counter", ".", "update", "(", "numSentences", "-", "prevNumSentences", ",", "updateMessage", "+", "\": \"", ")", "\n", "", "if", "finalCheckLeft", ":", "# This is a normal loop, not the final check", "\n", "# Startuptime hasn't yet passed or process has made progress", "\n", "                ", "if", "time", ".", "time", "(", ")", "-", "startTime", "<", "maxStartupTime", "or", "numSentences", "-", "prevNumSentences", "!=", "0", ":", "\n", "#if prevNumSentences == 0 or numSentences - prevNumSentences != 0:", "\n", "                    ", "prevTime", "=", "time", ".", "time", "(", ")", "# reset timeout", "\n", "", "else", ":", "# Nothing happened on this update, check whether process hung", "\n", "                    ", "elapsedTime", "=", "time", ".", "time", "(", ")", "-", "prevTime", "\n", "if", "timeout", "!=", "None", "and", "elapsedTime", ">", "timeout", ":", "\n", "                        ", "print", ">>", "sys", ".", "stderr", ",", "\"Process timed out (\"", "+", "str", "(", "elapsedTime", ")", "+", "\" vs. \"", "+", "str", "(", "timeout", ")", "+", "\")\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Killing process\"", "\n", "process", ".", "kill", "(", ")", "\n", "", "", "prevNumSentences", "=", "numSentences", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "", "", "else", ":", "# Output file doesn't exist yet", "\n", "            ", "prevTime", "=", "time", ".", "time", "(", ")", "# reset counter if output file hasn't been created", "\n", "", "processStatus", "=", "process", ".", "poll", "(", ")", "# Get process status, None == still running", "\n", "\n", "", "counter", ".", "markFinished", "(", ")", "# If we get this far, don't show the error message even if process didn't finish", "\n", "return", "(", "numSentences", ",", "numCorpusSentences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.makeSubset": [[100, 117], ["os.path.join", "codecs.open", "codecs.open", "codecs.open.close", "codecs.open.close", "codecs.open.write", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "makeSubset", "(", "input", ",", "workdir", ",", "fromLine", ")", ":", "\n", "    ", "\"\"\"\n    Make a subset of the input data from \"fromLine\" to end of input file.\n    \"\"\"", "\n", "newInput", "=", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"input-from-\"", "+", "str", "(", "fromLine", ")", ")", "\n", "newInputFile", "=", "codecs", ".", "open", "(", "newInput", ",", "\"wt\"", ",", "\"utf-8\"", ")", "\n", "\n", "inputFile", "=", "codecs", ".", "open", "(", "input", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "lineCount", "=", "-", "1", "\n", "for", "line", "in", "inputFile", ":", "\n", "        ", "lineCount", "+=", "1", "\n", "if", "lineCount", "<", "fromLine", ":", "\n", "            ", "continue", "\n", "", "newInputFile", ".", "write", "(", "line", ")", "\n", "", "inputFile", ".", "close", "(", ")", "\n", "newInputFile", ".", "close", "(", ")", "\n", "return", "newInput", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.mergeOutput": [[118, 158], ["os.listdir", "outputs.sort", "codecs.open", "range", "codecs.open.close", "os.path.join", "len", "codecs.open", "codecs.open.close", "filename.find", "outputs.append", "os.path.join", "codecs.open.write", "len", "codecs.open.write", "codecs.open.write", "int", "line.strip", "filename.rsplit"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "mergeOutput", "(", "dir", ",", "numCorpusSentences", ",", "measureByGap", ",", "outputArgs", "=", "{", "}", ")", ":", "\n", "    ", "\"\"\"\n    Merge output files (multiple files may have been created if program failed on a sentence)\n    \"\"\"", "\n", "filenames", "=", "os", ".", "listdir", "(", "dir", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "if", "filename", ".", "find", "(", "\"output-from\"", ")", "!=", "-", "1", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "int", "(", "filename", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "-", "1", "]", ")", ",", "filename", ")", ")", "\n", "", "", "outputs", ".", "sort", "(", ")", "# Order output sets by their first sentence index", "\n", "#print outputs", "\n", "\n", "mergedOutput", "=", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "\"merged-output\"", ")", ",", "\"wt\"", ",", "**", "outputArgs", ")", "\n", "\n", "missingSentences", "=", "0", "\n", "numSentences", "=", "0", "\n", "# Go through output subsets in order", "\n", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", ":", "\n", "        ", "f", "=", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "outputs", "[", "i", "]", "[", "1", "]", ")", ",", "\"rt\"", ",", "**", "outputArgs", ")", "\n", "for", "line", "in", "f", ":", "# Copy to merged file", "\n", "            ", "mergedOutput", ".", "write", "(", "line", ")", "\n", "if", "measureByGap", ":", "\n", "                ", "if", "line", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "                    ", "numSentences", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "numSentences", "+=", "1", "\n", "", "", "f", ".", "close", "(", ")", "\n", "# If sentences are missing from output, write empty lines in merged output", "\n", "if", "i", "<", "len", "(", "outputs", ")", "-", "1", ":", "# not last output", "\n", "            ", "while", "numSentences", "<", "outputs", "[", "i", "+", "1", "]", "[", "0", "]", ":", "# Start of next subset not reached yet", "\n", "                ", "mergedOutput", ".", "write", "(", "\"\\n\"", ")", "\n", "numSentences", "+=", "1", "\n", "missingSentences", "+=", "1", "\n", "", "", "else", ":", "# last of the output subsets", "\n", "            ", "while", "numSentences", "<", "numCorpusSentences", ":", "# End of whole data not reached yet", "\n", "                ", "mergedOutput", ".", "write", "(", "\"\\n\"", ")", "\n", "numSentences", "+=", "1", "\n", "missingSentences", "+=", "1", "\n", "", "", "", "mergedOutput", ".", "close", "(", ")", "\n", "return", "missingSentences", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.getSubsetEndPos": [[159, 169], ["ProcessUtils.getLines", "int", "subsetFileName.find", "subsetFileName.rsplit"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.getLines"], ["", "def", "getSubsetEndPos", "(", "subsetFileName", ",", "measureByGap", ")", ":", "\n", "    ", "\"\"\"\n    Return the sentence count to which this process reached by counting\n    the sentences in the output file.\n    \"\"\"", "\n", "if", "subsetFileName", ".", "find", "(", "\"-from-\"", ")", "==", "-", "1", ":", "\n", "        ", "return", "0", "\n", "", "numSentences", "=", "getLines", "(", "subsetFileName", ",", "measureByGap", ")", "\n", "subsetPos", "=", "int", "(", "subsetFileName", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "-", "1", "]", ")", "\n", "return", "subsetPos", "+", "numSentences", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.getLines": [[170, 184], ["codecs.open", "codecs.open.close", "line.strip"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["", "def", "getLines", "(", "filename", ",", "measureByGap", ")", ":", "\n", "    ", "\"\"\"\n    Number of sentences in the file, measured either in lines, or by empty \"gap\" lines\n    \"\"\"", "\n", "numSentences", "=", "0", "\n", "f", "=", "codecs", ".", "open", "(", "filename", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "if", "measureByGap", ":", "\n", "            ", "if", "line", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "                ", "numSentences", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "numSentences", "+=", "1", "\n", "", "", "f", ".", "close", "(", ")", "\n", "return", "numSentences", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.runSentenceProcess": [[185, 235], ["os.path.abspath", "codecs.open", "codecs.open.close", "os.getcwd", "os.chdir", "os.chdir", "ProcessUtils.mergeOutput", "os.path.abspath", "codecs.open", "codecs.open.close", "os.path.join", "launchProcess", "ProcessUtils.waitForProcess", "os.path.join", "str", "ProcessUtils.getSubsetEndPos", "ProcessUtils.makeSubset", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.mergeOutput", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.waitForProcess", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.getSubsetEndPos", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MakeSubset.makeSubset"], ["", "def", "runSentenceProcess", "(", "launchProcess", ",", "programDir", ",", "input", ",", "workdir", ",", "measureByGap", ",", "counterName", ",", "updateMessage", ",", "timeout", "=", "None", ",", "processArgs", "=", "{", "}", ",", "outputArgs", "=", "{", "}", ")", ":", "\n", "    ", "\"\"\"\n    Runs a process on input sentences, and in case of problems skips one sentence and \n    reruns the process on the remaining ones.\n    \"\"\"", "\n", "# Count input sentences", "\n", "input", "=", "os", ".", "path", ".", "abspath", "(", "input", ")", "\n", "origInput", "=", "input", "\n", "numCorpusSentences", "=", "0", "\n", "inputFile", "=", "codecs", ".", "open", "(", "input", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "for", "line", "in", "inputFile", ":", "\n", "        ", "numCorpusSentences", "+=", "1", "\n", "", "inputFile", ".", "close", "(", ")", "\n", "\n", "if", "\"encoding\"", "not", "in", "outputArgs", ":", "\n", "        ", "outputArgs", "[", "\"encoding\"", "]", "=", "\"utf-8\"", "\n", "\n", "", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "programDir", ")", "\n", "finished", "=", "False", "\n", "startLine", "=", "0", "\n", "while", "not", "finished", ":", "\n", "# Count lines in input file (input data must be in a one sentence per line -format)", "\n", "        ", "inputLines", "=", "0", "\n", "inputFile", "=", "codecs", ".", "open", "(", "input", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "for", "line", "in", "inputFile", ":", "\n", "            ", "inputLines", "+=", "1", "\n", "", "inputFile", ".", "close", "(", ")", "\n", "\n", "output", "=", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"output-from-\"", "+", "str", "(", "startLine", ")", ")", "\n", "process", "=", "launchProcess", "(", "input", ",", "output", ",", "**", "processArgs", ")", "\n", "result", "=", "waitForProcess", "(", "process", ",", "inputLines", ",", "measureByGap", ",", "(", "output", ",", "outputArgs", ")", ",", "counterName", ",", "updateMessage", ",", "timeout", ")", "\n", "if", "result", "[", "0", "]", "!=", "result", "[", "1", "]", ":", "\n", "            ", "gap", "=", "1", "\n", "startLine", "=", "getSubsetEndPos", "(", "output", ",", "measureByGap", ")", "+", "gap", "\n", "if", "startLine", ">=", "numCorpusSentences", ":", "\n", "                ", "finished", "=", "True", "\n", "", "else", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Process failed for sentence \"", "+", "str", "(", "startLine", "-", "gap", ")", "+", "\", rerunning from sentence\"", ",", "startLine", "\n", "input", "=", "makeSubset", "(", "origInput", ",", "workdir", ",", "startLine", ")", "\n", "", "", "else", ":", "\n", "            ", "finished", "=", "True", "\n", "", "", "os", ".", "chdir", "(", "cwd", ")", "\n", "\n", "numMissedSentences", "=", "mergeOutput", "(", "workdir", ",", "numCorpusSentences", ",", "measureByGap", ",", "outputArgs", "=", "outputArgs", ")", "\n", "if", "numMissedSentences", "==", "0", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Processed succesfully all sentences\"", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, processing failed for\"", ",", "numMissedSentences", ",", "\"out of\"", ",", "numCorpusSentences", ",", "\"sentences\"", "\n", "", "return", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"merged-output\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.getElementIndex": [[236, 243], ["None"], "function", ["None"], ["", "def", "getElementIndex", "(", "parent", ",", "element", ")", ":", "\n", "    ", "index", "=", "0", "\n", "for", "e", "in", "parent", ":", "\n", "        ", "if", "e", "==", "element", ":", "\n", "            ", "return", "index", "\n", "", "index", "+=", "1", "\n", "", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.getPrevElementIndex": [[244, 252], ["None"], "function", ["None"], ["", "def", "getPrevElementIndex", "(", "parent", ",", "eTag", ")", ":", "\n", "    ", "index", "=", "0", "\n", "elemIndex", "=", "-", "1", "\n", "for", "element", "in", "parent", ":", "\n", "        ", "if", "element", ".", "tag", "==", "eTag", ":", "\n", "            ", "elemIndex", "=", "index", "\n", "", "index", "+=", "1", "\n", "", "return", "elemIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.getElementByAttrib": [[253, 263], ["parent.getiterator", "attDict.iteritems", "element.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getElementByAttrib", "(", "parent", ",", "tag", ",", "attDict", ")", ":", "\n", "    ", "for", "element", "in", "parent", ".", "getiterator", "(", ")", ":", "\n", "        ", "if", "element", ".", "tag", "==", "tag", ":", "\n", "            ", "found", "=", "True", "\n", "for", "k", ",", "v", "in", "attDict", ".", "iteritems", "(", ")", ":", "\n", "                ", "if", "element", ".", "get", "(", "k", ")", "!=", "v", ":", "\n", "                    ", "found", "=", "False", "\n", "", "", "if", "found", ":", "\n", "                ", "return", "element", "\n", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.setDefaultElement": [[264, 270], ["parent.find", "ET.Element", "parent.append"], "function", ["None"], ["", "def", "setDefaultElement", "(", "parent", ",", "name", ")", ":", "\n", "    ", "element", "=", "parent", ".", "find", "(", "name", ")", "\n", "if", "element", "==", "None", ":", "\n", "        ", "element", "=", "ET", ".", "Element", "(", "name", ")", "\n", "parent", ".", "append", "(", "element", ")", "\n", "", "return", "element", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.openFile": [[22, 32], ["os.path.exists", "tarFile.extractfile", "codecs.open", "tarFile.getmember"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["def", "openFile", "(", "path", ",", "tarFile", "=", "None", ")", ":", "\n", "    ", "if", "tarFile", "!=", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "tarFile", ".", "extractfile", "(", "tarFile", ".", "getmember", "(", "path", ")", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "pass", "\n", "", "", "else", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "return", "codecs", ".", "open", "(", "path", ",", "\"rt\"", ",", "\"utf-8\"", ")", "#open(path, \"rt\")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences": [[33, 103], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "os.path.exists", "Utils.ProgressCounter.ProgressCounter", "tokenizationPath.find", "tokenizationPath.split", "tarfile.open", "len", "document.get", "str", "Utils.ProgressCounter.ProgressCounter.update", "document.get", "tarfile.open.close", "Utils.write", "document.get", "document.find", "document.get", "os.path.join", "SentenceSplitter.openFile", "SentenceSplitter.alignSentences", "openFile.close", "GeniaSentenceSplitter.moveElements", "corpusTree.getroot.getiterator", "corpusTree.getroot.getiterator", "str", "os.path.join", "SentenceSplitter.openFile", "openFile.readlines", "document.get.strip", "document.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.openFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.alignSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.GeniaSentenceSplitter.moveElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.openFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "makeSentences", "(", "input", ",", "tokenizationPath", ",", "output", "=", "None", ",", "removeText", "=", "False", ",", "escDict", "=", "{", "}", ",", "ignoreErrors", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Divide text in the \"text\" attributes of document and section \n    elements into sentence elements. These sentence elements are\n    inserted into their respective parent elements.\n    \"\"\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "input", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Corpus file loaded\"", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting tokenizations from\"", ",", "tokenizationPath", "\n", "assert", "os", ".", "path", ".", "exists", "(", "tokenizationPath", ")", "\n", "if", "tokenizationPath", ".", "find", "(", "\".tar.gz\"", ")", "!=", "-", "1", ":", "\n", "        ", "tarFilePath", ",", "tokenizationPath", "=", "tokenizationPath", ".", "split", "(", "\".tar.gz\"", ")", "\n", "tarFilePath", "+=", "\".tar.gz\"", "\n", "tarFile", "=", "tarfile", ".", "open", "(", "tarFilePath", ")", "\n", "if", "tokenizationPath", "[", "0", "]", "==", "\"/\"", ":", "\n", "            ", "tokenizationPath", "=", "tokenizationPath", "[", "1", ":", "]", "\n", "", "", "else", ":", "\n", "        ", "tarFile", "=", "None", "\n", "\n", "", "docCount", "=", "0", "\n", "docsWithSentences", "=", "0", "\n", "sentencesCreated", "=", "0", "\n", "sourceElements", "=", "[", "x", "for", "x", "in", "corpusRoot", ".", "getiterator", "(", "\"document\"", ")", "]", "+", "[", "x", "for", "x", "in", "corpusRoot", ".", "getiterator", "(", "\"section\"", ")", "]", "\n", "counter", "=", "ProgressCounter", "(", "len", "(", "sourceElements", ")", ",", "\"Sentence Splitting\"", ")", "\n", "for", "document", "in", "sourceElements", ":", "\n", "        ", "docCount", "+=", "1", "\n", "origId", "=", "document", ".", "get", "(", "\"pmid\"", ")", "\n", "if", "origId", "==", "None", ":", "\n", "            ", "origId", "=", "document", ".", "get", "(", "\"origId\"", ")", "\n", "", "origId", "=", "str", "(", "origId", ")", "\n", "counter", ".", "update", "(", "1", ",", "\"Splitting Documents (\"", "+", "document", ".", "get", "(", "\"id\"", ")", "+", "\"/\"", "+", "origId", "+", "\"): \"", ")", "\n", "docId", "=", "document", ".", "get", "(", "\"id\"", ")", "\n", "if", "docId", "==", "None", ":", "\n", "            ", "docId", "=", "\"CORPUS.d\"", "+", "str", "(", "docCount", ")", "\n", "", "if", "document", ".", "find", "(", "\"sentence\"", ")", "==", "None", ":", "# no existing sentence split                ", "\n", "            ", "text", "=", "document", ".", "get", "(", "\"text\"", ")", "\n", "if", "text", "==", "None", "or", "text", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "                ", "continue", "\n", "\n", "", "newFile", "=", "os", ".", "path", ".", "join", "(", "tokenizationPath", ",", "origId", "+", "\".tok\"", ")", "\n", "f", "=", "openFile", "(", "newFile", ",", "tarFile", ")", "\n", "if", "f", "==", "None", ":", "# file with BioNLP'11 extension not found, try BioNLP'09 extension", "\n", "                ", "oldFile", "=", "os", ".", "path", ".", "join", "(", "tokenizationPath", ",", "origId", "+", "\".tokenized\"", ")", "\n", "f", "=", "openFile", "(", "oldFile", ",", "tarFile", ")", "\n", "if", "f", "==", "None", ":", "# no tokenization found", "\n", "                    ", "continue", "\n", "", "", "sentencesCreated", "+=", "alignSentences", "(", "document", ",", "f", ".", "readlines", "(", ")", ",", "escDict", ",", "ignoreErrors", "=", "ignoreErrors", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# Remove original text", "\n", "if", "removeText", ":", "\n", "                ", "del", "document", "[", "\"text\"", "]", "\n", "# Move elements from document element to sentences", "\n", "", "moveElements", "(", "document", ")", "\n", "docsWithSentences", "+=", "1", "\n", "", "else", ":", "\n", "            ", "docsWithSentences", "+=", "1", "\n", "\n", "", "", "if", "tarFile", "!=", "None", ":", "\n", "        ", "tarFile", ".", "close", "(", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Sentence splitting created\"", ",", "sentencesCreated", ",", "\"sentences\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "docsWithSentences", ",", "\"/\"", ",", "docCount", ",", "\"documents have sentences\"", "\n", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "output", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.alignSentences": [[104, 171], ["document.get", "sText.replace.strip", "sorted", "sText.replace.split", "ET.Element", "ET.Element.set", "ET.Element.set", "ET.Element.set", "document.append", "escDict.keys", "sText.replace.replace", "document.get.find", "ET.Element.set", "len", "document.get", "document.get", "len", "len", "str", "str", "len", "ET.Element.set", "sToken.encode", "document.get", "document.get", "document.get", "document.get", "document.get.encode", "text[].encode", "prevSText.encode", "sText.replace.encode", "sToken.encode", "prevSentence.set", "str", "document.get", "text[].strip"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "alignSentences", "(", "document", ",", "sentenceTexts", ",", "escDict", "=", "{", "}", ",", "ignoreErrors", "=", "False", ")", ":", "\n", "    ", "text", "=", "document", ".", "get", "(", "\"text\"", ")", "\n", "start", "=", "0", "# sentences are consecutively aligned to the text for charOffsets", "\n", "cEnd", "=", "0", "\n", "sentenceCount", "=", "0", "\n", "head", "=", "None", "\n", "sentenceStart", "=", "None", "\n", "#text = text.replace(\"\\n\", \" \") # should stop sentence splitter from crashing.", "\n", "#text = text.replace(\"  \", \" \") # should stop sentence splitter from crashing.", "\n", "sText", "=", "None", "\n", "prevSentence", "=", "None", "\n", "for", "sText", "in", "sentenceTexts", ":", "\n", "        ", "sText", "=", "sText", ".", "strip", "(", ")", "# The text of the sentence", "\n", "for", "key", "in", "sorted", "(", "escDict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "sText", "=", "sText", ".", "replace", "(", "key", ",", "escDict", "[", "key", "]", ")", "\n", "", "if", "sText", "==", "\"\"", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, empty sentence in\"", ",", "document", ".", "get", "(", "\"id\"", ")", ",", "document", ".", "get", "(", "\"origId\"", ")", "\n", "continue", "\n", "", "isFirst", "=", "True", "\n", "prevCStart", "=", "None", "\n", "for", "sToken", "in", "sText", ".", "split", "(", ")", ":", "\n", "# Find the starting point of the token in the text. This", "\n", "# point must be after previous sentences", "\n", "            ", "cStart", "=", "text", ".", "find", "(", "sToken", ",", "start", ")", "# find start position", "\n", "if", "ignoreErrors", "and", "cStart", "==", "-", "1", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, cannot align token\"", ",", "sToken", ".", "encode", "(", "\"utf-8\"", ")", ",", "\"for document\"", ",", "document", ".", "get", "(", "\"id\"", ")", ",", "document", ".", "get", "(", "\"origId\"", ")", "\n", "prevCStart", "=", "cStart", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "assert", "cStart", "!=", "-", "1", ",", "(", "text", ",", "sText", ",", "sToken", ",", "start", ",", "document", ".", "get", "(", "\"id\"", ")", ",", "document", ".", "get", "(", "\"origId\"", ")", ")", "\n", "", "if", "prevCStart", "!=", "-", "1", "and", "not", "text", "[", "cEnd", ":", "cStart", "]", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"-----------------------------\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"text:\"", ",", "text", ".", "encode", "(", "\"utf-8\"", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"text[cEnd:cStart+1]:\"", ",", "text", "[", "cEnd", ":", "cStart", "+", "1", "]", ".", "encode", "(", "\"utf-8\"", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"prevSText:\"", ",", "prevSText", ".", "encode", "(", "\"utf-8\"", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"sText:\"", ",", "sText", ".", "encode", "(", "\"utf-8\"", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"sToken:\"", ",", "sToken", ".", "encode", "(", "\"utf-8\"", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"start:\"", ",", "start", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"-----------------------------\"", "\n", "assert", "False", "\n", "#assert text[cEnd:cStart].strip() == \"\", (text, text[cEnd:cStart+1], sText, sToken, start) # only whitespace should separate words", "\n", "", "tail", "=", "None", "\n", "if", "isFirst", ":", "\n", "                ", "sentenceStart", "=", "cStart", "\n", "if", "cStart", "-", "start", "!=", "0", "and", "prevSentence", "!=", "None", ":", "\n", "                    ", "prevSentence", ".", "set", "(", "\"tail\"", ",", "text", "[", "start", ":", "cStart", "]", ")", "\n", "", "", "if", "cEnd", "==", "0", "and", "cStart", "!=", "0", ":", "\n", "                ", "head", "=", "text", "[", "cEnd", ":", "cStart", "]", "\n", "", "cEnd", "=", "cStart", "+", "len", "(", "sToken", ")", "# end position is determined by length", "\n", "start", "=", "cStart", "+", "len", "(", "sToken", ")", "# for next token, start search from end of this one", "\n", "isFirst", "=", "False", "\n", "prevCStart", "=", "cStart", "\n", "# make sentence element", "\n", "", "e", "=", "ET", ".", "Element", "(", "\"sentence\"", ")", "\n", "if", "head", "!=", "None", ":", "\n", "            ", "e", ".", "set", "(", "\"head\"", ",", "head", ")", "\n", "", "e", ".", "set", "(", "\"text\"", ",", "text", "[", "sentenceStart", ":", "cEnd", "]", ")", "\n", "e", ".", "set", "(", "\"charOffset\"", ",", "str", "(", "sentenceStart", ")", "+", "\"-\"", "+", "str", "(", "cEnd", ")", ")", "# NOTE: check", "\n", "e", ".", "set", "(", "\"id\"", ",", "document", ".", "get", "(", "\"id\"", ")", "+", "\".s\"", "+", "str", "(", "sentenceCount", ")", ")", "\n", "document", ".", "append", "(", "e", ")", "# add sentence to parent element", "\n", "prevSentence", "=", "e", "\n", "sentenceCount", "+=", "1", "\n", "if", "sentenceCount", "==", "len", "(", "sentenceTexts", ")", ":", "# set tail of last sentence in document", "\n", "            ", "if", "cEnd", "<=", "len", "(", "text", ")", ":", "\n", "                ", "e", ".", "set", "(", "\"tail\"", ",", "text", "[", "cEnd", ":", "]", ")", "\n", "", "", "prevSText", "=", "sText", "\n", "", "return", "sentenceCount", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.test": [[23, 25], ["None"], "function", ["None"], ["def", "test", "(", "progDir", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.install": [[26, 45], ["Tool.finalizeInstall", "os.path.join", "Utils.downloadAndExtract", "Tool.testPrograms", "Utils.downloadAndExtract", "subprocess.call", "subprocess.call", "javaHome.strip"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.finalizeInstall", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.testPrograms"], ["", "def", "install", "(", "destDir", "=", "None", ",", "downloadDir", "=", "None", ",", "redownload", "=", "False", ",", "compile", "=", "False", ",", "javaHome", "=", "None", ",", "updateLocalSettings", "=", "False", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Installing BANNER\"", "\n", "if", "downloadDir", "==", "None", ":", "\n", "        ", "downloadDir", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"tools/download\"", ")", "\n", "", "if", "destDir", "==", "None", ":", "\n", "        ", "destDir", "=", "Settings", ".", "DATAPATH", "\n", "", "if", "compile", ":", "\n", "        ", "Download", ".", "downloadAndExtract", "(", "Settings", ".", "URL", "[", "\"BANNER_SOURCE\"", "]", ",", "destDir", "+", "\"/tools/BANNER\"", ",", "downloadDir", "+", "\"/banner.tar.gz\"", ",", "\"trunk\"", ",", "False", ",", "redownload", "=", "redownload", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Compiling BANNER with ANT\"", "\n", "Tool", ".", "testPrograms", "(", "\"BANNER\"", ",", "[", "\"ant\"", "]", ",", "{", "\"ant\"", ":", "\"ant -version\"", "}", ")", "\n", "#/usr/lib/jvm/java-6-openjdk", "\n", "if", "javaHome", "==", "None", "or", "javaHome", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "            ", "subprocess", ".", "call", "(", "\"cd \"", "+", "destDir", "+", "\"/tools/BANNER; ant -f build_ext.xml\"", ",", "shell", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "subprocess", ".", "call", "(", "\"cd \"", "+", "destDir", "+", "\"/tools/BANNER; export JAVA_HOME=\"", "+", "javaHome", "+", "\"; ant -f build_ext.xml\"", ",", "shell", "=", "True", ")", "\n", "", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Downloading precompiled BANNER\"", "\n", "Download", ".", "downloadAndExtract", "(", "Settings", ".", "URL", "[", "\"BANNER_COMPILED\"", "]", ",", "destDir", "+", "\"/tools\"", ",", "downloadDir", ",", "redownload", "=", "redownload", ")", "\n", "", "Tool", ".", "finalizeInstall", "(", "[", "]", ",", "None", ",", "destDir", "+", "\"/tools/BANNER\"", ",", "{", "\"BANNER_DIR\"", ":", "destDir", "+", "\"/tools/BANNER\"", "}", ",", "updateLocalSettings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.makeConfigXML": [[51, 101], ["ET.Element", "ET.SubElement", "ET.SubElement", "ET.SubElement", "codecs.open().close", "codecs.open().close", "ET.SubElement", "ET.SubElement", "ET.SubElement", "Utils.write", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "ET.SubElement", "codecs.open", "codecs.open", "ET.SubElement", "ET.SubElement", "ET.SubElement", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "def", "makeConfigXML", "(", "workdir", ",", "bannerDir", ",", "oldVersion", "=", "True", ")", ":", "\n", "    ", "conf", "=", "ET", ".", "Element", "(", "\"banner-configuration\"", ")", "\n", "banner", "=", "ET", ".", "SubElement", "(", "conf", ",", "\"banner\"", ")", "\n", "eval", "=", "ET", ".", "SubElement", "(", "banner", ",", "\"eval\"", ")", "\n", "datasetName", "=", "ET", ".", "SubElement", "(", "eval", ",", "\"datasetName\"", ")", ".", "text", "=", "\"banner.eval.dataset.BC2GMDataset\"", "\n", "# Dataset", "\n", "dataset", "=", "ET", ".", "SubElement", "(", "eval", ",", "\"dataset\"", ")", "\n", "ET", ".", "SubElement", "(", "dataset", ",", "\"sentenceFilename\"", ")", ".", "text", "=", "workdir", "+", "\"/input.txt\"", "\n", "ET", ".", "SubElement", "(", "dataset", ",", "\"mentionTestFilename\"", ")", ".", "text", "=", "workdir", "+", "\"/empty.eval\"", "\n", "ET", ".", "SubElement", "(", "dataset", ",", "\"mentionAlternateFilename\"", ")", ".", "text", "=", "workdir", "+", "\"/empty.eval\"", "\n", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"empty.eval\"", ")", ",", "\"wt\"", ",", "\"utf-8\"", ")", ".", "close", "(", ")", "\n", "# More eval level stuff", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"idInputFilename\"", ")", ".", "text", "=", "workdir", "+", "\"/ids.txt\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"rawInputFilename\"", ")", ".", "text", "=", "workdir", "+", "\"/raw.txt\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"trainingInputFilename\"", ")", ".", "text", "=", "workdir", "+", "\"/training.txt\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"outputFilename\"", ")", ".", "text", "=", "workdir", "+", "\"/output.txt\"", "\n", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"output.txt\"", ")", ",", "\"wt\"", ",", "\"utf-8\"", ")", ".", "close", "(", ")", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"inContextAnalysisFilename\"", ")", ".", "text", "=", "workdir", "+", "\"/contextAnalysis.html\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"mentionFilename\"", ")", ".", "text", "=", "workdir", "+", "\"/mention.txt\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"modelFilename\"", ")", ".", "text", "=", "bannerDir", "+", "\"/output/model_BC2GM.bin\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"lemmatiserDataDirectory\"", ")", ".", "text", "=", "bannerDir", "+", "\"/nlpdata/lemmatiser\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"posTaggerDataDirectory\"", ")", ".", "text", "=", "bannerDir", "+", "\"/nlpdata/tagger\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"posTagger\"", ")", ".", "text", "=", "\"dragon.nlp.tool.HeppleTagger\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"tokenizer\"", ")", ".", "text", "=", "\"banner.tokenization.SimpleTokenizer\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"useParenthesisPostProcessing\"", ")", ".", "text", "=", "\"true\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"useLocalAbbreviationPostProcessing\"", ")", ".", "text", "=", "\"true\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"useNumericNormalization\"", ")", ".", "text", "=", "\"true\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"tagFormat\"", ")", ".", "text", "=", "\"IOB\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"crfOrder\"", ")", ".", "text", "=", "\"2\"", "\n", "if", "not", "oldVersion", ":", "\n", "        ", "ET", ".", "SubElement", "(", "eval", ",", "\"mentionTypes\"", ")", ".", "text", "=", "\"Required\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"sameTypeOverlapOption\"", ")", ".", "text", "=", "\"Exception\"", "\n", "ET", ".", "SubElement", "(", "eval", ",", "\"differentTypeOverlapOption\"", ")", ".", "text", "=", "\"Exception\"", "\n", "", "ET", ".", "SubElement", "(", "eval", ",", "\"dictionaryTagger\"", ")", ".", "text", "=", "\"banner.tagging.dictionary.DictionaryTagger\"", "\n", "# End eval element", "\n", "tagging", "=", "ET", ".", "SubElement", "(", "banner", ",", "\"tagging\"", ")", "\n", "dictionary", "=", "ET", ".", "SubElement", "(", "tagging", ",", "\"dictionary\"", ")", "\n", "dictionaryTagger", "=", "ET", ".", "SubElement", "(", "dictionary", ",", "\"DictionaryTagger\"", ")", "\n", "ET", ".", "SubElement", "(", "dictionaryTagger", ",", "\"filterContainedMentions\"", ")", ".", "text", "=", "\"true\"", "\n", "ET", ".", "SubElement", "(", "dictionaryTagger", ",", "\"normalizeMixedCase\"", ")", ".", "text", "=", "\"false\"", "\n", "ET", ".", "SubElement", "(", "dictionaryTagger", ",", "\"normalizeDigits\"", ")", ".", "text", "=", "\"false\"", "\n", "ET", ".", "SubElement", "(", "dictionaryTagger", ",", "\"canonize\"", ")", ".", "text", "=", "\"false\"", "\n", "ET", ".", "SubElement", "(", "dictionaryTagger", ",", "\"generate2PartVariations\"", ")", ".", "text", "=", "\"true\"", "\n", "ET", ".", "SubElement", "(", "dictionaryTagger", ",", "\"dropEndParentheticals\"", ")", ".", "text", "=", "\"false\"", "\n", "ET", ".", "SubElement", "(", "dictionaryTagger", ",", "\"dictionaryFile\"", ")", ".", "text", "=", "bannerDir", "+", "\"/dict/single.txt\"", "\n", "ET", ".", "SubElement", "(", "dictionaryTagger", ",", "\"dictionaryType\"", ")", ".", "text", "=", "\"GENE\"", "\n", "# Write to file", "\n", "filename", "=", "workdir", "+", "\"/banner_config.xml\"", "\n", "ETUtils", ".", "write", "(", "conf", ",", "workdir", "+", "\"/banner_config.xml\"", ")", "\n", "return", "workdir", "+", "\"/banner_config.xml\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.makeEntityElements": [[102, 139], ["str", "text[].split", "len", "str", "entityString.strip", "ET.Element", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "elements.append", "len", "len", "len", "len", "len", "ET.Element.get", "ET.Element.set", "ET.Element.get", "ET.Element.get", "entityString.rstrip", "len", "len", "entityString.lstrip", "len", "len", "str", "entityString.rstrip", "entityString.lstrip", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "makeEntityElements", "(", "beginOffset", ",", "endOffset", ",", "text", ",", "splitNewlines", "=", "False", ",", "elementName", "=", "\"entity\"", ")", ":", "\n", "# NOTE! Entity ids are not set by this function", "\n", "# beginOffset and endOffset in interaction XML format", "\n", "    ", "bannerOffset", "=", "str", "(", "beginOffset", ")", "+", "\"-\"", "+", "str", "(", "endOffset", ")", "\n", "currentEndOffset", "=", "beginOffset", "\n", "elements", "=", "[", "]", "\n", "if", "splitNewlines", ":", "\n", "        ", "entityStrings", "=", "text", "[", "beginOffset", ":", "endOffset", "+", "1", "]", ".", "split", "(", "\"\\n\"", ")", "# TODO should support also other newlines", "\n", "", "else", ":", "\n", "        ", "entityStrings", "=", "[", "text", "[", "beginOffset", ":", "endOffset", "+", "1", "]", "]", "\n", "# Make elements", "\n", "", "currentBeginOffset", "=", "beginOffset", "\n", "for", "entityString", "in", "entityStrings", ":", "\n", "        ", "currentEndOffset", "+=", "len", "(", "entityString", ")", "\n", "if", "entityString", ".", "strip", "(", ")", "!=", "\"\"", ":", "\n", "            ", "ent", "=", "ET", ".", "Element", "(", "elementName", ")", "\n", "ent", ".", "set", "(", "\"id\"", ",", "None", ")", "# this should crash the XML writing, if id isn't later redefined", "\n", "# Modify offsets to remove leading/trailing whitespace", "\n", "entityBeginOffset", "=", "currentBeginOffset", "\n", "entityEndOffset", "=", "currentEndOffset", "\n", "if", "len", "(", "entityString", ".", "rstrip", "(", ")", ")", "<", "len", "(", "entityString", ")", ":", "\n", "                ", "entityEndOffset", "-=", "len", "(", "entityString", ")", "-", "len", "(", "entityString", ".", "rstrip", "(", ")", ")", "\n", "", "if", "len", "(", "entityString", ".", "lstrip", "(", ")", ")", "<", "len", "(", "entityString", ")", ":", "\n", "                ", "entityBeginOffset", "+=", "len", "(", "entityString", ")", "-", "len", "(", "entityString", ".", "lstrip", "(", ")", ")", "\n", "# Make the element", "\n", "", "ent", ".", "set", "(", "\"charOffset\"", ",", "str", "(", "entityBeginOffset", ")", "+", "\"-\"", "+", "str", "(", "entityEndOffset", ")", ")", "\n", "if", "ent", ".", "get", "(", "\"charOffset\"", ")", "!=", "bannerOffset", ":", "\n", "                ", "ent", ".", "set", "(", "\"origBANNEROffset\"", ",", "bannerOffset", ")", "\n", "", "ent", ".", "set", "(", "\"type\"", ",", "\"Protein\"", ")", "\n", "ent", ".", "set", "(", "\"given\"", ",", "\"True\"", ")", "\n", "ent", ".", "set", "(", "\"source\"", ",", "\"BANNER\"", ")", "\n", "ent", ".", "set", "(", "\"text\"", ",", "text", "[", "entityBeginOffset", ":", "entityEndOffset", "]", ")", "\n", "assert", "ent", ".", "get", "(", "\"text\"", ")", "in", "text", ",", "(", "ent", ".", "get", "(", "\"text\"", ")", ",", "text", ")", "\n", "elements", ".", "append", "(", "ent", ")", "\n", "", "currentBeginOffset", "+=", "len", "(", "entityString", ")", "+", "1", "# +1 for the newline", "\n", "currentEndOffset", "+=", "1", "# +1 for the newline", "\n", "", "return", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.getWhiteSpaceLessStringMap": [[140, 152], ["range", "len", "string[].isspace"], "function", ["None"], ["", "def", "getWhiteSpaceLessStringMap", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    Map the characters in a string from which whitespace has been removed\n    to their indices in the original string.\n    \"\"\"", "\n", "map", "=", "{", "}", "\n", "whiteSpaceLessPos", "=", "0", "\n", "for", "originalPos", "in", "range", "(", "len", "(", "string", ")", ")", ":", "\n", "        ", "if", "not", "string", "[", "originalPos", "]", ".", "isspace", "(", ")", ":", "\n", "            ", "map", "[", "whiteSpaceLessPos", "]", "=", "originalPos", "\n", "whiteSpaceLessPos", "+=", "1", "\n", "", "", "return", "map", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.fixWhiteSpaceLessOffset": [[153, 171], ["None"], "function", ["None"], ["", "def", "fixWhiteSpaceLessOffset", "(", "entityText", ",", "sentenceText", ",", "begin", ",", "end", ",", "map", ")", ":", "\n", "# Here we assume the BANNER offsets refer to text, from which all whitespace has been removed", "\n", "    ", "assert", "begin", "in", "map", ",", "(", "entityText", ",", "sentenceText", ",", "begin", ",", "end", ",", "map", ")", "\n", "# The BANNER offset end character appears to be off by one, e.g. \"JAK1\" at the beginning of ", "\n", "# a sentence would be 0:5, which would be off by one if using the python/java scheme of the", "\n", "# end character being the last index plus one. However, since these indices refer to a string", "\n", "# from which whitespace has been removed, the remapping could further move the end index. For", "\n", "# the remapping, the end index must refer to the actual character, so it is reduced first by one to", "\n", "# remove the original extra, then again by one to hit the actual end character's index, then", "\n", "# remapped to the actual end character index in the whitespace-including sentence, and then", "\n", "# finally, in later code, used with a +1 when getting the entity from the sentence.", "\n", "end", "-=", "2", "# hope they are consistently off by one", "\n", "assert", "end", "in", "map", ",", "(", "entityText", ",", "sentenceText", ",", "begin", ",", "end", ",", "map", ")", "\n", "newBegin", "=", "map", "[", "begin", "]", "\n", "newEnd", "=", "map", "[", "end", "]", "\n", "#newEnd += 1 # hope they are consistently off by one", "\n", "assert", "entityText", "==", "sentenceText", "[", "newBegin", ":", "newEnd", "+", "1", "]", ",", "(", "entityText", ",", "sentenceText", ",", "(", "begin", ",", "end", ")", ",", "(", "newBegin", ",", "newEnd", ")", ",", "map", ")", "\n", "return", "newBegin", ",", "newEnd", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.fixOffsetOld": [[172, 195], ["len", "len", "len", "str"], "function", ["None"], ["", "def", "fixOffsetOld", "(", "origBannerEntity", ",", "bannerEntityText", ",", "begin", ",", "end", ",", "sentenceText", ",", "verbose", "=", "False", ")", ":", "\n", "# The BANNER offsets appear to refer to text, from which all whitespace has been removed.", "\n", "# This function could map the offset to an incorrect position when the string of an entity", "\n", "# appeared more than once in the same sentence, and has thus been replaced with \"fixWhiteSpaceLessOffset\"", "\n", "    ", "origEnd", "=", "end", "\n", "end", "=", "begin", "+", "len", "(", "bannerEntityText", ")", "# the end offset seems random, let's take the length from the begin-one", "\n", "assert", "len", "(", "sentenceText", "[", "begin", ":", "end", "]", ")", "==", "len", "(", "bannerEntityText", ")", ",", "(", "bannerEntity", ",", "sentenceText", "[", "begin", ":", "end", "]", ",", "begin", ",", "end", ",", "sentenceText", ")", "\n", "slippage", "=", "0", "\n", "found", "=", "True", "\n", "while", "bannerEntityText", "!=", "sentenceText", "[", "begin", ":", "end", "]", ":", "\n", "        ", "found", "=", "False", "\n", "slippage", "+=", "1", "\n", "if", "sentenceText", "[", "begin", "+", "slippage", ":", "end", "+", "slippage", "]", "==", "bannerEntityText", ":", "\n", "            ", "found", "=", "True", "\n", "break", "\n", "", "if", "sentenceText", "[", "begin", "-", "slippage", ":", "end", "-", "slippage", "]", "==", "bannerEntityText", ":", "\n", "            ", "found", "=", "True", "\n", "slippage", "=", "-", "slippage", "\n", "break", "\n", "", "", "assert", "found", ",", "(", "origBannerEntity", ",", "bannerEntityText", ",", "sentenceText", "[", "begin", ":", "end", "]", ",", "begin", ",", "end", ",", "sentenceText", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Fixed BANNER entity,\"", ",", "str", "(", "origBannerEntity", ")", "+", "\", slippage\"", ",", "slippage", ",", "\"end diff\"", ",", "origEnd", "-", "end", "\n", "", "return", "begin", "+", "slippage", ",", "end", "+", "slippage", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.run": [[196, 381], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "tempfile.mkdtemp", "codecs.open", "corpusTree.getroot.getiterator", "codecs.open.close", "os.path.exists", "os.listdir", "BANNER.makeConfigXML", "os.getcwd", "os.chdir", "time.time", "subprocess.call", "os.chdir", "corpusTree.getroot.getiterator", "os.path.join", "codecs.open.write", "os.path.exists", "str", "codecs.open", "codecs.open", "codecs.open.close", "codecs.open.close", "codecs.open", "codecs.open.close", "shutil.rmtree", "Utils.write", "Utils.JAVA.split", "Utils.JAVA.split", "datetime.timedelta", "os.path.join", "os.path.join", "codecs.open.readline().strip", "sentence.get", "sentence.get", "line.strip().split", "os.path.join", "line.strip().split", "offsets.split.split", "BANNER.getWhiteSpaceLessStringMap", "BANNER.fixWhiteSpaceLessOffset", "BANNER.makeEntityElements", "split.rsplit", "sentence.get.find", "sentence.get", "sentence.get", "int", "int", "int", "int", "sentence.get", "sentence.get", "sentence.get", "len", "line.strip", "sentence.get", "len", "ent.set", "sentence.append", "str", "sentence.get().replace().replace", "str", "str", "codecs.open.readline", "line.strip", "len", "line.strip", "x.get", "time.time", "len", "BANNER.makeEntityElements", "str", "str", "sentence.get().replace", "len", "len", "ent.set", "sentence.append", "sentence.get", "sentence.get", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.makeConfigXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.getWhiteSpaceLessStringMap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.fixWhiteSpaceLessOffset", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.makeEntityElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BANNER.makeEntityElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "run", "(", "input", ",", "output", "=", "None", ",", "elementName", "=", "\"entity\"", ",", "processElement", "=", "\"document\"", ",", "splitNewlines", "=", "False", ",", "debug", "=", "False", ",", "bannerPath", "=", "None", ",", "trovePath", "=", "None", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "input", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Corpus file loaded\"", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "# Write text to input file", "\n", "workdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "if", "debug", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"BANNER work directory at\"", ",", "workdir", "\n", "", "infile", "=", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"input.txt\"", ")", ",", "\"wt\"", ",", "\"utf-8\"", ")", "\n", "idCount", "=", "0", "\n", "for", "sentence", "in", "corpusRoot", ".", "getiterator", "(", "processElement", ")", ":", "\n", "        ", "infile", ".", "write", "(", "\"U\"", "+", "str", "(", "idCount", ")", "+", "\" \"", "+", "sentence", ".", "get", "(", "\"text\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", "+", "\"\\n\"", ")", "\n", "idCount", "+=", "1", "\n", "", "infile", ".", "close", "(", ")", "\n", "\n", "# Define classpath for java", "\n", "if", "bannerPath", "==", "None", ":", "\n", "        ", "bannerPath", "=", "Settings", ".", "BANNER_DIR", "\n", "", "libPath", "=", "\"/lib/\"", "\n", "#    if not os.path.exists(bannerPath + libPath):", "\n", "#        libPath = \"/libs/\"", "\n", "#        assert os.path.exists(bannerPath + libPath)", "\n", "assert", "os", ".", "path", ".", "exists", "(", "bannerPath", "+", "libPath", "+", "\"banner.jar\"", ")", ",", "bannerPath", "\n", "oldVersion", "=", "True", "\n", "classPath", "=", "bannerPath", "+", "\"/bin\"", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "bannerPath", "+", "libPath", ")", ":", "\n", "#if filename.endswith(\".jar\"):", "\n", "#    classPath += \":\" + bannerPath + libPath + filename", "\n", "        ", "if", "filename", "==", "\"uima\"", ":", "\n", "            ", "oldVersion", "=", "False", "\n", "", "", "classPath", "+=", "\":\"", "+", "bannerPath", "+", "libPath", "+", "\"*\"", "\n", "#    classPath += \":\" + bannerPath + libPath + \"banner.jar\"", "\n", "#    classPath += \":\" + bannerPath + libPath + \"dragontool.jar\"", "\n", "#    classPath += \":\" + bannerPath + libPath + \"heptag.jar\"", "\n", "#    classPath += \":\" + bannerPath + libPath + \"commons-collections-3.2.1.jar\"", "\n", "#    classPath += \":\" + bannerPath + libPath + \"commons-configuration-1.6.jar\"", "\n", "#    classPath += \":\" + bannerPath + libPath + \"commons-lang-2.4.jar\"", "\n", "#    classPath += \":\" + bannerPath + libPath + \"mallet.jar\"", "\n", "#    classPath += \":\" + bannerPath + libPath + \"commons-logging-1.1.1.jar\"", "\n", "if", "oldVersion", ":", "\n", "        ", "if", "trovePath", "==", "None", ":", "\n", "            ", "trovePath", "=", "Settings", ".", "JAVA_TROVE_PATH", "\n", "", "assert", "os", ".", "path", ".", "exists", "(", "trovePath", ")", ",", "trovePath", "\n", "classPath", "+=", "\":\"", "+", "trovePath", "# \":/usr/share/java/trove.jar\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Trove library at\"", ",", "trovePath", "\n", "\n", "", "config", "=", "makeConfigXML", "(", "workdir", ",", "bannerPath", ",", "oldVersion", ")", "\n", "\n", "# Run parser", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Running BANNER\"", ",", "bannerPath", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "bannerPath", ")", "\n", "if", "oldVersion", ":", "# old version", "\n", "        ", "args", "=", "Settings", ".", "JAVA", ".", "split", "(", ")", "+", "[", "\"-cp\"", ",", "classPath", ",", "\"banner.eval.TestModel\"", ",", "config", "]", "\n", "", "else", ":", "\n", "        ", "args", "=", "Settings", ".", "JAVA", ".", "split", "(", ")", "+", "[", "\"-cp\"", ",", "classPath", ",", "\"banner.eval.BANNER\"", ",", "\"test\"", ",", "config", "]", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"BANNER command:\"", ",", "\" \"", ".", "join", "(", "args", ")", "\n", "startTime", "=", "time", ".", "time", "(", ")", "\n", "exitCode", "=", "subprocess", ".", "call", "(", "args", ")", "\n", "assert", "exitCode", "==", "0", ",", "exitCode", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"BANNER time:\"", ",", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "startTime", ")", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "\n", "# Put sentences in dictionary", "\n", "sDict", "=", "{", "}", "\n", "sentenceHasEntities", "=", "{", "}", "\n", "sCount", "=", "0", "\n", "for", "sentence", "in", "corpusRoot", ".", "getiterator", "(", "processElement", ")", ":", "\n", "        ", "sDict", "[", "\"U\"", "+", "str", "(", "sCount", ")", "]", "=", "sentence", "\n", "sentenceHasEntities", "[", "\"U\"", "+", "str", "(", "sCount", ")", "]", "=", "False", "\n", "sCount", "+=", "1", "\n", "\n", "", "sentencesWithEntities", "=", "0", "\n", "totalEntities", "=", "0", "\n", "nonSplitCount", "=", "0", "\n", "splitEventCount", "=", "0", "\n", "\n", "# TODO: mention.txt appears to contain predicted entities directly", "\n", "# To be able to feed BANNER documents (or poorly chopped sentences)", "\n", "# one should probably remove newlines, as BANNER separates its input", "\n", "# on newlines. Replacing all \\r and \\n characters should preserve the", "\n", "# character offsets.", "\n", "\n", "# Read BANNER results", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting entities\"", "\n", "if", "oldVersion", ":", "\n", "        ", "outfile", "=", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"output.txt\"", ")", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "idfile", "=", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"ids.txt\"", ")", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "# Add output to sentences", "\n", "for", "line", "in", "outfile", ":", "\n", "            ", "bannerId", "=", "idfile", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "sentence", "=", "sDict", "[", "bannerId", "]", "\n", "\n", "# Find or create container elements", "\n", "sentenceId", "=", "sentence", ".", "get", "(", "\"id\"", ")", "\n", "\n", "sText", "=", "sentence", ".", "get", "(", "\"text\"", ")", "\n", "start", "=", "0", "\n", "entityCount", "=", "0", "\n", "beginOffset", "=", "None", "\n", "# Add tokens", "\n", "splits", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "for", "split", "in", "splits", ":", "\n", "                ", "tokenText", ",", "tag", "=", "split", ".", "rsplit", "(", "\"|\"", ",", "1", ")", "\n", "# Determine offsets by aligning BANNER-generated tokens to original text", "\n", "cStart", "=", "sText", ".", "find", "(", "tokenText", ",", "start", ")", "\n", "assert", "cStart", "!=", "-", "1", ",", "(", "tokenText", ",", "tag", ",", "sText", ",", "line", ")", "\n", "cEnd", "=", "cStart", "+", "len", "(", "tokenText", ")", "-", "1", "\n", "start", "=", "cStart", "+", "len", "(", "tokenText", ")", "\n", "\n", "if", "tag", "==", "\"O\"", ":", "\n", "                    ", "if", "beginOffset", "!=", "None", ":", "\n", "## Make element", "\n", "#ent = ET.Element(elementName)", "\n", "#ent.set(\"id\", sentenceId + \".e\" + str(entityCount))", "\n", "#ent.set(\"charOffset\", str(beginOffset) + \"-\" + str(prevEnd))", "\n", "#ent.set(\"type\", \"Protein\")", "\n", "#ent.set(\"given\", \"True\")", "\n", "#ent.set(\"source\", \"BANNER\")", "\n", "#ent.set(\"text\", sText[beginOffset:prevEnd+1])", "\n", "                        ", "entities", "=", "makeEntityElements", "(", "beginOffset", ",", "prevEnd", ",", "sText", ",", "splitNewlines", ",", "elementName", ")", "\n", "assert", "len", "(", "entities", ")", ">", "0", "\n", "nonSplitCount", "+=", "1", "\n", "if", "len", "(", "entities", ")", ">", "1", ":", "\n", "                            ", "splitEventCount", "+=", "1", "\n", "", "for", "ent", "in", "entities", ":", "\n", "                            ", "ent", ".", "set", "(", "\"id\"", ",", "sentenceId", "+", "\".e\"", "+", "str", "(", "entityCount", ")", ")", "\n", "sentence", ".", "append", "(", "ent", ")", "\n", "if", "not", "sentenceHasEntities", "[", "bannerId", "]", ":", "\n", "                                ", "sentencesWithEntities", "+=", "1", "\n", "sentenceHasEntities", "[", "bannerId", "]", "=", "True", "\n", "", "totalEntities", "+=", "1", "\n", "entityCount", "+=", "1", "\n", "", "beginOffset", "=", "None", "\n", "", "", "else", ":", "\n", "                    ", "if", "beginOffset", "==", "None", ":", "\n", "                        ", "beginOffset", "=", "cStart", "\n", "", "", "prevEnd", "=", "cEnd", "\n", "", "", "outfile", ".", "close", "(", ")", "\n", "idfile", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "sentenceEntityCount", "=", "{", "}", "\n", "mentionfile", "=", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"mention.txt\"", ")", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "for", "line", "in", "mentionfile", ":", "\n", "            ", "bannerId", ",", "offsets", ",", "word", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"|\"", ",", "2", ")", "\n", "offsets", "=", "offsets", ".", "split", "(", ")", "\n", "sentence", "=", "sDict", "[", "bannerId", "]", "\n", "map", "=", "getWhiteSpaceLessStringMap", "(", "sentence", ".", "get", "(", "\"text\"", ")", ")", "\n", "offsets", "[", "0", "]", ",", "offsets", "[", "1", "]", "=", "fixWhiteSpaceLessOffset", "(", "word", ",", "sentence", ".", "get", "(", "\"text\"", ")", ",", "int", "(", "offsets", "[", "0", "]", ")", ",", "int", "(", "offsets", "[", "1", "]", ")", ",", "map", ")", "\n", "#offsets[0], offsets[1] = fixStrangeOffset(line.strip(), word, int(offsets[0]), int(offsets[1]), sentence.get(\"text\"))", "\n", "entities", "=", "makeEntityElements", "(", "int", "(", "offsets", "[", "0", "]", ")", ",", "int", "(", "offsets", "[", "1", "]", ")", ",", "sentence", ".", "get", "(", "\"text\"", ")", ",", "splitNewlines", ",", "elementName", ")", "\n", "entityText", "=", "\"\\n\"", ".", "join", "(", "[", "x", ".", "get", "(", "\"text\"", ")", "for", "x", "in", "entities", "]", ")", "\n", "assert", "entityText", "==", "word", ",", "(", "entityText", ",", "word", ",", "bannerId", ",", "offsets", ",", "sentence", ".", "get", "(", "\"id\"", ")", ",", "sentence", ".", "get", "(", "\"text\"", ")", ")", "\n", "assert", "len", "(", "entities", ")", ">", "0", ",", "(", "line", ".", "strip", "(", ")", ",", "sentence", ".", "get", "(", "\"text\"", ")", ")", "\n", "nonSplitCount", "+=", "1", "\n", "if", "len", "(", "entities", ")", ">", "1", ":", "\n", "                ", "splitEventCount", "+=", "1", "\n", "", "if", "bannerId", "not", "in", "sentenceEntityCount", ":", "\n", "                ", "sentenceEntityCount", "[", "bannerId", "]", "=", "0", "\n", "", "for", "ent", "in", "entities", ":", "\n", "                ", "ent", ".", "set", "(", "\"id\"", ",", "sentence", ".", "get", "(", "\"id\"", ")", "+", "\".e\"", "+", "str", "(", "sentenceEntityCount", "[", "bannerId", "]", ")", ")", "\n", "sentence", ".", "append", "(", "ent", ")", "\n", "if", "not", "sentenceHasEntities", "[", "bannerId", "]", ":", "\n", "                    ", "sentencesWithEntities", "+=", "1", "\n", "sentenceHasEntities", "[", "bannerId", "]", "=", "True", "\n", "", "totalEntities", "+=", "1", "\n", "sentenceEntityCount", "[", "bannerId", "]", "+=", "1", "\n", "", "", "mentionfile", ".", "close", "(", ")", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"BANNER found\"", ",", "nonSplitCount", ",", "\"entities in\"", ",", "sentencesWithEntities", ",", "processElement", "+", "\"-elements\"", ",", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"(\"", "+", "str", "(", "sCount", ")", "+", "\" sentences processed)\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"New\"", ",", "elementName", "+", "\"-elements:\"", ",", "totalEntities", ",", "\"(Split\"", ",", "splitEventCount", ",", "\"BANNER entities with newlines)\"", "\n", "\n", "# Remove work directory", "\n", "if", "not", "debug", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "workdir", ")", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"BANNER working directory for debugging at\"", ",", "workdir", "\n", "\n", "", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "output", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.unescape": [[31, 36], ["text.replace.replace"], "function", ["None"], ["def", "unescape", "(", "text", ")", ":", "\n", "    ", "global", "escDict", ",", "escSymbols", "\n", "for", "escSymbol", "in", "escSymbols", ":", "\n", "        ", "text", "=", "text", ".", "replace", "(", "escSymbol", ",", "escDict", "[", "escSymbol", "]", ")", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.install": [[37, 64], ["Utils.downloadAndExtract", "Tool.testPrograms", "Utils.getTopDir", "os.getcwd", "os.chdir", "subprocess.call", "subprocess.call", "os.chdir", "Utils.downloadAndExtract", "os.path.abspath", "Tool.finalizeInstall", "os.path.join", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.testPrograms", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.finalizeInstall"], ["", "def", "install", "(", "destDir", "=", "None", ",", "downloadDir", "=", "None", ",", "redownload", "=", "False", ",", "updateLocalSettings", "=", "False", ")", ":", "\n", "    ", "url", "=", "Settings", ".", "URL", "[", "\"BLLIP_SOURCE\"", "]", "\n", "if", "downloadDir", "==", "None", ":", "\n", "        ", "downloadDir", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ")", "+", "\"/tools/download\"", "\n", "", "if", "destDir", "==", "None", ":", "\n", "        ", "destDir", "=", "Settings", ".", "DATAPATH", "+", "\"/tools/BLLIP\"", "\n", "", "items", "=", "Download", ".", "downloadAndExtract", "(", "url", ",", "destDir", ",", "downloadDir", "+", "\"/bllip.zip\"", ",", "None", ",", "False", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Installing BLLIP parser\"", "\n", "Tool", ".", "testPrograms", "(", "\"BLLIP parser\"", ",", "[", "\"make\"", ",", "\"flex\"", "]", ",", "{", "\"flex\"", ":", "\"flex --version\"", "}", ")", "\n", "parserPath", "=", "Download", ".", "getTopDir", "(", "destDir", ",", "items", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "parserPath", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Compiling first-stage parser\"", "\n", "subprocess", ".", "call", "(", "\"make\"", ",", "shell", "=", "True", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Compiling second-stage parser\"", "\n", "subprocess", ".", "call", "(", "\"make reranker\"", ",", "shell", "=", "True", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Installing the McClosky biomedical parsing model\"", "\n", "url", "=", "\"http://bllip.cs.brown.edu/download/bioparsingmodel-rel1.tar.gz\"", "\n", "Download", ".", "downloadAndExtract", "(", "url", ",", "destDir", ",", "downloadDir", ",", "None", ")", "\n", "bioModelDir", "=", "os", ".", "path", ".", "abspath", "(", "destDir", "+", "\"/biomodel\"", ")", "\n", "# Check that everything works", "\n", "Tool", ".", "finalizeInstall", "(", "[", "\"first-stage/PARSE/parseIt\"", ",", "\"second-stage/programs/features/best-parses\"", "]", ",", "\n", "{", "\"first-stage/PARSE/parseIt\"", ":", "\"first-stage/PARSE/parseIt \"", "+", "bioModelDir", "+", "\"/parser/ < /dev/null\"", ",", "\n", "\"second-stage/programs/features/best-parses\"", ":", "\"second-stage/programs/features/best-parses -l \"", "+", "bioModelDir", "+", "\"/reranker/features.gz \"", "+", "bioModelDir", "+", "\"/reranker/weights.gz < /dev/null\"", "}", ",", "\n", "parserPath", ",", "{", "\"BLLIP_PARSER_DIR\"", ":", "os", ".", "path", ".", "abspath", "(", "parserPath", ")", ",", "\n", "\"MCCLOSKY_BIOPARSINGMODEL_DIR\"", ":", "bioModelDir", "}", ",", "updateLocalSettings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.readPenn": [[65, 126], ["treeLine.strip.strip", "stack.append", "span.split", "span.endswith", "stack.pop", "phrases.append", "unescape().strip", "BLLIPParser.unescape", "tokens.append", "BLLIPParser.unescape"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.unescape", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.unescape"], ["", "def", "readPenn", "(", "treeLine", ",", "sentenceDebugId", "=", "None", ")", ":", "\n", "#global escDict", "\n", "#escSymbols = sorted(escDict.keys())", "\n", "    ", "tokens", "=", "[", "]", "\n", "phrases", "=", "[", "]", "\n", "stack", "=", "[", "]", "\n", "treeLine", "=", "treeLine", ".", "strip", "(", ")", "\n", "if", "treeLine", "!=", "\"\"", ":", "\n", "# Add tokens", "\n", "#prevSplit = None", "\n", "        ", "tokenCount", "=", "0", "\n", "#splitCount = 0", "\n", "index", "=", "0", "\n", "for", "char", "in", "treeLine", ":", "\n", "            ", "if", "char", "==", "\"(\"", ":", "\n", "                ", "stack", ".", "append", "(", "(", "index", "+", "1", ",", "tokenCount", ")", ")", "\n", "", "elif", "char", "==", "\")\"", ":", "\n", "                ", "span", "=", "treeLine", "[", "stack", "[", "-", "1", "]", "[", "0", "]", ":", "index", "]", "\n", "splits", "=", "span", ".", "split", "(", "None", ",", "1", ")", "# span.split(string.whitespace)", "\n", "if", "span", ".", "endswith", "(", "\")\"", ")", ":", "\n", "                    ", "phrases", ".", "append", "(", "(", "stack", "[", "-", "1", "]", "[", "1", "]", ",", "tokenCount", ",", "splits", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "#if len(splits) == 2:", "\n", "                    ", "origTokenText", "=", "splits", "[", "1", "]", "\n", "tokenText", "=", "unescape", "(", "origTokenText", ")", ".", "strip", "(", ")", "\n", "pos", "=", "unescape", "(", "splits", "[", "0", "]", ")", "\n", "tokens", ".", "append", "(", "(", "tokenText", ",", "pos", ",", "origTokenText", ")", ")", "\n", "#else:", "\n", "#    print >> sys.stderr, \"Warning, unreadable token '\", repr(span), \"' in\", sentenceDebugId", "\n", "tokenCount", "+=", "1", "\n", "", "stack", ".", "pop", "(", ")", "\n", "", "index", "+=", "1", "\n", "\n", "#         stack = []", "\n", "#         splits = treeLine.split()", "\n", "#         for split in splits:", "\n", "#             if split[0] != \"(\":", "\n", "#                 tokenText = split", "\n", "#                 while len(tokenText) > 0 and tokenText[-1] == \")\":", "\n", "#                     tokenText = tokenText[:-1]", "\n", "#                     if len(tokenText) == 0:", "\n", "#                         print >> sys.stderr, \"Warning, empty token in\", sentenceDebugId", "\n", "#                     if len(tokenText) > 0 and tokenText[-1] == \")\": # this isn't the closing parenthesis for the current token", "\n", "#                         stackTop = stack.pop()", "\n", "#                         phrases.append( (stackTop[0], tokenCount, stackTop[1]) )", "\n", "#                 origTokenText = tokenText", "\n", "#                 for escSymbol in escSymbols:", "\n", "#                     tokenText = tokenText.replace(escSymbol, escDict[escSymbol])", "\n", "#                 ", "\n", "#                 posText = prevSplit", "\n", "#                 while posText[0] == \"(\":", "\n", "#                     posText = posText[1:]", "\n", "#                 for escSymbol in escSymbols:", "\n", "#                     posText = posText.replace(escSymbol, escDict[escSymbol])", "\n", "#                 tokens.append( (tokenText, posText, origTokenText) )", "\n", "#                 tokenCount += 1", "\n", "#             elif splits[splitCount + 1][0] == \"(\":", "\n", "#                 stack.append( (tokenCount, split[1:]) )", "\n", "#             prevSplit = split", "\n", "#             splitCount += 1", "\n", "", "", "return", "tokens", ",", "phrases", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertTokens": [[127, 160], ["sentence.get", "sentence.get.find", "ET.Element", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "tokenization.append", "sentence.get.find", "sentence.get.find", "len", "len", "tokenization.remove", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "insertTokens", "(", "tokens", ",", "sentence", ",", "tokenization", ",", "idStem", "=", "\"bt_\"", ",", "errorNotes", "=", "None", ")", ":", "\n", "    ", "tokenCount", "=", "0", "\n", "start", "=", "0", "\n", "prevStart", "=", "None", "\n", "for", "tokenText", ",", "posTag", ",", "origTokenText", "in", "tokens", ":", "\n", "        ", "sText", "=", "sentence", ".", "get", "(", "\"text\"", ")", "\n", "# Determine offsets", "\n", "cStart", "=", "sText", ".", "find", "(", "tokenText", ",", "start", ")", "\n", "#assert cStart != -1, (tokenText, tokens, posTag, start, sText)", "\n", "if", "cStart", "==", "-", "1", ":", "# Try again with original text (sometimes escaping can remove correct text)", "\n", "            ", "cStart", "=", "sText", ".", "find", "(", "origTokenText", ",", "start", ")", "\n", "", "if", "cStart", "==", "-", "1", "and", "prevStart", "!=", "None", ":", "# Try again with the previous position, sometimes the parser duplicates tokens", "\n", "            ", "cStart", "=", "sText", ".", "find", "(", "origTokenText", ",", "prevStart", ")", "\n", "if", "cStart", "!=", "-", "1", ":", "\n", "                ", "start", "=", "prevStart", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, token duplication\"", ",", "(", "tokenText", ",", "tokens", ",", "posTag", ",", "start", ",", "sText", ",", "errorNotes", ")", "\n", "", "", "if", "cStart", "==", "-", "1", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Token alignment error\"", ",", "(", "tokenText", ",", "tokens", ",", "posTag", ",", "start", ",", "sText", ",", "errorNotes", ")", "\n", "for", "subElement", "in", "[", "x", "for", "x", "in", "tokenization", "]", ":", "\n", "                ", "tokenization", ".", "remove", "(", "subElement", ")", "\n", "", "return", "False", "\n", "", "cEnd", "=", "cStart", "+", "len", "(", "tokenText", ")", "\n", "prevStart", "=", "start", "\n", "start", "=", "cStart", "+", "len", "(", "tokenText", ")", "\n", "# Make element", "\n", "token", "=", "ET", ".", "Element", "(", "\"token\"", ")", "\n", "token", ".", "set", "(", "\"id\"", ",", "idStem", "+", "str", "(", "tokenCount", ")", ")", "\n", "token", ".", "set", "(", "\"text\"", ",", "tokenText", ")", "\n", "token", ".", "set", "(", "\"POS\"", ",", "posTag", ")", "\n", "token", ".", "set", "(", "\"charOffset\"", ",", "str", "(", "cStart", ")", "+", "\"-\"", "+", "str", "(", "cEnd", ")", ")", "# NOTE: check", "\n", "tokenization", ".", "append", "(", "token", ")", "\n", "tokenCount", "+=", "1", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertPhrases": [[161, 180], ["phrases.sort", "ET.Element", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "parse.append", "str", "str", "len", "len", "ET.Element.set", "str", "t2.get().split", "t1.get().split", "t2.get", "t1.get", "BLLIPParser.parse"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.parse"], ["", "def", "insertPhrases", "(", "phrases", ",", "parse", ",", "tokenElements", ",", "idStem", "=", "\"bp_\"", ")", ":", "\n", "    ", "count", "=", "0", "\n", "phrases", ".", "sort", "(", ")", "\n", "for", "phrase", "in", "phrases", ":", "\n", "        ", "phraseElement", "=", "ET", ".", "Element", "(", "\"phrase\"", ")", "\n", "phraseElement", ".", "set", "(", "\"type\"", ",", "phrase", "[", "2", "]", ")", "\n", "phraseElement", ".", "set", "(", "\"id\"", ",", "idStem", "+", "str", "(", "count", ")", ")", "\n", "phraseElement", ".", "set", "(", "\"begin\"", ",", "str", "(", "phrase", "[", "0", "]", ")", ")", "\n", "phraseElement", ".", "set", "(", "\"end\"", ",", "str", "(", "phrase", "[", "1", "]", ")", ")", "\n", "t1", "=", "None", "\n", "t2", "=", "None", "\n", "if", "phrase", "[", "0", "]", "<", "len", "(", "tokenElements", ")", ":", "\n", "            ", "t1", "=", "tokenElements", "[", "phrase", "[", "0", "]", "]", "\n", "", "if", "phrase", "[", "1", "]", "<", "len", "(", "tokenElements", ")", ":", "\n", "            ", "t2", "=", "tokenElements", "[", "phrase", "[", "1", "]", "]", "\n", "", "if", "t1", "!=", "None", "and", "t2", "!=", "None", ":", "\n", "            ", "phraseElement", ".", "set", "(", "\"charOffset\"", ",", "t1", ".", "get", "(", "\"charOffset\"", ")", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "+", "\"-\"", "+", "t2", ".", "get", "(", "\"charOffset\"", ")", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", ")", "\n", "", "parse", ".", "append", "(", "phraseElement", ")", "\n", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParse": [[183, 225], ["ProcessUtils.setDefaultElement", "ProcessUtils.setDefaultElement.findall", "ET.Element", "ET.Element.set", "ProcessUtils.setDefaultElement.insert", "ET.Element.set", "sorted", "ET.Element.set", "ET.Element.set", "ProcessUtils.getPrevElementIndex", "treeLine.strip", "extraAttributes.keys", "ET.Element.set", "treeLine.strip", "BLLIPParser.readPenn", "prevParse.get", "sentence.get", "ProcessUtils.setDefaultElement.findall", "ET.Element", "ProcessUtils.getElementByAttrib.set", "sorted", "ProcessUtils.setDefaultElement.insert", "BLLIPParser.insertTokens", "ProcessUtils.getElementByAttrib", "BLLIPParser.insertPhrases", "extraAttributes.keys", "ProcessUtils.getElementByAttrib.set", "ProcessUtils.getElementIndex", "ProcessUtils.getElementByAttrib.findall", "prevTokenization.get", "sentence.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.setDefaultElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.insert", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.getPrevElementIndex", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.readPenn", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.insert", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertTokens", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertPhrases", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.getElementIndex", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "insertParse", "(", "sentence", ",", "treeLine", ",", "parseName", "=", "\"McCC\"", ",", "tokenizationName", "=", "None", ",", "makePhraseElements", "=", "True", ",", "extraAttributes", "=", "{", "}", ",", "docId", "=", "None", ")", ":", "\n", "# Find or create container elements", "\n", "    ", "analyses", "=", "setDefaultElement", "(", "sentence", ",", "\"analyses\"", ")", "#\"sentenceanalyses\")", "\n", "#tokenizations = setDefaultElement(sentenceAnalyses, \"tokenizations\")", "\n", "#parses = setDefaultElement(sentenceAnalyses, \"parses\")", "\n", "# Check that the parse does not exist", "\n", "for", "prevParse", "in", "analyses", ".", "findall", "(", "\"parse\"", ")", ":", "\n", "        ", "assert", "prevParse", ".", "get", "(", "\"parser\"", ")", "!=", "parseName", "\n", "# Create a new parse element", "\n", "", "parse", "=", "ET", ".", "Element", "(", "\"parse\"", ")", "\n", "parse", ".", "set", "(", "\"parser\"", ",", "parseName", ")", "\n", "if", "tokenizationName", "==", "None", ":", "\n", "        ", "parse", ".", "set", "(", "\"tokenizer\"", ",", "parseName", ")", "\n", "", "else", ":", "\n", "        ", "parse", ".", "set", "(", "\"tokenizer\"", ",", "tokenizationName", ")", "\n", "", "analyses", ".", "insert", "(", "getPrevElementIndex", "(", "analyses", ",", "\"parse\"", ")", ",", "parse", ")", "\n", "\n", "tokenByIndex", "=", "{", "}", "\n", "parse", ".", "set", "(", "\"pennstring\"", ",", "treeLine", ".", "strip", "(", ")", ")", "\n", "for", "attr", "in", "sorted", "(", "extraAttributes", ".", "keys", "(", ")", ")", ":", "\n", "        ", "parse", ".", "set", "(", "attr", ",", "extraAttributes", "[", "attr", "]", ")", "\n", "", "if", "treeLine", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "tokens", ",", "phrases", "=", "readPenn", "(", "treeLine", ",", "sentence", ".", "get", "(", "\"id\"", ")", ")", "\n", "# Get tokenization", "\n", "if", "tokenizationName", "==", "None", ":", "# Parser-generated tokens", "\n", "            ", "for", "prevTokenization", "in", "analyses", ".", "findall", "(", "\"tokenization\"", ")", ":", "\n", "                ", "assert", "prevTokenization", ".", "get", "(", "\"tokenizer\"", ")", "!=", "tokenizationName", "\n", "", "tokenization", "=", "ET", ".", "Element", "(", "\"tokenization\"", ")", "\n", "tokenization", ".", "set", "(", "\"tokenizer\"", ",", "parseName", ")", "\n", "for", "attr", "in", "sorted", "(", "extraAttributes", ".", "keys", "(", ")", ")", ":", "# add the parser extra attributes to the parser generated tokenization ", "\n", "                ", "tokenization", ".", "set", "(", "attr", ",", "extraAttributes", "[", "attr", "]", ")", "\n", "", "analyses", ".", "insert", "(", "getElementIndex", "(", "analyses", ",", "parse", ")", ",", "tokenization", ")", "\n", "# Insert tokens to parse", "\n", "insertTokens", "(", "tokens", ",", "sentence", ",", "tokenization", ",", "errorNotes", "=", "(", "sentence", ".", "get", "(", "\"id\"", ")", ",", "docId", ")", ")", "\n", "", "else", ":", "\n", "            ", "tokenization", "=", "getElementByAttrib", "(", "analyses", ",", "\"tokenization\"", ",", "{", "\"tokenizer\"", ":", "tokenizationName", "}", ")", "\n", "# Insert phrases to parse", "\n", "", "if", "makePhraseElements", ":", "\n", "            ", "insertPhrases", "(", "phrases", ",", "parse", ",", "tokenization", ".", "findall", "(", "\"token\"", ")", ")", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.runBLLIPParser": [[226, 250], ["os.path.exists", "subprocess.Popen", "subprocess.Popen", "ProcessUtils.ProcessWrapper", "codecs.open", "codecs.open"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "def", "runBLLIPParser", "(", "input", ",", "output", ",", "tokenizer", "=", "False", ",", "pathBioModel", "=", "None", ")", ":", "\n", "    ", "if", "tokenizer", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Running BLLIP parser with tokenization\"", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Running BLLIP parser without tokenization\"", "\n", "#args = [\"./parse-50best-McClosky.sh\"]", "\n", "#return subprocess.Popen(args, ", "\n", "#    stdin=codecs.open(input, \"rt\", \"utf-8\"),", "\n", "#    stdout=codecs.open(output, \"wt\", \"utf-8\"), shell=True)", "\n", "\n", "", "assert", "os", ".", "path", ".", "exists", "(", "pathBioModel", ")", ",", "pathBioModel", "\n", "if", "tokenizer", ":", "\n", "        ", "firstStageArgs", "=", "[", "\"first-stage/PARSE/parseIt\"", ",", "\"-l999\"", ",", "\"-N50\"", ",", "pathBioModel", "+", "\"/parser/\"", "]", "\n", "", "else", ":", "\n", "        ", "firstStageArgs", "=", "[", "\"first-stage/PARSE/parseIt\"", ",", "\"-l999\"", ",", "\"-N50\"", ",", "\"-K\"", ",", "pathBioModel", "+", "\"/parser/\"", "]", "\n", "", "secondStageArgs", "=", "[", "\"second-stage/programs/features/best-parses\"", ",", "\"-l\"", ",", "pathBioModel", "+", "\"/reranker/features.gz\"", ",", "pathBioModel", "+", "\"/reranker/weights.gz\"", "]", "\n", "\n", "firstStage", "=", "subprocess", ".", "Popen", "(", "firstStageArgs", ",", "\n", "stdin", "=", "codecs", ".", "open", "(", "input", ",", "\"rt\"", ",", "\"utf-8\"", ")", ",", "\n", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "secondStage", "=", "subprocess", ".", "Popen", "(", "secondStageArgs", ",", "\n", "stdin", "=", "firstStage", ".", "stdout", ",", "\n", "stdout", "=", "codecs", ".", "open", "(", "output", ",", "\"wt\"", ",", "\"utf-8\"", ")", ")", "\n", "return", "ProcessWrapper", "(", "[", "firstStage", ",", "secondStage", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.getSentences": [[251, 263], ["corpusRoot.getiterator", "sentence.get", "sentence.get", "sentence.find", "Utils.getElementByAttrib"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib"], ["", "def", "getSentences", "(", "corpusRoot", ",", "requireEntities", "=", "False", ",", "skipIds", "=", "[", "]", ",", "skipParsed", "=", "True", ")", ":", "\n", "    ", "for", "sentence", "in", "corpusRoot", ".", "getiterator", "(", "\"sentence\"", ")", ":", "\n", "        ", "if", "sentence", ".", "get", "(", "\"id\"", ")", "in", "skipIds", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Skipping sentence\"", ",", "sentence", ".", "get", "(", "\"id\"", ")", "\n", "continue", "\n", "", "if", "requireEntities", ":", "\n", "            ", "if", "sentence", ".", "find", "(", "\"entity\"", ")", "==", "None", ":", "\n", "                ", "continue", "\n", "", "", "if", "skipParsed", ":", "\n", "            ", "if", "ETUtils", ".", "getElementByAttrib", "(", "sentence", ",", "\"parse\"", ",", "{", "\"parser\"", ":", "\"McCC\"", "}", ")", "!=", "None", ":", "\n", "                ", "continue", "\n", "", "", "yield", "sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.parse": [[264, 358], ["time.strftime", "Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "tempfile.mkdtemp", "os.path.join", "codecs.open", "codecs.open.close", "os.getcwd", "os.chdir", "os.chdir", "codecs.open", "BLLIPParser.getSentences", "codecs.open.close", "BLLIPParser.getSentences", "BLLIPParser.getSentences", "ProcessUtils.runSentenceProcess", "ProcessUtils.runSentenceProcess", "codecs.open.readline", "shutil.rmtree", "Utils.write", "codecs.open.write", "ProcessUtils.getElementByAttrib", "ProcessUtils.getElementByAttrib.findall", "codecs.open.write", "BLLIPParser.insertParse", "sentence.find", "ProcessUtils.getElementByAttrib.get", "str", "token.get", "sentence.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.getSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.getSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.getSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.runSentenceProcess", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.ProcessUtils.runSentenceProcess", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParse", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "parse", "(", "input", ",", "output", "=", "None", ",", "tokenizationName", "=", "None", ",", "parseName", "=", "\"McCC\"", ",", "requireEntities", "=", "False", ",", "skipIds", "=", "[", "]", ",", "skipParsed", "=", "True", ",", "timeout", "=", "600", ",", "makePhraseElements", "=", "True", ",", "debug", "=", "False", ",", "pathParser", "=", "None", ",", "pathBioModel", "=", "None", ",", "timestamp", "=", "True", ")", ":", "\n", "    ", "global", "escDict", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"BLLIP parser\"", "\n", "parseTimeStamp", "=", "time", ".", "strftime", "(", "\"%d.%m.%y %H:%M:%S\"", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"BLLIP time stamp:\"", ",", "parseTimeStamp", "\n", "\n", "if", "pathParser", "==", "None", ":", "\n", "        ", "pathParser", "=", "Settings", ".", "BLLIP_PARSER_DIR", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"BLLIP parser at:\"", ",", "pathParser", "\n", "if", "pathBioModel", "==", "None", ":", "\n", "        ", "pathBioModel", "=", "Settings", ".", "MCCLOSKY_BIOPARSINGMODEL_DIR", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Biomodel at:\"", ",", "pathBioModel", "\n", "if", "requireEntities", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Parsing only sentences with entities\"", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "input", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Corpus file loaded\"", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "# Write text to input file", "\n", "workdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "if", "debug", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"BLLIP parser workdir\"", ",", "workdir", "\n", "", "infileName", "=", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"parser-input.txt\"", ")", "\n", "infile", "=", "codecs", ".", "open", "(", "infileName", ",", "\"wt\"", ",", "\"utf-8\"", ")", "\n", "numCorpusSentences", "=", "0", "\n", "if", "tokenizationName", "==", "None", "or", "tokenizationName", "==", "\"PARSED_TEXT\"", ":", "# Parser does tokenization", "\n", "        ", "if", "tokenizationName", "==", "None", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Parser does the tokenization\"", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Parsing tokenized text\"", "\n", "#for sentence in corpusRoot.getiterator(\"sentence\"):", "\n", "", "for", "sentence", "in", "getSentences", "(", "corpusRoot", ",", "requireEntities", ",", "skipIds", ",", "skipParsed", ")", ":", "\n", "            ", "infile", ".", "write", "(", "\"<s> \"", "+", "sentence", ".", "get", "(", "\"text\"", ")", "+", "\" </s>\\n\"", ")", "\n", "numCorpusSentences", "+=", "1", "\n", "", "", "else", ":", "# Use existing tokenization", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Using existing tokenization\"", ",", "tokenizationName", "\n", "for", "sentence", "in", "getSentences", "(", "corpusRoot", ",", "requireEntities", ",", "skipIds", ",", "skipParsed", ")", ":", "\n", "            ", "tokenization", "=", "getElementByAttrib", "(", "sentence", ".", "find", "(", "\"analyses\"", ")", ",", "\"tokenization\"", ",", "{", "\"tokenizer\"", ":", "tokenizationName", "}", ")", "\n", "assert", "tokenization", ".", "get", "(", "\"tokenizer\"", ")", "==", "tokenizationName", "\n", "s", "=", "\"\"", "\n", "for", "token", "in", "tokenization", ".", "findall", "(", "\"token\"", ")", ":", "\n", "                ", "s", "+=", "token", ".", "get", "(", "\"text\"", ")", "+", "\" \"", "\n", "", "infile", ".", "write", "(", "\"<s> \"", "+", "s", "+", "\"</s>\\n\"", ")", "\n", "numCorpusSentences", "+=", "1", "\n", "", "", "infile", ".", "close", "(", ")", "\n", "\n", "#PARSERROOT=/home/smp/tools/McClosky-Charniak/reranking-parser", "\n", "#BIOPARSINGMODEL=/home/smp/tools/McClosky-Charniak/reranking-parser/biomodel", "\n", "#${PARSERROOT}/first-stage/PARSE/parseIt -K -l399 -N50 ${BIOPARSINGMODEL}/parser/ $* | ${PARSERROOT}/second-stage/programs/features/best-parses -l ${BIOPARSINGMODEL}/reranker/features.gz ${BIOPARSINGMODEL}/reranker/weights.gz", "\n", "\n", "# Run parser", "\n", "#print >> sys.stderr, \"Running parser\", pathParser + \"/parse.sh\"", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "pathParser", ")", "\n", "if", "tokenizationName", "==", "None", ":", "\n", "        ", "bllipOutput", "=", "runSentenceProcess", "(", "runBLLIPParser", ",", "pathParser", ",", "infileName", ",", "workdir", ",", "False", ",", "\"BLLIPParser\"", ",", "\"Parsing\"", ",", "timeout", "=", "timeout", ",", "processArgs", "=", "{", "\"tokenizer\"", ":", "True", ",", "\"pathBioModel\"", ":", "pathBioModel", "}", ")", "\n", "", "else", ":", "\n", "        ", "if", "tokenizationName", "==", "\"PARSED_TEXT\"", ":", "# The sentence strings are already tokenized", "\n", "            ", "tokenizationName", "=", "None", "\n", "", "bllipOutput", "=", "runSentenceProcess", "(", "runBLLIPParser", ",", "pathParser", ",", "infileName", ",", "workdir", ",", "False", ",", "\"BLLIPParser\"", ",", "\"Parsing\"", ",", "timeout", "=", "timeout", ",", "processArgs", "=", "{", "\"tokenizer\"", ":", "False", ",", "\"pathBioModel\"", ":", "pathBioModel", "}", ")", "\n", "#    args = [charniakJohnsonParserDir + \"/parse-50best-McClosky.sh\"]", "\n", "#    #bioParsingModel = charniakJohnsonParserDir + \"/first-stage/DATA-McClosky\"", "\n", "#    #args = charniakJohnsonParserDir + \"/first-stage/PARSE/parseIt -K -l399 -N50 \" + bioParsingModel + \"/parser | \" + charniakJohnsonParserDir + \"/second-stage/programs/features/best-parses -l \" + bioParsingModel + \"/reranker/features.gz \" + bioParsingModel + \"/reranker/weights.gz\"", "\n", "", "os", ".", "chdir", "(", "cwd", ")", "\n", "\n", "treeFile", "=", "codecs", ".", "open", "(", "bllipOutput", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting parses\"", "\n", "# Add output to sentences", "\n", "failCount", "=", "0", "\n", "for", "sentence", "in", "getSentences", "(", "corpusRoot", ",", "requireEntities", ",", "skipIds", ",", "skipParsed", ")", ":", "\n", "        ", "treeLine", "=", "treeFile", ".", "readline", "(", ")", "\n", "extraAttributes", "=", "{", "\"source\"", ":", "\"TEES\"", "}", "# parser was run through this wrapper", "\n", "if", "timestamp", ":", "\n", "            ", "extraAttributes", "[", "\"date\"", "]", "=", "parseTimeStamp", "# links the parse to the log file", "\n", "", "if", "not", "insertParse", "(", "sentence", ",", "treeLine", ",", "parseName", ",", "makePhraseElements", "=", "makePhraseElements", ",", "extraAttributes", "=", "extraAttributes", ")", ":", "\n", "            ", "failCount", "+=", "1", "\n", "\n", "", "", "treeFile", ".", "close", "(", ")", "\n", "# Remove work directory", "\n", "if", "not", "debug", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "workdir", ")", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Parsed\"", ",", "numCorpusSentences", ",", "\"sentences (\"", "+", "str", "(", "failCount", ")", "+", "\" failed)\"", "\n", "if", "failCount", "==", "0", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"All sentences were parsed succesfully\"", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, parsing failed for\"", ",", "failCount", ",", "\"out of\"", ",", "numCorpusSentences", ",", "\"sentences\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"The \\\"pennstring\\\" attribute of these sentences has an empty string.\"", "\n", "", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "output", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses": [[359, 434], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "os.path.exists", "ProgressCounter", "parsePath.find", "parsePath.split", "tarfile.open", "len", "document.get", "str", "ProgressCounter.update", "document.get", "openFile", "openFile.readlines", "openFile.close", "document.findall", "len", "zip", "tarfile.open.close", "Utils.write", "document.get", "document.get", "os.path.join", "openFile", "len", "len", "corpusTree.getroot.getiterator", "corpusTree.getroot.getiterator", "str", "os.path.join", "BLLIPParser.insertParse", "str", "document.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.openFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.openFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParse", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "insertParses", "(", "input", ",", "parsePath", ",", "output", "=", "None", ",", "parseName", "=", "\"McCC\"", ",", "tokenizationName", "=", "None", ",", "makePhraseElements", "=", "True", ",", "extraAttributes", "=", "{", "}", ")", ":", "\n", "    ", "import", "tarfile", "\n", "from", "SentenceSplitter", "import", "openFile", "\n", "\"\"\"\n    Divide text in the \"text\" attributes of document and section \n    elements into sentence elements. These sentence elements are\n    inserted into their respective parent elements.\n    \"\"\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "input", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Corpus file loaded\"", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting parses from\"", ",", "parsePath", "\n", "assert", "os", ".", "path", ".", "exists", "(", "parsePath", ")", "\n", "if", "parsePath", ".", "find", "(", "\".tar.gz\"", ")", "!=", "-", "1", ":", "\n", "        ", "tarFilePath", ",", "parsePath", "=", "parsePath", ".", "split", "(", "\".tar.gz\"", ")", "\n", "tarFilePath", "+=", "\".tar.gz\"", "\n", "tarFile", "=", "tarfile", ".", "open", "(", "tarFilePath", ")", "\n", "if", "parsePath", "[", "0", "]", "==", "\"/\"", ":", "\n", "            ", "parsePath", "=", "parsePath", "[", "1", ":", "]", "\n", "", "", "else", ":", "\n", "        ", "tarFile", "=", "None", "\n", "\n", "", "docCount", "=", "0", "\n", "failCount", "=", "0", "\n", "docsWithSentences", "=", "0", "\n", "numCorpusSentences", "=", "0", "\n", "sentencesCreated", "=", "0", "\n", "sourceElements", "=", "[", "x", "for", "x", "in", "corpusRoot", ".", "getiterator", "(", "\"document\"", ")", "]", "+", "[", "x", "for", "x", "in", "corpusRoot", ".", "getiterator", "(", "\"section\"", ")", "]", "\n", "counter", "=", "ProgressCounter", "(", "len", "(", "sourceElements", ")", ",", "\"McCC Parse Insertion\"", ")", "\n", "for", "document", "in", "sourceElements", ":", "\n", "        ", "docCount", "+=", "1", "\n", "origId", "=", "document", ".", "get", "(", "\"pmid\"", ")", "\n", "if", "origId", "==", "None", ":", "\n", "            ", "origId", "=", "document", ".", "get", "(", "\"origId\"", ")", "\n", "", "if", "origId", "==", "None", ":", "\n", "            ", "origId", "=", "document", ".", "get", "(", "\"id\"", ")", "\n", "", "origId", "=", "str", "(", "origId", ")", "\n", "counter", ".", "update", "(", "1", ",", "\"Processing Documents (\"", "+", "document", ".", "get", "(", "\"id\"", ")", "+", "\"/\"", "+", "origId", "+", "\"): \"", ")", "\n", "docId", "=", "document", ".", "get", "(", "\"id\"", ")", "\n", "if", "docId", "==", "None", ":", "\n", "            ", "docId", "=", "\"CORPUS.d\"", "+", "str", "(", "docCount", ")", "\n", "\n", "", "f", "=", "openFile", "(", "os", ".", "path", ".", "join", "(", "parsePath", ",", "origId", "+", "\".ptb\"", ")", ",", "tarFile", ")", "\n", "if", "f", "==", "None", ":", "# file with BioNLP'11 extension not found, try BioNLP'09 extension", "\n", "            ", "f", "=", "openFile", "(", "os", ".", "path", ".", "join", "(", "parsePath", ",", "origId", "+", "\".pstree\"", ")", ",", "tarFile", ")", "\n", "if", "f", "==", "None", ":", "# no parse found", "\n", "                ", "continue", "\n", "", "", "parseStrings", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "sentences", "=", "document", ".", "findall", "(", "\"sentence\"", ")", "\n", "numCorpusSentences", "+=", "len", "(", "sentences", ")", "\n", "assert", "len", "(", "sentences", ")", "==", "len", "(", "parseStrings", ")", "\n", "# TODO: Following for-loop is the same as when used with a real parser, and should", "\n", "# be moved to its own function.", "\n", "for", "sentence", ",", "treeLine", "in", "zip", "(", "sentences", ",", "parseStrings", ")", ":", "\n", "            ", "if", "not", "insertParse", "(", "sentence", ",", "treeLine", ",", "makePhraseElements", "=", "makePhraseElements", ",", "extraAttributes", "=", "extraAttributes", ",", "docId", "=", "origId", ")", ":", "\n", "                ", "failCount", "+=", "1", "\n", "\n", "", "", "", "if", "tarFile", "!=", "None", ":", "\n", "        ", "tarFile", ".", "close", "(", ")", "\n", "#print >> sys.stderr, \"Sentence splitting created\", sentencesCreated, \"sentences\"", "\n", "#print >> sys.stderr, docsWithSentences, \"/\", docCount, \"documents have sentences\"", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Inserted parses for\"", ",", "numCorpusSentences", ",", "\"sentences (\"", "+", "str", "(", "failCount", ")", "+", "\" failed)\"", "\n", "if", "failCount", "==", "0", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"All sentences have a parse\"", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, a failed parse exists for\"", ",", "failCount", ",", "\"out of\"", ",", "numCorpusSentences", ",", "\"sentences\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"The \\\"pennstring\\\" attribute of these sentences has an empty string.\"", "\n", "", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "output", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.CopyElements.getMatchConditions": [[43, 51], ["matchString.find", "matchString.split"], "function", ["None"], ["def", "getMatchConditions", "(", "matchString", ")", ":", "\n", "    ", "\"\"\"Split the match options string\"\"\"", "\n", "if", "matchString", "==", "None", ":", "\n", "        ", "return", "[", "]", "\n", "", "elif", "matchString", ".", "find", "(", "\",\"", ")", "!=", "-", "1", ":", "\n", "        ", "return", "matchString", ".", "split", "(", "\",\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "matchString", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.CopyElements.matchElements": [[52, 63], ["None"], "function", ["None"], ["", "", "def", "matchElements", "(", "e1", ",", "e2", ",", "match", ")", ":", "\n", "    ", "\"\"\"\n    Test whether two elements have the same attributes. Used to check equality of elements\n    beyond the primary key (the first match option)\n    \"\"\"", "\n", "isMatch", "=", "True", "\n", "for", "matchCondition", "in", "match", ":", "\n", "        ", "if", "(", "e1", ".", "attrib", "[", "matchCondition", "]", "!=", "e2", ".", "attrib", "[", "matchCondition", "]", ")", ":", "\n", "            ", "isMatch", "=", "False", "\n", "break", "\n", "", "", "return", "isMatch", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.CopyElements.matchElement": [[64, 78], ["conditions.iteritems", "e.attrib.has_key"], "function", ["None"], ["", "def", "matchElement", "(", "e", ",", "conditions", ")", ":", "\n", "    ", "\"\"\"\n    e = ElementTree element\n    conditions = attrib-name:value dictionary\n    \n    Tests wheter the element has certain attributes and that those attributes have\n    the correct values\n    \"\"\"", "\n", "isMatch", "=", "True", "\n", "for", "k", ",", "v", "in", "conditions", ".", "iteritems", "(", ")", ":", "\n", "        ", "if", "(", "not", "e", ".", "attrib", ".", "has_key", "(", "k", ")", "or", "e", ".", "attrib", "[", "k", "]", "!=", "v", ")", ":", "\n", "            ", "isMatch", "=", "False", "\n", "break", "\n", "", "", "return", "isMatch", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.CopyElements.matchPairs": [[79, 93], ["sourceParents.keys", "sourceParents.keys.sort", "targetParents.has_key", "str", "CopyElements.matchElements", "pairs.append", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.CopyElements.matchElements"], ["", "def", "matchPairs", "(", "sourceParents", ",", "targetParents", ",", "match", ")", ":", "\n", "    ", "\"\"\"\n    Links parent elements (the elements whose subelements will be copied)\n    betweem source and target trees. Returs a list of (source element, target element)-pairs.\n    \"\"\"", "\n", "sourceKeys", "=", "sourceParents", ".", "keys", "(", ")", "\n", "sourceKeys", ".", "sort", "(", ")", "\n", "pairs", "=", "[", "]", "\n", "for", "sourceKey", "in", "sourceKeys", ":", "\n", "        ", "if", "targetParents", ".", "has_key", "(", "sourceKey", ")", ":", "\n", "            ", "assert", "(", "matchElements", "(", "sourceParents", "[", "sourceKey", "]", ",", "targetParents", "[", "sourceKey", "]", ",", "match", ")", ")", "\n", "pairs", ".", "append", "(", "(", "sourceParents", "[", "sourceKey", "]", ",", "targetParents", "[", "sourceKey", "]", ")", ")", "\n", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Formed\"", ",", "str", "(", "len", "(", "pairs", ")", ")", ",", "\"pairs\"", "\n", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.CopyElements.getParentElements": [[94, 107], ["root.findall", "str", "elementsByKey.has_key", "len"], "function", ["None"], ["", "def", "getParentElements", "(", "root", ",", "pattern", ",", "match", ")", ":", "\n", "    ", "\"\"\"\n    Returns a dictionary of parent elements indexed by the values\n    of the first attribute in the match-list.\n    \"\"\"", "\n", "primaryKey", "=", "match", "[", "0", "]", "\n", "elementsByKey", "=", "{", "}", "\n", "elements", "=", "root", ".", "findall", "(", "pattern", ")", "\n", "for", "element", "in", "elements", ":", "\n", "        ", "assert", "(", "not", "elementsByKey", ".", "has_key", "(", "element", ".", "attrib", "[", "primaryKey", "]", ")", ")", "\n", "elementsByKey", "[", "element", ".", "attrib", "[", "primaryKey", "]", "]", "=", "element", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Found\"", ",", "str", "(", "len", "(", "elementsByKey", ")", ")", ",", "\"elements\"", "\n", "return", "elementsByKey", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.CopyElements.copyElements": [[108, 141], ["sourceParent.findall", "targetElement.append", "str", "CopyElements.matchElement", "elementPath.find", "targetParent.findall", "elementPath.rsplit", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.CopyElements.matchElement"], ["", "def", "copyElements", "(", "pairs", ",", "elementPath", ",", "identifiers", ")", ":", "\n", "    ", "\"\"\"\n    Copies subelements that match the conditions in 'identifiers'\n    from the source-parents to the target-parents.\n    \"\"\"", "\n", "copied", "=", "0", "\n", "# Loop through all matched parent-pairs", "\n", "for", "pair", "in", "pairs", ":", "\n", "        ", "sourceParent", "=", "pair", "[", "0", "]", "\n", "targetParent", "=", "pair", "[", "1", "]", "\n", "# Locate the source element", "\n", "sourceElements", "=", "sourceParent", ".", "findall", "(", "elementPath", ")", "# source element is under the source parent", "\n", "sourceElement", "=", "None", "\n", "for", "element", "in", "sourceElements", ":", "\n", "            ", "if", "matchElement", "(", "element", ",", "identifiers", ")", ":", "\n", "                ", "assert", "(", "sourceElement", "==", "None", ")", "# The source element must be identified uniquely", "\n", "sourceElement", "=", "element", "\n", "", "", "assert", "(", "sourceElement", "!=", "None", ")", "# The source element must be found for each source parent", "\n", "#if sourceElement == None:", "\n", "#    return", "\n", "\n", "# Locate the target element       ", "\n", "# The subelement is added to the same level in the target XML that it existed in the source XML", "\n", "if", "elementPath", ".", "find", "(", "\"/\"", ")", "!=", "-", "1", ":", "\n", "            ", "targetPath", "=", "elementPath", ".", "rsplit", "(", "\"/\"", ",", "1", ")", "[", "0", "]", "\n", "targetElements", "=", "targetParent", ".", "findall", "(", "targetPath", ")", "# Find the immediate parent for the copied element", "\n", "assert", "(", "len", "(", "targetElements", ")", "==", "1", ")", "# The place to add the element must be identified uniquely", "\n", "targetElement", "=", "targetElements", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "targetElement", "=", "targetParent", "\n", "", "targetElement", ".", "append", "(", "sourceElement", ")", "\n", "copied", "+=", "1", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Copied\"", ",", "str", "(", "copied", ")", ",", "\"elements\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.SVMMultiClassClassifier.SVMMultiClassClassifier.__init__": [[48, 58], ["ExternalClassifier.ExternalClassifier.ExternalClassifier.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "connection", "=", "None", ")", ":", "\n", "        ", "ExternalClassifier", ".", "__init__", "(", "self", ",", "connection", "=", "connection", ")", "\n", "self", ".", "defaultEvaluator", "=", "AveragingMultiClassEvaluator", "\n", "self", ".", "parameterFormat", "=", "\"-%k %v\"", "\n", "self", ".", "parameterValueListKey", "[", "\"train\"", "]", "=", "\"c\"", "\n", "self", ".", "parameterValueTypes", "[", "\"train\"", "]", "=", "{", "\"c\"", ":", "[", "int", ",", "float", "]", "}", "\n", "self", ".", "trainDirSetting", "=", "\"SVM_MULTICLASS_DIR\"", "\n", "self", ".", "trainCommand", "=", "\"%dsvm_multiclass_learn %p %e %m\"", "\n", "self", ".", "classifyDirSetting", "=", "\"SVM_MULTICLASS_DIR\"", "\n", "self", ".", "classifyCommand", "=", "\"%dsvm_multiclass_classify %e %m %c\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.SVMMultiClassClassifier.install": [[17, 42], ["Utils.downloadAndExtract", "Tools.Tool.finalizeInstall", "os.path.join", "Tools.Tool.testPrograms", "subprocess.call", "struct.calcsize"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.finalizeInstall", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.Tool.testPrograms"], ["def", "install", "(", "destDir", "=", "None", ",", "downloadDir", "=", "None", ",", "redownload", "=", "False", ",", "compile", "=", "True", ",", "updateLocalSettings", "=", "False", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Installing SVM-Multiclass\"", "\n", "if", "compile", ":", "\n", "        ", "url", "=", "Settings", ".", "URL", "[", "\"SVM_MULTICLASS_SOURCE\"", "]", "\n", "", "else", ":", "\n", "        ", "if", "8", "*", "struct", ".", "calcsize", "(", "\"P\"", ")", "==", "32", ":", "# check for 32 bit or 64 bit environment (see http://stackoverflow.com/questions/1405913/how-do-i-determine-if-my-python-shell-is-executing-in-32bit-or-64bit-mode-on-os)", "\n", "            ", "url", "=", "Settings", ".", "URL", "[", "\"SVM_MULTICLASS_LINUX_32\"", "]", "\n", "", "else", ":", "\n", "            ", "url", "=", "Settings", ".", "URL", "[", "\"SVM_MULTICLASS_LINUX_64\"", "]", "\n", "", "", "if", "downloadDir", "==", "None", ":", "\n", "        ", "downloadDir", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"tools/download/\"", ")", "\n", "", "if", "destDir", "==", "None", ":", "\n", "        ", "destDir", "=", "Settings", ".", "DATAPATH", "\n", "", "destDir", "+=", "\"/tools/SVMMultiClass\"", "\n", "\n", "Download", ".", "downloadAndExtract", "(", "url", ",", "destDir", ",", "downloadDir", ",", "redownload", "=", "redownload", ")", "\n", "if", "compile", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Compiling SVM-Multiclass\"", "\n", "Tools", ".", "Tool", ".", "testPrograms", "(", "\"SVM-Multiclass\"", ",", "[", "\"make\"", "]", ")", "\n", "subprocess", ".", "call", "(", "\"cd \"", "+", "destDir", "+", "\"; make\"", ",", "shell", "=", "True", ")", "\n", "\n", "", "Tools", ".", "Tool", ".", "finalizeInstall", "(", "[", "\"svm_multiclass_learn\"", ",", "\"svm_multiclass_classify\"", "]", ",", "\n", "{", "\"svm_multiclass_learn\"", ":", "\"echo | ./svm_multiclass_learn -? > /dev/null\"", ",", "\n", "\"svm_multiclass_classify\"", ":", "\"echo | ./svm_multiclass_classify -? > /dev/null\"", "}", ",", "\n", "destDir", ",", "{", "\"SVM_MULTICLASS_DIR\"", ":", "destDir", "}", ",", "updateLocalSettings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ScikitClassifier.ScikitClassifier.__init__": [[10, 21], ["ExternalClassifier.ExternalClassifier.ExternalClassifier.__init__", "os.path.join", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "connection", "=", "None", ")", ":", "\n", "        ", "ExternalClassifier", ".", "__init__", "(", "self", ",", "connection", "=", "connection", ")", "\n", "self", ".", "defaultEvaluator", "=", "AveragingMultiClassEvaluator", "\n", "self", ".", "parameterFormat", "=", "\"-%k %v\"", "\n", "self", ".", "parameterValueListKey", "[", "\"train\"", "]", "=", "\"c\"", "\n", "self", ".", "parameterValueTypes", "[", "\"train\"", "]", "=", "{", "\"c\"", ":", "[", "int", ",", "float", "]", "}", "\n", "#self.trainDirSetting = \"SCIKIT_WRAPPER_DIR\"", "\n", "wrapperPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"ScikitWrapper.py\"", ")", "\n", "self", ".", "trainCommand", "=", "\"python \"", "+", "wrapperPath", "+", "\" --train %p --examples %e --model %m\"", "\n", "#self.classifyDirSetting = \"SCIKIT_WRAPPER_DIR\"", "\n", "self", ".", "classifyCommand", "=", "\"python \"", "+", "wrapperPath", "+", "\" --classify --examples %e --model %m --predictions %c\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.__init__": [[23, 50], ["Utils.Connection.UnixConnection.UnixConnection", "Utils.Connection.UnixConnection.UnixConnection", "Utils.Connection.UnixConnection.UnixConnection", "Utils.Connection.UnixConnection.UnixConnection"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "connection", "=", "None", ")", ":", "\n", "        ", "self", ".", "defaultEvaluator", "=", "None", "\n", "if", "connection", "==", "None", ":", "\n", "            ", "self", ".", "connection", "=", "UnixConnection", "(", ")", "# A local connection", "\n", "", "else", ":", "\n", "            ", "self", ".", "connection", "=", "connection", "\n", "", "self", ".", "parameterGrid", "=", "None", "\n", "self", ".", "state", "=", "None", "\n", "self", ".", "_job", "=", "None", "\n", "self", ".", "_prevJobStatus", "=", "None", "\n", "self", ".", "_filesToRelease", "=", "[", "]", "\n", "\n", "self", ".", "parameters", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "predictions", "=", "None", "\n", "\n", "self", ".", "parameterFormat", "=", "\"-%k %v\"", "\n", "self", ".", "parameterDefaults", "=", "{", "\"train\"", ":", "None", ",", "\"classify\"", ":", "None", "}", "\n", "self", ".", "parameterAllowNew", "=", "{", "\"train\"", ":", "True", ",", "\"classify\"", ":", "True", "}", "\n", "self", ".", "parameterValueListKey", "=", "{", "\"train\"", ":", "None", ",", "\"classify\"", ":", "None", "}", "\n", "self", ".", "parameterValueLimits", "=", "{", "\"train\"", ":", "None", ",", "\"classify\"", ":", "None", "}", "\n", "self", ".", "parameterValueTypes", "=", "{", "\"train\"", ":", "None", ",", "\"classify\"", ":", "None", "}", "\n", "\n", "self", ".", "trainDirSetting", "=", "None", "\n", "self", ".", "trainCommand", "=", "None", "\n", "self", ".", "classifyDirSetting", "=", "None", "\n", "self", ".", "classifyCommand", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.getJob": [[51, 53], ["None"], "methods", ["None"], ["", "def", "getJob", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_job", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.getStatus": [[54, 67], ["ExternalClassifier.ExternalClassifier.connection.getJobStatus", "ExternalClassifier.getFileCounter"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.getJobStatus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.getFileCounter"], ["", "def", "getStatus", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_job", "!=", "None", ":", "\n", "            ", "self", ".", "_prevJobStatus", "=", "self", ".", "connection", ".", "getJobStatus", "(", "self", ".", "_job", ")", "\n", "", "if", "self", ".", "_prevJobStatus", "in", "[", "\"FINISHED\"", ",", "\"FAILED\"", "]", ":", "\n", "            ", "self", ".", "state", "=", "None", "\n", "self", ".", "_job", "=", "None", "\n", "for", "filename", "in", "self", ".", "_filesToRelease", ":", "\n", "                ", "ExternalClassifier", ".", "getFileCounter", "(", "filename", ",", "add", "=", "-", "1", ",", "createIfNotExist", "=", "False", ")", "\n", "", "self", ".", "_filesToRelease", "=", "[", "]", "\n", "", "if", "self", ".", "_prevJobStatus", "==", "None", ":", "\n", "            ", "return", "\"FINISHED\"", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_prevJobStatus", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.setState": [[68, 78], ["ExternalClassifier.ExternalClassifier.getStatus"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.getStatus"], ["", "", "def", "setState", "(", "self", ",", "stateName", ")", ":", "\n", "        ", "assert", "self", ".", "getStatus", "(", ")", "in", "[", "\"FINISHED\"", ",", "\"FAILED\"", "]", "\n", "self", ".", "state", "=", "stateName", "\n", "self", ".", "_job", "=", "None", "\n", "self", ".", "_prevJobStatus", "=", "None", "\n", "if", "stateName", "==", "\"TRAIN\"", "or", "stateName", "==", "\"OPTIMIZE\"", ":", "\n", "            ", "self", ".", "model", "=", "None", "\n", "self", ".", "parameters", "=", "None", "\n", "# for all states", "\n", "", "self", ".", "predictions", "=", "None", "\n", "#self.optimizeJobs = []", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier._getParameterString": [[80, 100], ["sorted", "idStr.replace.replace.replace", "idStr.replace.replace.replace", "parameters.keys", "key.startswith", "ExternalClassifier.ExternalClassifier.parameterFormat.replace().replace().strip", "ExternalClassifier.ExternalClassifier.parameterFormat.replace().replace().strip", "len", "paramString.endswith", "str", "str", "ExternalClassifier.ExternalClassifier.parameterFormat.replace().replace", "ExternalClassifier.ExternalClassifier.parameterFormat.replace().replace", "str", "str", "ExternalClassifier.ExternalClassifier.parameterFormat.replace", "ExternalClassifier.ExternalClassifier.parameterFormat.replace", "c.isalnum"], "methods", ["None"], ["", "def", "_getParameterString", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "paramKeys", "=", "sorted", "(", "parameters", ".", "keys", "(", ")", ")", "\n", "idStr", "=", "\"\"", "\n", "paramString", "=", "\"\"", "\n", "for", "key", "in", "paramKeys", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "\"TEES.\"", ")", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "paramString", ")", ">", "0", "and", "not", "paramString", ".", "endswith", "(", "\" \"", ")", ":", "\n", "                ", "paramString", "+=", "\" \"", "\n", "", "if", "parameters", "[", "key", "]", "!=", "None", ":", "\n", "                ", "paramString", "+=", "self", ".", "parameterFormat", ".", "replace", "(", "\"%k\"", ",", "key", ")", ".", "replace", "(", "\"%v\"", ",", "str", "(", "parameters", "[", "key", "]", ")", ")", ".", "strip", "(", ")", "\n", "idStr", "+=", "\"-\"", "+", "str", "(", "key", ")", "+", "\"_\"", "+", "str", "(", "parameters", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "                ", "paramString", "+=", "self", ".", "parameterFormat", ".", "replace", "(", "\"%k\"", ",", "key", ")", ".", "replace", "(", "\"%v\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "idStr", "+=", "\"-\"", "+", "str", "(", "key", ")", "\n", "# sanitize id", "\n", "", "", "idStr", "=", "idStr", ".", "replace", "(", "\":\"", ",", "\".\"", ")", "\n", "idStr", "=", "idStr", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "idStr", "=", "\"\"", ".", "join", "(", "[", "c", "for", "c", "in", "idStr", "if", "c", ".", "isalnum", "(", ")", "or", "c", "in", "(", "'.'", ",", "'_'", ",", "\"-\"", ")", "]", ")", ".", "rstrip", "(", ")", "\n", "return", "paramString", ",", "idStr", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.train": [[101, 151], ["os.path.abspath", "ExternalClassifier.ExternalClassifier.getExampleFile", "ExternalClassifier.ExternalClassifier.getExampleFile", "copy.copy", "copy.copy", "copy.copy", "copy.copy", "copy.copy.setState", "copy.copy.setState", "ExternalClassifier.ExternalClassifier.trainCommand.replace", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "ExternalClassifier.ExternalClassifier._getParameterString", "ExternalClassifier.ExternalClassifier.connection.getRemotePath", "ExternalClassifier.ExternalClassifier.connection.getRemotePath", "trainCommand.replace().replace().replace().strip.replace().replace().replace().strip.replace().replace().replace().strip", "ExternalClassifier.ExternalClassifier.connection.addCommand", "os.path.exists", "os.makedirs", "ExternalClassifier.ExternalClassifier.connection.getRemotePath", "ExternalClassifier.ExternalClassifier.connection.getRemotePath", "ExternalClassifier.ExternalClassifier.classifyCommand.replace().replace().replace().replace().strip", "ExternalClassifier.ExternalClassifier.connection.addCommand", "[].replace", "ExternalClassifier.ExternalClassifier.connection.clearCommands", "ExternalClassifier.ExternalClassifier.connection.getJob", "ExternalClassifier.ExternalClassifier.connection.submit", "os.path.normpath", "trainCommand.replace().replace().replace().strip.replace().replace().replace().strip.replace().replace().replace", "ExternalClassifier.ExternalClassifier.connection.waitForJob", "ExternalClassifier.ExternalClassifier.getStatus", "ExternalClassifier.ExternalClassifier.connection.getSetting", "os.path.normpath", "ExternalClassifier.ExternalClassifier.classifyCommand.replace().replace().replace().replace", "trainCommand.replace().replace().replace().strip.replace().replace().replace().strip.replace().replace", "ExternalClassifier.ExternalClassifier.connection.getSetting", "ExternalClassifier.ExternalClassifier.trainCommand.split", "ExternalClassifier.ExternalClassifier.classifyCommand.replace().replace().replace", "trainCommand.replace().replace().replace().strip.replace().replace().replace().strip.replace", "ExternalClassifier.ExternalClassifier.classifyCommand.replace().replace", "ExternalClassifier.ExternalClassifier.classifyCommand.replace"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.getExampleFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.getExampleFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.setState", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.setState", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier._getParameterString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.PBSConnection.PBSConnection.addCommand", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.PBSConnection.PBSConnection.addCommand", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.clearCommands", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getJob", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.submit", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.waitForJob", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.getStatus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getSetting", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getSetting"], ["", "def", "train", "(", "self", ",", "examples", ",", "outDir", ",", "parameters", ",", "classifyExamples", "=", "None", ",", "finishBeforeReturn", "=", "False", ",", "replaceRemoteExamples", "=", "True", ",", "dummy", "=", "False", ")", ":", "\n", "        ", "outDir", "=", "os", ".", "path", ".", "abspath", "(", "outDir", ")", "\n", "\n", "examples", "=", "self", ".", "getExampleFile", "(", "examples", ",", "replaceRemote", "=", "replaceRemoteExamples", ",", "dummy", "=", "dummy", ")", "\n", "classifyExamples", "=", "self", ".", "getExampleFile", "(", "classifyExamples", ",", "replaceRemote", "=", "replaceRemoteExamples", ",", "dummy", "=", "dummy", ")", "\n", "#parameters = Parameters.get(parameters, valueListKey=\"c\")", "\n", "trainDir", "=", "\"\"", "\n", "if", "self", ".", "trainDirSetting", ":", "\n", "            ", "trainDir", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "connection", ".", "getSetting", "(", "self", ".", "trainDirSetting", ")", ")", "+", "os", ".", "path", ".", "sep", "\n", "\n", "# Return a new classifier instance for following the training process and using the model", "\n", "", "classifier", "=", "copy", ".", "copy", "(", "self", ")", "\n", "classifier", ".", "setState", "(", "\"TRAIN\"", ")", "\n", "classifier", ".", "parameters", "=", "parameters", "\n", "classifier", ".", "_filesToRelease", "=", "[", "examples", ",", "classifyExamples", "]", "\n", "# Train", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outDir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "outDir", ")", "\n", "#trainCommand = os.path.join(trainDir, self.trainCommand)", "\n", "", "trainCommand", "=", "self", ".", "trainCommand", ".", "replace", "(", "\"%d\"", ",", "trainDir", ")", "\n", "parameters", "=", "Parameters", ".", "get", "(", "parameters", ",", "self", ".", "parameterDefaults", "[", "\"train\"", "]", ",", "self", ".", "parameterAllowNew", "[", "\"train\"", "]", ",", "\n", "self", ".", "parameterValueListKey", "[", "\"train\"", "]", ",", "self", ".", "parameterValueLimits", "[", "\"train\"", "]", ",", "\n", "self", ".", "parameterValueTypes", "[", "\"train\"", "]", ")", "\n", "paramString", ",", "idStr", "=", "self", ".", "_getParameterString", "(", "parameters", ")", "\n", "classifier", ".", "parameterIdStr", "=", "idStr", "\n", "classifier", ".", "model", "=", "self", ".", "connection", ".", "getRemotePath", "(", "outDir", "+", "\"/model\"", "+", "idStr", ",", "True", ")", "\n", "modelPath", "=", "self", ".", "connection", ".", "getRemotePath", "(", "outDir", "+", "\"/model\"", "+", "idStr", ",", "False", ")", "\n", "trainCommand", "=", "trainCommand", ".", "replace", "(", "\"%p\"", ",", "paramString", ")", ".", "replace", "(", "\"%e\"", ",", "examples", ")", ".", "replace", "(", "\"%m\"", ",", "modelPath", ")", ".", "strip", "(", ")", "\n", "self", ".", "connection", ".", "addCommand", "(", "trainCommand", ")", "\n", "# Classify with the trained model (optional)", "\n", "if", "classifyExamples", "!=", "None", ":", "\n", "            ", "classifier", ".", "predictions", "=", "self", ".", "connection", ".", "getRemotePath", "(", "outDir", "+", "\"/predictions\"", "+", "idStr", ",", "True", ")", "\n", "predictionsPath", "=", "self", ".", "connection", ".", "getRemotePath", "(", "outDir", "+", "\"/predictions\"", "+", "idStr", ",", "False", ")", "\n", "classifyDir", "=", "\"\"", "\n", "if", "self", ".", "classifyDirSetting", ":", "\n", "                ", "classifyDir", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "connection", ".", "getSetting", "(", "self", ".", "classifyDirSetting", ")", ")", "+", "os", ".", "path", ".", "sep", "\n", "", "classifyCommand", "=", "self", ".", "classifyCommand", ".", "replace", "(", "\"%d\"", ",", "classifyDir", ")", ".", "replace", "(", "\"%e\"", ",", "classifyExamples", ")", ".", "replace", "(", "\"%m\"", ",", "modelPath", ")", ".", "replace", "(", "\"%c\"", ",", "predictionsPath", ")", ".", "strip", "(", ")", "\n", "self", ".", "connection", ".", "addCommand", "(", "classifyCommand", ")", "\n", "# Run the process", "\n", "", "jobName", "=", "self", ".", "trainCommand", ".", "split", "(", ")", "[", "0", "]", ".", "replace", "(", "\"%d\"", ",", "\"\"", ")", "+", "idStr", "\n", "logPath", "=", "outDir", "+", "\"/\"", "+", "jobName", "\n", "if", "dummy", ":", "# return a classifier that connects to an existing job", "\n", "            ", "self", ".", "connection", ".", "clearCommands", "(", ")", "\n", "classifier", ".", "_job", "=", "self", ".", "connection", ".", "getJob", "(", "jobDir", "=", "outDir", ",", "jobName", "=", "jobName", ")", "\n", "", "else", ":", "# submit the job", "\n", "            ", "classifier", ".", "_job", "=", "self", ".", "connection", ".", "submit", "(", "jobDir", "=", "outDir", ",", "jobName", "=", "jobName", ",", "stdout", "=", "logPath", "+", "\".stdout\"", ")", "\n", "if", "finishBeforeReturn", ":", "\n", "                ", "self", ".", "connection", ".", "waitForJob", "(", "classifier", ".", "_job", ")", "\n", "self", ".", "getStatus", "(", ")", "\n", "", "", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.downloadModel": [[152, 158], ["ExternalClassifier.ExternalClassifier.connection.download", "Utils.Connection.UnixConnection.UnixConnection", "Utils.Connection.UnixConnection.UnixConnection", "Utils.Connection.UnixConnection.UnixConnection", "Utils.Connection.UnixConnection.UnixConnection", "ExternalClassifier.ExternalClassifier.getStatus"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.getStatus"], ["", "def", "downloadModel", "(", "self", ",", "outPath", "=", "None", ",", "breakConnection", "=", "True", ")", ":", "\n", "        ", "assert", "self", ".", "getStatus", "(", ")", "==", "\"FINISHED\"", "and", "self", ".", "model", "!=", "None", "\n", "self", ".", "model", "=", "self", ".", "connection", ".", "download", "(", "self", ".", "model", ",", "outPath", ")", "\n", "if", "breakConnection", ":", "\n", "            ", "self", ".", "connection", "=", "UnixConnection", "(", ")", "# A local connection", "\n", "", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.downloadPredictions": [[159, 163], ["ExternalClassifier.ExternalClassifier.connection.download", "ExternalClassifier.ExternalClassifier.getStatus"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.getStatus"], ["", "def", "downloadPredictions", "(", "self", ",", "outPath", "=", "None", ")", ":", "\n", "        ", "assert", "self", ".", "getStatus", "(", ")", "==", "\"FINISHED\"", "and", "self", ".", "predictions", "!=", "None", "\n", "self", ".", "predictions", "=", "self", ".", "connection", ".", "download", "(", "self", ".", "predictions", ",", "outPath", ")", "\n", "return", "self", ".", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.classify": [[164, 190], ["os.path.abspath", "copy.copy", "copy.copy", "copy.copy", "copy.copy", "copy.copy.setState", "copy.copy.setState", "os.path.abspath", "ExternalClassifier.ExternalClassifier.connection.upload", "ExternalClassifier.ExternalClassifier.connection.getRemotePath", "ExternalClassifier.ExternalClassifier.connection.getRemotePath", "ExternalClassifier.ExternalClassifier.getExampleFile", "ExternalClassifier.ExternalClassifier.connection.clearCommands", "ExternalClassifier.ExternalClassifier.classifyCommand.replace().replace().replace().replace().strip", "ExternalClassifier.ExternalClassifier.connection.addCommand", "ExternalClassifier.ExternalClassifier.connection.submit", "ExternalClassifier.ExternalClassifier.connection.waitForJob", "copy.copy.downloadPredictions", "copy.copy.downloadPredictions", "os.path.normpath", "ExternalClassifier.ExternalClassifier.classifyCommand.replace().replace().replace().replace", "os.path.abspath", "ExternalClassifier.ExternalClassifier.connection.getSetting", "os.path.dirname", "os.path.basename", "ExternalClassifier.ExternalClassifier.classifyCommand.replace().replace().replace", "[].replace", "ExternalClassifier.ExternalClassifier.classifyCommand.replace().replace", "ExternalClassifier.ExternalClassifier.classifyCommand.split", "ExternalClassifier.ExternalClassifier.classifyCommand.replace"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.setState", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.setState", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.upload", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.getExampleFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.clearCommands", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.PBSConnection.PBSConnection.addCommand", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.submit", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.waitForJob", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.downloadPredictions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.downloadPredictions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getSetting"], ["", "def", "classify", "(", "self", ",", "examples", ",", "output", ",", "model", "=", "None", ",", "finishBeforeReturn", "=", "False", ",", "replaceRemoteFiles", "=", "True", ")", ":", "\n", "        ", "output", "=", "os", ".", "path", ".", "abspath", "(", "output", ")", "\n", "# Return a new classifier instance for following the training process and using the model", "\n", "classifier", "=", "copy", ".", "copy", "(", "self", ")", "\n", "classifier", ".", "setState", "(", "\"CLASSIFY\"", ")", "\n", "# Classify", "\n", "if", "model", "==", "None", ":", "\n", "            ", "classifier", ".", "model", "=", "model", "=", "self", ".", "model", "\n", "", "model", "=", "os", ".", "path", ".", "abspath", "(", "model", ")", "\n", "model", "=", "self", ".", "connection", ".", "upload", "(", "model", ",", "uncompress", "=", "True", ",", "replace", "=", "replaceRemoteFiles", ")", "\n", "classifier", ".", "predictions", "=", "self", ".", "connection", ".", "getRemotePath", "(", "output", ",", "True", ")", "\n", "predictionsPath", "=", "self", ".", "connection", ".", "getRemotePath", "(", "output", ",", "False", ")", "\n", "examples", "=", "self", ".", "getExampleFile", "(", "examples", ",", "replaceRemote", "=", "replaceRemoteFiles", ")", "\n", "classifier", ".", "_filesToRelease", "=", "[", "examples", "]", "\n", "self", ".", "connection", ".", "clearCommands", "(", ")", "\n", "classifyDir", "=", "\"\"", "\n", "if", "self", ".", "classifyDirSetting", ":", "\n", "            ", "classifyDir", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "connection", ".", "getSetting", "(", "self", ".", "classifyDirSetting", ")", ")", "+", "os", ".", "path", ".", "sep", "\n", "", "classifyCommand", "=", "self", ".", "classifyCommand", ".", "replace", "(", "\"%d\"", ",", "classifyDir", ")", ".", "replace", "(", "\"%e\"", ",", "examples", ")", ".", "replace", "(", "\"%m\"", ",", "model", ")", ".", "replace", "(", "\"%c\"", ",", "predictionsPath", ")", ".", "strip", "(", ")", "\n", "self", ".", "connection", ".", "addCommand", "(", "classifyCommand", ")", "\n", "classifier", ".", "_job", "=", "self", ".", "connection", ".", "submit", "(", "jobDir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "output", ")", ")", ",", "\n", "jobName", "=", "self", ".", "classifyCommand", ".", "split", "(", ")", "[", "0", "]", ".", "replace", "(", "\"%d\"", ",", "\"\"", ")", "+", "\"-\"", "+", "os", ".", "path", ".", "basename", "(", "model", ")", ")", "\n", "if", "finishBeforeReturn", ":", "\n", "            ", "self", ".", "connection", ".", "waitForJob", "(", "classifier", ".", "_job", ")", "\n", "classifier", ".", "downloadPredictions", "(", ")", "\n", "", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.optimize": [[191, 247], ["os.path.abspath", "Utils.getCombinations", "Utils.getCombinations", "Utils.getCombinations", "Utils.getCombinations", "ExternalClassifier.ExternalClassifier.connection.waitForJobs", "range", "copy.copy", "copy.copy", "copy.copy", "copy.copy", "copy.copy.downloadModel", "copy.copy.downloadModel", "Utils.get", "Utils.get", "Utils.get", "Utils.get", "trained.append", "copy.copy", "copy.copy", "copy.copy", "copy.copy", "copy.copy.setState", "copy.copy.setState", "len", "evaluator.evaluate", "Exception", "ExternalClassifier.ExternalClassifier.train", "x.getJob", "trained[].getStatus", "trained[].downloadPredictions", "trained[].downloadModel", "evaluator.evaluate", "evaluator.threshold", "Core.loadPredictions", "os.path.join", "ExternalClassifier.ExternalClassifier.connection.isLocal", "os.remove", "os.path.join", "evaluator.evaluate.microF.toStringConcise", "evaluator.evaluate.compare", "str", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.waitForJobs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.downloadModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.downloadModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.setState", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.setState", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllTrueClassifier.AllTrueClassifier.train", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getJob", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.getStatus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.downloadPredictions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.ExternalClassifier.ExternalClassifier.downloadModel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.loadPredictions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.isLocal"], ["", "def", "optimize", "(", "self", ",", "examples", ",", "outDir", ",", "parameters", ",", "classifyExamples", ",", "classIds", ",", "step", "=", "\"BOTH\"", ",", "evaluator", "=", "None", ",", "determineThreshold", "=", "False", ",", "timeout", "=", "None", ",", "downloadAllModels", "=", "False", ")", ":", "\n", "        ", "assert", "step", "in", "[", "\"BOTH\"", ",", "\"SUBMIT\"", ",", "\"RESULTS\"", "]", ",", "step", "\n", "outDir", "=", "os", ".", "path", ".", "abspath", "(", "outDir", ")", "\n", "# Initialize training (or reconnect to existing jobs)", "\n", "combinations", "=", "Parameters", ".", "getCombinations", "(", "Parameters", ".", "get", "(", "parameters", ",", "valueListKey", "=", "\"c\"", ")", ")", "#Core.OptimizeParameters.getParameterCombinations(parameters)", "\n", "trained", "=", "[", "]", "\n", "for", "combination", "in", "combinations", ":", "\n", "            ", "trained", ".", "append", "(", "self", ".", "train", "(", "examples", ",", "outDir", ",", "combination", ",", "classifyExamples", ",", "replaceRemoteExamples", "=", "(", "len", "(", "trained", ")", "==", "0", ")", ",", "dummy", "=", "(", "step", "==", "\"RESULTS\"", ")", ")", ")", "\n", "", "if", "step", "==", "\"SUBMIT\"", ":", "# Return already", "\n", "            ", "classifier", "=", "copy", ".", "copy", "(", "self", ")", "\n", "classifier", ".", "setState", "(", "\"OPTIMIZE\"", ")", "\n", "return", "classifier", "\n", "\n", "# Wait for the training to finish", "\n", "", "finalJobStatus", "=", "self", ".", "connection", ".", "waitForJobs", "(", "[", "x", ".", "getJob", "(", ")", "for", "x", "in", "trained", "]", ")", "\n", "# Evaluate the results", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Evaluating results\"", "\n", "#Stream.setIndent(\" \")", "\n", "bestResult", "=", "None", "\n", "if", "evaluator", "==", "None", ":", "\n", "            ", "evaluator", "=", "self", ".", "defaultEvaluator", "\n", "", "for", "i", "in", "range", "(", "len", "(", "combinations", ")", ")", ":", "\n", "            ", "id", "=", "trained", "[", "i", "]", ".", "parameterIdStr", "\n", "#Stream.setIndent(\" \")", "\n", "# Get predictions", "\n", "predictions", "=", "None", "\n", "if", "trained", "[", "i", "]", ".", "getStatus", "(", ")", "==", "\"FINISHED\"", ":", "\n", "                ", "predictions", "=", "trained", "[", "i", "]", ".", "downloadPredictions", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"No results for combination\"", "+", "id", "\n", "continue", "\n", "", "if", "downloadAllModels", ":", "\n", "                ", "trained", "[", "i", "]", ".", "downloadModel", "(", ")", "\n", "# Compare to other results", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"*** Evaluating results for combination\"", "+", "id", "+", "\" ***\"", "\n", "threshold", "=", "None", "\n", "if", "determineThreshold", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Thresholding, original micro =\"", ",", "\n", "evaluation", "=", "evaluator", ".", "evaluate", "(", "classifyExamples", ",", "predictions", ",", "classIds", ",", "os", ".", "path", ".", "join", "(", "outDir", ",", "\"evaluation-before-threshold\"", "+", "id", "+", "\".csv\"", ")", ",", "verbose", "=", "False", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "evaluation", ".", "microF", ".", "toStringConcise", "(", ")", "\n", "threshold", ",", "bestF", "=", "evaluator", ".", "threshold", "(", "classifyExamples", ",", "predictions", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"threshold =\"", ",", "threshold", ",", "\"at binary fscore\"", ",", "str", "(", "bestF", ")", "[", "0", ":", "6", "]", "\n", "", "evaluation", "=", "evaluator", ".", "evaluate", "(", "classifyExamples", ",", "ExampleUtils", ".", "loadPredictions", "(", "predictions", ",", "threshold", "=", "threshold", ")", ",", "classIds", ",", "os", ".", "path", ".", "join", "(", "outDir", ",", "\"evaluation\"", "+", "id", "+", "\".csv\"", ")", ")", "\n", "if", "bestResult", "==", "None", "or", "evaluation", ".", "compare", "(", "bestResult", "[", "0", "]", ")", ">", "0", ":", "#: averageResult.fScore > bestResult[1].fScore:", "\n", "                ", "bestResult", "=", "[", "evaluation", ",", "trained", "[", "i", "]", ",", "combinations", "[", "i", "]", ",", "threshold", "]", "\n", "", "if", "not", "self", ".", "connection", ".", "isLocal", "(", ")", ":", "\n", "                ", "os", ".", "remove", "(", "predictions", ")", "# remove predictions to save space", "\n", "#Stream.setIndent()", "\n", "", "", "if", "bestResult", "==", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"No results for any parameter combination\"", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"*** Evaluation complete\"", ",", "finalJobStatus", ",", "\"***\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Selected parameters\"", ",", "bestResult", "[", "2", "]", "\n", "classifier", "=", "copy", ".", "copy", "(", "bestResult", "[", "1", "]", ")", "\n", "classifier", ".", "threshold", "=", "bestResult", "[", "3", "]", "\n", "classifier", ".", "downloadModel", "(", ")", "\n", "return", "classifier", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "connection", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.train": [[19, 21], ["copy.copy"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "examples", ",", "outDir", ",", "parameters", ",", "classifyExamples", "=", "None", ")", ":", "\n", "        ", "return", "copy", ".", "copy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.classify": [[22, 24], ["None"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "examples", ",", "output", ",", "model", "=", "None", ",", "finishBeforeReturn", "=", "False", ",", "replaceRemoteFiles", "=", "True", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.optimize": [[25, 29], ["copy.copy"], "methods", ["None"], ["", "def", "optimize", "(", "self", ",", "examples", ",", "outDir", ",", "parameters", ",", "classifyExamples", ",", "classIds", ",", "step", "=", "\"BOTH\"", ",", "evaluator", "=", "None", ",", "determineThreshold", "=", "False", ",", "timeout", "=", "None", ",", "downloadAllModels", "=", "False", ")", ":", "\n", "        ", "classifier", "=", "copy", ".", "copy", "(", "self", ")", "\n", "classifier", ".", "parameters", "=", "parameters", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.saveModel": [[30, 38], ["hasattr", "teesModel.get", "shutil.copy2", "hasattr", "teesModel.addStr", "hasattr", "teesModel.addStr", "Utils.toString", "str", "Utils.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.addStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.addStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "saveModel", "(", "self", ",", "teesModel", ",", "tag", "=", "\"\"", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"model\"", ")", "and", "self", ".", "model", "!=", "None", ":", "\n", "            ", "teesModelPath", "=", "teesModel", ".", "get", "(", "tag", "+", "\"classifier-model\"", ",", "True", ")", "\n", "shutil", ".", "copy2", "(", "self", ".", "model", ",", "teesModelPath", ")", "\n", "", "if", "hasattr", "(", "self", ",", "\"parameters\"", ")", "and", "self", ".", "parameters", "!=", "None", ":", "\n", "            ", "teesModel", ".", "addStr", "(", "tag", "+", "\"classifier-parameter\"", ",", "Parameters", ".", "toString", "(", "Parameters", ".", "get", "(", "self", ".", "parameters", ")", ")", ")", "\n", "", "if", "hasattr", "(", "self", ",", "\"threshold\"", ")", "and", "self", ".", "threshold", "!=", "None", ":", "\n", "            ", "teesModel", ".", "addStr", "(", "tag", "+", "\"threshold\"", ",", "str", "(", "self", ".", "threshold", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.getUnzipped": [[41, 68], ["os.path.exists", "filename.endswith", "subprocess.call", "os.path.exists", "os.path.exists", "atexit.register", "os.path.getmtime", "os.path.getmtime"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "", "@", "classmethod", "\n", "def", "getUnzipped", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "\"\"\"\n        Temporarily uncompress a file, usually a compressed example file. The uncompressed\n        file appears in the same location as the original file. The /tmp directory is\n        as these examples are usually used by a classifier that is run in separate process,\n        which on clusters might end up on a different node, where the local /tmp is no\n        longer accessible.\n        \"\"\"", "\n", "if", "not", "filename", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "            ", "return", "filename", "\n", "", "tempfilename", "=", "filename", "[", ":", "-", "3", "]", "+", "\"-unzipped-temp\"", "\n", "# Determine if the uncompressed file does not exist, or needs to be updated", "\n", "uncompress", "=", "False", "\n", "if", "os", ".", "path", ".", "exists", "(", "tempfilename", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "getmtime", "(", "filename", ")", ">", "os", ".", "path", ".", "getmtime", "(", "tempfilename", ")", ":", "# compressed file has changed", "\n", "                ", "uncompress", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "uncompress", "=", "True", "\n", "# Uncompress if needed", "\n", "", "if", "uncompress", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Uncompressing example file\"", ",", "filename", "\n", "subprocess", ".", "call", "(", "\"gunzip -cfv \"", "+", "filename", "+", "\" > \"", "+", "tempfilename", ",", "shell", "=", "True", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "tempfilename", ")", "\n", "atexit", ".", "register", "(", "removeTempUnzipped", ",", "tempfilename", ")", "# mark for deletion", "\n", "", "return", "tempfilename", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.getFileCounter": [[69, 94], ["os.path.exists", "open", "open.readlines", "open.close", "int", "os.path.exists", "os.remove", "open", "open.write", "open.close", "len", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["", "@", "classmethod", "\n", "def", "getFileCounter", "(", "cls", ",", "filename", ",", "add", "=", "0", ",", "createIfNotExist", "=", "False", ",", "removeIfZero", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Keep track of the number of users on a temporary file\n        \"\"\"", "\n", "filename", "+=", "\"-counter\"", "\n", "count", "=", "0", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "f", "=", "open", "(", "filename", ",", "\"rt\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "assert", "len", "(", "lines", ")", "==", "1", ",", "filename", "\n", "count", "=", "int", "(", "lines", "[", "0", "]", ")", "\n", "", "elif", "not", "createIfNotExist", ":", "\n", "            ", "return", "None", "\n", "", "count", "+=", "add", "\n", "if", "count", "<", "0", ":", "\n", "            ", "count", "=", "0", "\n", "", "if", "removeIfZero", "and", "count", "==", "0", "and", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "os", ".", "remove", "(", "filename", ")", "\n", "", "else", ":", "\n", "            ", "f", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "f", ".", "write", "(", "str", "(", "count", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.getExampleFile": [[95, 115], ["Classifier.Classifier.connection.upload", "os.path.normpath.endswith", "Classifier.getUnzipped", "Classifier.getFileCounter", "type", "os.path.normpath", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.upload", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.getUnzipped", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.getFileCounter"], ["", "def", "getExampleFile", "(", "self", ",", "examples", ",", "upload", "=", "True", ",", "replaceRemote", "=", "True", ",", "dummy", "=", "False", ")", ":", "\n", "# If examples are in a list, they will be written to a file for SVM-multiclass", "\n", "        ", "if", "examples", "==", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "dummy", ":", "\n", "            ", "return", "\"DUMMY\"", "\n", "", "elif", "type", "(", "examples", ")", "==", "types", ".", "ListType", ":", "\n", "            ", "assert", "False", "\n", "#ExampleUtils.writeExamples(examples, trainPath + \"/\")", "\n", "", "else", ":", "\n", "            ", "examplesPath", "=", "os", ".", "path", ".", "normpath", "(", "os", ".", "path", ".", "abspath", "(", "examples", ")", ")", "\n", "\n", "", "localPath", "=", "examplesPath", "\n", "if", "upload", ":", "\n", "            ", "examplesPath", "=", "self", ".", "connection", ".", "upload", "(", "examplesPath", ",", "uncompress", "=", "True", ",", "replace", "=", "replaceRemote", ")", "\n", "", "if", "examplesPath", "==", "localPath", "and", "examplesPath", ".", "endswith", "(", "\".gz\"", ")", ":", "# no upload happened", "\n", "            ", "examplesPath", "=", "Classifier", ".", "getUnzipped", "(", "examplesPath", ")", "# uncompress if not yet uncompressed", "\n", "Classifier", ".", "getFileCounter", "(", "examplesPath", ",", "1", ",", "createIfNotExist", "=", "True", ")", "# increase user counter in any case", "\n", "print", ">>", "sys", ".", "stderr", ",", "self", ".", "__class__", ".", "__name__", ",", "\"using example file\"", ",", "examples", ",", "\"as\"", ",", "examplesPath", "\n", "", "return", "examplesPath", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.removeTempUnzipped": [[8, 13], ["os.path.exists", "Classifier.getFileCounter", "os.remove"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.getFileCounter"], ["def", "removeTempUnzipped", "(", "filename", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "count", "=", "Classifier", ".", "getFileCounter", "(", "filename", ",", "removeIfZero", "=", "True", ")", "\n", "if", "count", "==", "0", ":", "\n", "            ", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllCorrectClassifier.AllCorrectClassifier.optimize": [[6, 10], ["copy.copy"], "methods", ["None"], ["    ", "def", "optimize", "(", "self", ",", "examples", ",", "outDir", ",", "parameters", ",", "classifyExamples", ",", "classIds", ",", "step", "=", "\"BOTH\"", ",", "evaluator", "=", "None", ",", "determineThreshold", "=", "False", ",", "timeout", "=", "None", ",", "downloadAllModels", "=", "False", ")", ":", "\n", "        ", "classifier", "=", "copy", ".", "copy", "(", "self", ")", "\n", "classifier", ".", "parameters", "=", "\"TEES.classifier=AllCorrectClassifier\"", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllCorrectClassifier.AllCorrectClassifier.classify": [[11, 29], ["os.path.abspath", "copy.copy", "open", "open.close", "type", "AllCorrectClassifier.AllCorrectClassifier.getExampleFile", "Core.readExamples", "open.write", "len", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.Classifier.Classifier.getExampleFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.readExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "classify", "(", "self", ",", "examples", ",", "output", ",", "model", "=", "None", ",", "finishBeforeReturn", "=", "False", ",", "replaceRemoteFiles", "=", "True", ")", ":", "\n", "        ", "output", "=", "os", ".", "path", ".", "abspath", "(", "output", ")", "\n", "# Get examples", "\n", "if", "type", "(", "examples", ")", "==", "types", ".", "ListType", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Classifying\"", ",", "len", "(", "examples", ")", ",", "\"with All-Correct Classifier\"", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Classifying file\"", ",", "examples", ",", "\"with All-Correct Classifier\"", "\n", "examples", "=", "self", ".", "getExampleFile", "(", "examples", ",", "upload", "=", "False", ",", "replaceRemote", "=", "False", ",", "dummy", "=", "False", ")", "\n", "examples", "=", "Example", ".", "readExamples", "(", "examples", ",", "False", ")", "\n", "# Return a new classifier instance for following the training process and using the model", "\n", "", "classifier", "=", "copy", ".", "copy", "(", "self", ")", "\n", "# Classify", "\n", "f", "=", "open", "(", "output", ",", "\"wt\"", ")", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "example", "[", "1", "]", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "classifier", ".", "predictions", "=", "output", "\n", "return", "classifier", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllTrueClassifier.AllTrueClassifier.__init__": [[6, 8], ["AllTrueClassifier.AllTrueClassifier._makeTempDir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "workDir", "=", "None", ")", ":", "\n", "        ", "self", ".", "_makeTempDir", "(", "workDir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllTrueClassifier.AllTrueClassifier.__del__": [[9, 14], ["AllTrueClassifier.AllTrueClassifier.debugFile.close", "os.path.exists", "shutil.rmtree"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "debugFile", ".", "close", "(", ")", "\n", "if", "self", ".", "_workDir", "==", "None", "and", "os", ".", "path", ".", "exists", "(", "self", ".", "tempDir", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Removing temporary classifier work directory\"", ",", "self", ".", "tempDir", "\n", "shutil", ".", "rmtree", "(", "self", ".", "tempDir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllTrueClassifier.AllTrueClassifier.train": [[15, 18], ["None"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "train", "(", "cls", ",", "examples", ",", "parameters", ",", "outputFile", "=", "None", ",", "timeout", "=", "None", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Classifiers.AllTrueClassifier.AllTrueClassifier.test": [[19, 45], ["open", "open.close", "type", "AllTrueClassifier.AllTrueClassifier.filterClassificationSet", "Core.writeExamples", "Core.readExamples", "predictions.append", "open.write", "len", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.writeExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.readExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "@", "classmethod", "\n", "def", "test", "(", "cls", ",", "examples", ",", "modelPath", ",", "output", "=", "None", ",", "parameters", "=", "None", ",", "timeout", "=", "None", ")", ":", "\n", "        ", "if", "type", "(", "examples", ")", "==", "types", ".", "ListType", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Classifying\"", ",", "len", "(", "examples", ")", ",", "\"with All-True Classifier\"", "\n", "examples", ",", "predictions", "=", "self", ".", "filterClassificationSet", "(", "examples", ",", "False", ")", "\n", "testPath", "=", "self", ".", "tempDir", "+", "\"/test.dat\"", "\n", "Example", ".", "writeExamples", "(", "examples", ",", "testPath", ")", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Classifying file\"", ",", "examples", ",", "\"with All-True Classifier\"", "\n", "testPath", "=", "examples", "\n", "examples", "=", "Example", ".", "readExamples", "(", "examples", ",", "False", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Note! Classification must be binary\"", "\n", "#examples, predictions = self.filterClassificationSet(examples, True)", "\n", "predictions", "=", "[", "]", "\n", "for", "example", "in", "examples", ":", "\n", "#predictions.append( (example, example[1]) )", "\n", "            ", "predictions", ".", "append", "(", "[", "2", "]", ")", "#[example[1]] )", "\n", "\n", "", "if", "output", "==", "None", ":", "\n", "            ", "output", "=", "\"predictions\"", "\n", "", "f", "=", "open", "(", "output", ",", "\"wt\"", ")", "\n", "for", "p", "in", "predictions", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "p", "[", "0", "]", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "return", "predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.merge": [[8, 20], ["Range.overlap"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap"], ["def", "merge", "(", "range1", ",", "range2", ")", ":", "\n", "    ", "mergedRange", "=", "[", "0", ",", "0", "]", "\n", "assert", "(", "overlap", "(", "range1", ",", "range2", ")", ")", "\n", "if", "range1", "[", "0", "]", "<", "range2", "[", "0", "]", ":", "\n", "        ", "mergedRange", "[", "0", "]", "=", "range1", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "mergedRange", "[", "0", "]", "=", "range2", "[", "0", "]", "\n", "", "if", "range1", "[", "1", "]", ">", "range2", "[", "1", "]", ":", "\n", "        ", "mergedRange", "[", "1", "]", "=", "range1", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "mergedRange", "[", "1", "]", "=", "range2", "[", "1", "]", "\n", "", "return", "(", "mergedRange", "[", "0", "]", ",", "mergedRange", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple": [[21, 25], ["Range.charOffsetToTuples", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToTuples"], ["", "def", "charOffsetToSingleTuple", "(", "charOffset", ",", "offsetSep", "=", "\"-\"", ")", ":", "\n", "    ", "tuples", "=", "charOffsetToTuples", "(", "charOffset", ",", "offsetSep", ")", "\n", "assert", "(", "len", "(", "tuples", ")", "==", "1", ")", "\n", "return", "tuples", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToTuples": [[26, 41], ["charOffset.split", "r.strip().split", "tuples.append", "r.strip", "int", "int"], "function", ["None"], ["", "def", "charOffsetToTuples", "(", "charOffset", ",", "offsetSep", "=", "\"-\"", ",", "rangeSep", "=", "\",\"", ")", ":", "\n", "    ", "\"\"\" Splits a comma separated list of character offsets into tuples of integers.\n\n    Keyword arguments:\n    charOffset -- a string in the format \"0-2,5-20\"\n    \n    Returns:\n    A list of tuples of two integers each\n    \"\"\"", "\n", "tuples", "=", "[", "]", "\n", "ranges", "=", "charOffset", ".", "split", "(", "rangeSep", ")", "\n", "for", "r", "in", "ranges", ":", "\n", "        ", "begin", ",", "end", "=", "r", ".", "strip", "(", ")", ".", "split", "(", "offsetSep", ")", "\n", "tuples", ".", "append", "(", "(", "int", "(", "begin", ")", ",", "int", "(", "end", ")", ")", ")", "\n", "", "return", "tuples", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.contains": [[42, 47], ["None"], "function", ["None"], ["", "def", "contains", "(", "range1", ",", "range2", ")", ":", "\n", "    ", "if", "range1", "[", "0", "]", "<=", "range2", "[", "0", "]", "and", "range1", "[", "1", "]", ">=", "range2", "[", "1", "]", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.length": [[48, 50], ["None"], "function", ["None"], ["", "", "def", "length", "(", "range", ")", ":", "\n", "    ", "return", "range", "[", "1", "]", "-", "range", "[", "0", "]", "# + 1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.mismatch": [[51, 65], ["Range.length", "Range.length", "Range.contains", "Range.contains", "Range.overlap", "Range.length", "Range.length"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.length", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.length", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.contains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.contains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.length", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.length"], ["", "def", "mismatch", "(", "range1", ",", "range2", ")", ":", "\n", "    ", "l1", "=", "length", "(", "range1", ")", "\n", "l2", "=", "length", "(", "range2", ")", "\n", "if", "contains", "(", "range1", ",", "range2", ")", ":", "\n", "        ", "return", "l1", "-", "l2", "\n", "", "elif", "contains", "(", "range2", ",", "range1", ")", ":", "\n", "        ", "return", "l2", "-", "l1", "\n", "", "elif", "overlap", "(", "range1", ",", "range2", ")", ":", "\n", "        ", "if", "range1", "[", "1", "]", ">=", "range2", "[", "0", "]", ":", "\n", "            ", "return", "length", "(", "(", "range1", "[", "0", "]", ",", "range2", "[", "1", "]", ")", ")", "\n", "", "else", ":", "# range2[0] >= range1[1]", "\n", "            ", "return", "length", "(", "(", "range2", "[", "0", "]", ",", "range1", "[", "1", "]", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "l1", "+", "l2", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap": [[66, 91], ["None"], "function", ["None"], ["", "", "def", "overlap", "(", "range1", ",", "range2", ")", ":", "\n", "    ", "\"\"\" Checks whether two ranges (f.e. character offsets overlap)\n    \n    This snippet by Steven D'Aprano is from the forum of\n    www.thescripts.com.\n    \n    Keyword arguments:\n    range1 -- a tuple where range1[0] <= range1[1]\n    range1 -- a tuple where range2[0] <= range2[1]\n    \n    Returns:\n    True (ranges overlap) or False (no overlap)\n    \"\"\"", "\n", "assert", "(", "range1", "[", "0", "]", "<=", "range1", "[", "1", "]", ")", ",", "(", "range1", ",", "range2", ")", "\n", "assert", "(", "range2", "[", "0", "]", "<=", "range2", "[", "1", "]", ")", ",", "(", "range1", ",", "range2", ")", "\n", "# Fully overlapping cases:", "\n", "# x1 <= y1 <= y2 <= x2", "\n", "# y1 <= x1 <= x2 <= y2", "\n", "# Partially overlapping cases:", "\n", "# x1 <= y1 <= x2 <= y2", "\n", "# y1 <= x1 <= y2 <= x2", "\n", "# Non-overlapping cases:", "\n", "# x1 <= x2 < y1 <= y2", "\n", "# y1 <= y2 < x1 <= x2", "\n", "return", "not", "(", "range1", "[", "1", "]", "<=", "range2", "[", "0", "]", "or", "range2", "[", "1", "]", "<=", "range1", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.order": [[92, 103], ["None"], "function", ["None"], ["", "def", "order", "(", "range1", ",", "range2", ")", ":", "\n", "    ", "if", "range1", "[", "0", "]", "<", "range2", "[", "0", "]", ":", "\n", "        ", "return", "-", "1", "\n", "", "elif", "range1", "[", "0", "]", ">", "range2", "[", "0", "]", ":", "\n", "        ", "return", "1", "\n", "", "elif", "range1", "[", "1", "]", "<", "range2", "[", "1", "]", ":", "# here range1[0] == range2[0]", "\n", "        ", "return", "-", "1", "\n", "", "elif", "range1", "[", "1", "]", ">", "range2", "[", "1", "]", ":", "# here range1[0] == range2[0]", "\n", "        ", "return", "1", "\n", "", "else", ":", "# ranges are equal", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.tuplesToCharOffset": [[104, 115], ["len", "type", "type", "str", "str"], "function", ["None"], ["", "", "def", "tuplesToCharOffset", "(", "tuples", ",", "offsetSep", "=", "\"-\"", ",", "rangeSep", "=", "\",\"", ")", ":", "\n", "    ", "if", "len", "(", "tuples", ")", "==", "2", "and", "type", "(", "tuples", "[", "0", "]", ")", "==", "types", ".", "IntType", "and", "type", "(", "tuples", "[", "1", "]", ")", "==", "types", ".", "IntType", ":", "\n", "        ", "tuples", "=", "[", "tuples", "]", "\n", "", "charOffset", "=", "\"\"", "\n", "isFirst", "=", "True", "\n", "for", "tup", "in", "tuples", ":", "\n", "        ", "if", "not", "isFirst", ":", "\n", "            ", "charOffset", "+=", "rangeSep", "\n", "", "charOffset", "+=", "str", "(", "tup", "[", "0", "]", ")", "+", "offsetSep", "+", "str", "(", "tup", "[", "1", "]", ")", "\n", "isFirst", "=", "False", "\n", "", "return", "charOffset", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.FindHeads.getEntities": [[7, 9], ["sentence.findall", "sentence.iter"], "function", ["None"], ["def", "getEntities", "(", "sentence", ")", ":", "\n", "    ", "return", "sentence", ".", "findall", "(", "\"entity\"", ")", "+", "[", "x", "for", "x", "in", "sentence", ".", "iter", "(", "\"span\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.FindHeads.findHeads": [[10, 62], ["ProgressCounter", "SentenceElements.getCorpusIterator", "ElementTreeUtils.ETFromObj", "Core.loadCorpus", "ProgressCounter.update", "ElementTreeUtils.ETFromObj", "ETUtils.ETFromObj.getroot().findall", "ElementTreeUtils.write", "Core.SentenceGraph", "SentenceGraph.SentenceGraph.mapInteractions", "len", "d.findall", "sentence.sentenceGraph.getTokenHeadScores", "FindHeads.getEntities", "ETUtils.ETFromObj.getroot", "FindHeads.getEntities", "sentences[].sentence.get", "e.get", "e.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SentenceElements.getCorpusIterator", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.loadCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapInteractions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getTokenHeadScores", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.FindHeads.getEntities", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.FindHeads.getEntities", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "findHeads", "(", "input", ",", "parse", ",", "tokenization", "=", "None", ",", "output", "=", "None", ",", "removeExisting", "=", "True", ",", "iterate", "=", "False", ")", ":", "\n", "    ", "if", "iterate", ":", "\n", "        ", "from", "Utils", ".", "ProgressCounter", "import", "ProgressCounter", "\n", "import", "InteractionXML", ".", "SentenceElements", "as", "SentenceElements", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Determining head offsets using parse\"", ",", "parse", ",", "\"and tokenization\"", ",", "tokenization", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Removing existing head offsets\"", "\n", "removeCount", "=", "0", "\n", "counter", "=", "ProgressCounter", "(", "None", ",", "\"Find heads\"", ")", "\n", "counter", ".", "showMilliseconds", "=", "True", "\n", "for", "sentences", "in", "SentenceElements", ".", "getCorpusIterator", "(", "input", ",", "output", ",", "parse", ",", "tokenization", ")", ":", "\n", "            ", "for", "sentence", "in", "sentences", ":", "\n", "                ", "if", "removeExisting", ":", "\n", "                    ", "for", "e", "in", "getEntities", "(", "sentence", ".", "sentence", ")", ":", "\n", "                        ", "if", "e", ".", "get", "(", "\"headOffset\"", ")", "!=", "None", ":", "\n", "                            ", "removeCount", "+=", "1", "\n", "del", "e", ".", "attrib", "[", "\"headOffset\"", "]", "\n", "", "", "", "graph", "=", "SentenceGraph", ".", "SentenceGraph", "(", "sentence", ".", "sentence", ",", "sentence", ".", "tokens", ",", "sentence", ".", "dependencies", ")", "\n", "graph", ".", "mapInteractions", "(", "sentence", ".", "entities", ",", "sentence", ".", "interactions", ")", "\n", "# Make sure every parse gets head scores", "\n", "#if graph.tokenHeadScores == None:", "\n", "#    graph.getTokenHeadScores()", "\n", "", "counter", ".", "update", "(", "len", "(", "sentences", ")", ",", "\"Finding heads (\"", "+", "sentences", "[", "-", "1", "]", ".", "sentence", ".", "get", "(", "\"id\"", ")", "+", "\"): \"", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Removed head offsets from\"", ",", "removeCount", ",", "\"entities\"", "\n", "", "else", ":", "\n", "        ", "xml", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "if", "removeExisting", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Removing existing head offsets\"", "\n", "removeCount", "=", "0", "\n", "xml", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "for", "d", "in", "xml", ".", "getroot", "(", ")", ".", "findall", "(", "\"document\"", ")", ":", "\n", "                ", "for", "s", "in", "d", ".", "findall", "(", "\"sentence\"", ")", ":", "\n", "                    ", "for", "e", "in", "getEntities", "(", "s", ")", ":", "\n", "                        ", "if", "e", ".", "get", "(", "\"headOffset\"", ")", "!=", "None", ":", "\n", "                            ", "removeCount", "+=", "1", "\n", "del", "e", ".", "attrib", "[", "\"headOffset\"", "]", "\n", "", "", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Removed head offsets from\"", ",", "removeCount", ",", "\"entities\"", "\n", "\n", "# SentenceGraph automatically calculates head offsets and adds them to entities if they are missing", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Determining head offsets using parse\"", ",", "parse", ",", "\"and tokenization\"", ",", "tokenization", "\n", "corpusElements", "=", "SentenceGraph", ".", "loadCorpus", "(", "xml", ",", "parse", ",", "tokenization", ")", "\n", "\n", "# Make sure every parse gets head scores", "\n", "for", "sentence", "in", "corpusElements", ".", "sentences", ":", "\n", "            ", "if", "sentence", ".", "sentenceGraph", "==", "None", ":", "\n", "                ", "continue", "\n", "", "if", "sentence", ".", "sentenceGraph", ".", "tokenHeadScores", "==", "None", ":", "\n", "                ", "sentence", ".", "sentenceGraph", ".", "getTokenHeadScores", "(", ")", "\n", "\n", "", "", "if", "output", "!=", "None", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusElements", ".", "rootElement", ",", "output", ")", "\n", "", "return", "xml", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.getKeys": [[7, 18], ["list", "set.sort", "set", "dict.keys", "set.add"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["def", "getKeys", "(", "dicts", ")", ":", "\n", "    ", "for", "dict", "in", "dicts", ":", "\n", "        ", "keys", "=", "set", "(", ")", "\n", "for", "key", "in", "dict", ".", "keys", "(", ")", ":", "\n", "            ", "keys", ".", "add", "(", "key", ")", "\n", "", "", "keys", "=", "list", "(", "keys", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "keyDict", "=", "{", "}", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "keyDict", "[", "key", "]", "=", "key", "\n", "", "return", "(", "keys", ",", "keyDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.addToCSV": [[19, 29], ["os.path.exists", "TableUtils.writeCSV", "TableUtils.readCSV", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.writeCSV", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.readCSV"], ["", "def", "addToCSV", "(", "dict", ",", "filename", ",", "fieldnames", "=", "None", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "writeTitles", "=", "True", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "rows", "=", "readCSV", "(", "filename", ",", "fieldnames", ")", "\n", "if", "len", "(", "rows", ")", ">", "0", ":", "\n", "            ", "writeTitles", "=", "False", "\n", "", "", "if", "not", "isinstance", "(", "dict", ",", "list", ")", ":", "\n", "        ", "dict", "=", "[", "dict", "]", "\n", "", "writeCSV", "(", "rows", "+", "dict", ",", "filename", ",", "fieldnames", ",", "writeTitles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.selectRowsCSV": [[30, 39], ["conditions.keys", "row.has_key", "selected.append"], "function", ["None"], ["", "def", "selectRowsCSV", "(", "rows", ",", "conditions", ",", "invert", "=", "False", ")", ":", "\n", "    ", "selected", "=", "[", "]", "\n", "for", "row", "in", "rows", ":", "\n", "        ", "for", "key", "in", "conditions", ".", "keys", "(", ")", ":", "\n", "            ", "exists", "=", "row", ".", "has_key", "(", "key", ")", "and", "row", "[", "key", "]", "==", "conditions", "[", "key", "]", "\n", "if", "invert", ":", "exists", "=", "not", "exists", "\n", "if", "exists", ":", "\n", "                ", "selected", ".", "append", "(", "row", ")", "\n", "", "", "", "return", "selected", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.getValueSet": [[40, 46], ["set", "row.has_key", "set.add"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["", "def", "getValueSet", "(", "rows", ",", "column", ")", ":", "\n", "    ", "values", "=", "set", "(", ")", "\n", "for", "row", "in", "rows", ":", "\n", "        ", "if", "row", ".", "has_key", "(", "column", ")", ":", "\n", "            ", "values", ".", "add", "(", "row", "[", "column", "]", ")", "\n", "", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.remapKeys": [[47, 59], ["row.keys", "newRows.append", "dict.keys"], "function", ["None"], ["", "def", "remapKeys", "(", "rows", ",", "dict", ")", ":", "\n", "    ", "newRows", "=", "[", "]", "\n", "for", "row", "in", "rows", ":", "\n", "        ", "newRow", "=", "{", "}", "\n", "for", "k", "in", "row", ".", "keys", "(", ")", ":", "\n", "            ", "value", "=", "row", "[", "k", "]", "\n", "key", "=", "k", "\n", "if", "key", "in", "dict", ".", "keys", "(", ")", ":", "\n", "                ", "key", "=", "dict", "[", "key", "]", "\n", "", "newRow", "[", "key", "]", "=", "value", "\n", "", "newRows", ".", "append", "(", "newRow", ")", "\n", "", "return", "newRows", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.removeKeys": [[60, 71], ["row.keys", "newRows.append"], "function", ["None"], ["", "def", "removeKeys", "(", "rows", ",", "keys", ")", ":", "\n", "    ", "newRows", "=", "[", "]", "\n", "for", "row", "in", "rows", ":", "\n", "        ", "newRow", "=", "{", "}", "\n", "for", "k", "in", "row", ".", "keys", "(", ")", ":", "\n", "            ", "value", "=", "row", "[", "k", "]", "\n", "key", "=", "k", "\n", "if", "key", "not", "in", "keys", ":", "\n", "                ", "newRow", "[", "key", "]", "=", "value", "\n", "", "", "newRows", ".", "append", "(", "newRow", ")", "\n", "", "return", "newRows", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.writeCSV": [[72, 89], ["open", "csv.DictWriter", "open.close", "isinstance", "TableUtils.getKeys", "csv.DictWriter.writerow", "csv.DictWriter.writerow"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.getKeys"], ["", "def", "writeCSV", "(", "dict", ",", "filename", ",", "fieldnames", "=", "None", ",", "writeTitles", "=", "True", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "dict", ",", "list", ")", ":", "\n", "        ", "dict", "=", "[", "dict", "]", "\n", "", "if", "fieldnames", "==", "None", ":", "\n", "        ", "keys", ",", "keyDict", "=", "getKeys", "(", "dict", ")", "\n", "", "else", ":", "\n", "        ", "keys", "=", "fieldnames", "\n", "keyDict", "=", "{", "}", "\n", "for", "key", "in", "fieldnames", ":", "\n", "            ", "keyDict", "[", "key", "]", "=", "key", "\n", "", "", "csvFile", "=", "open", "(", "filename", ",", "\"wb\"", ")", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "csvFile", ",", "fieldnames", "=", "keys", ")", "\n", "if", "writeTitles", ":", "\n", "        ", "writer", ".", "writerow", "(", "keyDict", ")", "\n", "", "for", "row", "in", "dict", ":", "\n", "        ", "writer", ".", "writerow", "(", "row", ")", "\n", "", "csvFile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.readCSV": [[90, 102], ["open", "csv.DictReader", "open.close", "csv.DictReader.next", "rows.append"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["", "def", "readCSV", "(", "filename", ",", "fieldnames", "=", "None", ")", ":", "\n", "    ", "csvFile", "=", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "reader", "=", "csv", ".", "DictReader", "(", "csvFile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "rows", "=", "[", "]", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "row", "=", "reader", ".", "next", "(", ")", "\n", "rows", ".", "append", "(", "row", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "break", "\n", "", "", "csvFile", ".", "close", "(", ")", "\n", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.interpret": [[103, 116], ["float", "int", "float"], "function", ["None"], ["", "def", "interpret", "(", "data", ")", ":", "\n", "    ", "try", ":", "\n", "       ", "floatValue", "=", "float", "(", "data", ")", "\n", "try", ":", "\n", "           ", "intValue", "=", "int", "(", "data", ")", "\n", "if", "floatValue", "!=", "float", "(", "intValue", ")", ":", "\n", "               ", "return", "floatValue", "\n", "", "else", ":", "\n", "               ", "return", "intValue", "\n", "", "", "except", ":", "\n", "           ", "return", "floatValue", "\n", "", "", "except", ":", "\n", "       ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.floatToString": [[117, 122], ["isinstance", "str"], "function", ["None"], ["", "", "def", "floatToString", "(", "data", ")", ":", "\n", "    ", "if", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "(", "\"%.\"", "+", "str", "(", "decimals", ")", "+", "\"f\"", ")", "%", "data", "\n", "", "else", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.getLatexString": [[123, 129], ["TableUtils.interpret", "TableUtils.floatToString", "str", "string.replace.replace"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.interpret", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.floatToString"], ["", "", "def", "getLatexString", "(", "data", ")", ":", "\n", "    ", "data", "=", "interpret", "(", "data", ")", "\n", "data", "=", "floatToString", "(", "data", ")", "\n", "string", "=", "str", "(", "data", ")", "\n", "string", "=", "string", ".", "replace", "(", "\"_\"", ",", "\"\\\\_\"", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.layoutLatex": [[130, 132], ["TableUtils.getLatexString"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.getLatexString"], ["", "def", "layoutLatex", "(", "row", ",", "key", ")", ":", "\n", "    ", "return", "getLatexString", "(", "row", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.writeLatex": [[133, 191], ["open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "isinstance", "open.write", "TableUtils.getKeys", "open.write", "open.write", "open.write", "type", "open.write", "open.write", "layout", "row.has_key", "layout", "open.write", "open.write", "open.write", "layout"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.TableUtils.getKeys", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "writeLatex", "(", "dict", ",", "filename", ",", "keys", "=", "None", ",", "empty", "=", "\" \"", ",", "layout", "=", "None", ",", "extraHeaderLines", "=", "None", ")", ":", "\n", "    ", "if", "layout", "==", "None", ":", "\n", "        ", "layout", "=", "layoutLatex", "\n", "\n", "", "if", "not", "isinstance", "(", "dict", ",", "list", ")", ":", "\n", "        ", "dict", "=", "[", "dict", "]", "\n", "", "if", "keys", "==", "None", ":", "\n", "        ", "keys", "=", "getKeys", "(", "dict", ")", "[", "0", "]", "\n", "\n", "", "file", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "file", ".", "write", "(", "\"% This file is generated by JariSandbox/ComplexPPI/Source/Utils/TableUtils.py\\n\"", ")", "\n", "file", ".", "write", "(", "\"% DO NOT edit manually, as your changes WILL BE OVERWRITTEN!\\n\"", ")", "\n", "\n", "file", ".", "write", "(", "\"\\\\begin{tabular}{ | c | \"", ")", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "file", ".", "write", "(", "\" c |\"", ")", "\n", "", "file", ".", "write", "(", "\"}\\n\"", ")", "\n", "file", ".", "write", "(", "\"\\\\hline\\n\"", ")", "\n", "\n", "# extra header", "\n", "if", "extraHeaderLines", "!=", "None", ":", "\n", "        ", "for", "line", "in", "extraHeaderLines", ":", "\n", "            ", "file", ".", "write", "(", "line", "+", "\"\\n\"", ")", "\n", "\n", "# Header                      ", "\n", "", "", "isFirst", "=", "True", "\n", "keyDict", "=", "{", "}", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "keyDict", "[", "key", "]", "=", "key", "\n", "", "for", "key", "in", "keys", ":", "\n", "        ", "if", "isFirst", ":", "\n", "            ", "file", ".", "write", "(", "layout", "(", "keyDict", ",", "key", ")", ")", "\n", "isFirst", "=", "False", "\n", "", "else", ":", "\n", "            ", "file", ".", "write", "(", "\" & \"", "+", "layout", "(", "keyDict", ",", "key", ")", ")", "\n", "", "", "file", ".", "write", "(", "\" \\\\\\\\\\n\"", ")", "\n", "file", ".", "write", "(", "\"\\\\hline\\n\"", ")", "\n", "for", "row", "in", "dict", ":", "\n", "        ", "isFirst", "=", "True", "\n", "if", "type", "(", "row", ")", "==", "types", ".", "StringType", ":", "\n", "            ", "file", ".", "write", "(", "row", ")", "\n", "", "else", ":", "\n", "            ", "for", "key", "in", "keys", ":", "\n", "                ", "if", "not", "isFirst", ":", "\n", "                    ", "file", ".", "write", "(", "\" & \"", ")", "\n", "", "else", ":", "\n", "                    ", "isFirst", "=", "False", "\n", "", "if", "row", ".", "has_key", "(", "key", ")", ":", "\n", "                    ", "file", ".", "write", "(", "layout", "(", "row", ",", "key", ")", ")", "\n", "", "else", ":", "\n", "                    ", "file", ".", "write", "(", "empty", ")", "\n", "", "", "file", ".", "write", "(", "\" \\\\\\\\\\n\"", ")", "\n", "#file.write(\"1 & 2 & 3 \\\\\\\\\\n\")", "\n", "#file.write(\"4 & 5 & 6 \\\\\\\\\\n\")", "\n", "#file.write(\"7 & 8 & 9 \\\\\\\\\\n\")", "\n", "", "", "file", ".", "write", "(", "\"\\\\hline\\n\"", ")", "\n", "file", ".", "write", "(", "\"\\\\end{tabular}\\n\"", ")", "\n", "file", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.__init__": [[19, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stream", ")", ":", "\n", "        ", "self", ".", "stream", "=", "stream", "\n", "self", ".", "logfiles", "=", "[", "]", "\n", "self", ".", "logfilenames", "=", "[", "]", "\n", "self", ".", "indent", "=", "None", "\n", "self", ".", "timeStamp", "=", "None", "\n", "self", ".", "timeStampDuplicates", "=", "False", "\n", "self", ".", "prevTime", "=", "None", "\n", "self", ".", "newLine", "=", "True", "\n", "self", ".", "buffer", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.setLog": [[30, 37], ["None"], "methods", ["None"], ["", "def", "setLog", "(", "self", ",", "logfile", "=", "None", ")", ":", "\n", "        ", "if", "logfile", "!=", "None", ":", "\n", "            ", "self", ".", "logfiles", "=", "[", "logfile", "]", "\n", "self", ".", "logfilenames", "=", "[", "logfile", ".", "name", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "logfiles", "=", "[", "]", "\n", "self", ".", "logfilenames", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.addLog": [[38, 41], ["Stream.StreamModifier.logfiles.append", "Stream.StreamModifier.logfilenames.append"], "methods", ["None"], ["", "", "def", "addLog", "(", "self", ",", "logfile", ")", ":", "\n", "        ", "self", ".", "logfiles", ".", "append", "(", "logfile", ")", "\n", "self", ".", "logfilenames", ".", "append", "(", "logfile", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.removeLog": [[42, 62], ["range", "len", "logfilesToKeep.append", "logfilenamesToKeep.append"], "methods", ["None"], ["", "def", "removeLog", "(", "self", ",", "logfileName", ",", "streamName", ")", ":", "\n", "        ", "logfilesToKeep", "=", "[", "]", "\n", "logfilenamesToKeep", "=", "[", "]", "\n", "removed", "=", "None", "\n", "removedName", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "logfiles", ")", ")", ":", "\n", "            ", "if", "self", ".", "logfilenames", "[", "i", "]", "!=", "logfileName", ":", "\n", "                ", "logfilesToKeep", ".", "append", "(", "self", ".", "logfiles", "[", "i", "]", ")", "\n", "logfilenamesToKeep", ".", "append", "(", "self", ".", "logfilenames", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "removed", "=", "self", ".", "logfiles", "[", "i", "]", "\n", "removedName", "=", "self", ".", "logfilenames", "[", "i", "]", "\n", "", "", "self", ".", "logfiles", "=", "logfilesToKeep", "\n", "self", ".", "logfilenames", "=", "logfilenamesToKeep", "\n", "\n", "if", "removedName", "!=", "None", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Stopped logging\"", ",", "streamName", ",", "\"to\"", ",", "removedName", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Log not open for \"", ",", "streamName", "+", "\":\"", ",", "logfileName", "\n", "", "return", "removed", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.setIndent": [[63, 65], ["None"], "methods", ["None"], ["", "def", "setIndent", "(", "self", ",", "indent", "=", "None", ")", ":", "\n", "        ", "self", ".", "indent", "=", "indent", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.setTimeStamp": [[66, 69], ["None"], "methods", ["None"], ["", "def", "setTimeStamp", "(", "self", ",", "format", "=", "None", ",", "duplicates", "=", "False", ")", ":", "\n", "        ", "self", ".", "timeStamp", "=", "format", "\n", "self", ".", "timeStampDuplicates", "=", "duplicates", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.writeToStream": [[70, 75], ["Stream.StreamModifier.stream.write"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "writeToStream", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        Write directly to the stream without adding to the log file\n        \"\"\"", "\n", "self", ".", "stream", ".", "write", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.writeToLog": [[76, 84], ["logfile.write", "logfile.flush"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.flush"], ["", "def", "writeToLog", "(", "self", ",", "text", ",", "filename", ")", ":", "\n", "        ", "\"\"\"\n        Write directly to the log file without sending the input to the stream\n        \"\"\"", "\n", "for", "logfile", "in", "self", ".", "logfiles", ":", "\n", "            ", "if", "filename", "==", "None", "or", "logfile", ".", "name", "==", "filename", ":", "\n", "                ", "logfile", ".", "write", "(", "text", ")", "\n", "logfile", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.write": [[85, 123], ["Stream.StreamModifier.stream.write", "Stream.StreamModifier.stream.flush", "text.replace.replace.replace", "len", "logfile.flush", "time.strftime", "logfile.write", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.flush", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.flush", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "", "", "def", "write", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "text", "==", "None", "or", "text", "==", "\"\"", ":", "\n", "            ", "return", "\n", "", "\"\"\"\n        Send the text to the stream after optionally writing it to the log file.\n        \"\"\"", "\n", "if", "self", ".", "indent", "!=", "None", ":", "\n", "            ", "if", "self", ".", "newLine", ":", "\n", "                ", "text", "=", "self", ".", "indent", "+", "text", "\n", "", "lastChar", "=", "text", "[", "-", "1", "]", "\n", "text", "=", "text", "[", ":", "-", "1", "]", "\n", "if", "lastChar", "==", "\"\\n\"", ":", "\n", "                ", "self", ".", "newLine", "=", "True", "\n", "", "else", ":", "\n", "                ", "self", ".", "newLine", "=", "False", "\n", "", "text", "=", "text", ".", "replace", "(", "\"\\n\"", ",", "\"\\n\"", "+", "self", ".", "indent", ")", "\n", "text", "+=", "lastChar", "\n", "", "self", ".", "stream", ".", "write", "(", "text", ")", "\n", "self", ".", "stream", ".", "flush", "(", ")", "\n", "if", "len", "(", "self", ".", "logfiles", ")", ">", "0", ":", "\n", "            ", "for", "char", "in", "text", ":", "\n", "                ", "if", "char", "==", "\"\\r\"", ":", "\n", "                    ", "self", ".", "buffer", "=", "\"\"", "\n", "", "elif", "char", "==", "\"\\n\"", ":", "\n", "                    ", "timeString", "=", "time", ".", "strftime", "(", "self", ".", "timeStamp", ")", "\n", "if", "timeString", "==", "self", ".", "prevTime", "and", "not", "self", ".", "timeStampDuplicates", ":", "\n", "                        ", "timeString", "=", "len", "(", "timeString", ")", "*", "\" \"", "\n", "", "else", ":", "\n", "                        ", "self", ".", "prevTime", "=", "timeString", "\n", "", "if", "self", ".", "timeStamp", "!=", "None", ":", "\n", "                        ", "self", ".", "buffer", "=", "timeString", "+", "\"\\t\"", "+", "self", ".", "buffer", "\n", "", "for", "logfile", "in", "self", ".", "logfiles", ":", "\n", "                        ", "logfile", ".", "write", "(", "self", ".", "buffer", "+", "\"\\n\"", ")", "\n", "", "self", ".", "buffer", "=", "\"\"", "\n", "", "else", ":", "\n", "                    ", "self", ".", "buffer", "+=", "char", "\n", "", "", "for", "logfile", "in", "self", ".", "logfiles", ":", "\n", "                ", "logfile", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.flush": [[124, 126], ["Stream.StreamModifier.stream.flush"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.flush"], ["", "", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "stream", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.openLog": [[127, 138], ["Stream.setLog", "Stream.setTimeStamp", "str", "Stream.writeToLog", "os.makedirs", "time.ctime", "Stream.writeToLog", "os.path.dirname", "os.path.exists", "os.path.dirname", "time.time", "str", "os.path.dirname", "time.ctime", "time.time"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.setLog", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.setTimeStamp", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.writeToLog", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.writeToLog", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "", "def", "openLog", "(", "filename", "=", "\"log.txt\"", ",", "clear", "=", "False", ",", "logCmd", "=", "True", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "dirname", "(", "filename", ")", "!=", "\"\"", "and", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", "\n", "", "setLog", "(", "filename", ",", "clear", ")", "\n", "setTimeStamp", "(", "\"[%H:%M:%S %d/%m]\"", ",", "True", ")", "\n", "logOpenTime", "=", "str", "(", "time", ".", "ctime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Opening log\"", ",", "filename", ",", "\"at\"", ",", "logOpenTime", "\n", "logOpenMessage", "=", "\"####### Log opened at \"", "+", "str", "(", "time", ".", "ctime", "(", "time", ".", "time", "(", ")", ")", ")", "+", "\" #######\\n\"", "\n", "writeToLog", "(", "logOpenMessage", ",", "filename", ")", "\n", "if", "logCmd", ":", "\n", "        ", "writeToLog", "(", "\"Command line: \"", "+", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", "+", "\"\\n\"", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.closeLog": [[139, 147], ["isinstance", "sys.stdout.removeLog", "isinstance", "sys.stderr.removeLog", "sys.stdout.removeLog.close", "sys.stderr.removeLog.close"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.removeLog", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.removeLog", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["", "", "def", "closeLog", "(", "filename", ")", ":", "\n", "    ", "assert", "isinstance", "(", "sys", ".", "stdout", ",", "StreamModifier", ")", "\n", "removedStdout", "=", "sys", ".", "stdout", ".", "removeLog", "(", "filename", ",", "\"stdout\"", ")", "\n", "assert", "isinstance", "(", "sys", ".", "stderr", ",", "StreamModifier", ")", "\n", "removedStderr", "=", "sys", ".", "stderr", ".", "removeLog", "(", "filename", ",", "\"stderr\"", ")", "\n", "# These are most often the same file, so they (it) must be closed after removed from all streams", "\n", "removedStdout", ".", "close", "(", ")", "\n", "removedStderr", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.writeToScreen": [[148, 151], ["isinstance", "sys.stderr.writeToStream"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.writeToStream"], ["", "def", "writeToScreen", "(", "text", ")", ":", "\n", "    ", "assert", "isinstance", "(", "sys", ".", "stderr", ",", "StreamModifier", ")", "\n", "sys", ".", "stderr", ".", "writeToStream", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.writeToLog": [[152, 155], ["isinstance", "sys.stdout.writeToLog"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.writeToLog"], ["", "def", "writeToLog", "(", "text", ",", "filename", "=", "None", ")", ":", "\n", "    ", "assert", "isinstance", "(", "sys", ".", "stdout", ",", "StreamModifier", ")", "\n", "sys", ".", "stdout", ".", "writeToLog", "(", "text", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.setLog": [[156, 173], ["isinstance", "Stream.StreamModifier", "isinstance", "Stream.StreamModifier", "sys.stdout.addLog", "sys.stderr.addLog", "open", "open"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.addLog", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.StreamModifier.addLog", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "def", "setLog", "(", "filename", "=", "None", ",", "clear", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Replace sys.stderr and sys.stdout with a StreamModifier, capturing\n    all output for these streams to a log file while still passing it\n    to the original stream.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "sys", ".", "stdout", ",", "StreamModifier", ")", ":", "\n", "        ", "sys", ".", "stdout", "=", "StreamModifier", "(", "sys", ".", "stdout", ")", "\n", "", "if", "not", "isinstance", "(", "sys", ".", "stderr", ",", "StreamModifier", ")", ":", "\n", "        ", "sys", ".", "stderr", "=", "StreamModifier", "(", "sys", ".", "stderr", ")", "\n", "", "if", "filename", "!=", "None", ":", "\n", "        ", "if", "clear", ":", "\n", "            ", "logfile", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "", "else", ":", "\n", "            ", "logfile", "=", "open", "(", "filename", ",", "\"at\"", ")", "\n", "", "sys", ".", "stdout", ".", "addLog", "(", "logfile", ")", "\n", "sys", ".", "stderr", ".", "addLog", "(", "logfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.setIndent": [[174, 181], ["sys.stdout.setIndent", "sys.stderr.setIndent", "isinstance", "Stream.StreamModifier", "isinstance", "Stream.StreamModifier"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.setIndent", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.setIndent"], ["", "", "def", "setIndent", "(", "string", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "sys", ".", "stdout", ",", "StreamModifier", ")", ":", "\n", "        ", "sys", ".", "stdout", "=", "StreamModifier", "(", "sys", ".", "stdout", ")", "\n", "", "if", "not", "isinstance", "(", "sys", ".", "stderr", ",", "StreamModifier", ")", ":", "\n", "        ", "sys", ".", "stderr", "=", "StreamModifier", "(", "sys", ".", "stderr", ")", "\n", "", "sys", ".", "stdout", ".", "setIndent", "(", "string", ")", "\n", "sys", ".", "stderr", ".", "setIndent", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.setTimeStamp": [[182, 189], ["sys.stdout.setTimeStamp", "sys.stderr.setTimeStamp", "isinstance", "Stream.StreamModifier", "isinstance", "Stream.StreamModifier"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.setTimeStamp", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.setTimeStamp"], ["", "def", "setTimeStamp", "(", "format", "=", "None", ",", "duplicates", "=", "False", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "sys", ".", "stdout", ",", "StreamModifier", ")", ":", "\n", "        ", "sys", ".", "stdout", "=", "StreamModifier", "(", "sys", ".", "stdout", ")", "\n", "", "if", "not", "isinstance", "(", "sys", ".", "stderr", ",", "StreamModifier", ")", ":", "\n", "        ", "sys", ".", "stderr", "=", "StreamModifier", "(", "sys", ".", "stderr", ")", "\n", "", "sys", ".", "stdout", ".", "setTimeStamp", "(", "format", ",", "duplicates", ")", "\n", "sys", ".", "stderr", ".", "setTimeStamp", "(", "format", ",", "duplicates", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProgressCounter.ProgressCounter.__init__": [[4, 22], ["time.time", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "total", "=", "None", ",", "id", "=", "\"UNKNOWN\"", ",", "step", "=", "None", ")", ":", "\n", "        ", "self", ".", "total", "=", "total", "\n", "if", "self", ".", "total", "!=", "None", ":", "\n", "            ", "self", ".", "total", "=", "float", "(", "self", ".", "total", ")", "\n", "", "self", ".", "current", "=", "0", "\n", "self", ".", "progress", "=", "0.0", "\n", "self", ".", "prevProgress", "=", "-", "99.0", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "prevUpdateString", "=", "\"None\"", "\n", "self", ".", "step", "=", "step", "\n", "if", "total", "!=", "None", "and", "step", "==", "None", ":", "\n", "            ", "self", ".", "step", "=", "5.0", "# If the total is known, update at 5 percentage point intervals", "\n", "", "self", ".", "showMilliseconds", "=", "False", "\n", "\n", "self", ".", "prevPrintTime", "=", "0", "\n", "self", ".", "timeStep", "=", "30", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "prevUpdateStringLen", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProgressCounter.ProgressCounter.endUpdate": [[23, 26], ["None"], "methods", ["None"], ["", "def", "endUpdate", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "total", "==", "None", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProgressCounter.ProgressCounter.markFinished": [[27, 32], ["None"], "methods", ["None"], ["", "", "def", "markFinished", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Mark as finished to suppress the error message, regardless of actual status\n        \"\"\"", "\n", "self", ".", "progress", "=", "100.0", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProgressCounter.ProgressCounter.__del__": [[33, 39], ["ProgressCounter.ProgressCounter.showLastUpdate"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProgressCounter.ProgressCounter.showLastUpdate"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "# If this counter didn't finish, show the info about the last update", "\n", "        ", "if", "self", ".", "total", "!=", "None", "and", "not", "self", ".", "progress", ">=", "100.0", ":", "\n", "            ", "import", "sys", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Counter \\\"\"", "+", "self", ".", "id", "+", "\"\\\" did not finish\"", "\n", "self", ".", "showLastUpdate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProgressCounter.ProgressCounter.update": [[40, 70], ["time.time", "str", "ProgressCounter.ProgressCounter.getElapsedTimeString", "len", "len", "max", "max", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProgressCounter.ProgressCounter.getElapsedTimeString"], ["", "", "def", "update", "(", "self", ",", "amount", "=", "1", ",", "string", "=", "\"Processing: \"", ")", ":", "\n", "        ", "self", ".", "current", "+=", "amount", "\n", "if", "self", ".", "total", "!=", "None", ":", "\n", "            ", "self", ".", "progress", "=", "self", ".", "current", "/", "self", ".", "total", "*", "100.0", "\n", "self", ".", "prevUpdateString", "=", "string", "+", "\"%.2f\"", "%", "self", ".", "progress", "+", "\" %\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "progress", "+=", "amount", "\n", "self", ".", "prevUpdateString", "=", "string", "+", "str", "(", "self", ".", "current", ")", "\n", "\n", "", "currentTime", "=", "time", ".", "time", "(", ")", "\n", "timeStepExceeded", "=", "currentTime", "-", "self", ".", "prevPrintTime", ">", "self", ".", "timeStep", "\n", "stepExceeded", "=", "self", ".", "step", "==", "None", "or", "(", "self", ".", "progress", "-", "self", ".", "prevProgress", ">=", "self", ".", "step", ")", "\n", "\n", "self", ".", "prevUpdateString", "+=", "\" (\"", "+", "self", ".", "getElapsedTimeString", "(", "currentTime", ")", "+", "\")\"", "\n", "\n", "if", "self", ".", "total", "!=", "None", ":", "\n", "            ", "if", "self", ".", "progress", ">=", "100.0", "or", "stepExceeded", "or", "timeStepExceeded", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"\\r\"", "+", "self", ".", "prevUpdateString", "+", "max", "(", "0", ",", "self", ".", "prevUpdateStringLen", "-", "len", "(", "self", ".", "prevUpdateString", ")", ")", "*", "\" \"", ",", "\n", "self", ".", "prevProgress", "=", "self", ".", "progress", "\n", "self", ".", "prevPrintTime", "=", "currentTime", "\n", "self", ".", "prevUpdateStringLen", "=", "len", "(", "self", ".", "prevUpdateString", ")", "\n", "", "if", "self", ".", "progress", ">=", "100.0", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", "\n", "", "", "else", ":", "\n", "            ", "if", "stepExceeded", "or", "timeStepExceeded", ":", "\n", "                ", "self", ".", "progress", "=", "0", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"\\r\"", "+", "self", ".", "prevUpdateString", "+", "max", "(", "0", ",", "self", ".", "prevUpdateStringLen", "-", "len", "(", "self", ".", "prevUpdateString", ")", ")", "*", "\" \"", ",", "\n", "self", ".", "prevProgress", "=", "self", ".", "progress", "\n", "self", ".", "prevPrintTime", "=", "currentTime", "\n", "self", ".", "prevUpdateStringLen", "=", "len", "(", "self", ".", "prevUpdateString", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProgressCounter.ProgressCounter.getElapsedTimeString": [[71, 82], ["str", "int", "str", "str", "int", "int"], "methods", ["None"], ["", "", "", "def", "getElapsedTimeString", "(", "self", ",", "currentTime", ")", ":", "\n", "        ", "elapsedTime", "=", "currentTime", "-", "self", ".", "startTime", "\n", "hours", "=", "elapsedTime", "/", "3600.0", "\n", "elapsedTime", "=", "elapsedTime", "%", "3600.0", "\n", "minutes", "=", "elapsedTime", "/", "60.0", "\n", "seconds", "=", "elapsedTime", "%", "60.0", "\n", "if", "self", ".", "showMilliseconds", ":", "\n", "            ", "seconds", "=", "\"%.3f\"", "%", "seconds", "\n", "", "else", ":", "\n", "            ", "seconds", "=", "str", "(", "int", "(", "seconds", ")", ")", "\n", "", "return", "str", "(", "int", "(", "hours", ")", ")", "+", "\":\"", "+", "str", "(", "int", "(", "minutes", ")", ")", "+", "\":\"", "+", "seconds", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProgressCounter.ProgressCounter.showLastUpdate": [[83, 89], ["str", "str", "int", "str"], "methods", ["None"], ["", "def", "showLastUpdate", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "total", "!=", "None", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Last count: \"", "+", "str", "(", "self", ".", "current", ")", "+", "\"/\"", "+", "str", "(", "int", "(", "self", ".", "total", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Last count: \"", "+", "str", "(", "self", ".", "current", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Last update: \"", "+", "self", ".", "prevUpdateString", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.Token.__init__": [[109, 120], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "origId", ",", "pos", ",", "charOffset", ",", "text", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "origId", "=", "origId", "\n", "self", ".", "pos", "=", "pos", "\n", "self", ".", "charOffset", "=", "charOffset", "\n", "self", ".", "text", "=", "text", "\n", "self", ".", "splitFromOffset", "=", "None", "\n", "\n", "# these oddities are used in re-connecting split tokens", "\n", "self", ".", "head", "=", "None", "\n", "self", ".", "depType", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.Token.isPunct": [[121, 123], ["None"], "methods", ["None"], ["", "def", "isPunct", "(", "self", ")", ":", "\n", "        ", "return", "[", "t", "for", "t", "in", "self", ".", "text", "if", "t", "not", "in", "string", ".", "punctuation", "]", "==", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.addTokenization": [[32, 55], ["sentence.find", "sentence.find.getiterator", "ElementTree.SubElement", "sentence.find", "t.get", "t.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "addTokenization", "(", "tokenization", ",", "sentence", ",", "sentenceId", ")", ":", "\n", "    ", "toks", "=", "sentence", ".", "find", "(", "\"sentenceanalyses/tokenizations\"", ")", "\n", "if", "toks", "==", "None", ":", "\n", "        ", "toks", "=", "sentence", ".", "find", "(", "\"analyses\"", ")", "\n", "", "assert", "toks", "!=", "None", ",", "\"Missing <tokenizations> in sentence %s\"", "%", "sentenceId", "\n", "\n", "#    # assume new-style if there's at least one <tokenization> with", "\n", "#    # a \"tokenizer\" attribute. Also check duplicates.", "\n", "#    isNew = False", "\n", "for", "t", "in", "toks", ".", "getiterator", "(", "\"tokenization\"", ")", ":", "\n", "        ", "if", "t", ".", "get", "(", "\"tokenizer\"", ")", "is", "not", "None", ":", "\n", "            ", "assert", "t", ".", "get", "(", "\"tokenizer\"", ")", "is", "not", "None", ",", "\"Split tokenization '%s' already exists in sentence %s!\"", "%", "(", "tokenization", ",", "sentenceId", ")", "\n", "#            isNew = True", "\n", "\n", "# add the tokenization.", "\n", "#    if isNew:", "\n", "", "", "newTok", "=", "ElementTree", ".", "SubElement", "(", "toks", ",", "\"tokenization\"", ")", "\n", "newTok", ".", "attrib", "[", "\"tokenizer\"", "]", "=", "tokenization", "\n", "#    else:", "\n", "#        assert toks.find(tokenization) is None, \"Split tokenization '%s' already exists in sentence %s!\" % (tokenization, sentenceId)", "\n", "#        newTok = ElementTree.SubElement(toks, tokenization)", "\n", "\n", "return", "newTok", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.getTokenization": [[58, 68], ["sentence.find", "sentence.find.findall", "t.get", "sentence.find.remove"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getTokenization", "(", "tokenization", ",", "sentence", ",", "sentenceId", ",", "remove", "=", "False", ")", ":", "\n", "    ", "analyses", "=", "sentence", ".", "find", "(", "\"analyses\"", ")", "\n", "if", "analyses", "==", "None", ":", "\n", "        ", "return", "None", "\n", "", "for", "t", "in", "analyses", ".", "findall", "(", "\"tokenization\"", ")", ":", "\n", "        ", "if", "t", ".", "get", "(", "\"tokenizer\"", ")", "==", "tokenization", ":", "\n", "            ", "if", "remove", ":", "\n", "                ", "analyses", ".", "remove", "(", "t", ")", "\n", "", "return", "t", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.addParse": [[71, 80], ["sentence.getiterator", "ElementTree.SubElement", "sentence.find", "p.get", "p.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "addParse", "(", "parse", ",", "tokenization", ",", "sentence", ",", "sentenceId", ")", ":", "\n", "    ", "for", "p", "in", "sentence", ".", "getiterator", "(", "\"parse\"", ")", ":", "\n", "        ", "if", "p", ".", "get", "(", "\"parser\"", ")", "is", "not", "None", ":", "\n", "            ", "assert", "p", ".", "get", "(", "\"parser\"", ")", "!=", "parse", ",", "\"New parse '%s' already exists in sentence %s!\"", "%", "(", "parse", ",", "sentenceId", ")", "\n", "\n", "", "", "newParse", "=", "ElementTree", ".", "SubElement", "(", "sentence", ".", "find", "(", "\"analyses\"", ")", ",", "\"parse\"", ")", "\n", "newParse", ".", "attrib", "[", "\"parser\"", "]", "=", "parse", "\n", "newParse", ".", "attrib", "[", "\"tokenizer\"", "]", "=", "tokenization", "\n", "return", "newParse", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.getParse": [[84, 106], ["sentence.find", "sentence.find", "sentence.find.getiterator", "sentence.find", "p.get", "p.get", "sentence.find.remove", "p.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getParse", "(", "parse", ",", "tokenization", ",", "sentence", ",", "sentenceId", ",", "remove", "=", "False", ")", ":", "\n", "# first try old-style format, then new.", "\n", "    ", "parsePath", "=", "\"sentenceanalyses/parses/\"", "+", "parse", "\n", "found", "=", "sentence", ".", "find", "(", "parsePath", ")", "\n", "\n", "if", "found", "is", "not", "None", ":", "\n", "        ", "return", "found", "\n", "\n", "# then try new-style", "\n", "", "parses", "=", "sentence", ".", "find", "(", "\"sentenceanalyses/parses\"", ")", "\n", "if", "parses", "==", "None", ":", "\n", "        ", "parses", "=", "sentence", ".", "find", "(", "\"analyses\"", ")", "\n", "", "assert", "parses", "is", "not", "None", ",", "\"ERROR: missing parses for sentence %s\"", "%", "sentenceId", "\n", "\n", "for", "p", "in", "parses", ".", "getiterator", "(", "\"parse\"", ")", ":", "\n", "        ", "if", "p", ".", "get", "(", "\"parser\"", ")", "==", "parse", ":", "\n", "            ", "assert", "p", ".", "get", "(", "\"tokenizer\"", ")", "==", "tokenization", ",", "\"ERROR: tokenization/parse mismatch: parse %s has tokenizer %s, not %s\"", "%", "(", "parse", ",", "p", ".", "get", "(", "\"tokenizer\"", ")", ",", "tokenization", ")", "\n", "if", "remove", ":", "\n", "                ", "parses", ".", "remove", "(", "p", ")", "\n", "", "return", "p", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.cutPoints": [[127, 152], ["set", "set.copy", "sorted", "list", "set.add", "set.add", "set.remove"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["", "", "def", "cutPoints", "(", "tokStart", ",", "tokEnd", ",", "entityOffsets", ")", ":", "\n", "    ", "cutPoints", "=", "set", "(", ")", "\n", "\n", "for", "start", ",", "end", "in", "entityOffsets", ":", "\n", "        ", "if", "start", ">", "tokStart", "and", "start", "<=", "tokEnd", ":", "\n", "# must be cut at the start of the entity", "\n", "            ", "cutPoints", ".", "add", "(", "start", ")", "\n", "\n", "", "if", "end", ">=", "tokStart", "and", "end", "<", "tokEnd", ":", "\n", "# must be cut after the end of the entity", "\n", "            ", "cutPoints", ".", "add", "(", "end", "+", "1", ")", "\n", "\n", "# \"postprocess\" the proposed cuts to remove all instances where a", "\n", "# cut would break an entity. This is to protect against e.g.", "\n", "# \"H2A\" in \"H2A and 2B\" from being cut (rather meaninglessly) into", "\n", "# \"H\" and \"2A\" to match annotated entities \"H2A\" and \"H2B\".", "\n", "", "", "for", "cut", "in", "cutPoints", ".", "copy", "(", ")", ":", "\n", "        ", "for", "start", ",", "end", "in", "entityOffsets", ":", "\n", "            ", "if", "cut", ">", "start", "and", "cut", "<=", "end", ":", "\n", "                ", "try", ":", "\n", "                    ", "cutPoints", ".", "remove", "(", "cut", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"!\"", "\n", "\n", "", "", "", "", "return", "sorted", "(", "list", "(", "cutPoints", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.resolveHeads": [[157, 227], ["enumerate", "len", "tok.isPunct", "tok.isPunct", "len", "len", "len", "len", "headLess.append", "logFile.write", "logFile.write", "nextNextTok.isPunct"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.Token.isPunct", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.Token.isPunct", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.Token.isPunct"], ["", "def", "resolveHeads", "(", "splitParts", ",", "logFile", "=", "None", ")", ":", "\n", "# if there's only one part, there's nothing to resolve", "\n", "    ", "if", "len", "(", "splitParts", ")", "<", "2", ":", "\n", "        ", "return", "\n", "\n", "# since tokens may be split at multiple places for various", "\n", "# reasons, start by first marking \"head\" locally, determining", "\n", "# for each split which of the tokens is the head. This will", "\n", "# then be further resolved transitively.", "\n", "", "for", "i", ",", "tok", "in", "enumerate", "(", "splitParts", ")", ":", "\n", "# may need to refer to these", "\n", "        ", "prevTok", "=", "None", "\n", "if", "i", "-", "1", ">=", "0", ":", "\n", "            ", "prevTok", "=", "splitParts", "[", "i", "-", "1", "]", "\n", "", "nextTok", "=", "None", "\n", "if", "i", "+", "1", "<", "len", "(", "splitParts", ")", ":", "\n", "            ", "nextTok", "=", "splitParts", "[", "i", "+", "1", "]", "\n", "", "nextNextTok", "=", "None", "\n", "if", "i", "+", "2", "<", "len", "(", "splitParts", ")", ":", "\n", "            ", "nextNextTok", "=", "splitParts", "[", "i", "+", "2", "]", "\n", "\n", "# ignore all-punctuation tokens", "\n", "", "if", "tok", ".", "isPunct", "(", ")", ":", "\n", "            ", "continue", "\n", "\n", "# not a good idea --- these may resolve other heads in turn.", "\n", "#         # ignore tokens for which the head has been already", "\n", "#         # determined", "\n", "#         if tok.head is not None:", "\n", "#             assert tok.depType is not None", "\n", "#             continue", "\n", "\n", "# if the next token is a hyphen or slash (etc.) and the next one", "\n", "# is not punctuation, we can resolve this bit..", "\n", "", "if", "(", "nextTok", "is", "not", "None", "and", "nextTok", ".", "text", "in", "[", "\"-\"", ",", "\"/\"", ",", "\"(\"", "]", "and", "\n", "nextNextTok", "is", "not", "None", "and", "not", "nextNextTok", ".", "isPunct", "(", ")", ")", ":", "\n", "# for the hyphen case, the latter non-punct token is", "\n", "# the head", "\n", "            ", "if", "nextTok", ".", "text", "==", "\"-\"", ":", "\n", "                ", "tok", ".", "head", "=", "nextNextTok", "\n", "tok", ".", "depType", "=", "splitHyphenDepName", "\n", "\n", "# for slashes, the preceding token is assumed the head", "\n", "", "elif", "nextTok", ".", "text", "==", "\"/\"", ":", "\n", "                ", "nextNextTok", ".", "head", "=", "tok", "\n", "nextNextTok", ".", "depType", "=", "splitSlashDepName", "\n", "\n", "# same for parens", "\n", "", "elif", "nextTok", ".", "text", "==", "\"(\"", ":", "\n", "                ", "nextNextTok", ".", "head", "=", "tok", "\n", "nextNextTok", ".", "depType", "=", "splitParensDepName", "\n", "\n", "# if all but one non-punctuation token have a head, all is OK", "\n", "", "", "", "headLess", "=", "[", "]", "\n", "for", "tok", "in", "splitParts", ":", "\n", "        ", "if", "tok", ".", "isPunct", "(", ")", ":", "\n", "            ", "continue", "\n", "", "if", "tok", ".", "head", "is", "None", ":", "\n", "            ", "headLess", ".", "append", "(", "tok", ")", "\n", "", "", "joinedText", "=", "\" \"", ".", "join", "(", "[", "t", ".", "text", "for", "t", "in", "splitParts", "]", ")", "\n", "if", "len", "(", "headLess", ")", "==", "0", ":", "\n", "        ", "if", "logFile", "!=", "None", ":", "\n", "            ", "logFile", ".", "write", "(", "\"NOTE: no head candidates for \"", "+", "joinedText", "+", "\"\\n\"", ")", "\n", "", "", "if", "len", "(", "headLess", ")", ">", "1", ":", "\n", "        ", "if", "logFile", "!=", "None", ":", "\n", "            ", "logFile", ".", "write", "(", "\"NOTE: failed to resolve unique \\\"head\\\" for \"", "+", "joinedText", "+", "\": \"", "+", "\" \"", ".", "join", "(", "[", "t", ".", "text", "for", "t", "in", "headLess", "]", ")", "+", "\"\\n\"", ")", "\n", "# assume the first candidate is the head, connect the other there.", "\n", "", "for", "h", "in", "headLess", "[", "1", ":", "]", ":", "\n", "            ", "h", ".", "head", "=", "headLess", "[", "0", "]", "\n", "h", ".", "depType", "=", "splitDefaultDepName", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.splitTokens": [[232, 334], ["sentence.get", "sentence.getiterator", "tokenization.getiterator", "sentence.get", "entity.get", "entity.get.split", "token.get", "token.get", "token.get", "token.get", "re.match", "ProteinNameSplitter.cutPoints", "set", "sorted", "parts.append", "ProteinNameSplitter.resolveHeads", "sentence.get", "re.match", "entityOffsets.append", "int", "list", "parts.append", "len", "ProteinNameSplitter.Token", "splitParts.append", "splitTokens.append", "len", "entity.get", "entity.get", "int", "re.match.group", "int", "set.add", "set.add", "logFile.write", "re.match.group", "int", "re.match.group", "len", "len", "re.match.group", "len", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.cutPoints", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.resolveHeads", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "", "", "def", "splitTokens", "(", "tokenization", ",", "sentence", ",", "logFile", "=", "None", ")", ":", "\n", "# store the tokens for the new split tokenization here", "\n", "    ", "sentenceId", "=", "sentence", ".", "get", "(", "\"id\"", ")", "\n", "if", "sentence", ".", "get", "(", "\"origId\"", ")", "!=", "None", ":", "\n", "        ", "sentenceId", "+=", "\"/\"", "+", "sentence", ".", "get", "(", "\"origId\"", ")", "\n", "", "splitTokens", "=", "[", "]", "\n", "\n", "# get the character offsets of entities, and turn them into a list", "\n", "# of (from,to) tuples.", "\n", "entityOffsets", "=", "[", "]", "\n", "for", "entity", "in", "sentence", ".", "getiterator", "(", "\"entity\"", ")", ":", "\n", "        ", "if", "entity", ".", "get", "(", "\"given\"", ")", "!=", "None", "and", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"False\"", ":", "\n", "            ", "continue", "\n", "", "offsets", "=", "entity", ".", "get", "(", "\"charOffset\"", ")", "\n", "assert", "offsets", "is", "not", "None", ",", "\"Missing charOffset!\"", "\n", "# format is \"NUM-NUM(,NUM-NUM)+\". split by commas, parse ranges", "\n", "for", "offset", "in", "offsets", ".", "split", "(", "\",\"", ")", ":", "\n", "            ", "m", "=", "re", ".", "match", "(", "r'^(\\d+)-(\\d+)$'", ",", "offset", ")", "\n", "assert", "m", ",", "\"Failed to parse charOffset '%s'\"", "%", "offset", "\n", "#start, end = int(m.group(1)), int(m.group(2))", "\n", "start", ",", "end", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", ",", "int", "(", "m", ".", "group", "(", "2", ")", ")", "-", "1", "\n", "entityOffsets", ".", "append", "(", "(", "start", ",", "end", ")", ")", "\n", "\n", "", "", "seqId", "=", "0", "#1", "\n", "nextId", "=", "\"%s%d\"", "%", "(", "tokenIdPrefix", ",", "seqId", ")", "\n", "\n", "for", "token", "in", "tokenization", ".", "getiterator", "(", "\"token\"", ")", ":", "\n", "\n", "        ", "text", "=", "token", ".", "get", "(", "\"text\"", ")", "\n", "origId", "=", "token", ".", "get", "(", "\"id\"", ")", "\n", "POS", "=", "token", ".", "get", "(", "\"POS\"", ")", "\n", "off", "=", "token", ".", "get", "(", "\"charOffset\"", ")", "\n", "\n", "# parse the token offset", "\n", "m", "=", "re", ".", "match", "(", "r'^(\\d+)-(\\d+)$'", ",", "off", ")", "\n", "assert", "m", ",", "\"Failed to parse token charOffset '%s'\"", "%", "off", "\n", "#tokStart, tokEnd = int(m.group(1)), int(m.group(2))", "\n", "tokStart", ",", "tokEnd", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", ",", "int", "(", "m", ".", "group", "(", "2", ")", ")", "-", "1", "\n", "\n", "# determine points at which the token must be cut", "\n", "cuts", "=", "cutPoints", "(", "tokStart", ",", "tokEnd", ",", "entityOffsets", ")", "\n", "\n", "# go through the cuts, possibly adding more to further break e.g.", "\n", "# \"actin\" \"-binding\" into \"actin\" \"-\" \"binding\".", "\n", "newCuts", "=", "set", "(", "cuts", ")", "\n", "for", "cut", "in", "cuts", ":", "\n", "            ", "cutOffset", "=", "cut", "-", "tokStart", "\n", "firstPart", ",", "lastPart", "=", "text", "[", ":", "cutOffset", "]", ",", "text", "[", "cutOffset", ":", "]", "\n", "\n", "# extra cut immediately after cut followed by hyphen,", "\n", "# slash etc. that precedes a non-punctuation character.", "\n", "if", "(", "lastPart", "[", "0", "]", "in", "[", "\"-\"", ",", "\"/\"", "]", "and", "\n", "len", "(", "lastPart", ")", ">=", "2", "and", "lastPart", "[", "1", "]", "not", "in", "string", ".", "punctuation", ")", ":", "\n", "                ", "newCuts", ".", "add", "(", "cut", "+", "1", ")", "\n", "\n", "# same in reverse (sort of).", "\n", "", "if", "(", "firstPart", "[", "-", "1", "]", "in", "[", "\"-\"", ",", "\"/\"", "]", "and", "\n", "len", "(", "firstPart", ")", ">=", "2", "and", "firstPart", "[", "-", "2", "]", "not", "in", "string", ".", "punctuation", ")", ":", "\n", "                ", "newCuts", ".", "add", "(", "cut", "-", "1", ")", "\n", "\n", "", "", "cuts", "=", "sorted", "(", "list", "(", "newCuts", ")", ")", "\n", "\n", "parts", "=", "[", "]", "\n", "startOffset", "=", "0", "\n", "for", "cut", "in", "cuts", ":", "\n", "            ", "cutOffset", "=", "cut", "-", "tokStart", "\n", "parts", ".", "append", "(", "text", "[", "startOffset", ":", "cutOffset", "]", ")", "\n", "startOffset", "=", "cutOffset", "\n", "", "parts", ".", "append", "(", "text", "[", "startOffset", ":", "]", ")", "\n", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "# debug", "\n", "            ", "if", "logFile", "!=", "None", ":", "\n", "                ", "logFile", ".", "write", "(", "\"Token %s in sentence %s: cut '%s' into %d parts:\"", "%", "(", "origId", ",", "sentenceId", ",", "text", ",", "len", "(", "parts", ")", ")", "+", "\" \"", ".", "join", "(", "[", "\"'%s'\"", "%", "p", "for", "p", "in", "parts", "]", ")", "+", "\"\\n\"", ")", "\n", "#print >> sys.stderr, \"Token %s in sentence %s: cut '%s' into %d parts:\" % (origId, sentenceId, text, len(parts)), \" \".join([\"'%s'\" % p for p in parts])", "\n", "", "pass", "\n", "\n", "# sanity check", "\n", "", "assert", "text", "==", "\"\"", ".", "join", "(", "parts", ")", ",", "\"INTERNAL ERROR: token parts don't add up to original!\"", "\n", "\n", "\n", "# create a token for each part. For now, don't assign the", "\n", "# \"head\"; this will be determined later.", "\n", "currentOffset", "=", "tokStart", "\n", "splitParts", "=", "[", "]", "\n", "for", "part", "in", "parts", ":", "\n", "#tOff = \"%d-%d\" % (currentOffset, currentOffset + len(part)-1)", "\n", "            ", "tOff", "=", "\"%d-%d\"", "%", "(", "currentOffset", ",", "currentOffset", "+", "len", "(", "part", ")", ")", "\n", "\n", "t", "=", "Token", "(", "nextId", ",", "origId", ",", "POS", ",", "tOff", ",", "part", ")", "\n", "t", ".", "splitFromOffset", "=", "off", "\n", "splitParts", ".", "append", "(", "t", ")", "\n", "splitTokens", ".", "append", "(", "t", ")", "\n", "\n", "currentOffset", "+=", "len", "(", "part", ")", "\n", "seqId", "+=", "1", "\n", "nextId", "=", "\"%s%d\"", "%", "(", "tokenIdPrefix", ",", "seqId", ")", "\n", "\n", "\n", "", "resolveHeads", "(", "splitParts", ",", "logFile", ")", "\n", "\n", "", "return", "splitTokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.addTokensToTree": [[336, 345], ["ElementTree.SubElement", "ElementTree.SubElement.set", "ElementTree.SubElement.set", "ElementTree.SubElement.set", "ElementTree.SubElement.set", "ElementTree.SubElement.set"], "function", ["None"], ["", "def", "addTokensToTree", "(", "tokens", ",", "element", ")", ":", "\n", "    ", "for", "t", "in", "tokens", ":", "\n", "        ", "newToken", "=", "ElementTree", ".", "SubElement", "(", "element", ",", "\"token\"", ")", "\n", "newToken", ".", "set", "(", "\"id\"", ",", "t", ".", "id", ")", "\n", "newToken", ".", "set", "(", "\"text\"", ",", "t", ".", "text", ")", "\n", "newToken", ".", "set", "(", "\"POS\"", ",", "t", ".", "pos", ")", "\n", "newToken", ".", "set", "(", "\"charOffset\"", ",", "t", ".", "charOffset", ")", "\n", "if", "t", ".", "splitFromOffset", "!=", "None", "and", "t", ".", "splitFromOffset", "!=", "t", ".", "charOffset", ":", "\n", "            ", "newToken", ".", "set", "(", "\"splitFrom\"", ",", "t", ".", "splitFromOffset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.mainFunc": [[359, 486], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "Utils.ProgressCounter.ProgressCounter", "open", "len", "sentence.get", "Utils.ProgressCounter.ProgressCounter.update", "ProteinNameSplitter.getTokenization", "ProteinNameSplitter.getParse", "ProteinNameSplitter.splitTokens", "ProteinNameSplitter.addTokenization", "ProteinNameSplitter.addTokensToTree", "ProteinNameSplitter.addParse", "addParse.set", "addTokenization.set", "getParse.getiterator", "getParse.getiterator", "open.close", "Utils.write", "tree.getroot.getiterator", "ElementTree.SubElement", "ElementTree.SubElement.set", "ElementTree.SubElement.set", "ElementTree.SubElement.set", "ElementTree.SubElement.set", "ElementTree.SubElement", "ElementTree.SubElement.set", "ElementTree.SubElement.set", "ElementTree.SubElement.set", "ElementTree.SubElement.set", "ElementTree.SubElement.set", "addParse.append", "getTokenization.get", "getParse.get", "addTokenization.get", "addTokenization.set", "addParse.get", "addParse.set", "d.get", "d.get", "d.get", "getTokenization.get", "getParse.get", "getTokenization.get", "getParse.get", "t.isPunct"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.getTokenization", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.getParse", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.splitTokens", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.addTokenization", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.addTokensToTree", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.addParse", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.Token.isPunct"], ["", "", "", "def", "mainFunc", "(", "input", ",", "output", "=", "None", ",", "parseName", "=", "\"McCC\"", ",", "tokenizationName", "=", "None", ",", "newParseName", "=", "None", ",", "newTokenizationName", "=", "None", ",", "logFileName", "=", "None", ",", "removeOld", "=", "True", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Protein Name Splitter\"", "\n", "if", "logFileName", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing log to\"", ",", "logFileName", "\n", "logFile", "=", "open", "(", "logFileName", ",", "\"wt\"", ")", "\n", "", "else", ":", "\n", "        ", "logFile", "=", "None", "\n", "#if input.endswith(\".gz\"):", "\n", "#    inFile = gzip.GzipFile(input)", "\n", "#else:", "\n", "#    inFile = open(input)", "\n", "", "tree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "\n", "if", "tokenizationName", "==", "None", ":", "\n", "        ", "tokenizationName", "=", "parseName", "\n", "\n", "#tree = ElementTree.parse(inFile)", "\n", "", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "\n", "sentences", "=", "[", "x", "for", "x", "in", "root", ".", "getiterator", "(", "\"sentence\"", ")", "]", "\n", "counter", "=", "ProgressCounter", "(", "len", "(", "sentences", ")", ",", "\"Split Protein Names\"", ")", "\n", "counter", ".", "showMilliseconds", "=", "True", "\n", "missingTokCount", "=", "0", "\n", "for", "sentence", "in", "sentences", ":", "\n", "        ", "sId", "=", "sentence", ".", "get", "(", "\"id\"", ")", "\n", "counter", ".", "update", "(", "1", ",", "\"Splitting names (\"", "+", "sId", "+", "\"): \"", ")", "\n", "\n", "tok", "=", "getTokenization", "(", "tokenizationName", ",", "sentence", ",", "sId", ",", "remove", "=", "removeOld", ")", "\n", "if", "tok", "==", "None", ":", "\n", "            ", "missingTokCount", "+=", "1", "\n", "continue", "\n", "\n", "", "assert", "tok", "is", "not", "None", ",", "\"Missing tokenization '%s' in sentence %s!\"", "%", "(", "tokenizationName", ",", "sId", ")", "\n", "\n", "parse", "=", "getParse", "(", "parseName", ",", "tokenizationName", ",", "sentence", ",", "sId", ",", "remove", "=", "removeOld", ")", "\n", "assert", "parse", "is", "not", "None", ",", "\"Missing parse '%s' in sentence %s!\"", "%", "(", "parseName", ",", "sId", ")", "\n", "\n", "split", "=", "splitTokens", "(", "tok", ",", "sentence", ",", "logFile", ")", "\n", "\n", "# Default names", "\n", "if", "removeOld", ":", "\n", "            ", "if", "newTokenizationName", "==", "None", ":", "\n", "                ", "newTokenizationName", "=", "tok", ".", "get", "(", "\"tokenizer\"", ")", "\n", "", "if", "newParseName", "==", "None", ":", "\n", "                ", "newParseName", "=", "parse", ".", "get", "(", "\"parser\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "newTokenizationName", "==", "None", ":", "\n", "                ", "newTokenizationName", "=", "\"split-\"", "+", "tok", ".", "get", "(", "\"tokenizer\"", ")", "\n", "", "if", "newParseName", "==", "None", ":", "\n", "                ", "newParseName", "=", "\"split-\"", "+", "parse", ".", "get", "(", "\"parser\"", ")", "\n", "\n", "# add a new tokenization with the split tokens.", "\n", "", "", "splittok", "=", "addTokenization", "(", "newTokenizationName", ",", "sentence", ",", "sId", ")", "\n", "addTokensToTree", "(", "split", ",", "splittok", ")", "\n", "for", "a", "in", "tok", ".", "attrib", ":", "\n", "            ", "if", "splittok", ".", "get", "(", "a", ")", "==", "None", ":", "\n", "                ", "splittok", ".", "set", "(", "a", ",", "tok", ".", "get", "(", "a", ")", ")", "\n", "#splittok.set(\"split-\")", "\n", "\n", "# make a mapping from original to split token ids. Store the", "\n", "# head token when given.", "\n", "", "", "tokenIdMap", "=", "{", "}", "\n", "for", "t", "in", "split", ":", "\n", "            ", "if", "t", ".", "head", ":", "\n", "                ", "head", "=", "t", ".", "head", "\n", "# traverse", "\n", "while", "head", ".", "head", "is", "not", "None", ":", "\n", "                    ", "assert", "head", ".", "head", "!=", "t", ",", "\"Cyclic heads\"", "\n", "head", "=", "head", ".", "head", "\n", "\n", "# should match (nah, punctuation problems)", "\n", "# assert t.origId not in tokenIdMap or tokenIdMap[t.origId] == head.id, \"Head conflict\"", "\n", "", "tokenIdMap", "[", "t", ".", "origId", "]", "=", "head", ".", "id", "\n", "", "else", ":", "\n", "# only allow overwrite of existing entry if the current token", "\n", "# is not punctuation.", "\n", "                ", "if", "t", ".", "origId", "not", "in", "tokenIdMap", "or", "not", "t", ".", "isPunct", "(", ")", ":", "\n", "                    ", "tokenIdMap", "[", "t", ".", "origId", "]", "=", "t", ".", "id", "\n", "\n", "# make a copy of the specified parse that refers to the split tokens", "\n", "# instead of the originals.", "\n", "", "", "", "newparse", "=", "addParse", "(", "newParseName", ",", "newTokenizationName", ",", "sentence", ",", "sId", ")", "\n", "for", "a", "in", "parse", ".", "attrib", ":", "\n", "            ", "if", "newparse", ".", "get", "(", "a", ")", "==", "None", ":", "\n", "                ", "newparse", ".", "set", "(", "a", ",", "parse", ".", "get", "(", "a", ")", ")", "\n", "", "", "newparse", ".", "set", "(", "\"ProteinNameSplitter\"", ",", "\"True\"", ")", "\n", "splittok", ".", "set", "(", "\"ProteinNameSplitter\"", ",", "\"True\"", ")", "\n", "\n", "depSeqId", "=", "0", "#1", "\n", "for", "d", "in", "parse", ".", "getiterator", "(", "\"dependency\"", ")", ":", "\n", "            ", "t1", ",", "t2", ",", "dType", "=", "d", ".", "get", "(", "\"t1\"", ")", ",", "d", ".", "get", "(", "\"t2\"", ")", ",", "d", ".", "get", "(", "\"type\"", ")", "\n", "assert", "t1", "in", "tokenIdMap", "and", "t2", "in", "tokenIdMap", ",", "\"INTERNAL ERROR\"", "\n", "\n", "dep", "=", "ElementTree", ".", "SubElement", "(", "newparse", ",", "\"dependency\"", ")", "\n", "dep", ".", "set", "(", "\"t1\"", ",", "tokenIdMap", "[", "t1", "]", ")", "\n", "dep", ".", "set", "(", "\"t2\"", ",", "tokenIdMap", "[", "t2", "]", ")", "\n", "dep", ".", "set", "(", "\"type\"", ",", "dType", ")", "\n", "dep", ".", "set", "(", "\"id\"", ",", "\"sd_%d\"", "%", "depSeqId", ")", "\n", "depSeqId", "+=", "1", "\n", "\n", "# Add in new dependencies between the split parts.", "\n", "", "for", "t", "in", "[", "tok", "for", "tok", "in", "split", "if", "tok", ".", "head", "is", "not", "None", "]", ":", "\n", "            ", "dep", "=", "ElementTree", ".", "SubElement", "(", "newparse", ",", "\"dependency\"", ")", "\n", "dep", ".", "set", "(", "\"t1\"", ",", "t", ".", "head", ".", "id", ")", "\n", "dep", ".", "set", "(", "\"t2\"", ",", "t", ".", "id", ")", "\n", "dep", ".", "set", "(", "\"type\"", ",", "t", ".", "depType", ")", "\n", "dep", ".", "set", "(", "\"split\"", ",", "\"PNS\"", ")", "\n", "dep", ".", "set", "(", "\"id\"", ",", "\"spd_%d\"", "%", "depSeqId", ")", "\n", "depSeqId", "+=", "1", "\n", "\n", "", "for", "phrase", "in", "parse", ".", "getiterator", "(", "\"phrase\"", ")", ":", "\n", "            ", "newparse", ".", "append", "(", "phrase", ")", "\n", "\n", "# debugging", "\n", "#print >> sys.stderr, \"NEW DEP IN\", sId", "\n", "\n", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Tokenization missing from\"", ",", "missingTokCount", ",", "\"sentences\"", "\n", "\n", "#indent(root)", "\n", "if", "logFile", "!=", "None", ":", "\n", "        ", "logFile", ".", "close", "(", ")", "\n", "\n", "# debugging", "\n", "", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "tree", ",", "output", ")", "\n", "", "return", "tree", "\n", "#else:", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.__init__": [[140, 155], ["isinstance", "out.endswith", "os.path.exists", "os.makedirs", "gzip.GzipFile", "codecs.open", "os.path.dirname", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["    ", "def", "__init__", "(", "self", ",", "out", ")", ":", "\n", "        ", "if", "isinstance", "(", "out", ",", "str", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "out", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out", ")", ")", "\n", "", "if", "out", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "                ", "self", ".", "out", "=", "GzipFile", "(", "out", ",", "\"wt\"", ")", "#codecs.getwriter(\"utf-8\")(GzipFile(out,\"wt\"))", "\n", "", "else", ":", "\n", "                ", "self", ".", "out", "=", "codecs", ".", "open", "(", "out", ",", "\"wt\"", ")", "#codecs.open(out, \"wt\", \"utf-8\")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "out", "=", "out", "\n", "", "print", ">>", "self", ".", "out", ",", "'<?xml version=\"1.0\" encoding=\"UTF-8\"?>'", "\n", "self", ".", "indentLevel", "=", "0", "\n", "self", ".", "beginString", "=", "None", "\n", "self", ".", "tags", "=", "[", "]", "\n", "self", ".", "lastElement", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close": [[156, 161], ["ElementTreeUtils.ETWriter.out.close", "len", "ElementTreeUtils.ETWriter.end"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.end"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "while", "len", "(", "self", ".", "tags", ")", ">", "0", ":", "\n", "            ", "self", ".", "end", "(", ")", "\n", "", "self", ".", "out", ".", "close", "(", ")", "\n", "self", ".", "out", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.begin": [[163, 172], ["ElementTreeUtils.ETWriter._flush", "ElementTreeUtils.ETWriter.tags.append", "sorted", "element.attrib.keys", "unicode", "ElementTreeUtils.escapeText", "element.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter._flush", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.escapeText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "begin", "(", "self", ",", "element", ")", ":", "\n", "        ", "self", ".", "_flush", "(", ")", "\n", "self", ".", "tags", ".", "append", "(", "element", ".", "tag", ")", "\n", "self", ".", "beginString", "=", "self", ".", "indentLevel", "*", "\"  \"", "+", "\"<\"", "+", "element", ".", "tag", "\n", "for", "key", "in", "sorted", "(", "element", ".", "attrib", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "beginString", "+=", "\" \"", "+", "key", "+", "\"=\\\"\"", "+", "unicode", "(", "escapeText", "(", "element", ".", "get", "(", "key", ")", ")", ",", "\"utf-8\"", ")", "+", "\"\\\"\"", "\n", "", "self", ".", "beginString", "+=", "\">\"", "+", "\"\\n\"", "\n", "self", ".", "indentLevel", "+=", "1", "\n", "self", ".", "lastElement", "=", "element", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter._flush": [[173, 178], ["ElementTreeUtils.ETWriter.out.write"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "_flush", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "beginString", "!=", "None", ":", "\n", "            ", "self", ".", "out", ".", "write", "(", "self", ".", "beginString", ")", "\n", "#self.out.write(\"\\n\" + self.indentLevel * \"  \")", "\n", "", "self", ".", "beginString", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.end": [[180, 194], ["ElementTreeUtils.ETWriter.write", "ElementTreeUtils.ETWriter.out.write", "len", "ElementTreeUtils.ETWriter.tags.pop", "ElementTreeUtils.ETWriter.out.write"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "end", "(", "self", ",", "element", ")", ":", "\n", "        ", "self", ".", "indentLevel", "-=", "1", "\n", "if", "element", "==", "self", ".", "lastElement", ":", "\n", "            ", "self", ".", "beginString", "=", "None", "\n", "self", ".", "write", "(", "element", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "out", ".", "write", "(", "self", ".", "indentLevel", "*", "\"  \"", "+", "\"</\"", "+", "element", ".", "tag", "+", "\">\"", ")", "\n", "if", "self", ".", "indentLevel", ">", "0", ":", "\n", "                ", "self", ".", "out", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", "self", ".", "lastElement", "=", "None", "\n", "if", "len", "(", "self", ".", "tags", ")", ">", "0", ":", "\n", "            ", "return", "self", ".", "tags", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.write": [[195, 202], ["ElementTreeUtils.ETWriter._flush", "ElementTreeUtils.indent", "ElementTreeUtils.ETWriter.out.write", "ElementTree.tostring"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter._flush", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.indent", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "", "def", "write", "(", "self", ",", "element", ")", ":", "\n", "        ", "self", ".", "_flush", "(", ")", "\n", "indent", "(", "element", ",", "self", ".", "indentLevel", ")", "\n", "if", "element", ".", "tail", "!=", "None", ":", "\n", "            ", "element", ".", "tail", "=", "element", ".", "tail", "[", ":", "-", "self", ".", "indentLevel", "*", "2", "]", "\n", "", "self", ".", "out", ".", "write", "(", "self", ".", "indentLevel", "*", "\"  \"", "+", "ElementTree", ".", "tostring", "(", "element", ",", "\"utf-8\"", ")", ")", "\n", "self", ".", "lastElement", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.removeAll": [[22, 27], ["list", "list", "ElementTreeUtils.removeAll", "element.remove"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.removeAll"], ["def", "removeAll", "(", "element", ")", ":", "\n", "    ", "for", "child", "in", "list", "(", "element", ")", ":", "\n", "        ", "removeAll", "(", "child", ")", "\n", "", "for", "child", "in", "list", "(", "element", ")", ":", "\n", "        ", "element", ".", "remove", "(", "child", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.iterparse": [[28, 58], ["ElementTree.iterparse", "callback", "root.clear"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.iterparse"], ["", "", "def", "iterparse", "(", "file", ",", "elementName", ",", "callback", ",", "limit", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Parse iteratively xml-files\n    \n    This function offers a simple way to use the cElementTree\n    iterparse-function the way it is often used.\n    \n    Keyword arguments:\n    file -- (file) file or file-like object to parse \n    elementName -- (string) matching elements are passed to the callback\n    callback -- (function) called when parser has parsed an element\n                of name elementName\n    limit -- (int) stop after reading \"limit\" elements. If -1, read\n             until end of file. This is mostly useful when debugging\n             programs that parse large files.\n    \"\"\"", "\n", "context", "=", "ElementTree", ".", "iterparse", "(", "file", ",", "events", "=", "(", "\"start\"", ",", "\"end\"", ")", ")", "\n", "root", "=", "None", "\n", "\n", "for", "event", ",", "elem", "in", "context", ":", "\n", "        ", "if", "limit", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "event", "==", "\"start\"", "and", "root", "is", "None", ":", "\n", "            ", "root", "=", "elem", "# the first element is root", "\n", "", "if", "event", "==", "\"end\"", "and", "elem", ".", "tag", "==", "elementName", ":", "#elem.tag == \"record\":", "\n", "#... process record elements ...", "\n", "            ", "callback", "(", "elem", ")", "\n", "root", ".", "clear", "(", ")", "\n", "if", "limit", "!=", "-", "1", ":", "\n", "                ", "limit", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.iterparse2": [[59, 88], ["ElementTree.iterparse", "iter", "iter.next", "root.clear"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.iterparse"], ["", "", "", "", "def", "iterparse2", "(", "file", ",", "events", "=", "(", "\"start\"", ",", "\"end\"", ")", ")", ":", "\n", "    ", "\"\"\" Parse iteratively xml-files\n    \n    This function offers a simple way to use the cElementTree\n    iterparse-function the way it is often used.\n    \n    Keyword arguments:\n    file -- (file) file or file-like object to parse \n    elementName -- (string) matching elements are passed to the callback\n    callback -- (function) called when parser has parsed an element\n                of name elementName\n    limit -- (int) stop after reading \"limit\" elements. If -1, read\n             until end of file. This is mostly useful when debugging\n             programs that parse large files.\n    \"\"\"", "\n", "# get an iterable", "\n", "context", "=", "ElementTree", ".", "iterparse", "(", "file", ",", "events", "=", "events", ")", "\n", "\n", "# turn it into an iterator", "\n", "context", "=", "iter", "(", "context", ")", "\n", "\n", "# get the root element", "\n", "event", ",", "root", "=", "context", ".", "next", "(", ")", "\n", "yield", "(", "event", ",", "root", ")", "\n", "\n", "for", "event", ",", "elem", "in", "context", ":", "\n", "        ", "yield", "(", "event", ",", "elem", ")", "\n", "if", "event", "==", "\"end\"", ":", "\n", "            ", "root", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.indent": [[89, 111], ["len", "ElementTreeUtils.indent", "elem.text.strip", "e.tail.strip", "elem.tail.strip"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.indent"], ["", "", "", "def", "indent", "(", "elem", ",", "level", "=", "0", ")", ":", "\n", "    ", "\"\"\" indent-function as defined in cElementTree-documentation\n    \n    This function will become part of cElementTree in some future\n    release. Until then, it can be used from here. This function\n    indents the xml-tree, so that it is more readable when written\n    out. \n    \n    Keyword arguments:\n    elem -- (Element) root of the tree to indent \n    level -- (int) starting level of indentation\n    \"\"\"", "\n", "i", "=", "\"\\n\"", "+", "level", "*", "\"  \"", "\n", "if", "len", "(", "elem", ")", ":", "\n", "        ", "if", "not", "elem", ".", "text", "or", "not", "elem", ".", "text", ".", "strip", "(", ")", ":", "\n", "            ", "elem", ".", "text", "=", "i", "+", "\"  \"", "\n", "", "for", "e", "in", "elem", ":", "\n", "            ", "indent", "(", "e", ",", "level", "+", "1", ")", "\n", "", "if", "not", "e", ".", "tail", "or", "not", "e", ".", "tail", ".", "strip", "(", ")", ":", "\n", "            ", "e", ".", "tail", "=", "i", "\n", "", "", "if", "level", "and", "(", "not", "elem", ".", "tail", "or", "not", "elem", ".", "tail", ".", "strip", "(", ")", ")", ":", "\n", "        ", "elem", ".", "tail", "=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj": [[112, 134], ["isinstance", "isinstance", "obj.endswith", "ElementTree.parse", "gzip.GzipFile", "isinstance", "ElementTree.iselement", "ElementTree.parse", "obj.endswith", "obj.endswith", "obj.endswith", "obj.endswith", "open", "ValueError"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.parse", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.parse", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "", "def", "ETFromObj", "(", "obj", ")", ":", "\n", "    ", "\"\"\"obj can be\n    1) a string that ends with .xml -> the file is parsed and the resulting ElementTree returned\n    2) a string that ends with .xml.gz -> the file is unzipped, parsed, and the resulting ElementTree is returned\n    3) an open input stream -> the input is parsed and the resulting ElementTree is returned\n    4) an ElementTree or an Element -> obj is returned as-is, nothing is done\"\"\"", "\n", "if", "isinstance", "(", "obj", ",", "str", ")", "or", "isinstance", "(", "obj", ",", "unicode", ")", ":", "\n", "        ", "if", "obj", ".", "endswith", "(", "\".xml.gz\"", ")", ":", "\n", "            ", "fStream", "=", "GzipFile", "(", "obj", ",", "\"rt\"", ")", "\n", "#fStream = codecs.getreader(\"utf-8\")(GzipFile(obj,\"rt\"))", "\n", "", "elif", "obj", ".", "endswith", "(", "\".xml\"", ")", "or", "obj", ".", "endswith", "(", "\".svg\"", ")", "or", "obj", ".", "endswith", "(", "\".nxml\"", ")", "or", "obj", ".", "endswith", "(", "\".csml\"", ")", ":", "\n", "            ", "fStream", "=", "open", "(", "obj", ",", "\"rt\"", ")", "\n", "#fStream=codecs.open(obj, \"rt\", \"utf-8\")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"%s: File format not recognized (expected .xml or .xml.gz)\"", "%", "obj", ")", "\n", "", "return", "ElementTree", ".", "parse", "(", "fStream", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "ElementTree", ".", "ElementTree", ")", "or", "ElementTree", ".", "iselement", "(", "obj", ")", ":", "\n", "        ", "return", "obj", "\n", "", "else", ":", "\n", "#not a string, not a tree, not an element, should be a stream", "\n", "#let's parse it", "\n", "        ", "return", "ElementTree", ".", "parse", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.escapeText": [[135, 138], ["xml.sax.saxutils.escape().replace().replace", "xml.sax.saxutils.escape().replace", "xml.sax.saxutils.escape"], "function", ["None"], ["", "", "def", "escapeText", "(", "text", ")", ":", "\n", "    ", "import", "xml", ".", "sax", ".", "saxutils", "\n", "return", "xml", ".", "sax", ".", "saxutils", ".", "escape", "(", "text", ")", ".", "replace", "(", "\"'\"", ",", "\"&apos;\"", ")", ".", "replace", "(", "\"\\\"\"", ",", "\"&quot;\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETIteratorFromObj": [[203, 232], ["isinstance", "isinstance", "obj.endswith", "ElementTreeUtils.iterparse2", "gzip.GzipFile", "open", "isinstance", "ElementTree.iselement", "ElementTree.iselement", "obj.getroot.getiterator", "ElementTree.iterparse", "obj.getroot"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.iterparse2", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.iterparse"], ["", "", "def", "ETIteratorFromObj", "(", "obj", ",", "events", "=", "None", ",", "parser", "=", "None", ")", ":", "\n", "    ", "\"\"\"obj can be\n    1) a string that ends with .xml -> the file is parsed and the resulting ElementTree returned\n    2) a string that ends with .xml.gz -> the file is unzipped, parsed, and the resulting ElementTree is returned\n    3) an open input stream -> the input is parsed and the resulting ElementTree is returned\n    4) an ElementTree or an Element -> obj is returned as-is, nothing is done\"\"\"", "\n", "if", "isinstance", "(", "obj", ",", "str", ")", "or", "isinstance", "(", "obj", ",", "unicode", ")", ":", "\n", "        ", "if", "obj", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "            ", "fStream", "=", "GzipFile", "(", "obj", ",", "\"rt\"", ")", "\n", "#fStream = codecs.getreader(\"utf-8\")(GzipFile(obj,\"rt\"))", "\n", "", "else", ":", "\n", "            ", "fStream", "=", "open", "(", "obj", ",", "\"rt\"", ")", "\n", "#fStream=codecs.open(obj, \"rt\", \"utf-8\")", "\n", "", "for", "rv", "in", "iterparse2", "(", "fStream", ",", "events", ")", ":", "\n", "            ", "yield", "rv", "\n", "", "", "elif", "isinstance", "(", "obj", ",", "ElementTree", ".", "ElementTree", ")", "or", "ElementTree", ".", "iselement", "(", "obj", ")", ":", "\n", "        ", "if", "ElementTree", ".", "iselement", "(", "obj", ")", ":", "\n", "            ", "root", "=", "obj", "\n", "", "else", ":", "\n", "            ", "root", "=", "obj", ".", "getroot", "(", ")", "\n", "#if events == None:", "\n", "#    events = [\"END\"]", "\n", "", "for", "element", "in", "root", ".", "getiterator", "(", ")", ":", "\n", "            ", "yield", "(", "\"memory\"", ",", "element", ")", "\n", "", "", "else", ":", "\n", "#not a string, not a tree, not an element, should be a stream", "\n", "#let's parse it", "\n", "        ", "for", "rv", "in", "ElementTree", ".", "iterparse", "(", "obj", ",", "events", ")", ":", "\n", "            ", "yield", "rv", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.write": [[233, 250], ["isinstance", "ElementTreeUtils.indent", "filename.endswith", "ElementTree.ElementTree().write", "codecs.open.close", "ElementTreeUtils.encodeNewlines", "rootElement.getroot.getroot", "os.makedirs", "gzip.GzipFile", "codecs.open", "os.path.dirname", "os.path.exists", "os.path.dirname", "ElementTree.ElementTree", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.indent", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.encodeNewlines", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "", "", "def", "write", "(", "rootElement", ",", "filename", ")", ":", "\n", "    ", "if", "isinstance", "(", "rootElement", ",", "ElementTree", ".", "ElementTree", ")", ":", "\n", "        ", "rootElement", "=", "rootElement", ".", "getroot", "(", ")", "\n", "", "indent", "(", "rootElement", ")", "\n", "# Create intermediate paths if needed", "\n", "if", "os", ".", "path", ".", "dirname", "(", "filename", ")", "!=", "\"\"", "and", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", "\n", "# Open the output file", "\n", "", "if", "filename", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "        ", "out", "=", "GzipFile", "(", "filename", ",", "\"wt\"", ")", "#out=codecs.getwriter(\"utf-8\")(GzipFile(filename,\"wt\"))", "\n", "", "else", ":", "\n", "        ", "out", "=", "codecs", ".", "open", "(", "filename", ",", "\"wt\"", ")", "#out=codecs.open(filename,\"wt\",\"utf-8\")", "\n", "", "print", ">>", "out", ",", "'<?xml version=\"1.0\" encoding=\"UTF-8\"?>'", "\n", "ElementTree", ".", "ElementTree", "(", "rootElement", ")", ".", "write", "(", "out", ",", "\"utf-8\"", ")", "\n", "out", ".", "close", "(", ")", "\n", "# Fix newlines inside attributes", "\n", "encodeNewlines", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.encodeNewlines": [[251, 279], ["tempfile.mkdtemp", "os.path.join", "filename.endswith", "codecs.open.close", "codecs.open.close", "shutil.copy2", "shutil.rmtree", "os.path.basename", "codecs.open", "codecs.open", "content.replace.replace", "content.replace.replace", "content.replace.replace", "content.replace.replace", "content.replace.replace", "content.replace.replace", "codecs.open.write", "codecs.getreader", "gzip.GzipFile", "codecs.getwriter", "gzip.GzipFile"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "encodeNewlines", "(", "filename", ")", ":", "\n", "    ", "import", "tempfile", ",", "shutil", "\n", "# fix newlines", "\n", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tempfilepath", "=", "os", ".", "path", ".", "join", "(", "tempdir", ",", "os", ".", "path", ".", "basename", "(", "filename", ")", ")", "\n", "if", "filename", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "#inFile=GzipFile(filename,\"rt\")", "\n", "        ", "inFile", "=", "codecs", ".", "getreader", "(", "\"utf-8\"", ")", "(", "GzipFile", "(", "filename", ",", "\"rb\"", ")", ")", "\n", "out", "=", "codecs", ".", "getwriter", "(", "\"utf-8\"", ")", "(", "GzipFile", "(", "tempfilepath", ",", "\"wb\"", ")", ")", "\n", "", "else", ":", "\n", "#inFile=open(filename,\"rt\")", "\n", "        ", "inFile", "=", "codecs", ".", "open", "(", "filename", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "out", "=", "codecs", ".", "open", "(", "tempfilepath", ",", "\"wt\"", ",", "\"utf-8\"", ")", "\n", "\n", "", "for", "content", "in", "inFile", ":", "\n", "#content = inFile.read()", "\n", "#inFile.close()    ", "\n", "        ", "content", "=", "content", ".", "replace", "(", "\">\\n\"", ",", "\"TEMP_PROTECT_N\"", ")", "# newlines between elements", "\n", "content", "=", "content", ".", "replace", "(", "\">\\r\"", ",", "\"TEMP_PROTECT_R\"", ")", "# newlines between elements", "\n", "content", "=", "content", ".", "replace", "(", "\"\\n\"", ",", "\"&#10;\"", ")", "# newlines in attributes", "\n", "content", "=", "content", ".", "replace", "(", "\"\\r\"", ",", "\"&#10;\"", ")", "# newlines in attributes", "\n", "content", "=", "content", ".", "replace", "(", "\"TEMP_PROTECT_N\"", ",", "\">\\n\"", ")", "# newlines between elements", "\n", "content", "=", "content", ".", "replace", "(", "\"TEMP_PROTECT_R\"", ",", "\">\\r\"", ")", "# newlines between elements", "\n", "out", ".", "write", "(", "content", ")", "\n", "", "inFile", ".", "close", "(", ")", "\n", "out", ".", "close", "(", ")", "\n", "shutil", ".", "copy2", "(", "tempfilepath", ",", "filename", ")", "\n", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.makePath": [[305, 321], ["result.append", "ElementTree.SubElement"], "function", ["None"], ["", "def", "makePath", "(", "element", ",", "tagList", ")", ":", "\n", "#taglist is a list of tag names", "\n", "#a list of corresponding elements is returned", "\n", "#if these did not exist, they are created!", "\n", "#", "\n", "    ", "result", "=", "[", "]", "\n", "currElem", "=", "element", "\n", "for", "tag", "in", "tagList", ":", "\n", "        ", "for", "subElem", "in", "currElem", ":", "\n", "            ", "if", "subElem", ".", "tag", "==", "tag", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "subElem", "=", "ElementTree", ".", "SubElement", "(", "currElem", ",", "tag", ")", "\n", "", "result", ".", "append", "(", "subElem", ")", "\n", "currElem", "=", "subElem", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.toStr": [[322, 348], ["sorted", "element.getchildren", "element.attrib.keys", "ElementTreeUtils.toStr", "tag.split", "len", "len", "element.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.toStr", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "toStr", "(", "element", ",", "recursive", "=", "True", ",", "removePreTag", "=", "True", ")", ":", "\n", "    ", "tag", "=", "element", ".", "tag", "\n", "if", "removePreTag", ":", "\n", "        ", "tag", "=", "tag", ".", "split", "(", "\"}\"", ")", "[", "-", "1", "]", "\n", "", "s", "=", "\"<\"", "+", "tag", "\n", "for", "key", "in", "sorted", "(", "element", ".", "attrib", ".", "keys", "(", ")", ")", ":", "\n", "        ", "s", "+=", "\" \"", "+", "key", "+", "\"=\\\"\"", "+", "element", ".", "get", "(", "key", ")", "+", "\"\\\"\"", "\n", "# get content", "\n", "", "text", "=", "element", ".", "text", "\n", "children", "=", "element", ".", "getchildren", "(", ")", "\n", "if", "text", "!=", "None", "or", "len", "(", "children", ")", ">", "0", ":", "# if content, close opening", "\n", "        ", "s", "+=", "\">\"", "\n", "# write content", "\n", "", "if", "text", "!=", "None", ":", "\n", "        ", "s", "+=", "text", "\n", "", "for", "child", "in", "children", ":", "\n", "        ", "s", "+=", "toStr", "(", "child", ")", "\n", "", "if", "text", "!=", "None", "or", "len", "(", "children", ")", ">", "0", ":", "\n", "        ", "s", "+=", "\"</\"", "+", "tag", "+", "\">\"", "\n", "", "else", ":", "\n", "        ", "s", "+=", "\"/>\"", "\n", "\n", "", "if", "element", ".", "tail", "!=", "None", ":", "\n", "        ", "s", "+=", "element", ".", "tail", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.getElementByAttrib": [[349, 359], ["parent.getiterator", "attDict.iteritems", "element.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getElementByAttrib", "(", "parent", ",", "tag", ",", "attDict", ")", ":", "\n", "    ", "for", "element", "in", "parent", ".", "getiterator", "(", ")", ":", "\n", "        ", "if", "element", ".", "tag", "==", "tag", ":", "\n", "            ", "found", "=", "True", "\n", "for", "k", ",", "v", "in", "attDict", ".", "iteritems", "(", ")", ":", "\n", "                ", "if", "element", ".", "get", "(", "k", ")", "!=", "v", ":", "\n", "                    ", "found", "=", "False", "\n", "", "", "if", "found", ":", "\n", "                ", "return", "element", "\n", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.setDefaultElement": [[360, 366], ["parent.find", "ElementTree.Element", "parent.append"], "function", ["None"], ["", "def", "setDefaultElement", "(", "parent", ",", "name", ")", ":", "\n", "    ", "element", "=", "parent", ".", "find", "(", "name", ")", "\n", "if", "element", "==", "None", ":", "\n", "        ", "element", "=", "ElementTree", ".", "Element", "(", "name", ")", "\n", "parent", ".", "append", "(", "element", ")", "\n", "", "return", "element", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.__init__": [[4, 10], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "startCount", "=", "True", ")", ":", "\n", "        ", "if", "startCount", ":", "\n", "            ", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "startTime", "=", "None", "\n", "", "self", ".", "totalTime", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.stop": [[11, 15], ["time.time"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "startTime", "!=", "None", ")", "\n", "self", ".", "totalTime", "+=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "self", ".", "startTime", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.start": [[16, 20], ["time.time"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "startTime", "==", "None", ")", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "endTime", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.getElapsedTime": [[21, 28], ["time.time"], "methods", ["None"], ["", "def", "getElapsedTime", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "startTime", "!=", "None", ":", "\n", "            ", "now", "=", "time", ".", "time", "(", ")", "\n", "elapsedTime", "=", "now", "-", "self", ".", "startTime", "+", "self", ".", "totalTime", "\n", "", "else", ":", "\n", "            ", "elapsedTime", "=", "self", ".", "totalTime", "\n", "", "return", "elapsedTime", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.startTimeToString": [[29, 31], ["time.ctime"], "methods", ["None"], ["", "def", "startTimeToString", "(", "self", ")", ":", "\n", "        ", "return", "time", ".", "ctime", "(", "self", ".", "startTime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.elapsedTimeToString": [[32, 42], ["Timer.Timer.getElapsedTime", "int", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.getElapsedTime"], ["", "def", "elapsedTimeToString", "(", "self", ")", ":", "\n", "        ", "elapsedTime", "=", "self", ".", "getElapsedTime", "(", ")", "\n", "msecs", "=", "int", "(", "elapsedTime", "*", "1000", ")", "\n", "hours", "=", "msecs", "/", "(", "3600", "*", "1000", ")", "\n", "msecs", "=", "msecs", "%", "(", "3600", "*", "1000", ")", "\n", "mins", "=", "msecs", "/", "(", "60", "*", "1000", ")", "\n", "msecs", "=", "msecs", "%", "(", "60", "*", "1000", ")", "\n", "secs", "=", "msecs", "/", "(", "1000", ")", "\n", "msecs", "=", "msecs", "%", "(", "1000", ")", "\n", "return", "str", "(", "hours", ")", "+", "\":\"", "+", "str", "(", "mins", ")", "+", "\":\"", "+", "str", "(", "secs", ")", "+", "\":\"", "+", "str", "(", "msecs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.toString": [[43, 45], ["time.ctime", "time.time", "time.ctime", "Timer.Timer.elapsedTimeToString"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.elapsedTimeToString"], ["", "def", "toString", "(", "self", ")", ":", "\n", "        ", "return", "\"Time: \"", "+", "self", ".", "elapsedTimeToString", "(", ")", "+", "\" (start: \"", "+", "time", ".", "ctime", "(", "self", ".", "startTime", ")", "+", "\", now: \"", "+", "time", ".", "ctime", "(", "time", ".", "time", "(", ")", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.readResources": [[14, 23], ["os.path.join", "insertResources.readDocuments"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.readDocuments"], ["", "def", "readResources", "(", "extractPath", ")", ":", "\n", "    ", "specAnn", "=", "{", "}", "\n", "for", "subPath", "in", "(", "\"BB3/species-dictionary/\"", ",", "\"BB3/stanford-ner/\"", ",", "\"BB3/linnaeus/\"", ",", "\"BB3/sr4gn\"", ")", ":", "\n", "        ", "for", "dataSet", "in", "(", "\"dev\"", ",", "\"train\"", ",", "\"test\"", ")", ":", "\n", "            ", "for", "subtask", "in", "(", "\"BioNLP-ST-2016_BB-event\"", ",", "\"BioNLP-ST-2016_BB-event+ner\"", ")", ":", "\n", "                ", "sourcePath", "=", "os", ".", "path", ".", "join", "(", "extractPath", ",", "subPath", ",", "dataSet", ",", "subtask", "+", "\"_\"", "+", "dataSet", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Processing\"", ",", "sourcePath", "\n", "readDocuments", "(", "sourcePath", ",", "specAnn", ")", "\n", "", "", "", "return", "specAnn", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.readDocuments": [[24, 34], ["os.listdir", "filename.split", "os.path.join", "insertResources.buildElements", "filename.split"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.buildElements"], ["", "def", "readDocuments", "(", "inPath", ",", "specAnn", ")", ":", "\n", "    ", "for", "filename", "in", "os", ".", "listdir", "(", "inPath", ")", ":", "\n", "        ", "ext", "=", "filename", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", "if", "ext", "in", "(", "\"spec\"", ",", "\"sner\"", ",", "\"tags\"", ")", ":", "\n", "            ", "filePath", "=", "os", ".", "path", ".", "join", "(", "inPath", ",", "filename", ")", "\n", "docId", "=", "filename", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "#assert docId not in specAnn, docId", "\n", "if", "docId", "not", "in", "specAnn", ":", "\n", "                ", "specAnn", "[", "docId", "]", "=", "[", "]", "\n", "", "specAnn", "[", "docId", "]", "+=", "buildElements", "(", "filePath", ",", "ext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.insertElements": [[35, 70], ["corpus.iter", "document.get", "document.iter", "Utils.charOffsetToSingleTuple", "sentence.find", "ET.SubElement.find", "sentence.get", "ET.SubElement", "ET.SubElement", "span.get", "Utils.overlap", "specAnn[].remove", "span.get", "span.set", "ET.SubElement.append", "sentence.get", "str", "span.get", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "def", "insertElements", "(", "corpus", ",", "specAnn", ")", ":", "\n", "    ", "for", "document", "in", "corpus", ".", "iter", "(", "'document'", ")", ":", "\n", "        ", "docId", "=", "document", ".", "get", "(", "\"origId\"", ")", "\n", "assert", "docId", "in", "specAnn", ",", "docId", "\n", "for", "sentence", "in", "document", ".", "iter", "(", "'sentence'", ")", ":", "\n", "            ", "sentOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "sentence", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "analyses", "=", "sentence", ".", "find", "(", "\"analyses\"", ")", "\n", "if", "not", "analyses", ":", "\n", "                ", "analyses", "=", "ET", ".", "SubElement", "(", "sentence", ",", "\"analyses\"", ")", "\n", "#entitiesElement = sentence.find(\"entities\")", "\n", "# Find the container", "\n", "", "container", "=", "analyses", ".", "find", "(", "\"entities\"", ")", "#None", "\n", "#             for entitiesElement in entitiesElements:", "\n", "#                 if entitiesElement.get(\"source\") == \"SPECIES\":", "\n", "#                     container = entitiesElement", "\n", "#                     break", "\n", "if", "not", "container", ":", "\n", "                ", "container", "=", "ET", ".", "SubElement", "(", "analyses", ",", "\"entities\"", ")", "\n", "#container.set(\"source\", \"SPECIES\")", "\n", "# Map the spans", "\n", "", "for", "span", "in", "specAnn", "[", "docId", "]", "[", ":", "]", ":", "\n", "                ", "offset", "=", "span", ".", "get", "(", "\"offset\"", ")", "\n", "if", "Range", ".", "overlap", "(", "offset", ",", "sentOffset", ")", ":", "\n", "                    ", "if", "sentOffset", "[", "0", "]", ">", "offset", "[", "0", "]", "or", "sentOffset", "[", "1", "]", "<", "offset", "[", "1", "]", ":", "\n", "                        ", "continue", "\n", "", "specAnn", "[", "docId", "]", ".", "remove", "(", "span", ")", "\n", "charOffset", "=", "(", "offset", "[", "0", "]", "-", "sentOffset", "[", "0", "]", ",", "offset", "[", "1", "]", "-", "sentOffset", "[", "0", "]", ")", "\n", "matchingText", "=", "sentence", ".", "get", "(", "\"text\"", ")", "[", "charOffset", "[", "0", "]", ":", "charOffset", "[", "1", "]", "]", "\n", "spanText", "=", "span", ".", "get", "(", "\"text\"", ")", "\n", "#print matchingText, spanText", "\n", "assert", "matchingText", "==", "spanText", ",", "(", "matchingText", ",", "spanText", ",", "charOffset", ")", "\n", "span", ".", "set", "(", "\"charOffset\"", ",", "\"-\"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "charOffset", "]", ")", ")", "\n", "assert", "not", "\"--\"", "in", "span", ".", "get", "(", "\"charOffset\"", ")", ",", "[", "str", "(", "x", ")", "for", "x", "in", "charOffset", "]", "\n", "del", "span", ".", "attrib", "[", "\"offset\"", "]", "#span.set(\"offset\", \"\")", "\n", "container", ".", "append", "(", "span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.buildElements": [[71, 102], ["codecs.open", "codecs.open.readlines", "codecs.open.close", "line.startswith", "line.strip().split", "ET.Element", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "spans.append", "line.strip", "int", "offset.split", "identifier.split"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["", "", "", "", "", "def", "buildElements", "(", "filePath", ",", "sourceType", ")", ":", "\n", "    ", "f", "=", "codecs", ".", "open", "(", "filePath", ",", "\"rt\"", ",", "\"utf-8\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "spans", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "\"#\"", ")", ":", "\n", "            ", "continue", "\n", "", "splits", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "identifier", "=", "\"\"", "\n", "category", "=", "\"\"", "\n", "source", "=", "sourceType", "\n", "if", "sourceType", "==", "\"sner\"", ":", "\n", "            ", "text", ",", "offset", ",", "eType", "=", "splits", "\n", "", "elif", "sourceType", "==", "\"spec\"", ":", "\n", "            ", "text", ",", "offset", ",", "identifier", ",", "category", ",", "eType", "=", "splits", "\n", "", "elif", "sourceType", "==", "\"tags\"", ":", "\n", "            ", "identifier", ",", "documentId", ",", "start", ",", "end", ",", "text", ",", "comment", "=", "splits", "\n", "eType", "=", "identifier", ".", "split", "(", "\":\"", ")", "[", "0", "]", "\n", "offset", "=", "start", "+", "\" \"", "+", "end", "\n", "source", "=", "\"linnaeus\"", "\n", "", "span", "=", "ET", ".", "Element", "(", "'span'", ")", "\n", "span", ".", "set", "(", "\"text\"", ",", "text", ")", "\n", "span", ".", "set", "(", "\"offset\"", ",", "[", "int", "(", "x", ")", "for", "x", "in", "offset", ".", "split", "(", ")", "]", ")", "\n", "#span.set(\"charOffset\", \"-\".join(span.offset))", "\n", "span", ".", "set", "(", "\"identifier\"", ",", "identifier", ")", "\n", "span", ".", "set", "(", "\"category\"", ",", "category", ")", "\n", "span", ".", "set", "(", "\"type\"", ",", "eType", ")", "\n", "span", ".", "set", "(", "\"source\"", ",", "source", ")", "\n", "spans", ".", "append", "(", "span", ")", "\n", "", "return", "spans", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.download": [[103, 107], ["Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract"], "function", ["None"], ["", "def", "download", "(", "extractPath", ",", "downloadPath", ",", "redownload", "=", "False", ")", ":", "\n", "    ", "for", "tag", "in", "(", "\"SPECIES\"", ",", "\"STANFORD_NER\"", ",", "\"LINNAEUS\"", ",", "\"SR4GN\"", ")", ":", "\n", "        ", "Utils", ".", "Download", ".", "downloadAndExtract", "(", "Settings", ".", "URL", "[", "\"BB16_\"", "+", "tag", "+", "\"_TRAIN_AND_DEVEL\"", "]", ",", "extractPath", ",", "downloadPath", ",", "redownload", "=", "redownload", ")", "\n", "Utils", ".", "Download", ".", "downloadAndExtract", "(", "Settings", ".", "URL", "[", "\"BB16_\"", "+", "tag", "+", "\"_TEST\"", "]", ",", "extractPath", ",", "downloadPath", ",", "redownload", "=", "redownload", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process": [[108, 116], ["insertResources.download", "insertResources.readResources", "insertResources.insertElements", "input.getroot", "Utils.write", "input.getroot"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.readResources", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.insertElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "", "def", "process", "(", "input", ",", "output", "=", "None", ")", ":", "\n", "    ", "download", "(", "\"/tmp/extract\"", ",", "\"/tmp/download\"", ")", "\n", "specAnn", "=", "readResources", "(", "\"/tmp/extract\"", ")", "\n", "insertElements", "(", "input", ".", "getroot", "(", ")", ",", "specAnn", ")", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "input", ".", "getroot", "(", ")", ",", "output", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.test": [[117, 123], ["insertResources.download", "insertResources.readResources", "Utils.ETFromObj", "insertResources.insertElements", "Utils.write", "ETUtils.ETFromObj.getroot", "ETUtils.ETFromObj.getroot"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.readResources", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.insertElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "test", "(", "extractPath", ",", "downloadPath", ",", "inCorpusPath", ",", "outCorpusPath", ")", ":", "\n", "    ", "download", "(", "extractPath", ",", "downloadPath", ")", "\n", "specAnn", "=", "readResources", "(", "extractPath", ")", "\n", "inCorpus", "=", "ETUtils", ".", "ETFromObj", "(", "inCorpusPath", ")", "\n", "insertElements", "(", "inCorpus", ".", "getroot", "(", ")", ",", "specAnn", ")", "\n", "ETUtils", ".", "write", "(", "inCorpus", ".", "getroot", "(", ")", ",", "outCorpusPath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.downloadFiles": [[26, 57], ["os.path.join", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "range", "filter", "len", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "len", "os.path.join", "[].endswith", "[].count"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.filter"], ["def", "downloadFiles", "(", "downloadPath", "=", "None", ",", "extractDir", "=", "None", ",", "clear", "=", "False", ")", ":", "\n", "    ", "extracted", "=", "{", "}", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Downloading DDI'13 Shared Task files\"", ",", "\"---------------\"", "\n", "if", "downloadPath", "==", "None", ":", "\n", "        ", "downloadPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"corpora/download\"", ")", "\n", "", "for", "dataset", "in", "[", "\"DDI13_TRAIN\"", ",", "\n", "\"DDI13_TRAIN_TEES_PARSES\"", ",", "\n", "\"DDI13_TEST_TASK_9.1\"", ",", "\n", "\"DDI13_TEST_TASK_9.2\"", ",", "\n", "\"DDI13_TEST_TASK_9.1_TEES_PARSES\"", ",", "\n", "\"DDI13_TEST_TASK_9.2_TEES_PARSES\"", "]", ":", "\n", "        ", "if", "Settings", ".", "URL", "[", "dataset", "]", "!=", "None", ":", "\n", "            ", "downloaded", "=", "Utils", ".", "Download", ".", "download", "(", "Settings", ".", "URL", "[", "dataset", "]", ",", "downloadPath", ",", "clear", "=", "clear", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Extracting package\"", ",", "downloaded", "\n", "extracted", "[", "dataset", "]", "=", "Utils", ".", "Download", ".", "extractPackage", "(", "downloaded", ",", "extractDir", ")", "\n", "if", "dataset", "==", "\"DDI13_TRAIN\"", ":", "\n", "                ", "if", "len", "(", "extracted", "[", "dataset", "]", ")", "==", "1", ":", "\n", "                    ", "extracted", "[", "dataset", "]", "=", "extracted", "[", "dataset", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "extracted", "[", "dataset", "]", "=", "Utils", ".", "Download", ".", "getTopDir", "(", "extractDir", ",", "extracted", "[", "dataset", "]", ")", "\n", "", "", "else", ":", "\n", "# take top level directories", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "extracted", "[", "dataset", "]", ")", ")", ":", "\n", "                    ", "if", "\"/\"", "not", "in", "extracted", "[", "dataset", "]", "[", "i", "]", "or", "(", "extracted", "[", "dataset", "]", "[", "i", "]", ".", "endswith", "(", "\"/\"", ")", "and", "extracted", "[", "dataset", "]", "[", "i", "]", ".", "count", "(", "\"/\"", ")", "==", "1", ")", ":", "\n", "                        ", "extracted", "[", "dataset", "]", "[", "i", "]", "=", "os", ".", "path", ".", "join", "(", "extractDir", ",", "extracted", "[", "dataset", "]", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                        ", "extracted", "[", "dataset", "]", "[", "i", "]", "=", "None", "\n", "", "", "extracted", "[", "dataset", "]", "=", "filter", "(", "lambda", "a", ":", "a", "!=", "None", ",", "extracted", "[", "dataset", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "extracted", "[", "dataset", "]", "=", "None", "\n", "", "", "return", "extracted", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.getCorpusXML": [[58, 63], ["xml.ElementTree", "ET.ElementTree.getroot", "corpus.getroot.set", "xml.Element"], "function", ["None"], ["", "def", "getCorpusXML", "(", ")", ":", "\n", "    ", "corpus", "=", "ET", ".", "ElementTree", "(", "ET", ".", "Element", "(", "\"corpus\"", ")", ")", "\n", "corpusRoot", "=", "corpus", ".", "getroot", "(", ")", "\n", "corpusRoot", ".", "set", "(", "\"source\"", ",", "\"DDI13\"", ")", "\n", "return", "corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.divideSets": [[64, 76], ["xml.getiterator", "Core.Split.getFolds", "xml.getiterator", "doc.get", "doc.get", "doc.set", "doc.get", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "divideSets", "(", "xml", ",", "sourceSet", ",", "numFolds", ")", ":", "\n", "    ", "docCount", "=", "0", "\n", "for", "doc", "in", "xml", ".", "getiterator", "(", "\"document\"", ")", ":", "\n", "        ", "if", "doc", ".", "get", "(", "\"set\"", ")", "==", "sourceSet", ":", "\n", "            ", "docCount", "+=", "1", "\n", "\n", "", "", "division", "=", "Core", ".", "Split", ".", "getFolds", "(", "docCount", ",", "numFolds", ",", "0", ")", "\n", "count", "=", "0", "\n", "for", "doc", "in", "xml", ".", "getiterator", "(", "\"document\"", ")", ":", "\n", "        ", "if", "doc", ".", "get", "(", "\"set\"", ")", "==", "sourceSet", ":", "\n", "            ", "doc", ".", "set", "(", "\"set\"", ",", "doc", ".", "get", "(", "\"set\"", ")", "+", "str", "(", "division", "[", "count", "]", ")", ")", "\n", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.processElements": [[77, 88], ["xml.getiterator", "xml.getiterator", "entity.set", "Utils.charOffsetToTuples", "entity.set", "entity.get", "updatedCharOffsets.append", "Utils.tuplesToCharOffset"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToTuples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.tuplesToCharOffset"], ["", "", "", "def", "processElements", "(", "xml", ")", ":", "\n", "    ", "for", "ddi", "in", "xml", ".", "getiterator", "(", "\"ddi\"", ")", ":", "\n", "        ", "ddi", ".", "tag", "=", "\"interaction\"", "\n", "", "for", "entity", "in", "xml", ".", "getiterator", "(", "\"entity\"", ")", ":", "\n", "        ", "entity", ".", "set", "(", "\"given\"", ",", "\"True\"", ")", "\n", "# Reformat disjoint character offsets and update character range format for TEES 2.0+", "\n", "charOffsets", "=", "Range", ".", "charOffsetToTuples", "(", "entity", ".", "get", "(", "\"charOffset\"", ")", ",", "rangeSep", "=", "\";\"", ")", "\n", "updatedCharOffsets", "=", "[", "]", "\n", "for", "charOffset", "in", "charOffsets", ":", "\n", "            ", "updatedCharOffsets", ".", "append", "(", "(", "charOffset", "[", "0", "]", ",", "charOffset", "[", "1", "]", "+", "1", ")", ")", "\n", "", "entity", ".", "set", "(", "\"charOffset\"", ",", "Range", ".", "tuplesToCharOffset", "(", "updatedCharOffsets", ")", ")", "\n", "#entity.set(\"charOffset\", entity.get(\"charOffset\").replace(\";\", \",\"))", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.parseXML": [[90, 98], ["Detectors.Preprocessor.Preprocessor", "Detectors.Preprocessor.Preprocessor.setArgForAllSteps", "Detectors.Preprocessor.Preprocessor.process", "Detectors.Preprocessor.Preprocessor.stepArgs"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setArgForAllSteps", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.stepArgs"], ["", "", "def", "parseXML", "(", "xml", ",", "intermediateFileDir", ",", "debug", "=", "False", ")", ":", "\n", "    ", "preprocessor", "=", "Preprocessor", "(", ")", "\n", "preprocessor", ".", "setArgForAllSteps", "(", "\"debug\"", ",", "debug", ")", "\n", "preprocessor", ".", "stepArgs", "(", "\"PARSE\"", ")", "[", "\"requireEntities\"", "]", "=", "False", "\n", "#preprocessor.process(xml, intermediateFileDir, fromStep=\"SPLIT-SENTENCES\", toStep=\"FIND-HEADS\", omitSteps=[\"NER\"])", "\n", "#preprocessor.process(xml, intermediateFileDir, fromStep=\"PARSE\", toStep=\"FIND-HEADS\")", "\n", "# Entity name splitting is omitted as this data may be used for predicting entities", "\n", "preprocessor", ".", "process", "(", "xml", ",", "intermediateFileDir", ",", "omitSteps", "=", "[", "\"CONVERT\"", ",", "\"SPLIT-SENTENCES\"", ",", "\"NER\"", ",", "\"SPLIT-NAMES\"", ",", "\"DIVIDE-SETS\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.combineXML": [[99, 124], ["isinstance", "dataDir.startswith", "dataDir.startswith", "os.path.exists", "sorted", "os.listdir", "filename.endswith", "Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "os.path.join", "xml.getroot.set", "corpusXML.append", "os.path.join", "xml.getroot.get", "xml.getroot.get", "os.path.join", "os.path.join", "xml.getroot.set", "xml.getroot.get", "xml.getroot.get", "xml"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "combineXML", "(", "corpusXML", ",", "setName", ",", "dataDirs", ",", "subDirs", "=", "[", "\"DrugBank\"", ",", "\"MedLine\"", "]", ")", ":", "\n", "# Add all documents into one XML", "\n", "    ", "ids", "=", "{", "}", "\n", "if", "isinstance", "(", "dataDirs", ",", "basestring", ")", ":", "\n", "        ", "dataDirs", "=", "[", "]", "\n", "", "for", "dataDir", "in", "dataDirs", ":", "\n", "        ", "if", "dataDir", ".", "startswith", "(", "\".\"", ")", "or", "dataDir", ".", "startswith", "(", "\"_\"", ")", ":", "\n", "            ", "continue", "\n", "", "for", "subDir", "in", "[", "\"\"", "]", "+", "subDirs", ":", "\n", "            ", "inDir", "=", "dataDir", "+", "\"/\"", "+", "subDir", "\n", "if", "\"/.\"", "in", "dataDir", "or", "\"/_\"", "in", "dataDir", ":", "# attempt to survive the junk directories", "\n", "                ", "continue", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "inDir", ")", ":", "\n", "                ", "for", "filename", "in", "sorted", "(", "os", ".", "listdir", "(", "inDir", ")", ")", ":", "\n", "                    ", "if", "filename", ".", "endswith", "(", "\".xml\"", ")", ":", "\n", "                        ", "print", ">>", "sys", ".", "stderr", ",", "\"Reading\"", ",", "filename", "\n", "xml", "=", "ETUtils", ".", "ETFromObj", "(", "os", ".", "path", ".", "join", "(", "inDir", ",", "filename", ")", ")", "\n", "document", "=", "xml", ".", "getroot", "(", ")", "\n", "assert", "document", ".", "tag", "==", "\"document\"", "\n", "assert", "document", ".", "get", "(", "\"id\"", ")", "not", "in", "ids", ",", "(", "document", ".", "get", "(", "\"id\"", ")", ",", "os", ".", "path", ".", "join", "(", "inDir", ",", "filename", ")", ",", "ids", "[", "document", ".", "get", "(", "\"id\"", ")", "]", ")", "\n", "ids", "[", "document", ".", "get", "(", "\"id\"", ")", "]", "=", "os", ".", "path", ".", "join", "(", "inDir", ",", "filename", ")", "\n", "document", ".", "set", "(", "\"source\"", ",", "os", ".", "path", ".", "join", "(", "subDir", ",", "filename", ")", ")", "\n", "if", "setName", "!=", "None", ":", "\n", "                            ", "document", ".", "set", "(", "\"set\"", ",", "setName", ")", "\n", "", "corpusXML", ".", "append", "(", "document", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.convertDDI13": [[125, 181], ["os.getcwd", "os.chdir", "os.path.join", "Utils.openLog", "tempfile.mkdtemp", "convertDDI13.downloadFiles", "Utils.closeLog", "os.chdir", "os.path.exists", "os.makedirs", "convertDDI13.getCorpusXML", "getCorpusXML.getroot", "convertDDI13.combineXML", "convertDDI13.processElements", "Detectors.StructureAnalyzer.StructureAnalyzer", "Detectors.StructureAnalyzer.StructureAnalyzer.analyze", "Utils.write", "shutil.rmtree", "convertDDI13.divideSets", "corpusTree.getroot.getiterator", "convertDDI13.parseXML", "Detectors.StructureAnalyzer.StructureAnalyzer.toString", "os.path.join", "doc.set", "os.path.join", "Tools.BLLIPParser.insertParses", "Tools.BLLIPParser.insertParses", "Tools.BLLIPParser.insertParses", "Tools.StanfordParser.insertParses", "Tools.StanfordParser.insertParses", "Tools.StanfordParser.insertParses", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.openLog", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.downloadFiles", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.closeLog", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.getCorpusXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.combineXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.processElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertDDI13.divideSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.parseXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses"], ["", "", "", "", "", "", "def", "convertDDI13", "(", "outDir", ",", "downloadDir", "=", "None", ",", "datasets", "=", "[", "\"DDI13_TRAIN\"", ",", "\"DDI13_TEST_TASK_9.1\"", ",", "\"DDI13_TEST_TASK_9.2\"", "]", ",", "redownload", "=", "False", ",", "insertParses", "=", "True", ",", "parse", "=", "False", ",", "makeIntermediateFiles", "=", "True", ",", "debug", "=", "False", ")", ":", "\n", "    ", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outDir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outDir", ")", "\n", "", "os", ".", "chdir", "(", "outDir", ")", "\n", "logFileName", "=", "os", ".", "path", ".", "join", "(", "outDir", ",", "\"DDI13-conversion-log.txt\"", ")", "\n", "Stream", ".", "openLog", "(", "logFileName", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"=======================\"", ",", "\"Converting DDI'13 corpus\"", ",", "\"=======================\"", "\n", "\n", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "downloaded", "=", "downloadFiles", "(", "downloadDir", ",", "tempdir", ",", "redownload", ")", "\n", "\n", "for", "dataset", "in", "datasets", ":", "\n", "        ", "corpusTree", "=", "getCorpusXML", "(", ")", "\n", "xml", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Merging input XMLs\"", "\n", "assert", "downloaded", "[", "dataset", "]", "!=", "None", "\n", "combineXML", "(", "xml", ",", "\"train\"", ",", "downloaded", "[", "dataset", "]", ",", "subDirs", "=", "[", "\"DrugBank\"", ",", "\"MedLine\"", ",", "\"NER\"", "]", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Processing elements\"", "\n", "processElements", "(", "xml", ")", "\n", "\n", "if", "dataset", "==", "\"DDI13_TRAIN\"", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Dividing training set into folds\"", "\n", "divideSets", "(", "xml", ",", "\"train\"", ",", "10", ")", "\n", "", "else", ":", "\n", "            ", "for", "doc", "in", "xml", ".", "getiterator", "(", "\"document\"", ")", ":", "\n", "                ", "doc", ".", "set", "(", "\"set\"", ",", "\"test\"", ")", "\n", "\n", "", "", "if", "parse", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Parsing\"", "\n", "parseXML", "(", "corpusTree", ",", "os", ".", "path", ".", "join", "(", "tempdir", ",", "\"parsing\"", ")", ",", "debug", ")", "\n", "", "elif", "insertParses", ":", "\n", "            ", "assert", "parse", "==", "False", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting McCC parses\"", "\n", "Tools", ".", "BLLIPParser", ".", "insertParses", "(", "corpusTree", ",", "downloaded", "[", "dataset", "+", "\"_TEES_PARSES\"", "]", ",", "None", ",", "extraAttributes", "=", "{", "\"source\"", ":", "\"TEES\"", "}", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting Stanford conversions\"", "\n", "Tools", ".", "StanfordParser", ".", "insertParses", "(", "corpusTree", ",", "downloaded", "[", "dataset", "+", "\"_TEES_PARSES\"", "]", ",", "None", ",", "extraAttributes", "=", "{", "\"stanfordSource\"", ":", "\"TEES\"", "}", ")", "\n", "# Check what was produced by the conversion", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Corpus Structure Analysis\"", ",", "\"---------------\"", "\n", "analyzer", "=", "StructureAnalyzer", "(", ")", "\n", "analyzer", ".", "analyze", "(", "[", "xml", "]", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "analyzer", ".", "toString", "(", ")", "\n", "if", "\"9.1\"", "in", "dataset", ":", "\n", "            ", "outFileName", "=", "os", ".", "path", ".", "join", "(", "outDir", ",", "\"DDI13-test-task9.1.xml\"", ")", "\n", "", "elif", "\"9.2\"", "in", "dataset", ":", "\n", "            ", "outFileName", "=", "os", ".", "path", ".", "join", "(", "outDir", ",", "\"DDI13-test-task9.2.xml\"", ")", "\n", "", "else", ":", "\n", "            ", "outFileName", "=", "os", ".", "path", ".", "join", "(", "outDir", ",", "\"DDI13-train.xml\"", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "outFileName", "\n", "ETUtils", ".", "write", "(", "xml", ",", "outFileName", ")", "\n", "\n", "", "Stream", ".", "closeLog", "(", "logFileName", ")", "\n", "if", "not", "debug", "and", "tempdir", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Removing temporary directory\"", ",", "tempdir", "\n", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "", "os", ".", "chdir", "(", "cwd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.installPreconverted": [[31, 39], ["Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.setLocal", "os.path.join", "os.path.join"], "function", ["None"], ["def", "installPreconverted", "(", "url", "=", "\"BIONLP_CORPORA\"", ",", "destPath", "=", "None", ",", "downloadPath", "=", "None", ",", "redownload", "=", "False", ",", "updateLocalSettings", "=", "False", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Downloading preconverted corpora\"", ",", "\"---------------\"", "\n", "if", "destPath", "==", "None", ":", "\n", "        ", "destPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"corpora\"", ")", "\n", "", "if", "downloadPath", "==", "None", ":", "\n", "        ", "downloadPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"corpora/download\"", ")", "\n", "", "Utils", ".", "Download", ".", "downloadAndExtract", "(", "Settings", ".", "URL", "[", "url", "]", ",", "destPath", ",", "downloadPath", ",", "redownload", "=", "redownload", ")", "\n", "Settings", ".", "setLocal", "(", "\"CORPUS_DIR\"", ",", "destPath", ",", "updateLocalSettings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.installEvaluators": [[40, 49], ["Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.setLocal", "Utils.setLocal", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "installEvaluators", "(", "destPath", "=", "None", ",", "downloadPath", "=", "None", ",", "redownload", "=", "False", ",", "updateLocalSettings", "=", "False", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Downloading BioNLP Shared Task evaluators\"", ",", "\"---------------\"", "\n", "if", "destPath", "==", "None", ":", "\n", "        ", "destPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"tools/evaluators\"", ")", "\n", "", "if", "downloadPath", "==", "None", ":", "\n", "        ", "downloadPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"tools/download\"", ")", "\n", "", "Utils", ".", "Download", ".", "downloadAndExtract", "(", "Settings", ".", "URL", "[", "\"BIONLP11_EVALUATORS\"", "]", ",", "destPath", ",", "downloadPath", ",", "redownload", "=", "redownload", ")", "\n", "Settings", ".", "setLocal", "(", "\"BIONLP_EVALUATOR_DIR\"", ",", "destPath", ",", "updateLocalSettings", ")", "\n", "Settings", ".", "setLocal", "(", "\"BIONLP_EVALUATOR_GOLD_DIR\"", ",", "os", ".", "path", ".", "join", "(", "destPath", ",", "\"gold\"", ")", ",", "updateLocalSettings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.downloadCorpus": [[50, 91], ["os.path.join", "identifier.replace().replace", "os.path.join", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Exception", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "os.path.join", "os.path.join", "corpus.endswith", "identifier.replace", "corpus.endswith", "corpus.endswith", "corpus.endswith", "corpus.endswith", "corpus.replace().replace", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "Utils.Download.download", "corpus.replace"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download"], ["", "def", "downloadCorpus", "(", "corpus", ",", "destPath", "=", "None", ",", "downloadPath", "=", "None", ",", "clear", "=", "False", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Downloading BioNLP Shared Task files\"", ",", "\"---------------\"", "\n", "downloaded", "=", "{", "}", "\n", "if", "destPath", "==", "None", ":", "\n", "        ", "finalDestPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"corpora/BioNLP11-original\"", ")", "\n", "", "else", ":", "\n", "        ", "finalDestPath", "=", "destPath", "\n", "", "for", "setName", "in", "[", "\"_DEVEL\"", ",", "\"_TRAIN\"", ",", "\"_TEST\"", "]", ":", "\n", "        ", "identifier", "=", "corpus", "+", "setName", "\n", "parentIdentifier", "=", "identifier", ".", "replace", "(", "\"BB13T2\"", ",", "\"BB13\"", ")", ".", "replace", "(", "\"BB13T3\"", ",", "\"BB13\"", ")", "\n", "if", "setName", "in", "(", "\"_DEVEL\"", ",", "\"_TRAIN\"", ")", "and", "parentIdentifier", "not", "in", "Settings", ".", "URL", ":", "\n", "            ", "raise", "Exception", "(", "\"Settings key '\"", "+", "parentIdentifier", "+", "\"' not found\"", ")", "\n", "", "if", "parentIdentifier", "in", "Settings", ".", "URL", ":", "\n", "            ", "downloaded", "[", "identifier", "]", "=", "Utils", ".", "Download", ".", "download", "(", "Settings", ".", "URL", "[", "parentIdentifier", "]", ",", "downloadPath", ",", "clear", "=", "clear", ")", "\n", "", "", "if", "downloadPath", "==", "None", ":", "\n", "        ", "downloadPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"download\"", ")", "\n", "", "if", "corpus", "in", "[", "\"REL11\"", ",", "\"REN11\"", ",", "\"CO11\"", "]", ":", "\n", "        ", "if", "destPath", "==", "None", ":", "\n", "            ", "teesParseFinalDestPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"TEES-parses\"", ")", "\n", "", "else", ":", "\n", "            ", "teesParseFinalDestPath", "=", "os", ".", "path", ".", "join", "(", "destPath", ",", "\"TEES-parses\"", ")", "\n", "", "Utils", ".", "Download", ".", "downloadAndExtract", "(", "Settings", ".", "URL", "[", "\"TEES_PARSES\"", "]", ",", "teesParseFinalDestPath", ",", "downloadPath", ",", "redownload", "=", "clear", ")", "\n", "downloaded", "[", "\"TEES_PARSES\"", "]", "=", "teesParseFinalDestPath", "\n", "", "elif", "corpus", "==", "\"GE09\"", "or", "corpus", ".", "endswith", "(", "\"11\"", ")", ":", "\n", "        ", "if", "corpus", "==", "\"GE09\"", ":", "\n", "            ", "analyses", "=", "[", "\"_ANALYSES\"", "]", "\n", "", "else", ":", "\n", "            ", "analyses", "=", "[", "\"_TOKENS\"", ",", "\"_McCC\"", "]", "\n", "", "for", "analysis", "in", "analyses", ":", "\n", "            ", "for", "setName", "in", "[", "\"_DEVEL\"", ",", "\"_TRAIN\"", ",", "\"_TEST\"", "]", ":", "\n", "                ", "identifier", "=", "corpus", "+", "setName", "+", "analysis", "\n", "if", "identifier", "in", "Settings", ".", "URL", ":", "\n", "                    ", "downloaded", "[", "identifier", "]", "=", "Utils", ".", "Download", ".", "download", "(", "Settings", ".", "URL", "[", "identifier", "]", ",", "downloadPath", "+", "\"/support/\"", ",", "clear", "=", "clear", ")", "\n", "", "", "", "", "elif", "corpus", ".", "endswith", "(", "\"13\"", ")", "or", "corpus", ".", "endswith", "(", "\"13T2\"", ")", "or", "corpus", ".", "endswith", "(", "\"13T3\"", ")", ":", "\n", "        ", "for", "setName", "in", "[", "\"_DEVEL\"", ",", "\"_TRAIN\"", ",", "\"_TEST\"", "]", ":", "\n", "            ", "cTag", "=", "corpus", ".", "replace", "(", "\"13T2\"", ",", "\"13\"", ")", ".", "replace", "(", "\"13T3\"", ",", "\"13\"", ")", "\n", "downloaded", "[", "corpus", "+", "setName", "+", "\"_McCCJ\"", "]", "=", "Utils", ".", "Download", ".", "download", "(", "Settings", ".", "URL", "[", "cTag", "+", "setName", "+", "\"_McCCJ\"", "]", ",", "downloadPath", "+", "\"/support/\"", ",", "clear", "=", "clear", ")", "\n", "downloaded", "[", "corpus", "+", "setName", "+", "\"_TOK\"", "]", "=", "Utils", ".", "Download", ".", "download", "(", "Settings", ".", "URL", "[", "cTag", "+", "setName", "+", "\"_TOK\"", "]", ",", "downloadPath", "+", "\"/support/\"", ",", "clear", "=", "clear", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "corpus", ".", "endswith", "(", "\"16\"", ")", "\n", "", "return", "downloaded", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.convert": [[92, 119], ["os.path.normpath", "os.path.exists", "os.makedirs", "os.path.isdir", "Utils.openLog", "convertBioNLP.downloadCorpus", "convertBioNLP.convertDownloaded", "Utils.closeLog", "shutil.rmtree", "str", "len", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.openLog", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.downloadCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.convertDownloaded", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Stream.closeLog"], ["", "def", "convert", "(", "corpora", ",", "outDir", "=", "None", ",", "downloadDir", "=", "None", ",", "redownload", "=", "False", ",", "makeIntermediateFiles", "=", "True", ",", "evaluate", "=", "False", ",", "processEquiv", "=", "True", ",", "analysisMode", "=", "\"INSERT\"", ",", "debug", "=", "False", ")", ":", "\n", "    ", "global", "bioNLP13AnalysesTempDir", "\n", "\n", "if", "outDir", "==", "None", ":", "\n", "        ", "os", ".", "path", ".", "normpath", "(", "Settings", ".", "DATAPATH", "+", "\"/corpora\"", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "outDir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outDir", ")", "\n", "", "else", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "outDir", ")", "\n", "", "count", "=", "1", "\n", "for", "corpus", "in", "corpora", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"=======================\"", ",", "\"Converting BioNLP Shared Task\"", ",", "corpus", ",", "\"corpus (\"", "+", "str", "(", "count", ")", "+", "\"/\"", "+", "str", "(", "len", "(", "corpora", ")", ")", "+", "\")\"", ",", "\"=======================\"", "\n", "logFileName", "=", "outDir", "+", "\"/conversion/\"", "+", "corpus", "+", "\"-conversion-log.txt\"", "\n", "Stream", ".", "openLog", "(", "logFileName", ")", "\n", "downloaded", "=", "downloadCorpus", "(", "corpus", ",", "outDir", ",", "downloadDir", ",", "redownload", ")", "\n", "packageSubPath", "=", "None", "\n", "if", "corpus", "==", "\"BB13T2\"", ":", "\n", "            ", "packageSubPath", "=", "\"task_2\"", "\n", "", "elif", "corpus", "==", "\"BB13T3\"", ":", "\n", "            ", "packageSubPath", "=", "\"task_3\"", "\n", "", "convertDownloaded", "(", "outDir", ",", "corpus", ",", "downloaded", ",", "makeIntermediateFiles", ",", "evaluate", ",", "processEquiv", "=", "processEquiv", ",", "analysisMode", "=", "analysisMode", ",", "packageSubPath", "=", "packageSubPath", ",", "debug", "=", "debug", ")", "\n", "Stream", ".", "closeLog", "(", "logFileName", ")", "\n", "count", "+=", "1", "\n", "\n", "", "if", "bioNLP13AnalysesTempDir", "!=", "None", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "bioNLP13AnalysesTempDir", ")", "\n", "bioNLP13AnalysesTempDir", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.corpusRENtoASCII": [[120, 129], ["xml.getiterator", "document.get", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "document.set"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "corpusRENtoASCII", "(", "xml", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Converting REN11 corpus to ASCII\"", "\n", "for", "document", "in", "xml", ".", "getiterator", "(", "\"document\"", ")", ":", "\n", "        ", "text", "=", "document", ".", "get", "(", "\"text\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "u\"\\xc3\\xb6\"", ",", "u\"a\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "u\"\\xc3\\xa4\"", ",", "u\"a\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "u\"\\xc3\\xa9\"", ",", "u\"e\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"and Wikstram, M. (1991) Eur. J. Biochem. 197\"", ",", "\"and Wikstrom, M. (1991) Eur. J. Biochem. 197\"", ")", "\n", "document", ".", "set", "(", "\"text\"", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.checkAttributes": [[130, 134], ["xml.getiterator", "element.attrib.keys", "element.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "checkAttributes", "(", "xml", ")", ":", "\n", "    ", "for", "element", "in", "xml", ".", "getiterator", "(", ")", ":", "\n", "        ", "for", "key", "in", "element", ".", "attrib", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "element", ".", "get", "(", "key", ")", "!=", "None", ",", "(", "element", ".", "tag", ",", "key", ",", "element", ".", "attrib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.convertDownloaded": [[135, 233], ["os.path.join", "convertBioNLP.checkAttributes", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Utils.InteractionXML.DivideSets.processCorpus", "Detectors.StructureAnalyzer.StructureAnalyzer", "Detectors.StructureAnalyzer.StructureAnalyzer.analyze", "os.path.exists", "os.makedirs", "Utils.loadSet", "documents.extend", "open", "open.write", "open.close", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.STFormat.Equiv.process", "Utils.writeSet", "Utils.toInteractionXML", "Utils.toInteractionXML", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "Utils.InteractionXML.MixSets.mixSets", "convertBioNLP.corpusRENtoASCII", "convertBioNLP.insertAnalyses", "convertBioNLP.processParses", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.InteractionXML.DeleteElements.processCorpus", "Utils.write", "Utils.toSTFormat", "Evaluators.evaluate", "Detectors.StructureAnalyzer.StructureAnalyzer.toString", "shutil.rmtree", "datasets.append", "len", "len", "os.path.join", "os.path.join", "set", "Utils.write", "convertBioNLP.parseXML", "Utils.toSTFormat", "Evaluators.evaluate", "os.path.join", "setName.upper", "os.path.join", "setName.upper", "corpus.startswith"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.checkAttributes", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.corpusRENtoASCII", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.insertAnalyses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.processParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.parseXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat"], ["", "", "", "def", "convertDownloaded", "(", "outdir", ",", "corpus", ",", "files", ",", "intermediateFiles", "=", "True", ",", "evaluate", "=", "True", ",", "processEquiv", "=", "True", ",", "analysisMode", "=", "\"INSERT\"", ",", "packageSubPath", "=", "None", ",", "debug", "=", "False", ")", ":", "\n", "    ", "global", "moveBI", "\n", "if", "evaluate", ":", "\n", "        ", "workdir", "=", "outdir", "+", "\"/conversion/\"", "+", "corpus", "\n", "if", "os", ".", "path", ".", "exists", "(", "workdir", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "workdir", ")", "\n", "", "os", ".", "makedirs", "(", "workdir", ")", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Converting to XML\"", ",", "\"---------------\"", "\n", "# All datasets are processed as one XML, to ensure all the steps (parse modification etc.) are", "\n", "# applied equally", "\n", "#print corpus, files", "\n", "datasets", "=", "[", "]", "\n", "for", "setName", "in", "[", "\"devel\"", ",", "\"train\"", ",", "\"test\"", "]", ":", "\n", "        ", "if", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "in", "files", ":", "\n", "            ", "datasets", ".", "append", "(", "setName", ")", "\n", "", "", "bigfileName", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "corpus", "+", "\"-\"", "+", "\"-and-\"", ".", "join", "(", "datasets", ")", ")", "\n", "documents", "=", "[", "]", "\n", "for", "setName", "in", "datasets", ":", "\n", "        ", "sourceFile", "=", "files", "[", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "]", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Reading\"", ",", "setName", ",", "\"set from\"", ",", "sourceFile", "\n", "docs", "=", "ST", ".", "loadSet", "(", "sourceFile", ",", "setName", ",", "\"a2\"", ",", "subPath", "=", "packageSubPath", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Read\"", ",", "len", "(", "docs", ")", ",", "\"documents\"", "\n", "documents", ".", "extend", "(", "docs", ")", "\n", "\n", "", "if", "len", "(", "docs", ")", ">", "0", "and", "docs", "[", "0", "]", ".", "license", "!=", "None", ":", "\n", "        ", "licenseFile", "=", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "corpus", "+", "\"-LICENSE\"", ")", ",", "\"wt\"", ")", "\n", "licenseFile", ".", "write", "(", "docs", "[", "0", "]", ".", "license", ")", "\n", "licenseFile", ".", "close", "(", ")", "\n", "\n", "", "if", "processEquiv", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Resolving equivalences\"", "\n", "Utils", ".", "STFormat", ".", "Equiv", ".", "process", "(", "documents", ")", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Skipping resolving of equivalences\"", "\n", "\n", "", "if", "evaluate", ":", "\n", "#print >> sys.stderr, \"Checking data validity\"", "\n", "#for doc in documents:", "\n", "#    Utils.STFormat.Validate.validate(doc.events, simulation=True, verbose=True, docId=doc.id)", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing all documents to geniaformat\"", "\n", "ST", ".", "writeSet", "(", "documents", ",", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"all-geniaformat\"", ")", ",", "resultFileTag", "=", "\"a2\"", ",", "debug", "=", "False", ")", "\n", "\n", "", "if", "intermediateFiles", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Converting to XML, writing combined corpus to\"", ",", "bigfileName", "+", "\"-documents.xml\"", "\n", "xml", "=", "STConvert", ".", "toInteractionXML", "(", "documents", ",", "corpus", ",", "bigfileName", "+", "\"-documents.xml\"", ")", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Converting to XML\"", "\n", "xml", "=", "STConvert", ".", "toInteractionXML", "(", "documents", ",", "corpus", ",", "None", ")", "\n", "\n", "", "if", "corpus", "==", "\"BI11\"", ":", "\n", "        ", "Utils", ".", "InteractionXML", ".", "MixSets", ".", "mixSets", "(", "xml", ",", "None", ",", "set", "(", "moveBI", ")", ",", "\"train\"", ",", "\"devel\"", ")", "\n", "", "if", "corpus", "==", "\"REN11\"", ":", "\n", "        ", "corpusRENtoASCII", "(", "xml", ")", "\n", "\n", "", "if", "analysisMode", "==", "\"INSERT\"", ":", "\n", "        ", "insertAnalyses", "(", "xml", ",", "corpus", ",", "datasets", ",", "files", ",", "bigfileName", ",", "packageSubPath", "=", "packageSubPath", ")", "\n", "if", "intermediateFiles", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing combined corpus\"", ",", "bigfileName", "+", "\"-sentences.xml\"", "\n", "ETUtils", ".", "write", "(", "xml", ",", "bigfileName", "+", "\"-sentences.xml\"", ")", "\n", "", "processParses", "(", "xml", ")", "\n", "", "elif", "analysisMode", "==", "\"BUILD\"", ":", "\n", "        ", "parseXML", "(", "xml", ",", "bigfileName", ",", "intermediateFiles", ",", "debug", ",", "bbResources", "=", "(", "corpus", ".", "startswith", "(", "\"BB_\"", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Skipping analyses\"", "\n", "\n", "# A hack for GRN13 task that breaks the official BioNLP Shared Task convention of trigger and event having the same type.", "\n", "# Let's remove the unused triggers, so that there won't be an unusable node class. There is no clean way to fix this,", "\n", "# as the GRN13 task not following the official rules introduces yet another mechanism into the Shared Task format,", "\n", "# and supporting this would require rewriting everything.", "\n", "", "if", "corpus", "==", "\"GRN13\"", ":", "\n", "        ", "Utils", ".", "InteractionXML", ".", "DeleteElements", ".", "processCorpus", "(", "xml", ",", "None", ",", "{", "\"entity\"", ":", "{", "\"type\"", ":", "[", "\"Action\"", "]", "}", "}", ")", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Writing corpora\"", ",", "\"---------------\"", "\n", "checkAttributes", "(", "xml", ")", "\n", "# Write out converted data", "\n", "if", "intermediateFiles", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing combined corpus\"", ",", "bigfileName", "+", "\".xml\"", "\n", "ETUtils", ".", "write", "(", "xml", ",", "bigfileName", "+", "\".xml\"", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Dividing into sets\"", "\n", "Utils", ".", "InteractionXML", ".", "DivideSets", ".", "processCorpus", "(", "xml", ",", "outdir", ",", "corpus", ",", "\".xml\"", ")", "\n", "\n", "if", "evaluate", "and", "\"devel\"", "in", "datasets", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Evaluating conversion\"", ",", "\"---------------\"", "\n", "if", "corpus", "!=", "\"REL11\"", ":", "# Task 1 (removal of Entity-entities) cannot work for REL", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Evaluating task 1 back-conversion\"", "\n", "STConvert", ".", "toSTFormat", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "corpus", "+", "\"-devel.xml\"", ")", ",", "workdir", "+", "\"/roundtrip/\"", "+", "corpus", "+", "\"-devel\"", "+", "\"-task1\"", ",", "outputTag", "=", "\"a2\"", ",", "skipArgs", "=", "[", "\"Site\"", "]", ")", "\n", "BioNLP11GeniaTools", ".", "evaluate", "(", "workdir", "+", "\"/roundtrip/\"", "+", "corpus", "+", "\"-devel\"", "+", "\"-task1\"", ",", "corpus", "+", "\".1\"", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Evaluating task 2 back-conversion\"", "\n", "STConvert", ".", "toSTFormat", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "corpus", "+", "\"-devel.xml\"", ")", ",", "workdir", "+", "\"/roundtrip/\"", "+", "corpus", "+", "\"-devel\"", "+", "\"-task2\"", ",", "outputTag", "=", "\"a2\"", ")", "\n", "BioNLP11GeniaTools", ".", "evaluate", "(", "workdir", "+", "\"/roundtrip/\"", "+", "corpus", "+", "\"-devel\"", "+", "\"-task2\"", ",", "corpus", "+", "\".2\"", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Note! Evaluation of Task 2 back-conversion can be less than 100% due to site-argument mapping\"", "\n", "\n", "# Check what was produced by the conversion", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Corpus Structure Analysis\"", ",", "\"---------------\"", "\n", "analyzer", "=", "StructureAnalyzer", "(", ")", "\n", "analyzer", ".", "analyze", "(", "[", "xml", "]", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "analyzer", ".", "toString", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.insertAnalyses": [[234, 303], ["Tools.SentenceSplitter.makeSentences", "Tools.SentenceSplitter.makeSentences", "Tools.SentenceSplitter.makeSentences", "Tools.BLLIPParser.insertParses", "Tools.BLLIPParser.insertParses", "Tools.BLLIPParser.insertParses", "Tools.StanfordParser.insertParses", "Tools.StanfordParser.insertParses", "Tools.StanfordParser.insertParses", "range", "corpus.endswith", "len", "tempfile.mkdtemp", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Utils.Download.getTopDir", "Tools.SentenceSplitter.makeSentences", "Tools.SentenceSplitter.makeSentences", "Tools.SentenceSplitter.makeSentences", "Tools.BLLIPParser.insertParses", "Tools.BLLIPParser.insertParses", "Tools.BLLIPParser.insertParses", "Tools.StanfordParser.insertParses", "Tools.StanfordParser.insertParses", "Tools.StanfordParser.insertParses", "shutil.rmtree", "range", "range", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "len", "tempfile.mkdtemp", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Tools.SentenceSplitter.makeSentences", "Tools.SentenceSplitter.makeSentences", "Tools.SentenceSplitter.makeSentences", "Tools.BLLIPParser.insertParses", "Tools.BLLIPParser.insertParses", "Tools.BLLIPParser.insertParses", "Tools.StanfordParser.insertParses", "Tools.StanfordParser.insertParses", "Tools.StanfordParser.insertParses", "shutil.rmtree", "len", "tempfile.mkdtemp", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "Utils.Download.extractPackage", "corpus.endswith", "corpus.endswith", "Tools.SentenceSplitter.makeSentences", "Tools.SentenceSplitter.makeSentences", "Tools.SentenceSplitter.makeSentences", "Tools.BLLIPParser.insertParses", "Tools.BLLIPParser.insertParses", "Tools.BLLIPParser.insertParses", "Tools.StanfordParser.insertParses", "Tools.StanfordParser.insertParses", "Tools.StanfordParser.insertParses", "shutil.rmtree", "str", "setName.upper", "len", "str", "str", "str", "len", "len", "str", "[].split", "[].split", "[].split", "str", "os.path.basename().rsplit", "os.path.basename().rsplit", "os.path.basename().rsplit", "setName.upper", "setName.upper", "setName.upper", "setName.upper", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "len", "len", "len", "setName.upper", "setName.upper", "setName.upper", "setName.upper", "setName.upper", "setName.upper"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.insertParses"], ["", "def", "insertAnalyses", "(", "xml", ",", "corpus", ",", "datasets", ",", "files", ",", "bigfileName", ",", "packageSubPath", "=", "None", ")", ":", "\n", "    ", "global", "bioNLP13AnalysesTempDir", "\n", "\n", "if", "packageSubPath", "!=", "None", ":", "\n", "        ", "packageSubPath", "=", "\"/\"", "+", "packageSubPath", "\n", "", "else", ":", "\n", "        ", "packageSubPath", "=", "\"\"", "\n", "", "if", "\"TEES_PARSES\"", "in", "files", ":", "# corpus for which no official parse exists", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Inserting TEES-generated analyses\"", ",", "\"---------------\"", "\n", "extractedFilename", "=", "files", "[", "\"TEES_PARSES\"", "]", "+", "\"/\"", "+", "corpus", "#[:-2]", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Making sentences\"", "\n", "Tools", ".", "SentenceSplitter", ".", "makeSentences", "(", "xml", ",", "extractedFilename", ",", "None", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting McCC parses\"", "\n", "Tools", ".", "BLLIPParser", ".", "insertParses", "(", "xml", ",", "extractedFilename", ",", "None", ",", "extraAttributes", "=", "{", "\"source\"", ":", "\"TEES-preparsed\"", "}", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting Stanford conversions\"", "\n", "Tools", ".", "StanfordParser", ".", "insertParses", "(", "xml", ",", "extractedFilename", ",", "None", ",", "extraAttributes", "=", "{", "\"stanfordSource\"", ":", "\"TEES-preparsed\"", "}", ")", "\n", "", "elif", "corpus", "==", "\"GE09\"", ":", "# the BioNLP'09 corpus", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "datasets", ")", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Inserting analyses \"", "+", "str", "(", "i", "+", "1", ")", "+", "\"/\"", "+", "str", "(", "len", "(", "datasets", ")", ")", ",", "\"---------------\"", "\n", "setName", "=", "datasets", "[", "i", "]", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting\"", ",", "setName", ",", "\"analyses\"", "\n", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "analysesSetName", "=", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "+", "\"_ANALYSES\"", "\n", "packagePath", "=", "Utils", ".", "Download", ".", "getTopDir", "(", "tempdir", ",", "Utils", ".", "Download", ".", "extractPackage", "(", "files", "[", "analysesSetName", "]", ",", "tempdir", ")", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Making sentences\"", "\n", "Tools", ".", "SentenceSplitter", ".", "makeSentences", "(", "xml", ",", "packagePath", "+", "\"/tokenized\"", ",", "None", ",", "escDict", "=", "Tools", ".", "BLLIPParser", ".", "escDict", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting McCC parses\"", "\n", "Tools", ".", "BLLIPParser", ".", "insertParses", "(", "xml", ",", "packagePath", "+", "\"/McClosky-Charniak/pstree\"", ",", "None", ",", "extraAttributes", "=", "{", "\"source\"", ":", "\"BioNLP'09\"", "}", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting Stanford conversions\"", "\n", "Tools", ".", "StanfordParser", ".", "insertParses", "(", "xml", ",", "packagePath", "+", "\"/McClosky-Charniak/dep\"", ",", "None", ",", "skipExtra", "=", "1", ",", "extraAttributes", "=", "{", "\"stanfordSource\"", ":", "\"BioNLP'09\"", "}", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Removing temporary directory\"", ",", "tempdir", "\n", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "", "", "elif", "corpus", ".", "endswith", "(", "\"11\"", ")", ":", "# use official BioNLP'11 parses", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "datasets", ")", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Inserting analyses \"", "+", "str", "(", "i", "+", "1", ")", "+", "\"/\"", "+", "str", "(", "len", "(", "datasets", ")", ")", ",", "\"---------------\"", "\n", "setName", "=", "datasets", "[", "i", "]", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting\"", ",", "setName", ",", "\"analyses\"", "\n", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "Utils", ".", "Download", ".", "extractPackage", "(", "files", "[", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "+", "\"_TOKENS\"", "]", ",", "tempdir", ")", "\n", "Utils", ".", "Download", ".", "extractPackage", "(", "files", "[", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "+", "\"_McCC\"", "]", ",", "tempdir", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Making sentences\"", "\n", "Tools", ".", "SentenceSplitter", ".", "makeSentences", "(", "xml", ",", "tempdir", "+", "\"/\"", "+", "os", ".", "path", ".", "basename", "(", "files", "[", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "+", "\"_TOKENS\"", "]", ")", "[", ":", "-", "len", "(", "\".tar.gz\"", ")", "]", ".", "split", "(", "\"-\"", ",", "1", ")", "[", "-", "1", "]", "+", "\"/tokenised\"", ",", "None", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting McCC parses\"", "\n", "Tools", ".", "BLLIPParser", ".", "insertParses", "(", "xml", ",", "tempdir", "+", "\"/\"", "+", "os", ".", "path", ".", "basename", "(", "files", "[", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "+", "\"_McCC\"", "]", ")", "[", ":", "-", "len", "(", "\".tar.gz\"", ")", "]", ".", "split", "(", "\"-\"", ",", "2", ")", "[", "-", "1", "]", "+", "\"/mccc/ptb\"", ",", "None", ",", "extraAttributes", "=", "{", "\"source\"", ":", "\"BioNLP'11\"", "}", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting Stanford conversions\"", "\n", "Tools", ".", "StanfordParser", ".", "insertParses", "(", "xml", ",", "tempdir", "+", "\"/\"", "+", "os", ".", "path", ".", "basename", "(", "files", "[", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "+", "\"_McCC\"", "]", ")", "[", ":", "-", "len", "(", "\".tar.gz\"", ")", "]", ".", "split", "(", "\"-\"", ",", "2", ")", "[", "-", "1", "]", "+", "\"/mccc/sd_ccproc\"", ",", "None", ",", "extraAttributes", "=", "{", "\"stanfordSource\"", ":", "\"BioNLP'11\"", "}", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Removing temporary directory\"", ",", "tempdir", "\n", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "", "", "else", ":", "# use official BioNLP'13 parses", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "datasets", ")", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Inserting analyses \"", "+", "str", "(", "i", "+", "1", ")", "+", "\"/\"", "+", "str", "(", "len", "(", "datasets", ")", ")", ",", "\"---------------\"", "\n", "setName", "=", "datasets", "[", "i", "]", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting\"", ",", "setName", ",", "\"analyses\"", "\n", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "Utils", ".", "Download", ".", "extractPackage", "(", "files", "[", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "+", "\"_TOK\"", "]", ",", "tempdir", "+", "\"/tok\"", ")", "\n", "Utils", ".", "Download", ".", "extractPackage", "(", "files", "[", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "+", "\"_McCCJ\"", "]", ",", "tempdir", "+", "\"/parse\"", ")", "\n", "subPath", "=", "\"\"", "\n", "if", "corpus", ".", "endswith", "(", "\"T2\"", ")", ":", "\n", "                ", "subPath", "=", "\"/task_2\"", "\n", "", "if", "corpus", ".", "endswith", "(", "\"T3\"", ")", ":", "\n", "                ", "subPath", "=", "\"/task_3\"", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Making sentences\"", "\n", "Tools", ".", "SentenceSplitter", ".", "makeSentences", "(", "xml", ",", "tempdir", "+", "\"/tok/\"", "+", "os", ".", "path", ".", "basename", "(", "files", "[", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "+", "\"_TOK\"", "]", ")", ".", "rsplit", "(", "\"_\"", ",", "2", ")", "[", "0", "]", "+", "subPath", ",", "None", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting McCC parses\"", "\n", "Tools", ".", "BLLIPParser", ".", "insertParses", "(", "xml", ",", "tempdir", "+", "\"/parse/\"", "+", "os", ".", "path", ".", "basename", "(", "files", "[", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "+", "\"_McCCJ\"", "]", ")", ".", "rsplit", "(", "\"_\"", ",", "2", ")", "[", "0", "]", "+", "subPath", ",", "None", ",", "extraAttributes", "=", "{", "\"source\"", ":", "\"BioNLP'13\"", "}", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Inserting Stanford conversions\"", "\n", "Tools", ".", "StanfordParser", ".", "insertParses", "(", "xml", ",", "tempdir", "+", "\"/parse/\"", "+", "os", ".", "path", ".", "basename", "(", "files", "[", "corpus", "+", "\"_\"", "+", "setName", ".", "upper", "(", ")", "+", "\"_McCCJ\"", "]", ")", ".", "rsplit", "(", "\"_\"", ",", "2", ")", "[", "0", "]", "+", "subPath", ",", "None", ",", "extraAttributes", "=", "{", "\"stanfordSource\"", ":", "\"BioNLP'13\"", "}", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Removing temporary directory\"", ",", "tempdir", "\n", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.processParses": [[304, 311], ["Utils.mainFunc", "Utils.findHeads"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ProteinNameSplitter.mainFunc", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.FindHeads.findHeads"], ["", "", "", "def", "processParses", "(", "xml", ",", "splitTarget", "=", "\"McCC\"", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Protein Name Splitting\"", ",", "\"---------------\"", "\n", "#ProteinNameSplitter.mainFunc(xml, None, splitTarget, splitTarget, \"split-\"+splitTarget, \"split-\"+splitTarget)", "\n", "ProteinNameSplitter", ".", "mainFunc", "(", "xml", ",", "None", ",", "splitTarget", ",", "removeOld", "=", "True", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Head Detection\"", ",", "\"---------------\"", "\n", "#xml = FindHeads.findHeads(xml, \"split-\"+splitTarget, tokenization=None, output=None, removeExisting=True)", "\n", "xml", "=", "FindHeads", ".", "findHeads", "(", "xml", ",", "splitTarget", ",", "tokenization", "=", "None", ",", "output", "=", "None", ",", "removeExisting", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.convertBioNLP.parseXML": [[312, 321], ["Detectors.Preprocessor.Preprocessor", "Detectors.Preprocessor.Preprocessor.setArgForAllSteps", "Detectors.Preprocessor.Preprocessor.process", "Detectors.Preprocessor.Preprocessor.insertStep", "Detectors.Preprocessor.Preprocessor.stepArgs", "Detectors.Preprocessor.Preprocessor.setNoIntermediateFiles"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setArgForAllSteps", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Convert.insertResources.process", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.insertStep", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.stepArgs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.setNoIntermediateFiles"], ["", "def", "parseXML", "(", "xml", ",", "outStem", ",", "intermediateFiles", "=", "True", ",", "debug", "=", "False", ",", "bbResources", "=", "False", ")", ":", "\n", "    ", "preprocessor", "=", "Preprocessor", "(", ")", "\n", "if", "bbResources", ":", "\n", "        ", "preprocessor", ".", "insertStep", "(", "5", ",", "\"BB_RESOURCES\"", ",", "insertResources", ".", "process", ",", "{", "}", ",", "\"bb-resources.xml\"", ")", "\n", "", "preprocessor", ".", "setArgForAllSteps", "(", "\"debug\"", ",", "debug", ")", "\n", "preprocessor", ".", "stepArgs", "(", "\"PARSE\"", ")", "[", "\"requireEntities\"", "]", "=", "False", "\n", "if", "not", "intermediateFiles", ":", "\n", "        ", "preprocessor", ".", "setNoIntermediateFiles", "(", ")", "\n", "", "preprocessor", ".", "process", "(", "xml", ",", "outStem", ",", "omitSteps", "=", "[", "\"NER\"", ",", "\"DIVIDE-SETS\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.__init__": [[15, 50], ["int", "int", "int", "os.setpgrp"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "account", "=", "None", ",", "workdir", "=", "None", ",", "settings", "=", "None", ",", "memory", "=", "None", ",", "cores", "=", "None", ",", "jobLimit", "=", "None", ",", "killGroup", "=", "True", ",", "preamble", "=", "None", ",", "debug", "=", "False", ")", ":", "\n", "        ", "self", ".", "account", "=", "account", "\n", "if", "memory", "==", "None", ":", "\n", "            ", "memory", "=", "4194304", "\n", "", "self", ".", "memory", "=", "int", "(", "memory", ")", "\n", "if", "cores", "==", "None", ":", "\n", "            ", "cores", "=", "1", "\n", "", "self", ".", "cores", "=", "int", "(", "cores", ")", "\n", "#self.machineName = account.split(\"@\")[-1]", "\n", "self", ".", "workDir", "=", "workdir", "\n", "self", ".", "preamble", "=", "preamble", "\n", "#self._workDirBase = workDirBase", "\n", "#self.setWorkDir(\"\", False)", "\n", "# State constants", "\n", "self", ".", "NOT_EXIST", "=", "\"NOT_EXIST\"", "\n", "self", ".", "NONZERO", "=", "\"NONZERO\"", "\n", "self", ".", "ZERO", "=", "\"ZERO\"", "\n", "\n", "# Batch command queue", "\n", "self", ".", "commands", "=", "[", "]", "\n", "\n", "self", ".", "compression", "=", "False", "#True", "\n", "self", ".", "remoteSettingsPath", "=", "settings", "\n", "self", ".", "cachedRemoteSettings", "=", "None", "\n", "self", ".", "_logs", "=", "{", "}", "\n", "if", "jobLimit", "==", "None", ":", "\n", "            ", "jobLimit", "=", "-", "1", "\n", "", "self", ".", "jobLimit", "=", "int", "(", "jobLimit", ")", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "resubmitOnlyFinished", "=", "True", "\n", "\n", "# Make sure local processes are killed on exit", "\n", "if", "self", ".", "account", "==", "None", "and", "killGroup", ":", "# and not UnixConnection.programGroupSet:", "\n", "#UnixConnection.programGroupSet = True", "\n", "            ", "os", ".", "setpgrp", "(", ")", "# All child processes from subprocess should be in this group", "\n", "#            atexit.register(os.killpg, 0, signal.SIGKILL)", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.clearWorkDir": [[54, 62], ["UnixConnection.UnixConnection.getRemotePath", "UnixConnection.UnixConnection.run"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run"], ["", "", "def", "clearWorkDir", "(", "self", ",", "subDir", "=", "\"\"", ")", ":", "\n", "        ", "if", "self", ".", "account", "==", "None", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Local connection, remote directory not removed\"", "\n", "return", "\n", "", "workSubDir", "=", "self", ".", "getRemotePath", "(", "subDir", ")", "\n", "assert", "workSubDir", "!=", "self", ".", "workDir", ",", "(", "self", ".", "workDir", ",", "subDir", ")", "# prevent removal of the whole remote work directory", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Removing remote directory\"", ",", "workSubDir", "\n", "self", ".", "run", "(", "\"rm -R \"", "+", "workSubDir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.isLocal": [[63, 65], ["None"], "methods", ["None"], ["", "def", "isLocal", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "account", "==", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath": [[66, 72], ["os.path.normpath", "os.path.abspath", "os.path.normpath.split"], "methods", ["None"], ["", "def", "getRemotePath", "(", "self", ",", "path", ",", "addAccount", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "workDir", "!=", "None", ":", "# a working directory has been set", "\n", "            ", "path", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "workDir", "+", "\"/\"", "+", "os", ".", "path", ".", "abspath", "(", "path", ".", "split", "(", "\":\"", ")", "[", "-", "1", "]", ")", ")", "\n", "", "if", "addAccount", "and", "self", ".", "account", "!=", "None", ":", "# this connection refers to a remote machine", "\n", "            ", "path", "=", "self", ".", "account", "+", "\":\"", "+", "path", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getLocalPath": [[73, 79], ["os.path.abspath", "os.path.normpath.startswith", "os.path.normpath", "path.split", "len"], "methods", ["None"], ["", "def", "getLocalPath", "(", "self", ",", "path", ")", ":", "\n", "        ", "localPath", "=", "os", ".", "path", ".", "abspath", "(", "path", ".", "split", "(", "\":\"", ")", "[", "-", "1", "]", ")", "\n", "if", "self", ".", "workDir", "!=", "None", "and", "localPath", ".", "startswith", "(", "self", ".", "workDir", ")", ":", "# remote work directory path", "\n", "            ", "localPath", "=", "os", ".", "path", ".", "normpath", "(", "\"/\"", "+", "localPath", "[", "len", "(", "self", ".", "workDir", ")", ":", "]", ")", "\n", "#assert not localPath.startswith(self.workDir), (path, localPath) # check for duplicates", "\n", "", "return", "localPath", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getSetting": [[80, 120], ["hasattr", "Exception", "getattr", "tempfile.mkdtemp", "UnixConnection.UnixConnection.scp", "open", "open.readlines", "open.close", "shutil.rmtree", "UnixConnection.UnixConnection.run", "hasattr", "str", "line.split", "remoteName.strip.strip.strip", "remoteValue.strip().strip.strip().strip.strip().strip", "getattr", "remoteValue.strip().strip.strip().strip.strip"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.scp", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run"], ["", "def", "getSetting", "(", "self", ",", "name", ",", "mustExist", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "account", "==", "None", ":", "\n", "            ", "if", "mustExist", "and", "not", "(", "hasattr", "(", "Settings", ",", "name", ")", "and", "getattr", "(", "Settings", ",", "name", ")", "!=", "None", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"Undefined local setting \"", "+", "str", "(", "name", ")", ")", "\n", "#assert hasattr(Settings, name), name", "\n", "", "if", "hasattr", "(", "Settings", ",", "name", ")", ":", "\n", "                ", "return", "getattr", "(", "Settings", ",", "name", ")", "\n", "", "else", ":", "\n", "                ", "return", "None", "\n", "", "", "elif", "self", ".", "cachedRemoteSettings", "==", "None", ":", "\n", "            ", "self", ".", "cachedRemoteSettings", "=", "{", "}", "\n", "# Determine location of remote TEES_SETTINGS", "\n", "if", "self", ".", "remoteSettingsPath", "==", "None", ":", "# not yet known, so look for environment variable", "\n", "                ", "rsp", "=", "self", ".", "run", "(", "\"echo $TEES_SETTINGS\"", ")", "\n", "", "else", ":", "# download from defined location", "\n", "                ", "assert", "self", ".", "remoteSettingsPath", "!=", "None", "\n", "rsp", "=", "self", ".", "remoteSettingsPath", "\n", "# Download settings to local computer", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Reading remote TEES_SETTINGS from\"", ",", "self", ".", "account", "+", "\":\"", "+", "rsp", "\n", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "scp", "(", "self", ".", "account", "+", "\":\"", "+", "rsp", ",", "tempdir", "+", "\"/RemoteSettings.py\"", ")", "\n", "# Read remote settings as a text file (limited to simple variables)", "\n", "# I guess it could also be evaluated as Python, but it may contain code", "\n", "# dependent on the remote environment.", "\n", "f", "=", "open", "(", "tempdir", "+", "\"/RemoteSettings.py\"", ",", "\"rt\"", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "\"=\"", "in", "line", ":", "\n", "                    ", "remoteName", ",", "remoteValue", "=", "line", ".", "split", "(", "\"=\"", ",", "1", ")", "\n", "remoteName", "=", "remoteName", ".", "strip", "(", ")", "\n", "remoteValue", "=", "remoteValue", ".", "strip", "(", ")", ".", "strip", "(", "\"\\\"\"", ")", "\n", "self", ".", "cachedRemoteSettings", "[", "remoteName", "]", "=", "remoteValue", "\n", "", "", "f", ".", "close", "(", ")", "\n", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "# Return the remote value", "\n", "", "if", "mustExist", ":", "\n", "            ", "assert", "name", "in", "self", ".", "cachedRemoteSettings", ",", "(", "name", ",", "self", ".", "cachedRemoteSettings", ")", "\n", "", "if", "name", "in", "self", ".", "cachedRemoteSettings", ":", "\n", "            ", "return", "self", ".", "cachedRemoteSettings", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists": [[134, 140], ["UnixConnection.UnixConnection.run", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run"], ["", "", "def", "exists", "(", "self", ",", "filename", ")", ":", "\n", "        ", "stdout", "=", "self", ".", "run", "(", "\"ls -lh \"", "+", "filename", ",", "silent", "=", "True", ")", "\n", "if", "len", "(", "stdout", ")", ">", "0", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.mkdir": [[141, 147], ["UnixConnection.UnixConnection.run", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run"], ["", "", "def", "mkdir", "(", "self", ",", "dir", ")", ":", "\n", "        ", "stdout", "=", "self", ".", "run", "(", "\"mkdir -p \"", "+", "dir", ")", "\n", "if", "len", "(", "stdout", ")", ">", "0", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getFileStatus": [[148, 166], ["UnixConnection.UnixConnection.getRemotePath", "UnixConnection.UnixConnection.run", "os.path.exists", "int", "int", "os.path.getsize"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "", "def", "getFileStatus", "(", "self", ",", "filename", ")", ":", "\n", "        ", "filePath", "=", "self", ".", "getRemotePath", "(", "filename", ")", "\n", "if", "self", ".", "account", "==", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "filePath", ")", ":", "\n", "                ", "return", "self", ".", "NOT_EXIST", "\n", "", "elif", "os", ".", "path", ".", "getsize", "(", "filePath", ")", "==", "0", ":", "\n", "                ", "return", "self", ".", "ZERO", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "NONZERO", "\n", "", "", "else", ":", "\n", "            ", "lines", "=", "self", ".", "run", "(", "\"filetest -e \"", "+", "filePath", "+", "\"; filetest -z \"", "+", "filePath", ")", "\n", "#assert len(lines) == 2", "\n", "if", "int", "(", "lines", "[", "0", "]", ")", "==", "0", ":", "\n", "                ", "return", "self", ".", "NOT_EXIST", "\n", "", "if", "int", "(", "lines", "[", "1", "]", ")", "==", "1", ":", "\n", "                ", "return", "self", ".", "ZERO", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "NONZERO", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.scp": [[167, 193], ["os.path.normpath", "shutil.copy2", "subprocess.call", "par1.split", "par2.split", "os.path.dirname", "os.path.exists", "os.makedirs", "UnixConnection.UnixConnection.mkdir", "par1.split", "par2.split", "os.path.dirname", "os.path.exists", "os.makedirs", "par2.split", "par1.split", "par2.split", "os.path.dirname", "os.path.dirname", "par2.split"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.mkdir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "", "", "def", "scp", "(", "self", ",", "par1", ",", "par2", ",", "verbose", "=", "\"transfer\"", ")", ":", "\n", "        ", "\"\"\"\n        General scp command, par1 and par2 must be full paths, including machine name\n        \"\"\"", "\n", "account1", "=", "None", "\n", "if", "\":\"", "in", "par1", ":", "\n", "            ", "account1", "=", "par1", ".", "split", "(", "\":\"", ")", "[", "0", "]", "\n", "", "account2", "=", "None", "\n", "if", "\":\"", "in", "par2", ":", "\n", "            ", "account2", "=", "par2", ".", "split", "(", "\":\"", ")", "[", "0", "]", "\n", "", "if", "account1", "==", "None", "and", "account2", "==", "None", ":", "\n", "# local copy", "\n", "            ", "dirPath", "=", "os", ".", "path", ".", "normpath", "(", "os", ".", "path", ".", "dirname", "(", "par2", ".", "split", "(", "\":\"", ")", "[", "-", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirPath", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dirPath", ")", "\n", "", "if", "verbose", "!=", "None", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "verbose", "+", "\"(local copy):\"", ",", "par1", ".", "split", "(", "\":\"", ")", "[", "-", "1", "]", ",", "par2", ".", "split", "(", "\":\"", ")", "[", "-", "1", "]", "\n", "", "shutil", ".", "copy2", "(", "par1", ".", "split", "(", "\":\"", ")", "[", "-", "1", "]", ",", "par2", ".", "split", "(", "\":\"", ")", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "# remote copy", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "verbose", "+", "\": scp \"", "+", "par1", "+", "\" \"", "+", "par2", "\n", "if", "\":\"", "in", "par2", ":", "\n", "                ", "self", ".", "mkdir", "(", "os", ".", "path", ".", "dirname", "(", "par2", ".", "split", "(", "\":\"", ")", "[", "-", "1", "]", ")", ")", "\n", "", "elif", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "par2", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "par2", ")", ")", "\n", "", "subprocess", ".", "call", "(", "\"scp \"", "+", "par1", "+", "\" \"", "+", "par2", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.upload": [[194, 222], ["UnixConnection.UnixConnection.getRemotePath", "UnixConnection.UnixConnection.mkdir", "UnixConnection.UnixConnection.scp", "UnixConnection.UnixConnection.exists", "UnixConnection.UnixConnection.endswith", "subprocess.call", "os.path.dirname", "UnixConnection.UnixConnection.endswith", "UnixConnection.UnixConnection.run", "UnixConnection.UnixConnection.endswith", "UnixConnection.UnixConnection.exists", "UnixConnection.UnixConnection.rsplit", "src.endswith", "UnixConnection.UnixConnection.rsplit"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.mkdir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.scp", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "", "def", "upload", "(", "self", ",", "src", ",", "dst", "=", "None", ",", "replace", "=", "True", ",", "compress", "=", "False", ",", "uncompress", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Mirror a file from \"SRC\" to \"ACCOUNT:WORKDIR/DST\"\n        \"\"\"", "\n", "assert", "\":\"", "not", "in", "src", "# must be a local file", "\n", "if", "self", ".", "account", "==", "None", ":", "# local connection...", "\n", "            ", "return", "src", "# ...no upload required", "\n", "", "if", "dst", "==", "None", ":", "# default upload location", "\n", "            ", "dst", "=", "src", "\n", "", "dst", "=", "self", ".", "getRemotePath", "(", "dst", ")", "\n", "\n", "if", "replace", "==", "False", "and", "(", "self", ".", "exists", "(", "dst", ")", "or", "(", "uncompress", "and", "dst", ".", "endswith", "(", "\".gz\"", ")", "and", "self", ".", "exists", "(", "dst", "[", ":", "-", "3", "]", ")", ")", ")", ":", "\n", "            ", "if", "uncompress", "and", "dst", ".", "endswith", "(", "\".gz\"", ")", ":", "# has been uncompressed already", "\n", "                ", "dst", "=", "dst", ".", "rsplit", "(", "\".\"", ",", "1", ")", "[", "0", "]", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Existing remote file\"", ",", "dst", ",", "\"not overwritten\"", "\n", "return", "dst", "\n", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "compression", "or", "compress", ")", "and", "not", "src", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Compressing \"", "+", "src", "+", "\": \"", ",", "\n", "subprocess", ".", "call", "(", "\"gzip -fv < \"", "+", "src", "+", "\" > \"", "+", "src", "+", "\".gz\"", ",", "shell", "=", "True", ")", "\n", "src", "+=", "\".gz\"", "\n", "dst", "+=", "\".gz\"", "\n", "", "self", ".", "mkdir", "(", "os", ".", "path", ".", "dirname", "(", "dst", ")", ")", "\n", "self", ".", "scp", "(", "src", ",", "self", ".", "account", "+", "\":\"", "+", "dst", ",", "verbose", "=", "\"upload\"", ")", "\n", "if", "(", "self", ".", "compression", "or", "uncompress", ")", "and", "dst", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "                ", "self", ".", "run", "(", "\"gunzip -fv \"", "+", "dst", ")", "\n", "dst", "=", "dst", ".", "rsplit", "(", "\".\"", ",", "1", ")", "[", "0", "]", "\n", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.download": [[223, 254], ["UnixConnection.UnixConnection.split", "UnixConnection.UnixConnection.getRemotePath", "UnixConnection.UnixConnection.getLocalPath", "os.path.exists", "UnixConnection.UnixConnection.scp", "UnixConnection.UnixConnection.run", "UnixConnection.UnixConnection.endswith", "subprocess.call", "UnixConnection.UnixConnection.endswith", "UnixConnection.UnixConnection.rsplit"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getLocalPath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.scp", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run"], ["", "", "def", "download", "(", "self", ",", "src", ",", "dst", "=", "None", ",", "replace", "=", "True", ",", "compress", "=", "False", ",", "uncompress", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Mirror a file from \"ACCOUNT:WORKDIR/SRC\" to \"DST\"\n        \"\"\"", "\n", "# Determine src path", "\n", "if", "\":\"", "in", "src", ":", "# src is a full pathname, with a machine name", "\n", "            ", "srcAccount", ",", "src", "=", "src", ".", "split", "(", "\":\"", ")", "\n", "assert", "self", ".", "account", "==", "srcAccount", "# check that the accoutn corresponds to this connection", "\n", "", "else", ":", "# src is a remote path relative to remote workdir", "\n", "            ", "src", "=", "self", ".", "getRemotePath", "(", "src", ")", "\n", "# Determine dst path", "\n", "", "if", "dst", "==", "None", ":", "# default download location", "\n", "            ", "dst", "=", "src", "\n", "dst", "=", "self", ".", "getLocalPath", "(", "dst", ")", "\n", "", "assert", "\":\"", "not", "in", "dst", "# must be a local file", "\n", "if", "self", ".", "account", "==", "None", ":", "# local connection ... ", "\n", "            ", "return", "dst", "# ... no download required", "\n", "\n", "", "if", "replace", "==", "False", "and", "os", ".", "path", ".", "exists", "(", "dst", ")", ":", "\n", "            ", "return", "dst", "# already downloaded", "\n", "", "else", ":", "# download", "\n", "            ", "if", "(", "self", ".", "compression", "or", "compress", ")", "and", "not", "src", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Compressing \"", "+", "src", "+", "\": \"", ",", "\n", "self", ".", "run", "(", "\"gzip < \"", "+", "self", ".", "workDir", "+", "\"/\"", "+", "src", "+", "\" > \"", "+", "self", ".", "workDir", "+", "\"/\"", "+", "src", "+", "\".gz\"", ")", "\n", "src", "=", "src", "+", "\".gz\"", "\n", "dst", "=", "dst", "+", "\".gz\"", "\n", "", "self", ".", "scp", "(", "self", ".", "account", "+", "\":\"", "+", "src", ",", "dst", ",", "verbose", "=", "\"download\"", ")", "\n", "if", "(", "self", ".", "compression", "or", "uncompress", ")", "and", "dst", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "                ", "subprocess", ".", "call", "(", "\"gunzip -f \"", "+", "dst", ",", "shell", "=", "True", ")", "\n", "dst", "=", "dst", ".", "rsplit", "(", "\".\"", ",", "1", ")", "[", "0", "]", "\n", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run": [[255, 271], ["subprocess.Popen.stdout.readlines", "subprocess.Popen", "subprocess.Popen", "subprocess.Popen.stderr.readlines"], "methods", ["None"], ["", "", "def", "run", "(", "self", ",", "script", ",", "chdirTo", "=", "None", ",", "silent", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Immediately run a command.\n        \"\"\"", "\n", "if", "chdirTo", "!=", "None", ":", "\n", "            ", "script", "=", "\"cd \"", "+", "chdirTo", "+", "\" ; \"", "+", "script", "\n", "", "stderr", "=", "None", "\n", "if", "silent", ":", "\n", "            ", "stderr", "=", "subprocess", ".", "PIPE", "\n", "", "if", "self", ".", "account", "==", "None", ":", "# a local process", "\n", "            ", "p", "=", "subprocess", ".", "Popen", "(", "script", ",", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "stderr", ")", "\n", "", "else", ":", "\n", "            ", "p", "=", "subprocess", ".", "Popen", "(", "\"ssh \"", "+", "self", ".", "account", "+", "\" '\"", "+", "script", "+", "\"'\"", ",", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "stderr", ")", "\n", "", "if", "silent", ":", "\n", "            ", "p", ".", "stderr", ".", "readlines", "(", ")", "\n", "", "return", "p", ".", "stdout", ".", "readlines", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getScript": [[272, 277], ["joinString.join"], "methods", ["None"], ["", "def", "_getScript", "(", "self", ",", "script", "=", "None", ",", "joinString", "=", "\" ; \"", ")", ":", "\n", "        ", "if", "script", "==", "None", ":", "# use command buffer", "\n", "            ", "script", "=", "joinString", ".", "join", "(", "self", ".", "commands", ")", "\n", "self", ".", "commands", "=", "[", "]", "\n", "", "return", "script", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.addCommand": [[278, 280], ["UnixConnection.UnixConnection.commands.append"], "methods", ["None"], ["", "def", "addCommand", "(", "self", ",", "string", ")", ":", "\n", "        ", "self", ".", "commands", ".", "append", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.clearCommands": [[281, 283], ["None"], "methods", ["None"], ["", "def", "clearCommands", "(", "self", ")", ":", "\n", "        ", "self", ".", "commands", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getJob": [[284, 286], ["UnixConnection.UnixConnection._getJobPath"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getJobPath"], ["", "def", "getJob", "(", "self", ",", "jobDir", ",", "jobName", ")", ":", "\n", "        ", "return", "self", ".", "_getJobPath", "(", "jobDir", ",", "jobName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getJobPath": [[287, 289], ["None"], "methods", ["None"], ["", "def", "_getJobPath", "(", "self", ",", "jobDir", ",", "jobName", ")", ":", "\n", "        ", "return", "jobDir", "+", "\"/\"", "+", "jobName", "+", "\".job\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._writeJobFile": [[290, 310], ["UnixConnection.UnixConnection.getRemotePath", "sorted", "subprocess.Popen.communicate", "UnixConnection.UnixConnection._getJobPath", "UnixConnection.UnixConnection._getJobPath", "attrDict.keys", "os.path.exists", "UnixConnection.UnixConnection.mkdir", "subprocess.Popen", "subprocess.Popen", "UnixConnection.UnixConnection.getRemotePath", "UnixConnection.UnixConnection.getRemotePath", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getJobPath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getJobPath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.mkdir", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath"], ["", "def", "_writeJobFile", "(", "self", ",", "jobDir", ",", "jobName", ",", "attrDict", "=", "{", "}", ",", "append", "=", "False", ")", ":", "\n", "        ", "jobPath", "=", "self", ".", "getRemotePath", "(", "self", ".", "_getJobPath", "(", "jobDir", ",", "jobName", ")", ")", "\n", "jobFileText", "=", "\"\"", "\n", "if", "not", "append", ":", "\n", "            ", "jobFileText", "+=", "\"name=\"", "+", "jobName", "+", "\"\\n\"", "\n", "assert", "not", "\"name\"", "in", "attrDict", "\n", "", "for", "key", "in", "sorted", "(", "attrDict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "jobFileText", "+=", "str", "(", "key", ")", "+", "\"=\"", "+", "str", "(", "attrDict", "[", "key", "]", ")", "+", "\"\\n\"", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "getRemotePath", "(", "jobDir", ")", ")", ":", "\n", "            ", "self", ".", "mkdir", "(", "self", ".", "getRemotePath", "(", "jobDir", ")", ")", "\n", "", "if", "append", ":", "\n", "            ", "operator", "=", "\">>\"", "\n", "", "else", ":", "\n", "            ", "operator", "=", "\">\"", "\n", "", "if", "self", ".", "account", "==", "None", ":", "# a local process", "\n", "            ", "jobPopen", "=", "subprocess", ".", "Popen", "(", "\"cat \"", "+", "operator", "+", "\" \"", "+", "jobPath", ",", "shell", "=", "True", ",", "stdin", "=", "subprocess", ".", "PIPE", ")", "\n", "", "else", ":", "\n", "            ", "jobPopen", "=", "subprocess", ".", "Popen", "(", "\"ssh \"", "+", "self", ".", "account", "+", "\" '\"", "+", "\"cat \"", "+", "operator", "+", "\" \"", "+", "jobPath", "+", "\"'\"", ",", "shell", "=", "True", ",", "stdin", "=", "subprocess", ".", "PIPE", ")", "\n", "", "jobPopen", ".", "communicate", "(", "input", "=", "jobFileText", ")", "\n", "return", "self", ".", "_getJobPath", "(", "jobDir", ",", "jobName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._readJobFile": [[311, 328], ["UnixConnection.UnixConnection.getRemotePath", "UnixConnection.UnixConnection.run", "UnixConnection.UnixConnection.exists", "line.strip().split", "line.strip"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["", "def", "_readJobFile", "(", "self", ",", "job", ")", ":", "\n", "        ", "jobPath", "=", "self", ".", "getRemotePath", "(", "job", ")", "\n", "if", "not", "self", ".", "exists", "(", "jobPath", ")", ":", "\n", "            ", "if", "self", ".", "debug", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Job status file\"", ",", "jobPath", ",", "\"does not exist\"", "\n", "", "return", "None", "\n", "", "jobLines", "=", "self", ".", "run", "(", "\"cat \"", "+", "jobPath", ")", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Job status file\"", ",", "jobPath", ",", "\"=\"", ",", "jobLines", "\n", "#localJobFile = open(self.download(job), \"rt\")", "\n", "", "attrDict", "=", "{", "}", "\n", "for", "line", "in", "jobLines", ":", "#localJobFile:", "\n", "            ", "key", ",", "value", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"=\"", ",", "1", ")", "\n", "assert", "key", "not", "in", "attrDict", ",", "(", "key", ",", "value", ",", "attrDict", ",", "jobLines", ")", "\n", "attrDict", "[", "key", "]", "=", "value", "\n", "#localJobFile.close()", "\n", "", "return", "attrDict", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.submit": [[329, 369], ["UnixConnection.UnixConnection._getScript", "UnixConnection.UnixConnection.makeJobScript", "UnixConnection.UnixConnection.getJobStatus", "UnixConnection.UnixConnection._writeJobFile", "UnixConnection.UnixConnection._writeJobFile", "UnixConnection.UnixConnection.waitForJobCount", "type", "open", "type", "open", "UnixConnection.UnixConnection._getJobPath", "subprocess.Popen", "subprocess.Popen", "time.time"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getScript", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.makeJobScript", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.getJobStatus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._writeJobFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._writeJobFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.waitForJobCount", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getJobPath"], ["", "def", "submit", "(", "self", ",", "script", "=", "None", ",", "jobDir", "=", "None", ",", "jobName", "=", "None", ",", "stdout", "=", "None", ",", "stderr", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Queue a command.\n        \"\"\"", "\n", "if", "self", ".", "jobLimit", "!=", "-", "1", ":", "\n", "            ", "self", ".", "waitForJobCount", "(", "self", ".", "jobLimit", ")", "\n", "", "script", "=", "self", ".", "_getScript", "(", "script", ")", "\n", "logFiles", "=", "[", "None", ",", "None", "]", "\n", "if", "type", "(", "stdout", ")", "in", "types", ".", "StringTypes", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Job\"", ",", "jobName", "+", "\"'s stdout at local file\"", ",", "stdout", "\n", "logFiles", "[", "0", "]", "=", "stdout", "=", "open", "(", "stdout", ",", "\"wt\"", ")", "\n", "", "if", "type", "(", "stderr", ")", "in", "types", ".", "StringTypes", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Job\"", ",", "jobName", "+", "\"'s stderr at local file\"", ",", "stderr", "\n", "logFiles", "[", "1", "]", "=", "stderr", "=", "open", "(", "stderr", ",", "\"wt\"", ")", "\n", "", "script", "=", "self", ".", "makeJobScript", "(", "script", ",", "jobDir", ",", "jobName", ")", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"------- Job script -------\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "script", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"--------------------------\"", "\n", "", "prevStatus", "=", "self", ".", "getJobStatus", "(", "self", ".", "_getJobPath", "(", "jobDir", ",", "jobName", ")", ")", "\n", "if", "self", ".", "resubmitOnlyFinished", "and", "prevStatus", "==", "\"RUNNING\"", ":", "\n", "            ", "assert", "False", ",", "prevStatus", "\n", "# The job status file must be open before the job is submitted, so that the return code can be", "\n", "# written to it.", "\n", "", "self", ".", "_writeJobFile", "(", "jobDir", ",", "jobName", ")", "\n", "# Submit the job", "\n", "if", "self", ".", "account", "==", "None", ":", "# a local process", "\n", "            ", "jobPopen", "=", "subprocess", ".", "Popen", "(", "script", ",", "shell", "=", "True", ",", "stdout", "=", "stdout", ",", "stderr", "=", "stderr", ")", "\n", "", "else", ":", "\n", "            ", "jobPopen", "=", "subprocess", ".", "Popen", "(", "\"ssh \"", "+", "self", ".", "account", "+", "\" '\"", "+", "script", "+", "\"'\"", ",", "shell", "=", "True", ",", "stdout", "=", "stdout", ",", "stderr", "=", "stderr", ")", "\n", "# The 'time' attribute marks a time after the program has started. When checking for the PID,", "\n", "# only those programs whose STIME < 'time' are considered.", "\n", "", "jobArgs", "=", "{", "\"PID\"", ":", "jobPopen", ".", "pid", ",", "\"time\"", ":", "time", ".", "time", "(", ")", "+", "10", "}", "\n", "job", "=", "self", ".", "_writeJobFile", "(", "jobDir", ",", "jobName", ",", "jobArgs", ",", "append", "=", "True", ")", "\n", "# Keep track of log files so they can be closed", "\n", "if", "logFiles", "!=", "[", "None", ",", "None", "]", ":", "\n", "            ", "assert", "job", "not", "in", "self", ".", "_logs", "\n", "self", ".", "_logs", "[", "job", "]", "=", "logFiles", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Submitted job\"", ",", "jobArgs", "[", "\"PID\"", "]", ",", "jobArgs", "[", "\"time\"", "]", "\n", "return", "job", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.makeJobScript": [[370, 378], ["UnixConnection.UnixConnection.getRemotePath", "UnixConnection.UnixConnection._getJobPath"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getJobPath"], ["", "def", "makeJobScript", "(", "self", ",", "commands", ",", "jobDir", "=", "None", ",", "jobName", "=", "None", ")", ":", "\n", "        ", "script", "=", "\"\"", "\n", "if", "self", ".", "preamble", "!=", "None", ":", "\n", "            ", "script", "+=", "self", ".", "preamble", "+", "\";\"", "\n", "", "if", "jobDir", "!=", "None", ":", "\n", "            ", "script", "+=", "\"cd \"", "+", "jobDir", "+", "\"; \"", "+", "commands", "\n", "", "script", "+=", "\"; echo retcode=$? >> \"", "+", "self", ".", "getRemotePath", "(", "self", ".", "_getJobPath", "(", "jobDir", ",", "jobName", ")", ")", "# store return value", "\n", "return", "script", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._closeLogs": [[379, 386], ["[].close", "[].close"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["", "def", "_closeLogs", "(", "self", ",", "job", ")", ":", "\n", "        ", "if", "job", "in", "self", ".", "_logs", ":", "\n", "            ", "if", "self", ".", "_logs", "[", "job", "]", "[", "0", "]", "!=", "None", ":", "\n", "                ", "self", ".", "_logs", "[", "job", "]", "[", "0", "]", ".", "close", "(", ")", "\n", "", "if", "self", ".", "_logs", "[", "job", "]", "[", "1", "]", "!=", "None", ":", "\n", "                ", "self", ".", "_logs", "[", "job", "]", "[", "1", "]", ".", "close", "(", ")", "\n", "", "del", "self", ".", "_logs", "[", "job", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getUserName": [[387, 392], ["getpass.getuser", "UnixConnection.UnixConnection.account.split"], "methods", ["None"], ["", "", "def", "getUserName", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "account", "!=", "None", ":", "\n", "            ", "return", "self", ".", "account", ".", "split", "(", "\"@\"", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "getpass", ".", "getuser", "(", ")", "#os.getlogin()", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getNumJobs": [[393, 402], ["UnixConnection.UnixConnection.run", "str", "os.getpgrp", "line.strip", "UnixConnection.UnixConnection.getUserName"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getUserName"], ["", "", "def", "getNumJobs", "(", "self", ",", "includeQueued", "=", "True", ")", ":", "\n", "#stdoutLines = self.run(\"ps -u \" + self.getUserName())", "\n", "        ", "stdoutLines", "=", "self", ".", "run", "(", "\"ps -u \"", "+", "self", ".", "getUserName", "(", ")", "+", "\" -o ppid\"", ")", "\n", "groupId", "=", "str", "(", "os", ".", "getpgrp", "(", ")", ")", "\n", "numProcesses", "=", "0", "\n", "for", "line", "in", "stdoutLines", ":", "\n", "            ", "if", "line", ".", "strip", "(", ")", "==", "groupId", ":", "\n", "                ", "numProcesses", "+=", "1", "\n", "", "", "return", "numProcesses", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.waitForJobCount": [[403, 426], ["UnixConnection.UnixConnection.getNumJobs", "Utils.Timer.Timer", "Utils.Timer.Timer", "Utils.Timer.Timer", "Utils.Timer.Timer", "UnixConnection.UnixConnection.getNumJobs", "Utils.Timer.Timer.getElapsedTime", "Utils.Timer.Timer.getElapsedTime", "time.sleep", "Utils.Timer.Timer.elapsedTimeToString", "Utils.Timer.Timer.elapsedTimeToString", "int", "str", "Utils.Timer.Timer.elapsedTimeToString", "Utils.Timer.Timer.elapsedTimeToString", "str", "Utils.Timer.Timer.getElapsedTime", "Utils.Timer.Timer.getElapsedTime", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.getNumJobs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.getNumJobs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.getElapsedTime", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.getElapsedTime", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.elapsedTimeToString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.elapsedTimeToString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.elapsedTimeToString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.elapsedTimeToString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.getElapsedTime", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.getElapsedTime"], ["", "def", "waitForJobCount", "(", "self", ",", "targetCount", "=", "0", ",", "pollIntervalSeconds", "=", "60", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "if", "targetCount", "==", "-", "1", ":", "\n", "            ", "return", "\n", "", "numJobs", "=", "self", ".", "getNumJobs", "(", ")", "\n", "if", "numJobs", "<=", "targetCount", ":", "\n", "            ", "return", "\n", "", "waitTimer", "=", "Timer", "(", ")", "\n", "while", "numJobs", ">", "targetCount", ":", "\n", "            ", "sleepTimer", "=", "Timer", "(", ")", "\n", "accountName", "=", "self", ".", "account", "\n", "if", "self", ".", "account", "==", "None", ":", "\n", "                ", "accountName", "=", "\"local\"", "\n", "", "if", "verbose", ":", "\n", "                ", "sleepString", "=", "\" [          ]     \"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"\\rWaiting for \"", "+", "str", "(", "numJobs", ")", "+", "\" on \"", "+", "accountName", "+", "\" (limit=\"", "+", "str", "(", "targetCount", ")", "+", "\")\"", ",", "waitTimer", ".", "elapsedTimeToString", "(", ")", "+", "sleepString", ",", "\n", "", "while", "sleepTimer", ".", "getElapsedTime", "(", ")", "<", "pollIntervalSeconds", ":", "\n", "                ", "if", "verbose", ":", "\n", "                    ", "steps", "=", "int", "(", "10", "*", "sleepTimer", ".", "getElapsedTime", "(", ")", "/", "pollIntervalSeconds", ")", "+", "1", "\n", "sleepString", "=", "\" [\"", "+", "steps", "*", "\".\"", "+", "(", "10", "-", "steps", ")", "*", "\" \"", "+", "\"]     \"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"\\rWaiting for \"", "+", "str", "(", "numJobs", ")", "+", "\" on \"", "+", "accountName", "+", "\" (limit=\"", "+", "str", "(", "targetCount", ")", "+", "\")\"", ",", "waitTimer", ".", "elapsedTimeToString", "(", ")", "+", "sleepString", ",", "\n", "", "time", ".", "sleep", "(", "5", ")", "\n", "", "numJobs", "=", "self", ".", "getNumJobs", "(", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"\\nAll jobs done\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.waitForJob": [[427, 430], ["UnixConnection.UnixConnection.getJobStatus", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.getJobStatus"], ["", "def", "waitForJob", "(", "self", ",", "job", ",", "pollIntervalSeconds", "=", "10", ")", ":", "\n", "        ", "while", "self", ".", "getJobStatus", "(", "job", ")", "not", "in", "[", "\"FINISHED\"", ",", "\"FAILED\"", "]", ":", "\n", "            ", "time", ".", "sleep", "(", "pollIntervalSeconds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.waitForJobs": [[431, 463], ["Utils.Timer.Timer", "Utils.Timer.Timer", "Utils.Timer.Timer", "Utils.Timer.Timer", "str", "timeoutTimer.getElapsedTime", "Utils.Timer.Timer.getElapsedTime", "Utils.Timer.Timer.getElapsedTime", "time.sleep", "UnixConnection.UnixConnection.getJobStatus", "trainTimer.elapsedTimeToString", "str", "Utils.Timer.Timer.elapsedTimeToString", "Utils.Timer.Timer.elapsedTimeToString", "int", "Utils.Timer.Timer.elapsedTimeToString", "Utils.Timer.Timer.elapsedTimeToString", "str", "str", "Utils.Timer.Timer.getElapsedTime", "Utils.Timer.Timer.getElapsedTime", "str", "len", "str", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.getElapsedTime", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.getElapsedTime", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.getElapsedTime", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.getJobStatus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.elapsedTimeToString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.elapsedTimeToString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.elapsedTimeToString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.elapsedTimeToString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.elapsedTimeToString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.getElapsedTime", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Timer.Timer.getElapsedTime"], ["", "", "def", "waitForJobs", "(", "self", ",", "jobs", ",", "pollIntervalSeconds", "=", "60", ",", "timeout", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Waiting for results\"", "\n", "waitTimer", "=", "Timer", "(", ")", "\n", "while", "(", "True", ")", ":", "\n", "            ", "jobStatus", "=", "{", "\"FINISHED\"", ":", "0", ",", "\"QUEUED\"", ":", "0", ",", "\"FAILED\"", ":", "0", ",", "\"RUNNING\"", ":", "0", "}", "\n", "for", "job", "in", "jobs", ":", "\n", "                ", "jobStatus", "[", "self", ".", "getJobStatus", "(", "job", ")", "]", "+=", "1", "\n", "", "jobStatusString", "=", "str", "(", "jobStatus", "[", "\"QUEUED\"", "]", ")", "+", "\" queued, \"", "+", "str", "(", "jobStatus", "[", "\"RUNNING\"", "]", ")", "+", "\" running, \"", "+", "str", "(", "jobStatus", "[", "\"FINISHED\"", "]", ")", "+", "\" finished, \"", "+", "str", "(", "jobStatus", "[", "\"FAILED\"", "]", ")", "+", "\" failed\"", "\n", "if", "jobStatus", "[", "\"QUEUED\"", "]", "+", "jobStatus", "[", "\"RUNNING\"", "]", "==", "0", ":", "\n", "                ", "if", "verbose", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"\\nAll runs done (\"", "+", "jobStatusString", "+", "\")\"", "\n", "", "break", "\n", "# decide what to do", "\n", "", "if", "timeout", "==", "None", "or", "timeoutTimer", ".", "getElapsedTime", "(", ")", "<", "timeout", ":", "\n", "                ", "sleepTimer", "=", "Timer", "(", ")", "\n", "accountName", "=", "self", ".", "account", "\n", "if", "self", ".", "account", "==", "None", ":", "\n", "                    ", "accountName", "=", "\"local\"", "\n", "", "if", "verbose", ":", "\n", "                    ", "sleepString", "=", "\" [          ]     \"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"\\rWaiting for \"", "+", "str", "(", "len", "(", "jobs", ")", ")", "+", "\" on \"", "+", "accountName", "+", "\"(\"", "+", "jobStatusString", "+", "\"),\"", ",", "waitTimer", ".", "elapsedTimeToString", "(", ")", "+", "sleepString", ",", "\n", "", "while", "sleepTimer", ".", "getElapsedTime", "(", ")", "<", "pollIntervalSeconds", ":", "\n", "                    ", "if", "verbose", ":", "\n", "                        ", "steps", "=", "int", "(", "10", "*", "sleepTimer", ".", "getElapsedTime", "(", ")", "/", "pollIntervalSeconds", ")", "+", "1", "\n", "sleepString", "=", "\" [\"", "+", "steps", "*", "\".\"", "+", "(", "10", "-", "steps", ")", "*", "\" \"", "+", "\"]     \"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"\\rWaiting for \"", "+", "str", "(", "len", "(", "jobs", ")", ")", "+", "\" on \"", "+", "accountName", "+", "\"(\"", "+", "jobStatusString", "+", "\"),\"", ",", "waitTimer", ".", "elapsedTimeToString", "(", ")", "+", "sleepString", ",", "\n", "", "time", ".", "sleep", "(", "5", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "verbose", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"\\nTimed out, \"", ",", "trainTimer", ".", "elapsedTimeToString", "(", ")", "\n", "", "break", "\n", "", "", "return", "jobStatus", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getJobStatusByName": [[464, 466], ["UnixConnection.UnixConnection.getJobStatus", "UnixConnection.UnixConnection._getJobPath"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.getJobStatus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getJobPath"], ["", "def", "getJobStatusByName", "(", "self", ",", "jobDir", ",", "jobName", ")", ":", "\n", "        ", "return", "self", ".", "getJobStatus", "(", "self", ".", "_getJobPath", "(", "jobDir", ",", "jobName", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getJobStatus": [[467, 508], ["UnixConnection.UnixConnection._readJobFile", "float", "time.time", "UnixConnection.UnixConnection.run", "line.strip.strip.strip", "len", "len", "UnixConnection.UnixConnection._closeLogs", "UnixConnection.UnixConnection._closeLogs", "UnixConnection.UnixConnection._closeLogs", "line.strip.strip.split", "line.strip.strip.count", "line.strip.strip.split", "line.strip.strip.split", "int", "processes.append", "line.strip.strip.count", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._readJobFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._closeLogs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._closeLogs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._closeLogs"], ["", "def", "getJobStatus", "(", "self", ",", "job", ")", ":", "\n", "# Get jobfile", "\n", "        ", "jobAttr", "=", "self", ".", "_readJobFile", "(", "job", ")", "\n", "# Check whether job exists", "\n", "if", "jobAttr", "==", "None", ":", "\n", "            ", "return", "None", "\n", "# Check for a finished process", "\n", "", "if", "\"retcode\"", "in", "jobAttr", ":", "\n", "            ", "if", "jobAttr", "[", "\"retcode\"", "]", "==", "\"0\"", ":", "\n", "                ", "self", ".", "_closeLogs", "(", "job", ")", "\n", "return", "\"FINISHED\"", "\n", "", "else", ":", "\n", "                ", "self", ".", "_closeLogs", "(", "job", ")", "\n", "return", "\"FAILED\"", "\n", "\n", "# Check for a running process", "\n", "", "", "jobAttr", "[", "\"time\"", "]", "=", "float", "(", "jobAttr", "[", "\"time\"", "]", ")", "\n", "currentTime", "=", "time", ".", "time", "(", ")", "\n", "processes", "=", "[", "]", "\n", "for", "line", "in", "self", ".", "run", "(", "\"ps -p \"", "+", "jobAttr", "[", "\"PID\"", "]", "+", "\" -o etime\"", ")", "[", "1", ":", "]", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "days", "=", "0", "\n", "if", "\"-\"", "in", "line", ":", "\n", "                ", "days", ",", "line", "=", "line", ".", "split", "(", "\"-\"", ")", "\n", "", "hours", "=", "0", "\n", "if", "line", ".", "count", "(", "\":\"", ")", "==", "2", ":", "\n", "                ", "hours", ",", "minutes", ",", "seconds", "=", "line", ".", "split", "(", "\":\"", ")", "\n", "", "else", ":", "\n", "                ", "assert", "line", ".", "count", "(", "\":\"", ")", "==", "1", ",", "line", "\n", "minutes", ",", "seconds", "=", "line", ".", "split", "(", "\":\"", ")", "\n", "", "elapsedTime", "=", "int", "(", "days", ")", "*", "86400", "+", "int", "(", "hours", ")", "*", "3600", "+", "int", "(", "minutes", ")", "*", "60", "+", "int", "(", "seconds", ")", "\n", "#print days, hours, minutes, seconds", "\n", "#print elapsedTime, currentTime - elapsedTime, jobAttr[\"time\"]", "\n", "if", "currentTime", "-", "elapsedTime", "<=", "jobAttr", "[", "\"time\"", "]", ":", "# skip processes started after submit time (won't work with stopped processes)", "\n", "                ", "processes", ".", "append", "(", "jobAttr", "[", "\"PID\"", "]", ")", "\n", "", "", "assert", "len", "(", "processes", ")", "<=", "1", "\n", "if", "len", "(", "processes", ")", "==", "1", ":", "\n", "            ", "return", "\"RUNNING\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "_closeLogs", "(", "job", ")", "\n", "return", "\"FAILED\"", "# failed without writing return code", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.__init__": [[8, 15], ["UnixConnection.UnixConnection.UnixConnection.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "account", "=", "None", ",", "workdir", "=", "None", ",", "settings", "=", "None", ",", "memory", "=", "None", ",", "cores", "=", "None", ",", "modules", "=", "None", ",", "wallTime", "=", "None", ",", "preamble", "=", "None", ",", "debug", "=", "False", ")", ":", "\n", "        ", "UnixConnection", ".", "__init__", "(", "self", ",", "killGroup", "=", "False", ",", "account", "=", "account", ",", "workdir", "=", "workdir", ",", "settings", "=", "settings", ",", "memory", "=", "memory", ",", "cores", "=", "cores", ",", "preamble", "=", "preamble", ",", "debug", "=", "debug", ")", "\n", "self", ".", "wallTime", "=", "wallTime", "\n", "self", ".", "modules", "=", "modules", "\n", "self", ".", "submitCommand", "=", "None", "\n", "self", ".", "jobListCommand", "=", "None", "\n", "self", ".", "jobTemplate", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.getJobStatus": [[16, 28], ["ClusterConnection.ClusterConnection._readJobFile"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._readJobFile"], ["", "def", "getJobStatus", "(", "self", ",", "job", ")", ":", "\n", "        ", "jobAttr", "=", "self", ".", "_readJobFile", "(", "job", ")", "\n", "# Check whether job exists", "\n", "if", "jobAttr", "==", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "\"retcode\"", "not", "in", "jobAttr", ":", "\n", "            ", "return", "\"QUEUED\"", "# could be also RUNNING, but without using the cluster-specific job list we can't know", "\n", "", "elif", "jobAttr", "[", "\"retcode\"", "]", "==", "\"0\"", ":", "\n", "            ", "return", "\"FINISHED\"", "\n", "", "else", ":", "\n", "            ", "return", "\"FAILED\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.submit": [[29, 55], ["ClusterConnection.ClusterConnection.getJobStatus", "ClusterConnection.ClusterConnection._getScript", "ClusterConnection.ClusterConnection.makeJobScript", "ClusterConnection.ClusterConnection._writeJobFile", "subprocess.Popen", "subprocess.Popen.communicate", "ClusterConnection.ClusterConnection._getJobPath", "Exception"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.getJobStatus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getScript", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.makeJobScript", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._writeJobFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getJobPath"], ["", "", "def", "submit", "(", "self", ",", "script", "=", "None", ",", "jobDir", "=", "None", ",", "jobName", "=", "None", ",", "stdout", "=", "None", ",", "stderr", "=", "None", ")", ":", "\n", "        ", "prevStatus", "=", "self", ".", "getJobStatus", "(", "self", ".", "_getJobPath", "(", "jobDir", ",", "jobName", ")", ")", "\n", "if", "self", ".", "resubmitOnlyFinished", "and", "prevStatus", "in", "[", "\"RUNNING\"", ",", "\"QUEUED\"", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"Tried to resubmit a job whose current status is\"", ",", "prevStatus", ")", "\n", "\n", "", "script", "=", "self", ".", "_getScript", "(", "script", ",", "\"\\n\"", ")", "\n", "#if name == None:", "\n", "#    name = uuid.uuid1().hex", "\n", "script", "=", "self", ".", "makeJobScript", "(", "script", ",", "jobDir", ",", "jobName", ",", "stdout", ",", "stderr", ")", "\n", "if", "self", ".", "account", "==", "None", ":", "\n", "            ", "command", "=", "[", "self", ".", "submitCommand", "]", "\n", "", "else", ":", "\n", "            ", "command", "=", "[", "\"ssh\"", ",", "self", ".", "account", ",", "\"'\"", "+", "self", ".", "submitCommand", "+", "\"'\"", "]", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"------- Job script -------\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "script", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"--------------------------\"", "\n", "# The job status file must be open before the job is submitted, so that the return code can be", "\n", "# written to it.", "\n", "", "self", ".", "_writeJobFile", "(", "jobDir", ",", "jobName", ")", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Submitting job\"", ",", "jobName", ",", "\"with command\"", ",", "command", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Submitting job\"", ",", "jobName", "\n", "", "p", "=", "subprocess", ".", "Popen", "(", "command", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stdin", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "return", "p", ".", "communicate", "(", "input", "=", "script", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.getNumJobs": [[56, 64], ["ClusterConnection.ClusterConnection.run", "stdoutLines[].strip().isdigit", "int", "len", "stdoutLines[].strip", "stdoutLines[].strip", "ClusterConnection.ClusterConnection.getUserName"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getUserName"], ["", "def", "getNumJobs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get number of queued (pending or running) jobs\n        \"\"\"", "\n", "stdoutLines", "=", "self", ".", "run", "(", "self", ".", "jobListCommand", "+", "\" | grep \"", "+", "self", ".", "getUserName", "(", ")", "+", "\" | wc -l\"", ")", "\n", "assert", "len", "(", "stdoutLines", ")", "==", "1", ",", "stdoutLines", "\n", "assert", "stdoutLines", "[", "0", "]", ".", "strip", "(", ")", ".", "isdigit", "(", ")", ",", "stdoutLines", "\n", "return", "int", "(", "stdoutLines", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.getStreams": [[65, 73], ["ClusterConnection.ClusterConnection.getRemotePath", "ClusterConnection.ClusterConnection.getRemotePath", "ClusterConnection.ClusterConnection._getJobPath", "ClusterConnection.ClusterConnection._getJobPath"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getJobPath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getJobPath"], ["", "def", "getStreams", "(", "self", ",", "stdout", ",", "stderr", ",", "jobDir", ",", "jobName", ")", ":", "\n", "        ", "if", "stderr", "==", "None", ":", "\n", "            ", "stderr", "=", "self", ".", "_getJobPath", "(", "jobDir", ",", "jobName", ")", "+", "\".stderr\"", "\n", "", "stderr", "=", "self", ".", "getRemotePath", "(", "stderr", ")", "\n", "if", "stdout", "==", "None", ":", "\n", "            ", "stdout", "=", "self", ".", "_getJobPath", "(", "jobDir", ",", "jobName", ")", "+", "\".stdout\"", "\n", "", "stdout", "=", "self", ".", "getRemotePath", "(", "stdout", ")", "\n", "return", "stdout", ",", "stderr", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.makeJobScript": [[74, 112], ["ClusterConnection.ClusterConnection.getStreams", "template.replace.replace.replace", "template.replace.replace.replace", "template.replace.replace.replace", "template.replace.replace.replace", "template.replace.replace.replace", "template.replace.replace.replace", "template.replace.replace.replace", "template.replace.replace.replace", "template.replace.replace.replace", "os.path.dirname", "os.path.dirname", "str", "str", "str", "isinstance", "ClusterConnection.ClusterConnection.getRemotePath", "ClusterConnection.ClusterConnection._getJobPath", "ClusterConnection.ClusterConnection.getRemotePath", "ClusterConnection.ClusterConnection.getRemotePath"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.ClusterConnection.ClusterConnection.getStreams", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._getJobPath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getRemotePath"], ["", "def", "makeJobScript", "(", "self", ",", "script", ",", "jobDir", "=", "None", ",", "jobName", "=", "None", ",", "stdout", "=", "None", ",", "stderr", "=", "None", ",", "wallTime", "=", "None", ",", "modules", "=", "None", ",", "cores", "=", "None", ",", "memory", "=", "None", ")", ":", "\n", "        ", "stdout", ",", "stderr", "=", "self", ".", "getStreams", "(", "stdout", ",", "stderr", ",", "jobDir", ",", "jobName", ")", "\n", "if", "memory", "==", "None", ":", "memory", "=", "self", ".", "memory", "\n", "if", "wallTime", "==", "None", ":", "wallTime", "=", "self", ".", "wallTime", "\n", "if", "cores", "==", "None", ":", "cores", "=", "self", ".", "cores", "\n", "\n", "template", "=", "self", ".", "jobTemplate", "\n", "template", "=", "template", ".", "replace", "(", "\"%job\"", ",", "jobName", ")", "\n", "template", "=", "template", ".", "replace", "(", "\"%stdoutDir\"", ",", "os", ".", "path", ".", "dirname", "(", "stdout", ")", ")", "\n", "template", "=", "template", ".", "replace", "(", "\"%stderrDir\"", ",", "os", ".", "path", ".", "dirname", "(", "stderr", ")", ")", "\n", "template", "=", "template", ".", "replace", "(", "\"%stdout\"", ",", "stdout", ")", "\n", "template", "=", "template", ".", "replace", "(", "\"%stderr\"", ",", "stderr", ")", "\n", "template", "=", "template", ".", "replace", "(", "\"%memory\"", ",", "str", "(", "memory", ")", ")", "\n", "template", "=", "template", ".", "replace", "(", "\"%wallTime\"", ",", "str", "(", "wallTime", ")", ")", "\n", "template", "=", "template", ".", "replace", "(", "\"%cores\"", ",", "str", "(", "cores", ")", ")", "\n", "\n", "commands", "=", "\"\"", "\n", "if", "self", ".", "preamble", "!=", "None", ":", "\n", "            ", "commands", "+=", "self", ".", "preamble", "+", "\"\\n\"", "\n", "", "if", "modules", "==", "None", ":", "\n", "            ", "modules", "=", "self", ".", "modules", "\n", "", "if", "modules", "!=", "None", ":", "\n", "            ", "if", "isinstance", "(", "modules", ",", "basestring", ")", ":", "# just one module to load", "\n", "                ", "modules", "=", "[", "modules", "]", "\n", "", "for", "module", "in", "modules", ":", "\n", "                ", "commands", "+=", "\"module load \"", "+", "module", "+", "\"\\n\"", "\n", "", "", "if", "self", ".", "remoteSettingsPath", "!=", "None", ":", "# Use a specific configuration file", "\n", "            ", "commands", "+=", "\"export TEES_SETTINGS=\"", "+", "self", ".", "remoteSettingsPath", "+", "\"\\n\"", "\n", "", "if", "jobDir", "!=", "None", ":", "\n", "            ", "commands", "+=", "\"mkdir -p \"", "+", "self", ".", "getRemotePath", "(", "jobDir", ")", "+", "\"\\n\"", "# ensure output directory exists", "\n", "commands", "+=", "\"cd \"", "+", "self", ".", "getRemotePath", "(", "jobDir", ")", "+", "\"\\n\\n\"", "# move to output directory where the program will be run", "\n", "", "commands", "+=", "script", "+", "\"\\n\"", "\n", "# Store return value in job file", "\n", "commands", "+=", "\"echo retcode=$? >> \"", "+", "self", ".", "getRemotePath", "(", "self", ".", "_getJobPath", "(", "jobDir", ",", "jobName", ")", ")", "\n", "\n", "template", "=", "template", ".", "replace", "(", "\"%commands\"", ",", "commands", ")", "\n", "assert", "\"%\"", "not", "in", "template", ",", "template", "\n", "return", "template", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.LSFConnection.LSFConnection.__init__": [[23, 34], ["ClusterConnection.ClusterConnection.ClusterConnection.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "account", "=", "None", ",", "workdir", "=", "None", ",", "settings", "=", "None", ",", "wallTime", "=", "None", ",", "memory", "=", "None", ",", "cores", "=", "None", ",", "modules", "=", "None", ")", ":", "\n", "        ", "if", "wallTime", "==", "None", ":", "\n", "            ", "wallTime", "=", "\"48:00\"", "\n", "", "if", "memory", "==", "None", ":", "\n", "            ", "memory", "=", "4194304", "\n", "#if modules == None:", "\n", "#    modules = [\"java\", \"python\"]", "\n", "", "ClusterConnection", ".", "__init__", "(", "self", ",", "account", "=", "account", ",", "workdir", "=", "workdir", ",", "settings", "=", "settings", ",", "memory", "=", "memory", ",", "cores", "=", "cores", ",", "modules", "=", "modules", ",", "wallTime", "=", "wallTime", ")", "\n", "self", ".", "submitCommand", "=", "\"bsub\"", "\n", "self", ".", "jobListCommand", "=", "\"bjobs\"", "\n", "self", ".", "jobTemplate", "=", "LSFJobTemplate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.PBSConnection.PBSConnection.__init__": [[22, 31], ["ClusterConnection.ClusterConnection.ClusterConnection.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "account", "=", "None", ",", "workdir", "=", "None", ",", "settings", "=", "None", ",", "wallTime", "=", "None", ",", "memory", "=", "None", ",", "cores", "=", "None", ",", "modules", "=", "None", ")", ":", "\n", "        ", "if", "wallTime", "==", "None", ":", "\n", "            ", "wallTime", "=", "\"48:00:00\"", "\n", "", "if", "memory", "==", "None", ":", "\n", "            ", "memory", "=", "4194304", "\n", "", "ClusterConnection", ".", "__init__", "(", "self", ",", "account", "=", "account", ",", "workdir", "=", "workdir", ",", "settings", "=", "settings", ",", "memory", "=", "memory", ",", "cores", "=", "cores", ",", "modules", "=", "modules", ",", "wallTime", "=", "wallTime", ")", "\n", "self", ".", "submitCommand", "=", "\"qsub\"", "\n", "self", ".", "jobListCommand", "=", "\"qstat\"", "\n", "self", ".", "jobTemplate", "=", "PBSJobTemplate", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.PBSConnection.PBSConnection.addCommand": [[32, 34], ["PBSConnection.PBSConnection.commands.append"], "methods", ["None"], ["", "def", "addCommand", "(", "self", ",", "string", ")", ":", "\n", "        ", "self", ".", "commands", ".", "append", "(", "\"aprun -n 1 \"", "+", "string", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.__init__": [[34, 45], ["ClusterConnection.ClusterConnection.ClusterConnection.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "account", "=", "None", ",", "workdir", "=", "None", ",", "settings", "=", "None", ",", "wallTime", "=", "None", ",", "memory", "=", "None", ",", "cores", "=", "None", ",", "modules", "=", "None", ",", "preamble", "=", "None", ",", "debug", "=", "False", ")", ":", "\n", "        ", "if", "wallTime", "==", "None", ":", "\n", "            ", "wallTime", "=", "\"48:00:00\"", "\n", "", "if", "memory", "==", "None", ":", "\n", "            ", "memory", "=", "4000", "\n", "#if modules == None:", "\n", "#    modules = [\"python\", \"ruby\"]", "\n", "", "ClusterConnection", ".", "__init__", "(", "self", ",", "account", "=", "account", ",", "workdir", "=", "workdir", ",", "settings", "=", "settings", ",", "memory", "=", "memory", ",", "cores", "=", "cores", ",", "modules", "=", "modules", ",", "wallTime", "=", "wallTime", ",", "preamble", "=", "preamble", ",", "debug", "=", "debug", ")", "\n", "self", ".", "submitCommand", "=", "\"sbatch\"", "\n", "self", ".", "jobListCommand", "=", "\"squeue\"", "\n", "self", ".", "jobTemplate", "=", "SLURMJobTemplate", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.submit": [[46, 54], ["ClusterConnection.ClusterConnection.ClusterConnection.submit", "pstdout.startswith", "int", "SLURMConnection.SLURMConnection._writeJobFile", "pstdout.split"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.submit", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._writeJobFile"], ["", "def", "submit", "(", "self", ",", "script", "=", "None", ",", "jobDir", "=", "None", ",", "jobName", "=", "None", ",", "stdout", "=", "None", ",", "stderr", "=", "None", ")", ":", "\n", "        ", "pstdout", ",", "pstderr", "=", "ClusterConnection", ".", "submit", "(", "self", ",", "script", ",", "jobDir", ",", "jobName", ",", "stdout", ",", "stderr", ")", "\n", "if", "pstderr", "!=", "None", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "pstderr", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "pstdout", "\n", "assert", "pstdout", ".", "startswith", "(", "\"Submitted batch job\"", ")", ",", "pstdout", "\n", "jobId", "=", "int", "(", "pstdout", ".", "split", "(", ")", "[", "-", "1", "]", ")", "\n", "return", "self", ".", "_writeJobFile", "(", "jobDir", ",", "jobName", ",", "{", "\"SLURMID\"", ":", "jobId", "}", ",", "append", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.SLURMConnection.SLURMConnection.getJobStatus": [[55, 89], ["SLURMConnection.SLURMConnection._readJobFile", "SLURMConnection.SLURMConnection.run", "line.strip.strip.strip", "line.strip.strip.split", "jobStatus.rstrip.rstrip.rstrip", "SLURMConnection.SLURMConnection.getUserName"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection._readJobFile", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.run", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.getUserName"], ["", "def", "getJobStatus", "(", "self", ",", "job", ")", ":", "\n", "        ", "jobAttr", "=", "self", ".", "_readJobFile", "(", "job", ")", "\n", "# Check whether job exists", "\n", "if", "jobAttr", "==", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "\"SLURMID\"", "not", "in", "jobAttr", ":", "\n", "            ", "return", "\"FAILED\"", "# submitting the job failed", "\n", "", "for", "line", "in", "self", ".", "run", "(", "\"sacct -u \"", "+", "self", ".", "getUserName", "(", ")", "+", "\" -j \"", "+", "jobAttr", "[", "\"SLURMID\"", "]", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "splits", "=", "line", ".", "split", "(", ")", "\n", "#if self.debug:", "\n", "#    print >> sys.stderr, \"sacct line:\", line", "\n", "#print splits", "\n", "if", "splits", "[", "0", "]", "==", "jobAttr", "[", "\"SLURMID\"", "]", ":", "\n", "                ", "if", "self", ".", "debug", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"sacct:\"", ",", "line", "\n", "", "jobStatus", "=", "splits", "[", "5", "]", "\n", "jobStatus", "=", "jobStatus", ".", "rstrip", "(", "\"+\"", ")", "\n", "if", "jobStatus", "in", "[", "\"RUNNING\"", ",", "\"COMPLETING\"", "]", ":", "\n", "                    ", "return", "\"RUNNING\"", "\n", "", "elif", "jobStatus", "==", "\"COMPLETED\"", ":", "\n", "                    ", "if", "\"retcode\"", "not", "in", "jobAttr", ":", "# file hasn't had the time to be updated?", "\n", "                        ", "return", "\"RUNNING\"", "\n", "", "elif", "jobAttr", "[", "\"retcode\"", "]", "==", "\"0\"", ":", "\n", "                        ", "return", "\"FINISHED\"", "\n", "", "else", ":", "\n", "                        ", "return", "\"FAILED\"", "\n", "", "", "elif", "jobStatus", "in", "[", "\"FAILED\"", ",", "\"CANCELLED\"", ",", "\"NODE_FAIL\"", ",", "\"PREEMPTED\"", ",", "\"TIMEOUT\"", "]", ":", "\n", "                    ", "return", "\"FAILED\"", "\n", "", "elif", "jobStatus", "in", "[", "\"PENDING\"", ",", "\"RESIZING\"", ",", "\"SUSPENDED\"", "]", ":", "\n", "                    ", "return", "\"QUEUED\"", "\n", "", "else", ":", "\n", "                    ", "assert", "False", ",", "jobStatus", "\n", "", "", "", "return", "\"QUEUED\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.RemoveDuplicates.removeDuplicateEvents": [[3, 42], ["len", "event.toString().split", "eventsToKeep.append", "event.toString", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString"], ["def", "removeDuplicateEvents", "(", "document", ")", ":", "\n", "#     eventMap = {}", "\n", "#     for event in document.events:", "\n", "#         if event.id in eventMap:", "\n", "#             raise Exception(\"Duplicate id \" + str(event.id) + \" in document \" + str(document.id))", "\n", "#         eventMap[event.id] = event", "\n", "    ", "modified", "=", "True", "\n", "while", "modified", ":", "\n", "        ", "modified", "=", "False", "\n", "\n", "# Find duplicates", "\n", "duplicateOf", "=", "{", "}", "\n", "eventByContent", "=", "{", "}", "\n", "for", "event", "in", "document", ".", "events", ":", "\n", "            ", "content", "=", "event", ".", "toString", "(", ")", ".", "split", "(", "\"\\t\"", ",", "1", ")", "[", "1", "]", "\n", "if", "content", "in", "eventByContent", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Removing duplicate ST event \"", "+", "event", ".", "id", "+", "\" \"", "+", "content", "+", "\" from document \"", "+", "str", "(", "document", ".", "id", ")", "\n", "duplicateOf", "[", "event", "]", "=", "eventByContent", "[", "content", "]", "\n", "", "else", ":", "\n", "                ", "eventByContent", "[", "content", "]", "=", "event", "\n", "\n", "", "", "if", "len", "(", "duplicateOf", ")", "==", "0", ":", "\n", "            ", "break", "\n", "\n", "# Remove events", "\n", "", "eventsToKeep", "=", "[", "]", "\n", "for", "event", "in", "document", ".", "events", ":", "\n", "            ", "if", "event", "not", "in", "duplicateOf", ":", "\n", "                ", "eventsToKeep", ".", "append", "(", "event", ")", "\n", "", "else", ":", "\n", "                ", "modified", "=", "True", "\n", "", "", "document", ".", "events", "=", "eventsToKeep", "\n", "\n", "# Re-map arguments", "\n", "for", "event", "in", "document", ".", "events", ":", "\n", "            ", "for", "argument", "in", "event", ".", "arguments", ":", "\n", "                ", "if", "argument", ".", "target", "in", "duplicateOf", ":", "\n", "                    ", "argument", ".", "target", "=", "duplicateOf", "[", "argument", ".", "target", "]", "\n", "modified", "=", "True", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.RoundTrip.roundTrip": [[8, 27], ["loadSet", "ConvertXML.toSTFormat", "writeSet", "os.makedirs", "ConvertXML.toInteractionXML", "ConvertXML.toInteractionXML", "sentenceSplitter.makeSentences", "sentenceSplitter.makeSentences", "os.path.exists", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.SentenceSplitter.makeSentences", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists"], ["def", "roundTrip", "(", "input", ",", "output", ",", "sentenceSplitter", ",", "workdir", "=", "None", ")", ":", "\n", "    ", "if", "workdir", "!=", "None", "and", "not", "os", ".", "path", ".", "exists", "(", "workdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "workdir", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Loading STFormat\"", "\n", "documents", "=", "loadSet", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Converting to Interaction XML\"", "\n", "if", "workdir", "!=", "None", ":", "\n", "        ", "xml", "=", "toInteractionXML", "(", "documents", ",", "\"ER\"", ",", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"documents.xml\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "xml", "=", "toInteractionXML", "(", "documents", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Splitting Sentences\"", "\n", "if", "workdir", "!=", "None", ":", "\n", "        ", "sentenceSplitter", ".", "makeSentences", "(", "xml", ",", "os", ".", "path", ".", "join", "(", "workdir", ",", "\"sentences.xml\"", ")", ",", "postProcess", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "sentenceSplitter", ".", "makeSentences", "(", "xml", ")", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Converting back to STFormat\"", "\n", "documents", "=", "toSTFormat", "(", "xml", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Writing STFormat\"", "\n", "writeSet", "(", "documents", ",", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeEntityElement": [[10, 36], ["xml.Element", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ConvertXML.addExtraToElement", "str", "ET.Element.set", "Utils.tuplesToCharOffset", "len", "ET.Element.set", "ET.Element.set", "ET.Element.set", "docEl.get", "altOffs.append", "str", "docEl.get", "str", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addExtraToElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.tuplesToCharOffset", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "makeEntityElement", "(", "ann", ",", "idCount", ",", "docEl", ")", ":", "\n", "    ", "entEl", "=", "ET", ".", "Element", "(", "\"entity\"", ")", "\n", "entEl", ".", "set", "(", "\"type\"", ",", "ann", ".", "type", ")", "\n", "entEl", ".", "set", "(", "\"text\"", ",", "ann", ".", "text", ")", "\n", "# identifiers", "\n", "protId", "=", "docEl", ".", "get", "(", "\"id\"", ")", "+", "\".e\"", "+", "str", "(", "idCount", ")", "\n", "entEl", ".", "set", "(", "\"id\"", ",", "protId", ")", "\n", "if", "ann", ".", "id", "!=", "None", ":", "\n", "        ", "entEl", ".", "set", "(", "\"origId\"", ",", "docEl", ".", "get", "(", "\"origId\"", ")", "+", "\".\"", "+", "str", "(", "ann", ".", "id", ")", ")", "\n", "# offsets", "\n", "", "entEl", ".", "set", "(", "\"charOffset\"", ",", "Range", ".", "tuplesToCharOffset", "(", "ann", ".", "charOffsets", ")", ")", "\n", "if", "len", "(", "ann", ".", "alternativeOffsets", ")", ">", "0", ":", "\n", "        ", "altOffs", "=", "[", "]", "\n", "for", "alternativeOffset", "in", "ann", ".", "alternativeOffsets", ":", "\n", "            ", "altOffs", ".", "append", "(", "str", "(", "alternativeOffset", "[", "0", "]", ")", "+", "\"-\"", "+", "str", "(", "alternativeOffset", "[", "1", "]", "-", "1", ")", ")", "\n", "", "entEl", ".", "set", "(", "\"altOffset\"", ",", "\",\"", ".", "join", "(", "altOffs", ")", ")", "\n", "", "if", "ann", ".", "normalization", "!=", "None", ":", "\n", "        ", "entEl", ".", "set", "(", "\"normalization\"", ",", "ann", ".", "normalization", ")", "\n", "", "addExtraToElement", "(", "entEl", ",", "ann", ".", "extra", ")", "\n", "# determine if given data", "\n", "assert", "ann", ".", "fileType", "in", "[", "\"a1\"", ",", "\"a2\"", ",", "\"rel\"", "]", ",", "ann", ".", "fileType", "\n", "if", "ann", ".", "fileType", "==", "\"a1\"", ":", "#protein.isName():", "\n", "        ", "entEl", ".", "set", "(", "\"given\"", ",", "\"True\"", ")", "\n", "#else:", "\n", "#    entEl.set(\"given\", \"False\")", "\n", "", "return", "entEl", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addDocumentElement": [[37, 57], ["xml.SubElement", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "str", "str", "ET.SubElement.set", "len", "xml.SubElement", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "str", "str", "len"], "function", ["None"], ["", "def", "addDocumentElement", "(", "doc", ",", "corpusEl", ",", "idCount", ",", "corpusName", ")", ":", "\n", "    ", "docEl", "=", "ET", ".", "SubElement", "(", "corpusEl", ",", "\"document\"", ")", "\n", "docId", "=", "corpusName", "+", "\".d\"", "+", "str", "(", "idCount", ")", "\n", "docEl", ".", "set", "(", "\"id\"", ",", "docId", ")", "\n", "#docEl.set(\"pmid\", str(doc.id))", "\n", "docEl", ".", "set", "(", "\"origId\"", ",", "str", "(", "doc", ".", "id", ")", ")", "\n", "docEl", ".", "set", "(", "\"text\"", ",", "doc", ".", "text", ")", "\n", "if", "doc", ".", "dataSet", "!=", "None", ":", "\n", "        ", "docEl", ".", "set", "(", "\"set\"", ",", "doc", ".", "dataSet", ")", "\n", "# If this is a sentence, make one", "\n", "", "isSentence", "=", "len", "(", "doc", ".", "words", ")", ">", "0", "\n", "if", "isSentence", ":", "\n", "        ", "sentEl", "=", "ET", ".", "SubElement", "(", "docEl", ",", "\"sentence\"", ")", "\n", "sentEl", ".", "set", "(", "\"id\"", ",", "docId", "+", "\".s0\"", ")", "\n", "sentEl", ".", "set", "(", "\"origId\"", ",", "str", "(", "doc", ".", "id", ")", ")", "\n", "sentEl", ".", "set", "(", "\"text\"", ",", "doc", ".", "text", ")", "\n", "sentEl", ".", "set", "(", "\"charOffset\"", ",", "\"0-\"", "+", "str", "(", "len", "(", "doc", ".", "text", ")", ")", ")", "\n", "#docId = sentEl.get(\"id\") # hack to get all subelements here", "\n", "docEl", "=", "sentEl", "# hack to get all subelements here", "\n", "", "return", "docEl", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addParseElements": [[58, 89], ["xml.SubElement", "xml.SubElement", "xml.SubElement", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "xml.SubElement", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "xml.SubElement", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "len", "Utils.tuplesToCharOffset", "len", "dep.type.find", "[].split", "tokenMap[].set", "tokenMap[].set", "[].split", "dep.type.split"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.tuplesToCharOffset"], ["", "def", "addParseElements", "(", "doc", ",", "docEl", ")", ":", "\n", "    ", "if", "docEl", ".", "tag", "!=", "\"sentence\"", ":", "\n", "        ", "return", "\n", "", "sentAnalysesEl", "=", "ET", ".", "SubElement", "(", "docEl", ",", "\"analyses\"", ")", "\n", "#parsesEl = ET.SubElement(sentAnalysesEl, \"parses\")", "\n", "parseEl", "=", "ET", ".", "SubElement", "(", "sentAnalysesEl", ",", "\"parse\"", ")", "\n", "#tokenizationsEl = ET.SubElement(sentAnalysesEl, \"tokenizations\")", "\n", "tokenizationEl", "=", "ET", ".", "SubElement", "(", "sentAnalysesEl", ",", "\"tokenization\"", ")", "\n", "parseEl", ".", "set", "(", "\"parser\"", ",", "\"gold\"", ")", "\n", "parseEl", ".", "set", "(", "\"tokenizer\"", ",", "\"gold\"", ")", "\n", "tokenizationEl", ".", "set", "(", "\"tokenizer\"", ",", "\"gold\"", ")", "\n", "tokenMap", "=", "{", "}", "\n", "for", "word", "in", "doc", ".", "words", ":", "\n", "        ", "tokEl", "=", "ET", ".", "SubElement", "(", "tokenizationEl", ",", "\"token\"", ")", "\n", "tokEl", ".", "set", "(", "\"id\"", ",", "word", ".", "id", ")", "\n", "tokEl", ".", "set", "(", "\"text\"", ",", "word", ".", "text", ")", "\n", "tokEl", ".", "set", "(", "\"POS\"", ",", "\"None\"", ")", "\n", "assert", "len", "(", "word", ".", "charOffsets", ")", "==", "1", ",", "(", "word", ",", "word", ".", "charOffsets", ")", "\n", "tokEl", ".", "set", "(", "\"charOffset\"", ",", "Range", ".", "tuplesToCharOffset", "(", "word", ".", "charOffsets", ")", ")", "\n", "tokenMap", "[", "word", ".", "id", "]", "=", "tokEl", "\n", "", "for", "dep", "in", "doc", ".", "dependencies", ":", "\n", "        ", "depEl", "=", "ET", ".", "SubElement", "(", "parseEl", ",", "\"dependency\"", ")", "\n", "depEl", ".", "set", "(", "\"id\"", ",", "dep", ".", "id", ")", "\n", "depEl", ".", "set", "(", "\"type\"", ",", "dep", ".", "type", ")", "\n", "assert", "len", "(", "dep", ".", "arguments", ")", "==", "2", "\n", "depEl", ".", "set", "(", "\"t1\"", ",", "dep", ".", "arguments", "[", "0", "]", ".", "target", ".", "id", ")", "\n", "depEl", ".", "set", "(", "\"t2\"", ",", "dep", ".", "arguments", "[", "1", "]", ".", "target", ".", "id", ")", "\n", "if", "dep", ".", "type", ".", "find", "(", "\":\"", ")", "!=", "-", "1", ":", "\n", "            ", "word1Type", ",", "word2Type", "=", "dep", ".", "type", ".", "split", "(", "\"(\"", ")", "[", "0", "]", ".", "split", "(", "\":\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"-\"", ")", "\n", "tokenMap", "[", "dep", ".", "arguments", "[", "0", "]", ".", "target", ".", "id", "]", ".", "set", "(", "\"POS\"", ",", "word1Type", ")", "\n", "tokenMap", "[", "dep", ".", "arguments", "[", "1", "]", ".", "target", ".", "id", "]", ".", "set", "(", "\"POS\"", ",", "word2Type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeInteractionElement": [[90, 103], ["xml.Element", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "str"], "function", ["None"], ["", "", "", "def", "makeInteractionElement", "(", "intType", ",", "docId", ",", "idCount", ",", "origId", ",", "e1Id", ",", "e2Id", ",", "isEventArgument", "=", "False", ",", "annSource", "=", "None", ")", ":", "\n", "    ", "intEl", "=", "ET", ".", "Element", "(", "\"interaction\"", ")", "\n", "intEl", ".", "set", "(", "\"directed\"", ",", "\"True\"", ")", "\n", "intEl", ".", "set", "(", "\"id\"", ",", "docId", "+", "\".i\"", "+", "str", "(", "idCount", ")", ")", "\n", "intEl", ".", "set", "(", "\"origId\"", ",", "origId", ")", "\n", "intEl", ".", "set", "(", "\"e1\"", ",", "e1Id", ")", "\n", "intEl", ".", "set", "(", "\"e2\"", ",", "e2Id", ")", "\n", "intEl", ".", "set", "(", "\"type\"", ",", "intType", ")", "\n", "if", "isEventArgument", ":", "\n", "        ", "intEl", ".", "set", "(", "\"event\"", ",", "\"True\"", ")", "\n", "", "if", "annSource", "!=", "None", "and", "annSource", "==", "\"a1\"", ":", "#protein.isName():", "\n", "        ", "intEl", ".", "set", "(", "\"given\"", ",", "\"True\"", ")", "\n", "", "return", "intEl", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addEntityElements": [[104, 127], ["ConvertXML.getTriggerToEventsMap", "ConvertXML.makeEntityElement", "docEl.append", "makeEntityElement.get", "makeEntityElement.get", "tMap.has_key", "ConvertXML.makeEntityElement", "docEl.append", "makeEntityElement.get", "makeEntityElement.get", "makeEntityElement.get", "makeEntityElement.set", "makeEntityElement.set", "makeEntityElement.set", "tMap.has_key", "makeEntityElement.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.getTriggerToEventsMap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeEntityElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeEntityElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "addEntityElements", "(", "doc", ",", "docEl", ",", "tMap", ",", "eventMap", ")", ":", "\n", "    ", "elCounter", "=", "0", "\n", "for", "protein", "in", "doc", ".", "proteins", ":", "# entities", "\n", "        ", "entEl", "=", "makeEntityElement", "(", "protein", ",", "elCounter", ",", "docEl", ")", "\n", "elCounter", "+=", "1", "\n", "docEl", ".", "append", "(", "entEl", ")", "\n", "assert", "not", "tMap", ".", "has_key", "(", "entEl", ".", "get", "(", "\"id\"", ")", ")", ",", "entEl", ".", "get", "(", "\"id\"", ")", "\n", "tMap", "[", "protein", ".", "id", "]", "=", "entEl", ".", "get", "(", "\"id\"", ")", "\n", "", "triggerToEvents", "=", "getTriggerToEventsMap", "(", "doc", ")", "\n", "for", "protein", "in", "doc", ".", "triggers", ":", "# triggers", "\n", "        ", "for", "eventId", "in", "triggerToEvents", "[", "protein", ".", "id", "]", ":", "# Write duplicate triggers", "\n", "            ", "entEl", "=", "makeEntityElement", "(", "protein", ",", "elCounter", ",", "docEl", ")", "\n", "if", "eventId", "in", "eventMap", "and", "eventMap", "[", "eventId", "]", ".", "trigger", "!=", "None", ":", "\n", "                ", "entEl", ".", "set", "(", "\"event\"", ",", "\"True\"", ")", "\n", "# Add negation and speculation", "\n", "", "if", "eventId", "in", "eventMap", "and", "eventMap", "[", "eventId", "]", ".", "negation", "!=", "None", ":", "\n", "                ", "entEl", ".", "set", "(", "\"negation\"", ",", "\"True\"", ")", "\n", "", "if", "eventId", "in", "eventMap", "and", "eventMap", "[", "eventId", "]", ".", "speculation", "!=", "None", ":", "\n", "                ", "entEl", ".", "set", "(", "\"speculation\"", ",", "\"True\"", ")", "\n", "", "elCounter", "+=", "1", "\n", "docEl", ".", "append", "(", "entEl", ")", "\n", "assert", "not", "tMap", ".", "has_key", "(", "entEl", ".", "get", "(", "\"id\"", ")", ")", ",", "entEl", ".", "get", "(", "\"id\"", ")", "\n", "tMap", "[", "eventId", "]", "=", "entEl", ".", "get", "(", "\"id\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addInteractionElements": [[128, 208], ["docEl.get", "set", "str", "collections.defaultdict", "str", "len", "argByType[].append", "len", "len", "ConvertXML.makeInteractionElement", "makeInteractionElement.set", "makeInteractionElement.set", "docEl.append", "ConvertXML.makeInteractionElement", "makeInteractionElement.get", "docEl.append", "ConvertXML.makeInteractionElement", "docEl.append", "event.argumentToString", "ConvertXML.makeInteractionElement", "makeInteractionElement.get().startswith", "docEl.append", "docEl.append", "str", "makeInteractionElement.set", "docEl.get", "event.argumentToString", "makeInteractionElement.set", "makeInteractionElement.set", "makeInteractionElement.set", "ConvertXML.makeInteractionElement", "str", "ConvertXML.makeInteractionElement", "docEl.append", "set.add", "docEl.get", "makeInteractionElement.get", "str", "str", "str", "str", "str", "makeInteractionElement.get", "str", "makeInteractionElement.get", "makeInteractionElement.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeInteractionElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeInteractionElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeInteractionElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeInteractionElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeInteractionElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeInteractionElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "def", "addInteractionElements", "(", "doc", ",", "docEl", ",", "tMap", ")", ":", "\n", "        ", "elCounter", "=", "0", "\n", "docId", "=", "docEl", ".", "get", "(", "\"id\"", ")", "\n", "# Write events and relations", "\n", "siteParentLinks", "=", "set", "(", ")", "\n", "for", "event", "in", "doc", ".", "events", ":", "\n", "            ", "if", "event", ".", "trigger", "==", "None", ":", "# triggerless event (simple pairwise interaction) == relation", "\n", "                ", "origId", "=", "str", "(", "doc", ".", "id", ")", "+", "\".\"", "+", "str", "(", "event", ".", "id", ")", "\n", "if", "event", ".", "type", "!=", "\"Coref\"", ":", "\n", "                    ", "assert", "len", "(", "event", ".", "arguments", ")", ">=", "2", ",", "(", "event", ".", "id", ",", "event", ".", "type", ",", "event", ".", "arguments", ")", "\n", "a1", "=", "event", ".", "arguments", "[", "0", "]", "\n", "a2", "=", "event", ".", "arguments", "[", "1", "]", "\n", "#assert a1.target.id in tMap, (a1.target.id, event, docId, docEl.get(\"origId\"))", "\n", "#assert a2.target.id in tMap, (a2.target.id, event, docId, docEl.get(\"origId\"))", "\n", "if", "a1", ".", "target", ".", "id", "not", "in", "tMap", ":", "\n", "                        ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, skipping relation\"", ",", "event", ".", "id", ",", "\"with no T-type target for argument\"", ",", "event", ".", "argumentToString", "(", "a1", ")", ",", "\"in document\"", ",", "docId", "+", "\"/\"", "+", "docEl", ".", "get", "(", "\"origId\"", ")", "\n", "", "elif", "a2", ".", "target", ".", "id", "not", "in", "tMap", ":", "\n", "                        ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, skipping relation\"", ",", "event", ".", "id", ",", "\"with no T-type target for argument\"", ",", "event", ".", "argumentToString", "(", "a2", ")", ",", "\"in document\"", ",", "docId", "+", "\"/\"", "+", "docEl", ".", "get", "(", "\"origId\"", ")", "\n", "", "else", ":", "\n", "                        ", "relEl", "=", "makeInteractionElement", "(", "event", ".", "type", ",", "docId", ",", "elCounter", ",", "origId", ",", "tMap", "[", "a1", ".", "target", ".", "id", "]", ",", "tMap", "[", "a2", ".", "target", ".", "id", "]", ",", "annSource", "=", "event", ".", "fileType", ")", "\n", "if", "(", "a1", ".", "type", "+", "a1", ".", "siteIdentifier", "!=", "\"Arg1\"", ")", ":", "\n", "                            ", "relEl", ".", "set", "(", "\"e1Role\"", ",", "a1", ".", "type", ")", "\n", "", "if", "(", "a2", ".", "type", "+", "a2", ".", "siteIdentifier", "!=", "\"Arg2\"", ")", ":", "\n", "                            ", "relEl", ".", "set", "(", "\"e2Role\"", ",", "a2", ".", "type", ")", "\n", "", "if", "relEl", ".", "get", "(", "\"id\"", ")", ".", "startswith", "(", "\"SDB16.\"", ")", ":", "\n", "                            ", "relEl", ".", "set", "(", "\"type\"", ",", "relEl", ".", "get", "(", "\"type\"", ")", "+", "\"(\"", "+", "str", "(", "relEl", ".", "get", "(", "\"e1Role\"", ")", ")", "+", "\"/\"", "+", "str", "(", "relEl", ".", "get", "(", "\"e2Role\"", ")", ")", "+", "\")\"", ")", "\n", "", "elCounter", "+=", "1", "\n", "docEl", ".", "append", "(", "relEl", ")", "\n", "", "", "else", ":", "# BioNLP'11 Coref", "\n", "                    ", "assert", "event", ".", "type", "==", "\"Coref\"", ",", "(", "event", ".", "id", ",", "docId", ",", "event", ".", "type", ")", "\n", "argByType", "=", "defaultdict", "(", "list", ")", "\n", "for", "arg", "in", "event", ".", "arguments", ":", "\n", "                        ", "argByType", "[", "arg", ".", "type", "]", ".", "append", "(", "arg", ")", "\n", "", "assert", "len", "(", "argByType", ")", ">", "1", ",", "event", "\n", "assert", "len", "(", "argByType", "[", "\"Anaphora\"", "]", ")", "==", "1", ",", "event", "\n", "anaphoraArg", "=", "argByType", "[", "\"Anaphora\"", "]", "[", "0", "]", "\n", "for", "antecedentArg", "in", "argByType", "[", "\"Antecedent\"", "]", ":", "\n", "                        ", "corefEl", "=", "makeInteractionElement", "(", "\"Coref\"", ",", "docId", ",", "elCounter", ",", "origId", ",", "tMap", "[", "anaphoraArg", ".", "target", ".", "id", "]", ",", "tMap", "[", "antecedentArg", ".", "target", ".", "id", "]", ",", "annSource", "=", "event", ".", "fileType", ")", "\n", "corefEl", ".", "set", "(", "\"e1Role\"", ",", "\"Anaphora\"", ")", "\n", "corefEl", ".", "set", "(", "\"e2Role\"", ",", "\"Antecedent\"", ")", "\n", "elCounter", "+=", "1", "\n", "docEl", ".", "append", "(", "corefEl", ")", "\n", "for", "connProtArg", "in", "argByType", "[", "\"CorefTarget\"", "]", ":", "# link proteins to antecedent", "\n", "                            ", "docEl", ".", "append", "(", "makeInteractionElement", "(", "\"CorefTarget\"", ",", "docId", ",", "elCounter", ",", "origId", ",", "tMap", "[", "antecedentArg", ".", "target", ".", "id", "]", ",", "tMap", "[", "connProtArg", ".", "target", ".", "id", "]", ",", "annSource", "=", "event", ".", "fileType", ")", ")", "\n", "elCounter", "+=", "1", "\n", "", "", "", "", "else", ":", "\n", "                ", "argCount", "=", "0", "\n", "elementIdByArg", "=", "{", "}", "\n", "for", "arg", "in", "event", ".", "arguments", ":", "\n", "                    ", "if", "arg", ".", "type", "!=", "\"Site\"", ":", "\n", "                        ", "origId", "=", "str", "(", "doc", ".", "id", ")", "+", "\".\"", "+", "str", "(", "event", ".", "id", ")", "+", "\".\"", "+", "str", "(", "argCount", ")", "\n", "argEl", "=", "makeInteractionElement", "(", "arg", ".", "type", ",", "docId", ",", "elCounter", ",", "origId", ",", "tMap", "[", "event", ".", "id", "]", ",", "tMap", "[", "arg", ".", "target", ".", "id", "]", ",", "True", ",", "annSource", "=", "event", ".", "fileType", ")", "\n", "elementIdByArg", "[", "arg", "]", "=", "argEl", ".", "get", "(", "\"id\"", ")", "\n", "elCounter", "+=", "1", "\n", "argCount", "+=", "1", "\n", "docEl", ".", "append", "(", "argEl", ")", "\n", "", "", "for", "arg", "in", "event", ".", "arguments", ":", "\n", "                    ", "if", "arg", ".", "type", "==", "\"Site\"", ":", "\n", "#assert arg[2].type == \"Entity\"", "\n", "#assert arg[1].type in [\"Protein\", \"Gene\", \"Chemical\", \"Organism\", \"Regulon-operon\", \"Two-component-system\"], (arg[1].type, doc.id, doc.dataSet, event.id)", "\n", "                        ", "origId", "=", "str", "(", "doc", ".", "id", ")", "+", "\".\"", "+", "str", "(", "event", ".", "id", ")", "+", "\".\"", "+", "str", "(", "argCount", ")", "+", "\".site\"", "\n", "# The site-argument connects the event to the site entity, just like in the shared task", "\n", "siteEl", "=", "makeInteractionElement", "(", "\"Site\"", ",", "docId", ",", "elCounter", ",", "origId", ",", "tMap", "[", "event", ".", "id", "]", ",", "tMap", "[", "arg", ".", "target", ".", "id", "]", ",", "True", ",", "annSource", "=", "event", ".", "fileType", ")", "\n", "if", "arg", ".", "siteOf", "!=", "None", ":", "\n", "                            ", "siteEl", ".", "set", "(", "\"siteOf\"", ",", "elementIdByArg", "[", "arg", ".", "siteOf", "]", ")", "\n", "", "elCounter", "+=", "1", "\n", "docEl", ".", "append", "(", "siteEl", ")", "\n", "# The SiteParent argument connects the entity to it's protein. As sites must be paired with", "\n", "# core arguments, the SiteParent can be used to find the protein argument corresponding to", "\n", "# the entity. Site and core arguments can be paired by the shared protein which is both the", "\n", "# immediate target of the core argument, and the Site's target via the SiteParent argument.", "\n", "if", "arg", ".", "siteOf", "!=", "None", ":", "\n", "                            ", "siteEntity", "=", "tMap", "[", "arg", ".", "target", ".", "id", "]", "\n", "siteProtein", "=", "tMap", "[", "arg", ".", "siteOf", ".", "target", ".", "id", "]", "\n", "siteIdentifier", "=", "(", "siteEntity", ",", "siteProtein", ")", "\n", "if", "not", "siteIdentifier", "in", "siteParentLinks", ":", "# avoid duplicate SiteParent links", "\n", "                                ", "siteEl", "=", "makeInteractionElement", "(", "\"SiteParent\"", ",", "docId", ",", "elCounter", ",", "origId", ",", "siteEntity", ",", "siteProtein", ",", "annSource", "=", "event", ".", "fileType", ")", "\n", "elCounter", "+=", "1", "\n", "docEl", ".", "append", "(", "siteEl", ")", "\n", "siteParentLinks", ".", "add", "(", "siteIdentifier", ")", "\n", "#siteEl.set(\"parent\", argEl.get(\"id\"))", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.getTriggerToEventsMap": [[212, 223], ["len", "triggerToEvents[].append", "triggerToEvents[].append"], "function", ["None"], ["", "", "", "", "", "", "", "def", "getTriggerToEventsMap", "(", "doc", ")", ":", "\n", "    ", "triggerToEvents", "=", "{", "}", "\n", "for", "trigger", "in", "doc", ".", "triggers", ":", "\n", "        ", "triggerId", "=", "trigger", ".", "id", "\n", "triggerToEvents", "[", "triggerId", "]", "=", "[", "]", "\n", "for", "event", "in", "doc", ".", "events", ":", "\n", "            ", "if", "event", ".", "trigger", "==", "trigger", ":", "\n", "                ", "triggerToEvents", "[", "triggerId", "]", ".", "append", "(", "event", ".", "id", ")", "\n", "", "", "if", "len", "(", "triggerToEvents", "[", "triggerId", "]", ")", "==", "0", ":", "# T-elements with no event (such as Entities) are included in the list", "\n", "            ", "triggerToEvents", "[", "triggerId", "]", ".", "append", "(", "trigger", ".", "id", ")", "\n", "", "", "return", "triggerToEvents", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toInteractionXML": [[224, 245], ["xml.Element", "ET.Element.set", "xml.ElementTree", "ConvertXML.addDocumentElement", "ConvertXML.addEntityElements", "ConvertXML.addInteractionElements", "ConvertXML.addParseElements", "Utils.write"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addDocumentElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addEntityElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addInteractionElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addParseElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "toInteractionXML", "(", "documents", ",", "corpusName", "=", "\"CORPUS\"", ",", "output", "=", "None", ")", ":", "\n", "    ", "corpusRoot", "=", "ET", ".", "Element", "(", "\"corpus\"", ")", "\n", "corpusRoot", ".", "set", "(", "\"source\"", ",", "corpusName", ")", "\n", "docCounter", "=", "0", "\n", "for", "doc", "in", "documents", ":", "\n", "        ", "docEl", "=", "addDocumentElement", "(", "doc", ",", "corpusRoot", ",", "docCounter", ",", "corpusName", ")", "\n", "docCounter", "+=", "1", "\n", "# prepare mapping structures", "\n", "tMap", "=", "{", "}", "\n", "eventMap", "=", "{", "}", "\n", "for", "event", "in", "doc", ".", "events", ":", "\n", "            ", "eventMap", "[", "event", ".", "id", "]", "=", "event", "\n", "# write elements", "\n", "", "addEntityElements", "(", "doc", ",", "docEl", ",", "tMap", ",", "eventMap", ")", "\n", "addInteractionElements", "(", "doc", ",", "docEl", ",", "tMap", ")", "\n", "addParseElements", "(", "doc", ",", "docEl", ")", "\n", "\n", "", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "output", ")", "\n", "", "return", "ET", ".", "ElementTree", "(", "corpusRoot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.findDuplicateForSTTrigger": [[246, 251], ["None"], "function", ["None"], ["", "def", "findDuplicateForSTTrigger", "(", "ann", ",", "triggers", ")", ":", "\n", "    ", "for", "trigger", "in", "triggers", ":", "\n", "        ", "if", "trigger", ".", "charOffsets", "==", "ann", ".", "charOffsets", "and", "trigger", ".", "text", "==", "ann", ".", "text", "and", "trigger", ".", "type", "==", "ann", ".", "type", ":", "\n", "            ", "return", "trigger", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addTextToSTDoc": [[252, 271], ["docElement.findall", "len", "docElement.get", "sentence.get", "sentence.get", "sentence.get", "sentence.get().rsplit", "sentence.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "addTextToSTDoc", "(", "doc", ",", "docElement", ")", ":", "\n", "#sentenceOffsets = {}", "\n", "    ", "doc", ".", "text", "=", "\"\"", "\n", "sentenceElements", "=", "docElement", ".", "findall", "(", "\"sentence\"", ")", "\n", "if", "len", "(", "sentenceElements", ")", "==", "0", ":", "\n", "        ", "doc", ".", "text", "=", "docElement", ".", "get", "(", "\"text\"", ")", "\n", "", "else", ":", "\n", "        ", "for", "sentence", "in", "sentenceElements", ":", "\n", "            ", "head", "=", "sentence", ".", "get", "(", "\"head\"", ")", "\n", "if", "head", "!=", "None", ":", "\n", "                ", "doc", ".", "text", "+=", "head", "\n", "", "doc", ".", "text", "+=", "sentence", ".", "get", "(", "\"text\"", ")", "\n", "tail", "=", "sentence", ".", "get", "(", "\"tail\"", ")", "\n", "if", "tail", "!=", "None", ":", "\n", "                ", "doc", ".", "text", "+=", "tail", "\n", "#sentenceOffset = Range.charOffsetToSingleTuple(sentence.get(\"charOffset\"))", "\n", "#sentenceOffsets[sentence.get(\"id\")] = sentenceOffset", "\n", "", "if", "doc", ".", "id", "==", "None", ":", "\n", "                ", "doc", ".", "id", "=", "sentence", ".", "get", "(", "\"origId\"", ")", ".", "rsplit", "(", "\".\"", ",", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addEntitiesToSTDoc": [[272, 352], ["containerElement.findall", "entity.get", "Utils.charOffsetToTuples", "Annotation", "entity.get", "ConvertXML.getExtraFromElement", "docElement.getiterator", "entity.get", "entity.get", "entity.get", "entity.get", "entity.get", "Utils.charOffsetToSingleTuple", "range", "entity.get", "entity.get", "entity.get", "doc.proteins.append", "ConvertXML.findDuplicateForSTTrigger", "entity.get", "containerElement.get", "len", "entity.get", "Annotation.id[].isupper", "doc.triggers.append", "entity.get.find", "entity.get.rsplit", "entity.get().rsplit", "c.isdigit", "entity.get", "entity.get", "ConvertXML.makeSTEvent", "doc.events.append", "entity.get", "entity.get", "entity.get", "entity.get", "entity.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToTuples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.getExtraFromElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.findDuplicateForSTTrigger", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeSTEvent", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "", "def", "addEntitiesToSTDoc", "(", "doc", ",", "docElement", ",", "tMap", ",", "eMap", ",", "entityElementMap", ",", "useOrigIds", "=", "False", ")", ":", "\n", "    ", "containerElements", "=", "[", "docElement", "]", "+", "[", "x", "for", "x", "in", "docElement", ".", "getiterator", "(", "\"sentence\"", ")", "]", "\n", "for", "containerElement", "in", "containerElements", ":", "\n", "        ", "for", "entity", "in", "containerElement", ".", "findall", "(", "\"entity\"", ")", ":", "\n", "            ", "eType", "=", "entity", ".", "get", "(", "\"type\"", ")", "\n", "if", "eType", "==", "\"neg\"", ":", "# skip negative predictions if they are present", "\n", "                ", "continue", "\n", "", "assert", "entity", ".", "get", "(", "\"id\"", ")", "!=", "None", "\n", "entityElementMap", "[", "entity", ".", "get", "(", "\"id\"", ")", "]", "=", "entity", "\n", "entityOffsets", "=", "Range", ".", "charOffsetToTuples", "(", "entity", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "ann", "=", "Annotation", "(", ")", "\n", "ann", ".", "type", "=", "eType", "\n", "if", "useOrigIds", ":", "\n", "                ", "entityOrigId", "=", "entity", ".", "get", "(", "\"origId\"", ")", "\n", "if", "entityOrigId", "!=", "None", "and", "entityOrigId", ".", "find", "(", "\".\"", ")", "!=", "-", "1", ":", "# fix gluing of doc and ann id", "\n", "                    ", "entityOrigId", "=", "entityOrigId", ".", "rsplit", "(", "\".\"", ",", "1", ")", "[", "-", "1", "]", "\n", "", "if", "entityOrigId", "!=", "None", ":", "\n", "                    ", "if", "entityOrigId", "[", "0", "]", "==", "\"E\"", ":", "# a special id denoting a numbered, but triggerless event", "\n", "                        ", "ann", ".", "eventId", "=", "entityOrigId", "\n", "ann", ".", "id", "=", "None", "\n", "", "else", ":", "\n", "                        ", "ann", ".", "id", "=", "entityOrigId", "\n", "", "", "", "ann", ".", "text", "=", "entity", ".", "get", "(", "\"text\"", ")", "\n", "if", "entity", ".", "get", "(", "\"normalization\"", ")", "!=", "None", ":", "\n", "                ", "ann", ".", "normalization", "=", "entity", ".", "get", "(", "\"normalization\"", ")", "\n", "#assert entityOffset[1] - entityOffset[0] in [len(ann.text), len(ann.text) - 1], (ann.text, entityOffset)", "\n", "", "ann", ".", "charOffsets", "=", "entityOffsets", "\n", "#ann.charBegin = entityOffset[0]", "\n", "#ann.charEnd = entityOffset[0] + len(ann.text) # entityOffset[1] + 1", "\n", "if", "containerElement", ".", "tag", "==", "\"sentence\"", ":", "# entity offset is relative to the container element, and for sentences, they can be relative to the document", "\n", "                ", "sentenceOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "containerElement", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ann", ".", "charOffsets", ")", ")", ":", "\n", "                    ", "ann", ".", "charOffsets", "[", "i", "]", "=", "(", "ann", ".", "charOffsets", "[", "i", "]", "[", "0", "]", "+", "sentenceOffset", "[", "0", "]", ",", "ann", ".", "charOffsets", "[", "i", "]", "[", "1", "]", "+", "sentenceOffset", "[", "0", "]", ")", "\n", "#ann.charBegin += sentenceOffset[0]", "\n", "#ann.charEnd += sentenceOffset[0]", "\n", "#            idStem = entity.get(\"id\").split(\".e\", 1)[0]", "\n", "#            if sentenceOffsets.has_key(idStem):", "\n", "#                sentenceOffset = sentenceOffsets[idStem]", "\n", "#                ann.charBegin += sentenceOffset[0]", "\n", "#                ann.charEnd += sentenceOffset[0]", "\n", "", "", "if", "entity", ".", "get", "(", "\"speculation\"", ")", "==", "\"True\"", ":", "\n", "                ", "ann", ".", "speculation", "=", "True", "\n", "", "if", "entity", ".", "get", "(", "\"negation\"", ")", "==", "\"True\"", ":", "\n", "                ", "ann", ".", "negation", "=", "True", "\n", "", "ann", ".", "extra", "=", "getExtraFromElement", "(", "entity", ")", "# add all scores and extra data", "\n", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "# Remember to use original id for names!", "\n", "                ", "if", "entity", ".", "get", "(", "\"origId\"", ")", "!=", "None", ":", "\n", "                    ", "ann", ".", "id", "=", "entity", ".", "get", "(", "\"origId\"", ")", ".", "rsplit", "(", "\".\"", ",", "1", ")", "[", "-", "1", "]", "\n", "assert", "ann", ".", "id", "[", "0", "]", ".", "isupper", "(", ")", ",", "ann", ".", "id", "\n", "for", "c", "in", "ann", ".", "id", "[", "1", ":", "]", ":", "\n", "                        ", "assert", "c", ".", "isdigit", "(", ")", ",", "ann", ".", "id", "\n", "", "", "doc", ".", "proteins", ".", "append", "(", "ann", ")", "\n", "tMap", "[", "entity", ".", "get", "(", "\"id\"", ")", "]", "=", "ann", "\n", "# The part below is dangerous, and incompatibilities should be handled rather", "\n", "# by not converting to the shared task format when it cannot be done ", "\n", "#if entity.get(\"origId\") != None:", "\n", "#    # Attempt to process origId, assuming it corresponds to the BioNLP Shared Task format", "\n", "#    nonNamedEntityOrigId = entity.get(\"origId\").rsplit(\".\", 1)[-1]", "\n", "#    if len(nonNamedEntityOrigId) > 1 and nonNamedEntityOrigId[0].isupper() and nonNamedEntityOrigId[1:].isdigit():", "\n", "#        ann.id = nonNamedEntityOrigId", "\n", "#stDoc.proteins.append(ann)", "\n", "", "else", ":", "# a predicted protein or trigger", "\n", "                ", "duplicateAnn", "=", "findDuplicateForSTTrigger", "(", "ann", ",", "doc", ".", "triggers", ")", "\n", "if", "duplicateAnn", "==", "None", ":", "\n", "                    ", "doc", ".", "triggers", ".", "append", "(", "ann", ")", "\n", "tMap", "[", "entity", ".", "get", "(", "\"id\"", ")", "]", "=", "ann", "\n", "# Add confidence scores", "\n", "#ann.extra = getExtraFromElement(entity, [\"conf\"])", "\n", "#ann.triggerScores = entity.get(\"predictions\")", "\n", "#ann.unmergingScores = entity.get(\"umStrength\")", "\n", "#ann.speculationScores = entity.get(\"modPred\")", "\n", "#ann.negationScores = entity.get(\"modPred\")", "\n", "# Events with 0 interactions (such as some Process-type events) would not be formed when constructing events based on interactions", "\n", "if", "entity", ".", "get", "(", "\"event\"", ")", "==", "\"True\"", ":", "\n", "                        ", "event", "=", "makeSTEvent", "(", "ann", ",", "entityElementMap", "[", "entity", ".", "get", "(", "\"id\"", ")", "]", ")", "\n", "eMap", "[", "entity", ".", "get", "(", "\"id\"", ")", "]", "=", "event", "\n", "doc", ".", "events", ".", "append", "(", "event", ")", "\n", "", "", "else", ":", "# a duplicate trigger already exists", "\n", "                    ", "tMap", "[", "entity", ".", "get", "(", "\"id\"", ")", "]", "=", "duplicateAnn", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeSTEvent": [[353, 376], ["Annotation", "ConvertXML.getExtraFromElement", "hasattr", "triggerElement.get", "triggerElement.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.getExtraFromElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "", "", "def", "makeSTEvent", "(", "triggerAnn", ",", "triggerElement", ")", ":", "\n", "    ", "\"\"\"\n    triggerAnn: A deduplicated st-format entity\n    triggerElement: The original (possibly duplicate) interaction XML entity\n    \"\"\"", "\n", "event", "=", "Annotation", "(", ")", "\n", "event", ".", "trigger", "=", "triggerAnn", "\n", "event", ".", "type", "=", "triggerAnn", ".", "type", "\n", "# Add event-specific extra data from the trigger element", "\n", "event", ".", "extra", "=", "getExtraFromElement", "(", "triggerElement", ",", "[", "\"conf\"", ",", "\"umConf\"", ",", "\"modConf\"", ",", "\"specConf\"", ",", "\"negConf\"", "]", ")", "\n", "# Remove the event-specific extra data from the trigger annotation. Only the trigger confidence is left in the trigger", "\n", "triggerAnn", ".", "extra", "=", "{", "}", "\n", "if", "\"conf\"", "in", "event", ".", "extra", ":", "\n", "        ", "triggerAnn", ".", "extra", "[", "\"conf\"", "]", "=", "event", ".", "extra", "[", "\"conf\"", "]", "\n", "del", "event", ".", "extra", "[", "\"conf\"", "]", "\n", "# Mark modifiers", "\n", "", "if", "triggerElement", ".", "get", "(", "\"speculation\"", ")", "==", "\"True\"", ":", "\n", "        ", "event", ".", "speculation", "=", "True", "\n", "", "if", "triggerElement", ".", "get", "(", "\"negation\"", ")", "==", "\"True\"", ":", "\n", "        ", "event", ".", "negation", "=", "True", "\n", "", "if", "hasattr", "(", "event", ".", "trigger", ",", "\"eventId\"", ")", ":", "\n", "        ", "event", ".", "id", "=", "event", ".", "trigger", ".", "eventId", "\n", "", "return", "event", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.getCorefTargetMap": [[377, 393], ["docElement.getiterator", "interaction.get", "interaction.get", "interaction.get", "corefProtMap.has_key", "corefProtMap[].append"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getCorefTargetMap", "(", "docElement", ")", ":", "\n", "    ", "corefProtMap", "=", "{", "}", "\n", "for", "interaction", "in", "docElement", ".", "getiterator", "(", "\"interaction\"", ")", ":", "\n", "        ", "intType", "=", "interaction", ".", "get", "(", "\"type\"", ")", "\n", "if", "intType", "==", "\"CorefTarget\"", ":", "\n", "            ", "e1", "=", "interaction", ".", "get", "(", "\"e1\"", ")", "\n", "e2", "=", "interaction", ".", "get", "(", "\"e2\"", ")", "\n", "#            if not tMap.has_key(e2):", "\n", "#                print >> sys.stderr, \"Warning, no trigger for Coref Protein Target\"", "\n", "#                continue", "\n", "#            e2 = tMap[e2]", "\n", "if", "not", "corefProtMap", ".", "has_key", "(", "e1", ")", ":", "\n", "                ", "corefProtMap", "[", "e1", "]", "=", "[", "]", "\n", "", "if", "not", "e2", "in", "corefProtMap", "[", "e1", "]", ":", "\n", "                ", "corefProtMap", "[", "e1", "]", ".", "append", "(", "e2", ")", "\n", "", "", "", "return", "corefProtMap", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.getExtraFromElement": [[394, 400], ["element.attrib.keys", "key.startswith", "element.get", "key.strip"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getExtraFromElement", "(", "element", ",", "include", "=", "[", "\"conf\"", ",", "\"umConf\"", ",", "\"modConf\"", ",", "\"specConf\"", ",", "\"negConf\"", "]", ",", "extraTag", "=", "\"stx_\"", ")", ":", "\n", "    ", "extra", "=", "{", "}", "\n", "for", "key", "in", "element", ".", "attrib", ".", "keys", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "extraTag", ")", "or", "key", "in", "include", ":", "\n", "            ", "extra", "[", "key", ".", "strip", "(", "extraTag", ")", "]", "=", "element", ".", "get", "(", "key", ")", "\n", "", "", "return", "extra", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addExtraToElement": [[401, 409], ["extra.keys", "element.set", "element.set"], "function", ["None"], ["", "def", "addExtraToElement", "(", "element", ",", "extra", ",", "include", "=", "[", "\"conf\"", ",", "\"umConf\"", ",", "\"modConf\"", ",", "\"specConf\"", ",", "\"negConf\"", "]", ",", "extraTag", "=", "\"stx_\"", ")", ":", "\n", "    ", "if", "extra", "==", "None", ":", "\n", "        ", "return", "\n", "", "for", "key", "in", "extra", ".", "keys", "(", ")", ":", "\n", "        ", "if", "key", "in", "include", ":", "\n", "            ", "element", ".", "set", "(", "key", ",", "extra", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "            ", "element", ".", "set", "(", "extraTag", "+", "key", ",", "extra", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addInteractionsToSTDoc": [[410, 456], ["ConvertXML.getCorefTargetMap", "collections.defaultdict", "collections.defaultdict", "docElement.getiterator", "ConvertXML.mapSTArgumentTargets", "interaction.get", "siteParents[].add", "Annotation", "interaction.get", "interaction.get().startswith", "ConvertXML.getExtraFromElement", "Annotation.addArgument", "Annotation.addArgument", "doc.events.append", "interaction.get", "eMap[].addArgument", "interaction.get", "interaction.get", "interaction.get", "interaction.get", "interaction.get", "interaction.get", "ConvertXML.makeSTEvent", "doc.events.append", "interaction.get", "interaction.get", "ConvertXML.getExtraFromElement", "set", "interaction.get", "interaction.get", "Annotation.type.split", "interaction.get", "siteOfTypes[].split", "Annotation.addArgument", "interaction.get", "interaction.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.getCorefTargetMap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.mapSTArgumentTargets", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.getExtraFromElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.makeSTEvent", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.getExtraFromElement", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "def", "addInteractionsToSTDoc", "(", "doc", ",", "docElement", ",", "tMap", ",", "eMap", ",", "entityElementMap", ",", "skipArgs", "=", "[", "]", ",", "allAsRelations", "=", "False", ")", ":", "\n", "# First map Coref proteins", "\n", "    ", "corefProtMap", "=", "getCorefTargetMap", "(", "docElement", ")", "\n", "# Then process all interactions", "\n", "siteParents", "=", "defaultdict", "(", "set", ")", "\n", "siteOfTypes", "=", "defaultdict", "(", "set", ")", "\n", "for", "interaction", "in", "docElement", ".", "getiterator", "(", "\"interaction\"", ")", ":", "\n", "        ", "intType", "=", "interaction", ".", "get", "(", "\"type\"", ")", "\n", "if", "intType", "==", "\"neg\"", "or", "intType", "==", "\"CorefTarget\"", "or", "intType", "in", "skipArgs", ":", "\n", "            ", "continue", "# Targets have already been put into a dictionary", "\n", "", "if", "intType", "==", "\"SiteParent\"", "and", "not", "allAsRelations", ":", "\n", "            ", "siteParents", "[", "tMap", "[", "interaction", ".", "get", "(", "\"e1\"", ")", "]", "]", ".", "add", "(", "tMap", "[", "interaction", ".", "get", "(", "\"e2\"", ")", "]", ")", "\n", "", "elif", "interaction", ".", "get", "(", "\"event\"", ")", "!=", "\"True\"", "or", "allAsRelations", ":", "# \"/\" in intType and \"(\" in intType: # BI-task", "\n", "            ", "rel", "=", "Annotation", "(", ")", "\n", "rel", ".", "type", "=", "interaction", ".", "get", "(", "\"type\"", ")", "\n", "if", "interaction", ".", "get", "(", "\"id\"", ")", ".", "startswith", "(", "\"SDB16.\"", ")", ":", "\n", "                ", "rel", ".", "type", "=", "rel", ".", "type", ".", "split", "(", "\"(\"", ")", "[", "0", "]", "\n", "#relScores = getExtraFromElement(interaction) #interaction.get(\"conf\")", "\n", "", "rel", ".", "extra", "=", "getExtraFromElement", "(", "interaction", ")", "\n", "rel", ".", "addArgument", "(", "interaction", ".", "get", "(", "\"e1Role\"", ",", "\"Arg1\"", ")", ",", "interaction", ".", "get", "(", "\"e1\"", ")", ")", "#, None, relScores)", "\n", "rel", ".", "addArgument", "(", "interaction", ".", "get", "(", "\"e2Role\"", ",", "\"Arg2\"", ")", ",", "interaction", ".", "get", "(", "\"e2\"", ")", ")", "#, None, relScores)", "\n", "if", "rel", ".", "type", "==", "\"Coref\"", ":", "\n", "# Add protein arguments", "\n", "                ", "if", "interaction", ".", "get", "(", "\"e2\"", ")", "in", "corefProtMap", ":", "\n", "                    ", "for", "prot", "in", "corefProtMap", "[", "interaction", ".", "get", "(", "\"e2\"", ")", "]", ":", "\n", "                        ", "rel", ".", "addArgument", "(", "\"CorefTarget\"", ",", "prot", ")", "\n", "", "", "", "doc", ".", "events", ".", "append", "(", "rel", ")", "\n", "", "else", ":", "\n", "            ", "e1", "=", "interaction", ".", "get", "(", "\"e1\"", ")", "\n", "if", "e1", "not", "in", "eMap", ":", "# event has not yet been created", "\n", "                ", "eMap", "[", "e1", "]", "=", "makeSTEvent", "(", "tMap", "[", "e1", "]", ",", "entityElementMap", "[", "e1", "]", ")", "\n", "doc", ".", "events", ".", "append", "(", "eMap", "[", "e1", "]", ")", "\n", "# add arguments", "\n", "", "arg", "=", "eMap", "[", "e1", "]", ".", "addArgument", "(", "interaction", ".", "get", "(", "\"type\"", ")", ",", "interaction", ".", "get", "(", "\"e2\"", ")", ",", "None", ",", "getExtraFromElement", "(", "interaction", ")", ")", "\n", "siteOfTypes", "[", "arg", "]", "=", "interaction", ".", "get", "(", "\"siteOfTypes\"", ")", "\n", "if", "siteOfTypes", "[", "arg", "]", "!=", "None", ":", "\n", "                ", "siteOfTypes", "[", "arg", "]", "=", "set", "(", "siteOfTypes", "[", "arg", "]", ".", "split", "(", "\",\"", ")", ")", "\n", "#    # Rename site-type interactions (which have been masked as \"SiteArg\" to prevent them being processed as Shared Task task-2 sites", "\n", "#    for event in doc.events:", "\n", "#        for arg in event.arguments:", "\n", "#            if arg[0] == \"SiteArg\":", "\n", "#                arg[0] = \"Site\"", "\n", "#                if arg[3] != None: # Convert also prediction strengths", "\n", "#                    arg[3] = arg[3].replace(\"SiteArg\", \"Site\")", "\n", "# replace argument target ids with actual target objects", "\n", "", "", "", "mapSTArgumentTargets", "(", "doc", ",", "siteParents", ",", "siteOfTypes", ",", "tMap", ",", "eMap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.mapSTArgumentTargets": [[457, 510], ["event.isRelation", "set", "type", "Exception", "argsToKeep.append", "len", "str", "validPrimaryArgs.append", "set.add", "argsToKeep.append", "len", "set.add", "argsToKeep.append"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["", "def", "mapSTArgumentTargets", "(", "stDoc", ",", "siteParents", ",", "siteOfTypes", ",", "tMap", ",", "eMap", ")", ":", "\n", "# Map argument targets", "\n", "    ", "for", "event", "in", "stDoc", ".", "events", ":", "\n", "#argTypeCounts = defaultdict(int)", "\n", "        ", "for", "arg", "in", "event", ".", "arguments", ":", "\n", "#argTypeCounts[arg.type] += 1", "\n", "            ", "assert", "type", "(", "arg", ".", "target", ")", "in", "types", ".", "StringTypes", ",", "arg", ".", "target", "\n", "targetId", "=", "arg", ".", "target", "# at this point, target is not yet an argument, but an interaction XML id", "\n", "if", "targetId", "in", "eMap", ":", "\n", "                ", "arg", ".", "target", "=", "eMap", "[", "targetId", "]", "\n", "", "elif", "targetId", "in", "tMap", ":", "\n", "                ", "arg", ".", "target", "=", "tMap", "[", "targetId", "]", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"No object for argument target \"", "+", "str", "(", "targetId", ")", ")", "\n", "\n", "# An interaction with type \"Site\" is the task 2 argument. An interaction with type \"SiteParent\" links the target", "\n", "# of the \"Site\"-argument to the protein that is the target of the core argument, allowing the site to be connected", "\n", "# to its core argument.", "\n", "#argTypeCounts[\"Theme_and_Cause\"] = argTypeCounts[\"Theme\"] + argTypeCounts[\"Cause\"]", "\n", "#if max(argTypeCounts.values()) > 1: # sites must be linked to core arguments", "\n", "# Note that Site-argument mapping applies only to events. E.g. the BI11 task has relations", "\n", "# which have an argument called \"Site\", but this is not a Site in the \"GE task 2\" sense.", "\n", "", "", "if", "not", "event", ".", "isRelation", "(", ")", ":", "# map event sites", "\n", "            ", "argsToKeep", "=", "[", "]", "\n", "argsWithSite", "=", "set", "(", ")", "# prevent more than one site per argument", "\n", "for", "arg1", "in", "event", ".", "arguments", ":", "\n", "                ", "if", "arg1", ".", "type", "==", "\"Site\"", ":", "\n", "# Pick valid potential primary arguments", "\n", "                    ", "validPrimaryArgTypes", "=", "siteOfTypes", "[", "arg1", "]", "\n", "if", "validPrimaryArgTypes", "==", "None", ":", "\n", "                        ", "validPrimaryArgTypes", "=", "(", "\"Theme\"", ",", "\"Cause\"", ")", "\n", "", "validPrimaryArgs", "=", "[", "]", "\n", "for", "arg2", "in", "event", ".", "arguments", ":", "\n", "                        ", "if", "arg2", ".", "type", "in", "validPrimaryArgTypes", ":", "\n", "                            ", "validPrimaryArgs", ".", "append", "(", "arg2", ")", "\n", "# Map site to a primary argument", "\n", "", "", "if", "len", "(", "validPrimaryArgs", ")", "==", "1", ":", "# only one valid primary argument, no siteParents are needed", "\n", "                        ", "arg2", "=", "validPrimaryArgs", "[", "0", "]", "\n", "if", "arg2", "not", "in", "argsWithSite", ":", "# only if arg2 hasn't already got a site", "\n", "                            ", "argsWithSite", ".", "add", "(", "arg2", ")", "\n", "arg1", ".", "siteOf", "=", "arg2", "\n", "argsToKeep", ".", "append", "(", "arg1", ")", "\n", "", "", "elif", "len", "(", "validPrimaryArgs", ")", ">", "0", ":", "# multiple potential primary arguments", "\n", "                        ", "for", "arg2", "in", "validPrimaryArgs", ":", "\n", "# Keep site only if it's core argument can be determined unambiguously", "\n", "                            ", "if", "arg2", "not", "in", "argsWithSite", "and", "arg1", ".", "target", "in", "siteParents", "and", "arg2", ".", "target", "in", "siteParents", "[", "arg1", ".", "target", "]", ":", "\n", "                                ", "argsWithSite", ".", "add", "(", "arg2", ")", "\n", "arg1", ".", "siteOf", "=", "arg2", "\n", "argsToKeep", ".", "append", "(", "arg1", ")", "\n", "break", "# so that arg1 won't be duplicated when one site has (incorrectly) two parents", "\n", "", "", "", "", "else", ":", "\n", "                    ", "argsToKeep", ".", "append", "(", "arg1", ")", "\n", "", "", "event", ".", "arguments", "=", "argsToKeep", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.toSTFormat": [[511, 536], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "corpusTree.getroot.findall", "Document", "document.get", "ConvertXML.addTextToSTDoc", "documents.append", "ConvertXML.addEntitiesToSTDoc", "ConvertXML.addInteractionsToSTDoc", "writeSet", "document.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addTextToSTDoc", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addEntitiesToSTDoc", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.STFormat.ConvertXML.addInteractionsToSTDoc", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "def", "toSTFormat", "(", "input", ",", "output", "=", "None", ",", "outputTag", "=", "\"a2\"", ",", "useOrigIds", "=", "False", ",", "debug", "=", "False", ",", "skipArgs", "=", "[", "]", ",", "validate", "=", "True", ",", "writeExtra", "=", "False", ",", "allAsRelations", "=", "False", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "input", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Corpus file loaded\"", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "nonEntitySiteCount", "=", "0", "\n", "documents", "=", "[", "]", "\n", "for", "document", "in", "corpusRoot", ".", "findall", "(", "\"document\"", ")", ":", "\n", "        ", "stDoc", "=", "Document", "(", ")", "\n", "stDoc", ".", "id", "=", "document", ".", "get", "(", "\"pmid\"", ")", "\n", "if", "stDoc", ".", "id", "==", "None", ":", "\n", "            ", "stDoc", ".", "id", "=", "document", ".", "get", "(", "\"origId\"", ")", "\n", "", "addTextToSTDoc", "(", "stDoc", ",", "document", ")", "\n", "documents", ".", "append", "(", "stDoc", ")", "\n", "eMap", "=", "{", "}", "\n", "tMap", "=", "{", "}", "\n", "entityElementMap", "=", "{", "}", "# for task 3", "\n", "addEntitiesToSTDoc", "(", "stDoc", ",", "document", ",", "tMap", ",", "eMap", ",", "entityElementMap", ",", "useOrigIds", ")", "\n", "addInteractionsToSTDoc", "(", "stDoc", ",", "document", ",", "tMap", ",", "eMap", ",", "entityElementMap", ",", "skipArgs", ",", "allAsRelations", ")", "\n", "\n", "", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "writeSet", "(", "documents", ",", "output", ",", "resultFileTag", "=", "outputTag", ",", "debug", "=", "debug", ",", "writeExtra", "=", "writeExtra", ")", "\n", "", "return", "documents", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteElements.getEmptyCorpus": [[9, 30], ["DeleteElements.processCorpus", "type", "Utils.ETFromObj", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj"], ["def", "getEmptyCorpus", "(", "xml", ",", "deletionRules", "=", "None", ",", "removeNames", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    A convenience function for getting an empty corpus, useful for testing for information leaks\n    in the event extraction process.\n    \"\"\"", "\n", "if", "type", "(", "xml", ")", "in", "types", ".", "StringTypes", ":", "\n", "# XML is read from disk, so it's a new copy and can be safely modified", "\n", "        ", "xml", "=", "ETUtils", ".", "ETFromObj", "(", "xml", ")", "\n", "", "else", ":", "\n", "# XML is already an object in memory. To prevent problems with other users of it, a copy", "\n", "# is created before deleting elements.", "\n", "        ", "xml", "=", "copy", ".", "deepcopy", "(", "xml", ")", "\n", "", "if", "deletionRules", "==", "None", ":", "# use default rules for BioNLP Shared Task", "\n", "# We remove all interactions, and all entities that are not named entities. This leaves only", "\n", "# the gold standard protein/gene names", "\n", "        ", "if", "removeNames", ":", "\n", "            ", "deletionRules", "=", "{", "\"interaction\"", ":", "{", "}", ",", "\"entity\"", ":", "{", "}", "}", "\n", "", "else", ":", "\n", "            ", "deletionRules", "=", "{", "\"interaction\"", ":", "{", "}", ",", "\"entity\"", ":", "{", "\"given\"", ":", "(", "None", ",", "\"False\"", ")", "}", "}", "\n", "# Remove elements and return the emptied XML", "\n", "", "", "return", "processCorpus", "(", "xml", ",", "None", ",", "deletionRules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteElements.removeElements": [[31, 57], ["collections.defaultdict", "parent.remove", "DeleteElements.removeElements", "toRemove.append", "len", "element.get", "attrType[].add", "set", "element.get", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteElements.removeElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "removeElements", "(", "parent", ",", "rules", ",", "reverse", "=", "False", ",", "countsByType", "=", "None", ")", ":", "\n", "    ", "if", "countsByType", "==", "None", ":", "\n", "        ", "countsByType", "=", "defaultdict", "(", "int", ")", "\n", "", "toRemove", "=", "[", "]", "\n", "for", "element", "in", "parent", ":", "\n", "        ", "attrType", "=", "{", "}", "\n", "if", "element", ".", "tag", "in", "rules", ":", "\n", "            ", "remove", "=", "True", "\n", "if", "rules", "[", "element", ".", "tag", "]", "!=", "None", "and", "len", "(", "rules", "[", "element", ".", "tag", "]", ")", ">", "0", ":", "\n", "                ", "for", "attrName", "in", "rules", "[", "element", ".", "tag", "]", ":", "\n", "                    ", "if", "element", ".", "get", "(", "attrName", ")", "not", "in", "rules", "[", "element", ".", "tag", "]", "[", "attrName", "]", ":", "\n", "                        ", "remove", "=", "False", "\n", "break", "\n", "", "else", ":", "\n", "                        ", "if", "attrName", "not", "in", "attrType", ":", "\n", "                            ", "attrType", "[", "attrName", "]", "=", "set", "(", ")", "\n", "", "attrType", "[", "attrName", "]", ".", "add", "(", "element", ".", "get", "(", "attrName", ")", ")", "\n", "", "", "", "if", "reverse", ":", "\n", "                ", "remove", "=", "not", "remove", "\n", "", "if", "remove", ":", "\n", "                ", "toRemove", ".", "append", "(", "element", ")", "\n", "countsByType", "[", "element", ".", "tag", "+", "\" \"", "+", "str", "(", "attrType", ")", "]", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "removeElements", "(", "element", ",", "rules", ",", "reverse", ",", "countsByType", ")", "\n", "", "", "for", "element", "in", "toRemove", ":", "\n", "        ", "parent", ".", "remove", "(", "element", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteElements.processCorpus": [[58, 75], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "collections.defaultdict", "DeleteElements.removeElements", "sorted", "collections.defaultdict.keys", "Utils.write"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteElements.removeElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "", "def", "processCorpus", "(", "inputFilename", ",", "outputFilename", ",", "rules", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Deleting elements, rules =\"", ",", "rules", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus file\"", ",", "inputFilename", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "inputFilename", ")", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "countsByType", "=", "defaultdict", "(", "int", ")", "\n", "removeElements", "(", "corpusRoot", ",", "rules", ",", "reverse", ",", "countsByType", ")", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Deleted elements\"", "\n", "for", "k", "in", "sorted", "(", "countsByType", ".", "keys", "(", ")", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"  \"", "+", "k", "+", "\":\"", ",", "countsByType", "[", "k", "]", "\n", "\n", "", "if", "outputFilename", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "outputFilename", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "outputFilename", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseStats.parseStats": [[11, 52], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "collections.defaultdict", "inputTree.getroot.getiterator", "sorted", "sentence.find", "sentence.find.find", "sentence.find.find", "collections.defaultdict.keys", "parseElement.get", "tokenizationElement.get", "parseElement.get", "len", "len", "len", "parseElement.findall", "parseElement.findall", "tokenizationElement.findall"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "parseStats", "(", "input", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Loading input file\"", ",", "input", "\n", "inputTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "inputRoot", "=", "inputTree", ".", "getroot", "(", ")", "\n", "counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "sentence", "in", "inputRoot", ".", "getiterator", "(", "\"sentence\"", ")", ":", "\n", "        ", "counts", "[", "\"sentence\"", "]", "+=", "1", "\n", "analysesElement", "=", "sentence", ".", "find", "(", "\"sentenceanalyses\"", ")", "\n", "if", "analysesElement", "==", "None", ":", "\n", "            ", "counts", "[", "\"sentence-no-analyses\"", "]", "+=", "1", "\n", "continue", "\n", "# Create parses element (if needed)", "\n", "", "parsesElement", "=", "analysesElement", ".", "find", "(", "\"parses\"", ")", "\n", "if", "parsesElement", "==", "None", ":", "\n", "            ", "counts", "[", "\"sentence-no-parses\"", "]", "+=", "1", "\n", "continue", "\n", "# Loop through parses", "\n", "", "for", "parseElement", "in", "parsesElement", ":", "\n", "            ", "parserName", "=", "parseElement", ".", "get", "(", "\"parser\"", ")", "\n", "counts", "[", "\"parse:\"", "+", "parserName", "]", "+=", "1", "\n", "if", "parseElement", ".", "get", "(", "\"pennstring\"", ")", "in", "[", "\"\"", ",", "None", "]", ":", "\n", "                ", "counts", "[", "\"parse:\"", "+", "parserName", "+", "\"(no penn)\"", "]", "+=", "1", "\n", "", "if", "len", "(", "parseElement", ".", "findall", "(", "\"dependency\"", ")", ")", "==", "0", ":", "\n", "                ", "counts", "[", "\"parse:\"", "+", "parserName", "+", "\"(no dependencies)\"", "]", "+=", "1", "\n", "", "if", "len", "(", "parseElement", ".", "findall", "(", "\"phrase\"", ")", ")", "==", "0", ":", "\n", "                ", "counts", "[", "\"parse:\"", "+", "parserName", "+", "\"(no phrases)\"", "]", "+=", "1", "\n", "# Tokenizations", "\n", "", "", "tokenizationsElement", "=", "analysesElement", ".", "find", "(", "\"tokenizations\"", ")", "\n", "if", "tokenizationsElement", "==", "None", ":", "\n", "            ", "counts", "[", "\"sentence-no-tokenizations\"", "]", "+=", "1", "\n", "continue", "\n", "# Loop through tokenizations", "\n", "", "for", "tokenizationElement", "in", "tokenizationsElement", ":", "\n", "            ", "tokenizerName", "=", "tokenizationElement", ".", "get", "(", "\"tokenizer\"", ")", "\n", "counts", "[", "\"tokenization:\"", "+", "tokenizerName", "]", "+=", "1", "\n", "if", "len", "(", "tokenizationElement", ".", "findall", "(", "\"token\"", ")", ")", "==", "0", ":", "\n", "                ", "counts", "[", "\"tokenization:\"", "+", "tokenizerName", "+", "\"(no tokens)\"", "]", "+=", "1", "\n", "\n", "", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Parse statistics for\"", ",", "input", "\n", "for", "key", "in", "sorted", "(", "counts", ".", "keys", "(", ")", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\" \"", ",", "key", "+", "\":\"", ",", "counts", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText": [[16, 19], ["tokenElement.get().replace().replace().strip", "tokenElement.get().replace().replace", "tokenElement.get().replace", "tokenElement.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getTokenText", "(", "tokenElement", ")", ":", "\n", "# it's unlikely there would be newlines inside tokens", "\n", "    ", "return", "tokenElement", ".", "get", "(", "\"text\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", ".", "replace", "(", "\"\\r\"", ",", "\" \"", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokens": [[20, 48], ["tokenizationElement.findall", "tokenElements.sort", "tokenElement.get", "tokenElement.get.split", "tokenElements.append", "token.get", "tokenTexts.append", "len", "int", "int", "token.get", "token.get", "tokenTexts.append", "ExportParse.getTokenText", "ExportParse.getTokenText", "ExportParse.getTokenText"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText"], ["", "def", "getTokens", "(", "tokenizationElement", ")", ":", "\n", "# order tokens by charOffset", "\n", "    ", "tokenElements", "=", "[", "]", "\n", "for", "tokenElement", "in", "tokenizationElement", ".", "findall", "(", "\"token\"", ")", ":", "\n", "        ", "charOffset", "=", "tokenElement", ".", "get", "(", "\"charOffset\"", ")", "\n", "begin", ",", "end", "=", "charOffset", ".", "split", "(", "\"-\"", ")", "\n", "tokenElements", ".", "append", "(", "[", "int", "(", "begin", ")", ",", "int", "(", "end", ")", ",", "tokenElement", "]", ")", "\n", "", "tokenElements", ".", "sort", "(", ")", "\n", "\n", "# Get token texts, and mark indices moved by splitting", "\n", "index", "=", "0", "\n", "tokenTexts", "=", "[", "]", "\n", "tokenIdMap", "=", "{", "}", "# zero-based", "\n", "splitFrom", "=", "None", "\n", "for", "tokenElement", "in", "tokenElements", ":", "\n", "        ", "token", "=", "tokenElement", "[", "2", "]", "\n", "if", "token", ".", "get", "(", "\"splitFrom\"", ")", "!=", "None", ":", "\n", "            ", "if", "splitFrom", "!=", "token", ".", "get", "(", "\"splitFrom\"", ")", ":", "# this token begins a new set of split tokens", "\n", "                ", "splitFrom", "=", "token", ".", "get", "(", "\"splitFrom\"", ")", "\n", "tokenTexts", ".", "append", "(", "getTokenText", "(", "token", ")", ")", "\n", "", "else", ":", "# this token continues an existing set of split tokens", "\n", "                ", "tokenTexts", "[", "-", "1", "]", "=", "tokenTexts", "[", "-", "1", "]", "+", "getTokenText", "(", "token", ")", "\n", "", "", "else", ":", "# a non-split token", "\n", "            ", "splitFrom", "=", "None", "\n", "tokenTexts", ".", "append", "(", "getTokenText", "(", "token", ")", ")", "\n", "", "tokenIdMap", "[", "index", "]", "=", "len", "(", "tokenTexts", ")", "-", "1", "\n", "index", "+=", "1", "\n", "", "return", "tokenTexts", ",", "tokenIdMap", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.exportTokenization": [[49, 60], ["parseElement.get", "ExportParse.getTokens", "outFile.write", "outFile.write", "parseElement.get.strip", "sentenceElement.get().strip().split", "sentenceElement.get().strip", "sentenceElement.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokens", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "exportTokenization", "(", "tokenizationElement", ",", "parseElement", ",", "sentenceElement", ",", "outFile", ")", ":", "\n", "    ", "pennstring", "=", "None", "\n", "if", "parseElement", "!=", "None", ":", "\n", "        ", "pennstring", "=", "parseElement", ".", "get", "(", "\"pennstring\"", ")", "\n", "", "if", "tokenizationElement", "!=", "None", "and", "pennstring", "!=", "None", "and", "pennstring", ".", "strip", "(", ")", "!=", "\"\"", ":", "\n", "        ", "tokenTexts", "=", "[", "]", "\n", "tokenTexts", ",", "tokenIdMap", "=", "getTokens", "(", "tokenizationElement", ")", "\n", "outFile", ".", "write", "(", "\" \"", ".", "join", "(", "tokenTexts", ")", "+", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "        ", "outFile", ".", "write", "(", "\" \"", ".", "join", "(", "sentenceElement", ".", "get", "(", "\"text\"", ")", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "+", "\"\\n\"", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.exportPennTreeBank": [[61, 72], ["outFile.write", "parseElement.get", "outFile.write", "parseElement.get.strip", "parseElement.get.strip"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["", "def", "exportPennTreeBank", "(", "parseElement", ",", "outFile", ")", ":", "\n", "    ", "pennstring", "=", "None", "\n", "if", "parseElement", "!=", "None", ":", "\n", "        ", "pennstring", "=", "parseElement", ".", "get", "(", "\"pennstring\"", ")", "\n", "", "if", "pennstring", "!=", "None", "and", "pennstring", ".", "strip", "(", ")", "!=", "\"\"", ":", "\n", "        ", "outFile", ".", "write", "(", "pennstring", ".", "strip", "(", ")", ")", "\n", "", "outFile", ".", "write", "(", "\"\\n\"", ")", "\n", "if", "pennstring", "==", "None", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.exportStanfordDependencies": [[73, 102], ["sorted", "outFile.write", "unEscDict.keys", "ExportParse.getTokens", "range", "parseElement.findall", "len", "outFile.write", "tokens[].replace", "dependency.get", "len", "len", "str", "str", "int", "int", "dependency.get().split", "dependency.get().split", "dependency.get", "dependency.get", "dependency.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokens", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "exportStanfordDependencies", "(", "parseElement", ",", "tokenizationElement", ",", "outFile", ",", "tokenIdOffset", "=", "0", ")", ":", "\n", "    ", "global", "unEscDict", "\n", "escDictKeys", "=", "sorted", "(", "unEscDict", ".", "keys", "(", ")", ")", "\n", "\n", "tokens", "=", "[", "]", "\n", "# Collect tokens", "\n", "if", "tokenizationElement", "!=", "None", ":", "\n", "        ", "tokens", ",", "tokenIdMap", "=", "getTokens", "(", "tokenizationElement", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", ":", "\n", "            ", "for", "key", "in", "escDictKeys", ":", "\n", "                ", "tokens", "[", "i", "]", "=", "tokens", "[", "i", "]", ".", "replace", "(", "key", ",", "unEscDict", "[", "key", "]", ")", "\n", "\n", "# Process dependencies", "\n", "", "", "", "if", "parseElement", "!=", "None", ":", "\n", "        ", "for", "dependency", "in", "parseElement", ".", "findall", "(", "\"dependency\"", ")", ":", "\n", "            ", "if", "dependency", ".", "get", "(", "\"split\"", ")", "!=", "None", ":", "# ignore dependencies created by protein name splitter", "\n", "                ", "continue", "\n", "", "t1Index", "=", "tokenIdMap", "[", "int", "(", "dependency", ".", "get", "(", "\"t1\"", ")", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "+", "tokenIdOffset", "]", "# tokenIdOffset can convert to zero-based", "\n", "t2Index", "=", "tokenIdMap", "[", "int", "(", "dependency", ".", "get", "(", "\"t2\"", ")", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "+", "tokenIdOffset", "]", "# tokenIdOffset can convert to zero-based", "\n", "assert", "t1Index", "<", "len", "(", "tokens", ")", ",", "(", "t1Index", ",", "tokens", ",", "tokenIdMap", ",", "dependency", ".", "attrib", ")", "\n", "assert", "t2Index", "<", "len", "(", "tokens", ")", ",", "(", "t2Index", ",", "tokens", ",", "tokenIdMap", ",", "dependency", ".", "attrib", ")", "\n", "t1", "=", "tokens", "[", "t1Index", "]", "+", "\"-\"", "+", "str", "(", "t1Index", "+", "1", ")", "\n", "t2", "=", "tokens", "[", "t2Index", "]", "+", "\"-\"", "+", "str", "(", "t2Index", "+", "1", ")", "\n", "outFile", ".", "write", "(", "dependency", ".", "get", "(", "\"type\"", ")", "+", "\"(\"", "+", "t1", "+", "\", \"", "+", "t2", "+", "\")\\n\"", ")", "\n", "", "", "outFile", ".", "write", "(", "\"\\n\"", ")", "# one more newline to end the sentence (or to mark a sentence with no dependencies)", "\n", "if", "parseElement", "!=", "None", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.export": [[103, 171], ["sorted", "os.path.exists", "shutil.rmtree", "os.path.exists", "os.makedirs", "Utils.ETFromObj().getroot", "ETUtils.ETFromObj().getroot.findall", "Utils.ProgressCounter.ProgressCounter", "collections.defaultdict", "collections.defaultdict.keys", "inputFileNames.append", "len", "Utils.ProgressCounter.ProgressCounter.update", "document.get", "document.findall", "Utils.ETFromObj", "document.get", "document.get", "codecs.open", "sentence.getiterator", "sentence.getiterator", "outfiles[].close", "os.path.exists", "parseElement.get", "ExportParse.exportTokenization", "ExportParse.exportPennTreeBank", "ExportParse.exportStanfordDependencies", "str", "e.get", "e.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.exportTokenization", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.exportPennTreeBank", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.exportStanfordDependencies", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "export", "(", "input", ",", "output", ",", "parse", ",", "tokenization", "=", "None", ",", "toExport", "=", "[", "\"tok\"", ",", "\"ptb\"", ",", "\"sd\"", "]", ",", "inputSuffixes", "=", "None", ",", "clear", "=", "False", ",", "tokenIdOffset", "=", "0", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"##### Export Parse #####\"", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "output", ")", "and", "clear", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "output", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "output", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output", ")", "\n", "", "if", "inputSuffixes", "!=", "None", ":", "\n", "        ", "inputFileNames", "=", "[", "]", "\n", "for", "suffix", "in", "inputSuffixes", ":", "\n", "            ", "inputFileNames", ".", "append", "(", "input", "+", "suffix", ")", "\n", "", "", "else", ":", "\n", "        ", "inputFileNames", "=", "[", "input", "]", "\n", "\n", "", "for", "inputFileName", "in", "inputFileNames", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Processing input file\"", ",", "inputFileName", "\n", "corpusRoot", "=", "ETUtils", ".", "ETFromObj", "(", "inputFileName", ")", ".", "getroot", "(", ")", "\n", "documents", "=", "corpusRoot", ".", "findall", "(", "\"document\"", ")", "\n", "counter", "=", "ProgressCounter", "(", "len", "(", "documents", ")", ",", "\"Documents\"", ")", "\n", "counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "document", "in", "documents", ":", "\n", "            ", "counter", ".", "update", "(", ")", "\n", "docId", "=", "document", ".", "get", "(", "\"pmid\"", ")", "\n", "if", "docId", "==", "None", ":", "\n", "                ", "docId", "=", "document", ".", "get", "(", "\"origId\"", ")", "\n", "", "if", "docId", "==", "None", ":", "\n", "                ", "docId", "=", "document", ".", "get", "(", "\"id\"", ")", "\n", "", "counts", "[", "\"document\"", "]", "+=", "1", "\n", "# Open document output files", "\n", "outfiles", "=", "{", "}", "\n", "for", "fileExt", "in", "toExport", ":", "\n", "                ", "outfilePath", "=", "output", "+", "\"/\"", "+", "docId", "+", "\".\"", "+", "fileExt", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "outfilePath", ")", "# check for overlapping files", "\n", "outfiles", "[", "fileExt", "]", "=", "codecs", ".", "open", "(", "outfilePath", ",", "\"wt\"", ",", "\"utf-8\"", ")", "\n", "# Process all the sentences in the document", "\n", "", "for", "sentence", "in", "document", ".", "findall", "(", "\"sentence\"", ")", ":", "\n", "                ", "counts", "[", "\"sentence\"", "]", "+=", "1", "\n", "parseElement", "=", "None", "\n", "for", "e", "in", "sentence", ".", "getiterator", "(", "\"parse\"", ")", ":", "\n", "                    ", "if", "e", ".", "get", "(", "\"parser\"", ")", "==", "parse", ":", "\n", "                        ", "parseElement", "=", "e", "\n", "counts", "[", "\"parse\"", "]", "+=", "1", "\n", "break", "\n", "", "", "if", "tokenization", "==", "None", ":", "\n", "                    ", "tokenization", "=", "parseElement", ".", "get", "(", "\"tokenizer\"", ")", "\n", "", "tokenizationElement", "=", "None", "\n", "for", "e", "in", "sentence", ".", "getiterator", "(", "\"tokenization\"", ")", ":", "\n", "                    ", "if", "e", ".", "get", "(", "\"tokenizer\"", ")", "==", "tokenization", ":", "\n", "                        ", "tokenizationElement", "=", "e", "\n", "counts", "[", "\"tokenization\"", "]", "+=", "1", "\n", "break", "\n", "", "", "if", "\"tok\"", "in", "outfiles", ":", "\n", "                    ", "if", "exportTokenization", "(", "tokenizationElement", ",", "parseElement", ",", "sentence", ",", "outfiles", "[", "\"tok\"", "]", ")", ":", "\n", "                        ", "counts", "[", "\"tok\"", "]", "+=", "1", "\n", "", "", "if", "\"ptb\"", "in", "outfiles", ":", "\n", "                    ", "if", "exportPennTreeBank", "(", "parseElement", ",", "outfiles", "[", "\"ptb\"", "]", ")", ":", "\n", "                        ", "counts", "[", "\"ptb\"", "]", "+=", "1", "\n", "", "", "if", "\"sd\"", "in", "outfiles", ":", "\n", "                    ", "if", "exportStanfordDependencies", "(", "parseElement", ",", "tokenizationElement", ",", "outfiles", "[", "\"sd\"", "]", ",", "tokenIdOffset", ")", ":", "\n", "                        ", "counts", "[", "\"sd\"", "]", "+=", "1", "\n", "# Close document output files", "\n", "", "", "", "for", "fileExt", "in", "outfiles", ":", "\n", "                ", "outfiles", "[", "fileExt", "]", ".", "close", "(", ")", "\n", "outfiles", "[", "fileExt", "]", "=", "None", "\n", "\n", "", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Parse export counts:\"", "\n", "for", "k", "in", "sorted", "(", "counts", ".", "keys", "(", ")", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"  \"", "+", "str", "(", "k", ")", "+", "\":\"", ",", "counts", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DivideSets.processCorpus": [[11, 66], ["Utils.ETFromObj().getroot", "ETUtils.ETFromObj().getroot.findall", "Utils.ProgressCounter.ProgressCounter", "sorted", "sorted", "len", "Utils.ProgressCounter.ProgressCounter.update", "document.get", "newCorpora[].append", "countsByType.keys", "os.path.exists", "os.makedirs", "Utils.write", "newCorpora.keys", "os.path.join", "Utils.write", "Utils.ETFromObj", "sorted", "newCorpora.has_key", "ET.Element", "ETUtils.ETFromObj().getroot.attrib.iteritems", "newCorpora[].findall", "countsByType.has_key", "newCorpora.has_key", "ET.Element", "ETUtils.ETFromObj().getroot.attrib.iteritems", "newCorpora[].set", "newCorpora[].append", "document.get", "newCorpora[].set", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Connection.UnixConnection.UnixConnection.exists", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "processCorpus", "(", "input", ",", "outDir", ",", "stem", ",", "tail", ",", "mergedSets", "=", "[", "]", ",", "saveCombined", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "newCorpora", "=", "{", "}", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus file\"", ",", "input", "\n", "corpusRoot", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", ".", "getroot", "(", ")", "\n", "\n", "documents", "=", "corpusRoot", ".", "findall", "(", "\"document\"", ")", "\n", "counter", "=", "ProgressCounter", "(", "len", "(", "documents", ")", ",", "\"Documents\"", ")", "\n", "countsByType", "=", "{", "}", "\n", "for", "document", "in", "documents", ":", "\n", "        ", "counter", ".", "update", "(", ")", "\n", "docSet", "=", "document", ".", "get", "(", "\"set\"", ")", "\n", "if", "docSet", "==", "None", ":", "\n", "            ", "if", "verbose", ":", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, no set defined for document\"", ",", "document", ".", "get", "(", "\"id\"", ")", "\n", "if", "not", "countsByType", ".", "has_key", "(", "\"No set\"", ")", ":", "\n", "                ", "countsByType", "[", "\"No set\"", "]", "=", "0", "\n", "", "countsByType", "[", "\"No set\"", "]", "+=", "1", "\n", "continue", "\n", "", "elif", "not", "newCorpora", ".", "has_key", "(", "docSet", ")", ":", "\n", "            ", "newCorpora", "[", "docSet", "]", "=", "ET", ".", "Element", "(", "\"corpus\"", ")", "\n", "for", "k", ",", "v", "in", "corpusRoot", ".", "attrib", ".", "iteritems", "(", ")", ":", "\n", "                ", "newCorpora", "[", "docSet", "]", ".", "set", "(", "k", ",", "v", ")", "\n", "", "countsByType", "[", "docSet", "]", "=", "0", "\n", "", "newCorpora", "[", "docSet", "]", ".", "append", "(", "document", ")", "\n", "countsByType", "[", "docSet", "]", "+=", "1", "\n", "\n", "# Make merged sets", "\n", "", "for", "mergedSet", "in", "mergedSets", ":", "\n", "        ", "tag", "=", "\"-and-\"", ".", "join", "(", "sorted", "(", "mergedSet", ")", ")", "\n", "if", "not", "newCorpora", ".", "has_key", "(", "tag", ")", ":", "\n", "            ", "newCorpora", "[", "tag", "]", "=", "ET", ".", "Element", "(", "\"corpus\"", ")", "\n", "for", "k", ",", "v", "in", "corpusRoot", ".", "attrib", ".", "iteritems", "(", ")", ":", "\n", "                ", "newCorpora", "[", "tag", "]", ".", "set", "(", "k", ",", "v", ")", "\n", "", "countsByType", "[", "tag", "]", "=", "0", "\n", "", "for", "componentSet", "in", "mergedSet", ":", "\n", "            ", "for", "element", "in", "newCorpora", "[", "componentSet", "]", ".", "findall", "(", "\"document\"", ")", ":", "\n", "                ", "newCorpora", "[", "tag", "]", ".", "append", "(", "element", ")", "\n", "countsByType", "[", "tag", "]", "+=", "1", "\n", "\n", "", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Documents per set\"", "\n", "for", "k", "in", "sorted", "(", "countsByType", ".", "keys", "(", ")", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"  \"", "+", "str", "(", "k", ")", "+", "\":\"", ",", "countsByType", "[", "k", "]", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "outDir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outDir", ")", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output files to directory\"", ",", "outDir", "\n", "if", "saveCombined", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Saving combined input to\"", ",", "stem", "+", "tail", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "stem", "+", "tail", ")", "\n", "", "else", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Combined input not saved\"", "\n", "", "for", "docSet", "in", "sorted", "(", "newCorpora", ".", "keys", "(", ")", ")", ":", "\n", "        ", "outFilename", "=", "os", ".", "path", ".", "join", "(", "outDir", ",", "stem", "+", "\"-\"", "+", "docSet", "+", "tail", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Writing set\"", ",", "docSet", ",", "\"to\"", ",", "outFilename", "\n", "ETUtils", ".", "write", "(", "newCorpora", "[", "docSet", "]", ",", "outFilename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.CorpusElements.CorpusElements.__init__": [[22, 53], ["rootElement.findall", "Exception", "documentElement.findall", "CorpusElements.CorpusElements.documentSentences.append", "SentenceElements.SentenceElements.SentenceElements", "sentenceElement.attrib.has_key", "CorpusElements.CorpusElements.sentences.append", "CorpusElements.CorpusElements.documentSentences[].append", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rootElement", ",", "parse", ",", "tokenization", "=", "None", ",", "removeIntersentenceInteractions", "=", "True", ",", "tree", "=", "None", ",", "removeNameInfo", "=", "False", ")", ":", "\n", "        ", "self", ".", "tree", "=", "tree", "\n", "self", ".", "rootElement", "=", "rootElement", "\n", "if", "rootElement", ".", "tag", "!=", "\"corpus\"", ":", "\n", "            ", "raise", "Exception", "(", "\"Corpus root element is not 'corpus', but '\"", "+", "str", "(", "rootElement", ".", "tag", ")", "+", "\"'\"", ")", "\n", "", "self", ".", "documents", "=", "rootElement", ".", "findall", "(", "\"document\"", ")", "\n", "self", ".", "documentsById", "=", "{", "}", "\n", "self", ".", "sentencesById", "=", "{", "}", "\n", "self", ".", "sentencesByOrigId", "=", "{", "}", "\n", "self", ".", "sentences", "=", "[", "]", "\n", "self", ".", "documentSentences", "=", "[", "]", "\n", "counts", "=", "{", "\"sentences\"", ":", "0", ",", "\"missing-tok\"", ":", "0", ",", "\"missing-parse\"", ":", "0", "}", "\n", "for", "documentElement", "in", "self", ".", "documents", ":", "\n", "            ", "self", ".", "documentsById", "[", "documentElement", ".", "attrib", "[", "\"id\"", "]", "]", "=", "documentElement", "\n", "sentenceElements", "=", "documentElement", ".", "findall", "(", "\"sentence\"", ")", "\n", "self", ".", "documentSentences", ".", "append", "(", "[", "]", ")", "\n", "for", "sentenceElement", "in", "sentenceElements", ":", "\n", "                ", "counts", "[", "\"sentences\"", "]", "+=", "1", "\n", "sentenceObj", "=", "SentenceElements", "(", "sentenceElement", ",", "parse", ",", "tokenization", ",", "removeIntersentenceInteractions", ")", "\n", "self", ".", "sentencesById", "[", "sentenceElement", ".", "attrib", "[", "\"id\"", "]", "]", "=", "sentenceObj", "\n", "if", "sentenceElement", ".", "attrib", ".", "has_key", "(", "\"origId\"", ")", ":", "\n", "                    ", "self", ".", "sentencesByOrigId", "[", "sentenceElement", ".", "attrib", "[", "\"origId\"", "]", "]", "=", "sentenceObj", "\n", "", "self", ".", "sentences", ".", "append", "(", "sentenceObj", ")", "\n", "self", ".", "documentSentences", "[", "-", "1", "]", ".", "append", "(", "sentenceObj", ")", "\n", "if", "parse", "!=", "None", "and", "sentenceObj", ".", "tokenizationElement", "==", "None", ":", "\n", "                    ", "counts", "[", "\"missing-tok\"", "]", "+=", "1", "\n", "", "if", "parse", "!=", "None", "and", "sentenceObj", ".", "parseElement", "==", "None", ":", "\n", "                    ", "counts", "[", "\"missing-parse\"", "]", "+=", "1", "\n", "", "", "", "if", "counts", "[", "\"missing-tok\"", "]", "+", "counts", "[", "\"missing-parse\"", "]", ">", "0", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, parse missing from\"", ",", "counts", "[", "\"missing-parse\"", "]", ",", "\"and tokenization from\"", ",", "counts", "[", "\"missing-tok\"", "]", ",", "\"sentences out of a total of\"", ",", "counts", "[", "\"sentences\"", "]", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Requested parse\"", ",", "parse", ",", "\"and tokenization\"", ",", "tokenization", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.CorpusElements.loadCorpus": [[8, 20], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "CorpusElements.CorpusElements", "type"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj"], ["def", "loadCorpus", "(", "filename", ",", "parse", "=", "None", ",", "tokenization", "=", "None", ",", "removeIntersentenceInteractions", "=", "True", ",", "removeNameInfo", "=", "False", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "xml", ".", "etree", ".", "cElementTree", "as", "ET", "\n", "", "except", "ImportError", ":", "\n", "        ", "import", "cElementTree", "as", "ET", "\n", "", "import", "sys", ",", "gzip", "\n", "\n", "if", "type", "(", "filename", ")", "==", "types", ".", "StringType", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus file\"", ",", "filename", "\n", "", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "filename", ")", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "return", "CorpusElements", "(", "corpusRoot", ",", "parse", ",", "tokenization", ",", "removeIntersentenceInteractions", ",", "corpusTree", ",", "removeNameInfo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ConvertPMC.convert": [[11, 46], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "ET.Element.append", "ET.ElementTree", "ET.Element", "ET.Element.set", "ConvertPMC.addElements", "Utils.write"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ConvertPMC.addElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write"], ["def", "convert", "(", "input", ",", "output", "=", "None", ",", "outputRoot", "=", "None", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"##### Convert PMC to Interaction XML #####\"", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "input", "\n", "pmcTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Corpus file loaded\"", "\n", "pmcRoot", "=", "pmcTree", ".", "getroot", "(", ")", "\n", "\n", "includeElements", "=", "[", "\n", "\"front\"", ",", "\n", "\"article-meta\"", ",", "\n", "\"title-group\"", ",", "\n", "\"article-title\"", ",", "\n", "\"abstract\"", ",", "\n", "\"body\"", ",", "\n", "\"sec\"", ",", "\n", "\"p\"", ",", "\n", "\"title\"", "]", "\n", "collapseElements", "=", "[", "\n", "\"front\"", ",", "\n", "\"article-meta\"", ",", "\n", "\"title-group\"", ",", "\n", "\"p\"", "]", "\n", "\n", "if", "outputRoot", "==", "None", ":", "\n", "        ", "outputRoot", "=", "ET", ".", "Element", "(", "\"corpus\"", ")", "\n", "outputRoot", ".", "set", "(", "\"source\"", ",", "\"PMC\"", ")", "\n", "\n", "", "outputRoot", ".", "append", "(", "addElements", "(", "pmcRoot", ",", "includeElements", ",", "collapseElements", ")", ")", "\n", "\n", "outputTree", "=", "ET", ".", "ElementTree", "(", "outputRoot", ")", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "outputTree", ",", "output", ")", "\n", "", "return", "outputTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ConvertPMC.addElements": [[47, 88], ["ET.Element", "pmcElement.getiterator", "ET.Element.set", "list", "str", "ConvertPMC.getText", "ConvertPMC.addElements", "idElement.get", "ET.Element", "ET.Element.set", "ET.Element.set", "pmcElement.get", "ET.Element.set", "ET.Element.append", "childCounts.has_key", "ET.Element.set", "ET.Element.set", "str", "getText.strip", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ConvertPMC.getText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ConvertPMC.addElements", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "addElements", "(", "pmcElement", ",", "includeElements", ",", "collapseElements", ",", "outputParent", "=", "None", ",", "pmcPath", "=", "\"\"", ",", "secCount", "=", "[", "0", "]", ",", "articleId", "=", "None", ")", ":", "\n", "    ", "stop", "=", "False", "\n", "if", "pmcElement", ".", "tag", "==", "\"article\"", ":", "\n", "        ", "assert", "articleId", "==", "None", "\n", "outputParent", "=", "ET", ".", "Element", "(", "\"document\"", ")", "\n", "pmid", "=", "None", "\n", "for", "idElement", "in", "pmcElement", ".", "getiterator", "(", "\"article-id\"", ")", ":", "\n", "            ", "if", "idElement", ".", "get", "(", "\"pub-id-type\"", ")", "==", "\"pmid\"", ":", "\n", "                ", "pmid", "=", "idElement", ".", "text", "\n", "break", "\n", "", "", "articleId", "=", "\"PMC\"", "+", "\".d\"", "+", "str", "(", "pmid", ")", "\n", "outputParent", ".", "set", "(", "\"id\"", ",", "articleId", ")", "\n", "", "elif", "pmcElement", ".", "tag", "in", "includeElements", ":", "\n", "        ", "pmcElementText", "=", "getText", "(", "pmcElement", ")", "\n", "if", "(", "pmcElementText", "!=", "None", "and", "pmcElementText", ".", "strip", "(", ")", "!=", "\"\"", ")", "or", "pmcElement", ".", "tag", "not", "in", "collapseElements", ":", "\n", "            ", "section", "=", "ET", ".", "Element", "(", "\"section\"", ")", "\n", "section", ".", "set", "(", "\"id\"", ",", "articleId", "+", "\".c\"", "+", "str", "(", "secCount", "[", "0", "]", ")", ")", "\n", "secCount", "[", "0", "]", "+=", "1", "\n", "section", ".", "set", "(", "\"type\"", ",", "pmcElement", ".", "tag", ")", "\n", "pmcElementId", "=", "pmcElement", ".", "get", "(", "\"id\"", ")", "\n", "if", "pmcElementId", "!=", "None", ":", "\n", "                ", "section", ".", "set", "(", "\"secId\"", ",", "pmcElementId", ")", "\n", "", "section", ".", "set", "(", "\"pmcPath\"", ",", "pmcPath", ")", "\n", "if", "pmcElementText", "!=", "None", ":", "\n", "                ", "section", ".", "set", "(", "\"text\"", ",", "pmcElementText", ")", "\n", "", "outputParent", ".", "append", "(", "section", ")", "\n", "outputParent", "=", "section", "\n", "", "", "else", ":", "\n", "        ", "stop", "=", "True", "\n", "\n", "", "if", "not", "stop", ":", "\n", "        ", "childCounts", "=", "{", "}", "\n", "for", "pmcChild", "in", "list", "(", "pmcElement", ")", ":", "\n", "            ", "childTag", "=", "pmcChild", ".", "tag", "\n", "if", "not", "childCounts", ".", "has_key", "(", "childTag", ")", ":", "\n", "                ", "childCounts", "[", "childTag", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "childCounts", "[", "childTag", "]", "+=", "1", "\n", "", "addElements", "(", "pmcChild", ",", "includeElements", ",", "collapseElements", ",", "outputParent", ",", "pmcPath", "+", "\"/\"", "+", "childTag", "+", "\"-\"", "+", "str", "(", "childCounts", "[", "childTag", "]", ")", ",", "secCount", ",", "articleId", ")", "\n", "\n", "", "", "return", "outputParent", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ConvertPMC.getText": [[89, 102], ["list"], "function", ["None"], ["", "def", "getText", "(", "element", ")", ":", "\n", "    ", "text", "=", "element", ".", "text", "\n", "if", "text", "==", "None", "or", "text", "==", "\"\"", ":", "\n", "        ", "return", "text", "\n", "", "for", "child", "in", "list", "(", "element", ")", ":", "\n", "        ", "assert", "child", ".", "tag", "in", "(", "\"xref\"", ",", "\"italic\"", ",", "\"bold\"", ",", "\"fig\"", ",", "\"ext-link\"", ")", ",", "child", ".", "tag", "\n", "if", "child", ".", "text", "!=", "None", ":", "\n", "            ", "text", "+=", "child", ".", "text", "\n", "", "if", "child", ".", "tail", "!=", "None", ":", "\n", "            ", "text", "+=", "child", ".", "tail", "\n", "", "", "while", "text", "[", "-", "1", "]", "==", "\"\\n\"", ":", "\n", "        ", "text", "=", "text", "[", ":", "-", "1", "]", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MakeSubset.makeSubset": [[7, 44], ["Utils.ETFromObj().getroot", "ETUtils.ETFromObj().getroot.findall", "min", "int", "Core.Split.getFolds", "ETUtils.ETFromObj().getroot.findall", "ETUtils.ETFromObj().getroot.set", "ETUtils.ETFromObj().getroot.set", "len", "str", "str", "Utils.write", "shutil.copy2", "Utils.ETFromObj", "document.findall", "min", "ETUtils.ETFromObj().getroot.remove", "len", "document.findall"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj"], ["def", "makeSubset", "(", "input", ",", "output", "=", "None", ",", "ratio", "=", "1.0", ",", "seed", "=", "0", ",", "invert", "=", "False", ")", ":", "\n", "    ", "if", "ratio", "==", "1.0", ":", "\n", "        ", "if", "output", "!=", "None", ":", "\n", "            ", "shutil", ".", "copy2", "(", "input", ",", "output", ")", "\n", "return", "output", "\n", "", "else", ":", "\n", "            ", "return", "input", "\n", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"====== Making subset ======\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Subset for \"", ",", "input", ",", "\"ratio\"", ",", "ratio", ",", "\"seed\"", ",", "seed", "\n", "xml", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", ".", "getroot", "(", ")", "\n", "count", "=", "0", "\n", "sentCount", "=", "0", "\n", "for", "document", "in", "xml", ".", "findall", "(", "\"document\"", ")", ":", "\n", "        ", "sentCount", "+=", "len", "(", "document", ".", "findall", "(", "\"sentence\"", ")", ")", "\n", "count", "+=", "1", "\n", "", "totalFolds", "=", "min", "(", "100", ",", "count", ")", "\n", "selectedFolds", "=", "int", "(", "ratio", "*", "min", "(", "100", ",", "count", ")", ")", "\n", "division", "=", "Core", ".", "Split", ".", "getFolds", "(", "count", ",", "totalFolds", ",", "seed", ")", "\n", "#print division, selectedFolds - 1", "\n", "index", "=", "0", "\n", "removeCount", "=", "0", "\n", "sentRemoveCount", "=", "0", "\n", "for", "document", "in", "xml", ".", "findall", "(", "\"document\"", ")", ":", "\n", "        ", "removal", "=", "division", "[", "index", "]", ">", "selectedFolds", "-", "1", "\n", "if", "invert", ":", "\n", "            ", "removal", "=", "not", "removal", "\n", "", "if", "removal", ":", "\n", "            ", "xml", ".", "remove", "(", "document", ")", "\n", "sentRemoveCount", "+=", "len", "(", "document", ".", "findall", "(", "\"sentence\"", ")", ")", "\n", "removeCount", "+=", "1", "\n", "", "index", "+=", "1", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Subset\"", ",", "\"doc:\"", ",", "count", ",", "\"removed:\"", ",", "removeCount", ",", "\"sent:\"", ",", "sentCount", ",", "\"sentremoved:\"", ",", "sentRemoveCount", "\n", "xml", ".", "set", "(", "\"subsetRatio\"", ",", "str", "(", "ratio", ")", ")", "\n", "xml", ".", "set", "(", "\"subsetSeed\"", ",", "str", "(", "seed", ")", ")", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "ETUtils", ".", "write", "(", "xml", ",", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.removeAttributes": [[11, 19], ["parent.getchildren", "DeleteAttributes.removeAttributes", "element.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.removeAttributes", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "removeAttributes", "(", "parent", ",", "elementName", ",", "attributes", ",", "countsByType", ")", ":", "\n", "    ", "for", "element", "in", "parent", ".", "getchildren", "(", ")", ":", "\n", "        ", "if", "element", ".", "tag", "==", "elementName", ":", "\n", "            ", "for", "attribute", "in", "attributes", ":", "\n", "                ", "if", "element", ".", "get", "(", "attribute", ")", "!=", "None", ":", "\n", "                    ", "del", "element", ".", "attrib", "[", "attribute", "]", "\n", "countsByType", "[", "elementName", "+", "\":\"", "+", "attribute", "]", "+=", "1", "\n", "", "", "", "removeAttributes", "(", "element", ",", "elementName", ",", "attributes", ",", "countsByType", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.processCorpus": [[20, 43], ["ET.parse.getroot", "sorted", "sorted", "ET.parse", "ET.parse", "rules.keys", "DeleteAttributes.removeAttributes", "countsByType.keys", "Utils.write", "inputFilename.rsplit", "gzip.open"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.parse", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Tools.BLLIPParser.parse", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.DeleteAttributes.removeAttributes", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["", "", "def", "processCorpus", "(", "inputFilename", ",", "outputFilename", ",", "rules", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus file\"", ",", "inputFilename", "\n", "if", "inputFilename", ".", "rsplit", "(", "\".\"", ",", "1", ")", "[", "-", "1", "]", "==", "\"gz\"", ":", "\n", "        ", "import", "gzip", "\n", "corpusTree", "=", "ET", ".", "parse", "(", "gzip", ".", "open", "(", "inputFilename", ")", ")", "\n", "", "else", ":", "\n", "        ", "corpusTree", "=", "ET", ".", "parse", "(", "inputFilename", ")", "\n", "", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "countsByType", "=", "{", "}", "\n", "for", "key", "in", "sorted", "(", "rules", ".", "keys", "(", ")", ")", ":", "\n", "        ", "for", "attribute", "in", "rules", "[", "key", "]", ":", "\n", "            ", "countsByType", "[", "key", "+", "\":\"", "+", "attribute", "]", "=", "0", "\n", "", "removeAttributes", "(", "corpusRoot", ",", "key", ",", "rules", "[", "key", "]", ",", "countsByType", ")", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Removed\"", "\n", "for", "k", "in", "sorted", "(", "countsByType", ".", "keys", "(", ")", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"  \"", "+", "k", "+", "\":\"", ",", "countsByType", "[", "k", "]", "\n", "\n", "", "if", "outputFilename", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "outputFilename", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "outputFilename", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.RecalculateIds.recalculateIds": [[9, 79], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "corpusTree.getroot.findall", "document.findall", "document.findall", "Utils.write", "sentence.findall", "sentence.findall", "sentence.findall", "str", "entity.get", "str", "entDictionary.has_key", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "recalculateIds", "(", "input", ",", "output", "=", "None", ",", "onlyWithinSentence", "=", "False", ",", "docIndexStart", "=", "0", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"##### Recalculate hierarchical interaction XML ids #####\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "input", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Corpus file loaded\"", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "# Rebuild hierarchical ids", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Recalculating interaction xml ids\"", "\n", "corpusName", "=", "corpusRoot", ".", "attrib", "[", "\"source\"", "]", "\n", "documents", "=", "corpusRoot", ".", "findall", "(", "\"document\"", ")", "\n", "# Recalculate ids for documents, sentences and entities", "\n", "entDictionary", "=", "{", "}", "\n", "docIndex", "=", "docIndexStart", "\n", "for", "document", "in", "documents", ":", "\n", "        ", "if", "not", "onlyWithinSentence", ":", "\n", "            ", "document", ".", "attrib", "[", "\"id\"", "]", "=", "corpusName", "+", "\".d\"", "+", "str", "(", "docIndex", ")", "\n", "", "sentIndex", "=", "0", "\n", "sentences", "=", "document", ".", "findall", "(", "\"sentence\"", ")", "\n", "for", "sentence", "in", "sentences", ":", "\n", "            ", "if", "not", "onlyWithinSentence", ":", "\n", "                ", "sentence", ".", "attrib", "[", "\"id\"", "]", "=", "corpusName", "+", "\".d\"", "+", "str", "(", "docIndex", ")", "+", "\".s\"", "+", "str", "(", "sentIndex", ")", "\n", "", "entIndex", "=", "0", "\n", "entities", "=", "sentence", ".", "findall", "(", "\"entity\"", ")", "\n", "for", "entity", "in", "entities", ":", "\n", "                ", "if", "not", "onlyWithinSentence", ":", "\n", "                    ", "entNewId", "=", "corpusName", "+", "\".d\"", "+", "str", "(", "docIndex", ")", "+", "\".s\"", "+", "str", "(", "sentIndex", ")", "+", "\".e\"", "+", "str", "(", "entIndex", ")", "\n", "", "else", ":", "\n", "                    ", "entNewId", "=", "sentence", ".", "attrib", "[", "\"id\"", "]", "+", "\".e\"", "+", "str", "(", "entIndex", ")", "\n", "", "assert", "not", "entDictionary", ".", "has_key", "(", "entity", ".", "attrib", "[", "\"id\"", "]", ")", ",", "entity", ".", "get", "(", "\"id\"", ")", "\n", "entDictionary", "[", "entity", ".", "attrib", "[", "\"id\"", "]", "]", "=", "entNewId", "\n", "entity", ".", "attrib", "[", "\"id\"", "]", "=", "entNewId", "\n", "entIndex", "+=", "1", "\n", "", "sentIndex", "+=", "1", "\n", "", "docIndex", "+=", "1", "\n", "# Recalculate ids for pairs and interactions", "\n", "", "docIndex", "=", "docIndexStart", "\n", "for", "document", "in", "documents", ":", "\n", "        ", "sentences", "=", "document", ".", "findall", "(", "\"sentence\"", ")", "\n", "sentIndex", "=", "0", "\n", "for", "sentence", "in", "sentences", ":", "\n", "            ", "interactions", "=", "sentence", ".", "findall", "(", "\"interaction\"", ")", "\n", "intIndex", "=", "0", "\n", "for", "interaction", "in", "interactions", ":", "\n", "                ", "if", "onlyWithinSentence", ":", "\n", "                    ", "interaction", ".", "attrib", "[", "\"id\"", "]", "=", "sentence", ".", "attrib", "[", "\"id\"", "]", "+", "\".i\"", "+", "str", "(", "intIndex", ")", "\n", "", "else", ":", "\n", "                    ", "interaction", ".", "attrib", "[", "\"id\"", "]", "=", "corpusName", "+", "\".d\"", "+", "str", "(", "docIndex", ")", "+", "\".s\"", "+", "str", "(", "sentIndex", ")", "+", "\".i\"", "+", "str", "(", "intIndex", ")", "\n", "", "if", "interaction", ".", "attrib", "[", "\"e1\"", "]", "in", "entDictionary", ":", "\n", "                    ", "interaction", ".", "attrib", "[", "\"e1\"", "]", "=", "entDictionary", "[", "interaction", ".", "attrib", "[", "\"e1\"", "]", "]", "\n", "", "if", "interaction", ".", "attrib", "[", "\"e2\"", "]", "in", "entDictionary", ":", "\n", "                    ", "interaction", ".", "attrib", "[", "\"e2\"", "]", "=", "entDictionary", "[", "interaction", ".", "attrib", "[", "\"e2\"", "]", "]", "\n", "", "intIndex", "+=", "1", "\n", "", "pairs", "=", "sentence", ".", "findall", "(", "\"pair\"", ")", "\n", "pairIndex", "=", "0", "\n", "for", "pair", "in", "pairs", ":", "\n", "                ", "if", "onlyWithinSentence", ":", "\n", "                    ", "pair", ".", "attrib", "[", "\"id\"", "]", "=", "sentence", ".", "attrib", "[", "\"id\"", "]", "+", "\".p\"", "+", "str", "(", "pairIndex", ")", "\n", "", "else", ":", "\n", "                    ", "pair", ".", "attrib", "[", "\"id\"", "]", "=", "corpusName", "+", "\".d\"", "+", "str", "(", "docIndex", ")", "+", "\".s\"", "+", "str", "(", "sentIndex", ")", "+", "\".p\"", "+", "str", "(", "pairIndex", ")", "\n", "", "pair", ".", "attrib", "[", "\"e1\"", "]", "=", "entDictionary", "[", "pair", ".", "attrib", "[", "\"e1\"", "]", "]", "\n", "pair", ".", "attrib", "[", "\"e2\"", "]", "=", "entDictionary", "[", "pair", ".", "attrib", "[", "\"e2\"", "]", "]", "\n", "pairIndex", "+=", "1", "\n", "", "sentIndex", "+=", "1", "\n", "", "docIndex", "+=", "1", "\n", "\n", "", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "output", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId": [[10, 12], ["element.get().replace", "element.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "getId", "(", "element", ",", "attribute", "=", "\"id\"", ")", ":", "\n", "    ", "return", "element", ".", "get", "(", "attribute", ")", ".", "replace", "(", "\".\"", ",", "\"_\"", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getColorScheme": [[13, 18], ["None"], "function", ["None"], ["", "def", "getColorScheme", "(", "scheme", ")", ":", "\n", "    ", "if", "scheme", "!=", "None", ":", "\n", "        ", "return", "\"colorscheme=\"", "+", "scheme", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getColor": [[19, 23], ["str", "hash"], "function", ["None"], ["", "", "def", "getColor", "(", "string", ",", "scheme", ",", "numColors", ")", ":", "\n", "    ", "if", "scheme", "==", "None", ":", "\n", "        ", "return", "\"\"", "\n", "", "return", "\"color=\"", "+", "str", "(", "numColors", "-", "hash", "(", "string", ")", "%", "numColors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getHeadScore": [[24, 29], ["token.get", "int", "token.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getHeadScore", "(", "token", ")", ":", "\n", "    ", "headScore", "=", "0", "\n", "if", "token", ".", "get", "(", "\"headScore\"", ")", "!=", "None", ":", "\n", "        ", "headScore", "=", "int", "(", "token", ".", "get", "(", "\"headScore\"", ")", ")", "\n", "", "return", "headScore", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.orderTokens": [[30, 34], ["Utils.charOffsetToSingleTuple", "Utils.charOffsetToSingleTuple", "Utils.order", "token1.get", "token1.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.order", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "orderTokens", "(", "token1", ",", "token2", ")", ":", "\n", "    ", "offset1", "=", "Range", ".", "charOffsetToSingleTuple", "(", "token1", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "offset2", "=", "Range", ".", "charOffsetToSingleTuple", "(", "token1", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "return", "Range", ".", "order", "(", "offset1", ",", "offset2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.groupDependencies": [[35, 59], ["sorted", "range", "len", "depStructs.append", "tokens[].get", "Utils.contains", "abs", "dependency.get", "dependency.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.contains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "groupDependencies", "(", "elements", ")", ":", "\n", "    ", "tokens", "=", "sorted", "(", "elements", ".", "tokens", ",", "cmp", "=", "orderTokens", ")", "\n", "indexByTokenId", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", ":", "\n", "        ", "indexByTokenId", "[", "tokens", "[", "i", "]", ".", "get", "(", "\"id\"", ")", "]", "=", "i", "\n", "\n", "", "depStructs", "=", "[", "]", "\n", "for", "dependency", "in", "elements", ".", "dependencies", ":", "\n", "        ", "depD", "=", "{", "\"range\"", ":", "(", "indexByTokenId", "[", "dependency", ".", "get", "(", "\"t1\"", ")", "]", ",", "indexByTokenId", "[", "dependency", ".", "get", "(", "\"t2\"", ")", "]", ")", "}", "\n", "if", "depD", "[", "\"range\"", "]", "[", "0", "]", ">", "depD", "[", "\"range\"", "]", "[", "1", "]", ":", "\n", "            ", "depD", "[", "\"range\"", "]", "=", "(", "depD", "[", "\"range\"", "]", "[", "1", "]", ",", "depD", "[", "\"range\"", "]", "[", "0", "]", ")", "\n", "", "depD", "[", "\"dep\"", "]", "=", "dependency", "\n", "depD", "[", "\"child\"", "]", "=", "None", "\n", "depD", "[", "\"childScore\"", "]", "=", "9999", "\n", "depStructs", ".", "append", "(", "depD", ")", "\n", "", "for", "d1", "in", "depStructs", ":", "\n", "        ", "for", "d2", "in", "depStructs", ":", "\n", "            ", "if", "d1", "==", "d2", ":", "\n", "                ", "continue", "\n", "", "if", "d1", "[", "\"range\"", "]", "!=", "d2", "[", "\"range\"", "]", "and", "Range", ".", "contains", "(", "d1", "[", "\"range\"", "]", ",", "d2", "[", "\"range\"", "]", ")", ":", "\n", "                ", "score", "=", "abs", "(", "(", "d2", "[", "\"range\"", "]", "[", "0", "]", "-", "d1", "[", "\"range\"", "]", "[", "0", "]", ")", "-", "(", "d1", "[", "\"range\"", "]", "[", "1", "]", "-", "d2", "[", "\"range\"", "]", "[", "1", "]", ")", ")", "\n", "if", "score", "<", "d1", "[", "\"childScore\"", "]", ":", "\n", "                    ", "d1", "[", "\"child\"", "]", "=", "d2", "\n", "", "", "", "", "return", "depStructs", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.toGraphViz": [[60, 152], ["Utils.ETFromObj().getroot", "ETUtils.ETFromObj().getroot.findall", "SentenceElements.SentenceElements", "Core.SentenceGraph.SentenceGraph", "Core.SentenceGraph.SentenceGraph.mapInteractions", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "GraphViz.groupDependencies", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "subprocess.call", "os.path.join", "document.findall", "tokenIds.append", "open.write", "GraphViz.getColor", "open.write", "open.write", "open.write", "GraphViz.getColor", "open.write", "tempfile.gettempdir", "Utils.ETFromObj", "token.get().replace", "dep.get", "open.write", "entity.get", "open.write", "open.write", "entity.get", "interaction.get", "s.get", "id.replace", "GraphViz.getColorScheme", "GraphViz.getColorScheme", "open.write", "open.write", "GraphViz.getColorScheme", "token.get", "token.get", "dep.get", "interaction.get", "GraphViz.getId", "entity.get", "entity.get", "token.get", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId", "GraphViz.getId"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapInteractions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.groupDependencies", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getColor", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getColor", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getColorScheme", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getColorScheme", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getColorScheme", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "toGraphViz", "(", "input", ",", "id", ",", "output", "=", "None", ",", "parse", "=", "\"McCC\"", ",", "color", "=", "None", ",", "colorNum", "=", "None", ",", "colorParse", "=", "None", ",", "colorNumParse", "=", "None", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"====== Visualizing Sentence with GraphViz (www.graphviz.org) ======\"", "\n", "\n", "if", "output", "==", "None", ":", "\n", "        ", "output", "=", "os", ".", "path", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "id", "+", "\".gv\"", ")", "\n", "\n", "# Get the sentence", "\n", "", "xml", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", ".", "getroot", "(", ")", "\n", "sentence", "=", "None", "\n", "for", "document", "in", "xml", ".", "findall", "(", "\"document\"", ")", ":", "\n", "        ", "for", "s", "in", "document", ".", "findall", "(", "\"sentence\"", ")", ":", "\n", "            ", "if", "s", ".", "get", "(", "\"id\"", ")", "==", "id", ":", "\n", "                ", "sentence", "=", "s", "\n", "break", "\n", "", "", "", "if", "sentence", "==", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"No sentence for id\"", ",", "id", "\n", "return", "\n", "\n", "", "elements", "=", "SentenceElements", ".", "SentenceElements", "(", "sentence", ",", "parse", ")", "\n", "graph", "=", "SentenceGraph", "(", "elements", ".", "sentence", ",", "elements", ".", "tokens", ",", "elements", ".", "dependencies", ")", "\n", "graph", ".", "mapInteractions", "(", "elements", ".", "entities", ",", "elements", ".", "interactions", ")", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Graph file saved to: \"", "+", "output", "\n", "f", "=", "open", "(", "output", ",", "\"wt\"", ")", "\n", "f", ".", "write", "(", "\"digraph \"", "+", "id", ".", "replace", "(", "\".\"", ",", "\"_\"", ")", "+", "\" {\\n\"", ")", "\n", "#f.write(\"graph [label=\\\"Orthogonal edges\\\", splines=ortho, nodesep=0.1];\\n\")", "\n", "f", ".", "write", "(", "\"graph [nodesep=0.1];\\n\"", ")", "\n", "f", ".", "write", "(", "\"node [shape=box];\\n\\n\"", ")", "\n", "#f.write(\"ranksep=0.5;\")", "\n", "\n", "f", ".", "write", "(", "\"subgraph tokens {\\n\"", ")", "\n", "f", ".", "write", "(", "\"edge [weight=1000, arrowhead=none];\\n\"", ")", "\n", "f", ".", "write", "(", "\"rankdir = LR;\\n\"", ")", "\n", "f", ".", "write", "(", "\"rank=\\\"same\\\";\\n\"", ")", "\n", "f", ".", "write", "(", "\"nodesep=0.01;\\n\"", ")", "\n", "#f.write(\"{ rank=\\\"same\\\";\\n\")", "\n", "tokenIds", "=", "[", "]", "\n", "for", "token", "in", "elements", ".", "tokens", ":", "\n", "        ", "tokenIds", ".", "append", "(", "token", ".", "get", "(", "\"id\"", ")", ".", "replace", "(", "\".\"", ",", "\"_\"", ")", ")", "\n", "f", ".", "write", "(", "getId", "(", "token", ")", "+", "\" [margin=0 label=\\\"\"", "+", "token", ".", "get", "(", "\"text\"", ")", "+", "\"\\\\n\"", "+", "token", ".", "get", "(", "\"POS\"", ")", "+", "\"\\\"];\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"->\"", ".", "join", "(", "tokenIds", ")", "+", "\";\\n\"", ")", "\n", "f", ".", "write", "(", "\"}\\n\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"subgraph dependencies {\\n\"", ")", "\n", "f", ".", "write", "(", "\"edge[weight=0.001 \"", "+", "getColorScheme", "(", "colorParse", ")", "+", "\"];\\n\"", ")", "\n", "f", ".", "write", "(", "\"node[\"", "+", "getColorScheme", "(", "colorParse", ")", "+", "\"];\\n\"", ")", "\n", "depStructs", "=", "groupDependencies", "(", "elements", ")", "\n", "for", "depStruct", "in", "depStructs", ":", "\n", "        ", "dep", "=", "depStruct", "[", "\"dep\"", "]", "\n", "depColor", "=", "getColor", "(", "dep", ".", "get", "(", "\"type\"", ")", ",", "colorParse", ",", "colorNumParse", ")", "\n", "f", ".", "write", "(", "getId", "(", "dep", ",", "\"id\"", ")", "+", "\"[\"", "+", "depColor", "+", "\" margin=0 label=\\\"\"", "+", "dep", ".", "get", "(", "\"type\"", ")", "+", "\"\\\"];\\n\"", ")", "\n", "f", ".", "write", "(", "getId", "(", "dep", ",", "\"t1\"", ")", "+", "\" -> \"", "+", "getId", "(", "dep", ",", "\"id\"", ")", "+", "\"[\"", "+", "depColor", "+", "\" weight=10];\\n\"", ")", "\n", "f", ".", "write", "(", "getId", "(", "dep", ",", "\"id\"", ")", "+", "\" -> \"", "+", "getId", "(", "dep", ",", "\"t2\"", ")", "+", "\"[\"", "+", "depColor", "+", "\" weight=10];\\n\"", ")", "\n", "if", "depStruct", "[", "\"child\"", "]", "!=", "None", ":", "\n", "#f.write(getId(dep) + \" -> \" + getId(depStruct[\"child\"][\"dep\"]) + \" [color=red];\\n\")", "\n", "            ", "f", ".", "write", "(", "getId", "(", "depStruct", "[", "\"child\"", "]", "[", "\"dep\"", "]", ")", "+", "\" -> \"", "+", "getId", "(", "dep", ")", "+", "\" [weight=1, color=red style=invis];\\n\"", ")", "\n", "\n", "", "", "f", ".", "write", "(", "\"}\\n\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"subgraph entities {\\n\"", ")", "\n", "f", ".", "write", "(", "\"edge[weight=1];\\n\"", ")", "\n", "for", "entity", "in", "elements", ".", "entities", ":", "\n", "        ", "if", "entity", ".", "get", "(", "\"event\"", ")", "!=", "\"True\"", ":", "\n", "            ", "f", ".", "write", "(", "getId", "(", "entity", ")", "+", "\" [label=\\\"\"", "+", "entity", ".", "get", "(", "\"type\"", ")", "+", "\"\\\"];\\n\"", ")", "\n", "headToken", "=", "graph", ".", "entityHeadTokenByEntity", "[", "entity", "]", "\n", "if", "headToken", "!=", "None", ":", "\n", "                ", "f", ".", "write", "(", "getId", "(", "entity", ")", "+", "\" -> \"", "+", "getId", "(", "headToken", ")", "+", "\" [weight=1 style=dashed color=black];\\n\"", ")", "\n", "", "", "else", ":", "\n", "            ", "f", ".", "write", "(", "getId", "(", "entity", ")", "+", "\" [label=\\\"\"", "+", "entity", ".", "get", "(", "\"type\"", ")", "+", "\"\\\"];\\n\"", ")", "\n", "", "", "f", ".", "write", "(", "\"}\\n\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"subgraph event_to_token {\\n\"", ")", "\n", "f", ".", "write", "(", "\"edge[weight=1 style=dashed color=gray];\\n\"", ")", "\n", "for", "entity", "in", "elements", ".", "entities", ":", "\n", "        ", "if", "entity", ".", "get", "(", "\"event\"", ")", "==", "\"True\"", ":", "\n", "            ", "headToken", "=", "graph", ".", "entityHeadTokenByEntity", "[", "entity", "]", "\n", "if", "headToken", "!=", "None", ":", "\n", "                ", "f", ".", "write", "(", "getId", "(", "entity", ")", "+", "\" -> \"", "+", "getId", "(", "headToken", ")", "+", "\";\\n\"", ")", "\n", "", "", "", "f", ".", "write", "(", "\"}\\n\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"subgraph interactions {\\n\"", ")", "\n", "f", ".", "write", "(", "\"edge[\"", "+", "getColorScheme", "(", "color", ")", "+", "\"];\\n\"", ")", "\n", "for", "interaction", "in", "elements", ".", "interactions", ":", "\n", "        ", "intColor", "=", "getColor", "(", "interaction", ".", "get", "(", "\"type\"", ")", ",", "color", ",", "colorNum", ")", "\n", "f", ".", "write", "(", "getId", "(", "interaction", ",", "\"e1\"", ")", "+", "\" -> \"", "+", "getId", "(", "interaction", ",", "\"e2\"", ")", "+", "\"[\"", "+", "intColor", "+", "\" fontsize=10 label=\\\"\"", "+", "interaction", ".", "get", "(", "\"type\"", ")", "+", "\"\\\"];\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"}\\n\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"}\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"PDF file saved to: \"", "+", "output", "+", "\".pdf\"", "\n", "subprocess", ".", "call", "(", "\"dot -Tpdf \"", "+", "output", "+", "\" > \"", "+", "output", "+", "\".pdf\"", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.__init__": [[27, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "isDependency", "=", "False", ")", ":", "\n", "        ", "self", ".", "isDependency", "=", "isDependency", "\n", "# token attributes", "\n", "self", ".", "pos", "=", "None", "\n", "self", ".", "text", "=", "None", "\n", "self", ".", "id", "=", "None", "\n", "self", ".", "charOffset", "=", "None", "\n", "self", ".", "dependencies", "=", "[", "]", "# all dependencies", "\n", "self", ".", "entities", "=", "[", "]", "# this token is part of these named entities", "\n", "# dependency attributes", "\n", "self", ".", "dependencyType", "=", "None", "\n", "self", ".", "fro", "=", "None", "# added to adjacency matrix labels", "\n", "self", ".", "to", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraphNode.toString": [[41, 53], ["str"], "methods", ["None"], ["", "def", "toString", "(", "self", ",", "showPos", "=", "False", ",", "highlight", "=", "False", ")", ":", "\n", "        ", "string", "=", "\"\"", "\n", "if", "self", ".", "isDependency", ":", "\n", "            ", "string", "=", "\"-\"", "+", "str", "(", "self", ".", "dependencyType", ")", "+", "\"-\"", "\n", "", "else", ":", "\n", "            ", "if", "showPos", ":", "\n", "                ", "string", "=", "\"[\"", "+", "self", ".", "pos", "+", "\"]\"", "\n", "", "else", ":", "\n", "                ", "string", "=", "\"[\"", "+", "self", ".", "text", "+", "\"]\"", "\n", "", "", "if", "highlight", ":", "\n", "            ", "string", "=", "\"{\"", "+", "string", "[", "1", ":", "-", "1", "]", "+", "\"}\"", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraph.__init__": [[59, 61], ["ParseGraph.ParseGraph.buildParseGraph"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraph.buildParseGraph"], ["def", "__init__", "(", "self", ",", "tokenElements", ",", "dependencyElements", ",", "mergeDependencies", "=", "False", ")", ":", "\n", "        ", "self", ".", "tokensById", ",", "self", ".", "dependenciesById", "=", "self", ".", "buildParseGraph", "(", "tokenElements", ",", "dependencyElements", ",", "mergeDependencies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraph.buildParseGraph": [[66, 115], ["ParseGraph.ParseGraphNode", "int", "tokenElement.attrib[].split", "len", "ParseGraph.ParseGraphNode", "int", "int", "dependenciesByFroAndTo.has_key", "tokensById[].dependencies.append", "tokensById[].dependencies.append", "tokenElement.attrib[].split", "int", "int", "dependenciesByFroAndTo[].dependencyType.append", "tokensById[].dependencies.append", "tokensById[].dependencies.append", "dependenciesById.has_key", "dependenciesById.has_key", "dependencyElement.attrib[].split", "dependencyElement.attrib[].split", "type"], "methods", ["None"], ["", "def", "buildParseGraph", "(", "self", ",", "tokenElements", ",", "dependencyElements", ",", "mergeDependencies", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns dictionaries containing tokens and dependencies\n        of the graph generated from ElementTree-elements.\n        \"\"\"", "\n", "tokensById", "=", "{", "}", "\n", "dependenciesById", "=", "{", "}", "\n", "for", "tokenElement", "in", "tokenElements", ":", "\n", "            ", "node", "=", "ParseGraphNode", "(", ")", "\n", "node", ".", "id", "=", "int", "(", "tokenElement", ".", "attrib", "[", "\"id\"", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "node", ".", "pos", "=", "tokenElement", ".", "attrib", "[", "\"POS\"", "]", "\n", "node", ".", "text", "=", "tokenElement", ".", "attrib", "[", "\"text\"", "]", "\n", "charFrom", ",", "charTo", "=", "tokenElement", ".", "attrib", "[", "\"charOffset\"", "]", ".", "split", "(", "\"-\"", ")", "\n", "node", ".", "charOffset", "=", "(", "int", "(", "charFrom", ")", ",", "int", "(", "charTo", ")", ")", "\n", "tokensById", "[", "node", ".", "id", "]", "=", "node", "\n", "\n", "#self.depByOrder = []", "\n", "", "dependencyIndex", "=", "len", "(", "tokensById", ")", "+", "99", "\n", "if", "mergeDependencies", ":", "\n", "            ", "dependenciesByFroAndTo", "=", "{", "}", "\n", "", "for", "dependencyElement", "in", "dependencyElements", ":", "\n", "            ", "dependency", "=", "ParseGraphNode", "(", "True", ")", "\n", "dependency", ".", "dependencyType", "=", "dependencyElement", ".", "attrib", "[", "\"type\"", "]", "\n", "dependency", ".", "fro", "=", "tokensById", "[", "int", "(", "dependencyElement", ".", "attrib", "[", "\"t1\"", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "]", "\n", "dependency", ".", "to", "=", "tokensById", "[", "int", "(", "dependencyElement", ".", "attrib", "[", "\"t2\"", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "]", "\n", "\n", "if", "mergeDependencies", ":", "\n", "                ", "key", "=", "(", "dependency", ".", "fro", ".", "id", ",", "dependency", ".", "to", ".", "id", ")", "#frozenset([dependency.fro.id, dependency.to.id])", "\n", "if", "dependenciesByFroAndTo", ".", "has_key", "(", "key", ")", ":", "\n", "                    ", "if", "not", "type", "(", "dependenciesByFroAndTo", "[", "key", "]", ".", "dependencyType", ")", "==", "types", ".", "ListType", ":", "\n", "                        ", "dependenciesByFroAndTo", "[", "key", "]", ".", "dependencyType", "=", "[", "dependenciesByFroAndTo", "[", "key", "]", ".", "dependencyType", "]", "\n", "", "dependenciesByFroAndTo", "[", "key", "]", ".", "dependencyType", ".", "append", "(", "dependency", ".", "dependencyType", ")", "\n", "", "else", ":", "\n", "                    ", "dependenciesByFroAndTo", "[", "key", "]", "=", "dependency", "\n", "tokensById", "[", "dependency", ".", "fro", ".", "id", "]", ".", "dependencies", ".", "append", "(", "dependency", ")", "\n", "tokensById", "[", "dependency", ".", "to", ".", "id", "]", ".", "dependencies", ".", "append", "(", "dependency", ")", "\n", "dependency", ".", "id", "=", "dependencyIndex", "\n", "assert", "(", "not", "dependenciesById", ".", "has_key", "(", "dependency", ".", "id", ")", ")", "\n", "dependenciesById", "[", "dependency", ".", "id", "]", "=", "dependency", "\n", "", "", "else", ":", "\n", "                ", "tokensById", "[", "dependency", ".", "fro", ".", "id", "]", ".", "dependencies", ".", "append", "(", "dependency", ")", "\n", "tokensById", "[", "dependency", ".", "to", ".", "id", "]", ".", "dependencies", ".", "append", "(", "dependency", ")", "\n", "#dependenciesById[\"dep_\" + str(dependencyIndex) + \"-mt_\" + str(dependency.fro.id) + \"-\" + dependency.dependencyType + \"-mt_\" + str(dependency.to.id)] = dependency", "\n", "#dependenciesById[dependencyIndex] = dependency", "\n", "dependency", ".", "id", "=", "dependencyIndex", "# (dependency.fro.id,dependency.to.id)", "\n", "assert", "(", "not", "dependenciesById", ".", "has_key", "(", "dependency", ".", "id", ")", ")", "\n", "dependenciesById", "[", "dependency", ".", "id", "]", "=", "dependency", "\n", "", "dependencyIndex", "+=", "1", "\n", "\n", "", "return", "tokensById", ",", "dependenciesById", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraph.markNamedEntities": [[120, 137], ["entityElement.attrib[].split", "ParseGraph.ParseGraph.tokensById.iteritems", "offsetString.split", "offsets.append", "int", "int", "Utils.overlap", "Utils.overlap", "v.entities.append", "namedEntityTokens.append"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap"], ["", "def", "markNamedEntities", "(", "self", ",", "entityElements", ")", ":", "\n", "        ", "\"\"\" Marks tokens belonging to named entities\n        \"\"\"", "\n", "namedEntityTokens", "=", "[", "]", "\n", "for", "entityElement", "in", "entityElements", ":", "\n", "            ", "offsets", "=", "[", "]", "\n", "offsetStrings", "=", "entityElement", ".", "attrib", "[", "\"charOffset\"", "]", ".", "split", "(", "\",\"", ")", "\n", "for", "offsetString", "in", "offsetStrings", ":", "\n", "                ", "charFrom", ",", "charTo", "=", "offsetString", ".", "split", "(", "\"-\"", ")", "\n", "offset", "=", "(", "int", "(", "charFrom", ")", ",", "int", "(", "charTo", ")", ")", "\n", "offsets", ".", "append", "(", "offset", ")", "\n", "", "for", "k", ",", "v", "in", "self", ".", "tokensById", ".", "iteritems", "(", ")", ":", "\n", "                ", "for", "offset", "in", "offsets", ":", "\n", "                    ", "if", "Range", ".", "overlap", "(", "offset", ",", "v", ".", "charOffset", ")", ":", "\n", "                        ", "v", ".", "entities", ".", "append", "(", "entityElement", ".", "attrib", "[", "\"id\"", "]", ")", "\n", "namedEntityTokens", ".", "append", "(", "v", ".", "id", ")", "\n", "", "", "", "", "return", "namedEntityTokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraph.getNamedEntityTokenIds": [[138, 147], ["ParseGraph.ParseGraph.tokensById.iteritems", "tokenIds.append"], "methods", ["None"], ["", "def", "getNamedEntityTokenIds", "(", "self", ",", "namedEntityIds", ")", ":", "\n", "        ", "\"\"\" Returns the ids of all tokens in specified named entities\n        \"\"\"", "\n", "tokenIds", "=", "[", "]", "\n", "for", "key", ",", "node", "in", "self", ".", "tokensById", ".", "iteritems", "(", ")", ":", "\n", "            ", "for", "id", "in", "namedEntityIds", ":", "\n", "                ", "if", "id", "in", "node", ".", "entities", ":", "\n", "                    ", "tokenIds", ".", "append", "(", "node", ".", "id", ")", "\n", "", "", "", "return", "tokenIds", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraph.getTokenIdsByText": [[148, 164], ["ParseGraph.ParseGraph.tokensById.values", "node.text.lower", "matchingTokens.append", "len", "node.text.find", "node.text.rsplit", "tempText.lower", "matchingTokens.append"], "methods", ["None"], ["", "def", "getTokenIdsByText", "(", "self", ",", "texts", ",", "lookInsideNamedEntities", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns the ids of all tokens whose text attribute can be\n        found in the list texts. Can be used f.e. detecting interaction\n        words.\n        \"\"\"", "\n", "matchingTokens", "=", "[", "]", "\n", "for", "node", "in", "self", ".", "tokensById", ".", "values", "(", ")", ":", "\n", "            ", "if", "len", "(", "node", ".", "entities", ")", ">", "0", "and", "not", "lookInsideNamedEntities", ":", "\n", "                ", "continue", "\n", "", "if", "node", ".", "text", ".", "lower", "(", ")", "in", "texts", ":", "\n", "                ", "matchingTokens", ".", "append", "(", "node", ".", "id", ")", "\n", "", "elif", "node", ".", "text", ".", "find", "(", "\"-\"", ")", "!=", "-", "1", ":", "# For cases like actin-activation", "\n", "                ", "tempText", "=", "node", ".", "text", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "1", "]", "\n", "if", "tempText", ".", "lower", "(", ")", "in", "texts", ":", "\n", "                    ", "matchingTokens", ".", "append", "(", "node", ".", "id", ")", "\n", "", "", "", "return", "matchingTokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraph.stemTokens": [[165, 168], ["ParseGraph.ParseGraph.tokensById.values", "Utils.stem", "Utils.stem"], "methods", ["None"], ["", "def", "stemTokens", "(", "self", ")", ":", "\n", "        ", "for", "token", "in", "self", ".", "tokensById", ".", "values", "(", ")", ":", "\n", "            ", "token", ".", "stem", "=", "stemmer", ".", "stem", "(", "token", ".", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraph.buildNXGraph": [[173, 185], ["NX.Graph", "ParseGraph.ParseGraph.tokensById.values", "ParseGraph.ParseGraph.dependenciesById.values", "ParseGraph.ParseGraph.nXGraph.add_node", "ParseGraph.ParseGraph.nXGraph.add_node", "ParseGraph.ParseGraph.nXGraph.add_edge", "ParseGraph.ParseGraph.nXGraph.add_edge"], "methods", ["None"], ["", "", "def", "buildNXGraph", "(", "self", ")", ":", "\n", "        ", "\"\"\" Initializes the graph structure used by NetworkX.\n        Called automatically when needed.\n        \"\"\"", "\n", "import", "networkx", "as", "NX", "\n", "self", ".", "nXGraph", "=", "NX", ".", "Graph", "(", ")", "\n", "for", "token", "in", "self", ".", "tokensById", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "nXGraph", ".", "add_node", "(", "token", ".", "id", ")", "\n", "", "for", "dependency", "in", "self", ".", "dependenciesById", ".", "values", "(", ")", ":", "#self.depByOrder:", "\n", "            ", "self", ".", "nXGraph", ".", "add_node", "(", "dependency", ".", "id", ")", "\n", "self", ".", "nXGraph", ".", "add_edge", "(", "(", "dependency", ".", "fro", ".", "id", ",", "dependency", ".", "id", ")", ")", "\n", "self", ".", "nXGraph", ".", "add_edge", "(", "(", "dependency", ".", "id", ",", "dependency", ".", "to", ".", "id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraph.buildShortestPathNX": [[186, 203], ["NX.shortest_path", "range", "ParseGraph.ParseGraph.buildNXGraph", "len", "hasattr"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ParseGraph.ParseGraph.buildNXGraph"], ["", "", "def", "buildShortestPathNX", "(", "self", ",", "startTokenId", ",", "endTokenId", ",", "directed", "=", "False", ")", ":", "\n", "        ", "\"\"\" Build shortest path using NetworkX\n        \"\"\"", "\n", "import", "networkx", "as", "NX", "\n", "if", "(", "not", "hasattr", "(", "self", ",", "\"nXGraph\"", ")", ")", "or", "self", ".", "nXGraph", "==", "None", ":", "\n", "            ", "self", ".", "buildNXGraph", "(", ")", "\n", "", "path", "=", "NX", ".", "shortest_path", "(", "self", ".", "nXGraph", ",", "startTokenId", ",", "endTokenId", ")", "\n", "if", "path", "==", "False", ":", "\n", "            ", "return", "[", "]", "\n", "", "isTokenPhase", "=", "True", "\n", "for", "i", "in", "range", "(", "len", "(", "path", ")", ")", ":", "\n", "            ", "if", "isTokenPhase", ":", "\n", "                ", "path", "[", "i", "]", "=", "self", ".", "tokensById", "[", "path", "[", "i", "]", "]", "\n", "", "else", ":", "\n", "                ", "path", "[", "i", "]", "=", "self", ".", "dependenciesById", "[", "path", "[", "i", "]", "]", "\n", "", "isTokenPhase", "=", "not", "isTokenPhase", "\n", "", "return", "path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getNextFreeId": [[3, 16], ["element.get", "int", "element.get.find", "element.get.rsplit", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "getNextFreeId", "(", "elements", ")", ":", "\n", "    ", "highest", "=", "-", "1", "\n", "for", "element", "in", "elements", ":", "\n", "        ", "id", "=", "element", ".", "get", "(", "\"id\"", ")", "\n", "assert", "id", ".", "find", "(", "\".\"", ")", "!=", "-", "1", ",", "id", "\n", "lastPart", "=", "id", ".", "rsplit", "(", "\".\"", ",", "1", ")", "[", "-", "1", "]", "\n", "assert", "len", "(", "lastPart", ")", ">", "1", ",", "id", "\n", "number", "=", "int", "(", "lastPart", "[", "1", ":", "]", ")", "\n", "if", "number", ">", "highest", ":", "\n", "            ", "highest", "=", "number", "\n", "", "", "if", "len", "(", "elements", ")", "-", "1", ">", "highest", ":", "\n", "        ", "highest", "=", "len", "(", "elements", ")", "-", "1", "\n", "", "return", "highest", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getIdNumberType": [[17, 32], ["sys.exit"], "function", ["None"], ["", "def", "getIdNumberType", "(", "idNumber", ")", ":", "\n", "    ", "if", "idNumber", "[", "0", "]", "==", "\"d\"", ":", "\n", "        ", "return", "\"document\"", "\n", "", "elif", "idNumber", "[", "0", "]", "==", "\"s\"", ":", "\n", "        ", "return", "\"sentence\"", "\n", "", "elif", "idNumber", "[", "0", "]", "==", "\"i\"", ":", "\n", "        ", "return", "\"interaction\"", "\n", "", "elif", "idNumber", "[", "0", "]", "==", "\"p\"", ":", "\n", "        ", "return", "\"pair\"", "\n", "", "elif", "idNumber", "[", "0", "]", "==", "\"e\"", ":", "\n", "        ", "return", "\"entity\"", "\n", "", "elif", "idNumber", "[", "0", "]", "==", "\"a\"", ":", "\n", "        ", "return", "\"path\"", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "\"Unknown type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.splitInteractionId": [[33, 40], ["id.split", "int", "IDUtils.getIdNumberType"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getIdNumberType"], ["", "", "def", "splitInteractionId", "(", "id", ")", ":", "\n", "    ", "dict", "=", "{", "}", "\n", "splits", "=", "id", ".", "split", "(", "\".\"", ")", "\n", "dict", "[", "\"corpus\"", "]", "=", "splits", "[", "0", "]", "\n", "for", "i", "in", "splits", "[", "1", ":", "]", ":", "\n", "        ", "dict", "[", "getIdNumberType", "(", "i", ")", "]", "=", "int", "(", "i", "[", "1", ":", "]", ")", "\n", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.buildInteractionId": [[41, 57], ["id.has_key", "id.has_key", "id.has_key", "id.has_key", "id.has_key", "id.has_key", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "buildInteractionId", "(", "id", ")", ":", "\n", "    ", "idString", "=", "id", "[", "\"corpus\"", "]", "\n", "if", "id", ".", "has_key", "(", "\"document\"", ")", ":", "\n", "        ", "idString", "+=", "\".d\"", "+", "str", "(", "id", "[", "\"document\"", "]", ")", "\n", "", "if", "id", ".", "has_key", "(", "\"sentence\"", ")", ":", "\n", "        ", "idString", "+=", "\".s\"", "+", "str", "(", "id", "[", "\"sentence\"", "]", ")", "\n", "\n", "", "if", "id", ".", "has_key", "(", "\"entity\"", ")", ":", "\n", "        ", "idString", "+=", "\".e\"", "+", "str", "(", "id", "[", "\"e\"", "]", ")", "\n", "", "if", "id", ".", "has_key", "(", "\"interaction\"", ")", ":", "\n", "        ", "idString", "+=", "\".i\"", "+", "str", "(", "id", "[", "\"interaction\"", "]", ")", "\n", "", "if", "id", ".", "has_key", "(", "\"pair\"", ")", ":", "\n", "        ", "idString", "+=", "\".p\"", "+", "str", "(", "id", "[", "\"pair\"", "]", ")", "\n", "", "if", "id", ".", "has_key", "(", "\"path\"", ")", ":", "\n", "        ", "idString", "+=", "\".a\"", "+", "str", "(", "id", "[", "\"path\"", "]", ")", "\n", "", "return", "idString", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.sortInteractionIds": [[58, 72], ["id1.split", "id2.split", "range", "len", "int", "int"], "function", ["None"], ["", "def", "sortInteractionIds", "(", "id1", ",", "id2", ")", ":", "\n", "    ", "splits1", "=", "id1", ".", "split", "(", "\".\"", ")", "\n", "splits2", "=", "id2", ".", "split", "(", "\".\"", ")", "\n", "# start from split 1 since token 0 is the name of the dataset", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "splits1", ")", ")", ":", "\n", "# each level's index starts with a letter (s for sentence etc.)", "\n", "        ", "number1", "=", "int", "(", "splits1", "[", "i", "]", "[", "1", ":", "]", ")", "\n", "number2", "=", "int", "(", "splits2", "[", "i", "]", "[", "1", ":", "]", ")", "\n", "\n", "if", "number1", ">", "number2", ":", "\n", "           ", "return", "1", "\n", "", "elif", "number1", "<", "number2", ":", "\n", "           ", "return", "-", "1", "\n", "", "", "return", "0", "# last number1 == number 2", "\n", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SplitMergedElements.getElementTypes": [[13, 19], ["element.get", "element.get.find", "element.get.split"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "getElementTypes", "(", "element", ",", "separator", "=", "\"---\"", ")", ":", "\n", "    ", "typeName", "=", "element", ".", "get", "(", "\"type\"", ")", "\n", "if", "typeName", ".", "find", "(", "separator", ")", "!=", "-", "1", ":", "\n", "        ", "return", "typeName", ".", "split", "(", "separator", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "typeName", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SplitMergedElements.splitMerged": [[20, 59], ["sentence.findall", "len", "IDUtils.getNextFreeId", "sentence.findall", "SplitMergedElements.getElementTypes", "len", "len", "len", "sentence.remove", "len", "sentence.insert", "ET.Element", "element.attrib.iteritems", "ET.Element.set", "element.get().rsplit", "ET.Element.set", "newElements.append", "ET.Element.set", "element.get", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getNextFreeId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getElementTypes", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.insert", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "splitMerged", "(", "sentence", ",", "elementName", ",", "countsByType", ")", ":", "\n", "    ", "elements", "=", "sentence", ".", "findall", "(", "elementName", ")", "\n", "elementCount", "=", "len", "(", "elements", ")", "\n", "newElements", "=", "[", "]", "\n", "# split old elements and remove them", "\n", "removeCount", "=", "0", "\n", "newIdCount", "=", "IDUtils", ".", "getNextFreeId", "(", "elements", ")", "\n", "for", "element", "in", "elements", ":", "\n", "        ", "types", "=", "getElementTypes", "(", "element", ")", "\n", "if", "len", "(", "types", ")", ">", "1", ":", "\n", "            ", "for", "type", "in", "types", ":", "\n", "#newElement = copy.deepcopy(element)", "\n", "                ", "newElement", "=", "ET", ".", "Element", "(", "elementName", ")", "\n", "for", "k", ",", "v", "in", "element", ".", "attrib", ".", "iteritems", "(", ")", ":", "\n", "                    ", "newElement", ".", "set", "(", "k", ",", "v", ")", "\n", "", "newElement", ".", "set", "(", "\"type\"", ",", "type", ")", "\n", "idSplits", "=", "element", ".", "get", "(", "\"id\"", ")", ".", "rsplit", "(", "\".\"", ",", "1", ")", "\n", "newElement", ".", "set", "(", "\"id\"", ",", "idSplits", "[", "0", "]", "+", "\".\"", "+", "idSplits", "[", "1", "]", "[", "0", "]", "+", "str", "(", "newIdCount", ")", ")", "\n", "newIdCount", "+=", "1", "\n", "#print \"new id\", idSplits[0] + \".\" + idSplits[1][0] + str(elementCount)", "\n", "newElements", ".", "append", "(", "newElement", ")", "\n", "elementCount", "+=", "1", "\n", "", "sentence", ".", "remove", "(", "element", ")", "\n", "removeCount", "+=", "1", "\n", "# insert the new elements", "\n", "", "", "elements", "=", "sentence", ".", "findall", "(", "elementName", ")", "\n", "if", "len", "(", "newElements", ")", ">", "0", ":", "\n", "        ", "insertPos", "=", "0", "\n", "if", "len", "(", "elements", ")", ">", "0", ":", "\n", "            ", "for", "element", "in", "sentence", ":", "\n", "                ", "if", "element", "==", "elements", "[", "-", "1", "]", ":", "\n", "                    ", "break", "\n", "", "insertPos", "+=", "1", "\n", "", "", "for", "newElement", "in", "newElements", ":", "\n", "            ", "sentence", ".", "insert", "(", "insertPos", ",", "newElement", ")", "\n", "# increment counts", "\n", "", "", "if", "countsByType", "!=", "None", ":", "\n", "        ", "countsByType", "[", "elementName", "]", "[", "0", "]", "+=", "removeCount", "\n", "countsByType", "[", "elementName", "]", "[", "1", "]", "+=", "len", "(", "newElements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SplitMergedElements.processSentence": [[61, 65], ["SplitMergedElements.splitMerged", "SplitMergedElements.splitMerged", "SplitMergedElements.splitMerged"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SplitMergedElements.splitMerged", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SplitMergedElements.splitMerged", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SplitMergedElements.splitMerged"], ["", "", "def", "processSentence", "(", "sentence", ",", "countsByType", ")", ":", "\n", "    ", "splitMerged", "(", "sentence", ",", "\"entity\"", ",", "countsByType", ")", "\n", "splitMerged", "(", "sentence", ",", "\"interaction\"", ",", "countsByType", ")", "\n", "splitMerged", "(", "sentence", ",", "\"pair\"", ",", "countsByType", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SplitMergedElements.splitMergedElements": [[66, 87], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "corpusTree.getroot.findall", "Utils.ProgressCounter.ProgressCounter", "sorted", "len", "Utils.ProgressCounter.ProgressCounter.update", "document.findall", "countsByType.keys", "Utils.write", "SplitMergedElements.processSentence"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SplitMergedElements.processSentence"], ["", "def", "splitMergedElements", "(", "inputFilename", ",", "outputFilename", "=", "None", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"##### Split elements with merged types #####\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "inputFilename", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "inputFilename", ")", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "documents", "=", "corpusRoot", ".", "findall", "(", "\"document\"", ")", "\n", "counter", "=", "ProgressCounter", "(", "len", "(", "documents", ")", ",", "\"Documents\"", ")", "\n", "countsByType", "=", "{", "\"entity\"", ":", "[", "0", ",", "0", "]", ",", "\"interaction\"", ":", "[", "0", ",", "0", "]", ",", "\"pair\"", ":", "[", "0", ",", "0", "]", "}", "\n", "for", "document", "in", "documents", ":", "\n", "        ", "counter", ".", "update", "(", ")", "\n", "for", "sentence", "in", "document", ".", "findall", "(", "\"sentence\"", ")", ":", "\n", "            ", "processSentence", "(", "sentence", ",", "countsByType", ")", "\n", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Results\"", "\n", "for", "k", "in", "sorted", "(", "countsByType", ".", "keys", "(", ")", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"  \"", "+", "k", "+", "\": removed\"", ",", "countsByType", "[", "k", "]", "[", "0", "]", ",", "\"created\"", ",", "countsByType", "[", "k", "]", "[", "1", "]", "\n", "\n", "", "if", "outputFilename", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "outputFilename", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "outputFilename", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.RemoveUnconnectedEntities.removeUnconnectedEntities": [[6, 41], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "input.getroot.findall", "document.findall", "set", "document.getiterator", "document.getiterator", "Utils.write", "set.add", "set.add", "entities.append", "entity.get", "interaction.get", "interaction.get", "entity.get", "sentence.get", "entity.get.find", "sentMap[].remove", "document.remove", "entity.get.rsplit"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "removeUnconnectedEntities", "(", "input", ",", "output", "=", "None", ")", ":", "\n", "    ", "input", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "root", "=", "input", ".", "getroot", "(", ")", "\n", "removed", "=", "0", "\n", "preserved", "=", "0", "\n", "for", "document", "in", "root", ".", "findall", "(", "\"document\"", ")", ":", "\n", "        ", "sentMap", "=", "{", "}", "# allow for intersentence interactions", "\n", "for", "sentence", "in", "document", ".", "findall", "(", "\"sentence\"", ")", ":", "\n", "            ", "sentMap", "[", "sentence", ".", "get", "(", "\"id\"", ")", "]", "=", "sentence", "\n", "", "connected", "=", "set", "(", ")", "\n", "for", "interaction", "in", "document", ".", "getiterator", "(", "\"interaction\"", ")", ":", "\n", "            ", "connected", ".", "add", "(", "interaction", ".", "get", "(", "\"e1\"", ")", ")", "\n", "connected", ".", "add", "(", "interaction", ".", "get", "(", "\"e2\"", ")", ")", "\n", "", "entities", "=", "[", "]", "\n", "for", "entity", "in", "document", ".", "getiterator", "(", "\"entity\"", ")", ":", "\n", "            ", "entities", ".", "append", "(", "entity", ")", "\n", "", "for", "entity", "in", "entities", ":", "\n", "            ", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "# never remove named entities", "\n", "                ", "continue", "\n", "", "eId", "=", "entity", ".", "get", "(", "\"id\"", ")", "\n", "if", "eId", "not", "in", "connected", ":", "\n", "                ", "if", "eId", ".", "find", "(", "\".s\"", ")", "!=", "-", "1", ":", "# sentence level entity", "\n", "                    ", "sentMap", "[", "eId", ".", "rsplit", "(", "\".\"", ",", "1", ")", "[", "0", "]", "]", ".", "remove", "(", "entity", ")", "\n", "", "else", ":", "# document level entity", "\n", "                    ", "document", ".", "remove", "(", "entity", ")", "\n", "", "removed", "+=", "1", "\n", "", "else", ":", "\n", "                ", "preserved", "+=", "1", "\n", "\n", "", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Removed\"", ",", "removed", ",", "\"entities, preserved\"", ",", "preserved", ",", "\"entities\"", "\n", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "root", ",", "output", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.MixSets.mixSets": [[11, 54], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "corpusTree.getroot.getiterator", "corpusTree.getroot.getiterator", "RecalculateIds.recalculateIds", "Utils.write", "document.get", "len", "document.findall", "len", "document.get", "document.set", "docOrigIds.remove", "sentence.get", "len", "ET.Element", "ET.Element.set", "ET.Element.set", "corpusTree.getroot.append", "document.get", "document.get", "removed.append", "sentenceIds.remove", "ET.Element.set", "ET.Element.append", "document.remove", "document.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.RecalculateIds.recalculateIds", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "mixSets", "(", "input", ",", "output", ",", "docOrigIds", ",", "sourceSet", ",", "targetSet", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Mixing Sets\"", ",", "input", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "if", "docOrigIds", "!=", "None", ":", "\n", "        ", "for", "document", "in", "corpusRoot", ".", "getiterator", "(", "\"document\"", ")", ":", "\n", "            ", "docId", "=", "document", ".", "get", "(", "\"pmid\"", ")", "\n", "if", "docId", "==", "None", ":", "\n", "                ", "docId", "=", "document", ".", "get", "(", "\"origId\"", ")", "\n", "", "if", "docId", "in", "docOrigIds", ":", "\n", "                ", "assert", "document", ".", "get", "(", "\"set\"", ")", "==", "sourceSet", "\n", "document", ".", "set", "(", "\"set\"", ",", "targetSet", ")", "\n", "docOrigIds", ".", "remove", "(", "docId", ")", "\n", "", "", "assert", "len", "(", "docOrigIds", ")", "==", "0", ",", "docOrigIds", "\n", "\n", "", "sentenceIds", "=", "None", "\n", "if", "sentenceIds", "!=", "None", ":", "\n", "        ", "for", "document", "in", "corpusRoot", ".", "getiterator", "(", "\"document\"", ")", ":", "\n", "            ", "removed", "=", "[", "]", "\n", "for", "sentence", "in", "document", ".", "findall", "(", "\"sentence\"", ")", ":", "\n", "                ", "assert", "document", ".", "get", "(", "\"set\"", ")", "==", "sourceSet", "\n", "sentenceId", "=", "sentence", ".", "get", "(", "\"id\"", ")", "\n", "if", "sentenceId", "in", "sentenceIds", ":", "\n", "                    ", "removed", ".", "append", "(", "document", ".", "remove", "(", "sentence", ")", ")", "\n", "sentenceIds", ".", "remove", "(", "sentenceId", ")", "\n", "", "", "if", "len", "(", "removed", ")", ">", "0", ":", "\n", "                ", "newDoc", "=", "ET", ".", "Element", "(", "\"document\"", ")", "\n", "for", "attr", "in", "document", ".", "attrib", ":", "\n", "                    ", "newDoc", ".", "set", "(", "attr", ",", "document", ".", "get", "(", "attr", ")", ")", "\n", "", "newDoc", ".", "set", "(", "\"id\"", ",", "None", ")", "\n", "newDoc", ".", "set", "(", "\"set\"", ",", "targetSet", ")", "\n", "for", "sentence", "in", "removed", ":", "\n", "                    ", "newDoc", ".", "append", "(", "sentence", ")", "\n", "", "corpusRoot", ".", "append", "(", "newDoc", ")", "\n", "", "", "assert", "len", "(", "sentenceIds", ")", "==", "None", "\n", "\n", "RecalculateIds", ".", "recalculateIds", "(", "corpusTree", ",", "onlyWithinSentence", "=", "False", ")", "\n", "\n", "", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "output", ")", "\n", "", "return", "corpusTree", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SentenceElements.SentenceElements.__init__": [[29, 144], ["sentenceElement.findall", "sentenceElement.findall", "sentenceElement.findall", "sentenceElement.find", "sentenceElement.find", "sentenceElement.get", "entityElement.get", "entityElement.get", "entitiesToKeep.append", "entityElement.set", "Exception", "len", "SentenceElements.SentenceElements.parseElement.findall", "SentenceElements.SentenceElements.tokenizationElement.findall", "targetList.remove", "SentenceElements.SentenceElements.interSentenceInteractions.append", "sentenceElement.find.getiterator", "SentenceElements.SentenceElements.parseElement.get", "parsesElement.find", "sentenceElement.find.find", "interaction.get", "interaction.get", "element.get", "sentenceElement.find.find.find", "sentenceElement.find.getiterator", "element.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["    ", "def", "__init__", "(", "self", ",", "sentenceElement", ",", "parse", "=", "None", ",", "tokenization", "=", "None", ",", "removeIntersentenceInteractions", "=", "True", ",", "removeNameInfo", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "sentence", "=", "sentenceElement", "\n", "self", ".", "entities", "=", "[", "]", "\n", "self", ".", "entitiesById", "=", "{", "}", "\n", "self", ".", "pairs", "=", "[", "]", "\n", "self", ".", "interactions", "=", "[", "]", "\n", "self", ".", "tokens", "=", "[", "]", "\n", "self", ".", "dependencies", "=", "[", "]", "\n", "\n", "self", ".", "parseElement", "=", "None", "\n", "self", ".", "tokenizationElement", "=", "None", "\n", "\n", "# Read entities", "\n", "entityElements", "=", "sentenceElement", ".", "findall", "(", "\"entity\"", ")", "\n", "if", "entityElements", "!=", "None", ":", "\n", "            ", "entitiesToKeep", "=", "[", "]", "\n", "for", "entityElement", "in", "entityElements", ":", "\n", "                ", "if", "entityElement", ".", "get", "(", "\"type\"", ")", "!=", "\"neg\"", ":", "\n", "                    ", "entitiesToKeep", ".", "append", "(", "entityElement", ")", "\n", "", "", "entityElements", "=", "entitiesToKeep", "\n", "self", ".", "entities", "=", "entityElements", "\n", "for", "entityElement", "in", "entityElements", ":", "\n", "                ", "if", "removeNameInfo", ":", "\n", "                    ", "entityElement", ".", "set", "(", "\"given\"", ",", "\"False\"", ")", "\n", "", "entityId", "=", "entityElement", ".", "get", "(", "\"id\"", ")", "\n", "if", "entityId", "==", "None", ":", "\n", "                    ", "raise", "Exception", "(", "\"entity element has no id\"", ")", "\n", "", "self", ".", "entitiesById", "[", "entityId", "]", "=", "entityElement", "\n", "\n", "# Read pairs and interactions", "\n", "#        sentenceId = sentenceElement.get(\"id\")", "\n", "#        pairElements = sentenceElement.findall(\"pair\")", "\n", "#        if pairElements != None:", "\n", "#            self.pairs = pairElements", "\n", "#        if removeIntersentenceInteractions:", "\n", "#            pairsToKeep = []", "\n", "#            for pair in pairElements:", "\n", "#                if pair.get(\"e1\").rsplit(\".\",1)[0] == sentenceId and pair.get(\"e2\").rsplit(\".\",1)[0] == sentenceId:", "\n", "#                    pairsToKeep.append(pair)", "\n", "#            self.pairs = pairsToKeep       ", "\n", "#        interactionElements = sentenceElement.findall(\"interaction\")", "\n", "#        if interactionElements != None:", "\n", "#            self.interactions = interactionElements", "\n", "#            self.interSentenceInteractions = []", "\n", "#        if removeIntersentenceInteractions:", "\n", "#            interactionsToKeep = []", "\n", "#            for interaction in interactionElements:", "\n", "#                e1rsplits = interaction.get(\"e1\").count(\".\") - 2", "\n", "#                e2rsplits = interaction.get(\"e2\").count(\".\") - 2", "\n", "#                if interaction.get(\"e1\").rsplit(\".\",e1rsplits)[0] == sentenceId and interaction.get(\"e2\").rsplit(\".\",e2rsplits)[0] == sentenceId:", "\n", "#                    interactionsToKeep.append(interaction)", "\n", "#                else:", "\n", "#                    self.interSentenceInteractions.append(interaction)", "\n", "#            self.interactions = interactionsToKeep", "\n", "\n", "", "", "self", ".", "pairs", "=", "sentenceElement", ".", "findall", "(", "\"pair\"", ")", "\n", "self", ".", "interactions", "=", "sentenceElement", ".", "findall", "(", "\"interaction\"", ")", "\n", "self", ".", "interSentenceInteractions", "=", "[", "]", "\n", "if", "removeIntersentenceInteractions", ":", "\n", "            ", "for", "targetList", "in", "(", "self", ".", "interactions", ",", "self", ".", "pairs", ")", ":", "\n", "                ", "for", "interaction", "in", "targetList", "[", ":", "]", ":", "\n", "                    ", "if", "interaction", ".", "get", "(", "\"e1\"", ")", "not", "in", "self", ".", "entitiesById", "or", "interaction", ".", "get", "(", "\"e2\"", ")", "not", "in", "self", ".", "entitiesById", ":", "\n", "                        ", "targetList", ".", "remove", "(", "interaction", ")", "\n", "self", ".", "interSentenceInteractions", ".", "append", "(", "interaction", ")", "\n", "\n", "", "", "", "", "sentenceAnalysesElement", "=", "sentenceElement", ".", "find", "(", "\"sentenceanalyses\"", ")", "\n", "analysesElement", "=", "sentenceElement", ".", "find", "(", "\"analyses\"", ")", "\n", "assert", "sentenceAnalysesElement", "==", "None", "or", "analysesElement", "==", "None", ",", "sentenceElement", ".", "get", "(", "\"id\"", ")", "\n", "if", "sentenceAnalysesElement", "==", "None", ":", "\n", "            ", "sentenceAnalysesElement", "=", "analysesElement", "\n", "", "if", "sentenceAnalysesElement", "!=", "None", ":", "\n", "            ", "parsesElement", "=", "None", "\n", "if", "parse", "!=", "None", ":", "\n", "#    parsesElement = sentenceAnalysesElement.find(\"parses\")", "\n", "#if parsesElement != None:", "\n", "                ", "parseElements", "=", "[", "x", "for", "x", "in", "sentenceAnalysesElement", ".", "getiterator", "(", "\"parse\"", ")", "]", "\n", "#parseElements = parsesElement.findall(\"parse\")", "\n", "if", "len", "(", "parseElements", ")", ">", "0", ":", "# new format", "\n", "                    ", "self", ".", "parseElement", "=", "None", "\n", "for", "element", "in", "parseElements", ":", "\n", "                        ", "if", "element", ".", "get", "(", "\"parser\"", ")", "==", "parse", ":", "\n", "                            ", "self", ".", "parseElement", "=", "element", "\n", "break", "\n", "", "", "if", "self", ".", "parseElement", "!=", "None", ":", "\n", "                        ", "tokenization", "=", "self", ".", "parseElement", ".", "get", "(", "\"tokenizer\"", ")", "\n", "tokenizationElements", "=", "[", "x", "for", "x", "in", "sentenceAnalysesElement", ".", "getiterator", "(", "\"tokenization\"", ")", "]", "\n", "#tokenizationsElement = sentenceAnalysesElement.find(\"tokenizations\")", "\n", "#tokenizationElements = tokenizationsElement.findall(\"tokenization\")", "\n", "for", "element", "in", "tokenizationElements", ":", "\n", "                            ", "if", "element", ".", "get", "(", "\"tokenizer\"", ")", "==", "tokenization", ":", "\n", "                                ", "self", ".", "tokenizationElement", "=", "element", "\n", "break", "\n", "", "", "", "", "else", ":", "# old format", "\n", "                    ", "if", "parse", "!=", "None", ":", "\n", "                        ", "self", ".", "parseElement", "=", "parsesElement", ".", "find", "(", "parse", ")", "\n", "", "if", "tokenization", "!=", "None", ":", "\n", "                        ", "tokenizationsElement", "=", "sentenceAnalysesElement", ".", "find", "(", "\"tokenizations\"", ")", "\n", "if", "tokenizationsElement", "!=", "None", ":", "\n", "                            ", "self", ".", "tokenizationElement", "=", "tokenizationsElement", ".", "find", "(", "tokenization", ")", "\n", "\n", "", "", "", "dependencyElements", "=", "None", "\n", "if", "self", ".", "parseElement", "!=", "None", ":", "\n", "                    ", "dependencyElements", "=", "self", ".", "parseElement", ".", "findall", "(", "\"dependency\"", ")", "\n", "if", "dependencyElements", "!=", "None", ":", "\n", "                        ", "self", ".", "dependencies", "=", "dependencyElements", "\n", "", "", "else", ":", "\n", "                    ", "if", "verbose", ":", "\n", "                        ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, parse\"", ",", "parse", ",", "\"not found\"", "\n", "", "", "if", "self", ".", "tokenizationElement", "!=", "None", ":", "\n", "                    ", "tokenElements", "=", "self", ".", "tokenizationElement", ".", "findall", "(", "\"token\"", ")", "\n", "if", "tokenElements", "!=", "None", ":", "\n", "                        ", "self", ".", "tokens", "=", "tokenElements", "\n", "", "", "else", ":", "\n", "                    ", "if", "verbose", ":", "\n", "                        ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, tokenization\"", ",", "tokenization", ",", "\"not found\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SentenceElements.SentenceElements.getEntity": [[145, 153], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "getEntity", "(", "self", ",", "offset", ",", "offsetList", ",", "entityIds", ")", ":", "\n", "        ", "index", "=", "0", "\n", "for", "i", "in", "offsetList", ":", "\n", "            ", "if", "(", "offset", "[", "0", "]", ">=", "i", "[", "0", "]", "and", "offset", "[", "0", "]", "<=", "i", "[", "1", "]", ")", "or", "(", "i", "[", "0", "]", ">=", "offset", "[", "0", "]", "and", "i", "[", "0", "]", "<=", "offset", "[", "1", "]", ")", ":", "\n", "#print offset, \"list:\", i", "\n", "                ", "return", "entityIds", "[", "index", "]", "\n", "", "index", "+=", "1", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SentenceElements.SentenceElements.getEntityTokens": [[154, 181], ["entityElement.get().split", "tokenElement.get().split", "int", "int", "tokenElement.get", "SentenceElements.SentenceElements.getEntity", "entityTokens[].append", "entityTokens.has_key", "i.split", "int", "int", "entityOffsets.append", "entityOffsetIds.append", "entityTokens.has_key", "entityElement.get", "entityElement.get", "entityElement.get", "tokenElement.get", "entityElement.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SentenceElements.SentenceElements.getEntity", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getEntityTokens", "(", "self", ")", ":", "\n", "        ", "entityElements", "=", "self", ".", "entities", "\n", "entityOffsets", "=", "[", "]", "\n", "entityOffsetIds", "=", "[", "]", "\n", "entityTokens", "=", "{", "}", "\n", "for", "entityElement", "in", "entityElements", ":", "\n", "            ", "if", "not", "entityTokens", ".", "has_key", "(", "entityElement", ".", "get", "(", "\"id\"", ")", ")", ":", "\n", "                ", "entityTokens", "[", "entityElement", ".", "get", "(", "\"id\"", ")", "]", "=", "[", "]", "\n", "", "offsets", "=", "entityElement", ".", "get", "(", "\"charOffset\"", ")", ".", "split", "(", "\",\"", ")", "\n", "for", "i", "in", "offsets", ":", "\n", "                ", "offset", "=", "i", ".", "split", "(", "\"-\"", ")", "\n", "offset", "[", "0", "]", "=", "int", "(", "offset", "[", "0", "]", ")", "\n", "offset", "[", "1", "]", "=", "int", "(", "offset", "[", "1", "]", ")", "\n", "entityOffsets", ".", "append", "(", "offset", ")", "\n", "entityOffsetIds", ".", "append", "(", "entityElement", ".", "get", "(", "\"id\"", ")", ")", "\n", "\n", "", "", "for", "tokenElement", "in", "self", ".", "tokens", ":", "\n", "            ", "offset", "=", "tokenElement", ".", "get", "(", "\"charOffset\"", ")", ".", "split", "(", "\"-\"", ")", "\n", "offset", "[", "0", "]", "=", "int", "(", "offset", "[", "0", "]", ")", "\n", "offset", "[", "1", "]", "=", "int", "(", "offset", "[", "1", "]", ")", "\n", "id", "=", "tokenElement", ".", "get", "(", "\"id\"", ")", "\n", "entityId", "=", "self", ".", "getEntity", "(", "offset", ",", "entityOffsets", ",", "entityOffsetIds", ")", "\n", "if", "not", "entityTokens", ".", "has_key", "(", "entityId", ")", ":", "\n", "                ", "entityTokens", "[", "entityId", "]", "=", "[", "]", "\n", "", "entityTokens", "[", "entityId", "]", ".", "append", "(", "id", ")", "\n", "\n", "", "return", "entityTokens", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SentenceElements.getCorpusIterator": [[3, 27], ["ETUtils.ETWriter", "ETUtils.ETIteratorFromObj", "ETUtils.ETWriter.close", "element.findall", "ETUtils.ETWriter.write", "element.clear", "SentenceElements.SentenceElements", "sentences.append", "ETUtils.ETWriter.begin", "ETUtils.ETWriter.end"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETIteratorFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.begin", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.end"], ["def", "getCorpusIterator", "(", "input", ",", "output", ",", "parse", "=", "None", ",", "tokenization", "=", "None", ")", ":", "\n", "    ", "import", "cElementTreeUtils", "as", "ETUtils", "\n", "from", "InteractionXML", ".", "SentenceElements", "import", "SentenceElements", "\n", "#import xml.etree.cElementTree as ElementTree", "\n", "\n", "etWriter", "=", "ETUtils", ".", "ETWriter", "(", "output", ")", "\n", "for", "eTuple", "in", "ETUtils", ".", "ETIteratorFromObj", "(", "input", ",", "(", "\"start\"", ",", "\"end\"", ")", ")", ":", "\n", "        ", "element", "=", "eTuple", "[", "1", "]", "\n", "if", "eTuple", "[", "0", "]", "==", "\"end\"", "and", "element", ".", "tag", "==", "\"document\"", ":", "\n", "            ", "sentences", "=", "[", "]", "\n", "for", "sentenceElement", "in", "element", ".", "findall", "(", "\"sentence\"", ")", ":", "\n", "#print ElementTree.tostring(sentenceElement)", "\n", "                ", "sentence", "=", "SentenceElements", "(", "sentenceElement", ",", "parse", ",", "tokenization", ",", "removeIntersentenceInteractions", "=", "False", ")", "\n", "sentences", ".", "append", "(", "sentence", ")", "\n", "", "yield", "sentences", "\n", "etWriter", ".", "write", "(", "element", ")", "\n", "", "elif", "element", ".", "tag", "==", "\"corpus\"", ":", "\n", "            ", "if", "eTuple", "[", "0", "]", "==", "\"start\"", ":", "\n", "                ", "etWriter", ".", "begin", "(", "element", ")", "\n", "", "else", ":", "\n", "                ", "etWriter", ".", "end", "(", "element", ")", "\n", "", "", "if", "eTuple", "[", "0", "]", "==", "\"end\"", "and", "element", ".", "tag", "in", "[", "\"document\"", ",", "\"corpus\"", "]", ":", "\n", "            ", "element", ".", "clear", "(", ")", "\n", "", "", "etWriter", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.CopyParse.copyParse": [[10, 79], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "CorpusElements.loadCorpus", "inputTree.getroot.getiterator", "sentence.sentence.get", "sourceSentencesByText.has_key", "sentence.find", "ET.Element.find", "ET.Element.findall", "ET.Element.find", "ET.Element.findall", "Utils.write", "sourceSentencesByText.has_key", "ET.Element", "sentence.append", "ET.Element", "ET.Element.append", "ET.Element.append", "ET.Element", "ET.Element.append", "ET.Element.append", "sentence.sentence.get", "sourceSentencesByText[].sentence.get", "sentence.get", "sentence.get", "sentence.get", "parseElement.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.loadCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "copyParse", "(", "input", ",", "source", ",", "output", ",", "parse", ",", "tokenization", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Loading input file\"", ",", "input", "\n", "inputTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "inputRoot", "=", "inputTree", ".", "getroot", "(", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loading source:\"", ",", "\n", "sourceElements", "=", "CorpusElements", ".", "loadCorpus", "(", "source", ",", "parse", ",", "tokenization", ")", "\n", "sourceSentencesByText", "=", "{", "}", "\n", "for", "sentence", "in", "sourceElements", ".", "sentences", ":", "\n", "        ", "sentenceText", "=", "sentence", ".", "sentence", ".", "get", "(", "\"text\"", ")", "\n", "#assert not sourceSentencesByText.has_key(sentenceText)", "\n", "if", "sourceSentencesByText", ".", "has_key", "(", "sentenceText", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Duplicate text\"", ",", "sentence", ".", "sentence", ".", "get", "(", "\"id\"", ")", ",", "sourceSentencesByText", "[", "sentenceText", "]", ".", "sentence", ".", "get", "(", "\"id\"", ")", "\n", "", "sourceSentencesByText", "[", "sentenceText", "]", "=", "sentence", "\n", "", "parsesCopied", "=", "[", "0", ",", "0", "]", "\n", "tokenizationsCopied", "=", "[", "0", ",", "0", "]", "\n", "for", "sentence", "in", "inputRoot", ".", "getiterator", "(", "\"sentence\"", ")", ":", "\n", "        ", "parsesCopied", "[", "1", "]", "+=", "1", "\n", "tokenizationsCopied", "[", "1", "]", "+=", "1", "\n", "#sourceSentence = sourceElements.sentencesByOrigId[sentence.attrib[\"origId\"]]", "\n", "if", "not", "sourceSentencesByText", ".", "has_key", "(", "sentence", ".", "get", "(", "\"text\"", ")", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, no text found for sentence\"", ",", "sentence", ".", "get", "(", "\"id\"", ")", "\n", "continue", "\n", "", "sourceSentence", "=", "sourceSentencesByText", "[", "sentence", ".", "get", "(", "\"text\"", ")", "]", "\n", "# Create analyses element (if needed)", "\n", "targetAnalysesElement", "=", "sentence", ".", "find", "(", "\"sentenceanalyses\"", ")", "\n", "if", "targetAnalysesElement", "==", "None", ":", "\n", "            ", "targetAnalysesElement", "=", "ET", ".", "Element", "(", "\"sentenceanalyses\"", ")", "\n", "sentence", ".", "append", "(", "targetAnalysesElement", ")", "\n", "# Create parses element (if needed)", "\n", "", "targetParsesElement", "=", "targetAnalysesElement", ".", "find", "(", "\"parses\"", ")", "\n", "if", "targetParsesElement", "==", "None", ":", "\n", "            ", "targetParsesElement", "=", "ET", ".", "Element", "(", "\"parses\"", ")", "\n", "targetAnalysesElement", ".", "append", "(", "targetParsesElement", ")", "\n", "# Check whether parse already exists", "\n", "", "targetParseElements", "=", "targetParsesElement", ".", "findall", "(", "\"parse\"", ")", "\n", "newParse", "=", "None", "\n", "for", "parseElement", "in", "targetParseElements", ":", "\n", "            ", "if", "parseElement", ".", "get", "(", "\"parser\"", ")", "==", "parse", ":", "\n", "                ", "newParse", "=", "parseElement", "\n", "break", "\n", "# Copy parse if it doesn't", "\n", "", "", "if", "newParse", "==", "None", "and", "sourceSentence", ".", "parseElement", "!=", "None", ":", "\n", "            ", "targetParsesElement", ".", "append", "(", "sourceSentence", ".", "parseElement", ")", "\n", "parsesCopied", "[", "0", "]", "+=", "1", "\n", "\n", "# Create tokenizations element (if needed)", "\n", "", "targetTokenizationsElement", "=", "targetAnalysesElement", ".", "find", "(", "\"tokenizations\"", ")", "\n", "if", "targetTokenizationsElement", "==", "None", ":", "\n", "            ", "targetTokenizationsElement", "=", "ET", ".", "Element", "(", "\"tokenizations\"", ")", "\n", "targetAnalysesElement", ".", "append", "(", "targetTokenizationsElement", ")", "\n", "# Check whether tokenization already exists", "\n", "", "targetTokenizationElements", "=", "targetTokenizationsElement", ".", "findall", "(", "\"tokenization\"", ")", "\n", "newTokenization", "=", "None", "\n", "for", "tokenizationElement", "in", "targetTokenizationElements", ":", "\n", "            ", "if", "tokenizationElement", ".", "attrib", "[", "\"tokenizer\"", "]", "==", "newParse", ".", "attrib", "[", "\"tokenizer\"", "]", ":", "\n", "                ", "newTokenization", "=", "tokenizationElement", "\n", "break", "\n", "# Copy parse if it doesn't", "\n", "", "", "if", "newTokenization", "==", "None", "and", "sourceSentence", ".", "tokenizationElement", "!=", "None", ":", "\n", "            ", "targetTokenizationsElement", ".", "append", "(", "sourceSentence", ".", "tokenizationElement", ")", "\n", "tokenizationsCopied", "[", "0", "]", "+=", "1", "\n", "\n", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Copied parse elements\"", ",", "parsesCopied", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Copied tokenization elements\"", ",", "tokenizationsCopied", "\n", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "inputTree", ",", "output", ")", "\n", "", "return", "inputTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.Subset.getElementCounts": [[13, 25], ["filename.endswith", "collections.defaultdict", "open.close", "gzip.open", "open"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open"], ["def", "getElementCounts", "(", "filename", ",", "elementTags", "=", "[", "]", ")", ":", "\n", "    ", "if", "filename", ".", "endswith", "(", "\".gz\"", ")", ":", "\n", "        ", "f", "=", "gzip", ".", "open", "(", "filename", ",", "\"rt\"", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "\"rt\"", ")", "\n", "", "counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "for", "elementTag", "in", "elementTags", ":", "\n", "            ", "if", "\"<\"", "+", "elementTag", "in", "line", ":", "\n", "                ", "counts", "[", "elementTag", "]", "+=", "1", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.Subset.getSample": [[27, 37], ["random.seed", "random.sample", "range", "xrange", "int", "vector.append", "vector.append", "float"], "function", ["None"], ["", "def", "getSample", "(", "popSize", ",", "sampleFraction", ",", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "sample", "=", "random", ".", "sample", "(", "xrange", "(", "popSize", ")", ",", "int", "(", "sampleFraction", "*", "float", "(", "popSize", ")", ")", ")", "\n", "vector", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "popSize", ")", ":", "\n", "        ", "if", "i", "in", "sample", ":", "\n", "            ", "vector", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "vector", ".", "append", "(", "1", ")", "\n", "", "", "return", "vector", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.Subset.selectByAttributes": [[38, 43], ["element.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "selectByAttributes", "(", "element", ",", "attributes", ")", ":", "\n", "    ", "for", "key", "in", "attributes", ":", "\n", "        ", "if", "element", ".", "get", "(", "key", ")", "in", "attributes", "[", "key", "]", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.Subset.select": [[44, 57], ["Subset.selectByAttributes", "element.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.Subset.selectByAttributes", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "select", "(", "elementCount", ",", "documentSets", ",", "element", ",", "ids", ",", "attributes", ",", "invert", ")", ":", "\n", "    ", "if", "ids", "==", "None", "and", "attributes", "==", "None", ":", "\n", "        ", "selected", "=", "documentSets", "[", "elementCount", "]", "!=", "0", "\n", "", "else", ":", "\n", "        ", "selected", "=", "True", "\n", "if", "ids", "!=", "None", ":", "\n", "            ", "selected", "=", "selected", "and", "element", ".", "get", "(", "\"id\"", ")", "in", "ids", "\n", "", "if", "attributes", "!=", "None", ":", "\n", "            ", "selected", "=", "selected", "and", "selectByAttributes", "(", "element", ",", "attributes", ")", "\n", "", "selected", "=", "not", "selected", "\n", "", "if", "invert", ":", "\n", "        ", "selected", "=", "not", "selected", "\n", "", "return", "selected", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.Subset.getSubset": [[58, 95], ["collections.defaultdict", "Utils.ETIteratorFromObj", "Subset.getSample", "Utils.ETWriter", "ETUtils.ETWriter.close", "Utils.encodeNewlines", "str", "Subset.getElementCounts", "Subset.select", "ETUtils.ETWriter.begin", "type", "ETUtils.ETWriter.end", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETIteratorFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.Subset.getSample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.encodeNewlines", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.Subset.getElementCounts", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.Subset.select", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.begin", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.end"], ["", "def", "getSubset", "(", "input", ",", "output", "=", "None", ",", "fraction", "=", "1.0", ",", "seed", "=", "0", ",", "ids", "=", "None", ",", "attributes", "=", "None", ",", "invert", "=", "False", ",", "targetElementTag", "=", "\"document\"", ")", ":", "\n", "    ", "distribution", "=", "None", "\n", "if", "ids", "==", "None", "and", "attributes", "==", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"No id-file, using pseudorandom distribution\"", "\n", "distribution", "=", "getSample", "(", "getElementCounts", "(", "input", ",", "[", "targetElementTag", "]", ")", "[", "targetElementTag", "]", ",", "fraction", ",", "seed", ")", "\n", "", "elif", "attributes", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Selecting subset with attributes:\"", ",", "attributes", "\n", "for", "key", "in", "attributes", ":", "\n", "            ", "assert", "type", "(", "attributes", "[", "key", "]", ")", "in", "(", "types", ".", "ListType", ",", "types", ".", "TupleType", ")", ",", "attributes", "\n", "\n", "", "", "counts", "=", "defaultdict", "(", "int", ")", "\n", "\n", "outWriter", "=", "None", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "outWriter", "=", "ETUtils", ".", "ETWriter", "(", "output", ")", "\n", "", "targetElementCount", "=", "0", "\n", "skip", "=", "False", "\n", "for", "event", "in", "ETUtils", ".", "ETIteratorFromObj", "(", "input", ",", "(", "\"start\"", ",", "\"end\"", ")", ")", ":", "\n", "        ", "if", "event", "[", "0", "]", "==", "\"start\"", ":", "\n", "            ", "if", "event", "[", "1", "]", ".", "tag", "==", "targetElementTag", ":", "\n", "                ", "skip", "=", "select", "(", "targetElementCount", ",", "distribution", ",", "event", "[", "1", "]", ",", "ids", ",", "attributes", ",", "invert", ")", "\n", "targetElementCount", "+=", "1", "\n", "", "if", "not", "skip", ":", "\n", "                ", "outWriter", ".", "begin", "(", "event", "[", "1", "]", ")", "\n", "counts", "[", "event", "[", "1", "]", ".", "tag", "+", "\":kept\"", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "counts", "[", "event", "[", "1", "]", ".", "tag", "+", "\":removed\"", "]", "+=", "1", "\n", "", "", "elif", "event", "[", "0", "]", "==", "\"end\"", ":", "\n", "            ", "if", "not", "skip", ":", "\n", "                ", "outWriter", ".", "end", "(", "event", "[", "1", "]", ")", "\n", "", "if", "event", "[", "1", "]", ".", "tag", "==", "targetElementTag", ":", "\n", "                ", "skip", "=", "False", "\n", "", "", "", "if", "output", "!=", "None", ":", "\n", "        ", "outWriter", ".", "close", "(", ")", "\n", "ETUtils", ".", "encodeNewlines", "(", "output", ")", "\n", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\"Subset for \"", "+", "str", "(", "input", ")", "+", "\": \"", "+", "str", "(", "counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.FixAltOffsets.fixAltOffsets": [[14, 48], ["Utils.ETFromObj", "ETUtils.ETFromObj.getroot", "Utils.ProgressCounter.ProgressCounter", "len", "Utils.ProgressCounter.ProgressCounter.update", "Utils.charOffsetToSingleTuple", "sentence.findall", "Utils.write", "corpusTree.getroot.getiterator", "sentence.get", "entity.get", "Utils.charOffsetToTuples", "range", "entity.set", "len", "len", "Utils.tuplesToCharOffset", "sentence.get"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToTuples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.tuplesToCharOffset", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["def", "fixAltOffsets", "(", "input", ",", "output", "=", "None", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"Loading corpus\"", ",", "input", "\n", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "input", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Corpus file loaded\"", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "docCount", "=", "0", "\n", "sentencesCreated", "=", "0", "\n", "sentences", "=", "[", "x", "for", "x", "in", "corpusRoot", ".", "getiterator", "(", "\"sentence\"", ")", "]", "\n", "counter", "=", "ProgressCounter", "(", "len", "(", "sentences", ")", ",", "\"FixAltOffsets\"", ")", "\n", "fixCount", "=", "0", "\n", "# fix spans", "\n", "for", "sentence", "in", "sentences", ":", "\n", "        ", "counter", ".", "update", "(", "1", ",", "\"Fixing AltOffsets for sentence (\"", "+", "sentence", ".", "get", "(", "\"id\"", ")", "+", "\"): \"", ")", "\n", "sentOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "sentence", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "for", "entity", "in", "sentence", ".", "findall", "(", "\"entity\"", ")", ":", "\n", "            ", "altOffsetString", "=", "entity", ".", "get", "(", "\"altOffset\"", ")", "\n", "if", "altOffsetString", "==", "None", ":", "\n", "                ", "continue", "\n", "#print altOffsetString", "\n", "", "altOffsets", "=", "Range", ".", "charOffsetToTuples", "(", "altOffsetString", ")", "\n", "assert", "len", "(", "altOffsets", ")", "==", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "altOffsets", ")", ")", ":", "\n", "                ", "altOffset", "=", "altOffsets", "[", "i", "]", "\n", "altOffsets", "[", "i", "]", "=", "(", "altOffset", "[", "0", "]", "-", "sentOffset", "[", "0", "]", ",", "altOffset", "[", "1", "]", "-", "sentOffset", "[", "0", "]", ")", "\n", "", "entity", ".", "set", "(", "\"altOffset\"", ",", "Range", ".", "tuplesToCharOffset", "(", "altOffsets", ")", ")", "\n", "fixCount", "+=", "1", "\n", "\n", "", "", "print", ">>", "sys", ".", "stderr", ",", "\"Fixed\"", ",", "fixCount", ",", "\"altOffsets\"", "\n", "\n", "if", "output", "!=", "None", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing output to\"", ",", "output", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "output", ")", "\n", "", "return", "corpusTree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.combine.combine": [[21, 37], ["combine.combine.rloop"], "function", ["None"], ["def", "combine", "(", "*", "seqin", ")", ":", "\n", "    ", "'''returns a list of all combinations of argument sequences.\n    for example: combine((1,2),(3,4)) returns\n    [[1, 3], [1, 4], [2, 3], [2, 4]]'''", "\n", "def", "rloop", "(", "seqin", ",", "listout", ",", "comb", ")", ":", "\n", "        ", "'''recursive looping function'''", "\n", "if", "seqin", ":", "# any more sequences to process?", "\n", "            ", "for", "item", "in", "seqin", "[", "0", "]", ":", "\n", "                ", "newcomb", "=", "comb", "+", "[", "item", "]", "# add next item to current comb", "\n", "# call rloop w/ rem seqs, newcomb", "\n", "rloop", "(", "seqin", "[", "1", ":", "]", ",", "listout", ",", "newcomb", ")", "\n", "", "", "else", ":", "# processing last sequence", "\n", "            ", "listout", ".", "append", "(", "comb", ")", "# comb finished, add to list", "\n", "", "", "listout", "=", "[", "]", "# listout initialization", "\n", "rloop", "(", "seqin", ",", "listout", ",", "[", "]", ")", "# start recursive process", "\n", "return", "listout", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.combine.xcombine": [[38, 55], ["combine.combine.rloop"], "function", ["None"], ["", "def", "xcombine", "(", "*", "seqin", ")", ":", "\n", "    ", "'''returns a generator which returns combinations of argument sequences\n    for example xcombine((1,2),(3,4)) returns a generator; calling the next()\n    method on the generator will return [1,3], [1,4], [2,3], [2,4] and\n    StopIteration exception.  This will not create the whole list of \n    combinations in memory at once.'''", "\n", "def", "rloop", "(", "seqin", ",", "comb", ")", ":", "\n", "        ", "'''recursive looping function'''", "\n", "if", "seqin", ":", "# any more sequences to process?", "\n", "            ", "for", "item", "in", "seqin", "[", "0", "]", ":", "\n", "                ", "newcomb", "=", "comb", "+", "[", "item", "]", "# add next item to current combination", "\n", "# call rloop w/ remaining seqs, newcomb", "\n", "for", "item", "in", "rloop", "(", "seqin", "[", "1", ":", "]", ",", "newcomb", ")", ":", "\n", "                    ", "yield", "item", "# seqs and newcomb", "\n", "", "", "", "else", ":", "# processing last sequence", "\n", "            ", "yield", "comb", "# comb finished, add to list", "\n", "", "", "return", "rloop", "(", "seqin", ",", "[", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBarWidget.update": [[73, 82], ["None"], "methods", ["None"], ["def", "update", "(", "self", ",", "pbar", ")", ":", "\n", "        ", "\"\"\"Returns the string representing the widget.\n\n        The parameter pbar is a reference to the calling ProgressBar,\n        where one can access attributes of the class for knowing how\n        the update must be made.\n\n        At least this function must be overriden.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBarWidgetHFill.update": [[92, 102], ["None"], "methods", ["None"], ["def", "update", "(", "self", ",", "pbar", ",", "width", ")", ":", "\n", "        ", "\"\"\"Returns the string representing the widget.\n\n        The parameter pbar is a reference to the calling ProgressBar,\n        where one can access attributes of the class for knowing how\n        the update must be made. The parameter width is the total\n        horizontal width the widget must have.\n\n        At least this function must be overriden.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ETA.format_time": [[106, 108], ["time.strftime", "time.gmtime"], "methods", ["None"], ["def", "format_time", "(", "self", ",", "seconds", ")", ":", "\n", "        ", "return", "time", ".", "strftime", "(", "'%H:%M:%S'", ",", "time", ".", "gmtime", "(", "seconds", ")", ")", "\n", "", "def", "update", "(", "self", ",", "pbar", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ETA.update": [[108, 117], ["progressbar.ETA.format_time", "progressbar.ETA.format_time"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ETA.format_time", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ETA.format_time"], ["", "def", "update", "(", "self", ",", "pbar", ")", ":", "\n", "        ", "if", "pbar", ".", "currval", "==", "0", ":", "\n", "            ", "return", "'ETA:  --:--:--'", "\n", "", "elif", "pbar", ".", "finished", ":", "\n", "            ", "return", "'Time: %s'", "%", "self", ".", "format_time", "(", "pbar", ".", "seconds_elapsed", ")", "\n", "", "else", ":", "\n", "            ", "elapsed", "=", "pbar", ".", "seconds_elapsed", "\n", "eta", "=", "elapsed", "*", "pbar", ".", "maxval", "/", "pbar", ".", "currval", "-", "elapsed", "\n", "return", "'ETA:  %s'", "%", "self", ".", "format_time", "(", "eta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.FileTransferSpeed.__init__": [[120, 123], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "fmt", "=", "'%6.2f %s'", "\n", "self", ".", "units", "=", "[", "'B'", ",", "'K'", ",", "'M'", ",", "'G'", ",", "'T'", ",", "'P'", "]", "\n", "", "def", "update", "(", "self", ",", "pbar", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.FileTransferSpeed.update": [[123, 134], ["float"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "pbar", ")", ":", "\n", "        ", "if", "pbar", ".", "seconds_elapsed", "<", "2e-6", ":", "#== 0:", "\n", "            ", "bps", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "bps", "=", "float", "(", "pbar", ".", "currval", ")", "/", "pbar", ".", "seconds_elapsed", "\n", "", "spd", "=", "bps", "\n", "for", "u", "in", "self", ".", "units", ":", "\n", "            ", "if", "spd", "<", "1000", ":", "\n", "                ", "break", "\n", "", "spd", "/=", "1000", "\n", "", "return", "self", ".", "fmt", "%", "(", "spd", ",", "u", "+", "'/s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.RotatingMarker.__init__": [[137, 140], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "markers", "=", "'|/-\\\\'", ")", ":", "\n", "        ", "self", ".", "markers", "=", "markers", "\n", "self", ".", "curmark", "=", "-", "1", "\n", "", "def", "update", "(", "self", ",", "pbar", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.RotatingMarker.update": [[140, 145], ["len"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "pbar", ")", ":", "\n", "        ", "if", "pbar", ".", "finished", ":", "\n", "            ", "return", "self", ".", "markers", "[", "0", "]", "\n", "", "self", ".", "curmark", "=", "(", "self", ".", "curmark", "+", "1", ")", "%", "len", "(", "self", ".", "markers", ")", "\n", "return", "self", ".", "markers", "[", "self", ".", "curmark", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.Percentage.update": [[148, 150], ["pbar.percentage"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.percentage"], ["def", "update", "(", "self", ",", "pbar", ")", ":", "\n", "        ", "return", "'%3d%%'", "%", "pbar", ".", "percentage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.Bar.__init__": [[153, 157], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "marker", "=", "'#'", ",", "left", "=", "'|'", ",", "right", "=", "'|'", ")", ":", "\n", "        ", "self", ".", "marker", "=", "marker", "\n", "self", ".", "left", "=", "left", "\n", "self", ".", "right", "=", "right", "\n", "", "def", "_format_marker", "(", "self", ",", "pbar", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.Bar._format_marker": [[157, 162], ["isinstance", "progressbar.Bar.marker.update"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update"], ["", "def", "_format_marker", "(", "self", ",", "pbar", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "marker", ",", "(", "str", ",", "unicode", ")", ")", ":", "\n", "            ", "return", "self", ".", "marker", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "marker", ".", "update", "(", "pbar", ")", "\n", "", "", "def", "update", "(", "self", ",", "pbar", ",", "width", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.Bar.update": [[162, 169], ["pbar.percentage", "int", "progressbar.Bar._format_marker", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.percentage", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.Bar._format_marker"], ["", "", "def", "update", "(", "self", ",", "pbar", ",", "width", ")", ":", "\n", "        ", "percent", "=", "pbar", ".", "percentage", "(", ")", "\n", "cwidth", "=", "width", "-", "len", "(", "self", ".", "left", ")", "-", "len", "(", "self", ".", "right", ")", "\n", "marked_width", "=", "int", "(", "percent", "*", "cwidth", "/", "100", ")", "\n", "m", "=", "self", ".", "_format_marker", "(", "pbar", ")", "\n", "bar", "=", "(", "self", ".", "left", "+", "(", "m", "*", "marked_width", ")", ".", "ljust", "(", "cwidth", ")", "+", "self", ".", "right", ")", "\n", "return", "bar", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ReverseBar.update": [[172, 179], ["pbar.percentage", "int", "progressbar.ReverseBar._format_marker", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.percentage", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.Bar._format_marker"], ["def", "update", "(", "self", ",", "pbar", ",", "width", ")", ":", "\n", "        ", "percent", "=", "pbar", ".", "percentage", "(", ")", "\n", "cwidth", "=", "width", "-", "len", "(", "self", ".", "left", ")", "-", "len", "(", "self", ".", "right", ")", "\n", "marked_width", "=", "int", "(", "percent", "*", "cwidth", "/", "100", ")", "\n", "m", "=", "self", ".", "_format_marker", "(", "pbar", ")", "\n", "bar", "=", "(", "self", ".", "left", "+", "(", "m", "*", "marked_width", ")", ".", "rjust", "(", "cwidth", ")", "+", "self", ".", "right", ")", "\n", "return", "bar", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.__init__": [[211, 233], ["progressbar.ProgressBar.handle_resize", "signal.signal"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.handle_resize"], ["def", "__init__", "(", "self", ",", "maxval", "=", "100", ",", "widgets", "=", "default_widgets", ",", "term_width", "=", "None", ",", "\n", "fd", "=", "sys", ".", "stderr", ")", ":", "\n", "        ", "assert", "maxval", ">", "0", "\n", "self", ".", "maxval", "=", "maxval", "\n", "self", ".", "widgets", "=", "widgets", "\n", "self", ".", "fd", "=", "fd", "\n", "self", ".", "signal_set", "=", "False", "\n", "if", "term_width", "is", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "handle_resize", "(", "None", ",", "None", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGWINCH", ",", "self", ".", "handle_resize", ")", "\n", "self", ".", "signal_set", "=", "True", "\n", "", "except", ":", "\n", "                ", "self", ".", "term_width", "=", "79", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "term_width", "=", "term_width", "\n", "\n", "", "self", ".", "currval", "=", "0", "\n", "self", ".", "finished", "=", "False", "\n", "self", ".", "prev_percentage", "=", "-", "1", "\n", "self", ".", "start_time", "=", "None", "\n", "self", ".", "seconds_elapsed", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.handle_resize": [[234, 237], ["array.array.array", "ioctl"], "methods", ["None"], ["", "def", "handle_resize", "(", "self", ",", "signum", ",", "frame", ")", ":", "\n", "        ", "h", ",", "w", "=", "array", "(", "'h'", ",", "ioctl", "(", "self", ".", "fd", ",", "termios", ".", "TIOCGWINSZ", ",", "'\\0'", "*", "8", ")", ")", "[", ":", "2", "]", "\n", "self", ".", "term_width", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.percentage": [[238, 241], ["None"], "methods", ["None"], ["", "def", "percentage", "(", "self", ")", ":", "\n", "        ", "\"Returns the percentage of the progress.\"", "\n", "return", "self", ".", "currval", "*", "100.0", "/", "self", ".", "maxval", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar._format_widgets": [[242, 262], ["enumerate", "isinstance", "r[].update", "r.append", "hfill_inds.append", "isinstance", "r.append", "len", "w.update", "len", "r.append"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update"], ["", "def", "_format_widgets", "(", "self", ")", ":", "\n", "        ", "r", "=", "[", "]", "\n", "hfill_inds", "=", "[", "]", "\n", "num_hfill", "=", "0", "\n", "currwidth", "=", "0", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "self", ".", "widgets", ")", ":", "\n", "            ", "if", "isinstance", "(", "w", ",", "ProgressBarWidgetHFill", ")", ":", "\n", "                ", "r", ".", "append", "(", "w", ")", "\n", "hfill_inds", ".", "append", "(", "i", ")", "\n", "num_hfill", "+=", "1", "\n", "", "elif", "isinstance", "(", "w", ",", "(", "str", ",", "unicode", ")", ")", ":", "\n", "                ", "r", ".", "append", "(", "w", ")", "\n", "currwidth", "+=", "len", "(", "w", ")", "\n", "", "else", ":", "\n", "                ", "weval", "=", "w", ".", "update", "(", "self", ")", "\n", "currwidth", "+=", "len", "(", "weval", ")", "\n", "r", ".", "append", "(", "weval", ")", "\n", "", "", "for", "iw", "in", "hfill_inds", ":", "\n", "            ", "r", "[", "iw", "]", "=", "r", "[", "iw", "]", ".", "update", "(", "self", ",", "(", "self", ".", "term_width", "-", "currwidth", ")", "/", "num_hfill", ")", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar._format_line": [[263, 265], ["progressbar.ProgressBar._format_widgets"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar._format_widgets"], ["", "def", "_format_line", "(", "self", ")", ":", "\n", "        ", "return", "''", ".", "join", "(", "self", ".", "_format_widgets", "(", ")", ")", ".", "ljust", "(", "self", ".", "term_width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar._need_update": [[266, 268], ["int", "int", "progressbar.ProgressBar.percentage"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.percentage"], ["", "def", "_need_update", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "percentage", "(", ")", ")", "!=", "int", "(", "self", ".", "prev_percentage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update": [[269, 284], ["progressbar.ProgressBar.percentage", "time.time", "time.time", "progressbar.ProgressBar.fd.write", "progressbar.ProgressBar.fd.write", "progressbar.ProgressBar._need_update", "progressbar.ProgressBar._format_line", "progressbar.ProgressBar._format_line"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.percentage", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar._need_update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar._format_line", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar._format_line"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"Updates the progress bar to a new value.\"", "\n", "assert", "0", "<=", "value", "<=", "self", ".", "maxval", ",", "value", "\n", "self", ".", "currval", "=", "value", "\n", "if", "not", "self", ".", "_need_update", "(", ")", "or", "self", ".", "finished", ":", "\n", "            ", "return", "\n", "", "if", "not", "self", ".", "start_time", ":", "\n", "            ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "self", ".", "seconds_elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "prev_percentage", "=", "self", ".", "percentage", "(", ")", "\n", "if", "value", "!=", "self", ".", "maxval", ":", "\n", "            ", "self", ".", "fd", ".", "write", "(", "self", ".", "_format_line", "(", ")", "+", "'\\r'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "finished", "=", "True", "\n", "self", ".", "fd", ".", "write", "(", "self", ".", "_format_line", "(", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.start": [[285, 298], ["progressbar.ProgressBar.update"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update"], ["", "", "def", "start", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start measuring time, and prints the bar at 0%.\n\n        It returns self so you can use it like this:\n        >>> pbar = ProgressBar().start()\n        >>> for i in xrange(100):\n        ...    # do something\n        ...    pbar.update(i+1)\n        ...\n        >>> pbar.finish()\n        \"\"\"", "\n", "self", ".", "update", "(", "0", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.finish": [[299, 304], ["progressbar.ProgressBar.update", "signal.signal"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update"], ["", "def", "finish", "(", "self", ")", ":", "\n", "        ", "\"\"\"Used to tell the progress is finished.\"\"\"", "\n", "self", ".", "update", "(", "self", ".", "maxval", ")", "\n", "if", "self", ".", "signal_set", ":", "\n", "            ", "signal", ".", "signal", "(", "signal", ".", "SIGWINCH", ",", "signal", ".", "SIG_DFL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.BaseELM.__init__": [[53, 56], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "hidden_layer", ",", "regressor", ")", ":", "\n", "        ", "self", ".", "regressor", "=", "regressor", "\n", "self", ".", "hidden_layer", "=", "hidden_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.BaseELM.fit": [[57, 78], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Fit the model using X, y as training data.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape [n_samples, n_features]\n            Training vectors, where n_samples is the number of samples\n            and n_features is the number of features.\n\n        y : array-like of shape [n_samples, n_outputs]\n            Target values (class labels in classification, real numbers in\n            regression)\n\n        Returns\n        -------\n        self : object\n\n            Returns an instance of self.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.BaseELM.predict": [[79, 93], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Predict values using the model\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape [n_samples, n_features]\n\n        Returns\n        -------\n        C : numpy array of shape [n_samples, n_outputs]\n            Predicted values.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.GenELMRegressor.__init__": [[137, 146], ["random_layer.MLPRandomLayer", "elm.BaseELM.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "\n", "hidden_layer", "=", "MLPRandomLayer", "(", "random_state", "=", "0", ")", ",", "\n", "regressor", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "GenELMRegressor", ",", "self", ")", ".", "__init__", "(", "hidden_layer", ",", "regressor", ")", "\n", "\n", "self", ".", "coefs_", "=", "None", "\n", "self", ".", "fitted_", "=", "False", "\n", "self", ".", "hidden_activations_", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.GenELMRegressor._fit_regression": [[147, 158], ["sklearn.utils.extmath.safe_sparse_dot", "elm.GenELMRegressor.regressor.fit", "scipy.linalg.pinv2"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer.fit"], ["", "def", "_fit_regression", "(", "self", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        fit regression using pseudo-inverse\n        or supplied regressor\n        \"\"\"", "\n", "if", "(", "self", ".", "regressor", "is", "None", ")", ":", "\n", "            ", "self", ".", "coefs_", "=", "safe_sparse_dot", "(", "pinv2", "(", "self", ".", "hidden_activations_", ")", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "regressor", ".", "fit", "(", "self", ".", "hidden_activations_", ",", "y", ")", "\n", "\n", "", "self", ".", "fitted_", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.GenELMRegressor.fit": [[159, 186], ["elm.GenELMRegressor.hidden_layer.fit_transform", "elm.GenELMRegressor._fit_regression", "sklearn.utils.as_float_array"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.GenELMRegressor._fit_regression"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Fit the model using X, y as training data.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape [n_samples, n_features]\n            Training vectors, where n_samples is the number of samples\n            and n_features is the number of features.\n\n        y : array-like of shape [n_samples, n_outputs]\n            Target values (class labels in classification, real numbers in\n            regression)\n\n        Returns\n        -------\n        self : object\n\n            Returns an instance of self.\n        \"\"\"", "\n", "# fit random hidden layer and compute the hidden layer activations", "\n", "self", ".", "hidden_activations_", "=", "self", ".", "hidden_layer", ".", "fit_transform", "(", "X", ")", "\n", "\n", "# solve the regression from hidden activations to outputs", "\n", "self", ".", "_fit_regression", "(", "as_float_array", "(", "y", ",", "copy", "=", "True", ")", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.GenELMRegressor._get_predictions": [[187, 195], ["sklearn.utils.extmath.safe_sparse_dot", "elm.GenELMRegressor.regressor.predict"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.predict"], ["", "def", "_get_predictions", "(", "self", ")", ":", "\n", "        ", "\"\"\"get predictions using internal least squares/supplied regressor\"\"\"", "\n", "if", "(", "self", ".", "regressor", "is", "None", ")", ":", "\n", "            ", "preds", "=", "safe_sparse_dot", "(", "self", ".", "hidden_activations_", ",", "self", ".", "coefs_", ")", "\n", "", "else", ":", "\n", "            ", "preds", "=", "self", ".", "regressor", ".", "predict", "(", "self", ".", "hidden_activations_", ")", "\n", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.GenELMRegressor.predict": [[196, 219], ["elm.GenELMRegressor.hidden_layer.transform", "elm.GenELMRegressor._get_predictions", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer.transform", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.GenELMRegressor._get_predictions"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Predict values using the model\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape [n_samples, n_features]\n\n        Returns\n        -------\n        C : numpy array of shape [n_samples, n_outputs]\n            Predicted values.\n        \"\"\"", "\n", "if", "(", "not", "self", ".", "fitted_", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"ELMRegressor not fitted\"", ")", "\n", "\n", "# compute hidden layer activations", "\n", "", "self", ".", "hidden_activations_", "=", "self", ".", "hidden_layer", ".", "transform", "(", "X", ")", "\n", "\n", "# compute output predictions for new hidden activations", "\n", "predictions", "=", "self", ".", "_get_predictions", "(", ")", "\n", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.GenELMClassifier.__init__": [[262, 273], ["random_layer.MLPRandomLayer", "sklearn.preprocessing.LabelBinarizer", "elm.BaseELM.__init__", "elm.GenELMRegressor"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "\n", "hidden_layer", "=", "MLPRandomLayer", "(", "random_state", "=", "0", ")", ",", "\n", "binarizer", "=", "LabelBinarizer", "(", "-", "1", ",", "1", ")", ",", "\n", "regressor", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "GenELMClassifier", ",", "self", ")", ".", "__init__", "(", "hidden_layer", ",", "regressor", ")", "\n", "\n", "self", ".", "binarizer", "=", "binarizer", "\n", "\n", "self", ".", "classes_", "=", "None", "\n", "self", ".", "genelm_regressor_", "=", "GenELMRegressor", "(", "hidden_layer", ",", "regressor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.GenELMClassifier.decision_function": [[274, 290], ["elm.GenELMClassifier.genelm_regressor_.predict"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.predict"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        This function return the decision function values related to each\n        class on an array of test vectors X.\n\n        Parameters\n        ----------\n        X : array-like of shape [n_samples, n_features]\n\n        Returns\n        -------\n        C : array of shape [n_samples, n_classes] or [n_samples,]\n            Decision function values related to each class, per sample.\n            In the two-class case, the shape is [n_samples,]\n        \"\"\"", "\n", "return", "self", ".", "genelm_regressor_", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.GenELMClassifier.fit": [[291, 317], ["numpy.unique", "elm.GenELMClassifier.binarizer.fit_transform", "elm.GenELMClassifier.genelm_regressor_.fit"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Fit the model using X, y as training data.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape [n_samples, n_features]\n            Training vectors, where n_samples is the number of samples\n            and n_features is the number of features.\n\n        y : array-like of shape [n_samples, n_outputs]\n            Target values (class labels in classification, real numbers in\n            regression)\n\n        Returns\n        -------\n        self : object\n\n            Returns an instance of self.\n        \"\"\"", "\n", "self", ".", "classes_", "=", "np", ".", "unique", "(", "y", ")", "\n", "\n", "y_bin", "=", "self", ".", "binarizer", ".", "fit_transform", "(", "y", ")", "\n", "\n", "self", ".", "genelm_regressor_", ".", "fit", "(", "X", ",", "y_bin", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.GenELMClassifier.predict": [[318, 334], ["elm.GenELMClassifier.decision_function", "elm.GenELMClassifier.binarizer.inverse_transform"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.decision_function"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict values using the model\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape [n_samples, n_features]\n\n        Returns\n        -------\n        C : numpy array of shape [n_samples, n_outputs]\n            Predicted values.\n        \"\"\"", "\n", "raw_predictions", "=", "self", ".", "decision_function", "(", "X", ")", "\n", "class_predictions", "=", "self", ".", "binarizer", ".", "inverse_transform", "(", "raw_predictions", ")", "\n", "\n", "return", "class_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMRegressor.__init__": [[408, 422], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_hidden", "=", "20", ",", "alpha", "=", "0.5", ",", "rbf_width", "=", "1.0", ",", "\n", "activation_func", "=", "'tanh'", ",", "activation_args", "=", "None", ",", "\n", "user_components", "=", "None", ",", "regressor", "=", "None", ",", "random_state", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "n_hidden", "=", "n_hidden", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "activation_func", "=", "activation_func", "\n", "self", ".", "activation_args", "=", "activation_args", "\n", "self", ".", "user_components", "=", "user_components", "\n", "self", ".", "rbf_width", "=", "rbf_width", "\n", "self", ".", "regressor", "=", "regressor", "\n", "\n", "self", ".", "_genelm_regressor", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMRegressor._create_random_layer": [[423, 432], ["random_layer.RandomLayer"], "methods", ["None"], ["", "def", "_create_random_layer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Pass init params to RandomLayer\"\"\"", "\n", "\n", "return", "RandomLayer", "(", "n_hidden", "=", "self", ".", "n_hidden", ",", "\n", "alpha", "=", "self", ".", "alpha", ",", "random_state", "=", "self", ".", "random_state", ",", "\n", "activation_func", "=", "self", ".", "activation_func", ",", "\n", "activation_args", "=", "self", ".", "activation_args", ",", "\n", "user_components", "=", "self", ".", "user_components", ",", "\n", "rbf_width", "=", "self", ".", "rbf_width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMRegressor.fit": [[433, 458], ["elm.ELMRegressor._create_random_layer", "elm.GenELMRegressor", "elm.ELMRegressor._genelm_regressor.fit"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMRegressor._create_random_layer", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Fit the model using X, y as training data.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape [n_samples, n_features]\n            Training vectors, where n_samples is the number of samples\n            and n_features is the number of features.\n\n        y : array-like of shape [n_samples, n_outputs]\n            Target values (class labels in classification, real numbers in\n            regression)\n\n        Returns\n        -------\n        self : object\n\n            Returns an instance of self.\n        \"\"\"", "\n", "rhl", "=", "self", ".", "_create_random_layer", "(", ")", "\n", "self", ".", "_genelm_regressor", "=", "GenELMRegressor", "(", "hidden_layer", "=", "rhl", ",", "\n", "regressor", "=", "self", ".", "regressor", ")", "\n", "self", ".", "_genelm_regressor", ".", "fit", "(", "X", ",", "y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMRegressor.predict": [[459, 476], ["elm.ELMRegressor._genelm_regressor.predict", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Predict values using the model\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape [n_samples, n_features]\n\n        Returns\n        -------\n        C : numpy array of shape [n_samples, n_outputs]\n            Predicted values.\n        \"\"\"", "\n", "if", "(", "self", ".", "_genelm_regressor", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"SimpleELMRegressor not fitted\"", ")", "\n", "\n", "", "return", "self", ".", "_genelm_regressor", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.__init__": [[532, 549], ["sklearn.preprocessing.LabelBinarizer", "elm.ELMRegressor.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "n_hidden", "=", "20", ",", "alpha", "=", "0.5", ",", "rbf_width", "=", "1.0", ",", "\n", "activation_func", "=", "'tanh'", ",", "activation_args", "=", "None", ",", "\n", "user_components", "=", "None", ",", "regressor", "=", "None", ",", "\n", "binarizer", "=", "LabelBinarizer", "(", "-", "1", ",", "1", ")", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "ELMClassifier", ",", "self", ")", ".", "__init__", "(", "n_hidden", "=", "n_hidden", ",", "\n", "alpha", "=", "alpha", ",", "\n", "random_state", "=", "random_state", ",", "\n", "activation_func", "=", "activation_func", ",", "\n", "activation_args", "=", "activation_args", ",", "\n", "user_components", "=", "user_components", ",", "\n", "rbf_width", "=", "rbf_width", ",", "\n", "regressor", "=", "regressor", ")", "\n", "\n", "self", ".", "classes_", "=", "None", "\n", "self", ".", "binarizer", "=", "binarizer", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.decision_function": [[550, 566], ["elm.ELMRegressor.predict"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.predict"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        This function return the decision function values related to each\n        class on an array of test vectors X.\n\n        Parameters\n        ----------\n        X : array-like of shape [n_samples, n_features]\n\n        Returns\n        -------\n        C : array of shape [n_samples, n_classes] or [n_samples,]\n            Decision function values related to each class, per sample.\n            In the two-class case, the shape is [n_samples,]\n        \"\"\"", "\n", "return", "super", "(", "ELMClassifier", ",", "self", ")", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.fit": [[567, 594], ["numpy.unique", "elm.ELMClassifier.binarizer.fit_transform", "elm.ELMRegressor.fit"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Fit the model using X, y as training data.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape [n_samples, n_features]\n            Training vectors, where n_samples is the number of samples\n            and n_features is the number of features.\n\n        y : array-like of shape [n_samples, n_outputs]\n            Target values (class labels in classification, real numbers in\n            regression)\n\n        Returns\n        -------\n        self : object\n\n            Returns an instance of self.\n        \"\"\"", "\n", "self", ".", "classes_", "=", "np", ".", "unique", "(", "y", ")", "\n", "\n", "y_bin", "=", "self", ".", "binarizer", ".", "fit_transform", "(", "y", ")", "\n", "\n", "super", "(", "ELMClassifier", ",", "self", ")", ".", "fit", "(", "X", ",", "y_bin", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.predict": [[595, 612], ["elm.ELMClassifier.decision_function", "elm.ELMClassifier.binarizer.inverse_transform"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.decision_function"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Predict values using the model\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape [n_samples, n_features]\n\n        Returns\n        -------\n        C : numpy array of shape [n_samples, n_outputs]\n            Predicted values.\n        \"\"\"", "\n", "raw_predictions", "=", "self", ".", "decision_function", "(", "X", ")", "\n", "class_predictions", "=", "self", ".", "binarizer", ".", "inverse_transform", "(", "raw_predictions", ")", "\n", "\n", "return", "class_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.score": [[613, 619], ["accuracy_score", "elm.ELMClassifier.predict"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.elm.ELMClassifier.predict"], ["", "def", "score", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Force use of accuracy score since we don't inherit\n           from ClassifierMixin\"\"\"", "\n", "\n", "from", "sklearn", ".", "metrics", "import", "accuracy_score", "\n", "return", "accuracy_score", "(", "y", ",", "self", ".", "predict", "(", "X", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer.activation_func_names": [[44, 48], ["cls._internal_activation_funcs.keys"], "methods", ["None"], ["@", "classmethod", "\n", "def", "activation_func_names", "(", "cls", ")", ":", "\n", "        ", "\"\"\"Get list of internal activation function names\"\"\"", "\n", "return", "cls", ".", "_internal_activation_funcs", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer.__init__": [[51, 64], ["dict", "dict"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "n_hidden", "=", "20", ",", "random_state", "=", "0", ",", "activation_func", "=", "None", ",", "\n", "activation_args", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "n_hidden", "=", "n_hidden", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "activation_func", "=", "activation_func", "\n", "self", ".", "activation_args", "=", "activation_args", "\n", "\n", "self", ".", "components_", "=", "dict", "(", ")", "\n", "self", ".", "input_activations_", "=", "None", "\n", "\n", "# keyword args for internally defined funcs", "\n", "self", ".", "_extra_args", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer._generate_components": [[65, 68], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_generate_components", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Generate components of hidden layer given X\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer._compute_input_activations": [[69, 72], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_compute_input_activations", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Compute input activations given X\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer._compute_hidden_activations": [[76, 93], ["random_layer.BaseRandomLayer._compute_input_activations", "callable", "random_layer.BaseRandomLayer.activation_func", "func"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._compute_input_activations"], ["", "def", "_compute_hidden_activations", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Compute hidden activations given X\"\"\"", "\n", "\n", "self", ".", "_compute_input_activations", "(", "X", ")", "\n", "\n", "acts", "=", "self", ".", "input_activations_", "\n", "\n", "if", "(", "callable", "(", "self", ".", "activation_func", ")", ")", ":", "\n", "            ", "args_dict", "=", "self", ".", "activation_args", "if", "(", "self", ".", "activation_args", ")", "else", "{", "}", "\n", "X_new", "=", "self", ".", "activation_func", "(", "acts", ",", "**", "args_dict", ")", "\n", "", "else", ":", "\n", "            ", "func_name", "=", "self", ".", "activation_func", "\n", "func", "=", "self", ".", "_internal_activation_funcs", "[", "func_name", "]", "\n", "\n", "X_new", "=", "func", "(", "acts", ",", "**", "self", ".", "_extra_args", ")", "\n", "\n", "", "return", "X_new", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer.fit": [[96, 116], ["sklearn.utils.atleast2d_or_csr", "random_layer.BaseRandomLayer._generate_components"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._generate_components"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate a random hidden layer.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape [n_samples, n_features]\n            Training set: only the shape is used to generate random component\n            values for hidden units\n\n        y : is not used: placeholder to allow for usage in a Pipeline.\n\n        Returns\n        -------\n        self\n        \"\"\"", "\n", "X", "=", "atleast2d_or_csr", "(", "X", ")", "\n", "\n", "self", ".", "_generate_components", "(", "X", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer.transform": [[119, 139], ["sklearn.utils.atleast2d_or_csr", "random_layer.BaseRandomLayer._compute_hidden_activations", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.BaseRandomLayer._compute_hidden_activations"], ["", "def", "transform", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate the random hidden layer's activations given X as input.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix}, shape [n_samples, n_features]\n            Data to transform\n\n        y : is not used: placeholder to allow for usage in a Pipeline.\n\n        Returns\n        -------\n        X_new : numpy array of shape [n_samples, n_components]\n        \"\"\"", "\n", "X", "=", "atleast2d_or_csr", "(", "X", ")", "\n", "\n", "if", "(", "self", ".", "components_", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'No components initialized'", ")", "\n", "\n", "", "return", "self", ".", "_compute_hidden_activations", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer.__init__": [[257, 278], ["random_layer.BaseRandomLayer.__init__", "isinstance", "random_layer.RandomLayer._internal_activation_funcs.keys", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "n_hidden", "=", "20", ",", "alpha", "=", "0.5", ",", "random_state", "=", "None", ",", "\n", "activation_func", "=", "'tanh'", ",", "activation_args", "=", "None", ",", "\n", "user_components", "=", "None", ",", "rbf_width", "=", "1.0", ")", ":", "\n", "\n", "        ", "super", "(", "RandomLayer", ",", "self", ")", ".", "__init__", "(", "n_hidden", "=", "n_hidden", ",", "\n", "random_state", "=", "random_state", ",", "\n", "activation_func", "=", "activation_func", ",", "\n", "activation_args", "=", "activation_args", ")", "\n", "\n", "if", "(", "isinstance", "(", "self", ".", "activation_func", ",", "str", ")", ")", ":", "\n", "            ", "func_names", "=", "self", ".", "_internal_activation_funcs", ".", "keys", "(", ")", "\n", "if", "(", "self", ".", "activation_func", "not", "in", "func_names", ")", ":", "\n", "                ", "msg", "=", "\"unknown activation function '%s'\"", "%", "self", ".", "activation_func", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "rbf_width", "=", "rbf_width", "\n", "self", ".", "user_components", "=", "user_components", "\n", "\n", "self", ".", "_use_mlp_input", "=", "(", "self", ".", "alpha", "!=", "0.0", ")", "\n", "self", ".", "_use_rbf_input", "=", "(", "self", ".", "alpha", "!=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._get_user_components": [[279, 285], ["None"], "methods", ["None"], ["", "def", "_get_user_components", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Look for given user component\"\"\"", "\n", "try", ":", "\n", "            ", "return", "self", ".", "user_components", "[", "key", "]", "\n", "", "except", "(", "TypeError", ",", "KeyError", ")", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._compute_radii": [[286, 301], ["random_layer.RandomLayer._get_user_components", "numpy.max", "sklearn.metrics.pairwise_distances", "math.sqrt", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._get_user_components"], ["", "", "def", "_compute_radii", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate RBF radii\"\"\"", "\n", "\n", "# use supplied radii if present", "\n", "radii", "=", "self", ".", "_get_user_components", "(", "'radii'", ")", "\n", "\n", "# compute radii", "\n", "if", "(", "radii", "is", "None", ")", ":", "\n", "            ", "centers", "=", "self", ".", "components_", "[", "'centers'", "]", "\n", "\n", "n_centers", "=", "centers", ".", "shape", "[", "0", "]", "\n", "max_dist", "=", "np", ".", "max", "(", "pairwise_distances", "(", "centers", ")", ")", "\n", "radii", "=", "np", ".", "ones", "(", "n_centers", ")", "*", "max_dist", "/", "sqrt", "(", "2.0", "*", "n_centers", ")", "\n", "\n", "", "self", ".", "components_", "[", "'radii'", "]", "=", "radii", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._compute_centers": [[302, 333], ["random_layer.RandomLayer._get_user_components", "xrange", "X.dtype.type", "numpy.array", "X.dtype.type", "numpy.array", "X.min", "X.max", "X.getcol", "numpy.minimum", "map", "numpy.maximum", "map", "rs.uniform", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._get_user_components"], ["", "def", "_compute_centers", "(", "self", ",", "X", ",", "sparse", ",", "rs", ")", ":", "\n", "        ", "\"\"\"Generate RBF centers\"\"\"", "\n", "\n", "# use supplied centers if present", "\n", "centers", "=", "self", ".", "_get_user_components", "(", "'centers'", ")", "\n", "\n", "# use points taken uniformly from the bounding", "\n", "# hyperrectangle", "\n", "if", "(", "centers", "is", "None", ")", ":", "\n", "            ", "n_features", "=", "X", ".", "shape", "[", "1", "]", "\n", "\n", "if", "(", "sparse", ")", ":", "\n", "                ", "fxr", "=", "xrange", "(", "n_features", ")", "\n", "cols", "=", "[", "X", ".", "getcol", "(", "i", ")", "for", "i", "in", "fxr", "]", "\n", "\n", "min_dtype", "=", "X", ".", "dtype", ".", "type", "(", "1.0e10", ")", "\n", "sp_min", "=", "lambda", "col", ":", "np", ".", "minimum", "(", "min_dtype", ",", "np", ".", "min", "(", "col", ".", "data", ")", ")", "\n", "min_Xs", "=", "np", ".", "array", "(", "map", "(", "sp_min", ",", "cols", ")", ")", "\n", "\n", "max_dtype", "=", "X", ".", "dtype", ".", "type", "(", "-", "1.0e10", ")", "\n", "sp_max", "=", "lambda", "col", ":", "np", ".", "maximum", "(", "max_dtype", ",", "np", ".", "max", "(", "col", ".", "data", ")", ")", "\n", "max_Xs", "=", "np", ".", "array", "(", "map", "(", "sp_max", ",", "cols", ")", ")", "\n", "", "else", ":", "\n", "                ", "min_Xs", "=", "X", ".", "min", "(", "axis", "=", "0", ")", "\n", "max_Xs", "=", "X", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "", "spans", "=", "max_Xs", "-", "min_Xs", "\n", "ctrs_size", "=", "(", "self", ".", "n_hidden", ",", "n_features", ")", "\n", "centers", "=", "min_Xs", "+", "spans", "*", "rs", ".", "uniform", "(", "0.0", ",", "1.0", ",", "ctrs_size", ")", "\n", "\n", "", "self", ".", "components_", "[", "'centers'", "]", "=", "centers", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._compute_biases": [[334, 344], ["random_layer.RandomLayer._get_user_components", "rs.normal"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._get_user_components"], ["", "def", "_compute_biases", "(", "self", ",", "rs", ")", ":", "\n", "        ", "\"\"\"Generate MLP biases\"\"\"", "\n", "\n", "# use supplied biases if present", "\n", "biases", "=", "self", ".", "_get_user_components", "(", "'biases'", ")", "\n", "if", "(", "biases", "is", "None", ")", ":", "\n", "            ", "b_size", "=", "self", ".", "n_hidden", "\n", "biases", "=", "rs", ".", "normal", "(", "size", "=", "b_size", ")", "\n", "\n", "", "self", ".", "components_", "[", "'biases'", "]", "=", "biases", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._compute_weights": [[345, 356], ["random_layer.RandomLayer._get_user_components", "rs.normal"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._get_user_components"], ["", "def", "_compute_weights", "(", "self", ",", "X", ",", "rs", ")", ":", "\n", "        ", "\"\"\"Generate MLP weights\"\"\"", "\n", "\n", "# use supplied weights if present", "\n", "weights", "=", "self", ".", "_get_user_components", "(", "'weights'", ")", "\n", "if", "(", "weights", "is", "None", ")", ":", "\n", "            ", "n_features", "=", "X", ".", "shape", "[", "1", "]", "\n", "hw_size", "=", "(", "n_features", ",", "self", ".", "n_hidden", ")", "\n", "weights", "=", "rs", ".", "normal", "(", "size", "=", "hw_size", ")", "\n", "\n", "", "self", ".", "components_", "[", "'weights'", "]", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._generate_components": [[357, 368], ["sklearn.utils.check_random_state", "random_layer.RandomLayer._compute_biases", "random_layer.RandomLayer._compute_weights", "random_layer.RandomLayer._compute_centers", "random_layer.RandomLayer._compute_radii", "scipy.issparse"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._compute_biases", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._compute_weights", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.GRBFRandomLayer._compute_centers", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.GRBFRandomLayer._compute_radii"], ["", "def", "_generate_components", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Generate components of hidden layer given X\"\"\"", "\n", "\n", "rs", "=", "check_random_state", "(", "self", ".", "random_state", ")", "\n", "if", "(", "self", ".", "_use_mlp_input", ")", ":", "\n", "            ", "self", ".", "_compute_biases", "(", "rs", ")", "\n", "self", ".", "_compute_weights", "(", "X", ",", "rs", ")", "\n", "\n", "", "if", "(", "self", ".", "_use_rbf_input", ")", ":", "\n", "            ", "self", ".", "_compute_centers", "(", "X", ",", "sp", ".", "issparse", "(", "X", ")", ",", "rs", ")", "\n", "self", ".", "_compute_radii", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RandomLayer._compute_input_activations": [[369, 388], ["numpy.zeros", "numpy.zeros", "sklearn.utils.extmath.safe_sparse_dot", "scipy.spatial.distance.cdist"], "methods", ["None"], ["", "", "def", "_compute_input_activations", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Compute input activations given X\"\"\"", "\n", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "mlp_acts", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "self", ".", "n_hidden", ")", ")", "\n", "if", "(", "self", ".", "_use_mlp_input", ")", ":", "\n", "            ", "b", "=", "self", ".", "components_", "[", "'biases'", "]", "\n", "w", "=", "self", ".", "components_", "[", "'weights'", "]", "\n", "mlp_acts", "=", "self", ".", "alpha", "*", "(", "safe_sparse_dot", "(", "X", ",", "w", ")", "+", "b", ")", "\n", "\n", "", "rbf_acts", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "self", ".", "n_hidden", ")", ")", "\n", "if", "(", "self", ".", "_use_rbf_input", ")", ":", "\n", "            ", "radii", "=", "self", ".", "components_", "[", "'radii'", "]", "\n", "centers", "=", "self", ".", "components_", "[", "'centers'", "]", "\n", "scale", "=", "self", ".", "rbf_width", "*", "(", "1.0", "-", "self", ".", "alpha", ")", "\n", "rbf_acts", "=", "scale", "*", "cdist", "(", "X", ",", "centers", ")", "/", "radii", "\n", "\n", "", "self", ".", "input_activations_", "=", "mlp_acts", "+", "rbf_acts", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.MLPRandomLayer.__init__": [[394, 405], ["random_layer.RandomLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "n_hidden", "=", "20", ",", "random_state", "=", "None", ",", "\n", "activation_func", "=", "'tanh'", ",", "activation_args", "=", "None", ",", "\n", "weights", "=", "None", ",", "biases", "=", "None", ")", ":", "\n", "\n", "        ", "user_components", "=", "{", "'weights'", ":", "weights", ",", "'biases'", ":", "biases", "}", "\n", "super", "(", "MLPRandomLayer", ",", "self", ")", ".", "__init__", "(", "n_hidden", "=", "n_hidden", ",", "\n", "random_state", "=", "random_state", ",", "\n", "activation_func", "=", "activation_func", ",", "\n", "activation_args", "=", "activation_args", ",", "\n", "user_components", "=", "user_components", ",", "\n", "alpha", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.RBFRandomLayer.__init__": [[411, 423], ["random_layer.RandomLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "n_hidden", "=", "20", ",", "random_state", "=", "None", ",", "\n", "activation_func", "=", "'gaussian'", ",", "activation_args", "=", "None", ",", "\n", "centers", "=", "None", ",", "radii", "=", "None", ",", "rbf_width", "=", "1.0", ")", ":", "\n", "\n", "        ", "user_components", "=", "{", "'centers'", ":", "centers", ",", "'radii'", ":", "radii", "}", "\n", "super", "(", "RBFRandomLayer", ",", "self", ")", ".", "__init__", "(", "n_hidden", "=", "n_hidden", ",", "\n", "random_state", "=", "random_state", ",", "\n", "activation_func", "=", "activation_func", ",", "\n", "activation_args", "=", "activation_args", ",", "\n", "user_components", "=", "user_components", ",", "\n", "rbf_width", "=", "rbf_width", ",", "\n", "alpha", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.GRBFRandomLayer.__init__": [[491, 503], ["random_layer.RBFRandomLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "n_hidden", "=", "20", ",", "grbf_lambda", "=", "0.001", ",", "\n", "centers", "=", "None", ",", "radii", "=", "None", ",", "random_state", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "GRBFRandomLayer", ",", "self", ")", ".", "__init__", "(", "n_hidden", "=", "n_hidden", ",", "\n", "activation_func", "=", "'grbf'", ",", "\n", "centers", "=", "centers", ",", "radii", "=", "radii", ",", "\n", "random_state", "=", "random_state", ")", "\n", "\n", "self", ".", "grbf_lambda", "=", "grbf_lambda", "\n", "self", ".", "dN_vals", "=", "None", "\n", "self", ".", "dF_vals", "=", "None", "\n", "self", ".", "tau_vals", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.GRBFRandomLayer._compute_centers": [[506, 525], ["random_layer.RandomLayer._compute_centers", "numpy.sort", "numpy.log", "numpy.log", "scipy.spatial.distance.squareform", "scipy.spatial.distance.pdist", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.GRBFRandomLayer._compute_centers"], ["", "def", "_compute_centers", "(", "self", ",", "X", ",", "sparse", ",", "rs", ")", ":", "\n", "        ", "\"\"\"Generate centers, then compute tau, dF and dN vals\"\"\"", "\n", "\n", "super", "(", "GRBFRandomLayer", ",", "self", ")", ".", "_compute_centers", "(", "X", ",", "sparse", ",", "rs", ")", "\n", "\n", "centers", "=", "self", ".", "components_", "[", "'centers'", "]", "\n", "sorted_distances", "=", "np", ".", "sort", "(", "squareform", "(", "pdist", "(", "centers", ")", ")", ")", "\n", "self", ".", "dF_vals", "=", "sorted_distances", "[", ":", ",", "-", "1", "]", "\n", "self", ".", "dN_vals", "=", "sorted_distances", "[", ":", ",", "1", "]", "/", "100.0", "\n", "#self.dN_vals = 0.0002 * np.ones(self.dF_vals.shape)", "\n", "\n", "tauNum", "=", "np", ".", "log", "(", "np", ".", "log", "(", "self", ".", "grbf_lambda", ")", "/", "\n", "np", ".", "log", "(", "1.0", "-", "self", ".", "grbf_lambda", ")", ")", "\n", "\n", "tauDenom", "=", "np", ".", "log", "(", "self", ".", "dF_vals", "/", "self", ".", "dN_vals", ")", "\n", "\n", "self", ".", "tau_vals", "=", "tauNum", "/", "tauDenom", "\n", "\n", "self", ".", "_extra_args", "[", "'taus'", "]", "=", "self", ".", "tau_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.PythonELM.random_layer.GRBFRandomLayer._compute_radii": [[527, 532], ["pow", "numpy.log"], "methods", ["None"], ["", "def", "_compute_radii", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate radii\"\"\"", "\n", "\n", "denom", "=", "pow", "(", "-", "np", ".", "log", "(", "self", ".", "grbf_lambda", ")", ",", "1.0", "/", "self", ".", "tau_vals", ")", "\n", "self", ".", "components_", "[", "'radii'", "]", "=", "self", ".", "dF_vals", "/", "denom", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.read_word": [[54, 74], ["inp.read", "chars.append", "wrd.decode", "ValueError", "wrd.decode"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "read_word", "(", "inp", ")", ":", "\n", "        ", "\"\"\"\n        Reads a single word from the input file\n        \"\"\"", "\n", "chars", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "c", "=", "inp", ".", "read", "(", "1", ")", "\n", "if", "c", "==", "b' '", ":", "\n", "                ", "break", "\n", "", "if", "not", "c", ":", "\n", "                ", "raise", "ValueError", "(", "\"preliminary end of file\"", ")", "\n", "", "chars", ".", "append", "(", "c", ")", "\n", "", "wrd", "=", "b''", ".", "join", "(", "chars", ")", ".", "strip", "(", ")", "\n", "try", ":", "\n", "            ", "return", "wrd", ".", "decode", "(", "\"utf-8\"", ")", "\n", "", "except", "UnicodeDecodeError", ":", "\n", "#Not a utf-8, shoots, what now?", "\n", "#maybe I should warn here TODO", "\n", "            ", "return", "wrd", ".", "decode", "(", "\"utf-8\"", ",", "\"replace\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.load": [[76, 118], ["open", "numpy.zeros", "range", "range", "mmap.mmap", "cls", "open.readline().strip", "open.readline().strip.split", "words.append", "offsets.append", "numpy.fromfile", "words.append", "offsets.append", "open.seek", "open.fileno", "int", "int", "ValueError", "cls.read_word", "open.tell", "cls.read_word", "open.tell", "open.readline"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.read_word", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.read_word"], ["", "", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "file_name", ",", "max_rank_mem", "=", "None", ",", "max_rank", "=", "None", ",", "float_type", "=", "numpy", ".", "float32", ")", ":", "\n", "        ", "\"\"\"\n        Loads a w2v bin file. \n        `inp` an open file or a file name\n        `max_rank_mem` read up to this many vectors into an internal matrix, the rest is memory-mapped\n        `max_rank` read up to this many vectors, memory-mapping whatever above max_rank_mem\n        `float_type` the type of the vector matrix\n        \"\"\"", "\n", "f", "=", "open", "(", "file_name", ",", "\"r+b\"", ")", "\n", "#Read the size line", "\n", "try", ":", "\n", "            ", "l", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "wcount", ",", "vsize", "=", "l", ".", "split", "(", ")", "\n", "wcount", ",", "vsize", "=", "int", "(", "wcount", ")", ",", "int", "(", "vsize", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "ValueError", "(", "\"Size line in the file is malformed: '%s'. Maybe this is not a w2v binary file?\"", "%", "l", ")", "\n", "\n", "", "if", "max_rank", "is", "None", "or", "max_rank", ">", "wcount", ":", "\n", "            ", "max_rank", "=", "wcount", "\n", "\n", "", "if", "max_rank_mem", "is", "None", "or", "max_rank_mem", ">", "max_rank", ":", "\n", "            ", "max_rank_mem", "=", "max_rank", "\n", "\n", "#offsets: byte offsets at which the vectors start", "\n", "", "offsets", "=", "[", "]", "\n", "#words: the words themselves", "\n", "words", "=", "[", "]", "\n", "#data: the vector matrix for the first max_rank vectors", "\n", "data", "=", "numpy", ".", "zeros", "(", "(", "max_rank_mem", ",", "vsize", ")", ",", "float_type", ")", "\n", "#Now read one word at a time, fill into the matrix", "\n", "for", "idx", "in", "range", "(", "max_rank_mem", ")", ":", "\n", "            ", "words", ".", "append", "(", "cls", ".", "read_word", "(", "f", ")", ")", "\n", "offsets", ".", "append", "(", "f", ".", "tell", "(", ")", ")", "\n", "data", "[", "idx", ",", ":", "]", "=", "numpy", ".", "fromfile", "(", "f", ",", "numpy", ".", "float32", ",", "vsize", ")", "\n", "#Keep reading, but only remember the offsets", "\n", "", "for", "idx", "in", "range", "(", "max_rank_mem", ",", "max_rank", ")", ":", "\n", "            ", "words", ".", "append", "(", "cls", ".", "read_word", "(", "f", ")", ")", "\n", "offsets", ".", "append", "(", "f", ".", "tell", "(", ")", ")", "\n", "f", ".", "seek", "(", "vsize", "*", "4", ",", "os", ".", "SEEK_CUR", ")", "#seek over the vector (4 is the size of float32)", "\n", "", "fm", "=", "mmap", ".", "mmap", "(", "f", ".", "fileno", "(", ")", ",", "0", ")", "\n", "return", "cls", "(", "words", ",", "data", ",", "fm", ",", "offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.__init__": [[119, 134], ["dict", "numpy.linalg.norm", "enumerate"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "words", ",", "vector_matrix", ",", "mm_file", ",", "offsets", ")", ":", "\n", "        ", "\"\"\"\n        `words`: list of words\n        `vector_matrix`: numpy matrix\n        `mm_file`: memory-mapped .bin file with the vectors\n        `offsets`: for every word, the offset at which its vector starts\n        \"\"\"", "\n", "self", ".", "vectors", "=", "vector_matrix", "#Numpy matrix", "\n", "self", ".", "words", "=", "words", "#The words to go with them", "\n", "self", ".", "w_to_dim", "=", "dict", "(", "(", "w", ",", "i", ")", "for", "i", ",", "w", "in", "enumerate", "(", "self", ".", "words", ")", ")", "\n", "self", ".", "mm_file", "=", "mm_file", "\n", "self", ".", "offsets", "=", "offsets", "\n", "self", ".", "max_rank_mem", ",", "self", ".", "vsize", "=", "self", ".", "vectors", ".", "shape", "\n", "#normalization constants for every row", "\n", "self", ".", "norm_constants", "=", "numpy", ".", "linalg", ".", "norm", "(", "x", "=", "self", ".", "vectors", ",", "ord", "=", "None", ",", "axis", "=", "1", ")", "#.reshape(self.max_rank,1) #Column vector of norms", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.__contains__": [[135, 137], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "wrd", ")", ":", "\n", "        ", "return", "wrd", "in", "self", ".", "w_to_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get": [[138, 141], ["lwvlib.WV.w_to_dim.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "get", "(", "self", ",", "wrd", ",", "default", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns the vocabulary index of wrd or default\"\"\"", "\n", "return", "self", ".", "w_to_dim", ".", "get", "(", "wrd", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.__getitem__": [[142, 144], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "wrd", ")", ":", "\n", "        ", "return", "self", ".", "w_to_dim", "[", "wrd", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.w_to_normv": [[145, 156], ["lwvlib.WV.w_to_dim.get", "numpy.fromstring().astype", "numpy.linalg.norm", "numpy.fromstring"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "w_to_normv", "(", "self", ",", "wrd", ")", ":", "\n", "#Return a normalized vector for wrd if you can, None if you cannot", "\n", "        ", "wrd_dim", "=", "self", ".", "w_to_dim", ".", "get", "(", "wrd", ")", "\n", "if", "wrd_dim", "is", "None", ":", "\n", "            ", "return", "None", "#We know nothing of this word, sorry", "\n", "", "if", "wrd_dim", "<", "self", ".", "max_rank_mem", ":", "#We have the vector loaded in memory", "\n", "            ", "return", "self", ".", "vectors", "[", "wrd_dim", "]", "/", "self", ".", "norm_constants", "[", "wrd_dim", "]", "\n", "", "else", ":", "#We don't have the vector loaded in memory, grab it from the file", "\n", "            ", "vec", "=", "numpy", ".", "fromstring", "(", "self", ".", "mm_file", "[", "self", ".", "offsets", "[", "wrd_dim", "]", ":", "self", ".", "offsets", "[", "wrd_dim", "]", "+", "self", ".", "vsize", "*", "4", "]", ",", "numpy", ".", "float32", ",", "self", ".", "vsize", ")", ".", "astype", "(", "self", ".", "vectors", ".", "dtype", ")", "\n", "vec", "/=", "numpy", ".", "linalg", ".", "norm", "(", "x", "=", "vec", ",", "ord", "=", "None", ")", "\n", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.nearest": [[157, 164], ["lwvlib.WV.w_to_normv", "lwvlib.WV.vectors.dot", "sorted", "numpy.argpartition"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.w_to_normv"], ["", "", "def", "nearest", "(", "self", ",", "wrd", ",", "N", "=", "10", ")", ":", "\n", "        ", "wrd_vec_norm", "=", "self", ".", "w_to_normv", "(", "wrd", ")", "\n", "if", "wrd_vec_norm", "is", "None", ":", "\n", "            ", "return", "\n", "", "sims", "=", "self", ".", "vectors", ".", "dot", "(", "wrd_vec_norm", ")", "/", "self", ".", "norm_constants", "#cosine similarity to all other vecs", "\n", "#http://stackoverflow.com/questions/6910641/how-to-get-indices-of-n-maximum-values-in-a-numpy-array", "\n", "return", "sorted", "(", "(", "(", "sims", "[", "idx", "]", ",", "self", ".", "words", "[", "idx", "]", ")", "for", "idx", "in", "numpy", ".", "argpartition", "(", "sims", ",", "-", "N", "-", "1", ")", "[", "-", "N", "-", "1", ":", "]", ")", ",", "reverse", "=", "True", ")", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.similarity": [[165, 174], ["lwvlib.WV.w_to_normv", "lwvlib.WV.w_to_normv", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.w_to_normv", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.w_to_normv"], ["", "def", "similarity", "(", "self", ",", "w1", ",", "w2", ")", ":", "\n", "        ", "\"\"\"\n        Return similarity of two words\n        \"\"\"", "\n", "w1_norm", "=", "self", ".", "w_to_normv", "(", "w1", ")", "\n", "w2_norm", "=", "self", ".", "w_to_normv", "(", "w2", ")", "\n", "if", "w1_norm", "is", "None", "or", "w2_norm", "is", "None", ":", "\n", "            ", "return", "\n", "", "return", "numpy", ".", "dot", "(", "w1_norm", ",", "w2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.analogy": [[175, 188], ["lwvlib.WV.w_to_normv", "lwvlib.WV.w_to_normv", "lwvlib.WV.w_to_normv", "numpy.linalg.norm", "lwvlib.WV.vectors.dot", "sorted", "numpy.argpartition"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.w_to_normv", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.w_to_normv", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.w_to_normv"], ["", "def", "analogy", "(", "self", ",", "src1", ",", "target1", ",", "src2", ",", "N", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        src1 is to target1 as src2 is to ____\n        \"\"\"", "\n", "src1nv", "=", "self", ".", "w_to_normv", "(", "src1", ")", "\n", "target1nv", "=", "self", ".", "w_to_normv", "(", "target1", ")", "\n", "src2nv", "=", "self", ".", "w_to_normv", "(", "src2", ")", "\n", "if", "None", "in", "(", "src1nv", ",", "target1nv", ",", "src2nv", ")", ":", "\n", "            ", "return", "None", "\n", "", "target2", "=", "src2nv", "+", "target1nv", "-", "src1nv", "\n", "target2", "/=", "numpy", ".", "linalg", ".", "norm", "(", "target2", ",", "ord", "=", "None", ")", "\n", "sims", "=", "self", ".", "vectors", ".", "dot", "(", "target2", ")", "/", "self", ".", "norm_constants", "#cosine similarity to all other vecs", "\n", "return", "sorted", "(", "(", "(", "sims", "[", "idx", "]", ",", "self", ".", "words", "[", "idx", "]", ")", "for", "idx", "in", "numpy", ".", "argpartition", "(", "sims", ",", "-", "N", "-", "1", ")", "[", "-", "N", "-", "1", ":", "]", ")", ",", "reverse", "=", "True", ")", "[", "1", ":", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.load": [[48, 50], ["lwvlib.WV.load"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.load"], ["def", "load", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "WV", ".", "load", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.__init__": [[25, 84], ["ExampleBuilder.ExampleBuilder.ExampleBuilder.__init__", "EntityExampleBuilder.EntityExampleBuilder._setDefaultParameters", "EntityExampleBuilder.EntityExampleBuilder.getParameters", "set", "Core.IdSet.IdSet", "Core.IdSet.IdSet", "Core.IdSet.IdSet.getId", "Gazetteer.loadGztr", "open", "open.readlines", "open.close", "FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder", "FeatureBuilders.WordNetFeatureBuilder.WordNetFeatureBuilder", "PhraseTriggerExampleBuilder.getBacteriaTokens", "FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder", "FeatureBuilders.DrugFeatureBuilder.DrugFeatureBuilder", "FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder", "FeatureBuilders.WordVectorFeatureBuilder.WordVectorFeatureBuilder", "EntityExampleBuilder.EntityExampleBuilder.skiplist.add", "line.strip"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getParameters", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.getBacteriaTokens", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["    ", "def", "__init__", "(", "self", ",", "style", "=", "None", ",", "classSet", "=", "None", ",", "featureSet", "=", "None", ",", "gazetteerFileName", "=", "None", ",", "skiplist", "=", "None", ")", ":", "\n", "        ", "if", "classSet", "==", "None", ":", "\n", "            ", "classSet", "=", "IdSet", "(", "1", ")", "\n", "", "if", "featureSet", "==", "None", ":", "\n", "            ", "featureSet", "=", "IdSet", "(", ")", "\n", "\n", "", "ExampleBuilder", ".", "__init__", "(", "self", ",", "classSet", ",", "featureSet", ")", "\n", "assert", "(", "classSet", ".", "getId", "(", "\"neg\"", ")", "==", "1", ")", "\n", "#gazetteerFileName=\"/usr/share/biotext/GeniaChallenge/SharedTaskTriggerTest/gazetteer-train\"", "\n", "if", "gazetteerFileName", "!=", "None", ":", "\n", "            ", "self", ".", "gazetteer", "=", "Gazetteer", ".", "loadGztr", "(", "gazetteerFileName", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loaded gazetteer from\"", ",", "gazetteerFileName", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"No gazetteer loaded\"", "\n", "self", ".", "gazetteer", "=", "None", "\n", "", "self", ".", "_setDefaultParameters", "(", "[", "\"rel_features\"", ",", "\"wordnet\"", ",", "\"bb_features\"", ",", "\"giuliano\"", ",", "\n", "\"epi_merge_negated\"", ",", "\"limit_merged_types\"", ",", "\"genia_task1\"", ",", "\n", "\"names\"", ",", "\"build_for_nameless\"", ",", "\"skip_for_nameless\"", ",", "\n", "\"pos_only\"", ",", "\"all_tokens\"", ",", "\"pos_pairs\"", ",", "\"linear_ngrams\"", ",", "\n", "\"phospho\"", ",", "\"drugbank_features\"", ",", "\"ddi13_features\"", ",", "\"metamap\"", ",", "\n", "\"only_types\"", ",", "\"ontobiotope_features\"", ",", "\"bb_spans\"", ",", "\"w2v\"", ",", "\n", "\"no_context\"", "]", ")", "\n", "self", ".", "styles", "=", "self", ".", "getParameters", "(", "style", ")", "\n", "#        if \"selftrain_group\" in self.styles:", "\n", "#            self.selfTrainGroups = set()", "\n", "#            if \"selftrain_group-1\" in self.styles:", "\n", "#                self.selfTrainGroups.add(\"-1\")", "\n", "#            if \"selftrain_group0\" in self.styles:", "\n", "#                self.selfTrainGroups.add(\"0\")", "\n", "#            if \"selftrain_group1\" in self.styles:", "\n", "#                self.selfTrainGroups.add(\"1\")", "\n", "#            if \"selftrain_group2\" in self.styles:", "\n", "#                self.selfTrainGroups.add(\"2\")", "\n", "#            if \"selftrain_group3\" in self.styles:", "\n", "#                self.selfTrainGroups.add(\"3\")", "\n", "#            print >> sys.stderr, \"Self-train-groups:\", self.selfTrainGroups", "\n", "\n", "self", ".", "skiplist", "=", "set", "(", ")", "\n", "if", "skiplist", "!=", "None", ":", "\n", "            ", "f", "=", "open", "(", "skiplist", ",", "\"rt\"", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "self", ".", "skiplist", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "", "if", "self", ".", "styles", "[", "\"rel_features\"", "]", ":", "\n", "            ", "self", ".", "relFeatureBuilder", "=", "RELFeatureBuilder", "(", "featureSet", ")", "\n", "", "if", "self", ".", "styles", "[", "\"wordnet\"", "]", ":", "\n", "            ", "self", ".", "wordNetFeatureBuilder", "=", "WordNetFeatureBuilder", "(", "featureSet", ")", "\n", "", "if", "self", ".", "styles", "[", "\"bb_features\"", "]", ":", "\n", "            ", "self", ".", "bacteriaTokens", "=", "PhraseTriggerExampleBuilder", ".", "getBacteriaTokens", "(", ")", "\n", "#self.bacteriaTokens = PhraseTriggerExampleBuilder.getBacteriaTokens(PhraseTriggerExampleBuilder.getBacteriaNames())", "\n", "", "if", "self", ".", "styles", "[", "\"giuliano\"", "]", ":", "\n", "            ", "self", ".", "giulianoFeatureBuilder", "=", "GiulianoFeatureBuilder", "(", "featureSet", ")", "\n", "", "if", "self", ".", "styles", "[", "\"drugbank_features\"", "]", ":", "\n", "            ", "self", ".", "drugFeatureBuilder", "=", "DrugFeatureBuilder", "(", "featureSet", ")", "\n", "", "if", "self", ".", "styles", "[", "\"ontobiotope_features\"", "]", ":", "\n", "            ", "self", ".", "ontobiotopeFeatureBuilder", "=", "OntoBiotopeFeatureBuilder", "(", "self", ".", "featureSet", ")", "\n", "", "if", "self", ".", "styles", "[", "\"w2v\"", "]", ":", "\n", "            ", "self", ".", "wordVectorFeatureBuilder", "=", "WordVectorFeatureBuilder", "(", "featureSet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.getMergedEntityType": [[85, 132], ["set", "set", "EntityExampleBuilder.EntityExampleBuilder.styles.get", "list", "list.sort", "entity.get", "sorted", "list.add", "set.add", "list.add", "set.add", "list", "typeString.find", "entity.get", "Utils.InteractionXML.ResolveEPITriggerTypes.getEPIBaseType", "Utils.InteractionXML.ResolveEPITriggerTypes.getEPIBaseType", "Utils.InteractionXML.ResolveEPITriggerTypes.getEPIBaseType", "Utils.InteractionXML.ResolveEPITriggerTypes.getEPIBaseType", "Utils.InteractionXML.ResolveEPITriggerTypes.getEPIBaseType", "Utils.InteractionXML.ResolveEPITriggerTypes.getEPIBaseType", "Utils.InteractionXML.ResolveEPITriggerTypes.getEPIBaseType", "Utils.InteractionXML.ResolveEPITriggerTypes.getEPIBaseType", "Utils.InteractionXML.ResolveEPITriggerTypes.getEPIBaseType", "entity.get", "entity.get", "typeString.split"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "getMergedEntityType", "(", "self", ",", "entities", ")", ":", "\n", "        ", "\"\"\"\n        If a single token belongs to multiple entities of different types,\n        a new, composite type is defined. This type is the alphabetically\n        ordered types of these entities joined with '---'.\n        \"\"\"", "\n", "types", "=", "set", "(", ")", "\n", "entityIds", "=", "set", "(", ")", "\n", "limitTypes", "=", "self", ".", "styles", ".", "get", "(", "\"only_types\"", ")", "\n", "for", "entity", "in", "entities", ":", "\n", "            ", "eType", "=", "entity", ".", "get", "(", "\"type\"", ")", "\n", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", "and", "self", ".", "styles", "[", "\"all_tokens\"", "]", ":", "\n", "                ", "continue", "\n", "", "if", "eType", "==", "\"Entity\"", "and", "self", ".", "styles", "[", "\"genia_task1\"", "]", ":", "\n", "                ", "continue", "\n", "", "if", "limitTypes", "and", "eType", "not", "in", "limitTypes", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "styles", "[", "\"epi_merge_negated\"", "]", ":", "\n", "                ", "types", ".", "add", "(", "Utils", ".", "InteractionXML", ".", "ResolveEPITriggerTypes", ".", "getEPIBaseType", "(", "eType", ")", ")", "\n", "entityIds", ".", "add", "(", "entity", ".", "get", "(", "\"id\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "types", ".", "add", "(", "eType", ")", "\n", "entityIds", ".", "add", "(", "entity", ".", "get", "(", "\"id\"", ")", ")", "\n", "", "", "types", "=", "list", "(", "types", ")", "\n", "types", ".", "sort", "(", ")", "\n", "typeString", "=", "\"\"", "\n", "for", "type", "in", "types", ":", "\n", "#if type == \"Protein\" and \"all_tokens\" in self.styles:", "\n", "#    continue", "\n", "            ", "if", "typeString", "!=", "\"\"", ":", "\n", "                ", "typeString", "+=", "\"---\"", "\n", "", "typeString", "+=", "type", "\n", "\n", "", "if", "typeString", "==", "\"\"", ":", "\n", "            ", "return", "\"neg\"", ",", "None", "\n", "\n", "", "idString", "=", "\"/\"", ".", "join", "(", "sorted", "(", "list", "(", "entityIds", ")", ")", ")", "\n", "\n", "if", "self", ".", "styles", "[", "\"limit_merged_types\"", "]", ":", "\n", "            ", "if", "typeString", ".", "find", "(", "\"---\"", ")", "!=", "-", "1", ":", "\n", "                ", "if", "typeString", "==", "\"Gene_expression---Positive_regulation\"", ":", "\n", "                    ", "return", "typeString", ",", "idString", "\n", "", "else", ":", "\n", "                    ", "return", "typeString", ".", "split", "(", "\"---\"", ")", "[", "0", "]", ",", "idString", "# ids partially incorrect", "\n", "", "", "else", ":", "\n", "                ", "return", "typeString", ",", "idString", "\n", "", "", "return", "typeString", ",", "idString", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.getMetaMapFeatures": [[133, 156], ["sentenceGraph.sentenceElement.find", "sentenceGraph.sentenceElement.find.find", "Utils.charOffsetToSingleTuple", "Utils.charOffsetToSingleTuple", "Utils.charOffsetToSingleTuple", "set", "sentenceGraph.sentenceElement.find.find.findall", "token.get", "Utils.charOffsetToSingleTuple", "Utils.charOffsetToSingleTuple", "Utils.charOffsetToSingleTuple", "Utils.overlap", "Utils.overlap", "Utils.overlap", "phrase.get", "sorted", "attr.keys", "attr[].split", "abs", "int", "attrValue.replace"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getMetaMapFeatures", "(", "self", ",", "token", ",", "sentenceGraph", ",", "features", ")", ":", "\n", "        ", "analyses", "=", "sentenceGraph", ".", "sentenceElement", ".", "find", "(", "\"analyses\"", ")", "\n", "if", "analyses", "==", "None", ":", "\n", "            ", "return", "\n", "", "metamap", "=", "analyses", ".", "find", "(", "\"metamap\"", ")", "\n", "if", "metamap", "==", "None", ":", "\n", "            ", "return", "\n", "", "tokenOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "token", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "skipAttr", "=", "set", "(", "[", "\"charOffset\"", ",", "\"text\"", "]", ")", "\n", "for", "phrase", "in", "metamap", ".", "findall", "(", "\"phrase\"", ")", ":", "\n", "            ", "phraseOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "phrase", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "if", "Range", ".", "overlap", "(", "tokenOffset", ",", "phraseOffset", ")", ":", "\n", "                ", "attr", "=", "phrase", ".", "attrib", "\n", "attrNames", "=", "sorted", "(", "attr", ".", "keys", "(", ")", ")", "\n", "for", "attrName", "in", "attrNames", ":", "\n", "                    ", "if", "attrName", "in", "skipAttr", ":", "\n", "                        ", "continue", "\n", "", "elif", "attrName", "==", "\"score\"", ":", "\n", "                        ", "features", "[", "\"_metamap_score\"", "]", "=", "0.001", "*", "abs", "(", "int", "(", "attr", "[", "attrName", "]", ")", ")", "\n", "", "else", ":", "\n", "                        ", "attrValues", "=", "attr", "[", "attrName", "]", ".", "split", "(", "\",\"", ")", "\n", "for", "attrValue", "in", "attrValues", ":", "\n", "                            ", "features", "[", "\"_metamap_\"", "+", "attrName", "+", "\"_\"", "+", "attrValue", ".", "replace", "(", "\" \"", ",", "\"-\"", ")", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.getTokenFeatures": [[157, 195], ["EntityExampleBuilder.EntityExampleBuilder.tokenFeatures.has_key", "sentenceGraph.getTokenText", "sorted", "EntityExampleBuilder.EntityExampleBuilder.getMetaMapFeatures", "features.keys", "token.get", "entity.get", "entity.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getMetaMapFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "", "", "", "def", "getTokenFeatures", "(", "self", ",", "token", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        Returns a list of features based on the attributes of a token.\n        These can be used to define more complex features.\n        \"\"\"", "\n", "# These features are cached when this method is first called", "\n", "# for a token.", "\n", "if", "self", ".", "tokenFeatures", ".", "has_key", "(", "token", ")", ":", "\n", "            ", "return", "self", ".", "tokenFeatures", "[", "token", "]", ",", "self", ".", "tokenFeatureWeights", "[", "token", "]", "\n", "", "tokTxt", "=", "sentenceGraph", ".", "getTokenText", "(", "token", ")", "\n", "features", "=", "{", "}", "\n", "features", "[", "\"_txt_\"", "+", "tokTxt", "]", "=", "1", "\n", "features", "[", "\"_POS_\"", "+", "token", ".", "get", "(", "\"POS\"", ")", "]", "=", "1", "\n", "if", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", "and", "not", "self", ".", "styles", "[", "\"names\"", "]", ":", "\n", "            ", "features", "[", "\"_given\"", "]", "=", "1", "\n", "for", "entity", "in", "sentenceGraph", ".", "tokenIsEntityHead", "[", "token", "]", ":", "\n", "                ", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "                    ", "features", "[", "\"_annType_\"", "+", "entity", ".", "get", "(", "\"type\"", ")", "]", "=", "1", "\n", "", "", "", "if", "self", ".", "styles", "[", "\"metamap\"", "]", ":", "\n", "            ", "self", ".", "getMetaMapFeatures", "(", "token", ",", "sentenceGraph", ",", "features", ")", "\n", "#        # Filip's gazetteer based features (can be used separately from exclude_gazetteer)", "\n", "#        if \"gazetteer_features\" in self.styles:", "\n", "#            tokTxtLower = tokTxt.lower()", "\n", "#            if \"stem_gazetteer\" in self.styles:", "\n", "#                tokTxtLower = PorterStemmer.stem(tokTxtLower)", "\n", "#            if self.gazetteer and tokTxtLower in self.gazetteer:", "\n", "#                for label,weight in self.gazetteer[tokTxtLower].items():", "\n", "#                    features[\"_knownLabel_\"+label]=weight # 1 performs slightly worse", "\n", "## BANNER features", "\n", "#if sentenceGraph.entityHintsByToken.has_key(token):", "\n", "#    features[\"BANNER-entity\"] = 1", "\n", "# Wordnet features", "\n", "#if \"wordnet\" in self.styles:", "\n", "#    for wordNetFeature in self.wordNetFeatureBuilder.getTokenFeatures(tokTxt, token.get(\"POS\")):", "\n", "#        features[\"_WN_\"+wordNetFeature] = 1", "\n", "", "self", ".", "tokenFeatures", "[", "token", "]", "=", "sorted", "(", "features", ".", "keys", "(", ")", ")", "\n", "self", ".", "tokenFeatureWeights", "[", "token", "]", "=", "features", "\n", "return", "self", ".", "tokenFeatures", "[", "token", "]", ",", "self", ".", "tokenFeatureWeights", "[", "token", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.buildLinearOrderFeatures": [[196, 205], ["EntityExampleBuilder.EntityExampleBuilder.getTokenFeatures", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "buildLinearOrderFeatures", "(", "self", ",", "sentenceGraph", ",", "index", ",", "tag", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n        Linear features are built by marking token features with a tag\n        that defines their relative position in the linear order.\n        \"\"\"", "\n", "tag", "=", "\"linear_\"", "+", "tag", "\n", "tokenFeatures", ",", "tokenFeatureWeights", "=", "self", ".", "getTokenFeatures", "(", "sentenceGraph", ".", "tokens", "[", "index", "]", ",", "sentenceGraph", ")", "\n", "for", "tokenFeature", "in", "tokenFeatures", ":", "\n", "            ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "tokenFeature", ")", "]", "=", "tokenFeatureWeights", "[", "tokenFeature", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.buildLinearNGram": [[206, 211], ["range", "sentenceGraph.getTokenText().lower", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "sentenceGraph.getTokenText"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText"], ["", "", "def", "buildLinearNGram", "(", "self", ",", "i", ",", "j", ",", "sentenceGraph", ",", "features", ")", ":", "\n", "        ", "ngram", "=", "\"ngram\"", "\n", "for", "index", "in", "range", "(", "i", ",", "j", "+", "1", ")", ":", "\n", "            ", "ngram", "+=", "\"_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "sentenceGraph", ".", "tokens", "[", "index", "]", ")", ".", "lower", "(", ")", "\n", "", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "ngram", ")", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.buildExamplesFromGraph": [[212, 576], ["sorted", "range", "sentenceGraph.sentenceElement.get", "sentenceGraph.tokenIsName.keys", "bagOfWords.keys", "sentenceGraph.dependencyGraph.getInEdges", "sentenceGraph.dependencyGraph.getOutEdges", "set", "len", "EntityExampleBuilder.EntityExampleBuilder.exampleStats.beginExample", "EntityExampleBuilder.EntityExampleBuilder.classSet.getId", "token.get().lower", "features.update", "token.get", "Utils.stem", "Utils.stem", "Utils.stem", "token.get.replace().replace().replace().replace().replace().lower", "Utils.stem", "Utils.stem", "Utils.stem", "token.get.split", "range", "Core.appendExamples", "EntityExampleBuilder.EntityExampleBuilder.exampleStats.endExample", "sentenceGraph.sentenceElement.get", "structureAnalyzer.hasGroupClass", "str", "EntityExampleBuilder.EntityExampleBuilder.getNamedEntityHeadTokens", "token.get", "bagOfWords.has_key", "len", "EntityExampleBuilder.EntityExampleBuilder.getMergedEntityType", "EntityExampleBuilder.EntityExampleBuilder.exampleStats.filter", "EntityExampleBuilder.EntityExampleBuilder.exampleStats.endExample", "EntityExampleBuilder.EntityExampleBuilder.exampleStats.filter", "EntityExampleBuilder.EntityExampleBuilder.exampleStats.endExample", "EntityExampleBuilder.EntityExampleBuilder.exampleStats.filter", "EntityExampleBuilder.EntityExampleBuilder.exampleStats.endExample", "string.lower", "text[].isalpha", "text[].isupper", "len", "text[].isdigit", "EntityExampleBuilder.EntityExampleBuilder.relFeatureBuilder.setFeatureVector", "EntityExampleBuilder.EntityExampleBuilder.relFeatureBuilder.buildAllFeatures", "EntityExampleBuilder.EntityExampleBuilder.relFeatureBuilder.setFeatureVector", "range", "EntityExampleBuilder.EntityExampleBuilder.drugFeatureBuilder.setFeatureVector", "EntityExampleBuilder.EntityExampleBuilder.drugFeatureBuilder.buildDrugFeatures", "EntityExampleBuilder.EntityExampleBuilder.drugFeatureBuilder.setFeatureVector", "token.get", "token.get", "EntityExampleBuilder.EntityExampleBuilder.wordNetFeatureBuilder.getTokenFeatures", "EntityExampleBuilder.EntityExampleBuilder.giulianoFeatureBuilder.setFeatureVector", "EntityExampleBuilder.EntityExampleBuilder.giulianoFeatureBuilder.buildTriggerFeatures", "EntityExampleBuilder.EntityExampleBuilder.giulianoFeatureBuilder.setFeatureVector", "EntityExampleBuilder.EntityExampleBuilder.ontobiotopeFeatureBuilder.setFeatureVector", "EntityExampleBuilder.EntityExampleBuilder.ontobiotopeFeatureBuilder.buildOBOFeaturesForToken", "EntityExampleBuilder.EntityExampleBuilder.ontobiotopeFeatureBuilder.setFeatureVector", "token.get", "sentenceGraph.sentenceElement.iter", "EntityExampleBuilder.EntityExampleBuilder.buildChains", "EntityExampleBuilder.EntityExampleBuilder.buildPOSPairs", "EntityExampleBuilder.EntityExampleBuilder.wordVectorFeatureBuilder.setFeatureVector", "EntityExampleBuilder.EntityExampleBuilder.wordVectorFeatureBuilder.buildFeatures", "EntityExampleBuilder.EntityExampleBuilder.wordVectorFeatureBuilder.setFeatureVector", "entity.get", "bagOfWords.has_key", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "token.get", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "token.get.replace().replace().replace().replace().replace", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.buildLinearNGram", "EntityExampleBuilder.EntityExampleBuilder.buildLinearNGram", "token.get.find", "token.get.lower", "text[].isalpha", "text[].isupper", "edge[].get", "sentenceGraph.getTokenText", "Utils.stem", "Utils.stem", "Utils.stem", "edge[].get", "sentenceGraph.getTokenText", "Utils.stem", "Utils.stem", "Utils.stem", "len", "str", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.buildLinearOrderFeatures", "max", "max", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "span.get", "token.get", "features.get", "abs", "abs", "span.get", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "sentenceGraph.getSentenceId", "token.get", "token.get.replace().replace().replace().replace", "len", "str", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "int", "len", "int", "len", "span.get", "Utils.stem", "Utils.stem", "Utils.stem", "text[].lower", "text[].lower", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "extra[].split", "span.get().split", "str", "len", "token.get.replace().replace().replace", "len", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "text[].lower", "text[].lower", "edge[].get", "edge[].get", "edge[].get", "edge[].get", "span.get", "span.get", "span.get", "span.get", "features.get", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "span.get", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "token.get.replace().replace", "str", "str", "token.get.replace"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.beginExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.appendExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.endExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.getNamedEntityHeadTokens", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EntityExampleWriter.EntityExampleWriter.getMergedEntityType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.filter", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.endExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.filter", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.endExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.filter", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.endExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.buildAllFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.buildTriggerFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.buildOBOFeaturesForToken", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.buildPOSPairs", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.buildLinearNGram", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.buildLinearNGram", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildLinearOrderFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getSentenceId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "buildExamplesFromGraph", "(", "self", ",", "sentenceGraph", ",", "outfile", ",", "goldGraph", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build one example for each token of the sentence\n        \"\"\"", "\n", "if", "sentenceGraph", ".", "sentenceElement", ".", "get", "(", "\"origId\"", ")", "in", "self", ".", "skiplist", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Skipping sentence\"", ",", "sentenceGraph", ".", "sentenceElement", ".", "get", "(", "\"origId\"", ")", "\n", "return", "0", "#[]", "\n", "\n", "#examples = []", "\n", "", "exampleIndex", "=", "0", "\n", "\n", "self", ".", "tokenFeatures", "=", "{", "}", "\n", "self", ".", "tokenFeatureWeights", "=", "{", "}", "\n", "\n", "# determine (manually or automatically) the setting for whether sentences with no given entities should be skipped", "\n", "buildForNameless", "=", "False", "\n", "if", "structureAnalyzer", "and", "not", "structureAnalyzer", ".", "hasGroupClass", "(", "\"GIVEN\"", ",", "\"ENTITY\"", ")", ":", "# no given entities points to no separate NER program being used", "\n", "            ", "buildForNameless", "=", "True", "\n", "", "if", "self", ".", "styles", "[", "\"build_for_nameless\"", "]", ":", "# manually force the setting", "\n", "            ", "buildForNameless", "=", "True", "\n", "", "if", "self", ".", "styles", "[", "\"skip_for_nameless\"", "]", ":", "# manually force the setting", "\n", "            ", "buildForNameless", "=", "False", "\n", "\n", "# determine whether sentences with no given entities should be skipped", "\n", "", "namedEntityHeadTokens", "=", "[", "]", "\n", "if", "not", "self", ".", "styles", "[", "\"names\"", "]", ":", "\n", "            ", "namedEntityCount", "=", "0", "\n", "for", "entity", "in", "sentenceGraph", ".", "entities", ":", "\n", "                ", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "# known data which can be used for features", "\n", "                    ", "namedEntityCount", "+=", "1", "\n", "", "", "namedEntityCountFeature", "=", "\"nameCount_\"", "+", "str", "(", "namedEntityCount", ")", "\n", "# NOTE!!! This will change the number of examples and omit", "\n", "# all triggers (positive and negative) from sentences which", "\n", "# have no NE:s, possibly giving a too-optimistic performance", "\n", "# value. Such sentences can still have triggers from intersentence", "\n", "# interactions, but as such events cannot be recovered anyway,", "\n", "# looking for these triggers would be pointless.", "\n", "if", "namedEntityCount", "==", "0", "and", "not", "buildForNameless", ":", "# no names, no need for triggers", "\n", "                ", "return", "0", "#[]", "\n", "\n", "", "if", "self", ".", "styles", "[", "\"pos_pairs\"", "]", ":", "\n", "                ", "namedEntityHeadTokens", "=", "self", ".", "getNamedEntityHeadTokens", "(", "sentenceGraph", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "key", "in", "sentenceGraph", ".", "tokenIsName", ".", "keys", "(", ")", ":", "\n", "                ", "sentenceGraph", ".", "tokenIsName", "[", "key", "]", "=", "False", "\n", "\n", "", "", "bagOfWords", "=", "{", "}", "\n", "for", "token", "in", "sentenceGraph", ".", "tokens", ":", "\n", "            ", "text", "=", "\"bow_\"", "+", "token", ".", "get", "(", "\"text\"", ")", "\n", "if", "not", "bagOfWords", ".", "has_key", "(", "text", ")", ":", "\n", "                ", "bagOfWords", "[", "text", "]", "=", "0", "\n", "", "bagOfWords", "[", "text", "]", "+=", "1", "\n", "if", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", ":", "\n", "                ", "text", "=", "\"ne_\"", "+", "text", "\n", "if", "not", "bagOfWords", ".", "has_key", "(", "text", ")", ":", "\n", "                    ", "bagOfWords", "[", "text", "]", "=", "0", "\n", "", "bagOfWords", "[", "text", "]", "+=", "1", "\n", "", "", "bowFeatures", "=", "{", "}", "\n", "for", "k", "in", "sorted", "(", "bagOfWords", ".", "keys", "(", ")", ")", ":", "\n", "            ", "bowFeatures", "[", "self", ".", "featureSet", ".", "getId", "(", "k", ")", "]", "=", "bagOfWords", "[", "k", "]", "\n", "\n", "", "self", ".", "inEdgesByToken", "=", "{", "}", "\n", "self", ".", "outEdgesByToken", "=", "{", "}", "\n", "self", ".", "edgeSetByToken", "=", "{", "}", "\n", "for", "token", "in", "sentenceGraph", ".", "tokens", ":", "\n", "#inEdges = sentenceGraph.dependencyGraph.in_edges(token, data=True)", "\n", "#fixedInEdges = []", "\n", "#for edge in inEdges:", "\n", "#    fixedInEdges.append( (edge[0], edge[1], edge[2][\"element\"]) )", "\n", "#inEdges = fixedInEdges", "\n", "            ", "inEdges", "=", "sentenceGraph", ".", "dependencyGraph", ".", "getInEdges", "(", "token", ")", "\n", "#inEdges.sort(compareDependencyEdgesById)", "\n", "self", ".", "inEdgesByToken", "[", "token", "]", "=", "inEdges", "\n", "#outEdges = sentenceGraph.dependencyGraph.out_edges(token, data=True)", "\n", "#fixedOutEdges = []", "\n", "#for edge in outEdges:", "\n", "#    fixedOutEdges.append( (edge[0], edge[1], edge[2][\"element\"]) )", "\n", "#outEdges = fixedOutEdges", "\n", "outEdges", "=", "sentenceGraph", ".", "dependencyGraph", ".", "getOutEdges", "(", "token", ")", "\n", "#outEdges.sort(compareDependencyEdgesById)", "\n", "self", ".", "outEdgesByToken", "[", "token", "]", "=", "outEdges", "\n", "self", ".", "edgeSetByToken", "[", "token", "]", "=", "set", "(", "inEdges", "+", "outEdges", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "sentenceGraph", ".", "tokens", ")", ")", ":", "\n", "            ", "token", "=", "sentenceGraph", ".", "tokens", "[", "i", "]", "\n", "\n", "# CLASS", "\n", "if", "len", "(", "sentenceGraph", ".", "tokenIsEntityHead", "[", "token", "]", ")", ">", "0", ":", "\n", "                ", "categoryName", ",", "entityIds", "=", "self", ".", "getMergedEntityType", "(", "sentenceGraph", ".", "tokenIsEntityHead", "[", "token", "]", ")", "\n", "", "else", ":", "\n", "                ", "categoryName", ",", "entityIds", "=", "\"neg\"", ",", "None", "\n", "", "self", ".", "exampleStats", ".", "beginExample", "(", "categoryName", ")", "\n", "\n", "# Recognize only non-named entities (i.e. interaction words)", "\n", "if", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", "and", "not", "self", ".", "styles", "[", "\"names\"", "]", "and", "not", "self", ".", "styles", "[", "\"all_tokens\"", "]", ":", "\n", "                ", "self", ".", "exampleStats", ".", "filter", "(", "\"name\"", ")", "\n", "self", ".", "exampleStats", ".", "endExample", "(", ")", "\n", "continue", "\n", "#            if \"selftrain_limits\" in self.styles:", "\n", "#                # any predicted entity not part of the self-training set causes example to be rejected", "\n", "#                filtered = False", "\n", "#                for entity in sentenceGraph.tokenIsEntityHead[token]:", "\n", "#                    if entity.get(\"selftrain\") == \"False\":", "\n", "#                        self.exampleStats.filter(\"selftrain_limits\")", "\n", "#                        self.exampleStats.endExample()", "\n", "#                        filtered = True", "\n", "#                        break", "\n", "#                if filtered:", "\n", "#                    continue", "\n", "#            if \"selftrain_group\" in self.styles:", "\n", "#                # any predicted entity not part of the self-training set causes example to be rejected", "\n", "#                filtered = False", "\n", "#                for entity in sentenceGraph.tokenIsEntityHead[token]:", "\n", "#                    if entity.get(\"selftraingroup\") not in self.selfTrainGroups:", "\n", "#                        self.exampleStats.filter(\"selftrain_group\")", "\n", "#                        self.exampleStats.endExample()", "\n", "#                        filtered = True", "\n", "#                        break", "\n", "#                if filtered:", "\n", "#                    continue", "\n", "", "if", "self", ".", "styles", "[", "\"pos_only\"", "]", "and", "categoryName", "==", "\"neg\"", ":", "\n", "                ", "self", ".", "exampleStats", ".", "filter", "(", "\"pos_only\"", ")", "\n", "self", ".", "exampleStats", ".", "endExample", "(", ")", "\n", "continue", "\n", "\n", "", "category", "=", "self", ".", "classSet", ".", "getId", "(", "categoryName", ")", "\n", "if", "category", "==", "None", ":", "\n", "                ", "self", ".", "exampleStats", ".", "filter", "(", "\"undefined_class\"", ")", "\n", "self", ".", "exampleStats", ".", "endExample", "(", ")", "\n", "continue", "\n", "\n", "", "tokenText", "=", "token", ".", "get", "(", "\"text\"", ")", ".", "lower", "(", ")", "\n", "#            if \"stem_gazetteer\" in self.styles:", "\n", "#                tokenText = PorterStemmer.stem(tokenText)", "\n", "#            if (\"exclude_gazetteer\" in self.styles) and self.gazetteer and tokenText not in self.gazetteer:", "\n", "#                features = {}", "\n", "#                features[self.featureSet.getId(\"exclude_gazetteer\")] = 1", "\n", "#                extra = {\"xtype\":\"token\",\"t\":token.get(\"id\"),\"excluded\":\"True\"}", "\n", "#                if entityIds != None:", "\n", "#                    extra[\"goldIds\"] = entityIds", "\n", "#                #examples.append( (sentenceGraph.getSentenceId()+\".x\"+str(exampleIndex),category,features,extra) )", "\n", "#                ExampleUtils.appendExamples([(sentenceGraph.getSentenceId()+\".x\"+str(exampleIndex),category,features,extra)], outfile)", "\n", "#                exampleIndex += 1", "\n", "#                continue", "\n", "\n", "# FEATURES", "\n", "features", "=", "{", "}", "\n", "\n", "if", "not", "self", ".", "styles", "[", "\"names\"", "]", ":", "\n", "                ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "namedEntityCountFeature", ")", "]", "=", "1", "\n", "#for k,v in bagOfWords.iteritems():", "\n", "#    features[self.featureSet.getId(k)] = v", "\n", "# pre-calculate bow _features_", "\n", "", "features", ".", "update", "(", "bowFeatures", ")", "\n", "\n", "#            for j in range(len(sentenceGraph.tokens)):", "\n", "#                text = \"bow_\" + sentenceGraph.tokens[j].get(\"text\")", "\n", "#                if j < i:", "\n", "#                    features[self.featureSet.getId(\"bf_\" + text)] = 1", "\n", "#                elif j > i:", "\n", "#                    features[self.featureSet.getId(\"af_\" + text)] = 1", "\n", "\n", "# Main features", "\n", "text", "=", "token", ".", "get", "(", "\"text\"", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"txt_\"", "+", "text", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"POS_\"", "+", "token", ".", "get", "(", "\"POS\"", ")", ")", "]", "=", "1", "\n", "stem", "=", "PorterStemmer", ".", "stem", "(", "text", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"stem_\"", "+", "stem", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"nonstem_\"", "+", "text", "[", "len", "(", "stem", ")", ":", "]", ")", "]", "=", "1", "\n", "\n", "# Normalized versions of the string (if same as non-normalized, overlap without effect)", "\n", "normalizedText", "=", "text", ".", "replace", "(", "\"-\"", ",", "\"\"", ")", ".", "replace", "(", "\"/\"", ",", "\"\"", ")", ".", "replace", "(", "\",\"", ",", "\"\"", ")", ".", "replace", "(", "\"\\\\\"", ",", "\"\"", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "lower", "(", ")", "\n", "if", "normalizedText", "==", "\"bound\"", ":", "# should be for all irregular verbs", "\n", "                ", "normalizedText", "=", "\"bind\"", "\n", "", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"txt_\"", "+", "normalizedText", ")", "]", "=", "1", "\n", "norStem", "=", "PorterStemmer", ".", "stem", "(", "normalizedText", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"stem_\"", "+", "norStem", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"nonstem_\"", "+", "normalizedText", "[", "len", "(", "norStem", ")", ":", "]", ")", "]", "=", "1", "\n", "\n", "## Subspan features", "\n", "#textLower = text.lower()", "\n", "#for i in range(1, len(textLower)):", "\n", "#    features[self.featureSet.getId(\"subspanbegin\"+str(i)+\"_\"+textLower[0:i])] = 1", "\n", "#    features[self.featureSet.getId(\"subspanend\"+str(i)+\"_\"+textLower[-i:])] = 1", "\n", "\n", "# Substring features", "\n", "for", "string", "in", "text", ".", "split", "(", "\"-\"", ")", ":", "\n", "                ", "stringLower", "=", "string", ".", "lower", "(", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"substring_\"", "+", "stringLower", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"substringstem_\"", "+", "PorterStemmer", ".", "stem", "(", "stringLower", ")", ")", "]", "=", "1", "\n", "\n", "", "if", "not", "self", ".", "styles", "[", "\"no_context\"", "]", ":", "\n", "# Linear order features", "\n", "                ", "for", "index", "in", "[", "-", "3", ",", "-", "2", ",", "-", "1", ",", "1", ",", "2", ",", "3", "]", ":", "\n", "                    ", "if", "i", "+", "index", ">", "0", "and", "i", "+", "index", "<", "len", "(", "sentenceGraph", ".", "tokens", ")", ":", "\n", "                        ", "self", ".", "buildLinearOrderFeatures", "(", "sentenceGraph", ",", "i", "+", "index", ",", "str", "(", "index", ")", ",", "features", ")", "\n", "\n", "# Linear n-grams", "\n", "", "", "if", "self", ".", "styles", "[", "\"linear_ngrams\"", "]", ":", "\n", "                    ", "self", ".", "buildLinearNGram", "(", "max", "(", "0", ",", "i", "-", "1", ")", ",", "i", ",", "sentenceGraph", ",", "features", ")", "\n", "self", ".", "buildLinearNGram", "(", "max", "(", "0", ",", "i", "-", "2", ")", ",", "i", ",", "sentenceGraph", ",", "features", ")", "\n", "\n", "", "", "if", "self", ".", "styles", "[", "\"phospho\"", "]", ":", "\n", "                ", "if", "text", ".", "find", "(", "\"hospho\"", ")", "!=", "-", "1", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"phospho_found\"", ")", "]", "=", "1", "\n", "", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"begin_\"", "+", "text", "[", "0", ":", "2", "]", ".", "lower", "(", ")", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"begin_\"", "+", "text", "[", "0", ":", "3", "]", ".", "lower", "(", ")", ")", "]", "=", "1", "\n", "\n", "", "if", "self", ".", "styles", "[", "\"bb_features\"", "]", ":", "\n", "                ", "if", "text", ".", "lower", "(", ")", "in", "self", ".", "bacteriaTokens", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"lpsnBacToken\"", ")", "]", "=", "1", "\n", "\n", "# Content", "\n", "", "", "if", "i", ">", "0", "and", "text", "[", "0", "]", ".", "isalpha", "(", ")", "and", "text", "[", "0", "]", ".", "isupper", "(", ")", ":", "\n", "                ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"upper_case_start\"", ")", "]", "=", "1", "\n", "", "for", "j", "in", "range", "(", "len", "(", "text", ")", ")", ":", "\n", "                ", "if", "j", ">", "0", "and", "text", "[", "j", "]", ".", "isalpha", "(", ")", "and", "text", "[", "j", "]", ".", "isupper", "(", ")", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"upper_case_middle\"", ")", "]", "=", "1", "\n", "# numbers and special characters", "\n", "", "if", "text", "[", "j", "]", ".", "isdigit", "(", ")", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_digits\"", ")", "]", "=", "1", "\n", "if", "j", ">", "0", "and", "text", "[", "j", "-", "1", "]", "==", "\"-\"", ":", "\n", "                        ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_hyphenated_digit\"", ")", "]", "=", "1", "\n", "", "", "elif", "text", "[", "j", "]", "==", "\"-\"", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_hyphen\"", ")", "]", "=", "1", "\n", "", "elif", "text", "[", "j", "]", "==", "\"/\"", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_fslash\"", ")", "]", "=", "1", "\n", "", "elif", "text", "[", "j", "]", "==", "\"\\\\\"", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_bslash\"", ")", "]", "=", "1", "\n", "# duplets", "\n", "", "if", "j", ">", "0", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"dt_\"", "+", "text", "[", "j", "-", "1", ":", "j", "+", "1", "]", ".", "lower", "(", ")", ")", "]", "=", "1", "\n", "# triplets", "\n", "", "if", "j", ">", "1", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"tt_\"", "+", "text", "[", "j", "-", "2", ":", "j", "+", "1", "]", ".", "lower", "(", ")", ")", "]", "=", "1", "\n", "# quadruplets (don't work, slight decrease (0.5 pp) on f-score", "\n", "#if j > 2:", "\n", "#    features[self.featureSet.getId(\"qt_\"+text[j-3:j+1].lower())] = 1", "\n", "\n", "# Attached edges (Hanging in and out edges)", "\n", "", "", "if", "not", "self", ".", "styles", "[", "\"no_context\"", "]", ":", "\n", "                ", "t1InEdges", "=", "self", ".", "inEdgesByToken", "[", "token", "]", "\n", "for", "edge", "in", "t1InEdges", ":", "\n", "                    ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "edgeType", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "edge", "[", "0", "]", ".", "get", "(", "\"POS\"", ")", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "edgeType", "+", "\"_\"", "+", "edge", "[", "0", "]", ".", "get", "(", "\"POS\"", ")", ")", "]", "=", "1", "\n", "tokenText", "=", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "0", "]", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "tokenText", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "edgeType", "+", "\"_\"", "+", "tokenText", ")", "]", "=", "1", "\n", "tokenStem", "=", "PorterStemmer", ".", "stem", "(", "tokenText", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "tokenStem", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "edgeType", "+", "\"_\"", "+", "tokenStem", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "norStem", "+", "\"_\"", "+", "edgeType", "+", "\"_\"", "+", "tokenStem", ")", "]", "=", "1", "\n", "", "t1OutEdges", "=", "self", ".", "outEdgesByToken", "[", "token", "]", "\n", "for", "edge", "in", "t1OutEdges", ":", "\n", "                    ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "edgeType", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "edge", "[", "1", "]", ".", "get", "(", "\"POS\"", ")", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "edgeType", "+", "\"_\"", "+", "edge", "[", "1", "]", ".", "get", "(", "\"POS\"", ")", ")", "]", "=", "1", "\n", "tokenText", "=", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "1", "]", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "tokenText", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "edgeType", "+", "\"_\"", "+", "tokenText", ")", "]", "=", "1", "\n", "tokenStem", "=", "PorterStemmer", ".", "stem", "(", "tokenText", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "tokenStem", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "edgeType", "+", "\"_\"", "+", "tokenStem", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "norStem", "+", "\"_\"", "+", "edgeType", "+", "\"_\"", "+", "tokenStem", ")", "]", "=", "1", "\n", "\n", "# REL features", "\n", "", "", "if", "self", ".", "styles", "[", "\"rel_features\"", "]", ":", "\n", "                ", "self", ".", "relFeatureBuilder", ".", "setFeatureVector", "(", "features", ")", "\n", "self", ".", "relFeatureBuilder", ".", "buildAllFeatures", "(", "sentenceGraph", ".", "tokens", ",", "i", ")", "\n", "self", ".", "relFeatureBuilder", ".", "setFeatureVector", "(", "None", ")", "\n", "\n", "# DDI13 features", "\n", "", "if", "self", ".", "styles", "[", "\"ddi13_features\"", "]", ":", "\n", "                ", "for", "index", "in", "range", "(", "len", "(", "normalizedText", ")", ")", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"ddi13_fromstart\"", "+", "str", "(", "index", ")", "+", "\"_\"", "+", "normalizedText", "[", ":", "index", "+", "1", "]", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"ddi13_fromend\"", "+", "str", "(", "index", ")", "+", "\"_\"", "+", "normalizedText", "[", "index", ":", "]", ")", "]", "=", "1", "\n", "", "", "if", "self", ".", "styles", "[", "\"drugbank_features\"", "]", ":", "\n", "                ", "self", ".", "drugFeatureBuilder", ".", "setFeatureVector", "(", "features", ")", "\n", "self", ".", "drugFeatureBuilder", ".", "tag", "=", "\"ddi_\"", "\n", "self", ".", "drugFeatureBuilder", ".", "buildDrugFeatures", "(", "token", ")", "\n", "self", ".", "drugFeatureBuilder", ".", "setFeatureVector", "(", "None", ")", "\n", "\n", "#self.wordNetFeatureBuilder.getTokenFeatures(\"show\", \"VBP\")", "\n", "#tokTxt = token.get(\"text\")", "\n", "#tokPOS = token.get(\"POS\")", "\n", "#wordNetFeatures = []", "\n", "#wordNetFeatures = self.wordNetFeatureBuilder.getTokenFeatures(tokTxt, tokPOS)", "\n", "#self.wordNetFeatureBuilder.getTokenFeatures(tokTxt, tokPOS)", "\n", "", "if", "self", ".", "styles", "[", "\"wordnet\"", "]", ":", "\n", "                ", "tokTxt", "=", "token", ".", "get", "(", "\"text\"", ")", "\n", "tokPOS", "=", "token", ".", "get", "(", "\"POS\"", ")", "\n", "wordNetFeatures", "=", "self", ".", "wordNetFeatureBuilder", ".", "getTokenFeatures", "(", "tokTxt", ",", "tokPOS", ")", "\n", "for", "wordNetFeature", "in", "wordNetFeatures", ":", "\n", "#print wordNetFeature,", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"WN_\"", "+", "wordNetFeature", ")", "]", "=", "1", "\n", "#print", "\n", "\n", "", "", "if", "self", ".", "styles", "[", "\"giuliano\"", "]", ":", "\n", "                ", "self", ".", "giulianoFeatureBuilder", ".", "setFeatureVector", "(", "features", ")", "\n", "self", ".", "giulianoFeatureBuilder", ".", "buildTriggerFeatures", "(", "token", ",", "sentenceGraph", ")", "\n", "self", ".", "giulianoFeatureBuilder", ".", "setFeatureVector", "(", "None", ")", "\n", "\n", "", "if", "self", ".", "styles", "[", "\"ontobiotope_features\"", "]", ":", "\n", "                ", "self", ".", "ontobiotopeFeatureBuilder", ".", "setFeatureVector", "(", "features", ")", "\n", "self", ".", "ontobiotopeFeatureBuilder", ".", "buildOBOFeaturesForToken", "(", "token", ")", "\n", "self", ".", "ontobiotopeFeatureBuilder", ".", "setFeatureVector", "(", "None", ")", "\n", "\n", "", "extra", "=", "{", "\"xtype\"", ":", "\"token\"", ",", "\"t\"", ":", "token", ".", "get", "(", "\"id\"", ")", "}", "\n", "if", "self", ".", "styles", "[", "\"bb_features\"", "]", ":", "\n", "                ", "extra", "[", "\"trigex\"", "]", "=", "\"bb\"", "# Request trigger extension in ExampleWriter", "\n", "", "if", "self", ".", "styles", "[", "\"epi_merge_negated\"", "]", ":", "\n", "                ", "extra", "[", "\"unmergeneg\"", "]", "=", "\"epi\"", "# Request trigger type unmerging", "\n", "", "if", "entityIds", "!=", "None", ":", "\n", "                ", "extra", "[", "\"goldIds\"", "]", "=", "entityIds", "# The entities to which this example corresponds", "\n", "#examples.append( (sentenceGraph.getSentenceId()+\".x\"+str(exampleIndex),category,features,extra) )", "\n", "\n", "", "if", "self", ".", "styles", "[", "\"bb_spans\"", "]", ":", "\n", "                ", "for", "span", "in", "sentenceGraph", ".", "sentenceElement", ".", "iter", "(", "\"span\"", ")", ":", "\n", "                    ", "if", "span", ".", "get", "(", "\"headOffset\"", ")", "!=", "token", ".", "get", "(", "\"charOffset\"", ")", ":", "\n", "                        ", "continue", "\n", "#if span.get(\"source\") != \"spec\":", "\n", "#    continue", "\n", "#print span.get(\"headOffset\"), token.get(\"charOffset\"), span.get(\"source\"), token.get(\"id\")", "\n", "", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"span_found\"", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"span_count\"", ")", "]", "=", "1", "+", "features", ".", "get", "(", "self", ".", "featureSet", ".", "getId", "(", "\"span_count\"", ")", ",", "0", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"span_identifier\"", "+", "span", ".", "get", "(", "\"identifier\"", ")", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"span_type\"", "+", "span", ".", "get", "(", "\"type\"", ")", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"span_category\"", "+", "span", ".", "get", "(", "\"category\"", ")", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"span_source\"", "+", "span", ".", "get", "(", "\"source\"", ")", ")", "]", "=", "1", "\n", "\n", "if", "\"define_offset\"", "in", "extra", ":", "\n", "                        ", "prevOffset", "=", "[", "int", "(", "x", ")", "for", "x", "in", "extra", "[", "\"define_offset\"", "]", ".", "split", "(", "\"-\"", ")", "]", "\n", "assert", "len", "(", "prevOffset", ")", "==", "2", "\n", "newOffset", "=", "[", "int", "(", "x", ")", "for", "x", "in", "span", ".", "get", "(", "\"charOffset\"", ")", ".", "split", "(", "\"-\"", ")", "]", "\n", "assert", "len", "(", "newOffset", ")", "==", "2", "\n", "prevOffsetRange", "=", "abs", "(", "prevOffset", "[", "0", "]", "-", "prevOffset", "[", "1", "]", ")", "\n", "newOffsetRange", "=", "abs", "(", "newOffset", "[", "0", "]", "-", "newOffset", "[", "1", "]", ")", "\n", "if", "newOffsetRange", ">", "prevOffsetRange", ":", "\n", "                            ", "extra", "[", "\"define_offset\"", "]", "=", "span", ".", "get", "(", "\"charOffset\"", ")", "\n", "", "", "else", ":", "\n", "                        ", "extra", "[", "\"define_offset\"", "]", "=", "span", ".", "get", "(", "\"charOffset\"", ")", "\n", "", "", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"span_count_\"", "+", "str", "(", "features", ".", "get", "(", "self", ".", "featureSet", ".", "getId", "(", "\"span_count\"", ")", ",", "0", ")", ")", ")", "]", "=", "1", "\n", "\n", "# chains", "\n", "", "if", "not", "self", ".", "styles", "[", "\"no_context\"", "]", ":", "\n", "                ", "self", ".", "buildChains", "(", "token", ",", "sentenceGraph", ",", "features", ")", "\n", "\n", "", "if", "self", ".", "styles", "[", "\"pos_pairs\"", "]", ":", "\n", "                ", "self", ".", "buildPOSPairs", "(", "token", ",", "namedEntityHeadTokens", ",", "features", ")", "\n", "\n", "", "if", "self", ".", "styles", "[", "\"w2v\"", "]", ":", "\n", "                ", "self", ".", "wordVectorFeatureBuilder", ".", "setFeatureVector", "(", "features", ")", "\n", "self", ".", "wordVectorFeatureBuilder", ".", "buildFeatures", "(", "token", ")", "\n", "self", ".", "wordVectorFeatureBuilder", ".", "setFeatureVector", "(", "None", ")", "\n", "\n", "", "example", "=", "(", "sentenceGraph", ".", "getSentenceId", "(", ")", "+", "\".x\"", "+", "str", "(", "exampleIndex", ")", ",", "category", ",", "features", ",", "extra", ")", "\n", "ExampleUtils", ".", "appendExamples", "(", "[", "example", "]", ",", "outfile", ")", "\n", "exampleIndex", "+=", "1", "\n", "self", ".", "exampleStats", ".", "endExample", "(", ")", "\n", "#return examples", "\n", "", "return", "exampleIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.buildChains": [[577, 631], ["set.union", "str", "set", "edge[].get", "EntityExampleBuilder.EntityExampleBuilder.getTokenFeatures", "EntityExampleBuilder.EntityExampleBuilder.buildChains", "edge[].get", "EntityExampleBuilder.EntityExampleBuilder.getTokenFeatures", "EntityExampleBuilder.EntityExampleBuilder.buildChains", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "buildChains", "(", "self", ",", "token", ",", "sentenceGraph", ",", "features", ",", "depthLeft", "=", "3", ",", "chain", "=", "\"\"", ",", "visited", "=", "None", ")", ":", "\n", "        ", "if", "depthLeft", "==", "0", ":", "\n", "            ", "return", "\n", "", "strDepthLeft", "=", "\"dist_\"", "+", "str", "(", "depthLeft", ")", "\n", "\n", "if", "visited", "==", "None", ":", "\n", "            ", "visited", "=", "set", "(", ")", "\n", "\n", "", "inEdges", "=", "self", ".", "inEdgesByToken", "[", "token", "]", "\n", "outEdges", "=", "self", ".", "outEdgesByToken", "[", "token", "]", "\n", "edgeSet", "=", "visited", ".", "union", "(", "self", ".", "edgeSetByToken", "[", "token", "]", ")", "\n", "for", "edge", "in", "inEdges", ":", "\n", "            ", "if", "not", "edge", "in", "visited", ":", "\n", "                ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"dep_\"", "+", "strDepthLeft", "+", "edgeType", ")", "]", "=", "1", "\n", "\n", "nextToken", "=", "edge", "[", "0", "]", "\n", "tokenFeatures", ",", "tokenWeights", "=", "self", ".", "getTokenFeatures", "(", "nextToken", ",", "sentenceGraph", ")", "\n", "for", "tokenFeature", "in", "tokenFeatures", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "strDepthLeft", "+", "tokenFeature", ")", "]", "=", "tokenWeights", "[", "tokenFeature", "]", "\n", "#                for entity in sentenceGraph.tokenIsEntityHead[nextToken]:", "\n", "#                    if entity.get(\"given\") == \"True\":", "\n", "#                        features[self.featureSet.getId(\"name_dist_\"+strDepthLeft)] = 1", "\n", "#                        features[self.featureSet.getId(\"name_dist_\"+strDepthLeft+entity.get(\"type\"))] = 1", "\n", "#                features[self.featureSet.getId(\"POS_dist_\"+strDepthLeft+nextToken.get(\"POS\"))] = 1", "\n", "#                tokenText = sentenceGraph.getTokenText(nextToken)", "\n", "#                features[self.featureSet.getId(\"text_dist_\"+strDepthLeft+tokenText)] = 1", "\n", "\n", "", "if", "sentenceGraph", ".", "tokenIsName", "[", "nextToken", "]", "and", "not", "self", ".", "styles", "[", "\"names\"", "]", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"name_chain_dist_\"", "+", "strDepthLeft", "+", "chain", "+", "\"-frw_\"", "+", "edgeType", ")", "]", "=", "1", "\n", "", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"chain_dist_\"", "+", "strDepthLeft", "+", "chain", "+", "\"-frw_\"", "+", "edgeType", ")", "]", "=", "1", "\n", "self", ".", "buildChains", "(", "nextToken", ",", "sentenceGraph", ",", "features", ",", "depthLeft", "-", "1", ",", "chain", "+", "\"-frw_\"", "+", "edgeType", ",", "edgeSet", ")", "\n", "\n", "", "", "for", "edge", "in", "outEdges", ":", "\n", "            ", "if", "not", "edge", "in", "visited", ":", "\n", "                ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"dep_dist_\"", "+", "strDepthLeft", "+", "edgeType", ")", "]", "=", "1", "\n", "\n", "nextToken", "=", "edge", "[", "1", "]", "\n", "tokenFeatures", ",", "tokenWeights", "=", "self", ".", "getTokenFeatures", "(", "nextToken", ",", "sentenceGraph", ")", "\n", "for", "tokenFeature", "in", "tokenFeatures", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "strDepthLeft", "+", "tokenFeature", ")", "]", "=", "tokenWeights", "[", "tokenFeature", "]", "\n", "#                for entity in sentenceGraph.tokenIsEntityHead[nextToken]:", "\n", "#                    if entity.get(\"given\") == \"True\":", "\n", "#                        features[self.featureSet.getId(\"name_dist_\"+strDepthLeft)] = 1", "\n", "#                        features[self.featureSet.getId(\"name_dist_\"+strDepthLeft+entity.get(\"type\"))] = 1", "\n", "#                features[self.featureSet.getId(\"POS_dist_\"+strDepthLeft+nextToken.get(\"POS\"))] = 1", "\n", "#                tokenText = sentenceGraph.getTokenText(nextToken)", "\n", "#                features[self.featureSet.getId(\"text_dist_\"+strDepthLeft+tokenText)] = 1", "\n", "", "if", "sentenceGraph", ".", "tokenIsName", "[", "nextToken", "]", "and", "not", "self", ".", "styles", "[", "\"names\"", "]", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"name_chain_dist_\"", "+", "strDepthLeft", "+", "chain", "+", "\"-rev_\"", "+", "edgeType", ")", "]", "=", "1", "\n", "\n", "", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"chain_dist_\"", "+", "strDepthLeft", "+", "chain", "+", "\"-rev_\"", "+", "edgeType", ")", "]", "=", "1", "\n", "self", ".", "buildChains", "(", "nextToken", ",", "sentenceGraph", ",", "features", ",", "depthLeft", "-", "1", ",", "chain", "+", "\"-rev_\"", "+", "edgeType", ",", "edgeSet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.getNamedEntityHeadTokens": [[632, 638], ["entity.get", "headTokens.append"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "def", "getNamedEntityHeadTokens", "(", "self", ",", "sentenceGraph", ")", ":", "\n", "        ", "headTokens", "=", "[", "]", "\n", "for", "entity", "in", "sentenceGraph", ".", "entities", ":", "\n", "            ", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "# known data which can be used for features", "\n", "                ", "headTokens", ".", "append", "(", "sentenceGraph", ".", "entityHeadTokenByEntity", "[", "entity", "]", ")", "\n", "", "", "return", "headTokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.EntityExampleBuilder.EntityExampleBuilder.buildPOSPairs": [[639, 645], ["token.get", "headToken.get", "EntityExampleBuilder.EntityExampleBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "buildPOSPairs", "(", "self", ",", "token", ",", "namedEntityHeadTokens", ",", "features", ")", ":", "\n", "        ", "tokenPOS", "=", "token", ".", "get", "(", "\"POS\"", ")", "\n", "assert", "tokenPOS", "!=", "None", "\n", "for", "headToken", "in", "namedEntityHeadTokens", ":", "\n", "            ", "headPOS", "=", "headToken", ".", "get", "(", "\"POS\"", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"POS_pair_NE_\"", "+", "tokenPOS", "+", "\"-\"", "+", "headPOS", ")", "]", "=", "1", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.__init__": [[65, 78], ["ExampleBuilder.ExampleBuilder.ExampleBuilder.__init__", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder._setDefaultParameters", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.getParameters", "FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder", "Core.IdSet.IdSet", "Core.IdSet.IdSet.getId", "Core.IdSet.IdSet"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getParameters", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["    ", "def", "__init__", "(", "self", ",", "style", "=", "None", ",", "classSet", "=", "None", ",", "featureSet", "=", "None", ",", "gazetteerFileName", "=", "None", ")", ":", "\n", "        ", "if", "classSet", "==", "None", ":", "\n", "            ", "classSet", "=", "IdSet", "(", "1", ")", "\n", "", "assert", "(", "classSet", ".", "getId", "(", "\"neg\"", ")", "==", "1", ")", "\n", "if", "featureSet", "==", "None", ":", "\n", "            ", "featureSet", "=", "IdSet", "(", ")", "\n", "", "ExampleBuilder", ".", "__init__", "(", "self", ",", "classSet", ",", "featureSet", ")", "\n", "\n", "self", ".", "_setDefaultParameters", "(", "[", "\"co_limits\"", "]", ")", "\n", "self", ".", "styles", "=", "self", ".", "getParameters", "(", "style", ")", "\n", "self", ".", "triggerFeatureBuilder", "=", "TriggerFeatureBuilder", "(", "self", ".", "featureSet", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "useNonNameEntities", "=", "False", "\n", "self", ".", "phraseTypeCounts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.buildLinearOrderFeatures": [[91, 100], ["PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.getTokenFeatures", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "buildLinearOrderFeatures", "(", "self", ",", "sentenceGraph", ",", "index", ",", "tag", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n        Linear features are built by marking token features with a tag\n        that defines their relative position in the linear order.\n        \"\"\"", "\n", "tag", "=", "\"linear_\"", "+", "tag", "\n", "tokenFeatures", ",", "tokenFeatureWeights", "=", "self", ".", "getTokenFeatures", "(", "sentenceGraph", ".", "tokens", "[", "index", "]", ",", "sentenceGraph", ")", "\n", "for", "tokenFeature", "in", "tokenFeatures", ":", "\n", "            ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "tokenFeature", ")", "]", "=", "tokenFeatureWeights", "[", "tokenFeature", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.buildLinearNGram": [[101, 106], ["sentenceGraph.getTokenText().lower", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.featureSet.getId", "sentenceGraph.getTokenText"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText"], ["", "", "def", "buildLinearNGram", "(", "self", ",", "phraseTokens", ",", "sentenceGraph", ",", "features", ")", ":", "\n", "        ", "ngram", "=", "\"ngram\"", "\n", "for", "token", "in", "phraseTokens", ":", "\n", "            ", "ngram", "+=", "\"_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "token", ")", ".", "lower", "(", ")", "\n", "", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "ngram", ")", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.getPhraseHeadToken": [[107, 114], ["int", "token.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getPhraseHeadToken", "(", "self", ",", "phrase", ",", "phraseTokens", ")", ":", "\n", "        ", "bestToken", "=", "(", "-", "9999", ",", "None", ")", "\n", "for", "token", "in", "phraseTokens", ":", "\n", "            ", "headScore", "=", "int", "(", "token", ".", "get", "(", "\"headScore\"", ")", ")", "\n", "if", "headScore", ">=", "bestToken", "[", "0", "]", ":", "# >= because rightmost is best", "\n", "                ", "bestToken", "=", "(", "headScore", ",", "token", ")", "\n", "", "", "return", "bestToken", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.getPhraseTokens": [[115, 119], ["int", "int", "phrase.get", "phrase.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getPhraseTokens", "(", "self", ",", "phrase", ",", "sentenceGraph", ")", ":", "\n", "        ", "phraseBegin", "=", "int", "(", "phrase", ".", "get", "(", "\"begin\"", ")", ")", "\n", "phraseEnd", "=", "int", "(", "phrase", ".", "get", "(", "\"end\"", ")", ")", "\n", "return", "sentenceGraph", ".", "tokens", "[", "phraseBegin", ":", "phraseEnd", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.getCategoryName": [[120, 127], ["set", "set.add", "sorted", "entity.get", "list"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getCategoryName", "(", "self", ",", "phrase", ",", "phraseToEntity", ")", ":", "\n", "        ", "if", "phrase", "not", "in", "phraseToEntity", ":", "\n", "            ", "return", "\"neg\"", "\n", "", "entityTypes", "=", "set", "(", ")", "\n", "for", "entity", "in", "phraseToEntity", "[", "phrase", "]", ":", "\n", "            ", "entityTypes", ".", "add", "(", "entity", ".", "get", "(", "\"type\"", ")", ")", "\n", "", "return", "\"---\"", ".", "join", "(", "sorted", "(", "list", "(", "entityTypes", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.isPotentialCOTrigger": [[128, 143], ["phrase.get", "phraseTokens[].get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "isPotentialCOTrigger", "(", "self", ",", "phrase", ",", "phraseTokens", ",", "sentenceGraph", ")", ":", "\n", "        ", "global", "coNPPhraseFirstToken", "\n", "\n", "# Check type", "\n", "if", "phrase", ".", "get", "(", "\"type\"", ")", "not", "in", "[", "\"NP\"", ",", "\"NP-IN\"", "]", ":", "# only limit these types", "\n", "            ", "return", "True", "\n", "# Check named entities", "\n", "", "for", "token", "in", "phraseTokens", ":", "\n", "            ", "if", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", ":", "\n", "                ", "return", "True", "\n", "# Check first word", "\n", "", "", "if", "phraseTokens", "[", "0", "]", ".", "get", "(", "\"text\"", ")", "in", "coNPPhraseFirstToken", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.buildExamplesFromGraph": [[144, 242], ["PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.initSentence", "Utils.getPhrases", "Utils.getPhrases", "Utils.getPhrases", "Utils.getPhrases", "Utils.getPhraseDict", "Utils.getPhraseDict", "Utils.getPhraseDict", "Utils.getPhraseDict", "Utils.getPhrases.extend", "Utils.getPhrases.extend", "Utils.getPhraseEntityMapping", "Utils.getPhraseEntityMapping", "Utils.getPhraseEntityMapping", "Utils.getPhraseEntityMapping", "Utils.getPhraseTypeCounts", "Utils.getPhraseTypeCounts", "Utils.getPhraseTypeCounts", "Utils.getPhraseTypeCounts", "Utils.getPhraseTypeCounts.keys", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.exampleStats.addVariable", "set", "set", "Utils.makeINSubPhrases", "Utils.makeINSubPhrases", "Utils.makeINSubPhrases", "Utils.makeINSubPhrases", "Utils.makeTokenSubPhrases", "Utils.makeTokenSubPhrases", "Utils.makeTokenSubPhrases", "Utils.makeTokenSubPhrases", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.setFeatureVector", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.getCategoryName", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.classSet.getId", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.getPhraseTokens", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.getPhraseHeadToken", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.exampleStats.beginExample", "features.update", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.buildLinearNGram", "phrase.get().split", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.setTag", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.buildFeatures", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.buildAttachedEdgeFeatures", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.setTag", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.setTag", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.setTag", "phrase.get", "Core.appendExamples", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.exampleStats.endExample", "sum", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.phraseTypeCounts.has_key", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.exampleStats.filter", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.exampleStats.endExample", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.setTag", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.buildFeatures", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.setTag", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.buildFeatures", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.setTag", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.triggerFeatureBuilder.buildFeatures", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.get", "phrase.get", "phrase.get", "Utils.getPhraseEntityMapping.values", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.exampleStats.addValue", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.isPotentialCOTrigger", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.featureSet.getId", "phrase.get", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.featureSet.getId", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.featureSet.getId", "str", "entity.get", "PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.featureSet.getId", "x.get", "sentenceGraph.getSentenceId", "phrase.get", "str", "str", "str", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.initSentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.addVariable", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.getCategoryName", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.getPhraseTokens", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.getPhraseHeadToken", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.beginExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.buildLinearNGram", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setTag", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildAttachedEdgeFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setTag", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setTag", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setTag", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.appendExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.endExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.filter", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.endExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setTag", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setTag", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setTag", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.addValue", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.PhraseTriggerExampleBuilder.isPotentialCOTrigger", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getSentenceId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "buildExamplesFromGraph", "(", "self", ",", "sentenceGraph", ",", "outfile", ",", "goldGraph", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build one example for each phrase in the sentence\n        \"\"\"", "\n", "self", ".", "triggerFeatureBuilder", ".", "initSentence", "(", "sentenceGraph", ")", "\n", "\n", "#examples = []", "\n", "exampleIndex", "=", "0", "\n", "\n", "# Prepare phrases, create subphrases", "\n", "#filter = set([\"NP\", \"TOK-IN\", \"WHADVP\", \"WHNP\", \"TOK-WP$\", \"TOK-PRP$\", \"NP-IN\"])", "\n", "phrases", "=", "MapPhrases", ".", "getPhrases", "(", "sentenceGraph", ".", "parseElement", ",", "sentenceGraph", ".", "tokens", ",", "set", "(", "[", "\"NP\"", ",", "\"WHADVP\"", ",", "\"WHNP\"", "]", ")", ")", "\n", "phraseDict", "=", "MapPhrases", ".", "getPhraseDict", "(", "phrases", ")", "\n", "phrases", ".", "extend", "(", "MapPhrases", ".", "makeINSubPhrases", "(", "phrases", ",", "sentenceGraph", ".", "tokens", ",", "phraseDict", ",", "[", "\"NP\"", "]", ")", ")", "\n", "phrases", ".", "extend", "(", "MapPhrases", ".", "makeTokenSubPhrases", "(", "sentenceGraph", ".", "tokens", ",", "phraseDict", ")", ")", "\n", "phraseToEntity", "=", "MapPhrases", ".", "getPhraseEntityMapping", "(", "sentenceGraph", ".", "entities", ",", "phraseDict", ")", "\n", "# Make counts", "\n", "phraseTypeCounts", "=", "MapPhrases", ".", "getPhraseTypeCounts", "(", "phrases", ")", "\n", "for", "key", "in", "phraseTypeCounts", ".", "keys", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "phraseTypeCounts", ".", "has_key", "(", "key", ")", ":", "\n", "                ", "self", ".", "phraseTypeCounts", "[", "key", "]", "=", "0", "\n", "", "self", ".", "phraseTypeCounts", "[", "key", "]", "+=", "phraseTypeCounts", "[", "key", "]", "\n", "", "self", ".", "exampleStats", ".", "addVariable", "(", "\"Phrase type counts\"", ",", "self", ".", "phraseTypeCounts", ")", "# can be added on each loop, will always point to the same thing", "\n", "\n", "# Build one example for each phrase", "\n", "for", "phrase", "in", "phrases", ":", "\n", "            ", "features", "=", "{", "}", "\n", "self", ".", "triggerFeatureBuilder", ".", "setFeatureVector", "(", "features", ")", "\n", "\n", "categoryName", "=", "self", ".", "getCategoryName", "(", "phrase", ",", "phraseToEntity", ")", "\n", "category", "=", "self", ".", "classSet", ".", "getId", "(", "categoryName", ")", "\n", "phraseTokens", "=", "self", ".", "getPhraseTokens", "(", "phrase", ",", "sentenceGraph", ")", "\n", "phraseHeadToken", "=", "self", ".", "getPhraseHeadToken", "(", "phrase", ",", "phraseTokens", ")", "\n", "self", ".", "exampleStats", ".", "beginExample", "(", "categoryName", ")", "\n", "\n", "if", "self", ".", "styles", "[", "\"co_limits\"", "]", "and", "not", "self", ".", "isPotentialCOTrigger", "(", "phrase", ",", "phraseTokens", ",", "sentenceGraph", ")", ":", "\n", "                ", "self", ".", "exampleStats", ".", "filter", "(", "\"co_limits\"", ")", "\n", "self", ".", "exampleStats", ".", "endExample", "(", ")", "\n", "continue", "\n", "\n", "# Sentence level features", "\n", "", "features", ".", "update", "(", "self", ".", "triggerFeatureBuilder", ".", "bowFeatures", ")", "\n", "\n", "# Whole phrase features", "\n", "self", ".", "buildLinearNGram", "(", "phraseTokens", ",", "sentenceGraph", ",", "features", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"pType_\"", "+", "phrase", ".", "get", "(", "\"type\"", ")", ")", "]", "=", "1", "\n", "for", "split", "in", "phrase", ".", "get", "(", "\"type\"", ")", ".", "split", "(", "\"-\"", ")", ":", "\n", "                ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"pSubType_\"", "+", "split", ")", "]", "=", "1", "\n", "# Check named entities", "\n", "", "nameCount", "=", "0", "\n", "for", "token", "in", "phraseTokens", ":", "\n", "                ", "if", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", ":", "\n", "                    ", "nameCount", "+=", "1", "\n", "", "", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"phraseNames_\"", "+", "str", "(", "nameCount", ")", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"phraseNameCount\"", ")", "]", "=", "nameCount", "\n", "\n", "# Head token features", "\n", "self", ".", "triggerFeatureBuilder", ".", "setTag", "(", "\"head_\"", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "buildFeatures", "(", "phraseHeadToken", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "buildAttachedEdgeFeatures", "(", "phraseHeadToken", ",", "sentenceGraph", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "setTag", "(", ")", "\n", "\n", "# Features for all phrase tokens", "\n", "self", ".", "triggerFeatureBuilder", ".", "setTag", "(", "\"ptok_\"", ")", "\n", "phraseTokenPos", "=", "0", "\n", "#print len(phraseTokens)", "\n", "for", "token", "in", "phraseTokens", ":", "\n", "                ", "self", ".", "triggerFeatureBuilder", ".", "setTag", "(", "\"ptok_\"", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "buildFeatures", "(", "phraseHeadToken", ",", "linear", "=", "False", ",", "chains", "=", "False", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "setTag", "(", "\"ptok_\"", "+", "str", "(", "phraseTokenPos", ")", "+", "\"_\"", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "buildFeatures", "(", "phraseHeadToken", ",", "linear", "=", "False", ",", "chains", "=", "False", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "setTag", "(", "\"ptok_\"", "+", "str", "(", "phraseTokenPos", "-", "len", "(", "phraseTokens", ")", ")", "+", "\"_\"", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "buildFeatures", "(", "phraseHeadToken", ",", "linear", "=", "False", ",", "chains", "=", "False", ")", "\n", "#self.triggerFeatureBuilder.buildAttachedEdgeFeatures(phraseHeadToken)", "\n", "phraseTokenPos", "+=", "1", "\n", "", "self", ".", "triggerFeatureBuilder", ".", "setTag", "(", ")", "\n", "\n", "extra", "=", "{", "\"xtype\"", ":", "\"phrase\"", ",", "\"t\"", ":", "phraseHeadToken", ".", "get", "(", "\"id\"", ")", ",", "\"p\"", ":", "phrase", ".", "get", "(", "\"id\"", ")", ",", "\"ptype\"", ":", "phrase", ".", "get", "(", "\"type\"", ")", "}", "\n", "extra", "[", "\"charOffset\"", "]", "=", "phrase", ".", "get", "(", "\"charOffset\"", ")", "\n", "if", "phrase", "not", "in", "phraseToEntity", ":", "\n", "                ", "extra", "[", "\"eids\"", "]", "=", "\"neg\"", "\n", "", "else", ":", "\n", "                ", "extra", "[", "\"eids\"", "]", "=", "\",\"", ".", "join", "(", "[", "x", ".", "get", "(", "\"id\"", ")", "for", "x", "in", "phraseToEntity", "[", "phrase", "]", "]", ")", "\n", "", "example", "=", "(", "sentenceGraph", ".", "getSentenceId", "(", ")", "+", "\".x\"", "+", "str", "(", "exampleIndex", ")", ",", "category", ",", "features", ",", "extra", ")", "\n", "ExampleUtils", ".", "appendExamples", "(", "[", "example", "]", ",", "outfile", ")", "\n", "self", ".", "exampleStats", ".", "endExample", "(", ")", "\n", "exampleIndex", "+=", "1", "\n", "\n", "# Mark missed entities in exampleStats", "\n", "", "linkedEntities", "=", "set", "(", "sum", "(", "phraseToEntity", ".", "values", "(", ")", ",", "[", "]", ")", ")", "\n", "for", "entity", "in", "sentenceGraph", ".", "entities", ":", "\n", "            ", "if", "entity", ".", "get", "(", "\"given\"", ")", "!=", "\"True\"", "and", "entity", "not", "in", "linkedEntities", ":", "\n", "                ", "self", ".", "exampleStats", ".", "addValue", "(", "\"Entities with no phrase\"", ",", "1", ")", "\n", "# Marking these as filtered examples was misleading, as examples are per phrase, and these are entities", "\n", "#self.exampleStats.beginExample(entity.get(\"type\"))", "\n", "#self.exampleStats.filter(\"no_phrase\")", "\n", "#self.exampleStats.endExample()", "\n", "", "", "return", "exampleIndex", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.installBBData": [[23, 32], ["Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.setLocal", "os.path.join", "os.path.join"], "function", ["None"], ["def", "installBBData", "(", "destPath", "=", "None", ",", "downloadPath", "=", "None", ",", "redownload", "=", "False", ",", "updateLocalSettings", "=", "False", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Downloading TEES data files for BB\"", ",", "\"---------------\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Bacteria tokens derived from LPSN (http://www.bacterio.cict.fr/)\"", "\n", "if", "destPath", "==", "None", ":", "\n", "        ", "destPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"resources\"", ")", "\n", "", "if", "downloadPath", "==", "None", ":", "\n", "        ", "downloadPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"resources/download\"", ")", "\n", "", "Utils", ".", "Download", ".", "downloadAndExtract", "(", "Settings", ".", "URL", "[", "\"TEES_RESOURCES\"", "]", ",", "destPath", ",", "downloadPath", ",", "redownload", "=", "redownload", ")", "\n", "Settings", ".", "setLocal", "(", "\"TEES_RESOURCES\"", ",", "destPath", ",", "updateLocalSettings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.getBacteriaNames": [[33, 45], ["open", "open.close", "line.startswith", "names.append", "[].split", "[].split", "line.split"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["", "def", "getBacteriaNames", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "\"rt\"", ")", "\n", "names", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "        ", "if", "line", ".", "strip", "==", "\"\"", ":", "\n", "            ", "continue", "\n", "", "if", "line", ".", "startswith", "(", "\"Note:\"", ")", ":", "\n", "            ", "continue", "\n", "", "namePart", "=", "line", ".", "split", "(", "\"18\"", ")", "[", "0", "]", ".", "split", "(", "\"19\"", ")", "[", "0", "]", ".", "split", "(", "\"(\"", ")", "[", "0", "]", "\n", "names", ".", "append", "(", "namePart", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.getBacteriaTokens": [[46, 63], ["set", "hasattr", "PhraseTriggerExampleBuilder.installBBData", "open", "open.close", "name.split", "os.path.join", "set.add", "set.add", "line.strip", "split.lower"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.PhraseTriggerExampleBuilder.installBBData", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["", "def", "getBacteriaTokens", "(", "names", "=", "None", ")", ":", "\n", "# Install file if needed", "\n", "    ", "if", "not", "hasattr", "(", "Settings", ",", "\"TEES_RESOURCES\"", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"TEES example builder data files not installed, installing now\"", "\n", "installBBData", "(", "updateLocalSettings", "=", "True", ")", "\n", "# Get the tokens", "\n", "", "tokens", "=", "set", "(", ")", "\n", "if", "names", "!=", "None", ":", "\n", "        ", "for", "name", "in", "names", ":", "\n", "            ", "for", "split", "in", "name", ".", "split", "(", ")", ":", "\n", "                ", "tokens", ".", "add", "(", "split", ".", "lower", "(", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "Settings", ".", "TEES_RESOURCES", ",", "\"bacteria-tokens.txt\"", ")", ",", "\"rt\"", ")", "\n", "for", "line", "in", "f", ":", "\n", "            ", "tokens", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.__init__": [[4, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "className", "=", "None", "\n", "self", ".", "examplesByClass", "=", "{", "}", "\n", "self", ".", "filteredByClass", "=", "{", "}", "\n", "self", ".", "filteredByClassByFilter", "=", "{", "}", "\n", "self", ".", "counts", "=", "{", "}", "# example counts", "\n", "self", ".", "values", "=", "{", "}", "# generic counters", "\n", "self", ".", "variables", "=", "{", "}", "# generic variables", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.addValue": [[13, 17], ["None"], "methods", ["None"], ["", "def", "addValue", "(", "self", ",", "name", ",", "amount", "=", "1", ")", ":", "\n", "        ", "if", "name", "not", "in", "self", ".", "values", ":", "\n", "            ", "self", ".", "values", "[", "name", "]", "=", "0", "\n", "", "self", ".", "values", "[", "name", "]", "+=", "amount", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.addVariable": [[18, 20], ["None"], "methods", ["None"], ["", "def", "addVariable", "(", "self", ",", "name", ",", "variable", ")", ":", "\n", "        ", "self", ".", "variables", "[", "name", "]", "=", "variable", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.addKnownPositives": [[21, 23], ["None"], "methods", ["None"], ["", "def", "addKnownPositives", "(", "self", ",", "className", ",", "number", "=", "1", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.addExample": [[24, 29], ["ExampleStats.ExampleStats.beginExample", "ExampleStats.ExampleStats.endExample", "ExampleStats.ExampleStats.filter"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.beginExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.endExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.filter"], ["", "def", "addExample", "(", "self", ",", "className", ",", "filteredBy", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "beginExample", "(", "className", ")", "\n", "for", "filter", "in", "filteredBy", ":", "\n", "            ", "self", ".", "filter", "(", "filter", ")", "\n", "", "self", ".", "endExample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.beginExample": [[30, 35], ["set"], "methods", ["None"], ["", "def", "beginExample", "(", "self", ",", "className", ")", ":", "\n", "        ", "assert", "self", ".", "className", "==", "None", "\n", "\n", "self", ".", "className", "=", "className", "\n", "self", ".", "filteredBy", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.filter": [[36, 40], ["ExampleStats.ExampleStats.filteredBy.add"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["", "def", "filter", "(", "self", ",", "filterName", ")", ":", "\n", "        ", "assert", "self", ".", "className", "!=", "None", "\n", "assert", "filterName", "!=", "\"total\"", "\n", "self", ".", "filteredBy", ".", "add", "(", "filterName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.endExample": [[41, 60], ["ExampleStats.ExampleStats.examplesByClass.has_key", "ExampleStats.ExampleStats.filteredByClass.has_key", "len", "ExampleStats.ExampleStats.filteredByClassByFilter.has_key", "ExampleStats.ExampleStats.filteredByClassByFilter[].has_key"], "methods", ["None"], ["", "def", "endExample", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "className", "!=", "None", "\n", "\n", "if", "not", "self", ".", "examplesByClass", ".", "has_key", "(", "self", ".", "className", ")", ":", "\n", "            ", "self", ".", "examplesByClass", "[", "self", ".", "className", "]", "=", "0", "\n", "", "self", ".", "examplesByClass", "[", "self", ".", "className", "]", "+=", "1", "\n", "\n", "if", "not", "self", ".", "filteredByClass", ".", "has_key", "(", "self", ".", "className", ")", ":", "\n", "            ", "self", ".", "filteredByClass", "[", "self", ".", "className", "]", "=", "0", "\n", "", "if", "len", "(", "self", ".", "filteredBy", ")", ">", "0", ":", "\n", "            ", "self", ".", "filteredByClass", "[", "self", ".", "className", "]", "+=", "1", "\n", "\n", "", "for", "filter", "in", "self", ".", "filteredBy", ":", "\n", "            ", "if", "not", "self", ".", "filteredByClassByFilter", ".", "has_key", "(", "self", ".", "className", ")", ":", "\n", "                ", "self", ".", "filteredByClassByFilter", "[", "self", ".", "className", "]", "=", "{", "}", "\n", "", "if", "not", "self", ".", "filteredByClassByFilter", "[", "self", ".", "className", "]", ".", "has_key", "(", "filter", ")", ":", "\n", "                ", "self", ".", "filteredByClassByFilter", "[", "self", ".", "className", "]", "[", "filter", "]", "=", "0", "\n", "", "self", ".", "filteredByClassByFilter", "[", "self", ".", "className", "]", "[", "filter", "]", "+=", "1", "\n", "", "self", ".", "className", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.getExampleCount": [[61, 63], ["sum", "ExampleStats.ExampleStats.examplesByClass.values"], "methods", ["None"], ["", "def", "getExampleCount", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "examplesByClass", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.printStats": [[64, 85], ["sorted", "sorted", "sorted", "ExampleStats.ExampleStats.examplesByClass.keys", "ExampleStats.ExampleStats.filteredByClassByFilter.has_key", "ExampleStats.ExampleStats.values.keys", "ExampleStats.ExampleStats.variables.keys", "str", "str", "float", "float", "str"], "methods", ["None"], ["", "def", "printStats", "(", "self", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Example Statistics (total/filtered)\"", "\n", "#print >> sys.stderr, self.examplesByClass.keys()", "\n", "counts", "=", "[", "0", ",", "0", "]", "\n", "for", "className", "in", "sorted", "(", "self", ".", "examplesByClass", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "filteredByClassByFilter", ".", "has_key", "(", "className", ")", ":", "\n", "                ", "filterStr", "=", "str", "(", "self", ".", "filteredByClassByFilter", "[", "className", "]", ")", "\n", "", "else", ":", "\n", "                ", "filterStr", "=", "\"\"", "\n", "", "print", ">>", "sys", ".", "stderr", ",", "\" \"", ",", "className", "+", "\": \"", "+", "str", "(", "self", ".", "examplesByClass", "[", "className", "]", ")", "+", "\"/\"", "+", "str", "(", "self", ".", "filteredByClass", "[", "className", "]", ")", ",", "filterStr", "\n", "if", "className", "!=", "\"neg\"", ":", "\n", "                ", "counts", "[", "0", "]", "+=", "self", ".", "examplesByClass", "[", "className", "]", "\n", "counts", "[", "1", "]", "+=", "self", ".", "filteredByClass", "[", "className", "]", "\n", "", "", "if", "counts", "[", "0", "]", "!=", "0", ":", "\n", "            ", "posCoverage", "=", "float", "(", "counts", "[", "0", "]", "-", "counts", "[", "1", "]", ")", "/", "float", "(", "counts", "[", "0", "]", ")", "*", "100.0", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Positives Coverage %.2f\"", "%", "posCoverage", ",", "\"%\"", ",", "counts", "\n", "# Print generic counts", "\n", "", "for", "value", "in", "sorted", "(", "self", ".", "values", ".", "keys", "(", ")", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "value", "+", "\":\"", ",", "self", ".", "values", "[", "value", "]", "\n", "", "for", "variable", "in", "sorted", "(", "self", ".", "variables", ".", "keys", "(", ")", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "variable", "+", "\":\"", ",", "self", ".", "variables", "[", "variable", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ModifierExampleBuilder.ModifierExampleBuilder.__init__": [[67, 87], ["ModifierExampleBuilder.readWords", "ExampleBuilder.ExampleBuilder.ExampleBuilder.__init__", "ModifierExampleBuilder.ModifierExampleBuilder._setDefaultParameters", "ModifierExampleBuilder.ModifierExampleBuilder.getParameters", "Core.IdSet.IdSet", "Core.IdSet.IdSet.getId", "Core.IdSet.IdSet", "Gazetteer.loadGztr"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ModifierExampleBuilder.readWords", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getParameters", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["    ", "def", "__init__", "(", "self", ",", "style", "=", "None", ",", "classSet", "=", "None", ",", "featureSet", "=", "None", ",", "gazetteerFileName", "=", "None", ")", ":", "\n", "        ", "global", "speculationWords", "\n", "\n", "if", "classSet", "==", "None", ":", "\n", "            ", "classSet", "=", "IdSet", "(", "1", ")", "\n", "", "assert", "(", "classSet", ".", "getId", "(", "\"neg\"", ")", "==", "1", ")", "\n", "if", "featureSet", "==", "None", ":", "\n", "            ", "featureSet", "=", "IdSet", "(", ")", "\n", "\n", "", "self", ".", "specWords", ",", "self", ".", "specWordStems", "=", "readWords", "(", "speculationWords", ")", "\n", "\n", "ExampleBuilder", ".", "__init__", "(", "self", ",", "classSet", ",", "featureSet", ")", "\n", "#gazetteerFileName=\"/usr/share/biotext/GeniaChallenge/SharedTaskTriggerTest/gazetteer-train\"", "\n", "if", "gazetteerFileName", "!=", "None", ":", "\n", "            ", "self", ".", "gazetteer", "=", "Gazetteer", ".", "loadGztr", "(", "gazetteerFileName", ")", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Loaded gazetteer from\"", ",", "gazetteerFileName", "\n", "", "else", ":", "\n", "            ", "self", ".", "gazetteer", "=", "None", "\n", "", "self", ".", "_setDefaultParameters", "(", "{", "\"classification\"", ":", "\"multiclass\"", ",", "\"speculation_words\"", ":", "True", "}", ",", "{", "\"classification\"", ":", "(", "\"multiclass\"", ",", "\"speculation\"", ",", "\"negation\"", ")", "}", ")", "\n", "self", ".", "styles", "=", "self", ".", "getParameters", "(", "style", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ModifierExampleBuilder.ModifierExampleBuilder.getMergedEntityType": [[88, 105], ["set", "list", "list.sort", "list.add", "entity.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getMergedEntityType", "(", "self", ",", "entities", ")", ":", "\n", "        ", "\"\"\"\n        If a single token belongs to multiple entities of different types,\n        a new, composite type is defined. This type is the alphabetically\n        ordered types of these entities joined with '---'.\n        \"\"\"", "\n", "types", "=", "set", "(", ")", "\n", "for", "entity", "in", "entities", ":", "\n", "            ", "types", ".", "add", "(", "entity", ".", "get", "(", "\"type\"", ")", ")", "\n", "", "types", "=", "list", "(", "types", ")", "\n", "types", ".", "sort", "(", ")", "\n", "typeString", "=", "\"\"", "\n", "for", "type", "in", "types", ":", "\n", "            ", "if", "typeString", "!=", "\"\"", ":", "\n", "                ", "typeString", "+=", "\"---\"", "\n", "", "typeString", "+=", "type", "\n", "", "return", "typeString", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ModifierExampleBuilder.ModifierExampleBuilder.getTokenFeatures": [[106, 138], ["ModifierExampleBuilder.ModifierExampleBuilder.tokenFeatures.has_key", "sentenceGraph.getTokenText", "Utils.stem", "ModifierExampleBuilder.ModifierExampleBuilder.gazetteer[].items", "sentenceGraph.getTokenText.lower", "token.get", "entity.get", "sentenceGraph.getTokenText.lower", "entity.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getTokenFeatures", "(", "self", ",", "token", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        Returns a list of features based on the attributes of a token.\n        These can be used to define more complex features.\n        \"\"\"", "\n", "# These features are cached when this method is first called", "\n", "# for a token.", "\n", "if", "self", ".", "tokenFeatures", ".", "has_key", "(", "token", ")", ":", "\n", "            ", "return", "self", ".", "tokenFeatures", "[", "token", "]", "\n", "", "tokTxt", "=", "sentenceGraph", ".", "getTokenText", "(", "token", ")", "\n", "features", "=", "{", "}", "\n", "features", "[", "\"_txt_\"", "+", "tokTxt", "]", "=", "1", "\n", "features", "[", "\"_POS_\"", "+", "token", ".", "get", "(", "\"POS\"", ")", "]", "=", "1", "\n", "if", "self", ".", "styles", "[", "\"speculation_words\"", "]", ":", "\n", "            ", "if", "tokTxt", "in", "self", ".", "specWords", ":", "\n", "                ", "features", "[", "\"_spec\"", "]", "=", "1", "\n", "features", "[", "\"_spec_\"", "+", "tokTxt", "]", "=", "1", "\n", "", "tokStem", "=", "PorterStemmer", ".", "stem", "(", "tokTxt", ")", "\n", "if", "tokStem", "in", "self", ".", "specWordStems", ":", "\n", "                ", "features", "[", "\"_spec_stem\"", "]", "=", "1", "\n", "features", "[", "\"_spec_stem_\"", "+", "tokStem", "]", "=", "1", "\n", "", "", "if", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", ":", "\n", "            ", "features", "[", "\"_given\"", "]", "=", "1", "\n", "for", "entity", "in", "sentenceGraph", ".", "tokenIsEntityHead", "[", "token", "]", ":", "\n", "                ", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "                    ", "features", "[", "\"_annType_\"", "+", "entity", ".", "get", "(", "\"type\"", ")", "]", "=", "1", "\n", "", "", "", "if", "self", ".", "gazetteer", "and", "tokTxt", ".", "lower", "(", ")", "in", "self", ".", "gazetteer", ":", "\n", "            ", "for", "label", ",", "weight", "in", "self", ".", "gazetteer", "[", "tokTxt", ".", "lower", "(", ")", "]", ".", "items", "(", ")", ":", "\n", "                ", "pass", "\n", "#features[\"_knownLabel_\"+label]=weight", "\n", "", "", "self", ".", "tokenFeatures", "[", "token", "]", "=", "features", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ModifierExampleBuilder.ModifierExampleBuilder.buildLinearOrderFeatures": [[139, 147], ["ModifierExampleBuilder.ModifierExampleBuilder.getTokenFeatures().iteritems", "ModifierExampleBuilder.ModifierExampleBuilder.getTokenFeatures", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "buildLinearOrderFeatures", "(", "self", ",", "sentenceGraph", ",", "index", ",", "tag", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n        Linear features are built by marking token features with a tag\n        that defines their relative position in the linear order.\n        \"\"\"", "\n", "tag", "=", "\"linear_\"", "+", "tag", "\n", "for", "tokenFeature", ",", "w", "in", "self", ".", "getTokenFeatures", "(", "sentenceGraph", ".", "tokens", "[", "index", "]", ",", "sentenceGraph", ")", ".", "iteritems", "(", ")", ":", "\n", "            ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "tokenFeature", ")", "]", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ModifierExampleBuilder.ModifierExampleBuilder.buildExamplesFromGraph": [[148, 366], ["bagOfWords.iteritems", "Evaluators.mapEntities", "str", "str", "token.get", "sentenceGraph.dependencyGraph.getInEdges", "sentenceGraph.dependencyGraph.getOutEdges", "set", "ModifierExampleBuilder.ModifierExampleBuilder.exampleStats.beginExample", "features.update", "token.get", "Utils.stem", "range", "range", "ModifierExampleBuilder.ModifierExampleBuilder.buildChains", "Core.appendExamples", "ModifierExampleBuilder.ModifierExampleBuilder.exampleStats.endExample", "entity.get", "token.get", "bagOfWords.has_key", "len", "entity.get", "ModifierExampleBuilder.ModifierExampleBuilder.classSet.getId", "len", "text[].isalpha", "text[].isupper", "len", "text[].isdigit", "edge[].get", "sentenceGraph.getTokenText", "edge[].get", "sentenceGraph.getTokenText", "token.get", "entity.get", "bagOfWords.has_key", "bagOfWords.has_key", "bagOfWords.has_key", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "entity.get", "entity.get", "ModifierExampleBuilder.ModifierExampleBuilder.classSet.getName", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.buildLinearOrderFeatures", "text[].isalpha", "text[].isupper", "str", "entity.get", "ModifierExampleBuilder.ModifierExampleBuilder.classSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.classSet.getName", "len", "str", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "sentenceGraph.getSentenceId", "ModifierExampleBuilder.ModifierExampleBuilder.classSet.getId", "entity.get", "ModifierExampleBuilder.ModifierExampleBuilder.classSet.getId", "token.get", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "len", "[].get", "ModifierExampleBuilder.ModifierExampleBuilder.classSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "edge[].get", "edge[].get", "edge[].get", "edge[].get", "len", "[].get", "len", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "text[].lower", "text[].lower", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapEntities", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.beginExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.appendExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.endExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getName", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildLinearOrderFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getName", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getSentenceId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "", "def", "buildExamplesFromGraph", "(", "self", ",", "sentenceGraph", ",", "outfile", ",", "goldGraph", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build one example for each token of the sentence\n        \"\"\"", "\n", "examples", "=", "[", "]", "\n", "exampleIndex", "=", "0", "\n", "\n", "self", ".", "tokenFeatures", "=", "{", "}", "\n", "\n", "if", "goldGraph", "!=", "None", ":", "\n", "            ", "entityToGold", "=", "EvaluateInteractionXML", ".", "mapEntities", "(", "sentenceGraph", ".", "entities", ",", "goldGraph", ".", "entities", ")", "\n", "\n", "", "namedEntityCount", "=", "0", "\n", "entityCount", "=", "0", "\n", "for", "entity", "in", "sentenceGraph", ".", "entities", ":", "\n", "            ", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "# known data which can be used for features", "\n", "                ", "namedEntityCount", "+=", "1", "\n", "", "else", ":", "# known data which can be used for features", "\n", "                ", "entityCount", "+=", "1", "\n", "", "", "namedEntityCountFeature", "=", "\"nameCount_\"", "+", "str", "(", "namedEntityCount", ")", "\n", "entityCountFeature", "=", "\"entityCount_\"", "+", "str", "(", "entityCount", ")", "\n", "\n", "bagOfWords", "=", "{", "}", "\n", "for", "token", "in", "sentenceGraph", ".", "tokens", ":", "\n", "            ", "text", "=", "\"bow_\"", "+", "token", ".", "get", "(", "\"text\"", ")", "\n", "if", "not", "bagOfWords", ".", "has_key", "(", "text", ")", ":", "\n", "                ", "bagOfWords", "[", "text", "]", "=", "0", "\n", "", "bagOfWords", "[", "text", "]", "+=", "1", "\n", "if", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", ":", "\n", "                ", "text", "=", "\"ne_\"", "+", "text", "\n", "if", "not", "bagOfWords", ".", "has_key", "(", "text", ")", ":", "\n", "                    ", "bagOfWords", "[", "text", "]", "=", "0", "\n", "", "bagOfWords", "[", "text", "]", "+=", "1", "\n", "", "if", "len", "(", "sentenceGraph", ".", "tokenIsEntityHead", ")", ">", "0", ":", "\n", "                ", "text", "=", "\"ge_\"", "+", "text", "\n", "if", "not", "bagOfWords", ".", "has_key", "(", "text", ")", ":", "\n", "                    ", "bagOfWords", "[", "text", "]", "=", "0", "\n", "", "bagOfWords", "[", "text", "]", "+=", "1", "\n", "\n", "", "text", "=", "token", ".", "get", "(", "\"text\"", ")", "\n", "if", "self", ".", "styles", "[", "\"speculation_words\"", "]", "and", "text", "in", "self", ".", "specWords", ":", "\n", "                ", "if", "not", "bagOfWords", ".", "has_key", "(", "\"spec_bow_\"", "+", "text", ")", ":", "\n", "                    ", "bagOfWords", "[", "\"spec_bow_\"", "+", "text", "]", "=", "0", "\n", "", "bagOfWords", "[", "\"spec_bow_\"", "+", "text", "]", "+=", "1", "\n", "bagOfWords", "[", "\"spec_sentence\"", "]", "=", "1", "\n", "\n", "", "", "bowFeatures", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "bagOfWords", ".", "iteritems", "(", ")", ":", "\n", "            ", "bowFeatures", "[", "self", ".", "featureSet", ".", "getId", "(", "k", ")", "]", "=", "v", "\n", "\n", "", "self", ".", "inEdgesByToken", "=", "{", "}", "\n", "self", ".", "outEdgesByToken", "=", "{", "}", "\n", "self", ".", "edgeSetByToken", "=", "{", "}", "\n", "for", "token", "in", "sentenceGraph", ".", "tokens", ":", "\n", "            ", "inEdges", "=", "sentenceGraph", ".", "dependencyGraph", ".", "getInEdges", "(", "token", ")", "\n", "self", ".", "inEdgesByToken", "[", "token", "]", "=", "inEdges", "\n", "outEdges", "=", "sentenceGraph", ".", "dependencyGraph", ".", "getOutEdges", "(", "token", ")", "\n", "self", ".", "outEdgesByToken", "[", "token", "]", "=", "outEdges", "\n", "self", ".", "edgeSetByToken", "[", "token", "]", "=", "set", "(", "inEdges", "+", "outEdges", ")", "\n", "\n", "", "for", "entity", "in", "sentenceGraph", ".", "entities", ":", "\n", "#token = sentenceGraph.tokens[i]", "\n", "            ", "token", "=", "sentenceGraph", ".", "entityHeadTokenByEntity", "[", "entity", "]", "\n", "# Recognize only non-named entities (i.e. interaction words)", "\n", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "                ", "continue", "\n", "\n", "# CLASS", "\n", "", "if", "self", ".", "styles", "[", "\"classification\"", "]", "==", "\"multiclass\"", ":", "\n", "                ", "task3Type", "=", "\"multiclass\"", "\n", "categoryName", "=", "\"\"", "\n", "if", "entity", ".", "get", "(", "\"negation\"", ")", "==", "\"True\"", ":", "\n", "                    ", "categoryName", "+=", "\"negation\"", "\n", "", "if", "entity", ".", "get", "(", "\"speculation\"", ")", "==", "\"True\"", ":", "\n", "                    ", "if", "categoryName", "!=", "\"\"", ":", "\n", "                        ", "categoryName", "+=", "\"---\"", "\n", "", "categoryName", "+=", "\"speculation\"", "\n", "", "if", "categoryName", "==", "\"\"", ":", "\n", "                    ", "categoryName", "=", "\"neg\"", "\n", "", "category", "=", "self", ".", "classSet", ".", "getId", "(", "categoryName", ")", "\n", "", "elif", "self", ".", "styles", "[", "\"classification\"", "]", "==", "\"speculation\"", ":", "\n", "                ", "task3Type", "=", "\"speculation\"", "\n", "if", "entity", ".", "get", "(", "\"speculation\"", ")", "==", "\"True\"", ":", "\n", "                    ", "category", "=", "self", ".", "classSet", ".", "getId", "(", "\"speculation\"", ")", "\n", "", "else", ":", "\n", "                    ", "category", "=", "1", "\n", "", "if", "goldGraph", "!=", "None", ":", "\n", "                    ", "if", "len", "(", "entityToGold", "[", "entity", "]", ")", ">", "0", "and", "entityToGold", "[", "entity", "]", "[", "0", "]", ".", "get", "(", "\"speculation\"", ")", "==", "\"True\"", ":", "\n", "                        ", "category", "=", "self", ".", "classSet", ".", "getId", "(", "\"speculation\"", ")", "\n", "", "else", ":", "\n", "                        ", "category", "=", "1", "\n", "", "", "categoryName", "=", "self", ".", "classSet", ".", "getName", "(", "category", ")", "\n", "", "elif", "self", ".", "styles", "[", "\"classification\"", "]", "==", "\"negation\"", ":", "\n", "                ", "task3Type", "=", "\"negation\"", "\n", "if", "entity", ".", "get", "(", "\"negation\"", ")", "==", "\"True\"", ":", "\n", "                    ", "category", "=", "self", ".", "classSet", ".", "getId", "(", "\"negation\"", ")", "\n", "", "else", ":", "\n", "                    ", "category", "=", "1", "\n", "", "if", "goldGraph", "!=", "None", ":", "\n", "                    ", "if", "len", "(", "entityToGold", "[", "entity", "]", ")", ">", "0", "and", "entityToGold", "[", "entity", "]", "[", "0", "]", ".", "get", "(", "\"negation\"", ")", "==", "\"True\"", ":", "\n", "                        ", "category", "=", "self", ".", "classSet", ".", "getId", "(", "\"negation\"", ")", "\n", "", "else", ":", "\n", "                        ", "category", "=", "1", "\n", "", "", "categoryName", "=", "self", ".", "classSet", ".", "getName", "(", "category", ")", "\n", "", "self", ".", "exampleStats", ".", "beginExample", "(", "categoryName", ")", "\n", "\n", "# FEATURES", "\n", "features", "=", "{", "}", "\n", "\n", "# ENTITY TYPE", "\n", "#entityType = self.classSet.getId(self.getMergedEntityType(entity))", "\n", "#del self.classSet.Ids[self.getMergedEntityType(entity)]", "\n", "#IF LOCAL", "\n", "# There's a mistake here. The entityType should be the string, not", "\n", "# the id of the type. But there's also another issue. getMergedEntityType", "\n", "# expects a list, not an item. Therefore the type is always empty ->", "\n", "# types don't get used in classification. But this is the code used in", "\n", "# the publication, so it will now be published as is, and fixed in a later", "\n", "# release.", "\n", "#", "\n", "# Besides, using the classSet here generates an unneeded", "\n", "# additional class, that shows up in evaluations etc. However, to be ", "\n", "# able to publish the exact models used for the publication experiments,", "\n", "# this can't be fixed so it breaks feature id consistency. Therefore I'll", "\n", "# now just remove the redundant class id from the classSet.", "\n", "#ENDIF            ", "\n", "#features[self.featureSet.getId(entityType)] = 1", "\n", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "namedEntityCountFeature", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "entityCountFeature", ")", "]", "=", "1", "\n", "#for k,v in bagOfWords.iteritems():", "\n", "#    features[self.featureSet.getId(k)] = v", "\n", "# pre-calculate bow _features_", "\n", "features", ".", "update", "(", "bowFeatures", ")", "\n", "\n", "#            for j in range(len(sentenceGraph.tokens)):", "\n", "#                text = \"bow_\" + sentenceGraph.tokens[j].get(\"text\")", "\n", "#                if j < i:", "\n", "#                    features[self.featureSet.getId(\"bf_\" + text)] = 1", "\n", "#                elif j > i:", "\n", "#                    features[self.featureSet.getId(\"af_\" + text)] = 1", "\n", "\n", "# Main features", "\n", "text", "=", "token", ".", "get", "(", "\"text\"", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"txt_\"", "+", "text", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"POS_\"", "+", "token", ".", "get", "(", "\"POS\"", ")", ")", "]", "=", "1", "\n", "stem", "=", "PorterStemmer", ".", "stem", "(", "text", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"stem_\"", "+", "stem", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"nonstem_\"", "+", "text", "[", "len", "(", "stem", ")", ":", "]", ")", "]", "=", "1", "\n", "\n", "if", "self", ".", "styles", "[", "\"speculation_words\"", "]", ":", "\n", "                ", "if", "text", "in", "self", ".", "specWords", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"ent_spec\"", ")", "]", "=", "1", "\n", "", "if", "stem", "in", "self", ".", "specWordStems", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"ent_spec_stem\"", ")", "]", "=", "1", "\n", "\n", "# Linear order features", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "sentenceGraph", ".", "tokens", ")", ")", ":", "\n", "                ", "if", "token", "==", "sentenceGraph", ".", "tokens", "[", "i", "]", ":", "\n", "                    ", "break", "\n", "", "", "for", "index", "in", "[", "-", "3", ",", "-", "2", ",", "-", "1", ",", "1", ",", "2", ",", "3", "]", ":", "\n", "                ", "if", "i", "+", "index", ">", "0", "and", "i", "+", "index", "<", "len", "(", "sentenceGraph", ".", "tokens", ")", ":", "\n", "                    ", "self", ".", "buildLinearOrderFeatures", "(", "sentenceGraph", ",", "i", "+", "index", ",", "str", "(", "index", ")", ",", "features", ")", "\n", "\n", "# Content", "\n", "", "", "if", "i", ">", "0", "and", "text", "[", "0", "]", ".", "isalpha", "(", ")", "and", "text", "[", "0", "]", ".", "isupper", "(", ")", ":", "\n", "                ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"upper_case_start\"", ")", "]", "=", "1", "\n", "", "for", "j", "in", "range", "(", "len", "(", "text", ")", ")", ":", "\n", "                ", "if", "j", ">", "0", "and", "text", "[", "j", "]", ".", "isalpha", "(", ")", "and", "text", "[", "j", "]", ".", "isupper", "(", ")", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"upper_case_middle\"", ")", "]", "=", "1", "\n", "# numbers and special characters", "\n", "", "if", "text", "[", "j", "]", ".", "isdigit", "(", ")", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_digits\"", ")", "]", "=", "1", "\n", "if", "j", ">", "0", "and", "text", "[", "j", "-", "1", "]", "==", "\"-\"", ":", "\n", "                        ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_hyphenated_digit\"", ")", "]", "=", "1", "\n", "", "", "elif", "text", "[", "j", "]", "==", "\"-\"", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_hyphen\"", ")", "]", "=", "1", "\n", "", "elif", "text", "[", "j", "]", "==", "\"/\"", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_fslash\"", ")", "]", "=", "1", "\n", "", "elif", "text", "[", "j", "]", "==", "\"\\\\\"", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_bslash\"", ")", "]", "=", "1", "\n", "# duplets", "\n", "", "if", "j", ">", "0", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"dt_\"", "+", "text", "[", "j", "-", "1", ":", "j", "+", "1", "]", ".", "lower", "(", ")", ")", "]", "=", "1", "\n", "# triplets", "\n", "", "if", "j", ">", "1", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"tt_\"", "+", "text", "[", "j", "-", "2", ":", "j", "+", "1", "]", ".", "lower", "(", ")", ")", "]", "=", "1", "\n", "\n", "# Attached edges (Hanging in and out edges)", "\n", "", "", "t1InEdges", "=", "self", ".", "inEdgesByToken", "[", "token", "]", "\n", "for", "edge", "in", "t1InEdges", ":", "\n", "                ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "edgeType", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "edge", "[", "0", "]", ".", "get", "(", "\"POS\"", ")", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "edgeType", "+", "\"_\"", "+", "edge", "[", "0", "]", ".", "get", "(", "\"POS\"", ")", ")", "]", "=", "1", "\n", "tokenText", "=", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "0", "]", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "tokenText", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HIn_\"", "+", "edgeType", "+", "\"_\"", "+", "tokenText", ")", "]", "=", "1", "\n", "", "t1OutEdges", "=", "self", ".", "outEdgesByToken", "[", "token", "]", "\n", "for", "edge", "in", "t1OutEdges", ":", "\n", "                ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "edgeType", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "edge", "[", "1", "]", ".", "get", "(", "\"POS\"", ")", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "edgeType", "+", "\"_\"", "+", "edge", "[", "1", "]", ".", "get", "(", "\"POS\"", ")", ")", "]", "=", "1", "\n", "tokenText", "=", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "1", "]", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "tokenText", ")", "]", "=", "1", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"t1HOut_\"", "+", "edgeType", "+", "\"_\"", "+", "tokenText", ")", "]", "=", "1", "\n", "\n", "", "self", ".", "buildChains", "(", "token", ",", "sentenceGraph", ",", "features", ")", "\n", "\n", "extra", "=", "{", "\"xtype\"", ":", "\"task3\"", ",", "\"t3type\"", ":", "task3Type", ",", "\"t\"", ":", "token", ".", "get", "(", "\"id\"", ")", ",", "\"entity\"", ":", "entity", ".", "get", "(", "\"id\"", ")", "}", "\n", "#examples.append( (sentenceGraph.getSentenceId()+\".x\"+str(exampleIndex),category,features,extra) )", "\n", "example", "=", "(", "sentenceGraph", ".", "getSentenceId", "(", ")", "+", "\".x\"", "+", "str", "(", "exampleIndex", ")", ",", "category", ",", "features", ",", "extra", ")", "\n", "ExampleUtils", ".", "appendExamples", "(", "[", "example", "]", ",", "outfile", ")", "\n", "exampleIndex", "+=", "1", "\n", "self", ".", "exampleStats", ".", "endExample", "(", ")", "\n", "#return examples", "\n", "", "return", "exampleIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ModifierExampleBuilder.ModifierExampleBuilder.buildChains": [[367, 401], ["set.union", "str", "set", "edge[].get", "ModifierExampleBuilder.ModifierExampleBuilder.getTokenFeatures().iteritems", "ModifierExampleBuilder.ModifierExampleBuilder.buildChains", "edge[].get", "ModifierExampleBuilder.ModifierExampleBuilder.getTokenFeatures().iteritems", "ModifierExampleBuilder.ModifierExampleBuilder.buildChains", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.getTokenFeatures", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.getTokenFeatures", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId", "ModifierExampleBuilder.ModifierExampleBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "buildChains", "(", "self", ",", "token", ",", "sentenceGraph", ",", "features", ",", "depthLeft", "=", "3", ",", "chain", "=", "\"\"", ",", "visited", "=", "None", ")", ":", "\n", "        ", "if", "depthLeft", "==", "0", ":", "\n", "            ", "return", "\n", "", "strDepthLeft", "=", "\"dist_\"", "+", "str", "(", "depthLeft", ")", "\n", "\n", "if", "visited", "==", "None", ":", "\n", "            ", "visited", "=", "set", "(", ")", "\n", "\n", "", "inEdges", "=", "self", ".", "inEdgesByToken", "[", "token", "]", "\n", "outEdges", "=", "self", ".", "outEdgesByToken", "[", "token", "]", "\n", "edgeSet", "=", "visited", ".", "union", "(", "self", ".", "edgeSetByToken", "[", "token", "]", ")", "\n", "for", "edge", "in", "inEdges", ":", "\n", "            ", "if", "not", "edge", "in", "visited", ":", "\n", "                ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"dep_\"", "+", "strDepthLeft", "+", "edgeType", ")", "]", "=", "1", "\n", "\n", "nextToken", "=", "edge", "[", "0", "]", "\n", "for", "tokenFeature", ",", "w", "in", "self", ".", "getTokenFeatures", "(", "nextToken", ",", "sentenceGraph", ")", ".", "iteritems", "(", ")", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "strDepthLeft", "+", "tokenFeature", ")", "]", "=", "w", "\n", "\n", "", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"chain_dist_\"", "+", "strDepthLeft", "+", "chain", "+", "\"-frw_\"", "+", "edgeType", ")", "]", "=", "1", "\n", "self", ".", "buildChains", "(", "nextToken", ",", "sentenceGraph", ",", "features", ",", "depthLeft", "-", "1", ",", "chain", "+", "\"-frw_\"", "+", "edgeType", ",", "edgeSet", ")", "\n", "\n", "", "", "for", "edge", "in", "outEdges", ":", "\n", "            ", "if", "not", "edge", "in", "visited", ":", "\n", "                ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"dep_dist_\"", "+", "strDepthLeft", "+", "edgeType", ")", "]", "=", "1", "\n", "\n", "nextToken", "=", "edge", "[", "1", "]", "\n", "for", "tokenFeature", ",", "w", "in", "self", ".", "getTokenFeatures", "(", "nextToken", ",", "sentenceGraph", ")", ".", "iteritems", "(", ")", ":", "\n", "                    ", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "strDepthLeft", "+", "tokenFeature", ")", "]", "=", "w", "\n", "\n", "", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"chain_dist_\"", "+", "strDepthLeft", "+", "chain", "+", "\"-rev_\"", "+", "edgeType", ")", "]", "=", "1", "\n", "self", ".", "buildChains", "(", "nextToken", ",", "sentenceGraph", ",", "features", ",", "depthLeft", "-", "1", ",", "chain", "+", "\"-rev_\"", "+", "edgeType", ",", "edgeSet", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ModifierExampleBuilder.readWords": [[38, 51], ["set", "type", "set", "open", "open.readlines", "open.close", "set", "set.add", "set.add", "Utils.stem", "line.strip"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["def", "readWords", "(", "words", ")", ":", "\n", "    ", "if", "type", "(", "words", ")", "in", "types", ".", "StringTypes", ":", "\n", "        ", "wordSet", "=", "set", "(", ")", "\n", "f", "=", "open", "(", "filename", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "wordSet", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "else", ":", "# assume it's a list", "\n", "        ", "wordSet", "=", "set", "(", "words", ")", "\n", "", "stemSet", "=", "set", "(", ")", "\n", "for", "word", "in", "wordSet", ":", "\n", "        ", "stemSet", ".", "add", "(", "PorterStemmer", ".", "stem", "(", "word", ")", ")", "\n", "", "return", "wordSet", ",", "stemSet", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.__init__": [[71, 106], ["ExampleBuilders.ExampleBuilder.ExampleBuilder.__init__", "UnmergingExampleBuilder.UnmergingExampleBuilder._setDefaultParameters", "UnmergingExampleBuilder.UnmergingExampleBuilder.getParameters", "FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder", "FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder", "Core.IdSet.IdSet", "Core.IdSet.IdSet", "Core.IdSet.IdSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Detectors.ToolChain.ToolChain.getParameters", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["def", "__init__", "(", "self", ",", "style", "=", "None", ",", "length", "=", "None", ",", "types", "=", "[", "]", ",", "featureSet", "=", "None", ",", "classSet", "=", "None", ")", ":", "\n", "# reset style regardless of input", "\n", "#style=\"trigger_features:typed:directed:no_linear:entities:genia_limits:noMasking:maxFeatures\"", "\n", "        ", "if", "featureSet", "==", "None", ":", "\n", "            ", "featureSet", "=", "IdSet", "(", ")", "\n", "", "if", "classSet", "==", "None", ":", "\n", "            ", "classSet", "=", "IdSet", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "classSet", "=", "classSet", "\n", "", "assert", "(", "classSet", ".", "getId", "(", "\"neg\"", ")", "==", "1", ")", "\n", "\n", "ExampleBuilder", ".", "__init__", "(", "self", ",", "classSet", "=", "classSet", ",", "featureSet", "=", "featureSet", ")", "\n", "\n", "defaultNone", "=", "[", "\"binary\"", ",", "\"trigger_features\"", ",", "\"typed\"", ",", "\"directed\"", ",", "\"no_linear\"", ",", "\"entities\"", ",", "\"genia_limits\"", ",", "\n", "\"noAnnType\"", ",", "\"noMasking\"", ",", "\"maxFeatures\"", ",", "\"no_merge\"", ",", "\"disable_entity_features\"", ",", "\n", "\"disable_single_element_features\"", ",", "\"disable_ngram_features\"", ",", "\"disable_path_edge_features\"", "]", "\n", "defaultParameters", "=", "{", "}", "\n", "for", "name", "in", "defaultNone", ":", "\n", "            ", "defaultParameters", "[", "name", "]", "=", "None", "\n", "", "defaultParameters", "[", "\"keep_intersentence\"", "]", "=", "False", "\n", "defaultParameters", "[", "\"keep_intersentence_gold\"", "]", "=", "True", "\n", "defaultParameters", "[", "\"no_arg_count_upper_limit\"", "]", "=", "False", "\n", "self", ".", "styles", "=", "self", ".", "_setDefaultParameters", "(", "defaultParameters", ")", "\n", "self", ".", "styles", "=", "self", ".", "getParameters", "(", "style", ")", "\n", "self", ".", "multiEdgeFeatureBuilder", "=", "MultiEdgeFeatureBuilder", "(", "self", ".", "featureSet", ")", "\n", "self", ".", "multiEdgeFeatureBuilder", ".", "noAnnType", "=", "self", ".", "styles", "[", "\"noAnnType\"", "]", "\n", "self", ".", "multiEdgeFeatureBuilder", ".", "maskNamedEntities", "=", "not", "self", ".", "styles", "[", "\"noMasking\"", "]", "\n", "self", ".", "multiEdgeFeatureBuilder", ".", "maximum", "=", "self", ".", "styles", "[", "\"maxFeatures\"", "]", "\n", "#self.tokenFeatureBuilder = TokenFeatureBuilder(self.featureSet)", "\n", "self", ".", "pathLengths", "=", "length", "\n", "assert", "(", "self", ".", "pathLengths", "==", "None", ")", "\n", "self", ".", "types", "=", "types", "\n", "\n", "self", ".", "triggerFeatureBuilder", "=", "TriggerFeatureBuilder", "(", "self", ".", "featureSet", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "useNonNameEntities", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.getInteractionEdgeLengths": [[109, 150], ["interaction.get", "interaction.get", "range", "abs", "paths.getPaths", "min", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getInteractionEdgeLengths", "(", "self", ",", "sentenceGraph", ",", "paths", ")", ":", "\n", "        ", "\"\"\"\n        Return dependency and linear length of all interaction edges\n        (measured between the two tokens).\n        \"\"\"", "\n", "interactionLengths", "=", "{", "}", "\n", "count", "=", "0", "\n", "for", "interaction", "in", "sentenceGraph", ".", "interactions", ":", "\n", "# Calculated interaction edge dep and lin length", "\n", "            ", "e1Id", "=", "interaction", ".", "get", "(", "\"e1\"", ")", "\n", "e2Id", "=", "interaction", ".", "get", "(", "\"e2\"", ")", "\n", "if", "e2Id", "not", "in", "sentenceGraph", ".", "entitiesById", ":", "# intersentence interaction", "\n", "                ", "interactionLengths", "[", "interaction", "]", "=", "(", "interaction", ",", "-", "count", ",", "-", "count", ",", "-", "count", ")", "\n", "continue", "\n", "", "e1", "=", "sentenceGraph", ".", "entitiesById", "[", "e1Id", "]", "\n", "e2", "=", "sentenceGraph", ".", "entitiesById", "[", "e2Id", "]", "\n", "t1", "=", "sentenceGraph", ".", "entityHeadTokenByEntity", "[", "e1", "]", "\n", "t2", "=", "sentenceGraph", ".", "entityHeadTokenByEntity", "[", "e2", "]", "\n", "# Get dep path length", "\n", "if", "t1", "!=", "t2", ":", "\n", "                ", "path", "=", "paths", ".", "getPaths", "(", "t1", ",", "t2", ")", "\n", "", "if", "t1", "!=", "t2", "and", "len", "(", "path", ")", ">", "0", ":", "\n", "                ", "pathLength", "=", "min", "(", "len", "(", "x", ")", "for", "x", "in", "path", ")", "#len(paths[t1][t2])", "\n", "", "else", ":", "# no dependencyPath", "\n", "                ", "pathLength", "=", "999999", "# more than any real path", "\n", "# Linear distance", "\n", "", "t1Pos", "=", "-", "1", "\n", "t2Pos", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "sentenceGraph", ".", "tokens", ")", ")", ":", "\n", "                ", "if", "sentenceGraph", ".", "tokens", "[", "i", "]", "==", "t1", ":", "\n", "                    ", "t1Pos", "=", "i", "\n", "if", "t2Pos", "!=", "-", "1", ":", "\n", "                        ", "break", "\n", "", "", "if", "sentenceGraph", ".", "tokens", "[", "i", "]", "==", "t2", ":", "\n", "                    ", "t2Pos", "=", "i", "\n", "if", "t1Pos", "!=", "-", "1", ":", "\n", "                        ", "break", "\n", "", "", "", "linLength", "=", "abs", "(", "t1Pos", "-", "t2Pos", ")", "\n", "interactionLengths", "[", "interaction", "]", "=", "(", "interaction", ",", "pathLength", ",", "linLength", ",", "t2Pos", ")", "\n", "count", "+=", "1", "\n", "", "return", "interactionLengths", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.eventIsGold": [[151, 224], ["entity.get", "entity.get", "goldEntitiesByOffset.has_key", "goldEntity.get", "goldEntity.get", "len", "len", "argument.get", "argument.get", "argument.get", "argument.get", "e2Entity.get", "e2Entity.get", "argument.get", "goldInteractions.append", "argTypeCounts.has_key", "goldTypeCounts.has_key", "goldInteraction.get", "goldInteraction.get", "goldInteraction.get", "goldInteraction.get", "goldInteraction.get", "goldE2Entity.get", "goldE2Entity.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "eventIsGold", "(", "self", ",", "entity", ",", "arguments", ",", "sentenceGraph", ",", "goldGraph", ",", "goldEntitiesByOffset", ",", "allGoldInteractions", ")", ":", "\n", "        ", "offset", "=", "entity", ".", "get", "(", "\"headOffset\"", ")", "\n", "if", "not", "goldEntitiesByOffset", ".", "has_key", "(", "offset", ")", ":", "\n", "            ", "return", "False", "\n", "", "eType", "=", "entity", ".", "get", "(", "\"type\"", ")", "\n", "goldEntities", "=", "goldEntitiesByOffset", "[", "offset", "]", "\n", "\n", "# Check all gold entities for a match", "\n", "for", "goldEntity", "in", "goldEntities", ":", "\n", "            ", "isGold", "=", "True", "\n", "\n", "# The entity type must match", "\n", "if", "goldEntity", ".", "get", "(", "\"type\"", ")", "!=", "eType", ":", "\n", "                ", "isGold", "=", "False", "\n", "continue", "\n", "", "goldEntityId", "=", "goldEntity", ".", "get", "(", "\"id\"", ")", "\n", "\n", "# Collect the gold interactions", "\n", "goldInteractions", "=", "[", "]", "\n", "for", "goldInteraction", "in", "allGoldInteractions", ":", "#goldGraph.interactions:", "\n", "                ", "if", "goldInteraction", ".", "get", "(", "\"e1\"", ")", "==", "goldEntityId", "and", "goldInteraction", ".", "get", "(", "\"event\"", ")", "==", "\"True\"", ":", "\n", "                    ", "goldInteractions", ".", "append", "(", "goldInteraction", ")", "\n", "\n", "# Argument count rules", "\n", "", "", "if", "len", "(", "goldInteractions", ")", "!=", "len", "(", "arguments", ")", ":", "# total number of edges differs", "\n", "                ", "isGold", "=", "False", "\n", "continue", "\n", "# count number of edges per type", "\n", "", "argTypeCounts", "=", "{", "}", "\n", "for", "argument", "in", "arguments", ":", "\n", "                ", "argType", "=", "argument", ".", "get", "(", "\"type\"", ")", "\n", "if", "not", "argTypeCounts", ".", "has_key", "(", "argType", ")", ":", "argTypeCounts", "[", "argType", "]", "=", "0", "\n", "argTypeCounts", "[", "argType", "]", "+=", "1", "\n", "# count number of gold edges per type", "\n", "", "goldTypeCounts", "=", "{", "}", "\n", "for", "argument", "in", "goldInteractions", ":", "\n", "                ", "argType", "=", "argument", ".", "get", "(", "\"type\"", ")", "\n", "if", "not", "goldTypeCounts", ".", "has_key", "(", "argType", ")", ":", "goldTypeCounts", "[", "argType", "]", "=", "0", "\n", "goldTypeCounts", "[", "argType", "]", "+=", "1", "\n", "# argument edge counts per type must match", "\n", "", "if", "argTypeCounts", "!=", "goldTypeCounts", ":", "\n", "                ", "isGold", "=", "False", "\n", "continue", "\n", "\n", "# Exact argument matching", "\n", "", "for", "argument", "in", "arguments", ":", "# check all edges", "\n", "                ", "e1", "=", "argument", ".", "get", "(", "\"e1\"", ")", "\n", "e2", "=", "argument", ".", "get", "(", "\"e2\"", ")", "\n", "if", "e2", "not", "in", "sentenceGraph", ".", "entitiesById", ":", "# intersentence argument, assumed to be correct", "\n", "                    ", "found", "=", "True", "\n", "continue", "\n", "", "e2Entity", "=", "sentenceGraph", ".", "entitiesById", "[", "e2", "]", "\n", "e2Offset", "=", "e2Entity", ".", "get", "(", "\"headOffset\"", ")", "\n", "e2Type", "=", "e2Entity", ".", "get", "(", "\"type\"", ")", "\n", "argType", "=", "argument", ".", "get", "(", "\"type\"", ")", "\n", "\n", "found", "=", "False", "\n", "for", "goldInteraction", "in", "goldInteractions", ":", "\n", "                    ", "if", "goldInteraction", ".", "get", "(", "\"type\"", ")", "==", "argType", ":", "\n", "                        ", "if", "goldInteraction", ".", "get", "(", "\"e2\"", ")", "in", "goldGraph", ".", "entitiesById", ":", "# if not, assume this goldInteraction is an intersentence interaction", "\n", "                            ", "goldE2Entity", "=", "goldGraph", ".", "entitiesById", "[", "goldInteraction", ".", "get", "(", "\"e2\"", ")", "]", "\n", "if", "goldE2Entity", ".", "get", "(", "\"headOffset\"", ")", "==", "e2Offset", "and", "goldE2Entity", ".", "get", "(", "\"type\"", ")", "==", "e2Type", ":", "\n", "                                ", "found", "=", "True", "\n", "break", "\n", "", "", "", "", "if", "found", "==", "False", ":", "# this edge did not have a corresponding gold edge", "\n", "                    ", "isGold", "=", "False", "\n", "break", "\n", "\n", "# Event is in gold", "\n", "", "", "if", "isGold", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "isGold", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.sortInteractionsById": [[225, 237], ["pairs.sort", "pairs.append", "int", "interaction.get().split", "interaction.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "sortInteractionsById", "(", "self", ",", "interactions", ")", ":", "\n", "# The order of the interactions affects the order of the unmerging examples, and this ", "\n", "# affects performance. It's not clear whether this is what really happens, or whether", "\n", "# the order of the interactions has some effect on the consistency of the unmerging", "\n", "# features (it shouldn't). However, in case it does, this function is left here for now,", "\n", "# although it shouldn't be needed at all. In any case the impact is minimal, for GE", "\n", "# 53.22 vs 53.28 on the development set.", "\n", "        ", "pairs", "=", "[", "]", "\n", "for", "interaction", "in", "interactions", ":", "\n", "            ", "pairs", ".", "append", "(", "(", "int", "(", "interaction", ".", "get", "(", "\"id\"", ")", ".", "split", "(", "\".i\"", ")", "[", "-", "1", "]", ")", ",", "interaction", ")", ")", "\n", "", "pairs", ".", "sort", "(", ")", "\n", "return", "[", "x", "[", "1", "]", "for", "x", "in", "pairs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.processDocument": [[238, 252], ["range", "len", "UnmergingExampleBuilder.UnmergingExampleBuilder.progress.update", "UnmergingExampleBuilder.UnmergingExampleBuilder.processSentence", "entity.get", "entity.get", "sentence.sentence.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.SplitMergedElements.processSentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "processDocument", "(", "self", ",", "sentences", ",", "goldSentences", ",", "outfile", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "self", ".", "documentEntitiesById", "=", "{", "}", "\n", "for", "sentence", "in", "sentences", ":", "\n", "            ", "for", "entity", "in", "sentence", ".", "entities", ":", "\n", "                ", "assert", "entity", ".", "get", "(", "\"id\"", ")", "not", "in", "self", ".", "documentEntitiesById", "\n", "self", ".", "documentEntitiesById", "[", "entity", ".", "get", "(", "\"id\"", ")", "]", "=", "entity", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "sentences", ")", ")", ":", "\n", "            ", "sentence", "=", "sentences", "[", "i", "]", "\n", "goldSentence", "=", "None", "\n", "if", "goldSentences", "!=", "None", ":", "\n", "                ", "goldSentence", "=", "goldSentences", "[", "i", "]", "\n", "", "self", ".", "progress", ".", "update", "(", "1", ",", "\"Building examples (\"", "+", "sentence", ".", "sentence", ".", "get", "(", "\"id\"", ")", "+", "\"): \"", ")", "\n", "self", ".", "processSentence", "(", "sentence", ",", "outfile", ",", "goldSentence", ",", "structureAnalyzer", "=", "structureAnalyzer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildExamplesFromGraph": [[253, 417], ["UnmergingExampleBuilder.UnmergingExampleBuilder.multiEdgeFeatureBuilder.setFeatureVector", "UnmergingExampleBuilder.UnmergingExampleBuilder.triggerFeatureBuilder.initSentence", "sentenceGraph.dependencyGraph.toUndirected", "UnmergingExampleBuilder.UnmergingExampleBuilder.getInteractionEdgeLengths", "range", "len", "token.get", "sentenceGraph.mergeInteractionGraph", "UnmergingExampleBuilder.UnmergingExampleBuilder.exampleStats.addValue", "entity.get", "str", "UnmergingExampleBuilder.UnmergingExampleBuilder.sortInteractionsById", "collections.defaultdict", "collections.defaultdict", "sorted", "Utils.combine", "Utils.combine", "range", "entity.get", "goldEntitiesByOffset[].append", "type", "collections.defaultdict.keys", "intCombinations.append", "structureAnalyzer.getArgLimits", "range", "len", "sum", "UnmergingExampleBuilder.UnmergingExampleBuilder.exampleStats.beginExample", "collections.defaultdict", "UnmergingExampleBuilder.UnmergingExampleBuilder.exampleStats.endExample", "token.get", "goldEntitiesByOffset.has_key", "len", "len", "sentenceGraph.getOutInteractions", "interaction.get", "interaction.get", "validInteractionsByType[].append", "entity.get", "entity.get", "entity.get", "UnmergingExampleBuilder.combinations", "UnmergingExampleBuilder.UnmergingExampleBuilder.eventIsGold", "UnmergingExampleBuilder.UnmergingExampleBuilder.exampleStats.filter", "token.get", "goldToken.get", "token.get", "goldToken.get", "interaction.get", "interaction.get", "structureAnalyzer.getValidEdgeTypes", "validInteractionsByType[].append", "interaction.get", "str", "sorted", "str", "intCombinations[].append", "entity.get", "entity.get", "structureAnalyzer.isValidEntity", "structureAnalyzer.isValidEvent", "UnmergingExampleBuilder.UnmergingExampleBuilder.buildExample", "UnmergingExampleBuilder.UnmergingExampleBuilder.classSet.getId", "Core.appendExamples", "interaction.get", "e1.get", "e2.get", "collections.defaultdict.keys", "entity.get", "entity.get", "type", "type", "type", "str", "len", "UnmergingExampleBuilder.UnmergingExampleBuilder.exampleStats.filter", "arg.get", "sentenceGraph.getSentenceId", "structureAnalyzer.isValidEntity", "interaction.get", "interaction.get", "arg.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.initSentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.getInteractionEdgeLengths", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.mergeInteractionGraph", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.addValue", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.sortInteractionsById", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.combine.combine", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.combine.combine", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.beginExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.endExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getOutInteractions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.combinations", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.eventIsGold", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.filter", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildExample", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.appendExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.ExampleStats.ExampleStats.filter", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.SentenceGraph.SentenceGraph.getSentenceId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "buildExamplesFromGraph", "(", "self", ",", "sentenceGraph", ",", "outfile", ",", "goldGraph", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build examples for a single sentence. Returns a list of examples.\n        See Core/ExampleUtils for example format.\n        \"\"\"", "\n", "self", ".", "multiEdgeFeatureBuilder", ".", "setFeatureVector", "(", "resetCache", "=", "True", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "initSentence", "(", "sentenceGraph", ")", "\n", "\n", "exampleIndex", "=", "0", "\n", "undirected", "=", "sentenceGraph", ".", "dependencyGraph", ".", "toUndirected", "(", ")", "\n", "paths", "=", "undirected", "\n", "\n", "# Get argument order", "\n", "self", ".", "interactionLenghts", "=", "self", ".", "getInteractionEdgeLengths", "(", "sentenceGraph", ",", "paths", ")", "\n", "\n", "# Map tokens to character offsets", "\n", "tokenByOffset", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "sentenceGraph", ".", "tokens", ")", ")", ":", "\n", "            ", "token", "=", "sentenceGraph", ".", "tokens", "[", "i", "]", "\n", "if", "goldGraph", "!=", "None", ":", "# check that the tokenizations match", "\n", "                ", "goldToken", "=", "goldGraph", ".", "tokens", "[", "i", "]", "\n", "assert", "token", ".", "get", "(", "\"id\"", ")", "==", "goldToken", ".", "get", "(", "\"id\"", ")", "and", "token", ".", "get", "(", "\"charOffset\"", ")", "==", "goldToken", ".", "get", "(", "\"charOffset\"", ")", "\n", "", "tokenByOffset", "[", "token", ".", "get", "(", "\"charOffset\"", ")", "]", "=", "token", ".", "get", "(", "\"id\"", ")", "\n", "\n", "# Map gold entities to their head offsets", "\n", "", "goldEntitiesByOffset", "=", "{", "}", "\n", "if", "goldGraph", "!=", "None", ":", "\n", "            ", "for", "entity", "in", "goldGraph", ".", "entities", ":", "\n", "                ", "offset", "=", "entity", ".", "get", "(", "\"headOffset\"", ")", "\n", "assert", "offset", "!=", "None", "\n", "if", "not", "goldEntitiesByOffset", ".", "has_key", "(", "offset", ")", ":", "\n", "                    ", "goldEntitiesByOffset", "[", "offset", "]", "=", "[", "]", "\n", "", "goldEntitiesByOffset", "[", "offset", "]", ".", "append", "(", "entity", ")", "\n", "\n", "", "", "if", "self", ".", "styles", "[", "\"no_merge\"", "]", ":", "\n", "            ", "mergeInput", "=", "False", "\n", "entities", "=", "sentenceGraph", ".", "entities", "\n", "", "else", ":", "\n", "            ", "mergeInput", "=", "True", "\n", "sentenceGraph", ".", "mergeInteractionGraph", "(", "True", ")", "\n", "entities", "=", "sentenceGraph", ".", "mergedEntities", "\n", "self", ".", "exampleStats", ".", "addValue", "(", "\"Duplicate entities skipped\"", ",", "len", "(", "sentenceGraph", ".", "entities", ")", "-", "len", "(", "entities", ")", ")", "\n", "\n", "", "exampleIndex", "=", "0", "\n", "for", "entity", "in", "entities", ":", "# sentenceGraph.entities:", "\n", "            ", "if", "type", "(", "entity", ")", "in", "types", ".", "StringTypes", ":", "# dummy entity for intersentence interactions", "\n", "                ", "continue", "\n", "\n", "", "eType", "=", "entity", ".", "get", "(", "\"type\"", ")", "\n", "assert", "eType", "!=", "None", ",", "entity", ".", "attrib", "\n", "eType", "=", "str", "(", "eType", ")", "\n", "\n", "interactions", "=", "[", "x", "[", "2", "]", "for", "x", "in", "sentenceGraph", ".", "getOutInteractions", "(", "entity", ",", "mergeInput", ")", "]", "\n", "interactions", "=", "self", ".", "sortInteractionsById", "(", "interactions", ")", "\n", "interactionCounts", "=", "defaultdict", "(", "int", ")", "\n", "validInteractionsByType", "=", "defaultdict", "(", "list", ")", "\n", "for", "interaction", "in", "interactions", ":", "\n", "                ", "if", "interaction", ".", "get", "(", "\"event\"", ")", "!=", "\"True\"", ":", "\n", "                    ", "continue", "\n", "", "e1", "=", "sentenceGraph", ".", "entitiesById", "[", "interaction", ".", "get", "(", "\"e1\"", ")", "]", "\n", "if", "interaction", ".", "get", "(", "\"e2\"", ")", "in", "sentenceGraph", ".", "entitiesById", ":", "\n", "                    ", "e2", "=", "sentenceGraph", ".", "entitiesById", "[", "interaction", ".", "get", "(", "\"e2\"", ")", "]", "\n", "if", "interaction", ".", "get", "(", "\"type\"", ")", "in", "structureAnalyzer", ".", "getValidEdgeTypes", "(", "e1", ".", "get", "(", "\"type\"", ")", ",", "e2", ".", "get", "(", "\"type\"", ")", ")", ":", "\n", "                        ", "validInteractionsByType", "[", "interaction", ".", "get", "(", "\"type\"", ")", "]", ".", "append", "(", "interaction", ")", "\n", "", "", "else", ":", "# intersentence", "\n", "                    ", "validInteractionsByType", "[", "interaction", ".", "get", "(", "\"type\"", ")", "]", ".", "append", "(", "interaction", ")", "\n", "", "interactionCounts", "[", "interaction", ".", "get", "(", "\"type\"", ")", "]", "+=", "1", "\n", "", "interactionCountString", "=", "\",\"", ".", "join", "(", "[", "key", "+", "\"=\"", "+", "str", "(", "interactionCounts", "[", "key", "]", ")", "for", "key", "in", "sorted", "(", "interactionCounts", ".", "keys", "(", ")", ")", "]", ")", "\n", "#argCombinations = self.getArgumentCombinations(eType, interactions, entity.get(\"id\"))", "\n", "intCombinations", "=", "[", "]", "\n", "validIntTypeCount", "=", "0", "\n", "maxArgCount", "=", "0", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "entity", ".", "get", "(", "\"id\"", ")", ",", "entity", ".", "get", "(", "\"type\"", ")", ",", "\"int:\"", "+", "interactionCountString", ",", "\"validInt:\"", "+", "str", "(", "validInteractionsByType", ")", "\n", "", "for", "intType", "in", "sorted", "(", "validInteractionsByType", ".", "keys", "(", ")", ")", ":", "# for each argument type the event can have", "\n", "                ", "validIntTypeCount", "+=", "1", "\n", "intCombinations", ".", "append", "(", "[", "]", ")", "\n", "minArgs", ",", "maxArgs", "=", "structureAnalyzer", ".", "getArgLimits", "(", "entity", ".", "get", "(", "\"type\"", ")", ",", "intType", ")", "\n", "if", "maxArgs", ">", "maxArgCount", ":", "\n", "                    ", "maxArgCount", "=", "maxArgs", "\n", "#if maxArgs > 1: # allow any number of arguments for cases like Binding", "\n", "#    maxArgs = len(validInteractionsByType[intType])", "\n", "", "for", "combLen", "in", "range", "(", "minArgs", ",", "maxArgs", "+", "1", ")", ":", "# for each valid argument count, get all possible combinations. note that there may be zero-lenght combination", "\n", "                    ", "for", "singleTypeArgCombination", "in", "combinations", "(", "validInteractionsByType", "[", "intType", "]", ",", "combLen", ")", ":", "\n", "                        ", "intCombinations", "[", "-", "1", "]", ".", "append", "(", "singleTypeArgCombination", ")", "\n", "# e.g. theme:[a,b], cause:[d] = [[", "\n", "# intCombinations now contains a list of lists, each of which has a tuple for each valid combination", "\n", "# of one argument type. Next, we'll make all valid combinations of multiple argument types", "\n", "", "", "", "if", "self", ".", "debug", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\" \"", ",", "\"intCombinations\"", ",", "intCombinations", "\n", "", "argCombinations", "=", "combine", ".", "combine", "(", "*", "intCombinations", ")", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\" \"", ",", "\"argCombinations\"", ",", "argCombinations", "\n", "", "for", "i", "in", "range", "(", "len", "(", "argCombinations", ")", ")", ":", "\n", "                ", "argCombinations", "[", "i", "]", "=", "sum", "(", "argCombinations", "[", "i", "]", ",", "(", ")", ")", "\n", "#sum(argCombinations, []) # flatten nested list", "\n", "", "if", "self", ".", "debug", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\" \"", ",", "\"argCombinations flat\"", ",", "argCombinations", "\n", "\n", "", "for", "argCombination", "in", "argCombinations", ":", "\n", "# Originally binary classification", "\n", "                ", "if", "goldGraph", "!=", "None", ":", "\n", "                    ", "isGoldEvent", "=", "self", ".", "eventIsGold", "(", "entity", ",", "argCombination", ",", "sentenceGraph", ",", "goldGraph", ",", "goldEntitiesByOffset", ",", "goldGraph", ".", "interactions", ")", "\n", "#if eType == \"Binding\":", "\n", "#    print argCombination[0].get(\"e1\"), len(argCombination), isGoldEvent", "\n", "", "else", ":", "\n", "                    ", "isGoldEvent", "=", "False", "\n", "# Named (multi-)class", "\n", "", "if", "isGoldEvent", ":", "\n", "#                    category = \"zeroArg\"", "\n", "#                    if validIntTypeCount == 1:", "\n", "#                        category = \"singleArg\" # event has 0-1 arguments (old simple6)", "\n", "#                    if validIntTypeCount > 1:", "\n", "#                        category = \"multiType\" # event has arguments of several types, 0-1 of each (old Regulation)", "\n", "#                    if maxArgCount > 1:", "\n", "#                        category = \"multiArg\" # event can have 2-n of at least one argument type (old Binding)", "\n", "                    ", "if", "self", ".", "styles", "[", "\"binary\"", "]", ":", "\n", "                        ", "category", "=", "\"pos\"", "\n", "", "else", ":", "\n", "                        ", "category", "=", "entity", ".", "get", "(", "\"type\"", ")", "\n", "\n", "", "assert", "category", "!=", "None", "\n", "", "else", ":", "\n", "                    ", "category", "=", "\"neg\"", "\n", "", "self", ".", "exampleStats", ".", "beginExample", "(", "category", ")", "\n", "\n", "issues", "=", "defaultdict", "(", "int", ")", "\n", "# early out for proteins etc.", "\n", "if", "validIntTypeCount", "==", "0", "and", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "                    ", "self", ".", "exampleStats", ".", "filter", "(", "\"given-leaf:\"", "+", "entity", ".", "get", "(", "\"type\"", ")", ")", "\n", "if", "self", ".", "debug", ":", "\n", "                        ", "print", ">>", "sys", ".", "stderr", ",", "\" \"", ",", "category", "+", "\"(\"", "+", "eType", "+", "\")\"", ",", "\"arg combination\"", ",", "argCombination", ",", "\"LEAF\"", "\n", "", "", "elif", "structureAnalyzer", ".", "isValidEntity", "(", "entity", ")", "or", "structureAnalyzer", ".", "isValidEvent", "(", "entity", ",", "argCombination", ",", "self", ".", "documentEntitiesById", ",", "noUpperLimitBeyondOne", "=", "self", ".", "styles", "[", "\"no_arg_count_upper_limit\"", "]", ",", "issues", "=", "issues", ")", ":", "\n", "                    ", "if", "self", ".", "debug", ":", "\n", "                        ", "print", ">>", "sys", ".", "stderr", ",", "\" \"", ",", "category", ",", "\"arg combination\"", ",", "argCombination", ",", "\"VALID\"", "\n", "", "argString", "=", "\"\"", "\n", "for", "arg", "in", "argCombination", ":", "\n", "                        ", "argString", "+=", "\",\"", "+", "arg", ".", "get", "(", "\"type\"", ")", "+", "\"=\"", "+", "arg", ".", "get", "(", "\"id\"", ")", "\n", "", "extra", "=", "{", "\"xtype\"", ":", "\"um\"", ",", "\"e\"", ":", "entity", ".", "get", "(", "\"id\"", ")", ",", "\"i\"", ":", "argString", "[", "1", ":", "]", ",", "\"etype\"", ":", "eType", ",", "\"class\"", ":", "category", "}", "\n", "extra", "[", "\"allInt\"", "]", "=", "interactionCountString", "\n", "assert", "type", "(", "extra", "[", "\"etype\"", "]", ")", "in", "types", ".", "StringTypes", ",", "extra", "\n", "assert", "type", "(", "extra", "[", "\"class\"", "]", ")", "in", "types", ".", "StringTypes", ",", "category", "\n", "assert", "type", "(", "extra", "[", "\"i\"", "]", ")", "in", "types", ".", "StringTypes", ",", "argString", "\n", "example", "=", "self", ".", "buildExample", "(", "sentenceGraph", ",", "paths", ",", "entity", ",", "argCombination", ",", "interactions", ")", "\n", "example", "[", "0", "]", "=", "sentenceGraph", ".", "getSentenceId", "(", ")", "+", "\".x\"", "+", "str", "(", "exampleIndex", ")", "\n", "example", "[", "1", "]", "=", "self", ".", "classSet", ".", "getId", "(", "category", ")", "\n", "example", "[", "3", "]", "=", "extra", "\n", "#examples.append( example )", "\n", "ExampleUtils", ".", "appendExamples", "(", "[", "example", "]", ",", "outfile", ")", "\n", "exampleIndex", "+=", "1", "\n", "", "else", ":", "# not a valid event or valid entity", "\n", "                    ", "if", "len", "(", "issues", ")", "==", "0", ":", "# must be > 0 so that it gets filtered", "\n", "                        ", "if", "not", "structureAnalyzer", ".", "isValidEntity", "(", "entity", ")", ":", "\n", "                            ", "issues", "[", "\"INVALID_ENTITY:\"", "+", "eType", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "issues", "[", "\"UNKNOWN_ISSUE_FOR:\"", "+", "eType", "]", "+=", "1", "\n", "", "", "for", "key", "in", "issues", ":", "\n", "                        ", "self", ".", "exampleStats", ".", "filter", "(", "key", ")", "\n", "", "if", "self", ".", "debug", ":", "\n", "                        ", "print", ">>", "sys", ".", "stderr", ",", "\" \"", ",", "category", ",", "\"arg combination\"", ",", "argCombination", ",", "\"INVALID\"", ",", "issues", "\n", "", "", "self", ".", "exampleStats", ".", "endExample", "(", ")", "\n", "\n", "#return examples", "\n", "", "", "return", "exampleIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildExample": [[418, 514], ["UnmergingExampleBuilder.UnmergingExampleBuilder.buildInterArgumentBagOfWords", "eventEntity.get", "UnmergingExampleBuilder.UnmergingExampleBuilder.triggerFeatureBuilder.setFeatureVector", "UnmergingExampleBuilder.UnmergingExampleBuilder.triggerFeatureBuilder.buildFeatures", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "sorted", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.triggerFeatureBuilder.setFeatureVector", "groupInteractionLengths.sort", "range", "len", "len", "argCounts.keys", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "groupInteractionLengths.append", "len", "arg.get", "UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "interaction.get", "UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "str", "str", "str", "str", "str", "str", "str", "UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "arg.get", "UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "arg.get", "UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "str", "UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "len", "len", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildInterArgumentBagOfWords", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures"], ["", "def", "buildExample", "(", "self", ",", "sentenceGraph", ",", "paths", ",", "eventEntity", ",", "argCombination", ",", "allInteractions", ")", ":", "#themeEntities, causeEntities=None):", "\n", "# NOTE!!!! TODO", "\n", "# add also features for arguments present, but not in this combination", "\n", "\n", "        ", "features", "=", "{", "}", "\n", "self", ".", "features", "=", "features", "\n", "\n", "self", ".", "buildInterArgumentBagOfWords", "(", "argCombination", ",", "sentenceGraph", ")", "\n", "\n", "eventEntityType", "=", "eventEntity", ".", "get", "(", "\"type\"", ")", "\n", "if", "eventEntityType", "==", "\"Binding\"", ":", "\n", "            ", "interactionIndex", "=", "{", "}", "\n", "groupInteractionLengths", "=", "[", "]", "\n", "for", "interaction", "in", "allInteractions", ":", "\n", "                ", "groupInteractionLengths", ".", "append", "(", "self", ".", "interactionLenghts", "[", "interaction", "]", ")", "\n", "", "groupInteractionLengths", ".", "sort", "(", "compareInteractionPrecedence", ")", "\n", "#print groupInteractionLengths", "\n", "for", "i", "in", "range", "(", "len", "(", "groupInteractionLengths", ")", ")", ":", "\n", "                ", "interactionIndex", "[", "groupInteractionLengths", "[", "i", "]", "[", "0", "]", "]", "=", "i", "\n", "\n", "", "", "eventToken", "=", "sentenceGraph", ".", "entityHeadTokenByEntity", "[", "eventEntity", "]", "\n", "self", ".", "triggerFeatureBuilder", ".", "setFeatureVector", "(", "self", ".", "features", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "tag", "=", "\"trg_\"", "\n", "self", ".", "triggerFeatureBuilder", ".", "buildFeatures", "(", "eventToken", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "tag", "=", "None", "\n", "\n", "#self.setFeature(\"rootType_\"+eventEntity.get(\"type\"), 1)", "\n", "\n", "argThemeCount", "=", "0", "\n", "argCauseCount", "=", "0", "\n", "argCounts", "=", "{", "}", "\n", "# Current example's edge combination", "\n", "for", "arg", "in", "argCombination", ":", "\n", "            ", "if", "arg", ".", "get", "(", "\"type\"", ")", "==", "\"Theme\"", ":", "\n", "                ", "argThemeCount", "+=", "1", "\n", "tag", "=", "\"argTheme\"", "\n", "self", ".", "buildArgumentFeatures", "(", "sentenceGraph", ",", "paths", ",", "features", ",", "eventToken", ",", "arg", ",", "tag", ")", "\n", "if", "eventEntityType", "==", "\"Binding\"", ":", "\n", "                    ", "tag", "+=", "str", "(", "interactionIndex", "[", "arg", "]", ")", "\n", "self", ".", "buildArgumentFeatures", "(", "sentenceGraph", ",", "paths", ",", "features", ",", "eventToken", ",", "arg", ",", "tag", ")", "\n", "", "", "elif", "arg", ".", "get", "(", "\"type\"", ")", "==", "\"Cause\"", ":", "# Cause", "\n", "                ", "argCauseCount", "+=", "1", "\n", "self", ".", "buildArgumentFeatures", "(", "sentenceGraph", ",", "paths", ",", "features", ",", "eventToken", ",", "arg", ",", "\"argCause\"", ")", "\n", "", "else", ":", "\n", "                ", "argType", "=", "arg", ".", "get", "(", "\"type\"", ")", "\n", "if", "argType", "not", "in", "argCounts", ":", "argCounts", "[", "argType", "]", "=", "0", "\n", "self", ".", "buildArgumentFeatures", "(", "sentenceGraph", ",", "paths", ",", "features", ",", "eventToken", ",", "arg", ",", "\"arg\"", "+", "argType", ")", "\n", "argCounts", "[", "argType", "]", "+=", "1", "\n", "\n", "# Edge group context", "\n", "", "", "contextThemeCount", "=", "0", "\n", "contextCauseCount", "=", "0", "\n", "for", "interaction", "in", "allInteractions", ":", "\n", "            ", "if", "interaction", "in", "argCombination", ":", "# Already part of current example's combination", "\n", "                ", "continue", "\n", "", "if", "interaction", ".", "get", "(", "\"type\"", ")", "==", "\"Theme\"", ":", "\n", "                ", "contextThemeCount", "+=", "1", "\n", "tag", "=", "\"conTheme\"", "\n", "self", ".", "buildArgumentFeatures", "(", "sentenceGraph", ",", "paths", ",", "features", ",", "eventToken", ",", "interaction", ",", "tag", ")", "\n", "if", "eventEntityType", "==", "\"Binding\"", ":", "\n", "                    ", "tag", "+=", "str", "(", "interactionIndex", "[", "interaction", "]", ")", "\n", "self", ".", "buildArgumentFeatures", "(", "sentenceGraph", ",", "paths", ",", "features", ",", "eventToken", ",", "interaction", ",", "tag", ")", "\n", "", "", "else", ":", "# Cause", "\n", "                ", "contextCauseCount", "+=", "1", "\n", "self", ".", "buildArgumentFeatures", "(", "sentenceGraph", ",", "paths", ",", "features", ",", "eventToken", ",", "interaction", ",", "\"conCause\"", ")", "\n", "\n", "", "", "self", ".", "setFeature", "(", "\"argCount\"", ",", "len", "(", "argCombination", ")", ")", "\n", "self", ".", "setFeature", "(", "\"argCount_\"", "+", "str", "(", "len", "(", "argCombination", ")", ")", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"interactionCount\"", ",", "len", "(", "allInteractions", ")", ")", "\n", "self", ".", "setFeature", "(", "\"interactionCount_\"", "+", "str", "(", "len", "(", "allInteractions", ")", ")", ",", "1", ")", "\n", "\n", "self", ".", "setFeature", "(", "\"argThemeCount\"", ",", "argThemeCount", ")", "\n", "self", ".", "setFeature", "(", "\"argThemeCount_\"", "+", "str", "(", "argThemeCount", ")", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"argCauseCount\"", ",", "argCauseCount", ")", "\n", "self", ".", "setFeature", "(", "\"argCauseCount_\"", "+", "str", "(", "argCauseCount", ")", ",", "1", ")", "\n", "for", "key", "in", "sorted", "(", "argCounts", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"arg\"", "+", "key", "+", "\"Count\"", ",", "argCounts", "[", "key", "]", ")", "\n", "self", ".", "setFeature", "(", "\"arg\"", "+", "key", "+", "\"Count_\"", "+", "str", "(", "argCounts", "[", "key", "]", ")", ",", "1", ")", "\n", "\n", "", "self", ".", "setFeature", "(", "\"interactionThemeCount\"", ",", "contextThemeCount", ")", "\n", "self", ".", "setFeature", "(", "\"interactionThemeCount_\"", "+", "str", "(", "contextThemeCount", ")", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"interactionCauseCount\"", ",", "contextCauseCount", ")", "\n", "self", ".", "setFeature", "(", "\"interactionCauseCount_\"", "+", "str", "(", "contextCauseCount", ")", ",", "1", ")", "\n", "\n", "self", ".", "triggerFeatureBuilder", ".", "tag", "=", "\"\"", "\n", "self", ".", "triggerFeatureBuilder", ".", "setFeatureVector", "(", "None", ")", "\n", "\n", "# Common features", "\n", "#        if e1Type.find(\"egulation\") != -1: # leave r out to avoid problems with capitalization", "\n", "#            if entity2.get(\"given\") == \"True\":", "\n", "#                features[self.featureSet.getId(\"GENIA_regulation_of_protein\")] = 1", "\n", "#            else:", "\n", "#                features[self.featureSet.getId(\"GENIA_regulation_of_event\")] = 1", "\n", "\n", "# define extra attributes", "\n", "return", "[", "None", ",", "None", ",", "features", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildArgumentFeatures": [[515, 529], ["UnmergingExampleBuilder.UnmergingExampleBuilder.buildEdgeFeatures", "UnmergingExampleBuilder.UnmergingExampleBuilder.triggerFeatureBuilder.buildFeatures", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "arg.get", "argEntity.get", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "arg.get", "argEntity.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.buildEdgeFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "buildArgumentFeatures", "(", "self", ",", "sentenceGraph", ",", "paths", ",", "features", ",", "eventToken", ",", "arg", ",", "tag", ")", ":", "\n", "        ", "if", "arg", ".", "get", "(", "\"e2\"", ")", "not", "in", "sentenceGraph", ".", "entitiesById", ":", "# intersentence argument", "\n", "            ", "return", "\n", "", "argEntity", "=", "sentenceGraph", ".", "entitiesById", "[", "arg", ".", "get", "(", "\"e2\"", ")", "]", "\n", "argToken", "=", "sentenceGraph", ".", "entityHeadTokenByEntity", "[", "argEntity", "]", "\n", "self", ".", "buildEdgeFeatures", "(", "sentenceGraph", ",", "paths", ",", "features", ",", "eventToken", ",", "argToken", ",", "tag", ")", "\n", "self", ".", "triggerFeatureBuilder", ".", "tag", "=", "tag", "+", "\"trg_\"", "\n", "self", ".", "triggerFeatureBuilder", ".", "buildFeatures", "(", "argToken", ")", "\n", "if", "argEntity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "            ", "self", ".", "setFeature", "(", "tag", "+", "\"Protein\"", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "setFeature", "(", "tag", "+", "\"Event\"", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"nestingEvent\"", ",", "1", ")", "\n", "", "self", ".", "setFeature", "(", "tag", "+", "\"_\"", "+", "argEntity", ".", "get", "(", "\"type\"", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildEdgeFeatures": [[530, 561], ["UnmergingExampleBuilder.UnmergingExampleBuilder.multiEdgeFeatureBuilder.setFeatureVector", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "paths.getPaths", "UnmergingExampleBuilder.UnmergingExampleBuilder.multiEdgeFeatureBuilder.buildPathLengthFeatures", "UnmergingExampleBuilder.UnmergingExampleBuilder.multiEdgeFeatureBuilder.setFeatureVector", "UnmergingExampleBuilder.UnmergingExampleBuilder.multiEdgeFeatureBuilder.buildEntityFeatures", "UnmergingExampleBuilder.UnmergingExampleBuilder.multiEdgeFeatureBuilder.buildSingleElementFeatures", "UnmergingExampleBuilder.UnmergingExampleBuilder.multiEdgeFeatureBuilder.buildPathGrams", "UnmergingExampleBuilder.UnmergingExampleBuilder.multiEdgeFeatureBuilder.buildPathGrams", "UnmergingExampleBuilder.UnmergingExampleBuilder.multiEdgeFeatureBuilder.buildPathGrams", "UnmergingExampleBuilder.UnmergingExampleBuilder.multiEdgeFeatureBuilder.buildPathEdgeFeatures", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPathLengthFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildEntityFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildSingleElementFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPathGrams", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPathGrams", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPathGrams", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPathEdgeFeatures"], ["", "def", "buildEdgeFeatures", "(", "self", ",", "sentenceGraph", ",", "paths", ",", "features", ",", "eventToken", ",", "argToken", ",", "tag", ")", ":", "\n", "#eventToken = sentenceGraph.entityHeadTokenByEntity[eventNode]", "\n", "#argToken = sentenceGraph.entityHeadTokenByEntity[argNode]", "\n", "        ", "self", ".", "multiEdgeFeatureBuilder", ".", "tag", "=", "tag", "+", "\"_\"", "\n", "self", ".", "multiEdgeFeatureBuilder", ".", "setFeatureVector", "(", "features", ",", "None", ",", "None", ",", "False", ")", "\n", "\n", "self", ".", "setFeature", "(", "tag", "+", "\"_present\"", ",", "1", ")", "\n", "\n", "path", "=", "paths", ".", "getPaths", "(", "eventToken", ",", "argToken", ")", "\n", "if", "eventToken", "!=", "argToken", "and", "len", "(", "path", ")", ">", "0", ":", "\n", "            ", "path", "=", "path", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "path", "=", "[", "eventToken", ",", "argToken", "]", "\n", "#edges = None", "\n", "\n", "", "if", "not", "self", ".", "styles", "[", "\"disable_entity_features\"", "]", ":", "\n", "            ", "self", ".", "multiEdgeFeatureBuilder", ".", "buildEntityFeatures", "(", "sentenceGraph", ")", "\n", "", "self", ".", "multiEdgeFeatureBuilder", ".", "buildPathLengthFeatures", "(", "path", ")", "\n", "#if not \"disable_terminus_features\" in self.styles:", "\n", "#    self.multiEdgeFeatureBuilder.buildTerminusTokenFeatures(path, sentenceGraph) # remove for fast", "\n", "if", "not", "self", ".", "styles", "[", "\"disable_single_element_features\"", "]", ":", "\n", "            ", "self", ".", "multiEdgeFeatureBuilder", ".", "buildSingleElementFeatures", "(", "path", ",", "sentenceGraph", ")", "\n", "", "if", "not", "self", ".", "styles", "[", "\"disable_ngram_features\"", "]", ":", "\n", "            ", "self", ".", "multiEdgeFeatureBuilder", ".", "buildPathGrams", "(", "2", ",", "path", ",", "sentenceGraph", ")", "# remove for fast", "\n", "self", ".", "multiEdgeFeatureBuilder", ".", "buildPathGrams", "(", "3", ",", "path", ",", "sentenceGraph", ")", "# remove for fast", "\n", "self", ".", "multiEdgeFeatureBuilder", ".", "buildPathGrams", "(", "4", ",", "path", ",", "sentenceGraph", ")", "# remove for fast", "\n", "", "if", "not", "self", ".", "styles", "[", "\"disable_path_edge_features\"", "]", ":", "\n", "            ", "self", ".", "multiEdgeFeatureBuilder", ".", "buildPathEdgeFeatures", "(", "path", ",", "sentenceGraph", ")", "\n", "#self.multiEdgeFeatureBuilder.buildSentenceFeatures(sentenceGraph)", "\n", "", "self", ".", "multiEdgeFeatureBuilder", ".", "setFeatureVector", "(", "None", ",", "None", ",", "None", ",", "False", ")", "\n", "self", ".", "multiEdgeFeatureBuilder", ".", "tag", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.UnmergingExampleBuilder.buildInterArgumentBagOfWords": [[562, 596], ["range", "set", "min", "max", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "set", "range", "sorted", "len", "len", "len", "list", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "len", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "arg.get", "set.add", "str", "sorted.add", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "UnmergingExampleBuilder.UnmergingExampleBuilder.setFeature", "len", "token.get", "arg.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "buildInterArgumentBagOfWords", "(", "self", ",", "arguments", ",", "sentenceGraph", ")", ":", "\n", "        ", "if", "len", "(", "arguments", ")", "<", "2", ":", "\n", "            ", "return", "\n", "\n", "", "indexByToken", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "sentenceGraph", ".", "tokens", ")", ")", ":", "\n", "            ", "indexByToken", "[", "sentenceGraph", ".", "tokens", "[", "i", "]", "]", "=", "i", "\n", "\n", "", "argTokenIndices", "=", "set", "(", ")", "\n", "for", "arg", "in", "arguments", ":", "\n", "            ", "if", "arg", ".", "get", "(", "\"e2\"", ")", "in", "sentenceGraph", ".", "entitiesById", ":", "# skip intersentence interactions", "\n", "                ", "argEntity", "=", "sentenceGraph", ".", "entitiesById", "[", "arg", ".", "get", "(", "\"e2\"", ")", "]", "\n", "argToken", "=", "sentenceGraph", ".", "entityHeadTokenByEntity", "[", "argEntity", "]", "\n", "argTokenIndices", ".", "add", "(", "indexByToken", "[", "argToken", "]", ")", "\n", "", "", "if", "len", "(", "argTokenIndices", ")", "<", "1", ":", "\n", "            ", "return", "\n", "", "minIndex", "=", "min", "(", "argTokenIndices", ")", "\n", "maxIndex", "=", "max", "(", "argTokenIndices", ")", "\n", "self", ".", "setFeature", "(", "\"argBoWRange\"", ",", "(", "maxIndex", "-", "minIndex", ")", ")", "\n", "self", ".", "setFeature", "(", "\"argBoWRange_\"", "+", "str", "(", "maxIndex", "-", "minIndex", ")", ",", "1", ")", "\n", "bow", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "minIndex", "+", "1", ",", "maxIndex", ")", ":", "\n", "            ", "token", "=", "sentenceGraph", ".", "tokens", "[", "i", "]", "\n", "if", "len", "(", "sentenceGraph", ".", "tokenIsEntityHead", "[", "token", "]", ")", "==", "0", "and", "not", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", ":", "\n", "                ", "bow", ".", "add", "(", "token", ".", "get", "(", "\"text\"", ")", ")", "\n", "", "", "bow", "=", "sorted", "(", "list", "(", "bow", ")", ")", "\n", "for", "word", "in", "bow", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"argBoW_\"", "+", "word", ",", "1", ")", "\n", "if", "word", "in", "[", "\"/\"", ",", "\"-\"", "]", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"argBoW_slashOrHyphen\"", ",", "1", ")", "\n", "", "", "if", "len", "(", "bow", ")", "==", "1", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"argBoWonly_\"", "+", "bow", "[", "0", "]", ",", "1", ")", "\n", "if", "bow", "[", "0", "]", "in", "[", "\"/\"", ",", "\"-\"", "]", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"argBoWonly_slashOrHyphen\"", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.combinations": [[23, 42], ["tuple", "len", "range", "tuple", "reversed", "range", "range", "tuple"], "function", ["None"], ["def", "combinations", "(", "iterable", ",", "r", ")", ":", "\n", "# combinations('ABCD', 2) --> AB AC AD BC BD CD", "\n", "# combinations(range(4), 3) --> 012 013 023 123", "\n", "    ", "pool", "=", "tuple", "(", "iterable", ")", "\n", "n", "=", "len", "(", "pool", ")", "\n", "if", "r", ">", "n", ":", "\n", "        ", "return", "\n", "", "indices", "=", "range", "(", "r", ")", "\n", "yield", "tuple", "(", "pool", "[", "i", "]", "for", "i", "in", "indices", ")", "\n", "while", "True", ":", "\n", "        ", "for", "i", "in", "reversed", "(", "range", "(", "r", ")", ")", ":", "\n", "            ", "if", "indices", "[", "i", "]", "!=", "i", "+", "n", "-", "r", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "return", "\n", "", "indices", "[", "i", "]", "+=", "1", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "r", ")", ":", "\n", "            ", "indices", "[", "j", "]", "=", "indices", "[", "j", "-", "1", "]", "+", "1", "\n", "", "yield", "tuple", "(", "pool", "[", "i", "]", "for", "i", "in", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleBuilders.UnmergingExampleBuilder.compareInteractionPrecedence": [[43, 63], ["None"], "function", ["None"], ["", "", "def", "compareInteractionPrecedence", "(", "e1", ",", "e2", ")", ":", "\n", "    ", "\"\"\"\n    e1/e2 = (interaction, pathdist, lindist, tok2pos)\n    \"\"\"", "\n", "if", "e1", "[", "1", "]", ">", "e2", "[", "1", "]", ":", "\n", "        ", "return", "1", "\n", "", "elif", "e1", "[", "1", "]", "<", "e2", "[", "1", "]", ":", "\n", "        ", "return", "-", "1", "\n", "", "else", ":", "# same dependency distance", "\n", "        ", "if", "e1", "[", "2", "]", ">", "e2", "[", "2", "]", ":", "\n", "            ", "return", "1", "\n", "", "elif", "e1", "[", "2", "]", "<", "e2", "[", "2", "]", ":", "\n", "            ", "return", "-", "1", "\n", "", "else", ":", "# same linear distance", "\n", "            ", "if", "e1", "[", "3", "]", ">", "e2", "[", "3", "]", ":", "\n", "                ", "return", "1", "\n", "", "elif", "e1", "[", "3", "]", "<", "e2", "[", "3", "]", ":", "\n", "                ", "return", "-", "1", "\n", "", "else", ":", "# same head token for entity 2", "\n", "                ", "return", "0", "\n", "#assert False, (\"Precedence error\",e1,e2)", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.Term.__init__": [[5, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "identifier", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "id", "=", "identifier", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "fullId", "=", "None", "\n", "self", ".", "parents", "=", "[", "]", "\n", "#self.children = children", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.__init__": [[13, 19], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.loadOBO", "os.path.join", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.loadOBO"], ["    ", "def", "__init__", "(", "self", ",", "featureSet", ")", ":", "\n", "        ", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ")", "\n", "self", ".", "terms", "=", "{", "}", "\n", "self", ".", "byName", "=", "{", "}", "\n", "self", ".", "byKeyword", "=", "{", "}", "\n", "self", ".", "loadOBO", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"OntoBiotope_BioNLP-ST-2016.obo\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.getParents": [[20, 37], ["name.split", "sorted", "set", "sorted", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.byName.get", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.byKeyword.get", "set", "sorted", "set.add", "sorted.extend", "set"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["", "def", "getParents", "(", "self", ",", "name", ")", ":", "\n", "        ", "terms", "=", "[", "]", "\n", "if", "name", ":", "\n", "            ", "terms", "+=", "self", ".", "byName", ".", "get", "(", "name", ",", "[", "]", ")", "\n", "", "for", "keyword", "in", "name", ".", "split", "(", ")", ":", "\n", "            ", "terms", "+=", "self", ".", "byKeyword", ".", "get", "(", "keyword", ",", "[", "]", ")", "\n", "", "terms", "=", "sorted", "(", "set", "(", "terms", ")", ",", "key", "=", "lambda", "x", ":", "x", ".", "id", ")", "\n", "visited", "=", "set", "(", ")", "\n", "while", "terms", ":", "\n", "            ", "for", "term", "in", "terms", ":", "\n", "                ", "visited", ".", "add", "(", "term", ")", "\n", "", "parents", "=", "[", "]", "\n", "for", "term", "in", "terms", ":", "\n", "                ", "parents", ".", "extend", "(", "term", ".", "parents", ")", "\n", "", "parents", "=", "sorted", "(", "set", "(", "parents", ")", ",", "key", "=", "lambda", "x", ":", "x", ".", "id", ")", "\n", "terms", "=", "[", "x", "for", "x", "in", "parents", "if", "x", "not", "in", "visited", "]", "\n", "", "return", "sorted", "(", "visited", ",", "key", "=", "lambda", "x", ":", "x", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.getOBOFeaturesForEntity": [[38, 47], ["entity.get", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.getParents", "entity.get().lower", "names.append", "entity.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.getParents", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getOBOFeaturesForEntity", "(", "self", ",", "entity", ",", "tag", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "if", "entity", ".", "get", "(", "\"type\"", ")", "in", "(", "\"Geographical\"", ",", "\"Habitat\"", ")", ":", "\n", "            ", "terms", "=", "self", ".", "getParents", "(", "entity", ".", "get", "(", "\"text\"", ")", ".", "lower", "(", ")", ")", "\n", "for", "term", "in", "terms", ":", "\n", "                ", "names", ".", "append", "(", "\"OBO-\"", "+", "tag", "+", "term", ".", "fullId", ")", "\n", "#print term.id, term.name", "\n", "#self.features[self.featureSet.getId(tag + term.fullId)] = 1", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.buildOBOFeaturesForEntityPair": [[48, 56], ["OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.getOBOFeaturesForEntity", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.getOBOFeaturesForEntity", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.featureSet.getId", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.getOBOFeaturesForEntity", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.getOBOFeaturesForEntity", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "buildOBOFeaturesForEntityPair", "(", "self", ",", "e1", ",", "e2", ")", ":", "\n", "        ", "e1Names", "=", "self", ".", "getOBOFeaturesForEntity", "(", "e1", ",", "\"e1_\"", ")", "\n", "e2Names", "=", "self", ".", "getOBOFeaturesForEntity", "(", "e2", ",", "\"e2_\"", ")", "\n", "for", "name", "in", "e1Names", "+", "e2Names", ":", "\n", "            ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "name", ")", "]", "=", "1", "\n", "", "for", "e1Name", "in", "e1Names", ":", "\n", "            ", "for", "e2Name", "in", "e2Names", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "e1Name", "+", "\"__\"", "+", "e2Name", ")", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.buildOBOFeaturesForToken": [[57, 63], ["OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.getParents", "token.get().lower", "len", "token.get", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.featureSet.getId", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.getParents", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "", "", "def", "buildOBOFeaturesForToken", "(", "self", ",", "token", ",", "tag", "=", "\"\"", ")", ":", "\n", "        ", "terms", "=", "self", ".", "getParents", "(", "token", ".", "get", "(", "\"text\"", ")", ".", "lower", "(", ")", ")", "\n", "if", "len", "(", "terms", ")", ">", "0", ":", "\n", "            ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"OntoBiotope_match\"", ")", "]", "=", "1", "\n", "", "for", "term", "in", "terms", ":", "\n", "            ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "term", ".", "fullId", ")", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.addTerm": [[68, 78], ["OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.byName[].add", "term.name.split", "set", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.byKeyword[].add", "set"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["", "", "def", "addTerm", "(", "self", ",", "term", ")", ":", "\n", "        ", "assert", "term", ".", "id", "not", "in", "self", ".", "terms", "\n", "self", ".", "terms", "[", "term", ".", "id", "]", "=", "term", "\n", "if", "term", ".", "name", "not", "in", "self", ".", "byName", ":", "\n", "            ", "self", ".", "byName", "[", "term", ".", "name", "]", "=", "set", "(", ")", "\n", "", "self", ".", "byName", "[", "term", ".", "name", "]", ".", "add", "(", "term", ")", "\n", "for", "keyword", "in", "term", ".", "name", ".", "split", "(", ")", ":", "\n", "            ", "if", "keyword", "not", "in", "self", ".", "byKeyword", ":", "\n", "                ", "self", ".", "byKeyword", "[", "keyword", "]", "=", "set", "(", ")", "\n", "", "self", ".", "byKeyword", "[", "keyword", "]", ".", "add", "(", "term", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.prepareTerms": [[79, 88], ["sorted", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.terms.keys", "sorted", "sorted", "term.name.split"], "methods", ["None"], ["", "", "def", "prepareTerms", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "sorted", "(", "self", ".", "terms", ".", "keys", "(", ")", ")", ":", "\n", "            ", "term", "=", "self", ".", "terms", "[", "key", "]", "\n", "term", ".", "fullId", "=", "term", ".", "id", "+", "\"_\"", "+", "\"_\"", ".", "join", "(", "term", ".", "name", ".", "split", "(", ")", ")", "\n", "term", ".", "parents", "=", "[", "self", ".", "terms", "[", "x", "]", "for", "x", "in", "term", ".", "parents", "]", "\n", "", "for", "key", "in", "self", ".", "byName", ":", "\n", "            ", "self", ".", "byName", "[", "key", "]", "=", "sorted", "(", "self", ".", "byName", "[", "key", "]", ",", "key", "=", "lambda", "x", ":", "x", ".", "id", ")", "\n", "", "for", "key", "in", "self", ".", "byKeyword", ":", "\n", "            ", "self", ".", "byKeyword", "[", "key", "]", "=", "sorted", "(", "self", ".", "byKeyword", "[", "key", "]", ",", "key", "=", "lambda", "x", ":", "x", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.loadOBO": [[89, 111], ["open", "open.readlines", "open.close", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.addTerm", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.prepareTerms", "line.strip.strip.strip", "OntoBiotopeFeatureBuilder.Term", "OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.addTerm", "x.strip", "Term.parents.append", "line.strip.strip.split", "content.lower", "[].strip", "content.split"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.addTerm", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.prepareTerms", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.addTerm"], ["", "", "def", "loadOBO", "(", "self", ",", "oboPath", ")", ":", "\n", "        ", "print", ">>", "sys", ".", "stderr", ",", "\"Loading OBO from\"", ",", "oboPath", "\n", "f", "=", "open", "(", "oboPath", ",", "\"rt\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "term", "=", "None", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "\"[Term]\"", ":", "\n", "                ", "if", "term", ":", "\n", "                    ", "self", ".", "addTerm", "(", "term", ")", "\n", "", "term", "=", "Term", "(", ")", "\n", "", "elif", "\":\"", "in", "line", ":", "\n", "                ", "tag", ",", "content", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "line", ".", "split", "(", "\":\"", ",", "1", ")", "]", "\n", "if", "tag", "==", "\"id\"", ":", "\n", "                    ", "term", ".", "id", "=", "content", "\n", "", "elif", "tag", "==", "\"name\"", ":", "\n", "                    ", "term", ".", "name", "=", "content", ".", "lower", "(", ")", "\n", "", "if", "tag", "==", "\"is_a\"", ":", "\n", "                    ", "term", ".", "parents", ".", "append", "(", "content", ".", "split", "(", "\"!\"", ")", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "", "", "", "self", ".", "addTerm", "(", "term", ")", "\n", "self", ".", "prepareTerms", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.__init__": [[17, 27], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["def", "__init__", "(", "self", ",", "featureSet", ",", "style", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        @type featureSet: IdSet\n        @param featureSet: feature ids\n        \"\"\"", "\n", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ",", "style", "=", "style", ")", "\n", "#self.edgeFeatureBuilder = EdgeFeatureBuilder(featureSet)", "\n", "self", ".", "ontologyFeatureBuilder", "=", "None", "\n", "self", ".", "noAnnType", "=", "False", "\n", "self", ".", "predictedRange", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType": [[28, 43], ["edge.get", "edge.get", "edge.get.startswith", "edge.get.startswith", "edge.get.startswith"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getEdgeType", "(", "self", ",", "edge", ")", ":", "\n", "# simplification reduces performance by 0.2 pp", "\n", "        ", "return", "edge", ".", "get", "(", "\"type\"", ")", "\n", "\n", "eType", "=", "edge", ".", "get", "(", "\"type\"", ")", "\n", "if", "eType", "==", "\"subj\"", "or", "eType", ".", "startswith", "(", "\"nsubj\"", ")", "or", "eType", ".", "startswith", "(", "\"csubj\"", ")", ":", "\n", "            ", "return", "\"subj\"", "\n", "", "elif", "eType", "in", "[", "\"obj\"", ",", "\"dobj\"", ",", "\"iobj\"", ",", "\"pobj\"", "]", ":", "\n", "            ", "return", "\"obj\"", "\n", "", "elif", "eType", "==", "\"agent\"", "or", "eType", "==", "\"prepc\"", "or", "eType", ".", "startswith", "(", "\"prep_\"", ")", ":", "\n", "            ", "return", "\"prep\"", "\n", "", "elif", "eType", "==", "\"appos\"", ":", "# or nn", "\n", "            ", "return", "\"nn\"", "\n", "", "else", ":", "\n", "            ", "return", "eType", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.definePredictedValueRange": [[44, 59], ["sentence.findall", "element.get", "predictions.split.split.split", "p.split", "float"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "definePredictedValueRange", "(", "self", ",", "sentences", ",", "elementName", ")", ":", "\n", "        ", "self", ".", "predictedRange", "=", "[", "None", ",", "None", "]", "\n", "for", "sentence", "in", "sentences", ":", "\n", "            ", "targetElements", "=", "sentence", ".", "findall", "(", "elementName", ")", "\n", "for", "element", "in", "targetElements", ":", "\n", "                ", "predictions", "=", "element", ".", "get", "(", "\"predictions\"", ")", "\n", "if", "predictions", "!=", "None", "and", "predictions", "!=", "\"\"", ":", "\n", "                    ", "predictions", "=", "predictions", ".", "split", "(", "\",\"", ")", "\n", "for", "p", "in", "predictions", ":", "\n", "                        ", "splits", "=", "p", ".", "split", "(", "\":\"", ")", "\n", "value", "=", "float", "(", "splits", "[", "1", "]", ")", "\n", "if", "self", ".", "predictedRange", "[", "0", "]", "==", "None", "or", "self", ".", "predictedRange", "[", "0", "]", ">", "value", ":", "\n", "                            ", "self", ".", "predictedRange", "[", "0", "]", "=", "value", "\n", "", "if", "self", ".", "predictedRange", "[", "1", "]", "==", "None", "or", "self", ".", "predictedRange", "[", "1", "]", "<", "value", ":", "\n", "                            ", "self", ".", "predictedRange", "[", "1", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeatureVector": [[79, 103], ["MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.ontologyFeatureBuilder.setFeatureVector"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector"], ["", "", "", "", "", "", "def", "setFeatureVector", "(", "self", ",", "features", "=", "None", ",", "entity1", "=", "None", ",", "entity2", "=", "None", ",", "resetCache", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        When the feature builder builds features, they are put to this feature vector.\n        \n        @type features: dictionary\n        @param features: a reference to the feature vector\n        @type entity1: cElementTree.Element\n        @param entity1: an entity used by trigger or edge feature builders   \n        @type entity2: cElementTree.Element\n        @param entity2: an entity used by trigger or edge feature builders\n        @type resetCache: boolean\n        @param resetCache: Some intermediate features are cached to speed up example generation. This\n        cache should be cleared when moving to another example.   \n        \"\"\"", "\n", "self", ".", "entity1", "=", "entity1", "\n", "self", ".", "entity2", "=", "entity2", "\n", "self", ".", "features", "=", "features", "\n", "#self.edgeFeatureBuilder.setFeatureVector(features)", "\n", "if", "self", ".", "ontologyFeatureBuilder", "!=", "None", ":", "\n", "            ", "self", ".", "ontologyFeatureBuilder", ".", "setFeatureVector", "(", "features", ")", "\n", "", "if", "resetCache", ":", "\n", "            ", "self", ".", "tokenFeatures", "=", "{", "}", "\n", "self", ".", "edgeCache", "=", "{", "}", "\n", "self", ".", "depPathCache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPredictedValueFeatures": [[104, 127], ["element.get", "predictions.split.split.split", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "p.split", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "float", "str", "element.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "buildPredictedValueFeatures", "(", "self", ",", "element", ",", "tag", ")", ":", "\n", "        ", "\"\"\"\n        Edge examples are usually predicted on top of predicted entities. The entities' confidence scores\n        can be used as features for edge detection. For these features to be used, the model must also have\n        been trained on data that contains prediction confidence scores.\n        \"\"\"", "\n", "predictions", "=", "element", ".", "get", "(", "\"predictions\"", ")", "\n", "if", "predictions", "!=", "None", "and", "predictions", "!=", "\"\"", ":", "\n", "            ", "predictions", "=", "predictions", ".", "split", "(", "\",\"", ")", "\n", "for", "p", "in", "predictions", ":", "\n", "                ", "splits", "=", "p", ".", "split", "(", "\":\"", ")", "\n", "if", "self", ".", "predictedRange", "[", "0", "]", "==", "None", "or", "self", ".", "predictedRange", "[", "1", "]", "==", "None", ":", "\n", "                    ", "value", "=", "1.0", "\n", "", "else", ":", "\n", "                    ", "value", "=", "float", "(", "splits", "[", "1", "]", ")", "\n", "value", "-=", "self", ".", "predictedRange", "[", "0", "]", "\n", "value", "/=", "(", "self", ".", "predictedRange", "[", "1", "]", "-", "self", ".", "predictedRange", "[", "0", "]", ")", "\n", "assert", "(", "value", ">=", "0", "and", "value", "<=", "1", ")", "\n", "#print tag + \"_strength_\"+splits[0], value", "\n", "", "self", ".", "setFeature", "(", "tag", "+", "\"_strength_\"", "+", "splits", "[", "0", "]", ",", "value", ")", "\n", "", "", "else", ":", "\n", "#print tag + \"_strength_\"+str(element.get(\"type\")), 1.0", "\n", "            ", "self", ".", "setFeature", "(", "tag", "+", "\"_strength_\"", "+", "str", "(", "element", ".", "get", "(", "\"type\"", ")", ")", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildEntityFeatures": [[128, 171], ["MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenFeatures", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenFeatures", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.entity1.get", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.entity2.get", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPredictedValueFeatures", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPredictedValueFeatures", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEntityType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEntityType"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPredictedValueFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPredictedValueFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getEntityType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getEntityType"], ["", "", "def", "buildEntityFeatures", "(", "self", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        Build features for the two entities of the current example. These features are labeled as \"e1\" or \"e2\",\n        so entity order is meaningful.\n        \"\"\"", "\n", "#for token, entities in sentenceGraph.entitiesByToken.iteritems():", "\n", "for", "token", "in", "sentenceGraph", ".", "tokens", ":", "\n", "            ", "if", "token", "not", "in", "sentenceGraph", ".", "entitiesByToken", ":", "\n", "                ", "continue", "\n", "", "entities", "=", "sentenceGraph", ".", "entitiesByToken", "[", "token", "]", "\n", "if", "self", ".", "entity1", "in", "entities", ":", "\n", "                ", "tokenFeatures", "=", "self", ".", "getTokenFeatures", "(", "token", ",", "sentenceGraph", ")", "\n", "for", "feature", "in", "tokenFeatures", ":", "\n", "                    ", "self", ".", "setFeature", "(", "\"e1_\"", "+", "feature", ",", "1", ")", "\n", "", "", "if", "self", ".", "entity2", "in", "entities", ":", "\n", "                ", "tokenFeatures", "=", "self", ".", "getTokenFeatures", "(", "token", ",", "sentenceGraph", ")", "\n", "for", "feature", "in", "tokenFeatures", ":", "\n", "                    ", "self", ".", "setFeature", "(", "\"e2_\"", "+", "feature", ",", "1", ")", "\n", "", "", "", "if", "self", ".", "entity1", "!=", "None", "and", "self", ".", "entity2", "!=", "None", ":", "\n", "            ", "entityCombination", "=", "\"\"", "\n", "#if self.entity1.get(\"given\") != None:", "\n", "if", "self", ".", "entity1", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "                ", "entityCombination", "+=", "\"e1_Entity_\"", "\n", "", "else", ":", "\n", "                ", "entityCombination", "+=", "\"e1_InteractionWord_\"", "\n", "if", "self", ".", "predictedRange", "!=", "None", ":", "\n", "                    ", "self", ".", "buildPredictedValueFeatures", "(", "self", ".", "entity1", ",", "\"e1\"", ")", "\n", "#else:", "\n", "#    entityCombination += \"e1_Entity_\"", "\n", "#if self.entity2.get(\"given\") != None:", "\n", "", "", "if", "self", ".", "entity2", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "                ", "entityCombination", "+=", "\"e2_Entity\"", "\n", "", "else", ":", "\n", "                ", "entityCombination", "+=", "\"e2_InteractionWord\"", "\n", "if", "self", ".", "predictedRange", "!=", "None", ":", "\n", "                    ", "self", ".", "buildPredictedValueFeatures", "(", "self", ".", "entity2", ",", "\"e2\"", ")", "\n", "#else:", "\n", "#    entityCombination += \"e2_Entity\"", "\n", "", "", "self", ".", "setFeature", "(", "entityCombination", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"eTypes_\"", "+", "self", ".", "getEntityType", "(", "self", ".", "entity1", ")", "+", "\"_\"", "+", "self", ".", "getEntityType", "(", "self", ".", "entity2", ")", ",", "1", ")", "\n", "\n", "if", "sentenceGraph", ".", "entityHeadTokenByEntity", "[", "self", ".", "entity1", "]", "==", "sentenceGraph", ".", "entityHeadTokenByEntity", "[", "self", ".", "entity2", "]", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"selfLoop\"", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPathLengthFeatures": [[296, 302], ["MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "len", "str", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "", "", "def", "buildPathLengthFeatures", "(", "self", ",", "pathTokens", ")", ":", "\n", "        ", "\"\"\"\n        Simple numeric features about the length of the path\n        \"\"\"", "\n", "self", ".", "setFeature", "(", "\"len_tokens_\"", "+", "str", "(", "len", "(", "pathTokens", ")", ")", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"len\"", ",", "len", "(", "pathTokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildSentenceFeatures": [[303, 315], ["sorted", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenAnnotatedType", "textCounts.keys", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "textCounts.has_key"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getTokenAnnotatedType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "def", "buildSentenceFeatures", "(", "self", ",", "sentenceGraph", ")", ":", "\n", "        ", "textCounts", "=", "{", "}", "\n", "for", "token", "in", "sentenceGraph", ".", "tokens", ":", "\n", "            ", "texts", "=", "self", ".", "getTokenAnnotatedType", "(", "token", ",", "sentenceGraph", ")", "\n", "#text = sentenceGraph.getTokenText(token)", "\n", "for", "text", "in", "texts", ":", "\n", "                ", "if", "not", "textCounts", ".", "has_key", "(", "text", ")", ":", "\n", "                    ", "textCounts", "[", "text", "]", "=", "0", "\n", "", "textCounts", "[", "text", "]", "+=", "1", "\n", "#for k, v in textCounts.iteritems():", "\n", "", "", "for", "key", "in", "sorted", "(", "textCounts", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"count_\"", "+", "key", ",", "textCounts", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildTerminusTokenFeatures": [[316, 324], ["MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenFeatures", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenFeatures", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "", "def", "buildTerminusTokenFeatures", "(", "self", ",", "pathTokens", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        Token features for the first and last tokens of the path\n        \"\"\"", "\n", "for", "feature", "in", "self", ".", "getTokenFeatures", "(", "pathTokens", "[", "0", "]", ",", "sentenceGraph", ")", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"tokTerm1_\"", "+", "feature", ",", "1", ")", "\n", "", "for", "feature", "in", "self", ".", "getTokenFeatures", "(", "pathTokens", "[", "-", "1", "]", ",", "sentenceGraph", ")", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"tokTerm2_\"", "+", "feature", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildWalkPaths": [[330, 340], ["MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenAnnotatedType"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getTokenAnnotatedType"], ["", "", "def", "buildWalkPaths", "(", "self", ",", "pathTokens", ",", "walks", ",", "sentenceGraph", ")", ":", "\n", "#        t1 = self.getTokenAnnotatedType(pathTokens[0], sentenceGraph)", "\n", "#        t2 = self.getTokenAnnotatedType(pathTokens[-1], sentenceGraph)", "\n", "        ", "internalTypes", "=", "\"\"", "\n", "for", "token", "in", "pathTokens", "[", "0", ":", "-", "1", "]", ":", "\n", "            ", "annTypes", "=", "self", ".", "getTokenAnnotatedType", "(", "token", ",", "sentenceGraph", ")", "\n", "for", "annType", "in", "annTypes", ":", "\n", "                ", "internalTypes", "+=", "\"_\"", "+", "annType", "\n", "", "internalTypes", "+=", "\"__\"", "\n", "", "self", ".", "setFeature", "(", "\"tokenPath\"", "+", "internalTypes", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPathGrams": [[347, 394], ["MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenAnnotatedType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenAnnotatedType", "sentenceGraph.dependencyGraph.getWalks", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildWalkPaths", "range", "dirGrams.append", "range", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "len", "len", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenFeatures", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getTokenAnnotatedType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getTokenAnnotatedType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildWalkPaths", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType"], ["", "def", "buildPathGrams", "(", "self", ",", "length", ",", "pathTokens", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        Goes through all the possible walks and builds features for subsections\n        of \"length\" edges.\n        \"\"\"", "\n", "#if pathEdges == None:", "\n", "#    return", "\n", "\n", "t1", "=", "self", ".", "getTokenAnnotatedType", "(", "pathTokens", "[", "0", "]", ",", "sentenceGraph", ")", "\n", "t2", "=", "self", ".", "getTokenAnnotatedType", "(", "pathTokens", "[", "-", "1", "]", ",", "sentenceGraph", ")", "\n", "\n", "#walks = self.getWalks(pathTokens, pathEdges)", "\n", "walks", "=", "sentenceGraph", ".", "dependencyGraph", ".", "getWalks", "(", "pathTokens", ")", "\n", "#if len(walks) > 1:", "\n", "#    print \"Path tokens\", [x.get(\"id\") for x in pathTokens]", "\n", "#    print \"Walks\", len(walks)", "\n", "self", ".", "buildWalkPaths", "(", "pathTokens", ",", "walks", ",", "sentenceGraph", ")", "\n", "dirGrams", "=", "[", "]", "\n", "for", "walk", "in", "walks", ":", "\n", "            ", "dirGrams", ".", "append", "(", "\"\"", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "pathTokens", ")", "-", "1", ")", ":", "# len(pathTokens) == len(walk)", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "walks", ")", ")", ":", "\n", "                ", "if", "walks", "[", "j", "]", "[", "i", "]", "[", "0", "]", "==", "pathTokens", "[", "i", "]", ":", "\n", "                    ", "dirGrams", "[", "j", "]", "+=", "\"F\"", "\n", "", "else", ":", "\n", "                    ", "assert", "walks", "[", "j", "]", "[", "i", "]", "[", "1", "]", "==", "pathTokens", "[", "i", "]", "\n", "dirGrams", "[", "j", "]", "+=", "\"R\"", "\n", "", "if", "i", ">=", "length", "-", "1", ":", "\n", "                    ", "styleGram", "=", "dirGrams", "[", "j", "]", "[", "i", "-", "(", "length", "-", "1", ")", ":", "i", "+", "1", "]", "\n", "edgeGram", "=", "\"depGram_\"", "+", "styleGram", "\n", "# Label tokens by their role in the xgram", "\n", "for", "token", "in", "pathTokens", "[", "i", "-", "(", "length", "-", "1", ")", "+", "1", ":", "i", "+", "1", "]", ":", "\n", "                        ", "for", "feature", "in", "self", ".", "getTokenFeatures", "(", "token", ",", "sentenceGraph", ",", "annotatedType", "=", "(", "self", ".", "maximum", "==", "True", ")", ")", ":", "\n", "                            ", "self", ".", "setFeature", "(", "\"tok_\"", "+", "styleGram", "+", "feature", ",", "1", ")", "\n", "# Label edges by their role in the xgram", "\n", "", "", "position", "=", "0", "\n", "tokenTypeGram", "=", "\"\"", "\n", "for", "edge", "in", "walks", "[", "j", "]", "[", "i", "-", "(", "length", "-", "1", ")", ":", "i", "+", "1", "]", ":", "\n", "                        ", "self", ".", "setFeature", "(", "\"dep_\"", "+", "styleGram", "+", "str", "(", "position", ")", "+", "\"_\"", "+", "self", ".", "getEdgeType", "(", "edge", "[", "2", "]", ")", ",", "1", ")", "\n", "position", "+=", "1", "\n", "edgeGram", "+=", "\"_\"", "+", "self", ".", "getEdgeType", "(", "edge", "[", "2", "]", ")", "\n", "", "self", ".", "setFeature", "(", "edgeGram", ",", "1", ")", "\n", "for", "type1", "in", "t1", ":", "\n", "                        ", "for", "type2", "in", "t2", ":", "\n", "                            ", "self", ".", "setFeature", "(", "type1", "+", "\"_\"", "+", "edgeGram", "+", "\"_\"", "+", "type2", ",", "1", ")", "\n", "", "", "", "", "", "for", "dirGram", "in", "dirGrams", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"edge_directions_\"", "+", "dirGram", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.addType": [[395, 399], ["MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenAnnotatedType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getTokenAnnotatedType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "", "def", "addType", "(", "self", ",", "token", ",", "sentenceGraph", ",", "prefix", "=", "\"annType_\"", ")", ":", "\n", "        ", "types", "=", "self", ".", "getTokenAnnotatedType", "(", "token", ",", "sentenceGraph", ")", "\n", "for", "type", "in", "types", ":", "\n", "            ", "self", ".", "setFeature", "(", "prefix", "+", "type", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildPathEdgeFeatures": [[400, 443], ["range", "len", "edgeList.extend", "edgeList.extend", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.addType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.addType", "sentenceGraph.getTokenText", "sentenceGraph.getTokenText", "edge[].get", "edge[].get", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "depGraph.getEdges", "depGraph.getEdges", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenAnnotatedType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenAnnotatedType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "sentenceGraph.getTokenText", "edge[].get", "sentenceGraph.getTokenText", "edge[].get", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.addType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.addType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getTokenAnnotatedType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getTokenAnnotatedType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "", "def", "buildPathEdgeFeatures", "(", "self", ",", "pathTokens", ",", "sentenceGraph", ")", ":", "\n", "#if pathEdges == None:", "\n", "#    return", "\n", "\n", "        ", "edgeList", "=", "[", "]", "\n", "depGraph", "=", "sentenceGraph", ".", "dependencyGraph", "\n", "pt", "=", "pathTokens", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "pathTokens", ")", ")", ":", "\n", "            ", "edgeList", ".", "extend", "(", "depGraph", ".", "getEdges", "(", "pt", "[", "i", "]", ",", "pt", "[", "i", "-", "1", "]", ")", ")", "\n", "edgeList", ".", "extend", "(", "depGraph", ".", "getEdges", "(", "pt", "[", "i", "-", "1", "]", ",", "pt", "[", "i", "]", ")", ")", "\n", "#edgeList.extend(pathEdges[i][i-1])", "\n", "#edgeList.extend(pathEdges[i-1][i])", "\n", "", "for", "edge", "in", "edgeList", ":", "\n", "            ", "depType", "=", "self", ".", "getEdgeType", "(", "edge", "[", "2", "]", ")", "\n", "self", ".", "setFeature", "(", "\"dep_\"", "+", "depType", ",", "1", ")", "\n", "# Token 1", "\n", "self", ".", "setFeature", "(", "\"txt_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "0", "]", ")", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"POS_\"", "+", "edge", "[", "0", "]", ".", "get", "(", "\"POS\"", ")", ",", "1", ")", "\n", "self", ".", "addType", "(", "edge", "[", "0", "]", ",", "sentenceGraph", ",", "prefix", "=", "\"annType_\"", ")", "\n", "# Token 2", "\n", "self", ".", "setFeature", "(", "\"txt_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "1", "]", ")", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"POS_\"", "+", "edge", "[", "1", "]", ".", "get", "(", "\"POS\"", ")", ",", "1", ")", "\n", "self", ".", "addType", "(", "edge", "[", "1", "]", ",", "sentenceGraph", ",", "prefix", "=", "\"annType_\"", ")", "\n", "\n", "# g-d features", "\n", "gText", "=", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "0", "]", ")", "\n", "dText", "=", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "1", "]", ")", "\n", "gPOS", "=", "edge", "[", "0", "]", ".", "get", "(", "\"POS\"", ")", "\n", "dPOS", "=", "edge", "[", "1", "]", ".", "get", "(", "\"POS\"", ")", "\n", "gAT", "=", "\"noAnnType\"", "\n", "dAT", "=", "\"noAnnType\"", "\n", "if", "sentenceGraph", ".", "tokenIsEntityHead", "[", "edge", "[", "0", "]", "]", "!=", "None", ":", "\n", "                ", "gATs", "=", "self", ".", "getTokenAnnotatedType", "(", "edge", "[", "0", "]", ",", "sentenceGraph", ")", "\n", "", "if", "sentenceGraph", ".", "tokenIsEntityHead", "[", "edge", "[", "1", "]", "]", "!=", "None", ":", "\n", "                ", "dATs", "=", "self", ".", "getTokenAnnotatedType", "(", "edge", "[", "1", "]", ",", "sentenceGraph", ")", "\n", "", "self", ".", "setFeature", "(", "\"gov_\"", "+", "gText", "+", "\"_\"", "+", "dText", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"gov_\"", "+", "gPOS", "+", "\"_\"", "+", "dPOS", ",", "1", ")", "\n", "for", "gAT", "in", "gATs", ":", "\n", "                ", "for", "dAT", "in", "dATs", ":", "\n", "                    ", "self", ".", "setFeature", "(", "\"gov_\"", "+", "gAT", "+", "\"_\"", "+", "dAT", ",", "1", ")", "\n", "\n", "", "", "for", "gAT", "in", "gATs", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"triple_\"", "+", "gAT", "+", "\"_\"", "+", "depType", "+", "\"_\"", "+", "dAT", ",", "1", ")", "\n", "#self.features[self.featureSet.getId(\"triple_\"+gPOS+\"_\"+depType+\"_\"+dPOS)] = 1", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildSingleElementFeatures": [[454, 482], ["range", "range", "range", "len", "depGraph.getEdges", "depGraph.getEdges", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "depGraph.getEdges", "depGraph.getEdges", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "len", "len", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "pathTokens[].get", "sentenceGraph.getTokenText", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType"], ["", "", "", "def", "buildSingleElementFeatures", "(", "self", ",", "pathTokens", ",", "sentenceGraph", ")", ":", "\n", "        ", "depGraph", "=", "sentenceGraph", ".", "dependencyGraph", "\n", "pt", "=", "pathTokens", "\n", "# Edges directed relative to the path", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "pathTokens", ")", ")", ":", "\n", "#if pathEdges != None:", "\n", "#for edge in pathEdges[i][i-1]:", "\n", "            ", "for", "edge", "in", "depGraph", ".", "getEdges", "(", "pt", "[", "i", "]", ",", "pt", "[", "i", "-", "1", "]", ")", ":", "\n", "                ", "depType", "=", "self", ".", "getEdgeType", "(", "edge", "[", "2", "]", ")", "\n", "self", ".", "setFeature", "(", "\"dep_\"", "+", "depType", "+", "\"Forward_\"", ",", "1", ")", "\n", "#for edge in pathEdges[i-1][i]:", "\n", "", "for", "edge", "in", "depGraph", ".", "getEdges", "(", "pt", "[", "i", "-", "1", "]", ",", "pt", "[", "i", "]", ")", ":", "\n", "                ", "depType", "=", "self", ".", "getEdgeType", "(", "edge", "[", "2", "]", ")", "\n", "self", ".", "setFeature", "(", "\"dep_Reverse_\"", "+", "depType", ",", "1", ")", "\n", "\n", "# Internal tokens", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "pathTokens", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"internalPOS_\"", "+", "pathTokens", "[", "i", "]", ".", "get", "(", "\"POS\"", ")", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"internalTxt_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "pathTokens", "[", "i", "]", ")", ",", "1", ")", "\n", "# Internal dependencies", "\n", "", "for", "i", "in", "range", "(", "2", ",", "len", "(", "pathTokens", ")", "-", "1", ")", ":", "\n", "#if pathEdges != None:", "\n", "#for edge in pathEdges[i][i-1]:", "\n", "            ", "for", "edge", "in", "depGraph", ".", "getEdges", "(", "pt", "[", "i", "]", ",", "pt", "[", "i", "-", "1", "]", ")", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"internalDep_\"", "+", "self", ".", "getEdgeType", "(", "edge", "[", "2", "]", ")", ",", "1", ")", "\n", "#for edge in pathEdges[i-1][i]:", "\n", "", "for", "edge", "in", "depGraph", ".", "getEdges", "(", "pt", "[", "i", "-", "1", "]", ",", "pt", "[", "i", "]", ")", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"internalDep_\"", "+", "self", ".", "getEdgeType", "(", "edge", "[", "2", "]", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.buildTerminusFeatures": [[536, 554], ["sentenceGraph.dependencyGraph.getInEdges", "sentenceGraph.dependencyGraph.getOutEdges", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenFeatures", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getTokenFeatures", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.setFeature", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.MultiEdgeFeatureBuilder.MultiEdgeFeatureBuilder.getEdgeType"], ["", "", "", "def", "buildTerminusFeatures", "(", "self", ",", "token", ",", "ignoreEdges", ",", "prefix", ",", "sentenceGraph", ")", ":", "\n", "# Attached edges", "\n", "#inEdges = sentenceGraph.dependencyGraph.in_edges(token)", "\n", "        ", "inEdges", "=", "sentenceGraph", ".", "dependencyGraph", ".", "getInEdges", "(", "token", ")", "\n", "for", "edge", "in", "inEdges", ":", "\n", "            ", "if", "edge", "in", "ignoreEdges", ":", "\n", "                ", "continue", "\n", "", "self", ".", "setFeature", "(", "prefix", "+", "\"HangingIn_\"", "+", "self", ".", "getEdgeType", "(", "edge", "[", "2", "]", ")", ",", "1", ")", "\n", "for", "feature", "in", "self", ".", "getTokenFeatures", "(", "edge", "[", "0", "]", ",", "sentenceGraph", ")", ":", "\n", "                ", "self", ".", "setFeature", "(", "prefix", "+", "\"HangingIn_\"", "+", "feature", ",", "1", ")", "\n", "#outEdges = sentenceGraph.dependencyGraph.out_edges(token)", "\n", "", "", "outEdges", "=", "sentenceGraph", ".", "dependencyGraph", ".", "getOutEdges", "(", "token", ")", "\n", "for", "edge", "in", "outEdges", ":", "\n", "            ", "if", "edge", "in", "ignoreEdges", ":", "\n", "                ", "continue", "\n", "", "self", ".", "setFeature", "(", "prefix", "+", "\"HangingOut_\"", "+", "self", ".", "getEdgeType", "(", "edge", "[", "2", "]", ")", ",", "1", ")", "\n", "for", "feature", "in", "self", ".", "getTokenFeatures", "(", "edge", "[", "1", "]", ",", "sentenceGraph", ")", ":", "\n", "                ", "self", ".", "setFeature", "(", "prefix", "+", "\"HangingOut_\"", "+", "feature", ",", "1", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RandomFeatureBuilder.RandomFeatureBuilder.__init__": [[5, 8], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__", "random.Random"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "featureSet", ")", ":", "\n", "        ", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ")", "\n", "self", ".", "generator", "=", "random", ".", "Random", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RandomFeatureBuilder.RandomFeatureBuilder.buildRandomFeatures": [[9, 13], ["range", "RandomFeatureBuilder.RandomFeatureBuilder.generator.random", "RandomFeatureBuilder.RandomFeatureBuilder.featureSet.getId", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "buildRandomFeatures", "(", "self", ",", "number", ",", "probability", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "number", ")", ":", "\n", "            ", "if", "self", ".", "generator", ".", "random", "(", ")", "<=", "probability", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"random\"", "+", "str", "(", "i", ")", ")", "]", "=", "1", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.EdgeFeatureBuilder.EdgeFeatureBuilder.__init__": [[10, 12], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "featureSet", ")", ":", "\n", "        ", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.EdgeFeatureBuilder.EdgeFeatureBuilder.buildEdgeFeatures": [[13, 37], ["EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "sentenceGraph.getTokenText", "sentenceGraph.getTokenText"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText"], ["", "def", "buildEdgeFeatures", "(", "self", ",", "depEdge", ",", "sentenceGraph", ",", "tag", "=", "\"dep_\"", ",", "text", "=", "True", ",", "POS", "=", "True", ",", "annType", "=", "True", ",", "maskNames", "=", "True", ")", ":", "\n", "        ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "depEdge", "[", "2", "]", ".", "attrib", "[", "\"type\"", "]", ")", "]", "=", "1", "\n", "if", "text", ":", "\n", "            ", "if", "maskNames", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"t1txt_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "depEdge", "[", "0", "]", ")", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"t2txt_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "depEdge", "[", "1", "]", ")", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"t1txt_\"", "+", "depEdge", "[", "0", "]", ".", "attrib", "[", "\"text\"", "]", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"t2txt_\"", "+", "depEdge", "[", "1", "]", ".", "attrib", "[", "\"text\"", "]", ")", "]", "=", "1", "\n", "#features[self.featureSet.getId(\"t1stem_\"+PorterStemmer.stem(sentenceGraph.getTokenText(depEdge[0])))] = 1", "\n", "#features[self.featureSet.getId(\"t2stem_\"+PorterStemmer.stem(sentenceGraph.getTokenText(depEdge[1])))] = 1", "\n", "", "", "if", "POS", ":", "\n", "            ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"POS_\"", "+", "depEdge", "[", "0", "]", ".", "attrib", "[", "\"POS\"", "]", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"POS_\"", "+", "depEdge", "[", "1", "]", ".", "attrib", "[", "\"POS\"", "]", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"t1POS_\"", "+", "depEdge", "[", "0", "]", ".", "attrib", "[", "\"POS\"", "]", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"t2POS_\"", "+", "depEdge", "[", "1", "]", ".", "attrib", "[", "\"POS\"", "]", ")", "]", "=", "1", "\n", "\n", "", "if", "annType", ":", "\n", "            ", "if", "sentenceGraph", ".", "tokenIsEntityHead", "[", "depEdge", "[", "0", "]", "]", "!=", "None", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"annType_\"", "+", "sentenceGraph", ".", "tokenIsEntityHead", "[", "depEdge", "[", "0", "]", "]", ".", "attrib", "[", "\"type\"", "]", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"t1AnnType_\"", "+", "sentenceGraph", ".", "tokenIsEntityHead", "[", "depEdge", "[", "0", "]", "]", ".", "attrib", "[", "\"type\"", "]", ")", "]", "=", "1", "\n", "", "if", "sentenceGraph", ".", "tokenIsEntityHead", "[", "depEdge", "[", "1", "]", "]", "!=", "None", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"annType_\"", "+", "sentenceGraph", ".", "tokenIsEntityHead", "[", "depEdge", "[", "1", "]", "]", ".", "attrib", "[", "\"type\"", "]", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"t2AnnType_\"", "+", "sentenceGraph", ".", "tokenIsEntityHead", "[", "depEdge", "[", "1", "]", "]", ".", "attrib", "[", "\"type\"", "]", ")", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.EdgeFeatureBuilder.EdgeFeatureBuilder.buildTerminusFeatures": [[38, 57], ["sentenceGraph.dependencyGraph.in_edges", "sentenceGraph.dependencyGraph.out_edges", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "sentenceGraph.getTokenText", "sentenceGraph.getTokenText"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText"], ["", "", "", "def", "buildTerminusFeatures", "(", "self", ",", "token", ",", "sentenceGraph", ",", "prefix", "=", "\"term\"", ",", "text", "=", "True", ",", "POS", "=", "True", ",", "annType", "=", "True", ",", "maskNames", "=", "True", ")", ":", "\n", "        ", "inEdges", "=", "sentenceGraph", ".", "dependencyGraph", ".", "in_edges", "(", "token", ")", "\n", "for", "edge", "in", "inEdges", ":", "\n", "            ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "prefix", "+", "\"HangingIn_\"", "+", "edge", "[", "2", "]", ".", "attrib", "[", "\"type\"", "]", ")", "]", "=", "1", "\n", "if", "POS", ":", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "prefix", "+", "\"HangingIn_\"", "+", "edge", "[", "0", "]", ".", "attrib", "[", "\"POS\"", "]", ")", "]", "=", "1", "\n", "if", "annType", "and", "sentenceGraph", ".", "tokenIsEntityHead", "[", "edge", "[", "0", "]", "]", "!=", "None", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "prefix", "+", "\"HangingIn_AnnType_\"", "+", "sentenceGraph", ".", "tokenIsEntityHead", "[", "edge", "[", "0", "]", "]", ".", "attrib", "[", "\"type\"", "]", ")", "]", "=", "1", "\n", "", "if", "text", ":", "\n", "                ", "if", "maskNames", ":", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "prefix", "+", "\"HangingIn_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "0", "]", ")", ")", "]", "=", "1", "\n", "else", ":", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "prefix", "+", "\"HangingIn_\"", "+", "edge", "[", "0", "]", ".", "attrib", "[", "\"text\"", "]", ")", "]", "=", "1", "\n", "", "", "outEdges", "=", "sentenceGraph", ".", "dependencyGraph", ".", "out_edges", "(", "token", ")", "\n", "for", "edge", "in", "outEdges", ":", "\n", "            ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "prefix", "+", "\"HangingOut_\"", "+", "edge", "[", "2", "]", ".", "attrib", "[", "\"type\"", "]", ")", "]", "=", "1", "\n", "if", "POS", ":", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "prefix", "+", "\"HangingOut_\"", "+", "edge", "[", "1", "]", ".", "attrib", "[", "\"POS\"", "]", ")", "]", "=", "1", "\n", "if", "annType", "and", "sentenceGraph", ".", "tokenIsEntityHead", "[", "edge", "[", "1", "]", "]", "!=", "None", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "prefix", "+", "\"HangingOut_AnnType_\"", "+", "sentenceGraph", ".", "tokenIsEntityHead", "[", "edge", "[", "1", "]", "]", ".", "attrib", "[", "\"type\"", "]", ")", "]", "=", "1", "\n", "", "if", "text", ":", "\n", "                ", "if", "maskNames", ":", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "prefix", "+", "\"HangingOut_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "1", "]", ")", ")", "]", "=", "1", "\n", "else", ":", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "prefix", "+", "\"HangingOut_\"", "+", "edge", "[", "1", "]", ".", "attrib", "[", "\"text\"", "]", ")", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.EdgeFeatureBuilder.EdgeFeatureBuilder.buildAttachedEdgeFeatures": [[58, 62], ["EdgeFeatureBuilder.EdgeFeatureBuilder.buildTerminusFeatures", "EdgeFeatureBuilder.EdgeFeatureBuilder.buildTerminusFeatures"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.EdgeFeatureBuilder.EdgeFeatureBuilder.buildTerminusFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.EdgeFeatureBuilder.EdgeFeatureBuilder.buildTerminusFeatures"], ["", "", "", "def", "buildAttachedEdgeFeatures", "(", "self", ",", "depEdge", ",", "sentenceGraph", ",", "tag", "=", "\"\"", ",", "text", "=", "True", ",", "POS", "=", "True", ",", "annType", "=", "True", ",", "maskNames", "=", "True", ")", ":", "\n", "        ", "self", ".", "buildTerminusFeatures", "(", "depEdge", "[", "0", "]", ",", "sentenceGraph", ",", "prefix", "=", "tag", "+", "\"t1\"", ",", "text", "=", "text", ",", "POS", "=", "POS", ",", "annType", "=", "annType", ",", "maskNames", "=", "maskNames", ")", "\n", "self", ".", "buildTerminusFeatures", "(", "depEdge", "[", "1", "]", ",", "sentenceGraph", ",", "prefix", "=", "tag", "+", "\"t2\"", ",", "text", "=", "text", ",", "POS", "=", "POS", ",", "annType", "=", "annType", ",", "maskNames", "=", "maskNames", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.EdgeFeatureBuilder.EdgeFeatureBuilder.buildLinearOrderFeatures": [[63, 78], ["int", "int", "abs", "abs", "depEdge[].attrib[].split", "depEdge[].attrib[].split", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId", "EdgeFeatureBuilder.EdgeFeatureBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "buildLinearOrderFeatures", "(", "self", ",", "depEdge", ")", ":", "\n", "        ", "t1Position", "=", "int", "(", "depEdge", "[", "0", "]", ".", "attrib", "[", "\"id\"", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "t2Position", "=", "int", "(", "depEdge", "[", "1", "]", ".", "attrib", "[", "\"id\"", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"lin_distance\"", ")", "]", "=", "t2Position", "-", "t1Position", "\n", "\n", "if", "t1Position", "<", "t2Position", ":", "\n", "            ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"lin_forward\"", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"lin_distance\"", ")", "]", "=", "abs", "(", "t2Position", "-", "t1Position", ")", "\n", "#features[self.featureSet.getId(\"l1txt_\"+sentenceGraph.getTokenText(depEdge[0]))] = 1", "\n", "#features[self.featureSet.getId(\"l1POS_\"+depEdge[0].attrib[\"POS\"])] = 1", "\n", "#features[self.featureSet.getId(\"l2txt_\"+sentenceGraph.getTokenText(depEdge[1]))] = 1", "\n", "#features[self.featureSet.getId(\"l2POS_\"+depEdge[1].attrib[\"POS\"])] = 1", "\n", "", "else", ":", "\n", "            ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"lin_reverse\"", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"lin_distance\"", ")", "]", "=", "abs", "(", "t2Position", "-", "t1Position", ")", "\n", "#features[self.featureSet.getId(\"l2txt_\"+sentenceGraph.getTokenText(depEdge[0]))] = 1", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder.__init__": [[91, 93], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "featureSet", ")", ":", "\n", "        ", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder.buildGraphKernelFeatures": [[94, 116], ["range", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._buildAdjacencyMatrix", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._prepareMatrix", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._matrixToFeatures", "len", "edgeList.extend", "edgeList.extend", "len", "GraphKernelFeatureBuilder.adjacencyMatrixToHtml", "GraphKernelFeatureBuilder.adjacencyMatrixToHtml", "commentLines.extend", "Core.writeExamples", "depGraph.getEdges", "depGraph.getEdges", "len", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder.featureSet.toStrings"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._buildAdjacencyMatrix", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._prepareMatrix", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._matrixToFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.adjacencyMatrixToHtml", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.adjacencyMatrixToHtml", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.writeExamples"], ["", "def", "buildGraphKernelFeatures", "(", "self", ",", "sentenceGraph", ",", "path", ")", ":", "\n", "        ", "edgeList", "=", "[", "]", "\n", "depGraph", "=", "sentenceGraph", ".", "dependencyGraph", "\n", "pt", "=", "path", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "path", ")", ")", ":", "\n", "            ", "edgeList", ".", "extend", "(", "depGraph", ".", "getEdges", "(", "pt", "[", "i", "]", ",", "pt", "[", "i", "-", "1", "]", ")", ")", "\n", "edgeList", ".", "extend", "(", "depGraph", ".", "getEdges", "(", "pt", "[", "i", "-", "1", "]", ",", "pt", "[", "i", "]", ")", ")", "\n", "", "edges", "=", "edgeList", "\n", "adjacencyMatrix", ",", "labels", "=", "self", ".", "_buildAdjacencyMatrix", "(", "sentenceGraph", ",", "path", ",", "edges", ")", "\n", "node_count", "=", "2", "*", "len", "(", "sentenceGraph", ".", "tokens", ")", "+", "len", "(", "sentenceGraph", ".", "dependencies", ")", "\n", "\n", "if", "sentenceGraph", ".", "sentenceElement", ".", "attrib", "[", "\"id\"", "]", "==", "\"LLL.d0.s0\"", ":", "\n", "            ", "adjacencyMatrixToHtml", "(", "adjacencyMatrix", ",", "labels", ",", "\"LLL.d0.s0_adjacency_matrix.html\"", ")", "\n", "\n", "", "allPathsMatrix", "=", "self", ".", "_prepareMatrix", "(", "adjacencyMatrix", ",", "node_count", ")", "\n", "self", ".", "_matrixToFeatures", "(", "allPathsMatrix", ",", "labels", ")", "\n", "if", "sentenceGraph", ".", "sentenceElement", ".", "attrib", "[", "\"id\"", "]", "==", "\"LLL.d0.s0\"", ":", "\n", "            ", "adjacencyMatrixToHtml", "(", "allPathsMatrix", ",", "labels", ",", "\"LLL.d0.s0_all_paths_matrix.html\"", ")", "\n", "commentLines", "=", "[", "]", "\n", "commentLines", ".", "extend", "(", "self", ".", "featureSet", ".", "toStrings", "(", ")", ")", "\n", "example", "=", "[", "\"example_\"", "+", "self", ".", "entity1", ".", "attrib", "[", "\"id\"", "]", "+", "\"_\"", "+", "self", ".", "entity2", ".", "attrib", "[", "\"id\"", "]", ",", "\"unknown\"", ",", "self", ".", "features", "]", "\n", "ExampleUtils", ".", "writeExamples", "(", "[", "example", "]", ",", "\"LLL.d0.s0_example.txt\"", ",", "commentLines", ")", "\n", "#sys.exit(\"Debug files created\")", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._matrixToFeatures": [[118, 131], ["range", "range", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "", "def", "_matrixToFeatures", "(", "self", ",", "W", ",", "labels", ")", ":", "\n", "#proteins = set([\"PROTEIN1\", \"PROTEIN2\", \"$$PROTEIN1\", \"$$PROTEIN2\"]) ", "\n", "        ", "\"\"\"Linearizes the representation of the graph\"\"\"", "\n", "linear", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "W", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "W", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "W", "[", "i", ",", "j", "]", ">", "0.00001", ":", "#i != j and W[i,j] > 0.3: #0.00001:", "\n", "                    ", "for", "label1", "in", "labels", "[", "i", "]", ":", "\n", "                        ", "if", "(", "not", "\"punct\"", "in", "labels", "[", "i", "]", ")", "and", "(", "not", "\"punct\"", "in", "labels", "[", "j", "]", ")", ":", "\n", "                            ", "for", "label2", "in", "labels", "[", "j", "]", ":", "\n", "#if label1 in proteins or label2 in proteins:", "\n", "                                ", "label", "=", "label1", "+", "\"_$_\"", "+", "label2", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "label", ")", "]", "=", "W", "[", "i", ",", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._prepareMatrix": [[132, 140], ["numpy.mat", "numpy.mat", "numpy.mat", "numpy.mat", "numpy.identity", "numpy.identity", "numpy.identity", "numpy.identity", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.mat", "numpy.mat", "numpy.mat", "numpy.mat", "numpy.identity", "numpy.identity", "numpy.identity", "numpy.identity"], "methods", ["None"], ["", "", "", "", "", "", "", "def", "_prepareMatrix", "(", "self", ",", "adjacencyMatrix", ",", "node_count", ",", "dtyp", "=", "numpy", ".", "float64", ")", ":", "\n", "        ", "W", "=", "adjacencyMatrix", "*", "-", "1.0", "\n", "#        W = adjacencyMatrix", "\n", "#        for i in range(adjacencyMatrix.shape[0]):", "\n", "#            for j in range(adjacencyMatrix.shape[1]):", "\n", "#                adjacencyMatrix[i,j] *= -1.0", "\n", "W", "+=", "numpy", ".", "mat", "(", "numpy", ".", "identity", "(", "node_count", ",", "dtype", "=", "dtyp", ")", ")", "\n", "return", "numpy", ".", "linalg", ".", "inv", "(", "W", ")", "-", "numpy", ".", "mat", "(", "numpy", ".", "identity", "(", "node_count", ",", "dtype", "=", "dtyp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId": [[141, 144], ["int", "tokenElement.attrib[].split"], "methods", ["None"], ["", "def", "_getTokenId", "(", "self", ",", "tokenElement", ")", ":", "\n", "        ", "\"\"\" Returns the position id of the token \"\"\"", "\n", "return", "int", "(", "tokenElement", ".", "attrib", "[", "\"id\"", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenText": [[145, 153], ["sentenceGraph.getTokenText"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText"], ["", "def", "_getTokenText", "(", "self", ",", "path", ",", "sentenceGraph", ",", "token", ")", ":", "\n", "        ", "tokenText", "=", "sentenceGraph", ".", "getTokenText", "(", "token", ")", "\n", "if", "tokenText", "==", "\"NAMED_ENT\"", ":", "\n", "            ", "if", "token", "==", "path", "[", "0", "]", ":", "\n", "                ", "tokenText", "=", "\"NAMED_ENT_1\"", "\n", "", "elif", "token", "==", "path", "[", "-", "1", "]", ":", "\n", "                ", "tokenText", "=", "\"NAMED_ENT_2\"", "\n", "", "", "return", "tokenText", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._buildAdjacencyMatrix": [[154, 254], ["numpy.mat", "numpy.mat", "numpy.mat", "numpy.mat", "range", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._setAllDependencyWeights", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._setDependencyWeightsByPath", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._reduceWeightByDistance", "zip", "range", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._addPositionTags", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "set", "len", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder.getTokenFeatures", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder.has_key", "len", "range", "len", "labels[].add", "labels[].add", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder.remove", "depEdgePairs.append", "depGraphEdges.remove", "len", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder.remove", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder.append", "labels[].add", "labels[].add", "labels[].add", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder.remove", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder.append", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._setAllDependencyWeights", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._setDependencyWeightsByPath", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._reduceWeightByDistance", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._addPositionTags", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId"], ["", "def", "_buildAdjacencyMatrix", "(", "self", ",", "sentenceGraph", ",", "path", ",", "edges", ",", "floattype", "=", "numpy", ".", "float64", ",", "directed", "=", "True", ",", "linearOrderWeight", "=", "0.9", ")", ":", "\n", "        ", "\"\"\" Returns a Numpy-matrix\n        \"\"\"", "\n", "#For each token, 2 nodes are allocated. For each dependency, one node is allocated", "\n", "node_count", "=", "2", "*", "len", "(", "sentenceGraph", ".", "tokens", ")", "+", "len", "(", "sentenceGraph", ".", "dependencies", ")", "\n", "# Make the adjacency matrix of the graph", "\n", "adjMatrix", "=", "numpy", ".", "mat", "(", "numpy", ".", "zeros", "(", "(", "node_count", ",", "node_count", ")", ",", "dtype", "=", "floattype", ")", ")", "\n", "#A dictionary of labels is associated with each node", "\n", "labels", "=", "[", "set", "(", "[", "]", ")", "for", "x", "in", "range", "(", "node_count", ")", "]", "\n", "#The word nodes have indices 0..2*len(tokens), the dependency nodes have the rest of the indices.", "\n", "dep_indices", "=", "range", "(", "2", "*", "len", "(", "sentenceGraph", ".", "tokens", ")", ",", "node_count", ")", "\n", "\n", "# Calculate dependency weights", "\n", "weightByDependency", "=", "{", "}", "\n", "self", ".", "_setAllDependencyWeights", "(", "sentenceGraph", ",", "weightByDependency", ",", "0.3", ")", "\n", "self", ".", "_setDependencyWeightsByPath", "(", "edges", ",", "weightByDependency", ",", "0.9", ")", "\n", "self", ".", "_reduceWeightByDistance", "(", "sentenceGraph", ",", "weightByDependency", ")", "\n", "\n", "# Build dependency types", "\n", "allEdges", "=", "edges", "#self._getEdgeList(edges)", "\n", "\n", "#For each dependency", "\n", "depEdgePairs", "=", "[", "]", "\n", "depGraphEdges", "=", "sentenceGraph", ".", "dependencyGraph", ".", "edges", "#()", "\n", "for", "dependency", "in", "sentenceGraph", ".", "dependencies", ":", "\n", "            ", "for", "edge", "in", "depGraphEdges", ":", "\n", "                ", "if", "edge", "[", "2", "]", "==", "dependency", ":", "\n", "                    ", "depEdgePairs", ".", "append", "(", "(", "dependency", ",", "edge", ")", ")", "\n", "depGraphEdges", ".", "remove", "(", "edge", ")", "\n", "\n", "", "", "", "for", "depPair", ",", "index", "in", "zip", "(", "depEdgePairs", ",", "dep_indices", ")", ":", "\n", "            ", "dep", "=", "depPair", "[", "1", "]", "\n", "#Token1-dependency, and dependency-token2 weights are added        ", "\n", "adjMatrix", "[", "self", ".", "_getTokenId", "(", "dep", "[", "0", "]", ")", "-", "1", ",", "index", "]", "=", "weightByDependency", "[", "dep", "[", "2", "]", "]", "\n", "adjMatrix", "[", "index", ",", "self", ".", "_getTokenId", "(", "dep", "[", "1", "]", ")", "-", "1", "]", "=", "weightByDependency", "[", "dep", "[", "2", "]", "]", "\n", "#For undirected graphs, the links would also go the other way", "\n", "if", "not", "directed", ":", "\n", "                ", "adjMatrix", "[", "self", ".", "_getTokenId", "(", "dep", "[", "1", "]", ")", "-", "1", ",", "index", "]", "=", "weightByDependency", "[", "dep", "[", "2", "]", "]", "\n", "adjMatrix", "[", "index", ",", "self", ".", "_getTokenId", "(", "dep", "[", "0", "]", ")", "-", "1", "]", "=", "weightByDependency", "[", "dep", "[", "2", "]", "]", "\n", "\n", "#            if type(dep.ppiType) == types.ListType:", "\n", "#                for i in dep.ppiType:", "\n", "#                    labels[index].add(i)", "\n", "#            else:", "\n", "#                labels[index].add(dep.ppiType)", "\n", "", "if", "dep", "in", "allEdges", ":", "\n", "                ", "labels", "[", "index", "]", ".", "add", "(", "\"sp_\"", "+", "dep", "[", "2", "]", ".", "attrib", "[", "\"type\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "labels", "[", "index", "]", ".", "add", "(", "dep", "[", "2", "]", ".", "attrib", "[", "\"type\"", "]", ")", "\n", "\n", "#Add the linear order of the sentence to the matrix", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "sentenceGraph", ".", "tokens", ")", ",", "2", "*", "len", "(", "sentenceGraph", ".", "tokens", ")", "-", "1", ")", ":", "\n", "            ", "adjMatrix", "[", "i", ",", "i", "+", "1", "]", "=", "linearOrderWeight", "\n", "if", "not", "directed", ":", "\n", "                ", "adjMatrix", "[", "i", "+", "1", ",", "i", "]", "=", "linearOrderWeight", "\n", "\n", "#For each token", "\n", "#preTagByToken = self._addPositionTags(sentenceGraph, sentenceGraph.entitiesByToken[path[0]], sentenceGraph.entitiesByToken[path[-1]])", "\n", "", "", "preTagByToken", "=", "self", ".", "_addPositionTags", "(", "sentenceGraph", ",", "[", "path", "[", "0", "]", "]", ",", "[", "path", "[", "-", "1", "]", "]", ")", "\n", "for", "node", "in", "sentenceGraph", ".", "tokens", ":", "\n", "            ", "index", "=", "self", ".", "_getTokenId", "(", "node", ")", "-", "1", "\n", "# use the same approach as in MultiEdgeFeatureBuilder", "\n", "features", "=", "self", ".", "getTokenFeatures", "(", "node", ",", "sentenceGraph", ")", "\n", "if", "\"txt_NAMED_ENT\"", "in", "features", ":", "\n", "                ", "if", "self", ".", "entity1", "in", "sentenceGraph", ".", "tokenIsEntityHead", "[", "node", "]", ":", "\n", "                    ", "features", ".", "remove", "(", "\"txt_NAMED_ENT\"", ")", "\n", "features", ".", "append", "(", "\"txt_NAMED_ENT_1\"", ")", "\n", "", "elif", "self", ".", "entity2", "in", "sentenceGraph", ".", "tokenIsEntityHead", "[", "node", "]", ":", "\n", "                    ", "features", ".", "remove", "(", "\"txt_NAMED_ENT\"", ")", "\n", "features", ".", "append", "(", "\"txt_NAMED_ENT_2\"", ")", "\n", "", "", "if", "\"noAnnType\"", "in", "features", ":", "\n", "                ", "features", ".", "remove", "(", "\"noAnnType\"", ")", "\n", "\n", "# apply labels", "\n", "", "if", "node", "in", "path", ":", "# shortest path", "\n", "                ", "for", "feature", "in", "features", ":", "\n", "                    ", "labels", "[", "index", "]", ".", "add", "(", "\"sp_\"", "+", "feature", ")", "\n", "#labels[index].add(\"sp_\"+self._getTokenText(path, sentenceGraph, node))", "\n", "#labels[index].add(\"sp_\"+node.attrib[\"POS\"])", "\n", "", "", "else", ":", "\n", "                ", "for", "feature", "in", "features", ":", "\n", "                    ", "labels", "[", "index", "]", ".", "add", "(", "feature", ")", "\n", "#labels[index].add(self._getTokenText(path, sentenceGraph, node))", "\n", "#labels[index].add(node.attrib[\"POS\"])", "\n", "#            for code in node.metamapCodes:", "\n", "#                labels[index].add(code)", "\n", "#            if node.isPPIInteraction:", "\n", "#                labels[index].add(\"1Nt3R4Ct\")", "\n", "", "", "if", "preTagByToken", ".", "has_key", "(", "node", ")", ":", "\n", "                ", "preTag", "=", "preTagByToken", "[", "node", "]", "\n", "for", "feature", "in", "features", ":", "\n", "                    ", "labels", "[", "index", "]", ".", "add", "(", "preTag", "+", "feature", ")", "\n", "#labels[len(sentenceGraph.tokens)+index].add(preTag+self._getTokenText(path, sentenceGraph, node))", "\n", "#labels[len(sentenceGraph.tokens)+index].add(preTag+node.attrib[\"POS\"])", "\n", "#                for code in node.metamapCodes:", "\n", "#                    labels[len(tokensById)+index].add(preTag+code)", "\n", "#                if node.isPPIInteraction:", "\n", "#                    labels[len(tokensById)+index].add(preTag+\"1Nt3R4Ct\")", "\n", "\n", "", "", "", "return", "adjMatrix", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._setAllDependencyWeights": [[255, 260], ["None"], "methods", ["None"], ["", "def", "_setAllDependencyWeights", "(", "self", ",", "sentenceGraph", ",", "weights", ",", "weight", ")", ":", "\n", "        ", "\"\"\" All weights are set to the given value\n        \"\"\"", "\n", "for", "node", "in", "sentenceGraph", ".", "dependencies", ":", "\n", "            ", "weights", "[", "node", "]", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getEdgeList": [[261, 272], ["edgeDict.keys", "edgeDict.keys.sort", "edgeDict[].keys", "edgeDict[].keys.sort", "allEdges.extend"], "methods", ["None"], ["", "", "def", "_getEdgeList", "(", "self", ",", "edgeDict", ")", ":", "\n", "        ", "allEdges", "=", "[", "]", "\n", "if", "edgeDict", "!=", "None", ":", "\n", "            ", "keys1", "=", "edgeDict", ".", "keys", "(", ")", "\n", "keys1", ".", "sort", "(", ")", "\n", "for", "k1", "in", "keys1", ":", "\n", "                ", "keys2", "=", "edgeDict", "[", "k1", "]", ".", "keys", "(", ")", "\n", "keys2", ".", "sort", "(", ")", "\n", "for", "k2", "in", "keys2", ":", "\n", "                    ", "allEdges", ".", "extend", "(", "edgeDict", "[", "k1", "]", "[", "k2", "]", ")", "\n", "", "", "", "return", "allEdges", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._setDependencyWeightsByPath": [[273, 282], ["weights.has_key"], "methods", ["None"], ["", "def", "_setDependencyWeightsByPath", "(", "self", ",", "edges", ",", "weights", ",", "weight", ")", ":", "\n", "        ", "\"\"\" The weights of all dependencies in specified paths are set to the\n        given value\n        \"\"\"", "\n", "allEdges", "=", "edges", "#self._getEdgeList(edges)", "\n", "\n", "for", "edge", "in", "allEdges", ":", "\n", "            ", "assert", "(", "weights", ".", "has_key", "(", "edge", "[", "2", "]", ")", ")", "\n", "weights", "[", "edge", "[", "2", "]", "]", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._reduceWeightByDistance": [[283, 333], ["sentenceGraph.dependencyGraph.toUndirected", "networkx.Graph", "networkx.all_pairs_shortest_path_length", "networkx.Graph.add_edge", "len", "pow", "zeroDistanceEdges.append", "networkx.all_pairs_shortest_path_length.has_key", "networkx.all_pairs_shortest_path_length.has_key", "dependencyDistances.has_key", "max", "tokenDistanceDict[].has_key", "tokenDistanceDict[].has_key", "tokenDistanceDict[].has_key", "tokenDistanceDict[].has_key"], "methods", ["None"], ["", "", "def", "_reduceWeightByDistance", "(", "self", ",", "sentenceGraph", ",", "weights", ",", "zeroDistanceThreshold", "=", "0.9", ",", "reduceFactor", "=", "0.5", ")", ":", "\n", "        ", "\"\"\" Reduces the weight of dependencies based on their distance\n        from the nearest dependency whose weight is >= the threshold.\n        \"\"\"", "\n", "undirected", "=", "sentenceGraph", ".", "dependencyGraph", ".", "toUndirected", "(", ")", "#.to_undirected()", "\n", "edges", "=", "undirected", ".", "edges", "\n", "tempGraph", "=", "NX", ".", "Graph", "(", "directed", "=", "False", ")", "\n", "for", "edge", "in", "edges", ":", "\n", "            ", "tempGraph", ".", "add_edge", "(", "edge", "[", "0", "]", ",", "edge", "[", "1", "]", ")", "\n", "", "tokenDistanceDict", "=", "NX", ".", "all_pairs_shortest_path_length", "(", "tempGraph", ",", "cutoff", "=", "999", ")", "\n", "dependencyDistances", "=", "{", "}", "\n", "\n", "zeroDistanceEdges", "=", "[", "]", "\n", "for", "edge", "in", "edges", ":", "\n", "            ", "if", "weights", "[", "edge", "[", "2", "]", "]", ">=", "zeroDistanceThreshold", ":", "\n", "                ", "zeroDistanceEdges", ".", "append", "(", "edge", ")", "\n", "dependencyDistances", "[", "edge", "[", "2", "]", "]", "=", "0", "\n", "\n", "# Cannot reduce weight if no node is over threshold", "\n", "", "", "if", "len", "(", "zeroDistanceEdges", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "# Calculate distances", "\n", "", "for", "edge", "in", "edges", ":", "\n", "            ", "if", "edge", "in", "zeroDistanceEdges", ":", "\n", "                ", "continue", "\n", "", "shortestDistance", "=", "99", "\n", "for", "zeroDistanceEdge", "in", "zeroDistanceEdges", ":", "\n", "                ", "if", "tokenDistanceDict", ".", "has_key", "(", "edge", "[", "0", "]", ")", ":", "\n", "                    ", "if", "tokenDistanceDict", "[", "edge", "[", "0", "]", "]", ".", "has_key", "(", "zeroDistanceEdge", "[", "0", "]", ")", ":", "\n", "                        ", "if", "tokenDistanceDict", "[", "edge", "[", "0", "]", "]", "[", "zeroDistanceEdge", "[", "0", "]", "]", "<", "shortestDistance", ":", "\n", "                            ", "shortestDistance", "=", "tokenDistanceDict", "[", "edge", "[", "0", "]", "]", "[", "zeroDistanceEdge", "[", "0", "]", "]", "\n", "", "", "if", "tokenDistanceDict", "[", "edge", "[", "0", "]", "]", ".", "has_key", "(", "zeroDistanceEdge", "[", "1", "]", ")", ":", "\n", "                        ", "if", "tokenDistanceDict", "[", "edge", "[", "0", "]", "]", "[", "zeroDistanceEdge", "[", "1", "]", "]", "<", "shortestDistance", ":", "\n", "                            ", "shortestDistance", "=", "tokenDistanceDict", "[", "edge", "[", "0", "]", "]", "[", "zeroDistanceEdge", "[", "1", "]", "]", "\n", "", "", "", "if", "tokenDistanceDict", ".", "has_key", "(", "edge", "[", "1", "]", ")", ":", "\n", "                    ", "if", "tokenDistanceDict", "[", "edge", "[", "1", "]", "]", ".", "has_key", "(", "zeroDistanceEdge", "[", "0", "]", ")", ":", "\n", "                        ", "if", "tokenDistanceDict", "[", "edge", "[", "1", "]", "]", "[", "zeroDistanceEdge", "[", "0", "]", "]", "<", "shortestDistance", ":", "\n", "                            ", "shortestDistance", "=", "tokenDistanceDict", "[", "edge", "[", "1", "]", "]", "[", "zeroDistanceEdge", "[", "0", "]", "]", "\n", "", "", "if", "tokenDistanceDict", "[", "edge", "[", "1", "]", "]", ".", "has_key", "(", "zeroDistanceEdge", "[", "1", "]", ")", ":", "\n", "                        ", "if", "tokenDistanceDict", "[", "edge", "[", "1", "]", "]", "[", "zeroDistanceEdge", "[", "1", "]", "]", "<", "shortestDistance", ":", "\n", "                            ", "shortestDistance", "=", "tokenDistanceDict", "[", "edge", "[", "1", "]", "]", "[", "zeroDistanceEdge", "[", "1", "]", "]", "\n", "#assert(not dependencyDistances.has_key(edge[2]))", "\n", "", "", "", "", "dependencyDistances", "[", "edge", "[", "2", "]", "]", "=", "shortestDistance", "+", "1", "\n", "\n", "# Reduce weight", "\n", "", "for", "dependency", "in", "sentenceGraph", ".", "dependencies", ":", "\n", "            ", "if", "not", "dependencyDistances", ".", "has_key", "(", "dependency", ")", ":", "\n", "                ", "dependencyDistances", "[", "dependency", "]", "=", "99", "\n", "", "weights", "[", "dependency", "]", "*=", "pow", "(", "reduceFactor", ",", "max", "(", "dependencyDistances", "[", "dependency", "]", "-", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._addPositionTags": [[356, 381], ["min", "max", "entity1TokenIds.append", "entity2TokenIds.append", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.GraphKernelFeatureBuilder._getTokenId"], ["", "", "def", "_addPositionTags", "(", "self", ",", "sentenceGraph", ",", "entity1Tokens", ",", "entity2Tokens", ")", ":", "\n", "        ", "\"\"\" Sets a prefix to the tokens ppiText based on their linear\n        order in the sentence.\n        \"\"\"", "\n", "entity1TokenIds", "=", "[", "]", "\n", "for", "token", "in", "entity1Tokens", ":", "\n", "            ", "entity1TokenIds", ".", "append", "(", "self", ".", "_getTokenId", "(", "token", ")", ")", "\n", "", "entity2TokenIds", "=", "[", "]", "\n", "for", "token", "in", "entity2Tokens", ":", "\n", "            ", "entity2TokenIds", ".", "append", "(", "self", ".", "_getTokenId", "(", "token", ")", ")", "\n", "", "entity1FirstTokenId", "=", "min", "(", "entity1TokenIds", ")", "\n", "entity2LastTokenId", "=", "max", "(", "entity2TokenIds", ")", "\n", "\n", "preTagByToken", "=", "{", "}", "\n", "for", "token", "in", "sentenceGraph", ".", "tokens", ":", "\n", "            ", "pretag", "=", "\"$$\"", "\n", "tokenId", "=", "self", ".", "_getTokenId", "(", "token", ")", "\n", "if", "not", "(", "tokenId", "in", "entity1TokenIds", "or", "tokenId", "in", "entity2TokenIds", ")", ":", "\n", "                ", "if", "tokenId", "<", "entity1FirstTokenId", ":", "\n", "                    ", "pretag", "=", "\"$B$\"", "\n", "", "elif", "tokenId", ">", "entity2LastTokenId", ":", "\n", "                    ", "pretag", "=", "\"$A$\"", "\n", "", "", "preTagByToken", "[", "token", "]", "=", "pretag", "\n", "\n", "", "return", "preTagByToken", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.getHexColor": [[11, 16], ["int", "int", "int"], "function", ["None"], ["def", "getHexColor", "(", "red", ",", "green", ",", "blue", ")", ":", "\n", "    ", "\"\"\" convert an (R, G, B) tuple to #RRGGBB \"\"\"", "\n", "hexcolor", "=", "'#%02x%02x%02x'", "%", "(", "int", "(", "red", ")", ",", "int", "(", "green", ")", ",", "int", "(", "blue", ")", ")", "\n", "# that's it! '%02x' means zero-padded, 2-digit hex values", "\n", "return", "hexcolor", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.getColorFromBRGSpectrum": [[17, 25], ["GraphKernelFeatureBuilder.getHexColor", "max", "max", "max", "abs"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.getHexColor"], ["", "def", "getColorFromBRGSpectrum", "(", "value", ",", "minVal", "=", "0.0", ",", "maxVal", "=", "1.0", ")", ":", "\n", "    ", "span", "=", "maxVal", "-", "minVal", "\n", "pos", "=", "value", "/", "span", "\n", "spanHalf", "=", "span", "/", "2.0", "\n", "blue", "=", "max", "(", "(", "spanHalf", "-", "value", ")", "/", "spanHalf", ",", "0.0", ")", "*", "255", "\n", "red", "=", "max", "(", "(", "spanHalf", "-", "abs", "(", "value", "-", "spanHalf", ")", ")", "/", "spanHalf", ",", "0.0", ")", "*", "255", "\n", "green", "=", "max", "(", "(", "value", "-", "spanHalf", ")", "/", "spanHalf", ",", "0.0", ")", "*", "255", "\n", "return", "getHexColor", "(", "red", ",", "green", ",", "blue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.adjacencyMatrixToHtml": [[26, 89], ["HtmlBuilder", "HtmlBuilder.newPage", "HtmlBuilder.header", "HtmlBuilder.table", "HtmlBuilder.tableRow", "HtmlBuilder.tableData", "range", "HtmlBuilder.closeElement", "range", "HtmlBuilder.closeElement", "HtmlBuilder.header", "HtmlBuilder.table", "HtmlBuilder.tableRow", "HtmlBuilder.tableData", "HtmlBuilder.span", "HtmlBuilder.closeElement", "HtmlBuilder.closeElement", "HtmlBuilder.closeElement", "HtmlBuilder.write", "HtmlBuilder.tableData", "HtmlBuilder.span", "HtmlBuilder.closeElement", "HtmlBuilder.tableRow", "HtmlBuilder.tableData", "HtmlBuilder.span", "HtmlBuilder.closeElement", "range", "HtmlBuilder.closeElement", "HtmlBuilder.tableData", "HtmlBuilder.span", "HtmlBuilder.closeElement", "HtmlBuilder.header", "range", "str", "str", "HtmlBuilder.tableData", "HtmlBuilder.closeElement", "str", "len", "HtmlBuilder.span", "HtmlBuilder.lineBreak", "HtmlBuilder.span", "HtmlBuilder.span", "GraphKernelFeatureBuilder.getColorFromBRGSpectrum", "str", "GraphKernelFeatureBuilder.getColorFromBRGSpectrum", "str"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.getColorFromBRGSpectrum", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GraphKernelFeatureBuilder.getColorFromBRGSpectrum"], ["", "def", "adjacencyMatrixToHtml", "(", "matrix", ",", "labels", ",", "filename", ")", ":", "\n", "    ", "from", "HtmlBuilder", "import", "HtmlBuilder", "\n", "h", "=", "HtmlBuilder", "(", ")", "\n", "h", ".", "newPage", "(", "\"test\"", ",", "\"\"", ")", "\n", "\n", "h", ".", "header", "(", "\"Adjacency Matrix\"", ",", "3", ")", "\n", "h", ".", "table", "(", "1", ")", "\n", "rows", ",", "columns", "=", "matrix", ".", "shape", "\n", "h", ".", "tableRow", "(", ")", "# title row", "\n", "h", ".", "tableData", "(", "None", ",", "True", ")", "# corner cell", "\n", "for", "i", "in", "range", "(", "columns", ")", ":", "\n", "        ", "h", ".", "tableData", "(", "None", ",", "False", ")", "\n", "h", ".", "span", "(", "str", "(", "i", ")", ",", "\"font-size:smaller;font-weight:bold\"", ")", "\n", "h", ".", "closeElement", "(", ")", "# tableData", "\n", "", "h", ".", "closeElement", "(", ")", "# title row", "\n", "\n", "for", "i", "in", "range", "(", "rows", ")", ":", "\n", "        ", "h", ".", "tableRow", "(", ")", "\n", "h", ".", "tableData", "(", "None", ",", "False", ")", "\n", "h", ".", "span", "(", "str", "(", "i", ")", ",", "\"font-size:smaller;font-weight:bold\"", ")", "\n", "h", ".", "closeElement", "(", ")", "# tableData", "\n", "for", "j", "in", "range", "(", "columns", ")", ":", "\n", "            ", "h", ".", "tableData", "(", "None", ",", "False", ")", "\n", "if", "matrix", "[", "i", ",", "j", "]", "!=", "0.0", ":", "\n", "                ", "style", "=", "\"font-size:smaller;background-color:\"", "+", "getColorFromBRGSpectrum", "(", "matrix", "[", "i", ",", "j", "]", ")", "#00FF00\"", "\n", "h", ".", "span", "(", "str", "(", "matrix", "[", "i", ",", "j", "]", ")", "[", "0", ":", "4", "]", ",", "style", ")", "\n", "", "else", ":", "\n", "                ", "style", "=", "\"font-size:smaller\"", "\n", "h", ".", "span", "(", "\"0\"", ",", "style", ")", "\n", "", "h", ".", "closeElement", "(", ")", "# tableData", "\n", "", "h", ".", "closeElement", "(", ")", "# tableRow", "\n", "\n", "", "h", ".", "closeElement", "(", ")", "# table", "\n", "\n", "h", ".", "header", "(", "\"Legend\"", ",", "4", ")", "\n", "h", ".", "table", "(", "1", ")", "\n", "h", ".", "tableRow", "(", ")", "\n", "h", ".", "tableData", "(", "None", ",", "False", ")", "\n", "h", ".", "span", "(", "\"0.0\"", ",", "\"font-size:smaller\"", ")", "\n", "h", ".", "closeElement", "(", ")", "# tableData", "\n", "i", "=", "0.1", "\n", "while", "i", "<=", "1.0", ":", "\n", "        ", "h", ".", "tableData", "(", "None", ",", "False", ")", "\n", "h", ".", "span", "(", "str", "(", "i", ")", ",", "\"font-size:smaller;background-color:\"", "+", "getColorFromBRGSpectrum", "(", "i", ")", ")", "\n", "h", ".", "closeElement", "(", ")", "# tableData", "\n", "i", "+=", "0.1", "\n", "", "h", ".", "closeElement", "(", ")", "# tableRow", "\n", "h", ".", "closeElement", "(", ")", "# table", "\n", "\n", "if", "labels", "!=", "None", ":", "\n", "        ", "h", ".", "header", "(", "\"Labels\"", ",", "3", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "string", "=", "str", "(", "i", ")", "+", "\": \"", "\n", "first", "=", "True", "\n", "for", "label", "in", "labels", "[", "i", "]", ":", "\n", "                ", "if", "not", "first", ":", "\n", "                    ", "string", "+=", "\", \"", "\n", "", "string", "+=", "label", "\n", "first", "=", "False", "\n", "", "h", ".", "span", "(", "string", ")", "\n", "h", ".", "lineBreak", "(", ")", "\n", "\n", "", "", "h", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.EVEXFeatureBuilder.EVEXFeatureBuilder.__init__": [[9, 17], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "featureSet", ")", ":", "\n", "        ", "\"\"\"\n        This is called, when the ExampleBuilder object is created.\n        \n        @type featureSet: Core.IdSet\n        @param featureSet: The feature ids\n        \"\"\"", "\n", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.EVEXFeatureBuilder.EVEXFeatureBuilder.initSentence": [[18, 30], ["None"], "methods", ["None"], ["", "def", "initSentence", "(", "self", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        This function is called once for each sentence, before any calls to \"buildFeatures\". It\n        should be used to initialize per-sentence data structures.\n        \n        @type sentenceGraph: Core.SentenceGraph\n        @param sentenceGraph: a SentenceGraph object providing access to the aligned semantic and syntactic\n                       information of the sentence. The underlying XML can also be accessed through\n                       this class.\n        \"\"\"", "\n", "### Sentence initialization code here ###", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.EVEXFeatureBuilder.EVEXFeatureBuilder.buildEdgeFeatures": [[31, 56], ["None"], "methods", ["None"], ["", "def", "buildEdgeFeatures", "(", "self", ",", "entity1", ",", "entity2", ",", "token1", ",", "token2", ",", "path", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        This is the main-function for feature generation. It is called once for each \n        directed entity pair in the sentence.\n        \n        For defining features, please use the member function \"setFeature(self, name, value=1)\",\n        derived from the parent class. This ensures features get correctly tagged, if needed.\n        \n        @type entity1: cElementTree.Element\n        @param entity1: First entity of the candidate edge, an Interaction XML \"entity\"-element\n        @type entity2: cElementTree.Element\n        @param entity2: Second entity of the candidate edge, an Interaction XML \"entity\"-element\n        @type token1: cElementTree.Element\n        @param token1: The head token of entity1, an Interaction XML \"token\"-element\n        @type token2: cElementTree.Element\n        @param token2: The head token of entity2, an Interaction XML \"token\"-element\n        @type path: list of cElementTree.Elements (when \"no_path\" style is set, this is always [token1, token2])\n        @param path: the shortest connecting path of tokens (Interaction XML \"token\"-elements)\n        @type sentenceGraph: Core.SentenceGraph\n        @param sentenceGraph: a SentenceGraph object providing access to the aligned semantic and syntactic\n                       information of the sentence. The underlying XML can also be accessed through\n                       this class.\n        \"\"\"", "\n", "### Feature generation code here ###", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.__init__": [[42, 44], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "featureSet", ")", ":", "\n", "        ", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ")", "\n", "#self.noAnnType = False", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findAminoAcid": [[48, 63], ["string.lower.lower.lower", "string.lower.lower.find", "string.lower.lower.find", "string[].isalpha", "len", "string[].isalpha"], "methods", ["None"], ["", "def", "findAminoAcid", "(", "self", ",", "string", ")", ":", "\n", "        ", "global", "aminoAcids", "\n", "\n", "string", "=", "string", ".", "lower", "(", ")", "\n", "for", "aa", "in", "aminoAcids", ":", "\n", "            ", "word", "=", "string", ".", "find", "(", "aa", "[", "0", "]", ")", "\n", "if", "word", "!=", "-", "1", ":", "\n", "                ", "return", "word", ",", "aa", "\n", "", "else", ":", "\n", "                ", "tlc", "=", "string", ".", "find", "(", "aa", "[", "1", "]", ")", "# three letter code", "\n", "if", "tlc", "!=", "-", "1", ":", "\n", "# Three letter code must not be a part of a word (where it could be just a substring)", "\n", "                    ", "if", "(", "tlc", "==", "0", "or", "not", "string", "[", "tlc", "-", "1", "]", ".", "isalpha", "(", ")", ")", "and", "(", "tlc", "+", "3", ">=", "len", "(", "string", ")", "or", "not", "string", "[", "tlc", "+", "3", "]", ".", "isalpha", "(", ")", ")", ":", "\n", "                        ", "return", "tlc", ",", "aa", "\n", "", "", "", "", "return", "-", "1", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.buildAllFeatures": [[64, 73], ["token.get().lower", "RELFeatureBuilder.RELFeatureBuilder.buildAminoAcidFeatures", "RELFeatureBuilder.RELFeatureBuilder.buildDNAFeatures", "RELFeatureBuilder.RELFeatureBuilder.buildSubstringFeatures", "RELFeatureBuilder.RELFeatureBuilder.buildRangeFeatures", "RELFeatureBuilder.RELFeatureBuilder.buildKnownWordFeatures", "token.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.buildAminoAcidFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.buildDNAFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildSubstringFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.buildRangeFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.buildKnownWordFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "buildAllFeatures", "(", "self", ",", "tokens", ",", "tokenIndex", ")", ":", "\n", "        ", "token", "=", "tokens", "[", "tokenIndex", "]", "\n", "tokText", "=", "token", ".", "get", "(", "\"text\"", ")", ".", "lower", "(", ")", "\n", "\n", "self", ".", "buildAminoAcidFeatures", "(", "tokText", ")", "\n", "self", ".", "buildDNAFeatures", "(", "tokText", ")", "\n", "self", ".", "buildSubstringFeatures", "(", "tokens", ",", "tokenIndex", ")", "\n", "self", ".", "buildRangeFeatures", "(", "tokens", ",", "tokenIndex", ")", "\n", "self", ".", "buildKnownWordFeatures", "(", "tokText", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.buildAminoAcidFeatures": [[74, 79], ["RELFeatureBuilder.RELFeatureBuilder.findAminoAcid", "RELFeatureBuilder.RELFeatureBuilder.setFeature", "RELFeatureBuilder.RELFeatureBuilder.setFeature"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findAminoAcid", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "def", "buildAminoAcidFeatures", "(", "self", ",", "string", ")", ":", "\n", "        ", "index", ",", "aa", "=", "self", ".", "findAminoAcid", "(", "string", ")", "\n", "if", "aa", "!=", "None", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"RELaminoacid_string\"", ")", "\n", "self", ".", "setFeature", "(", "\"RELaminoacid_\"", "+", "aa", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring": [[80, 90], ["string.find", "RELFeatureBuilder.RELFeatureBuilder.setFeature", "len", "RELFeatureBuilder.RELFeatureBuilder.setFeature", "RELFeatureBuilder.RELFeatureBuilder.setFeature", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "", "def", "findSubstring", "(", "self", ",", "string", ",", "substring", ",", "tag", "=", "None", ")", ":", "\n", "        ", "if", "tag", "==", "None", ":", "\n", "            ", "tag", "=", "substring", "\n", "", "index", "=", "string", ".", "find", "(", "substring", ")", "\n", "if", "index", "!=", "-", "1", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"RELsubstring_\"", "+", "tag", ")", "\n", "if", "index", "+", "len", "(", "substring", ")", "==", "len", "(", "string", ")", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"RELsubstring_terminal_\"", "+", "tag", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"RELsubstring_nonterminal_\"", "+", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.buildSubstringFeatures": [[91, 118], ["string.lower().replace().replace.lower().replace().replace.lower().replace().replace", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "RELFeatureBuilder.RELFeatureBuilder.findSubstring", "t.get", "string.lower().replace().replace.lower().replace().replace.lower().replace", "string.lower().replace().replace.lower().replace().replace.lower"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.findSubstring", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "def", "buildSubstringFeatures", "(", "self", ",", "tokens", ",", "tokenIndex", ")", ":", "\n", "        ", "string", "=", "\"\"", "\n", "for", "t", "in", "tokens", "[", "tokenIndex", "-", "6", ":", "tokenIndex", "]", ":", "\n", "# TODO the actual token does not seem to be included", "\n", "            ", "string", "+=", "t", ".", "get", "(", "\"text\"", ")", "\n", "", "string", "=", "string", ".", "lower", "(", ")", ".", "replace", "(", "\"-\"", ",", "\"\"", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "# nfkb", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"nfkappab\"", ",", "\"nfkb\"", ")", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"nfkb\"", ")", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"nfkappab\"", ",", "\"complex\"", ")", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"nfkb\"", ",", "\"complex\"", ")", "\n", "# kappa-b", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"kappab\"", ")", "\n", "# ap-1", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"ap1\"", ")", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"activatingprotein1\"", ",", "\"ap1\"", ")", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"ap1\"", ",", "\"complex\"", ")", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"activatingprotein1\"", ",", "\"complex\"", ")", "\n", "# proteasome", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"proteasome\"", ")", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"proteasome\"", ",", "\"complex\"", ")", "\n", "# base pairs", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"bp\"", ",", "\"bp\"", ")", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"basepair\"", ",", "\"bp\"", ")", "\n", "# primes", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"5&apos;\"", ",", "\"5prime\"", ")", "\n", "self", ".", "findSubstring", "(", "string", ",", "\"3&apos;\"", ",", "\"3prime\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.buildDNAFeatures": [[119, 124], ["RELFeatureBuilder.RELFeatureBuilder.setFeature"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "def", "buildDNAFeatures", "(", "self", ",", "string", ")", ":", "\n", "        ", "for", "letter", "in", "string", ":", "\n", "            ", "if", "letter", "not", "in", "[", "\"a\"", ",", "\"g\"", ",", "\"t\"", ",", "\"c\"", "]", ":", "\n", "                ", "return", "\n", "", "", "self", ".", "setFeature", "(", "\"RELDNA_sequence\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.buildRangeFeatures": [[125, 136], ["tokens[].get().lower", "tokens[].get", "tokens[].get", "tokens[].get.isdigit", "tokens[].get.isdigit", "RELFeatureBuilder.RELFeatureBuilder.setFeature", "tokens[].get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "buildRangeFeatures", "(", "self", ",", "tokens", ",", "tokenIndex", ")", ":", "\n", "        ", "if", "tokenIndex", ">", "1", ":", "\n", "            ", "if", "tokens", "[", "tokenIndex", "-", "1", "]", ".", "get", "(", "\"text\"", ")", ".", "lower", "(", ")", "in", "[", "\"to\"", ",", "\"and\"", ",", "\"-\"", "]", ":", "\n", "                ", "t1Text", "=", "tokens", "[", "tokenIndex", "-", "2", "]", ".", "get", "(", "\"text\"", ")", "\n", "if", "t1Text", "[", "0", "]", "==", "\"-\"", "or", "t1Text", "[", "0", "]", "==", "\"+\"", ":", "\n", "                    ", "t1Text", "=", "t1Text", "[", "1", ":", "]", "\n", "", "t2Text", "=", "tokens", "[", "tokenIndex", "]", ".", "get", "(", "\"text\"", ")", "\n", "if", "t2Text", "[", "0", "]", "==", "\"-\"", "or", "t2Text", "[", "0", "]", "==", "\"+\"", ":", "\n", "                    ", "t2Text", "=", "t2Text", "[", "1", ":", "]", "\n", "", "if", "t1Text", ".", "isdigit", "(", ")", "and", "t2Text", ".", "isdigit", "(", ")", ":", "\n", "                    ", "self", ".", "setFeature", "(", "\"RELnumeric_range\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.RELFeatureBuilder.RELFeatureBuilder.buildKnownWordFeatures": [[137, 150], ["string.lower.lower.lower", "RELFeatureBuilder.RELFeatureBuilder.setFeature", "RELFeatureBuilder.RELFeatureBuilder.setFeature"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "", "", "", "def", "buildKnownWordFeatures", "(", "self", ",", "string", ")", ":", "\n", "        ", "global", "subcomponent", ",", "supergroup", "\n", "\n", "string", "=", "string", ".", "lower", "(", ")", "\n", "\n", "if", "string", "[", "-", "1", "]", "==", "\"s\"", ":", "\n", "            ", "singular", "=", "string", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "singular", "=", "None", "\n", "", "if", "string", "in", "subcomponent", "or", "singular", "in", "subcomponent", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"RELknown_subcomponent\"", ")", "\n", "", "if", "string", "in", "supergroup", "or", "singular", "in", "supergroup", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"RELknown_supergroup\"", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.WordVectorFeatureBuilder.WordVectorFeatureBuilder.__init__": [[8, 11], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__", "Utils.Libraries.wvlib_light.lwvlib.WV.load"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.load"], ["    ", "def", "__init__", "(", "self", ",", "featureSet", ",", "style", "=", "None", ")", ":", "\n", "        ", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ",", "style", ")", "\n", "self", ".", "model", "=", "WV", ".", "load", "(", "Settings", ".", "W2VFILE", ",", "100000", ",", "10000000", ")", "#10000, 500000)", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.WordVectorFeatureBuilder.WordVectorFeatureBuilder.buildFeatures": [[12, 19], ["WordVectorFeatureBuilder.WordVectorFeatureBuilder.model.w_to_normv", "token.get().lower", "range", "WordVectorFeatureBuilder.WordVectorFeatureBuilder.setFeature", "len", "WordVectorFeatureBuilder.WordVectorFeatureBuilder.setFeature", "token.get", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.w_to_normv", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "buildFeatures", "(", "self", ",", "token", ")", ":", "\n", "        ", "weights", "=", "self", ".", "model", ".", "w_to_normv", "(", "token", ".", "get", "(", "\"text\"", ")", ".", "lower", "(", ")", ")", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "weights", ")", ")", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"W2V_\"", "+", "str", "(", "i", ")", ",", "weights", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"W2V_None\"", ",", "1", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.__init__": [[65, 105], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__", "BacteriaRenamingFeatureBuilder.readBacsu", "BacteriaRenamingFeatureBuilder.readSubtiwiki", "sorted", "sorted", "hasattr", "BacteriaRenamingFeatureBuilder.installRENData", "os.path.join", "os.path.join", "list", "set", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.bacsu.has_key", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.subti.has_key", "list", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.any[].sort", "list", "set", "set", "set", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.bacsu.has_key", "set", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.subti.has_key", "list", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.all[].sort", "set", "set", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.any[].add", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.any[].add", "set.add", "set.add", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.all[].add", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.bacsu.keys", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.subti.keys", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.bacsu.keys", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.subti.keys"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.readBacsu", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.readSubtiwiki", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.installRENData", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["    ", "def", "__init__", "(", "self", ",", "featureSet", ")", ":", "\n", "        ", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ")", "\n", "#self.bacsu = readBacsu(os.path.expanduser(\"~/data/BioNLP11SharedTask/supporting-tasks/bacsu-modified.txt\"))", "\n", "#self.subti = readSubtiwiki(os.path.expanduser(\"~/data/BioNLP11SharedTask/supporting-tasks/Subtiwiki-Synonyms.csv\"))", "\n", "#self.subti = readSubtiwiki(os.path.expanduser(\"~/cvs_checkout/JariSandbox/Wiki/subtiwiki/Subtiwiki-Synonyms.csv\"))", "\n", "if", "not", "hasattr", "(", "Settings", ",", "\"TEES_RESOURCES\"", ")", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"TEES example builder data files not installed, installing now\"", "\n", "installRENData", "(", "updateLocalSettings", "=", "True", ")", "\n", "", "self", ".", "bacsu", "=", "readBacsu", "(", "os", ".", "path", ".", "join", "(", "Settings", ".", "TEES_RESOURCES", ",", "\"bacsu-modified.txt\"", ")", ")", "\n", "self", ".", "subti", "=", "readSubtiwiki", "(", "os", ".", "path", ".", "join", "(", "Settings", ".", "TEES_RESOURCES", ",", "\"Subtiwiki-Synonyms.csv\"", ")", ")", "\n", "# OR the dictionaries", "\n", "self", ".", "any", "=", "{", "}", "\n", "for", "key", "in", "sorted", "(", "list", "(", "set", "(", "self", ".", "bacsu", ".", "keys", "(", ")", "+", "self", ".", "subti", ".", "keys", "(", ")", ")", ")", ")", ":", "\n", "            ", "self", ".", "any", "[", "key", "]", "=", "set", "(", ")", "\n", "if", "self", ".", "bacsu", ".", "has_key", "(", "key", ")", ":", "\n", "                ", "for", "value", "in", "self", ".", "bacsu", "[", "key", "]", ":", "\n", "                    ", "self", ".", "any", "[", "key", "]", ".", "add", "(", "value", ")", "\n", "", "", "if", "self", ".", "subti", ".", "has_key", "(", "key", ")", ":", "\n", "                ", "for", "value", "in", "self", ".", "subti", "[", "key", "]", ":", "\n", "                    ", "self", ".", "any", "[", "key", "]", ".", "add", "(", "value", ")", "\n", "", "", "self", ".", "any", "[", "key", "]", "=", "list", "(", "self", ".", "any", "[", "key", "]", ")", "\n", "self", ".", "any", "[", "key", "]", ".", "sort", "(", ")", "\n", "# AND the dictionaries", "\n", "", "self", ".", "all", "=", "{", "}", "\n", "for", "key", "in", "sorted", "(", "list", "(", "set", "(", "self", ".", "bacsu", ".", "keys", "(", ")", "+", "self", ".", "subti", ".", "keys", "(", ")", ")", ")", ")", ":", "\n", "            ", "self", ".", "all", "[", "key", "]", "=", "set", "(", ")", "\n", "allSynonyms", "=", "set", "(", ")", "\n", "bacsuSet", "=", "set", "(", ")", "\n", "if", "self", ".", "bacsu", ".", "has_key", "(", "key", ")", ":", "\n", "                ", "bacsuSet", "=", "self", ".", "bacsu", "[", "key", "]", "\n", "for", "x", "in", "bacsuSet", ":", "allSynonyms", ".", "add", "(", "x", ")", "\n", "", "subtiSet", "=", "set", "(", ")", "\n", "if", "self", ".", "subti", ".", "has_key", "(", "key", ")", ":", "\n", "                ", "subtiSet", "=", "self", ".", "subti", "[", "key", "]", "\n", "for", "x", "in", "subtiSet", ":", "allSynonyms", ".", "add", "(", "x", ")", "\n", "", "for", "synonym", "in", "allSynonyms", ":", "\n", "                ", "if", "synonym", "in", "bacsuSet", "and", "synonym", "in", "subtiSet", ":", "\n", "                    ", "self", ".", "all", "[", "key", "]", ".", "add", "(", "synonym", ")", "\n", "", "", "self", ".", "all", "[", "key", "]", "=", "list", "(", "self", ".", "all", "[", "key", "]", ")", "\n", "self", ".", "all", "[", "key", "]", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildPairFeatures": [[106, 111], ["BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildPairFeaturesDict", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildPairFeaturesDict", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildPairFeaturesDict", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildPairFeaturesDict"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildPairFeaturesDict", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildPairFeaturesDict", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildPairFeaturesDict", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildPairFeaturesDict"], ["", "", "def", "buildPairFeatures", "(", "self", ",", "e1", ",", "e2", ")", ":", "\n", "        ", "self", ".", "buildPairFeaturesDict", "(", "e1", ",", "e2", ",", "self", ".", "bacsu", ",", "\"bacsu\"", ")", "\n", "self", ".", "buildPairFeaturesDict", "(", "e1", ",", "e2", ",", "self", ".", "subti", ",", "\"subti\"", ")", "\n", "self", ".", "buildPairFeaturesDict", "(", "e1", ",", "e2", ",", "self", ".", "any", ",", "\"any\"", ")", "\n", "self", ".", "buildPairFeaturesDict", "(", "e1", ",", "e2", ",", "self", ".", "all", ",", "\"all\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildPairFeaturesDict": [[112, 120], ["pair[].get().strip().lower", "pair[].get().strip().lower", "synDict.has_key", "pair[].get().strip", "pair[].get().strip", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.setFeature", "pair[].get", "pair[].get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "buildPairFeaturesDict", "(", "self", ",", "e1", ",", "e2", ",", "synDict", ",", "synTag", ")", ":", "\n", "# build in both directions", "\n", "        ", "for", "tag", ",", "pair", "in", "(", "(", "\"frw_\"", ",", "(", "e1", ",", "e2", ")", ")", ",", "(", "\"rev_\"", ",", "(", "e2", ",", "e1", ")", ")", ")", ":", "\n", "            ", "e1Text", "=", "pair", "[", "0", "]", ".", "get", "(", "\"text\"", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "e2Text", "=", "pair", "[", "1", "]", ".", "get", "(", "\"text\"", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "if", "synDict", ".", "has_key", "(", "e1Text", ")", ":", "\n", "                ", "if", "e2Text", "in", "synDict", "[", "e1Text", "]", ":", "\n", "                    ", "self", ".", "setFeature", "(", "tag", "+", "synTag", "+", "\"_synonym\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.buildSubstringFeatures": [[121, 138], ["e1.get().strip().lower", "e2.get().strip().lower", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.setFeature", "BacteriaRenamingFeatureBuilder.BacteriaRenamingFeatureBuilder.setFeature", "e1.get().strip", "e2.get().strip", "e1.get", "e2.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "", "def", "buildSubstringFeatures", "(", "self", ",", "e1", ",", "e2", ")", ":", "\n", "        ", "e1Text", "=", "e1", ".", "get", "(", "\"text\"", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "e2Text", "=", "e2", ".", "get", "(", "\"text\"", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "if", "e1Text", "!=", "\"\"", ":", "\n", "            ", "e1FirstThreeLetters", "=", "e1Text", "[", "0", ":", "3", "]", "\n", "e1LastLetter", "=", "e1Text", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "e1FirstThreeLetters", "=", "\"NONE\"", "\n", "e1LastLetter", "=", "\"NONE\"", "\n", "", "if", "e2Text", "!=", "\"\"", ":", "\n", "            ", "e2FirstThreeLetters", "=", "e2Text", "[", "0", ":", "3", "]", "\n", "e2LastLetter", "=", "e2Text", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "e2FirstThreeLetters", "=", "\"NONE\"", "\n", "e2LastLetter", "=", "\"NONE\"", "\n", "", "self", ".", "setFeature", "(", "\"REN_subpair_f3_\"", "+", "e1FirstThreeLetters", "+", "\"_\"", "+", "e2FirstThreeLetters", ")", "\n", "self", ".", "setFeature", "(", "\"REN_subpair_l1_\"", "+", "e1LastLetter", "+", "\"_\"", "+", "e2LastLetter", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.readBacsu": [[13, 33], ["open", "set", "open.close", "line.split", "name.lower.replace", "name.lower.lower", "synList.append", "synDict[].extend"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["def", "readBacsu", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ")", "\n", "synDict", "=", "{", "}", "\n", "lowerCased", "=", "set", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "if", "line", "[", "0", ":", "3", "]", "!=", "\"BSU\"", ":", "\n", "            ", "continue", "\n", "", "synSplits", "=", "line", ".", "split", "(", ")", "[", "4", ":", "]", "\n", "synList", "=", "[", "]", "\n", "for", "name", "in", "synSplits", ":", "\n", "            ", "name", "=", "name", ".", "replace", "(", "\";\"", ",", "\"\"", ")", "\n", "name", "=", "name", ".", "lower", "(", ")", "\n", "synList", ".", "append", "(", "name", ")", "\n", "", "if", "not", "synList", "[", "0", "]", "in", "synDict", ":", "\n", "            ", "synDict", "[", "synList", "[", "0", "]", "]", "=", "synList", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning,\"", ",", "synList", "[", "0", "]", ",", "\"already a primary name\"", "\n", "synDict", "[", "synList", "[", "0", "]", "]", ".", "extend", "(", "synList", "[", "1", ":", "]", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "return", "synDict", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.readSubtiwiki": [[36, 52], ["open", "set", "open.close", "line.strip.strip", "line.strip.split", "range", "len", "synList[].lower", "synDict[].extend"], "function", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.open", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETWriter.close"], ["", "def", "readSubtiwiki", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ")", "\n", "synDict", "=", "{", "}", "\n", "lowerCased", "=", "set", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "synList", "=", "line", ".", "split", "(", "\",\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "synList", ")", ")", ":", "\n", "            ", "synList", "[", "i", "]", "=", "synList", "[", "i", "]", ".", "lower", "(", ")", "\n", "", "if", "not", "synList", "[", "0", "]", "in", "synDict", ":", "\n", "            ", "synDict", "[", "synList", "[", "0", "]", "]", "=", "synList", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning,\"", ",", "synList", "[", "0", "]", ",", "\"already a primary name\"", "\n", "synDict", "[", "synList", "[", "0", "]", "]", ".", "extend", "(", "synList", "[", "1", ":", "]", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "return", "synDict", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.BacteriaRenamingFeatureBuilder.installRENData": [[53, 62], ["Utils.Download.downloadAndExtract", "Utils.Download.downloadAndExtract", "Utils.setLocal", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "installRENData", "(", "destPath", "=", "None", ",", "downloadPath", "=", "None", ",", "redownload", "=", "False", ",", "updateLocalSettings", "=", "False", ")", ":", "\n", "    ", "print", ">>", "sys", ".", "stderr", ",", "\"---------------\"", ",", "\"Downloading TEES data files for REN\"", ",", "\"---------------\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"These files are derived from UniProt bacsu and SubtiWiki\"", "\n", "if", "destPath", "==", "None", ":", "\n", "        ", "destPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"resources\"", ")", "\n", "", "if", "downloadPath", "==", "None", ":", "\n", "        ", "downloadPath", "=", "os", ".", "path", ".", "join", "(", "Settings", ".", "DATAPATH", ",", "\"resources/download\"", ")", "\n", "", "Utils", ".", "Download", ".", "downloadAndExtract", "(", "Settings", ".", "URL", "[", "\"TEES_RESOURCES\"", "]", ",", "destPath", ",", "downloadPath", ",", "redownload", "=", "redownload", ")", "\n", "Settings", ".", "setLocal", "(", "\"TEES_RESOURCES\"", ",", "destPath", ",", "updateLocalSettings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.__init__": [[16, 33], ["set"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "featureSet", ",", "style", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        @type featureSet: IdSet\n        @param featureSet: feature ids\n        \"\"\"", "\n", "self", ".", "featureSet", "=", "featureSet", "# feature ids", "\n", "self", ".", "features", "=", "None", "# current feature vector", "\n", "self", ".", "entity1", "=", "None", "# an entity node for which features are built", "\n", "self", ".", "entity2", "=", "None", "# another entity node for pairwise examples such as edges", "\n", "self", ".", "noAnnType", "=", "False", "# do not use annotated entity types for building features", "\n", "self", ".", "filterAnnTypes", "=", "set", "(", ")", "# ignore these entity types", "\n", "self", ".", "ontologyFeatureBuilder", "=", "None", "\n", "self", ".", "maximum", "=", "False", "# produce maximum number of features", "\n", "self", ".", "style", "=", "style", "\n", "\n", "self", ".", "maskNamedEntities", "=", "True", "# named entity text strings are replaced with NAMED_ENT", "\n", "self", ".", "tag", "=", "\"\"", "# a prefix that is added to each feature name", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setTag": [[34, 36], ["None"], "methods", ["None"], ["", "def", "setTag", "(", "self", ",", "tag", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "tag", "=", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeatureVector": [[37, 52], ["None"], "methods", ["None"], ["", "def", "setFeatureVector", "(", "self", ",", "features", ",", "entity1", "=", "None", ",", "entity2", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        When the feature builder builds features, they are put to this feature vector.\n        \n        @type features: dictionary\n        @param features: a reference to the feature vector\n        @type entity1: cElementTree.Element\n        @param entity1: an entity used by trigger or edge feature builders   \n        @type entity2: cElementTree.Element\n        @param entity2: an entity used by trigger or edge feature builders   \n        \"\"\"", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "entity1", "=", "entity1", "\n", "self", ".", "entity2", "=", "entity2", "\n", "self", ".", "tokenFeatures", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature": [[53, 62], ["FeatureBuilder.FeatureBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "def", "setFeature", "(", "self", ",", "name", ",", "value", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Add a feature to the feature vector. If the feature already exists, its current\n        value is replaced with the new value. All features are prefixed with FeatureBuilder.tag.\n        \n        @type name: str\n        @type value: float\n        \"\"\"", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "self", ".", "tag", "+", "name", ")", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.normalizeFeatureVector": [[63, 76], ["FeatureBuilder.FeatureBuilder.features.values", "FeatureBuilder.FeatureBuilder.features.iteritems", "abs", "float"], "methods", ["None"], ["", "def", "normalizeFeatureVector", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Some machine learning tasks require feature values to be normalized to range [0,1]. The range is\n        defined as the difference of the largest and smallest feature value in the current feature vector.\n        If this method is used, it should be called as the last step after generating all features.\n        \"\"\"", "\n", "# Normalize features", "\n", "total", "=", "0.0", "\n", "for", "v", "in", "self", ".", "features", ".", "values", "(", ")", ":", "total", "+=", "abs", "(", "v", ")", "\n", "if", "total", "==", "0.0", ":", "\n", "            ", "total", "=", "1.0", "\n", "", "for", "k", ",", "v", "in", "self", ".", "features", ".", "iteritems", "(", ")", ":", "\n", "            ", "self", ".", "features", "[", "k", "]", "=", "float", "(", "v", ")", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getMetaMapFeatures": [[77, 101], ["sentenceGraph.sentenceElement.find", "sentenceGraph.sentenceElement.find.find", "Utils.charOffsetToSingleTuple", "Utils.charOffsetToSingleTuple", "set", "sentenceGraph.sentenceElement.find.find.findall", "token.get", "Utils.charOffsetToSingleTuple", "Utils.charOffsetToSingleTuple", "Utils.overlap", "Utils.overlap", "phrase.get", "sorted", "attr.keys", "attr[].split", "attrValue.replace"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "getMetaMapFeatures", "(", "self", ",", "token", ",", "sentenceGraph", ",", "features", ")", ":", "\n", "        ", "analyses", "=", "sentenceGraph", ".", "sentenceElement", ".", "find", "(", "\"analyses\"", ")", "\n", "if", "analyses", "==", "None", ":", "\n", "            ", "return", "\n", "", "metamap", "=", "analyses", ".", "find", "(", "\"metamap\"", ")", "\n", "if", "metamap", "==", "None", ":", "\n", "            ", "return", "\n", "", "tokenOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "token", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "skipAttr", "=", "set", "(", "[", "\"charOffset\"", ",", "\"text\"", "]", ")", "\n", "for", "phrase", "in", "metamap", ".", "findall", "(", "\"phrase\"", ")", ":", "\n", "            ", "phraseOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "phrase", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "if", "Range", ".", "overlap", "(", "tokenOffset", ",", "phraseOffset", ")", ":", "\n", "                ", "attr", "=", "phrase", ".", "attrib", "\n", "attrNames", "=", "sorted", "(", "attr", ".", "keys", "(", ")", ")", "\n", "for", "attrName", "in", "attrNames", ":", "\n", "                    ", "if", "attrName", "in", "skipAttr", ":", "\n", "                        ", "continue", "\n", "", "elif", "attrName", "==", "\"score\"", ":", "\n", "                        ", "continue", "\n", "#features[\"_metamap_score\"] = 0.001 * abs(int(attr[attrName]))", "\n", "", "else", ":", "\n", "                        ", "attrValues", "=", "attr", "[", "attrName", "]", ".", "split", "(", "\",\"", ")", "\n", "for", "attrValue", "in", "attrValues", ":", "\n", "                            ", "features", "[", "\"_metamap_\"", "+", "attrName", "+", "\"_\"", "+", "attrValue", ".", "replace", "(", "\" \"", ",", "\"-\"", ")", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getTokenFeatures": [[102, 155], ["FeatureBuilder.FeatureBuilder.tokenFeatures.has_key", "str", "featureList.append", "token.get", "featureList.append", "FeatureBuilder.FeatureBuilder.getTokenAnnotatedType", "featureList.append", "FeatureBuilder.FeatureBuilder.getMetaMapFeatures", "featureList.extend", "str", "featureList.append", "token.get.split", "FeatureBuilder.FeatureBuilder.remove", "featureList.append", "sorted", "str", "sentenceGraph.getTokenText", "token.get.find", "featureList.append", "featureList.extend", "Utils.stem", "Utils.stem", "metamapFeatureDict.keys", "str", "token.get", "FeatureBuilder.FeatureBuilder.ontologyFeatureBuilder.getParents", "sentenceGraph.getTokenText", "token.get", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getTokenAnnotatedType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getMetaMapFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.OntoBiotopeFeatureBuilder.OntoBiotopeFeatureBuilder.getParents", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "", "", "", "def", "getTokenFeatures", "(", "self", ",", "token", ",", "sentenceGraph", ",", "text", "=", "True", ",", "POS", "=", "True", ",", "annotatedType", "=", "True", ",", "stem", "=", "False", ",", "ontology", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Token features are features describing an isolated word token. These subfeatures are often merged into\n        such features like n-grams. This method produces and caches a set of feature names for a token in\n        the sentenceGraph sentence. The various flags can be used to choose which attributes will be included in the\n        feature name list.\n        \n        @type token: cElementTree.Element\n        @param token: a word token \n        @type sentenceGraph: SentenceGraph\n        @param sentenceGraph: the sentence to which the token belongs\n        @type text: boolean\n        @type POS: boolean\n        @type annotatedType: boolean\n        @type stem: boolean\n        @type ontology: boolean         \n        \"\"\"", "\n", "callId", "=", "token", ".", "get", "(", "\"id\"", ")", "+", "str", "(", "text", ")", "+", "str", "(", "POS", ")", "+", "str", "(", "annotatedType", ")", "+", "str", "(", "stem", ")", "+", "str", "(", "ontology", ")", "\n", "if", "self", ".", "tokenFeatures", ".", "has_key", "(", "callId", ")", ":", "\n", "            ", "return", "self", ".", "tokenFeatures", "[", "callId", "]", "\n", "\n", "", "featureList", "=", "[", "]", "\n", "if", "text", ":", "\n", "            ", "featureList", ".", "append", "(", "\"txt_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "token", ")", ")", "\n", "if", "(", "not", "self", ".", "maskNamedEntities", ")", "and", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", ":", "\n", "                ", "featureList", ".", "append", "(", "\"txt_\"", "+", "token", ".", "get", "(", "\"text\"", ")", ")", "\n", "", "", "if", "POS", ":", "\n", "            ", "pos", "=", "token", ".", "get", "(", "\"POS\"", ")", "\n", "if", "pos", ".", "find", "(", "\"_\"", ")", "!=", "None", "and", "self", ".", "maximum", ":", "\n", "                ", "for", "split", "in", "pos", ".", "split", "(", "\"_\"", ")", ":", "\n", "                    ", "featureList", ".", "append", "(", "\"POS_\"", "+", "split", ")", "\n", "", "", "featureList", ".", "append", "(", "\"POS_\"", "+", "pos", ")", "\n", "#if self.getPOSSuperType(pos) != \"\":", "\n", "#    featureList.append(\"POSX_\"+self.getPOSSuperType(pos))", "\n", "", "if", "annotatedType", "and", "not", "self", ".", "noAnnType", ":", "\n", "            ", "annTypes", "=", "self", ".", "getTokenAnnotatedType", "(", "token", ",", "sentenceGraph", ")", "\n", "if", "\"noAnnType\"", "in", "annTypes", "and", "not", "self", ".", "maximum", ":", "\n", "                ", "annTypes", ".", "remove", "(", "\"noAnnType\"", ")", "\n", "", "for", "annType", "in", "annTypes", ":", "\n", "                ", "featureList", ".", "append", "(", "\"annType_\"", "+", "annType", ")", "\n", "", "if", "ontology", "and", "(", "self", ".", "ontologyFeatureBuilder", "!=", "None", ")", ":", "\n", "                ", "for", "annType", "in", "annTypes", ":", "\n", "                    ", "featureList", ".", "extend", "(", "self", ".", "ontologyFeatureBuilder", ".", "getParents", "(", "annType", ")", ")", "\n", "", "", "", "if", "stem", ":", "\n", "            ", "featureList", ".", "append", "(", "\"stem_\"", "+", "PorterStemmer", ".", "stem", "(", "sentenceGraph", ".", "getTokenText", "(", "token", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "style", "!=", "None", "and", "self", ".", "style", "[", "\"metamap\"", "]", ":", "\n", "            ", "metamapFeatureDict", "=", "{", "}", "\n", "self", ".", "getMetaMapFeatures", "(", "token", ",", "sentenceGraph", ",", "metamapFeatureDict", ")", "\n", "featureList", ".", "extend", "(", "sorted", "(", "metamapFeatureDict", ".", "keys", "(", ")", ")", ")", "\n", "\n", "", "self", ".", "tokenFeatures", "[", "callId", "]", "=", "featureList", "\n", "return", "featureList", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getEntityType": [[156, 162], ["entity.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getEntityType", "(", "self", ",", "entity", ")", ":", "\n", "        ", "eType", "=", "entity", ".", "get", "(", "\"type\"", ")", "\n", "if", "self", ".", "style", "!=", "None", "and", "\"maskTypeAsProtein\"", "in", "self", ".", "style", "and", "self", ".", "style", "[", "\"maskTypeAsProtein\"", "]", "and", "eType", "in", "self", ".", "style", "[", "\"maskTypeAsProtein\"", "]", ":", "\n", "            ", "return", "\"Protein\"", "\n", "", "else", ":", "\n", "            ", "return", "eType", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getTokenAnnotatedType": [[163, 201], ["set", "list", "list.sort", "len", "FeatureBuilder.FeatureBuilder.getEntityType", "list.add", "list.add", "list.add", "list.add", "list.add"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getEntityType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add"], ["", "", "def", "getTokenAnnotatedType", "(", "self", ",", "token", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        Multiple entities may have the same head token. This returns a list of the types of all entities whose\n        head token this token is. If the FeatureBuilder.maximum flag is set, the list is truncated to a length of\n        two, otherwise to a length of one. This is done because when token features (to which the annotated type\n        belongs to) are combined into other features, a large number of annotated type features can lead to an\n        exponential increase in the number of features.\n        \"\"\"", "\n", "if", "len", "(", "sentenceGraph", ".", "tokenIsEntityHead", "[", "token", "]", ")", ">", "0", "and", "not", "self", ".", "noAnnType", ":", "\n", "            ", "annTypes", "=", "set", "(", ")", "\n", "for", "entity", "in", "sentenceGraph", ".", "tokenIsEntityHead", "[", "token", "]", ":", "\n", "                ", "eType", "=", "self", ".", "getEntityType", "(", "entity", ")", "\n", "if", "eType", "!=", "None", "and", "not", "eType", "in", "annTypes", "and", "not", "eType", "in", "self", ".", "filterAnnTypes", ":", "\n", "                    ", "if", "self", ".", "entity1", "==", "None", "and", "self", ".", "entity2", "==", "None", ":", "\n", "                        ", "annTypes", ".", "add", "(", "eType", ")", "\n", "", "else", ":", "\n", "                        ", "if", "self", ".", "maximum", ":", "\n", "                            ", "annTypes", ".", "add", "(", "eType", ")", "\n", "", "if", "self", ".", "entity1", "==", "entity", ":", "\n", "                            ", "if", "not", "self", ".", "maximum", ":", "\n", "                                ", "return", "[", "eType", "]", "\n", "", "else", ":", "\n", "                                ", "annTypes", ".", "add", "(", "\"e1_\"", "+", "eType", ")", "\n", "", "", "elif", "self", ".", "entity2", "==", "entity", ":", "\n", "                            ", "if", "not", "self", ".", "maximum", ":", "\n", "                                ", "return", "[", "eType", "]", "\n", "", "else", ":", "\n", "                                ", "annTypes", ".", "add", "(", "\"e2_\"", "+", "eType", ")", "\n", "", "", "else", ":", "\n", "                            ", "annTypes", ".", "add", "(", "eType", ")", "\n", "", "", "", "", "annTypes", "=", "list", "(", "annTypes", ")", "\n", "annTypes", ".", "sort", "(", ")", "\n", "if", "self", ".", "maximum", ":", "\n", "                ", "return", "annTypes", "[", "0", ":", "2", "]", "\n", "", "else", ":", "\n", "                ", "return", "annTypes", "[", "0", ":", "1", "]", "#annTypes[0:2]", "\n", "", "", "else", ":", "\n", "            ", "return", "[", "\"noAnnType\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getPOSSuperType": [[202, 205], ["None"], "methods", ["None"], ["", "", "def", "getPOSSuperType", "(", "self", ",", "pos", ")", ":", "\n", "        ", "global", "posSuperTypes", "\n", "return", "posSuperTypes", "[", "pos", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TokenFeatureBuilder.TokenFeatureBuilder.__init__": [[5, 7], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "featureSet", ")", ":", "\n", "        ", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TokenFeatureBuilder.TokenFeatureBuilder.buildLinearOrderFeatures": [[8, 27], ["range", "range", "min", "max", "len", "str", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "str", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "sentenceGraph.getTokenText", "sentenceGraph.getTokenText"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText"], ["", "def", "buildLinearOrderFeatures", "(", "self", ",", "tokenIndex", ",", "sentenceGraph", ",", "rangePos", "=", "999", ",", "rangeNeg", "=", "999", ",", "preTag", "=", "\"\"", ")", ":", "\n", "        ", "count", "=", "1", "\n", "for", "i", "in", "range", "(", "tokenIndex", "+", "1", ",", "min", "(", "len", "(", "sentenceGraph", ".", "tokens", ")", ",", "tokenIndex", "+", "rangePos", "+", "1", ")", ")", ":", "\n", "            ", "tag", "=", "preTag", "+", "\"linear_+\"", "+", "str", "(", "count", ")", "+", "\"_\"", "\n", "t", "=", "sentenceGraph", ".", "tokens", "[", "i", "]", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"txt_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "t", ")", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"POS_\"", "+", "t", ".", "attrib", "[", "\"POS\"", "]", ")", "]", "=", "1", "\n", "if", "sentenceGraph", ".", "tokenIsName", "[", "t", "]", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"given\"", ")", "]", "=", "1", "\n", "", "count", "+=", "1", "\n", "", "count", "=", "1", "\n", "for", "i", "in", "range", "(", "tokenIndex", "-", "1", ",", "max", "(", "tokenIndex", "-", "rangeNeg", "-", "1", ",", "-", "1", ")", ",", "-", "1", ")", ":", "\n", "            ", "tag", "=", "preTag", "+", "\"linear_-\"", "+", "str", "(", "count", ")", "+", "\"_\"", "\n", "t", "=", "sentenceGraph", ".", "tokens", "[", "i", "]", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"txt_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "t", ")", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"POS_\"", "+", "t", ".", "attrib", "[", "\"POS\"", "]", ")", "]", "=", "1", "\n", "if", "sentenceGraph", ".", "tokenIsName", "[", "t", "]", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"given\"", ")", "]", "=", "1", "\n", "", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TokenFeatureBuilder.TokenFeatureBuilder.buildContentFeatures": [[28, 52], ["range", "text[].isalpha", "text[].isupper", "len", "text[].isdigit", "text[].isalpha", "text[].isupper", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "text[].lower", "text[].lower", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "", "def", "buildContentFeatures", "(", "self", ",", "tokenIndex", ",", "text", ",", "duplets", "=", "True", ",", "triplets", "=", "True", ")", ":", "\n", "# Content", "\n", "        ", "if", "tokenIndex", ">", "0", "and", "text", "[", "0", "]", ".", "isalpha", "(", ")", "and", "text", "[", "0", "]", ".", "isupper", "(", ")", ":", "\n", "            ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"upper_case_start\"", ")", "]", "=", "1", "\n", "", "for", "j", "in", "range", "(", "len", "(", "text", ")", ")", ":", "\n", "            ", "if", "j", ">", "0", "and", "text", "[", "j", "]", ".", "isalpha", "(", ")", "and", "text", "[", "j", "]", ".", "isupper", "(", ")", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"upper_case_middle\"", ")", "]", "=", "1", "\n", "# numbers and special characters", "\n", "", "if", "text", "[", "j", "]", ".", "isdigit", "(", ")", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_digits\"", ")", "]", "=", "1", "\n", "if", "j", ">", "0", "and", "text", "[", "j", "-", "1", "]", "==", "\"-\"", ":", "\n", "                    ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_hyphenated_digit\"", ")", "]", "=", "1", "\n", "", "", "elif", "text", "[", "j", "]", "==", "\"-\"", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_hyphen\"", ")", "]", "=", "1", "\n", "", "elif", "text", "[", "j", "]", "==", "\"/\"", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_fslash\"", ")", "]", "=", "1", "\n", "", "elif", "text", "[", "j", "]", "==", "\"\\\\\"", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"has_bslash\"", ")", "]", "=", "1", "\n", "# duplets", "\n", "", "if", "j", ">", "0", "and", "duplets", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"dt_\"", "+", "text", "[", "j", "-", "1", ":", "j", "+", "1", "]", ".", "lower", "(", ")", ")", "]", "=", "1", "\n", "# triplets", "\n", "", "if", "j", ">", "1", "and", "triplets", ":", "\n", "                ", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "\"tt_\"", "+", "text", "[", "j", "-", "2", ":", "j", "+", "1", "]", ".", "lower", "(", ")", ")", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TokenFeatureBuilder.TokenFeatureBuilder.buildTokenGrams": [[53, 74], ["range", "range", "sentenceGraph.getTokenText", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId", "TokenFeatureBuilder.TokenFeatureBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "", "", "def", "buildTokenGrams", "(", "self", ",", "startTokenIndex", ",", "endTokenIndex", ",", "sentenceGraph", ",", "tag", "=", "\"\"", ",", "max", "=", "3", ")", ":", "\n", "        ", "tag", "=", "\"lin_\"", "+", "tag", "\n", "for", "i", "in", "range", "(", "startTokenIndex", ",", "endTokenIndex", "+", "1", ")", ":", "\n", "            ", "text", "=", "\"\"", "\n", "POS", "=", "\"\"", "\n", "annType", "=", "\"\"", "\n", "count", "=", "0", "\n", "for", "j", "in", "range", "(", "i", ",", "startTokenIndex", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "if", "count", ">=", "max", ":", "\n", "                    ", "break", "\n", "", "token", "=", "sentenceGraph", ".", "tokens", "[", "j", "]", "\n", "text", "=", "\"_\"", "+", "sentenceGraph", ".", "getTokenText", "(", "token", ")", "+", "text", "\n", "POS", "=", "\"_\"", "+", "token", ".", "attrib", "[", "\"POS\"", "]", "+", "POS", "\n", "if", "sentenceGraph", ".", "tokenIsEntityHead", "[", "token", "]", "!=", "None", ":", "\n", "                    ", "annType", "=", "\"_\"", "+", "sentenceGraph", ".", "tokenIsEntityHead", "[", "token", "]", ".", "attrib", "[", "\"type\"", "]", "+", "annType", "\n", "", "else", ":", "\n", "                    ", "annType", "=", "\"_\"", "+", "\"noAnnType\"", "+", "annType", "\n", "", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"_text\"", "+", "text", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"_POS\"", "+", "POS", ")", "]", "=", "1", "\n", "self", ".", "features", "[", "self", ".", "featureSet", ".", "getId", "(", "tag", "+", "\"_annType\"", "+", "POS", ")", "]", "=", "1", "\n", "count", "+=", "1", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.__init__": [[13, 21], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "featureSet", ")", ":", "\n", "        ", "\"\"\"\n        This is called, when the ExampleBuilder object is created.\n        \n        @type featureSet: Core.IdSet\n        @param featureSet: The feature ids\n        \"\"\"", "\n", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.initSentence": [[22, 34], ["None"], "methods", ["None"], ["", "def", "initSentence", "(", "self", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        This function is called once for each sentence, before any calls to \"buildFeatures\". It\n        should be used to initialize per-sentence data structures.\n        \n        @type sentenceGraph: Core.SentenceGraph\n        @param sentenceGraph: a SentenceGraph object providing access to the aligned semantic and syntactic\n                       information of the sentence. The underlying XML can also be accessed through\n                       this class.\n        \"\"\"", "\n", "### Sentence initialization code here ###", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.buildEdgeFeatures": [[35, 67], ["GiulianoFeatureBuilder.GiulianoFeatureBuilder.getPatterns", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.setFeature", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.setFeature", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.setFeature"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.getPatterns", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "def", "buildEdgeFeatures", "(", "self", ",", "entity1", ",", "entity2", ",", "token1", ",", "token2", ",", "path", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        This is the main-function for feature generation. It is called once for each \n        directed entity pair in the sentence.\n        \n        For defining features, please use the member function \"setFeature(self, name, value=1)\",\n        derived from the parent class. This ensures features get correctly tagged, if needed.\n        \n        @type entity1: cElementTree.Element\n        @param entity1: First entity of the candidate edge, an Interaction XML \"entity\"-element\n        @type entity2: cElementTree.Element\n        @param entity2: Second entity of the candidate edge, an Interaction XML \"entity\"-element\n        @type token1: cElementTree.Element\n        @param token1: The head token of entity1, an Interaction XML \"token\"-element\n        @type token2: cElementTree.Element\n        @param token2: The head token of entity2, an Interaction XML \"token\"-element\n        @type path: list of cElementTree.Elements (when \"no_path\" style is set, this is always [token1, token2])\n        @param path: the shortest connecting path of tokens (Interaction XML \"token\"-elements)\n        @type sentenceGraph: Core.SentenceGraph\n        @param sentenceGraph: a SentenceGraph object providing access to the aligned semantic and syntactic\n                       information of the sentence. The underlying XML can also be accessed through\n                       this class.\n        \"\"\"", "\n", "### Feature generation code here ###", "\n", "self", ".", "sentenceGraph", "=", "sentenceGraph", "\n", "patternForeBetween", ",", "patternBetween", ",", "patternBetweenAfter", "=", "self", ".", "getPatterns", "(", "entity1", ",", "entity2", ")", "\n", "for", "feature", "in", "patternForeBetween", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"pFB_\"", "+", "feature", ",", "patternForeBetween", "[", "feature", "]", ")", "\n", "", "for", "feature", "in", "patternBetween", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"pB_\"", "+", "feature", ",", "patternBetween", "[", "feature", "]", ")", "\n", "", "for", "feature", "in", "patternBetweenAfter", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"pBA_\"", "+", "feature", ",", "patternBetweenAfter", "[", "feature", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.buildTriggerFeatures": [[68, 78], ["GiulianoFeatureBuilder.GiulianoFeatureBuilder.getPatterns", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.setFeature", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.setFeature", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.setFeature"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.getPatterns", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "", "def", "buildTriggerFeatures", "(", "self", ",", "token", ",", "sentenceGraph", ")", ":", "\n", "### Feature generation code here ###", "\n", "        ", "self", ".", "sentenceGraph", "=", "sentenceGraph", "\n", "patternForeBetween", ",", "patternBetween", ",", "patternBetweenAfter", "=", "self", ".", "getPatterns", "(", "token", ",", "token", ")", "\n", "for", "feature", "in", "patternForeBetween", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"pFB_\"", "+", "feature", ",", "patternForeBetween", "[", "feature", "]", ")", "\n", "", "for", "feature", "in", "patternBetween", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"pB_\"", "+", "feature", ",", "patternBetween", "[", "feature", "]", ")", "\n", "", "for", "feature", "in", "patternBetweenAfter", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"pBA_\"", "+", "feature", ",", "patternBetweenAfter", "[", "feature", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.getGlobalContextKernel": [[79, 84], ["GiulianoFeatureBuilder.GiulianoFeatureBuilder.calculateKernel", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.calculateKernel", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.calculateKernel"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.calculateKernel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.calculateKernel", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.calculateKernel"], ["", "", "def", "getGlobalContextKernel", "(", "self", ",", "patterns1", ",", "patterns2", ")", ":", "\n", "        ", "kernelFB", "=", "self", ".", "calculateKernel", "(", "patterns1", "[", "\"Fore-Between\"", "]", ",", "patterns2", "[", "\"Fore-Between\"", "]", ")", "\n", "kernelB", "=", "self", ".", "calculateKernel", "(", "patterns1", "[", "\"Between\"", "]", ",", "patterns2", "[", "\"Between\"", "]", ")", "\n", "kernelBA", "=", "self", ".", "calculateKernel", "(", "patterns1", "[", "\"Between-After\"", "]", ",", "patterns2", "[", "\"Between-After\"", "]", ")", "\n", "return", "kernelFB", "+", "kernelB", "+", "kernelBA", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.getRelativePosition": [[85, 98], ["Utils.charOffsetToSingleTuple", "Utils.overlap", "Utils.overlap", "token.get", "min", "max"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.overlap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getRelativePosition", "(", "self", ",", "entity1Range", ",", "entity2Range", ",", "token", ")", ":", "\n", "        ", "offset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "token", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "if", "Range", ".", "overlap", "(", "entity1Range", ",", "offset", ")", ":", "\n", "            ", "return", "\"Entity1\"", "\n", "", "if", "Range", ".", "overlap", "(", "entity2Range", ",", "offset", ")", ":", "\n", "            ", "return", "\"Entity2\"", "\n", "", "entitiesRange", "=", "(", "min", "(", "entity1Range", "[", "0", "]", ",", "entity2Range", "[", "0", "]", ")", ",", "max", "(", "entity1Range", "[", "1", "]", ",", "entity2Range", "[", "1", "]", ")", ")", "\n", "if", "offset", "[", "1", "]", "<", "entitiesRange", "[", "0", "]", ":", "\n", "            ", "return", "\"Fore\"", "\n", "", "elif", "offset", "[", "1", "]", ">", "entitiesRange", "[", "1", "]", ":", "\n", "            ", "return", "\"After\"", "\n", "", "else", ":", "\n", "            ", "return", "\"Between\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.getPatterns": [[99, 139], ["Utils.charOffsetToSingleTuple", "Utils.charOffsetToSingleTuple", "e1.get", "e2.get", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.getRelativePosition", "token.get", "token.get().lower", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.addToPattern", "token.get", "token.get", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.addToPattern", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.addToPattern", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.addToPattern", "GiulianoFeatureBuilder.GiulianoFeatureBuilder.addToPattern"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.getRelativePosition", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.addToPattern", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.addToPattern", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.addToPattern", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.addToPattern", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.addToPattern"], ["", "", "def", "getPatterns", "(", "self", ",", "e1", ",", "e2", ")", ":", "\n", "        ", "e1Range", "=", "Range", ".", "charOffsetToSingleTuple", "(", "e1", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "e2Range", "=", "Range", ".", "charOffsetToSingleTuple", "(", "e2", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "\n", "tokenPositions", "=", "{", "}", "\n", "for", "token", "in", "self", ".", "sentenceGraph", ".", "tokens", ":", "\n", "            ", "tokenPositions", "[", "token", ".", "get", "(", "\"id\"", ")", "]", "=", "self", ".", "getRelativePosition", "(", "e1Range", ",", "e2Range", ",", "token", ")", "\n", "\n", "", "prevTokenText", "=", "None", "\n", "prevToken2Text", "=", "None", "\n", "prevPosition", "=", "None", "\n", "patternForeBetween", "=", "{", "}", "\n", "patternBetween", "=", "{", "}", "\n", "patternBetweenAfter", "=", "{", "}", "\n", "for", "token", "in", "self", ".", "sentenceGraph", ".", "tokens", ":", "\n", "            ", "if", "self", ".", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "id", "=", "token", ".", "get", "(", "\"id\"", ")", "\n", "text", "=", "token", ".", "get", "(", "\"text\"", ")", ".", "lower", "(", ")", "\n", "\n", "if", "prevPosition", "!=", "tokenPositions", "[", "id", "]", ":", "\n", "                ", "prevTokenText", "=", "None", "\n", "prevToken2Text", "=", "None", "\n", "\n", "", "if", "tokenPositions", "[", "id", "]", "==", "\"Fore\"", ":", "\n", "                ", "self", ".", "addToPattern", "(", "patternForeBetween", ",", "text", ",", "prevTokenText", ",", "prevToken2Text", ")", "\n", "", "elif", "tokenPositions", "[", "id", "]", "==", "\"Between\"", ":", "\n", "                ", "self", ".", "addToPattern", "(", "patternForeBetween", ",", "text", ",", "prevTokenText", ",", "prevToken2Text", ")", "\n", "self", ".", "addToPattern", "(", "patternBetween", ",", "text", ",", "prevTokenText", ",", "prevToken2Text", ")", "\n", "self", ".", "addToPattern", "(", "patternBetweenAfter", ",", "text", ",", "prevTokenText", ",", "prevToken2Text", ")", "\n", "", "elif", "tokenPositions", "[", "id", "]", "==", "\"After\"", ":", "\n", "                ", "self", ".", "addToPattern", "(", "patternBetweenAfter", ",", "text", ",", "prevTokenText", ",", "prevToken2Text", ")", "\n", "\n", "", "prevPosition", "=", "tokenPositions", "[", "id", "]", "\n", "#if tokenPositions[id].find(\"Entity\") != -1:", "\n", "prevToken2Text", "=", "prevTokenText", "\n", "prevTokenText", "=", "text", "\n", "\n", "", "return", "patternForeBetween", ",", "patternBetween", ",", "patternBetweenAfter", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.addToPattern": [[140, 157], ["pattern.has_key", "pattern.has_key", "pattern.has_key"], "methods", ["None"], ["", "def", "addToPattern", "(", "self", ",", "pattern", ",", "tokenText", ",", "prevTokenText", ",", "prevToken2Text", ")", ":", "\n", "        ", "if", "not", "pattern", ".", "has_key", "(", "tokenText", ")", ":", "\n", "            ", "pattern", "[", "tokenText", "]", "=", "0", "\n", "", "pattern", "[", "tokenText", "]", "+=", "1", "\n", "\n", "# Should the n-grams be unordered?", "\n", "if", "prevTokenText", "!=", "None", ":", "\n", "            ", "ngram1", "=", "prevTokenText", "+", "\"_\"", "+", "tokenText", "\n", "if", "not", "pattern", ".", "has_key", "(", "ngram1", ")", ":", "\n", "                ", "pattern", "[", "ngram1", "]", "=", "0", "\n", "", "pattern", "[", "ngram1", "]", "+=", "1", "\n", "\n", "", "if", "prevToken2Text", "!=", "None", ":", "\n", "            ", "ngram2", "=", "prevToken2Text", "+", "\"_\"", "+", "ngram1", "\n", "if", "not", "pattern", ".", "has_key", "(", "ngram2", ")", ":", "\n", "                ", "pattern", "[", "ngram2", "]", "=", "0", "\n", "", "pattern", "[", "ngram2", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.GiulianoFeatureBuilder.GiulianoFeatureBuilder.calculateKernel": [[158, 179], ["pattern1.iteritems", "pattern1.values", "math.sqrt", "pattern2.values", "math.sqrt", "pattern2.has_key"], "methods", ["None"], ["", "", "def", "calculateKernel", "(", "self", ",", "pattern1", ",", "pattern2", ")", ":", "\n", "        ", "dotProduct", "=", "0.0", "\n", "length1", "=", "0.0", "\n", "length2", "=", "0.0", "\n", "# The dotProduct is the numerator", "\n", "for", "k", ",", "v", "in", "pattern1", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "pattern2", ".", "has_key", "(", "k", ")", ":", "\n", "               ", "dotProduct", "+=", "v", "*", "pattern2", "[", "k", "]", "\n", "# Get the length of the first vector", "\n", "", "", "for", "v", "in", "pattern1", ".", "values", "(", ")", ":", "\n", "            ", "length1", "+=", "v", "*", "v", "\n", "", "length1", "=", "math", ".", "sqrt", "(", "length1", ")", "\n", "# Get the length of the second vector", "\n", "for", "v", "in", "pattern2", ".", "values", "(", ")", ":", "\n", "            ", "length2", "+=", "v", "*", "v", "\n", "", "length2", "=", "math", ".", "sqrt", "(", "length2", ")", "\n", "\n", "if", "length1", "==", "0", "or", "length2", "==", "0", ":", "\n", "            ", "return", "0.0", "\n", "", "else", ":", "\n", "            ", "return", "dotProduct", "/", "(", "length1", "*", "length2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.__init__": [[24, 29], ["FeatureBuilder.FeatureBuilder.FeatureBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "featureSet", ",", "style", "=", "None", ")", ":", "\n", "        ", "FeatureBuilder", ".", "__init__", "(", "self", ",", "featureSet", ",", "style", ")", "\n", "self", ".", "noAnnType", "=", "False", "\n", "self", ".", "edgeTypesForFeatures", "=", "[", "]", "\n", "self", ".", "useNonNameEntities", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getMergedEntityType": [[30, 47], ["set", "list", "list.sort", "list.add", "entity.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getMergedEntityType", "(", "self", ",", "entities", ")", ":", "\n", "        ", "\"\"\"\n        If a single token belongs to multiple entities of different types,\n        a new, composite type is defined. This type is the alphabetically\n        ordered types of these entities joined with '---'.\n        \"\"\"", "\n", "types", "=", "set", "(", ")", "\n", "for", "entity", "in", "entities", ":", "\n", "            ", "types", ".", "add", "(", "entity", ".", "get", "(", "\"type\"", ")", ")", "\n", "", "types", "=", "list", "(", "types", ")", "\n", "types", ".", "sort", "(", ")", "\n", "typeString", "=", "\"\"", "\n", "for", "type", "in", "types", ":", "\n", "            ", "if", "typeString", "!=", "\"\"", ":", "\n", "                ", "typeString", "+=", "\"---\"", "\n", "", "typeString", "+=", "type", "\n", "", "return", "typeString", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures": [[48, 77], ["TriggerFeatureBuilder.TriggerFeatureBuilder.tokenFeatures.has_key", "sentenceGraph.getTokenText", "sorted", "features.keys", "token.get", "entity.get", "TriggerFeatureBuilder.TriggerFeatureBuilder.getEntityType", "TriggerFeatureBuilder.TriggerFeatureBuilder.getEntityType"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getEntityType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.getEntityType"], ["", "def", "getTokenFeatures", "(", "self", ",", "token", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        Returns a list of features based on the attributes of a token.\n        These can be used to define more complex features.\n        \"\"\"", "\n", "# These features are cached when this method is first called", "\n", "# for a token.", "\n", "if", "self", ".", "tokenFeatures", ".", "has_key", "(", "token", ")", ":", "\n", "            ", "return", "self", ".", "tokenFeatures", "[", "token", "]", ",", "self", ".", "tokenFeatureWeights", "[", "token", "]", "\n", "", "tokTxt", "=", "sentenceGraph", ".", "getTokenText", "(", "token", ")", "\n", "features", "=", "{", "}", "\n", "features", "[", "\"_txt_\"", "+", "tokTxt", "]", "=", "1", "\n", "features", "[", "\"_POS_\"", "+", "token", ".", "get", "(", "\"POS\"", ")", "]", "=", "1", "\n", "if", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", ":", "\n", "            ", "features", "[", "\"_given\"", "]", "=", "1", "\n", "for", "entity", "in", "sentenceGraph", ".", "tokenIsEntityHead", "[", "token", "]", ":", "\n", "                ", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "\n", "                    ", "features", "[", "\"_annType_\"", "+", "self", ".", "getEntityType", "(", "entity", ")", "]", "=", "1", "\n", "# Only for Unmerging!", "\n", "", "", "", "if", "self", ".", "useNonNameEntities", ":", "\n", "            ", "for", "entity", "in", "sentenceGraph", ".", "tokenIsEntityHead", "[", "token", "]", ":", "\n", "                ", "features", "[", "\"_annType_\"", "+", "self", ".", "getEntityType", "(", "entity", ")", "]", "=", "1", "\n", "#        if self.gazetteer and tokTxt.lower() in self.gazetteer:", "\n", "#            for label,weight in self.gazetteer[tokTxt.lower()].items():", "\n", "#                pass", "\n", "#                #features[\"_knownLabel_\"+label]=weight", "\n", "", "", "self", ".", "tokenFeatures", "[", "token", "]", "=", "sorted", "(", "features", ".", "keys", "(", ")", ")", "\n", "self", ".", "tokenFeatureWeights", "[", "token", "]", "=", "features", "\n", "return", "self", ".", "tokenFeatures", "[", "token", "]", ",", "self", ".", "tokenFeatureWeights", "[", "token", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildLinearOrderFeatures": [[78, 87], ["TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "def", "buildLinearOrderFeatures", "(", "self", ",", "sentenceGraph", ",", "index", ",", "tag", ")", ":", "\n", "        ", "\"\"\"\n        Linear features are built by marking token features with a tag\n        that defines their relative position in the linear order.\n        \"\"\"", "\n", "tag", "=", "\"linear_\"", "+", "tag", "\n", "tokenFeatures", ",", "tokenFeatureWeights", "=", "self", ".", "getTokenFeatures", "(", "sentenceGraph", ".", "tokens", "[", "index", "]", ",", "sentenceGraph", ")", "\n", "for", "tokenFeature", "in", "tokenFeatures", ":", "\n", "            ", "self", ".", "setFeature", "(", "tag", "+", "tokenFeature", ",", "tokenFeatureWeights", "[", "tokenFeature", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.initSentence": [[88, 140], ["sorted", "str", "bagOfWords.keys", "sentenceGraph.dependencyGraph.getInEdges", "sentenceGraph.dependencyGraph.getOutEdges", "set", "entity.get", "token.get", "bagOfWords.has_key", "bagOfWords.has_key", "TriggerFeatureBuilder.TriggerFeatureBuilder.featureSet.getId"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.GraphViz.getId"], ["", "", "def", "initSentence", "(", "self", ",", "sentenceGraph", ")", ":", "\n", "        ", "\"\"\"\n        Build one example for each token of the sentence\n        \"\"\"", "\n", "self", ".", "sentenceGraph", "=", "sentenceGraph", "\n", "self", ".", "tokenFeatures", "=", "{", "}", "\n", "self", ".", "tokenFeatureWeights", "=", "{", "}", "\n", "\n", "#if not \"names\" in self.styles:", "\n", "namedEntityCount", "=", "0", "\n", "for", "entity", "in", "sentenceGraph", ".", "entities", ":", "\n", "            ", "if", "entity", ".", "get", "(", "\"given\"", ")", "==", "\"True\"", ":", "# known data which can be used for features", "\n", "                ", "namedEntityCount", "+=", "1", "\n", "", "", "self", ".", "namedEntityCountFeature", "=", "\"nameCount_\"", "+", "str", "(", "namedEntityCount", ")", "\n", "\n", "bagOfWords", "=", "{", "}", "\n", "for", "token", "in", "sentenceGraph", ".", "tokens", ":", "\n", "            ", "text", "=", "\"bow_\"", "+", "token", ".", "get", "(", "\"text\"", ")", "\n", "if", "not", "bagOfWords", ".", "has_key", "(", "text", ")", ":", "\n", "                ", "bagOfWords", "[", "text", "]", "=", "0", "\n", "", "bagOfWords", "[", "text", "]", "+=", "1", "\n", "if", "sentenceGraph", ".", "tokenIsName", "[", "token", "]", ":", "\n", "                ", "text", "=", "\"ne_\"", "+", "text", "\n", "if", "not", "bagOfWords", ".", "has_key", "(", "text", ")", ":", "\n", "                    ", "bagOfWords", "[", "text", "]", "=", "0", "\n", "", "bagOfWords", "[", "text", "]", "+=", "1", "\n", "", "", "self", ".", "bowFeatures", "=", "{", "}", "\n", "for", "k", "in", "sorted", "(", "bagOfWords", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "bowFeatures", "[", "self", ".", "featureSet", ".", "getId", "(", "k", ")", "]", "=", "bagOfWords", "[", "k", "]", "\n", "\n", "", "self", ".", "inEdgesByToken", "=", "{", "}", "\n", "self", ".", "outEdgesByToken", "=", "{", "}", "\n", "self", ".", "edgeSetByToken", "=", "{", "}", "\n", "for", "token", "in", "sentenceGraph", ".", "tokens", ":", "\n", "            ", "inEdges", "=", "sentenceGraph", ".", "dependencyGraph", ".", "getInEdges", "(", "token", ")", "\n", "#inEdges = sentenceGraph.dependencyGraph.in_edges(token, data=True)", "\n", "#fixedInEdges = []", "\n", "#for edge in inEdges:", "\n", "#    fixedInEdges.append( (edge[0], edge[1], edge[2][\"element\"]) )", "\n", "#inEdges = fixedInEdges", "\n", "#inEdges.sort(compareDependencyEdgesById)", "\n", "self", ".", "inEdgesByToken", "[", "token", "]", "=", "inEdges", "\n", "\n", "outEdges", "=", "sentenceGraph", ".", "dependencyGraph", ".", "getOutEdges", "(", "token", ")", "\n", "#outEdges = sentenceGraph.dependencyGraph.out_edges(token, data=True)", "\n", "#fixedOutEdges = []", "\n", "#for edge in outEdges:", "\n", "#    fixedOutEdges.append( (edge[0], edge[1], edge[2][\"element\"]) )", "\n", "#outEdges = fixedOutEdges", "\n", "#outEdges.sort(compareDependencyEdgesById)", "\n", "self", ".", "outEdgesByToken", "[", "token", "]", "=", "outEdges", "\n", "self", ".", "edgeSetByToken", "[", "token", "]", "=", "set", "(", "inEdges", "+", "outEdges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildFeatures": [[141, 204], ["range", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "token.get", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "Utils.stem", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "range", "len", "text[].isalpha", "text[].isupper", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "len", "text[].isdigit", "TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "token.get", "text[].isalpha", "text[].isupper", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.buildLinearOrderFeatures", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "len", "len", "str", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "text[].lower", "text[].lower", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildLinearOrderFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "", "def", "buildFeatures", "(", "self", ",", "token", ",", "linear", "=", "True", ",", "chains", "=", "True", ")", ":", "\n", "        ", "sentenceGraph", "=", "self", ".", "sentenceGraph", "\n", "tokenIndex", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sentenceGraph", ".", "tokens", ")", ")", ":", "\n", "            ", "if", "token", "==", "self", ".", "sentenceGraph", ".", "tokens", "[", "i", "]", ":", "\n", "                ", "tokenIndex", "=", "i", "\n", "break", "\n", "", "", "assert", "tokenIndex", "!=", "None", "\n", "token", "=", "self", ".", "sentenceGraph", ".", "tokens", "[", "tokenIndex", "]", "\n", "\n", "#if not \"names\" in self.styles:", "\n", "self", ".", "setFeature", "(", "self", ".", "namedEntityCountFeature", ",", "1", ")", "\n", "\n", "#self.features.update(self.bowFeatures) # Note! these do not get tagged", "\n", "\n", "#            for j in range(len(sentenceGraph.tokens)):", "\n", "#                text = \"bow_\" + sentenceGraph.tokens[j].get(\"text\")", "\n", "#                if j < i:", "\n", "#                    features[self.featureSet.getId(\"bf_\" + text)] = 1", "\n", "#                elif j > i:", "\n", "#                    features[self.featureSet.getId(\"af_\" + text)] = 1", "\n", "\n", "# Main features", "\n", "text", "=", "token", ".", "get", "(", "\"text\"", ")", "\n", "self", ".", "setFeature", "(", "\"txt_\"", "+", "text", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"POS_\"", "+", "token", ".", "get", "(", "\"POS\"", ")", ",", "1", ")", "\n", "stem", "=", "PorterStemmer", ".", "stem", "(", "text", ")", "\n", "self", ".", "setFeature", "(", "\"stem_\"", "+", "stem", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"nonstem_\"", "+", "text", "[", "len", "(", "stem", ")", ":", "]", ",", "1", ")", "\n", "\n", "# Linear order features", "\n", "if", "linear", ":", "\n", "            ", "for", "index", "in", "[", "-", "3", ",", "-", "2", ",", "-", "1", ",", "1", ",", "2", ",", "3", "]", ":", "\n", "                ", "if", "i", "+", "index", ">", "0", "and", "i", "+", "index", "<", "len", "(", "sentenceGraph", ".", "tokens", ")", ":", "\n", "                    ", "self", ".", "buildLinearOrderFeatures", "(", "sentenceGraph", ",", "i", "+", "index", ",", "str", "(", "index", ")", ")", "\n", "\n", "# Content", "\n", "", "", "", "if", "i", ">", "0", "and", "text", "[", "0", "]", ".", "isalpha", "(", ")", "and", "text", "[", "0", "]", ".", "isupper", "(", ")", ":", "\n", "            ", "self", ".", "setFeature", "(", "\"upper_case_start\"", ",", "1", ")", "\n", "", "for", "j", "in", "range", "(", "len", "(", "text", ")", ")", ":", "\n", "            ", "if", "j", ">", "0", "and", "text", "[", "j", "]", ".", "isalpha", "(", ")", "and", "text", "[", "j", "]", ".", "isupper", "(", ")", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"upper_case_middle\"", ",", "1", ")", "\n", "# numbers and special characters", "\n", "", "if", "text", "[", "j", "]", ".", "isdigit", "(", ")", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"has_digits\"", ",", "1", ")", "\n", "if", "j", ">", "0", "and", "text", "[", "j", "-", "1", "]", "==", "\"-\"", ":", "\n", "                    ", "self", ".", "setFeature", "(", "\"has_hyphenated_digit\"", ",", "1", ")", "\n", "", "", "elif", "text", "[", "j", "]", "==", "\"-\"", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"has_hyphen\"", ",", "1", ")", "\n", "", "elif", "text", "[", "j", "]", "==", "\"/\"", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"has_fslash\"", ",", "1", ")", "\n", "", "elif", "text", "[", "j", "]", "==", "\"\\\\\"", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"has_bslash\"", ",", "1", ")", "\n", "# duplets", "\n", "", "if", "j", ">", "0", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"dt_\"", "+", "text", "[", "j", "-", "1", ":", "j", "+", "1", "]", ".", "lower", "(", ")", ",", "1", ")", "\n", "# triplets", "\n", "", "if", "j", ">", "1", ":", "\n", "                ", "self", ".", "setFeature", "(", "\"tt_\"", "+", "text", "[", "j", "-", "2", ":", "j", "+", "1", "]", ".", "lower", "(", ")", ",", "1", ")", "\n", "\n", "# chains", "\n", "", "", "if", "chains", ":", "\n", "            ", "self", ".", "buildChains", "(", "token", ",", "sentenceGraph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildAttachedEdgeFeatures": [[205, 225], ["edge[].get", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "sentenceGraph.getTokenText", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "edge[].get", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "sentenceGraph.getTokenText", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "edge[].get", "edge[].get", "edge[].get", "edge[].get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.ExportParse.getTokenText", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "buildAttachedEdgeFeatures", "(", "self", ",", "token", ",", "sentenceGraph", ")", ":", "\n", "# Attached edges (Hanging in and out edges)", "\n", "        ", "t1InEdges", "=", "self", ".", "inEdgesByToken", "[", "token", "]", "\n", "for", "edge", "in", "t1InEdges", ":", "\n", "            ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "self", ".", "setFeature", "(", "\"t1HIn_\"", "+", "edgeType", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"t1HIn_\"", "+", "edge", "[", "0", "]", ".", "get", "(", "\"POS\"", ")", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"t1HIn_\"", "+", "edgeType", "+", "\"_\"", "+", "edge", "[", "0", "]", ".", "get", "(", "\"POS\"", ")", ",", "1", ")", "\n", "tokenText", "=", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "0", "]", ")", "\n", "self", ".", "setFeature", "(", "\"t1HIn_\"", "+", "tokenText", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"t1HIn_\"", "+", "edgeType", "+", "\"_\"", "+", "tokenText", ",", "1", ")", "\n", "", "t1OutEdges", "=", "self", ".", "outEdgesByToken", "[", "token", "]", "\n", "for", "edge", "in", "t1OutEdges", ":", "\n", "            ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "self", ".", "setFeature", "(", "\"t1HOut_\"", "+", "edgeType", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"t1HOut_\"", "+", "edge", "[", "1", "]", ".", "get", "(", "\"POS\"", ")", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"t1HOut_\"", "+", "edgeType", "+", "\"_\"", "+", "edge", "[", "1", "]", ".", "get", "(", "\"POS\"", ")", ",", "1", ")", "\n", "tokenText", "=", "sentenceGraph", ".", "getTokenText", "(", "edge", "[", "1", "]", ")", "\n", "self", ".", "setFeature", "(", "\"t1HOut_\"", "+", "tokenText", ",", "1", ")", "\n", "self", ".", "setFeature", "(", "\"t1HOut_\"", "+", "edgeType", "+", "\"_\"", "+", "tokenText", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains": [[226, 276], ["set.union", "str", "set", "edge[].get", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "edge[].get", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature", "TriggerFeatureBuilder.TriggerFeatureBuilder.setFeature"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.getTokenFeatures", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.TriggerFeatureBuilder.TriggerFeatureBuilder.buildChains", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.FeatureBuilders.FeatureBuilder.FeatureBuilder.setFeature"], ["", "", "def", "buildChains", "(", "self", ",", "token", ",", "sentenceGraph", ",", "depthLeft", "=", "3", ",", "chain", "=", "\"\"", ",", "visited", "=", "None", ")", ":", "\n", "        ", "if", "depthLeft", "==", "0", ":", "\n", "            ", "return", "\n", "", "strDepthLeft", "=", "\"dist_\"", "+", "str", "(", "depthLeft", ")", "\n", "\n", "if", "visited", "==", "None", ":", "\n", "            ", "visited", "=", "set", "(", ")", "\n", "\n", "", "inEdges", "=", "self", ".", "inEdgesByToken", "[", "token", "]", "\n", "outEdges", "=", "self", ".", "outEdgesByToken", "[", "token", "]", "\n", "edgeSet", "=", "visited", ".", "union", "(", "self", ".", "edgeSetByToken", "[", "token", "]", ")", "\n", "for", "edge", "in", "inEdges", ":", "\n", "            ", "if", "not", "edge", "in", "visited", ":", "\n", "                ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "self", ".", "setFeature", "(", "\"dep_\"", "+", "strDepthLeft", "+", "edgeType", ",", "1", ")", "\n", "\n", "nextToken", "=", "edge", "[", "0", "]", "\n", "tokenFeatures", ",", "tokenWeights", "=", "self", ".", "getTokenFeatures", "(", "nextToken", ",", "sentenceGraph", ")", "\n", "for", "tokenFeature", "in", "tokenFeatures", ":", "\n", "                    ", "self", ".", "setFeature", "(", "strDepthLeft", "+", "tokenFeature", ",", "tokenWeights", "[", "tokenFeature", "]", ")", "\n", "#                for entity in sentenceGraph.tokenIsEntityHead[nextToken]:", "\n", "#                    if entity.get(\"given\") == \"True\":", "\n", "#                        features[self.featureSet.getId(\"name_dist_\"+strDepthLeft)] = 1", "\n", "#                        features[self.featureSet.getId(\"name_dist_\"+strDepthLeft+entity.get(\"type\"))] = 1", "\n", "#                features[self.featureSet.getId(\"POS_dist_\"+strDepthLeft+nextToken.get(\"POS\"))] = 1", "\n", "#                tokenText = sentenceGraph.getTokenText(nextToken)", "\n", "#                features[self.featureSet.getId(\"text_dist_\"+strDepthLeft+tokenText)] = 1", "\n", "\n", "", "self", ".", "setFeature", "(", "\"chain_dist_\"", "+", "strDepthLeft", "+", "chain", "+", "\"-frw_\"", "+", "edgeType", ",", "1", ")", "\n", "self", ".", "buildChains", "(", "nextToken", ",", "sentenceGraph", ",", "depthLeft", "-", "1", ",", "chain", "+", "\"-frw_\"", "+", "edgeType", ",", "edgeSet", ")", "\n", "\n", "", "", "for", "edge", "in", "outEdges", ":", "\n", "            ", "if", "not", "edge", "in", "visited", ":", "\n", "                ", "edgeType", "=", "edge", "[", "2", "]", ".", "get", "(", "\"type\"", ")", "\n", "self", ".", "setFeature", "(", "\"dep_dist_\"", "+", "strDepthLeft", "+", "edgeType", ",", "1", ")", "\n", "\n", "nextToken", "=", "edge", "[", "1", "]", "\n", "tokenFeatures", ",", "tokenWeights", "=", "self", ".", "getTokenFeatures", "(", "nextToken", ",", "sentenceGraph", ")", "\n", "for", "tokenFeature", "in", "tokenFeatures", ":", "\n", "                    ", "self", ".", "setFeature", "(", "strDepthLeft", "+", "tokenFeature", ",", "tokenWeights", "[", "tokenFeature", "]", ")", "\n", "#                for entity in sentenceGraph.tokenIsEntityHead[nextToken]:", "\n", "#                    if entity.get(\"given\") == \"True\":", "\n", "#                        features[self.featureSet.getId(\"name_dist_\"+strDepthLeft)] = 1", "\n", "#                        features[self.featureSet.getId(\"name_dist_\"+strDepthLeft+entity.get(\"type\"))] = 1", "\n", "#                features[self.featureSet.getId(\"POS_dist_\"+strDepthLeft+nextToken.get(\"POS\"))] = 1", "\n", "#                tokenText = sentenceGraph.getTokenText(nextToken)", "\n", "#                features[self.featureSet.getId(\"text_dist_\"+strDepthLeft+tokenText)] = 1", "\n", "\n", "", "self", ".", "setFeature", "(", "\"chain_dist_\"", "+", "strDepthLeft", "+", "chain", "+", "\"-rev_\"", "+", "edgeType", ",", "1", ")", "\n", "self", ".", "buildChains", "(", "nextToken", ",", "sentenceGraph", ",", "depthLeft", "-", "1", ",", "chain", "+", "\"-rev_\"", "+", "edgeType", ",", "edgeSet", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.ModifierExampleWriter.ModifierExampleWriter.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "xType", "=", "\"task3\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.ModifierExampleWriter.ModifierExampleWriter.writeXML": [[12, 102], ["ModifierExampleWriter.ModifierExampleWriter.loadExamples", "Utils.ETFromObj", "Utils.ETFromObj.getroot", "ETUtils.ETFromObj.getroot.getiterator", "itertools.izip", "ETUtils.ETFromObj.getroot.getiterator", "type", "Core.IdSet.IdSet", "Core.IdSet.IdSet.getIds", "example[].has_key", "entity.get", "Utils.write", "Utils.write", "entity.set", "entity.set", "Core.IdSet.IdSet.getName", "specMap.has_key", "negMap.has_key", "entity.set", "entity.set", "Core.IdSet.IdSet.getName.split", "entity.set", "entity.set", "entity.set", "entity.set", "specMap.has_key", "map.has_key", "map.has_key", "str", "ModifierExampleWriter.ModifierExampleWriter.getPredictionStrengthString", "str", "ModifierExampleWriter.ModifierExampleWriter.getPredictionStrengthString", "entity.set", "entity.set", "negMap.has_key", "negMap.has_key", "specMap.has_key", "str", "ModifierExampleWriter.ModifierExampleWriter.getPredictionStrengthString", "entity.set", "entity.set", "str", "ModifierExampleWriter.ModifierExampleWriter.getPredictionStrengthString"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.loadExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.ElementTreeUtils.ETFromObj", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getIds", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getName", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getPredictionStrengthString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getPredictionStrengthString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getPredictionStrengthString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getPredictionStrengthString"], ["", "def", "writeXML", "(", "self", ",", "examples", ",", "predictions", ",", "corpus", ",", "outputFile", ",", "classSet", "=", "None", ",", "parse", "=", "None", ",", "tokenization", "=", "None", ",", "goldCorpus", "=", "None", ",", "exampleStyle", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Writes task 3 examples to interaction XML. Assumes task 3 classification\n        is done with SVMMulticlass Classifier, used for two classes.\n        \"\"\"", "\n", "print", ">>", "sys", ".", "stderr", ",", "\"Adding task 3 to Interaction XML\"", "\n", "examples", ",", "predictions", "=", "self", ".", "loadExamples", "(", "examples", ",", "predictions", ")", "\n", "\n", "if", "type", "(", "classSet", ")", "==", "types", ".", "StringType", ":", "# class names are in file", "\n", "            ", "classSet", "=", "IdSet", "(", "filename", "=", "classSet", ")", "\n", "", "classIds", "=", "None", "\n", "if", "classSet", "!=", "None", ":", "\n", "            ", "classIds", "=", "classSet", ".", "getIds", "(", ")", "\n", "\n", "", "corpusTree", "=", "ETUtils", ".", "ETFromObj", "(", "corpus", ")", "\n", "corpusRoot", "=", "corpusTree", ".", "getroot", "(", ")", "\n", "\n", "# Determine subtask", "\n", "task3Type", "=", "None", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "assert", "example", "[", "3", "]", ".", "has_key", "(", "\"t3type\"", ")", "\n", "task3Type", "=", "example", "[", "3", "]", "[", "\"t3type\"", "]", "\n", "break", "\n", "", "if", "task3Type", "==", "None", ":", "\n", "            ", "if", "outputFile", "!=", "None", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing corpus to\"", ",", "outputFile", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "outputFile", ")", "\n", "", "return", "corpusTree", "\n", "", "assert", "task3Type", "in", "[", "\"multiclass\"", ",", "\"speculation\"", ",", "\"negation\"", "]", "\n", "\n", "# Remove the task 3 subtask information if it already exists", "\n", "for", "entity", "in", "corpusRoot", ".", "getiterator", "(", "\"entity\"", ")", ":", "\n", "            ", "if", "task3Type", "==", "\"multiclass\"", ":", "\n", "                ", "entity", ".", "set", "(", "\"speculation\"", ",", "\"False\"", ")", "\n", "entity", ".", "set", "(", "\"negation\"", ",", "\"False\"", ")", "\n", "", "elif", "task3Type", "==", "\"speculation\"", ":", "\n", "                ", "entity", ".", "set", "(", "\"speculation\"", ",", "\"False\"", ")", "\n", "", "else", ":", "# task3Type == \"negation\"", "\n", "                ", "entity", ".", "set", "(", "\"negation\"", ",", "\"False\"", ")", "\n", "\n", "", "", "specMap", "=", "{", "}", "\n", "negMap", "=", "{", "}", "\n", "for", "example", ",", "prediction", "in", "itertools", ".", "izip", "(", "examples", ",", "predictions", ")", ":", "\n", "            ", "assert", "example", "[", "3", "]", "[", "\"xtype\"", "]", "==", "\"task3\"", "\n", "if", "example", "[", "3", "]", "[", "\"t3type\"", "]", "==", "\"multiclass\"", ":", "\n", "                ", "predictedClassName", "=", "classSet", ".", "getName", "(", "prediction", "[", "0", "]", ")", "\n", "if", "predictedClassName", "!=", "\"neg\"", ":", "\n", "                    ", "predictedModifiers", "=", "predictedClassName", ".", "split", "(", "\"---\"", ")", "\n", "if", "\"negation\"", "in", "predictedModifiers", ":", "\n", "                        ", "assert", "not", "negMap", ".", "has_key", "(", "example", "[", "3", "]", "[", "\"entity\"", "]", ")", "\n", "negMap", "[", "example", "[", "3", "]", "[", "\"entity\"", "]", "]", "=", "(", "True", ",", "prediction", ")", "\n", "", "if", "\"speculation\"", "in", "predictedModifiers", ":", "\n", "                        ", "assert", "not", "specMap", ".", "has_key", "(", "example", "[", "3", "]", "[", "\"entity\"", "]", ")", "\n", "specMap", "[", "example", "[", "3", "]", "[", "\"entity\"", "]", "]", "=", "(", "True", ",", "prediction", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "example", "[", "3", "]", "[", "\"t3type\"", "]", "==", "\"speculation\"", ":", "\n", "                    ", "map", "=", "specMap", "\n", "", "else", ":", "\n", "                    ", "map", "=", "negMap", "\n", "", "if", "prediction", "[", "0", "]", "!=", "1", ":", "\n", "                    ", "assert", "not", "map", ".", "has_key", "(", "example", "[", "3", "]", "[", "\"entity\"", "]", ")", "\n", "map", "[", "example", "[", "3", "]", "[", "\"entity\"", "]", "]", "=", "(", "True", ",", "prediction", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "not", "map", ".", "has_key", "(", "example", "[", "3", "]", "[", "\"entity\"", "]", ")", "\n", "map", "[", "example", "[", "3", "]", "[", "\"entity\"", "]", "]", "=", "(", "False", ",", "prediction", ")", "\n", "\n", "", "", "", "for", "entity", "in", "corpusRoot", ".", "getiterator", "(", "\"entity\"", ")", ":", "\n", "            ", "eId", "=", "entity", ".", "get", "(", "\"id\"", ")", "\n", "if", "task3Type", "==", "\"multiclass\"", ":", "\n", "                ", "if", "specMap", ".", "has_key", "(", "eId", ")", ":", "\n", "                    ", "entity", ".", "set", "(", "\"speculation\"", ",", "str", "(", "specMap", "[", "eId", "]", "[", "0", "]", ")", ")", "\n", "entity", ".", "set", "(", "\"modConf\"", ",", "self", ".", "getPredictionStrengthString", "(", "specMap", "[", "eId", "]", "[", "1", "]", ",", "classSet", ",", "classIds", ")", ")", "\n", "", "if", "negMap", ".", "has_key", "(", "eId", ")", ":", "\n", "                    ", "entity", ".", "set", "(", "\"negation\"", ",", "str", "(", "negMap", "[", "eId", "]", "[", "0", "]", ")", ")", "\n", "entity", ".", "set", "(", "\"modConf\"", ",", "self", ".", "getPredictionStrengthString", "(", "negMap", "[", "eId", "]", "[", "1", "]", ",", "classSet", ",", "classIds", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "task3Type", "==", "\"speculation\"", ":", "\n", "                    ", "if", "specMap", ".", "has_key", "(", "eId", ")", ":", "\n", "                        ", "entity", ".", "set", "(", "\"speculation\"", ",", "str", "(", "specMap", "[", "eId", "]", "[", "0", "]", ")", ")", "\n", "entity", ".", "set", "(", "\"specConf\"", ",", "self", ".", "getPredictionStrengthString", "(", "specMap", "[", "eId", "]", "[", "1", "]", ",", "classSet", ",", "classIds", ",", "[", "\"\"", "]", ")", ")", "\n", "", "", "elif", "task3Type", "==", "\"negation\"", ":", "\n", "                    ", "if", "negMap", ".", "has_key", "(", "eId", ")", ":", "\n", "                        ", "entity", ".", "set", "(", "\"negation\"", ",", "str", "(", "negMap", "[", "eId", "]", "[", "0", "]", ")", ")", "\n", "entity", ".", "set", "(", "\"negConf\"", ",", "self", ".", "getPredictionStrengthString", "(", "negMap", "[", "eId", "]", "[", "1", "]", ",", "classSet", ",", "classIds", ",", "[", "\"\"", ",", "\"speculation\"", "]", ")", ")", "\n", "\n", "# Write corpus", "\n", "", "", "", "", "if", "outputFile", "!=", "None", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing corpus to\"", ",", "outputFile", "\n", "ETUtils", ".", "write", "(", "corpusRoot", ",", "outputFile", ")", "\n", "", "return", "corpusTree", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.PhraseTriggerExampleWriter.PhraseTriggerExampleWriter.__init__": [[11, 14], ["SentenceExampleWriter.SentenceExampleWriter.SentenceExampleWriter.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "xType", "=", "\"phrase\"", "\n", "SentenceExampleWriter", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.PhraseTriggerExampleWriter.PhraseTriggerExampleWriter.writeXMLSentence": [[15, 57], ["PhraseTriggerExampleWriter.PhraseTriggerExampleWriter.assertSameSentence", "sentenceElement.get", "sentenceElement.get", "sentenceElement.find", "PhraseTriggerExampleWriter.PhraseTriggerExampleWriter.removeChildren", "Utils.getNextFreeId", "Utils.getNextFreeId", "PhraseTriggerExampleWriter.PhraseTriggerExampleWriter.removeNonNameEntities", "sentenceElement.find", "sentenceElement.remove", "sentenceElement.findall", "ET.Element", "ET.Element.set", "ET.Element.set", "ET.Element.set", "Utils.charOffsetToSingleTuple", "Utils.charOffsetToSingleTuple", "ET.Element.set", "ET.Element.set", "PhraseTriggerExampleWriter.PhraseTriggerExampleWriter.setElementType", "sentenceElement.append", "sentenceElement.append", "headToken.get", "token.get", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.assertSameSentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.removeChildren", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getNextFreeId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getNextFreeId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.removeNonNameEntities", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Utils.Range.charOffsetToSingleTuple", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.setElementType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "writeXMLSentence", "(", "self", ",", "examples", ",", "predictionsByExample", ",", "sentenceObject", ",", "classSet", ",", "classIds", ",", "goldSentence", "=", "None", ",", "exampleStyle", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "self", ".", "assertSameSentence", "(", "examples", ")", "\n", "\n", "sentenceElement", "=", "sentenceObject", ".", "sentence", "\n", "sentenceId", "=", "sentenceElement", ".", "get", "(", "\"id\"", ")", "\n", "sentenceText", "=", "sentenceElement", ".", "get", "(", "\"text\"", ")", "\n", "# detach analyses-element", "\n", "sentenceAnalysesElement", "=", "None", "\n", "sentenceAnalysesElement", "=", "sentenceElement", ".", "find", "(", "\"sentenceanalyses\"", ")", "\n", "if", "sentenceAnalysesElement", "==", "None", ":", "\n", "            ", "sentenceAnalysesElement", "=", "sentenceElement", ".", "find", "(", "\"analyses\"", ")", "\n", "", "if", "sentenceAnalysesElement", "!=", "None", ":", "\n", "            ", "sentenceElement", ".", "remove", "(", "sentenceAnalysesElement", ")", "\n", "# remove pairs and interactions", "\n", "", "interactions", "=", "self", ".", "removeChildren", "(", "sentenceElement", ",", "[", "\"pair\"", ",", "\"interaction\"", "]", ")", "\n", "# remove entities", "\n", "newEntityIdCount", "=", "IDUtils", ".", "getNextFreeId", "(", "sentenceElement", ".", "findall", "(", "\"entity\"", ")", ")", "\n", "nonNameEntities", "=", "self", ".", "removeNonNameEntities", "(", "sentenceElement", ")", "\n", "\n", "# add new pairs", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "prediction", "=", "predictionsByExample", "[", "example", "[", "0", "]", "]", "\n", "entityElement", "=", "ET", ".", "Element", "(", "\"entity\"", ")", "\n", "#entityElement.attrib[\"given\"] = \"False\"", "\n", "headToken", "=", "example", "[", "3", "]", "[", "\"t\"", "]", "\n", "for", "token", "in", "sentenceObject", ".", "tokens", ":", "\n", "                ", "if", "token", ".", "get", "(", "\"id\"", ")", "==", "headToken", ":", "\n", "                    ", "headToken", "=", "token", "\n", "break", "\n", "", "", "entityElement", ".", "set", "(", "\"charOffset\"", ",", "example", "[", "3", "]", "[", "\"charOffset\"", "]", ")", "\n", "entityElement", ".", "set", "(", "\"headOffset\"", ",", "headToken", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "entityElement", ".", "set", "(", "\"phraseType\"", ",", "example", "[", "3", "]", "[", "\"ptype\"", "]", ")", "\n", "entOffset", "=", "Range", ".", "charOffsetToSingleTuple", "(", "example", "[", "3", "]", "[", "\"charOffset\"", "]", ")", "\n", "entityElement", ".", "set", "(", "\"text\"", ",", "sentenceText", "[", "entOffset", "[", "0", "]", ":", "entOffset", "[", "1", "]", "]", ")", "\n", "entityElement", ".", "set", "(", "\"id\"", ",", "sentenceId", "+", "\".e\"", "+", "str", "(", "newEntityIdCount", ")", ")", "\n", "self", ".", "setElementType", "(", "entityElement", ",", "prediction", ",", "classSet", ",", "classIds", ")", "\n", "newEntityIdCount", "+=", "1", "\n", "sentenceElement", ".", "append", "(", "entityElement", ")", "\n", "\n", "# re-attach the analyses-element", "\n", "", "if", "sentenceAnalysesElement", "!=", "None", ":", "\n", "            ", "sentenceElement", ".", "append", "(", "sentenceAnalysesElement", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EntityExampleWriter.EntityExampleWriter.__init__": [[11, 15], ["SentenceExampleWriter.SentenceExampleWriter.SentenceExampleWriter.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "xType", "=", "\"token\"", "\n", "self", ".", "insertWeights", "=", "False", "\n", "SentenceExampleWriter", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EntityExampleWriter.EntityExampleWriter.writeXMLSentence": [[16, 120], ["EntityExampleWriter.EntityExampleWriter.assertSameSentence", "sentenceElement.get", "sentenceElement.find", "EntityExampleWriter.EntityExampleWriter.removeChildren", "Utils.getNextFreeId", "Utils.getNextFreeId", "EntityExampleWriter.EntityExampleWriter.removeNonNameEntities", "sentenceElement.find", "sentenceElement.remove", "sentenceElement.findall", "EntityExampleWriter.EntityExampleWriter.removeChildren", "EntityExampleWriter.EntityExampleWriter.getPredictionStrengthString", "EntityExampleWriter.EntityExampleWriter.getElementTypes", "sentenceElement.append", "Utils.InteractionXML.ExtendTriggers.extend", "Utils.InteractionXML.ExtendTriggers.extend", "Utils.InteractionXML.ExtendTriggers.extend", "Utils.InteractionXML.ExtendTriggers.extend", "entity.get", "goldEntityTypeByHeadOffset[].append", "goldEntityByHeadOffset[].append", "EntityExampleWriter.EntityExampleWriter.getMergedEntityType", "headToken.get", "ET.Element", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "structureAnalyzer.isEvent", "goldEntityTypeByHeadOffset.has_key", "sentenceElement.append", "sentenceElement.append", "goldEntityTypeByHeadOffset.has_key", "goldEntityTypeByHeadOffset.has_key", "token.get", "headToken.get", "ET.Element.set", "headToken.get", "headToken.get", "ET.Element.set", "headToken.get", "goldEntityByHeadOffset.has_key", "headToken.get", "ET.Element.set", "ET.Element.set", "sentenceElement.append", "token.get", "str", "ET.Element.get", "token.get", "entity.set", "ET.Element.get", "goldEntityByHeadOffset.has_key", "ET.Element.get", "headToken.get", "ET.Element.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.assertSameSentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.removeChildren", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getNextFreeId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getNextFreeId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.removeNonNameEntities", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.removeChildren", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getPredictionStrengthString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getElementTypes", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EntityExampleWriter.EntityExampleWriter.getMergedEntityType", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "writeXMLSentence", "(", "self", ",", "examples", ",", "predictionsByExample", ",", "sentenceObject", ",", "classSet", ",", "classIds", ",", "goldSentence", "=", "None", ",", "exampleStyle", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "self", ".", "assertSameSentence", "(", "examples", ")", "\n", "\n", "extensionRequested", "=", "False", "\n", "\n", "sentenceElement", "=", "sentenceObject", ".", "sentence", "\n", "sentenceId", "=", "sentenceElement", ".", "get", "(", "\"id\"", ")", "\n", "# detach analyses-element", "\n", "sentenceAnalysesElement", "=", "None", "\n", "sentenceAnalysesElement", "=", "sentenceElement", ".", "find", "(", "\"sentenceanalyses\"", ")", "\n", "if", "sentenceAnalysesElement", "==", "None", ":", "\n", "            ", "sentenceAnalysesElement", "=", "sentenceElement", ".", "find", "(", "\"analyses\"", ")", "\n", "", "if", "sentenceAnalysesElement", "!=", "None", ":", "\n", "            ", "sentenceElement", ".", "remove", "(", "sentenceAnalysesElement", ")", "\n", "# remove pairs and interactions", "\n", "", "interactions", "=", "self", ".", "removeChildren", "(", "sentenceElement", ",", "[", "\"pair\"", ",", "\"interaction\"", "]", ")", "\n", "# remove entities", "\n", "newEntityIdCount", "=", "IDUtils", ".", "getNextFreeId", "(", "sentenceElement", ".", "findall", "(", "\"entity\"", ")", ")", "\n", "nonNameEntities", "=", "self", ".", "removeNonNameEntities", "(", "sentenceElement", ")", "\n", "# remove named entities if needed", "\n", "if", "exampleStyle", "!=", "None", "and", "\"names\"", "in", "exampleStyle", "and", "exampleStyle", "[", "\"names\"", "]", ":", "# remove all entities, including names", "\n", "            ", "self", ".", "removeChildren", "(", "sentenceElement", ",", "[", "\"entity\"", "]", ")", "\n", "\n", "# gold sentence elements", "\n", "", "goldEntityTypeByHeadOffset", "=", "{", "}", "\n", "goldEntityByHeadOffset", "=", "{", "}", "\n", "if", "goldSentence", "!=", "None", ":", "\n", "            ", "for", "entity", "in", "goldSentence", ".", "entities", ":", "\n", "                ", "headOffset", "=", "entity", ".", "get", "(", "\"headOffset\"", ")", "\n", "if", "not", "goldEntityTypeByHeadOffset", ".", "has_key", "(", "headOffset", ")", ":", "\n", "                    ", "goldEntityTypeByHeadOffset", "[", "headOffset", "]", "=", "[", "]", "\n", "goldEntityByHeadOffset", "[", "headOffset", "]", "=", "[", "]", "\n", "", "goldEntityTypeByHeadOffset", "[", "headOffset", "]", ".", "append", "(", "entity", ")", "\n", "goldEntityByHeadOffset", "[", "headOffset", "]", ".", "append", "(", "entity", ")", "\n", "", "for", "key", "in", "goldEntityTypeByHeadOffset", ":", "\n", "                ", "goldEntityTypeByHeadOffset", "[", "key", "]", "=", "self", ".", "getMergedEntityType", "(", "goldEntityTypeByHeadOffset", "[", "key", "]", ")", "\n", "", "for", "token", "in", "sentenceObject", ".", "tokens", ":", "\n", "                ", "if", "not", "goldEntityTypeByHeadOffset", ".", "has_key", "(", "token", ".", "get", "(", "\"charOffset\"", ")", ")", ":", "\n", "                    ", "goldEntityTypeByHeadOffset", "[", "token", ".", "get", "(", "\"charOffset\"", ")", "]", "=", "\"neg\"", "\n", "\n", "# add new pairs", "\n", "", "", "", "for", "example", "in", "examples", ":", "\n", "# Entity examplesalways refer to a single head token", "\n", "            ", "headTokenId", "=", "example", "[", "3", "]", "[", "\"t\"", "]", "\n", "headToken", "=", "None", "\n", "for", "token", "in", "sentenceObject", ".", "tokens", ":", "\n", "                ", "if", "token", ".", "get", "(", "\"id\"", ")", "==", "headTokenId", ":", "\n", "                    ", "headToken", "=", "token", "\n", "break", "\n", "", "", "assert", "headToken", "!=", "None", ",", "example", "[", "3", "]", "\n", "# Determine if additional processing is requested", "\n", "unmergeEPINeg", "=", "None", "\n", "if", "\"unmergeneg\"", "in", "example", "[", "3", "]", "and", "example", "[", "3", "]", "[", "\"unmergeneg\"", "]", "==", "\"epi\"", ":", "\n", "                ", "unmergeEPINeg", "=", "headToken", ".", "get", "(", "\"text\"", ")", "\n", "", "if", "\"trigex\"", "in", "example", "[", "3", "]", "and", "example", "[", "3", "]", "[", "\"trigex\"", "]", "==", "\"bb\"", ":", "\n", "                ", "extensionRequested", "=", "True", "\n", "# Make entities for positive predictions", "\n", "", "prediction", "=", "predictionsByExample", "[", "example", "[", "0", "]", "]", "\n", "predictionString", "=", "self", ".", "getPredictionStrengthString", "(", "prediction", ",", "classSet", ",", "classIds", ")", "\n", "for", "eType", "in", "self", ".", "getElementTypes", "(", "prediction", ",", "classSet", ",", "classIds", ",", "unmergeEPINegText", "=", "unmergeEPINeg", ")", ":", "# split merged classes", "\n", "                ", "entityElement", "=", "ET", ".", "Element", "(", "\"entity\"", ")", "\n", "#entityElement.set(\"given\", \"False\")", "\n", "entityElement", ".", "set", "(", "\"charOffset\"", ",", "headToken", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "if", "\"define_offset\"", "in", "example", "[", "3", "]", ":", "\n", "                    ", "entityElement", ".", "set", "(", "\"charOffset\"", ",", "example", "[", "3", "]", "[", "\"define_offset\"", "]", ")", "\n", "", "entityElement", ".", "set", "(", "\"headOffset\"", ",", "headToken", ".", "get", "(", "\"charOffset\"", ")", ")", "\n", "entityElement", ".", "set", "(", "\"text\"", ",", "headToken", ".", "get", "(", "\"text\"", ")", ")", "\n", "entityElement", ".", "set", "(", "\"id\"", ",", "sentenceId", "+", "\".e\"", "+", "str", "(", "newEntityIdCount", ")", ")", "\n", "entityElement", ".", "set", "(", "\"type\"", ",", "eType", ")", "\n", "entityElement", ".", "set", "(", "\"conf\"", ",", "predictionString", ")", "\n", "if", "structureAnalyzer", ".", "isEvent", "(", "eType", ")", ":", "\n", "                    ", "entityElement", ".", "set", "(", "\"event\"", ",", "\"True\"", ")", "\n", "#self.setElementType(entityElement, prediction, classSet, classIds, unmergeEPINeg=unmergeEPINeg)", "\n", "", "if", "self", ".", "insertWeights", ":", "# in other words, use gold types", "\n", "                    ", "headOffset", "=", "headToken", ".", "get", "(", "\"charOffset\"", ")", "\n", "if", "goldEntityByHeadOffset", ".", "has_key", "(", "headOffset", ")", ":", "\n", "                        ", "for", "entity", "in", "goldEntityByHeadOffset", "[", "headOffset", "]", ":", "\n", "                            ", "entity", ".", "set", "(", "\"conf\"", ",", "entityElement", ".", "get", "(", "\"conf\"", ")", ")", "\n", "", "", "", "if", "goldEntityTypeByHeadOffset", ".", "has_key", "(", "headToken", ".", "get", "(", "\"charOffset\"", ")", ")", ":", "\n", "                    ", "entityElement", ".", "set", "(", "\"goldType\"", ",", "goldEntityTypeByHeadOffset", "[", "headToken", ".", "get", "(", "\"charOffset\"", ")", "]", ")", "\n", "", "if", "\"goldIds\"", "in", "example", "[", "3", "]", ":", "# The entities for which this example was built", "\n", "                    ", "entityElement", ".", "set", "(", "\"goldIds\"", ",", "example", "[", "3", "]", "[", "\"goldIds\"", "]", ")", "\n", "", "if", "(", "entityElement", ".", "get", "(", "\"type\"", ")", "!=", "\"neg\"", "and", "not", "goldEntityByHeadOffset", ".", "has_key", "(", "entityElement", ".", "get", "(", "\"headOffset\"", ")", ")", ")", "and", "not", "self", ".", "insertWeights", ":", "\n", "                    ", "newEntityIdCount", "+=", "1", "\n", "sentenceElement", ".", "append", "(", "entityElement", ")", "\n", "", "elif", "entityElement", ".", "get", "(", "\"type\"", ")", "==", "\"neg\"", ":", "\n", "                    ", "pass", "\n", "#newEntityIdCount += 1", "\n", "#sentenceElement.append(entityElement)", "\n", "\n", "# if only adding weights, re-attach interactions and gold entities", "\n", "", "", "", "if", "self", ".", "insertWeights", ":", "\n", "            ", "for", "entity", "in", "nonNameEntities", ":", "\n", "                ", "sentenceElement", ".", "append", "(", "entity", ")", "\n", "", "for", "interaction", "in", "interactions", ":", "\n", "                ", "sentenceElement", ".", "append", "(", "interaction", ")", "\n", "\n", "# re-attach the analyses-element", "\n", "", "", "if", "sentenceAnalysesElement", "!=", "None", ":", "\n", "            ", "sentenceElement", ".", "append", "(", "sentenceAnalysesElement", ")", "\n", "\n", "# Extend bacteria triggers", "\n", "", "if", "extensionRequested", ":", "\n", "            ", "Utils", ".", "InteractionXML", ".", "ExtendTriggers", ".", "extend", "(", "sentenceElement", ",", "entityTypes", "=", "[", "\"Bacterium\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EntityExampleWriter.EntityExampleWriter.getMergedEntityType": [[121, 144], ["set", "list", "list.sort", "list.add", "entity.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "getMergedEntityType", "(", "self", ",", "entities", ")", ":", "\n", "        ", "\"\"\"\n        If a single token belongs to multiple entities of different types,\n        a new, composite type is defined. This type is the alphabetically\n        ordered types of these entities joined with '---'.\n        \"\"\"", "\n", "types", "=", "set", "(", ")", "\n", "for", "entity", "in", "entities", ":", "\n", "            ", "types", ".", "add", "(", "entity", ".", "get", "(", "\"type\"", ")", ")", "\n", "", "types", "=", "list", "(", "types", ")", "\n", "types", ".", "sort", "(", ")", "\n", "typeString", "=", "\"\"", "\n", "for", "type", "in", "types", ":", "\n", "            ", "if", "type", "==", "\"Protein\"", ":", "\n", "                ", "continue", "\n", "", "if", "typeString", "!=", "\"\"", ":", "\n", "                ", "typeString", "+=", "\"---\"", "\n", "", "typeString", "+=", "type", "\n", "\n", "", "if", "typeString", "==", "\"\"", ":", "\n", "            ", "return", "\"neg\"", "\n", "\n", "", "return", "typeString", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.__init__": [[26, 28], ["collections.defaultdict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "SentenceExampleWriter", ".", "counts", "=", "defaultdict", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.write": [[29, 31], ["SentenceExampleWriter.SentenceExampleWriter.writeXML"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.writeXML"], ["", "def", "write", "(", "self", ",", "examples", ",", "predictions", ",", "corpus", ",", "outputFile", ",", "classSet", "=", "None", ",", "parse", "=", "None", ",", "tokenization", "=", "None", ",", "goldCorpus", "=", "None", ",", "insertWeights", "=", "False", ",", "exampleStyle", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "writeXML", "(", "examples", ",", "predictions", ",", "corpus", ",", "outputFile", ",", "classSet", ",", "parse", ",", "tokenization", ",", "goldCorpus", ",", "exampleStyle", "=", "exampleStyle", ",", "structureAnalyzer", "=", "structureAnalyzer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.loadCorpus": [[32, 37], ["isinstance", "Core.loadCorpus", "Core.loadCorpus", "type"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.loadCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.loadCorpus"], ["", "def", "loadCorpus", "(", "self", ",", "corpus", ",", "parse", ",", "tokenization", ")", ":", "\n", "        ", "if", "type", "(", "corpus", ")", "==", "types", ".", "StringType", "or", "isinstance", "(", "corpus", ",", "ET", ".", "ElementTree", ")", ":", "# corpus is in file", "\n", "            ", "return", "SentenceGraph", ".", "loadCorpus", "(", "corpus", ",", "parse", ",", "tokenization", ")", "\n", "", "else", ":", "\n", "            ", "return", "corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.loadExamples": [[38, 46], ["type", "Core.loadPredictions", "Core.loadPredictions", "type", "Core.readExamples", "Core.readExamples"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.loadPredictions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.loadPredictions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.readExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.readExamples"], ["", "", "def", "loadExamples", "(", "self", ",", "examples", ",", "predictions", ")", ":", "\n", "        ", "if", "type", "(", "predictions", ")", "==", "types", ".", "StringType", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Reading predictions from\"", ",", "predictions", "\n", "predictions", "=", "ExampleUtils", ".", "loadPredictions", "(", "predictions", ")", "\n", "", "if", "type", "(", "examples", ")", "==", "types", ".", "StringType", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Reading examples from\"", ",", "examples", "\n", "examples", "=", "ExampleUtils", ".", "readExamples", "(", "examples", ",", "False", ")", "\n", "", "return", "examples", ",", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.writeXML": [[47, 136], ["SentenceExampleWriter.SentenceExampleWriter.loadCorpus", "SentenceExampleWriter.SentenceExampleWriter.loadExamples", "set", "set", "itertools.izip_longest", "sorted", "SentenceExampleWriter.SentenceExampleWriter.loadCorpus", "type", "Core.IdSet.IdSet", "Core.IdSet.IdSet", "Core.IdSet.IdSet.getIds", "Core.IdSet.IdSet.getIds", "Utils.ProgressCounter.ProgressCounter", "Utils.ProgressCounter.ProgressCounter", "example[].rsplit", "exampleQueue.append", "set.add", "SentenceExampleWriter.SentenceExampleWriter.writeXMLSentence", "Utils.ProgressCounter.ProgressCounter.update", "Utils.ProgressCounter.ProgressCounter.update", "SentenceExampleWriter.SentenceExampleWriter.sentencesById.keys", "len", "collections.defaultdict", "Utils.write", "Utils.write", "set.add", "str", "len", "SentenceExampleWriter.SentenceExampleWriter.writeXMLSentence", "set.add", "SentenceExampleWriter.SentenceExampleWriter.writeXMLSentence", "Utils.ProgressCounter.ProgressCounter.update", "Utils.ProgressCounter.ProgressCounter.update", "str", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.loadCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.loadExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.loadCorpus", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getIds", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getIds", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.writeXMLSentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.writeXMLSentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.writeXMLSentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.progressbar.ProgressBar.update"], ["", "def", "writeXML", "(", "self", ",", "examples", ",", "predictions", ",", "corpus", ",", "outputFile", ",", "classSet", "=", "None", ",", "parse", "=", "None", ",", "tokenization", "=", "None", ",", "goldCorpus", "=", "None", ",", "exampleStyle", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "#print >> sys.stderr, \"Writing output to Interaction XML\"", "\n", "        ", "corpus", "=", "self", ".", "loadCorpus", "(", "corpus", ",", "parse", ",", "tokenization", ")", "\n", "if", "goldCorpus", "!=", "None", ":", "\n", "            ", "goldCorpus", "=", "self", ".", "loadCorpus", "(", "corpus", ",", "parse", ",", "tokenization", ")", "\n", "", "examples", ",", "predictions", "=", "self", ".", "loadExamples", "(", "examples", ",", "predictions", ")", "\n", "\n", "if", "type", "(", "classSet", ")", "==", "types", ".", "StringType", ":", "# class names are in file", "\n", "            ", "classSet", "=", "IdSet", "(", "filename", "=", "classSet", ")", "\n", "", "classIds", "=", "None", "\n", "if", "classSet", "!=", "None", ":", "\n", "            ", "classIds", "=", "classSet", ".", "getIds", "(", ")", "\n", "\n", "#counter = ProgressCounter(len(corpus.sentences), \"Write Examples\")", "\n", "\n", "", "exampleQueue", "=", "[", "]", "# One sentence's examples", "\n", "predictionsByExample", "=", "{", "}", "\n", "currentMajorId", "=", "None", "\n", "prevMajorIds", "=", "set", "(", ")", "\n", "processedSentenceIds", "=", "set", "(", ")", "\n", "xType", "=", "None", "\n", "\n", "count", "=", "0", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "count", "+=", "1", "\n", "#assert count > 0", "\n", "", "if", "count", ">", "0", ":", "\n", "            ", "progress", "=", "ProgressCounter", "(", "count", ",", "\"Write Examples\"", ")", "\n", "", "else", ":", "\n", "            ", "predCount", "=", "0", "\n", "for", "prediction", "in", "predictions", ":", "\n", "                ", "predCount", "+=", "1", "\n", "", "assert", "predCount", "==", "0", "\n", "\n", "", "for", "example", ",", "prediction", "in", "itertools", ".", "izip_longest", "(", "examples", ",", "predictions", ")", ":", "\n", "            ", "assert", "example", "!=", "None", "\n", "assert", "prediction", "!=", "None", "\n", "majorId", ",", "minorId", "=", "example", "[", "0", "]", ".", "rsplit", "(", "\".x\"", ",", "1", ")", "\n", "#if currentMajorId == \"GENIA.d114.s9\": print \"Start\"", "\n", "if", "majorId", "!=", "currentMajorId", ":", "# new sentence", "\n", "                ", "if", "currentMajorId", "!=", "None", ":", "\n", "#if currentMajorId == \"GENIA.d114.s9\": print \"JAA\"", "\n", "                    ", "processedSentenceIds", ".", "add", "(", "currentMajorId", ")", "\n", "sentenceObject", "=", "corpus", ".", "sentencesById", "[", "currentMajorId", "]", "\n", "goldSentence", "=", "None", "\n", "if", "goldCorpus", "!=", "None", ":", "\n", "                        ", "goldSentence", "=", "goldCorpus", ".", "sentencesById", "[", "currentMajorId", "]", "\n", "", "self", ".", "writeXMLSentence", "(", "exampleQueue", ",", "predictionsByExample", ",", "sentenceObject", ",", "classSet", ",", "classIds", ",", "goldSentence", "=", "goldSentence", ",", "exampleStyle", "=", "exampleStyle", ",", "structureAnalyzer", "=", "structureAnalyzer", ")", "# process queue", "\n", "progress", ".", "update", "(", "len", "(", "exampleQueue", ")", ",", "\"Writing examples (\"", "+", "exampleQueue", "[", "-", "1", "]", "[", "0", "]", "+", "\"): \"", ")", "\n", "", "exampleQueue", "=", "[", "]", "\n", "predictionsByExample", "=", "{", "}", "\n", "prevMajorIds", ".", "add", "(", "currentMajorId", ")", "\n", "assert", "majorId", "not", "in", "prevMajorIds", ",", "majorId", "\n", "currentMajorId", "=", "majorId", "\n", "", "exampleQueue", ".", "append", "(", "example", ")", "# queue example", "\n", "predictionsByExample", "[", "example", "[", "0", "]", "]", "=", "prediction", "\n", "assert", "example", "[", "3", "]", "[", "\"xtype\"", "]", "==", "self", ".", "xType", ",", "str", "(", "example", "[", "3", "]", "[", "\"xtype\"", "]", ")", "+", "\"/\"", "+", "str", "(", "self", ".", "xType", ")", "\n", "\n", "# Process what is still in queue", "\n", "", "if", "currentMajorId", "!=", "None", ":", "\n", "            ", "processedSentenceIds", ".", "add", "(", "currentMajorId", ")", "\n", "sentenceObject", "=", "corpus", ".", "sentencesById", "[", "currentMajorId", "]", "\n", "goldSentence", "=", "None", "\n", "if", "goldCorpus", "!=", "None", ":", "\n", "                ", "goldSentence", "=", "goldCorpus", ".", "sentencesById", "[", "currentMajorId", "]", "\n", "", "self", ".", "writeXMLSentence", "(", "exampleQueue", ",", "predictionsByExample", ",", "sentenceObject", ",", "classSet", ",", "classIds", ",", "goldSentence", "=", "goldSentence", ",", "exampleStyle", "=", "exampleStyle", ",", "structureAnalyzer", "=", "structureAnalyzer", ")", "# process queue", "\n", "progress", ".", "update", "(", "len", "(", "exampleQueue", ")", ",", "\"Writing examples (\"", "+", "exampleQueue", "[", "-", "1", "]", "[", "0", "]", "+", "\"): \"", ")", "\n", "exampleQueue", "=", "[", "]", "\n", "predictionsByExample", "=", "{", "}", "\n", "\n", "# Process sentences with no examples (e.g. to clear interactions)", "\n", "", "for", "sentenceId", "in", "sorted", "(", "corpus", ".", "sentencesById", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "sentenceId", "not", "in", "processedSentenceIds", ":", "\n", "                ", "sentenceObject", "=", "corpus", ".", "sentencesById", "[", "sentenceId", "]", "\n", "goldSentence", "=", "None", "\n", "if", "goldCorpus", "!=", "None", ":", "\n", "                    ", "goldSentence", "=", "goldCorpus", ".", "sentencesById", "[", "currentMajorId", "]", "\n", "", "self", ".", "writeXMLSentence", "(", "[", "]", ",", "{", "}", ",", "sentenceObject", ",", "classSet", ",", "classIds", ",", "goldSentence", "=", "goldSentence", ",", "exampleStyle", "=", "exampleStyle", ",", "structureAnalyzer", "=", "structureAnalyzer", ")", "\n", "\n", "# Print statistics", "\n", "", "", "if", "len", "(", "self", ".", "counts", ")", ">", "0", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "self", ".", "counts", "\n", "self", ".", "counts", "=", "defaultdict", "(", "int", ")", "\n", "\n", "# Write corpus", "\n", "", "if", "outputFile", "!=", "None", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Writing corpus to\"", ",", "outputFile", "\n", "ETUtils", ".", "write", "(", "corpus", ".", "rootElement", ",", "outputFile", ")", "\n", "", "return", "corpus", ".", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.writeXMLSentence": [[137, 139], ["None"], "methods", ["None"], ["", "def", "writeXMLSentence", "(", "self", ",", "examples", ",", "predictionsByExample", ",", "sentenceObject", ",", "classSet", ",", "classIds", ",", "goldSentence", "=", "None", ",", "exampleStyle", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.assertSameSentence": [[140, 150], ["example[].rsplit", "len", "str", "str"], "methods", ["None"], ["", "def", "assertSameSentence", "(", "self", ",", "examples", ",", "sentenceId", "=", "None", ")", ":", "\n", "        ", "currentSetMajorId", "=", "None", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "majorId", ",", "minorId", "=", "example", "[", "0", "]", ".", "rsplit", "(", "\".x\"", ",", "1", ")", "\n", "if", "currentSetMajorId", "==", "None", ":", "\n", "                ", "currentSetMajorId", "=", "majorId", "\n", "", "else", ":", "\n", "                ", "assert", "currentSetMajorId", "==", "majorId", ",", "str", "(", "currentSetMajorId", ")", "+", "\"/\"", "+", "str", "(", "majorId", ")", "\n", "", "", "if", "sentenceId", "!=", "None", "and", "len", "(", "examples", ")", ">", "0", ":", "\n", "            ", "assert", "sentenceId", "==", "currentSetMajorId", ",", "sentenceId", "+", "\"/\"", "+", "currentSetMajorId", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.removeChildren": [[151, 170], ["element.findall", "removed.append", "element.remove", "childAttributes.iteritems", "removed.append", "element.remove", "childElement.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "removeChildren", "(", "self", ",", "element", ",", "childTags", ",", "childAttributes", "=", "None", ")", ":", "\n", "        ", "removed", "=", "[", "]", "\n", "for", "tag", "in", "childTags", ":", "\n", "            ", "childElements", "=", "element", ".", "findall", "(", "tag", ")", "\n", "if", "childElements", "!=", "None", ":", "\n", "                ", "for", "childElement", "in", "childElements", ":", "\n", "                    ", "if", "childAttributes", "==", "None", ":", "\n", "                        ", "removed", ".", "append", "(", "childElement", ")", "\n", "element", ".", "remove", "(", "childElement", ")", "\n", "", "else", ":", "\n", "                        ", "removeElement", "=", "True", "\n", "for", "k", ",", "v", "in", "childAttributes", ".", "iteritems", "(", ")", ":", "\n", "                            ", "if", "childElement", ".", "get", "(", "k", ")", "!=", "v", ":", "\n", "                                ", "removeElement", "=", "False", "\n", "break", "\n", "", "", "if", "removeElement", ":", "\n", "                            ", "removed", ".", "append", "(", "childElement", ")", "\n", "element", ".", "remove", "(", "childElement", ")", "\n", "", "", "", "", "", "return", "removed", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.removeNonNameEntities": [[171, 185], ["sentenceElement.findall", "len", "entityElement.get", "removed.append", "sentenceElement.remove"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "removeNonNameEntities", "(", "self", ",", "sentenceElement", ")", ":", "\n", "        ", "\"\"\"\n        Removes non-name entities and returns number of entities\n        before removal.\n        \"\"\"", "\n", "entityElements", "=", "sentenceElement", ".", "findall", "(", "\"entity\"", ")", "\n", "removed", "=", "[", "]", "\n", "if", "entityElements", "!=", "None", ":", "\n", "            ", "entityCount", "=", "len", "(", "entityElements", ")", "# get the count _before_ removing entities", "\n", "for", "entityElement", "in", "entityElements", ":", "\n", "                ", "if", "entityElement", ".", "get", "(", "\"given\"", ")", "in", "(", "None", ",", "\"False\"", ")", ":", "# interaction word", "\n", "                    ", "removed", ".", "append", "(", "entityElement", ")", "\n", "sentenceElement", ".", "remove", "(", "entityElement", ")", "\n", "", "", "", "return", "removed", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.isNegative": [[186, 194], ["classSet.getName"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getName"], ["", "def", "isNegative", "(", "self", ",", "prediction", ",", "classSet", "=", "None", ")", ":", "\n", "        ", "if", "classSet", "==", "None", ":", "# binary classification", "\n", "            ", "if", "prediction", "[", "0", "]", ">", "0", ":", "\n", "                ", "return", "False", "\n", "", "else", ":", "\n", "                ", "return", "True", "\n", "", "", "else", ":", "\n", "            ", "return", "classSet", ".", "getName", "(", "prediction", "[", "0", "]", ")", "==", "\"neg\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getElementTypes": [[195, 207], ["classSet.getName().split", "range", "str", "str", "classSet.getName", "len", "Utils.determineNewType", "Utils.determineNewType"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getName"], ["", "", "def", "getElementTypes", "(", "self", ",", "prediction", ",", "classSet", "=", "None", ",", "classIds", "=", "None", ",", "unmergeEPINegText", "=", "None", ")", ":", "\n", "        ", "if", "classSet", "==", "None", ":", "# binary classification", "\n", "            ", "if", "prediction", "[", "0", "]", ">", "0", ":", "\n", "                ", "return", "[", "str", "(", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "return", "[", "str", "(", "False", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "eTypes", "=", "classSet", ".", "getName", "(", "prediction", "[", "0", "]", ")", ".", "split", "(", "\"---\"", ")", "# split merged types", "\n", "if", "unmergeEPINegText", "!=", "None", ":", "# an element text was provided", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "eTypes", ")", ")", ":", "\n", "                    ", "eTypes", "[", "i", "]", "=", "ResolveEPITriggerTypes", ".", "determineNewType", "(", "eTypes", "[", "i", "]", ",", "unmergeEPINegText", ")", "\n", "", "", "", "return", "eTypes", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.setElementType": [[208, 230], ["element.get", "range", "str", "str", "element.set", "classSet.getName", "len", "classSet.getName", "Utils.determineNewType", "Utils.determineNewType", "InteractionXML.ResolveEPITriggerTypes.determineNewType", "str", "classSet.getName"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getName", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getName", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getName"], ["", "def", "setElementType", "(", "self", ",", "element", ",", "prediction", ",", "classSet", "=", "None", ",", "classIds", "=", "None", ",", "unmergeEPINeg", "=", "False", ")", ":", "\n", "        ", "eText", "=", "element", ".", "get", "(", "\"text\"", ")", "\n", "if", "classSet", "==", "None", ":", "# binary classification", "\n", "            ", "if", "prediction", "[", "0", "]", ">", "0", ":", "\n", "                ", "element", ".", "attrib", "[", "\"type\"", "]", "=", "str", "(", "True", ")", "\n", "", "else", ":", "\n", "                ", "element", ".", "attrib", "[", "\"type\"", "]", "=", "str", "(", "False", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "unmergeEPINeg", ":", "\n", "                ", "element", ".", "set", "(", "\"type\"", ",", "ResolveEPITriggerTypes", ".", "determineNewType", "(", "classSet", ".", "getName", "(", "prediction", "[", "0", "]", ")", ",", "eText", ")", ")", "\n", "", "else", ":", "\n", "                ", "element", ".", "attrib", "[", "\"type\"", "]", "=", "classSet", ".", "getName", "(", "prediction", "[", "0", "]", ")", "\n", "", "classWeights", "=", "prediction", "[", "1", ":", "]", "\n", "predictionString", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "classWeights", ")", ")", ":", "\n", "                ", "if", "predictionString", "!=", "\"\"", ":", "\n", "                    ", "predictionString", "+=", "\",\"", "\n", "", "className", "=", "classSet", ".", "getName", "(", "classIds", "[", "i", "]", ")", "\n", "if", "unmergeEPINeg", ":", "\n", "                    ", "className", "=", "InteractionXML", ".", "ResolveEPITriggerTypes", ".", "determineNewType", "(", "className", ",", "eText", ")", "\n", "", "predictionString", "+=", "className", "+", "\":\"", "+", "str", "(", "classWeights", "[", "i", "]", ")", "\n", "", "element", ".", "attrib", "[", "\"predictions\"", "]", "=", "predictionString", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getPredictionStrengthString": [[231, 242], ["range", "len", "classSet.getName", "str", "classSet.getName"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getName", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.IdSet.IdSet.getName"], ["", "", "def", "getPredictionStrengthString", "(", "self", ",", "prediction", ",", "classSet", ",", "classIds", ",", "skipClasses", "=", "None", ")", ":", "\n", "        ", "classWeights", "=", "prediction", "[", "1", ":", "]", "\n", "predictionString", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "classWeights", ")", ")", ":", "\n", "            ", "className", "=", "classSet", ".", "getName", "(", "classIds", "[", "i", "]", ")", "\n", "if", "skipClasses", "!=", "None", "and", "className", "in", "skipClasses", ":", "\n", "                ", "continue", "\n", "", "if", "predictionString", "!=", "\"\"", ":", "\n", "                ", "predictionString", "+=", "\",\"", "\n", "", "predictionString", "+=", "classSet", ".", "getName", "(", "classIds", "[", "i", "]", ")", "+", "\":\"", "+", "str", "(", "classWeights", "[", "i", "]", ")", "\n", "", "return", "predictionString", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.__init__": [[11, 14], ["SentenceExampleWriter.SentenceExampleWriter.SentenceExampleWriter.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "xType", "=", "\"um\"", "\n", "SentenceExampleWriter", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.getInteractionsAndRelations": [[15, 25], ["interaction.get", "interactionsToKeep.append", "interaction.get", "relations.append"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getInteractionsAndRelations", "(", "self", ",", "interactions", ")", ":", "\n", "# filter interactions", "\n", "        ", "interactionsToKeep", "=", "[", "]", "\n", "relations", "=", "[", "]", "\n", "for", "interaction", "in", "interactions", ":", "\n", "            ", "if", "interaction", ".", "get", "(", "\"type\"", ")", "!=", "\"neg\"", ":", "\n", "                ", "interactionsToKeep", ".", "append", "(", "interaction", ")", "\n", "", "if", "interaction", ".", "get", "(", "\"event\"", ")", "!=", "\"True\"", ":", "\n", "                ", "relations", ".", "append", "(", "interaction", ")", "\n", "", "", "return", "interactionsToKeep", ",", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapInteractions": [[26, 38], ["interaction.get", "interactionsByEntity[].append", "interactionsByEntity.has_key", "entity.get", "interaction.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "mapInteractions", "(", "self", ",", "interactions", ",", "entities", ")", ":", "\n", "        ", "interactionsByEntity", "=", "{", "}", "\n", "interactionsById", "=", "{", "}", "\n", "for", "entity", "in", "entities", ":", "\n", "            ", "interactionsByEntity", "[", "entity", ".", "get", "(", "\"id\"", ")", "]", "=", "[", "]", "\n", "", "for", "interaction", "in", "interactions", ":", "\n", "            ", "e1Id", "=", "interaction", ".", "get", "(", "\"e1\"", ")", "\n", "if", "not", "interactionsByEntity", ".", "has_key", "(", "e1Id", ")", ":", "\n", "                ", "interactionsByEntity", "[", "e1Id", "]", "=", "[", "]", "\n", "", "interactionsByEntity", "[", "e1Id", "]", ".", "append", "(", "interaction", ")", "\n", "interactionsById", "[", "interaction", ".", "get", "(", "\"id\"", ")", "]", "=", "interaction", "\n", "", "return", "interactionsByEntity", ",", "interactionsById", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapEntities": [[39, 55], ["entity.get", "entity.get", "UnmergingExampleWriter.UnmergingExampleWriter.entitiesByHeadByType.has_key", "entity.get", "[].append", "UnmergingExampleWriter.UnmergingExampleWriter.entitiesByHeadByType[].has_key"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "mapEntities", "(", "self", ",", "entities", ")", ":", "\n", "# Mapping for connecting the events", "\n", "        ", "self", ".", "entitiesByHeadByType", "=", "{", "}", "\n", "for", "entity", "in", "entities", ":", "\n", "# by offset", "\n", "            ", "offset", "=", "entity", ".", "get", "(", "\"headOffset\"", ")", "\n", "if", "not", "self", ".", "entitiesByHeadByType", ".", "has_key", "(", "offset", ")", ":", "\n", "                ", "self", ".", "entitiesByHeadByType", "[", "offset", "]", "=", "{", "}", "\n", "# by type", "\n", "", "eType", "=", "entity", ".", "get", "(", "\"type\"", ")", "\n", "if", "entity", ".", "get", "(", "\"given\"", ")", "!=", "\"True\"", ":", "\n", "                ", "self", ".", "entitiesByHeadByType", "[", "offset", "]", "[", "eType", "]", "=", "[", "]", "\n", "", "else", ":", "# add names to structure", "\n", "                ", "if", "not", "self", ".", "entitiesByHeadByType", "[", "offset", "]", ".", "has_key", "(", "eType", ")", ":", "\n", "                    ", "self", ".", "entitiesByHeadByType", "[", "offset", "]", "[", "eType", "]", "=", "[", "]", "\n", "", "self", ".", "entitiesByHeadByType", "[", "offset", "]", "[", "eType", "]", ".", "append", "(", "entity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapEntityDuplicates": [[56, 65], ["e1.get", "UnmergingExampleWriter.UnmergingExampleWriter.entityToDuplicates[].add", "e1.get", "e2.get", "e1.get", "e2.get", "set", "e2.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.Model.Model.add", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "def", "mapEntityDuplicates", "(", "self", ",", "entities", ")", ":", "\n", "        ", "self", ".", "entityToDuplicates", "=", "{", "}", "\n", "for", "e1", "in", "entities", ":", "\n", "            ", "e1Id", "=", "e1", ".", "get", "(", "\"id\"", ")", "\n", "for", "e2", "in", "entities", ":", "\n", "                ", "if", "e1", ".", "get", "(", "\"type\"", ")", "==", "e2", ".", "get", "(", "\"type\"", ")", "and", "e1", ".", "get", "(", "\"headOffset\"", ")", "==", "e2", ".", "get", "(", "\"headOffset\"", ")", ":", "\n", "                    ", "if", "e1Id", "not", "in", "self", ".", "entityToDuplicates", ":", "\n", "                        ", "self", ".", "entityToDuplicates", "[", "e1Id", "]", "=", "set", "(", ")", "\n", "", "self", ".", "entityToDuplicates", "[", "e1Id", "]", ".", "add", "(", "e2", ".", "get", "(", "\"id\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapExamples": [[66, 78], ["sentenceObject.entitiesById.keys", "exampleByEntityId[].append", "exampleByEntityId.has_key"], "methods", ["None"], ["", "", "", "", "def", "mapExamples", "(", "self", ",", "examples", ",", "sentenceObject", ")", ":", "\n", "        ", "entityKeys", "=", "sentenceObject", ".", "entitiesById", ".", "keys", "(", ")", "\n", "exampleByEntityId", "=", "{", "}", "\n", "for", "example", "in", "examples", ":", "\n", "#if predictionsByExample[example[0]][0] == 1: # negative", "\n", "#    continue", "\n", "            ", "eId", "=", "example", "[", "3", "]", "[", "\"e\"", "]", "\n", "assert", "eId", "in", "entityKeys", "\n", "if", "not", "exampleByEntityId", ".", "has_key", "(", "eId", ")", ":", "\n", "                ", "exampleByEntityId", "[", "eId", "]", "=", "[", "]", "\n", "", "exampleByEntityId", "[", "eId", "]", ".", "append", "(", "example", ")", "\n", "", "return", "exampleByEntityId", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.connectArgumentsToExamples": [[79, 98], ["[].split", "iId.split", "UnmergingExampleWriter.UnmergingExampleWriter.isIntersentence", "arguments.append", "arg.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.isIntersentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "connectArgumentsToExamples", "(", "self", ",", "examples", ",", "predictionsByExample", ",", "interactionsById", ",", "entityById", ")", ":", "\n", "# Gather arguments for predicted, unmerged events", "\n", "        ", "argumentsByExample", "=", "{", "}", "\n", "for", "example", "in", "examples", ":", "\n", "#print predictionsByExample[example[0]]", "\n", "            ", "if", "predictionsByExample", "[", "example", "[", "0", "]", "]", "[", "0", "]", "==", "1", ":", "# negative", "\n", "                ", "continue", "\n", "", "arguments", "=", "[", "]", "\n", "for", "iId", "in", "example", "[", "3", "]", "[", "\"i\"", "]", ".", "split", "(", "\",\"", ")", ":", "\n", "                ", "if", "iId", "==", "\"\"", ":", "# For example Process events can have 0 arguments", "\n", "                    ", "break", "\n", "", "argType", ",", "iId", "=", "iId", ".", "split", "(", "\"=\"", ")", "\n", "arg", "=", "interactionsById", "[", "iId", "]", "\n", "if", "self", ".", "isIntersentence", "(", "arg", ",", "entityById", ")", ":", "\n", "                    ", "continue", "\n", "", "assert", "arg", ".", "get", "(", "\"type\"", ")", "!=", "\"neg\"", "\n", "arguments", ".", "append", "(", "arg", ")", "\n", "", "argumentsByExample", "[", "example", "[", "0", "]", "]", "=", "arguments", "\n", "", "return", "argumentsByExample", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.insertRelations": [[99, 115], ["relation.get", "relation.get", "origE1.get", "origE1.get", "origE2.get", "origE2.get", "UnmergingExampleWriter.UnmergingExampleWriter.addInteraction"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.addInteraction"], ["", "def", "insertRelations", "(", "self", ",", "relations", ",", "entityById", ")", ":", "\n", "        ", "for", "relation", "in", "relations", ":", "\n", "            ", "e1Id", "=", "relation", ".", "get", "(", "\"e1\"", ")", "\n", "e2Id", "=", "relation", ".", "get", "(", "\"e2\"", ")", "\n", "if", "e2Id", "not", "in", "entityById", ":", "# intersentence relation, skip", "\n", "                ", "continue", "\n", "", "origE1", "=", "entityById", "[", "e1Id", "]", "\n", "origE2", "=", "entityById", "[", "e2Id", "]", "\n", "e1Type", "=", "origE1", ".", "get", "(", "\"type\"", ")", "\n", "e1Offset", "=", "origE1", ".", "get", "(", "\"headOffset\"", ")", "\n", "e2Type", "=", "origE2", ".", "get", "(", "\"type\"", ")", "\n", "e2Offset", "=", "origE2", ".", "get", "(", "\"headOffset\"", ")", "\n", "\n", "for", "e1", "in", "self", ".", "entitiesByHeadByType", "[", "e1Offset", "]", "[", "e1Type", "]", ":", "\n", "                ", "for", "e2", "in", "self", ".", "entitiesByHeadByType", "[", "e2Offset", "]", "[", "e2Type", "]", ":", "\n", "                    ", "self", ".", "addInteraction", "(", "e1", ",", "e2", ",", "relation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.insertExamples": [[116, 169], ["len", "positiveExamples.append", "len", "sentenceObject.sentence.get", "len", "UnmergingExampleWriter.UnmergingExampleWriter.argumentEntitiesExist", "UnmergingExampleWriter.UnmergingExampleWriter.getPredictionStrength", "UnmergingExampleWriter.UnmergingExampleWriter.addEvent", "sentenceObject.sentence.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.argumentEntitiesExist", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.getPredictionStrength", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.addEvent", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "", "def", "insertExamples", "(", "self", ",", "examples", ",", "predictionsByExample", ",", "argumentsByExample", ",", "sentenceObject", ",", "classSet", ",", "classIds", ",", "cutoff", "=", "100", ")", ":", "\n", "        ", "positiveExamples", "=", "[", "]", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "if", "predictionsByExample", "[", "example", "[", "0", "]", "]", "[", "0", "]", "==", "1", ":", "# negative", "\n", "                ", "continue", "\n", "", "positiveExamples", ".", "append", "(", "example", ")", "\n", "# Loop until all positive examples are added. This process", "\n", "# assumes that the events (mostly) form a directed acyclic", "\n", "# graph, which can written by \"growing\" the structure from", "\n", "# the \"leaf\" events, and consecutively adding levels of", "\n", "# nesting events.", "\n", "", "examplesLeft", "=", "len", "(", "positiveExamples", ")", "\n", "exampleAdded", "=", "{", "}", "\n", "for", "example", "in", "positiveExamples", ":", "\n", "            ", "exampleAdded", "[", "example", "[", "0", "]", "]", "=", "False", "\n", "", "forceAdd", "=", "False", "\n", "forcedCount", "=", "0", "\n", "while", "examplesLeft", ">", "0", ":", "\n", "            ", "if", "len", "(", "self", ".", "newEntities", ")", ">", "cutoff", ":", "\n", "                ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, sentence\"", ",", "sentenceObject", ".", "sentence", ".", "get", "(", "\"id\"", ")", ",", "\"has generated more than\"", ",", "cutoff", ",", "\"events, skipping the rest.\"", "\n", "break", "\n", "", "examplesAddedThisRound", "=", "0", "\n", "# For each round, loop through the potentially remaining examples", "\n", "for", "example", "in", "positiveExamples", ":", "\n", "                ", "if", "len", "(", "self", ".", "newEntities", ")", ">", "cutoff", ":", "\n", "                    ", "print", ">>", "sys", ".", "stderr", ",", "\"Warning, sentence\"", ",", "sentenceObject", ".", "sentence", ".", "get", "(", "\"id\"", ")", ",", "\"has generated more than\"", ",", "cutoff", ",", "\"entities, skipping the rest.\"", "\n", "break", "\n", "", "if", "exampleAdded", "[", "example", "[", "0", "]", "]", ":", "# This event has already been inserted", "\n", "                    ", "continue", "\n", "", "arguments", "=", "argumentsByExample", "[", "example", "[", "0", "]", "]", "\n", "# An event can be added if all of its argument events have already", "\n", "# been added. Addition is forced if lack of argument events blocks", "\n", "# the process.", "\n", "if", "forceAdd", "or", "self", ".", "argumentEntitiesExist", "(", "arguments", ",", "sentenceObject", ")", ":", "\n", "                    ", "predictionStrength", "=", "self", ".", "getPredictionStrength", "(", "example", ",", "predictionsByExample", ",", "classSet", ",", "classIds", ")", "\n", "self", ".", "addEvent", "(", "example", ",", "arguments", ",", "sentenceObject", ",", "forceAdd", ",", "predictionStrength", ",", "exampleNotes", "=", "example", "[", "3", "]", ")", "\n", "exampleAdded", "[", "example", "[", "0", "]", "]", "=", "True", "\n", "examplesLeft", "-=", "1", "\n", "examplesAddedThisRound", "+=", "1", "\n", "forceAdd", "=", "False", "\n", "", "", "if", "examplesLeft", ">", "0", "and", "examplesAddedThisRound", "==", "0", ":", "\n", "# If there are examples left, but nothing was added, this", "\n", "# means that some nested events are missing. Theoretically", "\n", "# this could also be because two events are referring to", "\n", "# each other, preventing each other's insertion. In any", "\n", "# case this is solved by simply forcing the addition of ", "\n", "# the first non-inserted event, by creating 0-argument", "\n", "# entities for its argument events.", "\n", "#forcedCount += 1", "\n", "#forceAdd = True", "\n", "\n", "# skip the rest, as the structure will be invalid anyway", "\n", "                ", "examplesLeft", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.writeXMLSentence": [[170, 209], ["sentenceElement.get", "UnmergingExampleWriter.UnmergingExampleWriter.assertSameSentence", "sentenceElement.find", "UnmergingExampleWriter.UnmergingExampleWriter.removeChildren", "UnmergingExampleWriter.UnmergingExampleWriter.getInteractionsAndRelations", "UnmergingExampleWriter.UnmergingExampleWriter.removeNonNameEntities", "UnmergingExampleWriter.UnmergingExampleWriter.mapInteractions", "Utils.getNextFreeId", "Utils.getNextFreeId", "Utils.getNextFreeId", "Utils.getNextFreeId", "UnmergingExampleWriter.UnmergingExampleWriter.mapEntities", "UnmergingExampleWriter.UnmergingExampleWriter.mapExamples", "UnmergingExampleWriter.UnmergingExampleWriter.connectArgumentsToExamples", "UnmergingExampleWriter.UnmergingExampleWriter.mapEntityDuplicates", "UnmergingExampleWriter.UnmergingExampleWriter.insertExamples", "UnmergingExampleWriter.UnmergingExampleWriter.insertRelations", "sentenceElement.find", "sentenceElement.remove", "sentenceElement.findall", "sentenceElement.findall", "sentenceElement.append", "sentenceElement.append"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.assertSameSentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.removeChildren", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.getInteractionsAndRelations", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.removeNonNameEntities", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapInteractions", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getNextFreeId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getNextFreeId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getNextFreeId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.InteractionXML.IDUtils.getNextFreeId", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapEntities", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.connectArgumentsToExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.mapEntityDuplicates", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.insertExamples", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.insertRelations"], ["", "", "", "def", "writeXMLSentence", "(", "self", ",", "examples", ",", "predictionsByExample", ",", "sentenceObject", ",", "classSet", ",", "classIds", ",", "goldSentence", "=", "None", ",", "exampleStyle", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "sentenceElement", "=", "sentenceObject", ".", "sentence", "\n", "self", ".", "sentenceId", "=", "sentenceElement", ".", "get", "(", "\"id\"", ")", "\n", "self", ".", "assertSameSentence", "(", "examples", ",", "self", ".", "sentenceId", ")", "\n", "# detach analyses-element", "\n", "sentenceAnalysesElement", "=", "None", "\n", "sentenceAnalysesElement", "=", "sentenceElement", ".", "find", "(", "\"sentenceanalyses\"", ")", "\n", "if", "sentenceAnalysesElement", "==", "None", ":", "\n", "            ", "sentenceAnalysesElement", "=", "sentenceElement", ".", "find", "(", "\"analyses\"", ")", "\n", "", "if", "sentenceAnalysesElement", "!=", "None", ":", "\n", "            ", "sentenceElement", ".", "remove", "(", "sentenceAnalysesElement", ")", "\n", "\n", "# remove pairs and interactions", "\n", "", "interactions", "=", "self", ".", "removeChildren", "(", "sentenceElement", ",", "[", "\"interaction\"", "]", ")", "\n", "arguments", ",", "relations", "=", "self", ".", "getInteractionsAndRelations", "(", "interactions", ")", "\n", "# remove entities", "\n", "entities", "=", "self", ".", "removeNonNameEntities", "(", "sentenceElement", ")", "\n", "interactionsByEntity", ",", "interactionsById", "=", "self", ".", "mapInteractions", "(", "arguments", "+", "relations", ",", "sentenceObject", ".", "entities", ")", "\n", "\n", "self", ".", "entityCount", "=", "IDUtils", ".", "getNextFreeId", "(", "sentenceElement", ".", "findall", "(", "\"entity\"", ")", ")", "\n", "self", ".", "interactionCount", "=", "IDUtils", ".", "getNextFreeId", "(", "sentenceElement", ".", "findall", "(", "\"interaction\"", ")", ")", "\n", "self", ".", "newEntities", "=", "[", "]", "\n", "self", ".", "newInteractions", "=", "[", "]", "\n", "\n", "self", ".", "mapEntities", "(", "sentenceObject", ".", "entities", ")", "\n", "exampleByEntityId", "=", "self", ".", "mapExamples", "(", "examples", ",", "sentenceObject", ")", "\n", "argumentsByExample", "=", "self", ".", "connectArgumentsToExamples", "(", "examples", ",", "predictionsByExample", ",", "interactionsById", ",", "sentenceObject", ".", "entitiesById", ")", "\n", "self", ".", "mapEntityDuplicates", "(", "sentenceObject", ".", "entities", ")", "\n", "\n", "self", ".", "insertExamples", "(", "examples", ",", "predictionsByExample", ",", "argumentsByExample", ",", "sentenceObject", ",", "classSet", ",", "classIds", ")", "\n", "self", ".", "insertRelations", "(", "relations", ",", "sentenceObject", ".", "entitiesById", ")", "\n", "\n", "# Attach the new elements", "\n", "for", "element", "in", "self", ".", "newEntities", "+", "self", ".", "newInteractions", ":", "\n", "            ", "sentenceElement", ".", "append", "(", "element", ")", "\n", "\n", "# re-attach the analyses-element", "\n", "", "if", "sentenceAnalysesElement", "!=", "None", ":", "\n", "            ", "sentenceElement", ".", "append", "(", "sentenceAnalysesElement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.argumentEntitiesExist": [[466, 482], ["arg.get", "origE2.get", "origE2.get", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "def", "argumentEntitiesExist", "(", "self", ",", "arguments", ",", "sentenceObject", ")", ":", "\n", "        ", "\"\"\"\n        Checks whether entity elements have already been created \n        for the argument entities, i.e. whether the argument events\n        have been inserted.\n        \"\"\"", "\n", "for", "arg", "in", "arguments", ":", "\n", "            ", "e2Id", "=", "arg", ".", "get", "(", "\"e2\"", ")", "\n", "if", "e2Id", "not", "in", "sentenceObject", ".", "entitiesById", ":", "# intersentence interaction", "\n", "                ", "continue", "\n", "", "origE2", "=", "sentenceObject", ".", "entitiesById", "[", "e2Id", "]", "\n", "e2HeadOffset", "=", "origE2", ".", "get", "(", "\"headOffset\"", ")", "\n", "e2Type", "=", "origE2", ".", "get", "(", "\"type\"", ")", "\n", "if", "len", "(", "self", ".", "entitiesByHeadByType", "[", "e2HeadOffset", "]", "[", "e2Type", "]", ")", "==", "0", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.addEvent": [[483, 527], ["len", "range", "Utils.combine", "Utils.combine", "UnmergingExampleWriter.UnmergingExampleWriter.addEntity", "range", "len", "len", "arg.get", "arg.get", "sentenceObject.sentence.get", "UnmergingExampleWriter.UnmergingExampleWriter.set", "len", "UnmergingExampleWriter.UnmergingExampleWriter.addInteraction", "origE2.get", "origE2.get", "str", "len", "x.get", "x.get", "x.get", "origE2.get", "UnmergingExampleWriter.UnmergingExampleWriter.addEntity"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.combine.combine", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Libraries.combine.combine", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.addEntity", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.addInteraction", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.addEntity"], ["", "def", "addEvent", "(", "self", ",", "example", ",", "arguments", ",", "sentenceObject", ",", "forceAdd", "=", "False", ",", "predictionStrength", "=", "None", ",", "exampleNotes", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "arguments", ")", "==", "0", ":", "# A zero-argument event", "\n", "            ", "e1Id", "=", "example", "[", "3", "]", "[", "\"e\"", "]", "\n", "origE1", "=", "sentenceObject", ".", "entitiesById", "[", "e1Id", "]", "\n", "entityCombinations", "=", "[", "None", "]", "\n", "", "else", ":", "\n", "# Collect e2 entities linked by this event", "\n", "            ", "e1Id", "=", "None", "\n", "origE1", "=", "None", "\n", "argEntities", "=", "[", "[", "]", "]", "*", "(", "len", "(", "arguments", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "arguments", ")", ")", ":", "\n", "                ", "arg", "=", "arguments", "[", "i", "]", "\n", "argE1Id", "=", "arg", ".", "get", "(", "\"e1\"", ")", "\n", "# Take the entity trigger node from the e1 attribute of the argument", "\n", "if", "e1Id", "!=", "None", ":", "# trigger has already been found", "\n", "                    ", "assert", "argE1Id", "in", "self", ".", "entityToDuplicates", "[", "e1Id", "]", ",", "(", "(", "e1Id", ",", "argE1Id", ")", ",", "example", "[", "3", "]", ",", "arguments", ")", "\n", "#assert e1Id == argE1Id, ((e1Id, argE1Id), example[3], arguments)", "\n", "", "else", ":", "# find the trigger (any of the original identical triggers is OK", "\n", "                    ", "e1Id", "=", "argE1Id", "\n", "origE1", "=", "sentenceObject", ".", "entitiesById", "[", "argE1Id", "]", "\n", "\n", "", "e2Id", "=", "arg", ".", "get", "(", "\"e2\"", ")", "\n", "if", "e2Id", "in", "sentenceObject", ".", "entitiesById", ":", "\n", "                    ", "origE2", "=", "sentenceObject", ".", "entitiesById", "[", "e2Id", "]", "\n", "e2HeadOffset", "=", "origE2", ".", "get", "(", "\"headOffset\"", ")", "\n", "e2Type", "=", "origE2", ".", "get", "(", "\"type\"", ")", "\n", "argEntities", "[", "i", "]", "=", "self", ".", "entitiesByHeadByType", "[", "e2HeadOffset", "]", "[", "e2Type", "]", "\n", "if", "len", "(", "argEntities", "[", "i", "]", ")", "==", "0", ":", "\n", "                        ", "assert", "forceAdd", "\n", "if", "origE2", ".", "get", "(", "\"given\"", ")", "!=", "\"True\"", ":", "\n", "                            ", "argEntities", "[", "i", "]", "=", "[", "self", ".", "addEntity", "(", "origE2", ")", "]", "\n", "", "else", ":", "\n", "                            ", "argEntities", "[", "i", "]", "=", "[", "origE2", "]", "\n", "", "", "", "else", ":", "\n", "                    ", "argEntities", "[", "i", "]", "=", "[", "\"INTERSENTENCE\"", "]", "\n", "", "", "entityCombinations", "=", "combine", ".", "combine", "(", "*", "argEntities", ")", "\n", "\n", "", "for", "combination", "in", "entityCombinations", ":", "\n", "            ", "assert", "origE1", "!=", "None", ",", "(", "sentenceObject", ".", "sentence", ".", "get", "(", "\"id\"", ")", ",", "exampleNotes", ",", "[", "(", "x", ".", "get", "(", "\"id\"", ")", ",", "x", ".", "get", "(", "\"e1\"", ")", ",", "x", ".", "get", "(", "\"e2\"", ")", ")", "for", "x", "in", "arguments", "]", ")", "\n", "root", "=", "self", ".", "addEntity", "(", "origE1", ")", "\n", "if", "predictionStrength", "!=", "None", ":", "\n", "                ", "root", ".", "set", "(", "\"umConf\"", ",", "str", "(", "predictionStrength", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "arguments", ")", ")", ":", "\n", "                ", "self", ".", "addInteraction", "(", "root", ",", "combination", "[", "i", "]", ",", "arguments", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.addEntity": [[528, 544], ["ET.Element", "entity.attrib.keys", "ET.Element.set", "ET.Element.get", "ET.Element.get", "[].append", "UnmergingExampleWriter.UnmergingExampleWriter.newEntities.append", "entity.get", "ET.Element.set", "UnmergingExampleWriter.UnmergingExampleWriter.entitiesByHeadByType[].has_key", "entity.get", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "", "", "def", "addEntity", "(", "self", ",", "entity", ")", ":", "\n", "        ", "entityElement", "=", "ET", ".", "Element", "(", "\"entity\"", ")", "\n", "assert", "entity", ".", "get", "(", "\"given\"", ")", "!=", "\"True\"", ",", "entity", ".", "attrib", "\n", "for", "key", "in", "entity", ".", "attrib", ".", "keys", "(", ")", ":", "# copy from template", "\n", "            ", "entityElement", ".", "set", "(", "key", ",", "entity", ".", "get", "(", "key", ")", ")", "\n", "", "entityElement", ".", "set", "(", "\"id\"", ",", "self", ".", "sentenceId", "+", "\".e\"", "+", "str", "(", "self", ".", "entityCount", ")", ")", "\n", "# Add to dictionary", "\n", "eType", "=", "entityElement", ".", "get", "(", "\"type\"", ")", "\n", "headOffset", "=", "entityElement", ".", "get", "(", "\"headOffset\"", ")", "\n", "if", "not", "self", ".", "entitiesByHeadByType", "[", "headOffset", "]", ".", "has_key", "(", "eType", ")", ":", "\n", "            ", "self", ".", "entitiesByHeadByType", "[", "headOffset", "]", "[", "eType", "]", "=", "[", "]", "\n", "", "self", ".", "entitiesByHeadByType", "[", "headOffset", "]", "[", "eType", "]", ".", "append", "(", "entityElement", ")", "\n", "self", ".", "newEntities", ".", "append", "(", "entityElement", ")", "\n", "self", ".", "entityCount", "+=", "1", "\n", "\n", "return", "entityElement", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.addInteraction": [[545, 559], ["ET.Element", "arg.attrib.keys", "ET.Element.set", "ET.Element.set", "UnmergingExampleWriter.UnmergingExampleWriter.newInteractions.append", "ET.Element.set", "e1.get", "ET.Element.set", "ET.Element.set", "arg.get", "arg.get", "e2.get", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "addInteraction", "(", "self", ",", "e1", ",", "e2", ",", "arg", ")", ":", "\n", "        ", "interactionElement", "=", "ET", ".", "Element", "(", "\"interaction\"", ")", "\n", "for", "key", "in", "arg", ".", "attrib", ".", "keys", "(", ")", ":", "# copy from template", "\n", "            ", "interactionElement", ".", "set", "(", "key", ",", "arg", ".", "get", "(", "key", ")", ")", "\n", "", "interactionElement", ".", "set", "(", "\"e1\"", ",", "e1", ".", "get", "(", "\"id\"", ")", ")", "\n", "if", "e2", "==", "\"INTERSENTENCE\"", ":", "\n", "            ", "interactionElement", ".", "set", "(", "\"e2\"", ",", "arg", ".", "get", "(", "\"e2\"", ")", ")", "# preserve original id", "\n", "", "else", ":", "\n", "            ", "interactionElement", ".", "set", "(", "\"e2\"", ",", "e2", ".", "get", "(", "\"id\"", ")", ")", "\n", "", "interactionElement", ".", "set", "(", "\"id\"", ",", "self", ".", "sentenceId", "+", "\".i\"", "+", "str", "(", "self", ".", "interactionCount", ")", ")", "\n", "self", ".", "newInteractions", ".", "append", "(", "interactionElement", ")", "\n", "self", ".", "interactionCount", "+=", "1", "\n", "\n", "return", "interactionElement", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.isIntersentence": [[560, 565], ["interaction.get", "interaction.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "isIntersentence", "(", "self", ",", "interaction", ",", "entityById", ")", ":", "\n", "        ", "if", "interaction", ".", "get", "(", "\"e1\"", ")", "not", "in", "entityById", "or", "interaction", ".", "get", "(", "\"e2\"", ")", "not", "in", "entityById", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "#e1MajorId, e1MinorId = interaction.get(\"e1\").rsplit(\".e\", 1)", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.UnmergingExampleWriter.UnmergingExampleWriter.getPredictionStrength": [[569, 577], ["UnmergingExampleWriter.UnmergingExampleWriter.getPredictionStrengthString", "len"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getPredictionStrengthString"], ["", "", "def", "getPredictionStrength", "(", "self", ",", "example", ",", "predictionsByExample", ",", "classSet", ",", "classIds", ")", ":", "\n", "        ", "prediction", "=", "predictionsByExample", "[", "example", "[", "0", "]", "]", "\n", "if", "len", "(", "prediction", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "predClass", "=", "prediction", "[", "0", "]", "\n", "#predictionStrength = [predClass]", "\n", "predictionStrength", "=", "self", ".", "getPredictionStrengthString", "(", "prediction", ",", "classSet", ",", "classIds", ")", "\n", "return", "predictionStrength", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__": [[9, 13], ["SentenceExampleWriter.SentenceExampleWriter.SentenceExampleWriter.__init__"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "xType", "=", "\"edge\"", "\n", "self", ".", "removeEdges", "=", "True", "\n", "SentenceExampleWriter", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.unmergeSeeDev": [[29, 51], ["e1.get", "e2.get", "matchedRelTypes.append", "Exception", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "unmergeSeeDev", "(", "self", ",", "iType", ",", "e1", ",", "e2", ",", "structureAnalyzer", ")", ":", "\n", "        ", "e1Type", "=", "e1", ".", "get", "(", "\"type\"", ")", "\n", "e2Type", "=", "e2", ".", "get", "(", "\"type\"", ")", "\n", "match", "=", "None", "\n", "matchedRelTypes", "=", "[", "]", "\n", "if", "\"(\"", "not", "in", "iType", "and", "iType", "!=", "\"neg\"", ":", "\n", "            ", "for", "relType", "in", "structureAnalyzer", ".", "typeMap", "[", "\"reverse\"", "]", "[", "iType", "]", ":", "\n", "                ", "relation", "=", "structureAnalyzer", ".", "relations", "[", "relType", "]", "\n", "#for relation in structureAnalyzer.relations.values():", "\n", "#if relation.type.startswith(iType) and e1Type in relation.e1Types and e2Type in relation.e2Types:", "\n", "if", "e1Type", "in", "relation", ".", "e1Types", "and", "e2Type", "in", "relation", ".", "e2Types", ":", "\n", "                    ", "matchedRelTypes", ".", "append", "(", "relation", ".", "type", ")", "\n", "if", "match", "!=", "None", ":", "\n", "                        ", "raise", "Exception", "(", "\"Multiple matching relations for example \"", "+", "str", "(", "(", "iType", ",", "e1Type", ",", "e2Type", ")", ")", "+", "\" \"", "+", "str", "(", "matchedRelTypes", ")", ")", "\n", "", "match", "=", "relation", "\n", "", "", "", "else", ":", "\n", "            ", "return", "iType", "\n", "\n", "", "if", "not", "match", ":", "\n", "            ", "return", "\"neg\"", "\n", "#raise Exception(\"No matching relation for example \" + str((iType, e1Type, e2Type)))", "\n", "", "return", "match", ".", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.getEntityByIdMap": [[52, 60], ["sentenceElement.findall", "entityElement.get"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "getEntityByIdMap", "(", "self", ",", "sentenceElement", ")", ":", "\n", "        ", "entityElements", "=", "sentenceElement", ".", "findall", "(", "\"entity\"", ")", "\n", "entityById", "=", "{", "}", "\n", "for", "entityElement", "in", "entityElements", ":", "\n", "            ", "eId", "=", "entityElement", ".", "get", "(", "\"id\"", ")", "\n", "assert", "eId", "not", "in", "entityById", ",", "eId", "\n", "entityById", "[", "eId", "]", "=", "entityElement", "\n", "", "return", "entityById", "\n", "\n"]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.writeXMLSentence": [[61, 162], ["EdgeExampleWriter.EdgeExampleWriter.assertSameSentence", "sentenceElement.get", "sentenceElement.find", "EdgeExampleWriter.EdgeExampleWriter.getEntityByIdMap", "sentenceElement.find", "sentenceElement.remove", "EdgeExampleWriter.EdgeExampleWriter.removeChildren", "example[].has_key", "EdgeExampleWriter.EdgeExampleWriter.getPredictionStrengthString", "EdgeExampleWriter.EdgeExampleWriter.getElementTypes", "sentenceElement.append", "example[].has_key", "EdgeExampleWriter.EdgeExampleWriter.unmergeSeeDev", "ET.Element", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "ET.Element.set", "sentenceElement.append", "interaction.get", "interaction.set", "sentenceElement.append", "structureAnalyzer.getValidEdgeTypes", "ET.Element.set", "structureAnalyzer.isEventArgument", "ET.Element.set", "ET.Element.set", "ET.Element.set", "structureAnalyzer.getValidEdgeTypes", "e1.get", "e2.get", "structureAnalyzer.isDirected", "ET.Element.set", "ET.Element.set", "structureAnalyzer.getArgSiteOfTypes", "structureAnalyzer.getRelationRoles", "str().strip", "str().strip", "str", "str", "e1.get", "e2.get", "e1.get", "len", "ET.Element.set", "ET.Element.set", "ET.Element.set", "str", "str", "sorted", "list"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.assertSameSentence", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.getEntityByIdMap", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.removeChildren", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getPredictionStrengthString", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.getElementTypes", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.EdgeExampleWriter.EdgeExampleWriter.unmergeSeeDev", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.wvlib_light.lwvlib.WV.get"], ["", "def", "writeXMLSentence", "(", "self", ",", "examples", ",", "predictionsByExample", ",", "sentenceObject", ",", "classSet", ",", "classIds", ",", "goldSentence", "=", "None", ",", "exampleStyle", "=", "None", ",", "structureAnalyzer", "=", "None", ")", ":", "\n", "        ", "self", ".", "assertSameSentence", "(", "examples", ")", "\n", "\n", "sentenceElement", "=", "sentenceObject", ".", "sentence", "\n", "sentenceId", "=", "sentenceElement", ".", "get", "(", "\"id\"", ")", "\n", "# detach analyses-element", "\n", "sentenceAnalysesElement", "=", "None", "\n", "sentenceAnalysesElement", "=", "sentenceElement", ".", "find", "(", "\"sentenceanalyses\"", ")", "\n", "if", "sentenceAnalysesElement", "==", "None", ":", "\n", "            ", "sentenceAnalysesElement", "=", "sentenceElement", ".", "find", "(", "\"analyses\"", ")", "\n", "", "if", "sentenceAnalysesElement", "!=", "None", ":", "\n", "            ", "sentenceElement", ".", "remove", "(", "sentenceAnalysesElement", ")", "\n", "# remove pairs and interactions", "\n", "", "if", "self", ".", "removeEdges", ":", "\n", "            ", "removed", "=", "self", ".", "removeChildren", "(", "sentenceElement", ",", "[", "\"pair\"", ",", "\"interaction\"", "]", ")", "\n", "\n", "", "entityById", "=", "self", ".", "getEntityByIdMap", "(", "sentenceElement", ")", "\n", "\n", "keepNeg", "=", "False", "\n", "if", "exampleStyle", "!=", "None", "and", "\"keep_neg\"", "in", "exampleStyle", "and", "exampleStyle", "[", "\"keep_neg\"", "]", ":", "\n", "            ", "keepNeg", "=", "True", "\n", "\n", "", "causeAfterTheme", "=", "False", "\n", "pairCount", "=", "0", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "if", "example", "[", "3", "]", ".", "has_key", "(", "\"causeAfterTheme\"", ")", ":", "\n", "                ", "causeAfterTheme", "=", "True", "\n", "", "prediction", "=", "predictionsByExample", "[", "example", "[", "0", "]", "]", "\n", "predictionString", "=", "self", ".", "getPredictionStrengthString", "(", "prediction", ",", "classSet", ",", "classIds", ")", "\n", "#iTypes = self.getElementTypes(prediction, classSet, classIds)", "\n", "#eventTypes = example[3][\"event\"].split(\"---\")", "\n", "#assert len(iTypes) == len(eventTypes), (iTypes, eventTypes)", "\n", "#for i in range(len(iTypes)): # split merged classes", "\n", "e1Id", "=", "example", "[", "3", "]", "[", "\"e1\"", "]", "\n", "e2Id", "=", "example", "[", "3", "]", "[", "\"e2\"", "]", "\n", "e1", "=", "entityById", "[", "e1Id", "]", "\n", "e2", "=", "entityById", "[", "e2Id", "]", "\n", "# directed examples are the default from edge example generation, in which case the directedness", "\n", "# of an interaction is defined by the structure analysis. Setting edge example generation as", "\n", "# undirected will override this.", "\n", "directedExample", "=", "example", "[", "3", "]", "[", "\"directed\"", "]", "\n", "for", "iType", "in", "self", ".", "getElementTypes", "(", "prediction", ",", "classSet", ",", "classIds", ")", ":", "# split merged classes", "\n", "                ", "if", "example", "[", "3", "]", ".", "has_key", "(", "\"sdb_merge\"", ")", ":", "\n", "                    ", "iType", "=", "self", ".", "unmergeSeeDev", "(", "iType", ",", "e1", ",", "e2", ",", "structureAnalyzer", ")", "\n", "# Keep negatives if requested", "\n", "", "validatedNeg", "=", "False", "\n", "if", "keepNeg", ":", "\n", "                    ", "if", "iType", "!=", "\"neg\"", "and", "iType", "not", "in", "structureAnalyzer", ".", "getValidEdgeTypes", "(", "e1", ".", "get", "(", "\"type\"", ")", ",", "e2", ".", "get", "(", "\"type\"", ")", ",", "forceUndirected", "=", "not", "directedExample", ")", ":", "\n", "                        ", "iType", "=", "\"neg\"", "\n", "validatedNeg", "=", "True", "\n", "", "", "elif", "iType", "==", "\"neg\"", ":", "\n", "                    ", "self", ".", "counts", "[", "\"removed-neg\"", "]", "+=", "1", "\n", "continue", "# skip edge element generation", "\n", "\n", "# Add only structurally valid edges (and negatives let through by keep_neg)", "\n", "", "if", "iType", "==", "\"neg\"", "or", "iType", "in", "structureAnalyzer", ".", "getValidEdgeTypes", "(", "e1", ".", "get", "(", "\"type\"", ")", ",", "e2", ".", "get", "(", "\"type\"", ")", ",", "forceUndirected", "=", "not", "directedExample", ")", ":", "\n", "#iType = iTypes[i]", "\n", "                    ", "pairElement", "=", "ET", ".", "Element", "(", "\"interaction\"", ")", "\n", "if", "not", "directedExample", ":", "\n", "                        ", "pairElement", ".", "set", "(", "\"directed\"", ",", "\"False\"", ")", "\n", "", "elif", "iType", "==", "\"neg\"", "or", "structureAnalyzer", ".", "isDirected", "(", "iType", ")", ":", "\n", "                        ", "pairElement", ".", "set", "(", "\"directed\"", ",", "\"True\"", ")", "\n", "", "if", "iType", "!=", "\"neg\"", ":", "\n", "                        ", "if", "structureAnalyzer", ".", "isEventArgument", "(", "iType", ")", ":", "#eventTypes[i] == \"True\":", "\n", "                            ", "pairElement", ".", "set", "(", "\"event\"", ",", "\"True\"", ")", "\n", "siteOfTypes", "=", "structureAnalyzer", ".", "getArgSiteOfTypes", "(", "e1", ".", "get", "(", "\"type\"", ")", ",", "iType", ")", "\n", "if", "len", "(", "siteOfTypes", ")", ">", "0", ":", "\n", "                                ", "pairElement", ".", "set", "(", "\"siteOfTypes\"", ",", "\",\"", ".", "join", "(", "sorted", "(", "list", "(", "siteOfTypes", ")", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                            ", "entityRoles", "=", "structureAnalyzer", ".", "getRelationRoles", "(", "iType", ")", "\n", "if", "entityRoles", "!=", "None", ":", "\n", "                                ", "pairElement", ".", "set", "(", "\"e1Role\"", ",", "entityRoles", "[", "0", "]", ")", "\n", "pairElement", ".", "set", "(", "\"e2Role\"", ",", "entityRoles", "[", "1", "]", ")", "\n", "", "", "", "pairElement", ".", "set", "(", "\"e1\"", ",", "e1Id", ")", "\n", "if", "\"e1DuplicateIds\"", "in", "example", "[", "3", "]", "and", "str", "(", "example", "[", "3", "]", "[", "\"e1DuplicateIds\"", "]", ")", ".", "strip", "(", ")", "!=", "\"\"", ":", "\n", "                        ", "pairElement", ".", "set", "(", "\"e1DuplicateIds\"", ",", "example", "[", "3", "]", "[", "\"e1DuplicateIds\"", "]", ")", "\n", "", "pairElement", ".", "set", "(", "\"e2\"", ",", "e2Id", ")", "\n", "if", "\"e2DuplicateIds\"", "in", "example", "[", "3", "]", "and", "str", "(", "example", "[", "3", "]", "[", "\"e2DuplicateIds\"", "]", ")", ".", "strip", "(", ")", "!=", "\"\"", ":", "\n", "                        ", "pairElement", ".", "set", "(", "\"e2DuplicateIds\"", ",", "example", "[", "3", "]", "[", "\"e2DuplicateIds\"", "]", ")", "\n", "", "if", "validatedNeg", ":", "\n", "                        ", "pairElement", ".", "set", "(", "\"validatedNeg\"", ",", "\"True\"", ")", "# a non-negative prediction made negative by structural limits", "\n", "", "pairElement", ".", "set", "(", "\"id\"", ",", "sentenceId", "+", "\".i\"", "+", "str", "(", "pairCount", ")", ")", "\n", "pairElement", ".", "set", "(", "\"type\"", ",", "iType", ")", "\n", "#self.processClassLabel(iType, pairElement)", "\n", "pairElement", ".", "set", "(", "\"conf\"", ",", "predictionString", ")", "\n", "sentenceElement", ".", "append", "(", "pairElement", ")", "\n", "pairCount", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "counts", "[", "\"invalid-\"", "+", "iType", "]", "+=", "1", "\n", "\n", "# Re-attach original themes, if needed", "\n", "", "", "", "if", "causeAfterTheme", ":", "\n", "            ", "for", "interaction", "in", "removed", ":", "\n", "                ", "if", "interaction", ".", "get", "(", "\"type\"", ")", "==", "\"Theme\"", ":", "\n", "                    ", "interaction", ".", "set", "(", "\"id\"", ",", "sentenceId", "+", "\".i\"", "+", "str", "(", "pairCount", ")", ")", "\n", "sentenceElement", ".", "append", "(", "interaction", ")", "\n", "pairCount", "+=", "1", "\n", "\n", "# re-attach the analyses-element", "\n", "", "", "", "if", "sentenceAnalysesElement", "!=", "None", ":", "\n", "            ", "sentenceElement", ".", "append", "(", "sentenceAnalysesElement", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.BioTextExampleWriter.BioTextExampleWriter.write": [[24, 61], ["UnmergingExampleWriter.UnmergingExampleWriter.UnmergingExampleWriter.writeXML", "type", "Core.readExamples", "example[].has_key", "EntityExampleWriter.EntityExampleWriter.EntityExampleWriter", "EdgeExampleWriter.EdgeExampleWriter.EdgeExampleWriter", "ModifierExampleWriter.ModifierExampleWriter.ModifierExampleWriter", "EntityRelationExampleWriter", "PhraseTriggerExampleWriter.PhraseTriggerExampleWriter.PhraseTriggerExampleWriter", "UnmergingExampleWriter.UnmergingExampleWriter.UnmergingExampleWriter"], "methods", ["home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.ExampleWriters.SentenceExampleWriter.SentenceExampleWriter.writeXML", "home.repos.pwc.inspect_result.sbnlp_2017BioNLPEvaluation.Core.ExampleUtils.readExamples"], ["@", "classmethod", "\n", "def", "write", "(", "cls", ",", "examples", ",", "predictions", ",", "corpus", ",", "outputFile", ",", "classSet", "=", "None", ",", "parse", "=", "None", ",", "tokenization", "=", "None", ",", "goldCorpus", "=", "None", ",", "insertWeights", "=", "False", ")", ":", "\n", "        ", "if", "type", "(", "examples", ")", "==", "types", ".", "StringType", ":", "\n", "            ", "print", ">>", "sys", ".", "stderr", ",", "\"Reading examples from\"", ",", "examples", "\n", "examples", "=", "ExampleUtils", ".", "readExamples", "(", "examples", ",", "False", ")", "\n", "\n", "# This looks a bit strange, but should work with the re-iterable", "\n", "# generators that readExamples returns", "\n", "", "xType", "=", "None", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "assert", "example", "[", "3", "]", ".", "has_key", "(", "\"xtype\"", ")", "\n", "xType", "=", "example", "[", "3", "]", "[", "\"xtype\"", "]", "\n", "break", "\n", "\n", "", "if", "xType", "==", "\"token\"", ":", "\n", "            ", "w", "=", "EntityExampleWriter", "(", ")", "\n", "if", "insertWeights", ":", "\n", "                ", "w", ".", "insertWeights", "=", "True", "\n", "", "", "elif", "xType", "==", "\"edge\"", ":", "\n", "            ", "w", "=", "EdgeExampleWriter", "(", ")", "\n", "", "elif", "xType", "==", "\"task3\"", ":", "\n", "            ", "w", "=", "ModifierExampleWriter", "(", ")", "\n", "", "elif", "xType", "==", "\"entRel\"", ":", "\n", "            ", "w", "=", "EntityRelationExampleWriter", "(", ")", "\n", "", "elif", "xType", "==", "\"phrase\"", ":", "\n", "            ", "w", "=", "PhraseTriggerExampleWriter", "(", ")", "\n", "#IF LOCAL", "\n", "", "elif", "xType", "==", "\"um\"", ":", "\n", "            ", "w", "=", "UnmergingExampleWriter", "(", ")", "\n", "#elif xType == \"ue\":", "\n", "#    w = UnmergedEdgeExampleWriter()", "\n", "#elif xType == \"asym\":", "\n", "#    w = AsymmetricEventExampleWriter()", "\n", "#ENDIF", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "(", "\"Unknown entity type\"", ",", "xType", ")", "\n", "", "return", "w", ".", "writeXML", "(", "examples", ",", "predictions", ",", "corpus", ",", "outputFile", ",", "classSet", ",", "parse", ",", "tokenization", ",", "goldCorpus", "=", "goldCorpus", ")", "\n", "\n"]]}