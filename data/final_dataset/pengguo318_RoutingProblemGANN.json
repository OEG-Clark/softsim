{"home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.PPO_train.TrainPPO.__init__": [[28, 37], ["VRP.VRP_PPO_Model.Memory", "VRP.VRP_PPO_Model.Agentppo"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "steps", ",", "greedy", ",", "lr", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "epoch", "=", "40", ",", "batch_size", "=", "32", ",", "conv_laysers", "=", "3", ",", "entropy_value", "=", "0.01", ",", "eps_clip", "=", "0.2", ",", "timestep", "=", "4", ",", "ppo_epoch", "=", "2", ")", ":", "\n", "\n", "        ", "self", ".", "steps", "=", "steps", "\n", "self", ".", "greedy", "=", "greedy", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "update_timestep", "=", "timestep", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "memory", "=", "Memory", "(", ")", "\n", "self", ".", "agent", "=", "Agentppo", "(", "steps", ",", "greedy", ",", "lr", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "ppo_epoch", ",", "batch_size", ",", "conv_laysers", ",", "entropy_value", ",", "eps_clip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.PPO_train.TrainPPO.run_train": [[38, 107], ["VRP.VRP_PPO_Model.Memory", "PPO_train.TrainPPO.agent.old_polic.to", "os.path.join", "range", "print", "PPO_train.TrainPPO.agent.old_polic.train", "time.time", "enumerate", "PPO_train.rollout", "cost.mean.mean.mean", "costs.append", "print", "print", "os.path.join", "os.path.join", "torch.save", "batch.to.to.to", "PPO_train.TrainPPO.agent.old_polic.act", "VRP.creat_vrp.reward1", "actions.to().detach.to().detach.to().detach", "log_p.to().detach.to().detach.to().detach", "rewards.to().detach.to().detach.to().detach", "range", "rewards2.append", "cost.mean.mean.item", "cost.mean.mean.item", "os.path.exists", "os.makedirs", "PPO_train.TrainPPO.agent.old_polic.state_dict", "x.view", "attr.view", "capcity.view", "demand.view", "VRP.VRP_PPO_Model.Memory.input_x.append", "VRP.VRP_PPO_Model.Memory.input_attr.append", "VRP.VRP_PPO_Model.Memory.actions.append", "VRP.VRP_PPO_Model.Memory.log_probs.append", "VRP.VRP_PPO_Model.Memory.rewards.append", "VRP.VRP_PPO_Model.Memory.capcity.append", "VRP.VRP_PPO_Model.Memory.demand.append", "PPO_train.TrainPPO.agent.update", "VRP.VRP_PPO_Model.Memory.def_memory", "torch.mean().item", "time.time", "times.append", "numpy.mean", "print", "actions.to().detach.to().detach.to", "log_p.to().detach.to().detach.to", "rewards.to().detach.to().detach.to", "torch.device", "torch.device", "torch.device", "torch.mean", "rewards.to().detach.to().detach.detach", "len"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Rollout_train.train", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.rollout", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Actor_critic.act", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Agentppo.update", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Memory.def_memory"], ["", "def", "run_train", "(", "self", ",", "data_loader", ",", "batch_size", ",", "valid_loder", ")", ":", "\n", "        ", "memory", "=", "Memory", "(", ")", "\n", "self", ".", "agent", ".", "old_polic", ".", "to", "(", "device", ")", "\n", "#initWeights(self.agent.old_polic)", "\n", "#initWeights(self.agent.policy)", "\n", "folder", "=", "'vrp-{}-GAT'", ".", "format", "(", "n_nodes", ")", "\n", "filename", "=", "'20201125'", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", "\n", "\n", "'''path = os.path.join(filepath,'%s' % 3)\n        if os.path.exists(path):\n            path1 = os.path.join(path, 'actor.pt')\n            self.agent.old_polic.load_state_dict(torch.load(path1, device))'''", "\n", "\n", "costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "print", "(", "'old_epoch:'", ",", "i", ",", "'***************************************'", ")", "\n", "self", ".", "agent", ".", "old_polic", ".", "train", "(", ")", "\n", "times", ",", "losses", ",", "rewards2", ",", "critic_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "start", "=", "epoch_start", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "                ", "x", ",", "attr", ",", "capcity", ",", "demand", "=", "batch", ".", "x", ",", "batch", ".", "edge_attr", ",", "batch", ".", "capcity", ",", "batch", ".", "demand", "\n", "#print(x.size(),index.size(),attr.size())", "\n", "x", ",", "attr", ",", "capcity", ",", "demand", "=", "x", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "2", ")", ",", "attr", ".", "view", "(", "batch_size", ",", "n_nodes", "*", "n_nodes", ",", "1", ")", ",", "capcity", ".", "view", "(", "batch_size", ",", "1", ")", ",", "demand", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "1", ")", "\n", "batch", "=", "batch", ".", "to", "(", "device", ")", "\n", "actions", ",", "log_p", "=", "self", ".", "agent", ".", "old_polic", ".", "act", "(", "batch", ",", "0", ",", "self", ".", "steps", ",", "batch_size", ",", "self", ".", "greedy", ",", "False", ")", "\n", "\n", "rewards", "=", "reward1", "(", "batch", ".", "x", ",", "actions", ",", "n_nodes", ")", "\n", "\n", "actions", "=", "actions", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", ".", "detach", "(", ")", "\n", "log_p", "=", "log_p", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", ".", "detach", "(", ")", "\n", "rewards", "=", "rewards", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", ".", "detach", "(", ")", "\n", "\n", "#print(actions.size(),log_p.size(),entropy.size())", "\n", "\n", "for", "i_batch", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "                    ", "memory", ".", "input_x", ".", "append", "(", "x", "[", "i_batch", "]", ")", "\n", "#memory.input_index.append(index[i_batch])", "\n", "memory", ".", "input_attr", ".", "append", "(", "attr", "[", "i_batch", "]", ")", "\n", "memory", ".", "actions", ".", "append", "(", "actions", "[", "i_batch", "]", ")", "\n", "memory", ".", "log_probs", ".", "append", "(", "log_p", "[", "i_batch", "]", ")", "\n", "memory", ".", "rewards", ".", "append", "(", "rewards", "[", "i_batch", "]", ")", "\n", "memory", ".", "capcity", ".", "append", "(", "capcity", "[", "i_batch", "]", ")", "\n", "memory", ".", "demand", ".", "append", "(", "demand", "[", "i_batch", "]", ")", "\n", "", "if", "(", "batch_idx", "+", "1", ")", "%", "self", ".", "update_timestep", "==", "0", ":", "\n", "                    ", "self", ".", "agent", ".", "update", "(", "memory", ",", "i", ")", "\n", "memory", ".", "def_memory", "(", ")", "\n", "", "rewards2", ".", "append", "(", "torch", ".", "mean", "(", "rewards", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "time_Space", "=", "100", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "time_Space", "==", "0", ":", "\n", "                    ", "end", "=", "time", ".", "time", "(", ")", "\n", "times", ".", "append", "(", "end", "-", "start", ")", "\n", "start", "=", "end", "\n", "mean_reward", "=", "np", ".", "mean", "(", "rewards2", "[", "-", "time_Space", ":", "]", ")", "\n", "print", "(", "'  Batch %d/%d, reward: %2.3f,took: %2.4fs'", "%", "\n", "(", "batch_idx", ",", "len", "(", "data_loader", ")", ",", "mean_reward", ",", "\n", "times", "[", "-", "1", "]", ")", ")", "\n", "", "", "cost", "=", "rollout", "(", "self", ".", "agent", ".", "policy", ",", "valid_loder", ",", "batch_size", ",", "self", ".", "steps", ")", "\n", "cost", "=", "cost", ".", "mean", "(", ")", "\n", "costs", ".", "append", "(", "cost", ".", "item", "(", ")", ")", "\n", "print", "(", "'Problem:TSP'", "'%s'", "%", "n_nodes", ",", "'/ Average distance:'", ",", "cost", ".", "item", "(", ")", ")", "\n", "print", "(", "costs", ")", "\n", "epoch_dir", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'%s'", "%", "i", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "epoch_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "epoch_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "epoch_dir", ",", "'actor.pt'", ")", "\n", "torch", ".", "save", "(", "self", ".", "agent", ".", "old_polic", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "", "", "def", "train", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.PPO_train.rollout": [[16, 27], ["model.eval", "torch.cat", "VRP.creat_vrp.reward1.cpu", "torch.no_grad", "model.act", "VRP.creat_vrp.reward1", "PPO_train.rollout.eval_model_bat"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Actor_critic.act", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1"], ["def", "rollout", "(", "model", ",", "dataset", ",", "batch_size", ",", "steps", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "def", "eval_model_bat", "(", "bat", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cost", ",", "_", "=", "model", ".", "act", "(", "bat", ",", "0", ",", "steps", ",", "batch_size", ",", "True", ",", "False", ")", "\n", "\n", "cost", "=", "reward1", "(", "bat", ".", "x", ",", "cost", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "", "return", "cost", ".", "cpu", "(", ")", "\n", "", "totall_cost", "=", "torch", ".", "cat", "(", "[", "eval_model_bat", "(", "bat", ".", "to", "(", "device", ")", ")", "for", "bat", "in", "dataset", "]", ",", "0", ")", "\n", "return", "totall_cost", "\n", "", "class", "TrainPPO", ":", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.PPO_train.train": [[107, 142], ["collections.OrderedDict", "RunBuilder.get_runs", "print", "VRP.creat_vrp.creat_data", "VRP.creat_vrp.creat_data", "print", "PPO_train.TrainPPO", "PPO_train.TrainPPO.run_train", "collections.namedtuple", "itertools.product", "collections.OrderedDict.keys", "RunBuilder.get_runs.append", "collections.OrderedDict.values", "collections.namedtuple."], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_data", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_data", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_train.TrainPPO.run_train"], ["", "", "", "def", "train", "(", ")", ":", "\n", "    ", "class", "RunBuilder", "(", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "get_runs", "(", "params", ")", ":", "\n", "            ", "Run", "=", "namedtuple", "(", "'Run'", ",", "params", ".", "keys", "(", ")", ")", "\n", "runs", "=", "[", "]", "\n", "for", "v", "in", "product", "(", "*", "params", ".", "values", "(", ")", ")", ":", "\n", "                ", "runs", ".", "append", "(", "Run", "(", "*", "v", ")", ")", "\n", "", "return", "runs", "\n", "\n", "", "", "params", "=", "OrderedDict", "(", "\n", "lr", "=", "[", "3e-4", "]", ",", "\n", "hidden_node_dim", "=", "[", "128", "]", ",", "\n", "hidden_edge_dim", "=", "[", "16", "]", ",", "\n", "epoch", "=", "[", "100", "]", ",", "\n", "batch_size", "=", "[", "512", "]", ",", "\n", "conv_laysers", "=", "[", "4", "]", ",", "\n", "entropy_value", "=", "[", "0.01", "]", ",", "\n", "eps_clip", "=", "[", "0.2", "]", ",", "\n", "timestep", "=", "[", "1", "]", ",", "\n", "ppo_epoch", "=", "[", "3", "]", ",", "\n", "data_size", "=", "[", "512000", "]", ",", "\n", "valid_size", "=", "[", "10000", "]", "\n", ")", "\n", "runs", "=", "RunBuilder", ".", "get_runs", "(", "params", ")", "\n", "\n", "for", "lr", ",", "hidden_node_dim", ",", "hidden_edge_dim", ",", "epoch", ",", "batch_size", ",", "conv_laysers", ",", "entropy_value", ",", "eps_clip", ",", "timestep", ",", "ppo_epoch", ",", "data_size", ",", "valid_size", "in", "runs", ":", "\n", "        ", "print", "(", "'lr'", ",", "'batch_size'", ",", "'hidden_node_dim'", ",", "'hidden_edge_dim'", ",", "'conv_laysers'", ",", "'epoch,batch_size'", ",", "\n", "'entropy_value'", ",", "'eps_clip'", ",", "'timestep:'", ",", "'data_size'", ",", "'valid_size'", ",", "lr", ",", "hidden_node_dim", ",", "\n", "hidden_edge_dim", ",", "epoch", ",", "batch_size", ",", "conv_laysers", ",", "entropy_value", ",", "eps_clip", ",", "timestep", ",", "data_size", ",", "valid_size", ")", "\n", "data_loder", "=", "creat_data", "(", "n_nodes", ",", "data_size", ",", "batch_size", ")", "\n", "valid_loder", "=", "creat_data", "(", "n_nodes", ",", "valid_size", ",", "batch_size", ")", "\n", "print", "(", "'DATA CREATED/Problem size:'", ",", "n_nodes", ")", "\n", "trainppo", "=", "TrainPPO", "(", "n_nodes", "*", "2", ",", "False", ",", "lr", ",", "3", ",", "hidden_node_dim", ",", "1", ",", "hidden_edge_dim", ",", "epoch", ",", "batch_size", ",", "conv_laysers", ",", "entropy_value", ",", "eps_clip", ",", "timestep", ",", "ppo_epoch", ")", "\n", "trainppo", ".", "run_train", "(", "data_loder", ",", "batch_size", ",", "valid_loder", ")", "\n", "", "", "train", "(", ")", ""]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrpUpdate.update_state": [[4, 15], ["selected.squeeze().eq", "torch.gather", "selected.squeeze().eq.any", "dynamic_capcity.detach", "selected.squeeze", "selected.squeeze().eq.nonzero().squeeze", "selected.squeeze().eq.nonzero"], "function", ["None"], ["def", "update_state", "(", "demand", ",", "dynamic_capcity", ",", "selected", ",", "c", "=", "20", ")", ":", "#dynamic_capcity(num,1)", "\n", "\n", "    ", "depot", "=", "selected", ".", "squeeze", "(", "-", "1", ")", ".", "eq", "(", "0", ")", "#Is there a group to access the depot", "\n", "\n", "current_demand", "=", "torch", ".", "gather", "(", "demand", ",", "1", ",", "selected", ")", "\n", "\n", "dynamic_capcity", "=", "dynamic_capcity", "-", "current_demand", "\n", "if", "depot", ".", "any", "(", ")", ":", "\n", "        ", "dynamic_capcity", "[", "depot", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "=", "c", "\n", "\n", "", "return", "dynamic_capcity", ".", "detach", "(", ")", "#(bach_size,1)", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrpUpdate.update_mask": [[17, 38], ["selected.squeeze().eq", "mask.scatter", "selected.expand", "demand.size", "is_done.gt", "mask.detach", "mask.scatter.detach", "selected.squeeze", "mask.size", "mask1[].sum", "is_done.gt.nonzero", "demand.size"], "function", ["None"], ["", "def", "update_mask", "(", "demand", ",", "capcity", ",", "selected", ",", "mask", ",", "i", ")", ":", "\n", "    ", "go_depot", "=", "selected", ".", "squeeze", "(", "-", "1", ")", ".", "eq", "(", "0", ")", "#If there is a route to select a depot, mask the depot, otherwise it will not mask the depot", "\n", "#print(go_depot.nonzero().squeeze())", "\n", "#visit = selected.ne(0)", "\n", "\n", "mask1", "=", "mask", ".", "scatter", "(", "1", ",", "selected", ".", "expand", "(", "mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "1", ")", "\n", "\n", "if", "(", "~", "go_depot", ")", ".", "any", "(", ")", ":", "\n", "        ", "mask1", "[", "(", "~", "go_depot", ")", ".", "nonzero", "(", ")", ",", "0", "]", "=", "0", "\n", "\n", "", "if", "i", "+", "1", ">", "demand", ".", "size", "(", "1", ")", ":", "\n", "        ", "is_done", "=", "(", "mask1", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "1", ")", ">=", "(", "demand", ".", "size", "(", "1", ")", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "combined", "=", "is_done", ".", "gt", "(", "0", ")", "\n", "mask1", "[", "combined", ".", "nonzero", "(", ")", ",", "0", "]", "=", "0", "\n", "'''for i in range(demand.size(0)):\n            if not mask1[i,1:].eq(0).any():\n                mask1[i,0] = 0'''", "\n", "", "a", "=", "demand", ">", "capcity", "\n", "mask", "=", "a", "+", "mask1", "\n", "\n", "return", "mask", ".", "detach", "(", ")", ",", "mask1", ".", "detach", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.GatConv.__init__": [[27, 45], ["torch_geometric.nn.MessagePassing.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "VRP_PPO_Model.GatConv.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "edge_channels", ",", "\n", "negative_slope", "=", "0.2", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "GatConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "attn", "=", "nn", ".", "Linear", "(", "2", "*", "out_channels", "+", "edge_channels", ",", "out_channels", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.GatConv.forward": [[46, 49], ["VRP_PPO_Model.GatConv.fc", "VRP_PPO_Model.GatConv.propagate"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", ",", "size", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "size", "=", "size", ",", "x", "=", "x", ",", "edge_attr", "=", "edge_attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.GatConv.message": [[50, 60], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "VRP_PPO_Model.GatConv.attn", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch_geometric.utils.softmax", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "edge_index_i", ",", "x_i", ",", "x_j", ",", "size_i", ",", "edge_attr", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x_i", ",", "x_j", ",", "edge_attr", "]", ",", "dim", "=", "-", "1", ")", "\n", "alpha", "=", "self", ".", "attn", "(", "x", ")", "\n", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "\n", "alpha", "=", "softmax", "(", "alpha", ",", "edge_index_i", ",", "size_i", ")", "\n", "\n", "# Sample attention coefficients stochastically.", "\n", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "return", "x_j", "*", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.GatConv.update": [[61, 63], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Encoder.__init__": [[66, 86], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "VRP_PPO_Model.Encoder.named_parameters", "VRP_PPO_Model.GatConv", "range", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_layers", "=", "3", ",", "n_heads", "=", "4", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_node_dim", "=", "hidden_node_dim", "\n", "self", ".", "fc_node", "=", "nn", ".", "Linear", "(", "input_node_dim", ",", "hidden_node_dim", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "hidden_node_dim", ")", "\n", "self", ".", "be", "=", "nn", ".", "BatchNorm1d", "(", "hidden_edge_dim", ")", "\n", "self", ".", "fc_edge", "=", "nn", ".", "Linear", "(", "input_edge_dim", ",", "hidden_edge_dim", ")", "# 1-16", "\n", "# self.bn = nn.ModuleList([nn.BatchNorm1d(hidden_node_dim) for i in range(conv_layers)])", "\n", "# self.convs = nn.ModuleList([GatConv(hidden_node_dim, hidden_node_dim, hidden_edge_dim) for i in range(n_heads)])", "\n", "self", ".", "convs1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "GatConv", "(", "hidden_node_dim", ",", "hidden_node_dim", ",", "hidden_edge_dim", ")", "for", "i", "in", "range", "(", "conv_layers", ")", "]", ")", "\n", "\n", "# self.convs = nn.ModuleList([GATConv(hidden_node_dim, hidden_node_dim) for i in range(conv_layers)])", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Encoder.forward": [[87, 105], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "VRP_PPO_Model.Encoder.fc_node", "VRP_PPO_Model.Encoder.bn", "VRP_PPO_Model.Encoder.fc_edge", "VRP_PPO_Model.Encoder.be", "x.reshape.reshape.reshape", "conv"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "batch_size", "=", "data", ".", "num_graphs", "\n", "# print(batch_size)", "\n", "# edge_attr = data.edge_attr", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "data", ".", "x", ",", "data", ".", "demand", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_node", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "edge_attr", "=", "self", ".", "fc_edge", "(", "data", ".", "edge_attr", ")", "\n", "edge_attr", "=", "self", ".", "be", "(", "edge_attr", ")", "\n", "for", "conv", "in", "self", ".", "convs1", ":", "\n", "# x = conv(x,data.edge_index)", "\n", "            ", "x1", "=", "conv", "(", "x", ",", "data", ".", "edge_index", ",", "edge_attr", ")", "\n", "x", "=", "x", "+", "x1", "\n", "\n", "", "x", "=", "x", ".", "reshape", "(", "(", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_node_dim", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Attention1.__init__": [[108, 128], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "math.sqrt", "VRP_PPO_Model.Attention1.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_heads", ",", "cat", ",", "input_dim", ",", "hidden_dim", ",", "attn_dropout", "=", "0.1", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "Attention1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "head_dim", "=", "self", ".", "hidden_dim", "/", "self", ".", "n_heads", "\n", "self", ".", "norm", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "head_dim", ")", "\n", "\n", "self", ".", "w", "=", "nn", ".", "Linear", "(", "input_dim", "*", "cat", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Attention1.forward": [[129, 155], ["context.size", "VRP_PPO_Model.Attention1.w().view", "VRP_PPO_Model.Attention1.k().view", "VRP_PPO_Model.Attention1.v().view", "compatibility.squeeze.squeeze.squeeze", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "compatibility.squeeze.squeeze.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "scores.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "VRP_PPO_Model.Attention1.squeeze().view", "VRP_PPO_Model.Attention1.fc", "VRP_PPO_Model.Attention1.transpose", "VRP_PPO_Model.Attention1.transpose", "VRP_PPO_Model.Attention1.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "mask.unsqueeze().expand_as.unsqueeze().expand_as.bool", "float", "VRP_PPO_Model.Attention1.w", "VRP_PPO_Model.Attention1.k", "VRP_PPO_Model.Attention1.v", "VRP_PPO_Model.Attention1.transpose", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "VRP_PPO_Model.Attention1.squeeze"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "state_t", ",", "context", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param state_t: (batch_size,1,input_dim*3(GATembeding,fist_node,end_node))\n        :param context: \uff08batch_size,n_nodes,input_dim\uff09\n        :param mask: selected nodes  (batch_size,n_nodes)\n        :return:\n        '''", "\n", "batch_size", ",", "n_nodes", ",", "input_dim", "=", "context", ".", "size", "(", ")", "\n", "Q", "=", "self", ".", "w", "(", "state_t", ")", ".", "view", "(", "batch_size", ",", "1", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "K", "=", "self", ".", "k", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "V", "=", "self", ".", "v", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "Q", ",", "K", ",", "V", "=", "Q", ".", "transpose", "(", "1", ",", "2", ")", ",", "K", ".", "transpose", "(", "1", ",", "2", ")", ",", "V", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "compatibility", "=", "self", ".", "norm", "*", "torch", ".", "matmul", "(", "Q", ",", "K", ".", "transpose", "(", "2", ",", "\n", "3", ")", ")", "# (batch_size,n_heads,1,hidden_dim)*(batch_size,n_heads,hidden_dim,n_nodes)", "\n", "compatibility", "=", "compatibility", ".", "squeeze", "(", "2", ")", "# (batch_size,n_heads,n_nodes)", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "compatibility", ")", "\n", "u_i", "=", "compatibility", ".", "masked_fill", "(", "mask", ".", "bool", "(", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "scores", "=", "F", ".", "softmax", "(", "u_i", ",", "dim", "=", "-", "1", ")", "# (batch_size,n_heads,n_nodes)", "\n", "scores", "=", "scores", ".", "unsqueeze", "(", "2", ")", "\n", "out_put", "=", "torch", ".", "matmul", "(", "scores", ",", "V", ")", "# (batch_size,n_heads,1,n_nodes )*(batch_size,n_heads,n_nodes,head_dim)", "\n", "out_put", "=", "out_put", ".", "squeeze", "(", "2", ")", ".", "view", "(", "batch_size", ",", "self", ".", "hidden_dim", ")", "# \uff08batch_size,n_heads,hidden_dim\uff09", "\n", "out_put", "=", "self", ".", "fc", "(", "out_put", ")", "\n", "\n", "return", "out_put", "# (batch_size,hidden_dim)", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.ProbAttention.__init__": [[158, 174], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "VRP_PPO_Model.Attention1", "math.sqrt", "VRP_PPO_Model.ProbAttention.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_heads", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "ProbAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "norm", "=", "1", "/", "math", ".", "sqrt", "(", "hidden_dim", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "mhalayer", "=", "Attention1", "(", "n_heads", ",", "1", ",", "input_dim", ",", "hidden_dim", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.ProbAttention.forward": [[175, 194], ["VRP_PPO_Model.ProbAttention.mhalayer", "context.size", "x.masked_fill.masked_fill.view", "VRP_PPO_Model.ProbAttention.k().view", "compatibility.squeeze.squeeze.squeeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "x.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "mask.bool", "float", "VRP_PPO_Model.ProbAttention.k", "VRP_PPO_Model.ProbAttention.transpose"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "state_t", ",", "context", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param state_t: (batch_size,1,input_dim*3(GATembeding,fist_node,end_node))\n        :param context: \uff08batch_size,n_nodes,input_dim\uff09\n        :param mask: selected nodes  (batch_size,n_nodes)\n        :return:softmax_score\n        '''", "\n", "x", "=", "self", ".", "mhalayer", "(", "state_t", ",", "context", ",", "mask", ")", "\n", "\n", "batch_size", ",", "n_nodes", ",", "input_dim", "=", "context", ".", "size", "(", ")", "\n", "Q", "=", "x", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "\n", "K", "=", "self", ".", "k", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "-", "1", ")", "\n", "compatibility", "=", "self", ".", "norm", "*", "torch", ".", "matmul", "(", "Q", ",", "K", ".", "transpose", "(", "1", ",", "2", ")", ")", "# (batch_size,1,n_nodes)", "\n", "compatibility", "=", "compatibility", ".", "squeeze", "(", "1", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "compatibility", ")", "\n", "x", "=", "x", "*", "(", "10", ")", "\n", "x", "=", "x", ".", "masked_fill", "(", "mask", ".", "bool", "(", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "scores", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Decoder1.__init__": [[197, 218], ["torch.Module.__init__", "torch.Module.__init__", "VRP_PPO_Model.ProbAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "VRP_PPO_Model.Decoder1.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "Decoder1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "super", "(", "Decoder1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "# self.cell = torch.nn.GRUCell(input_dim*2, hidden_dim*2, bias=True)", "\n", "self", ".", "prob", "=", "ProbAttention", "(", "8", ",", "input_dim", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_dim", "+", "1", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "\n", "# self._input = nn.Parameter(torch.Tensor(2 * hidden_dim))", "\n", "# self._input.data.uniform_(-1, 1)", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Decoder1.forward": [[219, 342], ["encoder_inputs.new_zeros", "encoder_inputs.new_zeros", "capcity.view", "demand.view", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "actions_old.reshape.reshape.reshape", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.ne().float().sum", "torch.cat.ne().float().sum", "torch.cat.ne().float().sum", "old_actions_probs.sum.sum.sum", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "VRP_PPO_Model.Decoder1.fc", "VRP_PPO_Model.Decoder1.fc1", "VRP_PPO_Model.Decoder1.prob", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.entropy", "torch.distributions.categorical.Categorical.entropy", "torch.distributions.categorical.Categorical.entropy", "torch.cat.append", "torch.cat.append", "torch.cat.append", "old_actions_probs.sum.sum.append", "VRP.vrpUpdate.update_state", "VRP.vrpUpdate.update_mask", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "VRP_PPO_Model.Decoder1.fc", "VRP_PPO_Model.Decoder1.fc1", "VRP_PPO_Model.Decoder1.prob", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.cat.append", "torch.cat.append", "torch.cat.append", "VRP.vrpUpdate.update_state", "VRP.vrpUpdate.update_mask", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "mask1[].eq().any", "VRP.vrpUpdate.update_mask", "torch.distributions.categorical.Categorical.entropy.unsqueeze", "torch.distributions.categorical.Categorical.log_prob.unsqueeze", "actions_old[].unsqueeze", "capcity[].item", "actions_old[].unsqueeze", "torch.cat.ne().float", "torch.cat.ne().float", "torch.cat.ne().float", "mask1[].eq().any", "VRP.vrpUpdate.update_mask", "VRP_PPO_Model.Decoder1.max", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample.data.unsqueeze", "torch.distributions.categorical.Categorical.log_prob.unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze", "capcity[].item", "torch.distributions.categorical.Categorical.sample.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.distributions.categorical.Categorical.sample.unsqueeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.distributions.categorical.Categorical.sample.unsqueeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "encoder_inputs.size", "mask1[].eq", "mask1[].sum", "actions_old[].unsqueeze().unsqueeze().expand", "torch.cat.ne", "torch.cat.ne", "torch.cat.ne", "mask1[].eq", "mask1[].sum", "torch.distributions.categorical.Categorical.sample.unsqueeze().unsqueeze().expand", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "actions_old[].unsqueeze().unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze().unsqueeze", "actions_old[].unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrpUpdate.update_state", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrpUpdate.update_mask", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrpUpdate.update_state", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrpUpdate.update_mask", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrpUpdate.update_mask", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrpUpdate.update_mask"], ["", "", "", "", "def", "forward", "(", "self", ",", "encoder_inputs", ",", "pool", ",", "actions_old", ",", "capcity", ",", "demand", ",", "n_steps", ",", "batch_size", ",", "greedy", "=", "False", ",", "\n", "_action", "=", "False", ")", ":", "\n", "\n", "        ", "mask1", "=", "encoder_inputs", ".", "new_zeros", "(", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "encoder_inputs", ".", "size", "(", "1", ")", ")", ")", "\n", "mask", "=", "encoder_inputs", ".", "new_zeros", "(", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "encoder_inputs", ".", "size", "(", "1", ")", ")", ")", "\n", "# \u7528old_policy\u6765sample\u7684action", "\n", "dynamic_capcity", "=", "capcity", ".", "view", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# bat_size", "\n", "demands", "=", "demand", ".", "view", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "encoder_inputs", ".", "size", "(", "1", ")", ")", "# \uff08batch_size,seq_len\uff09", "\n", "index", "=", "torch", ".", "zeros", "(", "encoder_inputs", ".", "size", "(", "0", ")", ")", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "if", "_action", ":", "\n", "            ", "actions_old", "=", "actions_old", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "entropys", "=", "[", "]", "\n", "old_actions_probs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "if", "not", "mask1", "[", ":", ",", "1", ":", "]", ".", "eq", "(", "0", ")", ".", "any", "(", ")", ":", "\n", "                    ", "break", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "_input", "=", "encoder_inputs", "[", ":", ",", "0", ",", ":", "]", "# depot", "\n", "\n", "# -----------------------------------------------------------------------------GRU\u505a\u4fe1\u606f\u4f20\u9012", "\n", "# hx = self.cell(_input, hx)", "\n", "# decoder_input = hx", "\n", "# -----------------------------------------------------------------------------pool+cat(first_node,current_node)", "\n", "", "decoder_input", "=", "torch", ".", "cat", "(", "[", "_input", ",", "dynamic_capcity", "]", ",", "-", "1", ")", "\n", "decoder_input", "=", "self", ".", "fc", "(", "decoder_input", ")", "\n", "pool", "=", "self", ".", "fc1", "(", "pool", ")", "\n", "decoder_input", "=", "decoder_input", "+", "pool", "\n", "\n", "# -----------------------------------------------------------------------------cat(pool,first_node,current_node)", "\n", "'''decoder_input = torch.cat([pool, _input, dynamic_capcity], dim=-1)\n                decoder_input = self.fc(decoder_input)'''", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "mask", ",", "mask1", "=", "update_mask", "(", "demands", ",", "dynamic_capcity", ",", "index", ".", "unsqueeze", "(", "-", "1", ")", ",", "mask1", ",", "i", ")", "\n", "\n", "# decoder_input = torch.cat([pool,_input_first], dim=-1)", "\n", "# decoder_input  = self.fc(decoder_input)", "\n", "# -----------------------------------------------------------------------------------------------------------", "\n", "", "p", "=", "self", ".", "prob", "(", "decoder_input", ",", "encoder_inputs", ",", "mask", ")", "\n", "\n", "dist", "=", "Categorical", "(", "p", ")", "\n", "\n", "old_actions_prob", "=", "dist", ".", "log_prob", "(", "actions_old", "[", ":", ",", "i", "]", ")", "\n", "entropy", "=", "dist", ".", "entropy", "(", ")", "\n", "is_done", "=", "(", "mask1", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "1", ")", ">=", "(", "encoder_inputs", ".", "size", "(", "1", ")", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "old_actions_prob", "=", "old_actions_prob", "*", "(", "1.", "-", "is_done", ")", "\n", "entropy", "=", "entropy", "*", "(", "1.", "-", "is_done", ")", "\n", "\n", "entropys", ".", "append", "(", "entropy", ".", "unsqueeze", "(", "1", ")", ")", "\n", "old_actions_probs", ".", "append", "(", "old_actions_prob", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "dynamic_capcity", "=", "update_state", "(", "demands", ",", "dynamic_capcity", ",", "actions_old", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "capcity", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "mask", ",", "mask1", "=", "update_mask", "(", "demands", ",", "dynamic_capcity", ",", "actions_old", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "mask1", ",", "i", ")", "\n", "\n", "_input", "=", "torch", ".", "gather", "(", "encoder_inputs", ",", "1", ",", "\n", "actions_old", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "-", "1", ",", "\n", "encoder_inputs", ".", "size", "(", "\n", "2", ")", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# log_ps = torch.cat(log_ps,dim=1)", "\n", "# actions = torch.cat(actions,dim=1)", "\n", "", "entropys", "=", "torch", ".", "cat", "(", "entropys", ",", "dim", "=", "1", ")", "\n", "old_actions_probs", "=", "torch", ".", "cat", "(", "old_actions_probs", ",", "dim", "=", "1", ")", "\n", "# log_p = log_ps.sum(dim=1)", "\n", "num_e", "=", "entropys", ".", "ne", "(", "0", ")", ".", "float", "(", ")", ".", "sum", "(", "1", ")", "\n", "entropy", "=", "entropys", ".", "sum", "(", "1", ")", "/", "num_e", "\n", "old_actions_probs", "=", "old_actions_probs", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "0", ",", "0", ",", "entropy", ",", "old_actions_probs", "\n", "", "else", ":", "\n", "            ", "log_ps", "=", "[", "]", "\n", "actions", "=", "[", "]", "\n", "# entropys = []", "\n", "# h0 = self.h0.unsqueeze(0).expand(encoder_inputs.size(0), -1)", "\n", "# first_cat = self._input[None, :].expand(encoder_inputs.size(0), -1)", "\n", "for", "i", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "if", "not", "mask1", "[", ":", ",", "1", ":", "]", ".", "eq", "(", "0", ")", ".", "any", "(", ")", ":", "\n", "                    ", "break", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "_input", "=", "encoder_inputs", "[", ":", ",", "0", ",", ":", "]", "# depot", "\n", "# -----------------------------------------------------------------------------GRU\u505a\u4fe1\u606f\u4f20\u9012", "\n", "# hx = self.cell(_input, hx)", "\n", "# decoder_input = hx", "\n", "# -----------------------------------------------------------------------------pool+cat(first_node,current_node)", "\n", "", "decoder_input", "=", "torch", ".", "cat", "(", "[", "_input", ",", "dynamic_capcity", "]", ",", "-", "1", ")", "\n", "decoder_input", "=", "self", ".", "fc", "(", "decoder_input", ")", "\n", "pool", "=", "self", ".", "fc1", "(", "pool", ")", "\n", "decoder_input", "=", "decoder_input", "+", "pool", "\n", "# -----------------------------------------------------------------------------cat(pool,first_node,current_node)", "\n", "'''decoder_input = torch.cat([pool,_input,dynamic_capcity], dim=-1)\n                decoder_input  = self.fc(decoder_input)'''", "\n", "# -----------------------------------------------------------------------------------------------------------", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "mask", ",", "mask1", "=", "update_mask", "(", "demands", ",", "dynamic_capcity", ",", "index", ".", "unsqueeze", "(", "-", "1", ")", ",", "mask1", ",", "i", ")", "\n", "", "p", "=", "self", ".", "prob", "(", "decoder_input", ",", "encoder_inputs", ",", "mask", ")", "\n", "dist", "=", "Categorical", "(", "p", ")", "\n", "if", "greedy", ":", "\n", "                    ", "_", ",", "index", "=", "p", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "index", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "actions", ".", "append", "(", "index", ".", "data", ".", "unsqueeze", "(", "1", ")", ")", "\n", "log_p", "=", "dist", ".", "log_prob", "(", "index", ")", "\n", "is_done", "=", "(", "mask1", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "1", ")", ">=", "(", "encoder_inputs", ".", "size", "(", "1", ")", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "log_p", "=", "log_p", "*", "(", "1.", "-", "is_done", ")", "\n", "\n", "log_ps", ".", "append", "(", "log_p", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "# entropys.append(entropy.unsqueeze(1))", "\n", "dynamic_capcity", "=", "update_state", "(", "demands", ",", "dynamic_capcity", ",", "index", ".", "unsqueeze", "(", "-", "1", ")", ",", "capcity", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "mask", ",", "mask1", "=", "update_mask", "(", "demands", ",", "dynamic_capcity", ",", "index", ".", "unsqueeze", "(", "-", "1", ")", ",", "mask1", ",", "i", ")", "\n", "\n", "_input", "=", "torch", ".", "gather", "(", "encoder_inputs", ",", "1", ",", "\n", "index", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "-", "1", ",", "\n", "encoder_inputs", ".", "size", "(", "2", ")", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "", "log_ps", "=", "torch", ".", "cat", "(", "log_ps", ",", "dim", "=", "1", ")", "\n", "actions", "=", "torch", ".", "cat", "(", "actions", ",", "dim", "=", "1", ")", "\n", "\n", "log_p", "=", "log_ps", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "actions", ",", "log_p", ",", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Model.__init__": [[345, 349], ["torch.Module.__init__", "VRP_PPO_Model.Encoder", "VRP_PPO_Model.Decoder1"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", "\n", "self", ".", "decoder", "=", "Decoder1", "(", "hidden_node_dim", ",", "hidden_node_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Model.forward": [[350, 359], ["VRP_PPO_Model.Model.encoder", "VRP_PPO_Model.Model.mean", "VRP_PPO_Model.Model.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "datas", ",", "actions_old", ",", "n_steps", ",", "batch_size", ",", "greedy", ",", "_action", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "datas", ")", "# (batch,seq_len,hidden_node_dim)", "\n", "pooled", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "\n", "demand", "=", "datas", ".", "demand", "\n", "capcity", "=", "datas", ".", "capcity", "\n", "\n", "actions", ",", "log_p", ",", "entropy", ",", "dists", "=", "self", ".", "decoder", "(", "x", ",", "pooled", ",", "actions_old", ",", "capcity", ",", "demand", ",", "n_steps", ",", "batch_size", ",", "\n", "greedy", ",", "_action", ")", "\n", "return", "actions", ",", "log_p", ",", "entropy", ",", "dists", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Critic.__init__": [[368, 381], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["def", "__init__", "(", "self", ",", "hidden_node_dim", ")", ":", "\n", "        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv1d", "(", "hidden_node_dim", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv1d", "(", "20", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Conv1d", "(", "20", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "'''if INIT:\n            for name, p in self.named_parameters():\n                if 'weight' in name:\n                    if len(p.size()) >= 2:\n                        nn.init.orthogonal_(p, gain=1)\n                elif 'bias' in name:\n                    nn.init.constant_(p, 0)'''", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Critic.forward": [[382, 388], ["x.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "VRP_PPO_Model.Critic.fc3().sum().squeeze", "VRP_PPO_Model.Critic.fc1", "VRP_PPO_Model.Critic.fc2", "VRP_PPO_Model.Critic.fc3().sum", "VRP_PPO_Model.Critic.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x1", ")", ")", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "output", ")", ")", "\n", "value", "=", "self", ".", "fc3", "(", "output", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Actor_critic.__init__": [[391, 395], ["torch.Module.__init__", "VRP_PPO_Model.Model", "VRP_PPO_Model.Critic"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", ":", "\n", "        ", "super", "(", "Actor_critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "actor", "=", "Model", "(", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", "\n", "self", ".", "critic", "=", "Critic", "(", "hidden_node_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Actor_critic.act": [[396, 400], ["VRP_PPO_Model.Actor_critic.actor"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "datas", ",", "actions", ",", "steps", ",", "batch_size", ",", "greedy", ",", "_action", ")", ":", "\n", "        ", "actions", ",", "log_p", ",", "_", ",", "_", ",", "_", "=", "self", ".", "actor", "(", "datas", ",", "actions", ",", "steps", ",", "batch_size", ",", "greedy", ",", "_action", ")", "\n", "\n", "return", "actions", ",", "log_p", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Actor_critic.evaluate": [[401, 407], ["VRP_PPO_Model.Actor_critic.actor", "VRP_PPO_Model.Actor_critic.critic"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "datas", ",", "actions", ",", "steps", ",", "batch_size", ",", "greedy", ",", "_action", ")", ":", "\n", "        ", "_", ",", "_", ",", "entropy", ",", "old_log_p", ",", "x", "=", "self", ".", "actor", "(", "datas", ",", "actions", ",", "steps", ",", "batch_size", ",", "greedy", ",", "_action", ")", "\n", "\n", "value", "=", "self", ".", "critic", "(", "x", ")", "\n", "\n", "return", "entropy", ",", "old_log_p", ",", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Memory.__init__": [[410, 419], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "input_x", "=", "[", "]", "\n", "# self.input_index = []", "\n", "self", ".", "input_attr", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "log_probs", "=", "[", "]", "\n", "self", ".", "capcity", "=", "[", "]", "\n", "self", ".", "demand", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Memory.def_memory": [[420, 429], ["VRP_PPO_Model.Memory.input_x.clear", "VRP_PPO_Model.Memory.input_attr.clear", "VRP_PPO_Model.Memory.actions.clear", "VRP_PPO_Model.Memory.rewards.clear", "VRP_PPO_Model.Memory.log_probs.clear", "VRP_PPO_Model.Memory.capcity.clear", "VRP_PPO_Model.Memory.demand.clear"], "methods", ["None"], ["", "def", "def_memory", "(", "self", ")", ":", "\n", "        ", "self", ".", "input_x", ".", "clear", "(", ")", "\n", "# self.input_index.clear()", "\n", "self", ".", "input_attr", ".", "clear", "(", ")", "\n", "self", ".", "actions", ".", "clear", "(", ")", "\n", "self", ".", "rewards", ".", "clear", "(", ")", "\n", "self", ".", "log_probs", ".", "clear", "(", ")", "\n", "self", ".", "capcity", ".", "clear", "(", ")", "\n", "self", ".", "demand", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Agentppo.__init__": [[432, 455], ["VRP_PPO_Model.Actor_critic", "VRP_PPO_Model.Actor_critic", "VRP_PPO_Model.Agentppo.old_polic.load_state_dict", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "VRP_PPO_Model.Agentppo.policy.state_dict", "VRP_PPO_Model.Agentppo.policy.parameters"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.load_state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.state_dict"], ["    ", "def", "__init__", "(", "self", ",", "steps", ",", "greedy", ",", "lr", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "epoch", "=", "1", ",", "\n", "batch_size", "=", "32", ",", "conv_laysers", "=", "3", ",", "entropy_value", "=", "0.2", ",", "eps_clip", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "policy", "=", "Actor_critic", "(", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", "\n", "self", ".", "old_polic", "=", "Actor_critic", "(", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "\n", "conv_laysers", ")", "\n", "self", ".", "old_polic", ".", "load_state_dict", "(", "self", ".", "policy", ".", "state_dict", "(", ")", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "self", ".", "MseLoss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "entropy_value", "=", "entropy_value", "\n", "self", ".", "eps_clip", "=", "eps_clip", "\n", "self", ".", "greedy", "=", "greedy", "\n", "self", ".", "_action", "=", "True", "\n", "self", ".", "conv_layers", "=", "conv_laysers", "\n", "self", ".", "input_node_dim", "=", "input_node_dim", "\n", "self", ".", "input_edge_dim", "=", "input_edge_dim", "\n", "self", ".", "hidden_node_dim", "=", "hidden_node_dim", "\n", "self", ".", "hidden_edge_dim", "=", "hidden_edge_dim", "\n", "self", ".", "batch_idx", "=", "1", "\n", "self", ".", "times", ",", "self", ".", "losses", ",", "self", ".", "rewards", ",", "self", ".", "critic_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Agentppo.adv_normalize": [[456, 461], ["adv.std", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "adv.mean", "adv.std"], "methods", ["None"], ["", "def", "adv_normalize", "(", "self", ",", "adv", ")", ":", "\n", "        ", "std", "=", "adv", ".", "std", "(", ")", "\n", "assert", "std", "!=", "0.", "and", "not", "torch", ".", "isnan", "(", "std", ")", ",", "'Need nonzero std'", "\n", "n_advs", "=", "(", "adv", "-", "adv", ".", "mean", "(", ")", ")", "/", "(", "adv", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "return", "n_advs", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Agentppo.value_loss_gae": [[462, 472], ["VRP_PPO_Model.Agentppo.MseLoss", "VRP_PPO_Model.Agentppo.MseLoss", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "value_loss_gae", "(", "self", ",", "val_targ", ",", "old_vs", ",", "value_od", ",", "clip_val", ")", ":", "\n", "        ", "vs_clipped", "=", "old_vs", "+", "torch", ".", "clamp", "(", "old_vs", "-", "value_od", ",", "-", "clip_val", ",", "+", "clip_val", ")", "\n", "val_loss_mat_unclipped", "=", "self", ".", "MseLoss", "(", "old_vs", ",", "val_targ", ")", "\n", "val_loss_mat_clipped", "=", "self", ".", "MseLoss", "(", "vs_clipped", ",", "val_targ", ")", "\n", "\n", "val_loss_mat", "=", "torch", ".", "max", "(", "val_loss_mat_unclipped", ",", "val_loss_mat_clipped", ")", "\n", "\n", "mse", "=", "val_loss_mat", "\n", "\n", "return", "mse", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_PPO_Model.Agentppo.update": [[473, 554], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "edges_index.transpose.transpose.transpose", "range", "VRP_PPO_Model.Agentppo.policy.to", "torch_geometric.data.DataLoader", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "range", "VRP_PPO_Model.Agentppo.old_polic.load_state_dict", "range", "torch.stack.size", "torch.stack.size", "torch.stack.size", "torch_geometric.data.Data", "datas.append", "VRP_PPO_Model.Agentppo.policy.train", "time.time", "enumerate", "VRP_PPO_Model.Agentppo.policy.state_dict", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "edges_index.transpose.transpose.append", "batch.to.to.to", "VRP_PPO_Model.Agentppo.policy.evaluate", "VRP_PPO_Model.Agentppo.adv_normalize", "VRP_PPO_Model.Agentppo.MseLoss", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "VRP_PPO_Model.Agentppo.optimizer.zero_grad", "loss.mean().backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "VRP_PPO_Model.Agentppo.optimizer.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "VRP_PPO_Model.Agentppo.rewards.append", "VRP_PPO_Model.Agentppo.losses.append", "value.detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "VRP_PPO_Model.Agentppo.policy.parameters", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "loss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "VRP_PPO_Model.Agentppo.detach", "loss.detach"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.load_state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Rollout_train.train", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Actor_critic.evaluate", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Agentppo.adv_normalize"], ["", "def", "update", "(", "self", ",", "memory", ",", "epoch", ")", ":", "\n", "        ", "old_input_x", "=", "torch", ".", "stack", "(", "memory", ".", "input_x", ")", "\n", "# old_input_index = torch.stack(memory.input_index)", "\n", "old_input_attr", "=", "torch", ".", "stack", "(", "memory", ".", "input_attr", ")", "\n", "old_demand", "=", "torch", ".", "stack", "(", "memory", ".", "demand", ")", "\n", "old_capcity", "=", "torch", ".", "stack", "(", "memory", ".", "capcity", ")", "\n", "\n", "old_action", "=", "torch", ".", "stack", "(", "memory", ".", "actions", ")", "\n", "old_rewards", "=", "torch", ".", "stack", "(", "memory", ".", "rewards", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "old_log_probs", "=", "torch", ".", "stack", "(", "memory", ".", "log_probs", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "datas", "=", "[", "]", "\n", "edges_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n_nodes", ")", ":", "\n", "                ", "edges_index", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "", "edges_index", "=", "torch", ".", "LongTensor", "(", "edges_index", ")", "\n", "edges_index", "=", "edges_index", ".", "transpose", "(", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "old_input_x", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "data", "=", "Data", "(", "\n", "x", "=", "old_input_x", "[", "i", "]", ",", "\n", "edge_index", "=", "edges_index", ",", "\n", "edge_attr", "=", "old_input_attr", "[", "i", "]", ",", "\n", "actions", "=", "old_action", "[", "i", "]", ",", "\n", "rewards", "=", "old_rewards", "[", "i", "]", ",", "\n", "log_probs", "=", "old_log_probs", "[", "i", "]", ",", "\n", "demand", "=", "old_demand", "[", "i", "]", ",", "\n", "capcity", "=", "old_capcity", "[", "i", "]", "\n", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "# print(np.array(datas).shape)", "\n", "", "self", ".", "policy", ".", "to", "(", "device", ")", "\n", "data_loader", "=", "DataLoader", "(", "datas", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "# \u5b66\u4e60\u7387\u9000\u706b", "\n", "scheduler", "=", "LambdaLR", "(", "self", ".", "optimizer", ",", "lr_lambda", "=", "lambda", "f", ":", "0.96", "**", "epoch", ")", "\n", "value_buffer", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "\n", "            ", "self", ".", "policy", ".", "train", "(", ")", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "start", "=", "epoch_start", "\n", "self", ".", "times", ",", "self", ".", "losses", ",", "self", ".", "rewards", ",", "self", ".", "critic_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "self", ".", "batch_idx", "+=", "1", "\n", "batch", "=", "batch", ".", "to", "(", "device", ")", "\n", "entropy", ",", "log_probs", ",", "value", "=", "self", ".", "policy", ".", "evaluate", "(", "batch", ",", "batch", ".", "actions", ",", "self", ".", "steps", ",", "self", ".", "batch_size", ",", "\n", "self", ".", "greedy", ",", "self", ".", "_action", ")", "\n", "# advangtage function", "\n", "\n", "# base_reward = self.adv_normalize(base_reward)", "\n", "rewar", "=", "batch", ".", "rewards", "\n", "rewar", "=", "self", ".", "adv_normalize", "(", "rewar", ")", "\n", "# rewar = rewar/torch.max(rewar)", "\n", "# Value function clipping", "\n", "mse_loss", "=", "self", ".", "MseLoss", "(", "rewar", ",", "value", ")", "\n", "\n", "ratios", "=", "torch", ".", "exp", "(", "log_probs", "-", "batch", ".", "log_probs", ")", "\n", "\n", "# norm advantages", "\n", "advantages", "=", "rewar", "-", "value", ".", "detach", "(", ")", "\n", "\n", "# advantages = self.adv_normalize(advantages)", "\n", "# PPO loss", "\n", "surr1", "=", "ratios", "*", "advantages", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratios", ",", "1", "-", "self", ".", "eps_clip", ",", "1", "+", "self", ".", "eps_clip", ")", "*", "advantages", "\n", "# total loss", "\n", "loss", "=", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", "+", "0.5", "*", "mse_loss", "-", "self", ".", "entropy_value", "*", "entropy", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "mean", "(", ")", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "self", ".", "rewards", ".", "append", "(", "torch", ".", "mean", "(", "rewar", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "losses", ".", "append", "(", "torch", ".", "mean", "(", "loss", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "# print(epoch,self.optimizer.param_groups[0]['lr'])", "\n", "\n", "", "", "self", ".", "old_polic", ".", "load_state_dict", "(", "self", ".", "policy", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.GatConv.__init__": [[20, 38], ["torch_geometric.nn.MessagePassing.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "VRP_Actor.GatConv.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "edge_channels", ",", "\n", "negative_slope", "=", "0.2", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "GatConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "attn", "=", "nn", ".", "Linear", "(", "2", "*", "out_channels", "+", "edge_channels", ",", "out_channels", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.GatConv.forward": [[39, 42], ["VRP_Actor.GatConv.fc", "VRP_Actor.GatConv.propagate"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", ",", "size", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "size", "=", "size", ",", "x", "=", "x", ",", "edge_attr", "=", "edge_attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.GatConv.message": [[43, 53], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "VRP_Actor.GatConv.attn", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch_geometric.utils.softmax", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "edge_index_i", ",", "x_i", ",", "x_j", ",", "size_i", ",", "edge_attr", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x_i", ",", "x_j", ",", "edge_attr", "]", ",", "dim", "=", "-", "1", ")", "\n", "alpha", "=", "self", ".", "attn", "(", "x", ")", "\n", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "\n", "alpha", "=", "softmax", "(", "alpha", ",", "edge_index_i", ",", "size_i", ")", "\n", "\n", "# Sample attention coefficients stochastically.", "\n", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "return", "x_j", "*", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.GatConv.update": [[54, 56], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.Encoder.__init__": [[61, 78], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "VRP_Actor.Encoder.named_parameters", "VRP_Actor.GatConv", "range", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_layers", "=", "3", ",", "n_heads", "=", "4", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_node_dim", "=", "hidden_node_dim", "\n", "self", ".", "fc_node", "=", "nn", ".", "Linear", "(", "input_node_dim", ",", "hidden_node_dim", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "hidden_node_dim", ")", "\n", "self", ".", "be", "=", "nn", ".", "BatchNorm1d", "(", "hidden_edge_dim", ")", "\n", "self", ".", "fc_edge", "=", "nn", ".", "Linear", "(", "input_edge_dim", ",", "hidden_edge_dim", ")", "# 1-16", "\n", "\n", "self", ".", "convs1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "GatConv", "(", "hidden_node_dim", ",", "hidden_node_dim", ",", "hidden_edge_dim", ")", "for", "i", "in", "range", "(", "conv_layers", ")", "]", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.Encoder.forward": [[79, 97], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "VRP_Actor.Encoder.fc_node", "VRP_Actor.Encoder.bn", "VRP_Actor.Encoder.fc_edge", "VRP_Actor.Encoder.be", "x.reshape.reshape.reshape", "conv"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "batch_size", "=", "data", ".", "num_graphs", "\n", "# print(batch_size)", "\n", "# edge_attr = data.edge_attr", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "data", ".", "x", ",", "data", ".", "demand", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_node", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "edge_attr", "=", "self", ".", "fc_edge", "(", "data", ".", "edge_attr", ")", "\n", "edge_attr", "=", "self", ".", "be", "(", "edge_attr", ")", "\n", "for", "conv", "in", "self", ".", "convs1", ":", "\n", "# x = conv(x,data.edge_index)", "\n", "            ", "x1", "=", "conv", "(", "x", ",", "data", ".", "edge_index", ",", "edge_attr", ")", "\n", "x", "=", "x", "+", "x1", "\n", "\n", "", "x", "=", "x", ".", "reshape", "(", "(", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_node_dim", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.Attention1.__init__": [[100, 120], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "math.sqrt", "VRP_Actor.Attention1.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_heads", ",", "cat", ",", "input_dim", ",", "hidden_dim", ",", "attn_dropout", "=", "0.1", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "Attention1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "head_dim", "=", "self", ".", "hidden_dim", "/", "self", ".", "n_heads", "\n", "self", ".", "norm", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "head_dim", ")", "\n", "\n", "self", ".", "w", "=", "nn", ".", "Linear", "(", "input_dim", "*", "cat", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.Attention1.forward": [[121, 146], ["context.size", "VRP_Actor.Attention1.w().view", "VRP_Actor.Attention1.k().view", "VRP_Actor.Attention1.v().view", "compatibility.squeeze.squeeze.squeeze", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "compatibility.squeeze.squeeze.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "scores.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "VRP_Actor.Attention1.squeeze().view", "VRP_Actor.Attention1.fc", "VRP_Actor.Attention1.transpose", "VRP_Actor.Attention1.transpose", "VRP_Actor.Attention1.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "mask.unsqueeze().expand_as.unsqueeze().expand_as.bool", "float", "VRP_Actor.Attention1.w", "VRP_Actor.Attention1.k", "VRP_Actor.Attention1.v", "VRP_Actor.Attention1.transpose", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "VRP_Actor.Attention1.squeeze"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "state_t", ",", "context", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param state_t: (batch_size,1,input_dim*3(GATembeding,fist_node,end_node))\n        :param context: \uff08batch_size,n_nodes,input_dim\uff09\n        :param mask: selected nodes  (batch_size,n_nodes)\n        :return:\n        '''", "\n", "batch_size", ",", "n_nodes", ",", "input_dim", "=", "context", ".", "size", "(", ")", "\n", "Q", "=", "self", ".", "w", "(", "state_t", ")", ".", "view", "(", "batch_size", ",", "1", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "K", "=", "self", ".", "k", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "V", "=", "self", ".", "v", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "Q", ",", "K", ",", "V", "=", "Q", ".", "transpose", "(", "1", ",", "2", ")", ",", "K", ".", "transpose", "(", "1", ",", "2", ")", ",", "V", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "compatibility", "=", "self", ".", "norm", "*", "torch", ".", "matmul", "(", "Q", ",", "K", ".", "transpose", "(", "2", ",", "3", ")", ")", "# (batch_size,n_heads,1,hidden_dim)*(batch_size,n_heads,hidden_dim,n_nodes)", "\n", "compatibility", "=", "compatibility", ".", "squeeze", "(", "2", ")", "# (batch_size,n_heads,n_nodes)", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "compatibility", ")", "\n", "u_i", "=", "compatibility", ".", "masked_fill", "(", "mask", ".", "bool", "(", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "scores", "=", "F", ".", "softmax", "(", "u_i", ",", "dim", "=", "-", "1", ")", "# (batch_size,n_heads,n_nodes)", "\n", "scores", "=", "scores", ".", "unsqueeze", "(", "2", ")", "\n", "out_put", "=", "torch", ".", "matmul", "(", "scores", ",", "V", ")", "# (batch_size,n_heads,1,n_nodes )*(batch_size,n_heads,n_nodes,head_dim)", "\n", "out_put", "=", "out_put", ".", "squeeze", "(", "2", ")", ".", "view", "(", "batch_size", ",", "self", ".", "hidden_dim", ")", "# \uff08batch_size,n_heads,hidden_dim\uff09", "\n", "out_put", "=", "self", ".", "fc", "(", "out_put", ")", "\n", "\n", "return", "out_put", "# (batch_size,hidden_dim)", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.ProbAttention.__init__": [[149, 165], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "VRP_Actor.Attention1", "math.sqrt", "VRP_Actor.ProbAttention.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_heads", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "ProbAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "norm", "=", "1", "/", "math", ".", "sqrt", "(", "hidden_dim", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "mhalayer", "=", "Attention1", "(", "n_heads", ",", "1", ",", "input_dim", ",", "hidden_dim", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.ProbAttention.forward": [[166, 185], ["VRP_Actor.ProbAttention.mhalayer", "context.size", "x.masked_fill.masked_fill.view", "VRP_Actor.ProbAttention.k().view", "compatibility.squeeze.squeeze.squeeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "x.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "mask.bool", "float", "VRP_Actor.ProbAttention.k", "VRP_Actor.ProbAttention.transpose"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "state_t", ",", "context", ",", "mask", ",", "T", ")", ":", "\n", "        ", "'''\n        :param state_t: (batch_size,1,input_dim*3(GATembeding,fist_node,end_node))\n        :param context: \uff08batch_size,n_nodes,input_dim\uff09\n        :param mask: selected nodes  (batch_size,n_nodes)\n        :return:softmax_score\n        '''", "\n", "x", "=", "self", ".", "mhalayer", "(", "state_t", ",", "context", ",", "mask", ")", "\n", "\n", "batch_size", ",", "n_nodes", ",", "input_dim", "=", "context", ".", "size", "(", ")", "\n", "Q", "=", "x", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "\n", "K", "=", "self", ".", "k", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "-", "1", ")", "\n", "compatibility", "=", "self", ".", "norm", "*", "torch", ".", "matmul", "(", "Q", ",", "K", ".", "transpose", "(", "1", ",", "2", ")", ")", "# (batch_size,1,n_nodes)", "\n", "compatibility", "=", "compatibility", ".", "squeeze", "(", "1", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "compatibility", ")", "\n", "x", "=", "x", "*", "(", "10", ")", "\n", "x", "=", "x", ".", "masked_fill", "(", "mask", ".", "bool", "(", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "scores", "=", "F", ".", "softmax", "(", "x", "/", "T", ",", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.Decoder1.__init__": [[187, 208], ["torch.Module.__init__", "torch.Module.__init__", "VRP_Actor.ProbAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "VRP_Actor.Decoder1.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "Decoder1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "super", "(", "Decoder1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "prob", "=", "ProbAttention", "(", "8", ",", "input_dim", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_dim", "+", "1", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "\n", "#self._input = nn.Parameter(torch.Tensor(2 * hidden_dim))", "\n", "#self._input.data.uniform_(-1, 1)", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.Decoder1.forward": [[209, 264], ["encoder_inputs.new_zeros", "encoder_inputs.new_zeros", "capcity.view", "demand.view", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "VRP_Actor.Decoder1.fc", "VRP_Actor.Decoder1.fc1", "VRP_Actor.Decoder1.prob", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.cat.append", "torch.cat.append", "torch.cat.append", "VRP.vrpUpdate.update_state", "VRP.vrpUpdate.update_mask", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "mask1[].eq().any", "VRP.vrpUpdate.update_mask", "VRP_Actor.Decoder1.max", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample.data.unsqueeze", "torch.distributions.categorical.Categorical.log_prob.unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze", "capcity[].item", "torch.distributions.categorical.Categorical.sample.unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mask1[].eq", "mask1[].sum", "torch.distributions.categorical.Categorical.sample.unsqueeze().unsqueeze().expand", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "torch.distributions.categorical.Categorical.sample.unsqueeze().unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrpUpdate.update_state", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrpUpdate.update_mask", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrpUpdate.update_mask"], ["", "", "", "", "def", "forward", "(", "self", ",", "encoder_inputs", ",", "pool", ",", "capcity", ",", "demand", ",", "n_steps", ",", "T", ",", "greedy", "=", "False", ")", ":", "\n", "\n", "        ", "mask1", "=", "encoder_inputs", ".", "new_zeros", "(", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "encoder_inputs", ".", "size", "(", "1", ")", ")", ")", "\n", "mask", "=", "encoder_inputs", ".", "new_zeros", "(", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "encoder_inputs", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "dynamic_capcity", "=", "capcity", ".", "view", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "#bat_size", "\n", "demands", "=", "demand", ".", "view", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "encoder_inputs", ".", "size", "(", "1", ")", ")", "#\uff08batch_size,seq_len\uff09", "\n", "index", "=", "torch", ".", "zeros", "(", "encoder_inputs", ".", "size", "(", "0", ")", ")", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "\n", "log_ps", "=", "[", "]", "\n", "actions", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_steps", ")", ":", "\n", "            ", "if", "not", "mask1", "[", ":", ",", "1", ":", "]", ".", "eq", "(", "0", ")", ".", "any", "(", ")", ":", "\n", "                ", "break", "\n", "", "if", "i", "==", "0", ":", "\n", "                ", "_input", "=", "encoder_inputs", "[", ":", ",", "0", ",", ":", "]", "# depot", "\n", "\n", "# -----------------------------------------------------------------------------pool+cat(first_node,current_node)", "\n", "", "decoder_input", "=", "torch", ".", "cat", "(", "[", "_input", ",", "dynamic_capcity", "]", ",", "-", "1", ")", "\n", "decoder_input", "=", "self", ".", "fc", "(", "decoder_input", ")", "\n", "pool", "=", "self", ".", "fc1", "(", "pool", ")", "\n", "decoder_input", "=", "decoder_input", "+", "pool", "\n", "# -----------------------------------------------------------------------------cat(pool,first_node,current_node)", "\n", "'''decoder_input = torch.cat([pool,_input,dynamic_capcity], dim=-1)\n            decoder_input  = self.fc(decoder_input)'''", "\n", "# -----------------------------------------------------------------------------------------------------------", "\n", "if", "i", "==", "0", ":", "\n", "                ", "mask", ",", "mask1", "=", "update_mask", "(", "demands", ",", "dynamic_capcity", ",", "index", ".", "unsqueeze", "(", "-", "1", ")", ",", "mask1", ",", "i", ")", "\n", "", "p", "=", "self", ".", "prob", "(", "decoder_input", ",", "encoder_inputs", ",", "mask", ",", "T", ")", "\n", "dist", "=", "Categorical", "(", "p", ")", "\n", "if", "greedy", ":", "\n", "                ", "_", ",", "index", "=", "p", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "index", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "actions", ".", "append", "(", "index", ".", "data", ".", "unsqueeze", "(", "1", ")", ")", "\n", "log_p", "=", "dist", ".", "log_prob", "(", "index", ")", "\n", "is_done", "=", "(", "mask1", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "1", ")", ">=", "(", "encoder_inputs", ".", "size", "(", "1", ")", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "log_p", "=", "log_p", "*", "(", "1.", "-", "is_done", ")", "\n", "\n", "log_ps", ".", "append", "(", "log_p", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "dynamic_capcity", "=", "update_state", "(", "demands", ",", "dynamic_capcity", ",", "index", ".", "unsqueeze", "(", "-", "1", ")", ",", "capcity", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "mask", ",", "mask1", "=", "update_mask", "(", "demands", ",", "dynamic_capcity", ",", "index", ".", "unsqueeze", "(", "-", "1", ")", ",", "mask1", ",", "i", ")", "\n", "\n", "_input", "=", "torch", ".", "gather", "(", "encoder_inputs", ",", "1", ",", "\n", "index", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "-", "1", ",", "\n", "encoder_inputs", ".", "size", "(", "2", ")", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "", "log_ps", "=", "torch", ".", "cat", "(", "log_ps", ",", "dim", "=", "1", ")", "\n", "actions", "=", "torch", ".", "cat", "(", "actions", ",", "dim", "=", "1", ")", "\n", "\n", "log_p", "=", "log_ps", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "actions", ",", "log_p", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.Model.__init__": [[266, 270], ["torch.Module.__init__", "VRP_Actor.Encoder", "VRP_Actor.Decoder1"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", "\n", "self", ".", "decoder", "=", "Decoder1", "(", "hidden_node_dim", ",", "hidden_node_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Actor.Model.forward": [[271, 279], ["VRP_Actor.Model.encoder", "VRP_Actor.Model.mean", "VRP_Actor.Model.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "datas", ",", "n_steps", ",", "greedy", "=", "False", ",", "T", "=", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "datas", ")", "# (batch,seq_len,hidden_node_dim)", "\n", "pooled", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "\n", "demand", "=", "datas", ".", "demand", "\n", "capcity", "=", "datas", ".", "capcity", "\n", "\n", "actions", ",", "log_p", "=", "self", ".", "decoder", "(", "x", ",", "pooled", ",", "capcity", ",", "demand", ",", "n_steps", ",", "T", ",", "greedy", ")", "\n", "return", "actions", ",", "log_p", "", "", "", ""]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrp_matplotlib.discrete_cmap": [[15, 20], ["matplotlib.pyplot.cm.get_cmap", "plt.cm.get_cmap.", "plt.cm.get_cmap.from_list", "numpy.linspace", "str"], "function", ["None"], ["def", "discrete_cmap", "(", "N", ",", "base_cmap", "=", "None", ")", ":", "\n", "    ", "base", "=", "plt", ".", "cm", ".", "get_cmap", "(", "base_cmap", ")", "\n", "color_list", "=", "base", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "N", ")", ")", "\n", "cmap_name", "=", "base", ".", "name", "+", "str", "(", "N", ")", "\n", "return", "base", ".", "from_list", "(", "cmap_name", ",", "color_list", ",", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrp_matplotlib.plot_vehicle_routes": [[21, 108], ["matplotlib.pyplot.rc", "data.x[].cpu().numpy", "data.x[].cpu().numpy", "ax1.plot", "ax1.set_xlim", "ax1.set_ylim", "ax1.legend", "vrp_matplotlib.discrete_cmap", "enumerate", "ax1.legend", "matplotlib.pyplot.legend", "matplotlib.collections.PatchCollection", "matplotlib.collections.PatchCollection", "matplotlib.collections.PatchCollection", "matplotlib.pyplot.show", "data.demand.cpu().numpy", "discrete_cmap.", "coords.transpose", "sum", "zip", "numpy.sqrt", "ax1.quiver", "qvs.append", "ax1.set_title", "ax1.set_title", "ax1.add_collection", "ax1.add_collection", "ax1.add_collection", "numpy.split", "data.x[].cpu", "data.x[].cpu", "len", "ax1.plot", "numpy.sqrt", "cap_rects.append", "used_rects.append", "dem_rects.append", "route.cpu().numpy", "data.demand.cpu", "len", "matplotlib.patches.Rectangle", "matplotlib.patches.Rectangle", "matplotlib.patches.Rectangle", "len", "len", "numpy.where", "len", "route.cpu", "int", "int", "route.cpu().numpy", "route.cpu"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrp_matplotlib.discrete_cmap"], ["", "def", "plot_vehicle_routes", "(", "data", ",", "route", ",", "ax1", ",", "Greedy", ",", "markersize", "=", "5", ",", "visualize_demands", "=", "False", ",", "demand_scale", "=", "1", ",", "round_demand", "=", "False", ")", ":", "\n", "\n", "    ", "plt", ".", "rc", "(", "'font'", ",", "family", "=", "'Times New Roman'", ",", "size", "=", "10", ")", "\n", "\n", "routes", "=", "[", "r", "[", "r", "!=", "0", "]", "for", "r", "in", "np", ".", "split", "(", "route", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "np", ".", "where", "(", "route", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "==", "0", ")", "[", "0", "]", ")", "if", "(", "r", "!=", "0", ")", ".", "any", "(", ")", "]", "\n", "depot", "=", "data", ".", "x", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "locs", "=", "data", ".", "x", "[", "1", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "demands", "=", "data", ".", "demand", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "10", "\n", "demands", "=", "demands", "[", "1", ":", "]", "\n", "\n", "capacity", "=", "data", ".", "capcity", "*", "10", "\n", "\n", "x_dep", ",", "y_dep", "=", "depot", "\n", "ax1", ".", "plot", "(", "x_dep", ",", "y_dep", ",", "'sk'", ",", "markersize", "=", "markersize", "*", "4", ")", "\n", "ax1", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax1", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "\n", "legend", "=", "ax1", ".", "legend", "(", "loc", "=", "'upper center'", ")", "\n", "\n", "cmap", "=", "discrete_cmap", "(", "len", "(", "routes", ")", "+", "2", ",", "'nipy_spectral'", ")", "\n", "dem_rects", "=", "[", "]", "\n", "used_rects", "=", "[", "]", "\n", "cap_rects", "=", "[", "]", "\n", "qvs", "=", "[", "]", "\n", "total_dist", "=", "0", "\n", "for", "veh_number", ",", "r", "in", "enumerate", "(", "routes", ")", ":", "\n", "        ", "color", "=", "cmap", "(", "len", "(", "routes", ")", "-", "veh_number", ")", "# Invert to have in rainbow order", "\n", "\n", "route_demands", "=", "demands", "[", "r", "-", "1", "]", "\n", "coords", "=", "locs", "[", "r", "-", "1", ",", ":", "]", "\n", "xs", ",", "ys", "=", "coords", ".", "transpose", "(", ")", "\n", "\n", "total_route_demand", "=", "sum", "(", "route_demands", ")", "\n", "#assert total_route_demand <= capacity", "\n", "if", "not", "visualize_demands", ":", "\n", "            ", "ax1", ".", "plot", "(", "xs", ",", "ys", ",", "'o'", ",", "mfc", "=", "color", ",", "markersize", "=", "markersize", ",", "markeredgewidth", "=", "0.0", ")", "\n", "\n", "", "dist", "=", "0", "\n", "x_prev", ",", "y_prev", "=", "x_dep", ",", "y_dep", "\n", "cum_demand", "=", "0", "\n", "for", "(", "x", ",", "y", ")", ",", "d", "in", "zip", "(", "coords", ",", "route_demands", ")", ":", "\n", "            ", "dist", "+=", "np", ".", "sqrt", "(", "(", "x", "-", "x_prev", ")", "**", "2", "+", "(", "y", "-", "y_prev", ")", "**", "2", ")", "\n", "\n", "cap_rects", ".", "append", "(", "Rectangle", "(", "(", "x", ",", "y", ")", ",", "0.01", ",", "0.1", ")", ")", "\n", "used_rects", ".", "append", "(", "Rectangle", "(", "(", "x", ",", "y", ")", ",", "0.01", ",", "0.1", "*", "total_route_demand", "/", "capacity", ")", ")", "\n", "dem_rects", ".", "append", "(", "Rectangle", "(", "(", "x", ",", "y", "+", "0.1", "*", "cum_demand", "/", "capacity", ")", ",", "0.01", ",", "0.1", "*", "d", "/", "capacity", ")", ")", "\n", "\n", "x_prev", ",", "y_prev", "=", "x", ",", "y", "\n", "cum_demand", "+=", "d", "\n", "\n", "", "dist", "+=", "np", ".", "sqrt", "(", "(", "x_dep", "-", "x_prev", ")", "**", "2", "+", "(", "y_dep", "-", "y_prev", ")", "**", "2", ")", "\n", "total_dist", "+=", "dist", "\n", "qv", "=", "ax1", ".", "quiver", "(", "\n", "xs", "[", ":", "-", "1", "]", ",", "\n", "ys", "[", ":", "-", "1", "]", ",", "\n", "xs", "[", "1", ":", "]", "-", "xs", "[", ":", "-", "1", "]", ",", "\n", "ys", "[", "1", ":", "]", "-", "ys", "[", ":", "-", "1", "]", ",", "\n", "scale_units", "=", "'xy'", ",", "\n", "angles", "=", "'xy'", ",", "\n", "scale", "=", "1", ",", "\n", "color", "=", "color", ",", "\n", "label", "=", "'R{}, N({}), C {} / {}, D {:.2f}'", ".", "format", "(", "\n", "veh_number", ",", "\n", "len", "(", "r", ")", ",", "\n", "int", "(", "total_route_demand", ")", "if", "round_demand", "else", "total_route_demand", ",", "\n", "int", "(", "capacity", ")", "if", "round_demand", "else", "capacity", ",", "\n", "dist", "\n", ")", "\n", ")", "\n", "\n", "qvs", ".", "append", "(", "qv", ")", "\n", "", "if", "Greedy", ":", "\n", "        ", "ax1", ".", "set_title", "(", "'Greedy,{} routes, total distance {:.2f}'", ".", "format", "(", "len", "(", "routes", ")", ",", "total_dist", ")", ",", "family", "=", "'Times New Roman'", ",", "size", "=", "20", ")", "\n", "", "else", ":", "\n", "        ", "ax1", ".", "set_title", "(", "'Sampling1280,{} routes, total distance {:.2f}'", ".", "format", "(", "len", "(", "routes", ")", ",", "total_dist", ")", ",", "family", "=", "'Times New Roman'", ",", "size", "=", "20", ")", "\n", "\n", "", "ax1", ".", "legend", "(", "handles", "=", "qvs", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "1", ")", "\n", "pc_cap", "=", "PatchCollection", "(", "cap_rects", ",", "facecolor", "=", "'whitesmoke'", ",", "alpha", "=", "1.0", ",", "edgecolor", "=", "'lightgray'", ")", "\n", "pc_used", "=", "PatchCollection", "(", "used_rects", ",", "facecolor", "=", "'lightgray'", ",", "alpha", "=", "1.0", ",", "edgecolor", "=", "'lightgray'", ")", "\n", "pc_dem", "=", "PatchCollection", "(", "dem_rects", ",", "facecolor", "=", "'black'", ",", "alpha", "=", "1.0", ",", "edgecolor", "=", "'black'", ")", "\n", "\n", "if", "visualize_demands", ":", "\n", "        ", "ax1", ".", "add_collection", "(", "pc_cap", ")", "\n", "ax1", ".", "add_collection", "(", "pc_used", ")", "\n", "ax1", ".", "add_collection", "(", "pc_dem", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "#plt.savefig(\"./temp{}.png\".format(54), dpi=600, bbox_inches='tight')", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.vrp_matplotlib.vrp_matplotlib": [[110, 202], ["numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "numpy.random.randint", "numpy.zeros", "enumerate", "np.zeros.reshape", "range", "torch.LongTensor", "edges_index.transpose.transpose", "torch_geometric.data.Data", "datas.append", "torch_geometric.data.DataLoader", "VRP.VRP_Actor.Model().to", "Model().to.to", "os.path.join", "os.path.exists", "enumerate", "np.loadtxt.reshape", "np.loadtxt.reshape", "enumerate", "range", "os.path.join", "Model().to.load_state_dict", "next", "next.to", "Model().to.eval", "range", "torch_geometric.data.DataLoader", "min_tour.unsqueeze", "zip", "vrp_matplotlib.vrp_matplotlib.c_dist"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.load_state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval"], ["", "def", "vrp_matplotlib", "(", "Greedy", "=", "True", ")", ":", "\n", "\n", "    ", "node_", "=", "np", ".", "loadtxt", "(", "'./test_data/vrp100_test_data.csv'", ",", "dtype", "=", "np", ".", "float", ",", "delimiter", "=", "','", ")", "\n", "demand_", "=", "np", ".", "loadtxt", "(", "'./test_data/vrp100_demand.csv'", ",", "dtype", "=", "np", ".", "float", ",", "delimiter", "=", "','", ")", "\n", "capcity_", "=", "np", ".", "loadtxt", "(", "'./test_data/vrp100_capcity.csv'", ",", "dtype", "=", "np", ".", "float", ",", "delimiter", "=", "','", ")", "\n", "node_", ",", "demand_", "=", "node_", ".", "reshape", "(", "-", "1", ",", "n_nodes", ",", "2", ")", ",", "demand_", ".", "reshape", "(", "-", "1", ",", "n_nodes", ")", "\n", "data_size", "=", "node_", ".", "shape", "[", "0", "]", "\n", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "data_size", ")", "\n", "# Calculate the distance matrix", "\n", "edges", "=", "np", ".", "zeros", "(", "(", "n_nodes", ",", "n_nodes", ",", "1", ")", ")", "\n", "def", "c_dist", "(", "x1", ",", "x2", ")", ":", "\n", "        ", "return", "(", "(", "x1", "[", "0", "]", "-", "x2", "[", "0", "]", ")", "**", "2", "+", "(", "x1", "[", "1", "]", "-", "x2", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "", "for", "i", ",", "(", "x1", ",", "y1", ")", "in", "enumerate", "(", "node_", "[", "x", "]", ")", ":", "\n", "        ", "for", "j", ",", "(", "x2", ",", "y2", ")", "in", "enumerate", "(", "node_", "[", "x", "]", ")", ":", "\n", "            ", "d", "=", "c_dist", "(", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ")", "\n", "edges", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "d", "\n", "", "", "edges_", "=", "edges", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "edges_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_nodes", ")", ":", "\n", "            ", "edges_index", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "", "edges_index", "=", "torch", ".", "LongTensor", "(", "edges_index", ")", "\n", "edges_index", "=", "edges_index", ".", "transpose", "(", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "\n", "datas", "=", "[", "]", "\n", "data", "=", "Data", "(", "x", "=", "torch", ".", "from_numpy", "(", "node_", "[", "x", "]", ")", ".", "float", "(", ")", ",", "edge_index", "=", "edges_index", ",", "edge_attr", "=", "torch", ".", "from_numpy", "(", "edges_", ")", ".", "float", "(", ")", ",", "\n", "demand", "=", "torch", ".", "tensor", "(", "demand_", "[", "x", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ",", "\n", "capcity", "=", "torch", ".", "tensor", "(", "capcity_", "[", "x", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "data_loder", "=", "DataLoader", "(", "datas", ",", "batch_size", "=", "1", ")", "\n", "\n", "\n", "\n", "agent", "=", "Model", "(", "3", ",", "128", ",", "1", ",", "16", ",", "conv_laysers", "=", "4", ")", ".", "to", "(", "device", ")", "\n", "agent", ".", "to", "(", "device", ")", "\n", "folder", "=", "'trained'", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'%s'", "%", "n_nodes", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "path1", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'actor.pt'", ")", "\n", "agent", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path1", ",", "device", ")", ")", "\n", "", "if", "Greedy", ":", "\n", "        ", "batch", "=", "next", "(", "iter", "(", "data_loder", ")", ")", "\n", "batch", ".", "to", "(", "device", ")", "\n", "agent", ".", "eval", "(", ")", "\n", "#-------------------------------------------------------------------------------------------Greedy", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tour", ",", "_", "=", "agent", "(", "batch", ",", "n_nodes", "*", "2", ",", "True", ")", "\n", "#cost = reward1(batch.x, tour.detach(), n_nodes)", "\n", "#print(cost)", "\n", "#print(tour)", "\n", "#-------------------------------------------------------------------------------------------sampling1280", "\n", "", "", "else", ":", "\n", "        ", "datas_", "=", "[", "]", "\n", "batch_size1", "=", "128", "# sampling batch_size", "\n", "for", "y", "in", "range", "(", "1280", ")", ":", "\n", "            ", "data", "=", "Data", "(", "x", "=", "torch", ".", "from_numpy", "(", "node_", "[", "x", "]", ")", ".", "float", "(", ")", ",", "edge_index", "=", "edges_index", ",", "\n", "edge_attr", "=", "torch", ".", "from_numpy", "(", "edges_", ")", ".", "float", "(", ")", ",", "\n", "demand", "=", "torch", ".", "tensor", "(", "demand_", "[", "x", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ",", "\n", "capcity", "=", "torch", ".", "tensor", "(", "capcity_", "[", "x", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ")", "\n", "datas_", ".", "append", "(", "data", ")", "\n", "", "dl", "=", "DataLoader", "(", "datas_", ",", "batch_size", "=", "batch_size1", ")", "\n", "\n", "min_tour", "=", "[", "]", "\n", "min_cost", "=", "100", "\n", "T", "=", "1.2", "#Temperature hyperparameters", "\n", "for", "batch", "in", "dl", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch", ".", "to", "(", "device", ")", "\n", "tour1", ",", "_", "=", "agent", "(", "batch", ",", "n_nodes", "*", "2", ",", "False", ",", "T", ")", "\n", "cost", "=", "reward1", "(", "batch", ".", "x", ",", "tour1", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "\n", "id", "=", "np", ".", "array", "(", "cost", ".", "cpu", "(", ")", ")", ".", "argmin", "(", ")", "\n", "m_cost", "=", "np", ".", "array", "(", "cost", ".", "cpu", "(", ")", ")", ".", "min", "(", ")", "\n", "tour1", "=", "tour1", ".", "reshape", "(", "batch_size1", ",", "-", "1", ")", "\n", "if", "m_cost", "<", "min_cost", ":", "\n", "                    ", "min_cost", "=", "m_cost", "\n", "min_tour", "=", "tour1", "[", "id", "]", "\n", "\n", "", "", "", "tour", "=", "min_tour", ".", "unsqueeze", "(", "-", "2", ")", "\n", "\n", "#--------------------------------------------------------------------------------------------", "\n", "", "for", "i", ",", "(", "data", ",", "tour", ")", "in", "enumerate", "(", "zip", "(", "data_loder", ",", "tour", ")", ")", ":", "\n", "        ", "if", "Greedy", ":", "\n", "            ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "plot_vehicle_routes", "(", "data", ",", "tour", ",", "ax", ",", "Greedy", ",", "visualize_demands", "=", "False", ",", "demand_scale", "=", "50", ",", "round_demand", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "plot_vehicle_routes", "(", "data", ",", "tour", ",", "ax", ",", "Greedy", ",", "visualize_demands", "=", "False", ",", "demand_scale", "=", "50", ",", "round_demand", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.rolloutBaseline1.RolloutBaseline.__init__": [[25, 30], ["super().__init__", "rolloutBaseline1.RolloutBaseline._update_model"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline._update_model"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "dataset", ",", "n_nodes", "=", "50", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "super", "(", "RolloutBaseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "_update_model", "(", "model", ",", "epoch", ")", "\n", "", "def", "_update_model", "(", "self", ",", "model", ",", "epoch", ",", "dataset", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.rolloutBaseline1.RolloutBaseline._update_model": [[30, 35], ["copy.deepcopy", "rollout().cpu().numpy", "rolloutBaseline1.RolloutBaseline.bl_vals.mean", "rollout().cpu", "rolloutBaseline1.rollout"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.rollout"], ["", "def", "_update_model", "(", "self", ",", "model", ",", "epoch", ",", "dataset", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "self", ".", "bl_vals", "=", "rollout", "(", "self", ".", "model", ",", "self", ".", "dataset", ",", "n_nodes", "=", "self", ".", "n_nodes", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "mean", "=", "self", ".", "bl_vals", ".", "mean", "(", ")", "\n", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.rolloutBaseline1.RolloutBaseline.eval": [[36, 44], ["torch.no_grad", "rolloutBaseline1.RolloutBaseline.model", "VRP.creat_vrp.reward1", "tour.detach"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1"], ["", "def", "eval", "(", "self", ",", "x", ",", "n_nodes", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tour", ",", "_", "=", "self", ".", "model", "(", "x", ",", "n_nodes", ",", "True", ")", "\n", "v", "=", "reward1", "(", "x", ".", "x", ",", "tour", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "\n", "# There is no loss", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.rolloutBaseline1.RolloutBaseline.epoch_callback": [[45, 64], ["print", "rollout().cpu().numpy", "rollout().cpu().numpy.mean", "print", "scipy.stats.ttest_rel", "print", "rollout().cpu", "print", "rolloutBaseline1.RolloutBaseline._update_model", "rolloutBaseline1.rollout"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline._update_model", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.rollout"], ["", "def", "epoch_callback", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "\n", "        ", "print", "(", "\"Evaluating candidate model on evaluation dataset\"", ")", "\n", "candidate_vals", "=", "rollout", "(", "model", ",", "self", ".", "dataset", ",", "self", ".", "n_nodes", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "candidate_mean", "=", "candidate_vals", ".", "mean", "(", ")", "\n", "\n", "print", "(", "\"Epoch {} candidate mean {}, baseline epoch {} mean {}, difference {}\"", ".", "format", "(", "\n", "epoch", ",", "candidate_mean", ",", "self", ".", "epoch", ",", "self", ".", "mean", ",", "candidate_mean", "-", "self", ".", "mean", ")", ")", "\n", "if", "candidate_mean", "-", "self", ".", "mean", "<", "0", ":", "\n", "# Calc p value", "\n", "            ", "t", ",", "p", "=", "ttest_rel", "(", "candidate_vals", ",", "self", ".", "bl_vals", ")", "\n", "\n", "p_val", "=", "p", "/", "2", "# one-sided", "\n", "assert", "t", "<", "0", ",", "\"T-statistic should be negative\"", "\n", "print", "(", "\"p-value: {}\"", ".", "format", "(", "p_val", ")", ")", "\n", "if", "p_val", "<", "0.05", ":", "\n", "                ", "print", "(", "'Update baseline'", ")", "\n", "self", ".", "_update_model", "(", "model", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.rolloutBaseline1.RolloutBaseline.state_dict": [[65, 70], ["None"], "methods", ["None"], ["", "", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'model'", ":", "self", ".", "model", ",", "\n", "'dataset'", ":", "self", ".", "dataset", ",", "\n", "'epoch'", ":", "self", ".", "epoch", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.rolloutBaseline1.RolloutBaseline.load_state_dict": [[72, 76], ["copy.deepcopy", "get_inner_model().load_state_dict", "rolloutBaseline1.RolloutBaseline._update_model", "get_inner_model().state_dict", "rolloutBaseline1.get_inner_model", "rolloutBaseline1.get_inner_model"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.load_state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline._update_model", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.get_inner_model", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.get_inner_model"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "load_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "get_inner_model", "(", "load_model", ")", ".", "load_state_dict", "(", "get_inner_model", "(", "state_dict", "[", "'model'", "]", ")", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "_update_model", "(", "load_model", ",", "state_dict", "[", "'epoch'", "]", ",", "state_dict", "[", "'dataset'", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.rolloutBaseline1.get_inner_model": [[10, 12], ["isinstance"], "function", ["None"], ["def", "get_inner_model", "(", "model", ")", ":", "\n", "    ", "return", "model", ".", "module", "if", "isinstance", "(", "model", ",", "DataParallel", ")", "else", "model", "\n", "", "def", "rollout", "(", "model", ",", "dataset", ",", "n_nodes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.rolloutBaseline1.rollout": [[12, 22], ["model.eval", "torch.cat", "VRP.creat_vrp.reward1.cpu", "torch.no_grad", "model", "VRP.creat_vrp.reward1", "rolloutBaseline1.rollout.eval_model_bat"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1"], ["", "def", "rollout", "(", "model", ",", "dataset", ",", "n_nodes", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "def", "eval_model_bat", "(", "bat", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cost", ",", "_", "=", "model", "(", "bat", ",", "n_nodes", "*", "2", ",", "True", ")", "\n", "cost", "=", "reward1", "(", "bat", ".", "x", ",", "cost", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "", "return", "cost", ".", "cpu", "(", ")", "\n", "", "totall_cost", "=", "torch", ".", "cat", "(", "[", "eval_model_bat", "(", "bat", ".", "to", "(", "device", ")", ")", "for", "bat", "in", "dataset", "]", ",", "0", ")", "\n", "return", "totall_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Rollout_train.rollout": [[21, 32], ["model.eval", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "VRP.creat_vrp.reward1.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "VRP.creat_vrp.reward1", "VRP_Rollout_train.rollout.eval_model_bat"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1"], ["def", "rollout", "(", "model", ",", "dataset", ",", "batch_size", ",", "n_nodes", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "def", "eval_model_bat", "(", "bat", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cost", ",", "_", "=", "model", "(", "bat", ",", "n_nodes", "*", "2", ",", "True", ")", "\n", "\n", "cost", "=", "reward1", "(", "bat", ".", "x", ",", "cost", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "", "return", "cost", ".", "cpu", "(", ")", "\n", "", "totall_cost", "=", "torch", ".", "cat", "(", "[", "eval_model_bat", "(", "bat", ".", "to", "(", "device", ")", ")", "for", "bat", "in", "dataset", "]", ",", "0", ")", "\n", "return", "totall_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Rollout_train.adv_normalize": [[36, 41], ["adv.std", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "adv.mean", "adv.std"], "function", ["None"], ["def", "adv_normalize", "(", "adv", ")", ":", "\n", "    ", "std", "=", "adv", ".", "std", "(", ")", "\n", "assert", "std", "!=", "0.", "and", "not", "torch", ".", "isnan", "(", "std", ")", ",", "'Need nonzero std'", "\n", "n_advs", "=", "(", "adv", "-", "adv", ".", "mean", "(", ")", ")", "/", "(", "adv", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "return", "n_advs", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.VRP_Rollout_train.train": [[42, 139], ["collections.OrderedDict", "RunBuilder.get_runs", "print", "VRP.creat_vrp.creat_data", "VRP.creat_vrp.creat_data", "print", "VRP.VRP_Actor.Model().to", "VRP.rolloutBaseline1.RolloutBaseline", "os.path.join", "torch.Adam", "range", "collections.namedtuple", "itertools.product", "Model().to.parameters", "print", "Model().to.train", "time.time", "torch.optim.lr_scheduler.LambdaLR", "enumerate", "VRP.rolloutBaseline1.RolloutBaseline.epoch_callback", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "VRP_Rollout_train.rollout", "cost.mean.mean", "costs.append", "print", "print", "collections.OrderedDict.keys", "RunBuilder.get_runs.append", "VRP.VRP_Actor.Model", "batch.to.to", "Model().to.", "VRP.creat_vrp.reward1", "VRP.rolloutBaseline1.RolloutBaseline.eval", "VRP_Rollout_train.adv_normalize", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "optim.Adam.zero_grad", "torch.mean.backward", "optim.Adam.step", "torch.optim.lr_scheduler.LambdaLR.step", "rewards.append", "losses.append", "os.path.exists", "os.makedirs", "Model().to.state_dict", "cost.mean.item", "cost.mean.item", "collections.OrderedDict.values", "collections.namedtuple.", "tour_indices.detach", "adv_normalize.ne().any", "print", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "time.time", "times.append", "numpy.mean", "numpy.mean", "print", "adv_normalize.detach", "adv_normalize.ne", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "VRP.creat_vrp.reward1.detach", "torch.mean.detach", "len"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_data", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_data", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Rollout_train.train", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.epoch_callback", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.rollout", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Agentppo.adv_normalize", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.state_dict"], ["", "def", "train", "(", ")", ":", "\n", "#------------------------------------------------------------------------------------------------------------------------------", "\n", "    ", "class", "RunBuilder", "(", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "get_runs", "(", "params", ")", ":", "\n", "            ", "Run", "=", "namedtuple", "(", "'Run'", ",", "params", ".", "keys", "(", ")", ")", "\n", "runs", "=", "[", "]", "\n", "for", "v", "in", "product", "(", "*", "params", ".", "values", "(", ")", ")", ":", "\n", "                ", "runs", ".", "append", "(", "Run", "(", "*", "v", ")", ")", "\n", "", "return", "runs", "\n", "\n", "", "", "params", "=", "OrderedDict", "(", "\n", "lr", "=", "[", "1e-3", "]", ",", "\n", "batch_size", "=", "[", "512", "]", ",", "\n", "hidden_node_dim", "=", "[", "128", "]", ",", "\n", "hidden_edge_dim", "=", "[", "16", "]", ",", "\n", "conv_laysers", "=", "[", "4", "]", ",", "\n", "data_size", "=", "[", "768000", "]", "\n", ")", "\n", "runs", "=", "RunBuilder", ".", "get_runs", "(", "params", ")", "\n", "#-------------------------------------------------------------------------------------------------------------------------------------", "\n", "\n", "folder", "=", "'Vrp-{}-GAT'", ".", "format", "(", "n_nodes", ")", "\n", "filename", "=", "'rollout'", "\n", "for", "lr", ",", "batch_size", ",", "hidden_node_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ",", "data_size", "in", "runs", ":", "\n", "        ", "print", "(", "'lr'", ",", "'batch_size'", ",", "'hidden_node_dim'", ",", "'hidden_edge_dim'", ",", "'conv_laysers:'", ",", "lr", ",", "batch_size", ",", "hidden_node_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", "\n", "data_loder", "=", "creat_data", "(", "n_nodes", ",", "data_size", ",", "batch_size", "=", "batch_size", ")", "\n", "valid_loder", "=", "creat_data", "(", "n_nodes", ",", "10000", ",", "batch_size", "=", "batch_size", ")", "\n", "print", "(", "'Data creation completed'", ")", "\n", "\n", "actor", "=", "Model", "(", "3", ",", "hidden_node_dim", ",", "1", ",", "hidden_edge_dim", ",", "conv_laysers", "=", "conv_laysers", ")", ".", "to", "(", "device", ")", "\n", "rol_baseline", "=", "RolloutBaseline", "(", "actor", ",", "valid_loder", ",", "n_nodes", "=", "steps", ")", "\n", "#initWeights(actor)", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", "\n", "'''path = os.path.join(filepath,'%s' % 3)\n                if os.path.exists(path):\n                    path1 = os.path.join(path, 'actor.pt')\n                    self.agent.old_polic.load_state_dict(torch.load(path1, device))'''", "\n", "actor_optim", "=", "optim", ".", "Adam", "(", "actor", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "costs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "            ", "print", "(", "\"epoch:\"", ",", "epoch", ",", "\"------------------------------------------------\"", ")", "\n", "actor", ".", "train", "(", ")", "\n", "\n", "times", ",", "losses", ",", "rewards", ",", "critic_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "start", "=", "epoch_start", "\n", "\n", "scheduler", "=", "LambdaLR", "(", "actor_optim", ",", "lr_lambda", "=", "lambda", "f", ":", "0.96", "**", "epoch", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "data_loder", ")", ":", "\n", "                ", "batch", "=", "batch", ".", "to", "(", "device", ")", "\n", "tour_indices", ",", "tour_logp", "=", "actor", "(", "batch", ",", "steps", "*", "2", ")", "\n", "\n", "rewar", "=", "reward1", "(", "batch", ".", "x", ",", "tour_indices", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "base_reward", "=", "rol_baseline", ".", "eval", "(", "batch", ",", "steps", ")", "\n", "\n", "advantage", "=", "(", "rewar", "-", "base_reward", ")", "\n", "if", "not", "advantage", ".", "ne", "(", "0", ")", ".", "any", "(", ")", ":", "\n", "                    ", "print", "(", "\"advantage==0.\"", ")", "\n", "", "advantage", "=", "adv_normalize", "(", "advantage", ")", "\n", "actor_loss", "=", "torch", ".", "mean", "(", "advantage", ".", "detach", "(", ")", "*", "tour_logp", ")", "\n", "\n", "actor_optim", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "#grad_norms = clip_grad_norms(actor_optim.param_groups, 1)", "\n", "#torch.nn.utils.clip_grad_norm_(actor.parameters(), max_grad_norm)", "\n", "actor_optim", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "rewards", ".", "append", "(", "torch", ".", "mean", "(", "rewar", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "losses", ".", "append", "(", "torch", ".", "mean", "(", "actor_loss", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "\n", "step", "=", "200", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "step", "==", "0", ":", "\n", "                    ", "end", "=", "time", ".", "time", "(", ")", "\n", "times", ".", "append", "(", "end", "-", "start", ")", "\n", "start", "=", "end", "\n", "\n", "mean_loss", "=", "np", ".", "mean", "(", "losses", "[", "-", "step", ":", "]", ")", "\n", "mean_reward", "=", "np", ".", "mean", "(", "rewards", "[", "-", "step", ":", "]", ")", "\n", "\n", "print", "(", "'  Batch %d/%d, reward: %2.3f, loss: %2.4f, took: %2.4fs'", "%", "\n", "(", "batch_idx", ",", "len", "(", "data_loder", ")", ",", "mean_reward", ",", "mean_loss", ",", "\n", "times", "[", "-", "1", "]", ")", ")", "\n", "", "", "rol_baseline", ".", "epoch_callback", "(", "actor", ",", "epoch", ")", "\n", "\n", "epoch_dir", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'%s'", "%", "epoch", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "epoch_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "epoch_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "epoch_dir", ",", "'actor.pt'", ")", "\n", "torch", ".", "save", "(", "actor", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "cost", "=", "rollout", "(", "actor", ",", "valid_loder", ",", "batch_size", ",", "steps", ")", "\n", "cost", "=", "cost", ".", "mean", "(", ")", "\n", "costs", ".", "append", "(", "cost", ".", "item", "(", ")", ")", "\n", "\n", "print", "(", "'Problem:TSP'", "'%s'", "%", "n_nodes", ",", "'/ Average distance:'", ",", "cost", ".", "item", "(", ")", ")", "\n", "print", "(", "costs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.test_vrp.rollout": [[10, 19], ["model.eval", "torch.cat", "VRP.creat_vrp.reward1.cpu", "torch.no_grad", "model", "VRP.creat_vrp.reward1", "test_vrp.rollout.eval_model_bat"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1"], ["def", "rollout", "(", "model", ",", "dataset", ",", "n_nodes", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "def", "eval_model_bat", "(", "bat", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cost", ",", "_", "=", "model", "(", "bat", ",", "n_nodes", "*", "2", ",", "True", ")", "\n", "cost", "=", "reward1", "(", "bat", ".", "x", ",", "cost", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "", "return", "cost", ".", "cpu", "(", ")", "\n", "", "totall_cost", "=", "torch", ".", "cat", "(", "[", "eval_model_bat", "(", "bat", ".", "to", "(", "device", ")", ")", "for", "bat", "in", "dataset", "]", ",", "0", ")", "\n", "return", "totall_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.test_vrp.evaliuate": [[20, 38], ["VRP.VRP_Actor.Model().to", "Model().to.to", "os.path.join", "os.path.exists", "test_vrp.rollout", "cost.mean.mean", "print", "cost.mean.min", "os.path.join", "Model().to.load_state_dict", "cost.mean.item", "VRP.VRP_Actor.Model", "torch.load"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.rollout", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.load_state_dict"], ["", "def", "evaliuate", "(", "valid_loder", ",", "n_node", ")", ":", "\n", "    ", "folder", "=", "'trained'", "\n", "\n", "agent", "=", "Model", "(", "3", ",", "128", ",", "1", ",", "16", ",", "conv_laysers", "=", "4", ")", ".", "to", "(", "device", ")", "\n", "agent", ".", "to", "(", "device", ")", "\n", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'%s'", "%", "n_node", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "path1", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'actor.pt'", ")", "\n", "agent", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path1", ",", "device", ")", ")", "\n", "", "cost", "=", "rollout", "(", "agent", ",", "valid_loder", ",", "n_node", ")", "\n", "cost", "=", "cost", ".", "mean", "(", ")", "\n", "print", "(", "'Problem:TSP'", "'%s'", "%", "n_node", ",", "'/ Average distance:'", ",", "cost", ".", "item", "(", ")", ")", "\n", "\n", "cost1", "=", "cost", ".", "min", "(", ")", "\n", "\n", "return", "cost", ",", "cost1", "\n", "", "def", "test", "(", "n_node", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.test_vrp.test": [[38, 81], ["np.loadtxt.reshape", "numpy.zeros", "enumerate", "np.zeros.reshape", "range", "torch.LongTensor", "edges_index.transpose.transpose", "range", "print", "torch_geometric.data.DataLoader", "test_vrp.evaliuate", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "print", "enumerate", "range", "torch_geometric.data.Data", "datas.append", "enumerate", "edges_index.transpose.append", "test_vrp.test.c_dist"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.test_tsp.evaliuate"], ["", "def", "test", "(", "n_node", ")", ":", "\n", "    ", "datas", "=", "[", "]", "\n", "\n", "if", "n_node", "==", "21", "or", "n_node", "==", "51", "or", "n_node", "==", "101", ":", "\n", "        ", "node_", "=", "np", ".", "loadtxt", "(", "'./test_data/vrp{}_test_data.csv'", ".", "format", "(", "n_node", "-", "1", ")", ",", "dtype", "=", "np", ".", "float", ",", "delimiter", "=", "','", ")", "\n", "demand_", "=", "np", ".", "loadtxt", "(", "'./test_data/vrp{}_demand.csv'", ".", "format", "(", "n_node", "-", "1", ")", ",", "dtype", "=", "np", ".", "float", ",", "delimiter", "=", "','", ")", "\n", "capcity_", "=", "np", ".", "loadtxt", "(", "'./test_data/vrp{}_capcity.csv'", ".", "format", "(", "n_node", "-", "1", ")", ",", "dtype", "=", "np", ".", "float", ",", "delimiter", "=", "','", ")", "\n", "batch_size", "=", "128", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Please enter 21, 51 or 101'", ")", "\n", "return", "\n", "", "node_", "=", "node_", ".", "reshape", "(", "-", "1", ",", "n_node", ",", "2", ")", "\n", "# Calculate the distance matrix", "\n", "def", "c_dist", "(", "x1", ",", "x2", ")", ":", "\n", "        ", "return", "(", "(", "x1", "[", "0", "]", "-", "x2", "[", "0", "]", ")", "**", "2", "+", "(", "x1", "[", "1", "]", "-", "x2", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "#edges = torch.zeros(n_nodes,n_nodes)", "\n", "\n", "", "data_size", "=", "node_", ".", "shape", "[", "0", "]", "\n", "\n", "edges", "=", "np", ".", "zeros", "(", "(", "data_size", ",", "n_node", ",", "n_node", ",", "1", ")", ")", "\n", "for", "k", ",", "data", "in", "enumerate", "(", "node_", ")", ":", "\n", "        ", "for", "i", ",", "(", "x1", ",", "y1", ")", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "for", "j", ",", "(", "x2", ",", "y2", ")", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "d", "=", "c_dist", "(", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ")", "\n", "edges", "[", "k", "]", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "d", "\n", "", "", "", "edges_", "=", "edges", ".", "reshape", "(", "data_size", ",", "-", "1", ",", "1", ")", "\n", "\n", "edges_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_node", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_node", ")", ":", "\n", "            ", "edges_index", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "", "edges_index", "=", "torch", ".", "LongTensor", "(", "edges_index", ")", "\n", "edges_index", "=", "edges_index", ".", "transpose", "(", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "data_size", ")", ":", "\n", "\n", "        ", "data", "=", "Data", "(", "x", "=", "torch", ".", "from_numpy", "(", "node_", "[", "i", "]", ")", ".", "float", "(", ")", ",", "edge_index", "=", "edges_index", ",", "edge_attr", "=", "torch", ".", "from_numpy", "(", "edges_", "[", "i", "]", ")", ".", "float", "(", ")", ",", "\n", "demand", "=", "torch", ".", "tensor", "(", "demand_", "[", "i", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ",", "\n", "capcity", "=", "torch", ".", "tensor", "(", "capcity_", "[", "i", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "", "print", "(", "'Data created'", ")", "\n", "dl", "=", "DataLoader", "(", "datas", ",", "batch_size", "=", "batch_size", ")", "\n", "evaliuate", "(", "dl", ",", "n_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.creat_vrp.creat_instance": [[6, 38], ["numpy.random.seed", "creat_vrp.creat_instance.random_tsp"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.gurobibaseline.random_tsp"], ["def", "creat_instance", "(", "num", ",", "n_nodes", "=", "100", ",", "random_seed", "=", "None", ")", ":", "\n", "    ", "if", "random_seed", "is", "None", ":", "\n", "        ", "random_seed", "=", "np", ".", "random", ".", "randint", "(", "123456789", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "def", "random_tsp", "(", "n_nodes", ",", "random_seed", "=", "None", ")", ":", "\n", "\n", "        ", "data", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "n_nodes", ",", "2", ")", ")", "\n", "return", "data", "\n", "", "datas", "=", "random_tsp", "(", "n_nodes", ")", "\n", "\n", "def", "c_dist", "(", "x1", ",", "x2", ")", ":", "\n", "        ", "return", "(", "(", "x1", "[", "0", "]", "-", "x2", "[", "0", "]", ")", "**", "2", "+", "(", "x1", "[", "1", "]", "-", "x2", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "#edges = torch.zeros(n_nodes,n_nodes)", "\n", "", "edges", "=", "np", ".", "zeros", "(", "(", "n_nodes", ",", "n_nodes", ",", "1", ")", ")", "\n", "\n", "for", "i", ",", "(", "x1", ",", "y1", ")", "in", "enumerate", "(", "datas", ")", ":", "\n", "        ", "for", "j", ",", "(", "x2", ",", "y2", ")", "in", "enumerate", "(", "datas", ")", ":", "\n", "            ", "d", "=", "c_dist", "(", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ")", "\n", "edges", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "d", "\n", "", "", "edges", "=", "edges", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "CAPACITIES", "=", "{", "\n", "10", ":", "2.", ",", "\n", "20", ":", "3.", ",", "\n", "50", ":", "4.", ",", "\n", "100", ":", "5.", "\n", "}", "\n", "\n", "demand", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "10", ",", "size", "=", "(", "n_nodes", "-", "1", ")", ")", "# Demand, uniform integer 1 ... 9", "\n", "demand", "=", "np", ".", "array", "(", "demand", ")", "/", "10", "\n", "demand", "=", "np", ".", "insert", "(", "demand", ",", "0", ",", "0.", ")", "\n", "capcity", "=", "CAPACITIES", "[", "n_nodes", "-", "1", "]", "\n", "return", "datas", ",", "edges", ",", "demand", ",", "capcity", "#demand(num,node) capcity(num)", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.creat_vrp.creat_data": [[41, 59], ["range", "torch.LongTensor", "edges_index.transpose.transpose", "range", "torch_geometric.data.DataLoader", "range", "creat_vrp.creat_instance", "torch_geometric.data.Data", "datas.append", "edges_index.transpose.append", "torch.from_numpy().float", "torch.from_numpy().float", "torch.tensor().unsqueeze().float", "torch.tensor().unsqueeze().float", "torch.from_numpy", "torch.from_numpy", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_instance"], ["def", "creat_data", "(", "n_nodes", ",", "num_samples", "=", "10000", ",", "batch_size", "=", "32", ")", ":", "\n", "    ", "edges_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_nodes", ")", ":", "\n", "            ", "edges_index", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "", "edges_index", "=", "torch", ".", "LongTensor", "(", "edges_index", ")", "\n", "edges_index", "=", "edges_index", ".", "transpose", "(", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "\n", "datas", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "node", ",", "edge", ",", "demand", ",", "capcity", "=", "creat_instance", "(", "num_samples", ",", "n_nodes", ")", "\n", "data", "=", "Data", "(", "x", "=", "torch", ".", "from_numpy", "(", "node", ")", ".", "float", "(", ")", ",", "edge_index", "=", "edges_index", ",", "edge_attr", "=", "torch", ".", "from_numpy", "(", "edge", ")", ".", "float", "(", ")", ",", "\n", "demand", "=", "torch", ".", "tensor", "(", "demand", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ",", "capcity", "=", "torch", ".", "tensor", "(", "capcity", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "#print(datas)", "\n", "", "dl", "=", "DataLoader", "(", "datas", ",", "batch_size", "=", "batch_size", ")", "\n", "return", "dl", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.creat_vrp.reward": [[60, 75], ["static.transpose.reshape", "static.transpose.transpose", "tour_indices.reshape.reshape", "tour_indices.reshape.unsqueeze().expand", "torch.gather().permute", "torch.cat", "torch.sqrt", "torch.sqrt.sum().detach", "static.transpose.size", "torch.sum", "tour_indices.reshape.unsqueeze", "torch.gather", "torch.pow", "torch.sqrt.sum"], "function", ["None"], ["", "def", "reward", "(", "static", ",", "tour_indices", ",", "n_nodes", ",", "batch_size", ")", ":", "\n", "\n", "    ", "static", "=", "static", ".", "reshape", "(", "-", "1", ",", "n_nodes", ",", "2", ")", "\n", "#print(static.shape)", "\n", "static", "=", "static", ".", "transpose", "(", "2", ",", "1", ")", "\n", "tour_indices", "=", "tour_indices", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "idx", "=", "tour_indices", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "static", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "tour", "=", "torch", ".", "gather", "(", "static", ".", "data", ",", "2", ",", "idx", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#print(tour.shape)", "\n", "#print(idx.shape)", "\n", "y", "=", "torch", ".", "cat", "(", "(", "tour", ",", "tour", "[", ":", ",", ":", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "tour_len", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "y", "[", ":", ",", ":", "-", "1", "]", "-", "y", "[", ":", ",", "1", ":", "]", ",", "2", ")", ",", "dim", "=", "2", ")", ")", "\n", "#print(tour_len.sum(1))", "\n", "return", "tour_len", ".", "sum", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.VRP.creat_vrp.reward1": [[77, 96], ["static.transpose.reshape", "static.transpose.transpose", "tour_indices.unsqueeze().expand", "torch.gather().permute", "static.transpose.data[].unsqueeze", "torch.cat", "torch.sqrt", "torch.sqrt.sum().detach", "static.transpose.size", "torch.sum", "tour_indices.unsqueeze", "torch.gather", "torch.pow", "torch.sqrt.sum"], "function", ["None"], ["", "def", "reward1", "(", "static", ",", "tour_indices", ",", "n_nodes", ")", ":", "\n", "\n", "    ", "static", "=", "static", ".", "reshape", "(", "-", "1", ",", "n_nodes", ",", "2", ")", "\n", "\n", "static", "=", "static", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "idx", "=", "tour_indices", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "static", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "tour", "=", "torch", ".", "gather", "(", "static", ",", "2", ",", "idx", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#print(tour.shape,tour[0])", "\n", "#print(idx.shape,idx[0])", "\n", "# Make a full tour by returning to the start", "\n", "start", "=", "static", ".", "data", "[", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "start", ",", "tour", ",", "start", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Euclidean distance between each consecutive point", "\n", "tour_len", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "y", "[", ":", ",", ":", "-", "1", "]", "-", "y", "[", ":", ",", "1", ":", "]", ",", "2", ")", ",", "dim", "=", "2", ")", ")", "\n", "#print(tour_len.sum(1))", "\n", "return", "tour_len", ".", "sum", "(", "1", ")", ".", "detach", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_train.TrainPPO.__init__": [[27, 36], ["TSP.PPO_Model.Memory", "TSP.PPO_Model.Agentppo"], "methods", ["None"], ["", "class", "TrainPPO", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "steps", ",", "greedy", ",", "lr", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "epoch", "=", "40", ",", "batch_size", "=", "32", ",", "conv_laysers", "=", "3", ",", "entropy_value", "=", "0.01", ",", "eps_clip", "=", "0.2", ",", "timestep", "=", "4", ",", "ppo_epoch", "=", "2", ")", ":", "\n", "\n", "        ", "self", ".", "steps", "=", "steps", "\n", "self", ".", "greedy", "=", "greedy", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "update_timestep", "=", "timestep", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "memory", "=", "Memory", "(", ")", "\n", "self", ".", "agent", "=", "Agentppo", "(", "steps", ",", "greedy", ",", "lr", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "ppo_epoch", ",", "batch_size", ",", "conv_laysers", ",", "entropy_value", ",", "eps_clip", ")", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_train.TrainPPO.run_train": [[37, 103], ["TSP.PPO_Model.Memory", "PPO_train.TrainPPO.agent.old_polic.to", "os.path.join", "range", "print", "PPO_train.TrainPPO.agent.old_polic.train", "time.time", "enumerate", "PPO_train.rollout", "cost.mean.mean.mean", "costs.append", "print", "print", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "batch.to.to.to", "PPO_train.TrainPPO.agent.old_polic.act", "TSP.create_tsp_instance.reward", "actions.to().detach.to().detach.to().detach", "log_p.to().detach.to().detach.to().detach", "rewards.to().detach.to().detach.to().detach", "range", "rewards2.append", "cost.mean.mean.item", "cost.mean.mean.item", "os.path.exists", "os.makedirs", "PPO_train.TrainPPO.agent.old_polic.state_dict", "x.view", "attr.view", "TSP.PPO_Model.Memory.input_x.append", "TSP.PPO_Model.Memory.input_attr.append", "TSP.PPO_Model.Memory.actions.append", "TSP.PPO_Model.Memory.log_probs.append", "TSP.PPO_Model.Memory.rewards.append", "PPO_train.TrainPPO.agent.update", "TSP.PPO_Model.Memory.def_memory", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "print", "time.time", "times.append", "numpy.mean", "print", "actions.to().detach.to().detach.to", "log_p.to().detach.to().detach.to", "rewards.to().detach.to().detach.to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "rewards.to().detach.to().detach.detach", "len"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Rollout_train.train", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.rollout", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Actor_critic.act", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Agentppo.update", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Memory.def_memory"], ["\n", "", "def", "run_train", "(", "self", ",", "data_loader", ",", "batch_size", ",", "valid_loder", ")", ":", "\n", "        ", "memory", "=", "Memory", "(", ")", "\n", "self", ".", "agent", ".", "old_polic", ".", "to", "(", "device", ")", "\n", "#initWeights(self.agent.old_polic)", "\n", "#initWeights(self.agent.policy)", "\n", "folder", "=", "'vrp-{}-GAT'", ".", "format", "(", "n_nodes", ")", "\n", "filename", "=", "'20201125'", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", "\n", "\n", "'''path = os.path.join(filepath,'%s' % 3)\n        if os.path.exists(path):\n            path1 = os.path.join(path, 'actor.pt')\n            self.agent.old_polic.load_state_dict(torch.load(path1, device))'''", "\n", "\n", "costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "print", "(", "'old_epoch:'", ",", "i", ",", "'***************************************'", ")", "\n", "self", ".", "agent", ".", "old_polic", ".", "train", "(", ")", "\n", "times", ",", "losses", ",", "rewards2", ",", "critic_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "start", "=", "epoch_start", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "                ", "x", ",", "attr", ",", "capcity", ",", "demand", "=", "batch", ".", "x", ",", "batch", ".", "edge_attr", ",", "batch", ".", "capcity", ",", "batch", ".", "demand", "\n", "#print(x.size(),index.size(),attr.size())", "\n", "x", ",", "attr", ",", "capcity", ",", "demand", "=", "x", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "2", ")", ",", "attr", ".", "view", "(", "batch_size", ",", "n_nodes", "*", "n_nodes", ",", "1", ")", ",", "capcity", ".", "view", "(", "batch_size", ",", "1", ")", ",", "demand", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "1", ")", "\n", "batch", "=", "batch", ".", "to", "(", "device", ")", "\n", "actions", ",", "log_p", "=", "self", ".", "agent", ".", "old_polic", ".", "act", "(", "batch", ",", "0", ",", "self", ".", "steps", ",", "batch_size", ",", "self", ".", "greedy", ",", "False", ")", "\n", "\n", "rewards", "=", "reward1", "(", "batch", ".", "x", ",", "actions", ",", "n_nodes", ")", "\n", "\n", "actions", "=", "actions", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", ".", "detach", "(", ")", "\n", "log_p", "=", "log_p", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", ".", "detach", "(", ")", "\n", "rewards", "=", "rewards", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", ".", "detach", "(", ")", "\n", "\n", "#print(actions.size(),log_p.size(),entropy.size())", "\n", "\n", "for", "i_batch", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "                    ", "memory", ".", "input_x", ".", "append", "(", "x", "[", "i_batch", "]", ")", "\n", "#memory.input_index.append(index[i_batch])", "\n", "memory", ".", "input_attr", ".", "append", "(", "attr", "[", "i_batch", "]", ")", "\n", "memory", ".", "actions", ".", "append", "(", "actions", "[", "i_batch", "]", ")", "\n", "memory", ".", "log_probs", ".", "append", "(", "log_p", "[", "i_batch", "]", ")", "\n", "memory", ".", "rewards", ".", "append", "(", "rewards", "[", "i_batch", "]", ")", "\n", "memory", ".", "capcity", ".", "append", "(", "capcity", "[", "i_batch", "]", ")", "\n", "memory", ".", "demand", ".", "append", "(", "demand", "[", "i_batch", "]", ")", "\n", "", "if", "(", "batch_idx", "+", "1", ")", "%", "self", ".", "update_timestep", "==", "0", ":", "\n", "                    ", "self", ".", "agent", ".", "update", "(", "memory", ",", "i", ")", "\n", "memory", ".", "def_memory", "(", ")", "\n", "", "rewards2", ".", "append", "(", "torch", ".", "mean", "(", "rewards", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "time_Space", "=", "100", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "time_Space", "==", "0", ":", "\n", "                    ", "end", "=", "time", ".", "time", "(", ")", "\n", "times", ".", "append", "(", "end", "-", "start", ")", "\n", "start", "=", "end", "\n", "mean_reward", "=", "np", ".", "mean", "(", "rewards2", "[", "-", "time_Space", ":", "]", ")", "\n", "print", "(", "'  Batch %d/%d, reward: %2.3f,took: %2.4fs'", "%", "\n", "(", "batch_idx", ",", "len", "(", "data_loader", ")", ",", "mean_reward", ",", "\n", "times", "[", "-", "1", "]", ")", ")", "\n", "", "", "cost", "=", "rollout", "(", "self", ".", "agent", ".", "policy", ",", "valid_loder", ",", "batch_size", ",", "self", ".", "steps", ")", "\n", "cost", "=", "cost", ".", "mean", "(", ")", "\n", "costs", ".", "append", "(", "cost", ".", "item", "(", ")", ")", "\n", "print", "(", "'Problem:TSP'", "'%s'", "%", "n_nodes", ",", "'/ Average distance:'", ",", "cost", ".", "item", "(", ")", ")", "\n", "print", "(", "costs", ")", "\n", "epoch_dir", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'%s'", "%", "i", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "epoch_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_train.rollout": [[15, 25], ["model.eval", "torch.cat", "torch.cat", "TSP.create_tsp_instance.reward1.cpu", "torch.no_grad", "torch.no_grad", "model.act", "TSP.create_tsp_instance.reward1", "PPO_train.rollout.eval_model_bat"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Actor_critic.act", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1"], ["n_nodes", "=", "21", "\n", "def", "rollout", "(", "model", ",", "dataset", ",", "batch_size", ",", "steps", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "def", "eval_model_bat", "(", "bat", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cost", ",", "_", "=", "model", ".", "act", "(", "bat", ",", "0", ",", "steps", ",", "batch_size", ",", "True", ",", "False", ")", "\n", "\n", "cost", "=", "reward1", "(", "bat", ".", "x", ",", "cost", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "", "return", "cost", ".", "cpu", "(", ")", "\n", "", "totall_cost", "=", "torch", ".", "cat", "(", "[", "eval_model_bat", "(", "bat", ".", "to", "(", "device", ")", ")", "for", "bat", "in", "dataset", "]", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_train.train": [[103, 140], ["collections.OrderedDict", "RunBuilder.get_runs", "print", "TSP.create_tsp_instance.creat_data", "TSP.create_tsp_instance.creat_data", "print", "PPO_train.TrainPPO", "PPO_train.TrainPPO.run_train", "collections.namedtuple", "itertools.product", "collections.OrderedDict.keys", "RunBuilder.get_runs.append", "collections.OrderedDict.values", "collections.namedtuple."], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_data", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_data", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_train.TrainPPO.run_train"], ["if", "not", "os", ".", "path", ".", "exists", "(", "epoch_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "epoch_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "epoch_dir", ",", "'actor.pt'", ")", "\n", "torch", ".", "save", "(", "self", ".", "agent", ".", "old_polic", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "", "", "def", "train", "(", ")", ":", "\n", "    ", "class", "RunBuilder", "(", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "get_runs", "(", "params", ")", ":", "\n", "            ", "Run", "=", "namedtuple", "(", "'Run'", ",", "params", ".", "keys", "(", ")", ")", "\n", "runs", "=", "[", "]", "\n", "for", "v", "in", "product", "(", "*", "params", ".", "values", "(", ")", ")", ":", "\n", "                ", "runs", ".", "append", "(", "Run", "(", "*", "v", ")", ")", "\n", "", "return", "runs", "\n", "\n", "", "", "params", "=", "OrderedDict", "(", "\n", "lr", "=", "[", "3e-4", "]", ",", "\n", "hidden_node_dim", "=", "[", "128", "]", ",", "\n", "hidden_edge_dim", "=", "[", "16", "]", ",", "\n", "epoch", "=", "[", "100", "]", ",", "\n", "batch_size", "=", "[", "512", "]", ",", "\n", "conv_laysers", "=", "[", "4", "]", ",", "\n", "entropy_value", "=", "[", "0.01", "]", ",", "\n", "eps_clip", "=", "[", "0.2", "]", ",", "\n", "timestep", "=", "[", "1", "]", ",", "\n", "ppo_epoch", "=", "[", "3", "]", ",", "\n", "data_size", "=", "[", "512000", "]", ",", "\n", "valid_size", "=", "[", "10000", "]", "\n", ")", "\n", "runs", "=", "RunBuilder", ".", "get_runs", "(", "params", ")", "\n", "\n", "for", "lr", ",", "hidden_node_dim", ",", "hidden_edge_dim", ",", "epoch", ",", "batch_size", ",", "conv_laysers", ",", "entropy_value", ",", "eps_clip", ",", "timestep", ",", "ppo_epoch", ",", "data_size", ",", "valid_size", "in", "runs", ":", "\n", "        ", "print", "(", "'lr'", ",", "'batch_size'", ",", "'hidden_node_dim'", ",", "'hidden_edge_dim'", ",", "'conv_laysers'", ",", "'epoch,batch_size'", ",", "\n", "'entropy_value'", ",", "'eps_clip'", ",", "'timestep:'", ",", "'data_size'", ",", "'valid_size'", ",", "lr", ",", "hidden_node_dim", ",", "\n", "hidden_edge_dim", ",", "epoch", ",", "batch_size", ",", "conv_laysers", ",", "entropy_value", ",", "eps_clip", ",", "timestep", ",", "data_size", ",", "valid_size", ")", "\n", "data_loder", "=", "creat_data", "(", "n_nodes", ",", "data_size", ",", "batch_size", ")", "\n", "valid_loder", "=", "creat_data", "(", "n_nodes", ",", "valid_size", ",", "batch_size", ")", "\n", "print", "(", "'DATA CREATED/Problem size:'", ",", "n_nodes", ")", "\n", "trainppo", "=", "TrainPPO", "(", "n_nodes", "*", "2", ",", "False", ",", "lr", ",", "3", ",", "hidden_node_dim", ",", "1", ",", "hidden_edge_dim", ",", "epoch", ",", "batch_size", ",", "conv_laysers", ",", "entropy_value", ",", "eps_clip", ",", "timestep", ",", "ppo_epoch", ")", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_instance": [[5, 27], ["create_tsp_instance.creat_instance.random_tsp"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.gurobibaseline.random_tsp"], ["def", "creat_instance", "(", "n_nodes", "=", "100", ",", "random_seed", "=", "None", ")", ":", "\n", "    ", "def", "random_tsp", "(", "n_nodes", ",", "random_seed", "=", "random_seed", ")", ":", "\n", "        ", "if", "random_seed", "is", "None", ":", "\n", "            ", "random_seed", "=", "np", ".", "random", ".", "randint", "(", "123456789", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "\n", "data", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "n_nodes", ",", "2", ")", ")", "\n", "return", "data", "\n", "", "data", "=", "random_tsp", "(", "n_nodes", ")", "#Generate a set of tsp instances", "\n", "\n", "#Calculate the distance matrix", "\n", "def", "c_dist", "(", "x1", ",", "x2", ")", ":", "\n", "        ", "return", "(", "(", "x1", "[", "0", "]", "-", "x2", "[", "0", "]", ")", "**", "2", "+", "(", "x1", "[", "1", "]", "-", "x2", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "\n", "", "edges", "=", "np", ".", "zeros", "(", "(", "n_nodes", ",", "n_nodes", ",", "1", ")", ")", "\n", "for", "i", ",", "(", "x1", ",", "y1", ")", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "for", "j", ",", "(", "x2", ",", "y2", ")", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "d", "=", "c_dist", "(", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ")", "\n", "edges", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "d", "\n", "\n", "", "", "edges", "=", "edges", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "return", "data", ",", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_data": [[28, 45], ["range", "torch.LongTensor", "edges_index.transpose.transpose", "range", "torch_geometric.data.DataLoader", "range", "create_tsp_instance.creat_instance", "torch_geometric.data.Data", "datas.append", "edges_index.transpose.append", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_instance"], ["", "def", "creat_data", "(", "n_nodes", "=", "20", ",", "num_samples", "=", "10000", ",", "batch_size", "=", "32", ")", ":", "\n", "    ", "edges_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_nodes", ")", ":", "\n", "            ", "edges_index", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "", "edges_index", "=", "torch", ".", "LongTensor", "(", "edges_index", ")", "\n", "edges_index", "=", "edges_index", ".", "transpose", "(", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "\n", "datas", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "node", ",", "edge", "=", "creat_instance", "(", "n_nodes", ")", "\n", "data", "=", "Data", "(", "x", "=", "torch", ".", "from_numpy", "(", "node", ")", ".", "float", "(", ")", ",", "edge_index", "=", "edges_index", ",", "edge_attr", "=", "torch", ".", "from_numpy", "(", "edge", ")", ".", "float", "(", ")", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "#print(datas)", "\n", "", "dl", "=", "DataLoader", "(", "datas", ",", "batch_size", "=", "batch_size", ")", "\n", "return", "dl", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward": [[50, 65], ["static.transpose.reshape", "static.transpose.transpose", "tour_indices.reshape.reshape", "tour_indices.reshape.unsqueeze().expand_as", "torch.gather().permute", "torch.cat", "torch.sqrt", "torch.sqrt.sum().detach", "torch.sum", "tour_indices.reshape.unsqueeze", "torch.gather", "torch.pow", "torch.sqrt.sum"], "function", ["None"], ["", "def", "reward", "(", "static", ",", "tour_indices", ",", "n_nodes", ",", "batch_size", ")", ":", "\n", "\n", "    ", "static", "=", "static", ".", "reshape", "(", "-", "1", ",", "n_nodes", ",", "2", ")", "\n", "#print(static.shape)", "\n", "static", "=", "static", ".", "transpose", "(", "2", ",", "1", ")", "\n", "tour_indices", "=", "tour_indices", ".", "reshape", "(", "batch_size", ",", "n_nodes", ")", "\n", "idx", "=", "tour_indices", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "static", ")", "\n", "tour", "=", "torch", ".", "gather", "(", "static", ".", "data", ",", "2", ",", "idx", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#print(tour.shape)", "\n", "#print(idx.shape)", "\n", "y", "=", "torch", ".", "cat", "(", "(", "tour", ",", "tour", "[", ":", ",", ":", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "tour_len", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "y", "[", ":", ",", ":", "-", "1", "]", "-", "y", "[", ":", ",", "1", ":", "]", ",", "2", ")", ",", "dim", "=", "2", ")", ")", "\n", "#print(tour_len.sum(1))", "\n", "return", "tour_len", ".", "sum", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1": [[67, 85], ["static.transpose.reshape", "static.transpose.transpose", "tour_indices.unsqueeze().expand_as", "torch.gather().permute", "torch.cat", "torch.sqrt", "torch.sqrt.sum().detach", "torch.sum", "tour_indices.unsqueeze", "torch.gather", "torch.pow", "torch.sqrt.sum"], "function", ["None"], ["", "def", "reward1", "(", "static", ",", "tour_indices", ",", "n_nodes", ")", ":", "\n", "#static = static.transpose(2,1)", "\n", "#print(static.shape)  static(batch_size*n_nodes,2)", "\n", "#print(static.shape,static)", "\n", "    ", "static", "=", "static", ".", "reshape", "(", "-", "1", ",", "n_nodes", ",", "2", ")", "\n", "#print(static.shape,static)", "\n", "static", "=", "static", ".", "transpose", "(", "2", ",", "1", ")", "\n", "idx", "=", "tour_indices", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "static", ")", "\n", "tour", "=", "torch", ".", "gather", "(", "static", ",", "2", ",", "idx", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#print(tour.shape,tour[0])", "\n", "#print(idx.shape,idx[0])", "\n", "# Make a full tour by returning to the start", "\n", "y", "=", "torch", ".", "cat", "(", "(", "tour", ",", "tour", "[", ":", ",", ":", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Euclidean distance between each consecutive point", "\n", "tour_len", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "y", "[", ":", ",", ":", "-", "1", "]", "-", "y", "[", ":", ",", "1", ":", "]", ",", "2", ")", ",", "dim", "=", "2", ")", ")", "\n", "#print(tour_len.sum(1))", "\n", "return", "tour_len", ".", "sum", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Rollout_train.rollout": [[20, 29], ["model.eval", "torch.cat", "torch.cat", "torch.cat", "TSP.create_tsp_instance.reward1.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "TSP.create_tsp_instance.reward1", "Rollout_train.rollout.eval_model_bat"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1"], ["def", "rollout", "(", "model", ",", "dataset", ",", "batch_size", ",", "n_nodes", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "def", "eval_model_bat", "(", "bat", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cost", ",", "_", ",", "_", "=", "model", "(", "bat", ",", "n_nodes", ",", "True", ")", "\n", "cost", "=", "reward1", "(", "bat", ".", "x", ",", "cost", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "", "return", "cost", ".", "cpu", "(", ")", "\n", "", "totall_cost", "=", "torch", ".", "cat", "(", "[", "eval_model_bat", "(", "bat", ".", "to", "(", "device", ")", ")", "for", "bat", "in", "dataset", "]", ",", "0", ")", "\n", "return", "totall_cost", "\n", "", "def", "initWeights", "(", "net", ",", "scheme", "=", "'orthogonal'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Rollout_train.initWeights": [[29, 39], ["net.parameters", "len", "torch.init.orthogonal_", "torch.init.normal", "e.size", "torch.init.xavier_normal"], "function", ["None"], ["", "def", "initWeights", "(", "net", ",", "scheme", "=", "'orthogonal'", ")", ":", "\n", "\n", "   ", "for", "e", "in", "net", ".", "parameters", "(", ")", ":", "\n", "      ", "if", "scheme", "==", "'orthogonal'", ":", "\n", "         ", "if", "len", "(", "e", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "            ", "nn", ".", "init", ".", "orthogonal_", "(", "e", ")", "\n", "", "", "elif", "scheme", "==", "'normal'", ":", "\n", "         ", "nn", ".", "init", ".", "normal", "(", "e", ",", "std", "=", "1e-2", ")", "\n", "", "elif", "scheme", "==", "'xavier'", ":", "\n", "         ", "nn", ".", "init", ".", "xavier_normal", "(", "e", ")", "\n", "", "", "", "max_grad_norm", "=", "2", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Rollout_train.adv_normalize": [[42, 47], ["adv.std", "torch.isnan", "torch.isnan", "torch.isnan", "adv.mean", "adv.std"], "function", ["None"], ["def", "adv_normalize", "(", "adv", ")", ":", "\n", "    ", "std", "=", "adv", ".", "std", "(", ")", "\n", "assert", "std", "!=", "0.", "and", "not", "torch", ".", "isnan", "(", "std", ")", ",", "'Need nonzero std'", "\n", "n_advs", "=", "(", "adv", "-", "adv", ".", "mean", "(", ")", ")", "/", "(", "adv", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "return", "n_advs", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Rollout_train.train": [[48, 153], ["collections.OrderedDict", "RunBuilder.get_runs", "print", "TSP.create_tsp_instance.creat_data", "TSP.create_tsp_instance.creat_data", "print", "TSP.Actor.Model().to", "TSP.rolloutBaseline.RolloutBaseline", "os.path.join", "now.replace.replace", "torch.Adam", "range", "collections.namedtuple", "itertools.product", "datetime.datetime.now().time", "Model().to.parameters", "print", "Model().to.train", "time.time", "torch.optim.lr_scheduler.LambdaLR", "enumerate", "TSP.rolloutBaseline.RolloutBaseline.epoch_callback", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "Rollout_train.rollout", "cost.mean.mean", "costs.append", "print", "print", "collections.OrderedDict.keys", "RunBuilder.get_runs.append", "TSP.Actor.Model", "batch.to.to", "Model().to.", "TSP.create_tsp_instance.reward1", "Rollout_train.adv_normalize", "TSP.rolloutBaseline.RolloutBaseline.eval", "Rollout_train.adv_normalize", "torch.mean", "torch.mean", "torch.mean", "optim.Adam.zero_grad", "torch.mean.backward", "optim.Adam.step", "torch.optim.lr_scheduler.LambdaLR.step", "rewards.append", "losses.append", "os.path.exists", "os.makedirs", "Model().to.state_dict", "cost.mean.item", "cost.mean.item", "collections.OrderedDict.values", "collections.namedtuple.", "datetime.datetime.now", "tour_indices.detach", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "time.time", "times.append", "numpy.mean", "numpy.mean", "print", "advantage.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "TSP.create_tsp_instance.reward1.detach", "torch.mean.detach", "len"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_data", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.creat_data", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Rollout_train.train", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.epoch_callback", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.rollout", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Agentppo.adv_normalize", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Agentppo.adv_normalize", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.state_dict"], ["", "def", "train", "(", ")", ":", "\n", "#------------------------------------------------------------------------------------------------------------------------------", "\n", "    ", "class", "RunBuilder", "(", ")", ":", "\n", "        ", "@", "staticmethod", "# \u4e0d\u7528\u4ea7\u751f\u5b9e\u4f8b\u5bf9\u8c61\u5c31\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u8be5\u7c7b", "\n", "def", "get_runs", "(", "params", ")", ":", "\n", "            ", "Run", "=", "namedtuple", "(", "'Run'", ",", "params", ".", "keys", "(", ")", ")", "\n", "runs", "=", "[", "]", "\n", "for", "v", "in", "product", "(", "*", "params", ".", "values", "(", ")", ")", ":", "\n", "                ", "runs", ".", "append", "(", "Run", "(", "*", "v", ")", ")", "\n", "", "return", "runs", "\n", "\n", "", "", "params", "=", "OrderedDict", "(", "\n", "lr", "=", "[", "1e-3", "]", ",", "\n", "batch_size", "=", "[", "512", "]", ",", "\n", "hidden_node_dim", "=", "[", "128", "]", ",", "\n", "hidden_edge_dim", "=", "[", "16", "]", ",", "\n", "conv_laysers", "=", "[", "4", "]", ",", "\n", "data_size", "=", "[", "768000", "]", "\n", ")", "\n", "runs", "=", "RunBuilder", ".", "get_runs", "(", "params", ")", "#\u4e00\u6b21\u8bad\u7ec3\u591a\u4e2a\u8d85\u53c2\u6570", "\n", "#-------------------------------------------------------------------------------------------------------------------------------------", "\n", "\n", "folder", "=", "'Tsp-{}-GAT'", ".", "format", "(", "n_nodes", ")", "\n", "filename", "=", "'rollout'", "\n", "for", "lr", ",", "batch_size", ",", "hidden_node_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ",", "data_size", "in", "runs", ":", "\n", "        ", "print", "(", "'lr'", ",", "'batch_size'", ",", "'hidden_node_dim'", ",", "'hidden_edge_dim'", ",", "'conv_laysers:'", ",", "lr", ",", "batch_size", ",", "hidden_node_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", "\n", "data_loder", "=", "creat_data", "(", "n_nodes", ",", "data_size", ",", "batch_size", "=", "batch_size", ")", "#Training set", "\n", "valid_loder", "=", "creat_data", "(", "n_nodes", ",", "10000", ",", "batch_size", "=", "batch_size", ")", "#Validation set", "\n", "\n", "print", "(", "'Data creation completed'", ")", "\n", "\n", "actor", "=", "Model", "(", "2", ",", "hidden_node_dim", ",", "1", ",", "hidden_edge_dim", ",", "conv_laysers", "=", "conv_laysers", ")", ".", "to", "(", "device", ")", "\n", "rol_baseline", "=", "RolloutBaseline", "(", "actor", ",", "valid_loder", ",", "n_nodes", "=", "n_nodes", ")", "\n", "#initWeights(actor)", "\n", "\n", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", "\n", "'''path = os.path.join(filepath,'%s' % 3)\n                if os.path.exists(path):\n                    path1 = os.path.join(path, 'actor.pt')\n                    self.agent.old_polic.load_state_dict(torch.load(path1, device))'''", "\n", "\n", "\n", "now", "=", "'%s'", "%", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "time", "(", ")", "\n", "now", "=", "now", ".", "replace", "(", "':'", ",", "'_'", ")", "\n", "actor_optim", "=", "optim", ".", "Adam", "(", "actor", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "costs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "\n", "            ", "print", "(", "\"epoch:\"", ",", "epoch", ",", "\"------------------------------------------------\"", ")", "\n", "actor", ".", "train", "(", ")", "\n", "\n", "times", ",", "losses", ",", "rewards", ",", "critic_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "start", "=", "epoch_start", "\n", "\n", "scheduler", "=", "LambdaLR", "(", "actor_optim", ",", "lr_lambda", "=", "lambda", "f", ":", "0.96", "**", "epoch", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "data_loder", ")", ":", "\n", "                ", "batch", "=", "batch", ".", "to", "(", "device", ")", "\n", "tour_indices", ",", "tour_logp", ",", "_", "=", "actor", "(", "batch", ",", "n_nodes", ")", "\n", "reward", "=", "reward1", "(", "batch", ".", "x", ",", "tour_indices", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "rewar", "=", "adv_normalize", "(", "reward", ")", "\n", "\n", "base_reward", "=", "rol_baseline", ".", "eval", "(", "batch", ",", "n_nodes", ")", "\n", "base_reward", "=", "adv_normalize", "(", "base_reward", ")", "\n", "advantage", "=", "(", "rewar", "-", "base_reward", ")", "\n", "\n", "#advantage = adv_normalize(advantage)", "\n", "actor_loss", "=", "torch", ".", "mean", "(", "advantage", ".", "detach", "(", ")", "*", "tour_logp", ")", "\n", "\n", "actor_optim", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "#grad_norms = clip_grad_norms(actor_optim.param_groups, 1)", "\n", "#torch.nn.utils.clip_grad_norm_(actor.parameters(), max_grad_norm)", "\n", "actor_optim", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "rewards", ".", "append", "(", "torch", ".", "mean", "(", "reward", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "losses", ".", "append", "(", "torch", ".", "mean", "(", "actor_loss", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "\n", "step", "=", "200", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "step", "==", "0", ":", "\n", "                    ", "end", "=", "time", ".", "time", "(", ")", "\n", "times", ".", "append", "(", "end", "-", "start", ")", "\n", "start", "=", "end", "\n", "\n", "mean_loss", "=", "np", ".", "mean", "(", "losses", "[", "-", "step", ":", "]", ")", "\n", "mean_reward", "=", "np", ".", "mean", "(", "rewards", "[", "-", "step", ":", "]", ")", "\n", "\n", "print", "(", "'  Batch %d/%d, reward: %2.3f, loss: %2.4f, took: %2.4fs'", "%", "\n", "(", "batch_idx", ",", "len", "(", "data_loder", ")", ",", "mean_reward", ",", "mean_loss", ",", "\n", "times", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "", "rol_baseline", ".", "epoch_callback", "(", "actor", ",", "epoch", ")", "\n", "epoch_dir", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'%s'", "%", "epoch", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "epoch_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "epoch_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "epoch_dir", ",", "'actor.pt'", ")", "\n", "torch", ".", "save", "(", "actor", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n", "cost", "=", "rollout", "(", "actor", ",", "valid_loder", ",", "batch_size", ",", "n_nodes", ")", "\n", "cost", "=", "cost", ".", "mean", "(", ")", "\n", "costs", ".", "append", "(", "cost", ".", "item", "(", ")", ")", "\n", "print", "(", "'Problem:TSP'", "'%s'", "%", "n_nodes", ",", "'/ Average distance:'", ",", "cost", ".", "item", "(", ")", ")", "\n", "print", "(", "costs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.GatConv.__init__": [[18, 29], ["torch_geometric.nn.MessagePassing.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "edge_channels", ",", "\n", "negative_slope", "=", "0.2", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "GatConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "attn", "=", "nn", ".", "Linear", "(", "2", "*", "out_channels", "+", "edge_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.GatConv.forward": [[30, 33], ["Actor.GatConv.fc", "Actor.GatConv.propagate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", ",", "size", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "size", "=", "size", ",", "x", "=", "x", ",", "edge_attr", "=", "edge_attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.GatConv.message": [[34, 42], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Actor.GatConv.attn", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch_geometric.utils.softmax", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "edge_index_i", ",", "x_i", ",", "x_j", ",", "size_i", ",", "edge_attr", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x_i", ",", "x_j", ",", "edge_attr", "]", ",", "dim", "=", "-", "1", ")", "\n", "alpha", "=", "self", ".", "attn", "(", "x", ")", "\n", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "\n", "alpha", "=", "softmax", "(", "alpha", ",", "edge_index_i", ",", "size_i", ")", "\n", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "return", "x_j", "*", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.GatConv.update": [[43, 45], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.GATConv.__init__": [[49, 54], ["torch_geometric.nn.MessagePassing.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "GATConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ")", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "lin", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "attn", "=", "nn", ".", "Linear", "(", "2", "*", "out_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.GATConv.forward": [[55, 59], ["Actor.GATConv.", "Actor.GATConv.lin", "Actor.GATConv.propagate", "Actor.GATConv.size", "Actor.GATConv.size", "Actor.GATConv.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "edge_index", ",", "_", "=", "add_self_loops", "(", "edge_index", ",", "num_nodes", "=", "x", ".", "size", "(", "0", ")", ")", "\n", "x", "=", "self", ".", "lin", "(", "x", ")", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "size", "=", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "0", ")", ")", ",", "x", "=", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.GATConv.message": [[60, 67], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Actor.GATConv.attn", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch_geometric.utils.softmax"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_i", ",", "x_j", ",", "edge_index_i", ",", "size_i", ")", ":", "\n", "# x_j -> x_i", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x_i", ",", "x_j", "]", ",", "dim", "=", "-", "1", ")", "\n", "alpha", "=", "self", ".", "attn", "(", "x", ")", "\n", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "\n", "alpha", "=", "softmax", "(", "alpha", ",", "edge_index_i", ",", "size_i", ")", "\n", "return", "x_j", "*", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.GATConv.update": [[68, 70], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.Encoder.__init__": [[73, 84], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "Actor.GatConv", "range", "range"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_layers", "=", "3", ",", "n_heads", "=", "4", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_node_dim", "=", "hidden_node_dim", "\n", "self", ".", "fc_node", "=", "nn", ".", "Linear", "(", "input_node_dim", ",", "hidden_node_dim", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "hidden_node_dim", ")", "\n", "self", ".", "be", "=", "nn", ".", "BatchNorm1d", "(", "hidden_edge_dim", ")", "\n", "# self.layer_n = nn.LayerNorm(hidden_node_dim, eps=1e-6)", "\n", "self", ".", "fc_edge", "=", "nn", ".", "Linear", "(", "input_edge_dim", ",", "hidden_edge_dim", ")", "# 1-16", "\n", "self", ".", "bn1", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "hidden_node_dim", ")", "for", "i", "in", "range", "(", "conv_layers", ")", "]", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "\n", "[", "GatConv", "(", "hidden_node_dim", ",", "hidden_node_dim", ",", "hidden_edge_dim", ")", "for", "i", "in", "range", "(", "conv_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.Encoder.forward": [[86, 102], ["Actor.Encoder.fc_node", "Actor.Encoder.bn", "Actor.Encoder.fc_edge", "Actor.Encoder.be", "zip", "x.reshape.reshape.reshape", "conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "batch_size", "=", "data", ".", "num_graphs", "\n", "# print(batch_size)", "\n", "# edge_attr = data.edge_attr", "\n", "x", "=", "self", ".", "fc_node", "(", "data", ".", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "edge_attr", "=", "self", ".", "fc_edge", "(", "data", ".", "edge_attr", ")", "\n", "edge_attr", "=", "self", ".", "be", "(", "edge_attr", ")", "\n", "\n", "for", "(", "conv", ",", "bn", ")", "in", "zip", "(", "self", ".", "convs", ",", "self", ".", "bn1", ")", ":", "\n", "# x = conv(x,data.edge_index)", "\n", "            ", "x1", "=", "conv", "(", "x", ",", "data", ".", "edge_index", ",", "edge_attr", ")", "\n", "# x1 = conv1(x1, data.edge_index, edge_attr)# if Build encoder with GAT, no edge", "\n", "x", "=", "x", "+", "x1", "# Residual connection", "\n", "", "x", "=", "x", ".", "reshape", "(", "(", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_node_dim", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.MHAlayer.__init__": [[106, 121], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_heads", ",", "cat", ",", "input_dim", ",", "hidden_dim", ",", "attn_dropout", "=", "0.1", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "MHAlayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "head_dim", "=", "self", ".", "hidden_dim", "/", "self", ".", "n_heads", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "head_dim", ")", "\n", "\n", "self", ".", "w", "=", "nn", ".", "Linear", "(", "input_dim", "*", "cat", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.MHAlayer.forward": [[122, 148], ["context.size", "Actor.MHAlayer.w().view", "Actor.MHAlayer.k().view", "Actor.MHAlayer.v().view", "compatibility.squeeze.squeeze.squeeze", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "compatibility.squeeze.squeeze.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "scores.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "Actor.MHAlayer.squeeze().view", "Actor.MHAlayer.fc", "Actor.MHAlayer.transpose", "Actor.MHAlayer.transpose", "Actor.MHAlayer.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "mask.unsqueeze().expand_as.unsqueeze().expand_as.bool", "float", "Actor.MHAlayer.w", "Actor.MHAlayer.k", "Actor.MHAlayer.v", "Actor.MHAlayer.transpose", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "Actor.MHAlayer.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state_t", ",", "context", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param state_t: (batch_size,1,input_dim*3(GATembeding,fist_node,end_node))\n        :param context: \uff08batch_size,n_nodes,input_dim\uff09\n        :param mask: selected nodes  (batch_size,n_nodes)\n        :return:\n        '''", "\n", "\n", "batch_size", ",", "n_nodes", ",", "input_dim", "=", "context", ".", "size", "(", ")", "\n", "Q", "=", "self", ".", "w", "(", "state_t", ")", ".", "view", "(", "batch_size", ",", "1", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "K", "=", "self", ".", "k", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "V", "=", "self", ".", "v", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "Q", ",", "K", ",", "V", "=", "Q", ".", "transpose", "(", "1", ",", "2", ")", ",", "K", ".", "transpose", "(", "1", ",", "2", ")", ",", "V", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "compatibility", "=", "self", ".", "norm", "*", "torch", ".", "matmul", "(", "Q", ",", "K", ".", "transpose", "(", "2", ",", "\n", "3", ")", ")", "# (batch_size,n_heads,1,hidden_dim)*(batch_size,n_heads,hidden_dim,n_nodes)", "\n", "compatibility", "=", "compatibility", ".", "squeeze", "(", "2", ")", "# (batch_size,n_heads,n_nodes)", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "compatibility", ")", "\n", "u_i", "=", "compatibility", ".", "masked_fill", "(", "mask", ".", "bool", "(", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "scores", "=", "F", ".", "softmax", "(", "u_i", ",", "dim", "=", "-", "1", ")", "# (batch_size,n_heads,n_nodes)", "\n", "scores", "=", "scores", ".", "unsqueeze", "(", "2", ")", "\n", "out_put", "=", "torch", ".", "matmul", "(", "scores", ",", "V", ")", "# (batch_size,n_heads,1,n_nodes )*(batch_size,n_heads,n_nodes,head_dim)", "\n", "out_put", "=", "out_put", ".", "squeeze", "(", "2", ")", ".", "view", "(", "batch_size", ",", "self", ".", "hidden_dim", ")", "# \uff08batch_size,n_heads,hidden_dim\uff09", "\n", "out_put", "=", "self", ".", "fc", "(", "out_put", ")", "\n", "return", "out_put", "# (batch_size,hidden_dim)", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.ProbAttention.__init__": [[151, 162], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "Actor.MHAlayer", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_heads", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "ProbAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "norm", "=", "1", "/", "math", ".", "sqrt", "(", "hidden_dim", ")", "\n", "self", ".", "w", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "mhalayer", "=", "MHAlayer", "(", "n_heads", ",", "1", ",", "input_dim", ",", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.ProbAttention.forward": [[163, 183], ["Actor.ProbAttention.mhalayer", "context.size", "x.masked_fill.masked_fill.view", "Actor.ProbAttention.k().view", "compatibility.squeeze.squeeze.squeeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "x.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "mask.bool", "float", "Actor.ProbAttention.k", "Actor.ProbAttention.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state_t", ",", "residual", ",", "context", ",", "mask", ",", "T", ")", ":", "\n", "        ", "'''\n        :param state_t: (batch_size,1,input_dim(GATembeding,fist_node,end_node))\n        :param context: \uff08batch_size,n_nodes,input_dim\uff09\n        :param mask: selected nodes  (batch_size,n_nodes)\n        :return:softmax_score\n        '''", "\n", "x", "=", "self", ".", "mhalayer", "(", "state_t", ",", "context", ",", "mask", ")", "\n", "\n", "batch_size", ",", "n_nodes", ",", "input_dim", "=", "context", ".", "size", "(", ")", "\n", "Q", "=", "x", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "\n", "K", "=", "self", ".", "k", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "-", "1", ")", "\n", "compatibility", "=", "self", ".", "norm", "*", "torch", ".", "matmul", "(", "Q", ",", "K", ".", "transpose", "(", "1", ",", "2", ")", ")", "# (batch_size,1,n_nodes)", "\n", "compatibility", "=", "compatibility", ".", "squeeze", "(", "1", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "compatibility", ")", "\n", "x", "=", "x", "*", "(", "10", ")", "\n", "x", "=", "x", ".", "masked_fill", "(", "mask", ".", "bool", "(", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "scores", "=", "F", ".", "softmax", "(", "x", "/", "T", ",", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.Decoder1.__init__": [[186, 197], ["torch.Module.__init__", "Actor.ProbAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "Actor.Decoder1._input.data.uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "Decoder1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "prob", "=", "ProbAttention", "(", "8", ",", "input_dim", ",", "hidden_dim", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_dim", "*", "2", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "# self.cell = torch.nn.GRUCell(input_dim, hidden_dim, bias=True)", "\n", "self", ".", "_input", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "2", "*", "hidden_dim", ")", ")", "\n", "self", ".", "_input", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.Decoder1.forward": [[198, 243], ["encoder_inputs.new_zeros().to", "encoder_inputs.new_zeros().to", "Actor.Decoder1._input[].expand", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "encoder_inputs.size", "Actor.Decoder1.fc", "Actor.Decoder1.fc1", "Actor.Decoder1.prob", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.cat.append", "torch.cat.append", "torch.cat.append", "mask.scatter.scatter.scatter", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "encoder_inputs.new_zeros", "encoder_inputs.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Actor.Decoder1.max", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample.data.unsqueeze", "torch.distributions.categorical.Categorical.log_prob.unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze().expand", "mask.scatter.scatter.size", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "torch.distributions.categorical.Categorical.sample.unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze().unsqueeze().expand", "encoder_inputs.size", "encoder_inputs.size", "torch.distributions.categorical.Categorical.sample.unsqueeze().unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoder_inputs", ",", "pool", ",", "n_steps", ",", "T", ",", "greedy", "=", "False", ")", ":", "\n", "        ", "_input", "=", "encoder_inputs", ".", "new_zeros", "(", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "encoder_inputs", ".", "size", "(", "2", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "mask", "=", "encoder_inputs", ".", "new_zeros", "(", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "encoder_inputs", ".", "size", "(", "1", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "log_ps", "=", "[", "]", "\n", "actions", "=", "[", "]", "\n", "first_cat", "=", "self", ".", "_input", "[", "None", ",", ":", "]", ".", "expand", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "n_steps", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "_input_first", "=", "first_cat", "\n", "\n", "", "else", ":", "\n", "                ", "_input_first", "=", "torch", ".", "cat", "(", "[", "first_node", ",", "_input", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# -----------------------------------------------------------------------------pool+cat(first_node,current_node)", "\n", "", "_input_first", "=", "self", ".", "fc", "(", "_input_first", ")", "\n", "pool", "=", "self", ".", "fc1", "(", "pool", ")", "\n", "decoder_input", "=", "_input_first", "+", "pool", "\n", "# -----------------------------------------------------------------------------cat(pool,first_node,current_node)", "\n", "\n", "# decoder_input = torch.cat([pool,_input_first], dim=-1)", "\n", "# decoder_input  = self.fc(decoder_input)", "\n", "# -----------------------------------------------------------------------------------------------------------", "\n", "#                 print (hx.size(),encoder_inputs.size(),mask.size())", "\n", "p", "=", "self", ".", "prob", "(", "decoder_input", ",", "decoder_input", ",", "encoder_inputs", ",", "mask", ",", "T", ")", "\n", "dist", "=", "Categorical", "(", "p", ")", "\n", "if", "greedy", ":", "\n", "                ", "_", ",", "index", "=", "p", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "index", "=", "dist", ".", "sample", "(", ")", "\n", "", "actions", ".", "append", "(", "index", ".", "data", ".", "unsqueeze", "(", "1", ")", ")", "\n", "log_p", "=", "dist", ".", "log_prob", "(", "index", ")", "\n", "log_ps", ".", "append", "(", "log_p", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "mask", "=", "mask", ".", "scatter", "(", "1", ",", "index", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "1", ")", "\n", "\n", "_input", "=", "torch", ".", "gather", "(", "encoder_inputs", ",", "1", ",", "\n", "index", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "-", "1", ",", "\n", "encoder_inputs", ".", "size", "(", "2", ")", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "first_node", "=", "_input", "\n", "", "", "log_ps", "=", "torch", ".", "cat", "(", "log_ps", ",", "dim", "=", "1", ")", "\n", "actions", "=", "torch", ".", "cat", "(", "actions", ",", "dim", "=", "1", ")", "\n", "log_p", "=", "log_ps", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "actions", ",", "log_p", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.Model.__init__": [[246, 251], ["torch.Module.__init__", "Actor.Encoder", "Actor.Decoder1"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", "=", "3", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "\n", "conv_layers", "=", "conv_laysers", ")", "\n", "self", ".", "decoder", "=", "Decoder1", "(", "hidden_node_dim", ",", "hidden_node_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Actor.Model.forward": [[252, 258], ["Actor.Model.encoder", "Actor.Model.mean", "Actor.Model.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "datas", ",", "steps", ",", "greedy", "=", "False", ",", "T", "=", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "datas", ")", "# (batch,seq_len,hidden_node_dim)", "\n", "pooled", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "\n", "actions", ",", "log_p", "=", "self", ".", "decoder", "(", "x", ",", "pooled", ",", "steps", ",", "T", ",", "greedy", ")", "\n", "\n", "return", "actions", ",", "log_p", ",", "pooled", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.TSP_matplotlib.plot_tsp": [[13, 49], ["matplotlib.pyplot.rc", "ax1.set_xlim", "ax1.set_ylim", "xy[].transpose", "numpy.sqrt", "np.sqrt.cumsum", "ax1.scatter", "ax1.scatter", "matplotlib.pyplot.show", "numpy.roll", "numpy.roll", "ax1.quiver", "ax1.set_title", "ax1.quiver", "ax1.set_title", "len", "len"], "function", ["None"], ["def", "plot_tsp", "(", "xy", ",", "tour", ",", "ax1", ",", "i", ",", "Greedy", ")", ":", "\n", "    ", "plt", ".", "rc", "(", "'font'", ",", "family", "=", "'Times New Roman'", ",", "size", "=", "22", ")", "\n", "\n", "ax1", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax1", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "xs", ",", "ys", "=", "xy", "[", "tour", "]", ".", "transpose", "(", ")", "\n", "dx", "=", "np", ".", "roll", "(", "xs", ",", "-", "1", ")", "-", "xs", "\n", "dy", "=", "np", ".", "roll", "(", "ys", ",", "-", "1", ")", "-", "ys", "\n", "d", "=", "np", ".", "sqrt", "(", "dx", "*", "dx", "+", "dy", "*", "dy", ")", "\n", "lengths", "=", "d", ".", "cumsum", "(", ")", "\n", "\n", "# Scatter nodes", "\n", "ax1", ".", "scatter", "(", "xs", ",", "ys", ",", "s", "=", "40", ",", "color", "=", "'blue'", ")", "\n", "# Starting node", "\n", "ax1", ".", "scatter", "(", "[", "xy", "[", "5", ",", "0", "]", "]", ",", "[", "xy", "[", "5", ",", "1", "]", "]", ",", "s", "=", "100", ",", "color", "=", "'red'", ")", "\n", "# Arcs", "\n", "if", "Greedy", ":", "\n", "        ", "qv", "=", "ax1", ".", "quiver", "(", "\n", "xs", ",", "ys", ",", "dx", ",", "dy", ",", "\n", "scale_units", "=", "'xy'", ",", "\n", "angles", "=", "'xy'", ",", "\n", "scale", "=", "1", ",", "\n", ")", "\n", "ax1", ".", "set_title", "(", "'Greedy-{} Nodes, Total Length {:.2f}'", ".", "format", "(", "len", "(", "tour", ")", ",", "lengths", "[", "-", "1", "]", ")", ",", "family", "=", "'Times New Roman'", ")", "\n", "\n", "", "else", ":", "\n", "        ", "qv", "=", "ax1", ".", "quiver", "(", "\n", "xs", ",", "ys", ",", "dx", ",", "dy", ",", "\n", "scale_units", "=", "'xy'", ",", "\n", "angles", "=", "'xy'", ",", "\n", "scale", "=", "1", ",", "\n", ")", "\n", "\n", "ax1", ".", "set_title", "(", "'Sampling1280-{} Nodes, Total Length {:.2f}'", ".", "format", "(", "len", "(", "tour", ")", ",", "lengths", "[", "-", "1", "]", ")", ",", "\n", "family", "=", "'Times New Roman'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "#plt.savefig(\"./temp{}.png\".format(i), dpi=600, bbox_inches='tight')", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.TSP_matplotlib.tsp_matplotlib": [[51, 137], ["numpy.loadtxt", "node_.reshape.reshape", "numpy.random.randint", "numpy.zeros", "enumerate", "np.zeros.reshape", "range", "torch.LongTensor", "edges_index.transpose.transpose", "range", "torch_geometric.data.DataLoader", "TSP.Actor.Model().to", "Model().to.to", "os.path.join", "os.path.exists", "matplotlib.pyplot.subplots", "TSP_matplotlib.plot_tsp", "enumerate", "range", "torch_geometric.data.Data", "datas.append", "os.path.join", "Model().to.load_state_dict", "print", "next", "next.to", "Model().to.eval", "range", "torch_geometric.data.DataLoader", "print", "min_tour.unsqueeze", "min_tour.unsqueeze.squeeze().cpu().numpy", "TSP_matplotlib.tsp_matplotlib.c_dist"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.TSP_matplotlib.plot_tsp", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.load_state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval"], ["def", "tsp_matplotlib", "(", "Greedy", "=", "True", ")", ":", "\n", "    ", "node_", "=", "np", ".", "loadtxt", "(", "'./test_data/tsp100_test_data.csv'", ",", "dtype", "=", "np", ".", "float", ",", "delimiter", "=", "','", ")", "\n", "node_", "=", "node_", ".", "reshape", "(", "-", "1", ",", "n_nodes", ",", "2", ")", "\n", "data_size", "=", "node_", ".", "shape", "[", "0", "]", "\n", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "data_size", ")", "\n", "\n", "# Calculate the distance matrix", "\n", "edges", "=", "np", ".", "zeros", "(", "(", "n_nodes", ",", "n_nodes", ",", "1", ")", ")", "\n", "\n", "def", "c_dist", "(", "x1", ",", "x2", ")", ":", "\n", "        ", "return", "(", "(", "x1", "[", "0", "]", "-", "x2", "[", "0", "]", ")", "**", "2", "+", "(", "x1", "[", "1", "]", "-", "x2", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "\n", "", "for", "i", ",", "(", "x1", ",", "y1", ")", "in", "enumerate", "(", "node_", "[", "x", "]", ")", ":", "\n", "        ", "for", "j", ",", "(", "x2", ",", "y2", ")", "in", "enumerate", "(", "node_", "[", "x", "]", ")", ":", "\n", "            ", "d", "=", "c_dist", "(", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ")", "\n", "edges", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "d", "\n", "", "", "edges_", "=", "edges", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "edges_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_nodes", ")", ":", "\n", "            ", "edges_index", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "", "edges_index", "=", "torch", ".", "LongTensor", "(", "edges_index", ")", "\n", "edges_index", "=", "edges_index", ".", "transpose", "(", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "datas", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "# node,edge = creat_instance(n_nodes)", "\n", "        ", "data", "=", "Data", "(", "x", "=", "torch", ".", "from_numpy", "(", "node_", "[", "x", "]", ")", ".", "float", "(", ")", ",", "edge_index", "=", "edges_index", ",", "\n", "edge_attr", "=", "torch", ".", "from_numpy", "(", "edges_", ")", ".", "float", "(", ")", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "#print(datas)", "\n", "\n", "", "dl", "=", "DataLoader", "(", "datas", ",", "batch_size", "=", "1", ")", "\n", "\n", "agent", "=", "Model", "(", "2", ",", "128", ",", "1", ",", "16", ",", "conv_laysers", "=", "4", ")", ".", "to", "(", "device", ")", "\n", "agent", ".", "to", "(", "device", ")", "\n", "folder", "=", "'trained'", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'%s'", "%", "n_nodes", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "path1", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'actor.pt'", ")", "\n", "agent", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path1", ",", "device", ")", ")", "\n", "", "if", "Greedy", ":", "\n", "        ", "print", "(", "'Data created'", ")", "\n", "batch", "=", "next", "(", "iter", "(", "dl", ")", ")", "\n", "batch", ".", "to", "(", "device", ")", "\n", "agent", ".", "eval", "(", ")", "\n", "# -------------------------------------------------------------------------------------------Greedy", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tour", ",", "_", ",", "_", "=", "agent", "(", "batch", ",", "n_nodes", ",", "True", ")", "\n", "\n", "#cost = reward1(batch.x, tour.detach(), n_nodes)", "\n", "#print(cost)", "\n", "#print(tour)", "\n", "# -------------------------------------------------------------------------------------------sampling1280", "\n", "", "", "else", ":", "\n", "        ", "datas_", "=", "[", "]", "\n", "batch_size1", "=", "128", "# sampling batch_size", "\n", "for", "y", "in", "range", "(", "1280", ")", ":", "\n", "\n", "            ", "data", "=", "Data", "(", "x", "=", "torch", ".", "from_numpy", "(", "node_", "[", "x", "]", ")", ".", "float", "(", ")", ",", "edge_index", "=", "edges_index", ",", "\n", "edge_attr", "=", "torch", ".", "from_numpy", "(", "edges_", ")", ".", "float", "(", ")", ")", "\n", "datas_", ".", "append", "(", "data", ")", "\n", "", "dl", "=", "DataLoader", "(", "datas_", ",", "batch_size", "=", "batch_size1", ")", "\n", "print", "(", "'Data created'", ")", "\n", "min_tour", "=", "[", "]", "\n", "min_cost", "=", "100", "\n", "T", "=", "1.5", "\n", "for", "batch", "in", "dl", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch", ".", "to", "(", "device", ")", "\n", "tour1", ",", "_", ",", "_", "=", "agent", "(", "batch", ",", "n_nodes", ",", "False", ",", "T", ")", "\n", "cost", "=", "reward1", "(", "batch", ".", "x", ",", "tour1", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "\n", "id", "=", "np", ".", "array", "(", "cost", ".", "cpu", "(", ")", ")", ".", "argmin", "(", ")", "\n", "m_cost", "=", "np", ".", "array", "(", "cost", ".", "cpu", "(", ")", ")", ".", "min", "(", ")", "\n", "tour1", "=", "tour1", ".", "reshape", "(", "batch_size1", ",", "-", "1", ")", "\n", "if", "m_cost", "<", "min_cost", ":", "\n", "                    ", "min_cost", "=", "m_cost", "\n", "min_tour", "=", "tour1", "[", "id", "]", "\n", "\n", "", "", "", "tour", "=", "min_tour", ".", "unsqueeze", "(", "-", "2", ")", "\n", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "plot_tsp", "(", "node_", "[", "x", "]", ",", "tour", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "ax", ",", "202", ",", "Greedy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.test_tsp.rollout": [[9, 22], ["model.eval", "torch.cat", "TSP.create_tsp_instance.reward1.cpu", "torch.no_grad", "model", "tour.append", "TSP.create_tsp_instance.reward1", "test_tsp.rollout.eval_model_bat"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1"], ["def", "rollout", "(", "model", ",", "dataset", ",", "n_nodes", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "tour", "=", "[", "]", "\n", "def", "eval_model_bat", "(", "bat", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cost", ",", "_", ",", "_", "=", "model", "(", "bat", ",", "n_nodes", ",", "True", ")", "\n", "tour", ".", "append", "(", "cost", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "cost", "=", "reward1", "(", "bat", ".", "x", ",", "cost", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "", "return", "cost", ".", "cpu", "(", ")", "\n", "\n", "", "totall_cost", "=", "torch", ".", "cat", "(", "[", "eval_model_bat", "(", "bat", ".", "to", "(", "device", ")", ")", "for", "bat", "in", "dataset", "]", ",", "0", ")", "\n", "return", "totall_cost", ",", "tour", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.test_tsp.evaliuate": [[23, 37], ["TSP.Actor.Model().to", "os.path.join", "os.path.exists", "test_tsp.rollout", "cost.mean.mean", "print", "os.path.join", "Model().to.load_state_dict", "cost.mean.item", "TSP.Actor.Model", "torch.load"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.rollout", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.load_state_dict"], ["", "def", "evaliuate", "(", "valid_loder", ",", "n_node", ")", ":", "\n", "    ", "folder", "=", "'trained'", "\n", "actor", "=", "Model", "(", "2", ",", "128", ",", "1", ",", "16", ",", "conv_laysers", "=", "4", ")", ".", "to", "(", "device", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'%s'", "%", "n_node", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "\n", "        ", "path1", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'actor.pt'", ")", "\n", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path1", ",", "device", ")", ")", "\n", "# -------------------------------------------------------------Greedy", "\n", "", "cost", ",", "tour", "=", "rollout", "(", "actor", ",", "valid_loder", ",", "n_node", ")", "\n", "cost", "=", "cost", ".", "mean", "(", ")", "\n", "print", "(", "'Problem:TSP'", "'%s'", "%", "n_node", ",", "'/ Average distance:'", ",", "cost", ".", "item", "(", ")", ")", "\n", "return", "cost", "\n", "# -------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.test_tsp.test": [[39, 79], ["np.loadtxt.reshape", "numpy.zeros", "enumerate", "np.zeros.reshape", "range", "torch.LongTensor", "edges_index.transpose.transpose", "range", "print", "torch_geometric.data.DataLoader", "test_tsp.evaliuate", "numpy.loadtxt", "print", "enumerate", "range", "torch_geometric.data.Data", "datas.append", "enumerate", "edges_index.transpose.append", "test_tsp.test.c_dist"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.test_tsp.evaliuate"], ["", "def", "test", "(", "n_node", ")", ":", "\n", "    ", "datas", "=", "[", "]", "\n", "if", "n_node", "==", "20", "or", "n_node", "==", "50", "or", "n_node", "==", "100", ":", "\n", "        ", "node_", "=", "np", ".", "loadtxt", "(", "'./test_data/tsp{}_test_data.csv'", ".", "format", "(", "n_node", ")", ",", "dtype", "=", "np", ".", "float", ",", "delimiter", "=", "','", ")", "\n", "batch_size", "=", "128", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Please enter 20, 50 or 100'", ")", "\n", "return", "\n", "", "node_", "=", "node_", ".", "reshape", "(", "-", "1", ",", "n_node", ",", "2", ")", "\n", "\n", "# Calculate the distance matrix", "\n", "def", "c_dist", "(", "x1", ",", "x2", ")", ":", "\n", "        ", "return", "(", "(", "x1", "[", "0", "]", "-", "x2", "[", "0", "]", ")", "**", "2", "+", "(", "x1", "[", "1", "]", "-", "x2", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "#edges = torch.zeros(n_nodes,n_nodes)", "\n", "\n", "", "data_size", "=", "node_", ".", "shape", "[", "0", "]", "\n", "edges", "=", "np", ".", "zeros", "(", "(", "data_size", ",", "n_node", ",", "n_node", ",", "1", ")", ")", "\n", "for", "k", ",", "data", "in", "enumerate", "(", "node_", ")", ":", "\n", "        ", "for", "i", ",", "(", "x1", ",", "y1", ")", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "for", "j", ",", "(", "x2", ",", "y2", ")", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "d", "=", "c_dist", "(", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ")", "\n", "edges", "[", "k", "]", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "d", "\n", "", "", "", "edges_", "=", "edges", ".", "reshape", "(", "data_size", ",", "-", "1", ",", "1", ")", "\n", "\n", "edges_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_node", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_node", ")", ":", "\n", "            ", "edges_index", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "", "edges_index", "=", "torch", ".", "LongTensor", "(", "edges_index", ")", "\n", "edges_index", "=", "edges_index", ".", "transpose", "(", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "data_size", ")", ":", "\n", "# node,edge = creat_instance(n_nodes)", "\n", "        ", "data", "=", "Data", "(", "x", "=", "torch", ".", "from_numpy", "(", "node_", "[", "i", "]", ")", ".", "float", "(", ")", ",", "edge_index", "=", "edges_index", ",", "\n", "edge_attr", "=", "torch", ".", "from_numpy", "(", "edges_", "[", "i", "]", ")", ".", "float", "(", ")", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "# print(datas)", "\n", "", "print", "(", "'Data created'", ")", "\n", "dl", "=", "DataLoader", "(", "datas", ",", "batch_size", "=", "batch_size", ")", "\n", "evaliuate", "(", "dl", ",", "n_node", ")", "\n", "", "'please enter 20, 50 or 100'", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.gurobibaseline.solve_euclidian_tsp": [[4, 80], ["len", "Model", "Model.addVars", "m.addVars.keys", "Model.addConstrs", "Model.optimize", "Model.getAttr", "tuplelist", "gurobibaseline.solve_euclidian_tsp.subtour"], "function", ["None"], ["def", "solve_euclidian_tsp", "(", "points", ",", "threads", "=", "0", ",", "timeout", "=", "None", ",", "gap", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Solves the Euclidan TSP problem to optimality using the MIP formulation\n    with lazy subtour elimination constraint generation.\n    :param points: list of (x, y) coordinate\n    :return:\n    \"\"\"", "\n", "\n", "n", "=", "len", "(", "points", ")", "\n", "\n", "# Callback - use lazy constraints to eliminate sub-tours", "\n", "\n", "def", "subtourelim", "(", "model", ",", "where", ")", ":", "\n", "        ", "if", "where", "==", "GRB", ".", "Callback", ".", "MIPSOL", ":", "\n", "# make a list of edges selected in the solution", "\n", "            ", "vals", "=", "model", ".", "cbGetSolution", "(", "model", ".", "_vars", ")", "\n", "selected", "=", "tuplelist", "(", "(", "i", ",", "j", ")", "for", "i", ",", "j", "in", "model", ".", "_vars", ".", "keys", "(", ")", "if", "vals", "[", "i", ",", "j", "]", ">", "0.5", ")", "\n", "# find the shortest cycle in the selected edge list", "\n", "tour", "=", "subtour", "(", "selected", ")", "\n", "if", "len", "(", "tour", ")", "<", "n", ":", "\n", "# add subtour elimination constraint for every pair of cities in tour", "\n", "                ", "model", ".", "cbLazy", "(", "quicksum", "(", "model", ".", "_vars", "[", "i", ",", "j", "]", "\n", "for", "i", ",", "j", "in", "itertools", ".", "combinations", "(", "tour", ",", "2", ")", ")", "\n", "<=", "len", "(", "tour", ")", "-", "1", ")", "\n", "\n", "# Given a tuplelist of edges, find the shortest subtour", "\n", "\n", "", "", "", "def", "subtour", "(", "edges", ")", ":", "\n", "        ", "unvisited", "=", "list", "(", "range", "(", "n", ")", ")", "\n", "cycle", "=", "range", "(", "n", "+", "1", ")", "# initial length has 1 more city", "\n", "while", "unvisited", ":", "# true if list is non-empty", "\n", "            ", "thiscycle", "=", "[", "]", "\n", "neighbors", "=", "unvisited", "\n", "while", "neighbors", ":", "\n", "                ", "current", "=", "neighbors", "[", "0", "]", "\n", "thiscycle", ".", "append", "(", "current", ")", "\n", "unvisited", ".", "remove", "(", "current", ")", "\n", "neighbors", "=", "[", "j", "for", "i", ",", "j", "in", "edges", ".", "select", "(", "current", ",", "'*'", ")", "if", "j", "in", "unvisited", "]", "\n", "", "if", "len", "(", "cycle", ")", ">", "len", "(", "thiscycle", ")", ":", "\n", "                ", "cycle", "=", "thiscycle", "\n", "", "", "return", "cycle", "\n", "\n", "# Dictionary of Euclidean distance between each pair of points", "\n", "\n", "", "dist", "=", "{", "(", "i", ",", "j", ")", ":", "\n", "math", ".", "sqrt", "(", "sum", "(", "(", "points", "[", "i", "]", "[", "k", "]", "-", "points", "[", "j", "]", "[", "k", "]", ")", "**", "2", "for", "k", "in", "range", "(", "2", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", "for", "j", "in", "range", "(", "i", ")", "}", "\n", "\n", "m", "=", "Model", "(", ")", "\n", "m", ".", "Params", ".", "outputFlag", "=", "False", "\n", "\n", "# Create variables", "\n", "\n", "vars", "=", "m", ".", "addVars", "(", "dist", ".", "keys", "(", ")", ",", "obj", "=", "dist", ",", "vtype", "=", "GRB", ".", "BINARY", ",", "name", "=", "'e'", ")", "\n", "for", "i", ",", "j", "in", "vars", ".", "keys", "(", ")", ":", "\n", "        ", "vars", "[", "j", ",", "i", "]", "=", "vars", "[", "i", ",", "j", "]", "# edge in opposite direction", "\n", "\n", "", "m", ".", "addConstrs", "(", "vars", ".", "sum", "(", "i", ",", "'*'", ")", "==", "2", "for", "i", "in", "range", "(", "n", ")", ")", "\n", "\n", "\n", "m", ".", "_vars", "=", "vars", "\n", "m", ".", "Params", ".", "lazyConstraints", "=", "1", "\n", "m", ".", "Params", ".", "threads", "=", "threads", "\n", "if", "timeout", ":", "\n", "        ", "m", ".", "Params", ".", "timeLimit", "=", "timeout", "\n", "", "if", "gap", ":", "\n", "        ", "m", ".", "Params", ".", "mipGap", "=", "gap", "*", "0.01", "# Percentage", "\n", "", "m", ".", "optimize", "(", "subtourelim", ")", "\n", "\n", "vals", "=", "m", ".", "getAttr", "(", "'x'", ",", "vars", ")", "\n", "selected", "=", "tuplelist", "(", "(", "i", ",", "j", ")", "for", "i", ",", "j", "in", "vals", ".", "keys", "(", ")", "if", "vals", "[", "i", ",", "j", "]", ">", "0.5", ")", "\n", "\n", "tour", "=", "subtour", "(", "selected", ")", "\n", "assert", "len", "(", "tour", ")", "==", "n", "\n", "\n", "return", "m", ".", "objVal", ",", "tour", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.gurobibaseline.solve_all_gurobi": [[82, 91], ["enumerate", "print", "gurobibaseline.solve_euclidian_tsp", "results.append", "tour.append"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.gurobibaseline.solve_euclidian_tsp"], ["", "def", "solve_all_gurobi", "(", "dataset", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "tour", "=", "[", "]", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "print", "(", "\"Solving instance {}\"", ".", "format", "(", "i", ")", ")", "\n", "result", ",", "tur", "=", "solve_euclidian_tsp", "(", "instance", ")", "\n", "results", ".", "append", "(", "result", ")", "\n", "tour", ".", "append", "(", "tur", ")", "\n", "", "return", "results", ",", "tour", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.gurobibaseline.random_tsp": [[92, 100], ["numpy.random.seed", "numpy.random.uniform", "numpy.random.randint"], "function", ["None"], ["", "def", "random_tsp", "(", "n_nodes", ",", "random_seed", "=", "None", ")", ":", "\n", "    ", "if", "random_seed", "is", "None", ":", "\n", "        ", "random_seed", "=", "np", ".", "random", ".", "randint", "(", "123456789", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "# torch.manual_seed(random_seed)", "\n", "# data = torch.FloatTensor(n_nodes,2).uniform_(0,1)", "\n", "data", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "n_nodes", ",", "2", ")", ")", "\n", "return", "data", "\n", "", "datas", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.GatConv.__init__": [[24, 42], ["torch_geometric.nn.MessagePassing.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "PPO_Model.GatConv.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "edge_channels", ",", "\n", "negative_slope", "=", "0.2", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "GatConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "attn", "=", "nn", ".", "Linear", "(", "2", "*", "out_channels", "+", "edge_channels", ",", "out_channels", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.GatConv.forward": [[43, 46], ["PPO_Model.GatConv.fc", "PPO_Model.GatConv.propagate"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", ",", "size", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "size", "=", "size", ",", "x", "=", "x", ",", "edge_attr", "=", "edge_attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.GatConv.message": [[47, 57], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PPO_Model.GatConv.attn", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch_geometric.utils.softmax", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "edge_index_i", ",", "x_i", ",", "x_j", ",", "size_i", ",", "edge_attr", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x_i", ",", "x_j", ",", "edge_attr", "]", ",", "dim", "=", "-", "1", ")", "\n", "alpha", "=", "self", ".", "attn", "(", "x", ")", "\n", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "\n", "alpha", "=", "softmax", "(", "alpha", ",", "edge_index_i", ",", "size_i", ")", "\n", "\n", "# Sample attention coefficients stochastically.", "\n", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "return", "x_j", "*", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.GatConv.update": [[58, 60], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Encoder.__init__": [[62, 79], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "PPO_Model.Encoder.named_parameters", "PPO_Model.GatConv", "range", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_layers", "=", "3", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_node_dim", "=", "hidden_node_dim", "\n", "self", ".", "fc_node", "=", "nn", ".", "Linear", "(", "input_node_dim", ",", "hidden_node_dim", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "hidden_node_dim", ")", "\n", "self", ".", "be", "=", "nn", ".", "BatchNorm1d", "(", "hidden_edge_dim", ")", "\n", "self", ".", "fc_edge", "=", "nn", ".", "Linear", "(", "input_edge_dim", ",", "hidden_edge_dim", ")", "# 1-16", "\n", "\n", "self", ".", "convs1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "GatConv", "(", "hidden_node_dim", ",", "hidden_node_dim", ",", "hidden_edge_dim", ")", "for", "i", "in", "range", "(", "conv_layers", ")", "]", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Encoder.forward": [[80, 95], ["PPO_Model.Encoder.fc_node", "PPO_Model.Encoder.bn", "PPO_Model.Encoder.fc_edge", "PPO_Model.Encoder.be", "x.reshape.reshape.reshape", "conv"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "batch_size", "=", "data", ".", "num_graphs", "\n", "\n", "x", "=", "self", ".", "fc_node", "(", "data", ".", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "edge_attr", "=", "self", ".", "fc_edge", "(", "data", ".", "edge_attr", ")", "\n", "edge_attr", "=", "self", ".", "be", "(", "edge_attr", ")", "\n", "for", "conv", "in", "self", ".", "convs1", ":", "\n", "# x = conv(x,data.edge_index)", "\n", "            ", "x1", "=", "conv", "(", "x", ",", "data", ".", "edge_index", ",", "edge_attr", ")", "\n", "x", "=", "x", "+", "x1", "\n", "\n", "", "x", "=", "x", ".", "reshape", "(", "(", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_node_dim", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Attention1.__init__": [[98, 118], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "math.sqrt", "PPO_Model.Attention1.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_heads", ",", "cat", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "Attention1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "head_dim", "=", "self", ".", "hidden_dim", "/", "self", ".", "n_heads", "\n", "self", ".", "norm", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "head_dim", ")", "\n", "\n", "self", ".", "w", "=", "nn", ".", "Linear", "(", "input_dim", "*", "cat", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Attention1.forward": [[119, 145], ["context.size", "PPO_Model.Attention1.w().view", "PPO_Model.Attention1.k().view", "PPO_Model.Attention1.v().view", "compatibility.squeeze.squeeze.squeeze", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "compatibility.squeeze.squeeze.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "scores.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "PPO_Model.Attention1.squeeze().view", "PPO_Model.Attention1.fc", "PPO_Model.Attention1.transpose", "PPO_Model.Attention1.transpose", "PPO_Model.Attention1.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "mask.unsqueeze().expand_as.unsqueeze().expand_as.bool", "float", "PPO_Model.Attention1.w", "PPO_Model.Attention1.k", "PPO_Model.Attention1.v", "PPO_Model.Attention1.transpose", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "PPO_Model.Attention1.squeeze"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "state_t", ",", "context", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param state_t: (batch_size,1,input_dim*3(GATembeding,fist_node,end_node))\n        :param context: \uff08batch_size,n_nodes,input_dim\uff09\n        :param mask: selected nodes  (batch_size,n_nodes)\n        :return:\n        '''", "\n", "batch_size", ",", "n_nodes", ",", "input_dim", "=", "context", ".", "size", "(", ")", "\n", "Q", "=", "self", ".", "w", "(", "state_t", ")", ".", "view", "(", "batch_size", ",", "1", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "K", "=", "self", ".", "k", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "V", "=", "self", ".", "v", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "self", ".", "n_heads", ",", "-", "1", ")", "\n", "Q", ",", "K", ",", "V", "=", "Q", ".", "transpose", "(", "1", ",", "2", ")", ",", "K", ".", "transpose", "(", "1", ",", "2", ")", ",", "V", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "compatibility", "=", "self", ".", "norm", "*", "torch", ".", "matmul", "(", "Q", ",", "K", ".", "transpose", "(", "2", ",", "\n", "3", ")", ")", "# (batch_size,n_heads,1,hidden_dim)*(batch_size,n_heads,hidden_dim,n_nodes)", "\n", "compatibility", "=", "compatibility", ".", "squeeze", "(", "2", ")", "# (batch_size,n_heads,n_nodes)", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "compatibility", ")", "\n", "u_i", "=", "compatibility", ".", "masked_fill", "(", "mask", ".", "bool", "(", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "scores", "=", "F", ".", "softmax", "(", "u_i", ",", "dim", "=", "-", "1", ")", "# (batch_size,n_heads,n_nodes)", "\n", "scores", "=", "scores", ".", "unsqueeze", "(", "2", ")", "\n", "out_put", "=", "torch", ".", "matmul", "(", "scores", ",", "V", ")", "# (batch_size,n_heads,1,n_nodes )*(batch_size,n_heads,n_nodes,head_dim)", "\n", "out_put", "=", "out_put", ".", "squeeze", "(", "2", ")", ".", "view", "(", "batch_size", ",", "self", ".", "hidden_dim", ")", "# \uff08batch_size,n_heads,hidden_dim\uff09", "\n", "out_put", "=", "self", ".", "fc", "(", "out_put", ")", "\n", "\n", "return", "out_put", "# (batch_size,hidden_dim)", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.ProbAttention.__init__": [[148, 164], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "PPO_Model.Attention1", "math.sqrt", "PPO_Model.ProbAttention.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_heads", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "ProbAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "norm", "=", "1", "/", "math", ".", "sqrt", "(", "hidden_dim", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "mhalayer", "=", "Attention1", "(", "n_heads", ",", "1", ",", "input_dim", ",", "hidden_dim", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.ProbAttention.forward": [[165, 186], ["PPO_Model.ProbAttention.mhalayer", "context.size", "x.masked_fill.masked_fill.view", "PPO_Model.ProbAttention.k().view", "compatibility.squeeze.squeeze.squeeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "x.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "mask.bool", "float", "PPO_Model.ProbAttention.k", "PPO_Model.ProbAttention.transpose"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "state_t", ",", "context", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param state_t: (batch_size,1,input_dim*3(GATembeding,fist_node,end_node))\n        :param context: \uff08batch_size,n_nodes,input_dim\uff09\n        :param mask: selected nodes  (batch_size,n_nodes)\n        :return:softmax_score\n        '''", "\n", "x", "=", "self", ".", "mhalayer", "(", "state_t", ",", "context", ",", "mask", ")", "\n", "\n", "batch_size", ",", "n_nodes", ",", "input_dim", "=", "context", ".", "size", "(", ")", "\n", "Q", "=", "x", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "\n", "K", "=", "self", ".", "k", "(", "context", ")", ".", "view", "(", "batch_size", ",", "n_nodes", ",", "-", "1", ")", "\n", "compatibility", "=", "self", ".", "norm", "*", "torch", ".", "matmul", "(", "Q", ",", "K", ".", "transpose", "(", "1", ",", "2", ")", ")", "# (batch_size,1,n_nodes)", "\n", "compatibility", "=", "compatibility", ".", "squeeze", "(", "1", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "compatibility", ")", "\n", "x", "=", "x", "*", "10", "\n", "x", "=", "x", ".", "masked_fill", "(", "mask", ".", "bool", "(", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "scores", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Decoder1.__init__": [[189, 210], ["torch.Module.__init__", "torch.Module.__init__", "PPO_Model.ProbAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "PPO_Model.Decoder1._input.data.uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "PPO_Model.Decoder1.named_parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "p.size"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "Decoder1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "super", "(", "Decoder1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "# self.cell = torch.nn.GRUCell(input_dim*2, hidden_dim*2, bias=True)", "\n", "self", ".", "prob", "=", "ProbAttention", "(", "8", ",", "input_dim", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_dim", "*", "2", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "_input", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "2", "*", "hidden_dim", ")", ")", "\n", "self", ".", "_input", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", "\n", "if", "INIT", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "if", "len", "(", "p", ".", "size", "(", ")", ")", ">=", "2", ":", "\n", "                        ", "nn", ".", "init", ".", "orthogonal_", "(", "p", ",", "gain", "=", "1", ")", "\n", "", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Decoder1.forward": [[211, 320], ["encoder_inputs.new_zeros", "encoder_inputs.new_zeros", "actions_old.reshape.reshape.reshape", "PPO_Model.Decoder1._input[].expand", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "old_actions_probs.sum.sum.sum", "PPO_Model.Decoder1._input[].expand", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "PPO_Model.Decoder1.fc", "PPO_Model.Decoder1.fc1", "PPO_Model.Decoder1.prob", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.entropy", "torch.distributions.categorical.Categorical.entropy", "torch.distributions.categorical.Categorical.entropy", "torch.cat.append", "torch.cat.append", "torch.cat.append", "old_actions_probs.sum.sum.append", "mask.scatter.scatter.scatter", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "encoder_inputs.size", "PPO_Model.Decoder1.fc", "PPO_Model.Decoder1.fc1", "PPO_Model.Decoder1.prob", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.entropy", "torch.distributions.categorical.Categorical.entropy", "torch.distributions.categorical.Categorical.entropy", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.cat.append", "torch.cat.append", "torch.cat.append", "mask.scatter.scatter.scatter", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.distributions.categorical.Categorical.entropy.unsqueeze", "torch.distributions.categorical.Categorical.log_prob.unsqueeze", "actions_old[].unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PPO_Model.Decoder1.max", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample.data.unsqueeze", "torch.distributions.categorical.Categorical.log_prob.unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze().expand", "mask.scatter.scatter.size", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "mask.scatter.scatter.size", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "actions_old[].unsqueeze", "actions_old[].unsqueeze().unsqueeze().expand", "torch.distributions.categorical.Categorical.sample.unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze().unsqueeze().expand", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "encoder_inputs.size", "actions_old[].unsqueeze().unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze().unsqueeze", "actions_old[].unsqueeze", "torch.distributions.categorical.Categorical.sample.unsqueeze"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "encoder_inputs", ",", "pool", ",", "actions_old", ",", "n_steps", ",", "batch_size", ",", "greedy", "=", "False", ",", "_action", "=", "False", ")", ":", "\n", "        ", "_input", "=", "encoder_inputs", ".", "new_zeros", "(", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "encoder_inputs", ".", "size", "(", "2", ")", ")", ")", "\n", "mask", "=", "encoder_inputs", ".", "new_zeros", "(", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "encoder_inputs", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "if", "_action", ":", "\n", "            ", "actions_old", "=", "actions_old", ".", "reshape", "(", "batch_size", ",", "n_nodes", ")", "\n", "# log_ps = []", "\n", "# actions = []", "\n", "entropys", "=", "[", "]", "\n", "old_actions_probs", "=", "[", "]", "\n", "# h0 = self.h0.unsqueeze(0).expand(encoder_inputs.size(0), -1)", "\n", "first_cat", "=", "self", ".", "_input", "[", "None", ",", ":", "]", ".", "expand", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "_input_first", "=", "first_cat", "\n", "\n", "", "else", ":", "\n", "                    ", "_input_first", "=", "torch", ".", "cat", "(", "[", "first_node", ",", "_input", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# -----------------------------------------------------------------------------pool+cat(first_node,current_node)", "\n", "", "_input_first", "=", "self", ".", "fc", "(", "_input_first", ")", "\n", "pool", "=", "self", ".", "fc1", "(", "pool", ")", "\n", "decoder_input", "=", "_input_first", "+", "pool", "\n", "# -----------------------------------------------------------------------------cat(pool,first_node,current_node)", "\n", "\n", "# decoder_input = torch.cat([pool,_input_first], dim=-1)", "\n", "# decoder_input  = self.fc(decoder_input)", "\n", "# -----------------------------------------------------------------------------------------------------------", "\n", "p", "=", "self", ".", "prob", "(", "decoder_input", ",", "encoder_inputs", ",", "mask", ")", "\n", "\n", "dist", "=", "Categorical", "(", "p", ")", "\n", "\n", "old_actions_prob", "=", "dist", ".", "log_prob", "(", "actions_old", "[", ":", ",", "i", "]", ")", "\n", "\n", "entropy", "=", "dist", ".", "entropy", "(", ")", "\n", "entropys", ".", "append", "(", "entropy", ".", "unsqueeze", "(", "1", ")", ")", "\n", "old_actions_probs", ".", "append", "(", "old_actions_prob", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "mask", "=", "mask", ".", "scatter", "(", "1", ",", "actions_old", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "1", ")", "\n", "_input", "=", "torch", ".", "gather", "(", "encoder_inputs", ",", "1", ",", "\n", "actions_old", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "-", "1", ",", "\n", "encoder_inputs", ".", "size", "(", "\n", "2", ")", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "first_node", "=", "_input", "\n", "\n", "# log_ps = torch.cat(log_ps,dim=1)", "\n", "# actions = torch.cat(actions,dim=1)", "\n", "", "", "entropys", "=", "torch", ".", "cat", "(", "entropys", ",", "dim", "=", "1", ")", "\n", "old_actions_probs", "=", "torch", ".", "cat", "(", "old_actions_probs", ",", "dim", "=", "1", ")", "\n", "# log_p = log_ps.sum(dim=1)", "\n", "entropy", "=", "entropys", ".", "mean", "(", "dim", "=", "1", ")", "\n", "old_actions_probs", "=", "old_actions_probs", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "0", ",", "0", ",", "entropy", ",", "old_actions_probs", "\n", "", "else", ":", "\n", "            ", "log_ps", "=", "[", "]", "\n", "actions", "=", "[", "]", "\n", "# entropys = []", "\n", "# h0 = self.h0.unsqueeze(0).expand(encoder_inputs.size(0), -1)", "\n", "first_cat", "=", "self", ".", "_input", "[", "None", ",", ":", "]", ".", "expand", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "_input_first", "=", "first_cat", "\n", "\n", "", "else", ":", "\n", "                    ", "_input_first", "=", "torch", ".", "cat", "(", "[", "first_node", ",", "_input", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# -----------------------------------------------------------------------------pool+cat(first_node,current_node)", "\n", "", "_input_first", "=", "self", ".", "fc", "(", "_input_first", ")", "\n", "pool", "=", "self", ".", "fc1", "(", "pool", ")", "\n", "decoder_input", "=", "_input_first", "+", "pool", "\n", "# -----------------------------------------------------------------------------cat(pool,first_node,current_node)", "\n", "\n", "# decoder_input = torch.cat([pool,_input_first], dim=-1)", "\n", "# decoder_input  = self.fc(decoder_input)", "\n", "# -----------------------------------------------------------------------------------------------------------", "\n", "p", "=", "self", ".", "prob", "(", "decoder_input", ",", "encoder_inputs", ",", "mask", ")", "\n", "\n", "dist", "=", "Categorical", "(", "p", ")", "\n", "entropy", "=", "dist", ".", "entropy", "(", ")", "\n", "\n", "if", "greedy", ":", "\n", "                    ", "_", ",", "index", "=", "p", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "index", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "actions", ".", "append", "(", "index", ".", "data", ".", "unsqueeze", "(", "1", ")", ")", "\n", "log_p", "=", "dist", ".", "log_prob", "(", "index", ")", "\n", "log_ps", ".", "append", "(", "log_p", ".", "unsqueeze", "(", "1", ")", ")", "\n", "# entropys.append(entropy.unsqueeze(1))", "\n", "\n", "mask", "=", "mask", ".", "scatter", "(", "1", ",", "index", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "1", ")", "\n", "_input", "=", "torch", ".", "gather", "(", "encoder_inputs", ",", "1", ",", "\n", "index", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "encoder_inputs", ".", "size", "(", "0", ")", ",", "-", "1", ",", "\n", "encoder_inputs", ".", "size", "(", "2", ")", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "first_node", "=", "_input", "\n", "\n", "", "", "log_ps", "=", "torch", ".", "cat", "(", "log_ps", ",", "dim", "=", "1", ")", "\n", "actions", "=", "torch", ".", "cat", "(", "actions", ",", "dim", "=", "1", ")", "\n", "# entropys = torch.cat(entropys, dim=1)", "\n", "\n", "log_p", "=", "log_ps", ".", "sum", "(", "dim", "=", "1", ")", "\n", "# entropy = entropys.mean(dim=1)", "\n", "\n", "return", "actions", ",", "log_p", ",", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Model.__init__": [[323, 327], ["torch.Module.__init__", "PPO_Model.Encoder", "PPO_Model.Decoder1"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", "\n", "self", ".", "decoder", "=", "Decoder1", "(", "hidden_node_dim", ",", "hidden_node_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Model.forward": [[328, 334], ["PPO_Model.Model.encoder", "PPO_Model.Model.mean", "PPO_Model.Model.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "datas", ",", "actions_old", ",", "n_steps", ",", "batch_size", ",", "greedy", ",", "_action", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "datas", ")", "# (batch,seq_len,hidden_node_dim)", "\n", "pooled", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "\n", "actions", ",", "log_p", ",", "entropy", ",", "dists", "=", "self", ".", "decoder", "(", "x", ",", "pooled", ",", "actions_old", ",", "n_steps", ",", "batch_size", ",", "greedy", ",", "_action", ")", "\n", "\n", "return", "actions", ",", "log_p", ",", "entropy", ",", "dists", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Critic.__init__": [[338, 344], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_node_dim", ")", ":", "\n", "        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv1d", "(", "hidden_node_dim", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv1d", "(", "20", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Conv1d", "(", "20", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Critic.forward": [[345, 351], ["x.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "PPO_Model.Critic.fc3().sum().squeeze", "PPO_Model.Critic.fc1", "PPO_Model.Critic.fc2", "PPO_Model.Critic.fc3().sum", "PPO_Model.Critic.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x1", ")", ")", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "output", ")", ")", "\n", "value", "=", "self", ".", "fc3", "(", "output", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Actor_critic.__init__": [[354, 358], ["torch.Module.__init__", "PPO_Model.Model", "PPO_Model.Critic"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", ":", "\n", "        ", "super", "(", "Actor_critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "actor", "=", "Model", "(", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", "\n", "self", ".", "critic", "=", "Critic", "(", "hidden_node_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Actor_critic.act": [[359, 363], ["PPO_Model.Actor_critic.actor"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "datas", ",", "actions", ",", "steps", ",", "batch_size", ",", "greedy", ",", "_action", ")", ":", "\n", "        ", "actions", ",", "log_p", ",", "_", ",", "_", ",", "_", "=", "self", ".", "actor", "(", "datas", ",", "actions", ",", "steps", ",", "batch_size", ",", "greedy", ",", "_action", ")", "\n", "\n", "return", "actions", ",", "log_p", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Actor_critic.evaluate": [[364, 370], ["PPO_Model.Actor_critic.actor", "PPO_Model.Actor_critic.critic"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "datas", ",", "actions", ",", "steps", ",", "batch_size", ",", "greedy", ",", "_action", ")", ":", "\n", "        ", "_", ",", "_", ",", "entropy", ",", "old_log_p", ",", "x", "=", "self", ".", "actor", "(", "datas", ",", "actions", ",", "steps", ",", "batch_size", ",", "greedy", ",", "_action", ")", "\n", "\n", "value", "=", "self", ".", "critic", "(", "x", ")", "\n", "\n", "return", "entropy", ",", "old_log_p", ",", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Memory.__init__": [[373, 380], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "input_x", "=", "[", "]", "\n", "# self.input_index = []", "\n", "self", ".", "input_attr", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "log_probs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Memory.def_memory": [[381, 388], ["PPO_Model.Memory.input_x.clear", "PPO_Model.Memory.input_attr.clear", "PPO_Model.Memory.actions.clear", "PPO_Model.Memory.rewards.clear", "PPO_Model.Memory.log_probs.clear"], "methods", ["None"], ["", "def", "def_memory", "(", "self", ")", ":", "\n", "        ", "self", ".", "input_x", ".", "clear", "(", ")", "\n", "# self.input_index.clear()", "\n", "self", ".", "input_attr", ".", "clear", "(", ")", "\n", "self", ".", "actions", ".", "clear", "(", ")", "\n", "self", ".", "rewards", ".", "clear", "(", ")", "\n", "self", ".", "log_probs", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Agentppo.__init__": [[391, 415], ["PPO_Model.Actor_critic", "PPO_Model.Actor_critic", "PPO_Model.Agentppo.old_polic.load_state_dict", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "PPO_Model.Agentppo.policy.state_dict", "PPO_Model.Agentppo.policy.parameters"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.load_state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.state_dict"], ["    ", "def", "__init__", "(", "self", ",", "steps", ",", "greedy", ",", "lr", ",", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "epoch", "=", "1", ",", "\n", "batch_size", "=", "32", ",", "conv_laysers", "=", "3", ",", "entropy_value", "=", "0.2", ",", "eps_clip", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "policy", "=", "Actor_critic", "(", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "conv_laysers", ")", "\n", "self", ".", "old_polic", "=", "Actor_critic", "(", "input_node_dim", ",", "hidden_node_dim", ",", "input_edge_dim", ",", "hidden_edge_dim", ",", "\n", "conv_laysers", ")", "\n", "\n", "self", ".", "old_polic", ".", "load_state_dict", "(", "self", ".", "policy", ".", "state_dict", "(", ")", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "self", ".", "MseLoss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "entropy_value", "=", "entropy_value", "\n", "self", ".", "eps_clip", "=", "eps_clip", "\n", "self", ".", "greedy", "=", "greedy", "\n", "self", ".", "_action", "=", "True", "\n", "self", ".", "conv_layers", "=", "conv_laysers", "\n", "self", ".", "input_node_dim", "=", "input_node_dim", "\n", "self", ".", "input_edge_dim", "=", "input_edge_dim", "\n", "self", ".", "hidden_node_dim", "=", "hidden_node_dim", "\n", "self", ".", "hidden_edge_dim", "=", "hidden_edge_dim", "\n", "\n", "self", ".", "times", ",", "self", ".", "losses", ",", "self", ".", "rewards", ",", "self", ".", "critic_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Agentppo.adv_normalize": [[416, 421], ["adv.std", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "adv.mean", "adv.std"], "methods", ["None"], ["", "def", "adv_normalize", "(", "self", ",", "adv", ")", ":", "\n", "        ", "std", "=", "adv", ".", "std", "(", ")", "\n", "assert", "std", "!=", "0.", "and", "not", "torch", ".", "isnan", "(", "std", ")", ",", "'Need nonzero std'", "\n", "n_advs", "=", "(", "adv", "-", "adv", ".", "mean", "(", ")", ")", "/", "(", "adv", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "return", "n_advs", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Agentppo.value_loss_gae": [[422, 429], ["PPO_Model.Agentppo.MseLoss", "PPO_Model.Agentppo.MseLoss", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "value_loss_gae", "(", "self", ",", "val_targ", ",", "old_vs", ",", "value_od", ",", "clip_val", ")", ":", "\n", "        ", "vs_clipped", "=", "old_vs", "+", "torch", ".", "clamp", "(", "old_vs", "-", "value_od", ",", "-", "clip_val", ",", "+", "clip_val", ")", "\n", "val_loss_mat_unclipped", "=", "self", ".", "MseLoss", "(", "old_vs", ",", "val_targ", ")", "\n", "val_loss_mat_clipped", "=", "self", ".", "MseLoss", "(", "vs_clipped", ",", "val_targ", ")", "\n", "val_loss_mat", "=", "torch", ".", "max", "(", "val_loss_mat_unclipped", ",", "val_loss_mat_clipped", ")", "\n", "mse", "=", "val_loss_mat", "\n", "return", "mse", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Agentppo.update": [[430, 500], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "edges_index.transpose.transpose.transpose", "range", "PPO_Model.Agentppo.policy.to", "torch_geometric.data.DataLoader", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "range", "PPO_Model.Agentppo.old_polic.load_state_dict", "range", "torch.stack.size", "torch.stack.size", "torch.stack.size", "torch_geometric.data.Data", "datas.append", "PPO_Model.Agentppo.policy.train", "time.time", "enumerate", "PPO_Model.Agentppo.policy.state_dict", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "edges_index.transpose.transpose.append", "batch.to.to.to", "PPO_Model.Agentppo.policy.evaluate", "PPO_Model.Agentppo.adv_normalize", "PPO_Model.Agentppo.MseLoss", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "PPO_Model.Agentppo.optimizer.zero_grad", "loss.mean().backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "PPO_Model.Agentppo.optimizer.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "value.detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "PPO_Model.Agentppo.policy.parameters", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "loss.mean"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.load_state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.Rollout_train.train", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Actor_critic.evaluate", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.PPO_Model.Agentppo.adv_normalize"], ["", "def", "update", "(", "self", ",", "memory", ",", "epoch", ")", ":", "\n", "        ", "old_input_x", "=", "torch", ".", "stack", "(", "memory", ".", "input_x", ")", "\n", "old_input_attr", "=", "torch", ".", "stack", "(", "memory", ".", "input_attr", ")", "\n", "old_action", "=", "torch", ".", "stack", "(", "memory", ".", "actions", ")", "\n", "old_rewards", "=", "torch", ".", "stack", "(", "memory", ".", "rewards", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "old_log_probs", "=", "torch", ".", "stack", "(", "memory", ".", "log_probs", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "datas", "=", "[", "]", "\n", "edges_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n_nodes", ")", ":", "\n", "                ", "edges_index", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "", "edges_index", "=", "torch", ".", "LongTensor", "(", "edges_index", ")", "\n", "edges_index", "=", "edges_index", ".", "transpose", "(", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "old_input_x", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "data", "=", "Data", "(", "\n", "x", "=", "old_input_x", "[", "i", "]", ",", "\n", "edge_index", "=", "edges_index", ",", "\n", "edge_attr", "=", "old_input_attr", "[", "i", "]", ",", "\n", "actions", "=", "old_action", "[", "i", "]", ",", "\n", "rewards", "=", "old_rewards", "[", "i", "]", ",", "\n", "log_probs", "=", "old_log_probs", "[", "i", "]", "\n", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "self", ".", "policy", ".", "to", "(", "device", ")", "\n", "data_loader", "=", "DataLoader", "(", "datas", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "# \u5b66\u4e60\u7387\u9000\u706b", "\n", "scheduler", "=", "LambdaLR", "(", "self", ".", "optimizer", ",", "lr_lambda", "=", "lambda", "f", ":", "0.96", "**", "epoch", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "\n", "            ", "self", ".", "policy", ".", "train", "(", ")", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "start", "=", "epoch_start", "\n", "self", ".", "times", ",", "self", ".", "losses", ",", "self", ".", "rewards", ",", "self", ".", "critic_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "                ", "batch", "=", "batch", ".", "to", "(", "device", ")", "\n", "entropy", ",", "log_probs", ",", "value", "=", "self", ".", "policy", ".", "evaluate", "(", "batch", ",", "batch", ".", "actions", ",", "self", ".", "steps", ",", "self", ".", "batch_size", ",", "\n", "self", ".", "greedy", ",", "self", ".", "_action", ")", "\n", "# advangtage function", "\n", "\n", "#base_reward = self.adv_normalize(base_reward)", "\n", "rewar", "=", "batch", ".", "rewards", "\n", "rewar", "=", "self", ".", "adv_normalize", "(", "rewar", ")", "\n", "# Value function clipping", "\n", "mse_loss", "=", "self", ".", "MseLoss", "(", "rewar", ",", "value", ")", "\n", "\n", "ratios", "=", "torch", ".", "exp", "(", "log_probs", "-", "batch", ".", "log_probs", ")", "\n", "\n", "# norm advantages", "\n", "advantages", "=", "rewar", "-", "value", ".", "detach", "(", ")", "\n", "# advantages = self.adv_normalize(advantages)", "\n", "# PPO loss", "\n", "\n", "surr1", "=", "ratios", "*", "advantages", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratios", ",", "1", "-", "self", ".", "eps_clip", ",", "1", "+", "self", ".", "eps_clip", ")", "*", "advantages", "\n", "# total loss", "\n", "\n", "loss", "=", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", "+", "0.5", "*", "mse_loss", "-", "self", ".", "entropy_value", "*", "entropy", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "mean", "(", ")", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "\n", "", "", "self", ".", "old_polic", ".", "load_state_dict", "(", "self", ".", "policy", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__": [[24, 29], ["super().__init__", "rolloutBaseline.RolloutBaseline._update_model"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.__init__", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline._update_model"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "dataset", ",", "n_nodes", "=", "50", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "super", "(", "RolloutBaseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "_update_model", "(", "model", ",", "epoch", ")", "\n", "", "def", "_update_model", "(", "self", ",", "model", ",", "epoch", ",", "dataset", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline._update_model": [[29, 34], ["copy.deepcopy", "rollout().cpu().numpy", "rolloutBaseline.RolloutBaseline.bl_vals.mean", "rollout().cpu", "rolloutBaseline.rollout"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.rollout"], ["", "def", "_update_model", "(", "self", ",", "model", ",", "epoch", ",", "dataset", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "self", ".", "bl_vals", "=", "rollout", "(", "self", ".", "model", ",", "self", ".", "dataset", ",", "n_nodes", "=", "self", ".", "n_nodes", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "mean", "=", "self", ".", "bl_vals", ".", "mean", "(", ")", "\n", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval": [[35, 40], ["torch.no_grad", "rolloutBaseline.RolloutBaseline.model", "TSP.create_tsp_instance.reward1", "tour.detach"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1"], ["", "def", "eval", "(", "self", ",", "x", ",", "n_nodes", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tour", ",", "_", ",", "_", "=", "self", ".", "model", "(", "x", ",", "n_nodes", ",", "True", ")", "\n", "v", "=", "reward1", "(", "x", ".", "x", ",", "tour", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.epoch_callback": [[41, 60], ["print", "rollout().cpu().numpy", "rollout().cpu().numpy.mean", "print", "scipy.stats.ttest_rel", "print", "rollout().cpu", "print", "rolloutBaseline.RolloutBaseline._update_model", "rolloutBaseline.rollout"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline._update_model", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.rollout"], ["", "def", "epoch_callback", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "\n", "        ", "print", "(", "\"Evaluating candidate model on evaluation dataset\"", ")", "\n", "candidate_vals", "=", "rollout", "(", "model", ",", "self", ".", "dataset", ",", "self", ".", "n_nodes", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "candidate_mean", "=", "candidate_vals", ".", "mean", "(", ")", "\n", "\n", "print", "(", "\"Epoch {} candidate mean {} , baseline epoch {} mean {}, difference {}\"", ".", "format", "(", "\n", "epoch", ",", "candidate_mean", ",", "self", ".", "epoch", ",", "self", ".", "mean", ",", "candidate_mean", "-", "self", ".", "mean", ")", ")", "\n", "if", "candidate_mean", "-", "self", ".", "mean", "<", "0", ":", "\n", "# Calc p value", "\n", "            ", "t", ",", "p", "=", "ttest_rel", "(", "candidate_vals", ",", "self", ".", "bl_vals", ")", "\n", "\n", "p_val", "=", "p", "/", "2", "# one-sided", "\n", "assert", "t", "<", "0", ",", "\"T-statistic should be negative\"", "\n", "print", "(", "\"p-value: {}\"", ".", "format", "(", "p_val", ")", ")", "\n", "if", "p_val", "<", "0.05", ":", "\n", "                ", "print", "(", "'Update baseline'", ")", "\n", "self", ".", "_update_model", "(", "model", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.state_dict": [[61, 66], ["None"], "methods", ["None"], ["", "", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'model'", ":", "self", ".", "model", ",", "\n", "'dataset'", ":", "self", ".", "dataset", ",", "\n", "'epoch'", ":", "self", ".", "epoch", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.load_state_dict": [[68, 72], ["copy.deepcopy", "get_inner_model().load_state_dict", "rolloutBaseline.RolloutBaseline._update_model", "get_inner_model().state_dict", "rolloutBaseline.get_inner_model", "rolloutBaseline.get_inner_model"], "methods", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.load_state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline._update_model", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.state_dict", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.get_inner_model", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.get_inner_model"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "load_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "get_inner_model", "(", "load_model", ")", ".", "load_state_dict", "(", "get_inner_model", "(", "state_dict", "[", "'model'", "]", ")", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "_update_model", "(", "load_model", ",", "state_dict", "[", "'epoch'", "]", ",", "state_dict", "[", "'dataset'", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.get_inner_model": [[10, 12], ["isinstance"], "function", ["None"], ["def", "get_inner_model", "(", "model", ")", ":", "\n", "    ", "return", "model", ".", "module", "if", "isinstance", "(", "model", ",", "DataParallel", ")", "else", "model", "\n", "", "def", "rollout", "(", "model", ",", "dataset", ",", "n_nodes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.rollout": [[12, 21], ["model.eval", "torch.cat", "TSP.create_tsp_instance.reward1.cpu", "torch.no_grad", "model", "TSP.create_tsp_instance.reward1", "rolloutBaseline.rollout.eval_model_bat"], "function", ["home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.rolloutBaseline.RolloutBaseline.eval", "home.repos.pwc.inspect_result.pengguo318_RoutingProblemGANN.TSP.create_tsp_instance.reward1"], ["", "def", "rollout", "(", "model", ",", "dataset", ",", "n_nodes", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "def", "eval_model_bat", "(", "bat", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cost", ",", "_", ",", "_", "=", "model", "(", "bat", ",", "n_nodes", ",", "True", ")", "\n", "cost", "=", "reward1", "(", "bat", ".", "x", ",", "cost", ".", "detach", "(", ")", ",", "n_nodes", ")", "\n", "", "return", "cost", ".", "cpu", "(", ")", "\n", "", "totall_cost", "=", "torch", ".", "cat", "(", "[", "eval_model_bat", "(", "bat", ".", "to", "(", "device", ")", ")", "for", "bat", "in", "dataset", "]", ",", "0", ")", "\n", "return", "totall_cost", "\n", "\n"]]}