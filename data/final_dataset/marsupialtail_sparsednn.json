{"home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8_block.emit_load_block": [[99, 103], ["LOAD_CACHE_ASM.replace().replace().replace().replace().replace().replace", "str", "LOAD_CACHE_ASM.replace().replace().replace().replace().replace", "str", "LOAD_CACHE_ASM.replace().replace().replace().replace", "str", "LOAD_CACHE_ASM.replace().replace().replace", "str", "LOAD_CACHE_ASM.replace().replace", "str", "LOAD_CACHE_ASM.replace", "str"], "function", ["None"], ["", "def", "emit_load_block", "(", "index", ",", "currloadreg", ")", ":", "\n", "\n", "    ", "return", "LOAD_CACHE_ASM", ".", "replace", "(", "\"IDX1\"", ",", "str", "(", "index", "[", "0", "]", ")", ")", ".", "replace", "(", "\"IDX2\"", ",", "str", "(", "index", "[", "1", "]", ")", ")", ".", "replace", "(", "\"IDX3\"", ",", "str", "(", "index", "[", "2", "]", ")", ")", ".", "replace", "(", "\"IDX4\"", ",", "str", "(", "index", "[", "3", "]", ")", ")", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", ")", ")", ".", "replace", "(", "\"DA\"", ",", "str", "(", "17", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8_block.emit_compute_block": [[104, 120], ["range", "range", "AB_vals.extend", "A_idx.extend", "LOAD_WEIGHT_ASM.replace().replace", "range", "str", "MAIN_PROGRAM_ASM.replace().replace().replace", "LOAD_WEIGHT_ASM.replace", "str", "str", "MAIN_PROGRAM_ASM.replace().replace", "str", "MAIN_PROGRAM_ASM.replace", "str"], "function", ["None"], ["", "def", "emit_compute_block", "(", "Ny_idx", ",", "vals", ",", "currloadreg", ")", ":", "\n", "    ", "global", "off", "\n", "\n", "new_block_asm", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "BLOCK", ")", ":", "\n", "        ", "new_block_asm", "+=", "LOAD_WEIGHT_ASM", ".", "replace", "(", "\"OFF\"", ",", "str", "(", "off", "*", "4", "+", "i", "*", "4", ")", ")", ".", "replace", "(", "\"IDX\"", ",", "str", "(", "31", "-", "i", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "CT", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "BLOCK", ")", ":", "\n", "            ", "new_block_asm", "+=", "MAIN_PROGRAM_ASM", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", "-", "i", ")", ")", ".", "replace", "(", "\"IDX\"", ",", "str", "(", "31", "-", "j", ")", ")", ".", "replace", "(", "\"TAR\"", ",", "str", "(", "i", "*", "BLOCK", "+", "j", ")", ")", "\n", "", "", "global", "AB_vals", "\n", "AB_vals", ".", "extend", "(", "vals", ")", "\n", "global", "A_idx", "\n", "A_idx", ".", "extend", "(", "[", "Ny_idx", "]", "*", "4", ")", "\n", "off", "+=", "BLOCK", "\n", "return", "new_block_asm", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8_block.ny_to_a": [[122, 126], ["None"], "function", ["None"], ["", "def", "ny_to_a", "(", "ny_idx", ",", "groupId", ",", "blockId", ",", "A_dim", "=", "None", ",", "A_offset", "=", "None", ")", ":", "\n", "    ", "if", "A_offset", "is", "None", ":", "\n", "        ", "A_offset", "=", "blockId", "*", "(", "AT", ")", "\n", "", "return", "A_offset", "+", "ny_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8_block.generate_from_B": [[128, 265], ["set", "zip", "padded_Ny_indices.extend", "padded_B_indices.extend", "range", "AB_block_offs.append", "str", "range", "range", "padded_Ny_indices.append", "padded_B_indices.append", "len", "code_gen_cpu_int8_block.ny_to_a", "len", "range", "range", "range", "range", "numpy.hstack", "B_idx.extend", "code_gen_cpu_int8_block.emit_compute_block", "range", "range", "numpy.hstack", "B_idx.extend", "code_gen_cpu_int8_block.emit_compute_block", "set.add", "str", "np.hstack.append", "code_gen_cpu_int8_block.emit_load_block", "np.hstack.append", "str", "str", "numpy.where", "numpy.array().astype", "str", "str", "str", "str", "str", "str", "str", "str", "str", "numpy.array", "numpy.array", "str", "str", "str", "str", "str", "str", "str", "range", "range"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.ny_to_a", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.emit_compute_block", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.emit_compute_block", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.emit_load_block"], ["", "def", "generate_from_B", "(", "Ny_indices", ",", "B_indices", ",", "BA", ",", "block", ",", "NY", ",", "BB_offset", ",", "A_offset", "=", "None", ")", ":", "\n", "\n", "    ", "asm", "=", "\"\"\"\n    ..B1.NUM1:\n    xorl    %r10d, %r10d;\n    ..B1.NUM2:\n    imul      $16,  %r10d, %r11d;\n    add       %r9d, %r11d;\n    movslq  %r11d, %r11;\n    add     $CT,    %r10d;\n    \n    \"\"\"", ".", "replace", "(", "\"NUM1\"", ",", "str", "(", "BB_offset", "+", "block", "*", "2", "+", "2", ")", ")", ".", "replace", "(", "\"NUM2\"", ",", "str", "(", "BB_offset", "+", "block", "*", "2", "+", "3", ")", ")", ".", "replace", "(", "\"STRIDE\"", ",", "str", "(", "8", ")", ")", ".", "replace", "(", "\"CT\"", ",", "str", "(", "CT", ")", ")", "\n", "\n", "\n", "#print(A_offset)", "\n", "if", "input_file_bias", "is", "not", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "NY", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                ", "if", "BB_offset", ">", "0", ":", "\n", "                    ", "asm", "+=", "\"\\t\\tvmovdqu32 \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4) ,%zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "", "else", ":", "\n", "                    ", "asm", "+=", "\"\\tvpbroadcastd \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "4", ")", "+", "\"(%rsi), %zmm\"", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\";\\n\"", "\n", "\n", "", "", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "NY", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                ", "if", "BB_offset", ">", "0", ":", "\n", "                    ", "asm", "+=", "\"\\t\\tvmovups \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4), %zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "", "else", ":", "\n", "                    ", "asm", "+=", "\"\\tvxorps \"", "+", "\"%zmm\"", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\",%zmm\"", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\",%zmm\"", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\";\\n\"", "\n", "\n", "", "", "", "", "done", "=", "set", "(", ")", "\n", "loads", "=", "\"\"", "\n", "computes", "=", "\"\"", "\n", "\n", "TOK", "=", "24", "\n", "currloadreg", "=", "TOK", "\n", "# pad end of the zipped list", "\n", "\n", "padded_Ny_indices", "=", "[", "]", "\n", "padded_B_indices", "=", "[", "]", "\n", "\n", "# For some wierd legacy reasons, I call A_indices Ny_indices, which are A_indices relative to the block ", "\n", "# But we are basically going to take all the Ny_indices and corresponding B_indices, and pad them with -1 so that length is multiple of 4", "\n", "# note we don't require 4 nonzero weights to be sequential, we can just pack them together and inline their corresponding read addresses in BC into the code", "\n", "\n", "counter", "=", "0", "\n", "for", "ny_idx", ",", "b_idx", "in", "zip", "(", "Ny_indices", ",", "B_indices", ")", ":", "\n", "#assert ny_idx == 0 # for now. We are going to handle AT for quantized at a later date if at all.", "\n", "        ", "if", "ny_idx", "!=", "0", ":", "\n", "            ", "continue", "# we are going to just process the first element in each A tile. ", "\n", "#print(ny_idx, b_idx)", "\n", "", "padded_Ny_indices", ".", "append", "(", "ny_idx", ")", "\n", "padded_B_indices", ".", "append", "(", "b_idx", ")", "\n", "counter", "+=", "1", "\n", "", "pad_len", "=", "(", "(", "counter", "-", "1", ")", "//", "4", "+", "1", ")", "*", "4", "-", "counter", "\n", "padded_Ny_indices", ".", "extend", "(", "[", "-", "1", "]", "*", "pad_len", ")", "\n", "padded_B_indices", ".", "extend", "(", "[", "-", "1", "]", "*", "pad_len", ")", "\n", "#print(padded_B_indices,len(padded_B_indices))", "\n", "for", "pos", "in", "range", "(", "0", ",", "len", "(", "padded_Ny_indices", ")", ",", "4", ")", ":", "\n", "        ", "b_indices", "=", "padded_B_indices", "[", "pos", ":", "pos", "+", "4", "]", "\n", "currloadreg", "=", "TOK", "#(currloadreg - TOK + 1) % 6 + TOK", "\n", "asm", "+=", "loads", "\n", "asm", "+=", "computes", "\n", "loads", "=", "\"\"", "\n", "computes", "=", "\"\"", "\n", "ny_idx", "=", "0", "\n", "a_idx", "=", "ny_to_a", "(", "ny_idx", ",", "0", ",", "block", ",", "A_dim", "=", "A_dim", ",", "A_offset", "=", "A_offset", ")", "\n", "global", "B_idx", "\n", "\n", "# this really complicated stuff is used to deal with cases when there are fewer than 4 nonzeros left in the B-row. ", "\n", "# I suppose you could just pad the weights with zero and take away this custom logic -- you will generate marginally more instructions", "\n", "# but does it really matter", "\n", "\n", "if", "-", "1", "in", "b_indices", ":", "\n", "            ", "assert", "(", "b_indices", "[", "0", "]", "!=", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "CT", ")", ":", "\n", "                ", "load_block_asm", "=", "\"\"\"\n        vxorps      %zmm29, %zmm29, % zmm29;\n        vxorps      %zmmNUM, %zmmNUM, %zmmNUM;\n        vmovdqu8    IDX1(%r8,%r11,1), %xmmNUM; \n                \"\"\"", ".", "replace", "(", "\"IDX1\"", ",", "str", "(", "b_indices", "[", "0", "]", "*", "C_dim", "+", "i", "*", "VEC", ")", ")", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", "-", "i", ")", ")", "\n", "if", "b_indices", "[", "2", "]", "!=", "-", "1", ":", "\n", "                    ", "load_block_asm", "+=", "\"\"\"\n        vmovdqu8     IDX3(%r8,%r11,1), %xmm29;                  \n                    \"\"\"", ".", "replace", "(", "\"IDX3\"", ",", "str", "(", "b_indices", "[", "2", "]", "*", "C_dim", "+", "i", "*", "VEC", ")", ")", "\n", "", "if", "b_indices", "[", "1", "]", "!=", "-", "1", ":", "\n", "                    ", "load_block_asm", "+=", "\"\"\"\n        vbroadcasti32x4  IDX2(%r8,%r11,1),%ymmNUM {%k1};               \n                    \"\"\"", ".", "replace", "(", "\"IDX2\"", ",", "str", "(", "b_indices", "[", "1", "]", "*", "C_dim", "+", "i", "*", "VEC", ")", ")", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", "-", "i", ")", ")", "\n", "", "if", "b_indices", "[", "3", "]", "!=", "-", "1", ":", "\n", "                    ", "load_block_asm", "+=", "\"\"\"\n        vbroadcasti32x4  IDX3(%r8,%r11,1),%ymm29 {%k1};               \n                    \"\"\"", ".", "replace", "(", "\"IDX3\"", ",", "str", "(", "b_indices", "[", "3", "]", "*", "C_dim", "+", "i", "*", "VEC", ")", ")", "\n", "", "load_block_asm", "+=", "\"\"\"\n        vpermt2d    %zmm29, %zmm25, %zmmNUM;          \n        vpshufb     %zmm26, %zmmNUM, %zmmNUM; \n                \"\"\"", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", "-", "i", ")", ")", "\n", "loads", "+=", "load_block_asm", "\n", "#print(b_indices)", "\n", "", "num_vals", "=", "np", ".", "where", "(", "np", ".", "array", "(", "b_indices", ")", "==", "-", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "#print(num_vals)", "\n", "\n", "# we are going to keep track of the nonzero values in the program access order. This is the array we save to disk as the storage of our sparse matrix.", "\n", "values", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "BLOCK", ")", ":", "\n", "                ", "values", ".", "append", "(", "np", ".", "array", "(", "[", "BA", "[", "b_indices", "[", "i", "]", ",", "a_idx", "+", "k", "]", "for", "i", "in", "range", "(", "num_vals", ")", "]", "+", "[", "0", "for", "j", "in", "range", "(", "4", "-", "num_vals", ")", "]", ")", ".", "astype", "(", "np", ".", "int8", ")", ")", "\n", "", "values", "=", "np", ".", "hstack", "(", "values", ")", "\n", "B_idx", ".", "extend", "(", "b_indices", ")", "\n", "compute_block_asm", "=", "emit_compute_block", "(", "ny_idx", ",", "values", ",", "currloadreg", ")", "\n", "computes", "+=", "compute_block_asm", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "CT", ")", ":", "\n", "                ", "load_block_asm", "=", "emit_load_block", "(", "[", "k", "*", "C_dim", "+", "i", "*", "VEC", "for", "k", "in", "b_indices", "]", ",", "currloadreg", "-", "i", ")", "\n", "loads", "+=", "load_block_asm", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "BLOCK", ")", ":", "\n", "                ", "values", ".", "append", "(", "BA", "[", "b_indices", ",", "a_idx", "+", "i", "]", ")", "\n", "", "values", "=", "np", ".", "hstack", "(", "values", ")", "\n", "\n", "B_idx", ".", "extend", "(", "b_indices", ")", "\n", "compute_block_asm", "=", "emit_compute_block", "(", "ny_idx", ",", "values", ",", "currloadreg", ")", "\n", "computes", "+=", "compute_block_asm", "\n", "\n", "done", ".", "add", "(", "ny_idx", ")", "\n", "\n", "", "", "asm", "+=", "loads", "\n", "asm", "+=", "computes", "\n", "\n", "#print(block,group)", "\n", "global", "AB_block_offs", "\n", "AB_block_offs", ".", "append", "(", "len", "(", "AB_vals", ")", ")", "\n", "\n", "return", "asm", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8_block.get_idx_balanced": [[267, 279], ["range", "range", "code_gen_cpu_int8_block.ny_to_a", "numpy.abs", "B_indices.append", "Ny_indices.append"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.ny_to_a"], ["", "def", "get_idx_balanced", "(", "block", ",", "BA", ",", "A_offset", ",", "block_NY", ",", "B_bounds", "=", "[", "0", ",", "B_dim", "]", ")", ":", "\n", "    ", "BA", "=", "BA", "[", "B_bounds", "[", "0", "]", ":", "B_bounds", "[", "1", "]", "]", "\n", "Ny_indices", "=", "[", "]", "\n", "B_indices", "=", "[", "]", "\n", "for", "B_idx", "in", "range", "(", "B_dim", "//", "B_blocks", ")", ":", "\n", "        ", "for", "ny", "in", "range", "(", "block_NY", ")", ":", "\n", "            ", "A_idx", "=", "ny_to_a", "(", "ny", ",", "0", ",", "block", ",", "A_dim", "=", "A_dim", ",", "A_offset", "=", "A_offset", ")", "\n", "if", "np", ".", "abs", "(", "BA", "[", "B_idx", ",", "A_idx", "]", ")", ">", "EPS", ":", "\n", "                ", "B_indices", ".", "append", "(", "B_idx", "+", "B_bounds", "[", "0", "]", ")", "\n", "Ny_indices", ".", "append", "(", "ny", ")", "\n", "\n", "", "", "", "return", "Ny_indices", ",", "B_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8_block.no_load_balance": [[280, 287], ["range"], "function", ["None"], ["", "def", "no_load_balance", "(", "BA", ")", ":", "\n", "\n", "#assert A_dim % A_blocks == 0", "\n", "    ", "interval", "=", "AT", "\n", "\n", "bounds", "=", "[", "interval", "*", "i", "for", "i", "in", "range", "(", "A_blocks", ")", "]", "+", "[", "A_dim", "]", "\n", "return", "bounds", ",", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8_block.load_balancer2": [[288, 299], ["numpy.sum", "numpy.cumsum", "numpy.diff", "numpy.max", "numpy.argmax", "numpy.abs", "range", "numpy.abs"], "function", ["None"], ["", "def", "load_balancer2", "(", "BA", ")", ":", "\n", "\n", "    ", "total_nnz", "=", "(", "np", ".", "abs", "(", "BA", ")", ">", "EPS", ")", ".", "sum", "(", ")", "\n", "nnz_per_block", "=", "total_nnz", "/", "A_blocks", "\n", "sums", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "BA", ")", ">", "EPS", ",", "axis", "=", "0", ")", "\n", "cs", "=", "np", ".", "cumsum", "(", "sums", ")", "\n", "bounds", "=", "[", "np", ".", "argmax", "(", "cs", ">", "nnz_per_block", "*", "i", ")", "for", "i", "in", "range", "(", "A_blocks", ")", "]", "\n", "bounds", "=", "bounds", "+", "[", "A_dim", "]", "\n", "nnzs", "=", "np", ".", "diff", "(", "bounds", ")", "\n", "NY", "=", "np", ".", "max", "(", "nnzs", ")", "\n", "return", "bounds", ",", "NY", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8_block.gencode": [[302, 432], ["code_gen_cpu_int8_block.no_load_balance", "range", "open().write", "str", "range", "str", "code_gen_cpu_int8_block.get_idx_balanced", "code_gen_cpu_int8_block.generate_from_B", "open", "textwrap.indent", "range", "range", "str", "str", "range", "range", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.no_load_balance", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.get_idx_balanced", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.generate_from_B"], ["", "def", "gencode", "(", "BA", ",", "C_dim", ",", "A_blocks", ",", "C_blocks", ",", "name", "=", "None", ")", ":", "\n", "    ", "asm_program", "=", "\"\"\"\n# -- Begin  _spmm\n        .text\n# mark_begin;\n       .align    16,0x90\n        .globl _spmm\n# --- mm(void *)\n_spmm:\n# parameter 1: %rdi\n..B1.1:                         # Preds ..B1.0\n                                # Execution count [9.00e-01]\n        .cfi_startproc\n..___tag_value__spmm.1:\n..L2:\n                                                          #45.1\n        pushq     %rbp                                          #45.1\n        .cfi_def_cfa_offset 16\n        movq      %rsp, %rbp                                    #45.1\n        .cfi_def_cfa 6, 16\n        .cfi_offset 6, -16\n        andq      $-32, %rsp                                    #45.1\n        subq      $96, %rsp                                     #45.1\n        mov         $0xf0 , %ebx;               \n        kmovb       %ebx, %k1\n        movq      (%rdi), %rcx                                  # the first argument which is packed nonzero values pointer\n        movq      8(%rdi), %rsi                                 # the second argument which is bias values pointer\n        movq      16(%rdi), %r8                                 # the third argument which is input matrix pointer\n        movq      24(%rdi), %rdx                                # the fourth argument which is output matrix pointer\n        movq      32(%rdi), %rbx                                # the scale\n        movl      44(%rdi), %eax                                # end iteration count in the C dimension, useful for multithreading\n        movl      40(%rdi), %edi                                # start iteration count in the C dimension, useful for multithreading\n        decl    %eax\n        decl    %edi\n        imul     $TSZ, %eax, %r9d\n        \n        vpmovzxbd   vpermt2d_control(%rip), % zmm25;            # initialize the control avx vectors which we are going to use for permutes and shuffles\n        vbroadcasti32x4   vpshufb_control(%rip), % zmm26;\n\n    \"\"\"", ".", "replace", "(", "\"TSZ\"", ",", "str", "(", "TSZ", ")", ")", "\n", "\n", "#assert A_dim % A_blocks == 0", "\n", "#assert C_dim % C_blocks == 0", "\n", "B_dim", "=", "BA", ".", "shape", "[", "0", "]", "\n", "\n", "# can try different load balancing schemes here. usually for random sparsity patterns no need to load balance at all.", "\n", "bounds", ",", "NY", "=", "no_load_balance", "(", "BA", ")", "\n", "#bounds, NY = load_balancer2(BA)", "\n", "\n", "assert", "B_dim", "%", "B_blocks", "==", "0", "\n", "block_size", "=", "B_dim", "//", "B_blocks", "\n", "for", "b_block", "in", "range", "(", "B_blocks", ")", ":", "\n", "\n", "# basic block offset. Also used to determine if B_blocks == 0, which means different basic block initialization/termination", "\n", "        ", "bb_offset", "=", "b_block", "*", "A_blocks", "*", "2", "\n", "for", "block", "in", "range", "(", "A_blocks", ")", ":", "\n", "            ", "A_offset", "=", "bounds", "[", "block", "]", "\n", "block_NY", "=", "bounds", "[", "block", "+", "1", "]", "-", "A_offset", "\n", "# if the bounds are fixed, i.e. no load balance, then block_NY should be the same every iteration.", "\n", "\n", "# this gets the indices of the nonzero values in this block", "\n", "Ny_indices", ",", "B_indices", "=", "get_idx_balanced", "(", "block", ",", "BA", ",", "A_offset", ",", "block_NY", ",", "B_bounds", "=", "[", "b_block", "*", "block_size", ",", "(", "b_block", "+", "1", ")", "*", "block_size", "]", ")", "\n", "\n", "# generate the unrolled code for this basic block", "\n", "asm", ",", "done", "=", "generate_from_B", "(", "Ny_indices", ",", "B_indices", ",", "BA", ",", "block", ",", "block_NY", ",", "bb_offset", ",", "A_offset", "=", "A_offset", ")", "\n", "asm_program", "+=", "textwrap", ".", "indent", "(", "asm", ",", "\"\\t\"", ")", "+", "\"\\n\"", "\n", "\n", "# generate the epilogue logic. This is different depending on B_blocks value (should we cache intermediate results or write results with post-op to output)", "\n", "if", "b_block", "==", "B_blocks", "-", "1", ":", "\n", "# any post op implementation goes here. The following sequence implements an optional value and then dequantization.", "\n", "                ", "for", "i", "in", "range", "(", "block_NY", ")", ":", "\n", "                    ", "asm_program", "+=", "\"\\t\\tvbroadcastss \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "4", ")", "+", "\"(%rbx), %zmm20;\\n\"", "\n", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                        ", "if", "RELU", ":", "\n", "                            ", "asm_program", "+=", "\"\\t\\tvmaxsb %zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\", %zmm27, %zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "", "asm_program", "+=", "\"\\t\\tvcvtdq2ps {rn-sae}, %zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\",%zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "asm_program", "+=", "\"\\t\\tvmulps %zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\",%zmm20, %zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "asm_program", "+=", "\"\\t\\tvcvtps2dq {rn-sae}, %zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\",%zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "asm_program", "+=", "\"\\t\\tvpmovdb %zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\",%xmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "\n", "", "asm_program", "+=", "\"\"\"\n                    vinserti32x4 $1,%xmmONE,%zmmZERO,%zmmZERO;\n                    vinserti32x4 $2,%xmmTWO,%zmmZERO,%zmmZERO;\n                    vinserti32x4 $3,%xmmTHREE,%zmmZERO,%zmmZERO;\n                    \"\"\"", ".", "replace", "(", "\"ZERO\"", ",", "str", "(", "i", ")", ")", ".", "replace", "(", "\"ONE\"", ",", "str", "(", "i", "+", "AT", ")", ")", ".", "replace", "(", "\"TWO\"", ",", "str", "(", "i", "+", "2", "*", "AT", ")", ")", ".", "replace", "(", "\"THREE\"", ",", "str", "(", "i", "+", "3", "*", "AT", ")", ")", "\n", "asm_program", "+=", "\"vmovdqu32 %zmm\"", "+", "str", "(", "i", ")", "+", "\", \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", ")", "+", "\"(%rdx,%r11,1);\\n\"", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "block_NY", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                        ", "asm_program", "+=", "\"\\t\\tvmovdqu32 %zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\", \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4);\\n\"", "\n", "\n", "\n", "", "", "", "asm_program", "+=", "\"\"\"\n            cmpl      $END, %r10d;\n            jb  ..B1.NUM;\n            \"\"\"", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "bb_offset", "+", "block", "*", "2", "+", "3", ")", ")", ".", "replace", "(", "\"END\"", ",", "str", "(", "TSZ", "//", "VEC", ")", ")", "\n", "\n", "\n", "", "", "asm_program", "+=", "\"\"\"\n    ..B1.NUM1:                        # Preds ..B1.17\n                                # Execution count [2.80e+01]\n        decl      %eax                                           #44.37\n        subl      $TSZ, %r9d                                    #44.37\n        cmpl      %eax, %edi                                      #44.33\n        jl        ..B1.2        # Prob 96%                      #44.33\n                                # LOE rcx rbx rbp rsi rdi r12 r13 r14 r15 eax dl ymm15\n..B1.NUM2:                        # Preds ..B1.18\n                                # Execution count [1.00e+00]\n        vzeroupper                                              #2398.1\n        movq %rbp, %rsp\n        popq    %rbp        \n        #call      pthread_exit@PLT                              #2416.1\n        ret\n..___tag_value__spmm.13:\n        .align    16,0x90\n                                # LOE\n        .cfi_endproc\n# mark_end;\n        .type   _spmm,@function\n        #.size   _spmm,-_spmm\n        ..LN_spmm.0:\n        .section .rodata\n        .balign 32\n        vpermt2d_control: .byte 0,4,16,20, 1,5,17,21, 2, 6, 18, 22,3,7,19,23 \n        vpshufb_control:  .byte 0,4,8,12,  1,5,9,13, 2,6,10,14, 3,7,11,15  \n# -- End  _spmm\n\n    \"\"\"", ".", "replace", "(", "\"TSZ\"", ",", "str", "(", "TSZ", ")", ")", ".", "replace", "(", "\"CBLOCKS\"", ",", "str", "(", "C_blocks", ")", ")", ".", "replace", "(", "\"NUM1\"", ",", "str", "(", "B_blocks", "*", "A_blocks", "*", "2", "+", "2", ")", ")", ".", "replace", "(", "\"NUM2\"", ",", "str", "(", "B_blocks", "*", "A_blocks", "*", "2", "+", "3", ")", ")", "\n", "\n", "open", "(", "outfile_asm", ",", "\"w\"", ")", ".", "write", "(", "asm_program", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.fastsparse.SpMM.__init__": [[21, 29], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "matrix", ",", "C_dim", ",", "bias", "=", "None", ")", ":", "\n", "        ", "self", ".", "A_dim", "=", "matrix", ".", "shape", "[", "0", "]", "\n", "self", ".", "B_dim", "=", "matrix", ".", "shape", "[", "1", "]", "\n", "self", ".", "matrix", "=", "matrix", "\n", "self", ".", "C_dim", "=", "C_dim", "\n", "self", ".", "bias", "=", "bias", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "self", ".", "bias", ")", "==", "self", ".", "A_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.fastsparse.SpMM.compile": [[30, 107], ["fastsparse.SpMM.matrix.transpose", "BA.squeeze.squeeze.squeeze", "numpy.unique", "len", "code_gen_cpu.gencode", "numpy.array", "numpy.save", "os.system", "os.system", "os.system", "os.system", "CDLL", "print", "open().read", "numpy.array", "numpy.save", "numpy.ones", "open().read", "numpy.where", "range", "numpy.array", "open", "len", "open"], "methods", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.gencode"], ["", "", "def", "compile", "(", "self", ",", "name", "=", "\"spmm\"", ",", "val_name", "=", "\"vals.npy\"", ",", "bias_name", "=", "\"bias.npy\"", ",", "AT", "=", "6", ",", "CT", "=", "2", ",", "B_blocks", "=", "1", ",", "C_blocks", "=", "1", ",", "no_relu", "=", "True", ",", "epi", "=", "\"NONE\"", ")", ":", "\n", "\n", "        ", "import", "code_gen_cpu", "\n", "if", "not", "\"avx2\"", "in", "open", "(", "\"/proc/cpuinfo\"", ",", "\"r\"", ")", ".", "read", "(", ")", ":", "\n", "            ", "print", "(", "\"We need at least AVX2.\"", ")", "\n", "raise", "Exception", "\n", "", "if", "\"avx512\"", "in", "open", "(", "\"/proc/cpuinfo\"", ",", "\"r\"", ")", ".", "read", "(", ")", ":", "\n", "            ", "code_gen_cpu", ".", "AVX512", "=", "True", "\n", "code_gen_cpu", ".", "VEC", "=", "16", "\n", "", "else", ":", "\n", "            ", "code_gen_cpu", ".", "AVX512", "=", "False", "\n", "code_gen_cpu", ".", "VEC", "=", "8", "\n", "\n", "", "code_gen_cpu", ".", "FUNC_NAME", "=", "name", "\n", "code_gen_cpu", ".", "EPI", "=", "epi", "\n", "code_gen_cpu", ".", "IN_FORMAT", "=", "\"NCHW\"", "\n", "code_gen_cpu", ".", "OUT_FORMAT", "=", "\"NCHW\"", "\n", "code_gen_cpu", ".", "GY", "=", "1", "\n", "code_gen_cpu", ".", "FUSE_END", "=", "False", "\n", "code_gen_cpu", ".", "NO_RELU", "=", "no_relu", "\n", "code_gen_cpu", ".", "A_dim", "=", "self", ".", "A_dim", "\n", "code_gen_cpu", ".", "B_dim", "=", "self", ".", "B_dim", "\n", "code_gen_cpu", ".", "C_dim", "=", "self", ".", "C_dim", "\n", "code_gen_cpu", ".", "AT", "=", "AT", "\n", "code_gen_cpu", ".", "CT", "=", "CT", "\n", "code_gen_cpu", ".", "B_blocks", "=", "B_blocks", "\n", "code_gen_cpu", ".", "C_blocks", "=", "C_blocks", "\n", "code_gen_cpu", ".", "outfile", "=", "\"out.cpp\"", "\n", "code_gen_cpu", ".", "outfile_asm", "=", "\"out.s\"", "\n", "code_gen_cpu", ".", "bias", "=", "self", ".", "bias", "\n", "assert", "self", ".", "C_dim", "%", "C_blocks", "==", "0", "\n", "\n", "code_gen_cpu", ".", "TSZ", "=", "self", ".", "C_dim", "//", "C_blocks", "if", "self", ".", "C_dim", "%", "C_blocks", "==", "0", "else", "self", ".", "C_dim", "//", "C_blocks", "+", "1", "\n", "code_gen_cpu", ".", "X86", "=", "True", "\n", "code_gen_cpu", ".", "ARM", "=", "False", "\n", "NRS", "=", "False", "\n", "\n", "BA", "=", "self", ".", "matrix", ".", "transpose", "(", ")", "\n", "#print(BA.shape)", "\n", "BA", "=", "BA", ".", "squeeze", "(", ")", "\n", "\n", "code_gen_cpu", ".", "AB_vals", "=", "[", "]", "\n", "code_gen_cpu", ".", "A_idx", "=", "[", "]", "\n", "code_gen_cpu", ".", "B_idx", "=", "[", "]", "\n", "code_gen_cpu", ".", "AB_block_offs", "=", "[", "0", "]", "\n", "#global off", "\n", "code_gen_cpu", ".", "off", "=", "0", "\n", "\n", "\"\"\"\n        We are going to redo BA here to remove some empty rows\n        \"\"\"", "\n", "\n", "nnz_cols", "=", "np", ".", "unique", "(", "np", ".", "where", "(", "BA", ")", "[", "1", "]", ")", "\n", "code_gen_cpu", ".", "mapping", "=", "{", "i", ":", "nnz_cols", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "nnz_cols", ")", ")", "}", "\n", "#print(mapping)", "\n", "BA", "=", "BA", "[", ":", ",", "nnz_cols", "]", "\n", "code_gen_cpu", ".", "A_dim", "=", "len", "(", "nnz_cols", ")", "\n", "\n", "if", "code_gen_cpu", ".", "A_dim", "%", "AT", "==", "0", ":", "\n", "            ", "A_blocks", "=", "code_gen_cpu", ".", "A_dim", "//", "AT", "\n", "", "else", ":", "\n", "            ", "A_blocks", "=", "code_gen_cpu", ".", "A_dim", "//", "AT", "+", "1", "\n", "\n", "", "code_gen_cpu", ".", "gencode", "(", "BA", ",", "self", ".", "C_dim", ",", "A_blocks", ",", "C_blocks", ",", "name", "=", "\"bump\"", ")", "\n", "\n", "self", ".", "AB_vals", "=", "np", ".", "array", "(", "code_gen_cpu", ".", "AB_vals", ")", "\n", "np", ".", "save", "(", "val_name", ",", "np", ".", "array", "(", "self", ".", "AB_vals", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "np", ".", "save", "(", "bias_name", ",", "np", ".", "array", "(", "self", ".", "bias", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "np", ".", "ones", "(", "(", "self", ".", "A_dim", ")", ")", "\n", "#np.save(bias_name,np.array(self.bias))", "\n", "", "os", ".", "system", "(", "\"gcc -c out.s\"", ")", "\n", "os", ".", "system", "(", "\"ar rvs \"", "+", "name", "+", "\".a out.o >/dev/null 2>&1\"", ")", "\n", "os", ".", "system", "(", "\"gcc -shared out.s -o \"", "+", "name", "+", "\".so \"", ")", "\n", "os", ".", "system", "(", "\"rm out.o out.s out.cpp\"", ")", "\n", "self", ".", "libc", "=", "CDLL", "(", "name", "+", "\".so\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.fastsparse.SpMM.load": [[108, 118], ["CDLL", "numpy.load", "numpy.load", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.fastsparse.SpMM.load", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.fastsparse.SpMM.load"], ["", "def", "load", "(", "self", ",", "sl_name", ",", "vec_name", ",", "bias_name", "=", "None", ")", ":", "\n", "        ", "self", ".", "libc", "=", "CDLL", "(", "sl_name", ")", "\n", "self", ".", "AB_vals", "=", "np", ".", "load", "(", "vec_name", ")", "\n", "assert", "self", ".", "AB_vals", ".", "dtype", "==", "np", ".", "float32", "\n", "if", "bias_name", ":", "\n", "            ", "self", ".", "bias", "=", "np", ".", "load", "(", "bias_name", ")", "\n", "", "else", ":", "\n", "# we will not be using the values in the kernel anyways", "\n", "            ", "self", ".", "bias", "=", "np", ".", "ones", "(", "(", "self", ".", "A_dim", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "bias", ")", "==", "self", ".", "A_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.fastsparse.SpMM.run": [[121, 131], ["numpy.empty", "pointer", "fastsparse.SpMM.libc._spmm", "fastsparse.Input"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "BC", ")", ":", "\n", "        ", "self", ".", "AC", "=", "np", ".", "empty", "(", "(", "self", ".", "A_dim", ",", "self", ".", "C_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "w", "=", "self", ".", "AC", ".", "ctypes", ".", "data", "\n", "z", "=", "BC", ".", "ctypes", ".", "data", "\n", "x", "=", "self", ".", "AB_vals", ".", "ctypes", ".", "data", "\n", "AB_bias", "=", "self", ".", "bias", "\n", "y", "=", "AB_bias", ".", "ctypes", ".", "data", "\n", "self", ".", "arg", "=", "pointer", "(", "Input", "(", "x", ",", "y", ",", "z", ",", "w", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "libc", ".", "_spmm", "(", "self", ".", "arg", ")", "\n", "return", "self", ".", "AC", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.fastsparse.SpMM.ref_run": [[132, 134], ["numpy.dot().astype", "numpy.dot"], "methods", ["None"], ["", "def", "ref_run", "(", "self", ",", "BC", ")", ":", "\n", "        ", "return", "np", ".", "dot", "(", "self", ".", "matrix", ",", "BC", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8.emit_load_block": [[124, 128], ["LOAD_CACHE_ASM.replace().replace().replace().replace().replace", "str", "LOAD_CACHE_ASM.replace().replace().replace().replace", "str", "LOAD_CACHE_ASM.replace().replace().replace", "str", "LOAD_CACHE_ASM.replace().replace", "str", "LOAD_CACHE_ASM.replace", "str"], "function", ["None"], ["", "def", "emit_load_block", "(", "index", ",", "currloadreg", ")", ":", "\n", "\n", "    ", "return", "LOAD_CACHE_ASM", ".", "replace", "(", "\"IDX1\"", ",", "str", "(", "index", "[", "0", "]", ")", ")", ".", "replace", "(", "\"IDX2\"", ",", "str", "(", "index", "[", "1", "]", ")", ")", ".", "replace", "(", "\"IDX3\"", ",", "str", "(", "index", "[", "2", "]", ")", ")", ".", "replace", "(", "\"IDX4\"", ",", "str", "(", "index", "[", "3", "]", ")", ")", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8.emit_compute_block": [[129, 140], ["LOAD_WEIGHT_ASM.replace", "range", "AB_vals.extend", "A_idx.extend", "str", "MAIN_PROGRAM_ASM.replace().replace", "str", "MAIN_PROGRAM_ASM.replace", "str"], "function", ["None"], ["", "def", "emit_compute_block", "(", "Ny_idx", ",", "vals", ",", "currloadreg", ",", "virg", "=", "False", ")", ":", "\n", "    ", "global", "off", "\n", "new_block_asm", "=", "LOAD_WEIGHT_ASM", ".", "replace", "(", "\"OFF\"", ",", "str", "(", "off", "*", "4", ")", ")", "\n", "for", "i", "in", "range", "(", "CT", ")", ":", "\n", "        ", "new_block_asm", "+=", "MAIN_PROGRAM_ASM", ".", "replace", "(", "\"TAR\"", ",", "str", "(", "Ny_idx", "+", "i", "*", "AT", ")", ")", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", "-", "i", ")", ")", "\n", "", "global", "AB_vals", "\n", "AB_vals", ".", "extend", "(", "vals", ")", "\n", "global", "A_idx", "\n", "A_idx", ".", "extend", "(", "[", "Ny_idx", "]", "*", "4", ")", "\n", "off", "+=", "1", "\n", "return", "new_block_asm", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8.ny_to_a": [[142, 146], ["None"], "function", ["None"], ["", "def", "ny_to_a", "(", "ny_idx", ",", "groupId", ",", "blockId", ",", "A_dim", "=", "None", ",", "A_offset", "=", "None", ")", ":", "\n", "    ", "if", "A_offset", "is", "None", ":", "\n", "        ", "A_offset", "=", "blockId", "*", "(", "AT", ")", "\n", "", "return", "A_offset", "+", "ny_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8.generate_from_B": [[148, 288], ["set", "zip", "padded_Ny_indices.extend", "padded_B_indices.extend", "range", "AB_block_offs.append", "str", "range", "range", "len", "code_gen_cpu_int8.ny_to_a", "len", "range", "range", "padded_Ny_indices.extend", "padded_B_indices.extend", "padded_Ny_indices.append", "padded_B_indices.append", "padded_Ny_indices.append", "padded_B_indices.append", "range", "numpy.array().astype", "B_idx.extend", "code_gen_cpu_int8.emit_compute_block", "range", "B_idx.extend", "code_gen_cpu_int8.emit_compute_block", "set.add", "str", "code_gen_cpu_int8.emit_load_block", "str", "str", "numpy.where", "numpy.array", "str", "str", "str", "str", "str", "str", "str", "str", "str", "numpy.array", "str", "str", "str", "range", "range", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.ny_to_a", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.emit_compute_block", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.emit_compute_block", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.emit_load_block"], ["", "def", "generate_from_B", "(", "Ny_indices", ",", "B_indices", ",", "BA", ",", "block", ",", "NY", ",", "BB_offset", ",", "GY", "=", "None", ",", "A_offset", "=", "None", ")", ":", "\n", "\n", "    ", "program", "=", "\"\"", "\n", "\n", "asm", "=", "\"\"\"\n    ..B1.NUM1:\n    xorl    %r10d, %r10d;\n    ..B1.NUM2:\n    imul      $16,  %r10d, %r11d;\n    add       %r9d, %r11d;\n    movslq  %r11d, %r11;\n    add     $CT,    %r10d;\n    \n    \"\"\"", ".", "replace", "(", "\"NUM1\"", ",", "str", "(", "BB_offset", "+", "block", "*", "2", "+", "2", ")", ")", ".", "replace", "(", "\"NUM2\"", ",", "str", "(", "BB_offset", "+", "block", "*", "2", "+", "3", ")", ")", ".", "replace", "(", "\"STRIDE\"", ",", "str", "(", "8", ")", ")", ".", "replace", "(", "\"CT\"", ",", "str", "(", "CT", ")", ")", "\n", "\n", "\n", "#print(A_offset)", "\n", "if", "input_file_bias", "is", "not", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "NY", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                ", "if", "BB_offset", ">", "0", ":", "\n", "                    ", "asm", "+=", "\"\\t\\tvmovups \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4)\"", "+", "(", "\",%zmm\"", "if", "AVX512", "else", "\",%ymm\"", ")", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "", "else", ":", "\n", "                    ", "asm", "+=", "\"\\tvpbroadcastd \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "4", ")", "+", "\"(%rsi), %zmm\"", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\";\\n\"", "\n", "\n", "#asm += \"\\tvpbroadcastd \" + \"%xmm\" + str(i + AT * j) + (\", %zmm\" if AVX512 else \"(%rsi), %ymm\") + str(i + AT * j) + \";\\n\"", "\n", "", "", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "NY", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                ", "if", "BB_offset", ">", "0", ":", "\n", "                    ", "asm", "+=", "\"\\t\\tvmovups \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4)\"", "+", "(", "\",%zmm\"", "if", "AVX512", "else", "\",%ymm\"", ")", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "", "else", ":", "\n", "                    ", "asm", "+=", "\"\\tvxorps \"", "+", "(", "\"%zmm\"", "if", "AVX512", "else", "\"%ymm\"", ")", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\",\"", "+", "(", "\"%zmm\"", "if", "AVX512", "else", "\"%ymm\"", ")", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\",\"", "+", "(", "\"%zmm\"", "if", "AVX512", "else", "\"%ymm\"", ")", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\";\\n\"", "\n", "\n", "", "", "", "", "done", "=", "set", "(", ")", "\n", "loads", "=", "\"\"", "\n", "computes", "=", "\"\"", "\n", "\n", "if", "AVX512", ":", "\n", "        ", "TOK", "=", "24", "\n", "", "else", ":", "\n", "        ", "TOK", "=", "13", "\n", "", "currloadreg", "=", "TOK", "\n", "# pad end of the zipped list", "\n", "\n", "padded_Ny_indices", "=", "[", "]", "\n", "padded_B_indices", "=", "[", "]", "\n", "\n", "counter", "=", "0", "\n", "old_B_idx", "=", "-", "1", "\n", "for", "ny_idx", ",", "b_idx", "in", "zip", "(", "Ny_indices", "[", "0", "]", ",", "B_indices", "[", "0", "]", ")", ":", "\n", "        ", "assert", "ny_idx", "==", "0", "# for now. We are going to handle AT for quantized at a later date if at all.", "\n", "if", "(", "b_idx", "<", "ny_idx", ")", ":", "\n", "            ", "pad_len", "=", "(", "(", "counter", "-", "1", ")", "//", "4", "+", "1", ")", "*", "4", "-", "counter", "\n", "padded_Ny_indices", ".", "extend", "(", "[", "-", "1", "]", "*", "pad_len", ")", "\n", "padded_B_indices", ".", "extend", "(", "[", "-", "1", "]", "*", "pad_len", ")", "\n", "padded_Ny_indices", ".", "append", "(", "ny_idx", ")", "\n", "padded_B_indices", ".", "append", "(", "b_idx", ")", "\n", "counter", "=", "1", "\n", "", "else", ":", "\n", "            ", "padded_Ny_indices", ".", "append", "(", "ny_idx", ")", "\n", "padded_B_indices", ".", "append", "(", "b_idx", ")", "\n", "counter", "+=", "1", "\n", "", "", "pad_len", "=", "(", "(", "counter", "-", "1", ")", "//", "4", "+", "1", ")", "*", "4", "-", "counter", "\n", "padded_Ny_indices", ".", "extend", "(", "[", "-", "1", "]", "*", "pad_len", ")", "\n", "padded_B_indices", ".", "extend", "(", "[", "-", "1", "]", "*", "pad_len", ")", "\n", "#print(padded_B_indices,len(padded_B_indices))", "\n", "#for ny_idx, b_idx in zip(padded_Ny_indices[0],padded_B_indices[0]):", "\n", "for", "pos", "in", "range", "(", "0", ",", "len", "(", "padded_Ny_indices", ")", ",", "4", ")", ":", "\n", "        ", "b_indices", "=", "padded_B_indices", "[", "pos", ":", "pos", "+", "4", "]", "\n", "currloadreg", "=", "TOK", "#(currloadreg - TOK + 1) % 6 + TOK", "\n", "asm", "+=", "loads", "\n", "asm", "+=", "computes", "\n", "loads", "=", "\"\"", "\n", "computes", "=", "\"\"", "\n", "ny_idx", "=", "0", "\n", "a_idx", "=", "ny_to_a", "(", "ny_idx", ",", "0", ",", "block", ",", "A_dim", "=", "A_dim", ",", "A_offset", "=", "A_offset", ")", "\n", "global", "B_idx", "\n", "\n", "if", "-", "1", "in", "b_indices", ":", "\n", "            ", "assert", "(", "b_indices", "[", "0", "]", "!=", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "CT", ")", ":", "\n", "                ", "load_block_asm", "=", "\"\"\"\n        vxorps      %zmm29, %zmm29, % zmm29;\n        vxorps      %zmmNUM, %zmmNUM, %zmmNUM;\n        vmovdqu8    IDX1(%r8,%r11,1), %xmmNUM; \n                \"\"\"", ".", "replace", "(", "\"IDX1\"", ",", "str", "(", "b_indices", "[", "0", "]", "*", "C_dim", "+", "i", "*", "VEC", ")", ")", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", "-", "i", ")", ")", "\n", "if", "b_indices", "[", "2", "]", "!=", "-", "1", ":", "\n", "                    ", "load_block_asm", "+=", "\"\"\"\n        vmovdqu8     IDX3(%r8,%r11,1), %xmm29;                  \n                    \"\"\"", ".", "replace", "(", "\"IDX3\"", ",", "str", "(", "b_indices", "[", "2", "]", "*", "C_dim", "+", "i", "*", "VEC", ")", ")", "\n", "", "if", "b_indices", "[", "1", "]", "!=", "-", "1", ":", "\n", "                    ", "load_block_asm", "+=", "\"\"\"\n        vbroadcasti32x4  IDX2(%r8,%r11,1),%ymmNUM {%k1};               \n                    \"\"\"", ".", "replace", "(", "\"IDX2\"", ",", "str", "(", "b_indices", "[", "1", "]", "*", "C_dim", "+", "i", "*", "VEC", ")", ")", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", "-", "i", ")", ")", "\n", "", "if", "b_indices", "[", "3", "]", "!=", "-", "1", ":", "\n", "                    ", "load_block_asm", "+=", "\"\"\"\n        vbroadcasti32x4  IDX3(%r8,%r11,1),%ymm29 {%k1};               \n                    \"\"\"", ".", "replace", "(", "\"IDX3\"", ",", "str", "(", "b_indices", "[", "3", "]", "*", "C_dim", "+", "i", "*", "VEC", ")", ")", "\n", "", "load_block_asm", "+=", "\"\"\"\n        vpermt2d    %zmm29, %zmm27, %zmmNUM;          \n        vpshufb     %zmm28, %zmmNUM, %zmmNUM; \n                \"\"\"", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", "-", "i", ")", ")", "\n", "loads", "+=", "load_block_asm", "\n", "#print(b_indices)", "\n", "", "num_vals", "=", "np", ".", "where", "(", "np", ".", "array", "(", "b_indices", ")", "==", "-", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "#print(num_vals)", "\n", "values", "=", "np", ".", "array", "(", "[", "BA", "[", "b_indices", "[", "i", "]", ",", "a_idx", "]", "for", "i", "in", "range", "(", "num_vals", ")", "]", "+", "[", "0", "for", "j", "in", "range", "(", "4", "-", "num_vals", ")", "]", ")", ".", "astype", "(", "np", ".", "int8", ")", "\n", "#print(values)", "\n", "B_idx", ".", "extend", "(", "b_indices", ")", "\n", "compute_block_asm", "=", "emit_compute_block", "(", "ny_idx", ",", "values", ",", "currloadreg", ",", "virg", "=", "ny_idx", "not", "in", "done", ")", "\n", "computes", "+=", "compute_block_asm", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "CT", ")", ":", "\n", "                ", "load_block_asm", "=", "emit_load_block", "(", "[", "k", "*", "C_dim", "+", "i", "*", "VEC", "for", "k", "in", "b_indices", "]", ",", "currloadreg", "-", "i", ")", "\n", "loads", "+=", "load_block_asm", "\n", "\n", "", "values", "=", "BA", "[", "b_indices", ",", "a_idx", "]", "\n", "B_idx", ".", "extend", "(", "b_indices", ")", "\n", "compute_block_asm", "=", "emit_compute_block", "(", "ny_idx", ",", "values", ",", "currloadreg", ",", "virg", "=", "ny_idx", "not", "in", "done", ")", "\n", "computes", "+=", "compute_block_asm", "\n", "\n", "done", ".", "add", "(", "ny_idx", ")", "\n", "\n", "", "", "asm", "+=", "loads", "\n", "asm", "+=", "computes", "\n", "\n", "\n", "\n", "\n", "\n", "#print(block,group)", "\n", "#program += GROUP_CONTROL_END + \"\\n\"", "\n", "global", "AB_block_offs", "\n", "AB_block_offs", ".", "append", "(", "len", "(", "AB_vals", ")", ")", "\n", "\n", "return", "program", ",", "asm", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8.get_idx_balanced": [[290, 312], ["numpy.sum", "range", "range", "range", "range", "numpy.abs", "code_gen_cpu_int8.ny_to_a", "numpy.abs", "B_indices[].append", "Ny_indices[].append"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.ny_to_a"], ["", "def", "get_idx_balanced", "(", "block", ",", "BA", ",", "A_offset", ",", "block_NY", ",", "B_bounds", "=", "[", "0", ",", "B_dim", "]", ",", "GY", "=", "None", ")", ":", "\n", "\n", "    ", "BA", "=", "BA", "[", "B_bounds", "[", "0", "]", ":", "B_bounds", "[", "1", "]", "]", "\n", "Ny_indices", "=", "[", "[", "]", "for", "i", "in", "range", "(", "GY", ")", "]", "\n", "B_indices", "=", "[", "[", "]", "for", "i", "in", "range", "(", "GY", ")", "]", "\n", "nnz", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "BA", "[", ":", ",", "A_offset", ":", "A_offset", "+", "block_NY", "]", ")", ">", "EPS", ")", "\n", "nnz_per_group", "=", "nnz", "//", "GY", "\n", "curr_group", "=", "0", "\n", "curr_nnz", "=", "0", "\n", "for", "B_idx", "in", "range", "(", "B_dim", "//", "B_blocks", ")", ":", "\n", "        ", "for", "ny", "in", "range", "(", "block_NY", ")", ":", "\n", "            ", "assert", "curr_group", "<", "GY", "\n", "A_idx", "=", "ny_to_a", "(", "ny", ",", "curr_group", ",", "block", ",", "A_dim", "=", "A_dim", ",", "A_offset", "=", "A_offset", ")", "\n", "if", "np", ".", "abs", "(", "BA", "[", "B_idx", ",", "A_idx", "]", ")", ">", "EPS", ":", "\n", "                ", "B_indices", "[", "curr_group", "]", ".", "append", "(", "B_idx", "+", "B_bounds", "[", "0", "]", ")", "\n", "Ny_indices", "[", "curr_group", "]", ".", "append", "(", "ny", ")", "\n", "curr_nnz", "+=", "1", "\n", "", "if", "curr_nnz", ">", "nnz_per_group", ":", "\n", "                ", "curr_group", "+=", "1", "\n", "curr_nnz", "=", "0", "\n", "\n", "", "", "", "return", "Ny_indices", ",", "B_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8.no_load_balance": [[313, 321], ["range"], "function", ["None"], ["", "def", "no_load_balance", "(", "BA", ")", ":", "\n", "\n", "#assert A_dim % A_blocks == 0", "\n", "    ", "interval", "=", "AT", "\n", "\n", "bounds", "=", "[", "interval", "*", "i", "for", "i", "in", "range", "(", "A_blocks", ")", "]", "+", "[", "A_dim", "]", "\n", "\n", "return", "bounds", ",", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8.load_balancer2": [[322, 333], ["numpy.sum", "numpy.cumsum", "numpy.diff", "numpy.max", "numpy.argmax", "numpy.abs", "range", "numpy.abs"], "function", ["None"], ["", "def", "load_balancer2", "(", "BA", ")", ":", "\n", "\n", "    ", "total_nnz", "=", "(", "np", ".", "abs", "(", "BA", ")", ">", "EPS", ")", ".", "sum", "(", ")", "\n", "nnz_per_block", "=", "total_nnz", "/", "A_blocks", "\n", "sums", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "BA", ")", ">", "EPS", ",", "axis", "=", "0", ")", "\n", "cs", "=", "np", ".", "cumsum", "(", "sums", ")", "\n", "bounds", "=", "[", "np", ".", "argmax", "(", "cs", ">", "nnz_per_block", "*", "i", ")", "for", "i", "in", "range", "(", "A_blocks", ")", "]", "\n", "bounds", "=", "bounds", "+", "[", "A_dim", "]", "\n", "nnzs", "=", "np", ".", "diff", "(", "bounds", ")", "\n", "NY", "=", "np", ".", "max", "(", "nnzs", ")", "\n", "return", "bounds", ",", "NY", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu_int8.gencode": [[336, 491], ["code_gen_cpu_int8.no_load_balance", "range", "END_NONFUSED.replace", "open().write", "open().write", "START_NONFUSED.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "range", "program.replace", "str", "asm_program.replace.replace", "str", "code_gen_cpu_int8.get_idx_balanced", "code_gen_cpu_int8.generate_from_B", "open", "str", "open", "str", "START_NONFUSED.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "int", "BLOCK_CONTROL_START.replace().replace", "textwrap.indent", "textwrap.indent", "str", "str", "str", "range", "BLOCK_END_NHWC.replace().replace().replace().replace().replace().replace().replace", "str", "START_NONFUSED.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "int", "BLOCK_CONTROL_START.replace", "print", "BLOCK_END_REDUCTION.replace().replace().replace", "range", "str", "range", "range", "str", "str", "str", "str", "str", "str", "range", "range", "range", "BLOCK_END_NHWC.replace().replace().replace().replace().replace().replace", "START_NONFUSED.replace().replace().replace().replace().replace().replace().replace().replace().replace", "BLOCK_END_REDUCTION.replace().replace", "str", "str", "str", "str", "str", "str", "str", "str", "BLOCK_END_NHWC.replace().replace().replace().replace().replace", "START_NONFUSED.replace().replace().replace().replace().replace().replace().replace().replace", "BLOCK_END_REDUCTION.replace", "str", "str", "str", "str", "str", "str", "str", "str", "BLOCK_END_NHWC.replace().replace().replace().replace", "START_NONFUSED.replace().replace().replace().replace().replace().replace().replace", "str", "str", "str", "str", "str", "BLOCK_END_NHWC.replace().replace().replace", "START_NONFUSED.replace().replace().replace().replace().replace().replace", "str", "str", "BLOCK_END_NHWC.replace().replace", "START_NONFUSED.replace().replace().replace().replace().replace", "str", "str", "BLOCK_END_NHWC.replace", "START_NONFUSED.replace().replace().replace().replace", "str", "str", "START_NONFUSED.replace().replace().replace", "str", "START_NONFUSED.replace().replace", "START_NONFUSED.replace"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.no_load_balance", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.get_idx_balanced", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.generate_from_B"], ["", "def", "gencode", "(", "BA", ",", "outfile", ",", "C_dim", ",", "A_blocks", ",", "C_blocks", ",", "GY", ",", "name", "=", "None", ")", ":", "\n", "    ", "program", "=", "\"\"", "\n", "asm_program", "=", "\"\"\"\n# -- Begin  _spmm\n        .text\n# mark_begin;\n       .align    16,0x90\n        .globl _spmm\n# --- mm(void *)\n_spmm:\n# parameter 1: %rdi\n..B1.1:                         # Preds ..B1.0\n                                # Execution count [9.00e-01]\n        .cfi_startproc\n..___tag_value__spmm.1:\n..L2:\n                                                          #45.1\n        pushq     %rbp                                          #45.1\n        .cfi_def_cfa_offset 16\n        movq      %rsp, %rbp                                    #45.1\n        .cfi_def_cfa 6, 16\n        .cfi_offset 6, -16\n        andq      $-32, %rsp                                    #45.1\n        subq      $96, %rsp                                     #45.1\n        movq      (%rdi), %rcx                                  #47.38\n        movq      8(%rdi), %rsi                                 #48.46\n        movq      16(%rdi), %r8                                 #49.41\n        movq      24(%rdi), %rdx                                #50.22\n        movl      36(%rdi), %eax\n        movl      32(%rdi), %edi                                #51.21\n        vxorps    ZERO, ZERO, ZERO                           #59.19\n        decl    %eax\n        decl    %edi\n        imul     $TSZ, %eax, %r9d\n        mov         $0xf0 , %ebx;               \n        kmovb       %ebx, %k1\n        vpmovzxbd   vpermt2d_control(%rip), % zmm27;\n        vbroadcasti32x4   vpshufb_control(%rip), % zmm28;\n\n\n\n    \"\"\"", ".", "replace", "(", "\"BOUND\"", ",", "str", "(", "C_blocks", "//", "THREADS", ")", ")", ".", "replace", "(", "\"TSZ\"", ",", "str", "(", "TSZ", ")", ")", ".", "replace", "(", "\"ZERO\"", ",", "\"%zmm30\"", "if", "AVX512", "else", "\"%ymm14\"", ")", "\n", "\n", "#assert A_dim % A_blocks == 0", "\n", "#assert C_dim % C_blocks == 0", "\n", "B_dim", "=", "BA", ".", "shape", "[", "0", "]", "\n", "\n", "# if IN_FORMAT == \"NCHW\" and OUT_FORMAT == \"NCHW\":", "\n", "#     bounds, NY = load_balancer2(BA)", "\n", "# else:", "\n", "bounds", ",", "NY", "=", "no_load_balance", "(", "BA", ")", "\n", "\n", "program", "+=", "START_NONFUSED", ".", "replace", "(", "\"OUTPUT_FORMAT\"", ",", "OUT_FORMAT", ")", ".", "replace", "(", "\"INPUT_FORMAT\"", ",", "IN_FORMAT", ")", ".", "replace", "(", "\"Ny\"", ",", "str", "(", "NY", ")", ")", ".", "replace", "(", "\"GY\"", ",", "str", "(", "GY", ")", ")", ".", "replace", "(", "\"A_dim\"", ",", "str", "(", "A_dim", ")", ")", ".", "replace", "(", "\n", "\"C_dim\"", ",", "str", "(", "C_dim", ")", ")", ".", "replace", "(", "\"B_dim\"", ",", "str", "(", "B_dim", ")", ")", ".", "replace", "(", "\"A_BLOCKS\"", ",", "str", "(", "A_blocks", ")", ")", ".", "replace", "(", "\"C_BLOCKS\"", ",", "str", "(", "C_blocks", ")", ")", ".", "replace", "(", "\"BOUND\"", ",", "str", "(", "C_blocks", "//", "4", ")", ")", ".", "replace", "(", "\"X86_DEF\"", ",", "str", "(", "int", "(", "X86", ")", ")", ")", ".", "replace", "(", "\"ARM_DEF\"", ",", "str", "(", "int", "(", "ARM", ")", ")", ")", "+", "\"\\n\"", "\n", "\n", "assert", "B_dim", "%", "B_blocks", "==", "0", "\n", "block_size", "=", "B_dim", "//", "B_blocks", "\n", "for", "b_block", "in", "range", "(", "B_blocks", ")", ":", "\n", "        ", "bb_offset", "=", "b_block", "*", "A_blocks", "*", "2", "\n", "for", "block", "in", "range", "(", "A_blocks", ")", ":", "\n", "            ", "A_offset", "=", "bounds", "[", "block", "]", "\n", "block_NY", "=", "bounds", "[", "block", "+", "1", "]", "-", "A_offset", "\n", "program", "+=", "BLOCK_CONTROL_START", ".", "replace", "(", "\"BLOCK\"", ",", "str", "(", "block", ")", ")", ".", "replace", "(", "\"Ny\"", ",", "str", "(", "block_NY", ")", ")", "+", "\"\\n\"", "\n", "\n", "\n", "Ny_indices", ",", "B_indices", "=", "get_idx_balanced", "(", "block", ",", "BA", ",", "A_offset", ",", "block_NY", ",", "B_bounds", "=", "[", "b_block", "*", "block_size", ",", "(", "b_block", "+", "1", ")", "*", "block_size", "]", ",", "GY", "=", "GY", ")", "\n", "#import pdb;pdb.set_trace()", "\n", "ccode", ",", "asm", ",", "done", "=", "generate_from_B", "(", "Ny_indices", ",", "B_indices", ",", "BA", ",", "block", ",", "block_NY", ",", "bb_offset", ",", "GY", "=", "GY", ",", "A_offset", "=", "A_offset", ")", "\n", "#ccode = generate_c_stem(block_NY)", "\n", "\n", "program", "+=", "textwrap", ".", "indent", "(", "ccode", ",", "\"\\t\"", ")", "+", "\"\\n\"", "\n", "asm_program", "+=", "textwrap", ".", "indent", "(", "asm", ",", "\"\\t\"", ")", "+", "\"\\n\"", "\n", "if", "OUT_FORMAT", "==", "\"NCHW\"", ":", "\n", "                ", "if", "FUSE_END", ":", "\n", "                    ", "if", "GY", ">", "1", ":", "\n", "                        ", "print", "(", "\"End fusion strategy not valid.\"", ")", "\n", "", "for", "i", "in", "range", "(", "block_NY", ")", ":", "\n", "                        ", "program", "+=", "BLOCK_END_REDUCTION", ".", "replace", "(", "\"OFFSET\"", ",", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", ")", ")", ".", "replace", "(", "\"IDX\"", ",", "str", "(", "i", ")", ")", ".", "replace", "(", "\"BIAS\"", ",", "str", "(", "A_offset", "+", "i", ")", ")", "\n", "if", "not", "NO_RELU", ":", "\n", "                            ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                                ", "asm_program", "+=", "\"\\t\\tvmaxps %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "(", "\", %zmm30,\"", "if", "AVX512", "else", "\", %ymm14,\"", ")", "+", "\"%ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "", "", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                            ", "asm_program", "+=", "\"\\t\\tvmovdqu32 %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\", \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4);\\n\"", "\n", "", "", "asm_program", "+=", "\"\"\"\n                    cmpl      $END, %r10d;\n                    jb  ..B1.NUM;\n                    \"\"\"", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "bb_offset", "+", "block", "*", "2", "+", "3", ")", ")", ".", "replace", "(", "\"END\"", ",", "str", "(", "TSZ", "//", "VEC", ")", ")", "\n", "program", "+=", "\"\\t}\"", "\n", "", "else", ":", "\n", "                    ", "if", "b_block", "==", "B_blocks", "-", "1", ":", "\n", "                        ", "for", "i", "in", "range", "(", "block_NY", ")", ":", "\n", "                            ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                                ", "asm_program", "+=", "\"\\t\\tvpmovdb %zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\",\"", "+", "\"%xmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "\n", "", "asm_program", "+=", "\"\"\"\n                            vinserti32x4 $1,%xmm1,%zmm0,%zmm0;\n                            vinserti32x4 $2,%xmm2,%zmm0,%zmm0;\n                            vinserti32x4 $3,%xmm3,%zmm0,%zmm0;\n                            \n                            \"\"\"", "\n", "asm_program", "+=", "\"vmovdqu32 %zmm\"", "+", "str", "(", "i", ")", "+", "\", \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", ")", "+", "\"(%rdx,%r11,1);\\n\"", "\n", "", "", "else", ":", "\n", "                        ", "for", "i", "in", "range", "(", "block_NY", ")", ":", "\n", "                            ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                                ", "asm_program", "+=", "\"\\t\\tvmovdqu32 %zmm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\", \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4);\\n\"", "\n", "\n", "\n", "", "", "", "asm_program", "+=", "\"\"\"\n                    cmpl      $END, %r10d;\n                    jb  ..B1.NUM;\n                    \"\"\"", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "bb_offset", "+", "block", "*", "2", "+", "3", ")", ")", ".", "replace", "(", "\"END\"", ",", "str", "(", "TSZ", "//", "VEC", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "program", "+=", "BLOCK_END_NHWC", ".", "replace", "(", "\"A_offset\"", ",", "str", "(", "A_offset", ")", ")", ".", "replace", "(", "\"Ny\"", ",", "str", "(", "block_NY", ")", ")", ".", "replace", "(", "\"A_BLOCKS\"", ",", "str", "(", "A_blocks", ")", ")", ".", "replace", "(", "\n", "\"C_BLOCKS\"", ",", "str", "(", "C_blocks", ")", ")", ".", "replace", "(", "\"A_dim\"", ",", "str", "(", "A_dim", ")", ")", ".", "replace", "(", "\"C_dim\"", ",", "str", "(", "C_dim", ")", ")", ".", "replace", "(", "\"B_dim\"", ",", "str", "(", "B_dim", ")", ")", "+", "\"\\n\"", "\n", "# program += BLOCK_CONTROL_END", "\n", "\n", "", "", "", "program", "+=", "END_NONFUSED", ".", "replace", "(", "\"AB_sparse_tidy.npy\"", ",", "name", ")", "\n", "open", "(", "outfile", ",", "\"w\"", ")", ".", "write", "(", "program", ".", "replace", "(", "\"B_dim\"", ",", "str", "(", "B_dim", ")", ")", ")", "\n", "asm_program", "+=", "\"\"\"\n    ..B1.NUM1:                        # Preds ..B1.17\n                                # Execution count [2.80e+01]\n        decl      %eax                                           #44.37\n        subl      $TSZ, %r9d                                    #44.37\n        cmpl      %eax, %edi                                      #44.33\n        jl        ..B1.2        # Prob 96%                      #44.33\n                                # LOE rcx rbx rbp rsi rdi r12 r13 r14 r15 eax dl ymm15\n..B1.NUM2:                        # Preds ..B1.18\n                                # Execution count [1.00e+00]\n        vzeroupper                                              #2398.1\n        movq %rbp, %rsp\n        popq    %rbp        \n        #call      pthread_exit@PLT                              #2416.1\n        ret\n..___tag_value__spmm.13:\n        .align    16,0x90\n                                # LOE\n        .cfi_endproc\n# mark_end;\n        .type   _spmm,@function\n        #.size   _spmm,-_spmm\n        ..LN_spmm.0:\n        .section .rodata\n        .balign 32\n        vpermt2d_control: .byte 0,4,16,20, 1,5,17,21, 2, 6, 18, 22,3,7,19,23 \n        vpshufb_control:  .byte 0,4,8,12,  1,5,9,13, 2,6,10,14, 3,7,11,15  \n# -- End  _spmm\n\n\n\n    \"\"\"", ".", "replace", "(", "\"TSZ\"", ",", "str", "(", "TSZ", ")", ")", ".", "replace", "(", "\"CBLOCKS\"", ",", "str", "(", "C_blocks", ")", ")", ".", "replace", "(", "\"NUM1\"", ",", "str", "(", "B_blocks", "*", "A_blocks", "*", "2", "+", "2", ")", ")", ".", "replace", "(", "\"NUM2\"", ",", "str", "(", "B_blocks", "*", "A_blocks", "*", "2", "+", "3", ")", ")", "\n", "\n", "if", "AVX512", ":", "\n", "        ", "asm_program", "=", "asm_program", ".", "replace", "(", "\"ymm\"", ",", "\"zmm\"", ")", "\n", "\n", "", "open", "(", "outfile_asm", ",", "\"w\"", ")", ".", "write", "(", "asm_program", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.emit_load_block": [[10, 36], ["LOAD_CACHE.replace", "LOAD_CACHE_ASM.replace().replace", "str", "str", "LOAD_CACHE_ASM.replace", "str"], "function", ["None"], ["def", "emit_load_block", "(", "index", ",", "currloadreg", ")", ":", "\n", "    ", "if", "X86", ":", "\n", "        ", "if", "AVX512", ":", "\n", "            ", "LOAD_CACHE", "=", "\"\"\"\n            RC = _mm512_load_ps(&BC[IDX + C_offset + lane]);\n            \n            //RC = _mm256_load_ps(&BC[(C_offset + lane) * B_dim + IDX]);\n            \"\"\"", "\n", "LOAD_CACHE_ASM", "=", "\"\"\"vmovups IDX(%r8,%r11,4), %zmmNUM;\n            \"\"\"", "\n", "", "else", ":", "\n", "            ", "LOAD_CACHE", "=", "\"\"\"\n            RC = _mm256_load_ps(&BC[IDX + C_offset + lane]);\n            \n            //RC = _mm256_load_ps(&BC[(C_offset + lane) * B_dim + IDX]);\n            \"\"\"", "\n", "LOAD_CACHE_ASM", "=", "\"\"\"vmovups IDX(%r8,%r11,4), %ymmNUM;\n            \"\"\"", "\n", "", "", "elif", "ARM", ":", "\n", "        ", "LOAD_CACHE", "=", "\"\"\"\n        RC = vld1q_f32(&BC[IDX + C_offset + lane]);\n        \"\"\"", "\n", "", "new_block", "=", "LOAD_CACHE", ".", "replace", "(", "\"IDX\"", ",", "str", "(", "index", ")", ")", "\n", "new_block_asm", "=", "LOAD_CACHE_ASM", ".", "replace", "(", "\"IDX\"", ",", "str", "(", "index", "*", "4", ")", ")", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", ")", ")", "\n", "#new_block = LOAD_CACHE.replace(\"IDX\",str(B_idx * 8))", "\n", "return", "new_block", ",", "new_block_asm", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.emit_compute_block": [[37, 113], ["AB_vals.append", "A_idx.append", "LOAD_WEIGHT.replace", "LOAD_WEIGHT_ASM.replace().replace", "range", "str", "MAIN_PROGRAM.replace", "MAIN_PROGRAM_ASM.replace().replace", "LOAD_WEIGHT.replace", "range", "LOAD_WEIGHT_ASM.replace", "str", "str", "str", "str", "MAIN_PROGRAM.replace", "MAIN_PROGRAM_ASM_ADD.replace().replace", "LOAD_WEIGHT.replace", "range", "str", "MAIN_PROGRAM_ASM.replace", "str", "str", "str", "MAIN_PROGRAM.replace", "MAIN_PROGRAM_ASM_SUB.replace().replace", "utils.float_to_hex", "str", "MAIN_PROGRAM_ASM_ADD.replace", "str", "str", "str", "MAIN_PROGRAM_ASM_SUB.replace", "str"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.utils.float_to_hex"], ["", "def", "emit_compute_block", "(", "Ny_idx", ",", "val", ",", "currloadreg", ",", "virg", "=", "False", ")", ":", "\n", "\n", "    ", "global", "off", "\n", "if", "X86", ":", "\n", "        ", "if", "AVX512", ":", "\n", "            ", "LOAD_WEIGHT", "=", "\"\"\"\n            val = _mm512_broadcast_ss(AB_val + OFF);\n            \"\"\"", "\n", "MAIN_PROGRAM", "=", "\"\"\"\n            //val = _mm256_set1_ps(VAL);\n            ACC[IDX_1] = _mm512_fmadd_ps(RC, val, ACC[IDX_1]);\n            \"\"\"", "\n", "LOAD_WEIGHT_ASM", "=", "\"\"\"vbroadcastss OFF(%rcx), %zmm31;\n            \"\"\"", "\n", "MAIN_PROGRAM_ASM", "=", "\"\"\"vfmadd231ps %zmmNUM, %zmm31, %zmmIDX_1;\n            \"\"\"", "\n", "\n", "", "else", ":", "\n", "            ", "LOAD_WEIGHT", "=", "\"\"\"\n            val = _mm256_broadcast_ss(AB_val + OFF);\n            \"\"\"", "\n", "MAIN_PROGRAM", "=", "\"\"\"\n            ACC[IDX_1] = _mm256_fmadd_ps(RC, val, ACC[IDX_1]);\n            \"\"\"", "\n", "LOAD_WEIGHT_ASM", "=", "\"\"\"vbroadcastss OFF(%rcx), %ymm15;\n            \"\"\"", "\n", "# LOAD_WEIGHT_ASM = \"\"\"mov $VAL, %r12d;", "\n", "# movd %r12d, %xmm0;", "\n", "# vbroadcastss %xmm0, %ymm15;", "\n", "# \"\"\"", "\n", "MAIN_PROGRAM_ASM", "=", "\"\"\"vfmadd231ps %ymmNUM, %ymm15, %ymmIDX_1;\n            \"\"\"", "\n", "MAIN_PROGRAM_ASM_SUB", "=", "\"\"\"vsubps %ymmNUM, %ymmIDX_1, %ymmIDX_1;\n            \"\"\"", "\n", "MAIN_PROGRAM_ASM_ADD", "=", "\"\"\"vaddps %ymmNUM, %ymmIDX_1, %ymmIDX_1;\n            \"\"\"", "\n", "\n", "# MAIN_PROGRAM_ASM_SUB=\"\"\"vpsubp %ymmNUM, %ymmIDX_1, %ymmIDX_1;", "\n", "# \"\"\"", "\n", "# MAIN_PROGRAM_ASM_ADD=\"\"\"vpaddb %ymmNUM, %ymmIDX_1, %ymmIDX_1;", "\n", "# \"\"\"", "\n", "\n", "MAIN_PROGRAM_ASM_VIRG", "=", "\"\"\"vbroadcastss OFF(%rcx), %ymm15;\n        vmul231ps %ymmNUM, %ymm15, %ymmIDX_1;\n            \"\"\"", "\n", "\n", "", "", "elif", "ARM", ":", "\n", "        ", "MAIN_PROGRAM", "=", "\"\"\"\n        val = vdupq_n_f32(VAL);\n        ACC[IDX_1] = vmlaq_f32(ACC[IDX_1], RC, val);\n        \"\"\"", "\n", "\n", "", "if", "val", "!=", "1", "and", "val", "!=", "-", "1", ":", "\n", "        ", "new_block", "=", "LOAD_WEIGHT", ".", "replace", "(", "\"OFF\"", ",", "str", "(", "off", ")", ")", "\n", "new_block_asm", "=", "LOAD_WEIGHT_ASM", ".", "replace", "(", "\"OFF\"", ",", "str", "(", "off", "*", "4", ")", ")", ".", "replace", "(", "\"VAL\"", ",", "\"0x\"", "+", "str", "(", "float_to_hex", "(", "val", ")", "[", "2", ":", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "CT", ")", ":", "\n", "            ", "new_block", "+=", "MAIN_PROGRAM", ".", "replace", "(", "\"IDX_1\"", ",", "str", "(", "Ny_idx", "+", "i", "*", "AT", ")", ")", "\n", "new_block_asm", "+=", "MAIN_PROGRAM_ASM", ".", "replace", "(", "\"IDX_1\"", ",", "str", "(", "Ny_idx", "+", "i", "*", "AT", ")", ")", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", "-", "i", ")", ")", "\n", "", "", "elif", "val", "==", "1", ":", "\n", "        ", "new_block", "=", "LOAD_WEIGHT", ".", "replace", "(", "\"OFF\"", ",", "str", "(", "off", ")", ")", "\n", "new_block_asm", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "CT", ")", ":", "\n", "            ", "new_block", "+=", "MAIN_PROGRAM", ".", "replace", "(", "\"IDX_1\"", ",", "str", "(", "Ny_idx", "+", "i", "*", "AT", ")", ")", "\n", "new_block_asm", "+=", "MAIN_PROGRAM_ASM_ADD", ".", "replace", "(", "\"IDX_1\"", ",", "str", "(", "Ny_idx", "+", "i", "*", "AT", ")", ")", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", "-", "i", ")", ")", "\n", "", "", "elif", "val", "==", "-", "1", ":", "\n", "        ", "new_block", "=", "LOAD_WEIGHT", ".", "replace", "(", "\"OFF\"", ",", "str", "(", "off", ")", ")", "\n", "new_block_asm", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "CT", ")", ":", "\n", "            ", "new_block", "+=", "MAIN_PROGRAM", ".", "replace", "(", "\"IDX_1\"", ",", "str", "(", "Ny_idx", "+", "i", "*", "AT", ")", ")", "\n", "new_block_asm", "+=", "MAIN_PROGRAM_ASM_SUB", ".", "replace", "(", "\"IDX_1\"", ",", "str", "(", "Ny_idx", "+", "i", "*", "AT", ")", ")", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "currloadreg", "-", "i", ")", ")", "\n", "", "", "global", "AB_vals", "\n", "AB_vals", ".", "append", "(", "val", ")", "\n", "global", "A_idx", "\n", "A_idx", ".", "append", "(", "Ny_idx", ")", "\n", "off", "+=", "1", "\n", "return", "new_block", ",", "new_block_asm", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.ny_to_a": [[115, 119], ["None"], "function", ["None"], ["", "def", "ny_to_a", "(", "ny_idx", ",", "groupId", ",", "blockId", ",", "A_dim", "=", "None", ",", "A_offset", "=", "None", ")", ":", "\n", "    ", "if", "A_offset", "is", "None", ":", "\n", "        ", "A_offset", "=", "blockId", "*", "(", "AT", ")", "\n", "", "return", "A_offset", "+", "ny_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.generate_from_B": [[121, 227], ["range", "set", "zip", "AB_block_offs.append", "range", "range", "code_gen_cpu.ny_to_a", "B_idx.append", "code_gen_cpu.emit_compute_block", "textwrap.indent", "textwrap.indent", "set.add", "len", "str", "str", "range", "range", "emit_load_smem_block", "textwrap.indent", "range", "code_gen_cpu.emit_load_block", "str", "str", "min", "code_gen_cpu.emit_load_block", "textwrap.indent", "textwrap.indent", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.ny_to_a", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.emit_compute_block", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.emit_load_block", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.emit_load_block"], ["", "def", "generate_from_B", "(", "Ny_indices", ",", "B_indices", ",", "BA", ",", "block", ",", "NY", ",", "BB_offset", ",", "GY", "=", "None", ",", "A_offset", "=", "None", ")", ":", "\n", "\n", "    ", "program", "=", "\"\"", "\n", "asm", "=", "\"\"", "\n", "\n", "assert", "GY", "==", "1", "\n", "for", "group", "in", "range", "(", "GY", ")", ":", "\n", "#program += GROUP_CONTROL_START.replace(\"GROUP\",str(group)) + \"\\n\"", "\n", "\n", "        ", "next_tile_start", "=", "0", "\n", "old_b_idx", "=", "-", "1", "\n", "\n", "if", "AVX512", ":", "\n", "            ", "asm", "+=", "\"\"\"\n        ..B1.NUM1:\n        xorl    %r10d, %r10d;\n        ..B1.NUM2:\n        imul      $16,  %r10d, %r11d;\n        add       %r9d, %r11d;\n        movslq  %r11d, %r11;\n        add     $CT,    %r10d;\n        \"\"\"", ".", "replace", "(", "\"NUM1\"", ",", "str", "(", "BB_offset", "+", "block", "*", "2", "+", "2", ")", ")", ".", "replace", "(", "\"NUM2\"", ",", "str", "(", "BB_offset", "+", "block", "*", "2", "+", "3", ")", ")", ".", "replace", "(", "\"STRIDE\"", ",", "str", "(", "8", ")", ")", ".", "replace", "(", "\"CT\"", ",", "str", "(", "CT", ")", ")", "\n", "", "else", ":", "\n", "            ", "asm", "+=", "\"\"\"\n        ..B1.NUM1:\n        xorl    %r10d, %r10d;\n        ..B1.NUM2:\n        lea       (%r9,%r10,8), %r11d;\n        movslq  %r11d, %r11;\n        add     $CT,    %r10d;\n        \"\"\"", ".", "replace", "(", "\"NUM1\"", ",", "str", "(", "BB_offset", "+", "block", "*", "2", "+", "2", ")", ")", ".", "replace", "(", "\"NUM2\"", ",", "str", "(", "BB_offset", "+", "block", "*", "2", "+", "3", ")", ")", ".", "replace", "(", "\"CT\"", ",", "str", "(", "CT", ")", ")", "\n", "\n", "\n", "#print(A_offset)", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "            ", "for", "i", "in", "range", "(", "NY", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                    ", "if", "BB_offset", ">", "0", ":", "\n", "                        ", "asm", "+=", "\"\\t\\tvmovups \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4)\"", "+", "(", "\",%zmm\"", "if", "AVX512", "else", "\",%ymm\"", ")", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "", "else", ":", "\n", "                        ", "asm", "+=", "\"\\tvbroadcastss \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "4", ")", "+", "(", "\"(%rsi), %zmm\"", "if", "AVX512", "else", "\"(%rsi), %ymm\"", ")", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\";\\n\"", "\n", "", "", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "NY", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                    ", "if", "BB_offset", ">", "0", ":", "\n", "                        ", "asm", "+=", "\"\\t\\tvmovups \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4)\"", "+", "(", "\",%zmm\"", "if", "AVX512", "else", "\",%ymm\"", ")", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "", "else", ":", "\n", "                        ", "asm", "+=", "\"\\tvxorps \"", "+", "(", "\"%zmm\"", "if", "AVX512", "else", "\"%ymm\"", ")", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\",\"", "+", "(", "\"%zmm\"", "if", "AVX512", "else", "\"%ymm\"", ")", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\",\"", "+", "(", "\"%zmm\"", "if", "AVX512", "else", "\"%ymm\"", ")", "+", "str", "(", "i", "+", "AT", "*", "j", ")", "+", "\";\\n\"", "\n", "\n", "", "", "", "", "done", "=", "set", "(", ")", "\n", "loads", "=", "\"\"", "\n", "computes", "=", "\"\"", "\n", "\n", "if", "AVX512", ":", "\n", "            ", "TOK", "=", "24", "\n", "", "else", ":", "\n", "            ", "TOK", "=", "13", "\n", "", "currloadreg", "=", "TOK", "\n", "for", "ny_idx", ",", "b_idx", "in", "zip", "(", "Ny_indices", "[", "group", "]", ",", "B_indices", "[", "group", "]", ")", ":", "\n", "\n", "            ", "if", "IN_FORMAT", "==", "\"NHWC\"", ":", "\n", "                ", "if", "old_b_idx", "<", "next_tile_start", "and", "b_idx", ">=", "next_tile_start", ":", "\n", "                    ", "smem_block", "=", "emit_load_smem_block", "(", "min", "(", "TSB", ",", "B_dim", "-", "next_tile_start", ")", ",", "next_tile_start", "//", "TSB", ")", "\n", "program", "+=", "textwrap", ".", "indent", "(", "smem_block", ",", "\"\\t\"", ")", "\n", "next_tile_start", "+=", "TSB", "\n", "\n", "", "", "if", "b_idx", "!=", "old_b_idx", ":", "\n", "                ", "if", "IN_FORMAT", "==", "\"NCHW\"", ":", "\n", "                    ", "currloadreg", "=", "TOK", "#(currloadreg - TOK + 1) % 6 + TOK", "\n", "if", "currloadreg", "==", "TOK", ":", "\n", "                        ", "asm", "+=", "loads", "\n", "asm", "+=", "computes", "\n", "loads", "=", "\"\"", "\n", "computes", "=", "\"\"", "\n", "", "for", "i", "in", "range", "(", "CT", ")", ":", "\n", "                        ", "load_block_cuda", ",", "load_block_asm", "=", "emit_load_block", "(", "b_idx", "*", "C_dim", "+", "i", "*", "VEC", ",", "currloadreg", "-", "i", ")", "\n", "loads", "+=", "textwrap", ".", "indent", "(", "load_block_asm", ",", "\"\\t\"", ")", "\n", "program", "+=", "textwrap", ".", "indent", "(", "load_block_cuda", ",", "\"\\t\"", ")", "\n", "", "", "else", ":", "\n", "                    ", "load_block_cuda", ",", "load_block_asm", "=", "emit_load_block", "(", "b_idx", ",", "next_tile_start", "-", "TSB", ")", "\n", "\n", "\n", "\n", "", "old_b_idx", "=", "b_idx", "\n", "\n", "", "a_idx", "=", "ny_to_a", "(", "ny_idx", ",", "group", ",", "block", ",", "A_dim", "=", "A_dim", ",", "A_offset", "=", "A_offset", ")", "\n", "value", "=", "BA", "[", "b_idx", ",", "a_idx", "]", "\n", "global", "B_idx", "\n", "B_idx", ".", "append", "(", "b_idx", ")", "\n", "compute_block_cuda", ",", "compute_block_asm", "=", "emit_compute_block", "(", "ny_idx", ",", "value", ",", "currloadreg", ",", "virg", "=", "ny_idx", "not", "in", "done", ")", "\n", "computes", "+=", "textwrap", ".", "indent", "(", "compute_block_asm", ",", "\"\\t\"", ")", "\n", "program", "+=", "textwrap", ".", "indent", "(", "compute_block_cuda", ",", "\"\\t\"", ")", "\n", "\n", "done", ".", "add", "(", "ny_idx", ")", "\n", "\n", "\n", "\n", "", "asm", "+=", "loads", "\n", "asm", "+=", "computes", "\n", "#print(block,group)", "\n", "#program += GROUP_CONTROL_END + \"\\n\"", "\n", "global", "AB_block_offs", "\n", "AB_block_offs", ".", "append", "(", "len", "(", "AB_vals", ")", ")", "\n", "\n", "", "return", "program", ",", "asm", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.get_idx_balanced": [[229, 251], ["numpy.sum", "range", "range", "range", "range", "numpy.abs", "code_gen_cpu.ny_to_a", "numpy.abs", "B_indices[].append", "Ny_indices[].append"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.ny_to_a"], ["", "def", "get_idx_balanced", "(", "block", ",", "BA", ",", "A_offset", ",", "block_NY", ",", "B_bounds", "=", "None", ",", "GY", "=", "None", ")", ":", "\n", "\n", "    ", "BA", "=", "BA", "[", "B_bounds", "[", "0", "]", ":", "B_bounds", "[", "1", "]", "]", "\n", "Ny_indices", "=", "[", "[", "]", "for", "i", "in", "range", "(", "GY", ")", "]", "\n", "B_indices", "=", "[", "[", "]", "for", "i", "in", "range", "(", "GY", ")", "]", "\n", "nnz", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "BA", "[", ":", ",", "A_offset", ":", "A_offset", "+", "block_NY", "]", ")", ">", "EPS", ")", "\n", "nnz_per_group", "=", "nnz", "//", "GY", "\n", "curr_group", "=", "0", "\n", "curr_nnz", "=", "0", "\n", "for", "B_idx", "in", "range", "(", "B_dim", "//", "B_blocks", ")", ":", "\n", "        ", "for", "ny", "in", "range", "(", "block_NY", ")", ":", "\n", "            ", "assert", "curr_group", "<", "GY", "\n", "A_idx", "=", "ny_to_a", "(", "ny", ",", "curr_group", ",", "block", ",", "A_dim", "=", "A_dim", ",", "A_offset", "=", "A_offset", ")", "\n", "if", "np", ".", "abs", "(", "BA", "[", "B_idx", ",", "A_idx", "]", ")", ">", "EPS", ":", "\n", "                ", "B_indices", "[", "curr_group", "]", ".", "append", "(", "B_idx", "+", "B_bounds", "[", "0", "]", ")", "\n", "Ny_indices", "[", "curr_group", "]", ".", "append", "(", "ny", ")", "\n", "curr_nnz", "+=", "1", "\n", "", "if", "curr_nnz", ">", "nnz_per_group", ":", "\n", "                ", "curr_group", "+=", "1", "\n", "curr_nnz", "=", "0", "\n", "\n", "", "", "", "return", "Ny_indices", ",", "B_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.no_load_balance": [[252, 260], ["range"], "function", ["None"], ["", "def", "no_load_balance", "(", "BA", ",", "A_blocks", ")", ":", "\n", "\n", "#assert A_dim % A_blocks == 0", "\n", "    ", "interval", "=", "AT", "\n", "\n", "bounds", "=", "[", "interval", "*", "i", "for", "i", "in", "range", "(", "A_blocks", ")", "]", "+", "[", "A_dim", "]", "\n", "\n", "return", "bounds", ",", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.load_balancer2": [[261, 272], ["numpy.sum", "numpy.cumsum", "numpy.diff", "numpy.max", "numpy.argmax", "numpy.abs", "range", "numpy.abs"], "function", ["None"], ["", "def", "load_balancer2", "(", "BA", ")", ":", "\n", "\n", "    ", "total_nnz", "=", "(", "np", ".", "abs", "(", "BA", ")", ">", "EPS", ")", ".", "sum", "(", ")", "\n", "nnz_per_block", "=", "total_nnz", "/", "A_blocks", "\n", "sums", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "BA", ")", ">", "EPS", ",", "axis", "=", "0", ")", "\n", "cs", "=", "np", ".", "cumsum", "(", "sums", ")", "\n", "bounds", "=", "[", "np", ".", "argmax", "(", "cs", ">", "nnz_per_block", "*", "i", ")", "for", "i", "in", "range", "(", "A_blocks", ")", "]", "\n", "bounds", "=", "bounds", "+", "[", "A_dim", "]", "\n", "nnzs", "=", "np", ".", "diff", "(", "bounds", ")", "\n", "NY", "=", "np", ".", "max", "(", "nnzs", ")", "\n", "return", "bounds", ",", "NY", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.gencode": [[275, 433], ["code_gen_cpu.no_load_balance", "range", "END_NONFUSED.replace", "open().write", "open().write", "START_NONFUSED.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "range", "program.replace", "str", "asm_program.replace.replace", "str", "code_gen_cpu.get_idx_balanced", "code_gen_cpu.generate_from_B", "open", "str", "open", "START_NONFUSED.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "int", "BLOCK_CONTROL_START.replace().replace", "textwrap.indent", "textwrap.indent", "str", "str", "str", "range", "BLOCK_END_NHWC.replace().replace().replace().replace().replace().replace().replace", "str", "START_NONFUSED.replace().replace().replace().replace().replace().replace().replace().replace().replace", "int", "BLOCK_CONTROL_START.replace", "print", "BLOCK_END_REDUCTION.replace().replace().replace", "range", "str", "range", "str", "str", "str", "str", "str", "str", "range", "range", "range", "BLOCK_END_NHWC.replace().replace().replace().replace().replace().replace", "START_NONFUSED.replace().replace().replace().replace().replace().replace().replace().replace", "BLOCK_END_REDUCTION.replace().replace", "str", "range", "range", "str", "str", "str", "str", "str", "str", "range", "BLOCK_END_NHWC.replace().replace().replace().replace().replace", "START_NONFUSED.replace().replace().replace().replace().replace().replace().replace", "BLOCK_END_REDUCTION.replace", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "BLOCK_END_NHWC.replace().replace().replace().replace", "START_NONFUSED.replace().replace().replace().replace().replace().replace", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "BLOCK_END_NHWC.replace().replace().replace", "START_NONFUSED.replace().replace().replace().replace().replace", "str", "str", "str", "BLOCK_END_NHWC.replace().replace", "START_NONFUSED.replace().replace().replace().replace", "str", "str", "BLOCK_END_NHWC.replace", "START_NONFUSED.replace().replace().replace", "str", "str", "START_NONFUSED.replace().replace", "START_NONFUSED.replace"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.no_load_balance", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.get_idx_balanced", "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.code_gen_cpu.generate_from_B"], ["", "def", "gencode", "(", "BA", ",", "C_dim", ",", "A_blocks", ",", "C_blocks", ",", "name", "=", "None", ")", ":", "\n", "    ", "program", "=", "\"\"", "\n", "asm_program", "=", "\"\"\"\n# -- Begin  _FUNCNAME\n        .text\n# mark_begin;\n       .align    16,0x90\n        .globl _FUNCNAME\n# --- mm(void *)\n_FUNCNAME:\n# parameter 1: %rdi\n..B1.1:                         # Preds ..B1.0\n                                # Execution count [9.00e-01]\n        .cfi_startproc\n..___tag_value__FUNCNAME.1:\n..L2:\n                                                          #45.1\n        pushq     %rbp                                          #45.1\n        .cfi_def_cfa_offset 16\n        movq      %rsp, %rbp                                    #45.1\n        .cfi_def_cfa 6, 16\n        .cfi_offset 6, -16\n        andq      $-32, %rsp                                    #45.1\n        subq      $96, %rsp                                     #45.1\n        movq      (%rdi), %rcx                                  #47.38\n        movq      8(%rdi), %rsi                                 #48.46\n        movq      16(%rdi), %r8                                 #49.41\n        movq      24(%rdi), %rdx                                #50.22\n        movl      36(%rdi), %eax\n        movl      32(%rdi), %edi                                #51.21\n        vxorps    ZERO, ZERO, ZERO                           #59.19\n        decl    %eax\n        decl    %edi\n        imul     $TSZ, %eax, %r9d\n\n\n\n    \"\"\"", ".", "replace", "(", "\"TSZ\"", ",", "str", "(", "TSZ", ")", ")", ".", "replace", "(", "\"ZERO\"", ",", "\"%zmm30\"", "if", "AVX512", "else", "\"%ymm14\"", ")", ".", "replace", "(", "\"FUNCNAME\"", ",", "FUNC_NAME", ")", "\n", "\n", "#assert A_dim % A_blocks == 0", "\n", "#assert C_dim % C_blocks == 0", "\n", "B_dim", "=", "BA", ".", "shape", "[", "0", "]", "\n", "\n", "# if IN_FORMAT == \"NCHW\" and OUT_FORMAT == \"NCHW\":", "\n", "#     bounds, NY = load_balancer2(BA)", "\n", "# else:", "\n", "bounds", ",", "NY", "=", "no_load_balance", "(", "BA", ",", "A_blocks", ")", "\n", "\n", "program", "+=", "START_NONFUSED", ".", "replace", "(", "\"OUTPUT_FORMAT\"", ",", "OUT_FORMAT", ")", ".", "replace", "(", "\"INPUT_FORMAT\"", ",", "IN_FORMAT", ")", ".", "replace", "(", "\"Ny\"", ",", "str", "(", "NY", ")", ")", ".", "replace", "(", "\"GY\"", ",", "str", "(", "GY", ")", ")", ".", "replace", "(", "\"A_dim\"", ",", "str", "(", "A_dim", ")", ")", ".", "replace", "(", "\n", "\"C_dim\"", ",", "str", "(", "C_dim", ")", ")", ".", "replace", "(", "\"B_dim\"", ",", "str", "(", "B_dim", ")", ")", ".", "replace", "(", "\"A_BLOCKS\"", ",", "str", "(", "A_blocks", ")", ")", ".", "replace", "(", "\"C_BLOCKS\"", ",", "str", "(", "C_blocks", ")", ")", ".", "replace", "(", "\"X86_DEF\"", ",", "str", "(", "int", "(", "X86", ")", ")", ")", ".", "replace", "(", "\"ARM_DEF\"", ",", "str", "(", "int", "(", "ARM", ")", ")", ")", "+", "\"\\n\"", "\n", "\n", "assert", "B_dim", "%", "B_blocks", "==", "0", "\n", "block_size", "=", "B_dim", "//", "B_blocks", "\n", "for", "b_block", "in", "range", "(", "B_blocks", ")", ":", "\n", "        ", "bb_offset", "=", "b_block", "*", "A_blocks", "*", "2", "\n", "for", "block", "in", "range", "(", "A_blocks", ")", ":", "\n", "            ", "A_offset", "=", "bounds", "[", "block", "]", "\n", "block_NY", "=", "bounds", "[", "block", "+", "1", "]", "-", "A_offset", "\n", "program", "+=", "BLOCK_CONTROL_START", ".", "replace", "(", "\"BLOCK\"", ",", "str", "(", "block", ")", ")", ".", "replace", "(", "\"Ny\"", ",", "str", "(", "block_NY", ")", ")", "+", "\"\\n\"", "\n", "\n", "\n", "Ny_indices", ",", "B_indices", "=", "get_idx_balanced", "(", "block", ",", "BA", ",", "A_offset", ",", "block_NY", ",", "B_bounds", "=", "[", "b_block", "*", "block_size", ",", "(", "b_block", "+", "1", ")", "*", "block_size", "]", ",", "GY", "=", "GY", ")", "\n", "#import pdb;pdb.set_trace()", "\n", "ccode", ",", "asm", ",", "done", "=", "generate_from_B", "(", "Ny_indices", ",", "B_indices", ",", "BA", ",", "block", ",", "block_NY", ",", "bb_offset", ",", "GY", "=", "GY", ",", "A_offset", "=", "A_offset", ")", "\n", "#ccode = generate_c_stem(block_NY)", "\n", "\n", "program", "+=", "textwrap", ".", "indent", "(", "ccode", ",", "\"\\t\"", ")", "+", "\"\\n\"", "\n", "asm_program", "+=", "textwrap", ".", "indent", "(", "asm", ",", "\"\\t\"", ")", "+", "\"\\n\"", "\n", "if", "OUT_FORMAT", "==", "\"NCHW\"", ":", "\n", "                ", "if", "FUSE_END", ":", "\n", "                    ", "if", "GY", ">", "1", ":", "\n", "                        ", "print", "(", "\"End fusion strategy not valid.\"", ")", "\n", "", "for", "i", "in", "range", "(", "block_NY", ")", ":", "\n", "                        ", "program", "+=", "BLOCK_END_REDUCTION", ".", "replace", "(", "\"OFFSET\"", ",", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", ")", ")", ".", "replace", "(", "\"IDX\"", ",", "str", "(", "i", ")", ")", ".", "replace", "(", "\"BIAS\"", ",", "str", "(", "A_offset", "+", "i", ")", ")", "\n", "if", "not", "NO_RELU", ":", "\n", "                            ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                                ", "asm_program", "+=", "\"\\t\\tvmaxps %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "(", "\", %zmm30,\"", "if", "AVX512", "else", "\", %ymm14,\"", ")", "+", "\"%ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "", "", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "# vcmpltps %ymm0, %ymm14, %ymm0", "\n", "#  vmovups msg(%rip), %ymm14", "\n", "#  vminps %ymm14, %ymm0, %ymm0", "\n", "\n", "                            ", "asm_program", "+=", "\"\\t\\tvmovups %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\", \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4);\\n\"", "\n", "\n", "", "", "asm_program", "+=", "\"\"\"\n                    cmpl      $END, %r10d;\n                    jb  ..B1.NUM;\n                    \"\"\"", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "bb_offset", "+", "block", "*", "2", "+", "3", ")", ")", ".", "replace", "(", "\"END\"", ",", "str", "(", "TSZ", "//", "VEC", ")", ")", "\n", "program", "+=", "\"\\t}\"", "\n", "", "else", ":", "\n", "                    ", "if", "EPI", "==", "\"LT\"", ":", "\n", "                        ", "for", "i", "in", "range", "(", "block_NY", ")", ":", "\n", "                            ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                                ", "asm_program", "+=", "\"\\t\\tvbroadcastss \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "4", ")", "+", "\"(%rsi), \"", "+", "(", "\"%zmm30;\"", "if", "AVX512", "else", "\" %ymm14;\"", ")", "+", "\"\\n\"", "\n", "asm_program", "+=", "\"\\t\\tvcmpltps %ymm14, %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\",%ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "asm_program", "+=", "\"\\t\\tvmovups msg(%rip), %ymm14;\\n\"", "\n", "asm_program", "+=", "\"\\t\\tvminps %ymm14, %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\", %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "asm_program", "+=", "\"\\t\\tvmovups %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\", \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4);\\n\"", "\n", "", "", "", "elif", "EPI", "==", "\"EQ\"", ":", "\n", "                        ", "for", "i", "in", "range", "(", "block_NY", ")", ":", "\n", "                            ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                                ", "asm_program", "+=", "\"\\t\\tvbroadcastss \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "4", ")", "+", "\"(%rsi), \"", "+", "(", "\"%zmm30;\"", "if", "AVX512", "else", "\" %ymm14;\"", ")", "+", "\"\\n\"", "\n", "asm_program", "+=", "\"\\t\\tvcmpeqps %ymm14, %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\",%ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "asm_program", "+=", "\"\\t\\tvmovups msg(%rip), %ymm14;\\n\"", "\n", "asm_program", "+=", "\"\\t\\tvminps %ymm14, %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\", %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\";\\n\"", "\n", "asm_program", "+=", "\"\\t\\tvmovups %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\", \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4);\\n\"", "\n", "", "", "", "elif", "EPI", "==", "\"NONE\"", ":", "\n", "                        ", "for", "i", "in", "range", "(", "block_NY", ")", ":", "\n", "                            ", "for", "j", "in", "range", "(", "CT", ")", ":", "\n", "                                ", "asm_program", "+=", "\"\\t\\tvmovups %ymm\"", "+", "str", "(", "i", "+", "j", "*", "AT", ")", "+", "\", \"", "+", "str", "(", "mapping", "[", "A_offset", "+", "i", "]", "*", "C_dim", "*", "4", "+", "j", "*", "VEC", "*", "4", ")", "+", "\"(%rdx,%r11,4);\\n\"", "\n", "", "", "", "asm_program", "+=", "\"\"\"\n                    cmpl      $END, %r10d;\n                    jb  ..B1.NUM;\n                    \"\"\"", ".", "replace", "(", "\"NUM\"", ",", "str", "(", "bb_offset", "+", "block", "*", "2", "+", "3", ")", ")", ".", "replace", "(", "\"END\"", ",", "str", "(", "TSZ", "//", "VEC", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "program", "+=", "BLOCK_END_NHWC", ".", "replace", "(", "\"A_offset\"", ",", "str", "(", "A_offset", ")", ")", ".", "replace", "(", "\"Ny\"", ",", "str", "(", "block_NY", ")", ")", ".", "replace", "(", "\"A_BLOCKS\"", ",", "str", "(", "A_blocks", ")", ")", ".", "replace", "(", "\n", "\"C_BLOCKS\"", ",", "str", "(", "C_blocks", ")", ")", ".", "replace", "(", "\"A_dim\"", ",", "str", "(", "A_dim", ")", ")", ".", "replace", "(", "\"C_dim\"", ",", "str", "(", "C_dim", ")", ")", ".", "replace", "(", "\"B_dim\"", ",", "str", "(", "B_dim", ")", ")", "+", "\"\\n\"", "\n", "# program += BLOCK_CONTROL_END", "\n", "\n", "", "", "", "program", "+=", "END_NONFUSED", ".", "replace", "(", "\"AB_sparse_tidy.npy\"", ",", "name", ")", "\n", "open", "(", "outfile", ",", "\"w\"", ")", ".", "write", "(", "program", ".", "replace", "(", "\"B_dim\"", ",", "str", "(", "B_dim", ")", ")", ")", "\n", "asm_program", "+=", "\"\"\"\n    ..B1.NUM1:                        # Preds ..B1.17\n                                # Execution count [2.80e+01]\n        decl      %eax                                           #44.37\n        subl      $TSZ, %r9d                                    #44.37\n        cmpl      %eax, %edi                                      #44.33\n        jl        ..B1.2        # Prob 96%                      #44.33\n                                # LOE rcx rbx rbp rsi rdi r12 r13 r14 r15 eax dl ymm15\n..B1.NUM2:                        # Preds ..B1.18\n                                # Execution count [1.00e+00]\n        vzeroupper                                              #2398.1\n        movq %rbp, %rsp\n        popq    %rbp        \n        #call      pthread_exit@PLT                              #2416.1\n        ret\n..___tag_value__FUNCNAME.13:\n        .align    16,0x90\n                                # LOE\n        .cfi_endproc\n# mark_end;\n        .type   _FUNCNAME,@function\n        .size   _FUNCNAME,.-_FUNCNAME\n..LN_FUNCNAME.0:\n        .section .rodata\n        .balign 32\n        msg:\n.long   0x3f800000,0x3f800000,0x3f800000,0x3f800000,0x3f800000,0x3f800000,0x3f800000,0x3f800000\n# -- End  _FUNCNAME\n\n\n\n    \"\"\"", ".", "replace", "(", "\"FUNCNAME\"", ",", "FUNC_NAME", ")", ".", "replace", "(", "\"TSZ\"", ",", "str", "(", "TSZ", ")", ")", ".", "replace", "(", "\"CBLOCKS\"", ",", "str", "(", "C_blocks", ")", ")", ".", "replace", "(", "\"NUM1\"", ",", "str", "(", "B_blocks", "*", "A_blocks", "*", "2", "+", "2", ")", ")", ".", "replace", "(", "\"NUM2\"", ",", "str", "(", "B_blocks", "*", "A_blocks", "*", "2", "+", "3", ")", ")", "\n", "\n", "if", "AVX512", ":", "\n", "        ", "asm_program", "=", "asm_program", ".", "replace", "(", "\"ymm\"", ",", "\"zmm\"", ")", "\n", "\n", "", "open", "(", "outfile_asm", ",", "\"w\"", ")", ".", "write", "(", "asm_program", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.utils.dec_to_2s": [[6, 18], ["bin", "utils.dec_to_2s", "len"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.utils.dec_to_2s"], ["def", "dec_to_2s", "(", "number", ",", "width", ")", ":", "\n", "    ", "if", "number", ">", "0", ":", "\n", "        ", "result", "=", "bin", "(", "number", ")", "\n", "pad_l", "=", "width", "-", "(", "len", "(", "result", ")", "-", "2", ")", "\n", "if", "pad_l", "<", "0", ":", "\n", "            ", "return", "\"Error not enough bits\"", "\n", "", "else", ":", "\n", "            ", "return", "\"0\"", "*", "pad_l", "+", "result", "[", "2", ":", "]", "\n", "", "", "elif", "number", "==", "0", ":", "\n", "        ", "return", "\"0\"", "*", "width", "\n", "", "else", ":", "\n", "        ", "return", "dec_to_2s", "(", "number", "+", "2", "**", "width", ",", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.utils.float_to_hex": [[19, 23], ["struct.pack", "hex().upper().replace", "struct.unpack", "hex().upper", "hex", "int", "utils.dec_to_2s"], "function", ["home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.utils.dec_to_2s"], ["", "", "def", "float_to_hex", "(", "number", ")", ":", "\n", "    ", "s", "=", "struct", ".", "pack", "(", "'>f'", ",", "number", ")", "\n", "bits", "=", "struct", ".", "unpack", "(", "'>l'", ",", "s", ")", "[", "0", "]", "\n", "return", "hex", "(", "int", "(", "dec_to_2s", "(", "bits", ",", "32", ")", ",", "2", ")", ")", ".", "upper", "(", ")", ".", "replace", "(", "\"X\"", ",", "\"f\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.utils.half_to_hex": [[24, 27], ["[].zfill", "hex", "numpy.float16().view", "numpy.float16"], "function", ["None"], ["", "def", "half_to_hex", "(", "number", ")", ":", "\n", "    ", "s", "=", "hex", "(", "np", ".", "float16", "(", "number", ")", ".", "view", "(", "'H'", ")", ")", "[", "2", ":", "]", ".", "zfill", "(", "4", ")", "\n", "return", "\"0x\"", "+", "s", "+", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.utils.hex_to_bin": [[28, 32], ["[].zfill", "bin", "int"], "function", ["None"], ["", "def", "hex_to_bin", "(", "hex_string", ")", ":", "\n", "    ", "scale", "=", "16", "## equals to hexadecimal", "\n", "num_of_bits", "=", "16", "\n", "return", "bin", "(", "int", "(", "hex_string", ",", "scale", ")", ")", "[", "2", ":", "]", ".", "zfill", "(", "num_of_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marsupialtail_sparsednn.None.utils.bin_to_half": [[33, 39], ["int", "int", "int", "numpy.ceil", "numpy.log10"], "function", ["None"], ["", "def", "bin_to_half", "(", "bin_string", ")", ":", "\n", "    ", "sign", "=", "int", "(", "bin_string", "[", "0", "]", ")", "\n", "exponent", "=", "int", "(", "bin_string", "[", "1", ":", "6", "]", ",", "2", ")", "\n", "mantissa", "=", "int", "(", "bin_string", "[", "6", ":", "]", ",", "2", ")", "\n", "factor", "=", "10", "**", "np", ".", "ceil", "(", "np", ".", "log10", "(", "mantissa", ")", ")", "\n", "return", "(", "-", "1", ")", "**", "sign", "*", "2", "**", "(", "exponent", "-", "15", ")", "*", "(", "1", "+", "mantissa", "/", "factor", ")", "\n", "", ""]]}